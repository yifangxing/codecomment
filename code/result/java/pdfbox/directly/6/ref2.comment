1 private constructor
2 Creates a new OperatorProcessor. @param context the processing context to be used
3 Constructor.
4 Creates a new {@link COSUpdateState} for the given {@link COSUpdateInfo}. @param updateInfo The {@link COSUpdateInfo}, that shall be managed by this {@link COSUpdateState}.
5 Constructs an empty DecodeOptions instance
6 Constructs an instance specifying the region of the image that should be decoded. The actual region will be clipped to the dimensions of the image. @param sourceRegion Region of the source image that should be decoded
7 Constructs an instance specifying the image should be decoded using subsampling. The subsampling will be the same for the X and Y axes. @param subsampling The number of rows and columns to advance in the source for each pixel in the decoded image.
8 Constructor.
9 Creates a new instance of PageExtractor @param sourceDocument The document to split. @param startPage The first page you want extracted (1-based, inclusive) @param endPage The last page you want extracted (1-based, inclusive)
10 Default constructor. @param cosParser the parser to be used to read the pdf.
11 Creates a crossreference stream entry of the given {@link XReferenceType}. @param type The {@link XReferenceType} of the crossreference stream entry.
12 This will create a new content stream writer. @param out The stream to write the data to.
13 Constructor providing a parameter to enable/disable the stable object cache. @param enableStableCache enables/disables the stable object cache
14 Constructor. Internal PDFBox use only! If you need to get the document catalog, call {@link PDDocument#getDocumentCatalog()}. @param doc The document that this catalog is part of. @param rootDictionary The root dictionary that this object wraps.
15 Constructor that is used for a preexisting dictionary. @param dic The underlying dictionary.
16 Constructor. @param dict The dictionary of names and corresponding destinations.
17 Constructor. @param cat The document that this dictionary is part of. @param names The names dictionary.
18 Creates a new instance of PDPage for reading. @param pageDictionary A page dictionary in a PDF document.
19 Creates a new instance of PDPage for reading. @param pageDictionary A page dictionary in a PDF document.
20 Constructor for this map. @param actualsMap The map with standard java objects as values. @param dicMap The map with COSBase objects as values.
21 Creates a new instance with a given COS dictionary. @param dictionary the dictionary
22 Constructor. @param dict The dictionary that holds the name information.
23 Constructor. @param dict The dictionary that holds the number information. @param valueClass The PD Model type of object that is the value.
24 Creates a new page label range object from the given dictionary. @param dict the base dictionary for the new object.
25 Constructor assumes a starting index of 0. @param range The array that describes the range.
26 Constructor with an index into an array. Because some arrays specify multiple ranges ie [ 0,1, 0,2, 2,3 ] It is convenient for this class to take an index into an array. So if you want this range to represent 0,2 in the above example then you would say <code>new PDRange( array, 1 )</code>. @param range The array that describes the index @param index The range index into the array for the start of the range.
27 Creates a PDStream which wraps the given COSStream. @param str The stream parameter.
28 Constructor for an existing MarkInfo element. @param dic The existing dictionary.
29 Constructor for an existing marked content reference. @param dictionary the page dictionary
30 Constructor for an existing object reference. @param theDictionary The existing dictionary.
31 Constructor for an existing structure node. @param dictionary The existing dictionary.
32 Constructor.
33 Constructor for subclasses. @param dict the dictionary to be used to create an instance of PDPropertyList
34 Constructor for an existing BoxStyle element. @param dic The existing dictionary.
35 Create a new access permission object. By default, all permissions are granted.
36 Creates a new access permission object from a single integer. @param permissions The permission bits.
37 creates a new crypt filter dictionary from the low level dictionary provided. @param d the low level dictionary that will be managed by the newly created object
38 Constructor.
39 Constructor. @param a The FDF annotation.
40 Constructor. @param cat The FDF documents catalog.
41 Constructor. @param fdfDictionary The FDF documents catalog.
42 Constructor. @param f The FDF field.
43 Constructor. @param f The icon fit dictionary.
44 Constructor. @param javaScript The FDF java script.
45 Constructor. @param r The FDF named page reference dictionary.
46 Constructor. @param o The option element.
47 Constructor. @param p The FDF page.
48 Constructor. @param p The FDF page.
49 Constructor. @param t The FDF page template.
50 Creates a PDFontDescriptor from a COS dictionary. @param desc The wrapped COS Dictionary.
51 Constructs a font setting from an existing array. @param fs The new font setting value.
52 Creates a new line dash pattern, with no dashes and a phase of 0.
53 Private constructor due to the limited set of possible blend modes. @param name the corresponding COSName of the blend mode @param blendChannel the blend function for separable blend modes @param blend the blend function for non-separable blend modes
54 Creates a PDColor containing the given pattern name. @param patternName the name of a pattern in a pattern dictionary @param colorSpace color space in which the pattern is defined
55 Creates a new DeviceN colour space attributes dictionary from the given dictionary. @param attributes a dictionary that has all of the attributes
56 Creates a new DeviceN Process Dictionary from the given attributes. @param attributes a DeviceN attributes dictionary
57 Creates a new gamma from a COS array. @param array the array containing the XYZ values
58 Constructor from COS object. @param array the array containing the XYZ values
59 Creates a group object from a given dictionary @param dic {@link COSDictionary} object
60 Creates a new instance based on a given {@link COSDictionary}. @param props the dictionary
61 Creates a new Pattern dictionary from the given COS dictionary. @param dictionary The COSDictionary for this pattern.
62 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
63 Create a graphics state from an existing dictionary. @param dictionary The existing graphics state. @param resourceCache Resource cache, may be null.
64 Creates a new soft mask. @param dictionary The soft mask dictionary. @param resourceCache Resource cache, may be null.
65 Constructor. @param a The action dictionary.
66 Utility Class.
67 Constructor. @param a The action dictionary.
68 Constructor. @param a The action dictionary.
69 Constructor. @param a The action dictionary.
70 Constructor. @param a The action dictionary.
71 Constructor. @param a The action dictionary.
72 Create a target directory from an existing dictionary. @param dictionary The existing graphics state.
73 Constructor. @param dictionary the corresponding dictionary
74 Constructor. @param p The params dictionary.
75 Constructor. @param dict dictionary
76 Constructor for reading. @param dictionary The annotations dictionary.
77 Constructor for reading. @param entry the dictionary of the appearance entry
78 Constructor. @param dict a border style dictionary.
79 Constructor. @param dict a border style dictionary.
80 Constructor. @param dictionary Dictionary
81 Creates a new <code>CloudyBorder</code> that writes to the specified content stream. @param stream content stream @param intensity intensity of cloudy effect (entry <code>I</code>); typically 1.0 or 2.0 @param lineWidth line width for annotation border (entry <code>W</code>) @param rect annotation rectangle (entry <code>Rect</code>)
82 Constructor. @param dict The signature dictionary.
83 Constructor. @param dict The signature dictionary.
84 Constructor. @param dict The signature dictionary.
85 Constructor. @param dict The certificate seed value dictionary.
86 Constructor. @param dict The signature dictionary.
87 Constructor. @param dict The signature dictionary.
88 Constructor. @param dict The signature dictionary.
89 Creates the default signature options.
90 Constructor. @param templateBuilder the template builder
91 Constructor.
92 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
93 Constructor. @param xfaBase The xfa resource.
94 Constructor. @param dictionary the corresponding dictionary
95 Constructor. @param dictionary the corresponding dictionary
96 Constructor. @param dictionary the dictionary
97 Constructor that is used for a preexisting dictionary. @param t The underlying dictionary.
98 Constructor that is used for a preexisting dictionary. @param b The underlying dictionary.
99 Constructor that is used for a preexisting dictionary. @param dic The underlying dictionary.
100 Package-private constructor.
101 Constructs a PositionWrapper around the specified TextPosition object. @param position the text position.
102 Constructor. This produces an identity matrix.
103 Constructor. This produces a matrix with the given array as data. The source array is not copied or cloned.
104 Creates a transformation matrix with the given 6 elements. Transformation matrices are discussed in 8.3.3, "Common Transformations" and 8.3.4, "Transformation Matrices" of the PDF specification. For simple purposes (rotate, scale, translate) it is recommended to use the static methods below. Produces the following matrix: a b 0 c d 0 e f 1 @see Matrix#getRotateInstance(double, float, float) @see Matrix#getScaleInstance(float, float) @see Matrix#getTranslateInstance(float, float) @param a the X coordinate scaling element (m00) of the 3x3 matrix @param b the Y coordinate shearing element (m10) of the 3x3 matrix @param c the X coordinate shearing element (m01) of the 3x3 matrix @param d the Y coordinate scaling element (m11) of the 3x3 matrix @param e the X coordinate translation element (m02) of the 3x3 matrix @param f the Y coordinate translation element (m12) of the 3x3 matrix
105 Utility class, should not be instantiated.
106 Creates a new PDFStreamEngine.
107 Adds an operator processor to the engine. @param op operator processor
108 This will set the terminating character. @param term The terminating character.
109 This will tell the splitting algorithm where to split the pages. The default is 1, so every page will become a new document. If it was two then each document would contain 2 pages. If the source document had 5 pages it would split into 3 new documents, 2 documents containing 2 pages and 1 document containing one page. @param split The number of pages each split document should contain. @throws IllegalArgumentException if the page is smaller than one.
110 This will set the start page. @param start the 1-based start page @throws IllegalArgumentException if the start page is smaller than one.
111 This will set the end page. @param end the 1-based end page @throws IllegalArgumentException if the end page is smaller than one.
112 Change the parser leniency flag. This method can only be called before the parsing of the file. @param lenient try to handle malformed PDFs.
113 Sets the number of objects, that can be contained in compressed object streams. Higher object stream sizes may cause PDF readers to slow down during the rendering of PDF documents, therefore a reasonable value should be selected. A value of 0 disables the compression. @param objectStreamSize The number of objects, that can be contained in compressed object streams.
114 Constructor for reading. @param resourceDictionary The cos dictionary for this resource. @param resourceCache The document's resource cache, may be null. @param directFontCache The document's direct font cache. Must be mutable
115 Sets the blend mode in the current graphics state @param blendMode blend mode @throws IllegalArgumentException if blendMode is null.
116 Constructor for reading. @param acroForm the AcroForm containing the fields.
117 Returns the length of the encoded stream. @return length in bytes
118 Instantiate a new PDFMergerUtility.
119 Creates an object stream for compressible objects from the given {@link COSWriterCompressionPool}. The objects must first be prepared for this object stream, by adding them via calling {@link COSWriterObjectStream#prepareStreamObject(COSObjectKey, COSBase)} and will be written to this {@link COSStream}, when {@link COSWriterObjectStream#writeObjectsToStream(COSStream)} is called. @param compressionPool The compression pool an object stream shall be created for.
120 Creates a new PublicKeyProtectionPolicy with an empty recipients list.
121 Begin buffering the text clipping path, if any.
122 Add a source file to the list of files to merge. @param source File representing source document @throws FileNotFoundException If the file doesn't exist
123 Add a source to the list of documents to merge. @param source RandomAccessRead representing source document. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}.
124 Add a name (ex. an operator) @param name the name
125 Adds a proc (sub-sequence of instructions). @param child the child proc
126 Adds a new recipient to the recipients list. @param recipient A new recipient.
127 Add a new region to group text by. @param regionName The name of the region. @param rect The rectangle area to retrieve the text from. The y-coordinates are java coordinates (y == 0 is top), not PDF coordinates (y == 0 is bottom).
128 Adds trailer information for current XRef object. @param trailer the current document trailer dictionary
129 Returns the {@link COSBase}, that is registered for the given {@link COSObjectKey}, or null if no object is registered for that key. @param key The {@link COSObjectKey} a registered {@link COSBase} shall be found for. @return The {@link COSBase}, that is registered for the given {@link COSObjectKey}, or null if no object is registered for that key.
130 Returns the operator for the given operator name. @param operatorName the operator name @return the operator (or null if there's no such operator
131 Returns the name for a given sequence of Unicode characters. @param unicodeSequence sequence of Unicode characters @return PostScript glyph name, or ".notdef"
132 Called when an exception is thrown by an operator. @param operator The unknown operator. @param operands The list of operands. @param exception the excpetion which occured when processing the operator @throws IOException if there is an error processing the operator exception
133 @return Returns the graphicsState.
134 Pops the current graphics state from the stack.
135 @return Returns the size of the graphicsStack.
136 Transforms the given point by this matrix. @param x x-coordinate @param y y-coordinate @return the transformed point.
137 Decrease the level. Call this after running a potentially recursive operation. A log message is shown if the level is below 0. This can happen if the level is not decreased after an operation is done, e.g. by using a "finally" block.
138 Adds an int value. @param value the value
139 Throws if the random access backing store has been closed. Helpful for catching cases where a user tries to use a COSStream which has outlived its COSDocument.
140 Unsupported. @throws IOException telling that this is an unsupported action.
141 Unsupported. @throws IOException always throw as reset is an unsupported feature.
142 This will get the encryption dictionary. The document must be parsed before this is called. @return The encryption dictionary of the document that was parsed. @throws IOException If there is an error getting the document.
143 This will get the AccessPermission. The document must be parsed before this is called. @return The access permission of document that was parsed. @throws IOException If there is an error getting the document.
144 Creates a new InvalidPasswordException. @param message A msg to go with this exception.
145 Constructor. @param aOperator The operator that this object will represent. @throws IllegalArgumentException if the operator starts with "/".
146 This will print a string rep of this class. @return A string rep of this class.
147 {@inheritDoc}
148 {@inheritDoc}
149 Returns a filter instance given its COSName. @param filterName the name of the filter to retrieve @return the filter that matches the name @throws IOException if the filter name was invalid
150 Check whether all operands list elements are an instance of a specific class. @param operands The operands list. @param clazz The expected class. @return true if all operands list elements are an instance of the given class
151 Adds a real value. @param value the value
152 @param width signature image width @return Visible Signature Configuration Object
153 @param height signature image height @return Visible Signature Configuration Object
154 Calculate the distance from point ps to point pe. @param ps one end of a line @param pe the other end of the line @return length of the line
155 A line from point p1 to point p2 defines an equation, adjust the form of the equation to let the rhs equals 0, then calculate the lhs value by plugging the coordinate of p in the lhs expression. @param p target point @param p1 one end of a line @param p2 the other end of a line @return calculated value
156 Creates a new marked content object. @param tag the tag @param properties the properties
157 This will return the paint type. @return The type of object that this is.
158 This will return the type. @return the type of object that this is
159 Returns the default value, if any. @return A non-null string.
160 Unchecks the check box. @throws IOException if the appearance couldn't be generated.
161 Refreshes the appearance streams and appearance dictionaries for the widget annotations of the specified fields. @param fields a list of fields to be refreshed @throws IOException if the appearance streams could not be refreshed
162 Tests if the current point is the white point. @return true if the current point is the white point.
163 Calculate the color on the axial line and store them in an array. @return an array, index denotes the relative position, the corresponding value is the color on the axial line @throws IOException if the color conversion fails.
164 Calculate the color on the line that connects two circles' centers and store the result in an array. @return an array, index denotes the relative position, the corresponding value the color
165 Init the code table with 1 byte entries and the EOD and CLEAR_TABLE markers.
166 Add a list of sources to the list of documents to merge. @param sourcesList List of RandomAccessRead objects representing source documents
167 This will get an object from the array. This will NOT dereference the COS object. @param index The index into the array to get the object. @return The object at the requested index.
168 {@inheritDoc}
169 This will get the size of this array. @return The number of elements in the array.
170 {@inheritDoc}
171 Returns the number of recipients @return the number of recipients
172 Returns true if the container is empty, false otherwise. @return true if the container is empty, false otherwise
173 {@inheritDoc}
174 Removes a recipient from the recipients list. @param recipient The recipient to remove. @return true If a recipient was found and removed.
175 Get access to the list. @return an iterator over the array elements
176 {@inheritDoc}
177 Returns an iterator to browse the list of recipients. Object found in this iterator are <code>PublicKeyRecipient</code>. @return The recipients list iterator.
178 Return contents of COSArray as a Java List. @return the COSArray as List
179 This will return a list of names if the COSArray consists of COSNames only. @return the list of names of the COSArray of COSNames
180 This will return a list of names if the COSArray consists of COSStrings only. @return the list of names of the COSArray of COSStrings
181 This will get the boolean value. @param value Parameter telling which boolean value to get. @return The single boolean instance that matches the parameter.
182 Return a string representation of this object. @return The string value of this object.
183 This will write this object out to a PDF stream. @param output The stream to write this object out to. @throws IOException If an error occurs while writing out this object.
184 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
185 Writes binary data to the content stream. @param data as byte formatted to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
186 Returns the name-value entries in this dictionary. The returned set is in the order the entries were added to the dictionary. @since Apache PDFBox 1.1.0 @return name-value entries in this dictionary
187 Is the value changed? @param oldEntry old entry @param newEntry new entry @return <code>true</code> if the entry is changed, <code>false</code> otherwise
188 This will return the number of elements in this dictionary. @return The number of elements in the dictionary.
189 This will do a lookup into the dictionary. @param key The key to the object. @return The item that matches the key.
190 Returns the names of the entries in this dictionary. The returned set is in the order the entries were added to the dictionary. @since Apache PDFBox 1.1.0 @return names of the entries in this dictionary
191 Convenience method that calls {@link Map#forEach(java.util.function.BiConsumer) Map.forEach(BiConsumer)}. @param action The action to be performed for each entry
192 This will get all of the values for the dictionary. @return All the values for the dictionary.
193 This will add all of the dictionaries keys/values to this dictionary. Existing key/value pairs will be overwritten. @param dict The dictionaries to get the key/value pairs from.
194 @see java.util.Map#containsKey(Object) @param name The key to find in the map. @return true if the map contains this key.
195 Split at spaces but keep them @param s @return
196 Parses a value of type "int". @param token the token to be parsed @return the parsed value
197 {@inheritDoc}
198 set the length in (bits) of the secret key that will be used to encrypt document data. The default value is 40 bits, which provides a low security level but is compatible with old versions of Acrobat Reader. @param l the length in bits (must be 40, 128 or 256)
199 This will set the first page to be extracted by this class. @param startPageValue New value of 1-based startPage property. @throws IllegalArgumentException if the parameter is below 1.
200 This will set the last page to be extracted by this class. @param endPageValue New value of 1-based endPage property. @throws IllegalArgumentException if the parameter is below 1.
201 Constructor. Triggers a brute force search for all objects of the document. @param cosDocument the corresponding COS document @param cosParser the COSParser to be used for reading the pdf @throws IOException if the source data could not be read
202 Default constructor.
203 Constructor for reading. @param resourceDictionary The cos dictionary for this resource.
204 Constructor for reading. @param resourceDictionary The cos dictionary for this resource. @param resourceCache The document's resource cache, may be null.
205 Creates a new Operators object with the default set of operators.
206 Constructor. @param doc The document that this form is part of. @param form The existing acroForm.
207 Returns the count of trailers. @return the count of trailers.
208 This will get an object from the pool. @param key The object key. @return The object in the pool or a new one if it has not been parsed yet.
209 Populate XRef HashMap with given values. Each entry maps ObjectKeys to byte offsets in the file. @param xrefTableValues xref table entries to be added
210 Parses a value of type "real". @param token the token to be parsed @return the parsed value
211 Check and coerce the value field to be between MIN_NORMAL and MAX_VALUE. @param floatValue the value to be checked @return the coerced value
212 Return the direction/orientation of the string in this object based on its text matrix. Only angles of 0, 90, 180, or 270 are supported. To get other angles, use this code: <pre> TextPosition text = ... Matrix m = text.getTextMatrix().clone(); m.concatenate(text.getFont().getFontMatrix()); int angle = (int) Math.round(Math.toDegrees(Math.atan2(m.getShearY(), m.getScaleY()))); </pre> @return The direction of the text (0, 90, 180, or 270).
213 {@inheritDoc}
214 {@inheritDoc}
215 Builds, if needed, and returns the string representation of the current value. @return current value as string.
216 Write {@link COSNull} to the given stream. @param output The stream, that shall be written to.
217 Creates a new {@link COSIncrement} for the given {@link COSUpdateInfo}, the increment will use it´s {@link COSDocumentState} as it´s own origin and shall collect all updates contained in the given {@link COSUpdateInfo}.<br> Should the given object be {@code null}, the resulting increment shall be empty. @param incrementOrigin The {@link COSUpdateInfo} serving as an update source for this {@link COSIncrement}.
218 Creates a new instance for the given target document. @param dest the destination PDF document that will receive the clones
219 Constructor providing a parameter to enable/disable the stable object cache. @param enableStableCache enables/disables the stable object cache
220 Get the update state for the COSWriter. This indicates whether an object is to be written when there is an incremental save. @return the update state.
221 Returns {@code true}, if the given {@link COSBase} is already known to and has been processed by this {@link COSIncrement}. @param base The {@link COSBase} to check. @return {@code true}, if the given {@link COSBase} is already known to and has been processed by this {@link COSIncrement}. @see #objects @see #processedObjects
222 Returns {@code true}, if the given {@link COSBase} has been excluded from the increment, and hence is contained in {@link #excluded}. @param base The {@link COSBase} to check for exclusion. @return {@code true}, if the given {@link COSBase} has been excluded from the increment, and hence is contained in {@link #excluded}. @see #excluded
223 The given object and actual {COSBase}s shall be part of the increment and must be added to {@link #objects}, if possible.<br> {@code null} values shall be skipped. @param object The {@link COSBase} to add to {@link #objects}. @see #objects
224 The given {@link COSObject} has been processed, or is being processed. It shall be added to {@link #processedObjects} to skip it, should it be encountered again.<br> {@code null} values shall be ignored. @param base The {@link COSObject} to add to {@link #processedObjects}. @see #processedObjects
225 For internal PDFBox use when creating PDF documents: register a TrueTypeFont to make sure it is closed when the PDDocument is closed to avoid memory leaks. Users don't have to call this method, it is done by the appropriate PDFont classes. @param ttf the TrueTypeFont to be registered
226 Return a set of all annotation widget dictionaries related to the fields to be flattened. @param fields @return
227 Constructor. @param input decoded stream @param decodeResults results of decoding
228 Constructor. @param is The input stream to actually read from.
229 Creates a CCITTFaxDecoderStream. This constructor may be used for CCITT streams embedded in PDF files, which use EncodedByteAlign. @param stream the compressed CCITT stream. @param columns the number of columns in the stream. @param type the type of stream, must be one of {@code COMPRESSION_CCITT_MODIFIED_HUFFMAN_RLE}, {@code COMPRESSION_CCITT_T4} or {@code COMPRESSION_CCITT_T6}. @param options CCITT T.4 or T.6 options. @param byteAligned enable byte alignment used in PDF files (EncodedByteAlign).
230 Returns a COSInteger instance with the given value. @param val integer value @return COSInteger instance
231 {@inheritDoc}
232 {@inheritDoc}
233 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
234 {@inheritDoc}
235 Returns the base name of the font which the given font name maps to. @param fontName name of font, either a base name or an alias @return the base name or null if this is not one of the known names
236 Adds an alias name for a standard font to the map of known aliases to the map of aliases (alias as key, standard name as value). We want a single lookup in tbaseNamehe map to find the font both by a base name or an alias. @param alias an alias for the font @param baseName the font name of the Standard 14 font
237 This will get the selected export values. <p> A RadioButton might have an export value to allow field values which can not be encoded as PDFDocEncoding or for the same export value being assigned to multiple RadioButtons in a group.<br> To define an export value the RadioButton must define options {@link #setExportValues(List)} which correspond to the individual items within the RadioButton.</p> <p> The method will either return the corresponding values from the options entry or in case there is no such entry the fields value</p> @return the export value of the field.
238 Returns true if the name is the empty string. @return true if the name is the empty string.
239 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
240 Writes a newline to the content stream as ASCII. @throws IOException If the underlying stream has a problem being written to.
241 Takes the characters in the given string, convert it to bytes in UTF16-BE format and build a char array that corresponds to the ASCII hex encoding of the resulting bytes. Example: <pre> getCharsUTF16BE("ab") == new char[]{'0','0','6','1','0','0','6','2'} </pre> @param text The string to convert @return The string converted to hex
242 Constructor. @param num The object number. @param gen The object generation number. @param index The index within a compressed object stream
243 {@inheritDoc}
244 Returns the x-scaling factor of this matrix. This is calculated from the scale and shear. @return The x-scaling factor.
245 Returns the y-scaling factor of this matrix. This is calculated from the scale and shear. @return The y-scaling factor.
246 Creates a new COSOutputStream writes to an encoded COS stream. @param filters Filters to apply. @param parameters Filter parameters. @param output Encoded stream. @param streamCache Stream cache to use. @throws IOException If there was an error creating a temporary buffer
247 Constructor. @param out The output stream to write to.
248 Constructor. @param out The underlying stream to write to.
249 Constructor. @param out The underlying stream to write to. @param position The current position of output stream.
250 {@inheritDoc} Called by PDFBox when the PDDocument is closed, this closes the stream and removes the data. You will usually not need this. @throws IOException if something went wrong when closing the stream
251 {@inheritDoc} Called by PDFBox when the PDDocument is closed, this closes the stream and removes the data. You will usually not need this. @throws IOException if something went wrong when closing the stream
252 Returns the raw bytes of the string using a new byte array. Best used with a PDF <i>byte string</i>. @return a clone of the underlying byte[] representation of the COSString
253 Write an incremental update for a non signature case. This can be used for e.g. augmenting signatures. @throws IOException
254 Returns the content of this string as a PDF <i>ASCII string</i>. @return the ASCII string representation of the COSString
255 Returns {@code true}, if the linked {@link #originDocumentState} {@link COSDocumentState#isAcceptingUpdates()} and such a {@link COSDocumentState} has been linked to this {@link COSUpdateState}. @return {@code true}, if the linked {@link #originDocumentState} {@link COSDocumentState#isAcceptingUpdates()} and such a {@link COSDocumentState} has been linked to this {@link COSUpdateState}. @see #originDocumentState @see COSDocumentState#isAcceptingUpdates()
256 Returns the string representation of the given PDFDocEncoded bytes.
257 This will read an operator from the stream. @return The operator that was read from the stream. @throws IOException If there is an error reading from the stream.
258 Returns the given string encoded with PDFDocEncoding.
259 Returns true if the given character is available in PDFDocEncoding. @param character UTF-16 character
260 {@inheritDoc}
261 Returns true if the given font name is one of the known names, including alias. @param fontName the name of font, either a base name or alias @return true if the name is one of the known names
262 Returns an unmodifiable view of the code -&gt; name mapping. @return the code -&gt; name map
263 Returns an unmodifiable view of the name -&gt; code mapping. More than one name may map to the same code. @return the name -&gt; code map
264 {@inheritDoc}
265 This will read the next byte from the stream. @return The next byte read from the stream. @throws IOException If there is an error reading from the wrapped stream.
266 This will close the underlying stream and release any resources. @throws IOException If there is an error closing the underlying stream.
267 This will write a single byte. @param b The byte to write. @throws IOException If there is an error writing to the stream.
268 This will flush the data to the stream. @throws IOException If there is an error writing the data to the stream.
269 This will take the password and truncate or pad it as necessary. @param password The password to pad or truncate. @return The padded or truncated password.
270 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
271 Import an XMP stream into the PDF document. @param xmp The XMP data. @throws IOException If there is an error generating the XML document.
272 Check if it is necessary to create a new document. By default a split occurs at every page. If you wanted to split based on some complex logic then you could override this method. For example. <code> protected void splitAtPage() { // will split at pages with prime numbers only return isPrime(pageNumber); } </code> @param pageNumber the 0-based page number to be checked as splitting page @return true If a new document should be created.
273 {@inheritDoc}
274 {@inheritDoc}
275 {@inheritDoc}
276 {@inheritDoc}
277 {@inheritDoc}
278 {@inheritDoc}
279 returns visible signature text @return the visible signature's text
280 @param signatureText - adds the text on visible signature @return the signature design
281 <b>This will throw an UnsupportedOperationException if used as the signature fields value can't be set using a String</b> @param value the plain text value. @throws UnsupportedOperationException in all cases!
282 @return the ZIP compression level configured for PDFBox
283 {@inheritDoc}
284 Constructor. @param inputStream The input stream to actually read from.
285 This will close the underlying stream and release any resources. @throws IOException If there is an error closing the underlying stream.
286 Constructor, creates PDF template structure.
287 Set image and its height and width. @param image
288 Find a matching pattern in the code table. @param codeTable The LZW code table. @param pattern The pattern to be searched for. @return The index of the matching pattern or -1 if nothing is found.
289 Decodes a single line of data in-place. @param predictor Predictor value for the current line @param colors Number of color components, from decode parameters. @param bitsPerComponent Number of bits per components, from decode parameters. @param columns Number samples in a row, from decode parameters. @param actline Current (active) line to decode. Data will be decoded in-place, i.e. - the contents of this buffer will be modified. @param lastline The previous decoded line. When decoding the first line, this parameter should be an empty byte array of the same length as <code>actline</code>.
290 Returns true, if a {@link COSBase} is registered for the given {@link COSObjectKey}. @param key The {@link COSObjectKey} that shall be checked for a registered {@link COSBase}. @return True, if a {@link COSBase} is registered for the given {@link COSObjectKey}.
291 Registers a security handler. If the security handler was already registered an exception is thrown. If another handler was previously registered for the same filter name or for the same policy name, an exception is thrown @param name the name of the filter @param securityHandler security handler class to register @param protectionPolicy protection policy class to register
292 Determines if the encoding has a mapping for the given name value. @param name PostScript glyph name @return true if the encoding has a mapping for the given name value
293 Determines if the encoding has a mapping for the given code value. @param code character code @return if the encoding has a mapping for the given code value
294 Escape special characters. @param input the string to be escaped. @return the resulting string
295 This will set the BBox (bounding box) for this form. @param bbox The new BBox for this form.
296 Decodes a hex String into a byte array. @param s A String with ASCII hex. @return decoded byte array.
297 This will close the underlying COSDocument object. @throws IOException If there is an error releasing resources.
298 This will close the underlying COSDocument object. @throws IOException If there is an error releasing resources.
299 Returns the stream. @return The stream for this object.
300 Creates a new XObject from the given stream and subtype. @param stream The stream to read. @param subtype the subtype to be used for this XObject
301 Returns the stream. {@inheritDoc}
302 Returns the metadata stream for this object, or null if there is no metadata stream. @return the metadata stream, or null if there is none
303 Sets the metadata stream that is associated with this color space. @param metadata the new metadata stream
304 Check if the widget already exists in the annotation list. @param annotations the list of PDAnnotation fields. @param widget the annotation widget. @return true if the widget already existed in the annotation list, false if not.
305 {@inheritDoc}
306 {@inheritDoc}
307 Check if the field already exists in the field list. @param fieldIterator iterator on all fields. @param signatureField the signature field. @return true if the field already existed in the field list, false if not.
308 {@inheritDoc}
309 Default constructor.
310 This will tell if the next byte is a digit or not. @return true if the next byte in the stream is a digit. @throws IOException If there is an error reading from the stream.
311 Populate XRef HashMap of current XRef object. Will add an Xreftable entry that maps ObjectKeys to byte offsets in the file. @param objKey The objkey, with id and gen numbers @param offset The byte offset in this file
312 This will add a character encoding. An already existing mapping is preserved when creating the reverse mapping. Should only be used during construction of the class. @see #overwrite(int, String) @param code character code @param name PostScript glyph name
313 This will tell if the next byte is a space or not. @return true if the next byte in the stream is a space character. @throws IOException If there is an error reading from the stream.
314 Skip one line break, such as CR, LF or CRLF. @param linebreak the first character to be checked. @return true if a line break was found and removed. @throws IOException if something went wrong
315 This is really a bug in the Document creators code, but it caused a crash in PDFBox, the first bug was in this format: /Title ( (5) /Creator which was patched in 1 place. However it missed the case where the number of opening and closing parenthesis isn't balanced The second bug was in this format /Title (c:\) /Producer @param bracesParameter the number of braces currently open. @return the corrected value of the brace counter @throws IOException
316 This will tell if the next byte to be read is an end of line byte. @param c The character to check against end of line @return true if the next byte is 0x0A or 0x0D.
317 This method is used to read a token by the {@linkplain #readInt()} and the {@linkplain #readLong()} method. Valid delimiters are any non digit values. @return the token to parse as integer or long by the calling method. @throws IOException throws by the {@link #source} methods.
318 Tries to decode the buffer content to an UTF-8 String. If that fails, tries the alternative Encoding. @param buffer the {@link ByteArrayOutputStream} containing the bytes to decode @return the decoded String
319 Read one char and throw an exception if it is not the expected value. @param ec the char value that is expected. @throws IOException if the read char is not the expected value or if an I/O error occurs.
320 This will tell if the next byte is whitespace or not. @return true if the next byte in the stream is a whitespace character. @throws IOException If there is an error reading from the stream.
321 This will parse the startxref section from the stream. The startxref value is ignored. @return the startxref value or -1 on parsing error @throws IOException If an IO error occurs.
322 Brute force search for the last EOF marker. @throws IOException if something went wrong
323 Brute force search for all xref entries (tables). @throws IOException if something went wrong
324 The number of color components of this shading. @return number of color components of this shading @throws IOException if the data could not be read
325 Brute force search for all /XRef entries (streams). @throws IOException if something went wrong
326 Returns the resulting cross reference table. @return
327 Looks for and parses startxref. We first look for last '%%EOF' marker (within last {@link #DEFAULT_TRAIL_BYTECOUNT} bytes (or range set via {@link #setEOFLookupRange(int)}) and go back to find <code>startxref</code>. @return the offset of StartXref @throws IOException If something went wrong.
328 This method will read through the current stream object until we find the keyword "endstream" meaning we're at the end of this object. Some pdf files, however, forget to write some endstream tags and just close off objects with an "endobj" tag so we have to handle this case as well. This method is optimized using buffered IO and reduced number of byte compare operations. @param out stream we write out to. @throws IOException if something went wrong
329 Creates a new ToUnicode CMap writer.
330 Sets the page label range beginning at the specified start page. @param startPage the 0-based index of the page representing the start of the page label range. @param item the page label item to set. @throws IllegalArgumentException if the startPage parameter is &lt; 0.
331 Adds the given CID to Unicode mapping. @param cid CID @param text Unicode text, up to 512 bytes.
332 Looks up an amount of bytes if they contain only ASCII characters (no control sequences etc.), and that these ASCII characters begin with a sequence of 1-3 non-blank characters between blanks @return <code>true</code> if next bytes are probably printable ASCII characters starting with a PDF operator, otherwise <code>false</code>
333 Checks if the next char is a space or a return. @return true if the next char is a space or a return @throws IOException if something went wrong
334 Add an new entry to the XRef stream. @param entry new entry to be added
335 determines the minimal length required for all the lengths. @return the length information
336 Creates a map of {@link COSBase} instances to {@link COSObjectKey}s, allowing bidirectional lookups. This constructor can be used for pre - initialized structures to start the assignment of new object numbers starting from the hereby given offset. @param highestXRefObjectNumber The highest known object number.
337 Returns the first trailer if at least one exists. @return the first trailer or null
338 Returns the last trailer if at least one exists. @return the last trailer ir null
339 Returns object numbers which are referenced as contained in object stream with specified object number. This will scan resolved xref table for all entries having negated stream object number as value. @param objstmObjNr object number of object stream for which contained object numbers should be returned @return set of object numbers referenced for given object stream or <code>null</code> if {@link #setStartxref(long)} was not called before so that no resolved xref table exists
340 Returns the value for the first column of the crossreference stream entry. (The numeric representation of this entry's (The numeric representation of this entry's {@link XReferenceType}.) @return The value for the first column of the crossreference stream entry.
341 Returns the value for the third column of the crossreference stream entry. (This is the generation number of the set next free {@link COSObjectKey} - for entries of this type.) @return The value for the third column of the crossreference stream entry.
342 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
343 Returns the value for the second column of the crossreference stream entry. (This is byte offset of the {@link COSObject} in the PDF file - for entries of this type.) @return The value for the second column of the crossreference stream entry.
344 Returns the value for the third column of the crossreference stream entry. (This is the generation number of the set {@link COSObjectKey} - for entries of this type.) @return The value for the third column of the crossreference stream entry.
345 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
346 Returns the value for the second column of the crossreference stream entry. (This is object number from the {@link COSObjectKey} of the object stream, that is containing the object represented by this entry - for entries of this type..) @return The value for the second column of the crossreference stream entry.
347 Returns the value for the third column of the crossreference stream entry. (This is index of the {@link COSObject} in the containing object stream - for entries of this type.) @return The value for the third column of the crossreference stream entry.
348 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
349 This will write some byte to the stream. @param b The source byte array. @param off The offset into the array to start writing. @param len The number of bytes to write. @throws IOException If the underlying stream throws an exception.
350 This will write a single byte to the stream. @param b The byte to write to the stream. @throws IOException If there is an error writing to the underlying stream.
351 This will write an EOL to the stream. @throws IOException If there is an error writing to the stream
352 Returns true, if the resulting document shall be compressed. @return True, if the resulting document shall be compressed.
353 add an entry in the x ref table for later dump. @param entry The new entry to add.
354 Write the given {@link COSObjectKey} to the given stream. @param output The stream, that shall be written to. @param indirectReference The content, that shall be written.
355 check the xref entries and write out the ranges. The format of the returned array is exactly the same as the pdf specification. See section 7.5.4 of ISO32000-1:2008, example 1 (page 40) for reference. <p> example: 0 1 2 5 6 7 8 10 <p> will create a array with follow ranges <p> 0 3 5 4 10 1 <p> this mean that the element 0 is followed by two other related numbers that represent a cluster of the size 3. 5 is follow by three other related numbers and create a cluster of size 4. etc. @param xRefEntriesList list with the xRef entries that was written @return a integer array with the ranges
356 @return MD5 message digest
357 @return SHA-1 message digest
358 @return SHA-256 message digest
359 This will write the fdf document. @param doc The document to write. @throws IOException If an error occurs while generating the data.
360 Returns the highest object number, that is registered in this compression pool. @return The highest object number, that is registered in this compression pool.
361 Returns all {@link COSObjectKey}s, that shall be added to the object stream, when {@link COSWriterObjectStream#writeObjectsToStream(COSStream)} is called. @return All {@link COSObjectKey}s, that shall be added to the object stream.
362 This will add a character encoding. An already existing mapping is overwritten when creating the reverse mapping. Should only be used during construction of the class. @see Encoding#add(int, String) @param code character code @param name PostScript glyph name
363 Delete a region to group text by. If the region does not exist, this method does nothing. @param regionName The name of the region to delete.
364 Sets the maximum number of digits allowed for fractional numbers. @see NumberFormat#setMaximumFractionDigits(int) @param fractionDigitsNumber the maximum number of digits allowed for fractional numbers
365 Create a new appearance stream. @param document may be null @param outputStream The appearances output stream to write to. @param resources The resources to use
366 Returns the y-component of the vertical displacement vector (w1). @param code character code @return w1y
367 Returns the provided default value in case 'standard' value is <code>null</code>. To be used in cases unboxing may lead to a NPE. @param standardValue 'standard' value @param defaultValue default value @return 'standard' value if not <code>null</code> otherwise default value
368 Zoom signature image with some percent. @param percent increase (positive value) or decrease (negative value) image with x percent. @return Visible Signature Configuration Object
369 @return signature image width
370 @return signature image height
371 Adjust signature for page rotation. This is optional, call this after all x and y coordinates have been set if you want the signature to be positioned regardless of page orientation. @return Visible Signature Configuration Object
372 Create an affine transform from this matrix's values. @return An affine transform with this matrix's values.
373 Encodes the given string for use in a PDF content stream. @param text Any Unicode text. @return Array of PDF content stream bytes. @throws IOException If the text could not be encoded. @throws IllegalArgumentException if a character isn't supported by the font.
374 Returns the name for the given Unicode code point. @param codePoint Unicode code point @return PostScript glyph name, or ".notdef"
375 Returns the base state represented by the given {@link COSName}. @param state the state name @return the state enum value
376 Returns the base state represented by the given {@link COSName}. @param state the state name @return the state enum value
377 Retrieve the glyph IDs for the characters in the specified word, after applying any relevant GSUB rules. The encoded glyph IDs are also written to the specified output stream. @param gsubWorker The GSUB worker which defines the GSUB transformations to apply. @param out The output stream to write the glyph IDs to. @param font The font whose cmap table will be used to map characters to glyph IDs. @param word The word which is being converted from characters to glyph IDs. @return The glyph IDs for the characters in the specified word, after applying any relevant GSUB rules. @throws IllegalStateException If we cannot find a glyph ID for any characters in the specified word.
378 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source input representing the pdf @param permission he access permissions of the pdf
379 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source The source that will be closed when this document gets closed, can be null.
380 {@inheritDoc}
381 {@inheritDoc}
382 {@inheritDoc}
383 {@inheritDoc}
384 {@inheritDoc}
385 {@inheritDoc}
386 {@inheritDoc}
387 {@inheritDoc}
388 {@inheritDoc}
389 {@inheritDoc}
390 {@inheritDoc}
391 {@inheritDoc}
392 {@inheritDoc}
393 {@inheritDoc}
394 Returns the set of known font names, including aliases. @return the set of known font names
395 {@inheritDoc}
396 Method to convert the COS value in the number tree to the PD Model object. The default implementation will simply use reflection to create the correct object type. Subclasses can do whatever they want. @param base The COS object to convert. @return The converted PD Model object. @throws IOException If there is an error during creation.
397 a..z, aa..zz, aaa..zzz ... labeling as described in PDF32000-1:2008, Table 159, Page 375.
398 Returns the number of page label ranges. <p> This will be always &gt;= 1, as the required default entry for the page range starting at the first page is added automatically by this implementation (see PDF32000-1:2008, p. 375). </p> @return the number of page label ranges.
399 Returns the page label range starting at the given page, or {@code null} if no such range is defined. @param startPage the 0-based page index representing the start page of the page range the item is defined for. @return the page label range or {@code null} if no label range is defined for the given start page.
400 Get an ordered set of page indices having a page label range. @return set of page indices.
401 Returns the dash array. @return the dash array, never null.
402 Creates a PDColor containing the given color component values. @param components array of color component values @param colorSpace color space in which the components are defined
403 Returns the components of this color value. @return the components of this color value, never null.
404 Constructor. @param p point @param c color
405 {@inheritDoc}
406 get the boundary of a triangle. @return {xmin, xmax, ymin, ymax}
407 Pops a number (int or real) from the stack. If it's neither data type, a ClassCastException is thrown. @return the number
408 Pops a value of type int from the stack. If the value is not of type int, a ClassCastException is thrown. @return the int value
409 Pops a number from the stack and returns it as a real value. If the value is not of a numeric type, a ClassCastException is thrown. @return the real value
410 Adds a bool value. @param value the value
411 Creates a new execution context. @param operatorSet the operator set
412 returns a list of regular expression Patterns representing different common list item formats. For example numbered items of form: <ol> <li>some text</li> <li>more text</li> </ol> or <ul> <li>some text</li> <li>more text</li> </ul> etc., all begin with some character pattern. The pattern "\\d+\." (matches "1.", "2.", ...) or "\[\\d+\]" (matches "[1]", "[2]", ...). <p> This method returns a list of such regular expression Patterns. @return a list of Pattern objects.
413 Constructor.
414 Constructor.
415 Constructor.
416 Constructor.
417 Constructor.
418 Constructor.
419 Creates a String representation of an Object array. @param array the Object array @return the String representation
420 Creates a String representation of a float array. @param array the float array @return the String representation
421 Adds a text position to the contents. @param text the text position
422 Adds a marked content to the contents. @param markedContent the marked content
423 Adds an XObject to the contents. @param xobject the XObject
424 Set if the user can print. <p> This method will have no effect if the object is in read only mode. @param allowPrinting A boolean determining if the user can print.
425 Set if the user can modify the document. <p> This method will have no effect if the object is in read only mode. @param allowModifications A boolean determining if the user can modify the document.
426 Set if the user can extract content from the document. <p> This method will have no effect if the object is in read only mode. @param allowExtraction A boolean determining if the user can extract content from the document.
427 Set if the user can add or modify text annotations and fill in interactive forms fields and, if {@link #canModify() canModify()} returns true, create or modify interactive form fields (including signature fields). Note that if {@link #canFillInForm() canFillInForm()} returns true, it is still possible to fill in interactive forms (including signature fields) even the parameter here is false. <p> This method will have no effect if the object is in read only mode. @param allowAnnotationModification A boolean determining the new setting.
428 Set if the user can fill in interactive form fields (including signature fields) even if {@link #canModifyAnnotations() canModifyAnnotations()} returns false. Therefore, if you want to prevent a user from filling in interactive form fields, you need to call {@link #setCanModifyAnnotations(boolean) setCanModifyAnnotations(false)} as well. <p> This method will have no effect if the object is in read only mode. @param allowFillingInForm A boolean determining if the user can fill in interactive forms.
429 Set if the user can extract content from the document for accessibility purposes. <p> This method will have no effect if the object is in read only mode. @param allowExtraction A boolean determining if the user can extract content from the document.
430 Set if the user can insert/rotate/delete pages. <p> This method will have no effect if the object is in read only mode. @param allowAssembly A boolean determining if the user can assemble the document.
431 Set if the user can print the document in a faithful format or in a degraded format (if print is enabled). The PDF version must be 1.5 or higher. <p> This method will have no effect if the object is in read only mode. @param canPrintFaithful A boolean determining if the user can print the document in a faithful format.
432 This will tell if the user can print. @return true If supplied with the user password they are allowed to print.
433 This will tell if the user can modify contents of the document. @return true If supplied with the user password they are allowed to modify the document
434 This will tell if the user can extract text and images from the PDF document. @return true If supplied with the user password they are allowed to extract content from the PDF document
435 This will tell if the user can add or modify text annotations and fill in interactive forms fields and, if {@link #canModify() canModify()} returns true, create or modify interactive form fields (including signature fields). Note that if {@link #canFillInForm() canFillInForm()} returns true, it is still possible to fill in interactive forms (including signature fields) even if this method here returns false. @return true If supplied with the user password they are allowed to modify annotations.
436 This will tell if the user can fill in interactive form fields (including signature fields) even if {@link #canModifyAnnotations() canModifyAnnotations()} returns false. @return true If supplied with the user password they are allowed to fill in form fields.
437 This will tell if the user can extract text and images from the PDF document for accessibility purposes. @return true If supplied with the user password they are allowed to extract content from the PDF document
438 This will tell if the user can insert/rotate/delete pages. @return true If supplied with the user password they are allowed to assemble the document.
439 This will tell if the user can print the document in a faithful format or in a degraded format (if print is enabled). @return true If supplied with the user password they are allowed to print the document in a faithful format.
440 returns The private key that will be used to open the document protection. @return The private key. @throws KeyStoreException If there is an error accessing the key.
441 Returns a SecureRandom If customSecureRandom is not defined, instantiate a new SecureRandom @return SecureRandom
442 This will reset the key to be used. @param key The RC4 key used during encryption.
443 This will encrypt and write the next byte. @param aByte The byte to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
444 Combine the diacritic, for example, convert non-combining diacritic characters to their combining counterparts. @param str String to normalize @return Normalized string
445 Return true if the given {@code codepoint} is a prohibited character as defined by <a href="https://tools.ietf.org/html/rfc4013#section-2.3">RFC 4013, Section 2.3</a>.
446 Computes the version number of the {@link SecurityHandler} based on the encryption key length. See PDF Spec 1.6 p 93 and <a href="https://www.adobe.com/content/dam/acom/en/devnet/pdf/adobe_supplement_iso32000.pdf">PDF 1.7 Supplement ExtensionLevel: 3</a> and <a href="http://intranet.pdfa.org/wp-content/uploads/2016/08/ISO_DIS_32000-2-DIS4.pdf">PDF Spec 2.0</a>. @return The computed version number.
447 Returns the provider to be used for advanced encrypting/decrypting. Default is the BouncyCastleProvider. @return the security provider
448 This will get the text value of an element. @param node The node to get the text value for. @return The text of the node.
449 Write a Java string to the output stream. @param text The text to write to the stream. @throws IOException If there is an error when writing the text.
450 Fetches the predefined CMap from disk (or cache). @param cMapName CMap name @return The predefined CMap, never null. @throws IOException
451 Parse the given CMap. @param randomAccessRead the source of the CMap to be read @return the parsed CMap
452 Gets alternative names, as seen in some PDFs, e.g. PDFBOX-142.
453 Calculate the points of a line with Bresenham's line algorithm <a href="http://en.wikipedia.org/wiki/Bresenham's_line_algorithm">Bresenham's line algorithm</a> @param x0 coordinate @param y0 coordinate @param x1 coordinate @param y1 coordinate @return all the points on the rasterized line from (x0, y0) to (x1, y1)
454 Calculate the degree value of a triangle. @param p 3 vertices coordinates @return number of unique points in the 3 vertices of a triangle, 3, 2 or 1
455 Adds the given FontBox font to the cache. @param info the FontInfo to be used as key @param font the font to be cached
456 Returns the FontBox font associated with the given FontInfo. @param info the FontInfo of the cached font @return the cached font if available, otherwise null
457 Adds a standard font name to the map of known aliases, to simplify the logic of finding font metrics by name. We want a single lookup in the map to find the font both by a base name or an alias. @see #getAFM @param baseName the font name of the Standard 14 font
458 Adds a top-priority substitute for the given font. @param match PostScript name of the font to match @param replace PostScript name of the font to use as a replacement
459 Finds the named font with the given format.
460 Returns the substitutes for a given font.
461 This will take a character code and get the name from the code. @param code character code @return PostScript glyph name
462 For debugging. Prints all matches and returns the best match.
463 Returns the Type 2 charstring for the given CID, or null if the substituted font does not contain Type 2 charstrings. @param cid CID @return the Type 2 charstring for the given CID or null @throws IOException if the charstring could not be read
464 Returns the CID for the given character code. If not found then CID 0 is returned. @param code character code @return CID
465 Returns the packed RGB value for this color, if any. @return RGB @throws IOException if the color conversion fails @throws UnsupportedOperationException if this color value is a pattern.
466 Computes the backdrop removal equation. <code>C = Cn + (Cn - C0) * (alpha0 / alphagn - alpha0)</code>
467 Get the data of this chunk as a byte array @return a byte-array with only the data of the chunk
468 Returns the font's glyph list.
469 extract all useful "cmap" subtables.
470 Loads the metrics for the base font specified by name. Metric file must exist in the pdfbox jar under /org/apache/pdfbox/resources/afm/ @param fontName one of the standard 14 font names for which to load the metrics. @throws IOException if no metrics exist for that font.
471 Returns true if the fsType in the OS/2 table permits embedding.
472 Returns true if the fsType in the OS/2 table permits subsetting.
473 Returns an uppercase 6-character unique tag for the given subset.
474 Returns the Unicode character sequence for the given glyph name, or null if there isn't any. @param name PostScript glyph name @return Unicode character(s), or null.
475 Creates an encoding from the given AFM font metrics. @param fontMetrics AFM font metrics.
476 Creates a PDColor containing the given color component values and pattern name. @param components array of color component values @param patternName the name of a pattern in a pattern dictionary @param colorSpace color space in which the pattern/components are defined
477 Returns the given raster as BufferedImage with the given awtColorSpace using a ComponentColorModel. @param raster the source raster @param awtColorSpace the AWT colorspace @return a BufferedImage in this colorspace
478 Returns the (A)RGB equivalent of the given raster, using the given AWT color space to perform the conversion. @param raster the source raster @param colorSpace the AWT @return an (A)RGB buffered image
479 Returns true if the given profile represents sRGB. (unreliable on the data of ColorSpace.CS_sRGB in openjdk)
480 Returns the type of the color space in the ICC profile. If the ICC profile is invalid, the type of the alternate colorspace is returned, which will be one of {@link ColorSpace#TYPE_GRAY TYPE_GRAY}, {@link ColorSpace#TYPE_RGB TYPE_RGB}, {@link ColorSpace#TYPE_CMYK TYPE_CMYK}, or -1 if that one is invalid. @return an ICC color space type. See {@link ColorSpace#getType()} and the static values of {@link ColorSpace} for more details.
481 Creates a new JPEG PDImageXObject from a BufferedImage. <p> Do not read a JPEG image from a stream/file and call this method; you'll get more speed and quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) createFromStream()} instead. @param document the document where the image will be created @param image the BufferedImage to embed @return a new Image XObject @throws IOException if the JPEG data cannot be written
482 Initialize the encoder and set all final fields
483 High-quality image scaling.
484 Convert this image to a COS object. @return The cos object that matches this image object.
485 Parse the PNG structure into the PNGConverterState. If we can't handle something, this method will return null. @param imageData the byte array with the PNG data @return null or the converter state with all relevant chunks
486 Build an input stream for the IDAT data. May need to concat multiple IDAT chunks. @param state the converter state. @return a input stream with the IDAT data.
487 Constructor of Patch. @param color 4 corner's colors
488 This will get the current clipping path. Do not modify this Area object! @return The current clipping path.
489 Construct the text block from a list of values. Constructs the text block from a list of values treating each entry as an individual {@link Paragraph}. @param listValue the text block string.
490 {@inheritDoc}
491 Returns the <code>Matrix</code> entry for the appearance stream form XObject. @return Matrix for appearance stream form XObject.
492 Computes parameters for a cloudy polygon: n, alpha, and dx.
493 Computes the alpha parameter for an ellipse curl.
494 Makes a polygon whose direction is the same as the positive angle direction in the coordinate system. The polygon must not intersect itself.
495 Flattens an ellipse into a polygon.
496 Returns true if the given path is rectangular.
497 @return template height
498 @param x - x coordinate @param y - y coordinate @return Visible Signature Configuration Object
499 @param affineTransform the affine transformation @return Visible Signature Configuration Object
500 Constructor from an existing destination array. @param arr The destination array.
501 Constructor from an existing destination array. @param arr The destination array.
502 Constructor from an existing destination array. @param arr The destination array.
503 Constructor from an existing destination array. @param arr The destination array.
504 Constructor from an existing destination array. @param arr The destination array.
505 @param node @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next sibling)
506 @return An {@link Iterable} view of the items children
507 Sort two related lists simultaneously by the elements in the key parameter. @param pairs a list of KeyValue elements
508 Sort two related lists simultaneously by the elements in the value parameter. @param pairs a list of KeyValue elements
509 Sets high-quality rendering hints on the current Graphics2D.
510 PDFBOX-5715 / PR#73: This was added to fix a problem with missing fine lines when printing on MacOS. Lines vanish because CPrinterJob sets graphics scale to 1 for Printable so after scaling lines often have a width smaller than 1 after scaling and clipping. This change enlarges the clip bounds to cover at least 1 point plus 0.5 on one and another side in the device space to allow to draw the linePath inside the clip. The linePath can consists from different lines but when its bounds width or height is less than 1.0 it seems safe to use a rectangle as a clip instead of the real path. A more detailed explanation can be read <a href="https://github.com/apache/pdfbox/pull/173">here</a>. @param linePath @return
511 Calculates the subsampling frequency for a given PDImage based on the current transformation and its calculated transform. Extend this method if you want to use your own strategy. @param pdImage PDImage to be drawn @param at Transform that will be applied to the image when drawing @return The rounded-down ratio of image pixels to drawn pixels. Returned value will always be &gt;=1.
512 Returns the closest integer which is larger than the given number. Uses BigDecimal to avoid floating point error which would cause gaps in the tiling.
513 Return the X starting coordinate of the text, adjusted by the given rotation amount. The rotation adjusts where the 0,0 location is relative to the text. @param rotation Rotation to apply (0, 90, 180, or 270). 0 will perform no adjustments. @return X coordinate
514 This will get the y position of the character with 0,0 in lower left. This will be adjusted by the given rotation. @param rotation Rotation to apply to text to adjust the 0,0 location (0,90,180,270) @return The y coordinate of the text
515 Get the length or width of the text, based on a given rotation. @param rotation Rotation that was used to determine coordinates (0,90,180,270) @return Width of text in display units
516 Write the string in TextPosition to the output stream. @param text The text to write to the stream. @throws IOException If there is an error when writing the text.
517 Show the string data for this text position. @return A human readable form of this object.
518 Get the text for the region, this should be called after extractRegions(). @param regionName The name of the region to get the text from. @return The text that was identified in that region.
519 Start a new article, which is typically defined as a column on a single page (also referred to as a bead). Default implementation is to do nothing. Subclasses may provide additional information. @param isLTR true if primary direction of text is left to right. @throws IOException If there is any error writing to the stream.
520 End an article. Default implementation is to do nothing. Subclasses may provide additional information. @throws IOException If there is any error writing to the stream.
521 Write the line separator value to the output stream. @throws IOException If there is a problem writing out the line separator to the document.
522 Write the word separator value to the output stream. @throws IOException If there is a problem writing out the word separator to the document.
523 Write something (if defined) at the start of a paragraph. @throws IOException if something went wrong
524 Write something (if defined) at the start of a page. @throws IOException if something went wrong
525 Write something (if defined) at the end of a page. @throws IOException if something went wrong
526 iterates over the specified list of Patterns until it finds one that matches the specified string. Then returns the Pattern. <p> Order of the supplied list of patterns is important as most common patterns should come first. Patterns should be strict in general, and all will be used with case sensitivity on. </p> @param string the string to be searched @param patterns list of patterns @return matching pattern
527 Handles the LTR and RTL direction of the given words. The whole implementation stands and falls with the given word. If the word is a full line, the results will be the best. If the word contains of single words or characters, the order of the characters in a word or words in a line may wrong, due to RTL and LTR marks and characters! Based on http://www.nesterovsky-bros.com/weblog/2013/07/28/VisualToLogicalConversionInJava.aspx @param word The word that shall be processed @return new word with the correct direction of the containing characters
528 This method parses the bidi file provided as inputstream. @param inputStream - The bidi file as inputstream @throws IOException if any line could not be read by the LineNumberReader
529 Same as {@link #getUnicode()} except that returned text is ensured to be visually ordered (i.e. same order you would see them displayed on screen when looking from left to right). This is important for Arabic/Hebrew where several unicode characters can be composed in one glyph with logical order (the order in which it would be normally typed from right to left). @return The string on the screen in visual order.
530 {@inheritDoc}
531 @return True if the current character is a diacritic char.
532 Update the zone ID based on the raw offset. This is either GMT, GMT+hh:mm or GMT-hh:mm, where n is between 1 and 14. The highest negative hour is -14, the highest positive hour is 12. Zones that don't fit in this schema are set to zone ID "unknown". @param tz the time zone to update.
533 Returns a hex string of the given byte. @param b the byte to be converted @return the hex string representing the given byte
534 Returns a hex string of the given byte array. @param bytes the bytes to be converted @return the hex string representing the given bytes
535 Returns the bytes corresponding to the ASCII hex encoding of the given byte. @param b the byte to be converted @return the ASCII hex encoding of the given byte
536 Returns the bytes corresponding to the ASCII hex encoding of the given bytes. @param bytes the bytey to be converted @return the ASCII hex encoding of the given bytes
537 Writes the given byte as hex value to the given output stream. @param b the byte to be written @param output the output stream to be written to @throws IOException exception if anything went wrong
538 Decode a base64 String. @param base64Value a base64 encoded String. @return the decoded String as a byte array. @throws IllegalArgumentException if this isn't a base64 encoded string.
539 Merges two sorted subarrays arr and aux into the order specified by cmp and places the ordered result back into into arr array. @param <T> @param arr Array containing source data to be sorted and target for destination data @param aux Array containing copy of source data to be sorted @param from Start index of left data run so that Left run is arr[from : mid-1]. @param mid End index of left data run and start index of right run data so that Left run is arr[from : mid-1] and Right run is arr[mid : to] @param to End index of right run data so that Right run is arr[mid : to] @param cmp the comparator to determine the order of the list.
540 Creates a matrix with the same elements as the given AffineTransform. @param at matrix elements will be initialize with the values from this affine transformation, as follows: scaleX shearY 0 shearX scaleY 0 transX transY 1
541 Transforms the given point by this matrix. @param point point to transform
542 Fast variant to format a floating point value to a ASCII-string. The format will fail if the value is greater than {@link Long#MAX_VALUE}, smaller or equal to {@link Long#MIN_VALUE}, is {@link Float#NaN}, infinite or the number of requested fraction digits is greater than {@link #MAX_FRACTION_DIGITS}. When the number contains more fractional digits than {@code maxFractionDigits} the value will be rounded. Rounding is done to the nearest possible value, with the tie breaking rule of rounding away from zero. @param value The float value to format @param maxFractionDigits The maximum number of fraction digits used @param asciiBuffer The output buffer to write the formatted value to @return The number of bytes used in the buffer or {@code -1} if formatting failed
543 Returns the version of PDFBox. @return the version of PDFBox
544 This will parse an XML stream and create a DOM document. @param is The stream to get the XML from. @param nsAware activates namespace awareness of the parser @return The DOM document. @throws IOException It there is an error creating the dom.
545 Return the most specific value stored for this byte sequence. If not found, returns <code>null</code> or a default values as specified by calling {@link ByteTrie#setDefaultValue}. @param bytes @return
546 Constructor. @param aValue The boolean value.
547 Private constructor. This will limit the number of COSName objects that are created. @param aName The name of the COSName object.
548 Constructor.
549 Creates a new PDF string from a byte array. This method can be used to read a string from an existing PDF file, or to create a new byte string. @param bytes The raw bytes of the PDF text string or byte string. @param forceHex forces the hexadecimal presentation of the string if set to true
550 Constructor.
551 Constructor. @param object The object that this encapsulates.
552 Constructor. @param object The object that this encapsulates. @param parser The parser to be used to load the object on demand
553 Constructor. @param key The object number of the encapsulated object. @param parser The parser to be used to load the object on demand
554 Constructs an instance specifying the region of the image that should be decoded. The actual region will be clipped to the dimensions of the image. @param x x-coordinate of the top-left corner of the region to be decoded @param y y-coordinate of the top-left corner of the region to be decoded @param width Width of the region to be decoded @param height Height of the region to be decoded
555 Sets the given {@link COSObjectKey} as a free reference in a PDF's crossreference stream ({@link PDFXRefStream}). @param key The key, that shall be set as the free reference of the document. @param nextFreeObject The object number of the next free object.
556 Prepares a object stream entry reference for the given {@link COSObject} in a PDF's crossreference stream ({@link PDFXRefStream}). @param objectStreamIndex The index of the {@link COSObject} in the containing object stream. @param key The {@link COSObjectKey}, that is represented by this entry. @param object The {@link COSObject}, that is represented by this entry. @param parentKey The {@link COSObjectKey} of the object stream, that is containing the object.
557 Default constructor.
558 Creates a new instance with a given COS dictionary. @param dictionary the dictionary
559 Creates a new attribute object with a given dictionary. @param dictionary the dictionary
560 Creates a user property with a given dictionary. @param dictionary the dictionary @param userAttributeObject the user attribute object
561 @param dict The dictionary storage.
562 creates a new transition for an existing dictionary @param dictionary the dictionary to be used for the new transition
563 Constructor. @param dic The COS dictionary.
564 Constructor. @param dic The COS dictionary.
565 Constructor. @param dic The COS dictionary.
566 Constructor. @param dic The COS dictionary.
567 Create a child node object. @param dic The dictionary for the child node object to refer to. @return The new child node object.
568 Constructor. This will <b>not</b> set up the /Type and /Subtype entries. @param str The stream parameter.
569 Constructor. @param str The stream parameter.
570 {@inheritDoc}
571 Constructor. @param function The function stream.
572 Creates a new XObject from the given stream and subtype. @param stream The stream to read. @param subtype the subtype to be used for this XObject
573 Constructor for an existing structure element. @param dic The existing dictionary.
574 Constructor for an existing structure element. @param dic The existing dictionary.
575 Constructor.
576 Constructor used for encryption. @param protectionPolicy The protection policy.
577 Constructor. @param a An existing FDF Annotation.
578 Constructor. @param a An existing FDF Annotation.
579 Constructor. @param a An existing FDF Annotation.
580 Constructor. @param a An existing FDF Annotation.
581 Constructor. @param a An existing FDF Annotation.
582 Constructor. @param a An existing FDF Annotation.
583 Constructor. @param a An existing FDF Annotation.
584 Constructor. @param a An existing FDF Annotation.
585 Constructor. @param a An existing FDF Annotation.
586 Constructor. @param a An existing FDF Annotation.
587 Constructor. @param a An existing FDF Annotation.
588 Constructor. @param a An existing FDF Annotation.
589 Constructor. @param a An existing FDF Annotation.
590 Constructor. @param a An existing FDF Annotation.
591 Ten bytes for the PANOSE classification number for the font. @see <a href="http://www.monotype.com/services/pan1">http://www.monotype.com/services/pan1</a> @return the PANOSE classification number
592 Creates a blend composite @param blendMode Desired blend mode @param constantAlpha Constant alpha, must be in the inclusive range [0.0...1.0] or it will be clipped. @return a blend composite. @throws IllegalArgumentException if blendMode is null.
593 Returns the transparency group attributes dictionary. @return the transparency group attributes dictionary, never null.
594 Creates a new shading pattern from the given COS dictionary. @param resourceDictionary The COSDictionary for this pattern resource.
595 Creates a new tiling pattern from the given COS dictionary. @param dictionary The COSDictionary for this pattern. @param resourceCache The resource cache, may be null
596 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
597 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
598 Constructor. @param shadingType2 the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
599 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
600 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
601 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
602 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
603 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
604 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
605 Create a graphics state from an existing dictionary. @param dictionary The existing graphics state.
606 Creates a new soft mask. @param dictionary The soft mask dictionary.
607 Construct the text block from a single value. Constructs the text block from a single value splitting into individual {@link Paragraph} when a new line character is encountered. @param textValue the text block string.
608 Constructor. @param a The action dictionary.
609 Constructor. @param a The action dictionary.
610 Constructor @param a the action dictionary
611 Constructor. @param a The action dictionary.
612 Constructor #2. @param a The action dictionary.
613 Constructor. @param a The action dictionary.
614 Constructor. @param a The action dictionary.
615 Constructor. @param a The action dictionary.
616 Constructor. @param a The action dictionary.
617 Constructor. @param a The action dictionary.
618 Constructor. @param a The action dictionary.
619 Constructor @param a the action dictionary
620 Constructor. @param a The action dictionary.
621 Constructor. @param a The action dictionary.
622 Return two related lists as a single list with key value pairs. @param key the key elements @param value the value elements @return a sorted list of KeyValue elements.
623 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node to be created
624 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
625 Constructor. @param dictionary the corresponding dictionary
626 Clones this object. @return cloned matrix as an object.
627 Convenience method to create a scaled instance. Produces the following matrix: x 0 0 0 y 0 0 0 1 @param x The xscale operator. @param y The yscale operator. @return A new matrix with just the x/y scaling
628 Convenience method to create a translating instance. Produces the following matrix: 1 0 0 0 1 0 x y 1 @param x The x translating operator. @param y The y translating operator. @return A new matrix with just the x/y translating.
629 Convenience method to create a rotated instance. @param theta The angle of rotation measured in radians @param tx The x translation. @param ty The y translation. @return A new matrix with the rotation and the x/y translating.
630 Transforms the given vector by this matrix. @param vector 2D vector @return the transformed vector.
631 Returns a new vector scaled by both x and y. @param sxy x and y scale @return a new vector scaled by both x and y
632 Return the field tree representing all form fields @return the field tree representing all form fields
633 Sets the default value to use in {@link ByteTrie#find(byte[])} when no path matches. @param defaultValue
634 Returns the object at the specified position. @param index the position @return the object @throws IndexOutOfBoundsException if the index is out of range
635 Returns the size. @return the size
636 Returns the revision number at the specified position. @param index the position @return the revision number @throws IndexOutOfBoundsException if the index is out of range
637 Adds an object with a specified revision number. @param object the object @param revisionNumber the revision number
638 Sets the revision number of a specified object. @param object the object @param revisionNumber the revision number
639 This will get an encoding by name. May return null. @param name The name of the encoding to get. @return The encoding that matches the name.
640 Creates a new soft mask. @param dictionary SMask @param resourceCache Resource cache, may be null. @return the newly created instance of PDSoftMask
641 This will get the selected index. <p> A RadioButton might have multiple same value options which are not selected jointly if they are not set in unison {@link #isRadiosInUnison()}.</p> <p> The method will return the first selected index or -1 if no option is selected.</p> @return the first selected index or -1.
642 Add a source file to the list of files to merge. @param source Full path and file name of source document. @throws FileNotFoundException If the file doesn't exist
643 This will parse the trailer from the stream and add it to the state. @return false on parsing error @throws IOException If an IO error occurs.
644 Returns the {@link COSBase}, that is registered for the given {@link COSObjectKey} in this compression pool. @param key The {@link COSObjectKey} a {@link COSBase} is registered for in this compression pool. @return The {@link COSBase}, that is registered for the given {@link COSObjectKey} in this compression pool, if such an object is contained.
645 Executes the instruction sequence. @param context the execution context
646 Constructor that will use the provided function to create a stream cache for the storage of the PDF streams. @param streamCacheCreateFunction a function to create an instance of a stream cache @param parser Parser to be used to parse the document on demand
647 This is used to handle an operation. @param operator The operation to perform. @param operands The list of arguments. @throws IOException If there is an error processing the operation.
648 @return Returns the textLineMatrix.
649 @param value The textLineMatrix to set.
650 @return Returns the textMatrix.
651 @param value The textMatrix to set.
652 Transforms a width using the CTM. @param width the width to be transformed @return the transformed width
653 Returns the non-stroking color. @return The non-stroking color.
654 Sets the non-stroking color. @param color The new non-stroking color.
655 Returns the non-stroking color space. @return The non-stroking color space.
656 Returns the stroking color. @return The stroking color.
657 Sets the stroking color. @param color The new stroking color.
658 Returns the stroking color space. @return The stroking color space.
659 Returns a new InputStream which reads the encoded PDF stream data. Experts only! @return InputStream containing raw, encoded PDF stream data. @throws IOException If the stream could not be read.
660 Returns a new OutputStream for writing encoded PDF data. Experts only! @return OutputStream for raw PDF stream data. @throws IOException If the output stream could not be created.
661 Finds a suitable image reader for an image format. @param formatName The image format to search for. @param errorCause The probably cause if something goes wrong. @return The image reader for the format. @throws MissingImageReaderException if no image reader is found.
662 Finds a suitable image raster reader for an image format. @param formatName The image format to search for. @param errorCause The probably cause if something goes wrong. @return The image reader for the format. @throws MissingImageReaderException if no image reader is found.
663 This is used to create/cache operators in the system. @param operator The operator for the system. @return The operator that matches the operator keyword.
664 {@inheritDoc}
665 Whether the for control points are on a line. @param ctl an edge's control points, the size of ctl is 4 @return true when 4 control points are on a line, otherwise false
666 This will get the lower left x coordinate. @return The lower left x.
667 This will get the lower left y coordinate. @return The lower left y.
668 This will get the upper right x coordinate. @return The upper right x .
669 This will get the upper right y coordinate. @return The upper right y.
670 This will get the size of the font. @return The size of the font.
671 Returns the r value of the tristimulus. @return the R value.
672 Returns the g value of the tristimulus. @return the g value
673 Returns the b value of the tristimulus. @return the B value
674 Returns the x value of the tristimulus. @return the X value
675 Returns the y value of the tristimulus. @return the Y value
676 Returns the z value of the tristimulus. @return the Z value
677 Get the value of the array as an integer, return the default if it does not exist. @param index The value of the array. @param defaultValue The value to return if the value is null. @return The value at the index or the defaultValue.
678 Get an entry in the array that is expected to be a COSName. @param index The index into the array. @param defaultValue The value to return if it is null. @return The value at the index or defaultValue if none is found.
679 This will return the index of the entry or -1 if it is not found. @param object The object to search for. @return The index of the object or -1.
680 Returns the list of filters.
681 Create the COSArrayList specifying the List and the backing COSArray. <p>User of this constructor need to ensure that the entries in the List and the backing COSArray are matching i.e. the COSObject of the List entry is included in the COSArray. <p>If the number of entries in the List and the COSArray differ it is assumed that the List has been filtered. In that case the COSArrayList shall only be used for reading purposes and no longer for updating. @param actualList The list of standard java objects @param cosArray The COS array object to sync to.
682 Performs exponential interpolation {@inheritDoc}
683 This will get the list of filters that are associated with this stream. @return A (possibly empty) list of all encoding filters to apply to this stream, never null.
684 This will get the list of filters that are associated with this stream. The list is empty if there are none. @return A list of all encoding filters to apply to this stream.
685 Write the given {@link COSBoolean} to the given stream. @param output The stream, that shall be written to. @param cosBoolean The content, that shall be written.
686 Writes a string to the content stream as ASCII. @param text the text to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
687 Write the given {@link COSDictionary} to the given stream. @param output The stream, that shall be written to. @param cosDictionary The content, that shall be written.
688 Notifies the user attribute object if the user property is changed. @param oldEntry old entry @param newEntry new entry
689 {@inheritDoc}
690 This is a convenience method that will get the dictionary object that is expected to be a COSObject. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSObject.
691 This is a special case of getItem that takes multiple keys, it will handle the situation where multiple keys could get the same value, ie if either CS or ColorSpace is used to get the colorspace. This will get an object from this dictionary. @param firstKey The first key to try. @param secondKey The second key to try. @return The object that matches the key.
692 Returns the number of recipients contained in the Recipients field of the dictionary. @return the number of recipients contained in the Recipients field.
693 returns the COSString contained in the Recipients field at position i. @param i the position in the Recipients field array. @return a COSString object containing information about the recipient number i.
694 @return the direction in which the specified transition effect shall move. It can be either a {@link COSInteger} or {@link COSName#NONE}. Default to {@link COSInteger#ZERO} @see PDTransitionDirection
695 This will get the keys of all metadata information fields for the document. @return all metadata key strings. @since Apache PDFBox 1.3.0
696 Gets the attribute names. @return the attribute names
697 Copy all Trailer Information to this file. @param trailerDict dictionary to be added as trailer info
698 Copy Constructor. This will make a shallow copy of this dictionary. @param dict The dictionary to copy.
699 Tell if the dictionary is an info dictionary. @param dictionary the dictionary to be checked @return true if the given dictionary is an info dictionary
700 Returns true if widths are present in the font descriptor. @return true if widths are present in the font descriptor
701 Returns true if the missing widths entry is present in the font descriptor. @return true if the missing widths entry is present in the font descriptor
702 This will tell if the AcroForm has XFA content. @return true if the AcroForm is an XFA form
703 Signals that a new XRef object (table or stream) starts. @param startBytePos the offset to start at @param type the type of the Xref object
704 Constructor. @param aFloat The primitive float object that this object wraps. @throws IOException If aFloat is not a float.
705 {@inheritDoc}
706 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
707 Uses the managed {@link #updateInfo} as the base object of a new {@link COSIncrement}. @return A {@link COSIncrement} based on the managed {@link #updateInfo}. @see COSUpdateInfo @see COSIncrement
708 Creates a new instance. @param targetDoc the PDF document to modify
709 Default constructor.
710 Convenience method, so that we get false for types that can't be updated. @param base @return
711 Appends a marked-content sequence kid. @param mcid the marked-content id (MCID). @throws IllegalArgumentException if the mcid is negative.
712 @return the value for this direction
713 Write the given {@link COSInteger} to the given stream. @param output The stream, that shall be written to. @param cosInteger The content, that shall be written.
714 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
715 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
716 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
717 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
718 Constructor. @param num The object number. @param gen The object generation number.
719 Compares this object with the specified object for order. Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object. @param xReferenceEntry the object to be compared. @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
720 This will get the X scaling factor. This is dependent on the current transformation matrix (set by the "cm" operator), the text matrix (set by the "Tm" operator) and the font size (set by the "Tf" operator). @return The X scaling factor.
721 This will get the Y scaling factor. This is dependent on the current transformation matrix (set by the "cm" operator), the text matrix (set by the "Tm" operator) and the font size (set by the "Tf" operator). @return The Y scaling factor.
722 COSWriter constructor. @param outputStream The output stream to write the PDF. @param compressParameters The configuration for the document's compression.
723 COSWriter constructor for incremental updates. There must be a path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set, starting from the document catalog. For signatures this is taken care by PDFBox itself. @param outputStream output stream where the new PDF data will be written. @param inputData random access read containing source PDF data @throws IOException if something went wrong
724 Sets the {@link #updated} state of the managed {@link #updateInfo} to the given state.<br> This shall only then have an effect, if {@link #isAcceptingUpdates()} returns {@code true}. @param updated The state to set for {@link #updated}. @see #update(boolean) @see #updated @see #isAcceptingUpdates()
725 Returns the content of this string as a PDF <i>text string</i>. @return the PDF string representation of the COSString
726 Creates a new <i>text string</i> from a Java String. @param text The string value of the object. @param forceHex forces the hexadecimal presentation of the string if set to true
727 Returns true if this font is one of the "Standard 14" fonts and receives special handling. @return true if this font is one of the "Standard 14" fonts
728 This will read a chunk of data. @param data The buffer to write data to. @param offset The offset into the data stream. @param len The number of byte to attempt to read. @return The number of bytes actually read. @throws IOException If there is an error reading data from the underlying stream.
729 This will close the stream. @throws IOException If there is an error closing the wrapped stream.
730 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
731 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
732 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
733 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
734 This will read the next byte from the stream. @return The next byte read from the stream. @throws IOException If there is an error reading from the wrapped stream.
735 This will read a chunk of data. @param data The buffer to write data to. @param offset The offset into the data stream. @param length The number of byte to attempt to read. @return The number of bytes actually read. @throws IOException If there is an error reading data from the underlying stream.
736 Read the image stream of the signature and set height and width. @param stream stream of your visible signature image @throws IOException If we can't read, flush, or close stream of image
737 {@inheritDoc}
738 We look which row encoding is the "best" one, ie. has the lowest sum. We don't implement anything fancier to choose the right row encoding. This is just the recommend algorithm in the spec. The get the perfect encoding you would need to do a brute force check how all the different encoded rows compress in the zip stream together. You have would have to check 5*image-height permutations... @return the "best" row encoding of the row encodings
739 Reset all data so that it can be used to rebuild the trailer.
740 Close all input documents which were used for the overlay and opened by this class. @throws IOException if something went wrong
741 Creates a Form XObject for reading. @param stream The XObject stream
742 Constructor. @param pdContentstream The content stream to parse. @throws IOException If there is an error initializing the stream.
743 Constructor. @param bytes the bytes to parse.
744 Search for/parse the object with the given object number. The stream is closed after parsing the object with the given number. @param objectNumber the number of the object to b e parsed @return the parsed object or null if the object with the given number can't be found @throws IOException if there is an error while parsing the stream
745 Read all object numbers from the compressed object stream. The stream is closed after reading the object numbers. @return a map off all object numbers and the corresponding offset within the object stream. @throws IOException if there is an error while parsing the stream
746 Constructor. @param codeToName the given code to name mapping
747 Creates an encoding from the given FontBox encoding. @param encoding FontBox encoding @return the encoding created from the given FontBox encoding
748 Skip the upcoming CRLF or LF which are supposed to follow a stream. Trailing spaces are removed as well. @throws IOException if something went wrong
749 Skip one line break, such as CR, LF or CRLF. @return true if a line break was found and removed. @throws IOException if something went wrong
750 This will read bytes until the first end of line marker occurs. NOTE: The EOL marker may consists of 1 (CR or LF) or 2 (CR and CL) bytes which is an important detail if one wants to unread the line. @return The characters between the current position and the end of the line. @throws IOException If there is an error reading from the stream.
751 This will skip all spaces and comments that are present. @throws IOException If there is an error reading from the stream.
752 The number of color components of this shading. @return number of color components of this shading @throws IOException if the data could not be read
753 The number of color components of this shading. @return number of color components of this shading @throws IOException if the data could not be read
754 Search for the offset of the given xref table/stream among those found by a brute force search. @param xrefOffset the given offset to be searched for @return the offset of the xref entry @throws IOException if something went wrong
755 Parse the header of a pdf. @return true if a PDF header was found @throws IOException if something went wrong
756 Parse the header of a fdf. @return true if a FDF header was found @throws IOException if something went wrong
757 Parse all compressed objects. The stream is closed after parsing. @return a map containing all parsed objects using the object number as key @throws IOException if there is an error while parsing the stream
758 Calculate the key to be used for RC4 and AES-128. @param objectNumber The data object number. @param genNumber The data generation number. @return the calculated key.
759 Create a new appearance stream. @param appearance The appearance stream to add to. @param outputStream The appearances output stream to write to.
760 Create a new appearance stream. Note that this is not actually a "page" content stream. @param doc The document the appearance is part of. @param appearance The appearance stream to add to. @param outputStream The appearances output stream to write to.
761 Transforms a point using the CTM. @param x the x-coordinate of the point to be transformed @param y the y-coordinate of the point to be transformed @return the transformed point
762 Not called in TexturePaint subclasses, which is why we wrap TexturePaint.
763 Concatenates (premultiplies) the given matrix to this matrix. @param matrix The matrix to concatenate.
764 Translates this matrix by the given amount. @param tx x-translation @param ty y-translation
765 Scales this matrix by the given factors. @param sx x-scale @param sy y-scale
766 This method multiplies this Matrix with the specified other Matrix, storing the product in a new instance. It is allowed to have (other == this). @param other the second operand Matrix in the multiplication; required @return the product of the two matrices.
767 Retrieve the encoded glyph IDs for the characters in the specified text, after applying any relevant GSUB rules. The glyph IDs used are also added to the specified glyph ID set. @param gsubWorker The GSUB worker which defines the GSUB transformations to apply. @param glyphIds The set of glyph IDs which is to be populated with the glyph IDs found in the text. @param font The font whose cmap table will be used to map characters to glyph IDs. @param text The text which is being converted from characters to glyph IDs. @return The encoded glyph IDs for the characters in the specified text, after applying any relevant GSUB rules. @throws IOException If there is an error during encoding. @throws IllegalStateException If we cannot find a glyph ID for any characters in the specified text.
768 Create the resulting document. Maybe overwritten if the parser uses another class as document. @return the resulting document @throws IOException if the method is called before parsing the document
769 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source input representing the pdf
770 Returns a new security handler for the given protection policy, or null none is available. @param policy the protection policy for which to create a security handler @return a new SecurityHandler instance, or null if none is available
771 Returns a new security handler for the given Filter name, or null none is available. @param name the Filter name from the PDF encryption dictionary @return a new SecurityHandler instance, or null if none is available
772 Set the stroking color. <p> The command is only emitted if the color is not null and the number of components is &gt; 0. @param color The colorspace to write. @return true if the stroking color was set successfully @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setStrokingColor(PDColor)
773 Set the non stroking color. <p> The command is only emitted if the color is not null and the number of components is &gt; 0. @param color The colorspace to write. @return true if the non stroking color was set successfully @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setNonStrokingColor(PDColor)
774 Constructor.
775 This will tell if the access permission corresponds to owner access permission (no restriction). @return true if the access permission does not restrict the use of the document
776 Indicates if any revision 3 access permission is set or not. @return true if any revision 3 access permission is set
777 This will encrypt and write the data. @param data The data to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
778 This will encrypt and write the data. @param data The data to encrypt. @param offset The offset into the array to start reading data from. @param len The number of bytes to attempt to read. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
779 Inserts the diacritic TextPosition to the str of this TextPosition and updates the widths array to include the extra character width. @param i current character @param diacritic The diacritic TextPosition
780 Write a Java string to the output stream. The default implementation will ignore the <code>textPositions</code> and just calls {@link #writeString(String)}. @param text The text to write to the stream. @param textPositions The TextPositions belonging to the text. @throws IOException If there is an error when writing the text.
781 Constructor of class Line. @param p0 one end of a line @param p1 the other end of the line @param c0 color of point p0 @param c1 color of point p1
782 Creates a new soft mask paint. @param paint underlying paint. @param mask soft mask @param bboxDevice bbox of the soft mask in the underlying Graphics2D device space @param backdropColor the color to be used outside the transparency group’s bounding box; if null, black will be used. @param transferFunction the transfer function, may be null.
783 Computes backdrop removal. The backdrop removal equation is given in section 11.4.4 in the PDF 32000-1:2008 standard. It returns the final color <code>C</code> for each pixel in the group:<br> <code>C = Cn + (Cn - C0) * (alpha0 / alphagn - alpha0)</code><br> where<br> <code>Cn</code> is the group color including backdrop (read from <code>groupImage</code>),<br> <code>C0</code> is the backdrop color,<br> <code>alpha0</code> is the backdrop alpha,<br> <code>alphagn</code> is the group alpha excluding backdrop (read the alpha channel from <code>groupAlphaImage</code>)<br> <p> The alpha of the result is equal to <code>alphagn</code>, i.e., the alpha channel of <code>groupAlphaImage</code>. <p> The <code>backdrop</code> image may be much larger than <code>groupImage</code> if, for example, the current page is used as the backdrop. Only a specific rectangular region of <code>backdrop</code> is used in the backdrop removal: upper-left corner is at <code>(offsetX, offsetY)</code>; width and height are equal to those of <code>groupImage</code>. @param backdrop group backdrop @param offsetX backdrop left X coordinate @param offsetY backdrop upper Y coordinate
784 Returns the metrics for font specified by fontName. Loads the font metrics if not already loaded. @param fontName name of font; either a base name or alias @return the font metrics or null if the name is not one of the known names @throws IllegalArgumentException if no metrics exist for that font.
785 Creates a new GlyphList from a glyph list file. @param numberOfEntries number of expected values used to preallocate the correct amount of memory @param input glyph list in Adobe format @throws IOException if the glyph list could not be read
786 Creates a new GlyphList from multiple glyph list files. @param glyphList an existing glyph list to be copied @param input glyph list in Adobe format @throws IOException if the glyph list could not be read
787 Returns the GID for the given character code. @param code character code @return GID (glyph index) @throws IOException if the data could not be read
788 Maps a PostScript glyph name to the name in the underlying font, for example when using a TTF font we might map "W" to "uni0057".
789 Maps a PostScript glyph name to the name in the underlying font, for example when using a TTF font we might map "W" to "uni0057".
790 Lazy load the ICC profile, because it's slow. @throws IOException if the ICC profile could not be initialized
791 @param image The image to apply the mask to as alpha channel. @param mask A mask image in 8 bit Gray. Even for a stencil mask image due to {@link #getOpaqueImage()} and {@link SampledImageReader}'s {@code from1Bit()} special handling of DeviceGray. @param interpolateMask interpolation flag of the mask image. @param isSoft {@code true} if a soft mask. If not stencil mask, then alpha will be inverted by this method. @param matte an optional RGB matte if a soft mask. @return an ARGB image (can be the altered original image)
792 Check if the chunk is sane, i.e. CRC matches and offsets and lengths in the byte array
793 Constructor of CubicBezierCurve @param ctrlPnts 4 control points [p0, p1, p2, p3] @param l dividing level, if l = 0, one cubic Bezier curve is divided into 2^0 = 1 segments, if l = n, one cubic Bezier curve is divided into 2^n segments
794 Whether a point is contained in this ShadedTriangle. @param p the target point @return false if p is outside of this triangle, otherwise true
795 Calculate the color of a point. @param p the target point @return an array denotes the point's color
796 Modify the current clipping path by intersecting it with the given path. @param path path to intersect with the clipping path
797 Modify the current clipping path by intersecting it with the given path. @param area area to intersect with the clipping path
798 Transfer clip to the destination device. Override this if you want to avoid to do slow intersecting operations but want the destination device to do this (e.g. SVG). You can get the individual clippings via {@link PDGraphicsState#getCurrentClippingPaths()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5258">PDFBOX-5258</a> for sample code. @param graphics graphics device
799 Draws the pattern stream to the requested context. @param g The graphics context to draw onto. @param pattern The tiling pattern to be used. @param colorSpace color space for this tiling. @param color color for this tiling. @param patternMatrix the pattern matrix @throws IOException If there is an IO error while drawing the page.
800 This will get the text direction adjusted x position of the character. This is adjusted based on text direction so that the first character in that direction is in the upper left at 0,0. This method ignores the page rotation but takes the text rotation (see {@link #getDir() getDir()}) and adjusts the coordinates to awt. This is useful when doing text extraction, to compare the glyph positions when imagining these to be horizontal. See also <a href="https://stackoverflow.com/questions/57067372/">this answer by Michael Klink</a> for further details and <a href="https://issues.apache.org/jira/browse/PDFBOX-4597">PDFBOX-4597</a> for a sample file. @return The x coordinate of the text.
801 Constructor. @param pageRotation rotation of the page that the text is located in @param pageWidth width of the page that the text is located in @param pageHeight height of the page that the text is located in @param textMatrix text rendering matrix for start of text (in display units) @param endX x coordinate of the end position @param endY y coordinate of the end position @param maxHeight Maximum height of text (in display units) @param individualWidth The width of the given character/string. (in text units) @param spaceWidth The width of the space character. (in display units) @param unicode The string of Unicode characters to be displayed. @param charCodes An array of the internal PDF character codes for the glyphs in this text. @param font The current font for this text position. @param fontSize The new font size. @param fontSizeInPt The font size in pt units (see {@link #getFontSizeInPt()} for details).
802 This will get the y position of the text, adjusted so that 0,0 is upper left and it is adjusted based on the text direction. This method ignores the page rotation but takes the text rotation and adjusts the coordinates to awt. This is useful when doing text extraction, to compare the glyph positions when imagining these to be horizontal. See also <a href="https://stackoverflow.com/questions/57067372/">this answer by Michael Klink</a> for further details and <a href="https://issues.apache.org/jira/browse/PDFBOX-4597">PDFBOX-4597</a> for a sample file. @return The adjusted y coordinate of the character.
803 This will get the width of the string when page rotation adjusted coordinates are used. @return The width of the text in display units.
804 This will get the width of the string when text direction adjusted coordinates are used. @return The width of the text in display units.
805 Start a new article, which is typically defined as a column on a single page (also referred to as a bead). This assumes that the primary direction of text is left to right. Default implementation is to do nothing. Subclasses may provide additional information. @throws IOException If there is any error writing to the stream.
806 Write something (if defined) at the end of a paragraph. @throws IOException if something went wrong
807 returns the list item Pattern object that matches the text at the specified PositionWrapper or null if the text does not match such a pattern. The list of Patterns tested against is given by the {@link #getListItemPatterns()} method. To add to the list, simply override that method (if sub-classing) or explicitly supply your own list using {@link #setListItemPatterns(List)}. @param pw position @return the matching pattern
808 Normalize certain Unicode characters. For example, convert the single "fi" ligature to "f" and "i". Also normalises Arabic and Hebrew presentation forms. @param word Word to normalize @return Normalized word
809 Converts a Calendar to a string formatted as: D:yyyyMMddHHmmss#hh'mm' where # is Z, +, or -. @param cal The date to convert to a string. May be null. The DST_OFFSET is included when computing the output time zone. @return The date as a String to be used in a PDF document, or null if the cal value is null
810 Converts the date to ISO 8601 string format: yyyy-mm-ddThh:MM:ss#hh:mm (where '#" is '+' or '-'). @param cal The date to convert. Must not be null. The DST_OFFSET is included in the output value. @return The date represented as an ISO 8601 string.
811 This will take this string and create a hex representation of the bytes that make the string. @return A hex string representing the bytes in this string.
812 Write externally created signature of PDF data obtained via {@link #getDataToSign()} method. @param cmsSignature CMS signature byte array @throws IllegalStateException if PDF is not prepared for external signing @throws IOException if source data stream is closed
813 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
814 Writes the given byte array as hex value to the given output stream. @param bytes the byte array to be written @param output the output stream to be written to @throws IOException exception if anything went wrong
815 Sorts the array using iterative (bottom-up) merge sort. @param <T> the class of the objects in the list @param arr the array of objects to be sorted. @param cmp the comparator to determine the order of the list.
816 This will parse an XML stream and create a DOM document. @param is The stream to get the XML from. @return The DOM document. @throws IOException It there is an error creating the dom.
817 Examines the a file's first bytes and estimates the file's type. <p> Requires a {@link BufferedInputStream} in order to mark and reset the stream to the position at which it was provided to this method once completed. <p> Requires the stream to contain at least eight bytes. @param inputStream a buffered input stream of the file to examine. @return the file type. @throws IOException if an IO error occurred or the input stream ended unexpectedly.
818 Constructor.
819 This will get a COSName object with that name. @param aName The name of the object. @return A COSName with the specified name.
820 Creates a new PDF string from a byte array. This method can be used to read a string from an existing PDF file, or to create a new byte string. @param bytes The raw bytes of the PDF text string or byte string.
821 Constructor.
822 Use the given list to initialize the COSArray. @param cosObjectables the initial list of COSObjectables
823 Creates a new stream with an empty dictionary. Data is stored in the given scratch file. @param streamCache Stream cache for writing stream data.
824 {@inheritDoc}
825 Return a default DecodeResult. @return a default instance of DecodeResult
826 Default Constructor.
827 Constructor for embedding.
828 This will take a map&lt;java.lang.String,org.apache.pdfbox.pdmodel.COSObjectable&gt; and convert it into a COSDictionary. @param someMap A map containing COSObjectables @return A proper COSDictionary
829 Default constructor
830 Constructor.
831 Constructor. @param valueClass The PD Model type of object that is the value.
832 Creates a new empty page label range object.
833 Default Constructor.
834 Constructor for subclasses.
835 Default Constructor.
836 creates a new empty crypt filter dictionary.
837 creates a new empty encryption dictionary.
838 Default constructor.
839 Default constructor.
840 Default constructor.
841 Default constructor.
842 Default constructor.
843 Default constructor.
844 Default constructor.
845 Default constructor.
846 Default constructor.
847 Creates a new DeviceN colour space attributes dictionary.
848 Creates a new DeviceN Process Dictionary.
849 Default constructor.
850 Default constructor.
851 Default constructor.
852 Default constructor.
853 Default constructor.
854 Default constructor.
855 Default constructor, creates target directory.
856 Constructor.
857 Default constructor.
858 Constructor.
859 Constructor.
860 Default constructor.
861 Default constructor.
862 Default constructor.
863 Default constructor.
864 Constructor. @param acroForm The form that this field is part of.
865 Constructor.
866 Constructor.
867 Constructor. @param object The object that this encapsulates. @param objectKey The COSObjectKey of the encapsulated object
868 Creates a default attribute object with a given dictionary. @param dictionary the dictionary
869 Constructor @param dictionary the dictionary
870 Creates a new standard attribute object with a given dictionary. @param dictionary the dictionary
871 Constructor for an existing outline item. @param dic The storage dictionary.
872 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object. @throws IllegalStateException if the value of the metadata entry is different from a stream or null
873 Returns the metadata associated with this XObject, or null if there is none. @return the metadata associated with this object.
874 A reference to an object stream, of which the current object stream is considered an extension. @return The object that this stream is an extension.
875 Constructor. @param function The function.
876 Constructor. @param functionStream The function .
877 Creates a PostScript XObject. @param stream The XObject stream
878 Creates a Form XObject for reading. @param stream The XObject stream
879 Creates a Form XObject for reading. @param stream The XObject stream @param cache the cache to be used for the resources
880 Constructor.
881 Constructor.
882 Constructor used for encryption. @param publicKeyProtectionPolicy The protection policy.
883 Constructor used for encryption. @param standardProtectionPolicy The protection policy.
884 Constructor. @param a An existing FDF Annotation.
885 Constructor. @param a An existing FDF Annotation.
886 Constructor. @param a An existing FDF Annotation.
887 Constructor. @param a An existing FDF Annotation.
888 Creates a new tiling pattern from the given COS dictionary. @param dictionary The COSDictionary for this pattern.
889 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
890 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
891 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
892 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
893 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node to be created
894 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
895 Generate a unique name for the signature. @return the signature's unique name
896 {@inheritDoc}
897 Creates a new soft mask. @param dictionary SMask @return the newly created instance of PDSoftMask
898 Constructor. Uses main memory to buffer PDF streams. @param parser Parser to be used to parse the document on demand
899 Constructor that will use the provided function to create a stream cache for the storage of the PDF streams. @param streamCacheCreateFunction a function to create an instance of a stream cache
900 This is used to handle an operation. @param operation The operation to perform. @param arguments The list of arguments. @throws IOException If there is an error processing the operation.
901 Creates a marked-content sequence. @param tag the tag @param properties the properties @return the marked-content sequence
902 This will get the width of this rectangle as calculated by upperRightX - lowerLeftX. @return The width of this rectangle.
903 Method to determine if the x/y point is inside this rectangle. @param x The x-coordinate to test. @param y The y-coordinate to test. @return True if the point is inside this rectangle.
904 This will get the height of this rectangle as calculated by upperRightY - lowerLeftY. @return The height of this rectangle.
905 Returns a path which represents this rectangle having been transformed by the given matrix. Note that the resulting path need not be rectangular. @param matrix the matrix to be used for the transformation @return the transformed rectangle
906 Returns a general path equivalent to this rectangle. This method avoids the problems caused by Rectangle2D not working well with -ve rectangles. @return a general path equivalent to this rectangle
907 This will return a string representation of this rectangle. @return This object as a string.
908 Get the value of the array as an integer. @param index The index into the list. @return The value at that index or -1 if does not exist.
909 Get the value of the array as a string. @param index The index into the array. @return The name converted to a string or null if it does not exist.
910 Returns a new OutputStream for writing stream data, using and the given filters. @param filters COSArray or COSName of filters to be used. @return OutputStream for un-encoded stream data. @throws IOException If the output stream could not be created.
911 Creates an Image XObject with the given stream as its contents and current color spaces. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param stream the XObject stream to read @param resources the current resources
912 This will get the suffix for this image type, e.g. jpg/png. @return The image suffix or null if not available.
913 Writes a real number to the content stream. @param real the real number to be added to the content stream @throws IOException If the underlying stream has a problem being written to. @throws IllegalArgumentException if the parameter is not a finite number
914 Writes an integer number to the content stream. @param integer the integer to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
915 Writes a string to the content stream as ASCII. @param text the text to be added to the content stream followed by a newline @throws IOException If the underlying stream has a problem being written to.
916 {@inheritDoc}
917 This factory method will get the appropriate number object. @param number The string representation of the number. @return A number object, either float or int. @throws IOException If the string is not a number.
918 Write the given {@link COSFloat} to the given stream. @param output The stream, that shall be written to. @param cosFloat The content, that shall be written.
919 Uses this {@link COSUpdateInfo} as the base object of a new {@link COSIncrement}. @return A {@link COSIncrement} based on this {@link COSUpdateInfo}. @see COSIncrement
920 Returns the object key for the given combination of object and generation number. The object key from the cross reference table/stream will be reused if available. Otherwise a newly created object will be returned. @param num the given object number @param gen the given generation number @return the COS object key
921 Brute force search for every object in the pdf. @throws IOException if something went wrong
922 Search for all offsets of object streams within the given pdf @return a map of all offsets for object streams @throws IOException if something went wrong
923 Parses through the unfiltered stream and populates the xrefTable HashMap. @param resolver resolver to read the xref/trailer information @throws IOException If there is an error while parsing the stream.
924 Check if the given object can be found at the given offset. Returns the provided object key if everything is ok. If the generation number differs it will be fixed and a new object key is returned. @param objectKey the key of object we are looking for @param offset the offset where to look @param xrefOffset a map with with all known xref entries @return returns the found/fixed object key @throws IOException if something went wrong
925 This will parse the xref table from the stream and add it to the state The XrefTable contents are ignored. @param startByteOffset the offset to start at @return false on parsing error @throws IOException If an IO error occurs.
926 COSWriter constructor. @param outputStream The output stream to write the PDF.
927 Constructor for incremental updates with a list of objects to write. This allows to include objects even if there is no path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set so the incremental update gets smaller. Only dictionaries are supported; if you need to update other objects classes, then add their parent dictionary. @param outputStream output stream where the new PDF data will be written. @param inputData random access read containing source PDF data. @param objectsToWrite objects that <b>must</b> be part of the incremental saving. @throws IOException if something went wrong
928 Set the update state of the dictionary for the COSWriter. This indicates whether an object is to be written when there is an incremental save. @param flag the update state.
929 Calls {@link #update(boolean)} with {@code true} as the new update state.<br> This shall only then have an effect, if {@link #isAcceptingUpdates()} returns {@code true}. @see #update(boolean) @see #updated @see #isAcceptingUpdates()
930 Get an entry in the array that is expected to be a COSName. @param index The index into the array. @param defaultValue The value to return if it is null. @return The value at the index or defaultValue if none is found.
931 This will get the file name. @return The file name.
932 This will get the name of the destination. @return The name of the destination.
933 Return either one of a list which can have two-element arrays entries. <p> Some entries in a dictionary can either be an array of elements or an array of two-element arrays. This method will either return the elements in the array or in case of two-element arrays, the element designated by the pair index </p> <p> An {@link IllegalArgumentException} will be thrown if the items contain two-element arrays and the index is not 0 or 1. </p> @param items the array of elements or two-element arrays @param pairIdx the index into the two-element array @return a List of single elements
934 This will get the (optional) export values. <p>The export values are defined in the field dictionaries /Opt key.</p> <p>The option values are used to define the export values for the field to <ul> <li>hold values in non-Latin writing systems as name objects, which represent the field value, are limited to PDFDocEncoding </li> <li>allow radio buttons having the same export value to be handled independently </li> </ul> @return List containing all possible export values. If there is no /Opt entry an empty list will be returned. @see #getOnValues()
935 Get the default appearance. This is an inheritable attribute. The default appearance contains a set of default graphics and text operators to define the field’s text size and color. @return the DA element of the dictionary object
936 Creates a new <i>text string</i> from a Java String. @param text The string value of the object.
937 Constructor usable for signing existing signature fields. @param imageStream image as a stream @throws IOException if the new instance of PDVisibleSignDesigner could not be created
938 Set the image for the signature. @param path Path of the image file. @return Visible Signature Configuration Object @throws IOException if the image for the signature could not be set
939 Creates a Transparency Group for reading. @param stream The XObject stream
940 This will parse a PDF dictionary. @param isDirect indicates whether the dictionary to be read is a direct object @return The parsed dictionary, never null. @throws IOException If there is an error reading the stream.
941 This will read the next string from the stream. @return The string that was read from the stream, never null. @throws IOException If there is an error reading from the stream.
942 Reads given pattern from {@link #source}. Skipping whitespace at start and end if wanted. @param expectedString pattern to be skipped @param skipSpaces if set to true spaces before and after the string will be skipped @throws IOException if pattern could not be read
943 This will read the next string from the stream up to a certain length. @param length The length to stop reading at. @return The string that was read from the stream of length 0 to length. @throws IOException If there is an error reading from the stream.
944 This will read an integer from the stream. @return The integer that was read from the stream. @throws IOException If there is an error reading from the stream.
945 This will read an long from the stream. @return The long that was read from the stream. @throws IOException If there is an error reading from the stream.
946 Try to find a fixed offset for the given xref table/stream. @param objectOffset the given offset where to look at @return the fixed offset @throws IOException if something went wrong
947 This will compute the user password hash. @param password The plain text password. @param owner The owner password hash. @param permissions The document permissions. @param id The document id. @param encRevision The revision of the encryption. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @return The user password. @throws IOException if the password could not be computed
948 Compute the owner entry in the encryption dictionary. @param ownerPassword The plaintext owner password. @param userPassword The plaintext user password. @param encRevision The revision number of the encryption algorithm. @param length The length of the encryption key. @return The o entry of the encryption dictionary. @throws IOException if the owner password could not be computed
949 Rotates this matrix by the given factors. @param theta The angle of rotation measured in radians
950 Applies a text position adjustment from the TJ operator. May be overridden in subclasses. @param tx x-translation @param ty y-translation
951 Translates this matrix by the given vector. @param vector 2D vector
952 Produces a copy of the first matrix, with the second matrix concatenated. @param a The matrix to copy. @param b The matrix to concatenate. @return a copy of the first matrix with the second matrix concatenated
953 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps.
954 {@inheritDoc}
955 Returns the access permissions granted when the document was decrypted. If the document was not decrypted this method returns the access permission for a document owner (ie can do everything). The returned object is in read only mode so that permissions cannot be changed. Methods providing access to content should rely on this object to verify if the current user is allowed to proceed. @return the access permissions for the current user on the document.
956 Computes the revision version of the StandardSecurityHandler to use regarding the version number and the permissions bits set. See PDF Spec 1.6 p98 @param version The version number. @return The computed revision number.
957 Encrypt or decrypt data with AES with key length other than 256 bits. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
958 Encrypt or decrypt data with AES256. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
959 Encrypt or decrypt data with RC4. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param input The data to encrypt. @param output The output to write the encrypted data to. @throws IOException If there is an error reading the data.
960 This will encrypt and write the data. @param data The data to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
961 Return the {@code SASLPrep}-canonicalised version of the given {@code str} for use as a query string. This implements the {@code SASLPrep} algorithm defined in <a href="https://tools.ietf.org/html/rfc4013">RFC 4013</a>. @param str The string to canonicalise. @return The canonicalised string. @throws IllegalArgumentException if the string contained prohibited codepoints, or broke the requirements for bidirectional character handling. @see <a href="https://tools.ietf.org/html/rfc3454#section-7">RFC 3454, Section 7</a> for discussion of what a query string is.
962 Return the {@code SASLPrep}-canonicalised version of the given @code str} for use as a stored string. This implements the {@code SASLPrep} algorithm defined in <a href="https://tools.ietf.org/html/rfc4013">RFC 4013</a>. @param str The string to canonicalise. @return The canonicalised string. @throws IllegalArgumentException if the string contained prohibited codepoints, or broke the requirements for bidirectional character handling. @see <a href="https://tools.ietf.org/html/rfc3454#section-7">RFC 3454, Section 7</a> for discussion of what a stored string is.
963 Write a list of string containing a whole line of a document. @param line a list with the words of the given line @throws IOException if something went wrong
964 {@inheritDoc} <p> The method returns null if there is there was an error opening the font.
965 Saves the font metadata cache to disk.
966 Loads the font metadata cache from disk.
967 Sets the font service provider.
968 Constructor. @param p an array of the 3 vertices of a triangle @param c an array of color corresponding the vertex array p
969 Writes the CMap as ASCII to the given output stream. @param out ASCII output stream @throws IOException if the stream could not be written
970 Loads a glyph list from disk.
971 Inverts the font's code -&gt; GID mapping. Any duplicate (GID -&gt; code) mappings will be lost. @return the GID for the given code @throws IOException if the data could not be read
972 Check if the converter state is sane. @param state the parsed converter state @return true if the state seems plausible
973 End buffering the text clipping path, if any.
974 Sets the clipping path using caching for performance. We track lastClip manually because {@link Graphics2D#getClip()} returns a new object instead of the same one passed to {@link Graphics2D#setClip(java.awt.Shape) setClip()}. You may need to call this if you override {@link #showGlyph(Matrix, PDFont, int, Vector) showGlyph()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5093">PDFBOX-5093</a> for more.
975 Return the stream of PDF data to be signed. Clients should use this method only to create signatures externally. {@link #write(PDDocument)} method should have been called prior. The created signature should be set using {@link #writeExternalSignature(byte[])}. <p> When {@link SignatureInterface} instance is used, COSWriter obtains and writes the signature itself. </p> @return data stream to be signed @throws IllegalStateException if PDF is not prepared for external signing @throws IOException if input data is closed
976 Merge a single character TextPosition into the current object. This is to be used only for cases where we have a diacritic that overlaps an existing TextPosition. In a graphical display, we could overlay them, but for text extraction we need to merge them. Use the contains() method to test if two objects overlap. @param diacritic TextPosition to merge into the current TextPosition.
977 Determine if this TextPosition logically contains another (i.e. they overlap and should be rendered on top of each other). @param tp2 The other TestPosition to compare against @return True if tp2 is contained in the bounding box of this text.
978 Determine if this TextPosition perfectly contains another (i.e. the other TextPosition overlaps 100% with this one and fits entirely inside its bounding box when they are rendered on top of each other). @param tp2 The other TestPosition to compare against @return True if tp2 is contained completely inside the bounding box of this text.
979 writes the paragraph separator string to the output. @throws IOException if something went wrong
980 tests the relationship between the last text position, the current text position and the last text position that followed a line separator to decide if the gap represents a paragraph separation. This should <i>only</i> be called for consecutive text positions that first pass the line separation test. <p> This base implementation tests to see if the lastLineStartPosition is null OR if the current vertical position has dropped below the last text vertical position by at least 2.5 times the current text height OR if the current horizontal position is indented by at least 2 times the current width of a space character. </p> <p> This also attempts to identify text that is indented under a hanging indent. </p> <p> This method sets the isParagraphStart and isHangingIndent flags on the current position object. </p> @param position the current text position. This may have its isParagraphStart or isHangingIndent flags set upon return. @param lastPosition the previous text position (should not be null). @param lastLineStartPosition the last text position that followed a line separator, or null. @param maxHeightForLine max height for text positions since lasLineStartPosition.
981 Used within {@link #normalize(List)} to create a single {@link WordWithTextPositions} entry.
982 Write the given {@link COSName} to the given stream. @param output The stream, that shall be written to. @param cosName The content, that shall be written.
983 Writes a COSName to the content stream. @param name the name to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
984 This will output the given text/byte string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
985 Sorts this list according to the order induced by the specified {@link Comparator}. @param <T> the class of the objects in the list @param list the list to be sorted. @param cmp the comparator to determine the order of the list.
986 Constructor. Will apply encoding-specific conversions to the output text. @param encoding The encoding that the output will be written in.
987 Instantiate a new PDFTextStripper object.
988 This will do a lookup into the dictionary. @param key The key to the object. @return The item that matches the key.
989 @see java.util.Map#containsKey(Object) @param name The key to find in the map. @return true if the map contains this key.
990 Returns a filter instance given its name as a string. @param filterName the name of the filter to retrieve @return the filter that matches the name @throws IOException if the filter name was invalid
991 This will parse a PDF name from the stream. @return The parsed PDF name. @throws IOException If there is an error reading from the stream.
992 Creates a PDColor containing the given color value. @param array a COS array containing the color value @param colorSpace color space in which the color value is defined
993 This will create a COS string from a string of hex characters. @param hex A hex string. @return A cos string with the hex characters converted to their actual bytes. @throws IOException If there is an error with the hex string.
994 This will take a list of integer objects and return a COSArray of COSInteger objects. @param integer A list of integers @return An array of COSInteger objects
995 This will take a list of string objects and return a COSArray of COSName objects. @param strings A list of strings @return An array of COSName objects
996 This will take a list of string objects and return a COSArray of COSName objects. @param strings A list of strings @return An array of COSName objects
997 Default constructor.
998 This constructor is to be used if the array doesn't exist, but is to be created and added to the parent dictionary as soon as the first element is added to the array. @param dictionary The dictionary that holds the item, and will hold the array if an item is added. @param dictionaryKey The key into the dictionary to set the item.
999 Constructor to create empty page destination.
1000 Constructor. @param x the x coordinate of the rectangle @param y the y coordinate of the rectangle @param width The width of the rectangle. @param height The height of the rectangle.
1001 Constructor. @param box the bounding box to be used for the rectangle
1002 This will set the filters that are part of this stream. @param filters The filters that are part of this stream.
1003 Sets the list of alternateColorSpace color spaces. @param list the list of color space objects
1004 Creates a new COSStream using the current configuration for scratch files. @return the new COSStream
1005 Creates a new stream with an empty dictionary. <p> Try to avoid using this constructor because it creates a new scratch file in memory. Instead, use {@link COSDocument#createCOSStream() document.getDocument().createCOSStream()} which will use the existing scratch file (in memory or in temp file) of the document. </p>
1006 Creates a new stream with an empty dictionary. Data is read from the given random accessview. Written data is stored in the given scratch file. @param streamCache Stream cache for writing stream data. @param randomAccessReadView source for the data to be read @throws IOException if the length of the random access view isn't available
1007 Returns an unmodifiable view of this dictionary. @return an unmodifiable view of this dictionary
1008 Returns the result of the last filter, for use by repair mechanisms. @return the result of the last filter
1009 This will get the resources for this Form XObject. This will return null if no resources are available. @return The resources for this Form XObject.
1010 Default constructor.
1011 Creates a new user property. @param userAttributeObject the user attribute object
1012 Default Constructor.
1013 Constructor.
1014 Constructor.
1015 Constructor.
1016 Constructor.
1017 Constructor. @param acroForm The form that this field is part of.
1018 Constructor. @param acroForm The form that this field is part of.
1019 Creates a new Layout attribute object with a given dictionary. @param dictionary the dictionary
1020 Creates a new List attribute object with a given dictionary. @param dictionary the dictionary
1021 Creates a new PrintField attribute object with a given dictionary. @param dictionary the dictionary
1022 Creates a new Table attribute object with a given dictionary. @param dictionary the dictionary
1023 Creates a Form XObject for reading. @param stream The XObject stream
1024 Creates a Transparency Group for reading. @param stream The XObject stream @param cache the cache to be used for the resources
1025 Adds a TTC or OTC to the file cache. To reduce memory, the parsed font is not cached.
1026 Adds an OTF or TTF font to the file cache. To reduce memory, the parsed font is not cached.
1027 Adds a Type 1 font to the file cache. To reduce memory, the parsed font is not cached.
1028 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1029 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1030 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1031 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1032 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1033 Pushes the current graphics state to the stack.
1034 Saves the entire graphics stack. @return the saved graphics state stack.
1035 Constructor. Uses main memory to buffer PDF streams.
1036 Constructor for encrypted pdfs. @param source input representing the pdf. @param password password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param keyAlias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of the stream cache @throws IOException if the source data could not be read
1037 Transforms the given rectangle using the CTM and then intersects it with the current clipping area.
1038 Calculate the transformed appearance box. Apply the Matrix (or an identity transform) to the BBox of the appearance stream @param appearanceStream @return the transformed rectangle
1039 Constructor with a given page size to initialize the clipping path. @param page the size of the page
1040 Get the left x coordinate. A return value of -1 implies that the current x-coordinate will be used. @return The left x coordinate.
1041 Get the left x coordinate. A return value of -1 implies that the current x-coordinate will be used. @return The left x coordinate.
1042 Get the bottom y coordinate. A return value of -1 implies that the current y-coordinate will be used. @return The bottom y coordinate.
1043 Get the right x coordinate. A return value of -1 implies that the current x-coordinate will be used. @return The right x coordinate.
1044 Get the top y coordinate. A return value of -1 implies that the current y-coordinate will be used. @return The top y coordinate.
1045 Get the top y coordinate. A return value of -1 implies that the current y-coordinate will be used. @return The top y coordinate.
1046 Get the left x coordinate. Return values of 0 or -1 imply that the current x-coordinate will be used. @return The left x coordinate.
1047 Get the top y coordinate. Return values of 0 or -1 imply that the current y-coordinate will be used. @return The top y coordinate.
1048 A flag indicating if this page destination should just fit bounding box of the PDF. @return true If the destination should fit just the bounding box.
1049 A flag indicating if this page destination should just fit bounding box of the PDF. @return true If the destination should fit just the bounding box.
1050 A flag indicating if this page destination should just fit bounding box of the PDF. @return true If the destination should fit just the bounding box.
1051 Returns a new OutputStream for writing stream data, using the current filters. @return OutputStream for un-encoded stream data. @throws IOException If the output stream could not be created.
1052 This will get a stream that can be written to, with the given filter. @param filter the filter to be used. @return An output stream to write data to. @throws IOException If an IO error occurs during writing.
1053 Creates a thumbnail Image XObject from the given COSBase and name. @param cosStream the COS stream @return an XObject
1054 Returns the Mask Image XObject associated with this image, or null if there is none. @return Mask Image XObject
1055 Returns the Soft Mask Image XObject associated with this image, or null if there is none. @return the SMask Image XObject, or null.
1056 Writes an AffineTransform to the content stream as an array. @param transform AffineTransfrom to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
1057 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1058 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1059 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
1060 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
1061 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1062 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
1063 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
1064 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1065 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1066 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1067 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1068 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
1069 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1070 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1071 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1072 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
1073 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1074 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1075 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1076 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1077 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1078 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1079 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1080 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1081 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1082 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1083 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1084 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1085 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1086 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1087 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
1088 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
1089 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
1090 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
1091 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
1092 End a marked content sequence. @throws IOException If the content stream could not be written
1093 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
1094 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
1095 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
1096 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
1097 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
1098 Returns all found objects of a brute force search. @return map containing all found objects of a brute force search @throws IOException if something went wrong
1099 This will save the document to an output stream. @param output The stream to write to. @throws IOException If there is an error writing the document.
1100 This will remove all of the objects in the collection.
1101 This will remove all of the objects in the collection. @param objectsList The list of objects to remove from the collection.
1102 This will retain all of the objects in the collection. @param objectsList The list of objects to retain from the collection.
1103 This will set an object at a specific index. @param index zero based index into array. @param intVal The object to set.
1104 This will remove an element from the array. @param i The index of the object to remove. @return The object that was removed.
1105 This will remove an element from the array. @param o The object to remove. @return <code>true</code> if the object was removed, <code>false</code> otherwise
1106 This will clear all items in the map.
1107 This will remove an item for the dictionary. This will do nothing of the object does not exist. @param key The key to the item to remove from the dictionary.
1108 Check whether the given {@link COSUpdateState}´s {@link COSDocumentState} differs from the {@link COSIncrement}´s known {@link #incrementOrigin}.<br> Should that be the case, the {@link COSUpdateState} originates from another {@link COSDocument} and must be added to the {@link COSIncrement}, hence call {@link COSUpdateState#update()}. @param updateState The {@link COSUpdateState} that shall be updated, if it's originating from another {@link COSDocument}. @see #incrementOrigin
1109 Sets the referenced object to COSNull and removes the initially assigned parser.
1110 <p> Links the given {@link COSDocumentState} to the {@link #updated} state of the managed {@link #updateInfo}.<br> </p> <p> This shall also initialize {@link #updated} accordingly and will also set the same {@link COSDocumentState} for all possibly contained substructures. </p> <p> Should {@link #originDocumentState} already have been set, by a prior call to this method, this shall deny to overwrite it. </p> <p> {@link COSDocumentState#isAcceptingUpdates()} shall determine, whether updates to {@link #updateInfo} are allowed. </p> <p> As long as no {@link COSDocumentState} is linked to this {@link COSUpdateState}, it shall not accept updates. </p> <p> Additionally to {@link #setOriginDocumentState(COSDocumentState)}, this shall also deny changing {@link #updated}, should the flag {@code dereferencing} indicate, that this is caused by dereferencing a {@link COSObject}. </p> @param originDocumentState The {@link COSDocumentState} that shall be linked to this {@link COSUpdateState}. @param dereferencing {@code true}, if this update of the {@link COSDocumentState} is caused by dereferencing a {@link COSObject}. @see #originDocumentState @see #updated
1111 Get the value of the array as a string. @param index The index into the array. @return The string or null if it does not exist.
1112 Returns the selected value. <p>Off is the default value which will also be returned if the value hasn't been set at all. @return A non-null string.
1113 Constructor.
1114 This will set the file name. @param fileName The name of the file.
1115 Default constructor. @param dest The named destination.
1116 Set the named destination. @param dest The new named destination. @throws IOException If there is an error setting the named destination.
1117 This will read a integer from the Stream and throw an {@link IllegalArgumentException} if the integer value has more than the maximum object revision (i.e. : bigger than {@link #GENERATION_NUMBER_THRESHOLD}) @return the generation number being read. @throws IOException if an I/O error occurs
1118 This will read a long from the Stream and throw an {@link IOException} if the long value is negative or has more than 10 digits (i.e. : bigger than {@link #OBJECT_NUMBER_THRESHOLD}) @return the object number being read. @throws IOException if an I/O error occurs
1119 Get the user password based on the owner password. @param ownerPassword The plaintext owner password. @param owner The o entry of the encryption dictionary. @param encRevision The encryption revision number. @param length The key length. @return The u entry of the encryption dictionary. @throws IOException If there is an error accessing data while generating the user password.
1120 Constructor of a patch for type 7 shading. @param tcp 16 control points @param color 4 corner colors
1121 Encrypt or decrypt data with RC4. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param input The data to encrypt. @param output The output to write the encrypted data to. @throws IOException If there is an error reading the data.
1122 Returns the font service provider. Defaults to using FileSystemFontProvider.
1123 An assistant method to accomplish type 6 and type 7 shading. @param patchCC all the crossing point coordinates and color of a grid @return a ShadedTriangle list which can compose the grid patch
1124 Constructor of a patch for type 6 shading. @param points 12 control points @param color 4 corner colors
1125 This will process a TextPosition object and add the text to the list of characters on a page. It takes care of overlapping text. @param text The text to process.
1126 This will process a TextPosition object and add the text to the list of characters on a page. It takes care of overlapping text. @param text The text to process.
1127 Remove all space characters if contained within the adjacent letters
1128 handles the line separator for a new line given the specified current and previous TextPositions. @param current the current text position @param lastPosition the previous text position @param lastLineStartPosition the last text position that followed a line separator. @param maxHeightForLine max height for positions since lastLineStartPosition @return start position of the last line @throws IOException if something went wrong
1129 Used within {@link #normalize(List)} to handle a {@link TextPosition}. @return The StringBuilder that must be used when calling this method.
1130 Returns the Calendar for a given string containing a date, or {@code null} if it cannot be parsed. The returned value will have 0 for DST_OFFSET. @param text A COS string containing a date. @return The Calendar that the text string represents, or {@code null} if it cannot be parsed.
1131 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1132 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
1133 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1134 This will output the given byte getString as a PDF object. @param string COSString to be written @param output The stream to write to. @throws IOException If there is an error writing to the stream.
1135 This will output the given text/byte getString as a PDF object. @param bytes byte array representation of a string to be written @param output The stream to write to. @throws IOException If there is an error writing to the stream.
1136 Constructor. @param page the page the content stream belongs to
1137 Instantiate a new PDFMarkedContentExtractor object.
1138 Constructor. @throws IOException If there is an error loading properties.
1139 This will parse a PDF HEX string with fail fast semantic meaning that we stop if a not allowed character is found. This is necessary in order to detect malformed input and be able to skip to next object start. We assume starting '&lt;' was already read. @return The parsed PDF string. @throws IOException If there is an error reading from the stream.
1140 This will set the filters that are part of this stream. @param filters The filters that are part of this stream.
1141 Constructor. Initializes to 0,0,0,0
1142 Constructor. @param width The width of the rectangle. @param height The height of the rectangle.
1143 Returns the updated <code>Rect</code> entry for the annotation. The rectangle completely contains the cloudy border. @return Annotation <code>Rect</code>.
1144 Returns the updated <code>RD</code> entry for Square and Circle annotations. @return Annotation <code>RD</code> value.
1145 Get a padded rectangle. <p>Creates a new rectangle with padding applied to each side. . @param rectangle the rectangle. @param padding the padding to apply. @return the padded rectangle.
1146 Get a rectangle enlarged by the differences. <p> Creates a new rectangle with differences added to each side. If there are no valid differences, then the original rectangle is returned. @param rectangle the rectangle. @param differences the differences to apply. @return the padded rectangle.
1147 Get a rectangle with the differences applied to each side. <p> Creates a new rectangle with differences added to each side. If there are no valid differences, then the original rectangle is returned. @param rectangle the rectangle. @param differences the differences to apply. @return the padded rectangle.
1148 Apply padding to a box. @param box box @return the padded box.
1149 Create a fresh XRef stream like for a fresh file or an incremental update. @param cosDocument the COSDocmernt to be used to create a new COSStream
1150 This will create a new PDObjectStream object. @param document The document that the stream will be part of. @return A new stream object.
1151 Creates a new empty PDStream object. @param document The document that the stream will be part of.
1152 Creates a new empty PDStream object. @param document The document that the stream will be part of.
1153 Constructor. Reads all data from the input stream and embeds it into the document with the given filters applied, if any. This method closes the InputStream.
1154 Creates a COS stream from raw (encoded) data.
1155 Encodes data. @param input the byte stream to encode @param encoded the stream where encoded data will be written @param parameters the parameters used for encoding @param index the index to the filter being encoded @throws IOException if the stream cannot be encoded
1156 Default constructor.
1157 Default constructor
1158 Default constructor.
1159 Default Constructor.
1160 @see PDTerminalField#PDTerminalField(PDAcroForm) @param acroForm The acroform.
1161 Creates a new ExportFormat attribute object with a given dictionary. @param dictionary the dictionary
1162 Returns the entry as an appearance stream. @return the entry as an appearance stream @throws IllegalStateException if this entry is not an appearance stream
1163 Adds an OTF or TTF font to the file cache. To reduce memory, the parsed font is not cached.
1164 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
1165 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
1166 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1167 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
1168 Constructor for encrypted pdfs. @param source input representing the pdf. @param password password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param keyAlias alias to be used for decryption when using public key security @throws IOException if the source data could not be read
1169 Constructor. @param source input representing the pdf. @param decryptionPassword password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of the stream cache @throws IOException If something went wrong.
1170 This will get a stream that can be written to. @return An output stream to write data to. @throws IOException If an IO error occurs during writing.
1171 Writes the stream to the actual stream in the COSStream. @throws IOException If there is an error writing to the stream
1172 Create a new appearance stream. @param appearance The appearance stream to write to. @param compress whether the content stream is to be compressed. Set this to true when creating long content streams. @throws IOException If there is an error writing to the content stream.
1173 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1174 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
1175 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1176 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1177 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1178 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1179 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1180 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1181 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1182 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
1183 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
1184 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
1185 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
1186 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
1187 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
1188 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
1189 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
1190 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
1191 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1192 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1193 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1194 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1195 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
1196 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
1197 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
1198 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
1199 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
1200 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
1201 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
1202 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
1203 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1204 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1205 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1206 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1207 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1208 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1209 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1210 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1211 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1212 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1213 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1214 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1215 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1216 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1217 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1218 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
1219 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
1220 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
1221 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
1222 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
1223 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1224 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1225 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1226 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
1227 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1228 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1229 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1230 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1231 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1232 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1233 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1234 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1235 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
1236 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
1237 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
1238 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
1239 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1240 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1241 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1242 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1243 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1244 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1245 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1246 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1247 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1248 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1249 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1250 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
1251 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1252 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1253 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1254 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1255 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1256 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1257 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1258 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1259 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1260 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1261 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1262 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1263 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1264 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1265 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1266 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1267 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1268 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1269 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1270 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1271 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1272 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1273 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1274 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1275 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1276 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1277 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1278 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1279 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1280 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1281 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1282 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1283 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1284 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1285 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1286 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1287 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1288 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1289 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1290 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1291 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1292 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1293 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1294 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
1295 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
1296 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
1297 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
1298 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
1299 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
1300 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
1301 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
1302 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
1303 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
1304 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
1305 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
1306 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
1307 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
1308 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
1309 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
1310 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
1311 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
1312 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
1313 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
1314 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
1315 End a marked content sequence. @throws IOException If the content stream could not be written
1316 End a marked content sequence. @throws IOException If the content stream could not be written
1317 End a marked content sequence. @throws IOException If the content stream could not be written
1318 End a marked content sequence. @throws IOException If the content stream could not be written
1319 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
1320 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
1321 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
1322 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
1323 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
1324 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
1325 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
1326 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
1327 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
1328 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
1329 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
1330 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
1331 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
1332 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
1333 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
1334 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
1335 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
1336 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
1337 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
1338 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
1339 Check the XRef table by dereferencing all objects and fixing the offset if necessary. @throws IOException if something went wrong.
1340 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
1341 Sets the highest value that is allowed. This cannot be higher than 255. @param high the highest value for the lookup table
1342 Set the page number for a remote destination. For an internal destination, call {@link #setPage(PDPage) setPage(PDPage page)}. @param pageNumber The page for a remote destination.
1343 {@inheritDoc}
1344 {@inheritDoc}
1345 {@inheritDoc}
1346 {@inheritDoc}
1347 Collect all updates made to the given {@link COSArray} and it's contained structures. @param array The {@link COSDictionary} updates shall be collected for. @return Returns {@code true}, if the {@link COSArray}´s elements changed. A {@link COSArray} shall always be treated as a direct structure, that would require it´s parent to be updated instead.
1348 <p> Links the given {@link COSDocumentState} to the {@link #updated} state of the managed {@link #updateInfo}.<br> </p> <p> This shall also initialize {@link #updated} accordingly and will also set the same {@link COSDocumentState} for all possibly contained substructures. </p> <p> Should {@link #originDocumentState} already have been set, by a prior call to this method, this shall deny to overwrite it. </p> <p> {@link COSDocumentState#isAcceptingUpdates()} shall determine, whether updates to {@link #updateInfo} are allowed. </p> <p> As long as no {@link COSDocumentState} is linked to this {@link COSUpdateState}, it shall not accept updates. </p> @param originDocumentState The {@link COSDocumentState} that shall be linked to this {@link COSUpdateState}. @see #originDocumentState @see #updated
1349 This shall {@link #setOriginDocumentState(COSDocumentState, boolean)} for the dereferenced child, initializing its {@link #originDocumentState}. <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo} and will never change the child´s {@link #updated} state. </p> @param child The child, that has been dereferenced. @see #setOriginDocumentState(COSDocumentState, boolean)
1350 Parses a Type 4 function and sends the syntactic elements to the given syntax handler. @param input the text source @param handler the syntax handler
1351 Encrypt or decrypt a set of data. @param objectNumber The data object number. @param genNumber The data generation number. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
1352 Compute the encryption key. @param password The password to compute the encrypted key. @param o The O entry of the encryption dictionary. @param u The U entry of the encryption dictionary. @param oe The OE entry of the encryption dictionary. @param ue The UE entry of the encryption dictionary. @param permissions The permissions for the document. @param id The document id. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @param isOwnerPassword whether the password given is the owner password (for revision 6) @return The encrypted key bytes. @throws IOException If there is an error with encryption.
1353 Check if a plaintext password is the user password. @param password The plaintext password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The permissions set in the PDF. @param id The document id used for encryption. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata. @return true If the plaintext password is the user password. @throws IOException If there is an error accessing data.
1354 Finds a font with the given PostScript name, or a suitable substitute, or null. @param postScriptName PostScript font name
1355 Normalize the given list of TextPositions. @param line list of TextPositions @return a list of strings, one string for every word
1356 Returns the Calendar for a given COS string containing a date, or {@code null} if it cannot be parsed. The returned value will have 0 for DST_OFFSET. @param text A COS string containing a date. @return The Calendar that the text string represents, or {@code null} if it cannot be parsed.
1357 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1358 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1359 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1360 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1361 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
1362 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
1363 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
1364 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
1365 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1366 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1367 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1368 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1369 Write the given {@link COSString} to the given stream. @param output The stream, that shall be written to. @param cosString The content, that shall be written.
1370 Outputs a string using the correct encoding and subsetting as required. @param text The Unicode text to show. @throws IOException If an io exception occurs.
1371 Constructor. @param parameters Parameters for page drawing. @throws IOException If there is an error loading properties from the file.
1372 This will parse a PDF string. @return The parsed PDF string. @throws IOException If there is an error reading from the stream.
1373 Constructor for immutable rectangle. @param width The width of the rectangle. @param height The height of the rectangle.
1374 Returns the <code>BBox</code> entry (bounding box) for the appearance stream form XObject. @return Bounding box for appearance stream form XObject.
1375 This will create a new PDMetadata object with the /Type and /Subtype entries for a document level metadata object. @param document The document that the stream will be part of.
1376 {@inheritDoc}
1377 Creates a new XObject of the given subtype for writing. @param document The document in which to create the XObject. @param subtype The subtype of the new XObject.
1378 Creates an Image XObject in the given document. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param document the current document
1379 Constructor. Reads all data from the input stream and embeds it into the document. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @throws IOException If there is an error creating the stream in the document.
1380 Constructor. Reads all data from the input stream and embeds it into the document with the given filter applied. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @param filter Filter to apply to the stream. @throws IOException If there is an error creating the stream in the document.
1381 Constructor. Reads all data from the input stream and embeds it into the document with the given filters applied. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @param filters Filters to apply to the stream. @throws IOException If there is an error creating the stream in the document.
1382 Creates an Image XObject in the given document using the given filtered stream. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param document the current document @param encodedStream an encoded stream of image data @param cosFilter the filter or a COSArray of filters @param width the image width @param height the image height @param bitsPerComponent the bits per component @param initColorSpace the color space @throws IOException if there is an error creating the XObject.
1383 Default constructor.
1384 Default constructor.
1385 Default constructor.
1386 Default constructor.
1387 Default constructor. @param source input representing the pdf. @throws IOException if something went wrong
1388 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source input representing the pdf. @param decryptionPassword password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @throws IOException If something went wrong.
1389 Create a new appearance stream. @param appearance The appearance stream to write to. @throws IOException If there is an error writing to the content stream.
1390 Create a new form XObject content stream. @param form The form XObject stream to write to. @throws IOException If there is an error writing to the form contents.
1391 Create a new appearance stream. Note that this is not actually a "page" content stream. @param doc The document the page is part of. @param appearance The appearance stream to write to. @throws IOException If there is an error writing to the page contents.
1392 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1393 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1394 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1395 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
1396 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
1397 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
1398 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
1399 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
1400 Add the two arms of a horizontal arrow. @param cs Content stream @param x @param y @param len The arm length. Positive goes to the right, negative goes to the left. @throws IOException If the content stream could not be written
1401 Draw a shape. <p> Dependent on the lineWidth and whether or not there is a background to be generated there are different commands to be used for draw a shape. @param lineWidth the line width of the path. @param hasStroke shall there be a stroking color. @param hasFill shall there be a fill color. @throws IOException If there is an error writing to the content stream.
1402 Add a square diamond shape (corner on top) to the path. @param cs Content stream @param x @param y @param r Radius (to a corner) @throws IOException If the content stream could not be written
1403 Add a circle shape to the path in clockwise direction. @param cs Content stream @param x @param y @param r Radius @throws IOException If the content stream could not be written.
1404 Add a circle shape to the path in counterclockwise direction. You'll need this e.g. when drawing a doughnut shape. See "Nonzero Winding Number Rule" for more information. @param cs Content stream @param x @param y @param r Radius @throws IOException If the content stream could not be written.
1405 Draw a paperclip. Shape is from <a href="https://raw.githubusercontent.com/Iconscout/unicons/master/svg/line/paperclip.svg">Iconscout</a> (Apache licensed). @param contentStream @throws IOException
1406 Sets the line width. The command is only emitted if the lineWidth is different to 1. @param lineWidth the line width of the path. @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setLineWidth(float)
1407 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
1408 Collect all updates made to the given {@link COSBase} and it's contained structures.<br> This shall forward all {@link COSUpdateInfo} objects to the proper specialized collection methods. @param base The {@link COSBase} updates shall be collected for. @return Returns {@code true}, if the {@link COSBase} represents a direct child structure, that would require it´s parent to be updated instead. @see #collect(COSDictionary) @see #collect(COSArray) @see #collect(COSObject)
1409 // MIT added, maybe this should not be supported as trailer is a persistence construct. This will set the document trailer. @param newTrailer the document trailer dictionary
1410 <p> Shall call {@link #update()} for this {@link COSUpdateState} and shall {@link #setOriginDocumentState(COSDocumentState)} for the given child, initializing it´s {@link #updated} state and {@link #originDocumentState}. </p> <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}. </p> @param child The child that shall also be updated. @see #update() @see #setOriginDocumentState(COSDocumentState)
1411 <p> Shall call {@link #update()} for this {@link COSUpdateState} and shall {@link #setOriginDocumentState(COSDocumentState)} for the given children, initializing their {@link #updated} state and {@link #originDocumentState}. </p> <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}. </p> @param children The children that shall also be updated. @see #update() @see #setOriginDocumentState(COSDocumentState)
1412 This will get the object that this object encapsulates. @return The encapsulated object.
1413 Check for owner password. @param ownerPassword The owner password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The set of permissions on the document. @param id The document id. @param encRevision The encryption algorithm revision. @param keyLengthInBytes The encryption key length in bytes. @param encryptMetadata The encryption metadata @return True If the ownerPassword param is the owner password. @throws IOException If there is an error accessing data.
1414 Parses the given text into an instruction sequence representing a Type 4 function that can be executed. @param text the Type 4 function text @return the instruction sequence
1415 This will encrypt a stream, but not the dictionary as the dictionary is encrypted by visitFromString() in COSWriter and we don't want to encrypt it twice. @param stream The stream to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error getting the stream data.
1416 This will decrypt a string. @param string the string to decrypt. @param objNum The object number. @param genNum The object generation number. @return the decrypted COSString
1417 This will encrypt a string. @param string the string to encrypt. @param objNum The object number. @param genNum The object generation number. @return the encrypted COSString @throws IOException If an error occurs writing the new string.
1418 Check if a plaintext password is the user password. @param password The plaintext password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The permissions set in the PDF. @param id The document id used for encryption. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @return true If the plaintext password is the user password. @throws IOException If there is an error accessing data.
1419 Finds a font with the given PostScript name, or a suitable substitute, or null. @param postScriptName PostScript font name
1420 This will print the text of the processed page to "output". It will estimate, based on the coordinates of the text, where newlines and word spacings should be placed. The text will be sorted only if that feature was enabled. @throws IOException If there is an error writing the text.
1421 Writes a single operand token. @param base The operand to write to the stream. @throws IOException If there is an error writing to the stream.
1422 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
1423 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
1424 Returns a new PageDrawer instance, using the given parameters. May be overridden. @param parameters parameters to be used when creating the PageDrawer instance @return a new PageDrawer instance @throws IOException id the PageDrawer instance could not be created
1425 Creates a Form Image XObject for writing, in the given document. @param document The current document
1426 Constructor. Reads all data from the input stream and embeds it into the document, this will close the InputStream. The /Type and /Subtype entries for a document level metadata object will be created. @param doc The document that will hold the stream. @param str The stream parameter. @throws IOException If there is an error creating the stream in the document.
1427 {@inheritDoc}
1428 {@inheritDoc}
1429 Create a PDImageXObject using the Flate filter. @param document The document. @param byteArray array with data. @param width the image width @param height the image height @param bitsPerComponent the bits per component @param initColorSpace the color space @return the newly created PDImageXObject with the data compressed. @throws IOException
1430 Default constructor. @param owner the owner of the attributes
1431 Constructor.
1432 Constructs parser for given file using memory buffer. @param source the source of the pdf to be parsed @throws IOException If something went wrong.
1433 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source input representing the pdf. @param decryptionPassword password to be used for decryption. @throws IOException If something went wrong.
1434 Draw a line ending style. @param style @param cs @param x @param y @param width @param hasStroke @param hasBackground @param ending false if left, true if right of an imagined horizontal line (important for arrows). @throws IOException
1435 Collect all updates made to the given {@link COSDictionary} and it's contained structures. @param dictionary The {@link COSDictionary} updates shall be collected for. @return Returns {@code true}, if the {@link COSDictionary} represents a direct child structure, that would require it´s parent to be updated instead.
1436 Returns all indirect {@link COSBase}s, that shall be written to an increment as top level {@link COSObject}s.<br> Calling this method will cause the increment to be initialized. @return All indirect {@link COSBase}s, that shall be written to an increment as top level {@link COSObject}s. @see #objects
1437 This will add an object to the array. @param object The object to add to the array.
1438 Add the specified object at the ith location and push the rest to the right. @param i The index to add at. @param object The object to add at that index.
1439 This will set an object at a specific index. @param index zero based index into array. @param object The object to set.
1440 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
1441 This will add an object to the array. @param objectsList The object to add to the array.
1442 Add the specified object at the ith location and push the rest to the right. @param i The index to add at. @param objectList The object to add at that index.
1443 <p> Shall call {@link #update()} for this {@link COSUpdateState} and shall {@link #setOriginDocumentState(COSDocumentState)} for the given children, initializing their {@link #updated} state and {@link #originDocumentState}. </p> <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}. </p> @param children The children that shall also be updated. @see #update() @see #setOriginDocumentState(COSDocumentState)
1444 This will get an object from the array. This will dereference the object. If the object is COSNull then null will be returned. @param index The index into the array to get the object. @return The object at the requested index.
1445 This will remove an element from the array. This method will also remove a reference to the object. @param o The object to remove. @return <code>true</code> if the object was removed, <code>false</code> otherwise
1446 This will return the index of the entry or -1 if it is not found. This method will also find references to indirect objects. @param object The object to search for. @return The index of the object or -1.
1447 @see java.util.Map#containsValue(java.lang.Object) @param value The value to find in the map. @return true if the map contains this value.
1448 Search in the map for the value that matches the parameter and return the first key that maps to that value. @param value The value to search for in the map. @return The key for the value in the map or null if it does not exist.
1449 This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param key The key to the object that we are getting. @return The object that matches the key.
1450 Collects all indirect objects numbers within this dictionary and all included dictionaries. It is used to avoid mixed up object numbers when importing an existing page to another pdf. Expert use only. You might run into an endless recursion if choosing a wrong starting point. @param indirectObjects a collection of already found indirect objects.
1451 Get the dictionary containing the linearization information if the pdf is linearized. @return the dictionary containing the linearization information
1452 This will close all storage and delete the tmp files. @throws IOException If there is an error close resources.
1453 Collect all updates made to the given {@link COSObject} and it's contained structures. @param object The {@link COSObject} updates shall be collected for. @return Always returns {@code false}. {@link COSObject}s by definition are indirect and shall never cause a parent structure to be updated.
1454 visitor pattern double dispatch method. @param visitor The object to notify when visiting this object. @throws IOException If an error occurs while visiting this object.
1455 Check whether an element (of an array or a dictionary) points to its parent. @param parent COSArray or COSDictionary @param value an element
1456 Returns length value referred to or defined in given object.
1457 Prepares a normal reference for the given {@link COSObject} in a PDF's crossreference stream ({@link PDFXRefStream}). @param byteOffset The byte offset of the {@link COSObject} in the PDF file. @param key The {@link COSObjectKey}, that is represented by this entry. @param object The {@link COSObject}, that is represented by this entry.
1458 This will get the object key for the object. @param obj The object to get the key for. @return The object key for the object.
1459 Returns the {@link COSObjectKey} for a given registered {@link COSBase}. Returns null if such an object is not registered. @param object The {@link COSBase} a {@link COSObjectKey} shall be determined for. @return key The {@link COSObjectKey}, that matches the registered {@link COSBase}, or null if such an object is not registered.
1460 Returns true, if the given {@link COSBase} is a registered object of this pool. @param object The {@link COSBase} that shall be checked. @return True, if such a {@link COSBase} is registered in this pool.
1461 Prepares the given {@link COSObject} to be written to this object stream, using the given {@link COSObjectKey} as it's ID for indirect references. @param key The {@link COSObjectKey}, that shall be used for indirect references to the {@link COSObject}. @param object The {@link COSObject}, that shall be written to this object stream.
1462 Check for owner password. @param password The owner password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The set of permissions on the document. @param id The document id. @param encRevision The encryption algorithm revision. @param keyLengthInBytes The encryption key length in bytes. @param encryptMetadata The encryption metadata @return True If the ownerPassword param is the owner password. @throws IOException If there is an error accessing data.
1463 This will print the processed page text to the output stream. @throws IOException If there is an error writing the text.
1464 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
1465 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
1466 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
1467 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
1468 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
1469 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
1470 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
1471 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
1472 Creates a Transparency Group for writing, in the given document. @param document The current document
1473 Creates a Form Image XObject for writing, in the given document. @param document The current document
1474 Creates a new JPEG Image XObject from a BufferedImage, a given quality and dpi metadata. <p> Do not read a JPEG image from a stream/file and call this method; you'll get more speed and quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) createFromStream()} instead. @param document the document where the image will be created @param image the BufferedImage to embed @param quality The desired JPEG compression quality; between 0 (best compression) and 1 (best image quality). See {@link ImageWriteParam#setCompressionQuality(float)} for more details. @param dpi the desired dpi (resolution) value of the JPEG to be stored in metadata. This value has no influence on image content or size. @return a new Image XObject @throws IOException if the JPEG data cannot be written
1475 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source source representing the pdf. @throws IOException If something went wrong.
1476 Writes the curl template points to the output and applies translation (x, y).
1477 Creates a single Bézier curve that represents a section of an elliptical arc. The sweep angle of the section must not be larger than 90 degrees. If argument `out` is null, this writes the results to the instance variable `output`.
1478 Return an iterator for the determined {@link #objects} contained in this {@link COSIncrement}. @return An iterator for the determined {@link #objects} contained in this {@link COSIncrement}.
1479 This will add an object to the array. @param object The object to add to the array.
1480 This will add the object until the size of the array is at least as large as the parameter. If the array is already larger than the parameter then nothing is done. @param size The desired size of the array. @param object The object to fill the array with.
1481 Clear the current contents of the COSArray and set it with the float[]. @param value The new value of the float array.
1482 This will parse a PDF array object. @return The parsed PDF array. @throws IOException If there is an error parsing the stream.
1483 Returns the stream of the XRef. @return the XRef stream @throws IOException if something went wrong
1484 This is a really special constructor. Sometimes the PDF spec says that a dictionary entry can either be a single item or an array of those items. But in the PDModel interface we really just want to always return a java.util.List. In the case were we get the list and never modify it we don't want to convert to COSArray and put one element, unless we append to the list. So here we are going to create this object with a single item instead of a list, but allow more items to be added and then converted to an array. @param actualObject The PDModel object. @param item The COS Model object. @param dictionary The dictionary that holds the item, and will hold the array if an item is added. @param dictionaryKey The key into the dictionary to set the item.
1485 This will convert a list of COSObjectables to an array list of COSBase objects. @param cosObjectableList A list of COSObjectable. @return A list of COSBase. @throws IllegalArgumentException if an object type is not supported for conversion to a COSBase object.
1486 Constructor with an initial range of 0..1.
1487 Default constructor.
1488 Creates a blank font setting, font will be null, size will be 1.
1489 Returns the color component values as a COS array @return the color component values as a COS array
1490 Creates a new DeviceN color space.
1491 Creates a new gamma. Defaults all values to 0, 0, 0.
1492 Returns a list of alternate color spaces for non-conforming readers. WARNING: Do not use the information in a conforming reader. @return A list of alternateColorSpace color spaces. @throws IOException If there is an error getting the alternateColorSpace color spaces.
1493 Creates a new Indexed color space. Default DeviceRGB, hival 255.
1494 creates a range array with default values (-100..100 -100..100). @return the new range array.
1495 Creates a new pattern color space. @param resources The current resources.
1496 Creates a new Separation color space.
1497 Constructor. Defaults all values to 0, 0, 0.
1498 Constructor from COS object. @param array the array containing the XYZ values
1499 Sets the optional Matrix entry for the form XObject. @param transform the transformation matrix
1500 Creates a new JPEG Image XObject from a byte array containing JPEG data. @param document the document where the image will be created @param byteArray bytes of JPEG image @return a new Image XObject @throws IOException if the input stream cannot be read
1501 Returns a COS array which represent the geometric relevant components of the matrix. The last column of the matrix is ignored, only the first two columns are returned. This is analog to the Matrix(COSArray) constructor. @return a COSArray representing the geometric relevant components of the matrix
1502 This will set an object at a specific index. @param index zero based index into array. @param object The object to set.
1503 Set the value in the array as an integer. @param index The index into the array. @param value The value to set.
1504 Set the value in the array as a name. @param index The index into the array. @param name The name to set in the array.
1505 Set the value in the array as a string. @param index The index into the array. @param string The string to set in the array.
1506 This will set the minimum value for the range. @param min The new minimum for the range.
1507 This will set the maximum value for the range. @param max The new maximum for the range.
1508 This will set the lower left x coordinate. @param value The lower left x.
1509 This will set the lower left y coordinate. @param value The lower left y.
1510 This will set the upper right x coordinate. @param value The upper right x .
1511 This will set the upper right y coordinate. @param value The upper right y.
1512 Sets the colour by edge index. @param index the edge index @param colour the colour
1513 This will decrypt an array. @param array The array to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error accessing the data.
1514 This will set the string for an available option. @param opt One of the available options.
1515 This will set the default appearance string. @param da The default appearance string.
1516 This will set the size of the font. @param size The new size of the font.
1517 Sets the list of colorants @param names the list of colorants
1518 Sets the color space attributes. If null is passed in then all attribute will be removed. @param attributes the color space attributes, or null
1519 This will set the alternate color space. @param cs The alternate color space.
1520 Sets the r value of the tristimulus. @param r the r value for the tristimulus
1521 Sets the g value of the tristimulus. @param g the g value for the tristimulus
1522 Sets the b value of the tristimulus. @param b he b value for the tristimulus
1523 Sets the base color space. @param base the base color space
1524 Sets the colorant name. @param name the name of the colorant
1525 Sets the alternate color space. @param colorSpace The alternate color space.
1526 Sets the x value of the tristimulus. @param x the x value for the tristimulus
1527 Sets the y value of the tristimulus. @param y the y value for the tristimulus
1528 Sets the z value of the tristimulus. @param z the z value for the tristimulus
1529 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
1530 This will set an item in the dictionary. @param key The key to the dictionary object. @param value The value to the dictionary object.
1531 This will set an item in the dictionary. @param key The key to the dictionary object. @param value The value to the dictionary object.
1532 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
1533 This is a convenience method that will convert the value to a COSName object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
1534 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
1535 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
1536 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
1537 This is a convenience method that will convert the value to a COSFloat object. @param key The key to the object, @param value The int value for the name.
1538 Creates a new COSStream using the current configuration for scratch files. Not for public use. Only COSParser should call this method. @param dictionary the corresponding dictionary @param startPosition the start position within the source @param streamLength the stream length @return the new COSStream @throws IOException if the random access view can't be read
1539 This will set the encryption dictionary, this should only be called when encrypting the document. @param encDictionary The encryption dictionary.
1540 This will set the document ID. This should be an array of two strings. This method cannot be used to remove the document id by passing null or an empty array; it will be recreated. Only the first existing string is used when writing, the second one is always recreated. If you don't want this, you'll have to modify the {@code COSWriter} class, look for {@link COSName#ID}. @param id The document id.
1541 This will parse the next token in the stream. @return The next token in the stream or null if there are no more tokens in the stream. @throws IOException If an io error occurs while parsing the stream.
1542 Creates an empty PDF document. You need to add at least one page for the document to be valid. @param streamCacheCreateFunction a function to create an instance of a stream cache for buffering PDF streams
1543 This will set the document information for this document. <p> In PDF 2.0 this is deprecated except for two entries, /CreationDate and /ModDate. For any other document level metadata, a metadata stream should be used instead, see {@link PDDocumentCatalog#setMetadata(org.apache.pdfbox.pdmodel.common.PDMetadata) PDDocumentCatalog#setMetadata(PDMetadata)}. @param info The updated document information.
1544 Constructor. Internal PDFBox use only! If you need to get the document catalog, call {@link PDDocument#getDocumentCatalog()}. @param doc The document that this catalog is part of.
1545 Sets the list of threads for this pdf document. @param threads The list of threads, or null to clear it.
1546 Replace the list of OutputIntents of the document. @param outputIntents the list of OutputIntents, if the list is empty all OutputIntents are removed.
1547 This will set the CropBox for this page. @param cropBox The new CropBox for this page.
1548 This will set the contents of this page. @param contents Array of new contents of the page.
1549 This will set the list of thread beads. @param beads A list of PDThreadBead objects or null.
1550 This will set the list of annotations. Although this is optional, you should take care that any newly created annotations link back to this page by calling {@link PDAnnotation#setPage(org.apache.pdfbox.pdmodel.PDPage)}. Not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. @param annotations The new list of annotations.
1551 Set the viewports. @param viewports A list of viewports, or null if the entry is to be deleted.
1552 Constructor for embedding.
1553 {@inheritDoc}
1554 {@inheritDoc}
1555 {@inheritDoc}
1556 {@inheritDoc}
1557 {@inheritDoc}
1558 {@inheritDoc}
1559 Default Constructor.
1560 Constructor. Creates empty COSDictionary if dict is null. @param dict The dictionary that fulfils this file specification.
1561 This will set the range values. @param rangeValues The new range values.
1562 This will set the domain values. @param domainValues The new domain values.
1563 This will set the encode values. @param encodeValues The new encode values.
1564 This will set the decode values. @param decodeValues The new decode values.
1565 Sets the K entry. @param k the K value
1566 Sets the ClassMap. @param classMap null, or a map whose elements are either {@link PDAttributeObject} or lists of it.
1567 Sets the user properties. @param userProperties the user properties
1568 Set the line dash pattern associated with this box style. @param dashArray The patter for this box style.
1569 This will set the crypt filter method. Allowed values are: NONE, V2, AESV2, AESV3 @param cfm name of the crypt filter method.
1570 Sets the filter entry of the encryption dictionary. @param filter The filter name.
1571 This will set the O entry in the standard encryption dictionary. @param o A 32 byte array or null if there is no owner key. @throws IOException If there is an error setting the data.
1572 This will set the U entry in the standard encryption dictionary. @param u A 32 byte array. @throws IOException If there is an error setting the data.
1573 This will set the OE entry in the standard encryption dictionary. @param oe A 32 byte array or null if there is no owner encryption key. @throws IOException If there is an error setting the data.
1574 This will set the UE entry in the standard encryption dictionary. @param ue A 32 byte array or null if there is no user encryption key. @throws IOException If there is an error setting the data.
1575 This will set the Recipients field of the dictionary. This field contains an array of string. @param recipients the array of bytes arrays to put in the Recipients field. @throws IOException If there is an error setting the data.
1576 Sets the name of the filter which is used for de/encrypting streams. @param streamFilterName the name of the filter
1577 Sets the name of the filter which is used for de/encrypting strings. @param stringFilterName the name of the filter
1578 Set the Perms entry in the encryption dictionary. @param perms A 16 byte array. @throws IOException If there is an error setting the data.
1579 remove CF, StmF, and StrF entries. This is to be called if V is not 4 or 5.
1580 Default constructor.
1581 Set the annotation color. @param c The annotation color.
1582 This will set the rich text stream which is displayed in the popup window. @param rc the rich text stream.
1583 This will set interior color of the drawn area. @param color The interior color of the circle.
1584 This will set the coordinates of the callout line. @param callout An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, Four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
1585 Set the paths making up the freehand "scribble". The ink annotation is made up of one ore more disjoint paths. Each array entry is an array representing a stroked path, being a series of alternating horizontal and vertical coordinates in default user space. @param inklist the List of arrays representing the paths.
1586 This will set start and end coordinates of the line (or leader line if LL entry is set). @param line array of 4 floats [x1, y1, x2, y2] line start and end points in default user space.
1587 This will set interior color of the line endings defined in the LE entry. @param color The interior color of the line endings.
1588 This will set the coordinates of the vertices. @param vertices array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
1589 This will set interior color of the drawn area. @param color The interior color of the drawn area.
1590 This will set the coordinates of the the vertices. @param vertices array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
1591 This will set interior color of the line endings defined in the LE entry. @param color The interior color of the line endings.
1592 This will set interior color of the drawn area. @param color The interior color of the circle.
1593 Set the coordinates of individual words or group of words. The quadliterals shall encompasses a word or group of contiguous words in the text underlying the annotation. The coordinates for each quadrilateral shall be given in the order x1 y1 x2 y2 x3 y3 x4 y4. @param coords an array of 8 􏰍 n numbers specifying the coordinates of n quadrilaterals.
1594 This will set the FDF id. @param id The new id for the FDF.
1595 This will set the list of fields. This should be a list of FDFField objects. @param fields The list of fields.
1596 This will set the list of pages. This should be a list of FDFPage objects. @param pages The list of pages.
1597 This will set the list of annotations. This should be a list of FDFAnnotation objects. @param annots The list of annotations.
1598 This will set the differences stream. @param diff The new differences stream.
1599 This will set the list of embedded FDFs. This should be a list of PDFileSpecification objects. @param embedded The list of embedded FDFs.
1600 This will set the list of kids. @param kids A list of FDFField objects.
1601 You should pass a String, or a List&lt;String&gt; to set the value. @param value The value that should populate when imported. @throws IOException If there is an error setting the value.
1602 Sets the COS value of this field. @param value COS value.
1603 This will set the field flags that are associated with this field. The 'Ff' entry in the FDF field dictionary. @param ff The new value for the field flags.
1604 This will set the field flags that are associated with this field. The 'SetFf' entry in the FDF field dictionary. @param ff The new value for the "set field flags".
1605 This will set the field flags that are associated with this field. The 'ClrFf' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
1606 This will set the widget field flags that are associated with this field. The 'F' entry in the FDF field dictionary. @param f The new value for the field flags.
1607 This will set the widget field flags that are associated with this field. The 'SetF' entry in the FDF field dictionary. @param ff The new value for the "set widget field flags".
1608 This will set the field flags that are associated with this field. The 'ClrF' entry in the FDF field dictionary. @param ff The new value for the "clear widget field flags".
1609 This will set the rich text value. @param rv The rich text value for the stream.
1610 This will set the rich text value. @param rv The rich text value for the stream.
1611 This will set the javascript code the will get execute before the import. @param before A reference to some javascript code.
1612 This will set the javascript code the will get execute after the import. @param after A reference to some javascript code.
1613 Sets the dictionary's "Doc" entry. @param map Map of named "JavaScript" dictionaries.
1614 A list of FDFTemplate objects. @param templates A list of templates for this Page.
1615 This will set a list of fields for this template. @param fields The list of fields to set for this template.
1616 Builds widths with a custom CIDToGIDMap (for embedding font subset).
1617 Constructor for embedding.
1618 Package-private constructor, for embedding.
1619 This will set the font name. @param fontName The new name for the font.
1620 This will set the font family. @param fontFamily The font family.
1621 This will set the font stretch. @param fontStretch The new stretch for the font.
1622 Set the fonts bounding box. @param rect The new bounding box.
1623 This will set the character set for the font. @param charSet The new character set for the font.
1624 Set the gamma value. @param value The new gamma value.
1625 Sets the gamma value. @param gamma the new gamma value
1626 Sets the linear interpretation matrix. Passing in null will clear the matrix. @param matrix the new linear interpretation matrix, or null
1627 Sets the colorant map. @param colorants the map of colorants
1628 Creates a group object with /Transparency subtype entry.
1629 Sets which filters are applied to this stream. @param filters the filters to apply to this stream.
1630 Creates a new optional content membership dictionary (OCMD).
1631 Sets the visibility policy name. Valid names are AllOff, AllOn, AnyOff, AnyOn (default). @param visibilityPolicy the visibility policy name
1632 Sets the optional Matrix entry for the Pattern. @param transform the transformation matrix
1633 This will set the BBox (bounding box) for this Pattern. @param bbox The new BBox for this Pattern.
1634 This will set the background. @param newBackground the new background
1635 This will set the BBox (bounding box) for this Shading. @param newBBox the new BBox
1636 This will set the color space for the shading. @param colorSpace the color space
1637 This will set the functions COSArray for the color conversion. @param newFunctions the new COSArray containing all functions
1638 Sets the optional Matrix entry for the function based shading. @param transform the transformation matrix
1639 Sets the optional Domain entry for the function based shading. @param newDomain the domain array
1640 Sets the optional Extend entry for this shading. @param newExtend the extend array
1641 Sets the optional Domain entry for this shading. @param newDomain the domain array
1642 Sets the Coords entry for this shading. @param newCoords the coordinates array
1643 This will set the decode values. @param decodeValues the new decode values
1644 Default constructor, creates blank graphics state.
1645 Set the blending mode. @param bm blend mode
1646 This will set a float object. @param key The key to the data that we are setting. @param value The value that we are setting.
1647 This will set the transfer function of the /TR dictionary. @param transfer The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function.
1648 This will set the transfer function of the /TR2 dictionary. @param transfer2 The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function, and the name Default denotes the transfer function that was in effect at the start of the page.
1649 This will set the next action, or sequence of actions, to be performed after this one. The value is either a single action dictionary or an array of action dictionaries to be performed in order. @param next The Next action or sequence of actions.
1650 @param t annotation or annotations
1651 @param h hide flag
1652 @param array the array of fields
1653 Sets the sound object. @param sound the sound object defining the sound that shall be played.
1654 @param array the array of fields
1655 @param d The destination.
1656 @param b The destination.
1657 Set the relationship between the current document and the target (which may be an intermediate target). @param relationship Valid values are P (the target is the parent of the current document) and C (the target is a child of the current document). throws IllegalArgumentException if the parameter is not P or C.
1658 Constructor.
1659 This will set the rectangle for this annotation. @param rectangle The new rectangle values.
1660 This will set the border array. @param borderArray the border array to set.
1661 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
1662 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
1663 This will set the coordinates of the callout line. (PDF 1.6 and higher) Only relevant if the intent is FreeTextCallout. @param callout An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
1664 Sets the paths that make this annotation. @param inkList An array of arrays, each representing a stroked path. Each array shall be a series of alternating horizontal and vertical coordinates. If the parameter is null the entry will be removed.
1665 This will set start and end coordinates of the line (or leader line if LL entry is set). @param l array of 4 floats [x1, y1, x2, y2] line start and end points in default user space.
1666 This will set the set of quadpoints which encompass the areas of this annotation which will activate. @param quadPoints an array representing the set of area covered.
1667 This will set the rich text stream which is displayed in the popup window. @param rc the rich text stream.
1668 This will set the numbers that shall represent the alternating horizontal and vertical coordinates. @param points an array with the numbers that shall represent the alternating horizontal and vertical coordinates.
1669 This will set the numbers that shall represent the alternating horizontal and vertical coordinates. @param points an array with the numbers that shall represent the alternating horizontal and vertical coordinates.
1670 This will set the markup annotation which this popup relates to. @param annot the markup annotation.
1671 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
1672 This will set the set of quadpoints which encompass the areas of this annotation. @param quadPoints an array representing the set of area covered
1673 Constructor for embedding.
1674 This will set the dash style used for drawing the border. @param dashArray the dash style to use
1675 Default constructor.
1676 (Optional) The signature handler that shall be used to sign the signature field. @param filter is the filter that shall be used by the signature handler
1677 (Optional) An array of names indicating encodings to use when signing. The first name in the array that matches an encoding supported by the signature handler shall be the encoding that is actually used for signing. @param subfilter is the name that shall be used for encoding
1678 <p>(Optional, PDF 1.7) An array of names indicating acceptable digest algorithms to use when signing. The value shall be one of <b>SHA1</b>, <b>SHA256</b>, <b>SHA384</b>, <b>SHA512</b>, <b>RIPEMD160</b>. The default value is implementation-specific.</p> <p>This property is only applicable if the digital credential signing contains RSA public/privat keys</p> @param digestMethod is a list of possible names of the digests, that should be used for signing.
1679 (Optional) An array of text strings that specifying possible reasons for signing a document. If specified, the reasons supplied in this entry replace those used by conforming products. @param reasons is a list of possible text string that specifying possible reasons
1680 <p>(Optional; PDF 1.6) A dictionary containing a single entry whose key is P and whose value is an integer between 0 and 3. A value of 0 defines the signatures as an author signature. The value 1 through 3 shall be used for certification signatures and correspond to the value of P in a DocMDP transform parameters dictionary.</p> <p>If this MDP key is not present or the MDP dictionary does not contain a P entry, no rules shall be defined regarding the type of signature or its permissions.</p> @param mdp dictionary
1681 <p>(Optional; PDF 1.6) A time stamp dictionary containing two entries. URL which is a ASCII string specifying the URL to a rfc3161 conform timestamp server and Ff to indicate if a timestamp is required or optional.</p> @param timestamp dictionary
1682 (Optional, PDF 1.6) An array of text strings that specifying possible legal attestations. @param legalAttestation is a list of possible text string that specifying possible legal attestations.
1683 Default constructor.
1684 (Optional) A list of byte arrays containing DER-encoded X.509v3 certificates that are acceptable for signing. if <b>Subject</b> is not null and {@link #isSubjectRequired()} is true then the subject constraint is enforced on the subjects in this array subjects. @param subjects list of byte arrays containing DER-encoded X.509v3 certificates that are acceptable for signing.
1685 (Optional; PDF 1.7) A list of maps, where each map contains key value pairs, that specify the Subject Distinguished Name (DN) that must be present within the certificate for it to be acceptable for signing. The certificate must at a minimum contain all the attributes specified in one of the maps entered. @param subjectDN list of maps that contains subject distinguished names
1686 (Optional; PDF 1.7) A List of ASCII strings, where each string specifies an acceptable key-usage extension that must be present in the signing certificate. Multiple strings specify a range of acceptable key-usage extensions; where each string 9 characters long and each character is one of these values {0, 1, X} 0 for must not set, 1 for must set, X for don't care. each index in the string represents a key usage: <ol> <li>digitalSignature</li> <li>non-Repudiation</li> <li>keyEncipherment</li> <li>dataEncipherment</li> <li>keyAgreement</li> <li>keyCertSign</li> <li>cRLSign</li> <li>encipherOnly</li> <li>decipherOnly</li> </ol> @param keyUsageExtensions list of ASCII strings that consists only of {0, 1, X}
1687 (Optional) A list of array of bytes containing DER-encoded X.509v3 certificates of acceptable issuers. If the signer’s certificate chains up to any of the specified issuers (either directly or indirectly), the certificate is considered acceptable for signing. @param issuers A list of byte array containing DER-encoded X.509v3 certificates
1688 (Optional) A list of byte arrays that contain Object Identifiers (OIDs) of the certificate policies that must be present in the signing certificate. This field is only applicable if the value of Issuer is not empty. @param oidByteStrings list of byte arrays that contain OIDs
1689 Default constructor.
1690 Set the dictionary type. @param type is the dictionary type.
1691 Set the filter. @param filter the filter to be used
1692 Set a subfilter that specify the signature that should be used. @param subfilter the subfilter that shall be used.
1693 Sets the byte range. @param range the byte range to be used
1694 Sets the contents. @param bytes contents to be used
1695 Set the RGB text color for this node. @param textColor The text color for this node.
1696 Constructor. @param doc The document that this form is part of.
1697 Set the documents root fields. @param fields The fields that are part of the documents root fields.
1698 Set the calculation order in which field values should be recalculated when the value of any field changes. (Read about "Trigger Events" in the PDF specification) @param fields The field list.
1699 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
1700 This will set the export values. @see #getExportValues() @param values List containing all possible export values. Supplying null or an empty list will remove the Opt entry.
1701 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
1702 Sets the child fields. @param children The list of child fields.
1703 Sets the value of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @param object the new value
1704 Sets the default of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @param value the default value
1705 @see PDTerminalField#PDTerminalField(PDAcroForm) @param acroForm The acroForm for this field.
1706 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
1707 Set the default style string. Providing null as the value will remove the default style string. @param defaultStyleString a string describing the default style.
1708 Set the fields rich text value. <p> Setting the rich text value will not generate the appearance for the field. <br> You can set {@link PDAcroForm#setNeedAppearances(Boolean)} to signal a conforming reader to generate the appearance stream. </p> Providing null as the value will remove the default style string. @param richTextValue a rich text string
1709 This will set the origin of the coordinate system. @param coordSystemOrigin the origin
1710 Default constructor.
1711 Sets the direction in which the specified transition effect shall move. Only for {@link PDTransitionStyle#Wipe}, {@link PDTransitionStyle#Glitter}, {@link PDTransitionStyle#Fly}, {@link PDTransitionStyle#Cover}, {@link PDTransitionStyle#Uncover} and {@link PDTransitionStyle#Push}. @param direction the direction in which the specified transition effect shall move
1712 @param duration The duration of the transition effect, in seconds.
1713 @param scale The starting or ending scale at which the changes shall be drawn. Only for {@link PDTransitionStyle#Fly}.
1714 @param opaque If true, the area that shall be flown in is rectangular and opaque. Only for {@link PDTransitionStyle#Fly}.
1715 {@inheritDoc}
1716 Process the font color operator. This is assumed to be an RGB color. @param operands the color components @throws IOException in case of the color components not matching
1717 {@inheritDoc}
1718 This will add all objects to this array. @param objectList The list of objects to add.
1719 This will take an COSArray of numbers and convert it to a float[]. @return This COSArray as an array of float numbers.
1720 This will return a list of float values if the COSArray consists of COSNumbers only. @return the list of float values of the COSArray of COSNumbers
1721 This will return a list of int values if the COSArray consists of COSNumbers only. @return the list of int values of the COSArray of COSNumbers
1722 Update the P reference to the new parent dictionary. @param kArray the kids array @param newParent the new parent @param newStructureType the new structure type in /S or null so it doesn't get replaced
1723 This will get the minimum value of the range. @return The min value.
1724 This will get the maximum value of the range. @return The max value.
1725 Gets the colour by edge index. @param index edge index @return the colour
1726 This will get the string of one of the available options. A required element. @return An available option.
1727 This will get the string of default appearance string. A required element. @return A default appearance string.
1728 Determines the blend mode from the BM entry in the COS ExtGState. @param cosBlendMode name or array @return blending mode
1729 Returns the list of colorants. @return the list of colorants
1730 This will get the alternate color space for this separation. @return The alternate color space. @throws IOException If there is an error getting the alternate color space.
1731 Returns the colorant name. @return the name of the colorant
1732 This will create a new destination depending on the type of COSBase that is passed in. @param base The base level object. @return A new destination. @throws IOException If the base cannot be converted to a Destination.
1733 This will get the page for this destination. A page destination can either reference a page (for a local destination) or a page number (when doing a remote destination to another PDF). If this object is referencing by page number then this method will return null and {@link #getPageNumber()} should be used. @return The page for this destination.
1734 This will get the page number for this destination. A page destination can either reference a page (for a local destination) or a page number (when doing a remote destination to another PDF). If this object is referencing by page number then this method will return that number, otherwise -1 will be returned. @return The zero-based page number for this destination.
1735 Get the zoom value. Return values of 0 or -1 imply that the current zoom will be used. @return The zoom value for the page.
1736 Creates a matrix from a 6-element (a b c d e f) COS array. @param array source array, elements must be or extend COSNumber
1737 This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param key The key to the object that we are getting. @return The object that matches the key.
1738 This is a special case of getDictionaryObject that takes multiple keys, it will handle the situation where multiple keys could get the same value, ie if either CS or ColorSpace is used to get the colorspace. This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param firstKey The first key to try. @param secondKey The second key to try. @return The object that matches the key.
1739 This is a convenience method that will get the dictionary object that is expected to be a name. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COS name.
1740 This is a convenience method that will get the dictionary object that is expected to be a COSDictionary. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSDictionary.
1741 This is a convenience method that will get the dictionary object that is expected to be a COSStream. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSStream.
1742 This is a convenience method that will get the dictionary object that is expected to be a COSArray. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSArray.
1743 This is a convenience method that will get the dictionary object that is expected to be a name. Default is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The COS name.
1744 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
1745 This is a convenience method that will get the dictionary object that is expected to be a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
1746 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary or if the date was invalid. @param key The key to the item in the dictionary. @return The name converted to a date.
1747 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
1748 This is a convenience method that will get the dictionary object that is expected to be an float. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The float value.
1749 Some applications may not wrap their page content in a save/restore (q/Q) pair which can lead to problems with coordinate system transformations when content is appended. This method lets you add a q/Q pair around the existing page's content. @param page the page @throws IOException if an I/O error occurs
1750 Returns the content streams which make up this page. @return content stream iterator
1751 Returns true if this page has one or more content streams. @return true if the page has a non empty content stream, otherwise false
1752 This will take a COS dictionary and convert it into COSDictionaryMap. All cos objects will be converted to their primitive form. @param map The COS mappings. @return A standard java map. @throws IOException If there is an error during the conversion.
1753 Removes an attribute object. @param attributeObject the attribute object
1754 Returns the class names together with their revision numbers (C). @return the class names as a list, never null.
1755 Removes a class name. @param className the class name
1756 Appends a COS base kid. @param object the COS base
1757 Inserts an COS base kid before a reference kid. @param newKid the COS base @param refKid the reference kid
1758 Removes a COS base kid. @param object the COS base @return <code>true</code> if the kid was removed, <code>false</code> otherwise
1759 Returns the K entry. This can be a dictionary representing a structure element, or an array of them. To get it as a list of PDStructureElement objects, use {@link #getKids()} instead. @return the K entry.
1760 Returns the property value. @return the property value
1761 Will get the EncryptMetaData dictionary info. @return true if EncryptMetaData is explicitly set (the default is true)
1762 This will get the OE entry in the standard encryption dictionary. @return A 32 byte array or null if there is no owner encryption key. @throws IOException If there is an error accessing the data.
1763 This will get the UE entry in the standard encryption dictionary. @return A 32 byte array or null if there is no user encryption key. @throws IOException If there is an error accessing the data.
1764 Get the Perms entry in the encryption dictionary. @return A 16 byte array or null if there is no Perms entry. @throws IOException If there is an error accessing the data.
1765 This will get the page number or null if it does not exist. @return The page number.
1766 Returns the COS value of this field. @return The COS value of the field, maybe <code>null</code>. @throws IOException If there is an error getting the value.
1767 This will get the 'Ff' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
1768 This will get the 'SetFf' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
1769 This will get the 'ClrFf' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
1770 This will get the 'F' entry of the FDF field dictionary. If it is not present then this method will return null. @return The widget field flags.
1771 This will get the 'SetF' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
1772 This will get the 'ClrF' entry of the FDF field dictionary. If it is not present then this method will return null. @return The widget field flags.
1773 This will get the default width. The default value for the default width is 1000. @return The default width for the glyphs in this font.
1774 Returns the process color space @return the process color space @throws IOException if the color space cannot be read
1775 Returns the group color space or null if it isn't defined. @param resources useful for its cache. Can be null. @return the group color space. @throws IOException if the colorspace could not be created
1776 Creates a new instance based on a given {@link COSDictionary}. @param dict the dictionary
1777 Creates a new instance based on a given {@link COSDictionary}. @param dict the dictionary
1778 This will get the overprint control mode. @return The overprint control mode or null if one has not been set.
1779 Returns the soft mask stored in the COS dictionary @return the soft mask or null if there isn't any.
1780 This will get a float item from the dictionary. @param key The key to the item. @return The value for that item.
1781 This will get the transfer function of the /TR dictionary. @return The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function.
1782 This will get the transfer function of the /TR2 dictionary. @return The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function, and the name Default denotes the transfer function that was in effect at the start of the page.
1783 Returns the backdrop color. @return the backdrop color
1784 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
1785 The annotation or annotations to be hidden or shown @return The T entry of the specific thread action dictionary.
1786 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
1787 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
1788 If the value in the /P entry is a string, this will get a named destination in the current document that provides the page number of the file attachment annotation. @return a named destination or null if the /P entry value is missing or not a string.
1789 Constructor. @param dict The annotations dictionary.
1790 Returns the /Contents string as a byte array, i.e. the embedded signature between the byterange gap. @return a byte array containing the signature, or an empty array if there isn't any.
1791 Get the XFA resource, the XFA resource is only used for PDF 1.5+ forms. @return The xfa resource or null if it does not exist.
1792 This will get the option values "Opt". <p> For a choice field the options array can either be an array of text strings or an array of a two-element arrays.<br> The method always only returns either the text strings or, in case of two-element arrays, an array of the first element of the two-element arrays </p> <p> Use {@link #getOptionsExportValues()} and {@link #getOptionsDisplayValues()} to get the entries of two-element arrays. </p> @return List containing the export values.
1793 This will get the display values from the options. <p> For options with an array of text strings the display value and export value are the same.<br> For options with an array of two-element arrays the display value is the second entry in the two-element array. </p> @return List containing all the display values.
1794 Returns the selected values, or an empty List, for the given key.
1795 Returns the given attribute, inheriting from parent nodes if necessary. @param key the key to look up @return COS value for the given key
1796 Returns the COSBase value of the "V" entry. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @return the COSBase value of the "V" entry
1797 {@inheritDoc} <p><b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance.
1798 Returns the default value of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @return the new default value
1799 {@inheritDoc}
1800 Collects all indirect objects numbers within this COSArray and all included dictionaries. It is used to avoid mixed up object numbers when importing an existing page to another pdf. Expert use only. You might run into an endless recursion if choosing a wrong starting point. @param indirectObjects a collection of already found indirect objects.
1801 Determine the highest object number from the imported page to avoid mixed up numbers when saving the new pdf. @param importedPage the imported page.
1802 Closes the visual signature COSDocument, if any. Do not call this before you're saved your signed PDF document, or saving will fail because COSStream objects held both by the COSDocument and by the signed document would no longer be available. @throws IOException if the document could not be closed
1803 This will write a COS object for a predefined key. @param key The key of the object to write. @param obj The object to write. @throws IOException if the output cannot be written
1804 visitFromObjRef method comment. @param obj The object that is being visited. @throws IOException If there is an exception while visiting this object.
1805 Returns the {@link COSObjectKey}, that is registered for the given {@link COSBase} in this compression pool. @param object The {@link COSBase} a {@link COSObjectKey} is registered for in this compression pool. @return The {@link COSObjectKey}, that is registered for the given {@link COSBase} in this compression pool, if such an object is contained.
1806 Update the key and object maps. @param key The key, that shall be added. @param object The object, that shall be added. @return The actual key, the object has been added for.
1807 Returns true, if the given {@link COSBase} is a registered object of this compression pool. @param object The object, that shall be checked. @return True, if the given {@link COSBase} is a registered object of this compression pool.
1808 Creates {@link COSWriterObjectStream}s for all currently registered objects of this pool, that have been marked as fit for being compressed in this manner. Such object streams may be added to a PDF document and shall be declared in a document's {@link PDFXRefStream} accordingly. The objects contained in such a stream must not be added to the document separately. @return The created {@link COSWriterObjectStream}s for all currently registered compressible objects.
1809 Process lines for output. Process lines for an individual paragraph and generate the commands for the content stream to show the text. @param lines the lines to process. @throws IOException if there is an error writing to the stream.
1810 Generates the first intermediate curl for a cloudy polygon.
1811 Returns a template for intermediate curls in a cloudy polygon.
1812 Creates one or more Bézier curves that represent an elliptical arc. Angles are in radians. The arc will always proceed in the positive angle direction. If the argument `out` is null, this writes the results to the instance variable `output`.
1813 Creates a new ICC color space with an empty stream. @param doc the document to store the ICC data
1814 Creates a new uncolored tiling pattern color space. @param resources The current resources. @param colorSpace The underlying color space.
1815 Set optional content groups as a list. @param ocgs list of optional content groups to set.
1816 This will set the changes along the x-axis. @param changeXs changes along the x-axis
1817 This will set the changes along the y-axis. @param changeYs changes along the y-axis
1818 This will set the distances. @param distances distances
1819 This will set the areas. @param areas areas
1820 This will set the angles. @param angles angles
1821 This will set the sloaps of a line. @param lineSloaps the sloaps of a line
1822 This will add null values until the size of the array is at least as large as the parameter. If the array is already larger than the parameter then nothing is done. @param size The desired size of the array.
1823 This will parse a directory object from the stream. @return The parsed object. @throws IOException If there is an error during parsing.
1824 This will set the list of decode parameters. @param decodeParams The list of decode parameters.
1825 This will set the list of decode params. @param decodeParams The list of decode params.
1826 Sets the kids (K). @param kids the kids
1827 This will set the options for the choice field. The objects in the list should either be <code>String</code> or {@link FDFOptionElement}. @param options The options to set.
1828 Returns the range for a certain component number. This will never return null. If it is not present then the range 0..1 will be returned. @param n the component number to get the range for @return the range for this component
1829 Build widths with Identity CIDToGIDMap (for embedding full font).
1830 This will set the dash pattern for the graphics state. @param dashPattern The dash pattern
1831 Set the color space instance for this box style. This must be a PDDeviceRGB! @param color The new colorspace value.
1832 This will set the color used in drawing various elements. As of PDF 1.6 these are : Background of icon when closed Title bar of popup window Border of a link annotation Colour is in DeviceRGB colourspace @param c colour in the DeviceRGB colourspace
1833 This will set interior color of the line endings defined in the LE entry. color is in DeviceRGB color space. @param ic color in the DeviceRGB color space.
1834 This will set interior color. @param ic color.
1835 This will set interior color of the line endings defined in the LE entry. @param ic color.
1836 This will set interior color of the drawn area color is in DeviceRGB colorspace. @param ic color in the DeviceRGB color space.
1837 This will set the border color. @param c the border color
1838 This will set the background color. @param c the background color
1839 Set the RGB text color for this node. @param textColor The text color for this node.
1840 Creates a new JPEG Image XObject from an input stream containing JPEG data. The input stream data will be preserved and embedded in the PDF file without modification. @param document the document where the image will be created @param stream a stream of JPEG data @return a new Image XObject @throws IOException if the input stream cannot be read
1841 This will set the font for this font setting. @param font The new font.
1842 This will set the tint transform function. @param tint The tint transform function.
1843 Sets the tint transform function. @param tint the tint transform function
1844 Set the page for a local destination. For an external destination, call {@link #setPageNumber(int) setPageNumber(int pageNumber)}. @param page The page for a local destination.
1845 This will create a translated rectangle based off of this rectangle, such that the new rectangle retains the same dimensions(height/width), but the lower left x,y values are zero. <br> 100, 100, 400, 400 (llx, lly, urx, ury ) <br> will be translated to 0,0,300,300 @return A new rectangle that has been translated back to the origin.
1846 Sets the colour for the before edge. @param colour the colour for the before edge
1847 Sets the colour for the after edge. @param colour the colour for the after edge
1848 Sets the colour for the start edge. @param colour the colour for the start edge
1849 Sets the colour for the end edge. @param colour the colour for the end edge
1850 This will dispatch to the correct method. @param obj The object to decrypt. @param objNum The object number. @param genNum The object generation Number. @return the encrypted/decrypted COS object @throws IOException If there is an error getting the stream data.
1851 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
1852 Sets the AcroForm for this catalog. @param acroForm The new AcroForm.
1853 Sets the viewer preferences. @param prefs The new viewer preferences.
1854 Sets the document outlines. @param outlines The new document outlines.
1855 Sets the metadata for this object. This can be null. @param meta The meta data for this object.
1856 Sets the Document Open Action for this object. @param action The action you want to perform.
1857 Sets the additional actions for the document. @param actions The actions that are associated with this document.
1858 Sets the names dictionary for the document. @param names The names dictionary that is associated with this document.
1859 Set information about the doc's usage of tagged features. @param markInfo The new MarkInfo data.
1860 Sets the document level URI. @param uri The new document level URI.
1861 Sets the document's structure tree root. @param treeRoot The new structure tree.
1862 Sets the page label descriptor for the document. @param labels the new page label descriptor to set.
1863 Set the named destinations that are associated with this document. @param dests The destination names.
1864 Set the named embedded files that are associated with this document. @param ef The new embedded files
1865 Set the named javascript entries that are associated with this document. @param js The new Javascript entries.
1866 Creates a new instance of PDPage for embedding. @param mediaBox The MediaBox of the page.
1867 This will set the resources for this page. @param resources The new resources for this page.
1868 This will set the mediaBox for this page. @param mediaBox The new mediaBox for this page.
1869 This will set the BleedBox for this page. @param bleedBox The new BleedBox for this page.
1870 This will set the TrimBox for this page. @param trimBox The new TrimBox for this page.
1871 This will set the ArtBox for this page. @param artBox The new ArtBox for this page.
1872 This will set the contents of this page. @param contents The new contents of the page.
1873 Set the metadata for this object. This can be null. @param meta The meta data for this object.
1874 Set the page actions. @param actions The actions for the page.
1875 @param transition The new transition to set on this page.
1876 Convenient method to set a transition and the display duration @param transition The new transition to set on this page. @param duration The maximum length of time, in seconds, that the page shall be displayed during presentations before the viewer application shall automatically advance to the next page.
1877 Sets the page. @param page the page
1878 Sets the referenced annotation. @param annotation the referenced annotation
1879 Sets the referenced XObject. @param xobject the referenced XObject
1880 Sets the page on which the object shall be rendered. This is optional and overrides the /PG entry in the structure element containing the object reference; shall be used if the structure element contained no such entry. @param page
1881 Sets the parent in the structure hierarchy (P). @param structureNode the parent in the structure hierarchy
1882 Sets the page on which some or all of the content items designated by the K entry shall be rendered (Pg). @param page the page on which some or all of the content items designated by the K entry shall be rendered.
1883 Sets the attributes together with their revision numbers (A). @param attributes the attributes
1884 Sets the ID tree. @param idTree the ID tree
1885 Sets the parent tree.<p> The keys correspond to a single page of the document or to an individual object, e.g. an annotation or an XObject, which have a <b>/StructParent</b> or <b>/StructParents</b> entry.<p> The values of type {@link PDParentTreeValue} are either a dictionary or an array. It's a dictionary for individual objects like an annotation or an XObject, and an array for a page object or a content stream containing marked-content sequences identified by an MCID. <p> To create an empty parent tree, call {@code new PDNumberTreeNode(PDParentTreeValue.class)}. @param parentTree the parent tree
1886 Set the rectangle associated with this annotation. @param rectangle The annotation rectangle.
1887 This will set the border style dictionary, specifying the width and dash pattern used in drawing the annotation. @param bs the border style dictionary to set.
1888 This will set the border effect dictionary, describing the effect applied to the border described by the BS entry. @param be the border effect dictionary to set.
1889 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. @param fringe the fringe
1890 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
1891 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
1892 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
1893 This will set the FDF document. @param fdf The new FDF dictionary.
1894 This will set the signature that is associated with this catalog. @param sig The new signature.
1895 This will set the file specification. @param fs The file specification.
1896 This will set the JavaScript entry. @param js The javascript entries.
1897 This will set the FDF catalog for this FDF document. @param cat The FDF catalog.
1898 This will set the appearance dictionary. @param ap The appearance dictionary.
1899 This will set the named page references. @param ref The named page references.
1900 This will set the icon fit 'IF' entry. @param fit The icon fit object.
1901 This will set the action that is associated with this field. @param a The new action.
1902 This will set the additional actions that are associated with this field. @param aa The additional actions.
1903 This will set frational space to allocate. @param space The space to allocate.
1904 This will set the file specification for this named page reference. @param fs The file specification to set.
1905 This will set the page info. @param info The new page info dictionary.
1906 This will set the template reference. @param tRef The template reference.
1907 Set the type 1 font program. @param type1Stream The type 1 stream.
1908 Set the true type font program. @param ttfStream The true type stream.
1909 Set a stream containing a font program that is not true type or type 1. @param stream The font program stream.
1910 Set a stream containing a CIDSet. @param stream The font program stream.
1911 This will set the whitepoint tristimulus. As this is a required field, null should not be passed into this function. @param whitepoint the whitepoint tristimulus. @throws IllegalArgumentException if null is passed as argument.
1912 This will set the BlackPoint tristimulus. @param blackpoint the BlackPoint tristimulus
1913 This will set the external graphics state for this pattern. @param extendedGraphicsState The new extended graphics state for this pattern.
1914 This will set the shading resources for this pattern. @param shadingResources The new shading resources for this pattern.
1915 This will set the resources for this pattern. @param resources The new resources for this pattern.
1916 This will set the function for the color conversion. @param newFunction the new function
1917 This will set the font setting for this graphics state. @param fs The new font setting.
1918 This will set the destination to jump to. @param d The destination. @throws IllegalArgumentException if the destination is not a page dictionary object.
1919 This will set the file in which the destination is located. @param fs The file specification.
1920 Sets the target directory. @param targetDirectory the target directory
1921 This will set the destination to jump to. @param d The destination. @throws IllegalArgumentException if the destination is not a page dictionary object.
1922 This will set the file in which the destination is located. @param fs The file specification.
1923 This will set the application to be launched or the document to be opened or printed. It is required if none of the entries Win, Mac or Unix is present. If this entry is absent and the viewer application does not understand any of the alternative entries it should do nothing. @param fs The file specification.
1924 This will set a dictionary containing Windows-specific launch parameters. @param win The action to be performed.
1925 This will set the file in which the destination is located. @param fs The file specification.
1926 This will set the file in which the destination is located. @param fs The file specification.
1927 This will set the file in which the destination is located. @param fs The file specification.
1928 Set the F action. @param action Get the F action.
1929 This will set an action to be performed when the cursor enters the annotation's active area. @param e The action to be performed.
1930 This will set an action to be performed when the cursor exits the annotation's active area. @param x The action to be performed.
1931 This will set an action to be performed when the mouse button is pressed inside the annotation's active area. The name D stands for "down". @param d The action to be performed.
1932 This will set an action to be performed when the mouse button is released inside the annotation's active area. The name U stands for "up". @param u The action to be performed.
1933 This will set an action to be performed when the annotation receives the input focus. @param fo The action to be performed.
1934 This will set an action to be performed when the annotation loses the input focus. The name Bl stands for "blurred". @param bl The action to be performed.
1935 This will set an action to be performed when the page containing the annotation is opened. The action is executed after the O action in the page's additional actions dictionary and the OpenAction entry in the document catalog, if such actions are present. @param po The action to be performed.
1936 This will set an action to be performed when the page containing the annotation is closed. The action is executed before the C action in the page's additional actions dictionary, if present. @param pc The action to be performed.
1937 This will set an action to be performed when the page containing the annotation becomes visible in the viewer application's user interface. @param pv The action to be performed.
1938 This will set an action to be performed when the page containing the annotation is no longer visible in the viewer application's user interface. @param pi The action to be performed.
1939 This will set a JavaScript action to be performed before closing a document. The name WC stands for "will close". @param wc The action to be performed.
1940 This will set a JavaScript action to be performed before saving a document. The name WS stands for "will save". @param ws The action to be performed.
1941 This will set a JavaScript action to be performed after saving a document. The name DS stands for "did save". @param ds The action to be performed.
1942 This will set a JavaScript action to be performed before printing a document. The name WP stands for "will print". @param wp The action to be performed.
1943 This will set a JavaScript action to be performed after printing a document. The name DP stands for "did print". @param dp The action to be performed.
1944 This will set a JavaScript action to be performed when the user types a keystroke into a text field or combo box or modifies the selection in a scrollable list box. This allows the keystroke to be checked for validity and rejected or modified. @param k The action to be performed.
1945 This will set a JavaScript action to be performed before the field is formatted to display its current value. This allows the field's value to be modified before formatting. @param f The action to be performed.
1946 This will set a JavaScript action to be performed when the field's value is changed. This allows the new value to be checked for validity. The name V stands for "validate". @param v The action to be performed.
1947 This will set a JavaScript action to be performed in order to recalculate the value of this field when that of another field changes. The order in which the document's fields are recalculated is defined by the CO entry in the interactive form dictionary. The name C stands for "calculate". @param c The action to be performed.
1948 This will set an action to be performed when the page is opened. This action is independent of any that may be defined by the OpenAction entry in the document catalog, and is executed after such an action. @param o The action to be performed.
1949 This will set an action to be performed when the page is closed. This action applies to the page being closed, and is executed before any other page opened. @param c The action to be performed.
1950 Sets the target directory. @param targetDirectory the target directory or null if the current document is the target file containing the destination.
1951 This will set a named destination in the current document that provides the page number of the file attachment annotation. @param dest a named destination or null if the entry is to be removed.
1952 This will set the appearance associated with this annotation. @param appearance The appearance dictionary for this annotation.
1953 Sets the optional content group or optional content membership dictionary for the annotation. @param oc The optional content group or optional content membership dictionary.
1954 This will set the corresponding page for this annotation. This is optional but recommended. Not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. @param page is the corresponding page
1955 Set the attached file. @param file The file that is attached.
1956 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.6 and higher. @param be The border effect dictionary to set.
1957 This will set the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param rd the rectangle difference
1958 Set the annotation action. Either this or the destination entry should be set, but not both. @param action The annotation action.
1959 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
1960 The new destination value. Either this or the action entry should be set, but not both. @param dest The updated destination.
1961 This will set the previous URI action, in case it needs to be retrieved at later date. @param pa The previous URI.
1962 This will set the popup annotation used for entering/editing the text for this annotation. @param popup the popup annotation.
1963 This will set the annotation to which this one is "In Reply To" the actual relationship is specified by the RT entry. @param irt the annotation this one is "In Reply To".
1964 This will set the external data dictionary. @param externalData the external data dictionary
1965 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
1966 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.5 and higher. @param be The border effect dictionary to set.
1967 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.5 and higher. @param be The border effect dictionary to set.
1968 This will set the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param rd the rectangle difference
1969 Sets the appearance characteristics dictionary. @param appearanceCharacteristics the appearance characteristics dictionary
1970 Set the annotation action. As of PDF 1.6 this is only used for Widget Annotations @param action The annotation action.
1971 Set the actions of the field. @param actions The field actions.
1972 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
1973 Set the parent field of a widget annotation. This is only required if this widget annotation is one of multiple children in a field, and not to be set otherwise. You will usually not need this, because in most cases, fields have only one widget and share a common dictionary. A usage can be found in the CreateMultiWidgetsForm example. @param field the parent field. @throws IllegalArgumentException if setParent() was called for a field that shares a dictionary with its only widget.
1974 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
1975 This will set the normal appearance when there is only one appearance to be shown. @param ap The appearance stream to show.
1976 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
1977 This will set the rollover appearance when there is rollover appearance to be shown. @param ap The appearance stream to show.
1978 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
1979 This will set the down appearance when there is down appearance to be shown. @param ap The appearance stream to show.
1980 Set the build data dictionary for the signature handler. This entry is optional but is highly recommended for the signatures. @param filter is the PDPropBuildFilter
1981 Set the build data dictionary for the PubSec Software module. @param pubSec is the PDPropBuildPubSec
1982 Set the build data dictionary for the viewing application software module. @param app is the PDPropBuildApp
1983 (Optional) A certificate seed value dictionary containing information about the certificate to be used when signing. @param certificate dictionary
1984 PDF signature build dictionary. Provides information about the signature handler. @param propBuild the prop build
1985 Set the previous sibling, this will be maintained by this class. @param outlineNode The new previous sibling.
1986 Set the next sibling, this will be maintained by this class. @param outlineNode The new next sibling.
1987 Set the page destination for this node. @param dest The new page destination for this node.
1988 Set the action for this node. @param action The new action for this node.
1989 Set the structure element for this node. @param structureElement The new structure element for this node.
1990 Set the first child, this will be maintained by this class. @param outlineNode The new first child.
1991 Set the last child, this will be maintained by this class. @param outlineNode The new last child.
1992 This will set the default resources for the acroform. @param dr The new default resources.
1993 Set the XFA resource, this is only used for PDF 1.5+ forms. @param xfa The xfa resource.
1994 Sets the value of this field to be the given signature. @param value is the PDSignatureField @throws IOException if the new value could not be applied
1995 Sets the default value of this field to be the given signature. @param value is the PDSignatureField
1996 <p>(Optional; PDF 1.) A seed value dictionary containing information that constrains the properties of a signature that is applied to the field.</p> @param sv is the seed value dictionary as PDSeedValue
1997 Set the actions of the field. @param actions The field actions.
1998 Sets the field's widget annotations. @param children The list of widget annotations.
1999 This will set the rectangle specifying the location of the viewport. @param rectangle the rectangle specifying the location.
2000 This will set the measure dictionary. @param measure the measure dictionary
2001 Set the thread info, can be null. @param info The info dictionary about this thread.
2002 Set the thread that this bead is part of. This is only required for the first bead in a thread. Note: This property is set for you by the PDThread.setFirstBead() method. @param thread The thread that this bead is part of.
2003 Set the next bead in the thread. @param next The next bead.
2004 Set the previous bead in the thread. @param previous The previous bead.
2005 Set the page that this bead is part of. This is a required property and must be set when creating a new bead. The PDPage object also has a list of beads in the natural reading order. It is recommended that you add this object to that list as well. @param page The page that this bead is on.
2006 Set the rectangle on the page that this bead covers. @param rect The portion of the page that this bead covers.
2007 Set if this is a tagged PDF. @param value The new marked value.
2008 Set if the structure elements contain user properties. @param userProps The new value for this property.
2009 Set the value of the suspects property. See PDF Reference 1.6 section 10.6 "Logical Structure" for more information about this property. @param suspect The new "Suspects" value.
2010 This will specify whether to track the mouse position when the URI is resolved. @param value The flag value.
2011 This will set the initial state of the annotation, open or closed. @param open Boolean value, true = open false = closed.
2012 This will set the value indication if the denominator of the fractional value is reduced/truncated . The denominator may not be reduced/truncated if true @param fd fd
2013 Tell if the underlying file is volatile and should not be cached by the reader application. Default: false @param fileIsVolatile The new value for the volatility of the file.
2014 Set the EncryptMetaData dictionary info. @param encryptMetaData true if EncryptMetaData shall be set.
2015 This will set if the contents are shown as a caption to the line. @param cap Boolean value.
2016 This will tell the icon to scale. @param value The flag value.
2017 This will set if the fields can be renamed. @param value The flag value.
2018 This will set the AntiAlias value. @param antiAlias the new AntiAlias value
2019 This will set the overprint control(OP). @param op The overprint control.
2020 This will set the overprint control(OP). @param op The overprint control.
2021 This will set the automatic stroke adjustment flag. @param sa The new automatic stroke adjustment flag.
2022 This will set the alpha source flag (“alpha is shape”), that specifies whether the current soft mask and alpha constant shall be interpreted as shape values (true) or opacity values (false). @param alpha The alpha source flag.
2023 This will set the text knockout flag. @param tk The text knockout flag.
2024 This will specify whether to open the destination document in a new window. @param value The flag value.
2025 This will specify whether to open the destination document in a new window. @param value The flag value.
2026 This will specify whether to open the destination document in a new window. @param value The flag value.
2027 A flag specifying whether to play the sound synchronously or asynchronously. When true, the reader allows no further user interaction other than canceling the sound until the sound has been completely played. @param synchronous Whether to play the sound synchronously (true) or asynchronously (false).
2028 A flag specifying whether to repeat the sound indefinitely. @param repeat Whether to repeat the sound indefinitely.
2029 The flag specifying whether to mix this sound with any other sound already playing. If this flag is false, any previously playing sound shall be stopped before starting this sound; this can be used to stop a repeating sound (see Repeat). Default value: false. @param mix whether to mix this sound with any other sound already playing. (false).
2030 This will set if the contents are shown as a caption to the line. @param cap Boolean value.
2031 This will set initial state of the annotation, open or closed. @param open Boolean value, true = open false = closed
2032 A flag that can be used by the signature handler or software module to indicate that this signature was created with unrelease software. @param preRelease is true if the signature was created with a unrelease software, otherwise false.
2033 If true, the reader should not display a warning about fonts not being embedded. @param noEmbedFontWarning true if there is a Legal dictionary in the catalog and the NonEmbeddedFonts attribute has a non-zero value Documentation says: (Optional; PDF 1.5) If there is a LegalPDF dictionary in the catalog of the PDF file and the NonEmbeddedFonts attribute in this dictionary has a non zero value, and the viewing application has a preference set to suppress the display of this warning then the value of this attribute will be set to true. @see <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/Acrobat_Signature_BuildDict.pdf#page=6">Digital Signature Build Dictionary Specification</a> @see #getNonEFontNoWarn() @see COSName#NON_EFONT_NO_WARN
2034 If true, the application was in trusted mode when signing took place. @param trustedMode true if the application is in trusted mode.
2035 Set the NeedAppearances value. If this is false, PDFBox will create appearances for all field widget. @param value the value for NeedAppearances
2036 Set the toolbar preference. @param value Set the toolbar preference.
2037 Set the menubar preference. @param value Set the menubar preference.
2038 Set the window UI preference. @param value Set the window UI preference.
2039 Set the fit window preference. @param value Set the fit window preference.
2040 Set the center window preference. @param value Set the center window preference.
2041 Set the display doc title preference. @param value Set the display doc title preference.
2042 This will create an Appearance dictionary from an appearance XML element. @param appearanceXML The XML element that contains the appearance data.
2043 This is a convenience method that will convert the value to a COSName object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
2044 Sets the page mode. @param mode The new page mode.
2045 Sets the page layout. @param layout The new page layout.
2046 Sets the PDF specification version this document conforms to. @param version the PDF version (e.g. "1.4")
2047 This will set the trapped of the document. This will be 'True', 'False', or 'Unknown'. @param value The new trapped value for the document. @throws IllegalArgumentException if the parameter is invalid.
2048 Sets the numbering style for this page range. @param style one of the STYLE_* constants or {@code null} if no page numbering is desired.
2049 Creates a new instance with a given type. @param type the type (Type)
2050 Sets the owner of the attributes. @param owner the owner of the attributes
2051 Default constructor
2052 Default Constructor.
2053 Sets the structure type (S). @param structureType the structure type
2054 Sets the class names together with their revision numbers (C). @param classNames the class names
2055 Constructor. @param type the type
2056 Set the style for the box. @param style The style for the box line. @see PDBoxStyle#GUIDELINE_STYLE_DASHED @see PDBoxStyle#GUIDELINE_STYLE_SOLID
2057 Set the subfilter entry of the encryption dictionary. @param subfilter The value of the subfilter field.
2058 The intent of the annotation. @param intent The annotation's intent.
2059 This will set the line ending style. @param style The new style.
2060 This will set the icon (and hence appearance, AP taking precedence) For this annotation. See the PDAnnotationText.NAME_XXX constants for valid values. @param icon The name of the annotation
2061 This will set the version of the FDF document. @param version The new version for the FDF document.
2062 This will set the encoding. @param encoding The new encoding.
2063 This will set the scale option for the icon. Set the SCALE_OPTION_XXX constants. @param option The scale option.
2064 This will set the scale type. See the SCALE_TYPE_XXX constants. @param scale The scale type.
2065 Creates a new Pattern dictionary.
2066 This will set the type of PDF object that the actions dictionary describes. If present must be Action for an action dictionary. @param type The new Type for the PDF object.
2067 This will set the type of action that the actions dictionary describes. @param s The new type of action.
2068 This will set the sub type (and hence appearance, AP taking precedence) For this annotation. See the SUB_TYPE_XXX constants for valid values. @param subType The subtype of the annotation
2069 This will set the annotations appearance state name. @param as The name of the appearance stream.
2070 Set the name used to draw the attachment icon. See the ATTACHMENT_NAME_XXX constants. @param name The name of the visual icon to draw.
2071 This will set the line ending style. @param style The new style.
2072 This will set the caption positioning. Allowed values are: "Inline" and "Top" @param captionPositioning caption positioning
2073 Set the highlight mode. See the HIGHLIGHT_MODE_XXX constants. @param mode The new highlight mode.
2074 This will set the Reply Type (relationship) with the annotation in the IRT entry See the RT_* constants for the available values. @param rt the reply type.
2075 This will set the intent of the annotation The values and meanings are specific to the actual annotation See the IT_* constants for the annotation classes. @param it the intent
2076 This will set the name (and hence appearance, AP taking precedence) For this annotation. See the NAME_XXX constants for valid values. @param name The name of the rubber stamp.
2077 This will set the name (and hence appearance, AP taking precedence) For this annotation. See the NAME_XXX constants for valid values. @param name The name of the annotation
2078 Sets the highlighting mode. <dl> <dt><code>N</code></dt> <dd>(None) No highlighting.</dd> <dt><code>I</code></dt> <dd>(Invert) Invert the contents of the annotation rectangle.</dd> <dt><code>O</code></dt> <dd>(Outline) Invert the annotation's border.</dd> <dt><code>P</code></dt> <dd>(Push) Display the annotation's down appearance, if any. If no down appearance is defined, the contents of the annotation rectangle shall be offset to appear as if it were pushed below the surface of the page</dd> <dt><code>T</code></dt> <dd>(Toggle) Same as <code>P</code> (which is preferred).</dd> </dl> @param highlightingMode the highlighting mode the defined values
2079 This will set the border style, see the STYLE_* constants for valid values. @param s the border style to use
2080 Constructor.
2081 This will set the subtype of the external data dictionary. @param subtype the subtype of the external data dictionary
2082 The name of the software module that was used to create the signature. @param name is the name of the software module
2083 (Optional; PDF 1.7) A name indicating the usage of the URL entry. There are standard uses and there can be implementation-specific uses for this URL. The following value specifies a valid standard usage: <ul> <li>Browser, The URL references content that should be displayed in a web browser to allow enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL bit is ignored for this usage.</li> <li>ASSP, The URL references a signature web service that can be used for server-based signing. If the Ff attribute’s URL bit indicates that this is a required constraint, this implies that the credential used when signing must come from this server.</li> </ul> Third parties can extend the use of this attribute with their own attribute values, which must conform to the guidelines specified in <a href="http://www.adobe.com/content/dam/acom/en/devnet/pdf/PDF32000_2008.pdf#page=681">PDF Spec 1.7 Appendix E (PDF Name Registry)</a> if urlType is not set the default is Browser for URL @param urlType String of the urlType
2084 Default Constructor.
2085 Constructor for an existing document outline. @param dic The storage dictionary.
2086 Constructor.
2087 This will set the subtype of the measure dictionary. @param subtype the subtype of the measure dictionary
2088 Constructor.
2089 This will set the name of the viewport. @param name the name of the viewport
2090 creates a new transition with the given style. @param style the style to be used to create the new transition
2091 Sets the dimension in which the specified transition effect shall occur. Only for {@link PDTransitionStyle#Split} and {@link PDTransitionStyle#Blinds}. @param dimension the dimension in which the specified transition effect shall occur
2092 Sets the direction of motion for the specified transition effect. Only for {@link PDTransitionStyle#Split}, {@link PDTransitionStyle#Blinds} and {@link PDTransitionStyle#Fly}. @param motion the direction of motion for the specified transition effect
2093 Set the non full screen page mode preference. @param value Set the non full screen page mode preference.
2094 Set the reading direction preference. @param value Set the reading direction preference.
2095 Set the ViewArea preference. See BOUNDARY enumeration. @param value Set the ViewArea preference.
2096 Set the ViewClip preference. See BOUNDARY enumeration. @param value Set the ViewClip preference.
2097 Set the PrintArea preference. See BOUNDARY enumeration. @param value Set the PrintArea preference.
2098 Set the PrintClip preference. See BOUNDARY enumeration. @param value Set the PrintClip preference.
2099 Set the Duplex preference. See DUPLEX enumeration. @param value Set the Duplex preference.
2100 Set the PrintScaling preference. See PRINT_SCALING enumeration. @param value Set the PrintScaling preference.
2101 Set the date object. @param key The key to the date. @param date The date to set.
2102 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
2103 Sets the Language for the document. @param language The new document language.
2104 This will set the title of the document. @param title The new title for the document.
2105 This will set the author of the document. @param author The new author for the document.
2106 This will set the subject of the document. @param subject The new subject for the document.
2107 This will set the keywords of the document. @param keywords The new keywords for the document.
2108 This will set the creator of the document. @param creator The new creator for the document.
2109 This will set the producer of the document. @param producer The new producer for the document.
2110 Sets the page label prefix for this page range. @param prefix the page label prefix for this page range, or {@code null} to unset the prefix.
2111 This will set the unicode file name. If you call this, then do not forget to also call {@link #setFile(java.lang.String) setFile(String)} or the attachment will not be visible on some viewers. @param file The name of the file.
2112 This will set the file name. You should also call {@link #setFileUnicode(java.lang.String) setFileUnicode(String)} for cross-platform and cross-language compatibility. @param file The name of the file.
2113 Set the file description. @param description The file description
2114 Sets the element identifier (ID). @param id the element identifier
2115 Sets the title (T). @param title the title
2116 Sets the language (Lang). @param language the language
2117 Sets the alternate description (Alt). @param alternateDescription the alternate description
2118 Sets the expanded form (E). @param expandedForm the expanded form
2119 Sets the actual text (ActualText). @param actualText the actual text
2120 The annotation modification date. @param date The date to store in the FDF annotation.
2121 Set a unique name for an annotation. @param name The unique annotation name.
2122 Set the contents, or a description, for an annotation. @param contents The annotation contents, or a description.
2123 Set a unique title for an annotation. @param title The annotation title.
2124 A short description of the annotation. @param subject The annotation subject.
2125 This will set the symbol that shall be associated with the caret. @param symbol the symbol
2126 Set the default appearance string. @param appearance The new default appearance string.
2127 Set the default style string. @param style The new default style string.
2128 This will set the caption positioning. Allowed values are: "Inline" and "Top" @param captionStyle caption positioning
2129 This will set the annotation state. @param state the annotation state
2130 This will set the annotation state model. Allowed values are "Marked" and "Review" @param stateModel the annotation state model
2131 This will set the status string. @param status The new status string.
2132 This will set the target frame in the browser to open this document. @param target The new target frame.
2133 This will set the partial field name. @param partial The partial field name.
2134 This will set the name of the referenced page. @param name The referenced page name.
2135 Sets the name of the optional content group. @param name the name
2136 Creates a new optional content properties dictionary.
2137 @param sAction The JavaScript.
2138 This will set the file name to be launched or the document to be opened or printed, in standard Windows pathname format. If the name string includes a backslash character (\), the backslash must itself be preceded by a backslash. This value must be a single string; it is not a file specification. @param f The file name to be launched.
2139 This will set the string specifying the default directory in standard DOS syntax. @param d The default directory.
2140 This will set the string specifying the operation to perform: open to open a document print to print a document If the F entry designates an application instead of a document, this entry is ignored and the application is launched. Default value: open. @param o The operation to perform.
2141 This will set a parameter string to be passed to the application designated by the F entry. This entry should be omitted if F designates a document. @param p The parameter string.
2142 This will set the uniform resource identifier to resolve, encoded in 7-bit ASCII. @param uri The uniform resource identifier.
2143 Sets the name of the file as found in the EmbeddedFiles name tree. This is only to be used if the target is a child of the current document. @param filename a filename or null if the entry is to be deleted.
2144 This will get the value of the /NM entry in the annotation dictionary. @param name the /NM value of an annotation dictionary or null if the entry is to be removed.
2145 Set the file to launch. @param file The executable/document to launch.
2146 Set the dir to launch from. @param dir The dir of the executable/document to launch.
2147 Set the operation to perform.. @param op The operation to perform on the file.
2148 Set the parameter to pass the executable. @param param The parameter for the executable.
2149 Set the "contents" of the field. @param value the value of the contents.
2150 This will set the date and time the annotation was modified. @param m the date and time the annotation was created. Date values used in a PDF shall conform to a standard date format, which closely follows that of the international standard ASN.1 (Abstract Syntax Notation One), defined in ISO/IEC 8824. A date shall be a text string of the form (D:YYYYMMDDHHmmSSOHH'mm). Alternatively, use {@link #setModifiedDate(java.util.Calendar)}
2151 This will set the name, a string intended to uniquely identify each annotation within a page. Not to be confused with some annotations Name entry which impact the default image drawn for them. @param nm The identifying name for the annotation.
2152 Set the default appearance. @param daValue a string describing the default appearance.
2153 Set the default style string. Providing null as the value will remove the default style string. @param defaultStyleString a string describing the default style.
2154 Set the string used as the title of the popup window shown when open and active (by convention this identifies who added the annotation). @param t The title of the popup.
2155 This will set the short description of the subject of the annotation. @param subj short description of the subject.
2156 This will set the annotation state. @param state the annotation state
2157 This will set the annotation state model. Allowed values are "Marked" and "Review" @param stateModel the annotation state model
2158 This will set the normal caption. @param caption the normal caption
2159 This will set the rollover caption. @param caption the rollover caption
2160 This will set the alternate caption. @param caption the alternate caption
2161 The build date of the software module. This string is normally produced by the compiler. @param date is the build date of the software module
2162 (Optional) A URL, the use for which is defined by the URLType entry. @param url String of the URL
2163 Sets the URL. @param url the URL to be set as URL
2164 Sets the name of the person or authority signing the document. According to the PDF specification, this value should be used only when it is not possible to extract the name from the signature. @param name the name to be used
2165 Sets the CPU host name or physical location of the signing. @param location the location to be used
2166 Sets the reason for the signing, such as (I agree...). @param reason the reason to be used
2167 Sets the contact info provided by the signer to enable a recipient to contact the signer to verify the signature, e.g. a phone number. @param contactInfo the contact info to be used
2168 Set the title for this node. @param title The new title for this node.
2169 Set the default appearance. @param daValue a string describing the default appearance
2170 Sets the default value of this field. @param value The name of the selected item.
2171 This will set the partial name of the field. @param name The new name for the field. @throws IllegalArgumentException If the name contains a period character.
2172 This will set the alternate name of the field ("shall be used in place of the actual field name wherever the field shall be identified in the user interface (such as in error or status messages referring to the field)"). The text appears as a tool tip in Adobe Reader. Because of the usage for error or status messages, it should be different for each field. @param alternateFieldName the alternate name of the field.
2173 This will set the mapping name of the field. @param mappingName the mapping name of the field
2174 Sets the plain text value of this field. @param value Plain text @throws IOException if the value could not be set
2175 Set the plain text value of this field, and try to update the visual appearance. @param value Plain text @throws IOException if the value could not be set
2176 Sets the default value of this field. @param value Plain text
2177 Set the default appearance. This will set the local default appearance for the variable text field only, not affecting a default appearance in the parent hierarchy. Providing null as the value will remove the local default appearance. <p> This method can also be used to change the font of a field, by replacing the font name from this string with another font name found in the AcroForm default resources <u>before</u> calling {@link #setValue(java.lang.String) setValue(String)}, see also <a href="https://stackoverflow.com/questions/47995062/pdfbox-api-how-to-handle-cyrillic-values">this stackoverflow answer</a>. For example, "/Helv 10 Tf 0 g" can be replaced with "/F1 10 Tf 0 g". Performance may go down (see <a href="https://issues.apache.org/jira/browse/PDFBOX-4508">PDFBOX-4508)</a> if this is done for many fields and with a very large font (e.g. ArialUni); to avoid this, save and reload the file after changing all fields. @param daValue a string describing the default appearance
2178 This will set the scale ration. @param scaleRatio the scale ratio.
2179 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
2180 This will set the key for this page in the structural parent tree. @param structParents The new key for this page.
2181 This will set the rotation for this page. @param rotation The new rotation for this page in degrees.
2182 Sets the start value for page numbering in this page range. @param start a positive integer representing the start value. @throws IllegalArgumentException if {@code start} is not a positive integer
2183 Set the number of bits that the output value will take up. Valid values are 1,2,4,8,12,16,24,32. @param bps The number of bits for each output value.
2184 Sets the marked content identifier. @param mcid the marked content identifier
2185 Sets the revision number (R). @param revisionNumber the revision number
2186 Sets the next key in the parent tree. This is a number greater than any existing key, and which shall be used for the next entry to be added to the tree. @param parentTreeNextkey The next key in the parent tree.
2187 This will set the number of bits to use for the crypt filter algorithm. @param length The new key length.
2188 This will set the V entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.13. <br><br> <b>Note: This value is used to decrypt the pdf document. If you change this when the document is encrypted then decryption will fail!.</b> @param version The new encryption version.
2189 This will set the number of bits to use for the encryption algorithm. @param length The new key length.
2190 This will set the R entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.14. <br><br> <b>Note: This value is used to decrypt the pdf document. If you change this when the document is encrypted then decryption will fail!.</b> @param revision The new encryption version.
2191 This will set the permissions bit mask. @param permissions The new permissions bit mask
2192 This will set the page. @param page The page number.
2193 This will set the form of quadding (justification) of the annotation text. @param justification The quadding of the text.
2194 This will set the clockwise rotation in degrees. @param rotation The number of degrees of clockwise rotation.
2195 This will set the field flags that are associated with this field. The 'Ff' entry in the FDF field dictionary. @param ff The new value for the field flags.
2196 This will set the field flags that are associated with this field. The 'SetFf' entry in the FDF field dictionary. @param ff The new value for the "set field flags".
2197 This will set the field flags that are associated with this field. The 'ClrFf' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
2198 This will set the field flags that are associated with this field. The 'F' entry in the FDF field dictionary. @param f The new value for the field flags.
2199 This will set the widget field flags that are associated with this field. The 'SetF' entry in the FDF field dictionary. @param ff The new value for the "set widget field flags".
2200 This will set the field flags that are associated with this field. The 'ClrF' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
2201 This will set the font flags. @param flags The new font flags.
2202 Sets the glyph widths in the font dictionary.
2203 This will set the paint type. @param paintType The new paint type.
2204 This will set the pattern type. @param patternType The new pattern type.
2205 This will set the paint type. @param paintType The new paint type.
2206 This will set the tiling type. @param tilingType The new tiling type.
2207 This will set the shading type. @param shadingType the new shading type
2208 Set the number of bits per flag. @param bitsPerFlag the number of bits per flag
2209 Set the number of vertices per row. @param verticesPerRow the number of vertices per row
2210 Set the number of bits per component. @param bitsPerComponent the number of bits per component
2211 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
2212 This will set the line cap style for the graphics state. @param style The new line cap style to set.
2213 This will set the line join style. @param style The new line join style.
2214 This will set the overprint mode(OPM). @param overprintMode The overprint mode
2215 @param flags the flags
2216 @param flags the flags
2217 Set the page number (zero-based) in the current document containing the file attachment annotation. @param pageNumber the zero based page number. If this is &lt; 0 then the entry is removed.
2218 This will set the index (zero-based) of the annotation in the /Annots array of the page specified by the /P entry. @param index the zero based index. If this is &lt; 0 then the entry is removed.
2219 This will set the flags for this field. @param flags The new flags.
2220 This will set the key for this annotation in the structural parent tree. @param structParent The new key for this annotation.
2221 This will set the quadding/justification of the text. Please see the QUADDING_CONSTANTS in {@link PDVariableText }. @param q The new text justification.
2222 This will set the rotation. @param rotation the rotation as a multiple of 90
2223 Set the P value. @param p the value to be set as P
2224 Sets if a timestamp is reuqired or not. @param flag true if a timestamp is required
2225 Set the open count. This number is automatically managed for you when you add items to the outline. @param openCount The new open count.
2226 This will set the document-wide default value for the quadding/justification of variable text fields. See the QUADDING constants of {@link PDVariableText}. @param q The justification of the variable text fields.
2227 This will set the flags for this field. @param flags The new flags.
2228 This will set top index "TI" value. @param topIndex the value for the top index, null will remove the value.
2229 Sets the maximum number of characters of the text field. @param maxLen the maximum number of characters
2230 This will set the quadding/justification of the text. See QUADDING constants. @param q The new text justification.
2231 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
2232 The software module revision number, corresponding to the Date attribute. @param revision is the software module revision number
2233 The software module revision number, used to determinate the minimum version of software that is required in order to process this signature. <p> NOTE: this entry is deprecated for PDF v1.7 </p> @param revision is the software module revision number
2234 This is a convenience method that will convert the value to a COSFloat object. @param key The key to the object, @param value The int value for the name.
2235 Get the user unit. This is a positive number that shall give the size of default user space units, in multiples of 1/72 inch. This is supported by PDF 1.6 and higher. @param userUnit throws IllegalArgumentException if the parameter is not positive.
2236 Set the guideline width. @param width The width in default user space units.
2237 Set the annotation opacity. @param opacity The new opacity value.
2238 This will set the length of the leader line. @param leaderLength length of the leader line
2239 This will set the length of the leader line extensions. @param leaderExtend length of the leader line extensions
2240 This will set the length of the leader line offset. @param leaderOffset length of the leader line offset
2241 Set the weight of the font. @param fontWeight The new weight of the font.
2242 This will set the italic angle for the font. @param angle The new italic angle for the font.
2243 This will set the ascent for the font. @param ascent The new ascent for the font.
2244 This will set the descent for the font. @param descent The new descent for the font.
2245 This will set the leading for the font. @param leading The new leading for the font.
2246 This will set the cap height for the font. @param capHeight The new cap height for the font.
2247 This will set the x height for the font. @param xHeight The new x height for the font.
2248 This will set the stem V for the font. @param stemV The new stem v for the font.
2249 This will set the stem H for the font. @param stemH The new stem h for the font.
2250 This will set the average width for the font. @param averageWidth The new average width for the font.
2251 This will set the max width for the font. @param maxWidth The new max width for the font.
2252 This will set the missing width for the font. @param missingWidth The new missing width for the font.
2253 This will set the XStep value. @param xStep The new XStep value.
2254 This will set the YStep value. @param yStep The new YStep value.
2255 Gets the volume at which to play the sound, in the range −1.0 to 1.0. @param volume The volume at which to play the sound, in the range −1.0 to 1.0. @throws IllegalArgumentException if the volume parameter is outside of the range −1.0 to 1.0.
2256 This will set the length of the leader line. @param leaderLineLength length of the leader line
2257 This will set the length of the leader line extensions. @param leaderLineExtensionLength length of the leader line extensions
2258 This will set the length of the leader line offset. @param leaderLineOffsetLength length of the leader line offset
2259 This will set the constant opacity value used when rendering the annotation (excluing any popup). @param ca the constant opacity value.
2260 This will set the border width in points, 0 = no border. There is a bug in Adobe Reader DC, float values are ignored for text field widgets. As a workaround, floats that are integers (e.g. 2.0) are written as integer in the PDF. <p> In Adobe Acrobat DC, the values are shown as "0 = Invisible, 1 = Thin, 2 = Medium, 3 = Thick" for widget and link annotations. @param w float the width in points
2261 (Optional) The minimum required capability of the signature field seed value dictionary parser. A value of 1 specifies that the parser shall be able to recognize all seed value dictionary entries in a PDF 1.5 file. A value of 2 specifies that it shall be able to recognize all seed value dictionary entries specified. @param minimumRequiredCapability is the minimum required capability of the signature field seed value dictionary parser
2262 This will set the CYX factor. @param cyx CYX factor
2263 This will read a COSStream from the input stream using length attribute within dictionary. If length attribute is a indirect reference it is first resolved to get the stream length. This means we copy stream data without testing for 'endstream' or 'endobj' and thus it is no problem if these keywords occur within stream. We require 'endstream' to be found after stream data is read. @param dic dictionary that goes with this stream. @return parsed pdf stream. @throws IOException if an error occurred reading the stream, like problems with reading length attribute, stream does not end with 'endstream' after data read, stream too short etc.
2264 This will parse all the tokens in the stream. This will close the stream when it is finished parsing. @return All of the tokens in the stream. @throws IOException If there is an error while parsing the stream.
2265 Calculate the bounding box of this glyph. This will work only if the first operator in the stream is d1. @return the bounding box of this glyph, or null if the first operator is not d1. @throws IOException If an io error occurs while parsing the stream.
2266 Get the width from a type3 charproc stream. @return the glyph width. @throws IOException if the stream could not be read, or did not have d0 or d1 as first operator, or if their first argument was not a number.
2267 Creates an empty PDF document. You need to add at least one page for the document to be valid.
2268 A file specification can either be a COSString or a COSDictionary. This will create the file specification either way. @param base The cos object that describes the fs. @return The file specification for the COSBase object. @throws IOException If there is an error creating the file spec.
2269 Default constructor.
2270 Default constructor.
2271 Default constructor.
2272 Default constructor.
2273 Default constructor.
2274 Default constructor.
2275 Default constructor.
2276 Default constructor.
2277 Default constructor.
2278 Default constructor.
2279 Default constructor.
2280 Default constructor.
2281 Default constructor.
2282 Default constructor.
2283 Builds vertical metrics with a custom CIDToGIDMap (for embedding font subset).
2284 Build vertical metrics with Identity CIDToGIDMap (for embedding full font).
2285 Constructor for embedding.
2286 This will set the decode values. @param decodeValues the new decode values
2287 This will set the decode values. @param decodeValues the new decode values
2288 This will set the line width. @param width The line width for the object.
2289 This will set the miter limit for the graphics state. @param miterLimit The new miter limit value
2290 This will set the flatness tolerance. @param flatness The new flatness tolerance
2291 This will set the smoothness tolerance. @param smoothness The new smoothness tolerance
2292 This will set the stroking alpha constant. @param alpha The new stroking alpha constant.
2293 This will set the non stroking alpha constant. @param alpha The new non stroking alpha constant.
2294 Constructor.
2295 Constructor.
2296 Constructor.
2297 Constructor.
2298 This will set the difference between the annotations "outer" rectangle defined by /Rect and boundaries of the underlying. <p>This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
2299 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. <p>This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
2300 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. <p> This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
2301 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
2302 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
2303 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
2304 Constructor. @param array An array of numbers as specified in the PDF Reference for a rectangle type.
2305 Creates a new line dash pattern from a dash array and phase. @param array the dash array @param phase the phase
2306 {@inheritDoc}
2307 {@inheritDoc}
2308 Sets the range for this color space. @param range the new range for the a component @param n the component to set the range for
2309 Read a single patch from a data stream, a patch contains information of its coordinates and color parameters. @param input the image source data stream @param isFree whether this is a free patch @param implicitEdge implicit edge when a patch is not free, otherwise it's not used @param implicitCornerColor implicit colors when a patch is not free, otherwise it's not used @param maxSrcCoord the maximum coordinate value calculated from source data @param maxSrcColor the maximum color value calculated from source data @param rangeX range for coordinate x @param rangeY range for coordinate y @param colRange range for color @param matrix the pattern matrix concatenated with that of the parent content stream @param xform transformation for user to device space @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @return a single patch @throws IOException when something went wrong
2310 Read a vertex from the bit input stream performs interpolations. @param input bit input stream @param maxSrcCoord max value for source coordinate (2^bits-1) @param maxSrcColor max value for source color (2^bits-1) @param rangeX dest range for X @param rangeY dest range for Y @param colRangeTab dest range array for colors @param matrix the pattern matrix concatenated with that of the parent content stream @param xform the affine transformation @return a new vertex with the flag and the interpolated values @throws IOException if something went wrong
2311 Gets the colour for the before edge. @return the colour for the before edge
2312 Gets the colour for the after edge. @return the colour for the after edge
2313 Gets the colour for the start edge. @return the colour for the start edge
2314 Gets the colour for the end edge. @return the colour for the end edge
2315 Returns the blending mode stored in the COS dictionary @return the blending mode
2316 This will get the destination to jump to. @return The D entry of the specific go-to action dictionary. @throws IOException If there is an error creating the destination.
2317 This will get the destination to jump to. @return The D entry of the specific go-to action dictionary. @throws IOException If there is an error creating the destination.
2318 Get the destination to be displayed when the annotation is activated. Either this or the action entry should be set, but not both. @return The destination for this annotation. @throws IOException If there is an error creating the destination.
2319 Get the page destination of this node. @return The page destination of this node. @throws IOException If there is an error creating the destination.
2320 Convenience method to be used when creating a matrix from unverified data. If the parameter is a COSArray with at least six numbers, a Matrix object is created from the first six numbers and returned. If not, then the identity Matrix is returned. @param base a COS object, preferably a COSArray with six numbers. @return a Matrix object.
2321 Nice method, gives you every object you want Arrays works properly too. Try "P/Annots/[k]/Rect" where k means the index of the Annots array. @param objPath the relative path to the object. @return the object
2322 Returns the destination corresponding to the parameter. @param name The destination name. @return The destination for that name, or null if there isn't any. @throws IOException if something goes wrong when creating the destination object.
2323 Gets the attribute value for a given name. @param attrName the given attribute name @return the attribute value for a given name
2324 Gets the attribute value for a given name. @param attrName the given attribute name @param defaultValue the default value @return the attribute value for a given name
2325 Is the attribute with the given name specified in this attribute object? @param name the attribute name @return <code>true</code> if the attribute is specified, <code>false</code> otherwise
2326 Gets an array of strings. @param name the attribute name @return the array of strings
2327 Sets an array of strings. @param name the attribute name @param values the array of strings
2328 Gets a name value or array of name values. @param name the attribute name @param defaultValue the default value @return a String or array of Strings
2329 Sets an array of name values. @param name the attribute name @param values the array of name values
2330 Gets a number or a name value. @param name the attribute name @param defaultValue the default name @return a Float or a String
2331 Gets a number or an array of numbers. @param name the attribute name @param defaultValue the default value @return a Float or an array of floats
2332 Sets an array of float numbers. @param name the attribute name @param values the float numbers
2333 Gets a colour. @param name the attribute name @return the colour
2334 Gets a single colour or four colours. @param name the attribute name @return the single ({@link PDGamma}) or a ({@link PDFourColours})
2335 This is a convenience method that will get the dictionary object that is expected to be a COSDictionary. Null is returned if the entry does not exist in the dictionary. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @return The COSDictionary.
2336 This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert it to a primitive boolean. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The entry converted to a boolean.
2337 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
2338 Returns A list of filters applied to this stream. @return A (possibly empty) list of filters applied to this stream, never null.
2339 This will get the color space or null if none exists. @return the color space for the shading @throws IOException if there is an error getting the color space
2340 Tell if the dictionary is a PDF or FDF catalog. @param dictionary the dictionary to be tested @return true if the given dictionary is a root dictionary
2341 Constructor for reading. @param root A page tree root. @param document The document which contains "root".
2342 Returns true if the node is a page tree node (i.e. and intermediate).
2343 This will return the crypt filter method. Allowed values are: NONE, V2, AESV2, AESV3 @return the name of the crypt filter method.
2344 Returns the name of the filter which is used for de/encrypting streams. Default value is "Identity". @return the name of the filter
2345 Returns the name of the filter which is used for de/encrypting strings. Default value is "Identity". @return the name of the filter
2346 Returns the Unicode character sequence which corresponds to the given character code. @param code character code @return Unicode character(s)
2347 Creates a new XObject instance of the appropriate type for the COS stream. @param base The stream which is wrapped by this XObject. @param resources the resources of this XObject @return A new XObject instance. @throws java.io.IOException if there is an error creating the XObject.
2348 Returns the subtype of the soft mask (Alpha, Luminosity) - S entry @return the subtype of the soft mask
2349 Get the relationship between the current document and the target (which may be an intermediate target). @return the relationship as a name. Valid values are P (the target is the parent of the current document) and C (the target is a child of the current document). Invalid values or null are also returned.
2350 Returns the annotations appearance state, which selects the applicable appearance stream from an appearance subdictionary. @return the annotations appearance state
2351 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param embedded The embedded dictionary to set the item in. @param key The key to the object, @param value The string value for the name.
2352 This is a convenience method that will convert the value to a COSInteger object. @param embeddedDictionary The embedded dictionary. @param key The key to the object, @param value The int value for the name.
2353 This will tell if this is an encrypted document. @return true If this document is encrypted.
2354 This will get the encryption dictionary if the document is encrypted or null if the document is not encrypted. @return The encryption dictionary.
2355 The initial parse will first parse only the trailer, the xrefstart and all xref tables to have a pointer (offset) to all the pdf's objects. It can handle linearized pdfs, which will have an xref at the end pointing to an xref at the beginning of the file. Last the root object is parsed. @throws IOException If something went wrong.
2356 The initial parse will first parse only the trailer, the xrefstart and all xref tables to have a pointer (offset) to all the pdf's objects. It can handle linearized pdfs, which will have an xref at the end pointing to an xref at the beginning of the file. Last the root object is parsed. @throws InvalidPasswordException If the password is incorrect. @throws IOException If something went wrong.
2357 This will get the document info dictionary. If it doesn't exist, an empty document info dictionary is created in the document trailer. <p> In PDF 2.0 this is deprecated except for two entries, /CreationDate and /ModDate. For any other document level metadata, a metadata stream should be used instead, see {@link PDDocumentCatalog#getMetadata()}. @return The documents /Info dictionary, never null.
2358 This will get the document CATALOG. This is guaranteed to not return null. @return The documents /Root dictionary
2359 Get the documents AcroForm. This will return null if no AcroForm is part of the document. Dependent on setting <code>acroFormFixup</code> some fixing/changes will be done to the AcroForm. If you need to ensure that there are no fixes applied call <code>getAcroForm</code> with <code>null</code>. Using <code>getAcroForm(PDDocumentFixup acroFormFixup)</code> might change the original content and subsequent calls with <code>getAcroForm(null)</code> will return the changed content. @param acroFormFixup the fix up action or null @return The document's AcroForm.
2360 Get the viewer preferences associated with this document or null if they do not exist. @return The document's viewer preferences.
2361 @return The Additional Actions for this Document
2362 @return The names dictionary for this document or null if none exist.
2363 @return The named destinations dictionary for this document or null if none exists.
2364 Get info about doc's usage of tagged features. This will return null if there is no information. @return The new mark info.
2365 Returns the document-level URI. @return the document level URI if present, otherwise null
2366 Get the document's structure tree root, or null if none exists. @return the structure tree root if present, otherwise null
2367 Get the optional content properties dictionary associated with this document. @return the optional properties dictionary or null if it is not present
2368 Constructor. @param cat The document catalog that this dictionary is part of.
2369 Get the destination named tree node. The values in this name tree will be PDPageDestination objects. @return The destination name tree node.
2370 Get the embedded files named tree node. The values in this name tree will be PDComplexFileSpecification objects. @return The embedded files name tree node.
2371 Get the document level JavaScript name tree. When the document is opened, all the JavaScript actions in it shall be executed, defining JavaScript functions for use by other scripts in the document. @return The document level JavaScript name tree.
2372 Get the page actions. @return The Actions for this Page
2373 @return The page transition associated with this page or null if no transition is defined
2374 Returns the resource with the given name and kind as an indirect object, or null.
2375 Returns the resource with the given name and kind, or null.
2376 Returns the resource names of the given kind.
2377 Returns a unique key for a new resource.
2378 Sets the value of a given named resource.
2379 Gets the page. @return the page
2380 Get the page on which the object shall be rendered. @return the referenced page or null.
2381 Returns the page on which some or all of the content items designated by the K entry shall be rendered (Pg). @return the page on which some or all of the content items designated by the K entry shall be rendered
2382 Returns the ID tree. @return the ID tree
2383 Returns the parent tree.<p> The keys correspond to a single page of the document or to an individual object, e.g. an annotation or an XObject, which have a <b>/StructParent</b> or <b>/StructParents</b> entry.<p> The values of type {@link PDParentTreeValue} are either a dictionary or an array. It's a dictionary for individual objects like an annotation or an XObject, and an array for a page object or a content stream containing marked-content sequences identified by an MCID. @return the parent tree.
2384 Sets the ClassMap. @return the ClassMap, never null. The elements are either {@link PDAttributeObject} or lists of it.
2385 Returns the crypt filter with the given name. @param cryptFilterName the name of the crypt filter @return the crypt filter with the given name if available
2386 Sets the crypt filter with the given name. @param cryptFilterName the name of the crypt filter @param cryptFilterDictionary the crypt filter to set
2387 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the annotation. @return the border style dictionary.
2388 This will retrieve the border style dictionary, describing the effect applied to the border described by the BS entry. @return the border effect dictionary.
2389 This will get the signature or null if there is none. @return The signature.
2390 This will get the java script entry. @return The java script entry describing javascript commands.
2391 This will get the appearance dictionary that specifies the appearance of a pushbutton field. @return The AP entry of this dictionary.
2392 This will get named page references. @return The named page references or <code>null</code>.
2393 This will get the icon fit that is associated with this field. @return The 'IF' entry.
2394 This will get a list of additional actions that will get executed based on events. @return The 'AA' entry in this FDF field dictionary or null.
2395 This will get the FDF page info object. @return The Page info.
2396 This is the template reference. @return The template reference.
2397 Returns the CIDSystemInfo, or null if it is missing (which isn't allowed but could happen). @return the CIDSystemInfo, or null
2398 Returns the Panose entry of the Style dictionary, if any. @return A Panose wrapper object.
2399 Returns the optional resources of the type3 stream. @return the resources bound to be used when parsing the type3 stream
2400 Returns the dictionary containing all streams to be used to render the glyphs. @return the dictionary containing all glyph streams.
2401 Returns a map of colorants and their associated Separation color space. @param resources resources, can be null. @return map of colorants to color spaces, never null. @throws IOException If there is an error reading a color space
2402 Returns the DeviceN Process Dictionary, or null if it is missing. @return the DeviceN Process Dictionary, or null if it is missing.
2403 @param destination to be rendered @return state or null if undefined
2404 This will get the external graphics state for this pattern. @return The extended graphics state for this pattern.
2405 This will get the resources for this pattern. This will return null if no resources are available at this level. @return The resources for this pattern.
2406 Get the target directory. @return the target directory or null if there is none.
2407 This will get a dictionary containing Windows-specific launch parameters. @return The Win entry of of the specific launch action dictionary.
2408 Get the target directory. If this entry is absent, the current document is the target file containing the destination. @return the target directory or null if the current document is the target file containing the destination.
2409 This will get the appearance dictionary associated with this annotation. This may return null. @return This annotations appearance.
2410 This will retrieve the corresponding page of this annotation. See also <a href="https://stackoverflow.com/a/36894982/535646">this answer</a> about what to do if the page isn't available. @return The corresponding page or null if not available.
2411 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
2412 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
2413 This will set the previous URI action, in case it's needed. @return The previous URI.
2414 This will return the external data dictionary. @return the external data dictionary
2415 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
2416 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
2417 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
2418 Returns the appearance characteristics dictionary. @return the appearance characteristics dictionary
2419 Get the additional actions for this field. This will return null if there are no additional actions for this field. As of PDF 1.6 this is only used for Widget Annotations. @return The actions of the field.
2420 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
2421 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
2422 A build data dictionary for the signature handler that was used to create the parent signature. @return the Filter as PDPropBuildFilter object
2423 A build data dictionary for the PubSec software module that was used to create the parent signature. @return the PubSec as PDPropBuildPubSec object
2424 A build data dictionary for the viewing application software module that was used to create the parent signature. @return the App as PDPropBuildApp object
2425 <p>(Optional; PDF 1.6) A dictionary containing a single entry whose key is P and whose value is an integer between 0 and 3. A value of 0 defines the signatures as an author signature. The value 1 through 3 shall be used for certification signatures and correspond to the value of P in a DocMDP transform parameters dictionary.</p> <p>If this MDP key is not present or the MDP dictionary does not contain a P entry, no rules shall be defined regarding the type of signature or its permissions.</p> @return the mdp dictionary as PDSeedValueMDP
2426 (Optional) A certificate seed value dictionary containing information about the certificate to be used when signing. @return dictionary
2427 <p>(Optional; PDF 1.6) A time stamp dictionary containing two entries. URL which is a ASCII string specifying the URL to a rfc3161 conform timestamp server and Ff to indicate if a timestamp is required or optional.</p> @return the timestamp dictionary as PDSeedValueTimeStamp
2428 PDF signature build dictionary. Provides information about the signature handler. @return the pdf signature build dictionary.
2429 Get the structure element of this node. @return The structure element of this node.
2430 @return true if the node has at least one child
2431 This will get the default resources for the AcroForm. @return The default resources or null if there is none.
2432 Get the additional actions for this field. This will return null if there are no additional actions for this field. @return The actions of the field.
2433 Returns the signature contained in this field. @return A signature dictionary.
2434 Returns the default value, if any. @return A signature dictionary.
2435 <p>(Optional; PDF 1.5) A seed value dictionary containing information that constrains the properties of a signature that is applied to the field.</p> @return the seed value dictionary as PDSeedValue
2436 This will retrieve the measure dictionary. @return the measure dictionary
2437 Get info about the thread, or null if there is nothing. @return The thread information.
2438 Get the first bead in the thread, or null if it has not been set yet. This is a required field for this object. @return The first bead in the thread.
2439 This will get the thread that this bead is part of. This is only required for the first bead in a thread, so other beads 'may' return null. @return The thread that this bead is part of.
2440 This will get the next bead. If this bead is the last bead in the list then this will return the first bead. @return The next bead in the list or the first bead if this is the last bead.
2441 This will get the previous bead. If this bead is the first bead in the list then this will return the last bead. @return The previous bead in the list or the last bead if this is the first bead.
2442 Get the page that this bead is part of. @return The page that this bead is part of.
2443 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object.
2444 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object.
2445 This will get the incremental updates since the PDF was last opened. @return The differences entry of the FDF dictionary.
2446 A stream containing a Type 1 font program. @return A stream containing a Type 1 font program.
2447 A stream containing a true type font program. @return A stream containing a true type font program.
2448 A stream containing a font program that is not true type or type 1. @return A stream containing a font program.
2449 Get the CIDSet stream. @return A stream containing a CIDSet.
2450 Gets the sound object. @return The sound object defining the sound that shall be played.
2451 This will retrieve the normal icon. @return the normal icon.
2452 This will retrieve the rollover icon. @return the rollover icon
2453 This will retrieve the alternate icon. @return the alternate icon.
2454 Returns the entry as an appearance subdictionary. @return the entry as an appearance subdictionary @throws IllegalStateException if this entry is not an appearance subdictionary
2455 This will get the document ID. @return The document id.
2456 This will write the trailer to the PDF document. @param doc The document to create the trailer for. @throws IOException If there is an IOError while writing the document.
2457 Returns the document's article threads. @return a list of all threads of the document
2458 Get the list of OutputIntents defined in the document. @return The list of PDOutputIntent, never null.
2459 Add an OutputIntent to the list. If there is not OutputIntent, the list is created and the first element added. @param outputIntent the OutputIntent to add.
2460 This will get a list of PDThreadBead objects, which are article threads in the document. This will return an empty list if there are no thread beads. @return A list of article threads on this page, never null. The returned list is backed by the beads COSArray, so any adding or deleting in this list will change the document too.
2461 Get the viewports. @return a list of viewports or null if there is no /VP entry.
2462 Helper to get kids from malformed PDFs. @param node page tree node @return list of kids
2463 Return the children of this node. This list will contain PDNameTreeNode objects. @return The list of children or null if there are no children.
2464 This will return a map of names on this level. The key will be a string, and the value will depend on where this class is being used. @return ordered map of COS objects or <code>null</code> if the dictionary contains no 'Names' entry on this level. @throws IOException If there is an error while creating the sub types. @see #getKids()
2465 Get the highest value for a key in the name map. @return The highest value for a key in the map.
2466 Set the highest value for the key in the map. @param upper The new highest value for a key in the map.
2467 Get the lowest value for a key in the name map. @return The lowest value for a key in the map.
2468 Set the lowest value for the key in the map. @param lower The new lowest value for a key in the map.
2469 Return the children of this node. This list will contain PDNumberTreeNode objects. @return The list of children or null if there are no children.
2470 This will return a map of numbers on this level. The key will be a java.lang.Integer, the value will depend on where this class is being used. @return A map of COS objects. @throws IOException If there is a problem creating the values.
2471 Get the highest value for a key in the number map. @return The highest value for a key in the map or null if missing.
2472 Set the highest value for the key in the map. @param upper The new highest value for a key in the map.
2473 Get the lowest value for a key in the number map. @return The lowest value for a key in the map or null if missing.
2474 Set the lowest value for the key in the map. @param lower The new lowest value for a key in the map.
2475 Returns all ranges for the output values as COSArray . Required for type 0 and type 4 functions @return the ranges array.
2476 Returns all domains for the input values as COSArray. Required for all function types. @return the domains array.
2477 The "Size" entry, which is the number of samples in each input dimension of the sample table. @return A List of java.lang.Integer objects.
2478 Returns all decode values as COSArray. @return the decode array.
2479 Returns all functions values as COSArray. @return the functions array.
2480 Returns all bounds values as COSArray. @return the bounds array.
2481 Returns all encode values as COSArray. @return the encode array.
2482 Returns the user properties. @return the user properties
2483 Adds a user property. @param userProperty the user property
2484 Removes a user property. @param userProperty the user property
2485 Get the RGB color to be used for the guidelines. This is guaranteed to not return null. The default color is [0,0,0]. @return The guideline color.
2486 Is the artifact attached to the given edge? @param edge the edge @return <code>true</code> if the artifact is attached to the given edge, <code>false</code> otherwise
2487 Get the annotation color. @return The annotation color, or null if there is none.
2488 This will retrieve the interior color of the drawn area. @return object representing the color.
2489 This will get the coordinates of the callout line. @return An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, Four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
2490 Get the paths making up the freehand "scribble". @see #setInkList(List) @return the List of arrays representing the paths.
2491 This will retrieve the start and end coordinates of the line (or leader line if LL entry is set). @return array of floats [x1, y1, x2, y2] line start and end points in default user space.
2492 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
2493 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point.
2494 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
2495 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point.
2496 This will retrieve the interior color of the line endings defined in the LE entry. @return object representing the color.
2497 This will set the horizontal offset of the caption. @param offset the horizontal offset of the caption
2498 This will retrieve the horizontal offset of the caption. @return the horizontal offset of the caption
2499 This will set the vertical offset of the caption. @param offset vertical offset of the caption
2500 This will retrieve the vertical offset of the caption. @return the vertical offset of the caption
2501 This will get the coordinates of the vertices. @return array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
2502 This will get interior color of the drawn area. @return object representing the color.
2503 This will get the coordinates of the the vertices. @return array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
2504 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
2505 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point.
2506 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
2507 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point.
2508 This will retrieve the interior color of the line endings defined in the LE entry. @return object representing the color.
2509 This will retrieve the interior color of the drawn area. @return object representing the color.
2510 Get the coordinates of individual words or group of words. @see #setCoords(float[]) @return the array of 8 􏰍 n numbers specifying the coordinates of n quadrilaterals.
2511 This is the FDF id. @return The FDF ID.
2512 This will get the list of FDF Fields. This will return a list of FDFField objects. @return A list of FDF fields.
2513 This will get the list of FDF Pages. This will return a list of FDFPage objects. @return A list of FDF pages.
2514 This will get the list of kids. This will return a list of FDFField objects. This will return null if the underlying list is null. @return The list of kids.
2515 This will return a list of options for a choice field. The values in the list will be 1 of 2 types:<ul> <li><code>String</code> </li> <li>{@link FDFOptionElement}</li> </ul> @return A list of all options.
2516 This will get a list of FDFTemplage objects that describe the named pages that serve as templates. @return A list of templates.
2517 This will get a list of fields that are part of this template. @return A list of fields.
2518 The widths of the characters. This will be null for the standard 14 fonts. @return The widths of the characters.
2519 This will return the whitepoint tristimulus. As this is a required field this will never return null. A default of 1,1,1 will be returned if the pdf does not have any values yet. @return the whitepoint tristimulus
2520 This will return the BlackPoint tristimulus. This is an optional field but has defaults so this will never return null. A default of 0,0,0 will be returned if the pdf does not have any values yet. @return the blackpoint tristimulus
2521 Returns the gamma value. If none is present then the default of 1,1,1 will be returned. @return the gamma value
2522 Returns the linear interpretation matrix, which is an array of nine numbers. If the underlying dictionary contains null then the identity matrix will be returned. @return the linear interpretation matrix
2523 Returns the names of the color components. @return the names of the color components
2524 This will get the valid range for the "a" component. If none is found then the default will be returned, which is -100..100. @return the "a" range.
2525 This will get the valid range for the "b" component. If none is found then the default will be returned, which is -100..100. @return the "b" range.
2526 This will return the background. @return the background
2527 This will get the optional Domain values of a function based shading. @return the domain values
2528 This will get the optional Extend values for this shading. @return the extend values
2529 This will get the optional Domain values for this shading. @return the domain values
2530 This will get the Coords values for this shading. @return the coordinate values
2531 Returns all decode values as COSArray. @return the decode array
2532 This will get the font setting of the graphics state. @return The font setting.
2533 An array identifying which fields to include in the submission or which to exclude, depending on the setting of the Include/Exclude flag in the Flags entry @return the array of fields
2534 An array identifying which fields to include in the submission or which to exclude, depending on the setting of the Include/Exclude flag in the Flags entry @return the array of fields
2535 This will retrieve the border array. If none is available then it will create and return a default array, which is [0 0 1]. The array consists of at least three numbers defining the horizontal corner radius, vertical corner radius, and border width. The array may have a fourth element, an optional dash array defining a pattern of dashes and gaps that shall be used in drawing the border. If the array has less than three elements, the original array will be copied and missing elements with value 0 will be added. @return the border array, never null.
2536 This will get the margin between the annotations "outer" rectangle defined by /Rect and the boundaries of the underlying caret. @return the differences. If the entry hasn't been set am empty array is returned.
2537 This will get the margin between the annotations "outer" rectangle defined by /Rect and the border. @return the differences. If the entry hasn't been set am empty array is returned.
2538 This will get the coordinates of the callout line. (PDF 1.6 and higher) Only relevant if the intent is FreeTextCallout. @return An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
2539 Get one or more disjoint paths that make this annotation. @return An array of arrays, each representing a stroked path. Each array shall be a series of alternating horizontal and vertical coordinates.
2540 This will retrieve the start and end coordinates of the line (or leader line if LL entry is set). @return array of floats [x1, y1, x2, y2] line start and end points in default user space.
2541 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
2542 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point, LE_NONE if missing, never null.
2543 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
2544 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point, LE_NONE if missing, never null.
2545 This will set the horizontal offset of the caption. @param offset the horizontal offset of the caption
2546 This will retrieve the horizontal offset of the caption. @return the horizontal offset of the caption
2547 This will set the vertical offset of the caption. @param offset vertical offset of the caption
2548 This will retrieve the vertical offset of the caption. @return the vertical offset of the caption
2549 This will retrieve the set of quadpoints which encompass the areas of this annotation which will activate. @return An array of floats representing the quad points.
2550 This will retrieve the numbers that shall represent the alternating horizontal and vertical coordinates. @return An array of floats representing the alternating horizontal and vertical coordinates.
2551 PDF 2.0: This will retrieve the arrays that shall represent the alternating horizontal and vertical coordinates for path building. @return An array of float arrays, each supplying the operands for a path building operator (m, l or c). The first array should have 2 elements, the others should have 2 or 6 elements.
2552 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
2553 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point, LE_NONE if missing, never null.
2554 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
2555 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point, LE_NONE if missing, never null.
2556 This will retrieve the numbers that shall represent the alternating horizontal and vertical coordinates. @return An array of floats representing the alternating horizontal and vertical coordinates.
2557 This will get the differences between the annotations "outer" rectangle defined by /Rect and the border. @return the differences. If the entry hasn't been set am empty array is returned.
2558 This will retrieve the set of quadpoints which encompass the areas of this annotation. @return An array of floats representing the quad points.
2559 Indicates the operating system. The string format isn't specified yet. Value will be stored as first item of the array, as specified in PDF Signature Build Dictionary Specification for PDF v1.7. @param os is a string with the system id or name.
2560 If <b>SubFilter</b> is not null and the {@link #isSubFilterRequired()} indicates this entry is a required constraint, then the first matching encodings shall be used when signing; otherwise, signing shall not take place. If {@link #isSubFilterRequired()} indicates that this is an optional constraint, then the first matching encoding shall be used if it is available. If it is not available, a different encoding may be used instead. @return the subfilter that shall be used by the signature handler
2561 An array of names indicating acceptable digest algorithms to use when signing. The value shall be one of <b>SHA1</b>, <b>SHA256</b>, <b>SHA384</b>, <b>SHA512</b>, <b>RIPEMD160</b>. The default value is implementation-specific. @return the digest method that shall be used by the signature handler
2562 If the Reasons array is provided and {@link #isReasonRequired()} indicates that Reasons is a required constraint, one of the reasons in the array shall be used for the signature dictionary; otherwise signing shall not take place. If the {@link #isReasonRequired()} indicates Reasons is an optional constraint, one of the reasons in the array may be chose or a custom reason can be provided. @return the reasons that should be used by the signature handler
2563 (Optional, PDF 1.6) An array of text strings that specifying possible legal attestations. @return the reasons that should be used by the signature handler
2564 Returns list of byte arrays that contains DER-encoded X.509v3 certificates @return list of byte arrays containing DER-encoded X.509v3 certificates
2565 (Optional) byte array containing DER-encoded X.509v3 certificate that is acceptable for signing. works like {@link #setSubject(List)} but one byte array @param subject byte array containing DER-encoded X.509v3 certificate
2566 removes a subject from the list @param subject byte array containing DER-encoded X.509v3 certificate
2567 Returns list of key usages of certificate strings where each string is 9 characters long and each character is one of these values {0, 1, X} 0 for must not set, 1 for must set, X for don't care. each index in the string represents a key usage: <ol> <li>digitalSignature</li> <li>non-Repudiation</li> <li>keyEncipherment</li> <li>dataEncipherment</li> <li>keyAgreement</li> <li>keyCertSign</li> <li>cRLSign</li> <li>encipherOnly</li> <li>decipherOnly</li> </ol> @return list of key usages of certificate strings
2568 (Optional; PDF 1.7) specifies an acceptable key-usage extension that must be presennt in the signing certificate for works like {@link #setKeyUsage(List)} but takes only one string @param keyUsageExtension String that consist only of {0, 1, X}
2569 Removes a key usage extension @param keyUsageExtension ASCII string that consists of {0, 1, X}
2570 Returns list of array of bytes of DER-encoded X.509v3 certificates @return list of array of bytes of DER-encoded X.509v3 certificates
2571 array of bytes containing DER-encoded X.509v3 certificates of acceptable issuers. If the signer’s certificate chains up to any of the specified issuers (either directly or indirectly), the certificate is considered acceptable for signing. @param issuer A byte array containing DER-encoded X.509v3 certificate
2572 Removes an issuer from the issuers list @param issuer A byte array containing DER-encoded X.509v3 certificate
2573 Returns A list of array of bytes that contain Object Identifiers (OIDs) of the certificate policies that must be present in the signing certificate @return list of array of bytes that contain Object Identifiers of the certificate policies
2574 works like {@link #setOID(List)} but for one object @param oid Object Identifier of a certificate policy to be added
2575 removes an OID from the list @param oid Object Identifier of the certificate policy to be removed
2576 Read out the byterange from the file. @return an integer array with the byterange, or an empty array if there is none.
2577 Get the RGB text color of this node. Default is black and this method will never return null. @return The structure element of this node.
2578 Return the calculation order in which field values should be recalculated when the value of any field changes. (Read about "Trigger Events" in the PDF specification) @return field list. Note these objects may not be identical to PDField objects retrieved from other methods (depending on cache setting). The best strategy is to call {@link #getCOSObject()} to check for identity. The list is not backed by the /CO COSArray in the document.
2579 This will get the indices of the selected options - the 'I' key. <p> This is only needed if a choice field allows multiple selections and two different items have the same export value or more than one values is selected. </p> <p>The indices are zero-based</p> @return List containing the indices of all selected options.
2580 This will return the changes along the x-axis. @return changes along the x-axis
2581 This will return the changes along the y-axis. @return changes along the y-axis
2582 This will return the distances. @return distances
2583 This will return the areas. @return areas
2584 This will return the angles. @return angles
2585 This will return the sloaps of a line. @return the sloaps of a line
2586 This will return the origin of the coordinate system. @return the origin
2587 Get the visibility policy name. Valid names are AllOff, AllOn, AnyOff, AnyOn (default). @return the visibility policy, never null.
2588 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
2589 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The name converted to a string.
2590 Check if the cross reference stream can be found at the current offset. @param startXRefOffset the expected start offset of the XRef stream @return the revised offset @throws IOException if something went wrong
2591 Returns the page display mode. @return the PageMode of the document, if not present PageMode.USE_NONE is returned
2592 Returns the page layout. @return the PageLayout of the document, if not present PageLayout.SINGLE_PAGE is returned
2593 Returns the PDF specification version this document conforms to. @return the PDF version (e.g. "1.4")
2594 This will get the trapped value for the document. This will return null if one is not found. @return The trapped value for the document.
2595 Returns the numbering style for this page range. @return one of the STYLE_* constants
2596 Gets the type. @return the type
2597 Creates an attribute object. @param dictionary the dictionary @return the attribute object
2598 Returns the owner of the attributes. @return the owner of the attributes
2599 Returns the structure type (S). @return the structure type
2600 Creates a node in the structure tree. Can be either a structure tree root, or a structure element. @param node the node dictionary @return the structure node
2601 Returns the type. @return the type
2602 Returns the property name. @return the property name
2603 Gets the language (Lang). @return the language
2604 Gets the type (Type). @return the type
2605 Gets the subtype (Subtype). @return the subtype
2606 Get the name of the filter. @return The filter name contained in this encryption dictionary.
2607 Get the name of the subfilter. @return The subfilter name contained in this encryption dictionary.
2608 Create the correct FDFAnnotation. @param fdfDic The FDF dictionary. @return A newly created FDFAnnotation
2609 Get the intent of the annotation. @return The intent of the annotation.
2610 This will retrieve the line ending style. @return The ending style for the start point.
2611 This will get the version that was specified in the catalog dictionary. @return The FDF version.
2612 The encoding to be used for a FDF field. The default is PDFDocEncoding and this method will never return null. @return The encoding value.
2613 This will get the scale option. See the SCALE_OPTION_XXX constants. This is guaranteed to never return null. Default: Always @return The scale option.
2614 This will get the scale type. See the SCALE_TYPE_XXX constants. This is guaranteed to never return null. Default: Proportional @return The scale type.
2615 The PostScript name of the font. @return The postscript name of the font.
2616 This will always return "Font" for fonts. @return The type of object that this is.
2617 This will get the subtype of font. @return the subtype
2618 Get the font name. @return The name of the font.
2619 A string representing the preferred font stretch. According to the PDF Spec: The font stretch value; it must be one of the following (ordered from narrowest to widest): UltraCondensed, ExtraCondensed, Condensed, SemiCondensed, Normal, SemiExpanded, Expanded, ExtraExpanded or UltraExpanded. @return The stretch of the font.
2620 Returns the PostScript name of the font. @return the PostScript name of the font
2621 Returns the PostScript name of the font. @return the PostScript name of the font
2622 Returns the PostScript name of the font. @return the PostScript name of the font
2623 Returns the PostScript name of the font. @return the PostScript name of the font
2624 Returns true if this is an NChannel (PDF 1.6) color space. @return true if this is an NChannel color space.
2625 This will get the type of PDF object that the actions dictionary describes. If present must be Action for an action dictionary. @return The Type of PDF object.
2626 This will get the type of action that the actions dictionary describes. @return The S entry of actions dictionary.
2627 This will create the correct type of action based on the type specified in the dictionary. @param action An action dictionary. @return An action of the correct type.
2628 This will retrieve the subtype of the annotation. @return The subtype of this annotation, see the SUB_TYPE_XXX constants.
2629 This will retrieve the caption positioning. @return the caption positioning
2630 This will retrieve the intent of the annotation The values and meanings are specific to the actual annotation See the IT_* constants for the annotation classes. @return the intent
2631 returns the subtype of the external data dictionary. @return the subtype of the external data dictionary
2632 The name of the software module that was used to create the signature. @return the name of the software module
2633 If <b>Filter</b> is not null and the {@link #isFilterRequired()} indicates this entry is a required constraint, then the signature handler specified by this entry shall be used when signing; otherwise, signing shall not take place. If {@link #isFilterRequired()} indicates that this is an optional constraint, this handler may be used if it is available. If it is not available, a different handler may be used instead. @return the filter that shall be used by the signature handler
2634 A name indicating the usage of the URL entry. There are standard uses and there can be implementation-specific use for this URL. The following value specifies a valid standard usage: <ul> <li>Browser, The URL references content that should be displayed in a web browser to allow enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL bit is ignored for this usage.</li> <li>ASSP, The URL references a signature web service that can be used for server-based signing. If the Ff attribute’s URL bit indicates that this is a required constraint, this implies that the credential used when signing must come from this server.</li> </ul> @return string of URL type
2635 Returns the filter. @return the filter
2636 Returns the subfilter. @return the subfilter
2637 {@inheritDoc} <p><b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance.
2638 This will retrieve the name of the viewport. @return the name of the viewport
2639 Get the Duplex preference. See DUPLEX enumeration. @return the Duplex preference.
2640 This is a convenience method that will get the dictionary object that is expected to be a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
2641 This is a convenience method that will get the dictionary object that is expected to be a string. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
2642 Returns the language for the document, or null. @return the language of the document if present, otherwise null
2643 This will get the title of the document. This will return null if no title exists. @return The title of the document.
2644 This will get the author of the document. This will return null if no author exists. @return The author of the document.
2645 This will get the subject of the document. This will return null if no subject exists. @return The subject of the document.
2646 This will get the keywords of the document. This will return null if no keywords exists. @return The keywords of the document.
2647 This will get the creator of the document. This will return null if no creator exists. @return The creator of the document.
2648 This will get the producer of the document. This will return null if no producer exists. @return The producer of the document.
2649 Returns the page label prefix for this page range. @return the page label prefix for this page range, or {@code null} if no prefix has been defined.
2650 This will get the unicode file name. @return The file name.
2651 This will get the file name. @return The file name.
2652 This will get the name representing a Dos file. @return The file name.
2653 This will get the name representing a Mac file. @return The file name.
2654 This will get the name representing a Unix file. @return The file name.
2655 This will get the description. @return The file description.
2656 Returns the element identifier (ID). @return the element identifier
2657 Returns the title (T). @return the title
2658 Returns the language (Lang). @return the language
2659 Returns the alternate description (Alt). @return the alternate description
2660 Returns the expanded form (E). @return the expanded form
2661 Returns the actual text (ActualText). @return the actual text
2662 Returns the string for the property value. @return the string for the property value
2663 Gets the actual text (ActualText). @return the actual text
2664 Gets the alternate description (Alt). @return the alternate description
2665 Gets the expanded form (E). @return the expanded form
2666 Modification date. @return The date as a string.
2667 Get the annotation name. @return The unique name of the annotation.
2668 Get the text, or a description, of the annotation. @return The text, or a description, of the annotation.
2669 Get the annotation title. @return The title of the annotation.
2670 Get the description of the annotation. @return The subject of the annotation.
2671 This will retrieve the symbol that shall be associated with the caret. @return the symbol
2672 This will get the clockwise rotation in degrees. @return The number of degrees of clockwise rotation.
2673 Get the default appearance string. @return The default appearance of the annotation.
2674 Get the default style string. @return The default style of the annotation.
2675 This will retrieve the caption positioning. @return the caption positioning
2676 This will retrieve the annotation state. @return the annotation state
2677 This will retrieve the annotation state model. @return the annotation state model
2678 This will get the status string to be displayed as the result of an action. @return The status.
2679 This will get the target frame in the browser to open this document. @return The target frame.
2680 This will get the "T" entry in the field dictionary. A partial field name. Where the fully qualified field name is a concatenation of the parent's fully qualified field name and "." as a separator. For example<br> Address.State<br> Address.City<br> @return The partial field name.
2681 This will get the name of the referenced page. A required parameter. @return The name of the referenced page.
2682 A string representing the preferred font family. @return The font family.
2683 This will get the character set for the font. @return The character set value.
2684 Returns the name of the optional content group. @return the name
2685 Lists all optional content group names. @return an array of all names
2686 This will get the file name to be launched or the document to be opened or printed, in standard Windows pathname format. If the name string includes a backslash character (\), the backslash must itself be preceded by a backslash. This value must be a single string; it is not a file specification. @return The F entry of the specific Windows launch parameter dictionary.
2687 This will get the string specifying the default directory in standard DOS syntax. @return The D entry of the specific Windows launch parameter dictionary.
2688 This will get the string specifying the operation to perform: open to open a document print to print a document If the F entry designates an application instead of a document, this entry is ignored and the application is launched. Default value: open. @return The O entry of the specific Windows launch parameter dictionary.
2689 This will get a parameter string to be passed to the application designated by the F entry. This entry should be omitted if F designates a document. @return The P entry of the specific Windows launch parameter dictionary.
2690 This will get the uniform resource identifier to resolve. It should be encoded in 7-bit ASCII, but UTF-8 and UTF-16 are supported too. @return The URI entry of the specific URI action dictionary or null if there isn't any.
2691 Get the name of the file as found in the EmbeddedFiles name tree. This is only to be used if the target is a child of the current document. @return a filename or null if there is none.
2692 If the value in the /A entry is a string, this will get the value of the /NM entry in the annotation dictionary. @return the /NM value of an annotation dictionary or null if the /A entry value is missing or not a string.
2693 The file to launch. @return The executable/document to launch.
2694 The dir to launch from. @return The dir of the executable/document to launch.
2695 A parameter to pass the executable. @return The parameter to pass the executable.
2696 Get the "contents" of the field. @return the value of the contents.
2697 This will retrieve the date and time the annotation was modified. @return the modified date/time (often in date format, but can be an arbitrary string).
2698 This will get the name, a string intended to uniquely identify each annotation within a page. Not to be confused with some annotations Name entry which impact the default image drawn for them. @return The identifying name for the Annotation.
2699 Get the default appearance. @return a string describing the default appearance.
2700 Get the default style string. The default style string defines the default style for rich text fields. @return the DS element of the dictionary object
2701 Retrieve the string used as the title of the popup window shown when open and active (by convention this identifies who added the annotation). @return The title of the popup.
2702 This will retrieve the short description of the subject of the annotation. @return the subject.
2703 This will retrieve the annotation state. @return the annotation state
2704 This will retrieve the annotation state model. @return the annotation state model
2705 This will retrieve the normal caption. @return the normal caption.
2706 This will retrieve the rollover caption. @return the rollover caption.
2707 This will retrieve the alternate caption. @return the alternate caption.
2708 The build date of the software module. This string is normally produced by the compiler that is used to compile the software, for example using the Date and Time preprocessor flags. As such, this not likely to be in PDF Date format. @return the build date of the software module
2709 Indicates the operating system. The string format isn't specified yet. In its PDF Signature Build Dictionary Specifications Adobe differently specifies the value type to store operating system string:<ul> <li>Specification for PDF v1.5 specifies type as string;</li> <li>Specification for PDF v1.7 specifies type as array and provided example for <code>/PropBuild</code> dictionary indicate it as array of names.</li> </ul> This method supports both types to retrieve the value. @return the operating system id or name.
2710 Returns list of maps that contains subject distinguished names like [(cn: John Doe, o: Doe), (cn: John Smith)] both keys are typically of the form 'cn', 'o', 'email', '2.5.4.43'; and values are text strings. @return list maps that contains subject distinguished names
2711 returns String of the URL @return string of the URL
2712 Returns the URL. @return the URL
2713 Returns the name of the person or authority signing the document. According to the PDF specification, this value should be used only when it is not possible to extract the name from the signature. @return the name
2714 Returns the CPU host name or physical location of the signing. @return the location
2715 Returns the reason for the signing, such as (I agree...). @return the reason
2716 Returns the contact info provided by the signer to enable a recipient to contact the signer to verify the signature, e.g. a phone number. @return the contact info
2717 Get the title of this node. @return The title of this node.
2718 Returns the partial name of the field. @return the name of the field
2719 Gets the alternate name of the field ("shall be used in place of the actual field name wherever the field shall be identified in the user interface (such as in error or status messages referring to the field)"). @return the alternate name of the field
2720 Gets the mapping name of the field. The mapping name shall be used when exporting interactive form field data from the document. @return the mapping name of the field
2721 Get the default style string. The default style string defines the default style for rich text fields. @return the DS element of the dictionary object
2722 This will return the scale ration. @return the scale ratio.
2723 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary or if the date was invalid. @param key The key to the item in the dictionary. @return The name converted to a date.
2724 This is a convenience method that will get the dictionary object that is expected to be a date. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a date.
2725 This will get the creation date of the document. This will return null if no creation date exists. @return The creation date of the document.
2726 This will get the modification date of the document. This will return null if no modification date exists. @return The modification date of the document.
2727 The annotation create date. @return The date of the creation of the annotation date @throws IOException If there is an error converting the string to a Calendar object.
2728 This will retrieve the date and time the annotation was created. @return the creation date/time.
2729 Returns the sign date. @return the sign date
2730 This is a convenience method that will get the dictionary object that is expected to be an long. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The long value.
2731 This is a convenience method that will get the dictionary object that is expected to be an long. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The long value.
2732 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
2733 Decodes data, with optional DecodeOptions. Not all filters support all options, and so callers should check the options' <code>honored</code> flag to test if they were applied. @param encoded the input stream holding the encoded data @param filterList list of filters to be used for decoding @param parameters the parameters used for decoding @param options additional options for decoding @param results list of optional decoding results for each filter @return the decoded stream data @throws IOException if the stream cannot be decoded @throws IllegalArgumentException if filterList is empty
2734 Sets the byte position of the first XRef (has to be called after very last startxref was read). This is used to resolve chain of active XRef/trailer. In case startxref position is not found we output a warning and use all XRef/trailer objects combined in byte position order. Thus for incomplete PDF documents with missing startxref one could call this method with parameter value -1. @param startxrefBytePosValue starting position of the first XRef
2735 This is a convenience method that will get the dictionary object that is expected to be an float. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The float value.
2736 This is a convenience method that will get the dictionary object that is expected to be an float. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The float value.
2737 This is a convenience method that will get the dictionary object that is expected to be a float. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The float value.
2738 Get the user unit. This is a positive number that shall give the size of default user space units, in multiples of 1/72 inch, or 1 if it hasn't been set. This is supported by PDF 1.6 and higher. @return the user unit.
2739 Get the width of the of the guideline in default user space units. The default is 1. @return The width of the guideline.
2740 Get the opacity value. @return The opacity of the annotation.
2741 The weight of the font. According to the PDF spec "possible values are 100, 200, 300, 400, 500, 600, 700, 800 or 900" Where a higher number is more weight and appears to be more bold. @return The font weight.
2742 This will get the italic angle for the font. @return The italic angle.
2743 This will get the ascent for the font. @return The ascent.
2744 This will get the descent for the font. @return The descent.
2745 This will get the leading for the font. @return The leading.
2746 This will get the CapHeight for the font. @return The cap height.
2747 This will get the x height for the font. @return The x height.
2748 This will get the stemV for the font. @return The stem v value.
2749 This will get the stemH for the font. @return The stem h value.
2750 This will get the average width for the font. @return The average width value.
2751 This will get the max width for the font. @return The max width value.
2752 This will get the missing width for the font from the /MissingWidth dictionary entry. @return The missing width value, or 0 if there is no such dictionary entry.
2753 This will get the gamma value. If none is present then the default of 1 will be returned. @return The gamma value.
2754 This will return the XStep value. @return The XStep value
2755 This will return the YStep value. @return The YStep value
2756 Sets the volume. @return The volume at which to play the sound, in the range −1.0 to 1.0. Default value: 1.0.
2757 This will retrieve the length of the leader line. @return the length of the leader line
2758 This will retrieve the length of the leader line extensions. @return the length of the leader line extensions
2759 This will retrieve the length of the leader line offset. @return the length of the leader line offset
2760 This will retrieve the constant opacity value used when rendering the annotation (excluing any popup). @return the constant opacity value.
2761 This will retrieve the border width in points, 0 = no border. @return The width of the border in points.
2762 @return The duration in seconds of the transition effect or the default 1 if no duration is found.
2763 @return The starting or ending scale at which the changes shall be drawn or the default 1 if no scale is found. Only for {@link PDTransitionStyle#Fly}.
2764 Writes a single operator token. @param op The operator to write to the stream. @throws IOException If there is an error writing to the stream.
2765 Process the page to extract the region text. @param page The page to extract the regions from. @throws IOException If there is an error while extracting text.
2766 Returns the role map. @return the role map
2767 Appends an objectable kid. @param objectable the objectable
2768 Inserts an objectable kid before a reference kid. @param newKid the objectable @param refKid the reference kid
2769 Removes an objectable kid. @param objectable the objectable @return <code>true</code> if the kid was removed, <code>false</code> otherwise
2770 Sets the property value. @param value the property value
2771 Returns the group color space or null if it isn't defined. @return the group color space. @throws IOException if the colorspace could not be created
2772 Creates a property list from the given dictionary. @param dict COS dictionary @return a new instance of a PDPropertyList using the given dictionary
2773 This will get the line width. This will return null if there is no line width @return null or the LW value of the dictionary.
2774 This will get the miter limit. @return null or the ML value in the dictionary.
2775 This will get the flatness tolerance. @return The flatness tolerance or null if one has not been set.
2776 This will get the smothness tolerance. @return The smothness tolerance or null if one has not been set.
2777 This will get the stroking alpha constant. @return The stroking alpha constant or null if one has not been set.
2778 This will get the non stroking alpha constant. @return The non stroking alpha constant or null if one has not been set.
2779 Creates a Link annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
2780 Constructor. @param dict The annotations dictionary.
2781 Creates a popup annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
2782 Creates an arbitrary annotation from a COSDictionary, expected to be a correct object definition for some sort of annotation. @param dic The dictionary which represents this Annotation.
2783 Creates a PDWidget from a COSDictionary, expected to be a correct object definition for a field in PDF. @param field the PDF object to represent as a field.
2784 This will get the export values from the options. <p> For options with an array of text strings the display value and export value are the same.<br> For options with an array of two-element arrays the export value is the first entry in the two-element array. </p> @return List containing all export values.
2785 Returns the selected values, or an empty List. This list always contains a single item unless {@link #isMultiSelect()} is true. @return A non-null string.
2786 Returns the default values, or an empty List. This list always contains a single item unless {@link #isMultiSelect()} is true. @return A non-null string.
2787 This will write a COS object. @param obj The object to write. @throws IOException if the output cannot be written
2788 This method prepares and writes COS data to the object stream by selecting appropriate specialized methods for the content. @param output The stream, that shall be written to. @param object The content, that shall be written. @param topLevel True, if the currently written object is a top level entry of this object stream. @throws IOException Shall be thrown, when an exception occurred for the write operation.
2789 Creates a corner curl for polygons and ellipses.
2790 Draws an ellipse without a cloudy border effect.
2791 Default constructor.
2792 Set if this page destination should just fit the bounding box. The default is false. @param fitBoundingBox A flag indicating if this should fit the bounding box.
2793 Default constructor.
2794 Set the left x-coordinate, a value of -1 implies that the current x-coordinate will be used. @param x The left x coordinate.
2795 Set if this page destination should just fit the bounding box. The default is false. @param fitBoundingBox A flag indicating if this should fit the bounding box.
2796 Default constructor.
2797 Set the left x-coordinate, a value of -1 implies that the current x-coordinate will be used. @param x The left x coordinate.
2798 Set the bottom y-coordinate, a value of -1 implies that the current y-coordinate will be used. @param y The bottom y coordinate.
2799 Set the right x-coordinate, a value of -1 implies that the current x-coordinate will be used. @param x The right x coordinate.
2800 Set the top y-coordinate, a value of -1 implies that the current y-coordinate will be used. @param y The top ycoordinate.
2801 Default constructor.
2802 Set the top y-coordinate, a value of -1 implies that the current y-coordinate will be used. @param y The top ycoordinate.
2803 Set if this page destination should just fit the bounding box. The default is false. @param fitBoundingBox A flag indicating if this should fit the bounding box.
2804 Default constructor.
2805 Set the left x-coordinate, values 0 or -1 imply that the current x-coordinate will be used. @param x The left x coordinate.
2806 Set the top y-coordinate, values 0 or -1 imply that the current y-coordinate will be used. @param y The top ycoordinate.
2807 Set the zoom value for the page, values 0 or -1 imply that the current zoom will be used. @param zoom The zoom value.
2808 This will parse a PDF dictionary value. @return The parsed Dictionary object. @throws IOException If there is an error parsing the dictionary object.
2809 Resolve the bounding box. @param fieldWidget the annotation widget. @param appearanceStream the annotations appearance stream. @return the resolved boundingBox.
2810 This will decrypt a dictionary. @param dictionary The dictionary to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error creating a new string.
2811 Sets the bounding box. @param bbox the bounding box
2812 Sets a colour. @param name the attribute name @param value the colour
2813 Sets four colours. @param name the attribute name @param value the four colours
2814 Creates a new PDPage instance for embedding, with a size of U.S. Letter (8.5 x 11 inches).
2815 This will get the FDF dictionary. @return The FDF dictionary.
2816 Constructor, creates a new FDF document.
2817 This will get the FDF Catalog. This is guaranteed to not return null. @return The documents /Root dictionary
2818 This is guaranteed to never return null.<br> To quote the PDF Spec "An array of two numbers between 0.0 and 1.0 indicating the fraction of leftover space to allocate at the left and bottom of the icon. A value of [0.0 0.0] positions the icon at the bottom-left corner of the annotation rectangle; a value of [0.5 0.5] centers it within the rectangle. This entry is used only if the icon is scaled proportionally. Default value: [0.5 0.5]." @return The fractional space to allocate.
2819 Builds the CIDSet entry, required by PDF/A. This lists all CIDs in the font, including those that don't have a GID.
2820 Creates a new tiling pattern.
2821 Insert a single sibling before this node. @param newSibling The item to insert. @throws IllegalArgumentException if the given sibling node is part of a list (i.e. if it has a previous or a next sibling)
2822 Insert a single sibling after this node. @param newSibling The item to insert. @throws IllegalArgumentException if the given sibling node is part of a list (i.e. if it has a previous or a next sibling)
2823 This will set the first bead in the thread. When this is set it will also set the thread property of the bead object. @param bead The first bead in the thread.
2824 Default constructor.
2825 Sets the role map. @param roleMap the role map
2826 Sets a name value. @param name the attribute name @param value the name value
2827 This will set the rendering intent for the graphics state. @param ri The new rendering intent
2828 This will set the name of the action to be performed. @param name The name of the action to be performed.
2829 This will set the border effect, see the STYLE_* constants for valid values. @param s the border effect to use
2830 Creates an empty page label dictionary for the given document. <p> Note that the page label dictionary won't be automatically added to the document; you will still need to do it manually (see {@link org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)}. </p> @param document The document the page label dictionary is created for. @see org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)
2831 Constructor with required values. @param structureType The structure type. Constants are available in the {@link StandardStructureTypes} class. @param parent The parent structure node.
2832 Default Constructor.
2833 Creates a new shading pattern.
2834 Default constructor.
2835 Get the outline associated with this document or null if it does not exist. @return The document's outline.
2836 @return The parent of this node or null if there is no parent.
2837 Constructor.
2838 creates a new transition with default "replace" style {@link PDTransitionStyle#R}
2839 Set the value of a date entry in the dictionary. @param key The key to the date value. @param date The date value.
2840 Set the date object. @param embedded The embedded dictionary. @param key The key to the date. @param date The date to set.
2841 This will set the creation date of the document. @param date The new creation date for the document.
2842 This will set the modification date of the document. @param date The new modification date for the document.
2843 Set the creation date. @param date The date the annotation was created.
2844 This will set the date and time the annotation was modified. @param c the date and time the annotation was created.
2845 This will set the date and time the annotation was created. @param creationDate the date and time the annotation was created.
2846 Set the sign date. @param cal the date to be used as sign date
2847 Set the custom metadata value. @param fieldName The name of the custom metadata field. @param fieldValue The value to the custom metadata field.
2848 Sets a string attribute value. @param name the attribute name @param value the string attribute value
2849 This will set the base URI to be used in resolving relative URI references. URI actions within the document may specify URIs in partial form, to be interpreted relative to this base address. If no base URI is specified, such partial URIs will be interpreted relative to the location of the document itself. The use of this entry is parallel to that of the body element &lt;BASE&gt;, as described in the HTML 4.01 Specification. @param base The base URI to be used.
2850 A text string indicating the version of the application implementation, as described by the <code>Name</code> attribute in this dictionary. When set by Adobe Acrobat, this entry is in the format: major.minor.micro (for example 7.0.7). <p> NOTE: Version value is specific for build data dictionary when used as the <code>App</code> dictionary in a build properties dictionary. </p> @param applicationVersion the application implementation version
2851 This will set the label for the units. @param units the label for the units
2852 This will set the value for the manner to display a fractional value. Allowed values are "D", "F", "R", "T" and null. @param fractionalDisplay the manner to display a fractional value
2853 This will set the text to be used between orders of thousands in display of numerical values. @param thousandsSeparator thousands separator
2854 This will set the text to be used as the decimal point in displaying numerical values. @param decimalSeparator decimal separator
2855 This will set the text to be concatenated to the left of the label specified by U. @param labelPrefixString label prefix
2856 This will set the text to be concatenated after the label specified by U. @param labelSuffixString label suffix
2857 This will set the value indicating the ordering of the label specified by U to the calculated unit value. Possible values are "S", "P" and null. @param labelPositionToValue label position
2858 This will create an FDF field from an XFDF XML document. @param fieldXML The XML document that contains the XFDF data. @throws IOException If there is an error reading from the dom.
2859 Creates a new optional content group (OCG). @param name the name of the content group
2860 Sets an integer. @param name the attribute name @param value the integer
2861 Sets an integer number. @param name the attribute name @param value the integer number
2862 This will set the precision or denominator of a fractional amount. @param denominator the precision or denominator
2863 Creates a new CCITT group 4 (T6) compressed image XObject from a b/w BufferedImage. This compression technique usually results in smaller images than those produced by {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) }. @param document the document to create the image as part of. @param image the image. @return a new image XObject. @throws IOException if there is an error creating the image. @throws IllegalArgumentException if the BufferedImage is not a b/w image.
2864 Set the number of bits per component. @param bitsPerComponent the number of bits per component
2865 Set the number of bits per component. @param bitsPerComponent the number of bits per component
2866 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
2867 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
2868 Sets a float number. @param name the attribute name @param value the float number
2869 This will set the intensity of the applied effect. @param i the intensity of the effect values 0 to 2
2870 This will set the conversion factor. @param conversionFactor the conversion factor
2871 This will get the file specification for this stream. This is only required for external files. @return The file specification. @throws IOException If there is an error creating the file spec.
2872 The source file or target file: the PDF document file that this FDF file was exported from or is intended to be imported into. @return The F entry of the FDF dictionary. @throws IOException If there is an error creating the file spec.
2873 This will get the list of embedded FDF entries, or null if the entry is null. This will return a list of PDFileSpecification objects. @return A list of embedded FDF files. @throws IOException If there is an error creating the file spec.
2874 This will get the file specification of this reference. An optional parameter. @return The F entry for this dictionary. @throws IOException If there is an error creating the file spec.
2875 This will get the file in which the destination is located. @return The F entry of the specific embedded go-to action dictionary. @throws IOException If there is an error creating the file spec.
2876 This will get the file in which the destination is located. @return The F entry of the specific Submit-From action dictionary. @throws IOException If there is an error creating the file spec.
2877 This will get the application to be launched or the document to be opened or printed. It is required if none of the entries Win, Mac or Unix is present. If this entry is absent and the viewer application does not understand any of the alternative entries it should do nothing. @return The F entry of the specific launch action dictionary. @throws IOException If there is an error creating the file spec.
2878 This will get the file in which the destination is located. @return The F entry of the specific remote go-to action dictionary. @throws IOException If there is an error creating the file spec.
2879 This will get the file in which the destination is located. @return The F entry of the specific Submit-From action dictionary. @throws IOException If there is an error creating the file spec.
2880 This will get the file in which the destination is located. @return The F entry of the specific thread action dictionary. @throws IOException If there is an error creating the file spec.
2881 Return the attached file. @return The attached file. @throws IOException If there is an error creating the file spec.
2882 Default constructor.
2883 Default constructor.
2884 Default constructor.
2885 Default constructor.
2886 Constructor.
2887 Constructor.
2888 Constructor.
2889 Constructor.
2890 Constructor.
2891 Constructor.
2892 Creates a Circle or Square annotation of the specified sub type. @param subType the subtype the annotation represents.
2893 Constructor.
2894 Creates a TextMarkup annotation of the specified sub type. @param subType the subtype the annotation represents
2895 Gets the artifact's bounding box (BBox). @return the artifact's bounding box
2896 Gets the bounding box. @return the bounding box.
2897 The rectangle associated with this annotation. @return The annotation rectangle.
2898 This will retrieve the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. @return the rectangle difference
2899 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
2900 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
2901 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
2902 This will get the fonts bounding box. @return The fonts bounding box.
2903 This will get the fonts bounding box from its dictionary. @return The fonts bounding box.
2904 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the form XObject's bounding box. These boundaries are used to clip the form XObject and to determine its size for caching. @return The BBox of the form.
2905 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the pattern's bounding box. @return The BBox of the pattern.
2906 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the shading's bounding box. @return the BBox of the form
2907 The annotation rectangle, defining the location of the annotation on the page in default user space units. This is usually required and should not return null on valid PDF documents. But where this is a parent form field with children, such as radio button collections then the rectangle will be null. @return The Rect value of this annotation.
2908 This will get the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
2909 This will get the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
2910 This will retrieve the rectangle specifying the location of the viewport. @return the location
2911 The rectangle on the page that this bead is part of. @return The part of the page that this bead covers.
2912 @param array dash array @param phase dash phase
2913 Get the line dash pattern for this box style. This is guaranteed to not return null. The default is [3],0. @return The line dash pattern.
2914 This will get the dash pattern. @return null or the D value in the dictionary.
2915 This will retrieve the dash style used for drawing the border. @return the dash style of the border
2916 Returns an ARGB image filled with the given paint and using the given image as a mask. @param paint the paint to fill the visible portions of the image with @return a masked image filled with the given paint @throws IOException if the image cannot be read @throws IllegalStateException if the image is not a stencil.
2917 This will get the optional matrix of an XObjectForm. It maps the form space to user space. @return the form matrix if available, or the identity matrix.
2918 Returns the pattern matrix, or the identity matrix is none is available. @return the pattern matrix
2919 This will get the optional Matrix of a function based shading. @return the matrix
2920 Sets an attribute. @param attrName the attribute name @param attrValue the attribute value
2921 Returns the given attribute, inheriting from parent tree nodes if necessary. @param node page object @param key the key to look up @return COS value for the given key
2922 This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert it to a primitive boolean. @param key The key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The entry converted to a boolean.
2923 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the defaultvalue will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
2924 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value -1 will be returned. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @return The integer value.
2925 Creates an inline image from the given parameters and data. @param parameters the image parameters @param data the image data @param resources the current resources @throws IOException if the stream cannot be decoded
2926 Returns the suffix for this image type, e.g. jpg/png. @return The image suffix.
2927 This will get all dictionaries objects by type. @param type1 The first possible type of the object, mandatory. @param type2 The second possible type of the object, usually an abbreviation, optional. @return This will return all objects with the specified type(s).
2928 Brute force search for all trailer marker. @param trailer dictionary to be used as trailer dictionary @throws IOException if something went wrong
2929 Search for the different parts of the trailer dictionary. @param trailer dictionary to be used as trailer dictionary @return true if the root was found, false if not. @throws IOException if something went wrong
2930 Returns all pages in the document, as a page tree. @return PDPageTree providing all pages of the document
2931 Constructor for reading. @param root A page tree root.
2932 Returns the Unicode character sequence which corresponds to the given character code. @param code character code @param customGlyphList a custom glyph list to use instead of the Adobe Glyph List @return Unicode character(s)
2933 Returns the G entry of the soft mask object @return form containing the transparency group @throws IOException if the group could not be read
2934 Set the mac subtype. @param macSubtype The mac subtype.
2935 Set the mac Creator. @param macCreator The mac Creator.
2936 Set the mac ResFork. @param macResFork The mac ResFork.
2937 This will tell if this document is encrypted or not. @return true If this document is encrypted.
2938 This will parse the stream and populate the FDFDocument object. @return the parsed FDFDocument @throws IOException If there is an error reading from the stream or corrupt data is found.
2939 This will parse the stream and populate the PDDocument object. This will close the keystore stream when it is done parsing. @param lenient activate leniency if set to true @return the populated PDDocument @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error reading from the stream or corrupt data is found.
2940 Get the documents AcroForm. This will return null if no AcroForm is part of the document. @return The document's AcroForm.
2941 Find the page destination from a named destination. @param namedDest the named destination. @return a PDPageDestination object or null if not found. @throws IOException if there is an error creating the PDPageDestination object.
2942 Returns the color space resource with the given name, or null if none exists. This method is for PDFBox internal use only, others should use {@link #getColorSpace(COSName)}. @param name Name of the color space resource. @param wasDefault if current color space was used by a default color space. This parameter is to @return a new color space. @throws IOException if something went wrong.
2943 Returns true if the given color space name exists in these resources. @param name Name of the color space resource. @return true if the given color space name exists in these resources, otherwise false
2944 Returns the extended graphics state resource with the given name, or null if none exists. @param name Name of the graphics state resource. @return the extended graphics state with the given name or null
2945 Tells whether the XObject resource with the given name is an image. @param name Name of the XObject resource. @return true if it is an image XObject, false if not.
2946 Returns the names of the color space resources, if any. @return an iterable containing all names of available colorspaces
2947 Returns the names of the XObject resources, if any. @return an iterable containing all names of available xobjects
2948 Returns the names of the font resources, if any. @return an iterable containing all names of available fonts
2949 Returns the names of the property list resources, if any. @return an iterable containing all names of available property lists
2950 Returns the names of the shading resources, if any. @return an iterable containing all names of available shadings
2951 Returns the names of the pattern resources, if any. @return an iterable containing all names of available patterns
2952 Returns the names of the extended graphics state resources, if any. @return an iterable containing all names of available extended graphics states
2953 Adds the given resource if it does not already exist.
2954 Sets the font resource with the given name. @param name the name of the resource @param font the font to be added
2955 Sets the color space resource with the given name. @param name the name of the resource @param colorSpace the color space to be added
2956 Sets the extended graphics state resource with the given name. @param name the name of the resource @param extGState the extended graphics state to be added
2957 Sets the shading resource with the given name. @param name the name of the resource @param shading the shading to be added
2958 Sets the pattern resource with the given name. @param name the name of the resource @param pattern the pattern to be added
2959 Sets the property list resource with the given name. @param name the name of the resource @param properties the property list to be added
2960 Sets the XObject resource with the given name. @param name the name of the resource @param xobject the XObject to be added
2961 Set the embedded file for this spec. You should also call {@link #setEmbeddedFileUnicode(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile) setEmbeddedFileUnicode(PDEmbeddedFile)} for cross-platform and cross-language compatibility. @param file The file to be embedded.
2962 Set the embedded Unicode file for this spec. If you call this, then do not forget to also call {@link #setEmbeddedFile(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile) setEmbeddedFile(PDEmbeddedFile)} or the attachment will not be visible on some viewers. @param file The Unicode file to be embedded.
2963 Returns the standard crypt filter. @return the standard crypt filter if available.
2964 Returns the default crypt filter (for public-key security handler). @return the default crypt filter if available.
2965 Sets the standard crypt filter. @param cryptFilterDictionary the standard crypt filter to set
2966 Sets the default crypt filter (for public-key security handler). @param defaultFilterDictionary the standard crypt filter to set
2967 Returns the stream of the glyph for the given character code @param code character code @return the stream to be used to render the glyph
2968 Returns the base state for optional content groups. @return the base state
2969 Sets the base state for optional content groups. @param state the base state
2970 Enables or disables an optional content group. @param group the group object @param enable true to enable, false to disable @return true if the group already had an on or off setting, false otherwise
2971 Create a new tiling pattern content stream. @param pattern The tiling pattern stream to write to. @throws IOException If there is an error writing to the form contents.
2972 Get the annotations appearance dictionary. <p> This will get the annotations appearance dictionary. If this is not existent an empty appearance dictionary will be created. @return the annotations appearance dictionary
2973 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". If there is no rollover appearance then the normal appearance will be returned. Which means that this method will never return null. @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
2974 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". If there is no rollover appearance then the normal appearance will be returned. Which means that this method will never return null. @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
2975 @return The first child or null if there is no child.
2976 @return The last child or null if there is no child.
2977 Get the signature dictionary. @return the signature dictionary
2978 Append a bead after this bead. This will correctly set the next/previous beads in the linked list. @param append The bead to insert.
2979 Returns the appearance stream for this annotation, if any. The annotation state is taken into account, if present. @return the appearance stream
2980 Get the value which sets the check box to the On state. <p>The On value should be 'Yes' but other values are possible so we need to look for that. On the other hand the Off value shall always be 'Off'. If not set or not part of the normal appearance keys 'Off' is the default</p> @return the value setting the check box to the On state. If an empty string is returned there is no appearance definition.
2981 Check if all entries of the pages dictionary are present. Those which can't be dereferenced are removed. @param root the root dictionary of the pdf @throws java.io.IOException if the page tree root is null
2982 The name to retrieve. @param name The name in the tree. @return The value of the name in the tree. @throws IOException If there is a problem creating the destinations.
2983 Returns the value corresponding to an index in the number tree. @param index The index in the number tree. @return The value corresponding to the index. @throws IOException If there is a problem creating the values.
2984 Set the children of this number tree. @param kids The children of this number tree. These have to be in sorted order. Because of that, it is usually easier to call {@link #setNumbers(Map)} with a map and pass a single element list here.
2985 Set the numbers for this node. This method will set the appropriate upper and lower limits based on the keys in the map and take care of the ordering. @param numbers The map of numbers to objects, or <code>null</code> for nothing.
2986 This will get the number of output parameters that have a range specified. A range for output parameters is optional so this may return zero for a function that does have output parameters, this will simply return the number that have the range specified. @return The number of output parameters that have a range specified.
2987 This will get the range for a certain output parameters. This is will never return null. If it is not present then the range 0 to 0 will be returned. @param n The output parameter number to get the range for. @return The range for this component.
2988 Clip the given input values to the ranges. @param inputValues the input values @return the clipped values
2989 This will get the number of input parameters that have a domain specified. @return The number of input parameters that have a domain specified.
2990 This will get the range for a certain input parameter. This is will never return null. If it is not present then the range 0 to 0 will be returned. @param n The parameter number to get the domain for. @return The domain range for this component.
2991 calculate array index (structure described in p.171 PDF spec 1.7) in multiple dimensions. @param vector with coordinates @return index in flat array
2992 Returns all encode values as COSArray. @return the encode array.
2993 Get the decode for the input parameter. @param paramNum The function parameter number. @return The decode parameter range or null if none is set.
2994 Get the encode for the input parameter. @param n The function parameter number. @return The encode parameter range or null if none is set.
2995 Is the artifact attached to the top edge? @return <code>true</code> if the artifact is attached to the top edge, <code>false</code> otherwise
2996 Is the artifact attached to the bottom edge? @return <code>true</code> if the artifact is attached to the bottom edge, <code>false</code> otherwise
2997 Is the artifact attached to the left edge? @return <code>true</code> if the artifact is attached to the left edge, <code>false</code> otherwise
2998 Is the artifact attached to the right edge? @return <code>true</code> if the artifact is attached to the right edge, <code>false</code> otherwise
2999 Constructor. @param fontDictionary The font dictionary according to the PDF specification.
3000 Creates a new DictionaryEncoding for embedding. @param baseEncoding the base encoding of this encoding @param differences the differences of this encoding with regard to the base encoding
3001 Creates a new DictionaryEncoding for a Type 3 font from a PDF. @param fontEncoding The Type 3 encoding dictionary.
3002 Creates a new DictionaryEncoding from a PDF. @param fontEncoding The encoding dictionary. @param isNonSymbolic True if the font is non-symbolic. False for Type 3 fonts. @param builtIn The font's built-in encoding. Null for Type 3 fonts.
3003 Creates a new CalRGB color space using the given COS array. @param rgb the cos array which represents this color space
3004 This will set the a range for the "a" component. @param range the new range for the "a" component, or null if defaults (-100..100) are to be set.
3005 This will set the "b" range for this color space. @param range the new range for the "b" component, or null if defaults (-100..100) are to be set.
3006 Returns the first optional content group of the given name. @param name the group name @return the optional content group or null, if there is no such group
3007 Adds an optional content group (OCG). @param ocg the optional content group
3008 Returns the collection of all optional content groups. @return the optional content groups
3009 Constructor. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws java.io.IOException if there is an error getting the color space or doing background color conversion.
3010 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
3011 This will retrieve the color used in drawing various elements. As of PDF 1.6 these are : <ul> <li>Background of icon when closed</li> <li>Title bar of popup window</li> <li>Border of a link annotation</li> </ul> @return Color object representing the colour
3012 This will retrieve the border color. @return the border color.
3013 This will retrieve the background color. @return the background color.
3014 works like {@link #addKeyUsage(String)} but enters each character separately @param digitalSignature char that is one of {0, 1, X} @param nonRepudiation char that is one of {0, 1, X} @param keyEncipherment char that is one of {0, 1, X} @param dataEncipherment char that is one of {0, 1, X} @param keyAgreement char that is one of {0, 1, X} @param keyCertSign char that is one of {0, 1, X} @param cRLSign char that is one of {0, 1, X} @param encipherOnly char that is one of {0, 1, X} @param decipherOnly char that is one of {0, 1, X}
3015 Will return the embedded signature between the byterange gap. @param pdfFile The signed pdf file as InputStream. It will be closed in this method. @return a byte array containing the signature @throws IOException if the pdfFile can't be read @throws IndexOutOfBoundsException if the byterange array is not long enough
3016 Will return the embedded signature between the byterange gap. @param pdfFile The signed pdf file as byte array @return a byte array containing the signature @throws IOException if the pdfFile can't be read @throws IndexOutOfBoundsException if the byterange array is not long enough
3017 Return the signed content of the document. This is not a PDF file, nor is it the PDF file before signing, it is the byte sequence made of the input minus the area where the signature bytes will be. See "The ByteRange and signature value" in the document <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5">Digital Signatures in a PDF</a>. @param pdfFile The signed pdf file as InputStream. It will be closed in this method. @return a byte array containing only the signed part of the content @throws IOException if the pdfFile can't be read
3018 Return the signed content of the document. This is not a PDF file, nor is it the PDF file before signing, it is the byte sequence made of the input minus the area where the signature bytes will be. See "The ByteRange and signature value" in the document <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5">Digital Signatures in a PDF</a>. @param pdfFile The signed pdf file as byte array @return a byte array containing only the signed part of the content @throws IOException if the pdfFile can't be read
3019 Gets a name value. @param name the attribute name @return the name value
3020 This will get the rendering intent. @return null or the RI value in the dictionary.
3021 This will get the name of the action to be performed. @return The name of the action to be performed.
3022 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The name converted to a string.
3023 Get the style for the guideline. The default is "S" for solid. @return The guideline style. @see PDBoxStyle#GUIDELINE_STYLE_DASHED @see PDBoxStyle#GUIDELINE_STYLE_SOLID
3024 This will retrieve the icon (and hence appearance, AP taking precedence) For this annotation. The default is NOTE. @return The name of this annotation, see the PDAnnotationText.NAME_XXX constants.
3025 This is the name used to draw the type of attachment. See the ATTACHMENT_NAME_XXX constants. @return The name that describes the visual cue for the attachment.
3026 This will retrieve the line ending style. @return The line ending style, possible values shown in the LE_ constants section, LE_NONE if missing, never null.
3027 Set the highlight mode for when the mouse is depressed. See the HIGHLIGHT_MODE_XXX constants. @return The string representation of the highlight mode.
3028 This will retrieve the Reply Type (relationship) with the annotation in the IRT entry See the RT_* constants for the available values. @return the relationship.
3029 This will retrieve the name (and hence appearance, AP taking precedence) For this annotation. The default is DRAFT. @return The name of this rubber stamp, see the NAME_XXX constants.
3030 This will retrieve the name (and hence appearance, AP taking precedence) For this annotation. The default is NOTE. @return The name of this annotation, see the NAME_XXX constants.
3031 Returns the highlighting mode. Default value: <code>I</code> <dl> <dt><code>N</code></dt> <dd>(None) No highlighting.</dd> <dt><code>I</code></dt> <dd>(Invert) Invert the contents of the annotation rectangle.</dd> <dt><code>O</code></dt> <dd>(Outline) Invert the annotation's border.</dd> <dt><code>P</code></dt> <dd>(Push) Display the annotation's down appearance, if any. If no down appearance is defined, the contents of the annotation rectangle shall be offset to appear as if it were pushed below the surface of the page</dd> <dt><code>T</code></dt> <dd>(Toggle) Same as <code>P</code> (which is preferred).</dd> </dl> @return the highlighting mode
3032 This will retrieve the border style, see the STYLE_* constants for valid values. @return the style of the border
3033 returns the type of the external data dictionary. It must be "ExData", if present @return the type of the external data dictionary
3034 @return the style for this transition @see PDTransitionStyle#valueOf(String)
3035 @return The dimension in which the specified transition effect shall occur or the default {@link PDTransitionDimension#H} if no dimension is found. @see PDTransitionDimension
3036 @return The direction of motion for the specified transition effect or the default {@link PDTransitionMotion#I} if no motion is found. @see PDTransitionMotion
3037 Get the non full screen page mode preference. @return the non full screen page mode preference.
3038 Get the reading direction preference. @return the reading direction preference.
3039 Get the ViewArea preference. See BOUNDARY enumeration. @return the ViewArea preference.
3040 Get the ViewClip preference. See BOUNDARY enumeration. @return the ViewClip preference.
3041 Get the PrintArea preference. See BOUNDARY enumeration. @return the PrintArea preference.
3042 Get the PrintClip preference. See BOUNDARY enumeration. @return the PrintClip preference.
3043 Get the PrintScaling preference. See PRINT_SCALING enumeration. @return the PrintScaling preference.
3044 Check if the cross reference table/stream can be found at the current offset. @param startXRefOffset @return the revised offset @throws IOException
3045 Returns the PDF specification version this document conforms to. @return the PDF version (e.g. 1.4f)
3046 Returns the attributes together with their revision numbers (A). @return the attributes as a list, never null.
3047 Detects whether there are no properties in the attribute object. @return <code>true</code> if the attribute object is empty, <code>false</code> otherwise
3048 Returns the parent in the structure hierarchy (P). @return the parent in the structure hierarchy
3049 Creates an object for a kid of this structure node. The type of object depends on the type of the kid. It can be <ul> <li>a {@link PDStructureElement},</li> <li>a {@link PDObjectReference},</li> <li>a {@link PDMarkedContentReference},</li> <li>an {@link Integer}</li> </ul> @param kid the kid @return the object
3050 Sets the property name. @param name the property name
3051 creates a new encryption dictionary from the low level dictionary provided. @param dictionary a COS encryption dictionary
3052 Returns the security handler specified in the dictionary's Filter entry. @return a security handler instance @throws IOException if there is no security handler available which matches the Filter
3053 This will get the list of FDF Annotations. This will return a list of FDFAnnotation objects or null if the entry is not set. @return A list of FDF annotations. @throws IOException If there is an error creating the annotation list.
3054 Returns true if the character set described by CIDSystemInfo is present in the given font. Only applies to Adobe-GB1, Adobe-CNS1, Adobe-Japan1, Adobe-Korea1, as per the PDF spec.
3055 Returns true if this color space has the NChannel subtype. @return true if subtype is NChannel
3056 Get the Document Open Action for this object. @return The action to perform when the document is opened. @throws IOException If there is an error creating the destination or action.
3057 This will get the action that is associated with this field. @return The 'A' entry in the FDF field dictionary.
3058 Returns the dictionary's "Doc" entry, that is, a map of key value pairs to be added to the document's JavaScript name tree. @return Map of named "JavaScript" dictionaries.
3059 This will get the next action, or sequence of actions, to be performed after this one. The value is either a single action dictionary or an array of action dictionaries to be performed in order. @return The Next action or sequence of actions.
3060 Get the F action. @return The F action.
3061 This will get an action to be performed when the cursor enters the annotation's active area. @return The E entry of annotation's additional actions dictionary.
3062 This will get an action to be performed when the cursor exits the annotation's active area. @return The X entry of annotation's additional actions dictionary.
3063 This will get an action to be performed when the mouse button is pressed inside the annotation's active area. The name D stands for "down". @return The d entry of annotation's additional actions dictionary.
3064 This will get an action to be performed when the mouse button is released inside the annotation's active area. The name U stands for "up". @return The U entry of annotation's additional actions dictionary.
3065 This will get an action to be performed when the annotation receives the input focus. @return The Fo entry of annotation's additional actions dictionary.
3066 This will get an action to be performed when the annotation loses the input focus. The name Bl stands for "blurred". @return The Bl entry of annotation's additional actions dictionary.
3067 This will get an action to be performed when the page containing the annotation is opened. The action is executed after the O action in the page's additional actions dictionary and the OpenAction entry in the document catalog, if such actions are present. @return The PO entry of annotation's additional actions dictionary.
3068 This will get an action to be performed when the page containing the annotation is closed. The action is executed before the C action in the page's additional actions dictionary, if present. @return The PC entry of annotation's additional actions dictionary.
3069 This will get an action to be performed when the page containing the annotation becomes visible in the viewer application's user interface. @return The PV entry of annotation's additional actions dictionary.
3070 This will get an action to be performed when the page containing the annotation is no longer visible in the viewer application's user interface. @return The PI entry of annotation's additional actions dictionary.
3071 This will get a JavaScript action to be performed before closing a document. The name WC stands for "will close". @return The WC entry of document catalog's additional actions dictionary.
3072 This will get a JavaScript action to be performed before saving a document. The name WS stands for "will save". @return The WS entry of document catalog's additional actions dictionary.
3073 This will get a JavaScript action to be performed after saving a document. The name DS stands for "did save". @return The DS entry of document catalog's additional actions dictionary.
3074 This will get a JavaScript action to be performed before printing a document. The name WP stands for "will print". @return The WP entry of document catalog's additional actions dictionary.
3075 This will get a JavaScript action to be performed after printing a document. The name DP stands for "did print". @return The DP entry of document catalog's additional actions dictionary.
3076 This will get a JavaScript action to be performed when the user types a keystroke into a text field or combo box or modifies the selection in a scrollable list box. This allows the keystroke to be checked for validity and rejected or modified. @return The K entry of form field's additional actions dictionary.
3077 This will get a JavaScript action to be performed before the field is formatted to display its current value. This allows the field's value to be modified before formatting. @return The F entry of form field's additional actions dictionary.
3078 This will get a JavaScript action to be performed when the field's value is changed. This allows the new value to be checked for validity. The name V stands for "validate". @return The V entry of form field's additional actions dictionary.
3079 This will get a JavaScript action to be performed in order to recalculate the value of this field when that of another field changes. The order in which the document's fields are recalculated is defined by the CO entry in the interactive form dictionary. The name C stands for "calculate". @return The C entry of form field's additional actions dictionary.
3080 This will get an action to be performed when the page is opened. This action is independent of any that may be defined by the OpenAction entry in the document catalog, and is executed after such an action. @return The O entry of page object's additional actions dictionary.
3081 This will get an action to be performed when the page is closed. This action applies to the page being closed, and is executed before any other page opened. @return The C entry of page object's additional actions dictionary.
3082 Get the action to be performed when this annotation is to be activated. Either this or the destination entry should be set, but not both. @return The action to be performed when this annotation is activated.
3083 Get the action to be performed when this annotation is to be activated. @return The action to be performed when this annotation is activated.
3084 Get the action of this node. @return The action of this node.
3085 Return the properties String value. <p> Allows to retrieve the low level date for validation purposes. </p> @param propertyKey the dictionaries key @return the properties value
3086 This will get the value of a custom metadata information field for the document. This will return null if one is not found. @param fieldName Name of custom metadata field from pdf document. @return String Value of metadata field
3087 Gets a string attribute value. @param name the attribute name @return the string attribute value
3088 This will get the base URI to be used in resolving relative URI references. URI actions within the document may specify URIs in partial form, to be interpreted relative to this base address. If no base URI is specified, such partial URIs will be interpreted relative to the location of the document itself. The use of this entry is parallel to that of the body element &lt;BASE&gt;, as described in the HTML 4.01 Specification. @return The URI entry of the specific URI dictionary.
3089 A text string indicating the version of the application implementation, as described by the <code>/Name</code> attribute in this dictionary. When set by Adobe Acrobat, this entry is in the format: major.minor.micro (for example 7.0.7). @return the application implementation version
3090 This will return the label for the units. @return the label for the units
3091 This is a convenience method that will get the dictionary object that is expected to be a string. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
3092 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param embedded The embedded dictionary. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
3093 Get the operation to perform on the file. This method will not return null, OPERATION_OPEN is the default. @return The operation to perform for the file. @see PDWindowsLaunchParams#OPERATION_OPEN @see PDWindowsLaunchParams#OPERATION_PRINT
3094 Get the default appearance. @return the DA element of the dictionary object
3095 <p>Preferred method for getting the filename. It will determinate the recommended file name.</p> <p>First of all we try to get the unicode filename if it exist. If it doesn't exist we take a look at the DOS, MAC UNIX filenames. If no one exist the required F entry will be returned.</p> @return The preferred file name.
3096 Sets the string for the property value. @param formattedValue the string for the property value
3097 Indicates whether a particular optional content group is found in the PDF file. @param groupName the group name @return true if the group exists, false otherwise
3098 Returns the fully qualified name of the field, which is a concatenation of the names of all the parents fields. @return the name of the field
3099 This is a convenience method that will get the dictionary object that is expected to be a date. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a date.
3100 This is a convenience method that will get the dictionary object that is expected to be a date. @param embedded The embedded dictionary to get. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a string.
3101 The software module revision number, corresponding to the Date attribute. @return the revision of the software module
3102 The software module revision number, used to determinate the minimum version of software that is required in order to process this signature. <p> NOTE: this entry is deprecated for PDF v1.7 </p> @return the revision of the software module
3103 Creates a new COSInputStream from an encoded input stream. @param filters Filters to be applied. @param parameters Filter parameters. @param in Encoded input stream. @param options decode options for the encoded stream @return Decoded stream. @throws IOException If the stream could not be read.
3104 Returns a new RandomAccessRead which reads the decoded stream data. @return RandomAccessRead containing decoded stream data. @throws IOException If the stream could not be read.
3105 This will get a stream with some filters applied but not others. This is useful when doing images, ie filters = [flate,dct], we want to remove flate but leave dct @param stopFilters A list of filters to stop decoding at. @return A stream with decoded data. @throws IOException If there is an error processing the stream.
3106 Gets a number value. @param name the attribute name @return the number value
3107 This will return the conversion factor. @return the conversion factor
3108 Constructor. @param function The function.
3109 This will retrieve the length of the leader line. @return the length of the leader line
3110 This will retrieve the length of the leader line extensions. @return the length of the leader line extensions
3111 This will retrieve the length of the leader line offset. @return the length of the leader line offset
3112 The minimum required capability of the signature field seed value dictionary parser. A value of 1 specifies that the parser shall be able to recognize all seed value dictionary entries in a PDF 1.5 file. A value of 2 specifies that it shall be able to recognize all seed value dictionary entries specified. @return the minimum required capability of the signature field seed value dictionary parser
3113 This will return the CYX factor. @return CYX factor
3114 Gets a number value. @param name the attribute name @param defaultValue the default value @return the number value
3115 This will retrieve the intensity of the applied effect. @return the intensity value 0 to 2
3116 Compute the font height. Override this if you want to use own calculations. @param font the font. @return the font height. @throws IOException if there is an error while getting the font bounding box.
3117 This will write out the list of tokens to the stream. @param tokens The tokens to write to the stream. @throws IOException If there is an error writing to the stream.
3118 Get the list of decode parameters. Each entry in the list will refer to an entry in the filters list. @return The list of decode parameters. @throws IOException if there is an error retrieving the parameters.
3119 Get the list of decode parameters. Each entry in the list will refer to an entry in the filters list. @return The list of decode parameters. @throws IOException if there is an error retrieving the parameters.
3120 Appends a structure element kid and sets the parent property (/P) to this. @param structureElement the structure element
3121 Inserts a structure element kid before a reference kid. @param newKid the structure element @param refKid the reference kid
3122 Removes a structure element kid and if successful also removes the parent property (/P). @param structureElement the structure element @return <code>true</code> if the kid was removed, <code>false</code> otherwise.
3123 Returns the default position vector (v). @param cid CID
3124 Returns the property list resource with the given name, or null if none exists. @param name Name of the property list resource. @return the property list with the given name or null
3125 This will get the optional content group or optional content membership dictionary. @return The optional content group or optional content membership dictionary or null if there is none.
3126 This will get the optional content group or optional content membership dictionary. @return The optional content group or optional content membership dictionary or null if there is none.
3127 Get a list of optional content groups. @return List of optional content groups, never null.
3128 This will get the optional content group or optional content membership dictionary for the annotation. @return The optional content group or optional content membership dictionary or null if there is none.
3129 Creates a Caret annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
3130 Creates a Link annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
3131 Creates a FreeText annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
3132 Constructor. @param dict The annotations dictionary.
3133 Creates a Line annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
3134 Constructor. @param dict The annotations dictionary.
3135 Constructor. @param dict The annotations dictionary.
3136 Creates a Rubber Stamp annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
3137 Creates a sound annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
3138 Constructor. @param dict The annotations dictionary.
3139 Creates a Text annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
3140 Creates a TextMarkup annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
3141 This will retrieve the popup annotation used for entering/editing the text for this annotation. @return the popup annotation.
3142 Returns the widget annotations associated with this field. @return The list of widget annotations. Be aware that this list is <i>not</i> backed by the actual widget collection of the field, so adding or deleting has no effect on the PDF document until you call {@link #setWidgets(java.util.List) setWidgets()} with the modified list.
3143 Deep-clones the given object for inclusion into a different PDF document identified by the destination parameter. Expert use only, don’t use it if you don’t know exactly what you are doing. @param base the initial object as the root of the deep-clone operation @return the cloned instance of the base object @throws IOException if an I/O error occurs
3144 Writes all prepared {@link COSObject}s to the given {@link COSStream}. @param stream The stream for the compressed objects. @return The given {@link COSStream} of this object stream. @throws IOException Shall be thrown, if writing the object stream failed.
3145 Write the given {@link COSArray} to the given stream. @param output The stream, that shall be written to. @param cosArray The content, that shall be written.
3146 Cloudy polygon implementation. @param vertices polygon vertices; first and last point must be equal @param isEllipse specifies if the polygon represents an ellipse
3147 Tries to compress the image using a predictor. @return the image or null if it is not possible to encoded the image (e.g. not supported raster format etc.)
3148 A convenience method that will create an XYZ destination using only the defaults. @param page The page to refer to.
3149 This will decrypt a stream. @param stream The stream to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error getting the stream data.
3150 Default constructor.
3151 Default constructor.
3152 Default Constructor
3153 Default constructor.
3154 Constructor #1.
3155 Default constructor.
3156 Default constructor.
3157 Default constructor.
3158 Default constructor.
3159 Default constructor.
3160 Default constructor.
3161 Default Constructor
3162 Default constructor.
3163 Default constructor.
3164 Constructor.
3165 Constructor.
3166 Constructor.
3167 Constructor.
3168 Returns the pattern image in parent stream coordinates.
3169 Returns the anchor rectangle, which includes the XStep/YStep and scaling.
3170 {@inheritDoc} The returned images are not cached.
3171 Extract the raw unconverted raster of the given image @param pdImage The image to get the raw raster data from @return the raw raster of this image @throws IOException
3172 Returns the content of the given image as an AWT buffered image with an RGB color space. If a color key mask is provided then an ARGB image is returned instead. This method never returns null. @param pdImage the image to read @param region The region of the source image to get, or null if the entire image is needed. The actual region will be clipped to the dimensions of the source image. @param subsampling The amount of rows and columns to advance for every output pixel, a value of 1 meaning every pixel will be read. It must not be larger than the image width or height. @param colorKey an optional color key mask @return content of this image as an (A)RGB buffered image @throws IOException if the image cannot be read
3173 A dictionary containing any resources required by the page.
3174 A rectangle, expressed in default user space units, defining the boundaries of the physical medium on which the page is intended to be displayed or printed. @return the media box of the page
3175 Returns the rotation angle in degrees by which the page should be rotated clockwise when displayed or printed. Valid values in a PDF must be a multiple of 90. @return The rotation angle in degrees in normalized form (0, 90, 180 or 270) or 0 if invalid or not set at this level.
3176 This is a convenience method that will get the dictionary object that is expected to be a cos boolean and convert it to a primitive boolean. @param key The key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The value converted to a boolean.
3177 Get if the file is volatile. Default: false @return True if the file is volatile attribute is set.
3178 Shall the property be hidden? @return <code>true</code> if the property shall be hidden, <code>false</code> otherwise
3179 Will get the EncryptMetaData dictionary info. @return true if EncryptMetaData is explicitly set to false (the default is true)
3180 This will retrieve if the contents are shown as a caption or not. @return boolean if the content is shown as a caption.
3181 This will tell if the icon should scale to fit the annotation bounds. Default: false @return A flag telling if the icon should scale.
3182 A flag telling if the fields imported from the template may be renamed if there are conflicts. @return A flag telling if the fields can be renamed.
3183 Returns true if this group is isolated. Isolated groups begin with the fully transparent image, non-isolated begin with the current backdrop. @return true if this group is isolated
3184 Returns true if this group is a knockout. A knockout group blends with original backdrop, a non-knockout group blends with the current backdrop. @return true if this group is a knockout
3185 This will return the AntiAlias value. @return the AntiAlias value
3186 This will get the overprint control. @return The overprint control or null if one has not been set.
3187 This will get the automatic stroke adjustment flag. @return The automatic stroke adjustment flag or null if one has not been set.
3188 This will get the alpha source flag (“alpha is shape”), that specifies whether the current soft mask and alpha constant shall be interpreted as shape values (true) or opacity values (false). @return The alpha source flag.
3189 This will get the text knockout flag. @return The text knockout flag.
3190 A flag indicating whether to hide the annotation or show it @return true if annotation is hidden
3191 Gets the synchronous flag. It specifyes whether to play the sound synchronously or asynchronously. When true, the reader allows no further user interaction other than canceling the sound until the sound has been completely played. @return Whether to play the sound synchronously (true) or asynchronously (false, also the default).
3192 Gets whether to repeat the sound indefinitely. @return Whether to repeat the sound indefinitely (default: false).
3193 Gets the flag specifying whether to mix this sound with any other sound already playing. If this flag is false, any previously playing sound shall be stopped before starting this sound; this can be used to stop a repeating sound (see Repeat). @return whether to mix this sound with any other sound already playing (default: false).
3194 This will retrieve whether the text specified by the /Contents or /RC entries shall be shown as a caption in the appearance of the line. @return boolean if the contents shall be shown as a caption (default: false).
3195 This will retrieve the initial state of the annotation, open Or closed (default closed). @return The initial state, true = open false = closed
3196 A flag that can be used by the signature handler or software module to indicate that this signature was created with unrelease software. @return true if the software module or signature handler was a pre release.
3197 If there is a LegalPDF dictionary in the catalog of the PDF file and the NonEmbeddedFonts attribute in this dictionary has a non zero value, and the viewing application has a preference set to suppress the display of this warning then the value of this attribute will be set to true. @return true if NonEFontNoWarn is set to true @see #setNonEFontNoWarn(boolean)
3198 If true, the application was in trusted mode when signing took place. @return true if the application was in trusted mode while signing. default: false
3199 True if the viewing application should construct the appearances of all field widgets. The default value is false. @return the value of NeedAppearances, false if the value isn't set
3200 @return true if the area that shall be flown in is rectangular and opaque. Default is false. Only for {@link PDTransitionStyle#Fly}.
3201 Get the toolbar preference. @return the toolbar preference.
3202 Get the menubar preference. @return the menubar preference.
3203 Get the window UI preference. @return the window UI preference.
3204 Get the fit window preference. @return the fit window preference.
3205 Get the center window preference. @return the center window preference.
3206 Get the display doc title preference. @return the display doc title preference.
3207 Sets the given boolean value at bitPos in the flags. @param field The COSName of the field to set the value into. @param bitFlag the bit position to set the value in. @param value the value the bit position should have.
3208 Get an integer from an embedded dictionary. Useful for 1-1 mappings. @param embeddedDictionary The name of the embedded dictionary. @param key The key in the embedded dictionary. @param defaultValue The value if there is no embedded dictionary or it does not contain the key. @return The value of the embedded integer.
3209 This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The integer value.
3210 This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The integer value..
3211 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
3212 Gets the boolean value from the flags at the given bit position. @param field The COSName of the field to get the flag from. @param bitFlag the bitPosition to get the value from. @return true if the number at bitPos is '1'
3213 Returns the given COS page using a depth-first search. @param pageNum 1-based page number @param node page tree node to search @param encountered number of pages encountered so far @return COS dictionary of the Page object @throws IllegalStateException if the requested page number isn't found @throws IndexOutOfBoundsException if the requested page number is higher than the page count
3214 Returns the number of leaf nodes (page objects) that are descendants of this root within the page tree. @return the number of leaf nodes, 0 if not present
3215 Returns the start value for page numbering in this page range. @return a positive integer the start value for numbering.
3216 Get the order of interpolation between samples. Valid values are 1 and 3, specifying linear and cubic spline interpolation, respectively. Default is 1. See p.170 in PDF spec 1.7. @return order of interpolation.
3217 Returns the revision number (R). @return the revision number
3218 This will return the Length entry of the crypt filter dictionary.<br><br> The length in <b>bits</b> for the crypt filter algorithm. This will return a multiple of 8. @return The length in bits for the encryption algorithm
3219 This will return the V entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.13. @return The encryption version to use.
3220 This will return the Length entry of the encryption dictionary.<br><br> The length in <b>bits</b> for the encryption algorithm. This will return a multiple of 8. @return The length in bits for the encryption algorithm
3221 This will return the R entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.14. @return The encryption revision to use.
3222 This will get the permissions bit mask. @return The permissions bit mask.
3223 This will get the form of quadding (justification) of the annotation text. @return The quadding of the text.
3224 This will get the font flags. @return The font flags.
3225 Create the correct PD Model pattern based on the COS base pattern. @param dictionary the COS pattern dictionary @param resourceCache the resource cache, may be null, useful for tiling patterns. @return the newly created pattern object @throws IOException If we are unable to create the PDPattern object.
3226 This will return the paint type. @return The paint type
3227 This will return the tiling type. @return The tiling type
3228 Create the correct PD Model shading based on the COS base shading. @param shadingDictionary the COS shading dictionary @return the newly created shading resources object @throws IOException if we are unable to create the PDShading object
3229 The bits per flag of this shading. This will return -1 if one has not been set. @return The number of bits per flag.
3230 The vertices per row of this shading. This will return -1 if one has not been set. @return the number of vertices per row
3231 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
3232 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
3233 A set of flags specifying various characteristics of the action @return the flags
3234 A set of flags specifying various characteristics of the action @return the flags
3235 If the value in the /P entry is an integer, this will get the page number (zero-based) in the current document containing the file attachment annotation. @return the zero based page number or -1 if the /P entry value is missing or not a number.
3236 If the value in the /A entry is an integer, this will get the index (zero-based) of the annotation in the /Annots array of the page specified by the /P entry. @return the zero based page number or -1 if the /P entry value is missing or not a number.
3237 This will get the flags for this field. @return flags The set of flags.
3238 This will get the 'quadding' or justification of the text to be displayed. <br> 0 - Left (default)<br> 1 - Centered<br> 2 - Right<br> Please see the QUADDING_CONSTANTS in {@link PDVariableText }. @return The justification of the text strings.
3239 This will retrieve the rotation of the annotation widget. It must be a multiple of 90. Default is 0 @return the rotation
3240 Indicates if a timestamp is required. @return true if a timestamp is required
3241 Get the number of open nodes or a negative number if this node is closed. See PDF Reference 32000-1:2008 table 152 and 153 for more details. This value is updated as you append children and siblings. @return The Count attribute of the outline dictionary.
3242 This will get the document-wide default value for the quadding/justification of variable text fields. <p> 0 - Left(default)<br> 1 - Centered<br> 2 - Right<br> See the QUADDING constants of {@link PDVariableText}. @return The justification of the variable text fields.
3243 This will get the top index "TI" value. @return the top index, default value 0.
3244 This will get all dictionaries objects by type. @param type The type of the object. @return This will return all objects with the specified type.
3245 Returns the page tree. @return the page tree
3246 This will load a document from a file. @param file The name of the file to load. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
3247 This will load a document from an input stream. The stream is loaded to the memory to establish random access to the data. @param input The stream that contains the document. To read the stream {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used @return The document that was loaded. @throws IOException If there is an error reading from the stream.
3248 This will parse the stream and populate the PDDocument object. This will close the keystore stream when it is done parsing. Lenient mode is active by default. @return the populated PDDocument @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error reading from the stream or corrupt data is found.
3249 Remove all page resources from the cache to avoid relying on the implementation of the Cache. Does make sense after processing a page.
3250 Returns the color space resource with the given name, or null if none exists. @param name Name of the color space resource. @return a new color space. @throws IOException if something went wrong.
3251 Adds the given font to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param font the font to add @return the name of the resource in the resources dictionary
3252 Adds the given color space to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param colorSpace the color space to add @return the name of the resource in the resources dictionary
3253 Adds the given extended graphics state to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param extGState the extended graphics state to add @return the name of the resource in the resources dictionary
3254 Adds the given shading to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param shading the shading to add @return the name of the resource in the resources dictionary
3255 Adds the given pattern to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param pattern the pattern to add @return the name of the resource in the resources dictionary
3256 Adds the given property list to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param properties the property list to add @return the name of the resource in the resources dictionary
3257 Adds the given image to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param image the image to add @return the name of the resource in the resources dictionary
3258 Adds the given form to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param form the form to add @return the name of the resource in the resources dictionary
3259 Adds the given XObject to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param xobject the XObject to add @param prefix the prefix to be used when creating the resource name @return the name of the resource in the resources dictionary
3260 Get the embedded file. @return The embedded file for this file spec.
3261 Get the embedded dos file. @return The embedded dos file for this file spec.
3262 Get the embedded Mac file. @return The embedded Mac file for this file spec.
3263 Get the embedded Unix file. @return The embedded file for this file spec.
3264 Get the embedded unicode file. @return The embedded unicode file for this file spec.
3265 Indicates whether an optional content group is enabled. @param group the group object @return true if the group is enabled
3266 Enables or disables all optional content groups with the given name. @param groupName the group name @param enable true to enable, false to disable @return true if at least one group with this name already had an on or off setting, false otherwise
3267 Get the annotations normal appearance. <p> This will get the annotations normal appearance. If this is not existent an empty appearance entry will be created. @return the appearance entry representing the normal appearance.
3268 Get the annotations rollover appearance. <p> This will get the annotations rollover appearance. If this is not existent an empty appearance entry will be created. @return the appearance entry representing the rollover appearance.
3269 Get the annotations down appearance. <p> This will get the annotations down appearance. If this is not existent an empty appearance entry will be created. @return the appearance entry representing the down appearance.
3270 Set the selected option given its index, and try to update the visual appearance. NOTE: this method is only usable if there are export values and used for radio buttons with FLAG_RADIOS_IN_UNISON not set. @param index index of option to be selected @throws IOException if the value could not be set @throws IllegalArgumentException if the index provided is not a valid index.
3271 Prepends the child to the linked list of children. This method only adjust pointers but doesn't take care of the Count key in the parent hierarchy. @param newChild
3272 Appends the child to the linked list of children. This method only adjust pointers but doesn't take care of the Count key in the parent hierarchy. @param newChild
3273 Search acroform fields for signature field with specific signature dictionary. @param fieldIterator iterator on all fields. @param sigObject signature object (the /V part). @return a signature field if found, or null if none was found.
3274 Returns the appearance stream to process for the given annotation. May be used to render a specific appearance such as "hover". @param annotation The current annotation. @return The stream to process.
3275 Add font resources from the widget to the AcroForm to make sure embedded fonts are being used and not added by ensureFontResources potentially using a fallback font. @param acroFormResources AcroForm default resources, should not be null. @param annotation annotation, should not be null.
3276 Get the values to set individual buttons within a group to the on state. <p>The On value could be an arbitrary string as long as it is within the limitations of a PDF name object. The Off value shall always be 'Off'. If not set or not part of the normal appearance keys 'Off' is the default</p> @return the potential values setting the check box to the On state. If an empty Set is returned there is no appearance definition.
3277 This will tell if this radio button is currently checked or not. This is equivalent to calling {@link #getValue()}. @return true If this field is checked.
3278 Checks the check box. @throws IOException if the appearance couldn't be generated.
3279 Returns the index of the given page, or -1 if it does not exist. @param page The page to search for. @return the zero-based index of the given page, or -1 if the page is not found.
3280 Sets the parent to the given node. @param parentNode the node to be set as parent
3281 Set the children of this named tree. @param kids The children of this named tree. These have to be in sorted order. Because of that, it is usually easier to call {@link #setNames(Map)} with a map and pass a single element list here.
3282 Set the names for this node. This method will set the appropriate upper and lower limits based on the keys in the map and take care of the ordering. @param names map of names to objects, or <code>null</code> for nothing.
3283 Creates an page label dictionary for a document using the information in the given COS dictionary. <p> Note that the page label dictionary won't be automatically added to the document; you will still need to do it manually (see {@link org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)}. </p> @param document The document the page label dictionary is created for. @param dict an existing page label dictionary @see org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels) @throws IOException If something goes wrong during the number tree conversion.
3284 Get the encode for the input parameter. @param paramNum The function parameter number. @return The encode parameter range or null if none is set.
3285 Create a new CalGray color space.
3286 Creates a new CalRGB color space.
3287 Creates a new Lab color space.
3288 Creates a new CalGray color space using the given COS array. @param array the COS array which represents this color space
3289 Creates a new CalRGB color space using the given COS array. @param rgb the cos array which represents this color space
3290 Creates a new Lab color space from a PDF array. @param lab the color space array
3291 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds the bounds of the area to paint, in device units @throws IOException if there is an error getting the color space or doing color conversion.
3292 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds the bounds of the area to paint, in device units @throws IOException if there is an error getting the color space or doing color conversion.
3293 Constructor. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if there is an error getting the color space or doing background color conversion.
3294 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream
3295 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
3296 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
3297 Gets a name value. @param name the attribute name @param defaultValue the default value @return the name value
3298 This will retrieve the border effect, see the STYLE_* constants for valid values. @return the effect of the border or {@link #STYLE_SOLID} if none is found.
3299 Convenience method for annotations: sets the line with and dash style. @param lineWidth The line width. @param bs The border style, may be null. @param border The border array, must have at least three entries. This is only used if the border style is null. @throws IOException If there is an error writing to the content stream.
3300 Create a new document to write the split contents to. @return the newly created PDDocument. @throws IOException If there is an problem creating the new document.
3301 Sets the PDF specification version for this document. @param newVersion the new PDF version (e.g. 1.4f)
3302 Returns the structure tree root. @return the structure tree root
3303 Returns a list of objects for the kids (K). @return a list of objects for the kids, never null.
3304 This will get the encryption dictionary for this document. This will still return the parameters if the document was decrypted. As the encryption architecture in PDF documents is pluggable this returns an abstract class, but the only supported subclass at this time is a PDStandardEncryption object. @return The encryption dictionary(most likely a PDStandardEncryption object)
3305 Prepare for decryption. @throws InvalidPasswordException If the password is incorrect. @throws IOException if something went wrong
3306 Reads the font's Encoding entry, which should be a CMap name/stream.
3307 Some Type 1 fonts have an invalid Length1, which causes the binary segment of the font to be truncated, see PDFBOX-2350, PDFBOX-3677. @param bytes Type 1 stream bytes @param length1 Length1 from the Type 1 stream @return repaired Length1 value
3308 Some Type 1 fonts have an invalid Length2, see PDFBOX-3475. A negative /Length2 brings an IllegalArgumentException in Arrays.copyOfRange(), a huge value eats up memory because of padding. @param bytes Type 1 stream bytes @param length1 Length1 from the Type 1 stream @param length2 Length2 from the Type 1 stream @return repaired Length2 value
3309 This will return the value for the manner to display a fractional value. @return the manner to display a fractional value
3310 This will return the text to be used between orders of thousands in display of numerical values. @return thousands separator
3311 This will return the text to be used as the decimal point in displaying numerical values. @return decimal separator
3312 This will return the text to be concatenated to the left of the label specified by U. @return label prefix
3313 This will return the text to be concatenated after the label specified by U. @return label suffix
3314 This will return a value indicating the ordering of the label specified by U to the calculated unit value. @return label position
3315 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param embedded The embedded dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
3316 Returns a list of matching fonts, scored by suitability. Positive scores indicate matches for certain attributes, while negative scores indicate mismatches. Zero scores are neutral. @param fontDescriptor FontDescriptor, always present. @param cidSystemInfo Font's CIDSystemInfo, may be null.
3317 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param embedded The embedded dictionary to get. @param key The key to the item in the dictionary. @return The name converted to a string.
3318 Creates a new COSInputStream from an encoded input stream. @param filters Filters to be applied. @param parameters Filter parameters. @param in Encoded input stream. @return Decoded stream. @throws IOException If the stream could not be read.
3319 Constructor. @param stream The stream to parse. @param document The document for the current parsing. @throws IOException If there is an error initializing the stream.
3320 Constructor. @param stream The stream to parse. @throws IOException If there is an error initializing the stream.
3321 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @throws IOException if the font could not be read
3322 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @param trueTypeFont The true type font used to create the parent font @throws IOException if the font could not be read
3323 Reads a CMap given a COS Stream or Name. May return null if a predefined CMap does not exist. @param base COSName or COSStream @return the CMap if present @throws IOException if the CMap could not be read
3324 Creates a circle annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
3325 Creates a square annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
3326 Constructor. @param dict The annotations dictionary.
3327 Constructor. @param dict The annotations dictionary.
3328 Constructor. @param dict The annotations dictionary.
3329 Constructor. @param dict The annotations dictionary.
3330 Update the Pg and Obj references to the new (merged) page. @param parentTreeEntry @param objMapping mapping between old and new references
3331 This will add all of the dictionaries keys/values to this dictionary, but only if they are not in an exclusion list and if they don't already exist. If a key already exists in this dictionary then nothing is changed. @param src The source dictionary to get the keys/values from. @param dst The destination dictionary to merge the keys/values into. @param exclude Names of keys that shall be skipped.
3332 This will write the body of the document. @param doc The document to write the body for. @throws IOException If there is an error writing the data.
3333 Creates a cloudy border for a Polygon annotation. @param path polygon path @throws IOException If there is an error writing to the stream.
3334 Cloudy rectangle implementation is based on converting the rectangle to a polygon.
3335 Constructor. @param js Some javascript code.
3336 Creates a new tiling Paint. The parameters color and colorSpace must be null for a colored tiling Paint (because it has its own colors), and non null for an uncolored tiling Paint. @param drawer renderer to render the page @param pattern tiling pattern dictionary @param colorSpace color space for this tiling @param color color for this tiling @param xform device scale transform @throws java.io.IOException if something goes wrong while drawing the pattern
3337 Returns an RGB buffered image containing the opaque image stream without any masks applied. If this Image XObject is a mask then the buffered image will contain the raw mask. @param region The region of the source image to get, or null if the entire image is needed. The actual region will be clipped to the dimensions of the source image. @param subsampling The amount of rows and columns to advance for every output pixel, a value of 1 meaning every pixel will be read. It must not be larger than the image width or height. @return the image without any masks applied @throws IOException if the image cannot be read
3338 Returns the content of the given image as an AWT buffered image with an RGB color space. If a color key mask is provided then an ARGB image is returned instead. This method never returns null. @param pdImage the image to read @param colorKey an optional color key mask @return content of this image as an RGB buffered image @throws IOException if the image cannot be read
3339 Pushes the given stream's resources, returning the previous resources.
3340 Calculate the transform to be used when positioning the overlay. The default implementation centers on the destination. Override this method to do your own, e.g. move to a corner, or rotate. @param page The page that will get the overlay. @param overlayMediaBox The overlay media box. @return The affine transform to be used.
3341 Clips the given box to the bounds of the media box.
3342 This will find the MediaBox with rotation applied, for this page by looking up the hierarchy until it finds them. @return The MediaBox at this level in the hierarchy.
3343 Tells if this is a tagged PDF. @return true If this is a tagged PDF.
3344 Tells if structure elements use user properties. @return A boolean telling if the structure elements use user properties.
3345 Tells if this PDF contain 'suspect' tags. See PDF Reference 1.6 section 10.6 "Logical Structure" for more information about this property. @return true if the suspect flag has been set.
3346 This will specify whether to track the mouse position when the URI is resolved. Default value: false. This entry applies only to actions triggered by the user's clicking an annotation; it is ignored for actions associated with outline items or with a document's OpenAction entry. @return A flag specifying whether to track the mouse position when the URI is resolved.
3347 This will retrieve the initial state of the annotation, open Or closed (default closed). @return The initial state, true = open false = closed.
3348 This will return the value indication if the denominator of the fractional value is reduced/truncated . @return fd
3349 Specifies whether the property shall be hidden. @param hidden <code>true</code> if the property shall be hidden, <code>false</code> otherwise
3350 This will get the overprint control for non stroking operations. If this value is null then the regular overprint control value will be returned. @return The overprint control or null if one has not been set.
3351 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
3352 Set the invisible flag. @param invisible The new invisible flag.
3353 Set the hidden flag. @param hidden The new hidden flag.
3354 Set the printed flag. @param printed The new printed flag.
3355 Set the noZoom flag. @param noZoom The new noZoom flag.
3356 Set the noRotate flag. @param noRotate The new noRotate flag.
3357 Set the noView flag. @param noView The new noView flag.
3358 Set the readOnly flag. @param readOnly The new readOnly flag.
3359 Set the locked flag. @param locked The new locked flag.
3360 Set the toggleNoView flag. @param toggleNoView The new toggleNoView flag.
3361 Set the LockedContents flag. @param lockedContents The new LockedContents flag.
3362 Set the invisible flag. @param invisible The new invisible flag.
3363 Set the hidden flag. @param hidden The new hidden flag.
3364 Set the printed flag. @param printed The new printed flag.
3365 Set the noZoom flag. @param noZoom The new noZoom flag.
3366 Set the noRotate flag. @param noRotate The new noRotate flag.
3367 Set the noView flag. @param noView The new noView flag.
3368 Set the readOnly flag. @param readOnly The new readOnly flag.
3369 Set the locked flag. @param locked The new locked flag.
3370 Set the toggleNoView flag. @param toggleNoView The new toggleNoView flag.
3371 Set the LockedContents flag. If set, do not allow the contents of the annotation to be modified by the user. This flag does not restrict deletion of the annotation or changes to other annotation properties, such as position and size. @param lockedContents The new LockedContents flag value. @see <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#page=393">PDF 32000-1:2008 12.5.3, Table 165</a> @see #isLockedContents() @see #FLAG_LOCKED_CONTENTS @since PDF 1.7
3372 set true if the filter shall be required. @param flag if true, the specified Filter shall be used when signing.
3373 set true if the subfilter shall be required. @param flag if true, the first supported SubFilter in the array shall be used when signing.
3374 set true if the DigestMethod shall be required. @param flag if true, one digest from the array shall be used.
3375 set true if the V entry shall be required. @param flag if true, the V entry shall be used.
3376 set true if the Reason shall be required. @param flag if true, the Reason entry shall be used.
3377 set true if the LegalAttestation shall be required. @param flag if true, the LegalAttestation entry shall be used.
3378 set true if the AddRevInfo shall be required. @param flag if true, the AddRevInfo shall be used.
3379 set true if subject shall be required as a constraint on signature. @param flag if true, the specified Subject shall be enforced as a constraint.
3380 set true if Issuer shall be required as a constraint on signature. @param flag if true, the specified Issuer shall be enforced as a constraint.
3381 set true if OID shall be required as a constraint on signature. @param flag if true, the specified OID shall be enforced as a constraint.
3382 set true if subject DN shall be required as a constraint on signature. @param flag if true, the specified Subject DN shall be enforced as a constraint.
3383 set true if KeyUsage shall be required as a constraint on signature. @param flag if true, the specified KeyUsage shall be enforced as a constraint.
3384 set true if URL shall be required as a constraint on signature. @param flag if true, the specified URL shall be enforced as a constraint.
3385 Set the italic property of the text. @param italic The new italic flag.
3386 Set the bold property of the text. @param bold The new bold flag.
3387 Set the SignaturesExist bit. @param signaturesExist The value for SignaturesExist.
3388 Set the AppendOnly bit. @param appendOnly The value for AppendOnly.
3389 Set the Sort bit. @see #isSort() @param sort The value for Sort.
3390 Set the MultiSelect bit. @param multiSelect The value for MultiSelect.
3391 Set the DoNotSpellCheck bit. @param doNotSpellCheck The value for DoNotSpellCheck.
3392 Set the CommitOnSelChange bit. @param commitOnSelChange The value for CommitOnSelChange.
3393 Set the Combo bit. @param combo The value for Combo.
3394 Set the Edit bit. @param edit The value for Edit.
3395 sets the field to be read-only. @param readonly The new flag for readonly.
3396 sets the flag whether the field is to be required to have a value at the time it is exported by a submit-form action. @param required The new flag for required.
3397 sets the field to be not exported. @param noExport The new flag for noExport.
3398 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
3399 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
3400 From the PDF Spec <br> If set, a group of radio buttons within a radio button field that use the same value for the on state will turn on and off in unison; that is if one is checked, they are all checked. If clear, the buttons are mutually exclusive (the same behavior as HTML radio buttons). @param radiosInUnison The new flag for radiosInUnison.
3401 Set the multiline bit. @param multiline The value for the multiline.
3402 Set the password bit. @param password The value for the password.
3403 Set the file select bit. @param fileSelect The value for the fileSelect.
3404 Set the doNotSpellCheck bit. @param doNotSpellCheck The value for the doNotSpellCheck.
3405 Set the doNotScroll bit. @param doNotScroll The value for the doNotScroll.
3406 Set the comb bit. @param comb The value for the comb.
3407 Set the richText bit. @param richText The value for the richText.
3408 Get an integer from an embedded dictionary. Useful for 1-1 mappings. default:-1 @param embeddedDictionary The name of the embedded dictionary. @param key The key in the embedded dictionary. @return The value of the embedded integer.
3409 This will return the precision or denominator of a fractional amount. @return the precision or denominator
3410 Wraps and <code>OutputStream</code> in a predictor decoding stream as necessary. If no predictor is specified by the parameters, the original stream is returned as is. @param out The stream to which decoded data should be written @param decodeParams Decode parameters for the stream @return An <code>OutputStream</code> is returned, which will write decoded data into the given stream. If no predictor is specified, the original stream is returned.
3411 This will get the key of this Page in the structural parent tree. @return the integer key of the page's entry in the structural parent tree or -1 if there isn't any.
3412 Removes the given COS page.
3413 Adds the given page to this page tree. @param page The page to add.
3414 Get the number of bits that the output value will take up. Valid values are 1,2,4,8,12,16,24,32. @return Number of bits for each output value.
3415 Gets the marked content identifier. @return the marked content identifier
3416 Returns The next key for the parent tree. This is a number greater than any existing key, and which shall be used for the next entry to be added to the tree. @return The next key for the parent tree
3417 Gets the marked-content identifier. @return the marked-content identifier, or -1 if it doesn't exist.
3418 Creates a new CCITT Fax compressed image XObject from a TIFF file. @param document the document to create the image as part of. @param reader the random access TIFF file which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject, or null if no such page @throws IOException if there is an error reading the TIFF data.
3419 This will get the line cap style. @return null or the LC value of the dictionary.
3420 This will get the line join style. @return null or the LJ value in the dictionary.
3421 This will get the key of this annotation in the structural parent tree. @return the integer key of the annotation's entry in the structural parent tree or -1 if there isn't any.
3422 Return the P value. @return the P value
3423 Returns the maximum number of characters of the text field. @return the maximum number of characters, returns -1 if the value isn't present
3424 Gets an integer. @param name the attribute name @param defaultValue the default value @return the integer
3425 Get the invisible flag. @return The invisible flag.
3426 Get the hidden flag. @return The hidden flag.
3427 Get the printed flag. @return The printed flag.
3428 Get the noZoom flag. @return The noZoom flag.
3429 Get the noRotate flag. @return The noRotate flag.
3430 Get the noView flag. @return The noView flag.
3431 Get the readOnly flag. @return The readOnly flag.
3432 Get the locked flag. @return The locked flag.
3433 Get the toggleNoView flag. @return The toggleNoView flag.
3434 Get the LockedContents flag. @return The LockedContents flag.
3435 Get the invisible flag. @return The invisible flag.
3436 Get the hidden flag. @return The hidden flag.
3437 Get the printed flag. @return The printed flag.
3438 Get the noZoom flag. @return The noZoom flag.
3439 Get the noRotate flag. @return The noRotate flag.
3440 Get the noView flag. @return The noView flag.
3441 Get the readOnly flag. @return The readOnly flag.
3442 Get the locked flag. @return The locked flag.
3443 Get the toggleNoView flag. @return The toggleNoView flag.
3444 Get the LockedContents flag. @return The LockedContents flag. @see #setLockedContents(boolean)
3445 @return true if the Filter is required
3446 @return true if the SubFilter is required
3447 @return true if the DigestMethod is required
3448 @return true if the V entry is required
3449 @return true if the Reason is required
3450 @return true if the LegalAttestation is required
3451 @return true if the AddRevInfo is required
3452 @return true if the Subject is required
3453 @return true if the Issuer is required
3454 @return true if the OID is required
3455 @return true if the Subject DN is required
3456 @return true if the KeyUsage is required
3457 @return true if the URL is required
3458 A flag telling if the text should be italic. @return The italic flag.
3459 A flag telling if the text should be bold. @return The bold flag.
3460 Determines if SignaturesExist is set. @return true if the document contains at least one signature.
3461 Determines if AppendOnly is set. @return true if the document contains signatures that may be invalidated if the file is saved.
3462 Determines if push button bit is set. @return true if type of button field is a push button.
3463 Determines if radio button bit is set. @return true if type of button field is a radio button.
3464 Determines if Sort is set. <p> If set, the field’s option items shall be sorted alphabetically. The sorting has to be done when writing the PDF. PDF Readers are supposed to display the options in the order in which they occur in the Opt array. </p> @return true if the options are sorted.
3465 Determines if MultiSelect is set. @return true if multi select is allowed.
3466 Determines if DoNotSpellCheck is set. @return true if spell checker is disabled.
3467 Determines if CommitOnSelChange is set. @return true if value shall be committed as soon as a selection is made.
3468 Determines if Combo is set. @return true if value the choice is a combo box..
3469 Determines if Edit is set. @return true if the combo box shall include an editable text box as well as a drop-down list.
3470 @return true if the field is readonly
3471 @return true if the field is required to have a value at the time it is exported by a submit-form action.
3472 @return true if the field is not to be exported.
3473 @return true If the flag is set for radios in unison.
3474 @return true if the field is multiline
3475 @return true if the field is a password field.
3476 @return true if the field is a file select field.
3477 @return true if the field is not suppose to spell check.
3478 @return true if the field is not suppose to scroll.
3479 @return true if the field is not suppose to comb the text display.
3480 @return true if the field is a rich text field.
3481 Returns the page at the given index. @param index zero-based index @return the page at the given index @throws IllegalStateException if the requested index isn't found or doesn't point to a valid page dictionary @throws IndexOutOfBoundsException if the requested index is higher than the page count
3482 This will return the total page count of the PDF document. @return The total number of pages in the PDF document.
3483 Adds an attribute object. @param attributeObject the attribute object
3484 Updates the revision number for the given attribute object. @param attributeObject the attribute object
3485 Adds a class name. @param className the class name
3486 Increments th revision number.
3487 Prepares everything to decrypt the document. @param encryption encryption dictionary, can be retrieved via {@link PDDocument#getEncryption()} @param documentIDArray document id which is returned via {@link org.apache.pdfbox.cos.COSDocument#getDocumentID()} (not used by this handler) @param decryptionMaterial Information used to decrypt the document. @throws IOException If there is an error accessing data. If verbose mode is enabled, the exception message will provide more details why the match wasn't successful.
3488 This will get the O entry in the standard encryption dictionary. @return A 32 byte array or null if there is no owner key. @throws IOException If there is an error accessing the data.
3489 This will get the U entry in the standard encryption dictionary. @return A 32 byte array or null if there is no user key. @throws IOException If there is an error accessing the data.
3490 Returns the displacement vector (w0, w1) in text space, for the given character. For horizontal text only the x component is used, for vertical text only the y component. @param code character code @return displacement vector @throws IOException if the data could not be read
3491 Returns the width of the given Unicode string. @param text The text to get the width of. @return The width of the string in 1/1000 units of text space. @throws IOException If there is an error getting the width information. @throws IllegalArgumentException if a character isn't supported by the font.
3492 Returns the pattern resource with the given name, or null if none exists. @param name Name of the pattern resource. @return the pattern with the given name or null @throws IOException if something went wrong.
3493 Processes the operators of the given content stream. @param contentStream to content stream to parse. @throws IOException if there is an error reading or parsing the content stream.
3494 Returns the shading resource with the given name, or null if none exists. @param name Name of the shading resource. @return the shading state with the given name or null @throws IOException if something went wrong.
3495 This will get the shading resources for this pattern. @return The shading resources for this pattern. @throws IOException if something went wrong
3496 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
3497 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
3498 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
3499 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
3500 @return true if this node count is greater than zero, false otherwise.
3501 Creates a COSField subclass from the given field. @param form the form that the field is part of @param field the dictionary representing a field element @param parent the parent node of the node to be created @return the corresponding PDField instance
3502 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used. @param center true if the content is to be centered on the page (otherwise top-left). @param renderer the document renderer. Useful if {@link PDFRenderer} has been subclassed.
3503 Creates a new PDFRenderer. @param document the document to render
3504 This will load a document from a file. @param filename The name of the file to load. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
3505 Parses a PDF. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
3506 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws IOException in case of a file reading or parsing error
3507 RG Set the stroking colour space to DeviceRGB and set the colour to use for stroking operations. @param operator The operator that is being executed. @param arguments List @throws IOException If the color space cannot be read.
3508 Returns the XObject resource with the given name, or null if none exists. @param name Name of the XObject resource. @return the XObject with the given name or null @throws IOException if something went wrong.
3509 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
3510 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
3511 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
3512 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
3513 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
3514 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
3515 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
3516 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
3517 Indicates whether <em>at least one</em> optional content group with this name is enabled. There may be disabled optional content groups with this name even if this function returns true. @param groupName the group name @return true if at least one group is enabled
3518 Indicates whether an optional content group is enabled. @param group the group @return true if the group is enabled
3519 Adds the given node to the top of the children list. @param newChild The node to add. @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next sibling)
3520 Adds the given node to the bottom of the children list. @param newChild The node to add. @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next sibling)
3521 Checks value. @param value Name of radio button to select @throws IllegalArgumentException if the value is not a valid option.
3522 Replace the page destinations, if the source and destination pages are in the target document. This must be called after all pages (and its annotations) are processed. @param destinationDocument
3523 Returns the page labels descriptor of the document. @return the page labels descriptor of the document. @throws IOException If there is a problem retrieving the page labels.
3524 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if something went wrong
3525 Helper method for creating new documents at the appropriate pages. @throws IOException If there is an error creating the new document.
3526 This will write the header to the PDF document. @param doc The document to get the data from. @throws IOException If there is an error writing to the stream.
3527 Sets the optional content properties dictionary. The document version is incremented to 1.5 if lower. @param ocProperties the optional properties dictionary
3528 Returns the role map. @return the role map
3529 This will write the pdf document. If signature should be created externally, {@link #writeExternalSignature(byte[])} should be invoked to set signature after calling this method. @param doc The document to write. @param signInterface class to be used for signing; {@code null} if external signing would be performed or there will be no signing at all @throws IOException If an error occurs while generating the data. @throws IllegalStateException If the document has an encryption dictionary but no protection policy.
3530 Adds the given {@link COSBase} to this pool, using the given {@link COSObjectKey} as it's referencable ID. This method shall determine an appropriate key, for yet unregistered objects, to register them. Depending on the type of object, it shall either be appended as-is or shall be appended to a compressed {@link COSWriterObjectStream}. @param key The {@link COSObjectKey} that shall be used as the {@link COSBase}s ID, if possible. @param base The {@link COSBase}, that shall be registered in this pool.
3531 Protects the document with a protection policy. The document content will be really encrypted when it will be saved. This method only marks the document for encryption. It also calls {@link #setAllSecurityToBeRemoved(boolean)} with a false argument if it was set to true previously and logs a warning. <p> Do not use the document after saving, because the structures are encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @see org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy @see org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy @param policy The protection policy. @throws IOException if there isn't any suitable security handler.
3532 Prepare the document for encryption. @param doc The document that will be encrypted. @throws IOException If there is an error while encrypting.
3533 Returns the name of the glyph with the given character code. This is done by looking up the code in the parent font's ToUnicode map and generating a glyph name from that.
3534 Returns the GID for the given character code. @param code character code @return GID @throws IOException if the mapping could not be read
3535 Get the mac subtype. @return The mac subtype.
3536 Get the mac Creator. @return The mac Creator.
3537 Get the mac ResFork. @return The mac ResFork.
3538 Finds a CFF CID-Keyed font with the given PostScript name, or a suitable substitute, or null. This method can also map CJK fonts via their CIDSystemInfo (ROS). @param fontDescriptor FontDescriptor @param cidSystemInfo the CID system info, e.g. "Adobe-Japan1", if any.
3539 Returns a new InputStream which reads the decoded stream data. @return InputStream containing decoded stream data. @throws IOException If the stream could not be read.
3540 Brute force search for all objects streams of a pdf. @param xrefTable the cross reference table of the document @throws IOException if something went wrong
3541 Parse the object with the given key from the object stream with the given number. @param objstmObjNr the number of the offset stream @param key the key of the object to be parsed @return the parsed object @throws IOException if something went wrong when parsing the object
3542 Parses an xref object stream starting with indirect object id. @return value of PREV item in dictionary or <code>-1</code> if no such item exists
3543 Returns the content stream(s) of this page as a single input stream. @return An InputStream, never null. Multiple content streams are concatenated and separated with a newline. An empty stream is returned if the page doesn't have any content stream. @throws IOException If the stream could not be read
3544 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @throws IOException if the font could not be read
3545 Returns the descendant CIDFont.
3546 Create the correct annotation from the base COS object. @param base The COS object that is the annotation. @return The correctly typed annotation object, never null. @throws IOException If the annotation type is unknown.
3547 Creates a cloudy border for a rectangular annotation. The rectangle is specified by the <code>RD</code> entry and the <code>Rect</code> entry that was passed in to the constructor. <p> This can be used for Square and FreeText annotations. However, this does not produce the text and the callout line for FreeTexts. @param rd entry <code>RD</code>, or null if the entry does not exist @throws IOException If there is an error writing to the stream.
3548 Cloudy ellipse implementation.
3549 Creates a new colored tiling Paint, i.e. one that has its own colors. @param drawer renderer to render the page @param pattern tiling pattern dictionary @param xform device scale transform @throws java.io.IOException if something goes wrong while drawing the pattern
3550 Returns an RGB buffered image containing the opaque image stream without any masks applied. If this Image XObject is a mask then the buffered image will contain the raw mask. @return the image without any masks applied @throws IOException if the image cannot be read
3551 Create a new PDPage content stream. @param document The document the page is part of. @param sourcePage The page to write the contents to. @param appendContent Indicates whether content will be overwritten, appended or prepended. @param compress Tell if the content stream should compress the page contents. @param resetContext Tell if the graphic context should be reset. This is only relevant when the appendContent parameter is set to {@link AppendMode#APPEND}. You should use this when appending to an existing stream, because the existing stream may have changed graphic properties (e.g. scaling, rotation). @throws IOException If there is an error writing to the page contents.
3552 A rectangle, expressed in default user space units, defining the visible region of default user space. When the page is displayed or printed, its contents are to be clipped (cropped) to this rectangle. @return the cropbox of the page
3553 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
3554 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
3555 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
3556 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
3557 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
3558 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting data from the element.
3559 {@inheritDoc}
3560 {@inheritDoc}
3561 Removes the page with the given index from the page tree. @param index zero-based page index
3562 Removes the given page from the page tree. @param page The page to remove.
3563 This will add a page to the document. This is a convenience method, that will add the page to the root of the hierarchy and set the parent of the page to the root. @param page The page to add to the document.
3564 Insert a page before another page within a page tree. @param newPage the page to be inserted. @param nextPage the page that is to be after the new page. @throws IllegalArgumentException if one attempts to insert a page that isn't part of a page tree.
3565 Insert a page after another page within a page tree. @param newPage the page to be inserted. @param prevPage the page that is to be before the new page. @throws IllegalArgumentException if one attempts to insert a page that isn't part of a page tree.
3566 Appends a marked-content sequence kid. @param markedContent the marked-content sequence with the MCID. @throws IllegalArgumentException if the mcid is negative or doesn't exist.
3567 Fetches the corresponding UCS2 CMap if the font's CMap is predefined.
3568 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file stored in a byte array. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param byteArray the TIFF file in a byte array which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
3569 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param file the TIFF file which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
3570 This will set the display values - the 'Opt' key. <p> The Opt array specifies the list of options in the choice field either as an array of text strings representing the display value or as an array of a two-element array where the first element is the export value and the second the display value. </p> <p> To set both the export and the display value use {@link #setOptions(List, List)} </p> @param displayValues List containing all possible options.
3571 This will set the display and export values - the 'Opt' key. <p> This will set both, the export value and the display value of the choice field. If either one of the parameters is null or an empty list is supplied the options will be removed. </p> <p> An {@link IllegalArgumentException} will be thrown if the number of items in the list differ. </p> @see #setOptions(List) @param exportValues List containing all possible export values. @param displayValues List containing all possible display values.
3572 This will set the indices of the selected options - the 'I' key. <p> This method is preferred over {@link #setValue(List)} for choice fields which <ul> <li>do support multiple selections</li> <li>have export values with the same value</li> </ul> <p> Setting the index will set the value too. @param values List containing the indices of all selected options.
3573 Determine if the appearance shall provide a comb output. <p> May be set only if the MaxLen entry is present in the text field dictionary and if the Multiline, Password, and FileSelect flags are clear. If set, the field shall be automatically divided into as many equally spaced positions, or combs, as the value of MaxLen, and the text is laid out into those combs. </p> @return the comb state
3574 Returns the page at the given 0-based index. <p> This method is too slow to get all the pages from a large PDF document (1000 pages or more). For such documents, use the iterator of {@link PDDocument#getPages()} instead. @param pageIndex the 0-based page index @return the page at the given index.
3575 Creates a new instance of PageExtractor @param sourceDocument The document to split.
3576 Creates a new PDFPageable with the given page orientation and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer if non-zero, and optionally be centered. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed @param dpi if non-zero then the image will be rasterized at the given DPI @param center true if the content is to be centered on the page (otherwise top-left).
3577 Notifies the attribute object change listeners about a change in this attribute object.
3578 Prepares everything to decrypt the document. Only if decryption of single objects is needed this should be called. @param encryption encryption dictionary @param documentIDArray document id @param decryptionMaterial Information used to decrypt the document. @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error accessing data.
3579 Determines the width of the space character. This is very important for text extraction. @return the width of the space character
3580 Generate the appearance for comb fields. @param contents the content stream to write to @param appearanceStream the appearance stream used @param font the font to be used @param fontSize the font size to be used @throws IOException
3581 A convenience method that checks the flag bit. @return The flag value.
3582 A convenience method that checks the flag bit. @return The flag value.
3583 A convenience method that checks the flag bit. @return The flag value.
3584 A convenience method that checks the flag bit. @return The flag value.
3585 A convenience method that checks the flag bit. @return The flag value.
3586 A convenience method that checks the flag bit. @return The flag value.
3587 A convenience method that checks the flag bit. @return The flag value.
3588 A convenience method that checks the flag bit. @return The flag value.
3589 A convenience method that checks the flag bit. @return The flag value.
3590 A convenience method that sets the flag bit. @param flag The flag value.
3591 A convenience method that sets the flag bit. @param flag The flag value.
3592 A convenience method that sets the flag bit. @param flag The flag value.
3593 A convenience method that sets the flag bit. @param flag The flag value.
3594 A convenience method that sets the flag bit. @param flag The flag value.
3595 A convenience method that sets the flag bit. @param flag The flag value.
3596 A convenience method that sets the flag bit. @param flag The flag value.
3597 A convenience method that sets the flag bit. @param flag The flag value.
3598 A convenience method that sets the flag bit. @param flag The flag value.
3599 Returns the pattern for the given color. @param color color containing a pattern name @return pattern for the given color @throws java.io.IOException if the pattern name was not found.
3600 Processes a transparency group stream. @param group transparency group to be processed @throws IOException if the transparency group cannot be processed
3601 Processes a Type 3 character stream. @param charProc Type 3 character procedure @param textRenderingMatrix the Text Rendering Matrix @throws IOException if there is an error reading or parsing the character content stream.
3602 Process the given annotation with the specified appearance stream. @param annotation The annotation containing the appearance stream to process. @param appearance The appearance stream to process. @throws IOException If there is an error reading or parsing the appearance content stream.
3603 Process the given tiling pattern. Allows the pattern matrix to be overridden for custom rendering. @param tilingPattern the tiling pattern @param color color to use, if this is an uncoloured pattern, otherwise null. @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null. @param patternMatrix the pattern matrix, may be overridden for custom rendering. @throws IOException if there is an error reading or parsing the tiling pattern content stream.
3604 Process a content stream. @param contentStream the content stream @throws IOException if there is an exception while processing the stream
3605 The count parameter needs to be updated when you add, remove, open or close outline items. @param delta The amount to update by.
3606 Creates a COSField subclass from the given COS field. This is for reading fields from PDFs. @param form the form that the field is part of @param field the dictionary representing a field element @param parent the parent node of the node to be created, or null if root. @return a new PDField instance
3607 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used. @param center true if the content is to be centered on the page (otherwise top-left).
3608 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
3609 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws IOException in case of a file reading or parsing error
3610 Parses a PDF. Unrestricted main memory will be used for buffering PDF new streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
3611 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
3612 Parses a PDF. Unrestricted main memory will be used for buffering new/altered PDF streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
3613 Parses a PDF. Unrestricted main memory will be used for buffering new/altered PDF streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws IOException In case of a reading or parsing error.
3614 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
3615 Reads the visual signature from the given file. @param file the file containing the visual signature @throws IOException when something went wrong during parsing
3616 Reads the visual signature from the given input stream. @param is the input stream containing the visual signature @throws IOException when something went wrong during parsing
3617 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
3618 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
3619 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
3620 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
3621 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
3622 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
3623 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
3624 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
3625 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
3626 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
3627 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
3628 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
3629 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
3630 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
3631 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
3632 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
3633 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
3634 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
3635 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
3636 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
3637 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
3638 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
3639 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
3640 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
3641 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
3642 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
3643 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
3644 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
3645 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
3646 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
3647 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
3648 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
3649 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
3650 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
3651 Prepare document for encryption. @param document The document to encrypt. @throws IOException If there is an error accessing data.
3652 Sets the default value. @param value Name of option to select @throws IllegalArgumentException if the value is not a valid option.
3653 Set the selected option given its name, and try to update the visual appearance. @param value Name of option to select @throws IOException if the value could not be set @throws IllegalArgumentException if the value is not a valid option.
3654 Creates a clone of the source. @param src source dictionary or array. @param dstParent for the /P entry; parameter needed because arrays don't keep a parent. @param currentPageDict used to remember whether we have a page parent somewhere or not. Starts with null. @return a clone, or null if source is null or if there is no clone because it belongs to a different page or to no page.
3655 Returns the page number for this destination, regardless of whether this is a page number or a reference to a page. @see org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem @return the 0-based page number, or -1 if the destination type is unknown.
3656 Imports OCProperties from source document to target document so hidden layers can still be hidden after import. @param srcDoc The source PDF document that contains the /OCProperties to be copied. @throws IOException If an I/O error occurs.
3657 Rebuild a font subset.
3658 Returns the standard structure type, the actual structure type is mapped to in the role map. @return the standard structure type
3659 This will write the pdf document. If signature should be created externally, {@link #writeExternalSignature(byte[])} should be invoked to set signature after calling this method. @param doc The document to write. @throws IOException If an error occurs while generating the data.
3660 Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file or a stream, not if the document was created in PDFBox itself. There must be a path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set, starting from the document catalog. For signatures this is taken care by PDFBox itself. <p> Other usages of this method are for experienced users only. You will usually never need it. It is useful only if you are required to keep the current revision and append the changes. A typical use case is changing a signed file without invalidating the signature. <p> If your modification includes annotations, make sure these link back to their page by calling {@link PDAnnotation#setPage(PDPage)}. Although this is optional, not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. (PDFBox already does this for signature widget annotations) <p> Another problem with page-based modifications can occur if the page tree isn't flat: there won't be an closed update path from the catalog to the page. To fix this, add code like this: <pre>{@code COSDictionary parent = page.getCOSObject().getCOSDictionary(COSName.PARENT); while (parent != null) { parent.setNeedToBeUpdated(true); parent = parent.getCOSDictionary(COSName.PARENT); } }</pre> Don't use the input file as target as this will produce a corrupted file. @param output stream to write to. It will be closed when done. It <i><b>must never</b></i> point to the source file or that one will be harmed! @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream.
3661 Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file or a stream, not if the document was created in PDFBox itself. This allows to include objects even if there is no path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set so the incremental update gets smaller. Only dictionaries are supported; if you need to update other objects classes, then add their parent dictionary. <p> This method is for experienced users only. You will usually never need it. It is useful only if you are required to keep the current revision and append the changes. A typical use case is changing a signed file without invalidating the signature. To know which objects are getting changed, you need to have some understanding of the PDF specification, and look at the saved file with an editor to verify that you are updating the correct objects. You should also inspect the page and document structures of the file with PDFDebugger. <p> If your modification includes annotations, make sure these link back to their page by calling {@link PDAnnotation#setPage(PDPage)}. Although this is optional, not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. (PDFBox already does this for signature widget annotations) <p> Don't use the input file as target as this will produce a corrupted file. @param output stream to write to. It will be closed when done. It <i><b>must never</b></i> point to the source file or that one will be harmed! @param objectsToWrite objects that <b>must</b> be part of the incremental saving. @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream.
3662 Attempts to find yet unregistered streams and dictionaries in the given structure. @param current The object to be added for compressing. @throws IOException Shall be thrown, if compressing the object failed.
3663 Returns the contents of the stream as a PDF "text string". @return the PDF string representation of the stream content
3664 This will get a stream that can be read from. @return An input stream that can be read from. @throws IOException If an IO error occurs during reading.
3665 Create a patch list from a data stream, the returned list contains all the patches contained in the data stream. @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @return the obtained patch list @throws IOException when something went wrong
3666 Rebuild the trailer dictionary if startxref can't be found. @param xrefTable the cross reference table of the pdf @return the rebuild trailer dictionary @throws IOException if something went wrong
3667 Parse the object for the given object key. @param objKey key of object to be parsed @param requireExistingNotCompressedObj if <code>true</code> the object to be parsed must be defined in xref (comment: null objects may be missing from xref) and it must not be a compressed object within object stream (this is used to circumvent being stuck in a loop in a malicious PDF) @return the parsed object (which is also added to document object) @throws IOException If an IO error occurs.
3668 Parses cross reference tables. @param document the corresponding COS document of the pdf. @param startXRefOffset start offset of the first table @return the trailer dictionary @throws IOException if something went wrong
3669 Creates a new PDCIDFont instance with the appropriate subclass. @param dictionary descendant font dictionary @return a PDCIDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
3670 This will return a list of the annotations for this page. @param annotationFilter the annotation filter provided allowing to filter out specific annotations @return List of the PDAnnotation objects, never null. The returned list is backed by the annotations COSArray, so any adding or deleting in this list will change the document too. @throws IOException If there is an error while creating the annotation list.
3671 Gets a higher-level object for the referenced object. Currently this method may return a {@link PDAnnotation}, a {@link PDXObject} or <code>null</code>. @return a higher-level object for the referenced object
3672 This will retrieve the annotation to which this one is "In Reply To" the actual relationship is specified by the RT entry. @return the other annotation or null if there is none. @throws IOException if there is an error creating the other annotation.
3673 This will retrieve the markup annotation which this popup relates to. @return The parent markup annotation.
3674 Update the Pg and Obj references to the new (merged) page.
3675 Creates a cloudy border for a Circle annotation. The ellipse is specified by the <code>RD</code> entry and the <code>Rect</code> entry that was passed in to the constructor. @param rd entry <code>RD</code>, or null if the entry does not exist @throws IOException If there is an error writing to the stream.
3676 Get the annotations normal appearance content stream. <p> This will get the annotations normal appearance content stream, to 'draw' to. @param compress whether the content stream is to be compressed. Set this to true when creating long content streams. @return the appearance entry representing the normal appearance. @throws IOException
3677 Create a new PDPage content stream. This constructor overwrites all existing content streams of this page. @param document The document the page is part of. @param sourcePage The page to write the contents to. @throws IOException If there is an error writing to the page contents.
3678 Create a new PDPage content stream. If the appendContent parameter is set to {@link AppendMode#APPEND}, you may want to use {@link #PDPageContentStream(PDDocument, PDPage, PDPageContentStream.AppendMode, boolean, boolean)} instead, with the fifth parameter set to true. @param document The document the page is part of. @param sourcePage The page to write the contents to. @param appendContent Indicates whether content will be overwritten, appended or prepended. @param compress Tell if the content stream should compress the page contents. @throws IOException If there is an error writing to the page contents.
3679 Initializes the stream engine for the given page.
3680 A rectangle, expressed in default user space units, defining the region to which the contents of the page should be clipped when output in a production environment. The default is the CropBox. @return The BleedBox attribute.
3681 A rectangle, expressed in default user space units, defining the intended dimensions of the finished page after trimming. The default is the CropBox. @return The TrimBox attribute.
3682 A rectangle, expressed in default user space units, defining the extent of the page's meaningful content (including potential white space) as intended by the page's creator The default is the CropBox. @return The ArtBox attribute.
3683 This will find the CropBox with rotation applied, for this page by looking up the hierarchy until it finds them. @return The CropBox at this level in the hierarchy.
3684 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
3685 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
3686 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
3687 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
3688 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3689 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3690 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3691 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3692 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3693 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3694 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3695 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3696 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3697 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3698 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3699 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3700 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3701 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3702 Remove the page from the document. Do not use this method if other pages link to this one or if your document has a structure tree for accessibility unless you are able to fix these as well. In such cases it is better to use the splitter() class which will do these fixes. @param pageNumber 0 based index to page number.
3703 Remove the page from the document. Do not use this method if other pages link to this one or if your document has a structure tree for accessibility unless you are able to fix these as well. In such cases it is better to use the splitter() class which will do these fixes. @param page The page to remove from the document.
3704 This will import and copy the contents from another location. Currently the content stream is stored in a scratch file. The scratch file is associated with the document. If you are adding a page to this document from another document and want to copy the contents to this document's scratch file then use this method otherwise just use the {@link #addPage addPage()} method. <p> Unlike {@link #addPage addPage()}, this method creates a new PDPage object. If your page has annotations, and if these link to pages not in the target document, then the target document might become huge. What you need to do is to delete page references of such annotations. See <a href="http://stackoverflow.com/a/35477351/535646">here</a> for how to do this. <p> Inherited (global) resources are ignored because these can contain resources not needed for this page which could bloat your document, see <a href="https://issues.apache.org/jira/browse/PDFBOX-28">PDFBOX-28</a> and related issues. If you need them, call <code>importedPage.setResources(page.getResources());</code> <p> This method should only be used to import a page from a loaded document, not from a generated document because these can contain unfinished parts, e.g. font subsetting information. @param page The page to import. @return The page that was imported. @throws IOException If there is an error copying the page.
3705 Creates a PDDocument and adds the page parameter to it and keeps this as a template in the PDF template Structure. @param page the page to be added @throws IOException if the document could not be created
3706 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file stored in a byte array. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param byteArray the TIFF file in a byte array which contains a suitable CCITT compressed image @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
3707 Creates a new CCITT Fax compressed image XObject from the first image of a TIFF file. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(org.apache.pdfbox.pdmodel.PDDocument, java.awt.image.BufferedImage)} or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param file the TIFF file which contains a suitable CCITT compressed image @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
3708 Set the selected value of this field, and try to update the visual appearance. @param value The name of the selected item. @throws IOException if the value could not be set
3709 Update the 'I' key based on values set.
3710 Each page of document can be different sizes. This method calculates the page size based on the page media box. @param document @param page The 1-based page number for which the page size should be calculated. @throws IllegalArgumentException if the page argument is lower than 0.
3711 This method will attempt to find the page in this PDF document that this outline points to. If the outline does not point to anything then this method will return null. If the outline is an action that is not a GoTo action then this method will also return null. @param doc The document to get the page from. @return The page that this outline will go to when activated or null if it does not point to anything. @throws IOException If there is an error when trying to find the page.
3712 Creates a new PDFPageable. @param document the document to print
3713 Creates a new PDFPageable with the given page orientation. @param document the document to print @param orientation page orientation policy
3714 Creates a new PDFPageable with the given page orientation and with optional page borders shown. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed
3715 Creates a new PDFPageable with the given page orientation and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer if non-zero. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed @param dpi if non-zero then the image will be rasterized at the given DPI
3716 Returns a mapping with computed page labels as keys and corresponding 0-based page indices as values. The returned map will contain at most as much entries as the document has pages. <p> <strong>NOTE:</strong> If the document contains duplicate page labels, the returned map will contain <em>less</em> entries than the document has pages. The page index returned in this case is the <em>highest</em> index among all pages sharing the same label. </p> @return a mapping from labels to 0-based page indices.
3717 Returns a mapping with 0-based page indices as keys and corresponding page labels as values as an array. The array will have exactly as much entries as the document has pages. @return an array mapping from 0-based page indices to labels.
3718 Notifies the attribute object change listeners if the attribute is changed. @param oldBase old value @param newBase new value
3719 Called when a glyph is to be processed. The heuristic calculations here were originally written by Ben Litchfield for PDFStreamEngine.
3720 Break the paragraph into individual lines. @param font the font used for rendering the text. @param fontSize the fontSize used for rendering the text. @param width the width of the box holding the content. @return the individual lines. @throws IOException
3721 Returns the value of the symbolic flag, allowing for the fact that the result may be indeterminate. @return the value of the isSymbolic flag form the font descriptor
3722 Attempts to find a good fallback based on the font descriptor.
3723 Returns a PDFontDescriptor for the given PFB. @throws IOException if the font bounding box isn't available
3724 Returns a PDFontDescriptor for the given AFM. Used only for Standard 14 fonts. @param metrics AFM
3725 Creates a new font descriptor dictionary for the given TTF.
3726 Returns an AWT paint for the given PDColor. @param color The color to get a paint for. This can be an actual color or a pattern. @return an AWT paint for the given PDColor @throws IOException if the AWT paint could not be created
3727 Shows a transparency group from the content stream. @param form transparency group (form) XObject @throws IOException if the transparency group cannot be processed
3728 Processes a soft mask transparency group stream. @param group transparency group used for the soft mask @throws IOException if the transparency group cannot be processed
3729 Called when a glyph is to be processed. This method is intended for overriding in subclasses, the default implementation does nothing. @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub> @param font the current font @param code internal PDF character code for the glyph @param displacement the displacement (i.e. advance) of the glyph in text space @throws IOException if the glyph cannot be processed
3730 Shows the given annotation. @param annotation An annotation on the current page. @throws IOException If an error occurred reading the annotation
3731 Process the given tiling pattern. @param tilingPattern the tiling pattern @param color color to use, if this is an uncoloured pattern, otherwise null. @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null. @throws IOException if there is an error reading or parsing the tiling pattern content stream.
3732 Shows a form from the content stream. @param form form XObject @throws IOException if the form cannot be processed
3733 This will return all of the documents root fields. A field might have children that are fields (non-terminal field) or does not have children which are fields (terminal fields). The fields within an AcroForm are organized in a tree structure. The documents root fields might either be terminal fields, non-terminal fields or a mixture of both. Non-terminal fields mark branches which contents can be retrieved using {@link PDNonTerminalField#getChildren()}. @return A list of the documents root fields, never null. If there are no fields then this method returns an empty list.
3734 This will find one of the child elements. The name array are the components of the name to search down the tree of names. The nameIndex is where to start in that array. This method is called recursively until it finds the end point based on the name array. @param name An array that picks the path to the field. @param nameIndex The index into the array. @return The field at the endpoint or null if none is found.
3735 Returns this field's children. These may be either terminal or non-terminal fields. @return the list of child fields. Be aware that this list is <i>not</i> backed by the children of the field, so adding or deleting has no effect on the PDF document until you call {@link #setChildren(java.util.List) setChildren()} with the modified list.
3736 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used.
3737 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
3738 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error
3739 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error
3740 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error
3741 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws IOException in case of a file reading or parsing error
3742 Reads the visual signature from the given visual signature properties @param visSignatureProperties the <code>PDVisibleSigProperties</code> object containing the visual signature @throws IOException when something went wrong during parsing
3743 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
3744 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
3745 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
3746 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
3747 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
3748 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
3749 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
3750 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
3751 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
3752 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
3753 Imports a page from some PDF file as a Form XObject so it can be placed on another page in the target document. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before invoking the Form XObject to make sure that the graphics state is reset. @param sourceDoc the source PDF document that contains the page to be copied @param page the page in the source PDF document to be copied @return a Form XObject containing the original page's content @throws IOException if an I/O error occurs
3754 This will write the pdf document. @throws IOException If an error occurs while generating the data. @param doc The document to write.
3755 Save the document using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param output The stream to write to. It is recommended to wrap it in a {@link java.io.BufferedOutputStream}, unless it is already buffered. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
3756 <p> Constructs an object that can be used to compress the contents of a given {@link PDDocument}. It provides the means to: </p> <ul> <li>Compress the COSStructure of the document, by streaming {@link COSBase}s to compressed {@link COSWriterObjectStream}s</li> </ul> @param document The document, that shall be compressed. @param parameters The configuration of the compression operations, that shall be applied. @throws IOException Shall be thrown if a compression operation failed.
3757 Get a text or text stream. Some dictionary entries allow either a text or a text stream. @param base the potential text or text stream @return the text stream
3758 This will get the value for the field. The return type will either be: <ul> <li>String: for Checkboxes, Radio Button, Textfields</li> <li>List&lt;String&gt;: for a Choice Field</li> </ul> @return The value of the field. @throws IOException If there is an error getting the value.
3759 This will set the rich text that is associated with this field. @return The rich text XHTML stream.
3760 This will get the javascript that is executed before the import. @return Some javascript code.
3761 This will get the javascript that is executed after the import. @return Some javascript code.
3762 @return The Javascript Code.
3763 This will retrieve the rich text stream which is displayed in the popup window. @return the rich text stream.
3764 Get a text as text stream. Some dictionary entries allow either a text or a text stream. @param base the potential text or text stream @return the text stream
3765 Create a LayoutPage object from given PDPage object. @return @throws IOException
3766 This will copy the stream into a byte array. @return The byte array of the filteredStream. @throws IOException if an I/O error occurs.
3767 Get all sample values of this function. @return an array with all samples.
3768 Load the ICC profile, or init alternateColorSpace color space.
3769 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @throws IOException if something went wrong
3770 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream
3771 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if something went wrong
3772 Read the trailer information and provide a COSDictionary containing the trailer information. @return a COSDictionary containing the trailer information @throws IOException if something went wrong
3773 {@inheritDoc}
3774 {@inheritDoc}
3775 This will return a list of the annotations for this page. @return List of the PDAnnotation objects, never null. The returned list is backed by the annotations COSArray, so any adding or deleting in this list will change the document too. @throws IOException If there is an error while creating the annotation list.
3776 Get the annotations normal appearance content stream. <p> This will get the annotations normal appearance content stream, to 'draw' to. It will be uncompressed. @return the appearance entry representing the normal appearance. @throws IOException
3777 Places the given form over the existing content of the indicated page (like an overlay). The form is enveloped in a marked content section to indicate that it's part of an optional content group (OCG), here used as a layer. This optional group is returned and can be enabled and disabled through methods on {@link PDOptionalContentProperties}. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before calling this method to make sure that the graphics state is reset. @param targetPage the target page @param form the form to place @param transform the transformation matrix that controls the placement of your form. You'll need this if your page has a crop box different than the media box, or if these have negative coordinates, or if you want to scale or adjust your form. @param layerName the name for the layer/OCG to produce @return the optional content group that was generated for the form usage @throws IOException if an I/O error occurs
3778 This will initialize and process the contents of the stream. @param page the page to process @throws IOException if there is an error accessing the stream
3779 Process a child stream of the given page. Cannot be used with {@link #processPage(PDPage)}. @param contentStream the child content stream @param page the page to be used for processing @throws IOException if there is an exception while processing the stream
3780 {@inheritDoc} Returns the actual physical size of the pages in the PDF file. May not fit the local printer.
3781 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3782 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3783 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3784 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
3785 Sets the entry "V" to the given values. Requires {@link #isMultiSelect()} to be true. @param values the list of values @throws IOException if the appearance couldn't be generated.
3786 Constructor. @param document Already created PDDocument of your PDF document. @param imageStream Image as a stream. @param page The 1-based page number for which the page size should be calculated. @throws IOException If we can't read, flush, or can't close stream.
3787 Constructor. @param document Already created PDDocument of your PDF document. @param image the image to be used for the visible signature @param page The 1-based page number for which the page size should be calculated.
3788 Format the text block. @throws IOException if there is an error writing to the stream.
3789 My "not so great" method for calculating the fontsize. It does not work superb, but it handles ok. @return the calculated font-size @throws IOException If there is an error getting the font information.
3790 Reads the Encoding from the Font dictionary or the embedded or substituted font file. Must be called at the end of any subclass constructors. @throws IOException if the font file could not be read
3791 Internal implementation of isSymbolic, allowing for the fact that the result may be indeterminate. @return true if isSymbolic
3792 Finds a TrueType font with the given PostScript name, or a suitable substitute, or null. @param fontDescriptor FontDescriptor
3793 Finds a font with the given PostScript name, or a suitable substitute, or null. This allows any font to be substituted with a PFB, TTF or OTF. @param fontDescriptor the FontDescriptor of the font to find
3794 This will load a PFB to be embedded into a document. @param doc The PDF document that will hold the embedded font. @param dict The Font dictionary to write to. @param pfbStream The pfb input. @throws IOException If there is an error loading the data.
3795 Constructor for Standard 14.
3796 Creates a new TrueType font for embedding.
3797 Called when a glyph is to be processed. This method is intended for overriding in subclasses, the default implementation does nothing. @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub> @param font the current font @param code internal PDF character code for the glyph @param displacement the displacement (i.e. advance) of the glyph in text space @throws IOException if the glyph cannot be processed
3798 This will set this node to be open when it is shown in the viewer. By default, when a new node is created it will be closed. This will do nothing if the node is already open.
3799 Close this node.
3800 This will export all FDF form data. @return An FDF document used to export the document. @throws IOException If there is an error when exporting the document.
3801 This will tell if the AcroForm is a dynamic XFA form. @return true if the AcroForm is a dynamic XFA form
3802 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed
3803 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
3804 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error @deprecated use {@link Loader#loadPDF(File, String)} instead
3805 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error
3806 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
3807 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
3808 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
3809 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
3810 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
3811 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
3812 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
3813 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
3814 Initialize the content of the appearance stream. Get settings like border style, border width and colors to be used to draw a rectangle and background color around the widget @param widget the field widget @param appearanceCharacteristics the appearance characteristics dictionary from the widget or null @param appearanceStream the appearance stream to be used @throws IOException in case we can't write to the appearance stream
3815 Write font name, font size and color from the /DA string to the given content stream. @param contents The content stream. @param zeroFontSize The calculated font size to use if the /DA string has a size 0 (autosize). Otherwise the size from the /DA string is used.
3816 Imports a page from some PDF file as a Form XObject so it can be placed on another page in the target document. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before invoking the Form XObject to make sure that the graphics state is reset. @param sourceDoc the source PDF document that contains the page to be copied @param pageNumber the 0-based page number of the page to be copied @return a Form XObject containing the original page's content @throws IOException if an I/O error occurs
3817 This will save the document to an output stream. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param output The stream to write to. It is recommended to wrap it in a {@link java.io.BufferedOutputStream}, unless it is already buffered. @throws IOException if the output could not be written
3818 Save the document using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param file The file to save as. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
3819 This will write the compressed body of the document. @param document The document to write the body for. @throws IOException If there is an error writing the data.
3820 This will retrieve the rich text stream which is displayed in the popup window. @return the rich text stream.
3821 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
3822 Get the fields rich text value. @return the rich text value string
3823 Create a LayoutPage object from the first page of the given document. @param doc @return @throws IOException
3824 Constructor. @param functionStream The function stream. @throws IOException if an I/O error occurs while reading the function
3825 Do a linear interpolation if the two coordinates can be known, or call itself recursively twice. @param coord coord partially set coordinate (not set from step upwards); gets fully filled in the last call ("leaf"), where it is used to get the correct sample @param step between 0 (first call) and dimension - 1 @return interpolated result sample
3826 Creates a new ICC color space using the PDF array. @param iccArray the ICC stream object. @throws IOException if there is an error reading the ICC profile or if the parameter is invalid.
3827 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @throws IOException if something went wrong
3828 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @throws IOException if something went wrong
3829 Get the XFA content as byte array. The XFA is either a stream containing the entire XFA resource or an array specifying individual packets that together make up the XFA resource. A packet is a pair of a string and stream. The string contains the name of the XML element and the stream contains the complete text of this XML element. Each packet represents a complete XML element, with the exception of the first and last packet, which specify begin and end tags for the xdp:xdp element. [IS0 32000-1:2008: 12.7.8] @return the XFA content @throws IOException if the XFA content could not be created
3830 Update the StructParents and StructParent values in a PDPage. @param page the new page @param structParentOffset the offset which should be applied
3831 Clone the structure tree from the source to the current destination document. This must be called after all pages are processed. @param destinationDocument @throws IOException
3832 Clone all annotations because of changes possibly made, and because the structure tree is cloned. @param imported @throws IOException
3833 Build a map of page => set of widgets to be flattened @param fields a list of fields to be flattened @param pages the page tree @return @throws IOException
3834 This will initialize and process the contents of the stream. @param page the page to process @throws java.io.IOException if there is an error accessing the stream.
3835 This will create an FDF dictionary from an XFDF XML document. @param fdfXML The XML document that contains the XFDF data.
3836 This will import a fdf field from a fdf document. @param fdfField The fdf field to import. @throws IOException If there is an error importing the data for this field.
3837 Constructor. @param documentSource Original PDF document as RandomAccessRead @param imageStream Image as a stream @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
3838 Constructor. @param documentSource Original PDF document as RandomAccessRead @param image the image to be used for the visible signature @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
3839 Returns true if the font is a symbolic (that is, it does not use the Adobe Standard Roman character set). @return true if the font is a symbolic
3840 Creates a new Type 1 font for embedding. @param doc PDF document to write to @param pfbIn PFB file stream @param encoding encoding to be used for the font @throws IOException if the font could not be read
3841 Constructor for Standard 14.
3842 Constructor. @param fontDictionary Font dictionary.
3843 Creates a new TrueType font embedder for the given TTF as a PDCIDFontType2. @param document parent document @param dict font dictionary @param ttf True Type Font @param parent parent Type 0 font @throws IOException if the TTF could not be read
3844 Creates a new TrueType font embedder for the given TTF as a PDTrueTypeFont. @param document The parent document @param dict Font dictionary @param ttf TrueType font @param encoding The PostScript encoding vector to be used for embedding. @throws IOException if the TTF could not be read
3845 Test for dynamic XFA content. @param acroForm the AcroForm @return true if there is a dynamic XFA form.
3846 Creates a new PDFPrintable with the given page scaling. @param document the document to print @param scaling page scaling policy
3847 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error @deprecated use {@link Loader#loadPDF(File)} instead
3848 Generate and insert text content and clipping around it.
3849 Build a PDF with a visible signature step by step, and return it as a stream. @param properties properties to be used for the creation @return InputStream stream containing the pdf holding the visible signature @throws IOException if the PDF could not be created
3850 Save the document to a file using default compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param file The file to save as. @throws IOException if the output could not be written
3851 Save the document to a file using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param fileName The file to save as. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
3852 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
3853 Create the correct PD Model function based on the COS base function. @param function The COS function dictionary. @return The PDModel Function object, never null. @throws IOException If we are unable to create the PDFunction object.
3854 Calculate the interpolation. @return interpolated result sample
3855 Creates a new ICC color space using the PDF array, optionally using a resource cache. @param iccArray the ICC stream object. @param resources resources to use as cache, or null for no caching. @return an ICC color space. @throws IOException if there is an error reading the ICC profile or if the parameter is invalid.
3856 Creates a new lossless encoded image XObject from a BufferedImage. <p> <u>New for advanced users from 2.0.12 on:</u><br> If you created your image with a non standard ICC colorspace, it will be preserved. (If you load images in java using ImageIO then no need to read this segment) However a new colorspace will be created for each image. So if you create a PDF with several such images, consider replacing the colorspace with a common object to save space. This is done with {@link PDImageXObject#getColorSpace()} and {@link PDImageXObject#setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace) PDImageXObject.setColorSpace()} @param document the document where the image will be created @param image the BufferedImage to embed @return a new image XObject @throws IOException if something goes wrong
3857 Extract the matte color from a softmask. @param softMask @return the matte color. @throws IOException if the color conversion fails.
3858 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
3859 Get the XFA content as W3C document. @see #getBytes() @return the XFA content @throws IOException if something went wrong when reading the XFA content.
3860 Draws the page to the requested context. @param g The graphics context to draw onto. @param pageSize The size of the page to draw. @throws IOException If there is an IO error while drawing the page.
3861 Interface to start processing a new page. @param page The page that is about to get processed. @throws IOException If there is an error creating the new document.
3862 This will initialize and process the contents of the stream. @param page the page to process @throws java.io.IOException if there is an error accessing the stream.
3863 This will process the contents of a page. @param page The page to process. @throws IOException If there is an error processing the page.
3864 This will create an FDF catalog from an XFDF XML document. @param element The XML document that contains the XFDF data.
3865 Creates a new Type 1 font for embedding. @param doc PDF document to write to @param pfbIn PFB file stream @throws IOException if the font could not be read
3866 Creates a Type 1 standard 14 font for embedding. @param baseFont One of the standard 14 PostScript names, e.g. {@link FontName#HELVETICA_BOLD}.
3867 Constructor. @param fontDictionary Font dictionary.
3868 Constructor for reading a Type0 font from a PDF file. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the descendant font is missing.
3869 Private. Creates a new PDType0Font font for embedding. @param document @param ttf @param embedSubset @param closeTTF whether to close the ttf parameter after embedding. Must be true when the ttf parameter was created in the load() method, false when the ttf parameter was passed to the load() method. @param vertical whether to enable vertical substitutions. @throws IOException
3870 Creates a new TrueType font for embedding.
3871 Returns an iterator which walks all fields in the tree, in order.
3872 Creates a new PDFPrintable. @param document the document to print
3873 Constructor. @param filename Path of the PDF file @param imageStream image as a stream @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
3874 Constructor. @param filename Path of the PDF file @param image the image to be used for the visible signature @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
3875 start building of visible signature @throws IOException if the output could not be written
3876 Save the document to a file using default compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param fileName The file to save as. @throws IOException if the output could not be written
3877 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
3878 {@inheritDoc}
3879 Creates a new DeviceN color space from the given COS array. @param deviceN an array containing the color space information @param resources resources, can be null. @throws IOException if the colorspace could not be created
3880 This will get the tint transform function. @return The tint transform function. @throws IOException if there is an error creating the function.
3881 Creates a new Separation color space from a PDF color space array. @param separation an array containing all separation information. @param resources resources, can be null. @throws IOException if the color space or the function could not be created.
3882 This will return the function used to convert the color values. @return the function @throws java.io.IOException if we were not able to create the function.
3883 Provide the function(s) of the shading dictionary as array. @return an array containing the function(s). @throws IOException if we were unable to create a function.
3884 Returns the transfer function. @return the transfer function @throws IOException If we are unable to create the PDFunction object.
3885 Creates a new indexed color space from the given PDF array. @param indexedArray the array containing the indexed parameters @param resources the resources, can be null. Allows to use its cache for the colorspace. @throws IOException if the colorspace could not be created
3886 {@inheritDoc}
3887 Build the base image object from the IDATs and profile information
3888 Create a PDImageXObject from an image file. The file format is determined by the file name suffix. The following suffixes are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromStream}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param file the image file. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
3889 Create a PDImageXObject from an image file. The file format is determined by the file content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromStream}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param file the image file. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
3890 {@inheritDoc}
3891 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
3892 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
3893 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
3894 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
3895 Returns the given page as an RGB or ARGB image at the given scale. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @param imageType the type of image to return @param destination controlling visibility of optional content groups @return the rendered page image @throws IOException if the PDF cannot be read
3896 Renders a given page to an AWT Graphics2D instance. <p> Known problems: <ul> <li>rendering of PDF files with transparencies is not supported on Ubuntu, see <a href="https://issues.apache.org/jira/browse/PDFBOX-4581">PDFBOX-4581</a> and <a href="https://bugs.openjdk.java.net/browse/JDK-6689349">JDK-6689349</a>. Rendering will not abort, but the pages will be rendered incorrectly.</li> <li>Clipping the Graphics2D will not work properly, see <a href="https://issues.apache.org/jira/browse/PDFBOX-4583">PDFBOX-4583</a>.</li> </ul> If you encounter these problems, then you should render into an image by using the {@link #renderImage(int) renderImage} methods. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scaleX the scale to draw the page at for the x-axis, where 1 = 72 DPI @param scaleY the scale to draw the page at for the y-axis, where 1 = 72 DPI @param destination controlling visibility of optional content groups @throws IOException if the PDF cannot be read
3897 Interface method to handle the start of the page processing. @throws IOException If an IO error occurs.
3898 This will process all of the pages and the text that is in them. @param pages The pages object in the document. @throws IOException If there is an error parsing the text.
3899 This will create an FDF document from an XFDF XML document. @param doc The XML document that contains the XFDF data. @throws IOException If there is an error reading from the dom.
3900 Provide standard 14 Helvetica font as default if there isn't any font available. @return the default font
3901 Returns the mapped font for the specified Standard 14 font. The mapped font is cached. @param baseName name of the standard 14 font @return the mapped font
3902 Creates a new TrueType font from a Font dictionary. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the font could not be created
3903 Constructor. @param fontDictionary the corresponding dictionary @throws IOException it something went wrong
3904 Creates a Type 1 font from a Font dictionary in a PDF. @param fontDictionary font dictionary. @throws IOException if there was an error initializing the font. @throws IllegalArgumentException if /FontFile3 was used.
3905 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param resourceCache Resource cache, can be null. @throws IOException if the font could not be created
3906 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param randomAccessRead source of a TrueType font. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @param vertical whether to enable vertical substitutions. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
3907 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param ttf A TrueType font. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
3908 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param ttf A TrueType font. @param embedSubset True if the font will be subset before embedding @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
3909 Loads a TTF to be embedded into a document as a simple font. <p> <b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, InputStream)} instead. </p> @param doc The PDF document that will hold the embedded font. @param ttf A true type font @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
3910 Loads a TTF to be embedded into a document as a simple font. <p> <b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, File)} instead. </p> @param doc The PDF document that will hold the embedded font. @param randomAccessRead the source of the TTF. @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
3911 Retrieve all signature fields from the document. @return a <code>List</code> of <code>PDSignatureField</code>s
3912 Refreshes the appearance streams and appearance dictionaries for the widget annotations of all fields. @throws IOException if the appearance streams could not be refreshed
3913 Returns an iterator which walks all fields in the field tree, in order. @return an iterator which walks all fields in the field tree
3914 This will tell this form to cache the fields into a Map structure for fast access via the getField method. The default is false. You would want this to be false if you were changing the COSDictionary behind the scenes, otherwise setting this to true is acceptable. @param cache A boolean telling if we should cache the fields.
3915 This will get a field by name, possibly using the cache if setCache is true. @param fullyQualifiedName The name of the field to get. @return The field with that name of null if one was not found.
3916 This will add overlays to a document. @param specificPageOverlayMap Optional map of overlay files of which the first page will be used for specific pages of the input document. The page numbers are 1-based. The map must be empty (but not null) if no specific mappings are used. @return The modified input PDF document, which has to be saved and closed by the caller. If the input document was passed by {@link #setInputPDF(PDDocument) setInputPDF(PDDocument)} then it is that object that is returned. @throws IOException if something went wrong. @throws IllegalArgumentException if the input document is missing.
3917 This will add overlays documents to a document. If you created the overlay documents with subsetted fonts, you need to save them first so that the subsetting gets done. @param specificPageOverlayDocumentMap Optional map of overlay documents for specific pages. The page numbers are 1-based. The map must be empty (but not null) if no specific mappings are used. @return The modified input PDF document, which has to be saved and closed by the caller. If the input document was passed by {@link #setInputPDF(PDDocument) setInputPDF(PDDocument)} then it is that object that is returned. @throws IOException if something went wrong
3918 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
3919 Creates a color space given a name or array. Abbreviated device color names are not supported here, please replace them first. This method is for PDFBox internal use only, others should use {@link #create(COSBase, PDResources)}. @param colorSpace the color space COS object @param resources the current resources. @param wasDefault if current color space was used by a default color space. @return a new color space. @throws MissingResourceException if the color space is missing in the resources dictionary @throws IOException if the color space is unknown or cannot be created.
3920 Convert the input values using the functions of the shading dictionary. @param input the input values @return the output values @throws IOException thrown if something went wrong
3921 Creates a new indexed color space from the given PDF array. @param indexedArray the array containing the indexed parameters @throws IOException if the colorspace could not be created
3922 Create a PDImageXObject from an image file, see {@link #createFromFileByExtension(File, PDDocument)} for more details. @param imagePath the image file path. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject, or if the image type is not supported.
3923 {@inheritDoc} The returned images are cached via a SoftReference.
3924 Returns the given page as an RGB or ARGB image at the given scale. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @param imageType the type of image to return @return the rendered page image @throws IOException if the PDF cannot be read
3925 Renders a given page to an AWT Graphics2D instance. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scaleX the scale to draw the page at for the x-axis, where 1 = 72 DPI @param scaleY the scale to draw the page at for the y-axis, where 1 = 72 DPI @throws IOException if the PDF cannot be read
3926 This will take a document and split into several other documents. @param document The document to split. @return A list of all the split documents. These should all be saved before closing any documents, including the source document. Any further operations should be made after reloading them, to avoid problems due to resource sharing. For the same reason, they should not be saved with encryption. @throws IOException If there is an IOError
3927 This will take a PDDocument and write the text of that document to the print writer. @param doc The document to get the data from. @param outputStream The location to put the text. @throws IOException If the doc is in an invalid state.
3928 This will load a document from an input stream. The stream is loaded to the memory to establish random access to the data. @param input The stream that contains the document. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
3929 Process text from the PDF Stream. You should override this method if you want to perform an action when encoded text is being processed. @param string the encoded text @throws IOException if there is an error processing the string
3930 Returns the path for the character with the given name for the specified Standard 14 font. The mapped font is cached. The path may differ in different environments as it depends on the mapped font. @param baseName name of the standard 14 font @param glyphName name of glyph @return the mapped font @throws IOException if the data could not be read
3931 Creates an MMType1Font from a Font dictionary in a PDF. @param fontDictionary font dictionary @throws IOException if the font could not be read
3932 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the font could not be created
3933 Loads a TTF to be embedded and subset into a document as a Type 0 font. If you are loading a font for AcroForm, then use the 3-parameter constructor instead. @param doc The PDF document that will hold the embedded font. @param file A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font file.
3934 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param input An input stream of a TrueType font. It will be closed before returning. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
3935 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param file A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font file.
3936 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param input A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
3937 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param input A TrueType font. @param embedSubset True if the font will be subset before embedding @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
3938 Loads a TTF to be embedded into a document as a simple font. <p><b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, File)} instead.</p> @param doc The PDF document that will hold the embedded font. @param file A TTF file. @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
3939 Loads a TTF to be embedded into a document as a simple font. <p><b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, InputStream)} instead.</p> @param doc The PDF document that will hold the embedded font. @param input A TTF file stream @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
3940 Retrieve all signature dictionaries from the document. @return a <code>List</code> of <code>PDSignatureField</code>s
3941 This will add a signature to the document. If the 0-based page number in the options parameter is smaller than 0 or larger than max, the nearest valid page number will be used (i.e. 0 or max) and no exception will be thrown. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param signatureInterface is an interface whose implementation provides signing capabilities. Can be null if external signing if used. @param options signature options @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
3942 This method will import an entire FDF document into the PDF document that this acroform is part of. @param fdf The FDF document to import. @throws IOException If there is an error doing the import.
3943 This will save the document to an output stream and close the stream. @param output The stream to write to. @throws IOException If there is an error writing the document.
3944 Convert the input value using the functions of the shading dictionary. @param inputValue the input value @return the output values @throws IOException thrown if something went wrong
3945 Convert color to RGB color value, using function if required, then convert from the shading color space to an RGB value, which is encoded into an integer.
3946 Returns the non-stroking AWT Paint. You may need to call this if you override {@link #showGlyph(Matrix, PDFont, int, Vector) showGlyph()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5093">PDFBOX-5093</a> for more. @return The non-stroking AWT Paint. @throws IOException if the non-stroking AWT Paint could not be created
3947 For advanced users, to extract the transparency group into a separate graphics device. @param form the transparency group to be extracted @param graphics the target graphics device @throws IOException if the transparency group could not be extracted
3948 Returns the given page as an RGB image at the given scale. A scale of 1 will render at 72 DPI. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @return the rendered page image @throws IOException if the PDF cannot be read
3949 Returns the given page as an RGB image at the given DPI. @param pageIndex the zero-based index of the page to be converted @param dpi the DPI (dots per inch) to render at @return the rendered page image @throws IOException if the PDF cannot be read
3950 Returns the given page as an RGB image at the given DPI. @param pageIndex the zero-based index of the page to be converted @param dpi the DPI (dots per inch) to render at @param imageType the type of image to return @return the rendered page image @throws IOException if the PDF cannot be read
3951 Renders a given page to an AWT Graphics2D instance. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scale the scaling factor, where 1 = 72 DPI @throws IOException if the PDF cannot be read
3952 This will take a document and extract the desired pages into a new document. Both startPage and endPage are included in the extracted document. If the endPage is greater than the number of pages in the source document, it will go to the end of the document. If startPage is less than 1, it'll start with page 1. If startPage is greater than endPage or greater than the number of pages in the source document, a blank document will be returned. @return The extracted document @throws IOException If there is an IOError
3953 This will return the text of a document. See writeText. <br> NOTE: The document must not be encrypted when coming into this method. <p>IMPORTANT: By default, text extraction is done in the same sequence as the text in the PDF page content stream. PDF is a graphic format, not a text format, and unlike HTML, it has no requirements that text one on page be rendered in a certain order. The order is the one that was determined by the software that created the PDF. To get text sorted from left to right and top to botton, use {@link #setSortByPosition(boolean)}. @param doc The document to get the text from. @return The text of the PDF document. @throws IOException if the doc state is invalid or it is encrypted.
3954 This will load a document from a file. @param filename The name of the file to load. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
3955 This will load a document from a file. @param file The name of the file to load. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
3956 Called when a string of text is to be shown. @param string the encoded text @throws IOException if there was an error showing the text
3957 Called when a string of text with spacing adjustments is to be shown. @param array array of encoded text strings and adjustments @throws IOException if there was an error showing the text
3958 Creates a new PDFont instance with the appropriate subclass. @param dictionary a font dictionary @param resourceCache resource cache, only useful for type 3 fonts, can be null @return a PDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
3959 Loads a TTF to be embedded and subset into a document as a Type 0 font. If you are loading a font for AcroForm, then use the 3-parameter constructor instead. @param doc The PDF document that will hold the embedded font. @param input An input stream of a TrueType font. It will be closed before returning. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
3960 This will return the last signature from the field tree. Note that this may not be the last in time when empty signature fields are created first but signed after other fields. @return the last signature as <code>PDSignatureField</code>.
3961 Save PDF incrementally without closing for external signature creation scenario. The general sequence is: <pre> PDDocument pdDocument = ...; OutputStream outputStream = ...; SignatureOptions signatureOptions = ...; // options to specify fine tuned signature options or null for defaults PDSignature pdSignature = ...; // add signature parameters to be used when creating signature dictionary pdDocument.addSignature(pdSignature, signatureOptions); // prepare PDF for signing and obtain helper class to be used ExternalSigningSupport externalSigningSupport = pdDocument.saveIncrementalForExternalSigning(outputStream); // get data to be signed InputStream dataToBeSigned = externalSigningSupport.getContent(); // invoke signature service byte[] signature = sign(dataToBeSigned); // set resulted CMS signature externalSigningSupport.setSignature(signature); // last step is to close the document pdDocument.close(); </pre> <p> Note that after calling this method, only {@code close()} method may invoked for {@code PDDocument} instance and only AFTER {@link ExternalSigningSupport} instance is used. </p> <p> Don't use the input file as target as this will produce a corrupted file. @param output stream to write the final PDF. It will be closed when the document is closed. It <i><b>must never</b></i> point to the source file or that one will be harmed! @return instance to be used for external signing and setting CMS signature @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream or signature options were not set.
3962 This will flatten the specified form fields. <p> Flattening a form field will take the current appearance and make that part of the pages content stream. All form fields and annotations associated are removed. </p> <p> Invisible and hidden fields will be skipped and will not become part of the page content stream </p> @param fields a list of fields to be flattened @param refreshAppearances if set to true the appearances for the form field widgets will be updated @throws IOException if something went wrong flattening the fields
3963 Add parameters of signature to be created externally. See {@link #saveIncrementalForExternalSigning(OutputStream)} method description on external signature creation scenario details. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param options signature options @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
3964 Add a signature to be created using the instance of given interface. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param signatureInterface is an interface whose implementation provides signing capabilities. Can be null if external signing if used. @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
3965 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
3966 Renders a glyph. @param path the GeneralPath for the glyph @param font the font @param code character code @param displacement the glyph's displacement (advance) @param at the transformation @throws IOException if something went wrong
3967 Build a indexed image
3968 Returns the given page as an RGB image at 72 DPI @param pageIndex the zero-based index of the page to be converted. @return the rendered page image @throws IOException if the PDF cannot be read
3969 Renders a given page to an AWT Graphics2D instance at 72 DPI. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @throws IOException if the PDF cannot be read
3970 Returns the font resource with the given name, or null if none exists. @param name Name of the font resource. @return the font with the given name or null @throws IOException if something went wrong.
3971 Creates a new PDFont instance with the appropriate subclass. @param dictionary a font dictionary @return a PDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
3972 This will flatten all form fields. <p> Flattening a form field will take the current appearance and make that part of the pages content stream. All form fields and annotations associated are removed. </p> <p> Invisible and hidden fields will be skipped and will not become part of the page content stream </p> <p> The appearances for the form fields widgets will <strong>not</strong> be generated </p> @throws IOException if something went wrong flattening the fields
3973 Add parameters of signature to be created externally using default signature options. See {@link #saveIncrementalForExternalSigning(OutputStream)} method description on external signature creation scenario details. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
3974 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
3975 Get the points from the triangles, calculate their color and add point-color mappings.
3976 Fills and then strokes the path. @param windingRule The winding rule this path will use. @throws IOException If there is an IO error while filling the path.
3977 Convert the image using the state. @param doc the document to put the image in @param state the parser state containing the PNG chunks. @return null or the converted image
3978 Process the set font and font size operator. @param operands the font name and size @throws IOException in case there are missing operators or the font is not within the resources
3979 Copies any needed resources from the document’s DR dictionary into the stream’s Resources dictionary. Resources with the same name shall be left intact.
3980 This will get the font for this font setting. @return The font for this setting of null if one was not found. @throws IOException If there is an error getting the font.
3981 append all pages from source to destination. @param destination the document to receive the pages @param source the document originating the new pages @throws IOException If there is an error accessing data from either document.
3982 Try to convert a PNG into a PDImageXObject. If for any reason the PNG can not be converted, null is returned. <p> This usually means the PNG structure is damaged (CRC error, etc.) or it uses some features which can not be mapped to PDF. @param doc the document to put the image in @param imageData the byte data of the PNG @return null or the PDImageXObject built from the png
3983 This is used to handle an operation. @param operator The operation to perform. @param operands The list of arguments. @throws IOException If there is an error processing the operation.
3984 Constructs and sets new contents for given appearance stream.
3985 This will implement the gs operator. @param gs The state to copy this dictionaries values into. @throws IOException If there is an error copying font information.
3986 Merge the list of source documents, saving the result in the destination file. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @throws IOException If there is an error saving the document.
3987 Create a PDImageXObject from an image byte array. This overloaded version allows providing a custom factory to handle specific image formats, such as BMP and GIF, or to act as a fallback strategy when the default converters (e.g., for PNG or TIFF) fail. @param document the document that shall use this PDImageXObject. @param byteArray bytes from an image file. @param name name of image file for exception messages, can be null. @param customFactory optional factory used to handle BMP, GIF, or fallback cases (e.g., for PNG or TIFF). If {@code null}, this method delegates to {@link #createFromByteArray(PDDocument, byte[], String)}. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
3988 Processes the operators of the given content stream. @param content the content to parse. @throws IOException if there is an error reading or parsing the content stream.
3989 Merge the list of source documents, saving the result in the destination file. The source list is not reset after merge. If you want to merge one document at a time, then it's better to use {@link #appendDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDDocument)}. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @param compressParameters defines if compressed object streams are enabled @throws IOException If there is an error saving the document.
3990 Create a PDImageXObject from bytes of an image file. The file format is determined by the file content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromByteArray}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param byteArray bytes from an image file. @param document the document that shall use this PDImageXObject. @param name name of image file for exception messages, can be null. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
3991 Constructor for reading an existing DA string. @param defaultResources DR entry @param defaultAppearance DA entry @throws IOException If the DA could not be parsed
3992 Merge the list of source documents, saving the result in the destination file. The source list is not reset after merge. If you want to merge one document at a time, then it's better to use {@link #appendDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDDocument)}. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @throws IOException If there is an error saving the document.
3993 Get the default appearance. This is an inheritable attribute. The default appearance contains a set of default graphics and text operators to define the field’s text size and color. @return the DA element of the dictionary object
3994 This is the public method for setting the appearance stream. @param apValue the String value which the appearance should represent @throws IOException If there is an error creating the stream.
3995 Constructs a COSAppearance from the given field. @param field the field which you wish to control the appearance of @throws IOException
3996 private constructor
3997 Creates a new OperatorProcessor. @param context the processing context to be used
3998 Constructor.
3999 Creates a new {@link COSUpdateState} for the given {@link COSUpdateInfo}. @param updateInfo The {@link COSUpdateInfo}, that shall be managed by this {@link COSUpdateState}.
4000 Constructs an empty DecodeOptions instance
4001 Constructs an instance specifying the region of the image that should be decoded. The actual region will be clipped to the dimensions of the image. @param sourceRegion Region of the source image that should be decoded
4002 Constructs an instance specifying the image should be decoded using subsampling. The subsampling will be the same for the X and Y axes. @param subsampling The number of rows and columns to advance in the source for each pixel in the decoded image.
4003 Constructor.
4004 Creates a new instance of PageExtractor @param sourceDocument The document to split. @param startPage The first page you want extracted (1-based, inclusive) @param endPage The last page you want extracted (1-based, inclusive)
4005 Default constructor. @param cosParser the parser to be used to read the pdf.
4006 Creates a crossreference stream entry of the given {@link XReferenceType}. @param type The {@link XReferenceType} of the crossreference stream entry.
4007 This will create a new content stream writer. @param out The stream to write the data to.
4008 Constructor providing a parameter to enable/disable the stable object cache. @param enableStableCache enables/disables the stable object cache
4009 Constructor. Internal PDFBox use only! If you need to get the document catalog, call {@link PDDocument#getDocumentCatalog()}. @param doc The document that this catalog is part of. @param rootDictionary The root dictionary that this object wraps.
4010 Constructor that is used for a preexisting dictionary. @param dic The underlying dictionary.
4011 Constructor. @param dict The dictionary of names and corresponding destinations.
4012 Constructor. @param cat The document that this dictionary is part of. @param names The names dictionary.
4013 Creates a new instance of PDPage for reading. @param pageDictionary A page dictionary in a PDF document.
4014 Creates a new instance of PDPage for reading. @param pageDictionary A page dictionary in a PDF document.
4015 Constructor for this map. @param actualsMap The map with standard java objects as values. @param dicMap The map with COSBase objects as values.
4016 Creates a new instance with a given COS dictionary. @param dictionary the dictionary
4017 Constructor. @param dict The dictionary that holds the name information.
4018 Constructor. @param dict The dictionary that holds the number information. @param valueClass The PD Model type of object that is the value.
4019 Creates a new page label range object from the given dictionary. @param dict the base dictionary for the new object.
4020 Constructor assumes a starting index of 0. @param range The array that describes the range.
4021 Constructor with an index into an array. Because some arrays specify multiple ranges ie [ 0,1, 0,2, 2,3 ] It is convenient for this class to take an index into an array. So if you want this range to represent 0,2 in the above example then you would say <code>new PDRange( array, 1 )</code>. @param range The array that describes the index @param index The range index into the array for the start of the range.
4022 Creates a PDStream which wraps the given COSStream. @param str The stream parameter.
4023 Constructor for an existing MarkInfo element. @param dic The existing dictionary.
4024 Constructor for an existing marked content reference. @param dictionary the page dictionary
4025 Constructor for an existing object reference. @param theDictionary The existing dictionary.
4026 Constructor for an existing structure node. @param dictionary The existing dictionary.
4027 Constructor.
4028 Constructor for subclasses. @param dict the dictionary to be used to create an instance of PDPropertyList
4029 Constructor for an existing BoxStyle element. @param dic The existing dictionary.
4030 Create a new access permission object. By default, all permissions are granted.
4031 Creates a new access permission object from a single integer. @param permissions The permission bits.
4032 creates a new crypt filter dictionary from the low level dictionary provided. @param d the low level dictionary that will be managed by the newly created object
4033 Constructor.
4034 Constructor. @param a The FDF annotation.
4035 Constructor. @param cat The FDF documents catalog.
4036 Constructor. @param fdfDictionary The FDF documents catalog.
4037 Constructor. @param f The FDF field.
4038 Constructor. @param f The icon fit dictionary.
4039 Constructor. @param javaScript The FDF java script.
4040 Constructor. @param r The FDF named page reference dictionary.
4041 Constructor. @param o The option element.
4042 Constructor. @param p The FDF page.
4043 Constructor. @param p The FDF page.
4044 Constructor. @param t The FDF page template.
4045 Creates a PDFontDescriptor from a COS dictionary. @param desc The wrapped COS Dictionary.
4046 Constructs a font setting from an existing array. @param fs The new font setting value.
4047 Creates a new line dash pattern, with no dashes and a phase of 0.
4048 Private constructor due to the limited set of possible blend modes. @param name the corresponding COSName of the blend mode @param blendChannel the blend function for separable blend modes @param blend the blend function for non-separable blend modes
4049 Creates a PDColor containing the given pattern name. @param patternName the name of a pattern in a pattern dictionary @param colorSpace color space in which the pattern is defined
4050 Creates a new DeviceN colour space attributes dictionary from the given dictionary. @param attributes a dictionary that has all of the attributes
4051 Creates a new DeviceN Process Dictionary from the given attributes. @param attributes a DeviceN attributes dictionary
4052 Creates a new gamma from a COS array. @param array the array containing the XYZ values
4053 Constructor from COS object. @param array the array containing the XYZ values
4054 Creates a group object from a given dictionary @param dic {@link COSDictionary} object
4055 Creates a new instance based on a given {@link COSDictionary}. @param props the dictionary
4056 Creates a new Pattern dictionary from the given COS dictionary. @param dictionary The COSDictionary for this pattern.
4057 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
4058 Create a graphics state from an existing dictionary. @param dictionary The existing graphics state. @param resourceCache Resource cache, may be null.
4059 Creates a new soft mask. @param dictionary The soft mask dictionary. @param resourceCache Resource cache, may be null.
4060 Constructor. @param a The action dictionary.
4061 Utility Class.
4062 Constructor. @param a The action dictionary.
4063 Constructor. @param a The action dictionary.
4064 Constructor. @param a The action dictionary.
4065 Constructor. @param a The action dictionary.
4066 Constructor. @param a The action dictionary.
4067 Create a target directory from an existing dictionary. @param dictionary The existing graphics state.
4068 Constructor. @param dictionary the corresponding dictionary
4069 Constructor. @param p The params dictionary.
4070 Constructor. @param dict dictionary
4071 Constructor for reading. @param dictionary The annotations dictionary.
4072 Constructor for reading. @param entry the dictionary of the appearance entry
4073 Constructor. @param dict a border style dictionary.
4074 Constructor. @param dict a border style dictionary.
4075 Constructor. @param dictionary Dictionary
4076 Creates a new <code>CloudyBorder</code> that writes to the specified content stream. @param stream content stream @param intensity intensity of cloudy effect (entry <code>I</code>); typically 1.0 or 2.0 @param lineWidth line width for annotation border (entry <code>W</code>) @param rect annotation rectangle (entry <code>Rect</code>)
4077 Constructor. @param dict The signature dictionary.
4078 Constructor. @param dict The signature dictionary.
4079 Constructor. @param dict The signature dictionary.
4080 Constructor. @param dict The certificate seed value dictionary.
4081 Constructor. @param dict The signature dictionary.
4082 Constructor. @param dict The signature dictionary.
4083 Constructor. @param dict The signature dictionary.
4084 Creates the default signature options.
4085 Constructor. @param templateBuilder the template builder
4086 Constructor.
4087 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
4088 Constructor. @param xfaBase The xfa resource.
4089 Constructor. @param dictionary the corresponding dictionary
4090 Constructor. @param dictionary the corresponding dictionary
4091 Constructor. @param dictionary the dictionary
4092 Constructor that is used for a preexisting dictionary. @param t The underlying dictionary.
4093 Constructor that is used for a preexisting dictionary. @param b The underlying dictionary.
4094 Constructor that is used for a preexisting dictionary. @param dic The underlying dictionary.
4095 Package-private constructor.
4096 Constructs a PositionWrapper around the specified TextPosition object. @param position the text position.
4097 Constructor. This produces an identity matrix.
4098 Constructor. This produces a matrix with the given array as data. The source array is not copied or cloned.
4099 Creates a transformation matrix with the given 6 elements. Transformation matrices are discussed in 8.3.3, "Common Transformations" and 8.3.4, "Transformation Matrices" of the PDF specification. For simple purposes (rotate, scale, translate) it is recommended to use the static methods below. Produces the following matrix: a b 0 c d 0 e f 1 @see Matrix#getRotateInstance(double, float, float) @see Matrix#getScaleInstance(float, float) @see Matrix#getTranslateInstance(float, float) @param a the X coordinate scaling element (m00) of the 3x3 matrix @param b the Y coordinate shearing element (m10) of the 3x3 matrix @param c the X coordinate shearing element (m01) of the 3x3 matrix @param d the Y coordinate scaling element (m11) of the 3x3 matrix @param e the X coordinate translation element (m02) of the 3x3 matrix @param f the Y coordinate translation element (m12) of the 3x3 matrix
4100 Utility class, should not be instantiated.
4101 Creates a new PDFStreamEngine.
4102 Adds an operator processor to the engine. @param op operator processor
4103 This will set the terminating character. @param term The terminating character.
4104 This will tell the splitting algorithm where to split the pages. The default is 1, so every page will become a new document. If it was two then each document would contain 2 pages. If the source document had 5 pages it would split into 3 new documents, 2 documents containing 2 pages and 1 document containing one page. @param split The number of pages each split document should contain. @throws IllegalArgumentException if the page is smaller than one.
4105 This will set the start page. @param start the 1-based start page @throws IllegalArgumentException if the start page is smaller than one.
4106 This will set the end page. @param end the 1-based end page @throws IllegalArgumentException if the end page is smaller than one.
4107 Change the parser leniency flag. This method can only be called before the parsing of the file. @param lenient try to handle malformed PDFs.
4108 Sets the number of objects, that can be contained in compressed object streams. Higher object stream sizes may cause PDF readers to slow down during the rendering of PDF documents, therefore a reasonable value should be selected. A value of 0 disables the compression. @param objectStreamSize The number of objects, that can be contained in compressed object streams.
4109 Constructor for reading. @param resourceDictionary The cos dictionary for this resource. @param resourceCache The document's resource cache, may be null. @param directFontCache The document's direct font cache. Must be mutable
4110 Sets the blend mode in the current graphics state @param blendMode blend mode @throws IllegalArgumentException if blendMode is null.
4111 Constructor for reading. @param acroForm the AcroForm containing the fields.
4112 Returns the length of the encoded stream. @return length in bytes
4113 Instantiate a new PDFMergerUtility.
4114 Creates an object stream for compressible objects from the given {@link COSWriterCompressionPool}. The objects must first be prepared for this object stream, by adding them via calling {@link COSWriterObjectStream#prepareStreamObject(COSObjectKey, COSBase)} and will be written to this {@link COSStream}, when {@link COSWriterObjectStream#writeObjectsToStream(COSStream)} is called. @param compressionPool The compression pool an object stream shall be created for.
4115 Creates a new PublicKeyProtectionPolicy with an empty recipients list.
4116 Begin buffering the text clipping path, if any.
4117 Add a source file to the list of files to merge. @param source File representing source document @throws FileNotFoundException If the file doesn't exist
4118 Add a source to the list of documents to merge. @param source RandomAccessRead representing source document. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}.
4119 Add a name (ex. an operator) @param name the name
4120 Adds a proc (sub-sequence of instructions). @param child the child proc
4121 Adds a new recipient to the recipients list. @param recipient A new recipient.
4122 Add a new region to group text by. @param regionName The name of the region. @param rect The rectangle area to retrieve the text from. The y-coordinates are java coordinates (y == 0 is top), not PDF coordinates (y == 0 is bottom).
4123 Adds trailer information for current XRef object. @param trailer the current document trailer dictionary
4124 Returns the {@link COSBase}, that is registered for the given {@link COSObjectKey}, or null if no object is registered for that key. @param key The {@link COSObjectKey} a registered {@link COSBase} shall be found for. @return The {@link COSBase}, that is registered for the given {@link COSObjectKey}, or null if no object is registered for that key.
4125 Returns the operator for the given operator name. @param operatorName the operator name @return the operator (or null if there's no such operator
4126 Returns the name for a given sequence of Unicode characters. @param unicodeSequence sequence of Unicode characters @return PostScript glyph name, or ".notdef"
4127 Called when an exception is thrown by an operator. @param operator The unknown operator. @param operands The list of operands. @param exception the excpetion which occured when processing the operator @throws IOException if there is an error processing the operator exception
4128 @return Returns the graphicsState.
4129 Pops the current graphics state from the stack.
4130 @return Returns the size of the graphicsStack.
4131 Transforms the given point by this matrix. @param x x-coordinate @param y y-coordinate @return the transformed point.
4132 Decrease the level. Call this after running a potentially recursive operation. A log message is shown if the level is below 0. This can happen if the level is not decreased after an operation is done, e.g. by using a "finally" block.
4133 Adds an int value. @param value the value
4134 Throws if the random access backing store has been closed. Helpful for catching cases where a user tries to use a COSStream which has outlived its COSDocument.
4135 Unsupported. @throws IOException telling that this is an unsupported action.
4136 Unsupported. @throws IOException always throw as reset is an unsupported feature.
4137 This will get the encryption dictionary. The document must be parsed before this is called. @return The encryption dictionary of the document that was parsed. @throws IOException If there is an error getting the document.
4138 This will get the AccessPermission. The document must be parsed before this is called. @return The access permission of document that was parsed. @throws IOException If there is an error getting the document.
4139 Creates a new InvalidPasswordException. @param message A msg to go with this exception.
4140 Constructor. @param aOperator The operator that this object will represent. @throws IllegalArgumentException if the operator starts with "/".
4141 This will print a string rep of this class. @return A string rep of this class.
4142 {@inheritDoc}
4143 {@inheritDoc}
4144 Returns a filter instance given its COSName. @param filterName the name of the filter to retrieve @return the filter that matches the name @throws IOException if the filter name was invalid
4145 Check whether all operands list elements are an instance of a specific class. @param operands The operands list. @param clazz The expected class. @return true if all operands list elements are an instance of the given class
4146 Adds a real value. @param value the value
4147 @param width signature image width @return Visible Signature Configuration Object
4148 @param height signature image height @return Visible Signature Configuration Object
4149 Calculate the distance from point ps to point pe. @param ps one end of a line @param pe the other end of the line @return length of the line
4150 A line from point p1 to point p2 defines an equation, adjust the form of the equation to let the rhs equals 0, then calculate the lhs value by plugging the coordinate of p in the lhs expression. @param p target point @param p1 one end of a line @param p2 the other end of a line @return calculated value
4151 Creates a new marked content object. @param tag the tag @param properties the properties
4152 This will return the paint type. @return The type of object that this is.
4153 This will return the type. @return the type of object that this is
4154 Returns the default value, if any. @return A non-null string.
4155 Unchecks the check box. @throws IOException if the appearance couldn't be generated.
4156 Refreshes the appearance streams and appearance dictionaries for the widget annotations of the specified fields. @param fields a list of fields to be refreshed @throws IOException if the appearance streams could not be refreshed
4157 Tests if the current point is the white point. @return true if the current point is the white point.
4158 Calculate the color on the axial line and store them in an array. @return an array, index denotes the relative position, the corresponding value is the color on the axial line @throws IOException if the color conversion fails.
4159 Calculate the color on the line that connects two circles' centers and store the result in an array. @return an array, index denotes the relative position, the corresponding value the color
4160 Init the code table with 1 byte entries and the EOD and CLEAR_TABLE markers.
4161 Add a list of sources to the list of documents to merge. @param sourcesList List of RandomAccessRead objects representing source documents
4162 This will get an object from the array. This will NOT dereference the COS object. @param index The index into the array to get the object. @return The object at the requested index.
4163 {@inheritDoc}
4164 This will get the size of this array. @return The number of elements in the array.
4165 {@inheritDoc}
4166 Returns the number of recipients @return the number of recipients
4167 Returns true if the container is empty, false otherwise. @return true if the container is empty, false otherwise
4168 {@inheritDoc}
4169 Removes a recipient from the recipients list. @param recipient The recipient to remove. @return true If a recipient was found and removed.
4170 Get access to the list. @return an iterator over the array elements
4171 {@inheritDoc}
4172 Returns an iterator to browse the list of recipients. Object found in this iterator are <code>PublicKeyRecipient</code>. @return The recipients list iterator.
4173 Return contents of COSArray as a Java List. @return the COSArray as List
4174 This will return a list of names if the COSArray consists of COSNames only. @return the list of names of the COSArray of COSNames
4175 This will return a list of names if the COSArray consists of COSStrings only. @return the list of names of the COSArray of COSStrings
4176 This will get the boolean value. @param value Parameter telling which boolean value to get. @return The single boolean instance that matches the parameter.
4177 Return a string representation of this object. @return The string value of this object.
4178 This will write this object out to a PDF stream. @param output The stream to write this object out to. @throws IOException If an error occurs while writing out this object.
4179 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
4180 Writes binary data to the content stream. @param data as byte formatted to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
4181 Returns the name-value entries in this dictionary. The returned set is in the order the entries were added to the dictionary. @since Apache PDFBox 1.1.0 @return name-value entries in this dictionary
4182 Is the value changed? @param oldEntry old entry @param newEntry new entry @return <code>true</code> if the entry is changed, <code>false</code> otherwise
4183 This will return the number of elements in this dictionary. @return The number of elements in the dictionary.
4184 This will do a lookup into the dictionary. @param key The key to the object. @return The item that matches the key.
4185 Returns the names of the entries in this dictionary. The returned set is in the order the entries were added to the dictionary. @since Apache PDFBox 1.1.0 @return names of the entries in this dictionary
4186 Convenience method that calls {@link Map#forEach(java.util.function.BiConsumer) Map.forEach(BiConsumer)}. @param action The action to be performed for each entry
4187 This will get all of the values for the dictionary. @return All the values for the dictionary.
4188 This will add all of the dictionaries keys/values to this dictionary. Existing key/value pairs will be overwritten. @param dict The dictionaries to get the key/value pairs from.
4189 @see java.util.Map#containsKey(Object) @param name The key to find in the map. @return true if the map contains this key.
4190 Split at spaces but keep them @param s @return
4191 Parses a value of type "int". @param token the token to be parsed @return the parsed value
4192 {@inheritDoc}
4193 set the length in (bits) of the secret key that will be used to encrypt document data. The default value is 40 bits, which provides a low security level but is compatible with old versions of Acrobat Reader. @param l the length in bits (must be 40, 128 or 256)
4194 This will set the first page to be extracted by this class. @param startPageValue New value of 1-based startPage property. @throws IllegalArgumentException if the parameter is below 1.
4195 This will set the last page to be extracted by this class. @param endPageValue New value of 1-based endPage property. @throws IllegalArgumentException if the parameter is below 1.
4196 Constructor. Triggers a brute force search for all objects of the document. @param cosDocument the corresponding COS document @param cosParser the COSParser to be used for reading the pdf @throws IOException if the source data could not be read
4197 Default constructor.
4198 Constructor for reading. @param resourceDictionary The cos dictionary for this resource.
4199 Constructor for reading. @param resourceDictionary The cos dictionary for this resource. @param resourceCache The document's resource cache, may be null.
4200 Creates a new Operators object with the default set of operators.
4201 Constructor. @param doc The document that this form is part of. @param form The existing acroForm.
4202 Returns the count of trailers. @return the count of trailers.
4203 This will get an object from the pool. @param key The object key. @return The object in the pool or a new one if it has not been parsed yet.
4204 Populate XRef HashMap with given values. Each entry maps ObjectKeys to byte offsets in the file. @param xrefTableValues xref table entries to be added
4205 Parses a value of type "real". @param token the token to be parsed @return the parsed value
4206 Check and coerce the value field to be between MIN_NORMAL and MAX_VALUE. @param floatValue the value to be checked @return the coerced value
4207 Return the direction/orientation of the string in this object based on its text matrix. Only angles of 0, 90, 180, or 270 are supported. To get other angles, use this code: <pre> TextPosition text = ... Matrix m = text.getTextMatrix().clone(); m.concatenate(text.getFont().getFontMatrix()); int angle = (int) Math.round(Math.toDegrees(Math.atan2(m.getShearY(), m.getScaleY()))); </pre> @return The direction of the text (0, 90, 180, or 270).
4208 {@inheritDoc}
4209 {@inheritDoc}
4210 Builds, if needed, and returns the string representation of the current value. @return current value as string.
4211 Write {@link COSNull} to the given stream. @param output The stream, that shall be written to.
4212 Creates a new {@link COSIncrement} for the given {@link COSUpdateInfo}, the increment will use it´s {@link COSDocumentState} as it´s own origin and shall collect all updates contained in the given {@link COSUpdateInfo}.<br> Should the given object be {@code null}, the resulting increment shall be empty. @param incrementOrigin The {@link COSUpdateInfo} serving as an update source for this {@link COSIncrement}.
4213 Creates a new instance for the given target document. @param dest the destination PDF document that will receive the clones
4214 Constructor providing a parameter to enable/disable the stable object cache. @param enableStableCache enables/disables the stable object cache
4215 Get the update state for the COSWriter. This indicates whether an object is to be written when there is an incremental save. @return the update state.
4216 Returns {@code true}, if the given {@link COSBase} is already known to and has been processed by this {@link COSIncrement}. @param base The {@link COSBase} to check. @return {@code true}, if the given {@link COSBase} is already known to and has been processed by this {@link COSIncrement}. @see #objects @see #processedObjects
4217 Returns {@code true}, if the given {@link COSBase} has been excluded from the increment, and hence is contained in {@link #excluded}. @param base The {@link COSBase} to check for exclusion. @return {@code true}, if the given {@link COSBase} has been excluded from the increment, and hence is contained in {@link #excluded}. @see #excluded
4218 The given object and actual {COSBase}s shall be part of the increment and must be added to {@link #objects}, if possible.<br> {@code null} values shall be skipped. @param object The {@link COSBase} to add to {@link #objects}. @see #objects
4219 The given {@link COSObject} has been processed, or is being processed. It shall be added to {@link #processedObjects} to skip it, should it be encountered again.<br> {@code null} values shall be ignored. @param base The {@link COSObject} to add to {@link #processedObjects}. @see #processedObjects
4220 For internal PDFBox use when creating PDF documents: register a TrueTypeFont to make sure it is closed when the PDDocument is closed to avoid memory leaks. Users don't have to call this method, it is done by the appropriate PDFont classes. @param ttf the TrueTypeFont to be registered
4221 Return a set of all annotation widget dictionaries related to the fields to be flattened. @param fields @return
4222 Constructor. @param input decoded stream @param decodeResults results of decoding
4223 Constructor. @param is The input stream to actually read from.
4224 Creates a CCITTFaxDecoderStream. This constructor may be used for CCITT streams embedded in PDF files, which use EncodedByteAlign. @param stream the compressed CCITT stream. @param columns the number of columns in the stream. @param type the type of stream, must be one of {@code COMPRESSION_CCITT_MODIFIED_HUFFMAN_RLE}, {@code COMPRESSION_CCITT_T4} or {@code COMPRESSION_CCITT_T6}. @param options CCITT T.4 or T.6 options. @param byteAligned enable byte alignment used in PDF files (EncodedByteAlign).
4225 Returns a COSInteger instance with the given value. @param val integer value @return COSInteger instance
4226 {@inheritDoc}
4227 {@inheritDoc}
4228 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
4229 {@inheritDoc}
4230 Returns the base name of the font which the given font name maps to. @param fontName name of font, either a base name or an alias @return the base name or null if this is not one of the known names
4231 Adds an alias name for a standard font to the map of known aliases to the map of aliases (alias as key, standard name as value). We want a single lookup in tbaseNamehe map to find the font both by a base name or an alias. @param alias an alias for the font @param baseName the font name of the Standard 14 font
4232 This will get the selected export values. <p> A RadioButton might have an export value to allow field values which can not be encoded as PDFDocEncoding or for the same export value being assigned to multiple RadioButtons in a group.<br> To define an export value the RadioButton must define options {@link #setExportValues(List)} which correspond to the individual items within the RadioButton.</p> <p> The method will either return the corresponding values from the options entry or in case there is no such entry the fields value</p> @return the export value of the field.
4233 Returns true if the name is the empty string. @return true if the name is the empty string.
4234 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
4235 Writes a newline to the content stream as ASCII. @throws IOException If the underlying stream has a problem being written to.
4236 Takes the characters in the given string, convert it to bytes in UTF16-BE format and build a char array that corresponds to the ASCII hex encoding of the resulting bytes. Example: <pre> getCharsUTF16BE("ab") == new char[]{'0','0','6','1','0','0','6','2'} </pre> @param text The string to convert @return The string converted to hex
4237 Constructor. @param num The object number. @param gen The object generation number. @param index The index within a compressed object stream
4238 {@inheritDoc}
4239 Returns the x-scaling factor of this matrix. This is calculated from the scale and shear. @return The x-scaling factor.
4240 Returns the y-scaling factor of this matrix. This is calculated from the scale and shear. @return The y-scaling factor.
4241 Creates a new COSOutputStream writes to an encoded COS stream. @param filters Filters to apply. @param parameters Filter parameters. @param output Encoded stream. @param streamCache Stream cache to use. @throws IOException If there was an error creating a temporary buffer
4242 Constructor. @param out The output stream to write to.
4243 Constructor. @param out The underlying stream to write to.
4244 Constructor. @param out The underlying stream to write to. @param position The current position of output stream.
4245 {@inheritDoc} Called by PDFBox when the PDDocument is closed, this closes the stream and removes the data. You will usually not need this. @throws IOException if something went wrong when closing the stream
4246 {@inheritDoc} Called by PDFBox when the PDDocument is closed, this closes the stream and removes the data. You will usually not need this. @throws IOException if something went wrong when closing the stream
4247 Returns the raw bytes of the string using a new byte array. Best used with a PDF <i>byte string</i>. @return a clone of the underlying byte[] representation of the COSString
4248 Write an incremental update for a non signature case. This can be used for e.g. augmenting signatures. @throws IOException
4249 Returns the content of this string as a PDF <i>ASCII string</i>. @return the ASCII string representation of the COSString
4250 Returns {@code true}, if the linked {@link #originDocumentState} {@link COSDocumentState#isAcceptingUpdates()} and such a {@link COSDocumentState} has been linked to this {@link COSUpdateState}. @return {@code true}, if the linked {@link #originDocumentState} {@link COSDocumentState#isAcceptingUpdates()} and such a {@link COSDocumentState} has been linked to this {@link COSUpdateState}. @see #originDocumentState @see COSDocumentState#isAcceptingUpdates()
4251 Returns the string representation of the given PDFDocEncoded bytes.
4252 This will read an operator from the stream. @return The operator that was read from the stream. @throws IOException If there is an error reading from the stream.
4253 Returns the given string encoded with PDFDocEncoding.
4254 Returns true if the given character is available in PDFDocEncoding. @param character UTF-16 character
4255 {@inheritDoc}
4256 Returns true if the given font name is one of the known names, including alias. @param fontName the name of font, either a base name or alias @return true if the name is one of the known names
4257 Returns an unmodifiable view of the code -&gt; name mapping. @return the code -&gt; name map
4258 Returns an unmodifiable view of the name -&gt; code mapping. More than one name may map to the same code. @return the name -&gt; code map
4259 {@inheritDoc}
4260 This will read the next byte from the stream. @return The next byte read from the stream. @throws IOException If there is an error reading from the wrapped stream.
4261 This will close the underlying stream and release any resources. @throws IOException If there is an error closing the underlying stream.
4262 This will write a single byte. @param b The byte to write. @throws IOException If there is an error writing to the stream.
4263 This will flush the data to the stream. @throws IOException If there is an error writing the data to the stream.
4264 This will take the password and truncate or pad it as necessary. @param password The password to pad or truncate. @return The padded or truncated password.
4265 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
4266 Import an XMP stream into the PDF document. @param xmp The XMP data. @throws IOException If there is an error generating the XML document.
4267 Check if it is necessary to create a new document. By default a split occurs at every page. If you wanted to split based on some complex logic then you could override this method. For example. <code> protected void splitAtPage() { // will split at pages with prime numbers only return isPrime(pageNumber); } </code> @param pageNumber the 0-based page number to be checked as splitting page @return true If a new document should be created.
4268 {@inheritDoc}
4269 {@inheritDoc}
4270 {@inheritDoc}
4271 {@inheritDoc}
4272 {@inheritDoc}
4273 {@inheritDoc}
4274 returns visible signature text @return the visible signature's text
4275 @param signatureText - adds the text on visible signature @return the signature design
4276 <b>This will throw an UnsupportedOperationException if used as the signature fields value can't be set using a String</b> @param value the plain text value. @throws UnsupportedOperationException in all cases!
4277 @return the ZIP compression level configured for PDFBox
4278 {@inheritDoc}
4279 Constructor. @param inputStream The input stream to actually read from.
4280 This will close the underlying stream and release any resources. @throws IOException If there is an error closing the underlying stream.
4281 Constructor, creates PDF template structure.
4282 Set image and its height and width. @param image
4283 Find a matching pattern in the code table. @param codeTable The LZW code table. @param pattern The pattern to be searched for. @return The index of the matching pattern or -1 if nothing is found.
4284 Decodes a single line of data in-place. @param predictor Predictor value for the current line @param colors Number of color components, from decode parameters. @param bitsPerComponent Number of bits per components, from decode parameters. @param columns Number samples in a row, from decode parameters. @param actline Current (active) line to decode. Data will be decoded in-place, i.e. - the contents of this buffer will be modified. @param lastline The previous decoded line. When decoding the first line, this parameter should be an empty byte array of the same length as <code>actline</code>.
4285 Returns true, if a {@link COSBase} is registered for the given {@link COSObjectKey}. @param key The {@link COSObjectKey} that shall be checked for a registered {@link COSBase}. @return True, if a {@link COSBase} is registered for the given {@link COSObjectKey}.
4286 Registers a security handler. If the security handler was already registered an exception is thrown. If another handler was previously registered for the same filter name or for the same policy name, an exception is thrown @param name the name of the filter @param securityHandler security handler class to register @param protectionPolicy protection policy class to register
4287 Determines if the encoding has a mapping for the given name value. @param name PostScript glyph name @return true if the encoding has a mapping for the given name value
4288 Determines if the encoding has a mapping for the given code value. @param code character code @return if the encoding has a mapping for the given code value
4289 Escape special characters. @param input the string to be escaped. @return the resulting string
4290 This will set the BBox (bounding box) for this form. @param bbox The new BBox for this form.
4291 Decodes a hex String into a byte array. @param s A String with ASCII hex. @return decoded byte array.
4292 This will close the underlying COSDocument object. @throws IOException If there is an error releasing resources.
4293 This will close the underlying COSDocument object. @throws IOException If there is an error releasing resources.
4294 Returns the stream. @return The stream for this object.
4295 Creates a new XObject from the given stream and subtype. @param stream The stream to read. @param subtype the subtype to be used for this XObject
4296 Returns the stream. {@inheritDoc}
4297 Returns the metadata stream for this object, or null if there is no metadata stream. @return the metadata stream, or null if there is none
4298 Sets the metadata stream that is associated with this color space. @param metadata the new metadata stream
4299 Check if the widget already exists in the annotation list. @param annotations the list of PDAnnotation fields. @param widget the annotation widget. @return true if the widget already existed in the annotation list, false if not.
4300 {@inheritDoc}
4301 {@inheritDoc}
4302 Check if the field already exists in the field list. @param fieldIterator iterator on all fields. @param signatureField the signature field. @return true if the field already existed in the field list, false if not.
4303 {@inheritDoc}
4304 Default constructor.
4305 This will tell if the next byte is a digit or not. @return true if the next byte in the stream is a digit. @throws IOException If there is an error reading from the stream.
4306 Populate XRef HashMap of current XRef object. Will add an Xreftable entry that maps ObjectKeys to byte offsets in the file. @param objKey The objkey, with id and gen numbers @param offset The byte offset in this file
4307 This will add a character encoding. An already existing mapping is preserved when creating the reverse mapping. Should only be used during construction of the class. @see #overwrite(int, String) @param code character code @param name PostScript glyph name
4308 This will tell if the next byte is a space or not. @return true if the next byte in the stream is a space character. @throws IOException If there is an error reading from the stream.
4309 Skip one line break, such as CR, LF or CRLF. @param linebreak the first character to be checked. @return true if a line break was found and removed. @throws IOException if something went wrong
4310 This is really a bug in the Document creators code, but it caused a crash in PDFBox, the first bug was in this format: /Title ( (5) /Creator which was patched in 1 place. However it missed the case where the number of opening and closing parenthesis isn't balanced The second bug was in this format /Title (c:\) /Producer @param bracesParameter the number of braces currently open. @return the corrected value of the brace counter @throws IOException
4311 This will tell if the next byte to be read is an end of line byte. @param c The character to check against end of line @return true if the next byte is 0x0A or 0x0D.
4312 This method is used to read a token by the {@linkplain #readInt()} and the {@linkplain #readLong()} method. Valid delimiters are any non digit values. @return the token to parse as integer or long by the calling method. @throws IOException throws by the {@link #source} methods.
4313 Tries to decode the buffer content to an UTF-8 String. If that fails, tries the alternative Encoding. @param buffer the {@link ByteArrayOutputStream} containing the bytes to decode @return the decoded String
4314 Read one char and throw an exception if it is not the expected value. @param ec the char value that is expected. @throws IOException if the read char is not the expected value or if an I/O error occurs.
4315 This will tell if the next byte is whitespace or not. @return true if the next byte in the stream is a whitespace character. @throws IOException If there is an error reading from the stream.
4316 This will parse the startxref section from the stream. The startxref value is ignored. @return the startxref value or -1 on parsing error @throws IOException If an IO error occurs.
4317 Brute force search for the last EOF marker. @throws IOException if something went wrong
4318 Brute force search for all xref entries (tables). @throws IOException if something went wrong
4319 The number of color components of this shading. @return number of color components of this shading @throws IOException if the data could not be read
4320 Brute force search for all /XRef entries (streams). @throws IOException if something went wrong
4321 Returns the resulting cross reference table. @return
4322 Looks for and parses startxref. We first look for last '%%EOF' marker (within last {@link #DEFAULT_TRAIL_BYTECOUNT} bytes (or range set via {@link #setEOFLookupRange(int)}) and go back to find <code>startxref</code>. @return the offset of StartXref @throws IOException If something went wrong.
4323 This method will read through the current stream object until we find the keyword "endstream" meaning we're at the end of this object. Some pdf files, however, forget to write some endstream tags and just close off objects with an "endobj" tag so we have to handle this case as well. This method is optimized using buffered IO and reduced number of byte compare operations. @param out stream we write out to. @throws IOException if something went wrong
4324 Creates a new ToUnicode CMap writer.
4325 Sets the page label range beginning at the specified start page. @param startPage the 0-based index of the page representing the start of the page label range. @param item the page label item to set. @throws IllegalArgumentException if the startPage parameter is &lt; 0.
4326 Adds the given CID to Unicode mapping. @param cid CID @param text Unicode text, up to 512 bytes.
4327 Looks up an amount of bytes if they contain only ASCII characters (no control sequences etc.), and that these ASCII characters begin with a sequence of 1-3 non-blank characters between blanks @return <code>true</code> if next bytes are probably printable ASCII characters starting with a PDF operator, otherwise <code>false</code>
4328 Checks if the next char is a space or a return. @return true if the next char is a space or a return @throws IOException if something went wrong
4329 Add an new entry to the XRef stream. @param entry new entry to be added
4330 determines the minimal length required for all the lengths. @return the length information
4331 Creates a map of {@link COSBase} instances to {@link COSObjectKey}s, allowing bidirectional lookups. This constructor can be used for pre - initialized structures to start the assignment of new object numbers starting from the hereby given offset. @param highestXRefObjectNumber The highest known object number.
4332 Returns the first trailer if at least one exists. @return the first trailer or null
4333 Returns the last trailer if at least one exists. @return the last trailer ir null
4334 Returns object numbers which are referenced as contained in object stream with specified object number. This will scan resolved xref table for all entries having negated stream object number as value. @param objstmObjNr object number of object stream for which contained object numbers should be returned @return set of object numbers referenced for given object stream or <code>null</code> if {@link #setStartxref(long)} was not called before so that no resolved xref table exists
4335 Returns the value for the first column of the crossreference stream entry. (The numeric representation of this entry's (The numeric representation of this entry's {@link XReferenceType}.) @return The value for the first column of the crossreference stream entry.
4336 Returns the value for the third column of the crossreference stream entry. (This is the generation number of the set next free {@link COSObjectKey} - for entries of this type.) @return The value for the third column of the crossreference stream entry.
4337 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
4338 Returns the value for the second column of the crossreference stream entry. (This is byte offset of the {@link COSObject} in the PDF file - for entries of this type.) @return The value for the second column of the crossreference stream entry.
4339 Returns the value for the third column of the crossreference stream entry. (This is the generation number of the set {@link COSObjectKey} - for entries of this type.) @return The value for the third column of the crossreference stream entry.
4340 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
4341 Returns the value for the second column of the crossreference stream entry. (This is object number from the {@link COSObjectKey} of the object stream, that is containing the object represented by this entry - for entries of this type..) @return The value for the second column of the crossreference stream entry.
4342 Returns the value for the third column of the crossreference stream entry. (This is index of the {@link COSObject} in the containing object stream - for entries of this type.) @return The value for the third column of the crossreference stream entry.
4343 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
4344 This will write some byte to the stream. @param b The source byte array. @param off The offset into the array to start writing. @param len The number of bytes to write. @throws IOException If the underlying stream throws an exception.
4345 This will write a single byte to the stream. @param b The byte to write to the stream. @throws IOException If there is an error writing to the underlying stream.
4346 This will write an EOL to the stream. @throws IOException If there is an error writing to the stream
4347 Returns true, if the resulting document shall be compressed. @return True, if the resulting document shall be compressed.
4348 add an entry in the x ref table for later dump. @param entry The new entry to add.
4349 Write the given {@link COSObjectKey} to the given stream. @param output The stream, that shall be written to. @param indirectReference The content, that shall be written.
4350 check the xref entries and write out the ranges. The format of the returned array is exactly the same as the pdf specification. See section 7.5.4 of ISO32000-1:2008, example 1 (page 40) for reference. <p> example: 0 1 2 5 6 7 8 10 <p> will create a array with follow ranges <p> 0 3 5 4 10 1 <p> this mean that the element 0 is followed by two other related numbers that represent a cluster of the size 3. 5 is follow by three other related numbers and create a cluster of size 4. etc. @param xRefEntriesList list with the xRef entries that was written @return a integer array with the ranges
4351 @return MD5 message digest
4352 @return SHA-1 message digest
4353 @return SHA-256 message digest
4354 This will write the fdf document. @param doc The document to write. @throws IOException If an error occurs while generating the data.
4355 Returns the highest object number, that is registered in this compression pool. @return The highest object number, that is registered in this compression pool.
4356 Returns all {@link COSObjectKey}s, that shall be added to the object stream, when {@link COSWriterObjectStream#writeObjectsToStream(COSStream)} is called. @return All {@link COSObjectKey}s, that shall be added to the object stream.
4357 This will add a character encoding. An already existing mapping is overwritten when creating the reverse mapping. Should only be used during construction of the class. @see Encoding#add(int, String) @param code character code @param name PostScript glyph name
4358 Delete a region to group text by. If the region does not exist, this method does nothing. @param regionName The name of the region to delete.
4359 Sets the maximum number of digits allowed for fractional numbers. @see NumberFormat#setMaximumFractionDigits(int) @param fractionDigitsNumber the maximum number of digits allowed for fractional numbers
4360 Create a new appearance stream. @param document may be null @param outputStream The appearances output stream to write to. @param resources The resources to use
4361 Returns the y-component of the vertical displacement vector (w1). @param code character code @return w1y
4362 Returns the provided default value in case 'standard' value is <code>null</code>. To be used in cases unboxing may lead to a NPE. @param standardValue 'standard' value @param defaultValue default value @return 'standard' value if not <code>null</code> otherwise default value
4363 Zoom signature image with some percent. @param percent increase (positive value) or decrease (negative value) image with x percent. @return Visible Signature Configuration Object
4364 @return signature image width
4365 @return signature image height
4366 Adjust signature for page rotation. This is optional, call this after all x and y coordinates have been set if you want the signature to be positioned regardless of page orientation. @return Visible Signature Configuration Object
4367 Create an affine transform from this matrix's values. @return An affine transform with this matrix's values.
4368 Encodes the given string for use in a PDF content stream. @param text Any Unicode text. @return Array of PDF content stream bytes. @throws IOException If the text could not be encoded. @throws IllegalArgumentException if a character isn't supported by the font.
4369 Returns the name for the given Unicode code point. @param codePoint Unicode code point @return PostScript glyph name, or ".notdef"
4370 Returns the base state represented by the given {@link COSName}. @param state the state name @return the state enum value
4371 Returns the base state represented by the given {@link COSName}. @param state the state name @return the state enum value
4372 Retrieve the glyph IDs for the characters in the specified word, after applying any relevant GSUB rules. The encoded glyph IDs are also written to the specified output stream. @param gsubWorker The GSUB worker which defines the GSUB transformations to apply. @param out The output stream to write the glyph IDs to. @param font The font whose cmap table will be used to map characters to glyph IDs. @param word The word which is being converted from characters to glyph IDs. @return The glyph IDs for the characters in the specified word, after applying any relevant GSUB rules. @throws IllegalStateException If we cannot find a glyph ID for any characters in the specified word.
4373 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source input representing the pdf @param permission he access permissions of the pdf
4374 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source The source that will be closed when this document gets closed, can be null.
4375 {@inheritDoc}
4376 {@inheritDoc}
4377 {@inheritDoc}
4378 {@inheritDoc}
4379 {@inheritDoc}
4380 {@inheritDoc}
4381 {@inheritDoc}
4382 {@inheritDoc}
4383 {@inheritDoc}
4384 {@inheritDoc}
4385 {@inheritDoc}
4386 {@inheritDoc}
4387 {@inheritDoc}
4388 {@inheritDoc}
4389 Returns the set of known font names, including aliases. @return the set of known font names
4390 {@inheritDoc}
4391 Method to convert the COS value in the number tree to the PD Model object. The default implementation will simply use reflection to create the correct object type. Subclasses can do whatever they want. @param base The COS object to convert. @return The converted PD Model object. @throws IOException If there is an error during creation.
4392 a..z, aa..zz, aaa..zzz ... labeling as described in PDF32000-1:2008, Table 159, Page 375.
4393 Returns the number of page label ranges. <p> This will be always &gt;= 1, as the required default entry for the page range starting at the first page is added automatically by this implementation (see PDF32000-1:2008, p. 375). </p> @return the number of page label ranges.
4394 Returns the page label range starting at the given page, or {@code null} if no such range is defined. @param startPage the 0-based page index representing the start page of the page range the item is defined for. @return the page label range or {@code null} if no label range is defined for the given start page.
4395 Get an ordered set of page indices having a page label range. @return set of page indices.
4396 Returns the dash array. @return the dash array, never null.
4397 Creates a PDColor containing the given color component values. @param components array of color component values @param colorSpace color space in which the components are defined
4398 Returns the components of this color value. @return the components of this color value, never null.
4399 Constructor. @param p point @param c color
4400 {@inheritDoc}
4401 get the boundary of a triangle. @return {xmin, xmax, ymin, ymax}
4402 Pops a number (int or real) from the stack. If it's neither data type, a ClassCastException is thrown. @return the number
4403 Pops a value of type int from the stack. If the value is not of type int, a ClassCastException is thrown. @return the int value
4404 Pops a number from the stack and returns it as a real value. If the value is not of a numeric type, a ClassCastException is thrown. @return the real value
4405 Adds a bool value. @param value the value
4406 Creates a new execution context. @param operatorSet the operator set
4407 returns a list of regular expression Patterns representing different common list item formats. For example numbered items of form: <ol> <li>some text</li> <li>more text</li> </ol> or <ul> <li>some text</li> <li>more text</li> </ul> etc., all begin with some character pattern. The pattern "\\d+\." (matches "1.", "2.", ...) or "\[\\d+\]" (matches "[1]", "[2]", ...). <p> This method returns a list of such regular expression Patterns. @return a list of Pattern objects.
4408 Constructor.
4409 Constructor.
4410 Constructor.
4411 Constructor.
4412 Constructor.
4413 Constructor.
4414 Creates a String representation of an Object array. @param array the Object array @return the String representation
4415 Creates a String representation of a float array. @param array the float array @return the String representation
4416 Adds a text position to the contents. @param text the text position
4417 Adds a marked content to the contents. @param markedContent the marked content
4418 Adds an XObject to the contents. @param xobject the XObject
4419 Set if the user can print. <p> This method will have no effect if the object is in read only mode. @param allowPrinting A boolean determining if the user can print.
4420 Set if the user can modify the document. <p> This method will have no effect if the object is in read only mode. @param allowModifications A boolean determining if the user can modify the document.
4421 Set if the user can extract content from the document. <p> This method will have no effect if the object is in read only mode. @param allowExtraction A boolean determining if the user can extract content from the document.
4422 Set if the user can add or modify text annotations and fill in interactive forms fields and, if {@link #canModify() canModify()} returns true, create or modify interactive form fields (including signature fields). Note that if {@link #canFillInForm() canFillInForm()} returns true, it is still possible to fill in interactive forms (including signature fields) even the parameter here is false. <p> This method will have no effect if the object is in read only mode. @param allowAnnotationModification A boolean determining the new setting.
4423 Set if the user can fill in interactive form fields (including signature fields) even if {@link #canModifyAnnotations() canModifyAnnotations()} returns false. Therefore, if you want to prevent a user from filling in interactive form fields, you need to call {@link #setCanModifyAnnotations(boolean) setCanModifyAnnotations(false)} as well. <p> This method will have no effect if the object is in read only mode. @param allowFillingInForm A boolean determining if the user can fill in interactive forms.
4424 Set if the user can extract content from the document for accessibility purposes. <p> This method will have no effect if the object is in read only mode. @param allowExtraction A boolean determining if the user can extract content from the document.
4425 Set if the user can insert/rotate/delete pages. <p> This method will have no effect if the object is in read only mode. @param allowAssembly A boolean determining if the user can assemble the document.
4426 Set if the user can print the document in a faithful format or in a degraded format (if print is enabled). The PDF version must be 1.5 or higher. <p> This method will have no effect if the object is in read only mode. @param canPrintFaithful A boolean determining if the user can print the document in a faithful format.
4427 This will tell if the user can print. @return true If supplied with the user password they are allowed to print.
4428 This will tell if the user can modify contents of the document. @return true If supplied with the user password they are allowed to modify the document
4429 This will tell if the user can extract text and images from the PDF document. @return true If supplied with the user password they are allowed to extract content from the PDF document
4430 This will tell if the user can add or modify text annotations and fill in interactive forms fields and, if {@link #canModify() canModify()} returns true, create or modify interactive form fields (including signature fields). Note that if {@link #canFillInForm() canFillInForm()} returns true, it is still possible to fill in interactive forms (including signature fields) even if this method here returns false. @return true If supplied with the user password they are allowed to modify annotations.
4431 This will tell if the user can fill in interactive form fields (including signature fields) even if {@link #canModifyAnnotations() canModifyAnnotations()} returns false. @return true If supplied with the user password they are allowed to fill in form fields.
4432 This will tell if the user can extract text and images from the PDF document for accessibility purposes. @return true If supplied with the user password they are allowed to extract content from the PDF document
4433 This will tell if the user can insert/rotate/delete pages. @return true If supplied with the user password they are allowed to assemble the document.
4434 This will tell if the user can print the document in a faithful format or in a degraded format (if print is enabled). @return true If supplied with the user password they are allowed to print the document in a faithful format.
4435 returns The private key that will be used to open the document protection. @return The private key. @throws KeyStoreException If there is an error accessing the key.
4436 Returns a SecureRandom If customSecureRandom is not defined, instantiate a new SecureRandom @return SecureRandom
4437 This will reset the key to be used. @param key The RC4 key used during encryption.
4438 This will encrypt and write the next byte. @param aByte The byte to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
4439 Combine the diacritic, for example, convert non-combining diacritic characters to their combining counterparts. @param str String to normalize @return Normalized string
4440 Return true if the given {@code codepoint} is a prohibited character as defined by <a href="https://tools.ietf.org/html/rfc4013#section-2.3">RFC 4013, Section 2.3</a>.
4441 Computes the version number of the {@link SecurityHandler} based on the encryption key length. See PDF Spec 1.6 p 93 and <a href="https://www.adobe.com/content/dam/acom/en/devnet/pdf/adobe_supplement_iso32000.pdf">PDF 1.7 Supplement ExtensionLevel: 3</a> and <a href="http://intranet.pdfa.org/wp-content/uploads/2016/08/ISO_DIS_32000-2-DIS4.pdf">PDF Spec 2.0</a>. @return The computed version number.
4442 Returns the provider to be used for advanced encrypting/decrypting. Default is the BouncyCastleProvider. @return the security provider
4443 This will get the text value of an element. @param node The node to get the text value for. @return The text of the node.
4444 Write a Java string to the output stream. @param text The text to write to the stream. @throws IOException If there is an error when writing the text.
4445 Fetches the predefined CMap from disk (or cache). @param cMapName CMap name @return The predefined CMap, never null. @throws IOException
4446 Parse the given CMap. @param randomAccessRead the source of the CMap to be read @return the parsed CMap
4447 Gets alternative names, as seen in some PDFs, e.g. PDFBOX-142.
4448 Calculate the points of a line with Bresenham's line algorithm <a href="http://en.wikipedia.org/wiki/Bresenham's_line_algorithm">Bresenham's line algorithm</a> @param x0 coordinate @param y0 coordinate @param x1 coordinate @param y1 coordinate @return all the points on the rasterized line from (x0, y0) to (x1, y1)
4449 Calculate the degree value of a triangle. @param p 3 vertices coordinates @return number of unique points in the 3 vertices of a triangle, 3, 2 or 1
4450 Adds the given FontBox font to the cache. @param info the FontInfo to be used as key @param font the font to be cached
4451 Returns the FontBox font associated with the given FontInfo. @param info the FontInfo of the cached font @return the cached font if available, otherwise null
4452 Adds a standard font name to the map of known aliases, to simplify the logic of finding font metrics by name. We want a single lookup in the map to find the font both by a base name or an alias. @see #getAFM @param baseName the font name of the Standard 14 font
4453 Adds a top-priority substitute for the given font. @param match PostScript name of the font to match @param replace PostScript name of the font to use as a replacement
4454 Finds the named font with the given format.
4455 Returns the substitutes for a given font.
4456 This will take a character code and get the name from the code. @param code character code @return PostScript glyph name
4457 For debugging. Prints all matches and returns the best match.
4458 Returns the Type 2 charstring for the given CID, or null if the substituted font does not contain Type 2 charstrings. @param cid CID @return the Type 2 charstring for the given CID or null @throws IOException if the charstring could not be read
4459 Returns the CID for the given character code. If not found then CID 0 is returned. @param code character code @return CID
4460 Returns the packed RGB value for this color, if any. @return RGB @throws IOException if the color conversion fails @throws UnsupportedOperationException if this color value is a pattern.
4461 Computes the backdrop removal equation. <code>C = Cn + (Cn - C0) * (alpha0 / alphagn - alpha0)</code>
4462 Get the data of this chunk as a byte array @return a byte-array with only the data of the chunk
4463 Returns the font's glyph list.
4464 extract all useful "cmap" subtables.
4465 Loads the metrics for the base font specified by name. Metric file must exist in the pdfbox jar under /org/apache/pdfbox/resources/afm/ @param fontName one of the standard 14 font names for which to load the metrics. @throws IOException if no metrics exist for that font.
4466 Returns true if the fsType in the OS/2 table permits embedding.
4467 Returns true if the fsType in the OS/2 table permits subsetting.
4468 Returns an uppercase 6-character unique tag for the given subset.
4469 Returns the Unicode character sequence for the given glyph name, or null if there isn't any. @param name PostScript glyph name @return Unicode character(s), or null.
4470 Creates an encoding from the given AFM font metrics. @param fontMetrics AFM font metrics.
4471 Creates a PDColor containing the given color component values and pattern name. @param components array of color component values @param patternName the name of a pattern in a pattern dictionary @param colorSpace color space in which the pattern/components are defined
4472 Returns the given raster as BufferedImage with the given awtColorSpace using a ComponentColorModel. @param raster the source raster @param awtColorSpace the AWT colorspace @return a BufferedImage in this colorspace
4473 Returns the (A)RGB equivalent of the given raster, using the given AWT color space to perform the conversion. @param raster the source raster @param colorSpace the AWT @return an (A)RGB buffered image
4474 Returns true if the given profile represents sRGB. (unreliable on the data of ColorSpace.CS_sRGB in openjdk)
4475 Returns the type of the color space in the ICC profile. If the ICC profile is invalid, the type of the alternate colorspace is returned, which will be one of {@link ColorSpace#TYPE_GRAY TYPE_GRAY}, {@link ColorSpace#TYPE_RGB TYPE_RGB}, {@link ColorSpace#TYPE_CMYK TYPE_CMYK}, or -1 if that one is invalid. @return an ICC color space type. See {@link ColorSpace#getType()} and the static values of {@link ColorSpace} for more details.
4476 Creates a new JPEG PDImageXObject from a BufferedImage. <p> Do not read a JPEG image from a stream/file and call this method; you'll get more speed and quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) createFromStream()} instead. @param document the document where the image will be created @param image the BufferedImage to embed @return a new Image XObject @throws IOException if the JPEG data cannot be written
4477 Initialize the encoder and set all final fields
4478 High-quality image scaling.
4479 Convert this image to a COS object. @return The cos object that matches this image object.
4480 Parse the PNG structure into the PNGConverterState. If we can't handle something, this method will return null. @param imageData the byte array with the PNG data @return null or the converter state with all relevant chunks
4481 Build an input stream for the IDAT data. May need to concat multiple IDAT chunks. @param state the converter state. @return a input stream with the IDAT data.
4482 Constructor of Patch. @param color 4 corner's colors
4483 This will get the current clipping path. Do not modify this Area object! @return The current clipping path.
4484 Construct the text block from a list of values. Constructs the text block from a list of values treating each entry as an individual {@link Paragraph}. @param listValue the text block string.
4485 {@inheritDoc}
4486 Returns the <code>Matrix</code> entry for the appearance stream form XObject. @return Matrix for appearance stream form XObject.
4487 Computes parameters for a cloudy polygon: n, alpha, and dx.
4488 Computes the alpha parameter for an ellipse curl.
4489 Makes a polygon whose direction is the same as the positive angle direction in the coordinate system. The polygon must not intersect itself.
4490 Flattens an ellipse into a polygon.
4491 Returns true if the given path is rectangular.
4492 @return template height
4493 @param x - x coordinate @param y - y coordinate @return Visible Signature Configuration Object
4494 @param affineTransform the affine transformation @return Visible Signature Configuration Object
4495 Constructor from an existing destination array. @param arr The destination array.
4496 Constructor from an existing destination array. @param arr The destination array.
4497 Constructor from an existing destination array. @param arr The destination array.
4498 Constructor from an existing destination array. @param arr The destination array.
4499 Constructor from an existing destination array. @param arr The destination array.
4500 @param node @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next sibling)
4501 @return An {@link Iterable} view of the items children
4502 Sort two related lists simultaneously by the elements in the key parameter. @param pairs a list of KeyValue elements
4503 Sort two related lists simultaneously by the elements in the value parameter. @param pairs a list of KeyValue elements
4504 Sets high-quality rendering hints on the current Graphics2D.
4505 PDFBOX-5715 / PR#73: This was added to fix a problem with missing fine lines when printing on MacOS. Lines vanish because CPrinterJob sets graphics scale to 1 for Printable so after scaling lines often have a width smaller than 1 after scaling and clipping. This change enlarges the clip bounds to cover at least 1 point plus 0.5 on one and another side in the device space to allow to draw the linePath inside the clip. The linePath can consists from different lines but when its bounds width or height is less than 1.0 it seems safe to use a rectangle as a clip instead of the real path. A more detailed explanation can be read <a href="https://github.com/apache/pdfbox/pull/173">here</a>. @param linePath @return
4506 Calculates the subsampling frequency for a given PDImage based on the current transformation and its calculated transform. Extend this method if you want to use your own strategy. @param pdImage PDImage to be drawn @param at Transform that will be applied to the image when drawing @return The rounded-down ratio of image pixels to drawn pixels. Returned value will always be &gt;=1.
4507 Returns the closest integer which is larger than the given number. Uses BigDecimal to avoid floating point error which would cause gaps in the tiling.
4508 Return the X starting coordinate of the text, adjusted by the given rotation amount. The rotation adjusts where the 0,0 location is relative to the text. @param rotation Rotation to apply (0, 90, 180, or 270). 0 will perform no adjustments. @return X coordinate
4509 This will get the y position of the character with 0,0 in lower left. This will be adjusted by the given rotation. @param rotation Rotation to apply to text to adjust the 0,0 location (0,90,180,270) @return The y coordinate of the text
4510 Get the length or width of the text, based on a given rotation. @param rotation Rotation that was used to determine coordinates (0,90,180,270) @return Width of text in display units
4511 Write the string in TextPosition to the output stream. @param text The text to write to the stream. @throws IOException If there is an error when writing the text.
4512 Show the string data for this text position. @return A human readable form of this object.
4513 Get the text for the region, this should be called after extractRegions(). @param regionName The name of the region to get the text from. @return The text that was identified in that region.
4514 Start a new article, which is typically defined as a column on a single page (also referred to as a bead). Default implementation is to do nothing. Subclasses may provide additional information. @param isLTR true if primary direction of text is left to right. @throws IOException If there is any error writing to the stream.
4515 End an article. Default implementation is to do nothing. Subclasses may provide additional information. @throws IOException If there is any error writing to the stream.
4516 Write the line separator value to the output stream. @throws IOException If there is a problem writing out the line separator to the document.
4517 Write the word separator value to the output stream. @throws IOException If there is a problem writing out the word separator to the document.
4518 Write something (if defined) at the start of a paragraph. @throws IOException if something went wrong
4519 Write something (if defined) at the start of a page. @throws IOException if something went wrong
4520 Write something (if defined) at the end of a page. @throws IOException if something went wrong
4521 iterates over the specified list of Patterns until it finds one that matches the specified string. Then returns the Pattern. <p> Order of the supplied list of patterns is important as most common patterns should come first. Patterns should be strict in general, and all will be used with case sensitivity on. </p> @param string the string to be searched @param patterns list of patterns @return matching pattern
4522 Handles the LTR and RTL direction of the given words. The whole implementation stands and falls with the given word. If the word is a full line, the results will be the best. If the word contains of single words or characters, the order of the characters in a word or words in a line may wrong, due to RTL and LTR marks and characters! Based on http://www.nesterovsky-bros.com/weblog/2013/07/28/VisualToLogicalConversionInJava.aspx @param word The word that shall be processed @return new word with the correct direction of the containing characters
4523 This method parses the bidi file provided as inputstream. @param inputStream - The bidi file as inputstream @throws IOException if any line could not be read by the LineNumberReader
4524 Same as {@link #getUnicode()} except that returned text is ensured to be visually ordered (i.e. same order you would see them displayed on screen when looking from left to right). This is important for Arabic/Hebrew where several unicode characters can be composed in one glyph with logical order (the order in which it would be normally typed from right to left). @return The string on the screen in visual order.
4525 {@inheritDoc}
4526 @return True if the current character is a diacritic char.
4527 Update the zone ID based on the raw offset. This is either GMT, GMT+hh:mm or GMT-hh:mm, where n is between 1 and 14. The highest negative hour is -14, the highest positive hour is 12. Zones that don't fit in this schema are set to zone ID "unknown". @param tz the time zone to update.
4528 Returns a hex string of the given byte. @param b the byte to be converted @return the hex string representing the given byte
4529 Returns a hex string of the given byte array. @param bytes the bytes to be converted @return the hex string representing the given bytes
4530 Returns the bytes corresponding to the ASCII hex encoding of the given byte. @param b the byte to be converted @return the ASCII hex encoding of the given byte
4531 Returns the bytes corresponding to the ASCII hex encoding of the given bytes. @param bytes the bytey to be converted @return the ASCII hex encoding of the given bytes
4532 Writes the given byte as hex value to the given output stream. @param b the byte to be written @param output the output stream to be written to @throws IOException exception if anything went wrong
4533 Decode a base64 String. @param base64Value a base64 encoded String. @return the decoded String as a byte array. @throws IllegalArgumentException if this isn't a base64 encoded string.
4534 Merges two sorted subarrays arr and aux into the order specified by cmp and places the ordered result back into into arr array. @param <T> @param arr Array containing source data to be sorted and target for destination data @param aux Array containing copy of source data to be sorted @param from Start index of left data run so that Left run is arr[from : mid-1]. @param mid End index of left data run and start index of right run data so that Left run is arr[from : mid-1] and Right run is arr[mid : to] @param to End index of right run data so that Right run is arr[mid : to] @param cmp the comparator to determine the order of the list.
4535 Creates a matrix with the same elements as the given AffineTransform. @param at matrix elements will be initialize with the values from this affine transformation, as follows: scaleX shearY 0 shearX scaleY 0 transX transY 1
4536 Transforms the given point by this matrix. @param point point to transform
4537 Fast variant to format a floating point value to a ASCII-string. The format will fail if the value is greater than {@link Long#MAX_VALUE}, smaller or equal to {@link Long#MIN_VALUE}, is {@link Float#NaN}, infinite or the number of requested fraction digits is greater than {@link #MAX_FRACTION_DIGITS}. When the number contains more fractional digits than {@code maxFractionDigits} the value will be rounded. Rounding is done to the nearest possible value, with the tie breaking rule of rounding away from zero. @param value The float value to format @param maxFractionDigits The maximum number of fraction digits used @param asciiBuffer The output buffer to write the formatted value to @return The number of bytes used in the buffer or {@code -1} if formatting failed
4538 Returns the version of PDFBox. @return the version of PDFBox
4539 This will parse an XML stream and create a DOM document. @param is The stream to get the XML from. @param nsAware activates namespace awareness of the parser @return The DOM document. @throws IOException It there is an error creating the dom.
4540 Return the most specific value stored for this byte sequence. If not found, returns <code>null</code> or a default values as specified by calling {@link ByteTrie#setDefaultValue}. @param bytes @return
4541 Constructor. @param aValue The boolean value.
4542 Private constructor. This will limit the number of COSName objects that are created. @param aName The name of the COSName object.
4543 Constructor.
4544 Creates a new PDF string from a byte array. This method can be used to read a string from an existing PDF file, or to create a new byte string. @param bytes The raw bytes of the PDF text string or byte string. @param forceHex forces the hexadecimal presentation of the string if set to true
4545 Constructor.
4546 Constructor. @param object The object that this encapsulates.
4547 Constructor. @param object The object that this encapsulates. @param parser The parser to be used to load the object on demand
4548 Constructor. @param key The object number of the encapsulated object. @param parser The parser to be used to load the object on demand
4549 Constructs an instance specifying the region of the image that should be decoded. The actual region will be clipped to the dimensions of the image. @param x x-coordinate of the top-left corner of the region to be decoded @param y y-coordinate of the top-left corner of the region to be decoded @param width Width of the region to be decoded @param height Height of the region to be decoded
4550 Sets the given {@link COSObjectKey} as a free reference in a PDF's crossreference stream ({@link PDFXRefStream}). @param key The key, that shall be set as the free reference of the document. @param nextFreeObject The object number of the next free object.
4551 Prepares a object stream entry reference for the given {@link COSObject} in a PDF's crossreference stream ({@link PDFXRefStream}). @param objectStreamIndex The index of the {@link COSObject} in the containing object stream. @param key The {@link COSObjectKey}, that is represented by this entry. @param object The {@link COSObject}, that is represented by this entry. @param parentKey The {@link COSObjectKey} of the object stream, that is containing the object.
4552 Default constructor.
4553 Creates a new instance with a given COS dictionary. @param dictionary the dictionary
4554 Creates a new attribute object with a given dictionary. @param dictionary the dictionary
4555 Creates a user property with a given dictionary. @param dictionary the dictionary @param userAttributeObject the user attribute object
4556 @param dict The dictionary storage.
4557 creates a new transition for an existing dictionary @param dictionary the dictionary to be used for the new transition
4558 Constructor. @param dic The COS dictionary.
4559 Constructor. @param dic The COS dictionary.
4560 Constructor. @param dic The COS dictionary.
4561 Constructor. @param dic The COS dictionary.
4562 Create a child node object. @param dic The dictionary for the child node object to refer to. @return The new child node object.
4563 Constructor. This will <b>not</b> set up the /Type and /Subtype entries. @param str The stream parameter.
4564 Constructor. @param str The stream parameter.
4565 {@inheritDoc}
4566 Constructor. @param function The function stream.
4567 Creates a new XObject from the given stream and subtype. @param stream The stream to read. @param subtype the subtype to be used for this XObject
4568 Constructor for an existing structure element. @param dic The existing dictionary.
4569 Constructor for an existing structure element. @param dic The existing dictionary.
4570 Constructor.
4571 Constructor used for encryption. @param protectionPolicy The protection policy.
4572 Constructor. @param a An existing FDF Annotation.
4573 Constructor. @param a An existing FDF Annotation.
4574 Constructor. @param a An existing FDF Annotation.
4575 Constructor. @param a An existing FDF Annotation.
4576 Constructor. @param a An existing FDF Annotation.
4577 Constructor. @param a An existing FDF Annotation.
4578 Constructor. @param a An existing FDF Annotation.
4579 Constructor. @param a An existing FDF Annotation.
4580 Constructor. @param a An existing FDF Annotation.
4581 Constructor. @param a An existing FDF Annotation.
4582 Constructor. @param a An existing FDF Annotation.
4583 Constructor. @param a An existing FDF Annotation.
4584 Constructor. @param a An existing FDF Annotation.
4585 Constructor. @param a An existing FDF Annotation.
4586 Ten bytes for the PANOSE classification number for the font. @see <a href="http://www.monotype.com/services/pan1">http://www.monotype.com/services/pan1</a> @return the PANOSE classification number
4587 Creates a blend composite @param blendMode Desired blend mode @param constantAlpha Constant alpha, must be in the inclusive range [0.0...1.0] or it will be clipped. @return a blend composite. @throws IllegalArgumentException if blendMode is null.
4588 Returns the transparency group attributes dictionary. @return the transparency group attributes dictionary, never null.
4589 Creates a new shading pattern from the given COS dictionary. @param resourceDictionary The COSDictionary for this pattern resource.
4590 Creates a new tiling pattern from the given COS dictionary. @param dictionary The COSDictionary for this pattern. @param resourceCache The resource cache, may be null
4591 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
4592 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
4593 Constructor. @param shadingType2 the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
4594 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
4595 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
4596 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
4597 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
4598 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
4599 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
4600 Create a graphics state from an existing dictionary. @param dictionary The existing graphics state.
4601 Creates a new soft mask. @param dictionary The soft mask dictionary.
4602 Construct the text block from a single value. Constructs the text block from a single value splitting into individual {@link Paragraph} when a new line character is encountered. @param textValue the text block string.
4603 Constructor. @param a The action dictionary.
4604 Constructor. @param a The action dictionary.
4605 Constructor @param a the action dictionary
4606 Constructor. @param a The action dictionary.
4607 Constructor #2. @param a The action dictionary.
4608 Constructor. @param a The action dictionary.
4609 Constructor. @param a The action dictionary.
4610 Constructor. @param a The action dictionary.
4611 Constructor. @param a The action dictionary.
4612 Constructor. @param a The action dictionary.
4613 Constructor. @param a The action dictionary.
4614 Constructor @param a the action dictionary
4615 Constructor. @param a The action dictionary.
4616 Constructor. @param a The action dictionary.
4617 Return two related lists as a single list with key value pairs. @param key the key elements @param value the value elements @return a sorted list of KeyValue elements.
4618 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node to be created
4619 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
4620 Constructor. @param dictionary the corresponding dictionary
4621 Clones this object. @return cloned matrix as an object.
4622 Convenience method to create a scaled instance. Produces the following matrix: x 0 0 0 y 0 0 0 1 @param x The xscale operator. @param y The yscale operator. @return A new matrix with just the x/y scaling
4623 Convenience method to create a translating instance. Produces the following matrix: 1 0 0 0 1 0 x y 1 @param x The x translating operator. @param y The y translating operator. @return A new matrix with just the x/y translating.
4624 Convenience method to create a rotated instance. @param theta The angle of rotation measured in radians @param tx The x translation. @param ty The y translation. @return A new matrix with the rotation and the x/y translating.
4625 Transforms the given vector by this matrix. @param vector 2D vector @return the transformed vector.
4626 Returns a new vector scaled by both x and y. @param sxy x and y scale @return a new vector scaled by both x and y
4627 Return the field tree representing all form fields @return the field tree representing all form fields
4628 Sets the default value to use in {@link ByteTrie#find(byte[])} when no path matches. @param defaultValue
4629 Returns the object at the specified position. @param index the position @return the object @throws IndexOutOfBoundsException if the index is out of range
4630 Returns the size. @return the size
4631 Returns the revision number at the specified position. @param index the position @return the revision number @throws IndexOutOfBoundsException if the index is out of range
4632 Adds an object with a specified revision number. @param object the object @param revisionNumber the revision number
4633 Sets the revision number of a specified object. @param object the object @param revisionNumber the revision number
4634 This will get an encoding by name. May return null. @param name The name of the encoding to get. @return The encoding that matches the name.
4635 Creates a new soft mask. @param dictionary SMask @param resourceCache Resource cache, may be null. @return the newly created instance of PDSoftMask
4636 This will get the selected index. <p> A RadioButton might have multiple same value options which are not selected jointly if they are not set in unison {@link #isRadiosInUnison()}.</p> <p> The method will return the first selected index or -1 if no option is selected.</p> @return the first selected index or -1.
4637 Add a source file to the list of files to merge. @param source Full path and file name of source document. @throws FileNotFoundException If the file doesn't exist
4638 This will parse the trailer from the stream and add it to the state. @return false on parsing error @throws IOException If an IO error occurs.
4639 Returns the {@link COSBase}, that is registered for the given {@link COSObjectKey} in this compression pool. @param key The {@link COSObjectKey} a {@link COSBase} is registered for in this compression pool. @return The {@link COSBase}, that is registered for the given {@link COSObjectKey} in this compression pool, if such an object is contained.
4640 Executes the instruction sequence. @param context the execution context
4641 Constructor that will use the provided function to create a stream cache for the storage of the PDF streams. @param streamCacheCreateFunction a function to create an instance of a stream cache @param parser Parser to be used to parse the document on demand
4642 This is used to handle an operation. @param operator The operation to perform. @param operands The list of arguments. @throws IOException If there is an error processing the operation.
4643 @return Returns the textLineMatrix.
4644 @param value The textLineMatrix to set.
4645 @return Returns the textMatrix.
4646 @param value The textMatrix to set.
4647 Transforms a width using the CTM. @param width the width to be transformed @return the transformed width
4648 Returns the non-stroking color. @return The non-stroking color.
4649 Sets the non-stroking color. @param color The new non-stroking color.
4650 Returns the non-stroking color space. @return The non-stroking color space.
4651 Returns the stroking color. @return The stroking color.
4652 Sets the stroking color. @param color The new stroking color.
4653 Returns the stroking color space. @return The stroking color space.
4654 Returns a new InputStream which reads the encoded PDF stream data. Experts only! @return InputStream containing raw, encoded PDF stream data. @throws IOException If the stream could not be read.
4655 Returns a new OutputStream for writing encoded PDF data. Experts only! @return OutputStream for raw PDF stream data. @throws IOException If the output stream could not be created.
4656 Finds a suitable image reader for an image format. @param formatName The image format to search for. @param errorCause The probably cause if something goes wrong. @return The image reader for the format. @throws MissingImageReaderException if no image reader is found.
4657 Finds a suitable image raster reader for an image format. @param formatName The image format to search for. @param errorCause The probably cause if something goes wrong. @return The image reader for the format. @throws MissingImageReaderException if no image reader is found.
4658 This is used to create/cache operators in the system. @param operator The operator for the system. @return The operator that matches the operator keyword.
4659 {@inheritDoc}
4660 Whether the for control points are on a line. @param ctl an edge's control points, the size of ctl is 4 @return true when 4 control points are on a line, otherwise false
4661 This will get the lower left x coordinate. @return The lower left x.
4662 This will get the lower left y coordinate. @return The lower left y.
4663 This will get the upper right x coordinate. @return The upper right x .
4664 This will get the upper right y coordinate. @return The upper right y.
4665 This will get the size of the font. @return The size of the font.
4666 Returns the r value of the tristimulus. @return the R value.
4667 Returns the g value of the tristimulus. @return the g value
4668 Returns the b value of the tristimulus. @return the B value
4669 Returns the x value of the tristimulus. @return the X value
4670 Returns the y value of the tristimulus. @return the Y value
4671 Returns the z value of the tristimulus. @return the Z value
4672 Get the value of the array as an integer, return the default if it does not exist. @param index The value of the array. @param defaultValue The value to return if the value is null. @return The value at the index or the defaultValue.
4673 Get an entry in the array that is expected to be a COSName. @param index The index into the array. @param defaultValue The value to return if it is null. @return The value at the index or defaultValue if none is found.
4674 This will return the index of the entry or -1 if it is not found. @param object The object to search for. @return The index of the object or -1.
4675 Returns the list of filters.
4676 Create the COSArrayList specifying the List and the backing COSArray. <p>User of this constructor need to ensure that the entries in the List and the backing COSArray are matching i.e. the COSObject of the List entry is included in the COSArray. <p>If the number of entries in the List and the COSArray differ it is assumed that the List has been filtered. In that case the COSArrayList shall only be used for reading purposes and no longer for updating. @param actualList The list of standard java objects @param cosArray The COS array object to sync to.
4677 Performs exponential interpolation {@inheritDoc}
4678 This will get the list of filters that are associated with this stream. @return A (possibly empty) list of all encoding filters to apply to this stream, never null.
4679 This will get the list of filters that are associated with this stream. The list is empty if there are none. @return A list of all encoding filters to apply to this stream.
4680 Write the given {@link COSBoolean} to the given stream. @param output The stream, that shall be written to. @param cosBoolean The content, that shall be written.
4681 Writes a string to the content stream as ASCII. @param text the text to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
4682 Write the given {@link COSDictionary} to the given stream. @param output The stream, that shall be written to. @param cosDictionary The content, that shall be written.
4683 Notifies the user attribute object if the user property is changed. @param oldEntry old entry @param newEntry new entry
4684 {@inheritDoc}
4685 This is a convenience method that will get the dictionary object that is expected to be a COSObject. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSObject.
4686 This is a special case of getItem that takes multiple keys, it will handle the situation where multiple keys could get the same value, ie if either CS or ColorSpace is used to get the colorspace. This will get an object from this dictionary. @param firstKey The first key to try. @param secondKey The second key to try. @return The object that matches the key.
4687 Returns the number of recipients contained in the Recipients field of the dictionary. @return the number of recipients contained in the Recipients field.
4688 returns the COSString contained in the Recipients field at position i. @param i the position in the Recipients field array. @return a COSString object containing information about the recipient number i.
4689 @return the direction in which the specified transition effect shall move. It can be either a {@link COSInteger} or {@link COSName#NONE}. Default to {@link COSInteger#ZERO} @see PDTransitionDirection
4690 This will get the keys of all metadata information fields for the document. @return all metadata key strings. @since Apache PDFBox 1.3.0
4691 Gets the attribute names. @return the attribute names
4692 Copy all Trailer Information to this file. @param trailerDict dictionary to be added as trailer info
4693 Copy Constructor. This will make a shallow copy of this dictionary. @param dict The dictionary to copy.
4694 Tell if the dictionary is an info dictionary. @param dictionary the dictionary to be checked @return true if the given dictionary is an info dictionary
4695 Returns true if widths are present in the font descriptor. @return true if widths are present in the font descriptor
4696 Returns true if the missing widths entry is present in the font descriptor. @return true if the missing widths entry is present in the font descriptor
4697 This will tell if the AcroForm has XFA content. @return true if the AcroForm is an XFA form
4698 Signals that a new XRef object (table or stream) starts. @param startBytePos the offset to start at @param type the type of the Xref object
4699 Constructor. @param aFloat The primitive float object that this object wraps. @throws IOException If aFloat is not a float.
4700 {@inheritDoc}
4701 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
4702 Uses the managed {@link #updateInfo} as the base object of a new {@link COSIncrement}. @return A {@link COSIncrement} based on the managed {@link #updateInfo}. @see COSUpdateInfo @see COSIncrement
4703 Creates a new instance. @param targetDoc the PDF document to modify
4704 Default constructor.
4705 Convenience method, so that we get false for types that can't be updated. @param base @return
4706 Appends a marked-content sequence kid. @param mcid the marked-content id (MCID). @throws IllegalArgumentException if the mcid is negative.
4707 @return the value for this direction
4708 Write the given {@link COSInteger} to the given stream. @param output The stream, that shall be written to. @param cosInteger The content, that shall be written.
4709 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
4710 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
4711 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
4712 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
4713 Constructor. @param num The object number. @param gen The object generation number.
4714 Compares this object with the specified object for order. Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object. @param xReferenceEntry the object to be compared. @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
4715 This will get the X scaling factor. This is dependent on the current transformation matrix (set by the "cm" operator), the text matrix (set by the "Tm" operator) and the font size (set by the "Tf" operator). @return The X scaling factor.
4716 This will get the Y scaling factor. This is dependent on the current transformation matrix (set by the "cm" operator), the text matrix (set by the "Tm" operator) and the font size (set by the "Tf" operator). @return The Y scaling factor.
4717 COSWriter constructor. @param outputStream The output stream to write the PDF. @param compressParameters The configuration for the document's compression.
4718 COSWriter constructor for incremental updates. There must be a path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set, starting from the document catalog. For signatures this is taken care by PDFBox itself. @param outputStream output stream where the new PDF data will be written. @param inputData random access read containing source PDF data @throws IOException if something went wrong
4719 Sets the {@link #updated} state of the managed {@link #updateInfo} to the given state.<br> This shall only then have an effect, if {@link #isAcceptingUpdates()} returns {@code true}. @param updated The state to set for {@link #updated}. @see #update(boolean) @see #updated @see #isAcceptingUpdates()
4720 Returns the content of this string as a PDF <i>text string</i>. @return the PDF string representation of the COSString
4721 Creates a new <i>text string</i> from a Java String. @param text The string value of the object. @param forceHex forces the hexadecimal presentation of the string if set to true
4722 Returns true if this font is one of the "Standard 14" fonts and receives special handling. @return true if this font is one of the "Standard 14" fonts
4723 This will read a chunk of data. @param data The buffer to write data to. @param offset The offset into the data stream. @param len The number of byte to attempt to read. @return The number of bytes actually read. @throws IOException If there is an error reading data from the underlying stream.
4724 This will close the stream. @throws IOException If there is an error closing the wrapped stream.
4725 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
4726 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
4727 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
4728 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
4729 This will read the next byte from the stream. @return The next byte read from the stream. @throws IOException If there is an error reading from the wrapped stream.
4730 This will read a chunk of data. @param data The buffer to write data to. @param offset The offset into the data stream. @param length The number of byte to attempt to read. @return The number of bytes actually read. @throws IOException If there is an error reading data from the underlying stream.
4731 Read the image stream of the signature and set height and width. @param stream stream of your visible signature image @throws IOException If we can't read, flush, or close stream of image
4732 {@inheritDoc}
4733 We look which row encoding is the "best" one, ie. has the lowest sum. We don't implement anything fancier to choose the right row encoding. This is just the recommend algorithm in the spec. The get the perfect encoding you would need to do a brute force check how all the different encoded rows compress in the zip stream together. You have would have to check 5*image-height permutations... @return the "best" row encoding of the row encodings
4734 Reset all data so that it can be used to rebuild the trailer.
4735 Close all input documents which were used for the overlay and opened by this class. @throws IOException if something went wrong
4736 Creates a Form XObject for reading. @param stream The XObject stream
4737 Constructor. @param pdContentstream The content stream to parse. @throws IOException If there is an error initializing the stream.
4738 Constructor. @param bytes the bytes to parse.
4739 Search for/parse the object with the given object number. The stream is closed after parsing the object with the given number. @param objectNumber the number of the object to b e parsed @return the parsed object or null if the object with the given number can't be found @throws IOException if there is an error while parsing the stream
4740 Read all object numbers from the compressed object stream. The stream is closed after reading the object numbers. @return a map off all object numbers and the corresponding offset within the object stream. @throws IOException if there is an error while parsing the stream
4741 Constructor. @param codeToName the given code to name mapping
4742 Creates an encoding from the given FontBox encoding. @param encoding FontBox encoding @return the encoding created from the given FontBox encoding
4743 Skip the upcoming CRLF or LF which are supposed to follow a stream. Trailing spaces are removed as well. @throws IOException if something went wrong
4744 Skip one line break, such as CR, LF or CRLF. @return true if a line break was found and removed. @throws IOException if something went wrong
4745 This will read bytes until the first end of line marker occurs. NOTE: The EOL marker may consists of 1 (CR or LF) or 2 (CR and CL) bytes which is an important detail if one wants to unread the line. @return The characters between the current position and the end of the line. @throws IOException If there is an error reading from the stream.
4746 This will skip all spaces and comments that are present. @throws IOException If there is an error reading from the stream.
4747 The number of color components of this shading. @return number of color components of this shading @throws IOException if the data could not be read
4748 The number of color components of this shading. @return number of color components of this shading @throws IOException if the data could not be read
4749 Search for the offset of the given xref table/stream among those found by a brute force search. @param xrefOffset the given offset to be searched for @return the offset of the xref entry @throws IOException if something went wrong
4750 Parse the header of a pdf. @return true if a PDF header was found @throws IOException if something went wrong
4751 Parse the header of a fdf. @return true if a FDF header was found @throws IOException if something went wrong
4752 Parse all compressed objects. The stream is closed after parsing. @return a map containing all parsed objects using the object number as key @throws IOException if there is an error while parsing the stream
4753 Calculate the key to be used for RC4 and AES-128. @param objectNumber The data object number. @param genNumber The data generation number. @return the calculated key.
4754 Create a new appearance stream. @param appearance The appearance stream to add to. @param outputStream The appearances output stream to write to.
4755 Create a new appearance stream. Note that this is not actually a "page" content stream. @param doc The document the appearance is part of. @param appearance The appearance stream to add to. @param outputStream The appearances output stream to write to.
4756 Transforms a point using the CTM. @param x the x-coordinate of the point to be transformed @param y the y-coordinate of the point to be transformed @return the transformed point
4757 Not called in TexturePaint subclasses, which is why we wrap TexturePaint.
4758 Concatenates (premultiplies) the given matrix to this matrix. @param matrix The matrix to concatenate.
4759 Translates this matrix by the given amount. @param tx x-translation @param ty y-translation
4760 Scales this matrix by the given factors. @param sx x-scale @param sy y-scale
4761 This method multiplies this Matrix with the specified other Matrix, storing the product in a new instance. It is allowed to have (other == this). @param other the second operand Matrix in the multiplication; required @return the product of the two matrices.
4762 Retrieve the encoded glyph IDs for the characters in the specified text, after applying any relevant GSUB rules. The glyph IDs used are also added to the specified glyph ID set. @param gsubWorker The GSUB worker which defines the GSUB transformations to apply. @param glyphIds The set of glyph IDs which is to be populated with the glyph IDs found in the text. @param font The font whose cmap table will be used to map characters to glyph IDs. @param text The text which is being converted from characters to glyph IDs. @return The encoded glyph IDs for the characters in the specified text, after applying any relevant GSUB rules. @throws IOException If there is an error during encoding. @throws IllegalStateException If we cannot find a glyph ID for any characters in the specified text.
4763 Create the resulting document. Maybe overwritten if the parser uses another class as document. @return the resulting document @throws IOException if the method is called before parsing the document
4764 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source input representing the pdf
4765 Returns a new security handler for the given protection policy, or null none is available. @param policy the protection policy for which to create a security handler @return a new SecurityHandler instance, or null if none is available
4766 Returns a new security handler for the given Filter name, or null none is available. @param name the Filter name from the PDF encryption dictionary @return a new SecurityHandler instance, or null if none is available
4767 Set the stroking color. <p> The command is only emitted if the color is not null and the number of components is &gt; 0. @param color The colorspace to write. @return true if the stroking color was set successfully @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setStrokingColor(PDColor)
4768 Set the non stroking color. <p> The command is only emitted if the color is not null and the number of components is &gt; 0. @param color The colorspace to write. @return true if the non stroking color was set successfully @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setNonStrokingColor(PDColor)
4769 Constructor.
4770 This will tell if the access permission corresponds to owner access permission (no restriction). @return true if the access permission does not restrict the use of the document
4771 Indicates if any revision 3 access permission is set or not. @return true if any revision 3 access permission is set
4772 This will encrypt and write the data. @param data The data to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
4773 This will encrypt and write the data. @param data The data to encrypt. @param offset The offset into the array to start reading data from. @param len The number of bytes to attempt to read. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
4774 Inserts the diacritic TextPosition to the str of this TextPosition and updates the widths array to include the extra character width. @param i current character @param diacritic The diacritic TextPosition
4775 Write a Java string to the output stream. The default implementation will ignore the <code>textPositions</code> and just calls {@link #writeString(String)}. @param text The text to write to the stream. @param textPositions The TextPositions belonging to the text. @throws IOException If there is an error when writing the text.
4776 Constructor of class Line. @param p0 one end of a line @param p1 the other end of the line @param c0 color of point p0 @param c1 color of point p1
4777 Creates a new soft mask paint. @param paint underlying paint. @param mask soft mask @param bboxDevice bbox of the soft mask in the underlying Graphics2D device space @param backdropColor the color to be used outside the transparency group’s bounding box; if null, black will be used. @param transferFunction the transfer function, may be null.
4778 Computes backdrop removal. The backdrop removal equation is given in section 11.4.4 in the PDF 32000-1:2008 standard. It returns the final color <code>C</code> for each pixel in the group:<br> <code>C = Cn + (Cn - C0) * (alpha0 / alphagn - alpha0)</code><br> where<br> <code>Cn</code> is the group color including backdrop (read from <code>groupImage</code>),<br> <code>C0</code> is the backdrop color,<br> <code>alpha0</code> is the backdrop alpha,<br> <code>alphagn</code> is the group alpha excluding backdrop (read the alpha channel from <code>groupAlphaImage</code>)<br> <p> The alpha of the result is equal to <code>alphagn</code>, i.e., the alpha channel of <code>groupAlphaImage</code>. <p> The <code>backdrop</code> image may be much larger than <code>groupImage</code> if, for example, the current page is used as the backdrop. Only a specific rectangular region of <code>backdrop</code> is used in the backdrop removal: upper-left corner is at <code>(offsetX, offsetY)</code>; width and height are equal to those of <code>groupImage</code>. @param backdrop group backdrop @param offsetX backdrop left X coordinate @param offsetY backdrop upper Y coordinate
4779 Returns the metrics for font specified by fontName. Loads the font metrics if not already loaded. @param fontName name of font; either a base name or alias @return the font metrics or null if the name is not one of the known names @throws IllegalArgumentException if no metrics exist for that font.
4780 Creates a new GlyphList from a glyph list file. @param numberOfEntries number of expected values used to preallocate the correct amount of memory @param input glyph list in Adobe format @throws IOException if the glyph list could not be read
4781 Creates a new GlyphList from multiple glyph list files. @param glyphList an existing glyph list to be copied @param input glyph list in Adobe format @throws IOException if the glyph list could not be read
4782 Returns the GID for the given character code. @param code character code @return GID (glyph index) @throws IOException if the data could not be read
4783 Maps a PostScript glyph name to the name in the underlying font, for example when using a TTF font we might map "W" to "uni0057".
4784 Maps a PostScript glyph name to the name in the underlying font, for example when using a TTF font we might map "W" to "uni0057".
4785 Lazy load the ICC profile, because it's slow. @throws IOException if the ICC profile could not be initialized
4786 @param image The image to apply the mask to as alpha channel. @param mask A mask image in 8 bit Gray. Even for a stencil mask image due to {@link #getOpaqueImage()} and {@link SampledImageReader}'s {@code from1Bit()} special handling of DeviceGray. @param interpolateMask interpolation flag of the mask image. @param isSoft {@code true} if a soft mask. If not stencil mask, then alpha will be inverted by this method. @param matte an optional RGB matte if a soft mask. @return an ARGB image (can be the altered original image)
4787 Check if the chunk is sane, i.e. CRC matches and offsets and lengths in the byte array
4788 Constructor of CubicBezierCurve @param ctrlPnts 4 control points [p0, p1, p2, p3] @param l dividing level, if l = 0, one cubic Bezier curve is divided into 2^0 = 1 segments, if l = n, one cubic Bezier curve is divided into 2^n segments
4789 Whether a point is contained in this ShadedTriangle. @param p the target point @return false if p is outside of this triangle, otherwise true
4790 Calculate the color of a point. @param p the target point @return an array denotes the point's color
4791 Modify the current clipping path by intersecting it with the given path. @param path path to intersect with the clipping path
4792 Modify the current clipping path by intersecting it with the given path. @param area area to intersect with the clipping path
4793 Transfer clip to the destination device. Override this if you want to avoid to do slow intersecting operations but want the destination device to do this (e.g. SVG). You can get the individual clippings via {@link PDGraphicsState#getCurrentClippingPaths()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5258">PDFBOX-5258</a> for sample code. @param graphics graphics device
4794 Draws the pattern stream to the requested context. @param g The graphics context to draw onto. @param pattern The tiling pattern to be used. @param colorSpace color space for this tiling. @param color color for this tiling. @param patternMatrix the pattern matrix @throws IOException If there is an IO error while drawing the page.
4795 This will get the text direction adjusted x position of the character. This is adjusted based on text direction so that the first character in that direction is in the upper left at 0,0. This method ignores the page rotation but takes the text rotation (see {@link #getDir() getDir()}) and adjusts the coordinates to awt. This is useful when doing text extraction, to compare the glyph positions when imagining these to be horizontal. See also <a href="https://stackoverflow.com/questions/57067372/">this answer by Michael Klink</a> for further details and <a href="https://issues.apache.org/jira/browse/PDFBOX-4597">PDFBOX-4597</a> for a sample file. @return The x coordinate of the text.
4796 Constructor. @param pageRotation rotation of the page that the text is located in @param pageWidth width of the page that the text is located in @param pageHeight height of the page that the text is located in @param textMatrix text rendering matrix for start of text (in display units) @param endX x coordinate of the end position @param endY y coordinate of the end position @param maxHeight Maximum height of text (in display units) @param individualWidth The width of the given character/string. (in text units) @param spaceWidth The width of the space character. (in display units) @param unicode The string of Unicode characters to be displayed. @param charCodes An array of the internal PDF character codes for the glyphs in this text. @param font The current font for this text position. @param fontSize The new font size. @param fontSizeInPt The font size in pt units (see {@link #getFontSizeInPt()} for details).
4797 This will get the y position of the text, adjusted so that 0,0 is upper left and it is adjusted based on the text direction. This method ignores the page rotation but takes the text rotation and adjusts the coordinates to awt. This is useful when doing text extraction, to compare the glyph positions when imagining these to be horizontal. See also <a href="https://stackoverflow.com/questions/57067372/">this answer by Michael Klink</a> for further details and <a href="https://issues.apache.org/jira/browse/PDFBOX-4597">PDFBOX-4597</a> for a sample file. @return The adjusted y coordinate of the character.
4798 This will get the width of the string when page rotation adjusted coordinates are used. @return The width of the text in display units.
4799 This will get the width of the string when text direction adjusted coordinates are used. @return The width of the text in display units.
4800 Start a new article, which is typically defined as a column on a single page (also referred to as a bead). This assumes that the primary direction of text is left to right. Default implementation is to do nothing. Subclasses may provide additional information. @throws IOException If there is any error writing to the stream.
4801 Write something (if defined) at the end of a paragraph. @throws IOException if something went wrong
4802 returns the list item Pattern object that matches the text at the specified PositionWrapper or null if the text does not match such a pattern. The list of Patterns tested against is given by the {@link #getListItemPatterns()} method. To add to the list, simply override that method (if sub-classing) or explicitly supply your own list using {@link #setListItemPatterns(List)}. @param pw position @return the matching pattern
4803 Normalize certain Unicode characters. For example, convert the single "fi" ligature to "f" and "i". Also normalises Arabic and Hebrew presentation forms. @param word Word to normalize @return Normalized word
4804 Converts a Calendar to a string formatted as: D:yyyyMMddHHmmss#hh'mm' where # is Z, +, or -. @param cal The date to convert to a string. May be null. The DST_OFFSET is included when computing the output time zone. @return The date as a String to be used in a PDF document, or null if the cal value is null
4805 Converts the date to ISO 8601 string format: yyyy-mm-ddThh:MM:ss#hh:mm (where '#" is '+' or '-'). @param cal The date to convert. Must not be null. The DST_OFFSET is included in the output value. @return The date represented as an ISO 8601 string.
4806 This will take this string and create a hex representation of the bytes that make the string. @return A hex string representing the bytes in this string.
4807 Write externally created signature of PDF data obtained via {@link #getDataToSign()} method. @param cmsSignature CMS signature byte array @throws IllegalStateException if PDF is not prepared for external signing @throws IOException if source data stream is closed
4808 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
4809 Writes the given byte array as hex value to the given output stream. @param bytes the byte array to be written @param output the output stream to be written to @throws IOException exception if anything went wrong
4810 Sorts the array using iterative (bottom-up) merge sort. @param <T> the class of the objects in the list @param arr the array of objects to be sorted. @param cmp the comparator to determine the order of the list.
4811 This will parse an XML stream and create a DOM document. @param is The stream to get the XML from. @return The DOM document. @throws IOException It there is an error creating the dom.
4812 Examines the a file's first bytes and estimates the file's type. <p> Requires a {@link BufferedInputStream} in order to mark and reset the stream to the position at which it was provided to this method once completed. <p> Requires the stream to contain at least eight bytes. @param inputStream a buffered input stream of the file to examine. @return the file type. @throws IOException if an IO error occurred or the input stream ended unexpectedly.
4813 Constructor.
4814 This will get a COSName object with that name. @param aName The name of the object. @return A COSName with the specified name.
4815 Creates a new PDF string from a byte array. This method can be used to read a string from an existing PDF file, or to create a new byte string. @param bytes The raw bytes of the PDF text string or byte string.
4816 Constructor.
4817 Use the given list to initialize the COSArray. @param cosObjectables the initial list of COSObjectables
4818 Creates a new stream with an empty dictionary. Data is stored in the given scratch file. @param streamCache Stream cache for writing stream data.
4819 {@inheritDoc}
4820 Return a default DecodeResult. @return a default instance of DecodeResult
4821 Default Constructor.
4822 Constructor for embedding.
4823 This will take a map&lt;java.lang.String,org.apache.pdfbox.pdmodel.COSObjectable&gt; and convert it into a COSDictionary. @param someMap A map containing COSObjectables @return A proper COSDictionary
4824 Default constructor
4825 Constructor.
4826 Constructor. @param valueClass The PD Model type of object that is the value.
4827 Creates a new empty page label range object.
4828 Default Constructor.
4829 Constructor for subclasses.
4830 Default Constructor.
4831 creates a new empty crypt filter dictionary.
4832 creates a new empty encryption dictionary.
4833 Default constructor.
4834 Default constructor.
4835 Default constructor.
4836 Default constructor.
4837 Default constructor.
4838 Default constructor.
4839 Default constructor.
4840 Default constructor.
4841 Default constructor.
4842 Creates a new DeviceN colour space attributes dictionary.
4843 Creates a new DeviceN Process Dictionary.
4844 Default constructor.
4845 Default constructor.
4846 Default constructor.
4847 Default constructor.
4848 Default constructor.
4849 Default constructor.
4850 Default constructor, creates target directory.
4851 Constructor.
4852 Default constructor.
4853 Constructor.
4854 Constructor.
4855 Default constructor.
4856 Default constructor.
4857 Default constructor.
4858 Default constructor.
4859 Constructor. @param acroForm The form that this field is part of.
4860 Constructor.
4861 Constructor.
4862 Constructor. @param object The object that this encapsulates. @param objectKey The COSObjectKey of the encapsulated object
4863 Creates a default attribute object with a given dictionary. @param dictionary the dictionary
4864 Constructor @param dictionary the dictionary
4865 Creates a new standard attribute object with a given dictionary. @param dictionary the dictionary
4866 Constructor for an existing outline item. @param dic The storage dictionary.
4867 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object. @throws IllegalStateException if the value of the metadata entry is different from a stream or null
4868 Returns the metadata associated with this XObject, or null if there is none. @return the metadata associated with this object.
4869 A reference to an object stream, of which the current object stream is considered an extension. @return The object that this stream is an extension.
4870 Constructor. @param function The function.
4871 Constructor. @param functionStream The function .
4872 Creates a PostScript XObject. @param stream The XObject stream
4873 Creates a Form XObject for reading. @param stream The XObject stream
4874 Creates a Form XObject for reading. @param stream The XObject stream @param cache the cache to be used for the resources
4875 Constructor.
4876 Constructor.
4877 Constructor used for encryption. @param publicKeyProtectionPolicy The protection policy.
4878 Constructor used for encryption. @param standardProtectionPolicy The protection policy.
4879 Constructor. @param a An existing FDF Annotation.
4880 Constructor. @param a An existing FDF Annotation.
4881 Constructor. @param a An existing FDF Annotation.
4882 Constructor. @param a An existing FDF Annotation.
4883 Creates a new tiling pattern from the given COS dictionary. @param dictionary The COSDictionary for this pattern.
4884 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
4885 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
4886 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
4887 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
4888 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node to be created
4889 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
4890 Generate a unique name for the signature. @return the signature's unique name
4891 {@inheritDoc}
4892 Creates a new soft mask. @param dictionary SMask @return the newly created instance of PDSoftMask
4893 Constructor. Uses main memory to buffer PDF streams. @param parser Parser to be used to parse the document on demand
4894 Constructor that will use the provided function to create a stream cache for the storage of the PDF streams. @param streamCacheCreateFunction a function to create an instance of a stream cache
4895 This is used to handle an operation. @param operation The operation to perform. @param arguments The list of arguments. @throws IOException If there is an error processing the operation.
4896 Creates a marked-content sequence. @param tag the tag @param properties the properties @return the marked-content sequence
4897 This will get the width of this rectangle as calculated by upperRightX - lowerLeftX. @return The width of this rectangle.
4898 Method to determine if the x/y point is inside this rectangle. @param x The x-coordinate to test. @param y The y-coordinate to test. @return True if the point is inside this rectangle.
4899 This will get the height of this rectangle as calculated by upperRightY - lowerLeftY. @return The height of this rectangle.
4900 Returns a path which represents this rectangle having been transformed by the given matrix. Note that the resulting path need not be rectangular. @param matrix the matrix to be used for the transformation @return the transformed rectangle
4901 Returns a general path equivalent to this rectangle. This method avoids the problems caused by Rectangle2D not working well with -ve rectangles. @return a general path equivalent to this rectangle
4902 This will return a string representation of this rectangle. @return This object as a string.
4903 Get the value of the array as an integer. @param index The index into the list. @return The value at that index or -1 if does not exist.
4904 Get the value of the array as a string. @param index The index into the array. @return The name converted to a string or null if it does not exist.
4905 Returns a new OutputStream for writing stream data, using and the given filters. @param filters COSArray or COSName of filters to be used. @return OutputStream for un-encoded stream data. @throws IOException If the output stream could not be created.
4906 Creates an Image XObject with the given stream as its contents and current color spaces. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param stream the XObject stream to read @param resources the current resources
4907 This will get the suffix for this image type, e.g. jpg/png. @return The image suffix or null if not available.
4908 Writes a real number to the content stream. @param real the real number to be added to the content stream @throws IOException If the underlying stream has a problem being written to. @throws IllegalArgumentException if the parameter is not a finite number
4909 Writes an integer number to the content stream. @param integer the integer to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
4910 Writes a string to the content stream as ASCII. @param text the text to be added to the content stream followed by a newline @throws IOException If the underlying stream has a problem being written to.
4911 {@inheritDoc}
4912 This factory method will get the appropriate number object. @param number The string representation of the number. @return A number object, either float or int. @throws IOException If the string is not a number.
4913 Write the given {@link COSFloat} to the given stream. @param output The stream, that shall be written to. @param cosFloat The content, that shall be written.
4914 Uses this {@link COSUpdateInfo} as the base object of a new {@link COSIncrement}. @return A {@link COSIncrement} based on this {@link COSUpdateInfo}. @see COSIncrement
4915 Returns the object key for the given combination of object and generation number. The object key from the cross reference table/stream will be reused if available. Otherwise a newly created object will be returned. @param num the given object number @param gen the given generation number @return the COS object key
4916 Brute force search for every object in the pdf. @throws IOException if something went wrong
4917 Search for all offsets of object streams within the given pdf @return a map of all offsets for object streams @throws IOException if something went wrong
4918 Parses through the unfiltered stream and populates the xrefTable HashMap. @param resolver resolver to read the xref/trailer information @throws IOException If there is an error while parsing the stream.
4919 Check if the given object can be found at the given offset. Returns the provided object key if everything is ok. If the generation number differs it will be fixed and a new object key is returned. @param objectKey the key of object we are looking for @param offset the offset where to look @param xrefOffset a map with with all known xref entries @return returns the found/fixed object key @throws IOException if something went wrong
4920 This will parse the xref table from the stream and add it to the state The XrefTable contents are ignored. @param startByteOffset the offset to start at @return false on parsing error @throws IOException If an IO error occurs.
4921 COSWriter constructor. @param outputStream The output stream to write the PDF.
4922 Constructor for incremental updates with a list of objects to write. This allows to include objects even if there is no path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set so the incremental update gets smaller. Only dictionaries are supported; if you need to update other objects classes, then add their parent dictionary. @param outputStream output stream where the new PDF data will be written. @param inputData random access read containing source PDF data. @param objectsToWrite objects that <b>must</b> be part of the incremental saving. @throws IOException if something went wrong
4923 Set the update state of the dictionary for the COSWriter. This indicates whether an object is to be written when there is an incremental save. @param flag the update state.
4924 Calls {@link #update(boolean)} with {@code true} as the new update state.<br> This shall only then have an effect, if {@link #isAcceptingUpdates()} returns {@code true}. @see #update(boolean) @see #updated @see #isAcceptingUpdates()
4925 Get an entry in the array that is expected to be a COSName. @param index The index into the array. @param defaultValue The value to return if it is null. @return The value at the index or defaultValue if none is found.
4926 This will get the file name. @return The file name.
4927 This will get the name of the destination. @return The name of the destination.
4928 Return either one of a list which can have two-element arrays entries. <p> Some entries in a dictionary can either be an array of elements or an array of two-element arrays. This method will either return the elements in the array or in case of two-element arrays, the element designated by the pair index </p> <p> An {@link IllegalArgumentException} will be thrown if the items contain two-element arrays and the index is not 0 or 1. </p> @param items the array of elements or two-element arrays @param pairIdx the index into the two-element array @return a List of single elements
4929 This will get the (optional) export values. <p>The export values are defined in the field dictionaries /Opt key.</p> <p>The option values are used to define the export values for the field to <ul> <li>hold values in non-Latin writing systems as name objects, which represent the field value, are limited to PDFDocEncoding </li> <li>allow radio buttons having the same export value to be handled independently </li> </ul> @return List containing all possible export values. If there is no /Opt entry an empty list will be returned. @see #getOnValues()
4930 Get the default appearance. This is an inheritable attribute. The default appearance contains a set of default graphics and text operators to define the field’s text size and color. @return the DA element of the dictionary object
4931 Creates a new <i>text string</i> from a Java String. @param text The string value of the object.
4932 Constructor usable for signing existing signature fields. @param imageStream image as a stream @throws IOException if the new instance of PDVisibleSignDesigner could not be created
4933 Set the image for the signature. @param path Path of the image file. @return Visible Signature Configuration Object @throws IOException if the image for the signature could not be set
4934 Creates a Transparency Group for reading. @param stream The XObject stream
4935 This will parse a PDF dictionary. @param isDirect indicates whether the dictionary to be read is a direct object @return The parsed dictionary, never null. @throws IOException If there is an error reading the stream.
4936 This will read the next string from the stream. @return The string that was read from the stream, never null. @throws IOException If there is an error reading from the stream.
4937 Reads given pattern from {@link #source}. Skipping whitespace at start and end if wanted. @param expectedString pattern to be skipped @param skipSpaces if set to true spaces before and after the string will be skipped @throws IOException if pattern could not be read
4938 This will read the next string from the stream up to a certain length. @param length The length to stop reading at. @return The string that was read from the stream of length 0 to length. @throws IOException If there is an error reading from the stream.
4939 This will read an integer from the stream. @return The integer that was read from the stream. @throws IOException If there is an error reading from the stream.
4940 This will read an long from the stream. @return The long that was read from the stream. @throws IOException If there is an error reading from the stream.
4941 Try to find a fixed offset for the given xref table/stream. @param objectOffset the given offset where to look at @return the fixed offset @throws IOException if something went wrong
4942 This will compute the user password hash. @param password The plain text password. @param owner The owner password hash. @param permissions The document permissions. @param id The document id. @param encRevision The revision of the encryption. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @return The user password. @throws IOException if the password could not be computed
4943 Compute the owner entry in the encryption dictionary. @param ownerPassword The plaintext owner password. @param userPassword The plaintext user password. @param encRevision The revision number of the encryption algorithm. @param length The length of the encryption key. @return The o entry of the encryption dictionary. @throws IOException if the owner password could not be computed
4944 Rotates this matrix by the given factors. @param theta The angle of rotation measured in radians
4945 Applies a text position adjustment from the TJ operator. May be overridden in subclasses. @param tx x-translation @param ty y-translation
4946 Translates this matrix by the given vector. @param vector 2D vector
4947 Produces a copy of the first matrix, with the second matrix concatenated. @param a The matrix to copy. @param b The matrix to concatenate. @return a copy of the first matrix with the second matrix concatenated
4948 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps.
4949 {@inheritDoc}
4950 Returns the access permissions granted when the document was decrypted. If the document was not decrypted this method returns the access permission for a document owner (ie can do everything). The returned object is in read only mode so that permissions cannot be changed. Methods providing access to content should rely on this object to verify if the current user is allowed to proceed. @return the access permissions for the current user on the document.
4951 Computes the revision version of the StandardSecurityHandler to use regarding the version number and the permissions bits set. See PDF Spec 1.6 p98 @param version The version number. @return The computed revision number.
4952 Encrypt or decrypt data with AES with key length other than 256 bits. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
4953 Encrypt or decrypt data with AES256. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
4954 Encrypt or decrypt data with RC4. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param input The data to encrypt. @param output The output to write the encrypted data to. @throws IOException If there is an error reading the data.
4955 This will encrypt and write the data. @param data The data to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
4956 Return the {@code SASLPrep}-canonicalised version of the given {@code str} for use as a query string. This implements the {@code SASLPrep} algorithm defined in <a href="https://tools.ietf.org/html/rfc4013">RFC 4013</a>. @param str The string to canonicalise. @return The canonicalised string. @throws IllegalArgumentException if the string contained prohibited codepoints, or broke the requirements for bidirectional character handling. @see <a href="https://tools.ietf.org/html/rfc3454#section-7">RFC 3454, Section 7</a> for discussion of what a query string is.
4957 Return the {@code SASLPrep}-canonicalised version of the given @code str} for use as a stored string. This implements the {@code SASLPrep} algorithm defined in <a href="https://tools.ietf.org/html/rfc4013">RFC 4013</a>. @param str The string to canonicalise. @return The canonicalised string. @throws IllegalArgumentException if the string contained prohibited codepoints, or broke the requirements for bidirectional character handling. @see <a href="https://tools.ietf.org/html/rfc3454#section-7">RFC 3454, Section 7</a> for discussion of what a stored string is.
4958 Write a list of string containing a whole line of a document. @param line a list with the words of the given line @throws IOException if something went wrong
4959 {@inheritDoc} <p> The method returns null if there is there was an error opening the font.
4960 Saves the font metadata cache to disk.
4961 Loads the font metadata cache from disk.
4962 Sets the font service provider.
4963 Constructor. @param p an array of the 3 vertices of a triangle @param c an array of color corresponding the vertex array p
4964 Writes the CMap as ASCII to the given output stream. @param out ASCII output stream @throws IOException if the stream could not be written
4965 Loads a glyph list from disk.
4966 Inverts the font's code -&gt; GID mapping. Any duplicate (GID -&gt; code) mappings will be lost. @return the GID for the given code @throws IOException if the data could not be read
4967 Check if the converter state is sane. @param state the parsed converter state @return true if the state seems plausible
4968 End buffering the text clipping path, if any.
4969 Sets the clipping path using caching for performance. We track lastClip manually because {@link Graphics2D#getClip()} returns a new object instead of the same one passed to {@link Graphics2D#setClip(java.awt.Shape) setClip()}. You may need to call this if you override {@link #showGlyph(Matrix, PDFont, int, Vector) showGlyph()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5093">PDFBOX-5093</a> for more.
4970 Return the stream of PDF data to be signed. Clients should use this method only to create signatures externally. {@link #write(PDDocument)} method should have been called prior. The created signature should be set using {@link #writeExternalSignature(byte[])}. <p> When {@link SignatureInterface} instance is used, COSWriter obtains and writes the signature itself. </p> @return data stream to be signed @throws IllegalStateException if PDF is not prepared for external signing @throws IOException if input data is closed
4971 Merge a single character TextPosition into the current object. This is to be used only for cases where we have a diacritic that overlaps an existing TextPosition. In a graphical display, we could overlay them, but for text extraction we need to merge them. Use the contains() method to test if two objects overlap. @param diacritic TextPosition to merge into the current TextPosition.
4972 Determine if this TextPosition logically contains another (i.e. they overlap and should be rendered on top of each other). @param tp2 The other TestPosition to compare against @return True if tp2 is contained in the bounding box of this text.
4973 Determine if this TextPosition perfectly contains another (i.e. the other TextPosition overlaps 100% with this one and fits entirely inside its bounding box when they are rendered on top of each other). @param tp2 The other TestPosition to compare against @return True if tp2 is contained completely inside the bounding box of this text.
4974 writes the paragraph separator string to the output. @throws IOException if something went wrong
4975 tests the relationship between the last text position, the current text position and the last text position that followed a line separator to decide if the gap represents a paragraph separation. This should <i>only</i> be called for consecutive text positions that first pass the line separation test. <p> This base implementation tests to see if the lastLineStartPosition is null OR if the current vertical position has dropped below the last text vertical position by at least 2.5 times the current text height OR if the current horizontal position is indented by at least 2 times the current width of a space character. </p> <p> This also attempts to identify text that is indented under a hanging indent. </p> <p> This method sets the isParagraphStart and isHangingIndent flags on the current position object. </p> @param position the current text position. This may have its isParagraphStart or isHangingIndent flags set upon return. @param lastPosition the previous text position (should not be null). @param lastLineStartPosition the last text position that followed a line separator, or null. @param maxHeightForLine max height for text positions since lasLineStartPosition.
4976 Used within {@link #normalize(List)} to create a single {@link WordWithTextPositions} entry.
4977 Write the given {@link COSName} to the given stream. @param output The stream, that shall be written to. @param cosName The content, that shall be written.
4978 Writes a COSName to the content stream. @param name the name to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
4979 This will output the given text/byte string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
4980 Sorts this list according to the order induced by the specified {@link Comparator}. @param <T> the class of the objects in the list @param list the list to be sorted. @param cmp the comparator to determine the order of the list.
4981 Constructor. Will apply encoding-specific conversions to the output text. @param encoding The encoding that the output will be written in.
4982 Instantiate a new PDFTextStripper object.
4983 This will do a lookup into the dictionary. @param key The key to the object. @return The item that matches the key.
4984 @see java.util.Map#containsKey(Object) @param name The key to find in the map. @return true if the map contains this key.
4985 Returns a filter instance given its name as a string. @param filterName the name of the filter to retrieve @return the filter that matches the name @throws IOException if the filter name was invalid
4986 This will parse a PDF name from the stream. @return The parsed PDF name. @throws IOException If there is an error reading from the stream.
4987 Creates a PDColor containing the given color value. @param array a COS array containing the color value @param colorSpace color space in which the color value is defined
4988 This will create a COS string from a string of hex characters. @param hex A hex string. @return A cos string with the hex characters converted to their actual bytes. @throws IOException If there is an error with the hex string.
4989 This will take a list of integer objects and return a COSArray of COSInteger objects. @param integer A list of integers @return An array of COSInteger objects
4990 This will take a list of string objects and return a COSArray of COSName objects. @param strings A list of strings @return An array of COSName objects
4991 This will take a list of string objects and return a COSArray of COSName objects. @param strings A list of strings @return An array of COSName objects
4992 Default constructor.
4993 This constructor is to be used if the array doesn't exist, but is to be created and added to the parent dictionary as soon as the first element is added to the array. @param dictionary The dictionary that holds the item, and will hold the array if an item is added. @param dictionaryKey The key into the dictionary to set the item.
4994 Constructor to create empty page destination.
4995 Constructor. @param x the x coordinate of the rectangle @param y the y coordinate of the rectangle @param width The width of the rectangle. @param height The height of the rectangle.
4996 Constructor. @param box the bounding box to be used for the rectangle
4997 This will set the filters that are part of this stream. @param filters The filters that are part of this stream.
4998 Sets the list of alternateColorSpace color spaces. @param list the list of color space objects
4999 Creates a new COSStream using the current configuration for scratch files. @return the new COSStream
5000 Creates a new stream with an empty dictionary. <p> Try to avoid using this constructor because it creates a new scratch file in memory. Instead, use {@link COSDocument#createCOSStream() document.getDocument().createCOSStream()} which will use the existing scratch file (in memory or in temp file) of the document. </p>
5001 Creates a new stream with an empty dictionary. Data is read from the given random accessview. Written data is stored in the given scratch file. @param streamCache Stream cache for writing stream data. @param randomAccessReadView source for the data to be read @throws IOException if the length of the random access view isn't available
5002 Returns an unmodifiable view of this dictionary. @return an unmodifiable view of this dictionary
5003 Returns the result of the last filter, for use by repair mechanisms. @return the result of the last filter
5004 This will get the resources for this Form XObject. This will return null if no resources are available. @return The resources for this Form XObject.
5005 Default constructor.
5006 Creates a new user property. @param userAttributeObject the user attribute object
5007 Default Constructor.
5008 Constructor.
5009 Constructor.
5010 Constructor.
5011 Constructor.
5012 Constructor. @param acroForm The form that this field is part of.
5013 Constructor. @param acroForm The form that this field is part of.
5014 Creates a new Layout attribute object with a given dictionary. @param dictionary the dictionary
5015 Creates a new List attribute object with a given dictionary. @param dictionary the dictionary
5016 Creates a new PrintField attribute object with a given dictionary. @param dictionary the dictionary
5017 Creates a new Table attribute object with a given dictionary. @param dictionary the dictionary
5018 Creates a Form XObject for reading. @param stream The XObject stream
5019 Creates a Transparency Group for reading. @param stream The XObject stream @param cache the cache to be used for the resources
5020 Adds a TTC or OTC to the file cache. To reduce memory, the parsed font is not cached.
5021 Adds an OTF or TTF font to the file cache. To reduce memory, the parsed font is not cached.
5022 Adds a Type 1 font to the file cache. To reduce memory, the parsed font is not cached.
5023 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
5024 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
5025 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
5026 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
5027 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
5028 Pushes the current graphics state to the stack.
5029 Saves the entire graphics stack. @return the saved graphics state stack.
5030 Constructor. Uses main memory to buffer PDF streams.
5031 Constructor for encrypted pdfs. @param source input representing the pdf. @param password password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param keyAlias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of the stream cache @throws IOException if the source data could not be read
5032 Transforms the given rectangle using the CTM and then intersects it with the current clipping area.
5033 Calculate the transformed appearance box. Apply the Matrix (or an identity transform) to the BBox of the appearance stream @param appearanceStream @return the transformed rectangle
5034 Constructor with a given page size to initialize the clipping path. @param page the size of the page
5035 Get the left x coordinate. A return value of -1 implies that the current x-coordinate will be used. @return The left x coordinate.
5036 Get the left x coordinate. A return value of -1 implies that the current x-coordinate will be used. @return The left x coordinate.
5037 Get the bottom y coordinate. A return value of -1 implies that the current y-coordinate will be used. @return The bottom y coordinate.
5038 Get the right x coordinate. A return value of -1 implies that the current x-coordinate will be used. @return The right x coordinate.
5039 Get the top y coordinate. A return value of -1 implies that the current y-coordinate will be used. @return The top y coordinate.
5040 Get the top y coordinate. A return value of -1 implies that the current y-coordinate will be used. @return The top y coordinate.
5041 Get the left x coordinate. Return values of 0 or -1 imply that the current x-coordinate will be used. @return The left x coordinate.
5042 Get the top y coordinate. Return values of 0 or -1 imply that the current y-coordinate will be used. @return The top y coordinate.
5043 A flag indicating if this page destination should just fit bounding box of the PDF. @return true If the destination should fit just the bounding box.
5044 A flag indicating if this page destination should just fit bounding box of the PDF. @return true If the destination should fit just the bounding box.
5045 A flag indicating if this page destination should just fit bounding box of the PDF. @return true If the destination should fit just the bounding box.
5046 Returns a new OutputStream for writing stream data, using the current filters. @return OutputStream for un-encoded stream data. @throws IOException If the output stream could not be created.
5047 This will get a stream that can be written to, with the given filter. @param filter the filter to be used. @return An output stream to write data to. @throws IOException If an IO error occurs during writing.
5048 Creates a thumbnail Image XObject from the given COSBase and name. @param cosStream the COS stream @return an XObject
5049 Returns the Mask Image XObject associated with this image, or null if there is none. @return Mask Image XObject
5050 Returns the Soft Mask Image XObject associated with this image, or null if there is none. @return the SMask Image XObject, or null.
5051 Writes an AffineTransform to the content stream as an array. @param transform AffineTransfrom to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
5052 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
5053 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
5054 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
5055 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
5056 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
5057 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
5058 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
5059 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
5060 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
5061 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
5062 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
5063 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
5064 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
5065 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5066 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5067 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
5068 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5069 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5070 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5071 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5072 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5073 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5074 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5075 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5076 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5077 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5078 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5079 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5080 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5081 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5082 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
5083 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
5084 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
5085 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
5086 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
5087 End a marked content sequence. @throws IOException If the content stream could not be written
5088 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
5089 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
5090 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
5091 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
5092 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
5093 Returns all found objects of a brute force search. @return map containing all found objects of a brute force search @throws IOException if something went wrong
5094 This will save the document to an output stream. @param output The stream to write to. @throws IOException If there is an error writing the document.
5095 This will remove all of the objects in the collection.
5096 This will remove all of the objects in the collection. @param objectsList The list of objects to remove from the collection.
5097 This will retain all of the objects in the collection. @param objectsList The list of objects to retain from the collection.
5098 This will set an object at a specific index. @param index zero based index into array. @param intVal The object to set.
5099 This will remove an element from the array. @param i The index of the object to remove. @return The object that was removed.
5100 This will remove an element from the array. @param o The object to remove. @return <code>true</code> if the object was removed, <code>false</code> otherwise
5101 This will clear all items in the map.
5102 This will remove an item for the dictionary. This will do nothing of the object does not exist. @param key The key to the item to remove from the dictionary.
5103 Check whether the given {@link COSUpdateState}´s {@link COSDocumentState} differs from the {@link COSIncrement}´s known {@link #incrementOrigin}.<br> Should that be the case, the {@link COSUpdateState} originates from another {@link COSDocument} and must be added to the {@link COSIncrement}, hence call {@link COSUpdateState#update()}. @param updateState The {@link COSUpdateState} that shall be updated, if it's originating from another {@link COSDocument}. @see #incrementOrigin
5104 Sets the referenced object to COSNull and removes the initially assigned parser.
5105 <p> Links the given {@link COSDocumentState} to the {@link #updated} state of the managed {@link #updateInfo}.<br> </p> <p> This shall also initialize {@link #updated} accordingly and will also set the same {@link COSDocumentState} for all possibly contained substructures. </p> <p> Should {@link #originDocumentState} already have been set, by a prior call to this method, this shall deny to overwrite it. </p> <p> {@link COSDocumentState#isAcceptingUpdates()} shall determine, whether updates to {@link #updateInfo} are allowed. </p> <p> As long as no {@link COSDocumentState} is linked to this {@link COSUpdateState}, it shall not accept updates. </p> <p> Additionally to {@link #setOriginDocumentState(COSDocumentState)}, this shall also deny changing {@link #updated}, should the flag {@code dereferencing} indicate, that this is caused by dereferencing a {@link COSObject}. </p> @param originDocumentState The {@link COSDocumentState} that shall be linked to this {@link COSUpdateState}. @param dereferencing {@code true}, if this update of the {@link COSDocumentState} is caused by dereferencing a {@link COSObject}. @see #originDocumentState @see #updated
5106 Get the value of the array as a string. @param index The index into the array. @return The string or null if it does not exist.
5107 Returns the selected value. <p>Off is the default value which will also be returned if the value hasn't been set at all. @return A non-null string.
5108 Constructor.
5109 This will set the file name. @param fileName The name of the file.
5110 Default constructor. @param dest The named destination.
5111 Set the named destination. @param dest The new named destination. @throws IOException If there is an error setting the named destination.
5112 This will read a integer from the Stream and throw an {@link IllegalArgumentException} if the integer value has more than the maximum object revision (i.e. : bigger than {@link #GENERATION_NUMBER_THRESHOLD}) @return the generation number being read. @throws IOException if an I/O error occurs
5113 This will read a long from the Stream and throw an {@link IOException} if the long value is negative or has more than 10 digits (i.e. : bigger than {@link #OBJECT_NUMBER_THRESHOLD}) @return the object number being read. @throws IOException if an I/O error occurs
5114 Get the user password based on the owner password. @param ownerPassword The plaintext owner password. @param owner The o entry of the encryption dictionary. @param encRevision The encryption revision number. @param length The key length. @return The u entry of the encryption dictionary. @throws IOException If there is an error accessing data while generating the user password.
5115 Constructor of a patch for type 7 shading. @param tcp 16 control points @param color 4 corner colors
5116 Encrypt or decrypt data with RC4. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param input The data to encrypt. @param output The output to write the encrypted data to. @throws IOException If there is an error reading the data.
5117 Returns the font service provider. Defaults to using FileSystemFontProvider.
5118 An assistant method to accomplish type 6 and type 7 shading. @param patchCC all the crossing point coordinates and color of a grid @return a ShadedTriangle list which can compose the grid patch
5119 Constructor of a patch for type 6 shading. @param points 12 control points @param color 4 corner colors
5120 This will process a TextPosition object and add the text to the list of characters on a page. It takes care of overlapping text. @param text The text to process.
5121 This will process a TextPosition object and add the text to the list of characters on a page. It takes care of overlapping text. @param text The text to process.
5122 Remove all space characters if contained within the adjacent letters
5123 handles the line separator for a new line given the specified current and previous TextPositions. @param current the current text position @param lastPosition the previous text position @param lastLineStartPosition the last text position that followed a line separator. @param maxHeightForLine max height for positions since lastLineStartPosition @return start position of the last line @throws IOException if something went wrong
5124 Used within {@link #normalize(List)} to handle a {@link TextPosition}. @return The StringBuilder that must be used when calling this method.
5125 Returns the Calendar for a given string containing a date, or {@code null} if it cannot be parsed. The returned value will have 0 for DST_OFFSET. @param text A COS string containing a date. @return The Calendar that the text string represents, or {@code null} if it cannot be parsed.
5126 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
5127 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
5128 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
5129 This will output the given byte getString as a PDF object. @param string COSString to be written @param output The stream to write to. @throws IOException If there is an error writing to the stream.
5130 This will output the given text/byte getString as a PDF object. @param bytes byte array representation of a string to be written @param output The stream to write to. @throws IOException If there is an error writing to the stream.
5131 Constructor. @param page the page the content stream belongs to
5132 Instantiate a new PDFMarkedContentExtractor object.
5133 Constructor. @throws IOException If there is an error loading properties.
5134 This will parse a PDF HEX string with fail fast semantic meaning that we stop if a not allowed character is found. This is necessary in order to detect malformed input and be able to skip to next object start. We assume starting '&lt;' was already read. @return The parsed PDF string. @throws IOException If there is an error reading from the stream.
5135 This will set the filters that are part of this stream. @param filters The filters that are part of this stream.
5136 Constructor. Initializes to 0,0,0,0
5137 Constructor. @param width The width of the rectangle. @param height The height of the rectangle.
5138 Returns the updated <code>Rect</code> entry for the annotation. The rectangle completely contains the cloudy border. @return Annotation <code>Rect</code>.
5139 Returns the updated <code>RD</code> entry for Square and Circle annotations. @return Annotation <code>RD</code> value.
5140 Get a padded rectangle. <p>Creates a new rectangle with padding applied to each side. . @param rectangle the rectangle. @param padding the padding to apply. @return the padded rectangle.
5141 Get a rectangle enlarged by the differences. <p> Creates a new rectangle with differences added to each side. If there are no valid differences, then the original rectangle is returned. @param rectangle the rectangle. @param differences the differences to apply. @return the padded rectangle.
5142 Get a rectangle with the differences applied to each side. <p> Creates a new rectangle with differences added to each side. If there are no valid differences, then the original rectangle is returned. @param rectangle the rectangle. @param differences the differences to apply. @return the padded rectangle.
5143 Apply padding to a box. @param box box @return the padded box.
5144 Create a fresh XRef stream like for a fresh file or an incremental update. @param cosDocument the COSDocmernt to be used to create a new COSStream
5145 This will create a new PDObjectStream object. @param document The document that the stream will be part of. @return A new stream object.
5146 Creates a new empty PDStream object. @param document The document that the stream will be part of.
5147 Creates a new empty PDStream object. @param document The document that the stream will be part of.
5148 Constructor. Reads all data from the input stream and embeds it into the document with the given filters applied, if any. This method closes the InputStream.
5149 Creates a COS stream from raw (encoded) data.
5150 Encodes data. @param input the byte stream to encode @param encoded the stream where encoded data will be written @param parameters the parameters used for encoding @param index the index to the filter being encoded @throws IOException if the stream cannot be encoded
5151 Default constructor.
5152 Default constructor
5153 Default constructor.
5154 Default Constructor.
5155 @see PDTerminalField#PDTerminalField(PDAcroForm) @param acroForm The acroform.
5156 Creates a new ExportFormat attribute object with a given dictionary. @param dictionary the dictionary
5157 Returns the entry as an appearance stream. @return the entry as an appearance stream @throws IllegalStateException if this entry is not an appearance stream
5158 Adds an OTF or TTF font to the file cache. To reduce memory, the parsed font is not cached.
5159 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
5160 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
5161 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
5162 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
5163 Constructor for encrypted pdfs. @param source input representing the pdf. @param password password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param keyAlias alias to be used for decryption when using public key security @throws IOException if the source data could not be read
5164 Constructor. @param source input representing the pdf. @param decryptionPassword password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of the stream cache @throws IOException If something went wrong.
5165 This will get a stream that can be written to. @return An output stream to write data to. @throws IOException If an IO error occurs during writing.
5166 Writes the stream to the actual stream in the COSStream. @throws IOException If there is an error writing to the stream
5167 Create a new appearance stream. @param appearance The appearance stream to write to. @param compress whether the content stream is to be compressed. Set this to true when creating long content streams. @throws IOException If there is an error writing to the content stream.
5168 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
5169 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
5170 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
5171 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
5172 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
5173 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
5174 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
5175 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
5176 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
5177 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
5178 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
5179 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
5180 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
5181 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
5182 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
5183 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
5184 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
5185 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
5186 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
5187 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
5188 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
5189 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
5190 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
5191 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
5192 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
5193 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
5194 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
5195 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
5196 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
5197 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
5198 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
5199 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
5200 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
5201 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
5202 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
5203 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
5204 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
5205 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
5206 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
5207 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
5208 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
5209 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
5210 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
5211 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
5212 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
5213 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
5214 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
5215 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
5216 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
5217 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
5218 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
5219 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
5220 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
5221 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
5222 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5223 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5224 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5225 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5226 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5227 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5228 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5229 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5230 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
5231 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
5232 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
5233 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
5234 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5235 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5236 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5237 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5238 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5239 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5240 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5241 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5242 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5243 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5244 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5245 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
5246 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5247 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5248 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5249 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5250 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5251 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5252 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5253 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5254 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5255 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5256 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5257 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5258 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5259 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5260 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5261 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5262 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5263 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5264 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5265 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5266 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5267 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5268 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5269 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5270 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5271 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5272 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5273 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5274 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5275 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5276 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5277 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5278 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5279 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5280 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5281 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5282 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5283 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5284 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5285 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5286 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5287 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5288 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5289 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
5290 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
5291 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
5292 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
5293 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
5294 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
5295 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
5296 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
5297 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
5298 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
5299 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
5300 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
5301 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
5302 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
5303 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
5304 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
5305 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
5306 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
5307 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
5308 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
5309 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
5310 End a marked content sequence. @throws IOException If the content stream could not be written
5311 End a marked content sequence. @throws IOException If the content stream could not be written
5312 End a marked content sequence. @throws IOException If the content stream could not be written
5313 End a marked content sequence. @throws IOException If the content stream could not be written
5314 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
5315 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
5316 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
5317 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
5318 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
5319 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
5320 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
5321 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
5322 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
5323 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
5324 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
5325 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
5326 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
5327 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
5328 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
5329 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
5330 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
5331 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
5332 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
5333 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
5334 Check the XRef table by dereferencing all objects and fixing the offset if necessary. @throws IOException if something went wrong.
5335 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
5336 Sets the highest value that is allowed. This cannot be higher than 255. @param high the highest value for the lookup table
5337 Set the page number for a remote destination. For an internal destination, call {@link #setPage(PDPage) setPage(PDPage page)}. @param pageNumber The page for a remote destination.
5338 {@inheritDoc}
5339 {@inheritDoc}
5340 {@inheritDoc}
5341 {@inheritDoc}
5342 Collect all updates made to the given {@link COSArray} and it's contained structures. @param array The {@link COSDictionary} updates shall be collected for. @return Returns {@code true}, if the {@link COSArray}´s elements changed. A {@link COSArray} shall always be treated as a direct structure, that would require it´s parent to be updated instead.
5343 <p> Links the given {@link COSDocumentState} to the {@link #updated} state of the managed {@link #updateInfo}.<br> </p> <p> This shall also initialize {@link #updated} accordingly and will also set the same {@link COSDocumentState} for all possibly contained substructures. </p> <p> Should {@link #originDocumentState} already have been set, by a prior call to this method, this shall deny to overwrite it. </p> <p> {@link COSDocumentState#isAcceptingUpdates()} shall determine, whether updates to {@link #updateInfo} are allowed. </p> <p> As long as no {@link COSDocumentState} is linked to this {@link COSUpdateState}, it shall not accept updates. </p> @param originDocumentState The {@link COSDocumentState} that shall be linked to this {@link COSUpdateState}. @see #originDocumentState @see #updated
5344 This shall {@link #setOriginDocumentState(COSDocumentState, boolean)} for the dereferenced child, initializing its {@link #originDocumentState}. <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo} and will never change the child´s {@link #updated} state. </p> @param child The child, that has been dereferenced. @see #setOriginDocumentState(COSDocumentState, boolean)
5345 Parses a Type 4 function and sends the syntactic elements to the given syntax handler. @param input the text source @param handler the syntax handler
5346 Encrypt or decrypt a set of data. @param objectNumber The data object number. @param genNumber The data generation number. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
5347 Compute the encryption key. @param password The password to compute the encrypted key. @param o The O entry of the encryption dictionary. @param u The U entry of the encryption dictionary. @param oe The OE entry of the encryption dictionary. @param ue The UE entry of the encryption dictionary. @param permissions The permissions for the document. @param id The document id. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @param isOwnerPassword whether the password given is the owner password (for revision 6) @return The encrypted key bytes. @throws IOException If there is an error with encryption.
5348 Check if a plaintext password is the user password. @param password The plaintext password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The permissions set in the PDF. @param id The document id used for encryption. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata. @return true If the plaintext password is the user password. @throws IOException If there is an error accessing data.
5349 Finds a font with the given PostScript name, or a suitable substitute, or null. @param postScriptName PostScript font name
5350 Normalize the given list of TextPositions. @param line list of TextPositions @return a list of strings, one string for every word
5351 Returns the Calendar for a given COS string containing a date, or {@code null} if it cannot be parsed. The returned value will have 0 for DST_OFFSET. @param text A COS string containing a date. @return The Calendar that the text string represents, or {@code null} if it cannot be parsed.
5352 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
5353 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
5354 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
5355 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
5356 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
5357 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
5358 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
5359 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
5360 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
5361 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
5362 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
5363 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
5364 Write the given {@link COSString} to the given stream. @param output The stream, that shall be written to. @param cosString The content, that shall be written.
5365 Outputs a string using the correct encoding and subsetting as required. @param text The Unicode text to show. @throws IOException If an io exception occurs.
5366 Constructor. @param parameters Parameters for page drawing. @throws IOException If there is an error loading properties from the file.
5367 This will parse a PDF string. @return The parsed PDF string. @throws IOException If there is an error reading from the stream.
5368 Constructor for immutable rectangle. @param width The width of the rectangle. @param height The height of the rectangle.
5369 Returns the <code>BBox</code> entry (bounding box) for the appearance stream form XObject. @return Bounding box for appearance stream form XObject.
5370 This will create a new PDMetadata object with the /Type and /Subtype entries for a document level metadata object. @param document The document that the stream will be part of.
5371 {@inheritDoc}
5372 Creates a new XObject of the given subtype for writing. @param document The document in which to create the XObject. @param subtype The subtype of the new XObject.
5373 Creates an Image XObject in the given document. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param document the current document
5374 Constructor. Reads all data from the input stream and embeds it into the document. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @throws IOException If there is an error creating the stream in the document.
5375 Constructor. Reads all data from the input stream and embeds it into the document with the given filter applied. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @param filter Filter to apply to the stream. @throws IOException If there is an error creating the stream in the document.
5376 Constructor. Reads all data from the input stream and embeds it into the document with the given filters applied. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @param filters Filters to apply to the stream. @throws IOException If there is an error creating the stream in the document.
5377 Creates an Image XObject in the given document using the given filtered stream. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param document the current document @param encodedStream an encoded stream of image data @param cosFilter the filter or a COSArray of filters @param width the image width @param height the image height @param bitsPerComponent the bits per component @param initColorSpace the color space @throws IOException if there is an error creating the XObject.
5378 Default constructor.
5379 Default constructor.
5380 Default constructor.
5381 Default constructor.
5382 Default constructor. @param source input representing the pdf. @throws IOException if something went wrong
5383 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source input representing the pdf. @param decryptionPassword password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @throws IOException If something went wrong.
5384 Create a new appearance stream. @param appearance The appearance stream to write to. @throws IOException If there is an error writing to the content stream.
5385 Create a new form XObject content stream. @param form The form XObject stream to write to. @throws IOException If there is an error writing to the form contents.
5386 Create a new appearance stream. Note that this is not actually a "page" content stream. @param doc The document the page is part of. @param appearance The appearance stream to write to. @throws IOException If there is an error writing to the page contents.
5387 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
5388 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
5389 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
5390 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
5391 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
5392 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
5393 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
5394 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
5395 Add the two arms of a horizontal arrow. @param cs Content stream @param x @param y @param len The arm length. Positive goes to the right, negative goes to the left. @throws IOException If the content stream could not be written
5396 Draw a shape. <p> Dependent on the lineWidth and whether or not there is a background to be generated there are different commands to be used for draw a shape. @param lineWidth the line width of the path. @param hasStroke shall there be a stroking color. @param hasFill shall there be a fill color. @throws IOException If there is an error writing to the content stream.
5397 Add a square diamond shape (corner on top) to the path. @param cs Content stream @param x @param y @param r Radius (to a corner) @throws IOException If the content stream could not be written
5398 Add a circle shape to the path in clockwise direction. @param cs Content stream @param x @param y @param r Radius @throws IOException If the content stream could not be written.
5399 Add a circle shape to the path in counterclockwise direction. You'll need this e.g. when drawing a doughnut shape. See "Nonzero Winding Number Rule" for more information. @param cs Content stream @param x @param y @param r Radius @throws IOException If the content stream could not be written.
5400 Draw a paperclip. Shape is from <a href="https://raw.githubusercontent.com/Iconscout/unicons/master/svg/line/paperclip.svg">Iconscout</a> (Apache licensed). @param contentStream @throws IOException
5401 Sets the line width. The command is only emitted if the lineWidth is different to 1. @param lineWidth the line width of the path. @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setLineWidth(float)
5402 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
5403 Collect all updates made to the given {@link COSBase} and it's contained structures.<br> This shall forward all {@link COSUpdateInfo} objects to the proper specialized collection methods. @param base The {@link COSBase} updates shall be collected for. @return Returns {@code true}, if the {@link COSBase} represents a direct child structure, that would require it´s parent to be updated instead. @see #collect(COSDictionary) @see #collect(COSArray) @see #collect(COSObject)
5404 // MIT added, maybe this should not be supported as trailer is a persistence construct. This will set the document trailer. @param newTrailer the document trailer dictionary
5405 <p> Shall call {@link #update()} for this {@link COSUpdateState} and shall {@link #setOriginDocumentState(COSDocumentState)} for the given child, initializing it´s {@link #updated} state and {@link #originDocumentState}. </p> <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}. </p> @param child The child that shall also be updated. @see #update() @see #setOriginDocumentState(COSDocumentState)
5406 <p> Shall call {@link #update()} for this {@link COSUpdateState} and shall {@link #setOriginDocumentState(COSDocumentState)} for the given children, initializing their {@link #updated} state and {@link #originDocumentState}. </p> <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}. </p> @param children The children that shall also be updated. @see #update() @see #setOriginDocumentState(COSDocumentState)
5407 This will get the object that this object encapsulates. @return The encapsulated object.
5408 Check for owner password. @param ownerPassword The owner password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The set of permissions on the document. @param id The document id. @param encRevision The encryption algorithm revision. @param keyLengthInBytes The encryption key length in bytes. @param encryptMetadata The encryption metadata @return True If the ownerPassword param is the owner password. @throws IOException If there is an error accessing data.
5409 Parses the given text into an instruction sequence representing a Type 4 function that can be executed. @param text the Type 4 function text @return the instruction sequence
5410 This will encrypt a stream, but not the dictionary as the dictionary is encrypted by visitFromString() in COSWriter and we don't want to encrypt it twice. @param stream The stream to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error getting the stream data.
5411 This will decrypt a string. @param string the string to decrypt. @param objNum The object number. @param genNum The object generation number. @return the decrypted COSString
5412 This will encrypt a string. @param string the string to encrypt. @param objNum The object number. @param genNum The object generation number. @return the encrypted COSString @throws IOException If an error occurs writing the new string.
5413 Check if a plaintext password is the user password. @param password The plaintext password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The permissions set in the PDF. @param id The document id used for encryption. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @return true If the plaintext password is the user password. @throws IOException If there is an error accessing data.
5414 Finds a font with the given PostScript name, or a suitable substitute, or null. @param postScriptName PostScript font name
5415 This will print the text of the processed page to "output". It will estimate, based on the coordinates of the text, where newlines and word spacings should be placed. The text will be sorted only if that feature was enabled. @throws IOException If there is an error writing the text.
5416 Writes a single operand token. @param base The operand to write to the stream. @throws IOException If there is an error writing to the stream.
5417 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
5418 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
5419 Returns a new PageDrawer instance, using the given parameters. May be overridden. @param parameters parameters to be used when creating the PageDrawer instance @return a new PageDrawer instance @throws IOException id the PageDrawer instance could not be created
5420 Creates a Form Image XObject for writing, in the given document. @param document The current document
5421 Constructor. Reads all data from the input stream and embeds it into the document, this will close the InputStream. The /Type and /Subtype entries for a document level metadata object will be created. @param doc The document that will hold the stream. @param str The stream parameter. @throws IOException If there is an error creating the stream in the document.
5422 {@inheritDoc}
5423 {@inheritDoc}
5424 Create a PDImageXObject using the Flate filter. @param document The document. @param byteArray array with data. @param width the image width @param height the image height @param bitsPerComponent the bits per component @param initColorSpace the color space @return the newly created PDImageXObject with the data compressed. @throws IOException
5425 Default constructor. @param owner the owner of the attributes
5426 Constructor.
5427 Constructs parser for given file using memory buffer. @param source the source of the pdf to be parsed @throws IOException If something went wrong.
5428 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source input representing the pdf. @param decryptionPassword password to be used for decryption. @throws IOException If something went wrong.
5429 Draw a line ending style. @param style @param cs @param x @param y @param width @param hasStroke @param hasBackground @param ending false if left, true if right of an imagined horizontal line (important for arrows). @throws IOException
5430 Collect all updates made to the given {@link COSDictionary} and it's contained structures. @param dictionary The {@link COSDictionary} updates shall be collected for. @return Returns {@code true}, if the {@link COSDictionary} represents a direct child structure, that would require it´s parent to be updated instead.
5431 Returns all indirect {@link COSBase}s, that shall be written to an increment as top level {@link COSObject}s.<br> Calling this method will cause the increment to be initialized. @return All indirect {@link COSBase}s, that shall be written to an increment as top level {@link COSObject}s. @see #objects
5432 This will add an object to the array. @param object The object to add to the array.
5433 Add the specified object at the ith location and push the rest to the right. @param i The index to add at. @param object The object to add at that index.
5434 This will set an object at a specific index. @param index zero based index into array. @param object The object to set.
5435 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
5436 This will add an object to the array. @param objectsList The object to add to the array.
5437 Add the specified object at the ith location and push the rest to the right. @param i The index to add at. @param objectList The object to add at that index.
5438 <p> Shall call {@link #update()} for this {@link COSUpdateState} and shall {@link #setOriginDocumentState(COSDocumentState)} for the given children, initializing their {@link #updated} state and {@link #originDocumentState}. </p> <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}. </p> @param children The children that shall also be updated. @see #update() @see #setOriginDocumentState(COSDocumentState)
5439 This will get an object from the array. This will dereference the object. If the object is COSNull then null will be returned. @param index The index into the array to get the object. @return The object at the requested index.
5440 This will remove an element from the array. This method will also remove a reference to the object. @param o The object to remove. @return <code>true</code> if the object was removed, <code>false</code> otherwise
5441 This will return the index of the entry or -1 if it is not found. This method will also find references to indirect objects. @param object The object to search for. @return The index of the object or -1.
5442 @see java.util.Map#containsValue(java.lang.Object) @param value The value to find in the map. @return true if the map contains this value.
5443 Search in the map for the value that matches the parameter and return the first key that maps to that value. @param value The value to search for in the map. @return The key for the value in the map or null if it does not exist.
5444 This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param key The key to the object that we are getting. @return The object that matches the key.
5445 Collects all indirect objects numbers within this dictionary and all included dictionaries. It is used to avoid mixed up object numbers when importing an existing page to another pdf. Expert use only. You might run into an endless recursion if choosing a wrong starting point. @param indirectObjects a collection of already found indirect objects.
5446 Get the dictionary containing the linearization information if the pdf is linearized. @return the dictionary containing the linearization information
5447 This will close all storage and delete the tmp files. @throws IOException If there is an error close resources.
5448 Collect all updates made to the given {@link COSObject} and it's contained structures. @param object The {@link COSObject} updates shall be collected for. @return Always returns {@code false}. {@link COSObject}s by definition are indirect and shall never cause a parent structure to be updated.
5449 visitor pattern double dispatch method. @param visitor The object to notify when visiting this object. @throws IOException If an error occurs while visiting this object.
5450 Check whether an element (of an array or a dictionary) points to its parent. @param parent COSArray or COSDictionary @param value an element
5451 Returns length value referred to or defined in given object.
5452 Prepares a normal reference for the given {@link COSObject} in a PDF's crossreference stream ({@link PDFXRefStream}). @param byteOffset The byte offset of the {@link COSObject} in the PDF file. @param key The {@link COSObjectKey}, that is represented by this entry. @param object The {@link COSObject}, that is represented by this entry.
5453 This will get the object key for the object. @param obj The object to get the key for. @return The object key for the object.
5454 Returns the {@link COSObjectKey} for a given registered {@link COSBase}. Returns null if such an object is not registered. @param object The {@link COSBase} a {@link COSObjectKey} shall be determined for. @return key The {@link COSObjectKey}, that matches the registered {@link COSBase}, or null if such an object is not registered.
5455 Returns true, if the given {@link COSBase} is a registered object of this pool. @param object The {@link COSBase} that shall be checked. @return True, if such a {@link COSBase} is registered in this pool.
5456 Prepares the given {@link COSObject} to be written to this object stream, using the given {@link COSObjectKey} as it's ID for indirect references. @param key The {@link COSObjectKey}, that shall be used for indirect references to the {@link COSObject}. @param object The {@link COSObject}, that shall be written to this object stream.
5457 Check for owner password. @param password The owner password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The set of permissions on the document. @param id The document id. @param encRevision The encryption algorithm revision. @param keyLengthInBytes The encryption key length in bytes. @param encryptMetadata The encryption metadata @return True If the ownerPassword param is the owner password. @throws IOException If there is an error accessing data.
5458 This will print the processed page text to the output stream. @throws IOException If there is an error writing the text.
5459 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
5460 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
5461 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
5462 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
5463 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
5464 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
5465 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
5466 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
5467 Creates a Transparency Group for writing, in the given document. @param document The current document
5468 Creates a Form Image XObject for writing, in the given document. @param document The current document
5469 Creates a new JPEG Image XObject from a BufferedImage, a given quality and dpi metadata. <p> Do not read a JPEG image from a stream/file and call this method; you'll get more speed and quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) createFromStream()} instead. @param document the document where the image will be created @param image the BufferedImage to embed @param quality The desired JPEG compression quality; between 0 (best compression) and 1 (best image quality). See {@link ImageWriteParam#setCompressionQuality(float)} for more details. @param dpi the desired dpi (resolution) value of the JPEG to be stored in metadata. This value has no influence on image content or size. @return a new Image XObject @throws IOException if the JPEG data cannot be written
5470 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source source representing the pdf. @throws IOException If something went wrong.
5471 Writes the curl template points to the output and applies translation (x, y).
5472 Creates a single Bézier curve that represents a section of an elliptical arc. The sweep angle of the section must not be larger than 90 degrees. If argument `out` is null, this writes the results to the instance variable `output`.
5473 Return an iterator for the determined {@link #objects} contained in this {@link COSIncrement}. @return An iterator for the determined {@link #objects} contained in this {@link COSIncrement}.
5474 This will add an object to the array. @param object The object to add to the array.
5475 This will add the object until the size of the array is at least as large as the parameter. If the array is already larger than the parameter then nothing is done. @param size The desired size of the array. @param object The object to fill the array with.
5476 Clear the current contents of the COSArray and set it with the float[]. @param value The new value of the float array.
5477 This will parse a PDF array object. @return The parsed PDF array. @throws IOException If there is an error parsing the stream.
5478 Returns the stream of the XRef. @return the XRef stream @throws IOException if something went wrong
5479 This is a really special constructor. Sometimes the PDF spec says that a dictionary entry can either be a single item or an array of those items. But in the PDModel interface we really just want to always return a java.util.List. In the case were we get the list and never modify it we don't want to convert to COSArray and put one element, unless we append to the list. So here we are going to create this object with a single item instead of a list, but allow more items to be added and then converted to an array. @param actualObject The PDModel object. @param item The COS Model object. @param dictionary The dictionary that holds the item, and will hold the array if an item is added. @param dictionaryKey The key into the dictionary to set the item.
5480 This will convert a list of COSObjectables to an array list of COSBase objects. @param cosObjectableList A list of COSObjectable. @return A list of COSBase. @throws IllegalArgumentException if an object type is not supported for conversion to a COSBase object.
5481 Constructor with an initial range of 0..1.
5482 Default constructor.
5483 Creates a blank font setting, font will be null, size will be 1.
5484 Returns the color component values as a COS array @return the color component values as a COS array
5485 Creates a new DeviceN color space.
5486 Creates a new gamma. Defaults all values to 0, 0, 0.
5487 Returns a list of alternate color spaces for non-conforming readers. WARNING: Do not use the information in a conforming reader. @return A list of alternateColorSpace color spaces. @throws IOException If there is an error getting the alternateColorSpace color spaces.
5488 Creates a new Indexed color space. Default DeviceRGB, hival 255.
5489 creates a range array with default values (-100..100 -100..100). @return the new range array.
5490 Creates a new pattern color space. @param resources The current resources.
5491 Creates a new Separation color space.
5492 Constructor. Defaults all values to 0, 0, 0.
5493 Constructor from COS object. @param array the array containing the XYZ values
5494 Sets the optional Matrix entry for the form XObject. @param transform the transformation matrix
5495 Creates a new JPEG Image XObject from a byte array containing JPEG data. @param document the document where the image will be created @param byteArray bytes of JPEG image @return a new Image XObject @throws IOException if the input stream cannot be read
5496 Returns a COS array which represent the geometric relevant components of the matrix. The last column of the matrix is ignored, only the first two columns are returned. This is analog to the Matrix(COSArray) constructor. @return a COSArray representing the geometric relevant components of the matrix
5497 This will set an object at a specific index. @param index zero based index into array. @param object The object to set.
5498 Set the value in the array as an integer. @param index The index into the array. @param value The value to set.
5499 Set the value in the array as a name. @param index The index into the array. @param name The name to set in the array.
5500 Set the value in the array as a string. @param index The index into the array. @param string The string to set in the array.
5501 This will set the minimum value for the range. @param min The new minimum for the range.
5502 This will set the maximum value for the range. @param max The new maximum for the range.
5503 This will set the lower left x coordinate. @param value The lower left x.
5504 This will set the lower left y coordinate. @param value The lower left y.
5505 This will set the upper right x coordinate. @param value The upper right x .
5506 This will set the upper right y coordinate. @param value The upper right y.
5507 Sets the colour by edge index. @param index the edge index @param colour the colour
5508 This will decrypt an array. @param array The array to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error accessing the data.
5509 This will set the string for an available option. @param opt One of the available options.
5510 This will set the default appearance string. @param da The default appearance string.
5511 This will set the size of the font. @param size The new size of the font.
5512 Sets the list of colorants @param names the list of colorants
5513 Sets the color space attributes. If null is passed in then all attribute will be removed. @param attributes the color space attributes, or null
5514 This will set the alternate color space. @param cs The alternate color space.
5515 Sets the r value of the tristimulus. @param r the r value for the tristimulus
5516 Sets the g value of the tristimulus. @param g the g value for the tristimulus
5517 Sets the b value of the tristimulus. @param b he b value for the tristimulus
5518 Sets the base color space. @param base the base color space
5519 Sets the colorant name. @param name the name of the colorant
5520 Sets the alternate color space. @param colorSpace The alternate color space.
5521 Sets the x value of the tristimulus. @param x the x value for the tristimulus
5522 Sets the y value of the tristimulus. @param y the y value for the tristimulus
5523 Sets the z value of the tristimulus. @param z the z value for the tristimulus
5524 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
5525 This will set an item in the dictionary. @param key The key to the dictionary object. @param value The value to the dictionary object.
5526 This will set an item in the dictionary. @param key The key to the dictionary object. @param value The value to the dictionary object.
5527 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
5528 This is a convenience method that will convert the value to a COSName object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
5529 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
5530 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
5531 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
5532 This is a convenience method that will convert the value to a COSFloat object. @param key The key to the object, @param value The int value for the name.
5533 Creates a new COSStream using the current configuration for scratch files. Not for public use. Only COSParser should call this method. @param dictionary the corresponding dictionary @param startPosition the start position within the source @param streamLength the stream length @return the new COSStream @throws IOException if the random access view can't be read
5534 This will set the encryption dictionary, this should only be called when encrypting the document. @param encDictionary The encryption dictionary.
5535 This will set the document ID. This should be an array of two strings. This method cannot be used to remove the document id by passing null or an empty array; it will be recreated. Only the first existing string is used when writing, the second one is always recreated. If you don't want this, you'll have to modify the {@code COSWriter} class, look for {@link COSName#ID}. @param id The document id.
5536 This will parse the next token in the stream. @return The next token in the stream or null if there are no more tokens in the stream. @throws IOException If an io error occurs while parsing the stream.
5537 Creates an empty PDF document. You need to add at least one page for the document to be valid. @param streamCacheCreateFunction a function to create an instance of a stream cache for buffering PDF streams
5538 This will set the document information for this document. <p> In PDF 2.0 this is deprecated except for two entries, /CreationDate and /ModDate. For any other document level metadata, a metadata stream should be used instead, see {@link PDDocumentCatalog#setMetadata(org.apache.pdfbox.pdmodel.common.PDMetadata) PDDocumentCatalog#setMetadata(PDMetadata)}. @param info The updated document information.
5539 Constructor. Internal PDFBox use only! If you need to get the document catalog, call {@link PDDocument#getDocumentCatalog()}. @param doc The document that this catalog is part of.
5540 Sets the list of threads for this pdf document. @param threads The list of threads, or null to clear it.
5541 Replace the list of OutputIntents of the document. @param outputIntents the list of OutputIntents, if the list is empty all OutputIntents are removed.
5542 This will set the CropBox for this page. @param cropBox The new CropBox for this page.
5543 This will set the contents of this page. @param contents Array of new contents of the page.
5544 This will set the list of thread beads. @param beads A list of PDThreadBead objects or null.
5545 This will set the list of annotations. Although this is optional, you should take care that any newly created annotations link back to this page by calling {@link PDAnnotation#setPage(org.apache.pdfbox.pdmodel.PDPage)}. Not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. @param annotations The new list of annotations.
5546 Set the viewports. @param viewports A list of viewports, or null if the entry is to be deleted.
5547 Constructor for embedding.
5548 {@inheritDoc}
5549 {@inheritDoc}
5550 {@inheritDoc}
5551 {@inheritDoc}
5552 {@inheritDoc}
5553 {@inheritDoc}
5554 Default Constructor.
5555 Constructor. Creates empty COSDictionary if dict is null. @param dict The dictionary that fulfils this file specification.
5556 This will set the range values. @param rangeValues The new range values.
5557 This will set the domain values. @param domainValues The new domain values.
5558 This will set the encode values. @param encodeValues The new encode values.
5559 This will set the decode values. @param decodeValues The new decode values.
5560 Sets the K entry. @param k the K value
5561 Sets the ClassMap. @param classMap null, or a map whose elements are either {@link PDAttributeObject} or lists of it.
5562 Sets the user properties. @param userProperties the user properties
5563 Set the line dash pattern associated with this box style. @param dashArray The patter for this box style.
5564 This will set the crypt filter method. Allowed values are: NONE, V2, AESV2, AESV3 @param cfm name of the crypt filter method.
5565 Sets the filter entry of the encryption dictionary. @param filter The filter name.
5566 This will set the O entry in the standard encryption dictionary. @param o A 32 byte array or null if there is no owner key. @throws IOException If there is an error setting the data.
5567 This will set the U entry in the standard encryption dictionary. @param u A 32 byte array. @throws IOException If there is an error setting the data.
5568 This will set the OE entry in the standard encryption dictionary. @param oe A 32 byte array or null if there is no owner encryption key. @throws IOException If there is an error setting the data.
5569 This will set the UE entry in the standard encryption dictionary. @param ue A 32 byte array or null if there is no user encryption key. @throws IOException If there is an error setting the data.
5570 This will set the Recipients field of the dictionary. This field contains an array of string. @param recipients the array of bytes arrays to put in the Recipients field. @throws IOException If there is an error setting the data.
5571 Sets the name of the filter which is used for de/encrypting streams. @param streamFilterName the name of the filter
5572 Sets the name of the filter which is used for de/encrypting strings. @param stringFilterName the name of the filter
5573 Set the Perms entry in the encryption dictionary. @param perms A 16 byte array. @throws IOException If there is an error setting the data.
5574 remove CF, StmF, and StrF entries. This is to be called if V is not 4 or 5.
5575 Default constructor.
5576 Set the annotation color. @param c The annotation color.
5577 This will set the rich text stream which is displayed in the popup window. @param rc the rich text stream.
5578 This will set interior color of the drawn area. @param color The interior color of the circle.
5579 This will set the coordinates of the callout line. @param callout An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, Four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
5580 Set the paths making up the freehand "scribble". The ink annotation is made up of one ore more disjoint paths. Each array entry is an array representing a stroked path, being a series of alternating horizontal and vertical coordinates in default user space. @param inklist the List of arrays representing the paths.
5581 This will set start and end coordinates of the line (or leader line if LL entry is set). @param line array of 4 floats [x1, y1, x2, y2] line start and end points in default user space.
5582 This will set interior color of the line endings defined in the LE entry. @param color The interior color of the line endings.
5583 This will set the coordinates of the vertices. @param vertices array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
5584 This will set interior color of the drawn area. @param color The interior color of the drawn area.
5585 This will set the coordinates of the the vertices. @param vertices array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
5586 This will set interior color of the line endings defined in the LE entry. @param color The interior color of the line endings.
5587 This will set interior color of the drawn area. @param color The interior color of the circle.
5588 Set the coordinates of individual words or group of words. The quadliterals shall encompasses a word or group of contiguous words in the text underlying the annotation. The coordinates for each quadrilateral shall be given in the order x1 y1 x2 y2 x3 y3 x4 y4. @param coords an array of 8 􏰍 n numbers specifying the coordinates of n quadrilaterals.
5589 This will set the FDF id. @param id The new id for the FDF.
5590 This will set the list of fields. This should be a list of FDFField objects. @param fields The list of fields.
5591 This will set the list of pages. This should be a list of FDFPage objects. @param pages The list of pages.
5592 This will set the list of annotations. This should be a list of FDFAnnotation objects. @param annots The list of annotations.
5593 This will set the differences stream. @param diff The new differences stream.
5594 This will set the list of embedded FDFs. This should be a list of PDFileSpecification objects. @param embedded The list of embedded FDFs.
5595 This will set the list of kids. @param kids A list of FDFField objects.
5596 You should pass a String, or a List&lt;String&gt; to set the value. @param value The value that should populate when imported. @throws IOException If there is an error setting the value.
5597 Sets the COS value of this field. @param value COS value.
5598 This will set the field flags that are associated with this field. The 'Ff' entry in the FDF field dictionary. @param ff The new value for the field flags.
5599 This will set the field flags that are associated with this field. The 'SetFf' entry in the FDF field dictionary. @param ff The new value for the "set field flags".
5600 This will set the field flags that are associated with this field. The 'ClrFf' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
5601 This will set the widget field flags that are associated with this field. The 'F' entry in the FDF field dictionary. @param f The new value for the field flags.
5602 This will set the widget field flags that are associated with this field. The 'SetF' entry in the FDF field dictionary. @param ff The new value for the "set widget field flags".
5603 This will set the field flags that are associated with this field. The 'ClrF' entry in the FDF field dictionary. @param ff The new value for the "clear widget field flags".
5604 This will set the rich text value. @param rv The rich text value for the stream.
5605 This will set the rich text value. @param rv The rich text value for the stream.
5606 This will set the javascript code the will get execute before the import. @param before A reference to some javascript code.
5607 This will set the javascript code the will get execute after the import. @param after A reference to some javascript code.
5608 Sets the dictionary's "Doc" entry. @param map Map of named "JavaScript" dictionaries.
5609 A list of FDFTemplate objects. @param templates A list of templates for this Page.
5610 This will set a list of fields for this template. @param fields The list of fields to set for this template.
5611 Builds widths with a custom CIDToGIDMap (for embedding font subset).
5612 Constructor for embedding.
5613 Package-private constructor, for embedding.
5614 This will set the font name. @param fontName The new name for the font.
5615 This will set the font family. @param fontFamily The font family.
5616 This will set the font stretch. @param fontStretch The new stretch for the font.
5617 Set the fonts bounding box. @param rect The new bounding box.
5618 This will set the character set for the font. @param charSet The new character set for the font.
5619 Set the gamma value. @param value The new gamma value.
5620 Sets the gamma value. @param gamma the new gamma value
5621 Sets the linear interpretation matrix. Passing in null will clear the matrix. @param matrix the new linear interpretation matrix, or null
5622 Sets the colorant map. @param colorants the map of colorants
5623 Creates a group object with /Transparency subtype entry.
5624 Sets which filters are applied to this stream. @param filters the filters to apply to this stream.
5625 Creates a new optional content membership dictionary (OCMD).
5626 Sets the visibility policy name. Valid names are AllOff, AllOn, AnyOff, AnyOn (default). @param visibilityPolicy the visibility policy name
5627 Sets the optional Matrix entry for the Pattern. @param transform the transformation matrix
5628 This will set the BBox (bounding box) for this Pattern. @param bbox The new BBox for this Pattern.
5629 This will set the background. @param newBackground the new background
5630 This will set the BBox (bounding box) for this Shading. @param newBBox the new BBox
5631 This will set the color space for the shading. @param colorSpace the color space
5632 This will set the functions COSArray for the color conversion. @param newFunctions the new COSArray containing all functions
5633 Sets the optional Matrix entry for the function based shading. @param transform the transformation matrix
5634 Sets the optional Domain entry for the function based shading. @param newDomain the domain array
5635 Sets the optional Extend entry for this shading. @param newExtend the extend array
5636 Sets the optional Domain entry for this shading. @param newDomain the domain array
5637 Sets the Coords entry for this shading. @param newCoords the coordinates array
5638 This will set the decode values. @param decodeValues the new decode values
5639 Default constructor, creates blank graphics state.
5640 Set the blending mode. @param bm blend mode
5641 This will set a float object. @param key The key to the data that we are setting. @param value The value that we are setting.
5642 This will set the transfer function of the /TR dictionary. @param transfer The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function.
5643 This will set the transfer function of the /TR2 dictionary. @param transfer2 The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function, and the name Default denotes the transfer function that was in effect at the start of the page.
5644 This will set the next action, or sequence of actions, to be performed after this one. The value is either a single action dictionary or an array of action dictionaries to be performed in order. @param next The Next action or sequence of actions.
5645 @param t annotation or annotations
5646 @param h hide flag
5647 @param array the array of fields
5648 Sets the sound object. @param sound the sound object defining the sound that shall be played.
5649 @param array the array of fields
5650 @param d The destination.
5651 @param b The destination.
5652 Set the relationship between the current document and the target (which may be an intermediate target). @param relationship Valid values are P (the target is the parent of the current document) and C (the target is a child of the current document). throws IllegalArgumentException if the parameter is not P or C.
5653 Constructor.
5654 This will set the rectangle for this annotation. @param rectangle The new rectangle values.
5655 This will set the border array. @param borderArray the border array to set.
5656 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
5657 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
5658 This will set the coordinates of the callout line. (PDF 1.6 and higher) Only relevant if the intent is FreeTextCallout. @param callout An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
5659 Sets the paths that make this annotation. @param inkList An array of arrays, each representing a stroked path. Each array shall be a series of alternating horizontal and vertical coordinates. If the parameter is null the entry will be removed.
5660 This will set start and end coordinates of the line (or leader line if LL entry is set). @param l array of 4 floats [x1, y1, x2, y2] line start and end points in default user space.
5661 This will set the set of quadpoints which encompass the areas of this annotation which will activate. @param quadPoints an array representing the set of area covered.
5662 This will set the rich text stream which is displayed in the popup window. @param rc the rich text stream.
5663 This will set the numbers that shall represent the alternating horizontal and vertical coordinates. @param points an array with the numbers that shall represent the alternating horizontal and vertical coordinates.
5664 This will set the numbers that shall represent the alternating horizontal and vertical coordinates. @param points an array with the numbers that shall represent the alternating horizontal and vertical coordinates.
5665 This will set the markup annotation which this popup relates to. @param annot the markup annotation.
5666 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
5667 This will set the set of quadpoints which encompass the areas of this annotation. @param quadPoints an array representing the set of area covered
5668 Constructor for embedding.
5669 This will set the dash style used for drawing the border. @param dashArray the dash style to use
5670 Default constructor.
5671 (Optional) The signature handler that shall be used to sign the signature field. @param filter is the filter that shall be used by the signature handler
5672 (Optional) An array of names indicating encodings to use when signing. The first name in the array that matches an encoding supported by the signature handler shall be the encoding that is actually used for signing. @param subfilter is the name that shall be used for encoding
5673 <p>(Optional, PDF 1.7) An array of names indicating acceptable digest algorithms to use when signing. The value shall be one of <b>SHA1</b>, <b>SHA256</b>, <b>SHA384</b>, <b>SHA512</b>, <b>RIPEMD160</b>. The default value is implementation-specific.</p> <p>This property is only applicable if the digital credential signing contains RSA public/privat keys</p> @param digestMethod is a list of possible names of the digests, that should be used for signing.
5674 (Optional) An array of text strings that specifying possible reasons for signing a document. If specified, the reasons supplied in this entry replace those used by conforming products. @param reasons is a list of possible text string that specifying possible reasons
5675 <p>(Optional; PDF 1.6) A dictionary containing a single entry whose key is P and whose value is an integer between 0 and 3. A value of 0 defines the signatures as an author signature. The value 1 through 3 shall be used for certification signatures and correspond to the value of P in a DocMDP transform parameters dictionary.</p> <p>If this MDP key is not present or the MDP dictionary does not contain a P entry, no rules shall be defined regarding the type of signature or its permissions.</p> @param mdp dictionary
5676 <p>(Optional; PDF 1.6) A time stamp dictionary containing two entries. URL which is a ASCII string specifying the URL to a rfc3161 conform timestamp server and Ff to indicate if a timestamp is required or optional.</p> @param timestamp dictionary
5677 (Optional, PDF 1.6) An array of text strings that specifying possible legal attestations. @param legalAttestation is a list of possible text string that specifying possible legal attestations.
5678 Default constructor.
5679 (Optional) A list of byte arrays containing DER-encoded X.509v3 certificates that are acceptable for signing. if <b>Subject</b> is not null and {@link #isSubjectRequired()} is true then the subject constraint is enforced on the subjects in this array subjects. @param subjects list of byte arrays containing DER-encoded X.509v3 certificates that are acceptable for signing.
5680 (Optional; PDF 1.7) A list of maps, where each map contains key value pairs, that specify the Subject Distinguished Name (DN) that must be present within the certificate for it to be acceptable for signing. The certificate must at a minimum contain all the attributes specified in one of the maps entered. @param subjectDN list of maps that contains subject distinguished names
5681 (Optional; PDF 1.7) A List of ASCII strings, where each string specifies an acceptable key-usage extension that must be present in the signing certificate. Multiple strings specify a range of acceptable key-usage extensions; where each string 9 characters long and each character is one of these values {0, 1, X} 0 for must not set, 1 for must set, X for don't care. each index in the string represents a key usage: <ol> <li>digitalSignature</li> <li>non-Repudiation</li> <li>keyEncipherment</li> <li>dataEncipherment</li> <li>keyAgreement</li> <li>keyCertSign</li> <li>cRLSign</li> <li>encipherOnly</li> <li>decipherOnly</li> </ol> @param keyUsageExtensions list of ASCII strings that consists only of {0, 1, X}
5682 (Optional) A list of array of bytes containing DER-encoded X.509v3 certificates of acceptable issuers. If the signer’s certificate chains up to any of the specified issuers (either directly or indirectly), the certificate is considered acceptable for signing. @param issuers A list of byte array containing DER-encoded X.509v3 certificates
5683 (Optional) A list of byte arrays that contain Object Identifiers (OIDs) of the certificate policies that must be present in the signing certificate. This field is only applicable if the value of Issuer is not empty. @param oidByteStrings list of byte arrays that contain OIDs
5684 Default constructor.
5685 Set the dictionary type. @param type is the dictionary type.
5686 Set the filter. @param filter the filter to be used
5687 Set a subfilter that specify the signature that should be used. @param subfilter the subfilter that shall be used.
5688 Sets the byte range. @param range the byte range to be used
5689 Sets the contents. @param bytes contents to be used
5690 Set the RGB text color for this node. @param textColor The text color for this node.
5691 Constructor. @param doc The document that this form is part of.
5692 Set the documents root fields. @param fields The fields that are part of the documents root fields.
5693 Set the calculation order in which field values should be recalculated when the value of any field changes. (Read about "Trigger Events" in the PDF specification) @param fields The field list.
5694 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
5695 This will set the export values. @see #getExportValues() @param values List containing all possible export values. Supplying null or an empty list will remove the Opt entry.
5696 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
5697 Sets the child fields. @param children The list of child fields.
5698 Sets the value of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @param object the new value
5699 Sets the default of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @param value the default value
5700 @see PDTerminalField#PDTerminalField(PDAcroForm) @param acroForm The acroForm for this field.
5701 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
5702 Set the default style string. Providing null as the value will remove the default style string. @param defaultStyleString a string describing the default style.
5703 Set the fields rich text value. <p> Setting the rich text value will not generate the appearance for the field. <br> You can set {@link PDAcroForm#setNeedAppearances(Boolean)} to signal a conforming reader to generate the appearance stream. </p> Providing null as the value will remove the default style string. @param richTextValue a rich text string
5704 This will set the origin of the coordinate system. @param coordSystemOrigin the origin
5705 Default constructor.
5706 Sets the direction in which the specified transition effect shall move. Only for {@link PDTransitionStyle#Wipe}, {@link PDTransitionStyle#Glitter}, {@link PDTransitionStyle#Fly}, {@link PDTransitionStyle#Cover}, {@link PDTransitionStyle#Uncover} and {@link PDTransitionStyle#Push}. @param direction the direction in which the specified transition effect shall move
5707 @param duration The duration of the transition effect, in seconds.
5708 @param scale The starting or ending scale at which the changes shall be drawn. Only for {@link PDTransitionStyle#Fly}.
5709 @param opaque If true, the area that shall be flown in is rectangular and opaque. Only for {@link PDTransitionStyle#Fly}.
5710 {@inheritDoc}
5711 Process the font color operator. This is assumed to be an RGB color. @param operands the color components @throws IOException in case of the color components not matching
5712 {@inheritDoc}
5713 This will add all objects to this array. @param objectList The list of objects to add.
5714 This will take an COSArray of numbers and convert it to a float[]. @return This COSArray as an array of float numbers.
5715 This will return a list of float values if the COSArray consists of COSNumbers only. @return the list of float values of the COSArray of COSNumbers
5716 This will return a list of int values if the COSArray consists of COSNumbers only. @return the list of int values of the COSArray of COSNumbers
5717 Update the P reference to the new parent dictionary. @param kArray the kids array @param newParent the new parent @param newStructureType the new structure type in /S or null so it doesn't get replaced
5718 This will get the minimum value of the range. @return The min value.
5719 This will get the maximum value of the range. @return The max value.
5720 Gets the colour by edge index. @param index edge index @return the colour
5721 This will get the string of one of the available options. A required element. @return An available option.
5722 This will get the string of default appearance string. A required element. @return A default appearance string.
5723 Determines the blend mode from the BM entry in the COS ExtGState. @param cosBlendMode name or array @return blending mode
5724 Returns the list of colorants. @return the list of colorants
5725 This will get the alternate color space for this separation. @return The alternate color space. @throws IOException If there is an error getting the alternate color space.
5726 Returns the colorant name. @return the name of the colorant
5727 This will create a new destination depending on the type of COSBase that is passed in. @param base The base level object. @return A new destination. @throws IOException If the base cannot be converted to a Destination.
5728 This will get the page for this destination. A page destination can either reference a page (for a local destination) or a page number (when doing a remote destination to another PDF). If this object is referencing by page number then this method will return null and {@link #getPageNumber()} should be used. @return The page for this destination.
5729 This will get the page number for this destination. A page destination can either reference a page (for a local destination) or a page number (when doing a remote destination to another PDF). If this object is referencing by page number then this method will return that number, otherwise -1 will be returned. @return The zero-based page number for this destination.
5730 Get the zoom value. Return values of 0 or -1 imply that the current zoom will be used. @return The zoom value for the page.
5731 Creates a matrix from a 6-element (a b c d e f) COS array. @param array source array, elements must be or extend COSNumber
5732 This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param key The key to the object that we are getting. @return The object that matches the key.
5733 This is a special case of getDictionaryObject that takes multiple keys, it will handle the situation where multiple keys could get the same value, ie if either CS or ColorSpace is used to get the colorspace. This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param firstKey The first key to try. @param secondKey The second key to try. @return The object that matches the key.
5734 This is a convenience method that will get the dictionary object that is expected to be a name. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COS name.
5735 This is a convenience method that will get the dictionary object that is expected to be a COSDictionary. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSDictionary.
5736 This is a convenience method that will get the dictionary object that is expected to be a COSStream. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSStream.
5737 This is a convenience method that will get the dictionary object that is expected to be a COSArray. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSArray.
5738 This is a convenience method that will get the dictionary object that is expected to be a name. Default is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The COS name.
5739 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
5740 This is a convenience method that will get the dictionary object that is expected to be a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
5741 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary or if the date was invalid. @param key The key to the item in the dictionary. @return The name converted to a date.
5742 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
5743 This is a convenience method that will get the dictionary object that is expected to be an float. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The float value.
5744 Some applications may not wrap their page content in a save/restore (q/Q) pair which can lead to problems with coordinate system transformations when content is appended. This method lets you add a q/Q pair around the existing page's content. @param page the page @throws IOException if an I/O error occurs
5745 Returns the content streams which make up this page. @return content stream iterator
5746 Returns true if this page has one or more content streams. @return true if the page has a non empty content stream, otherwise false
5747 This will take a COS dictionary and convert it into COSDictionaryMap. All cos objects will be converted to their primitive form. @param map The COS mappings. @return A standard java map. @throws IOException If there is an error during the conversion.
5748 Removes an attribute object. @param attributeObject the attribute object
5749 Returns the class names together with their revision numbers (C). @return the class names as a list, never null.
5750 Removes a class name. @param className the class name
5751 Appends a COS base kid. @param object the COS base
5752 Inserts an COS base kid before a reference kid. @param newKid the COS base @param refKid the reference kid
5753 Removes a COS base kid. @param object the COS base @return <code>true</code> if the kid was removed, <code>false</code> otherwise
5754 Returns the K entry. This can be a dictionary representing a structure element, or an array of them. To get it as a list of PDStructureElement objects, use {@link #getKids()} instead. @return the K entry.
5755 Returns the property value. @return the property value
5756 Will get the EncryptMetaData dictionary info. @return true if EncryptMetaData is explicitly set (the default is true)
5757 This will get the OE entry in the standard encryption dictionary. @return A 32 byte array or null if there is no owner encryption key. @throws IOException If there is an error accessing the data.
5758 This will get the UE entry in the standard encryption dictionary. @return A 32 byte array or null if there is no user encryption key. @throws IOException If there is an error accessing the data.
5759 Get the Perms entry in the encryption dictionary. @return A 16 byte array or null if there is no Perms entry. @throws IOException If there is an error accessing the data.
5760 This will get the page number or null if it does not exist. @return The page number.
5761 Returns the COS value of this field. @return The COS value of the field, maybe <code>null</code>. @throws IOException If there is an error getting the value.
5762 This will get the 'Ff' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
5763 This will get the 'SetFf' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
5764 This will get the 'ClrFf' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
5765 This will get the 'F' entry of the FDF field dictionary. If it is not present then this method will return null. @return The widget field flags.
5766 This will get the 'SetF' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
5767 This will get the 'ClrF' entry of the FDF field dictionary. If it is not present then this method will return null. @return The widget field flags.
5768 This will get the default width. The default value for the default width is 1000. @return The default width for the glyphs in this font.
5769 Returns the process color space @return the process color space @throws IOException if the color space cannot be read
5770 Returns the group color space or null if it isn't defined. @param resources useful for its cache. Can be null. @return the group color space. @throws IOException if the colorspace could not be created
5771 Creates a new instance based on a given {@link COSDictionary}. @param dict the dictionary
5772 Creates a new instance based on a given {@link COSDictionary}. @param dict the dictionary
5773 This will get the overprint control mode. @return The overprint control mode or null if one has not been set.
5774 Returns the soft mask stored in the COS dictionary @return the soft mask or null if there isn't any.
5775 This will get a float item from the dictionary. @param key The key to the item. @return The value for that item.
5776 This will get the transfer function of the /TR dictionary. @return The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function.
5777 This will get the transfer function of the /TR2 dictionary. @return The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function, and the name Default denotes the transfer function that was in effect at the start of the page.
5778 Returns the backdrop color. @return the backdrop color
5779 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
5780 The annotation or annotations to be hidden or shown @return The T entry of the specific thread action dictionary.
5781 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
5782 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
5783 If the value in the /P entry is a string, this will get a named destination in the current document that provides the page number of the file attachment annotation. @return a named destination or null if the /P entry value is missing or not a string.
5784 Constructor. @param dict The annotations dictionary.
5785 Returns the /Contents string as a byte array, i.e. the embedded signature between the byterange gap. @return a byte array containing the signature, or an empty array if there isn't any.
5786 Get the XFA resource, the XFA resource is only used for PDF 1.5+ forms. @return The xfa resource or null if it does not exist.
5787 This will get the option values "Opt". <p> For a choice field the options array can either be an array of text strings or an array of a two-element arrays.<br> The method always only returns either the text strings or, in case of two-element arrays, an array of the first element of the two-element arrays </p> <p> Use {@link #getOptionsExportValues()} and {@link #getOptionsDisplayValues()} to get the entries of two-element arrays. </p> @return List containing the export values.
5788 This will get the display values from the options. <p> For options with an array of text strings the display value and export value are the same.<br> For options with an array of two-element arrays the display value is the second entry in the two-element array. </p> @return List containing all the display values.
5789 Returns the selected values, or an empty List, for the given key.
5790 Returns the given attribute, inheriting from parent nodes if necessary. @param key the key to look up @return COS value for the given key
5791 Returns the COSBase value of the "V" entry. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @return the COSBase value of the "V" entry
5792 {@inheritDoc} <p><b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance.
5793 Returns the default value of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @return the new default value
5794 {@inheritDoc}
5795 Collects all indirect objects numbers within this COSArray and all included dictionaries. It is used to avoid mixed up object numbers when importing an existing page to another pdf. Expert use only. You might run into an endless recursion if choosing a wrong starting point. @param indirectObjects a collection of already found indirect objects.
5796 Determine the highest object number from the imported page to avoid mixed up numbers when saving the new pdf. @param importedPage the imported page.
5797 Closes the visual signature COSDocument, if any. Do not call this before you're saved your signed PDF document, or saving will fail because COSStream objects held both by the COSDocument and by the signed document would no longer be available. @throws IOException if the document could not be closed
5798 This will write a COS object for a predefined key. @param key The key of the object to write. @param obj The object to write. @throws IOException if the output cannot be written
5799 visitFromObjRef method comment. @param obj The object that is being visited. @throws IOException If there is an exception while visiting this object.
5800 Returns the {@link COSObjectKey}, that is registered for the given {@link COSBase} in this compression pool. @param object The {@link COSBase} a {@link COSObjectKey} is registered for in this compression pool. @return The {@link COSObjectKey}, that is registered for the given {@link COSBase} in this compression pool, if such an object is contained.
5801 Update the key and object maps. @param key The key, that shall be added. @param object The object, that shall be added. @return The actual key, the object has been added for.
5802 Returns true, if the given {@link COSBase} is a registered object of this compression pool. @param object The object, that shall be checked. @return True, if the given {@link COSBase} is a registered object of this compression pool.
5803 Creates {@link COSWriterObjectStream}s for all currently registered objects of this pool, that have been marked as fit for being compressed in this manner. Such object streams may be added to a PDF document and shall be declared in a document's {@link PDFXRefStream} accordingly. The objects contained in such a stream must not be added to the document separately. @return The created {@link COSWriterObjectStream}s for all currently registered compressible objects.
5804 Process lines for output. Process lines for an individual paragraph and generate the commands for the content stream to show the text. @param lines the lines to process. @throws IOException if there is an error writing to the stream.
5805 Generates the first intermediate curl for a cloudy polygon.
5806 Returns a template for intermediate curls in a cloudy polygon.
5807 Creates one or more Bézier curves that represent an elliptical arc. Angles are in radians. The arc will always proceed in the positive angle direction. If the argument `out` is null, this writes the results to the instance variable `output`.
5808 Creates a new ICC color space with an empty stream. @param doc the document to store the ICC data
5809 Creates a new uncolored tiling pattern color space. @param resources The current resources. @param colorSpace The underlying color space.
5810 Set optional content groups as a list. @param ocgs list of optional content groups to set.
5811 This will set the changes along the x-axis. @param changeXs changes along the x-axis
5812 This will set the changes along the y-axis. @param changeYs changes along the y-axis
5813 This will set the distances. @param distances distances
5814 This will set the areas. @param areas areas
5815 This will set the angles. @param angles angles
5816 This will set the sloaps of a line. @param lineSloaps the sloaps of a line
5817 This will add null values until the size of the array is at least as large as the parameter. If the array is already larger than the parameter then nothing is done. @param size The desired size of the array.
5818 This will parse a directory object from the stream. @return The parsed object. @throws IOException If there is an error during parsing.
5819 This will set the list of decode parameters. @param decodeParams The list of decode parameters.
5820 This will set the list of decode params. @param decodeParams The list of decode params.
5821 Sets the kids (K). @param kids the kids
5822 This will set the options for the choice field. The objects in the list should either be <code>String</code> or {@link FDFOptionElement}. @param options The options to set.
5823 Returns the range for a certain component number. This will never return null. If it is not present then the range 0..1 will be returned. @param n the component number to get the range for @return the range for this component
5824 Build widths with Identity CIDToGIDMap (for embedding full font).
5825 This will set the dash pattern for the graphics state. @param dashPattern The dash pattern
5826 Set the color space instance for this box style. This must be a PDDeviceRGB! @param color The new colorspace value.
5827 This will set the color used in drawing various elements. As of PDF 1.6 these are : Background of icon when closed Title bar of popup window Border of a link annotation Colour is in DeviceRGB colourspace @param c colour in the DeviceRGB colourspace
5828 This will set interior color of the line endings defined in the LE entry. color is in DeviceRGB color space. @param ic color in the DeviceRGB color space.
5829 This will set interior color. @param ic color.
5830 This will set interior color of the line endings defined in the LE entry. @param ic color.
5831 This will set interior color of the drawn area color is in DeviceRGB colorspace. @param ic color in the DeviceRGB color space.
5832 This will set the border color. @param c the border color
5833 This will set the background color. @param c the background color
5834 Set the RGB text color for this node. @param textColor The text color for this node.
5835 Creates a new JPEG Image XObject from an input stream containing JPEG data. The input stream data will be preserved and embedded in the PDF file without modification. @param document the document where the image will be created @param stream a stream of JPEG data @return a new Image XObject @throws IOException if the input stream cannot be read
5836 This will set the font for this font setting. @param font The new font.
5837 This will set the tint transform function. @param tint The tint transform function.
5838 Sets the tint transform function. @param tint the tint transform function
5839 Set the page for a local destination. For an external destination, call {@link #setPageNumber(int) setPageNumber(int pageNumber)}. @param page The page for a local destination.
5840 This will create a translated rectangle based off of this rectangle, such that the new rectangle retains the same dimensions(height/width), but the lower left x,y values are zero. <br> 100, 100, 400, 400 (llx, lly, urx, ury ) <br> will be translated to 0,0,300,300 @return A new rectangle that has been translated back to the origin.
5841 Sets the colour for the before edge. @param colour the colour for the before edge
5842 Sets the colour for the after edge. @param colour the colour for the after edge
5843 Sets the colour for the start edge. @param colour the colour for the start edge
5844 Sets the colour for the end edge. @param colour the colour for the end edge
5845 This will dispatch to the correct method. @param obj The object to decrypt. @param objNum The object number. @param genNum The object generation Number. @return the encrypted/decrypted COS object @throws IOException If there is an error getting the stream data.
5846 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
5847 Sets the AcroForm for this catalog. @param acroForm The new AcroForm.
5848 Sets the viewer preferences. @param prefs The new viewer preferences.
5849 Sets the document outlines. @param outlines The new document outlines.
5850 Sets the metadata for this object. This can be null. @param meta The meta data for this object.
5851 Sets the Document Open Action for this object. @param action The action you want to perform.
5852 Sets the additional actions for the document. @param actions The actions that are associated with this document.
5853 Sets the names dictionary for the document. @param names The names dictionary that is associated with this document.
5854 Set information about the doc's usage of tagged features. @param markInfo The new MarkInfo data.
5855 Sets the document level URI. @param uri The new document level URI.
5856 Sets the document's structure tree root. @param treeRoot The new structure tree.
5857 Sets the page label descriptor for the document. @param labels the new page label descriptor to set.
5858 Set the named destinations that are associated with this document. @param dests The destination names.
5859 Set the named embedded files that are associated with this document. @param ef The new embedded files
5860 Set the named javascript entries that are associated with this document. @param js The new Javascript entries.
5861 Creates a new instance of PDPage for embedding. @param mediaBox The MediaBox of the page.
5862 This will set the resources for this page. @param resources The new resources for this page.
5863 This will set the mediaBox for this page. @param mediaBox The new mediaBox for this page.
5864 This will set the BleedBox for this page. @param bleedBox The new BleedBox for this page.
5865 This will set the TrimBox for this page. @param trimBox The new TrimBox for this page.
5866 This will set the ArtBox for this page. @param artBox The new ArtBox for this page.
5867 This will set the contents of this page. @param contents The new contents of the page.
5868 Set the metadata for this object. This can be null. @param meta The meta data for this object.
5869 Set the page actions. @param actions The actions for the page.
5870 @param transition The new transition to set on this page.
5871 Convenient method to set a transition and the display duration @param transition The new transition to set on this page. @param duration The maximum length of time, in seconds, that the page shall be displayed during presentations before the viewer application shall automatically advance to the next page.
5872 Sets the page. @param page the page
5873 Sets the referenced annotation. @param annotation the referenced annotation
5874 Sets the referenced XObject. @param xobject the referenced XObject
5875 Sets the page on which the object shall be rendered. This is optional and overrides the /PG entry in the structure element containing the object reference; shall be used if the structure element contained no such entry. @param page
5876 Sets the parent in the structure hierarchy (P). @param structureNode the parent in the structure hierarchy
5877 Sets the page on which some or all of the content items designated by the K entry shall be rendered (Pg). @param page the page on which some or all of the content items designated by the K entry shall be rendered.
5878 Sets the attributes together with their revision numbers (A). @param attributes the attributes
5879 Sets the ID tree. @param idTree the ID tree
5880 Sets the parent tree.<p> The keys correspond to a single page of the document or to an individual object, e.g. an annotation or an XObject, which have a <b>/StructParent</b> or <b>/StructParents</b> entry.<p> The values of type {@link PDParentTreeValue} are either a dictionary or an array. It's a dictionary for individual objects like an annotation or an XObject, and an array for a page object or a content stream containing marked-content sequences identified by an MCID. <p> To create an empty parent tree, call {@code new PDNumberTreeNode(PDParentTreeValue.class)}. @param parentTree the parent tree
5881 Set the rectangle associated with this annotation. @param rectangle The annotation rectangle.
5882 This will set the border style dictionary, specifying the width and dash pattern used in drawing the annotation. @param bs the border style dictionary to set.
5883 This will set the border effect dictionary, describing the effect applied to the border described by the BS entry. @param be the border effect dictionary to set.
5884 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. @param fringe the fringe
5885 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
5886 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
5887 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
5888 This will set the FDF document. @param fdf The new FDF dictionary.
5889 This will set the signature that is associated with this catalog. @param sig The new signature.
5890 This will set the file specification. @param fs The file specification.
5891 This will set the JavaScript entry. @param js The javascript entries.
5892 This will set the FDF catalog for this FDF document. @param cat The FDF catalog.
5893 This will set the appearance dictionary. @param ap The appearance dictionary.
5894 This will set the named page references. @param ref The named page references.
5895 This will set the icon fit 'IF' entry. @param fit The icon fit object.
5896 This will set the action that is associated with this field. @param a The new action.
5897 This will set the additional actions that are associated with this field. @param aa The additional actions.
5898 This will set frational space to allocate. @param space The space to allocate.
5899 This will set the file specification for this named page reference. @param fs The file specification to set.
5900 This will set the page info. @param info The new page info dictionary.
5901 This will set the template reference. @param tRef The template reference.
5902 Set the type 1 font program. @param type1Stream The type 1 stream.
5903 Set the true type font program. @param ttfStream The true type stream.
5904 Set a stream containing a font program that is not true type or type 1. @param stream The font program stream.
5905 Set a stream containing a CIDSet. @param stream The font program stream.
5906 This will set the whitepoint tristimulus. As this is a required field, null should not be passed into this function. @param whitepoint the whitepoint tristimulus. @throws IllegalArgumentException if null is passed as argument.
5907 This will set the BlackPoint tristimulus. @param blackpoint the BlackPoint tristimulus
5908 This will set the external graphics state for this pattern. @param extendedGraphicsState The new extended graphics state for this pattern.
5909 This will set the shading resources for this pattern. @param shadingResources The new shading resources for this pattern.
5910 This will set the resources for this pattern. @param resources The new resources for this pattern.
5911 This will set the function for the color conversion. @param newFunction the new function
5912 This will set the font setting for this graphics state. @param fs The new font setting.
5913 This will set the destination to jump to. @param d The destination. @throws IllegalArgumentException if the destination is not a page dictionary object.
5914 This will set the file in which the destination is located. @param fs The file specification.
5915 Sets the target directory. @param targetDirectory the target directory
5916 This will set the destination to jump to. @param d The destination. @throws IllegalArgumentException if the destination is not a page dictionary object.
5917 This will set the file in which the destination is located. @param fs The file specification.
5918 This will set the application to be launched or the document to be opened or printed. It is required if none of the entries Win, Mac or Unix is present. If this entry is absent and the viewer application does not understand any of the alternative entries it should do nothing. @param fs The file specification.
5919 This will set a dictionary containing Windows-specific launch parameters. @param win The action to be performed.
5920 This will set the file in which the destination is located. @param fs The file specification.
5921 This will set the file in which the destination is located. @param fs The file specification.
5922 This will set the file in which the destination is located. @param fs The file specification.
5923 Set the F action. @param action Get the F action.
5924 This will set an action to be performed when the cursor enters the annotation's active area. @param e The action to be performed.
5925 This will set an action to be performed when the cursor exits the annotation's active area. @param x The action to be performed.
5926 This will set an action to be performed when the mouse button is pressed inside the annotation's active area. The name D stands for "down". @param d The action to be performed.
5927 This will set an action to be performed when the mouse button is released inside the annotation's active area. The name U stands for "up". @param u The action to be performed.
5928 This will set an action to be performed when the annotation receives the input focus. @param fo The action to be performed.
5929 This will set an action to be performed when the annotation loses the input focus. The name Bl stands for "blurred". @param bl The action to be performed.
5930 This will set an action to be performed when the page containing the annotation is opened. The action is executed after the O action in the page's additional actions dictionary and the OpenAction entry in the document catalog, if such actions are present. @param po The action to be performed.
5931 This will set an action to be performed when the page containing the annotation is closed. The action is executed before the C action in the page's additional actions dictionary, if present. @param pc The action to be performed.
5932 This will set an action to be performed when the page containing the annotation becomes visible in the viewer application's user interface. @param pv The action to be performed.
5933 This will set an action to be performed when the page containing the annotation is no longer visible in the viewer application's user interface. @param pi The action to be performed.
5934 This will set a JavaScript action to be performed before closing a document. The name WC stands for "will close". @param wc The action to be performed.
5935 This will set a JavaScript action to be performed before saving a document. The name WS stands for "will save". @param ws The action to be performed.
5936 This will set a JavaScript action to be performed after saving a document. The name DS stands for "did save". @param ds The action to be performed.
5937 This will set a JavaScript action to be performed before printing a document. The name WP stands for "will print". @param wp The action to be performed.
5938 This will set a JavaScript action to be performed after printing a document. The name DP stands for "did print". @param dp The action to be performed.
5939 This will set a JavaScript action to be performed when the user types a keystroke into a text field or combo box or modifies the selection in a scrollable list box. This allows the keystroke to be checked for validity and rejected or modified. @param k The action to be performed.
5940 This will set a JavaScript action to be performed before the field is formatted to display its current value. This allows the field's value to be modified before formatting. @param f The action to be performed.
5941 This will set a JavaScript action to be performed when the field's value is changed. This allows the new value to be checked for validity. The name V stands for "validate". @param v The action to be performed.
5942 This will set a JavaScript action to be performed in order to recalculate the value of this field when that of another field changes. The order in which the document's fields are recalculated is defined by the CO entry in the interactive form dictionary. The name C stands for "calculate". @param c The action to be performed.
5943 This will set an action to be performed when the page is opened. This action is independent of any that may be defined by the OpenAction entry in the document catalog, and is executed after such an action. @param o The action to be performed.
5944 This will set an action to be performed when the page is closed. This action applies to the page being closed, and is executed before any other page opened. @param c The action to be performed.
5945 Sets the target directory. @param targetDirectory the target directory or null if the current document is the target file containing the destination.
5946 This will set a named destination in the current document that provides the page number of the file attachment annotation. @param dest a named destination or null if the entry is to be removed.
5947 This will set the appearance associated with this annotation. @param appearance The appearance dictionary for this annotation.
5948 Sets the optional content group or optional content membership dictionary for the annotation. @param oc The optional content group or optional content membership dictionary.
5949 This will set the corresponding page for this annotation. This is optional but recommended. Not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. @param page is the corresponding page
5950 Set the attached file. @param file The file that is attached.
5951 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.6 and higher. @param be The border effect dictionary to set.
5952 This will set the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param rd the rectangle difference
5953 Set the annotation action. Either this or the destination entry should be set, but not both. @param action The annotation action.
5954 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
5955 The new destination value. Either this or the action entry should be set, but not both. @param dest The updated destination.
5956 This will set the previous URI action, in case it needs to be retrieved at later date. @param pa The previous URI.
5957 This will set the popup annotation used for entering/editing the text for this annotation. @param popup the popup annotation.
5958 This will set the annotation to which this one is "In Reply To" the actual relationship is specified by the RT entry. @param irt the annotation this one is "In Reply To".
5959 This will set the external data dictionary. @param externalData the external data dictionary
5960 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
5961 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.5 and higher. @param be The border effect dictionary to set.
5962 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.5 and higher. @param be The border effect dictionary to set.
5963 This will set the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param rd the rectangle difference
5964 Sets the appearance characteristics dictionary. @param appearanceCharacteristics the appearance characteristics dictionary
5965 Set the annotation action. As of PDF 1.6 this is only used for Widget Annotations @param action The annotation action.
5966 Set the actions of the field. @param actions The field actions.
5967 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
5968 Set the parent field of a widget annotation. This is only required if this widget annotation is one of multiple children in a field, and not to be set otherwise. You will usually not need this, because in most cases, fields have only one widget and share a common dictionary. A usage can be found in the CreateMultiWidgetsForm example. @param field the parent field. @throws IllegalArgumentException if setParent() was called for a field that shares a dictionary with its only widget.
5969 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
5970 This will set the normal appearance when there is only one appearance to be shown. @param ap The appearance stream to show.
5971 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
5972 This will set the rollover appearance when there is rollover appearance to be shown. @param ap The appearance stream to show.
5973 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
5974 This will set the down appearance when there is down appearance to be shown. @param ap The appearance stream to show.
5975 Set the build data dictionary for the signature handler. This entry is optional but is highly recommended for the signatures. @param filter is the PDPropBuildFilter
5976 Set the build data dictionary for the PubSec Software module. @param pubSec is the PDPropBuildPubSec
5977 Set the build data dictionary for the viewing application software module. @param app is the PDPropBuildApp
5978 (Optional) A certificate seed value dictionary containing information about the certificate to be used when signing. @param certificate dictionary
5979 PDF signature build dictionary. Provides information about the signature handler. @param propBuild the prop build
5980 Set the previous sibling, this will be maintained by this class. @param outlineNode The new previous sibling.
5981 Set the next sibling, this will be maintained by this class. @param outlineNode The new next sibling.
5982 Set the page destination for this node. @param dest The new page destination for this node.
5983 Set the action for this node. @param action The new action for this node.
5984 Set the structure element for this node. @param structureElement The new structure element for this node.
5985 Set the first child, this will be maintained by this class. @param outlineNode The new first child.
5986 Set the last child, this will be maintained by this class. @param outlineNode The new last child.
5987 This will set the default resources for the acroform. @param dr The new default resources.
5988 Set the XFA resource, this is only used for PDF 1.5+ forms. @param xfa The xfa resource.
5989 Sets the value of this field to be the given signature. @param value is the PDSignatureField @throws IOException if the new value could not be applied
5990 Sets the default value of this field to be the given signature. @param value is the PDSignatureField
5991 <p>(Optional; PDF 1.) A seed value dictionary containing information that constrains the properties of a signature that is applied to the field.</p> @param sv is the seed value dictionary as PDSeedValue
5992 Set the actions of the field. @param actions The field actions.
5993 Sets the field's widget annotations. @param children The list of widget annotations.
5994 This will set the rectangle specifying the location of the viewport. @param rectangle the rectangle specifying the location.
5995 This will set the measure dictionary. @param measure the measure dictionary
5996 Set the thread info, can be null. @param info The info dictionary about this thread.
5997 Set the thread that this bead is part of. This is only required for the first bead in a thread. Note: This property is set for you by the PDThread.setFirstBead() method. @param thread The thread that this bead is part of.
5998 Set the next bead in the thread. @param next The next bead.
5999 Set the previous bead in the thread. @param previous The previous bead.
6000 Set the page that this bead is part of. This is a required property and must be set when creating a new bead. The PDPage object also has a list of beads in the natural reading order. It is recommended that you add this object to that list as well. @param page The page that this bead is on.
6001 Set the rectangle on the page that this bead covers. @param rect The portion of the page that this bead covers.
6002 Set if this is a tagged PDF. @param value The new marked value.
6003 Set if the structure elements contain user properties. @param userProps The new value for this property.
6004 Set the value of the suspects property. See PDF Reference 1.6 section 10.6 "Logical Structure" for more information about this property. @param suspect The new "Suspects" value.
6005 This will specify whether to track the mouse position when the URI is resolved. @param value The flag value.
6006 This will set the initial state of the annotation, open or closed. @param open Boolean value, true = open false = closed.
6007 This will set the value indication if the denominator of the fractional value is reduced/truncated . The denominator may not be reduced/truncated if true @param fd fd
6008 Tell if the underlying file is volatile and should not be cached by the reader application. Default: false @param fileIsVolatile The new value for the volatility of the file.
6009 Set the EncryptMetaData dictionary info. @param encryptMetaData true if EncryptMetaData shall be set.
6010 This will set if the contents are shown as a caption to the line. @param cap Boolean value.
6011 This will tell the icon to scale. @param value The flag value.
6012 This will set if the fields can be renamed. @param value The flag value.
6013 This will set the AntiAlias value. @param antiAlias the new AntiAlias value
6014 This will set the overprint control(OP). @param op The overprint control.
6015 This will set the overprint control(OP). @param op The overprint control.
6016 This will set the automatic stroke adjustment flag. @param sa The new automatic stroke adjustment flag.
6017 This will set the alpha source flag (“alpha is shape”), that specifies whether the current soft mask and alpha constant shall be interpreted as shape values (true) or opacity values (false). @param alpha The alpha source flag.
6018 This will set the text knockout flag. @param tk The text knockout flag.
6019 This will specify whether to open the destination document in a new window. @param value The flag value.
6020 This will specify whether to open the destination document in a new window. @param value The flag value.
6021 This will specify whether to open the destination document in a new window. @param value The flag value.
6022 A flag specifying whether to play the sound synchronously or asynchronously. When true, the reader allows no further user interaction other than canceling the sound until the sound has been completely played. @param synchronous Whether to play the sound synchronously (true) or asynchronously (false).
6023 A flag specifying whether to repeat the sound indefinitely. @param repeat Whether to repeat the sound indefinitely.
6024 The flag specifying whether to mix this sound with any other sound already playing. If this flag is false, any previously playing sound shall be stopped before starting this sound; this can be used to stop a repeating sound (see Repeat). Default value: false. @param mix whether to mix this sound with any other sound already playing. (false).
6025 This will set if the contents are shown as a caption to the line. @param cap Boolean value.
6026 This will set initial state of the annotation, open or closed. @param open Boolean value, true = open false = closed
6027 A flag that can be used by the signature handler or software module to indicate that this signature was created with unrelease software. @param preRelease is true if the signature was created with a unrelease software, otherwise false.
6028 If true, the reader should not display a warning about fonts not being embedded. @param noEmbedFontWarning true if there is a Legal dictionary in the catalog and the NonEmbeddedFonts attribute has a non-zero value Documentation says: (Optional; PDF 1.5) If there is a LegalPDF dictionary in the catalog of the PDF file and the NonEmbeddedFonts attribute in this dictionary has a non zero value, and the viewing application has a preference set to suppress the display of this warning then the value of this attribute will be set to true. @see <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/Acrobat_Signature_BuildDict.pdf#page=6">Digital Signature Build Dictionary Specification</a> @see #getNonEFontNoWarn() @see COSName#NON_EFONT_NO_WARN
6029 If true, the application was in trusted mode when signing took place. @param trustedMode true if the application is in trusted mode.
6030 Set the NeedAppearances value. If this is false, PDFBox will create appearances for all field widget. @param value the value for NeedAppearances
6031 Set the toolbar preference. @param value Set the toolbar preference.
6032 Set the menubar preference. @param value Set the menubar preference.
6033 Set the window UI preference. @param value Set the window UI preference.
6034 Set the fit window preference. @param value Set the fit window preference.
6035 Set the center window preference. @param value Set the center window preference.
6036 Set the display doc title preference. @param value Set the display doc title preference.
6037 This will create an Appearance dictionary from an appearance XML element. @param appearanceXML The XML element that contains the appearance data.
6038 This is a convenience method that will convert the value to a COSName object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
6039 Sets the page mode. @param mode The new page mode.
6040 Sets the page layout. @param layout The new page layout.
6041 Sets the PDF specification version this document conforms to. @param version the PDF version (e.g. "1.4")
6042 This will set the trapped of the document. This will be 'True', 'False', or 'Unknown'. @param value The new trapped value for the document. @throws IllegalArgumentException if the parameter is invalid.
6043 Sets the numbering style for this page range. @param style one of the STYLE_* constants or {@code null} if no page numbering is desired.
6044 Creates a new instance with a given type. @param type the type (Type)
6045 Sets the owner of the attributes. @param owner the owner of the attributes
6046 Default constructor
6047 Default Constructor.
6048 Sets the structure type (S). @param structureType the structure type
6049 Sets the class names together with their revision numbers (C). @param classNames the class names
6050 Constructor. @param type the type
6051 Set the style for the box. @param style The style for the box line. @see PDBoxStyle#GUIDELINE_STYLE_DASHED @see PDBoxStyle#GUIDELINE_STYLE_SOLID
6052 Set the subfilter entry of the encryption dictionary. @param subfilter The value of the subfilter field.
6053 The intent of the annotation. @param intent The annotation's intent.
6054 This will set the line ending style. @param style The new style.
6055 This will set the icon (and hence appearance, AP taking precedence) For this annotation. See the PDAnnotationText.NAME_XXX constants for valid values. @param icon The name of the annotation
6056 This will set the version of the FDF document. @param version The new version for the FDF document.
6057 This will set the encoding. @param encoding The new encoding.
6058 This will set the scale option for the icon. Set the SCALE_OPTION_XXX constants. @param option The scale option.
6059 This will set the scale type. See the SCALE_TYPE_XXX constants. @param scale The scale type.
6060 Creates a new Pattern dictionary.
6061 This will set the type of PDF object that the actions dictionary describes. If present must be Action for an action dictionary. @param type The new Type for the PDF object.
6062 This will set the type of action that the actions dictionary describes. @param s The new type of action.
6063 This will set the sub type (and hence appearance, AP taking precedence) For this annotation. See the SUB_TYPE_XXX constants for valid values. @param subType The subtype of the annotation
6064 This will set the annotations appearance state name. @param as The name of the appearance stream.
6065 Set the name used to draw the attachment icon. See the ATTACHMENT_NAME_XXX constants. @param name The name of the visual icon to draw.
6066 This will set the line ending style. @param style The new style.
6067 This will set the caption positioning. Allowed values are: "Inline" and "Top" @param captionPositioning caption positioning
6068 Set the highlight mode. See the HIGHLIGHT_MODE_XXX constants. @param mode The new highlight mode.
6069 This will set the Reply Type (relationship) with the annotation in the IRT entry See the RT_* constants for the available values. @param rt the reply type.
6070 This will set the intent of the annotation The values and meanings are specific to the actual annotation See the IT_* constants for the annotation classes. @param it the intent
6071 This will set the name (and hence appearance, AP taking precedence) For this annotation. See the NAME_XXX constants for valid values. @param name The name of the rubber stamp.
6072 This will set the name (and hence appearance, AP taking precedence) For this annotation. See the NAME_XXX constants for valid values. @param name The name of the annotation
6073 Sets the highlighting mode. <dl> <dt><code>N</code></dt> <dd>(None) No highlighting.</dd> <dt><code>I</code></dt> <dd>(Invert) Invert the contents of the annotation rectangle.</dd> <dt><code>O</code></dt> <dd>(Outline) Invert the annotation's border.</dd> <dt><code>P</code></dt> <dd>(Push) Display the annotation's down appearance, if any. If no down appearance is defined, the contents of the annotation rectangle shall be offset to appear as if it were pushed below the surface of the page</dd> <dt><code>T</code></dt> <dd>(Toggle) Same as <code>P</code> (which is preferred).</dd> </dl> @param highlightingMode the highlighting mode the defined values
6074 This will set the border style, see the STYLE_* constants for valid values. @param s the border style to use
6075 Constructor.
6076 This will set the subtype of the external data dictionary. @param subtype the subtype of the external data dictionary
6077 The name of the software module that was used to create the signature. @param name is the name of the software module
6078 (Optional; PDF 1.7) A name indicating the usage of the URL entry. There are standard uses and there can be implementation-specific uses for this URL. The following value specifies a valid standard usage: <ul> <li>Browser, The URL references content that should be displayed in a web browser to allow enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL bit is ignored for this usage.</li> <li>ASSP, The URL references a signature web service that can be used for server-based signing. If the Ff attribute’s URL bit indicates that this is a required constraint, this implies that the credential used when signing must come from this server.</li> </ul> Third parties can extend the use of this attribute with their own attribute values, which must conform to the guidelines specified in <a href="http://www.adobe.com/content/dam/acom/en/devnet/pdf/PDF32000_2008.pdf#page=681">PDF Spec 1.7 Appendix E (PDF Name Registry)</a> if urlType is not set the default is Browser for URL @param urlType String of the urlType
6079 Default Constructor.
6080 Constructor for an existing document outline. @param dic The storage dictionary.
6081 Constructor.
6082 This will set the subtype of the measure dictionary. @param subtype the subtype of the measure dictionary
6083 Constructor.
6084 This will set the name of the viewport. @param name the name of the viewport
6085 creates a new transition with the given style. @param style the style to be used to create the new transition
6086 Sets the dimension in which the specified transition effect shall occur. Only for {@link PDTransitionStyle#Split} and {@link PDTransitionStyle#Blinds}. @param dimension the dimension in which the specified transition effect shall occur
6087 Sets the direction of motion for the specified transition effect. Only for {@link PDTransitionStyle#Split}, {@link PDTransitionStyle#Blinds} and {@link PDTransitionStyle#Fly}. @param motion the direction of motion for the specified transition effect
6088 Set the non full screen page mode preference. @param value Set the non full screen page mode preference.
6089 Set the reading direction preference. @param value Set the reading direction preference.
6090 Set the ViewArea preference. See BOUNDARY enumeration. @param value Set the ViewArea preference.
6091 Set the ViewClip preference. See BOUNDARY enumeration. @param value Set the ViewClip preference.
6092 Set the PrintArea preference. See BOUNDARY enumeration. @param value Set the PrintArea preference.
6093 Set the PrintClip preference. See BOUNDARY enumeration. @param value Set the PrintClip preference.
6094 Set the Duplex preference. See DUPLEX enumeration. @param value Set the Duplex preference.
6095 Set the PrintScaling preference. See PRINT_SCALING enumeration. @param value Set the PrintScaling preference.
6096 Set the date object. @param key The key to the date. @param date The date to set.
6097 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
6098 Sets the Language for the document. @param language The new document language.
6099 This will set the title of the document. @param title The new title for the document.
6100 This will set the author of the document. @param author The new author for the document.
6101 This will set the subject of the document. @param subject The new subject for the document.
6102 This will set the keywords of the document. @param keywords The new keywords for the document.
6103 This will set the creator of the document. @param creator The new creator for the document.
6104 This will set the producer of the document. @param producer The new producer for the document.
6105 Sets the page label prefix for this page range. @param prefix the page label prefix for this page range, or {@code null} to unset the prefix.
6106 This will set the unicode file name. If you call this, then do not forget to also call {@link #setFile(java.lang.String) setFile(String)} or the attachment will not be visible on some viewers. @param file The name of the file.
6107 This will set the file name. You should also call {@link #setFileUnicode(java.lang.String) setFileUnicode(String)} for cross-platform and cross-language compatibility. @param file The name of the file.
6108 Set the file description. @param description The file description
6109 Sets the element identifier (ID). @param id the element identifier
6110 Sets the title (T). @param title the title
6111 Sets the language (Lang). @param language the language
6112 Sets the alternate description (Alt). @param alternateDescription the alternate description
6113 Sets the expanded form (E). @param expandedForm the expanded form
6114 Sets the actual text (ActualText). @param actualText the actual text
6115 The annotation modification date. @param date The date to store in the FDF annotation.
6116 Set a unique name for an annotation. @param name The unique annotation name.
6117 Set the contents, or a description, for an annotation. @param contents The annotation contents, or a description.
6118 Set a unique title for an annotation. @param title The annotation title.
6119 A short description of the annotation. @param subject The annotation subject.
6120 This will set the symbol that shall be associated with the caret. @param symbol the symbol
6121 Set the default appearance string. @param appearance The new default appearance string.
6122 Set the default style string. @param style The new default style string.
6123 This will set the caption positioning. Allowed values are: "Inline" and "Top" @param captionStyle caption positioning
6124 This will set the annotation state. @param state the annotation state
6125 This will set the annotation state model. Allowed values are "Marked" and "Review" @param stateModel the annotation state model
6126 This will set the status string. @param status The new status string.
6127 This will set the target frame in the browser to open this document. @param target The new target frame.
6128 This will set the partial field name. @param partial The partial field name.
6129 This will set the name of the referenced page. @param name The referenced page name.
6130 Sets the name of the optional content group. @param name the name
6131 Creates a new optional content properties dictionary.
6132 @param sAction The JavaScript.
6133 This will set the file name to be launched or the document to be opened or printed, in standard Windows pathname format. If the name string includes a backslash character (\), the backslash must itself be preceded by a backslash. This value must be a single string; it is not a file specification. @param f The file name to be launched.
6134 This will set the string specifying the default directory in standard DOS syntax. @param d The default directory.
6135 This will set the string specifying the operation to perform: open to open a document print to print a document If the F entry designates an application instead of a document, this entry is ignored and the application is launched. Default value: open. @param o The operation to perform.
6136 This will set a parameter string to be passed to the application designated by the F entry. This entry should be omitted if F designates a document. @param p The parameter string.
6137 This will set the uniform resource identifier to resolve, encoded in 7-bit ASCII. @param uri The uniform resource identifier.
6138 Sets the name of the file as found in the EmbeddedFiles name tree. This is only to be used if the target is a child of the current document. @param filename a filename or null if the entry is to be deleted.
6139 This will get the value of the /NM entry in the annotation dictionary. @param name the /NM value of an annotation dictionary or null if the entry is to be removed.
6140 Set the file to launch. @param file The executable/document to launch.
6141 Set the dir to launch from. @param dir The dir of the executable/document to launch.
6142 Set the operation to perform.. @param op The operation to perform on the file.
6143 Set the parameter to pass the executable. @param param The parameter for the executable.
6144 Set the "contents" of the field. @param value the value of the contents.
6145 This will set the date and time the annotation was modified. @param m the date and time the annotation was created. Date values used in a PDF shall conform to a standard date format, which closely follows that of the international standard ASN.1 (Abstract Syntax Notation One), defined in ISO/IEC 8824. A date shall be a text string of the form (D:YYYYMMDDHHmmSSOHH'mm). Alternatively, use {@link #setModifiedDate(java.util.Calendar)}
6146 This will set the name, a string intended to uniquely identify each annotation within a page. Not to be confused with some annotations Name entry which impact the default image drawn for them. @param nm The identifying name for the annotation.
6147 Set the default appearance. @param daValue a string describing the default appearance.
6148 Set the default style string. Providing null as the value will remove the default style string. @param defaultStyleString a string describing the default style.
6149 Set the string used as the title of the popup window shown when open and active (by convention this identifies who added the annotation). @param t The title of the popup.
6150 This will set the short description of the subject of the annotation. @param subj short description of the subject.
6151 This will set the annotation state. @param state the annotation state
6152 This will set the annotation state model. Allowed values are "Marked" and "Review" @param stateModel the annotation state model
6153 This will set the normal caption. @param caption the normal caption
6154 This will set the rollover caption. @param caption the rollover caption
6155 This will set the alternate caption. @param caption the alternate caption
6156 The build date of the software module. This string is normally produced by the compiler. @param date is the build date of the software module
6157 (Optional) A URL, the use for which is defined by the URLType entry. @param url String of the URL
6158 Sets the URL. @param url the URL to be set as URL
6159 Sets the name of the person or authority signing the document. According to the PDF specification, this value should be used only when it is not possible to extract the name from the signature. @param name the name to be used
6160 Sets the CPU host name or physical location of the signing. @param location the location to be used
6161 Sets the reason for the signing, such as (I agree...). @param reason the reason to be used
6162 Sets the contact info provided by the signer to enable a recipient to contact the signer to verify the signature, e.g. a phone number. @param contactInfo the contact info to be used
6163 Set the title for this node. @param title The new title for this node.
6164 Set the default appearance. @param daValue a string describing the default appearance
6165 Sets the default value of this field. @param value The name of the selected item.
6166 This will set the partial name of the field. @param name The new name for the field. @throws IllegalArgumentException If the name contains a period character.
6167 This will set the alternate name of the field ("shall be used in place of the actual field name wherever the field shall be identified in the user interface (such as in error or status messages referring to the field)"). The text appears as a tool tip in Adobe Reader. Because of the usage for error or status messages, it should be different for each field. @param alternateFieldName the alternate name of the field.
6168 This will set the mapping name of the field. @param mappingName the mapping name of the field
6169 Sets the plain text value of this field. @param value Plain text @throws IOException if the value could not be set
6170 Set the plain text value of this field, and try to update the visual appearance. @param value Plain text @throws IOException if the value could not be set
6171 Sets the default value of this field. @param value Plain text
6172 Set the default appearance. This will set the local default appearance for the variable text field only, not affecting a default appearance in the parent hierarchy. Providing null as the value will remove the local default appearance. <p> This method can also be used to change the font of a field, by replacing the font name from this string with another font name found in the AcroForm default resources <u>before</u> calling {@link #setValue(java.lang.String) setValue(String)}, see also <a href="https://stackoverflow.com/questions/47995062/pdfbox-api-how-to-handle-cyrillic-values">this stackoverflow answer</a>. For example, "/Helv 10 Tf 0 g" can be replaced with "/F1 10 Tf 0 g". Performance may go down (see <a href="https://issues.apache.org/jira/browse/PDFBOX-4508">PDFBOX-4508)</a> if this is done for many fields and with a very large font (e.g. ArialUni); to avoid this, save and reload the file after changing all fields. @param daValue a string describing the default appearance
6173 This will set the scale ration. @param scaleRatio the scale ratio.
6174 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
6175 This will set the key for this page in the structural parent tree. @param structParents The new key for this page.
6176 This will set the rotation for this page. @param rotation The new rotation for this page in degrees.
6177 Sets the start value for page numbering in this page range. @param start a positive integer representing the start value. @throws IllegalArgumentException if {@code start} is not a positive integer
6178 Set the number of bits that the output value will take up. Valid values are 1,2,4,8,12,16,24,32. @param bps The number of bits for each output value.
6179 Sets the marked content identifier. @param mcid the marked content identifier
6180 Sets the revision number (R). @param revisionNumber the revision number
6181 Sets the next key in the parent tree. This is a number greater than any existing key, and which shall be used for the next entry to be added to the tree. @param parentTreeNextkey The next key in the parent tree.
6182 This will set the number of bits to use for the crypt filter algorithm. @param length The new key length.
6183 This will set the V entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.13. <br><br> <b>Note: This value is used to decrypt the pdf document. If you change this when the document is encrypted then decryption will fail!.</b> @param version The new encryption version.
6184 This will set the number of bits to use for the encryption algorithm. @param length The new key length.
6185 This will set the R entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.14. <br><br> <b>Note: This value is used to decrypt the pdf document. If you change this when the document is encrypted then decryption will fail!.</b> @param revision The new encryption version.
6186 This will set the permissions bit mask. @param permissions The new permissions bit mask
6187 This will set the page. @param page The page number.
6188 This will set the form of quadding (justification) of the annotation text. @param justification The quadding of the text.
6189 This will set the clockwise rotation in degrees. @param rotation The number of degrees of clockwise rotation.
6190 This will set the field flags that are associated with this field. The 'Ff' entry in the FDF field dictionary. @param ff The new value for the field flags.
6191 This will set the field flags that are associated with this field. The 'SetFf' entry in the FDF field dictionary. @param ff The new value for the "set field flags".
6192 This will set the field flags that are associated with this field. The 'ClrFf' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
6193 This will set the field flags that are associated with this field. The 'F' entry in the FDF field dictionary. @param f The new value for the field flags.
6194 This will set the widget field flags that are associated with this field. The 'SetF' entry in the FDF field dictionary. @param ff The new value for the "set widget field flags".
6195 This will set the field flags that are associated with this field. The 'ClrF' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
6196 This will set the font flags. @param flags The new font flags.
6197 Sets the glyph widths in the font dictionary.
6198 This will set the paint type. @param paintType The new paint type.
6199 This will set the pattern type. @param patternType The new pattern type.
6200 This will set the paint type. @param paintType The new paint type.
6201 This will set the tiling type. @param tilingType The new tiling type.
6202 This will set the shading type. @param shadingType the new shading type
6203 Set the number of bits per flag. @param bitsPerFlag the number of bits per flag
6204 Set the number of vertices per row. @param verticesPerRow the number of vertices per row
6205 Set the number of bits per component. @param bitsPerComponent the number of bits per component
6206 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
6207 This will set the line cap style for the graphics state. @param style The new line cap style to set.
6208 This will set the line join style. @param style The new line join style.
6209 This will set the overprint mode(OPM). @param overprintMode The overprint mode
6210 @param flags the flags
6211 @param flags the flags
6212 Set the page number (zero-based) in the current document containing the file attachment annotation. @param pageNumber the zero based page number. If this is &lt; 0 then the entry is removed.
6213 This will set the index (zero-based) of the annotation in the /Annots array of the page specified by the /P entry. @param index the zero based index. If this is &lt; 0 then the entry is removed.
6214 This will set the flags for this field. @param flags The new flags.
6215 This will set the key for this annotation in the structural parent tree. @param structParent The new key for this annotation.
6216 This will set the quadding/justification of the text. Please see the QUADDING_CONSTANTS in {@link PDVariableText }. @param q The new text justification.
6217 This will set the rotation. @param rotation the rotation as a multiple of 90
6218 Set the P value. @param p the value to be set as P
6219 Sets if a timestamp is reuqired or not. @param flag true if a timestamp is required
6220 Set the open count. This number is automatically managed for you when you add items to the outline. @param openCount The new open count.
6221 This will set the document-wide default value for the quadding/justification of variable text fields. See the QUADDING constants of {@link PDVariableText}. @param q The justification of the variable text fields.
6222 This will set the flags for this field. @param flags The new flags.
6223 This will set top index "TI" value. @param topIndex the value for the top index, null will remove the value.
6224 Sets the maximum number of characters of the text field. @param maxLen the maximum number of characters
6225 This will set the quadding/justification of the text. See QUADDING constants. @param q The new text justification.
6226 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
6227 The software module revision number, corresponding to the Date attribute. @param revision is the software module revision number
6228 The software module revision number, used to determinate the minimum version of software that is required in order to process this signature. <p> NOTE: this entry is deprecated for PDF v1.7 </p> @param revision is the software module revision number
6229 This is a convenience method that will convert the value to a COSFloat object. @param key The key to the object, @param value The int value for the name.
6230 Get the user unit. This is a positive number that shall give the size of default user space units, in multiples of 1/72 inch. This is supported by PDF 1.6 and higher. @param userUnit throws IllegalArgumentException if the parameter is not positive.
6231 Set the guideline width. @param width The width in default user space units.
6232 Set the annotation opacity. @param opacity The new opacity value.
6233 This will set the length of the leader line. @param leaderLength length of the leader line
6234 This will set the length of the leader line extensions. @param leaderExtend length of the leader line extensions
6235 This will set the length of the leader line offset. @param leaderOffset length of the leader line offset
6236 Set the weight of the font. @param fontWeight The new weight of the font.
6237 This will set the italic angle for the font. @param angle The new italic angle for the font.
6238 This will set the ascent for the font. @param ascent The new ascent for the font.
6239 This will set the descent for the font. @param descent The new descent for the font.
6240 This will set the leading for the font. @param leading The new leading for the font.
6241 This will set the cap height for the font. @param capHeight The new cap height for the font.
6242 This will set the x height for the font. @param xHeight The new x height for the font.
6243 This will set the stem V for the font. @param stemV The new stem v for the font.
6244 This will set the stem H for the font. @param stemH The new stem h for the font.
6245 This will set the average width for the font. @param averageWidth The new average width for the font.
6246 This will set the max width for the font. @param maxWidth The new max width for the font.
6247 This will set the missing width for the font. @param missingWidth The new missing width for the font.
6248 This will set the XStep value. @param xStep The new XStep value.
6249 This will set the YStep value. @param yStep The new YStep value.
6250 Gets the volume at which to play the sound, in the range −1.0 to 1.0. @param volume The volume at which to play the sound, in the range −1.0 to 1.0. @throws IllegalArgumentException if the volume parameter is outside of the range −1.0 to 1.0.
6251 This will set the length of the leader line. @param leaderLineLength length of the leader line
6252 This will set the length of the leader line extensions. @param leaderLineExtensionLength length of the leader line extensions
6253 This will set the length of the leader line offset. @param leaderLineOffsetLength length of the leader line offset
6254 This will set the constant opacity value used when rendering the annotation (excluing any popup). @param ca the constant opacity value.
6255 This will set the border width in points, 0 = no border. There is a bug in Adobe Reader DC, float values are ignored for text field widgets. As a workaround, floats that are integers (e.g. 2.0) are written as integer in the PDF. <p> In Adobe Acrobat DC, the values are shown as "0 = Invisible, 1 = Thin, 2 = Medium, 3 = Thick" for widget and link annotations. @param w float the width in points
6256 (Optional) The minimum required capability of the signature field seed value dictionary parser. A value of 1 specifies that the parser shall be able to recognize all seed value dictionary entries in a PDF 1.5 file. A value of 2 specifies that it shall be able to recognize all seed value dictionary entries specified. @param minimumRequiredCapability is the minimum required capability of the signature field seed value dictionary parser
6257 This will set the CYX factor. @param cyx CYX factor
6258 This will read a COSStream from the input stream using length attribute within dictionary. If length attribute is a indirect reference it is first resolved to get the stream length. This means we copy stream data without testing for 'endstream' or 'endobj' and thus it is no problem if these keywords occur within stream. We require 'endstream' to be found after stream data is read. @param dic dictionary that goes with this stream. @return parsed pdf stream. @throws IOException if an error occurred reading the stream, like problems with reading length attribute, stream does not end with 'endstream' after data read, stream too short etc.
6259 This will parse all the tokens in the stream. This will close the stream when it is finished parsing. @return All of the tokens in the stream. @throws IOException If there is an error while parsing the stream.
6260 Calculate the bounding box of this glyph. This will work only if the first operator in the stream is d1. @return the bounding box of this glyph, or null if the first operator is not d1. @throws IOException If an io error occurs while parsing the stream.
6261 Get the width from a type3 charproc stream. @return the glyph width. @throws IOException if the stream could not be read, or did not have d0 or d1 as first operator, or if their first argument was not a number.
6262 Creates an empty PDF document. You need to add at least one page for the document to be valid.
6263 A file specification can either be a COSString or a COSDictionary. This will create the file specification either way. @param base The cos object that describes the fs. @return The file specification for the COSBase object. @throws IOException If there is an error creating the file spec.
6264 Default constructor.
6265 Default constructor.
6266 Default constructor.
6267 Default constructor.
6268 Default constructor.
6269 Default constructor.
6270 Default constructor.
6271 Default constructor.
6272 Default constructor.
6273 Default constructor.
6274 Default constructor.
6275 Default constructor.
6276 Default constructor.
6277 Default constructor.
6278 Builds vertical metrics with a custom CIDToGIDMap (for embedding font subset).
6279 Build vertical metrics with Identity CIDToGIDMap (for embedding full font).
6280 Constructor for embedding.
6281 This will set the decode values. @param decodeValues the new decode values
6282 This will set the decode values. @param decodeValues the new decode values
6283 This will set the line width. @param width The line width for the object.
6284 This will set the miter limit for the graphics state. @param miterLimit The new miter limit value
6285 This will set the flatness tolerance. @param flatness The new flatness tolerance
6286 This will set the smoothness tolerance. @param smoothness The new smoothness tolerance
6287 This will set the stroking alpha constant. @param alpha The new stroking alpha constant.
6288 This will set the non stroking alpha constant. @param alpha The new non stroking alpha constant.
6289 Constructor.
6290 Constructor.
6291 Constructor.
6292 Constructor.
6293 This will set the difference between the annotations "outer" rectangle defined by /Rect and boundaries of the underlying. <p>This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
6294 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. <p>This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
6295 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. <p> This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
6296 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
6297 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
6298 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
6299 Constructor. @param array An array of numbers as specified in the PDF Reference for a rectangle type.
6300 Creates a new line dash pattern from a dash array and phase. @param array the dash array @param phase the phase
6301 {@inheritDoc}
6302 {@inheritDoc}
6303 Sets the range for this color space. @param range the new range for the a component @param n the component to set the range for
6304 Read a single patch from a data stream, a patch contains information of its coordinates and color parameters. @param input the image source data stream @param isFree whether this is a free patch @param implicitEdge implicit edge when a patch is not free, otherwise it's not used @param implicitCornerColor implicit colors when a patch is not free, otherwise it's not used @param maxSrcCoord the maximum coordinate value calculated from source data @param maxSrcColor the maximum color value calculated from source data @param rangeX range for coordinate x @param rangeY range for coordinate y @param colRange range for color @param matrix the pattern matrix concatenated with that of the parent content stream @param xform transformation for user to device space @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @return a single patch @throws IOException when something went wrong
6305 Read a vertex from the bit input stream performs interpolations. @param input bit input stream @param maxSrcCoord max value for source coordinate (2^bits-1) @param maxSrcColor max value for source color (2^bits-1) @param rangeX dest range for X @param rangeY dest range for Y @param colRangeTab dest range array for colors @param matrix the pattern matrix concatenated with that of the parent content stream @param xform the affine transformation @return a new vertex with the flag and the interpolated values @throws IOException if something went wrong
6306 Gets the colour for the before edge. @return the colour for the before edge
6307 Gets the colour for the after edge. @return the colour for the after edge
6308 Gets the colour for the start edge. @return the colour for the start edge
6309 Gets the colour for the end edge. @return the colour for the end edge
6310 Returns the blending mode stored in the COS dictionary @return the blending mode
6311 This will get the destination to jump to. @return The D entry of the specific go-to action dictionary. @throws IOException If there is an error creating the destination.
6312 This will get the destination to jump to. @return The D entry of the specific go-to action dictionary. @throws IOException If there is an error creating the destination.
6313 Get the destination to be displayed when the annotation is activated. Either this or the action entry should be set, but not both. @return The destination for this annotation. @throws IOException If there is an error creating the destination.
6314 Get the page destination of this node. @return The page destination of this node. @throws IOException If there is an error creating the destination.
6315 Convenience method to be used when creating a matrix from unverified data. If the parameter is a COSArray with at least six numbers, a Matrix object is created from the first six numbers and returned. If not, then the identity Matrix is returned. @param base a COS object, preferably a COSArray with six numbers. @return a Matrix object.
6316 Nice method, gives you every object you want Arrays works properly too. Try "P/Annots/[k]/Rect" where k means the index of the Annots array. @param objPath the relative path to the object. @return the object
6317 Returns the destination corresponding to the parameter. @param name The destination name. @return The destination for that name, or null if there isn't any. @throws IOException if something goes wrong when creating the destination object.
6318 Gets the attribute value for a given name. @param attrName the given attribute name @return the attribute value for a given name
6319 Gets the attribute value for a given name. @param attrName the given attribute name @param defaultValue the default value @return the attribute value for a given name
6320 Is the attribute with the given name specified in this attribute object? @param name the attribute name @return <code>true</code> if the attribute is specified, <code>false</code> otherwise
6321 Gets an array of strings. @param name the attribute name @return the array of strings
6322 Sets an array of strings. @param name the attribute name @param values the array of strings
6323 Gets a name value or array of name values. @param name the attribute name @param defaultValue the default value @return a String or array of Strings
6324 Sets an array of name values. @param name the attribute name @param values the array of name values
6325 Gets a number or a name value. @param name the attribute name @param defaultValue the default name @return a Float or a String
6326 Gets a number or an array of numbers. @param name the attribute name @param defaultValue the default value @return a Float or an array of floats
6327 Sets an array of float numbers. @param name the attribute name @param values the float numbers
6328 Gets a colour. @param name the attribute name @return the colour
6329 Gets a single colour or four colours. @param name the attribute name @return the single ({@link PDGamma}) or a ({@link PDFourColours})
6330 This is a convenience method that will get the dictionary object that is expected to be a COSDictionary. Null is returned if the entry does not exist in the dictionary. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @return The COSDictionary.
6331 This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert it to a primitive boolean. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The entry converted to a boolean.
6332 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
6333 Returns A list of filters applied to this stream. @return A (possibly empty) list of filters applied to this stream, never null.
6334 This will get the color space or null if none exists. @return the color space for the shading @throws IOException if there is an error getting the color space
6335 Tell if the dictionary is a PDF or FDF catalog. @param dictionary the dictionary to be tested @return true if the given dictionary is a root dictionary
6336 Constructor for reading. @param root A page tree root. @param document The document which contains "root".
6337 Returns true if the node is a page tree node (i.e. and intermediate).
6338 This will return the crypt filter method. Allowed values are: NONE, V2, AESV2, AESV3 @return the name of the crypt filter method.
6339 Returns the name of the filter which is used for de/encrypting streams. Default value is "Identity". @return the name of the filter
6340 Returns the name of the filter which is used for de/encrypting strings. Default value is "Identity". @return the name of the filter
6341 Returns the Unicode character sequence which corresponds to the given character code. @param code character code @return Unicode character(s)
6342 Creates a new XObject instance of the appropriate type for the COS stream. @param base The stream which is wrapped by this XObject. @param resources the resources of this XObject @return A new XObject instance. @throws java.io.IOException if there is an error creating the XObject.
6343 Returns the subtype of the soft mask (Alpha, Luminosity) - S entry @return the subtype of the soft mask
6344 Get the relationship between the current document and the target (which may be an intermediate target). @return the relationship as a name. Valid values are P (the target is the parent of the current document) and C (the target is a child of the current document). Invalid values or null are also returned.
6345 Returns the annotations appearance state, which selects the applicable appearance stream from an appearance subdictionary. @return the annotations appearance state
6346 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param embedded The embedded dictionary to set the item in. @param key The key to the object, @param value The string value for the name.
6347 This is a convenience method that will convert the value to a COSInteger object. @param embeddedDictionary The embedded dictionary. @param key The key to the object, @param value The int value for the name.
6348 This will tell if this is an encrypted document. @return true If this document is encrypted.
6349 This will get the encryption dictionary if the document is encrypted or null if the document is not encrypted. @return The encryption dictionary.
6350 The initial parse will first parse only the trailer, the xrefstart and all xref tables to have a pointer (offset) to all the pdf's objects. It can handle linearized pdfs, which will have an xref at the end pointing to an xref at the beginning of the file. Last the root object is parsed. @throws IOException If something went wrong.
6351 The initial parse will first parse only the trailer, the xrefstart and all xref tables to have a pointer (offset) to all the pdf's objects. It can handle linearized pdfs, which will have an xref at the end pointing to an xref at the beginning of the file. Last the root object is parsed. @throws InvalidPasswordException If the password is incorrect. @throws IOException If something went wrong.
6352 This will get the document info dictionary. If it doesn't exist, an empty document info dictionary is created in the document trailer. <p> In PDF 2.0 this is deprecated except for two entries, /CreationDate and /ModDate. For any other document level metadata, a metadata stream should be used instead, see {@link PDDocumentCatalog#getMetadata()}. @return The documents /Info dictionary, never null.
6353 This will get the document CATALOG. This is guaranteed to not return null. @return The documents /Root dictionary
6354 Get the documents AcroForm. This will return null if no AcroForm is part of the document. Dependent on setting <code>acroFormFixup</code> some fixing/changes will be done to the AcroForm. If you need to ensure that there are no fixes applied call <code>getAcroForm</code> with <code>null</code>. Using <code>getAcroForm(PDDocumentFixup acroFormFixup)</code> might change the original content and subsequent calls with <code>getAcroForm(null)</code> will return the changed content. @param acroFormFixup the fix up action or null @return The document's AcroForm.
6355 Get the viewer preferences associated with this document or null if they do not exist. @return The document's viewer preferences.
6356 @return The Additional Actions for this Document
6357 @return The names dictionary for this document or null if none exist.
6358 @return The named destinations dictionary for this document or null if none exists.
6359 Get info about doc's usage of tagged features. This will return null if there is no information. @return The new mark info.
6360 Returns the document-level URI. @return the document level URI if present, otherwise null
6361 Get the document's structure tree root, or null if none exists. @return the structure tree root if present, otherwise null
6362 Get the optional content properties dictionary associated with this document. @return the optional properties dictionary or null if it is not present
6363 Constructor. @param cat The document catalog that this dictionary is part of.
6364 Get the destination named tree node. The values in this name tree will be PDPageDestination objects. @return The destination name tree node.
6365 Get the embedded files named tree node. The values in this name tree will be PDComplexFileSpecification objects. @return The embedded files name tree node.
6366 Get the document level JavaScript name tree. When the document is opened, all the JavaScript actions in it shall be executed, defining JavaScript functions for use by other scripts in the document. @return The document level JavaScript name tree.
6367 Get the page actions. @return The Actions for this Page
6368 @return The page transition associated with this page or null if no transition is defined
6369 Returns the resource with the given name and kind as an indirect object, or null.
6370 Returns the resource with the given name and kind, or null.
6371 Returns the resource names of the given kind.
6372 Returns a unique key for a new resource.
6373 Sets the value of a given named resource.
6374 Gets the page. @return the page
6375 Get the page on which the object shall be rendered. @return the referenced page or null.
6376 Returns the page on which some or all of the content items designated by the K entry shall be rendered (Pg). @return the page on which some or all of the content items designated by the K entry shall be rendered
6377 Returns the ID tree. @return the ID tree
6378 Returns the parent tree.<p> The keys correspond to a single page of the document or to an individual object, e.g. an annotation or an XObject, which have a <b>/StructParent</b> or <b>/StructParents</b> entry.<p> The values of type {@link PDParentTreeValue} are either a dictionary or an array. It's a dictionary for individual objects like an annotation or an XObject, and an array for a page object or a content stream containing marked-content sequences identified by an MCID. @return the parent tree.
6379 Sets the ClassMap. @return the ClassMap, never null. The elements are either {@link PDAttributeObject} or lists of it.
6380 Returns the crypt filter with the given name. @param cryptFilterName the name of the crypt filter @return the crypt filter with the given name if available
6381 Sets the crypt filter with the given name. @param cryptFilterName the name of the crypt filter @param cryptFilterDictionary the crypt filter to set
6382 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the annotation. @return the border style dictionary.
6383 This will retrieve the border style dictionary, describing the effect applied to the border described by the BS entry. @return the border effect dictionary.
6384 This will get the signature or null if there is none. @return The signature.
6385 This will get the java script entry. @return The java script entry describing javascript commands.
6386 This will get the appearance dictionary that specifies the appearance of a pushbutton field. @return The AP entry of this dictionary.
6387 This will get named page references. @return The named page references or <code>null</code>.
6388 This will get the icon fit that is associated with this field. @return The 'IF' entry.
6389 This will get a list of additional actions that will get executed based on events. @return The 'AA' entry in this FDF field dictionary or null.
6390 This will get the FDF page info object. @return The Page info.
6391 This is the template reference. @return The template reference.
6392 Returns the CIDSystemInfo, or null if it is missing (which isn't allowed but could happen). @return the CIDSystemInfo, or null
6393 Returns the Panose entry of the Style dictionary, if any. @return A Panose wrapper object.
6394 Returns the optional resources of the type3 stream. @return the resources bound to be used when parsing the type3 stream
6395 Returns the dictionary containing all streams to be used to render the glyphs. @return the dictionary containing all glyph streams.
6396 Returns a map of colorants and their associated Separation color space. @param resources resources, can be null. @return map of colorants to color spaces, never null. @throws IOException If there is an error reading a color space
6397 Returns the DeviceN Process Dictionary, or null if it is missing. @return the DeviceN Process Dictionary, or null if it is missing.
6398 @param destination to be rendered @return state or null if undefined
6399 This will get the external graphics state for this pattern. @return The extended graphics state for this pattern.
6400 This will get the resources for this pattern. This will return null if no resources are available at this level. @return The resources for this pattern.
6401 Get the target directory. @return the target directory or null if there is none.
6402 This will get a dictionary containing Windows-specific launch parameters. @return The Win entry of of the specific launch action dictionary.
6403 Get the target directory. If this entry is absent, the current document is the target file containing the destination. @return the target directory or null if the current document is the target file containing the destination.
6404 This will get the appearance dictionary associated with this annotation. This may return null. @return This annotations appearance.
6405 This will retrieve the corresponding page of this annotation. See also <a href="https://stackoverflow.com/a/36894982/535646">this answer</a> about what to do if the page isn't available. @return The corresponding page or null if not available.
6406 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
6407 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
6408 This will set the previous URI action, in case it's needed. @return The previous URI.
6409 This will return the external data dictionary. @return the external data dictionary
6410 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
6411 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
6412 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
6413 Returns the appearance characteristics dictionary. @return the appearance characteristics dictionary
6414 Get the additional actions for this field. This will return null if there are no additional actions for this field. As of PDF 1.6 this is only used for Widget Annotations. @return The actions of the field.
6415 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
6416 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
6417 A build data dictionary for the signature handler that was used to create the parent signature. @return the Filter as PDPropBuildFilter object
6418 A build data dictionary for the PubSec software module that was used to create the parent signature. @return the PubSec as PDPropBuildPubSec object
6419 A build data dictionary for the viewing application software module that was used to create the parent signature. @return the App as PDPropBuildApp object
6420 <p>(Optional; PDF 1.6) A dictionary containing a single entry whose key is P and whose value is an integer between 0 and 3. A value of 0 defines the signatures as an author signature. The value 1 through 3 shall be used for certification signatures and correspond to the value of P in a DocMDP transform parameters dictionary.</p> <p>If this MDP key is not present or the MDP dictionary does not contain a P entry, no rules shall be defined regarding the type of signature or its permissions.</p> @return the mdp dictionary as PDSeedValueMDP
6421 (Optional) A certificate seed value dictionary containing information about the certificate to be used when signing. @return dictionary
6422 <p>(Optional; PDF 1.6) A time stamp dictionary containing two entries. URL which is a ASCII string specifying the URL to a rfc3161 conform timestamp server and Ff to indicate if a timestamp is required or optional.</p> @return the timestamp dictionary as PDSeedValueTimeStamp
6423 PDF signature build dictionary. Provides information about the signature handler. @return the pdf signature build dictionary.
6424 Get the structure element of this node. @return The structure element of this node.
6425 @return true if the node has at least one child
6426 This will get the default resources for the AcroForm. @return The default resources or null if there is none.
6427 Get the additional actions for this field. This will return null if there are no additional actions for this field. @return The actions of the field.
6428 Returns the signature contained in this field. @return A signature dictionary.
6429 Returns the default value, if any. @return A signature dictionary.
6430 <p>(Optional; PDF 1.5) A seed value dictionary containing information that constrains the properties of a signature that is applied to the field.</p> @return the seed value dictionary as PDSeedValue
6431 This will retrieve the measure dictionary. @return the measure dictionary
6432 Get info about the thread, or null if there is nothing. @return The thread information.
6433 Get the first bead in the thread, or null if it has not been set yet. This is a required field for this object. @return The first bead in the thread.
6434 This will get the thread that this bead is part of. This is only required for the first bead in a thread, so other beads 'may' return null. @return The thread that this bead is part of.
6435 This will get the next bead. If this bead is the last bead in the list then this will return the first bead. @return The next bead in the list or the first bead if this is the last bead.
6436 This will get the previous bead. If this bead is the first bead in the list then this will return the last bead. @return The previous bead in the list or the last bead if this is the first bead.
6437 Get the page that this bead is part of. @return The page that this bead is part of.
6438 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object.
6439 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object.
6440 This will get the incremental updates since the PDF was last opened. @return The differences entry of the FDF dictionary.
6441 A stream containing a Type 1 font program. @return A stream containing a Type 1 font program.
6442 A stream containing a true type font program. @return A stream containing a true type font program.
6443 A stream containing a font program that is not true type or type 1. @return A stream containing a font program.
6444 Get the CIDSet stream. @return A stream containing a CIDSet.
6445 Gets the sound object. @return The sound object defining the sound that shall be played.
6446 This will retrieve the normal icon. @return the normal icon.
6447 This will retrieve the rollover icon. @return the rollover icon
6448 This will retrieve the alternate icon. @return the alternate icon.
6449 Returns the entry as an appearance subdictionary. @return the entry as an appearance subdictionary @throws IllegalStateException if this entry is not an appearance subdictionary
6450 This will get the document ID. @return The document id.
6451 This will write the trailer to the PDF document. @param doc The document to create the trailer for. @throws IOException If there is an IOError while writing the document.
6452 Returns the document's article threads. @return a list of all threads of the document
6453 Get the list of OutputIntents defined in the document. @return The list of PDOutputIntent, never null.
6454 Add an OutputIntent to the list. If there is not OutputIntent, the list is created and the first element added. @param outputIntent the OutputIntent to add.
6455 This will get a list of PDThreadBead objects, which are article threads in the document. This will return an empty list if there are no thread beads. @return A list of article threads on this page, never null. The returned list is backed by the beads COSArray, so any adding or deleting in this list will change the document too.
6456 Get the viewports. @return a list of viewports or null if there is no /VP entry.
6457 Helper to get kids from malformed PDFs. @param node page tree node @return list of kids
6458 Return the children of this node. This list will contain PDNameTreeNode objects. @return The list of children or null if there are no children.
6459 This will return a map of names on this level. The key will be a string, and the value will depend on where this class is being used. @return ordered map of COS objects or <code>null</code> if the dictionary contains no 'Names' entry on this level. @throws IOException If there is an error while creating the sub types. @see #getKids()
6460 Get the highest value for a key in the name map. @return The highest value for a key in the map.
6461 Set the highest value for the key in the map. @param upper The new highest value for a key in the map.
6462 Get the lowest value for a key in the name map. @return The lowest value for a key in the map.
6463 Set the lowest value for the key in the map. @param lower The new lowest value for a key in the map.
6464 Return the children of this node. This list will contain PDNumberTreeNode objects. @return The list of children or null if there are no children.
6465 This will return a map of numbers on this level. The key will be a java.lang.Integer, the value will depend on where this class is being used. @return A map of COS objects. @throws IOException If there is a problem creating the values.
6466 Get the highest value for a key in the number map. @return The highest value for a key in the map or null if missing.
6467 Set the highest value for the key in the map. @param upper The new highest value for a key in the map.
6468 Get the lowest value for a key in the number map. @return The lowest value for a key in the map or null if missing.
6469 Set the lowest value for the key in the map. @param lower The new lowest value for a key in the map.
6470 Returns all ranges for the output values as COSArray . Required for type 0 and type 4 functions @return the ranges array.
6471 Returns all domains for the input values as COSArray. Required for all function types. @return the domains array.
6472 The "Size" entry, which is the number of samples in each input dimension of the sample table. @return A List of java.lang.Integer objects.
6473 Returns all decode values as COSArray. @return the decode array.
6474 Returns all functions values as COSArray. @return the functions array.
6475 Returns all bounds values as COSArray. @return the bounds array.
6476 Returns all encode values as COSArray. @return the encode array.
6477 Returns the user properties. @return the user properties
6478 Adds a user property. @param userProperty the user property
6479 Removes a user property. @param userProperty the user property
6480 Get the RGB color to be used for the guidelines. This is guaranteed to not return null. The default color is [0,0,0]. @return The guideline color.
6481 Is the artifact attached to the given edge? @param edge the edge @return <code>true</code> if the artifact is attached to the given edge, <code>false</code> otherwise
6482 Get the annotation color. @return The annotation color, or null if there is none.
6483 This will retrieve the interior color of the drawn area. @return object representing the color.
6484 This will get the coordinates of the callout line. @return An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, Four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
6485 Get the paths making up the freehand "scribble". @see #setInkList(List) @return the List of arrays representing the paths.
6486 This will retrieve the start and end coordinates of the line (or leader line if LL entry is set). @return array of floats [x1, y1, x2, y2] line start and end points in default user space.
6487 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
6488 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point.
6489 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
6490 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point.
6491 This will retrieve the interior color of the line endings defined in the LE entry. @return object representing the color.
6492 This will set the horizontal offset of the caption. @param offset the horizontal offset of the caption
6493 This will retrieve the horizontal offset of the caption. @return the horizontal offset of the caption
6494 This will set the vertical offset of the caption. @param offset vertical offset of the caption
6495 This will retrieve the vertical offset of the caption. @return the vertical offset of the caption
6496 This will get the coordinates of the vertices. @return array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
6497 This will get interior color of the drawn area. @return object representing the color.
6498 This will get the coordinates of the the vertices. @return array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
6499 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
6500 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point.
6501 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
6502 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point.
6503 This will retrieve the interior color of the line endings defined in the LE entry. @return object representing the color.
6504 This will retrieve the interior color of the drawn area. @return object representing the color.
6505 Get the coordinates of individual words or group of words. @see #setCoords(float[]) @return the array of 8 􏰍 n numbers specifying the coordinates of n quadrilaterals.
6506 This is the FDF id. @return The FDF ID.
6507 This will get the list of FDF Fields. This will return a list of FDFField objects. @return A list of FDF fields.
6508 This will get the list of FDF Pages. This will return a list of FDFPage objects. @return A list of FDF pages.
6509 This will get the list of kids. This will return a list of FDFField objects. This will return null if the underlying list is null. @return The list of kids.
6510 This will return a list of options for a choice field. The values in the list will be 1 of 2 types:<ul> <li><code>String</code> </li> <li>{@link FDFOptionElement}</li> </ul> @return A list of all options.
6511 This will get a list of FDFTemplage objects that describe the named pages that serve as templates. @return A list of templates.
6512 This will get a list of fields that are part of this template. @return A list of fields.
6513 The widths of the characters. This will be null for the standard 14 fonts. @return The widths of the characters.
6514 This will return the whitepoint tristimulus. As this is a required field this will never return null. A default of 1,1,1 will be returned if the pdf does not have any values yet. @return the whitepoint tristimulus
6515 This will return the BlackPoint tristimulus. This is an optional field but has defaults so this will never return null. A default of 0,0,0 will be returned if the pdf does not have any values yet. @return the blackpoint tristimulus
6516 Returns the gamma value. If none is present then the default of 1,1,1 will be returned. @return the gamma value
6517 Returns the linear interpretation matrix, which is an array of nine numbers. If the underlying dictionary contains null then the identity matrix will be returned. @return the linear interpretation matrix
6518 Returns the names of the color components. @return the names of the color components
6519 This will get the valid range for the "a" component. If none is found then the default will be returned, which is -100..100. @return the "a" range.
6520 This will get the valid range for the "b" component. If none is found then the default will be returned, which is -100..100. @return the "b" range.
6521 This will return the background. @return the background
6522 This will get the optional Domain values of a function based shading. @return the domain values
6523 This will get the optional Extend values for this shading. @return the extend values
6524 This will get the optional Domain values for this shading. @return the domain values
6525 This will get the Coords values for this shading. @return the coordinate values
6526 Returns all decode values as COSArray. @return the decode array
6527 This will get the font setting of the graphics state. @return The font setting.
6528 An array identifying which fields to include in the submission or which to exclude, depending on the setting of the Include/Exclude flag in the Flags entry @return the array of fields
6529 An array identifying which fields to include in the submission or which to exclude, depending on the setting of the Include/Exclude flag in the Flags entry @return the array of fields
6530 This will retrieve the border array. If none is available then it will create and return a default array, which is [0 0 1]. The array consists of at least three numbers defining the horizontal corner radius, vertical corner radius, and border width. The array may have a fourth element, an optional dash array defining a pattern of dashes and gaps that shall be used in drawing the border. If the array has less than three elements, the original array will be copied and missing elements with value 0 will be added. @return the border array, never null.
6531 This will get the margin between the annotations "outer" rectangle defined by /Rect and the boundaries of the underlying caret. @return the differences. If the entry hasn't been set am empty array is returned.
6532 This will get the margin between the annotations "outer" rectangle defined by /Rect and the border. @return the differences. If the entry hasn't been set am empty array is returned.
6533 This will get the coordinates of the callout line. (PDF 1.6 and higher) Only relevant if the intent is FreeTextCallout. @return An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
6534 Get one or more disjoint paths that make this annotation. @return An array of arrays, each representing a stroked path. Each array shall be a series of alternating horizontal and vertical coordinates.
6535 This will retrieve the start and end coordinates of the line (or leader line if LL entry is set). @return array of floats [x1, y1, x2, y2] line start and end points in default user space.
6536 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
6537 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point, LE_NONE if missing, never null.
6538 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
6539 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point, LE_NONE if missing, never null.
6540 This will set the horizontal offset of the caption. @param offset the horizontal offset of the caption
6541 This will retrieve the horizontal offset of the caption. @return the horizontal offset of the caption
6542 This will set the vertical offset of the caption. @param offset vertical offset of the caption
6543 This will retrieve the vertical offset of the caption. @return the vertical offset of the caption
6544 This will retrieve the set of quadpoints which encompass the areas of this annotation which will activate. @return An array of floats representing the quad points.
6545 This will retrieve the numbers that shall represent the alternating horizontal and vertical coordinates. @return An array of floats representing the alternating horizontal and vertical coordinates.
6546 PDF 2.0: This will retrieve the arrays that shall represent the alternating horizontal and vertical coordinates for path building. @return An array of float arrays, each supplying the operands for a path building operator (m, l or c). The first array should have 2 elements, the others should have 2 or 6 elements.
6547 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
6548 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point, LE_NONE if missing, never null.
6549 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
6550 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point, LE_NONE if missing, never null.
6551 This will retrieve the numbers that shall represent the alternating horizontal and vertical coordinates. @return An array of floats representing the alternating horizontal and vertical coordinates.
6552 This will get the differences between the annotations "outer" rectangle defined by /Rect and the border. @return the differences. If the entry hasn't been set am empty array is returned.
6553 This will retrieve the set of quadpoints which encompass the areas of this annotation. @return An array of floats representing the quad points.
6554 Indicates the operating system. The string format isn't specified yet. Value will be stored as first item of the array, as specified in PDF Signature Build Dictionary Specification for PDF v1.7. @param os is a string with the system id or name.
6555 If <b>SubFilter</b> is not null and the {@link #isSubFilterRequired()} indicates this entry is a required constraint, then the first matching encodings shall be used when signing; otherwise, signing shall not take place. If {@link #isSubFilterRequired()} indicates that this is an optional constraint, then the first matching encoding shall be used if it is available. If it is not available, a different encoding may be used instead. @return the subfilter that shall be used by the signature handler
6556 An array of names indicating acceptable digest algorithms to use when signing. The value shall be one of <b>SHA1</b>, <b>SHA256</b>, <b>SHA384</b>, <b>SHA512</b>, <b>RIPEMD160</b>. The default value is implementation-specific. @return the digest method that shall be used by the signature handler
6557 If the Reasons array is provided and {@link #isReasonRequired()} indicates that Reasons is a required constraint, one of the reasons in the array shall be used for the signature dictionary; otherwise signing shall not take place. If the {@link #isReasonRequired()} indicates Reasons is an optional constraint, one of the reasons in the array may be chose or a custom reason can be provided. @return the reasons that should be used by the signature handler
6558 (Optional, PDF 1.6) An array of text strings that specifying possible legal attestations. @return the reasons that should be used by the signature handler
6559 Returns list of byte arrays that contains DER-encoded X.509v3 certificates @return list of byte arrays containing DER-encoded X.509v3 certificates
6560 (Optional) byte array containing DER-encoded X.509v3 certificate that is acceptable for signing. works like {@link #setSubject(List)} but one byte array @param subject byte array containing DER-encoded X.509v3 certificate
6561 removes a subject from the list @param subject byte array containing DER-encoded X.509v3 certificate
6562 Returns list of key usages of certificate strings where each string is 9 characters long and each character is one of these values {0, 1, X} 0 for must not set, 1 for must set, X for don't care. each index in the string represents a key usage: <ol> <li>digitalSignature</li> <li>non-Repudiation</li> <li>keyEncipherment</li> <li>dataEncipherment</li> <li>keyAgreement</li> <li>keyCertSign</li> <li>cRLSign</li> <li>encipherOnly</li> <li>decipherOnly</li> </ol> @return list of key usages of certificate strings
6563 (Optional; PDF 1.7) specifies an acceptable key-usage extension that must be presennt in the signing certificate for works like {@link #setKeyUsage(List)} but takes only one string @param keyUsageExtension String that consist only of {0, 1, X}
6564 Removes a key usage extension @param keyUsageExtension ASCII string that consists of {0, 1, X}
6565 Returns list of array of bytes of DER-encoded X.509v3 certificates @return list of array of bytes of DER-encoded X.509v3 certificates
6566 array of bytes containing DER-encoded X.509v3 certificates of acceptable issuers. If the signer’s certificate chains up to any of the specified issuers (either directly or indirectly), the certificate is considered acceptable for signing. @param issuer A byte array containing DER-encoded X.509v3 certificate
6567 Removes an issuer from the issuers list @param issuer A byte array containing DER-encoded X.509v3 certificate
6568 Returns A list of array of bytes that contain Object Identifiers (OIDs) of the certificate policies that must be present in the signing certificate @return list of array of bytes that contain Object Identifiers of the certificate policies
6569 works like {@link #setOID(List)} but for one object @param oid Object Identifier of a certificate policy to be added
6570 removes an OID from the list @param oid Object Identifier of the certificate policy to be removed
6571 Read out the byterange from the file. @return an integer array with the byterange, or an empty array if there is none.
6572 Get the RGB text color of this node. Default is black and this method will never return null. @return The structure element of this node.
6573 Return the calculation order in which field values should be recalculated when the value of any field changes. (Read about "Trigger Events" in the PDF specification) @return field list. Note these objects may not be identical to PDField objects retrieved from other methods (depending on cache setting). The best strategy is to call {@link #getCOSObject()} to check for identity. The list is not backed by the /CO COSArray in the document.
6574 This will get the indices of the selected options - the 'I' key. <p> This is only needed if a choice field allows multiple selections and two different items have the same export value or more than one values is selected. </p> <p>The indices are zero-based</p> @return List containing the indices of all selected options.
6575 This will return the changes along the x-axis. @return changes along the x-axis
6576 This will return the changes along the y-axis. @return changes along the y-axis
6577 This will return the distances. @return distances
6578 This will return the areas. @return areas
6579 This will return the angles. @return angles
6580 This will return the sloaps of a line. @return the sloaps of a line
6581 This will return the origin of the coordinate system. @return the origin
6582 Get the visibility policy name. Valid names are AllOff, AllOn, AnyOff, AnyOn (default). @return the visibility policy, never null.
6583 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
6584 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The name converted to a string.
6585 Check if the cross reference stream can be found at the current offset. @param startXRefOffset the expected start offset of the XRef stream @return the revised offset @throws IOException if something went wrong
6586 Returns the page display mode. @return the PageMode of the document, if not present PageMode.USE_NONE is returned
6587 Returns the page layout. @return the PageLayout of the document, if not present PageLayout.SINGLE_PAGE is returned
6588 Returns the PDF specification version this document conforms to. @return the PDF version (e.g. "1.4")
6589 This will get the trapped value for the document. This will return null if one is not found. @return The trapped value for the document.
6590 Returns the numbering style for this page range. @return one of the STYLE_* constants
6591 Gets the type. @return the type
6592 Creates an attribute object. @param dictionary the dictionary @return the attribute object
6593 Returns the owner of the attributes. @return the owner of the attributes
6594 Returns the structure type (S). @return the structure type
6595 Creates a node in the structure tree. Can be either a structure tree root, or a structure element. @param node the node dictionary @return the structure node
6596 Returns the type. @return the type
6597 Returns the property name. @return the property name
6598 Gets the language (Lang). @return the language
6599 Gets the type (Type). @return the type
6600 Gets the subtype (Subtype). @return the subtype
6601 Get the name of the filter. @return The filter name contained in this encryption dictionary.
6602 Get the name of the subfilter. @return The subfilter name contained in this encryption dictionary.
6603 Create the correct FDFAnnotation. @param fdfDic The FDF dictionary. @return A newly created FDFAnnotation
6604 Get the intent of the annotation. @return The intent of the annotation.
6605 This will retrieve the line ending style. @return The ending style for the start point.
6606 This will get the version that was specified in the catalog dictionary. @return The FDF version.
6607 The encoding to be used for a FDF field. The default is PDFDocEncoding and this method will never return null. @return The encoding value.
6608 This will get the scale option. See the SCALE_OPTION_XXX constants. This is guaranteed to never return null. Default: Always @return The scale option.
6609 This will get the scale type. See the SCALE_TYPE_XXX constants. This is guaranteed to never return null. Default: Proportional @return The scale type.
6610 The PostScript name of the font. @return The postscript name of the font.
6611 This will always return "Font" for fonts. @return The type of object that this is.
6612 This will get the subtype of font. @return the subtype
6613 Get the font name. @return The name of the font.
6614 A string representing the preferred font stretch. According to the PDF Spec: The font stretch value; it must be one of the following (ordered from narrowest to widest): UltraCondensed, ExtraCondensed, Condensed, SemiCondensed, Normal, SemiExpanded, Expanded, ExtraExpanded or UltraExpanded. @return The stretch of the font.
6615 Returns the PostScript name of the font. @return the PostScript name of the font
6616 Returns the PostScript name of the font. @return the PostScript name of the font
6617 Returns the PostScript name of the font. @return the PostScript name of the font
6618 Returns the PostScript name of the font. @return the PostScript name of the font
6619 Returns true if this is an NChannel (PDF 1.6) color space. @return true if this is an NChannel color space.
6620 This will get the type of PDF object that the actions dictionary describes. If present must be Action for an action dictionary. @return The Type of PDF object.
6621 This will get the type of action that the actions dictionary describes. @return The S entry of actions dictionary.
6622 This will create the correct type of action based on the type specified in the dictionary. @param action An action dictionary. @return An action of the correct type.
6623 This will retrieve the subtype of the annotation. @return The subtype of this annotation, see the SUB_TYPE_XXX constants.
6624 This will retrieve the caption positioning. @return the caption positioning
6625 This will retrieve the intent of the annotation The values and meanings are specific to the actual annotation See the IT_* constants for the annotation classes. @return the intent
6626 returns the subtype of the external data dictionary. @return the subtype of the external data dictionary
6627 The name of the software module that was used to create the signature. @return the name of the software module
6628 If <b>Filter</b> is not null and the {@link #isFilterRequired()} indicates this entry is a required constraint, then the signature handler specified by this entry shall be used when signing; otherwise, signing shall not take place. If {@link #isFilterRequired()} indicates that this is an optional constraint, this handler may be used if it is available. If it is not available, a different handler may be used instead. @return the filter that shall be used by the signature handler
6629 A name indicating the usage of the URL entry. There are standard uses and there can be implementation-specific use for this URL. The following value specifies a valid standard usage: <ul> <li>Browser, The URL references content that should be displayed in a web browser to allow enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL bit is ignored for this usage.</li> <li>ASSP, The URL references a signature web service that can be used for server-based signing. If the Ff attribute’s URL bit indicates that this is a required constraint, this implies that the credential used when signing must come from this server.</li> </ul> @return string of URL type
6630 Returns the filter. @return the filter
6631 Returns the subfilter. @return the subfilter
6632 {@inheritDoc} <p><b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance.
6633 This will retrieve the name of the viewport. @return the name of the viewport
6634 Get the Duplex preference. See DUPLEX enumeration. @return the Duplex preference.
6635 This is a convenience method that will get the dictionary object that is expected to be a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
6636 This is a convenience method that will get the dictionary object that is expected to be a string. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
6637 Returns the language for the document, or null. @return the language of the document if present, otherwise null
6638 This will get the title of the document. This will return null if no title exists. @return The title of the document.
6639 This will get the author of the document. This will return null if no author exists. @return The author of the document.
6640 This will get the subject of the document. This will return null if no subject exists. @return The subject of the document.
6641 This will get the keywords of the document. This will return null if no keywords exists. @return The keywords of the document.
6642 This will get the creator of the document. This will return null if no creator exists. @return The creator of the document.
6643 This will get the producer of the document. This will return null if no producer exists. @return The producer of the document.
6644 Returns the page label prefix for this page range. @return the page label prefix for this page range, or {@code null} if no prefix has been defined.
6645 This will get the unicode file name. @return The file name.
6646 This will get the file name. @return The file name.
6647 This will get the name representing a Dos file. @return The file name.
6648 This will get the name representing a Mac file. @return The file name.
6649 This will get the name representing a Unix file. @return The file name.
6650 This will get the description. @return The file description.
6651 Returns the element identifier (ID). @return the element identifier
6652 Returns the title (T). @return the title
6653 Returns the language (Lang). @return the language
6654 Returns the alternate description (Alt). @return the alternate description
6655 Returns the expanded form (E). @return the expanded form
6656 Returns the actual text (ActualText). @return the actual text
6657 Returns the string for the property value. @return the string for the property value
6658 Gets the actual text (ActualText). @return the actual text
6659 Gets the alternate description (Alt). @return the alternate description
6660 Gets the expanded form (E). @return the expanded form
6661 Modification date. @return The date as a string.
6662 Get the annotation name. @return The unique name of the annotation.
6663 Get the text, or a description, of the annotation. @return The text, or a description, of the annotation.
6664 Get the annotation title. @return The title of the annotation.
6665 Get the description of the annotation. @return The subject of the annotation.
6666 This will retrieve the symbol that shall be associated with the caret. @return the symbol
6667 This will get the clockwise rotation in degrees. @return The number of degrees of clockwise rotation.
6668 Get the default appearance string. @return The default appearance of the annotation.
6669 Get the default style string. @return The default style of the annotation.
6670 This will retrieve the caption positioning. @return the caption positioning
6671 This will retrieve the annotation state. @return the annotation state
6672 This will retrieve the annotation state model. @return the annotation state model
6673 This will get the status string to be displayed as the result of an action. @return The status.
6674 This will get the target frame in the browser to open this document. @return The target frame.
6675 This will get the "T" entry in the field dictionary. A partial field name. Where the fully qualified field name is a concatenation of the parent's fully qualified field name and "." as a separator. For example<br> Address.State<br> Address.City<br> @return The partial field name.
6676 This will get the name of the referenced page. A required parameter. @return The name of the referenced page.
6677 A string representing the preferred font family. @return The font family.
6678 This will get the character set for the font. @return The character set value.
6679 Returns the name of the optional content group. @return the name
6680 Lists all optional content group names. @return an array of all names
6681 This will get the file name to be launched or the document to be opened or printed, in standard Windows pathname format. If the name string includes a backslash character (\), the backslash must itself be preceded by a backslash. This value must be a single string; it is not a file specification. @return The F entry of the specific Windows launch parameter dictionary.
6682 This will get the string specifying the default directory in standard DOS syntax. @return The D entry of the specific Windows launch parameter dictionary.
6683 This will get the string specifying the operation to perform: open to open a document print to print a document If the F entry designates an application instead of a document, this entry is ignored and the application is launched. Default value: open. @return The O entry of the specific Windows launch parameter dictionary.
6684 This will get a parameter string to be passed to the application designated by the F entry. This entry should be omitted if F designates a document. @return The P entry of the specific Windows launch parameter dictionary.
6685 This will get the uniform resource identifier to resolve. It should be encoded in 7-bit ASCII, but UTF-8 and UTF-16 are supported too. @return The URI entry of the specific URI action dictionary or null if there isn't any.
6686 Get the name of the file as found in the EmbeddedFiles name tree. This is only to be used if the target is a child of the current document. @return a filename or null if there is none.
6687 If the value in the /A entry is a string, this will get the value of the /NM entry in the annotation dictionary. @return the /NM value of an annotation dictionary or null if the /A entry value is missing or not a string.
6688 The file to launch. @return The executable/document to launch.
6689 The dir to launch from. @return The dir of the executable/document to launch.
6690 A parameter to pass the executable. @return The parameter to pass the executable.
6691 Get the "contents" of the field. @return the value of the contents.
6692 This will retrieve the date and time the annotation was modified. @return the modified date/time (often in date format, but can be an arbitrary string).
6693 This will get the name, a string intended to uniquely identify each annotation within a page. Not to be confused with some annotations Name entry which impact the default image drawn for them. @return The identifying name for the Annotation.
6694 Get the default appearance. @return a string describing the default appearance.
6695 Get the default style string. The default style string defines the default style for rich text fields. @return the DS element of the dictionary object
6696 Retrieve the string used as the title of the popup window shown when open and active (by convention this identifies who added the annotation). @return The title of the popup.
6697 This will retrieve the short description of the subject of the annotation. @return the subject.
6698 This will retrieve the annotation state. @return the annotation state
6699 This will retrieve the annotation state model. @return the annotation state model
6700 This will retrieve the normal caption. @return the normal caption.
6701 This will retrieve the rollover caption. @return the rollover caption.
6702 This will retrieve the alternate caption. @return the alternate caption.
6703 The build date of the software module. This string is normally produced by the compiler that is used to compile the software, for example using the Date and Time preprocessor flags. As such, this not likely to be in PDF Date format. @return the build date of the software module
6704 Indicates the operating system. The string format isn't specified yet. In its PDF Signature Build Dictionary Specifications Adobe differently specifies the value type to store operating system string:<ul> <li>Specification for PDF v1.5 specifies type as string;</li> <li>Specification for PDF v1.7 specifies type as array and provided example for <code>/PropBuild</code> dictionary indicate it as array of names.</li> </ul> This method supports both types to retrieve the value. @return the operating system id or name.
6705 Returns list of maps that contains subject distinguished names like [(cn: John Doe, o: Doe), (cn: John Smith)] both keys are typically of the form 'cn', 'o', 'email', '2.5.4.43'; and values are text strings. @return list maps that contains subject distinguished names
6706 returns String of the URL @return string of the URL
6707 Returns the URL. @return the URL
6708 Returns the name of the person or authority signing the document. According to the PDF specification, this value should be used only when it is not possible to extract the name from the signature. @return the name
6709 Returns the CPU host name or physical location of the signing. @return the location
6710 Returns the reason for the signing, such as (I agree...). @return the reason
6711 Returns the contact info provided by the signer to enable a recipient to contact the signer to verify the signature, e.g. a phone number. @return the contact info
6712 Get the title of this node. @return The title of this node.
6713 Returns the partial name of the field. @return the name of the field
6714 Gets the alternate name of the field ("shall be used in place of the actual field name wherever the field shall be identified in the user interface (such as in error or status messages referring to the field)"). @return the alternate name of the field
6715 Gets the mapping name of the field. The mapping name shall be used when exporting interactive form field data from the document. @return the mapping name of the field
6716 Get the default style string. The default style string defines the default style for rich text fields. @return the DS element of the dictionary object
6717 This will return the scale ration. @return the scale ratio.
6718 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary or if the date was invalid. @param key The key to the item in the dictionary. @return The name converted to a date.
6719 This is a convenience method that will get the dictionary object that is expected to be a date. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a date.
6720 This will get the creation date of the document. This will return null if no creation date exists. @return The creation date of the document.
6721 This will get the modification date of the document. This will return null if no modification date exists. @return The modification date of the document.
6722 The annotation create date. @return The date of the creation of the annotation date @throws IOException If there is an error converting the string to a Calendar object.
6723 This will retrieve the date and time the annotation was created. @return the creation date/time.
6724 Returns the sign date. @return the sign date
6725 This is a convenience method that will get the dictionary object that is expected to be an long. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The long value.
6726 This is a convenience method that will get the dictionary object that is expected to be an long. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The long value.
6727 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
6728 Decodes data, with optional DecodeOptions. Not all filters support all options, and so callers should check the options' <code>honored</code> flag to test if they were applied. @param encoded the input stream holding the encoded data @param filterList list of filters to be used for decoding @param parameters the parameters used for decoding @param options additional options for decoding @param results list of optional decoding results for each filter @return the decoded stream data @throws IOException if the stream cannot be decoded @throws IllegalArgumentException if filterList is empty
6729 Sets the byte position of the first XRef (has to be called after very last startxref was read). This is used to resolve chain of active XRef/trailer. In case startxref position is not found we output a warning and use all XRef/trailer objects combined in byte position order. Thus for incomplete PDF documents with missing startxref one could call this method with parameter value -1. @param startxrefBytePosValue starting position of the first XRef
6730 This is a convenience method that will get the dictionary object that is expected to be an float. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The float value.
6731 This is a convenience method that will get the dictionary object that is expected to be an float. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The float value.
6732 This is a convenience method that will get the dictionary object that is expected to be a float. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The float value.
6733 Get the user unit. This is a positive number that shall give the size of default user space units, in multiples of 1/72 inch, or 1 if it hasn't been set. This is supported by PDF 1.6 and higher. @return the user unit.
6734 Get the width of the of the guideline in default user space units. The default is 1. @return The width of the guideline.
6735 Get the opacity value. @return The opacity of the annotation.
6736 The weight of the font. According to the PDF spec "possible values are 100, 200, 300, 400, 500, 600, 700, 800 or 900" Where a higher number is more weight and appears to be more bold. @return The font weight.
6737 This will get the italic angle for the font. @return The italic angle.
6738 This will get the ascent for the font. @return The ascent.
6739 This will get the descent for the font. @return The descent.
6740 This will get the leading for the font. @return The leading.
6741 This will get the CapHeight for the font. @return The cap height.
6742 This will get the x height for the font. @return The x height.
6743 This will get the stemV for the font. @return The stem v value.
6744 This will get the stemH for the font. @return The stem h value.
6745 This will get the average width for the font. @return The average width value.
6746 This will get the max width for the font. @return The max width value.
6747 This will get the missing width for the font from the /MissingWidth dictionary entry. @return The missing width value, or 0 if there is no such dictionary entry.
6748 This will get the gamma value. If none is present then the default of 1 will be returned. @return The gamma value.
6749 This will return the XStep value. @return The XStep value
6750 This will return the YStep value. @return The YStep value
6751 Sets the volume. @return The volume at which to play the sound, in the range −1.0 to 1.0. Default value: 1.0.
6752 This will retrieve the length of the leader line. @return the length of the leader line
6753 This will retrieve the length of the leader line extensions. @return the length of the leader line extensions
6754 This will retrieve the length of the leader line offset. @return the length of the leader line offset
6755 This will retrieve the constant opacity value used when rendering the annotation (excluing any popup). @return the constant opacity value.
6756 This will retrieve the border width in points, 0 = no border. @return The width of the border in points.
6757 @return The duration in seconds of the transition effect or the default 1 if no duration is found.
6758 @return The starting or ending scale at which the changes shall be drawn or the default 1 if no scale is found. Only for {@link PDTransitionStyle#Fly}.
6759 Writes a single operator token. @param op The operator to write to the stream. @throws IOException If there is an error writing to the stream.
6760 Process the page to extract the region text. @param page The page to extract the regions from. @throws IOException If there is an error while extracting text.
6761 Returns the role map. @return the role map
6762 Appends an objectable kid. @param objectable the objectable
6763 Inserts an objectable kid before a reference kid. @param newKid the objectable @param refKid the reference kid
6764 Removes an objectable kid. @param objectable the objectable @return <code>true</code> if the kid was removed, <code>false</code> otherwise
6765 Sets the property value. @param value the property value
6766 Returns the group color space or null if it isn't defined. @return the group color space. @throws IOException if the colorspace could not be created
6767 Creates a property list from the given dictionary. @param dict COS dictionary @return a new instance of a PDPropertyList using the given dictionary
6768 This will get the line width. This will return null if there is no line width @return null or the LW value of the dictionary.
6769 This will get the miter limit. @return null or the ML value in the dictionary.
6770 This will get the flatness tolerance. @return The flatness tolerance or null if one has not been set.
6771 This will get the smothness tolerance. @return The smothness tolerance or null if one has not been set.
6772 This will get the stroking alpha constant. @return The stroking alpha constant or null if one has not been set.
6773 This will get the non stroking alpha constant. @return The non stroking alpha constant or null if one has not been set.
6774 Creates a Link annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
6775 Constructor. @param dict The annotations dictionary.
6776 Creates a popup annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
6777 Creates an arbitrary annotation from a COSDictionary, expected to be a correct object definition for some sort of annotation. @param dic The dictionary which represents this Annotation.
6778 Creates a PDWidget from a COSDictionary, expected to be a correct object definition for a field in PDF. @param field the PDF object to represent as a field.
6779 This will get the export values from the options. <p> For options with an array of text strings the display value and export value are the same.<br> For options with an array of two-element arrays the export value is the first entry in the two-element array. </p> @return List containing all export values.
6780 Returns the selected values, or an empty List. This list always contains a single item unless {@link #isMultiSelect()} is true. @return A non-null string.
6781 Returns the default values, or an empty List. This list always contains a single item unless {@link #isMultiSelect()} is true. @return A non-null string.
6782 This will write a COS object. @param obj The object to write. @throws IOException if the output cannot be written
6783 This method prepares and writes COS data to the object stream by selecting appropriate specialized methods for the content. @param output The stream, that shall be written to. @param object The content, that shall be written. @param topLevel True, if the currently written object is a top level entry of this object stream. @throws IOException Shall be thrown, when an exception occurred for the write operation.
6784 Creates a corner curl for polygons and ellipses.
6785 Draws an ellipse without a cloudy border effect.
6786 Default constructor.
6787 Set if this page destination should just fit the bounding box. The default is false. @param fitBoundingBox A flag indicating if this should fit the bounding box.
6788 Default constructor.
6789 Set the left x-coordinate, a value of -1 implies that the current x-coordinate will be used. @param x The left x coordinate.
6790 Set if this page destination should just fit the bounding box. The default is false. @param fitBoundingBox A flag indicating if this should fit the bounding box.
6791 Default constructor.
6792 Set the left x-coordinate, a value of -1 implies that the current x-coordinate will be used. @param x The left x coordinate.
6793 Set the bottom y-coordinate, a value of -1 implies that the current y-coordinate will be used. @param y The bottom y coordinate.
6794 Set the right x-coordinate, a value of -1 implies that the current x-coordinate will be used. @param x The right x coordinate.
6795 Set the top y-coordinate, a value of -1 implies that the current y-coordinate will be used. @param y The top ycoordinate.
6796 Default constructor.
6797 Set the top y-coordinate, a value of -1 implies that the current y-coordinate will be used. @param y The top ycoordinate.
6798 Set if this page destination should just fit the bounding box. The default is false. @param fitBoundingBox A flag indicating if this should fit the bounding box.
6799 Default constructor.
6800 Set the left x-coordinate, values 0 or -1 imply that the current x-coordinate will be used. @param x The left x coordinate.
6801 Set the top y-coordinate, values 0 or -1 imply that the current y-coordinate will be used. @param y The top ycoordinate.
6802 Set the zoom value for the page, values 0 or -1 imply that the current zoom will be used. @param zoom The zoom value.
6803 This will parse a PDF dictionary value. @return The parsed Dictionary object. @throws IOException If there is an error parsing the dictionary object.
6804 Resolve the bounding box. @param fieldWidget the annotation widget. @param appearanceStream the annotations appearance stream. @return the resolved boundingBox.
6805 This will decrypt a dictionary. @param dictionary The dictionary to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error creating a new string.
6806 Sets the bounding box. @param bbox the bounding box
6807 Sets a colour. @param name the attribute name @param value the colour
6808 Sets four colours. @param name the attribute name @param value the four colours
6809 Creates a new PDPage instance for embedding, with a size of U.S. Letter (8.5 x 11 inches).
6810 This will get the FDF dictionary. @return The FDF dictionary.
6811 Constructor, creates a new FDF document.
6812 This will get the FDF Catalog. This is guaranteed to not return null. @return The documents /Root dictionary
6813 This is guaranteed to never return null.<br> To quote the PDF Spec "An array of two numbers between 0.0 and 1.0 indicating the fraction of leftover space to allocate at the left and bottom of the icon. A value of [0.0 0.0] positions the icon at the bottom-left corner of the annotation rectangle; a value of [0.5 0.5] centers it within the rectangle. This entry is used only if the icon is scaled proportionally. Default value: [0.5 0.5]." @return The fractional space to allocate.
6814 Builds the CIDSet entry, required by PDF/A. This lists all CIDs in the font, including those that don't have a GID.
6815 Creates a new tiling pattern.
6816 Insert a single sibling before this node. @param newSibling The item to insert. @throws IllegalArgumentException if the given sibling node is part of a list (i.e. if it has a previous or a next sibling)
6817 Insert a single sibling after this node. @param newSibling The item to insert. @throws IllegalArgumentException if the given sibling node is part of a list (i.e. if it has a previous or a next sibling)
6818 This will set the first bead in the thread. When this is set it will also set the thread property of the bead object. @param bead The first bead in the thread.
6819 Default constructor.
6820 Sets the role map. @param roleMap the role map
6821 Sets a name value. @param name the attribute name @param value the name value
6822 This will set the rendering intent for the graphics state. @param ri The new rendering intent
6823 This will set the name of the action to be performed. @param name The name of the action to be performed.
6824 This will set the border effect, see the STYLE_* constants for valid values. @param s the border effect to use
6825 Creates an empty page label dictionary for the given document. <p> Note that the page label dictionary won't be automatically added to the document; you will still need to do it manually (see {@link org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)}. </p> @param document The document the page label dictionary is created for. @see org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)
6826 Constructor with required values. @param structureType The structure type. Constants are available in the {@link StandardStructureTypes} class. @param parent The parent structure node.
6827 Default Constructor.
6828 Creates a new shading pattern.
6829 Default constructor.
6830 Get the outline associated with this document or null if it does not exist. @return The document's outline.
6831 @return The parent of this node or null if there is no parent.
6832 Constructor.
6833 creates a new transition with default "replace" style {@link PDTransitionStyle#R}
6834 Set the value of a date entry in the dictionary. @param key The key to the date value. @param date The date value.
6835 Set the date object. @param embedded The embedded dictionary. @param key The key to the date. @param date The date to set.
6836 This will set the creation date of the document. @param date The new creation date for the document.
6837 This will set the modification date of the document. @param date The new modification date for the document.
6838 Set the creation date. @param date The date the annotation was created.
6839 This will set the date and time the annotation was modified. @param c the date and time the annotation was created.
6840 This will set the date and time the annotation was created. @param creationDate the date and time the annotation was created.
6841 Set the sign date. @param cal the date to be used as sign date
6842 Set the custom metadata value. @param fieldName The name of the custom metadata field. @param fieldValue The value to the custom metadata field.
6843 Sets a string attribute value. @param name the attribute name @param value the string attribute value
6844 This will set the base URI to be used in resolving relative URI references. URI actions within the document may specify URIs in partial form, to be interpreted relative to this base address. If no base URI is specified, such partial URIs will be interpreted relative to the location of the document itself. The use of this entry is parallel to that of the body element &lt;BASE&gt;, as described in the HTML 4.01 Specification. @param base The base URI to be used.
6845 A text string indicating the version of the application implementation, as described by the <code>Name</code> attribute in this dictionary. When set by Adobe Acrobat, this entry is in the format: major.minor.micro (for example 7.0.7). <p> NOTE: Version value is specific for build data dictionary when used as the <code>App</code> dictionary in a build properties dictionary. </p> @param applicationVersion the application implementation version
6846 This will set the label for the units. @param units the label for the units
6847 This will set the value for the manner to display a fractional value. Allowed values are "D", "F", "R", "T" and null. @param fractionalDisplay the manner to display a fractional value
6848 This will set the text to be used between orders of thousands in display of numerical values. @param thousandsSeparator thousands separator
6849 This will set the text to be used as the decimal point in displaying numerical values. @param decimalSeparator decimal separator
6850 This will set the text to be concatenated to the left of the label specified by U. @param labelPrefixString label prefix
6851 This will set the text to be concatenated after the label specified by U. @param labelSuffixString label suffix
6852 This will set the value indicating the ordering of the label specified by U to the calculated unit value. Possible values are "S", "P" and null. @param labelPositionToValue label position
6853 This will create an FDF field from an XFDF XML document. @param fieldXML The XML document that contains the XFDF data. @throws IOException If there is an error reading from the dom.
6854 Creates a new optional content group (OCG). @param name the name of the content group
6855 Sets an integer. @param name the attribute name @param value the integer
6856 Sets an integer number. @param name the attribute name @param value the integer number
6857 This will set the precision or denominator of a fractional amount. @param denominator the precision or denominator
6858 Creates a new CCITT group 4 (T6) compressed image XObject from a b/w BufferedImage. This compression technique usually results in smaller images than those produced by {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) }. @param document the document to create the image as part of. @param image the image. @return a new image XObject. @throws IOException if there is an error creating the image. @throws IllegalArgumentException if the BufferedImage is not a b/w image.
6859 Set the number of bits per component. @param bitsPerComponent the number of bits per component
6860 Set the number of bits per component. @param bitsPerComponent the number of bits per component
6861 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
6862 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
6863 Sets a float number. @param name the attribute name @param value the float number
6864 This will set the intensity of the applied effect. @param i the intensity of the effect values 0 to 2
6865 This will set the conversion factor. @param conversionFactor the conversion factor
6866 This will get the file specification for this stream. This is only required for external files. @return The file specification. @throws IOException If there is an error creating the file spec.
6867 The source file or target file: the PDF document file that this FDF file was exported from or is intended to be imported into. @return The F entry of the FDF dictionary. @throws IOException If there is an error creating the file spec.
6868 This will get the list of embedded FDF entries, or null if the entry is null. This will return a list of PDFileSpecification objects. @return A list of embedded FDF files. @throws IOException If there is an error creating the file spec.
6869 This will get the file specification of this reference. An optional parameter. @return The F entry for this dictionary. @throws IOException If there is an error creating the file spec.
6870 This will get the file in which the destination is located. @return The F entry of the specific embedded go-to action dictionary. @throws IOException If there is an error creating the file spec.
6871 This will get the file in which the destination is located. @return The F entry of the specific Submit-From action dictionary. @throws IOException If there is an error creating the file spec.
6872 This will get the application to be launched or the document to be opened or printed. It is required if none of the entries Win, Mac or Unix is present. If this entry is absent and the viewer application does not understand any of the alternative entries it should do nothing. @return The F entry of the specific launch action dictionary. @throws IOException If there is an error creating the file spec.
6873 This will get the file in which the destination is located. @return The F entry of the specific remote go-to action dictionary. @throws IOException If there is an error creating the file spec.
6874 This will get the file in which the destination is located. @return The F entry of the specific Submit-From action dictionary. @throws IOException If there is an error creating the file spec.
6875 This will get the file in which the destination is located. @return The F entry of the specific thread action dictionary. @throws IOException If there is an error creating the file spec.
6876 Return the attached file. @return The attached file. @throws IOException If there is an error creating the file spec.
6877 Default constructor.
6878 Default constructor.
6879 Default constructor.
6880 Default constructor.
6881 Constructor.
6882 Constructor.
6883 Constructor.
6884 Constructor.
6885 Constructor.
6886 Constructor.
6887 Creates a Circle or Square annotation of the specified sub type. @param subType the subtype the annotation represents.
6888 Constructor.
6889 Creates a TextMarkup annotation of the specified sub type. @param subType the subtype the annotation represents
6890 Gets the artifact's bounding box (BBox). @return the artifact's bounding box
6891 Gets the bounding box. @return the bounding box.
6892 The rectangle associated with this annotation. @return The annotation rectangle.
6893 This will retrieve the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. @return the rectangle difference
6894 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
6895 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
6896 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
6897 This will get the fonts bounding box. @return The fonts bounding box.
6898 This will get the fonts bounding box from its dictionary. @return The fonts bounding box.
6899 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the form XObject's bounding box. These boundaries are used to clip the form XObject and to determine its size for caching. @return The BBox of the form.
6900 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the pattern's bounding box. @return The BBox of the pattern.
6901 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the shading's bounding box. @return the BBox of the form
6902 The annotation rectangle, defining the location of the annotation on the page in default user space units. This is usually required and should not return null on valid PDF documents. But where this is a parent form field with children, such as radio button collections then the rectangle will be null. @return The Rect value of this annotation.
6903 This will get the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
6904 This will get the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
6905 This will retrieve the rectangle specifying the location of the viewport. @return the location
6906 The rectangle on the page that this bead is part of. @return The part of the page that this bead covers.
6907 @param array dash array @param phase dash phase
6908 Get the line dash pattern for this box style. This is guaranteed to not return null. The default is [3],0. @return The line dash pattern.
6909 This will get the dash pattern. @return null or the D value in the dictionary.
6910 This will retrieve the dash style used for drawing the border. @return the dash style of the border
6911 Returns an ARGB image filled with the given paint and using the given image as a mask. @param paint the paint to fill the visible portions of the image with @return a masked image filled with the given paint @throws IOException if the image cannot be read @throws IllegalStateException if the image is not a stencil.
6912 This will get the optional matrix of an XObjectForm. It maps the form space to user space. @return the form matrix if available, or the identity matrix.
6913 Returns the pattern matrix, or the identity matrix is none is available. @return the pattern matrix
6914 This will get the optional Matrix of a function based shading. @return the matrix
6915 Sets an attribute. @param attrName the attribute name @param attrValue the attribute value
6916 Returns the given attribute, inheriting from parent tree nodes if necessary. @param node page object @param key the key to look up @return COS value for the given key
6917 This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert it to a primitive boolean. @param key The key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The entry converted to a boolean.
6918 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the defaultvalue will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
6919 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value -1 will be returned. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @return The integer value.
6920 Creates an inline image from the given parameters and data. @param parameters the image parameters @param data the image data @param resources the current resources @throws IOException if the stream cannot be decoded
6921 Returns the suffix for this image type, e.g. jpg/png. @return The image suffix.
6922 This will get all dictionaries objects by type. @param type1 The first possible type of the object, mandatory. @param type2 The second possible type of the object, usually an abbreviation, optional. @return This will return all objects with the specified type(s).
6923 Brute force search for all trailer marker. @param trailer dictionary to be used as trailer dictionary @throws IOException if something went wrong
6924 Search for the different parts of the trailer dictionary. @param trailer dictionary to be used as trailer dictionary @return true if the root was found, false if not. @throws IOException if something went wrong
6925 Returns all pages in the document, as a page tree. @return PDPageTree providing all pages of the document
6926 Constructor for reading. @param root A page tree root.
6927 Returns the Unicode character sequence which corresponds to the given character code. @param code character code @param customGlyphList a custom glyph list to use instead of the Adobe Glyph List @return Unicode character(s)
6928 Returns the G entry of the soft mask object @return form containing the transparency group @throws IOException if the group could not be read
6929 Set the mac subtype. @param macSubtype The mac subtype.
6930 Set the mac Creator. @param macCreator The mac Creator.
6931 Set the mac ResFork. @param macResFork The mac ResFork.
6932 This will tell if this document is encrypted or not. @return true If this document is encrypted.
6933 This will parse the stream and populate the FDFDocument object. @return the parsed FDFDocument @throws IOException If there is an error reading from the stream or corrupt data is found.
6934 This will parse the stream and populate the PDDocument object. This will close the keystore stream when it is done parsing. @param lenient activate leniency if set to true @return the populated PDDocument @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error reading from the stream or corrupt data is found.
6935 Get the documents AcroForm. This will return null if no AcroForm is part of the document. @return The document's AcroForm.
6936 Find the page destination from a named destination. @param namedDest the named destination. @return a PDPageDestination object or null if not found. @throws IOException if there is an error creating the PDPageDestination object.
6937 Returns the color space resource with the given name, or null if none exists. This method is for PDFBox internal use only, others should use {@link #getColorSpace(COSName)}. @param name Name of the color space resource. @param wasDefault if current color space was used by a default color space. This parameter is to @return a new color space. @throws IOException if something went wrong.
6938 Returns true if the given color space name exists in these resources. @param name Name of the color space resource. @return true if the given color space name exists in these resources, otherwise false
6939 Returns the extended graphics state resource with the given name, or null if none exists. @param name Name of the graphics state resource. @return the extended graphics state with the given name or null
6940 Tells whether the XObject resource with the given name is an image. @param name Name of the XObject resource. @return true if it is an image XObject, false if not.
6941 Returns the names of the color space resources, if any. @return an iterable containing all names of available colorspaces
6942 Returns the names of the XObject resources, if any. @return an iterable containing all names of available xobjects
6943 Returns the names of the font resources, if any. @return an iterable containing all names of available fonts
6944 Returns the names of the property list resources, if any. @return an iterable containing all names of available property lists
6945 Returns the names of the shading resources, if any. @return an iterable containing all names of available shadings
6946 Returns the names of the pattern resources, if any. @return an iterable containing all names of available patterns
6947 Returns the names of the extended graphics state resources, if any. @return an iterable containing all names of available extended graphics states
6948 Adds the given resource if it does not already exist.
6949 Sets the font resource with the given name. @param name the name of the resource @param font the font to be added
6950 Sets the color space resource with the given name. @param name the name of the resource @param colorSpace the color space to be added
6951 Sets the extended graphics state resource with the given name. @param name the name of the resource @param extGState the extended graphics state to be added
6952 Sets the shading resource with the given name. @param name the name of the resource @param shading the shading to be added
6953 Sets the pattern resource with the given name. @param name the name of the resource @param pattern the pattern to be added
6954 Sets the property list resource with the given name. @param name the name of the resource @param properties the property list to be added
6955 Sets the XObject resource with the given name. @param name the name of the resource @param xobject the XObject to be added
6956 Set the embedded file for this spec. You should also call {@link #setEmbeddedFileUnicode(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile) setEmbeddedFileUnicode(PDEmbeddedFile)} for cross-platform and cross-language compatibility. @param file The file to be embedded.
6957 Set the embedded Unicode file for this spec. If you call this, then do not forget to also call {@link #setEmbeddedFile(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile) setEmbeddedFile(PDEmbeddedFile)} or the attachment will not be visible on some viewers. @param file The Unicode file to be embedded.
6958 Returns the standard crypt filter. @return the standard crypt filter if available.
6959 Returns the default crypt filter (for public-key security handler). @return the default crypt filter if available.
6960 Sets the standard crypt filter. @param cryptFilterDictionary the standard crypt filter to set
6961 Sets the default crypt filter (for public-key security handler). @param defaultFilterDictionary the standard crypt filter to set
6962 Returns the stream of the glyph for the given character code @param code character code @return the stream to be used to render the glyph
6963 Returns the base state for optional content groups. @return the base state
6964 Sets the base state for optional content groups. @param state the base state
6965 Enables or disables an optional content group. @param group the group object @param enable true to enable, false to disable @return true if the group already had an on or off setting, false otherwise
6966 Create a new tiling pattern content stream. @param pattern The tiling pattern stream to write to. @throws IOException If there is an error writing to the form contents.
6967 Get the annotations appearance dictionary. <p> This will get the annotations appearance dictionary. If this is not existent an empty appearance dictionary will be created. @return the annotations appearance dictionary
6968 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". If there is no rollover appearance then the normal appearance will be returned. Which means that this method will never return null. @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
6969 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". If there is no rollover appearance then the normal appearance will be returned. Which means that this method will never return null. @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
6970 @return The first child or null if there is no child.
6971 @return The last child or null if there is no child.
6972 Get the signature dictionary. @return the signature dictionary
6973 Append a bead after this bead. This will correctly set the next/previous beads in the linked list. @param append The bead to insert.
6974 Returns the appearance stream for this annotation, if any. The annotation state is taken into account, if present. @return the appearance stream
6975 Get the value which sets the check box to the On state. <p>The On value should be 'Yes' but other values are possible so we need to look for that. On the other hand the Off value shall always be 'Off'. If not set or not part of the normal appearance keys 'Off' is the default</p> @return the value setting the check box to the On state. If an empty string is returned there is no appearance definition.
6976 Check if all entries of the pages dictionary are present. Those which can't be dereferenced are removed. @param root the root dictionary of the pdf @throws java.io.IOException if the page tree root is null
6977 The name to retrieve. @param name The name in the tree. @return The value of the name in the tree. @throws IOException If there is a problem creating the destinations.
6978 Returns the value corresponding to an index in the number tree. @param index The index in the number tree. @return The value corresponding to the index. @throws IOException If there is a problem creating the values.
6979 Set the children of this number tree. @param kids The children of this number tree. These have to be in sorted order. Because of that, it is usually easier to call {@link #setNumbers(Map)} with a map and pass a single element list here.
6980 Set the numbers for this node. This method will set the appropriate upper and lower limits based on the keys in the map and take care of the ordering. @param numbers The map of numbers to objects, or <code>null</code> for nothing.
6981 This will get the number of output parameters that have a range specified. A range for output parameters is optional so this may return zero for a function that does have output parameters, this will simply return the number that have the range specified. @return The number of output parameters that have a range specified.
6982 This will get the range for a certain output parameters. This is will never return null. If it is not present then the range 0 to 0 will be returned. @param n The output parameter number to get the range for. @return The range for this component.
6983 Clip the given input values to the ranges. @param inputValues the input values @return the clipped values
6984 This will get the number of input parameters that have a domain specified. @return The number of input parameters that have a domain specified.
6985 This will get the range for a certain input parameter. This is will never return null. If it is not present then the range 0 to 0 will be returned. @param n The parameter number to get the domain for. @return The domain range for this component.
6986 calculate array index (structure described in p.171 PDF spec 1.7) in multiple dimensions. @param vector with coordinates @return index in flat array
6987 Returns all encode values as COSArray. @return the encode array.
6988 Get the decode for the input parameter. @param paramNum The function parameter number. @return The decode parameter range or null if none is set.
6989 Get the encode for the input parameter. @param n The function parameter number. @return The encode parameter range or null if none is set.
6990 Is the artifact attached to the top edge? @return <code>true</code> if the artifact is attached to the top edge, <code>false</code> otherwise
6991 Is the artifact attached to the bottom edge? @return <code>true</code> if the artifact is attached to the bottom edge, <code>false</code> otherwise
6992 Is the artifact attached to the left edge? @return <code>true</code> if the artifact is attached to the left edge, <code>false</code> otherwise
6993 Is the artifact attached to the right edge? @return <code>true</code> if the artifact is attached to the right edge, <code>false</code> otherwise
6994 Constructor. @param fontDictionary The font dictionary according to the PDF specification.
6995 Creates a new DictionaryEncoding for embedding. @param baseEncoding the base encoding of this encoding @param differences the differences of this encoding with regard to the base encoding
6996 Creates a new DictionaryEncoding for a Type 3 font from a PDF. @param fontEncoding The Type 3 encoding dictionary.
6997 Creates a new DictionaryEncoding from a PDF. @param fontEncoding The encoding dictionary. @param isNonSymbolic True if the font is non-symbolic. False for Type 3 fonts. @param builtIn The font's built-in encoding. Null for Type 3 fonts.
6998 Creates a new CalRGB color space using the given COS array. @param rgb the cos array which represents this color space
6999 This will set the a range for the "a" component. @param range the new range for the "a" component, or null if defaults (-100..100) are to be set.
7000 This will set the "b" range for this color space. @param range the new range for the "b" component, or null if defaults (-100..100) are to be set.
7001 Returns the first optional content group of the given name. @param name the group name @return the optional content group or null, if there is no such group
7002 Adds an optional content group (OCG). @param ocg the optional content group
7003 Returns the collection of all optional content groups. @return the optional content groups
7004 Constructor. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws java.io.IOException if there is an error getting the color space or doing background color conversion.
7005 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
7006 This will retrieve the color used in drawing various elements. As of PDF 1.6 these are : <ul> <li>Background of icon when closed</li> <li>Title bar of popup window</li> <li>Border of a link annotation</li> </ul> @return Color object representing the colour
7007 This will retrieve the border color. @return the border color.
7008 This will retrieve the background color. @return the background color.
7009 works like {@link #addKeyUsage(String)} but enters each character separately @param digitalSignature char that is one of {0, 1, X} @param nonRepudiation char that is one of {0, 1, X} @param keyEncipherment char that is one of {0, 1, X} @param dataEncipherment char that is one of {0, 1, X} @param keyAgreement char that is one of {0, 1, X} @param keyCertSign char that is one of {0, 1, X} @param cRLSign char that is one of {0, 1, X} @param encipherOnly char that is one of {0, 1, X} @param decipherOnly char that is one of {0, 1, X}
7010 Will return the embedded signature between the byterange gap. @param pdfFile The signed pdf file as InputStream. It will be closed in this method. @return a byte array containing the signature @throws IOException if the pdfFile can't be read @throws IndexOutOfBoundsException if the byterange array is not long enough
7011 Will return the embedded signature between the byterange gap. @param pdfFile The signed pdf file as byte array @return a byte array containing the signature @throws IOException if the pdfFile can't be read @throws IndexOutOfBoundsException if the byterange array is not long enough
7012 Return the signed content of the document. This is not a PDF file, nor is it the PDF file before signing, it is the byte sequence made of the input minus the area where the signature bytes will be. See "The ByteRange and signature value" in the document <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5">Digital Signatures in a PDF</a>. @param pdfFile The signed pdf file as InputStream. It will be closed in this method. @return a byte array containing only the signed part of the content @throws IOException if the pdfFile can't be read
7013 Return the signed content of the document. This is not a PDF file, nor is it the PDF file before signing, it is the byte sequence made of the input minus the area where the signature bytes will be. See "The ByteRange and signature value" in the document <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5">Digital Signatures in a PDF</a>. @param pdfFile The signed pdf file as byte array @return a byte array containing only the signed part of the content @throws IOException if the pdfFile can't be read
7014 Gets a name value. @param name the attribute name @return the name value
7015 This will get the rendering intent. @return null or the RI value in the dictionary.
7016 This will get the name of the action to be performed. @return The name of the action to be performed.
7017 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The name converted to a string.
7018 Get the style for the guideline. The default is "S" for solid. @return The guideline style. @see PDBoxStyle#GUIDELINE_STYLE_DASHED @see PDBoxStyle#GUIDELINE_STYLE_SOLID
7019 This will retrieve the icon (and hence appearance, AP taking precedence) For this annotation. The default is NOTE. @return The name of this annotation, see the PDAnnotationText.NAME_XXX constants.
7020 This is the name used to draw the type of attachment. See the ATTACHMENT_NAME_XXX constants. @return The name that describes the visual cue for the attachment.
7021 This will retrieve the line ending style. @return The line ending style, possible values shown in the LE_ constants section, LE_NONE if missing, never null.
7022 Set the highlight mode for when the mouse is depressed. See the HIGHLIGHT_MODE_XXX constants. @return The string representation of the highlight mode.
7023 This will retrieve the Reply Type (relationship) with the annotation in the IRT entry See the RT_* constants for the available values. @return the relationship.
7024 This will retrieve the name (and hence appearance, AP taking precedence) For this annotation. The default is DRAFT. @return The name of this rubber stamp, see the NAME_XXX constants.
7025 This will retrieve the name (and hence appearance, AP taking precedence) For this annotation. The default is NOTE. @return The name of this annotation, see the NAME_XXX constants.
7026 Returns the highlighting mode. Default value: <code>I</code> <dl> <dt><code>N</code></dt> <dd>(None) No highlighting.</dd> <dt><code>I</code></dt> <dd>(Invert) Invert the contents of the annotation rectangle.</dd> <dt><code>O</code></dt> <dd>(Outline) Invert the annotation's border.</dd> <dt><code>P</code></dt> <dd>(Push) Display the annotation's down appearance, if any. If no down appearance is defined, the contents of the annotation rectangle shall be offset to appear as if it were pushed below the surface of the page</dd> <dt><code>T</code></dt> <dd>(Toggle) Same as <code>P</code> (which is preferred).</dd> </dl> @return the highlighting mode
7027 This will retrieve the border style, see the STYLE_* constants for valid values. @return the style of the border
7028 returns the type of the external data dictionary. It must be "ExData", if present @return the type of the external data dictionary
7029 @return the style for this transition @see PDTransitionStyle#valueOf(String)
7030 @return The dimension in which the specified transition effect shall occur or the default {@link PDTransitionDimension#H} if no dimension is found. @see PDTransitionDimension
7031 @return The direction of motion for the specified transition effect or the default {@link PDTransitionMotion#I} if no motion is found. @see PDTransitionMotion
7032 Get the non full screen page mode preference. @return the non full screen page mode preference.
7033 Get the reading direction preference. @return the reading direction preference.
7034 Get the ViewArea preference. See BOUNDARY enumeration. @return the ViewArea preference.
7035 Get the ViewClip preference. See BOUNDARY enumeration. @return the ViewClip preference.
7036 Get the PrintArea preference. See BOUNDARY enumeration. @return the PrintArea preference.
7037 Get the PrintClip preference. See BOUNDARY enumeration. @return the PrintClip preference.
7038 Get the PrintScaling preference. See PRINT_SCALING enumeration. @return the PrintScaling preference.
7039 Check if the cross reference table/stream can be found at the current offset. @param startXRefOffset @return the revised offset @throws IOException
7040 Returns the PDF specification version this document conforms to. @return the PDF version (e.g. 1.4f)
7041 Returns the attributes together with their revision numbers (A). @return the attributes as a list, never null.
7042 Detects whether there are no properties in the attribute object. @return <code>true</code> if the attribute object is empty, <code>false</code> otherwise
7043 Returns the parent in the structure hierarchy (P). @return the parent in the structure hierarchy
7044 Creates an object for a kid of this structure node. The type of object depends on the type of the kid. It can be <ul> <li>a {@link PDStructureElement},</li> <li>a {@link PDObjectReference},</li> <li>a {@link PDMarkedContentReference},</li> <li>an {@link Integer}</li> </ul> @param kid the kid @return the object
7045 Sets the property name. @param name the property name
7046 creates a new encryption dictionary from the low level dictionary provided. @param dictionary a COS encryption dictionary
7047 Returns the security handler specified in the dictionary's Filter entry. @return a security handler instance @throws IOException if there is no security handler available which matches the Filter
7048 This will get the list of FDF Annotations. This will return a list of FDFAnnotation objects or null if the entry is not set. @return A list of FDF annotations. @throws IOException If there is an error creating the annotation list.
7049 Returns true if the character set described by CIDSystemInfo is present in the given font. Only applies to Adobe-GB1, Adobe-CNS1, Adobe-Japan1, Adobe-Korea1, as per the PDF spec.
7050 Returns true if this color space has the NChannel subtype. @return true if subtype is NChannel
7051 Get the Document Open Action for this object. @return The action to perform when the document is opened. @throws IOException If there is an error creating the destination or action.
7052 This will get the action that is associated with this field. @return The 'A' entry in the FDF field dictionary.
7053 Returns the dictionary's "Doc" entry, that is, a map of key value pairs to be added to the document's JavaScript name tree. @return Map of named "JavaScript" dictionaries.
7054 This will get the next action, or sequence of actions, to be performed after this one. The value is either a single action dictionary or an array of action dictionaries to be performed in order. @return The Next action or sequence of actions.
7055 Get the F action. @return The F action.
7056 This will get an action to be performed when the cursor enters the annotation's active area. @return The E entry of annotation's additional actions dictionary.
7057 This will get an action to be performed when the cursor exits the annotation's active area. @return The X entry of annotation's additional actions dictionary.
7058 This will get an action to be performed when the mouse button is pressed inside the annotation's active area. The name D stands for "down". @return The d entry of annotation's additional actions dictionary.
7059 This will get an action to be performed when the mouse button is released inside the annotation's active area. The name U stands for "up". @return The U entry of annotation's additional actions dictionary.
7060 This will get an action to be performed when the annotation receives the input focus. @return The Fo entry of annotation's additional actions dictionary.
7061 This will get an action to be performed when the annotation loses the input focus. The name Bl stands for "blurred". @return The Bl entry of annotation's additional actions dictionary.
7062 This will get an action to be performed when the page containing the annotation is opened. The action is executed after the O action in the page's additional actions dictionary and the OpenAction entry in the document catalog, if such actions are present. @return The PO entry of annotation's additional actions dictionary.
7063 This will get an action to be performed when the page containing the annotation is closed. The action is executed before the C action in the page's additional actions dictionary, if present. @return The PC entry of annotation's additional actions dictionary.
7064 This will get an action to be performed when the page containing the annotation becomes visible in the viewer application's user interface. @return The PV entry of annotation's additional actions dictionary.
7065 This will get an action to be performed when the page containing the annotation is no longer visible in the viewer application's user interface. @return The PI entry of annotation's additional actions dictionary.
7066 This will get a JavaScript action to be performed before closing a document. The name WC stands for "will close". @return The WC entry of document catalog's additional actions dictionary.
7067 This will get a JavaScript action to be performed before saving a document. The name WS stands for "will save". @return The WS entry of document catalog's additional actions dictionary.
7068 This will get a JavaScript action to be performed after saving a document. The name DS stands for "did save". @return The DS entry of document catalog's additional actions dictionary.
7069 This will get a JavaScript action to be performed before printing a document. The name WP stands for "will print". @return The WP entry of document catalog's additional actions dictionary.
7070 This will get a JavaScript action to be performed after printing a document. The name DP stands for "did print". @return The DP entry of document catalog's additional actions dictionary.
7071 This will get a JavaScript action to be performed when the user types a keystroke into a text field or combo box or modifies the selection in a scrollable list box. This allows the keystroke to be checked for validity and rejected or modified. @return The K entry of form field's additional actions dictionary.
7072 This will get a JavaScript action to be performed before the field is formatted to display its current value. This allows the field's value to be modified before formatting. @return The F entry of form field's additional actions dictionary.
7073 This will get a JavaScript action to be performed when the field's value is changed. This allows the new value to be checked for validity. The name V stands for "validate". @return The V entry of form field's additional actions dictionary.
7074 This will get a JavaScript action to be performed in order to recalculate the value of this field when that of another field changes. The order in which the document's fields are recalculated is defined by the CO entry in the interactive form dictionary. The name C stands for "calculate". @return The C entry of form field's additional actions dictionary.
7075 This will get an action to be performed when the page is opened. This action is independent of any that may be defined by the OpenAction entry in the document catalog, and is executed after such an action. @return The O entry of page object's additional actions dictionary.
7076 This will get an action to be performed when the page is closed. This action applies to the page being closed, and is executed before any other page opened. @return The C entry of page object's additional actions dictionary.
7077 Get the action to be performed when this annotation is to be activated. Either this or the destination entry should be set, but not both. @return The action to be performed when this annotation is activated.
7078 Get the action to be performed when this annotation is to be activated. @return The action to be performed when this annotation is activated.
7079 Get the action of this node. @return The action of this node.
7080 Return the properties String value. <p> Allows to retrieve the low level date for validation purposes. </p> @param propertyKey the dictionaries key @return the properties value
7081 This will get the value of a custom metadata information field for the document. This will return null if one is not found. @param fieldName Name of custom metadata field from pdf document. @return String Value of metadata field
7082 Gets a string attribute value. @param name the attribute name @return the string attribute value
7083 This will get the base URI to be used in resolving relative URI references. URI actions within the document may specify URIs in partial form, to be interpreted relative to this base address. If no base URI is specified, such partial URIs will be interpreted relative to the location of the document itself. The use of this entry is parallel to that of the body element &lt;BASE&gt;, as described in the HTML 4.01 Specification. @return The URI entry of the specific URI dictionary.
7084 A text string indicating the version of the application implementation, as described by the <code>/Name</code> attribute in this dictionary. When set by Adobe Acrobat, this entry is in the format: major.minor.micro (for example 7.0.7). @return the application implementation version
7085 This will return the label for the units. @return the label for the units
7086 This is a convenience method that will get the dictionary object that is expected to be a string. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
7087 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param embedded The embedded dictionary. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
7088 Get the operation to perform on the file. This method will not return null, OPERATION_OPEN is the default. @return The operation to perform for the file. @see PDWindowsLaunchParams#OPERATION_OPEN @see PDWindowsLaunchParams#OPERATION_PRINT
7089 Get the default appearance. @return the DA element of the dictionary object
7090 <p>Preferred method for getting the filename. It will determinate the recommended file name.</p> <p>First of all we try to get the unicode filename if it exist. If it doesn't exist we take a look at the DOS, MAC UNIX filenames. If no one exist the required F entry will be returned.</p> @return The preferred file name.
7091 Sets the string for the property value. @param formattedValue the string for the property value
7092 Indicates whether a particular optional content group is found in the PDF file. @param groupName the group name @return true if the group exists, false otherwise
7093 Returns the fully qualified name of the field, which is a concatenation of the names of all the parents fields. @return the name of the field
7094 This is a convenience method that will get the dictionary object that is expected to be a date. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a date.
7095 This is a convenience method that will get the dictionary object that is expected to be a date. @param embedded The embedded dictionary to get. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a string.
7096 The software module revision number, corresponding to the Date attribute. @return the revision of the software module
7097 The software module revision number, used to determinate the minimum version of software that is required in order to process this signature. <p> NOTE: this entry is deprecated for PDF v1.7 </p> @return the revision of the software module
7098 Creates a new COSInputStream from an encoded input stream. @param filters Filters to be applied. @param parameters Filter parameters. @param in Encoded input stream. @param options decode options for the encoded stream @return Decoded stream. @throws IOException If the stream could not be read.
7099 Returns a new RandomAccessRead which reads the decoded stream data. @return RandomAccessRead containing decoded stream data. @throws IOException If the stream could not be read.
7100 This will get a stream with some filters applied but not others. This is useful when doing images, ie filters = [flate,dct], we want to remove flate but leave dct @param stopFilters A list of filters to stop decoding at. @return A stream with decoded data. @throws IOException If there is an error processing the stream.
7101 Gets a number value. @param name the attribute name @return the number value
7102 This will return the conversion factor. @return the conversion factor
7103 Constructor. @param function The function.
7104 This will retrieve the length of the leader line. @return the length of the leader line
7105 This will retrieve the length of the leader line extensions. @return the length of the leader line extensions
7106 This will retrieve the length of the leader line offset. @return the length of the leader line offset
7107 The minimum required capability of the signature field seed value dictionary parser. A value of 1 specifies that the parser shall be able to recognize all seed value dictionary entries in a PDF 1.5 file. A value of 2 specifies that it shall be able to recognize all seed value dictionary entries specified. @return the minimum required capability of the signature field seed value dictionary parser
7108 This will return the CYX factor. @return CYX factor
7109 Gets a number value. @param name the attribute name @param defaultValue the default value @return the number value
7110 This will retrieve the intensity of the applied effect. @return the intensity value 0 to 2
7111 Compute the font height. Override this if you want to use own calculations. @param font the font. @return the font height. @throws IOException if there is an error while getting the font bounding box.
7112 This will write out the list of tokens to the stream. @param tokens The tokens to write to the stream. @throws IOException If there is an error writing to the stream.
7113 Get the list of decode parameters. Each entry in the list will refer to an entry in the filters list. @return The list of decode parameters. @throws IOException if there is an error retrieving the parameters.
7114 Get the list of decode parameters. Each entry in the list will refer to an entry in the filters list. @return The list of decode parameters. @throws IOException if there is an error retrieving the parameters.
7115 Appends a structure element kid and sets the parent property (/P) to this. @param structureElement the structure element
7116 Inserts a structure element kid before a reference kid. @param newKid the structure element @param refKid the reference kid
7117 Removes a structure element kid and if successful also removes the parent property (/P). @param structureElement the structure element @return <code>true</code> if the kid was removed, <code>false</code> otherwise.
7118 Returns the default position vector (v). @param cid CID
7119 Returns the property list resource with the given name, or null if none exists. @param name Name of the property list resource. @return the property list with the given name or null
7120 This will get the optional content group or optional content membership dictionary. @return The optional content group or optional content membership dictionary or null if there is none.
7121 This will get the optional content group or optional content membership dictionary. @return The optional content group or optional content membership dictionary or null if there is none.
7122 Get a list of optional content groups. @return List of optional content groups, never null.
7123 This will get the optional content group or optional content membership dictionary for the annotation. @return The optional content group or optional content membership dictionary or null if there is none.
7124 Creates a Caret annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
7125 Creates a Link annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
7126 Creates a FreeText annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
7127 Constructor. @param dict The annotations dictionary.
7128 Creates a Line annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
7129 Constructor. @param dict The annotations dictionary.
7130 Constructor. @param dict The annotations dictionary.
7131 Creates a Rubber Stamp annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
7132 Creates a sound annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
7133 Constructor. @param dict The annotations dictionary.
7134 Creates a Text annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
7135 Creates a TextMarkup annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
7136 This will retrieve the popup annotation used for entering/editing the text for this annotation. @return the popup annotation.
7137 Returns the widget annotations associated with this field. @return The list of widget annotations. Be aware that this list is <i>not</i> backed by the actual widget collection of the field, so adding or deleting has no effect on the PDF document until you call {@link #setWidgets(java.util.List) setWidgets()} with the modified list.
7138 Deep-clones the given object for inclusion into a different PDF document identified by the destination parameter. Expert use only, don’t use it if you don’t know exactly what you are doing. @param base the initial object as the root of the deep-clone operation @return the cloned instance of the base object @throws IOException if an I/O error occurs
7139 Writes all prepared {@link COSObject}s to the given {@link COSStream}. @param stream The stream for the compressed objects. @return The given {@link COSStream} of this object stream. @throws IOException Shall be thrown, if writing the object stream failed.
7140 Write the given {@link COSArray} to the given stream. @param output The stream, that shall be written to. @param cosArray The content, that shall be written.
7141 Cloudy polygon implementation. @param vertices polygon vertices; first and last point must be equal @param isEllipse specifies if the polygon represents an ellipse
7142 Tries to compress the image using a predictor. @return the image or null if it is not possible to encoded the image (e.g. not supported raster format etc.)
7143 A convenience method that will create an XYZ destination using only the defaults. @param page The page to refer to.
7144 This will decrypt a stream. @param stream The stream to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error getting the stream data.
7145 Default constructor.
7146 Default constructor.
7147 Default Constructor
7148 Default constructor.
7149 Constructor #1.
7150 Default constructor.
7151 Default constructor.
7152 Default constructor.
7153 Default constructor.
7154 Default constructor.
7155 Default constructor.
7156 Default Constructor
7157 Default constructor.
7158 Default constructor.
7159 Constructor.
7160 Constructor.
7161 Constructor.
7162 Constructor.
7163 Returns the pattern image in parent stream coordinates.
7164 Returns the anchor rectangle, which includes the XStep/YStep and scaling.
7165 {@inheritDoc} The returned images are not cached.
7166 Extract the raw unconverted raster of the given image @param pdImage The image to get the raw raster data from @return the raw raster of this image @throws IOException
7167 Returns the content of the given image as an AWT buffered image with an RGB color space. If a color key mask is provided then an ARGB image is returned instead. This method never returns null. @param pdImage the image to read @param region The region of the source image to get, or null if the entire image is needed. The actual region will be clipped to the dimensions of the source image. @param subsampling The amount of rows and columns to advance for every output pixel, a value of 1 meaning every pixel will be read. It must not be larger than the image width or height. @param colorKey an optional color key mask @return content of this image as an (A)RGB buffered image @throws IOException if the image cannot be read
7168 A dictionary containing any resources required by the page.
7169 A rectangle, expressed in default user space units, defining the boundaries of the physical medium on which the page is intended to be displayed or printed. @return the media box of the page
7170 Returns the rotation angle in degrees by which the page should be rotated clockwise when displayed or printed. Valid values in a PDF must be a multiple of 90. @return The rotation angle in degrees in normalized form (0, 90, 180 or 270) or 0 if invalid or not set at this level.
7171 This is a convenience method that will get the dictionary object that is expected to be a cos boolean and convert it to a primitive boolean. @param key The key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The value converted to a boolean.
7172 Get if the file is volatile. Default: false @return True if the file is volatile attribute is set.
7173 Shall the property be hidden? @return <code>true</code> if the property shall be hidden, <code>false</code> otherwise
7174 Will get the EncryptMetaData dictionary info. @return true if EncryptMetaData is explicitly set to false (the default is true)
7175 This will retrieve if the contents are shown as a caption or not. @return boolean if the content is shown as a caption.
7176 This will tell if the icon should scale to fit the annotation bounds. Default: false @return A flag telling if the icon should scale.
7177 A flag telling if the fields imported from the template may be renamed if there are conflicts. @return A flag telling if the fields can be renamed.
7178 Returns true if this group is isolated. Isolated groups begin with the fully transparent image, non-isolated begin with the current backdrop. @return true if this group is isolated
7179 Returns true if this group is a knockout. A knockout group blends with original backdrop, a non-knockout group blends with the current backdrop. @return true if this group is a knockout
7180 This will return the AntiAlias value. @return the AntiAlias value
7181 This will get the overprint control. @return The overprint control or null if one has not been set.
7182 This will get the automatic stroke adjustment flag. @return The automatic stroke adjustment flag or null if one has not been set.
7183 This will get the alpha source flag (“alpha is shape”), that specifies whether the current soft mask and alpha constant shall be interpreted as shape values (true) or opacity values (false). @return The alpha source flag.
7184 This will get the text knockout flag. @return The text knockout flag.
7185 A flag indicating whether to hide the annotation or show it @return true if annotation is hidden
7186 Gets the synchronous flag. It specifyes whether to play the sound synchronously or asynchronously. When true, the reader allows no further user interaction other than canceling the sound until the sound has been completely played. @return Whether to play the sound synchronously (true) or asynchronously (false, also the default).
7187 Gets whether to repeat the sound indefinitely. @return Whether to repeat the sound indefinitely (default: false).
7188 Gets the flag specifying whether to mix this sound with any other sound already playing. If this flag is false, any previously playing sound shall be stopped before starting this sound; this can be used to stop a repeating sound (see Repeat). @return whether to mix this sound with any other sound already playing (default: false).
7189 This will retrieve whether the text specified by the /Contents or /RC entries shall be shown as a caption in the appearance of the line. @return boolean if the contents shall be shown as a caption (default: false).
7190 This will retrieve the initial state of the annotation, open Or closed (default closed). @return The initial state, true = open false = closed
7191 A flag that can be used by the signature handler or software module to indicate that this signature was created with unrelease software. @return true if the software module or signature handler was a pre release.
7192 If there is a LegalPDF dictionary in the catalog of the PDF file and the NonEmbeddedFonts attribute in this dictionary has a non zero value, and the viewing application has a preference set to suppress the display of this warning then the value of this attribute will be set to true. @return true if NonEFontNoWarn is set to true @see #setNonEFontNoWarn(boolean)
7193 If true, the application was in trusted mode when signing took place. @return true if the application was in trusted mode while signing. default: false
7194 True if the viewing application should construct the appearances of all field widgets. The default value is false. @return the value of NeedAppearances, false if the value isn't set
7195 @return true if the area that shall be flown in is rectangular and opaque. Default is false. Only for {@link PDTransitionStyle#Fly}.
7196 Get the toolbar preference. @return the toolbar preference.
7197 Get the menubar preference. @return the menubar preference.
7198 Get the window UI preference. @return the window UI preference.
7199 Get the fit window preference. @return the fit window preference.
7200 Get the center window preference. @return the center window preference.
7201 Get the display doc title preference. @return the display doc title preference.
7202 Sets the given boolean value at bitPos in the flags. @param field The COSName of the field to set the value into. @param bitFlag the bit position to set the value in. @param value the value the bit position should have.
7203 Get an integer from an embedded dictionary. Useful for 1-1 mappings. @param embeddedDictionary The name of the embedded dictionary. @param key The key in the embedded dictionary. @param defaultValue The value if there is no embedded dictionary or it does not contain the key. @return The value of the embedded integer.
7204 This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The integer value.
7205 This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The integer value..
7206 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
7207 Gets the boolean value from the flags at the given bit position. @param field The COSName of the field to get the flag from. @param bitFlag the bitPosition to get the value from. @return true if the number at bitPos is '1'
7208 Returns the given COS page using a depth-first search. @param pageNum 1-based page number @param node page tree node to search @param encountered number of pages encountered so far @return COS dictionary of the Page object @throws IllegalStateException if the requested page number isn't found @throws IndexOutOfBoundsException if the requested page number is higher than the page count
7209 Returns the number of leaf nodes (page objects) that are descendants of this root within the page tree. @return the number of leaf nodes, 0 if not present
7210 Returns the start value for page numbering in this page range. @return a positive integer the start value for numbering.
7211 Get the order of interpolation between samples. Valid values are 1 and 3, specifying linear and cubic spline interpolation, respectively. Default is 1. See p.170 in PDF spec 1.7. @return order of interpolation.
7212 Returns the revision number (R). @return the revision number
7213 This will return the Length entry of the crypt filter dictionary.<br><br> The length in <b>bits</b> for the crypt filter algorithm. This will return a multiple of 8. @return The length in bits for the encryption algorithm
7214 This will return the V entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.13. @return The encryption version to use.
7215 This will return the Length entry of the encryption dictionary.<br><br> The length in <b>bits</b> for the encryption algorithm. This will return a multiple of 8. @return The length in bits for the encryption algorithm
7216 This will return the R entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.14. @return The encryption revision to use.
7217 This will get the permissions bit mask. @return The permissions bit mask.
7218 This will get the form of quadding (justification) of the annotation text. @return The quadding of the text.
7219 This will get the font flags. @return The font flags.
7220 Create the correct PD Model pattern based on the COS base pattern. @param dictionary the COS pattern dictionary @param resourceCache the resource cache, may be null, useful for tiling patterns. @return the newly created pattern object @throws IOException If we are unable to create the PDPattern object.
7221 This will return the paint type. @return The paint type
7222 This will return the tiling type. @return The tiling type
7223 Create the correct PD Model shading based on the COS base shading. @param shadingDictionary the COS shading dictionary @return the newly created shading resources object @throws IOException if we are unable to create the PDShading object
7224 The bits per flag of this shading. This will return -1 if one has not been set. @return The number of bits per flag.
7225 The vertices per row of this shading. This will return -1 if one has not been set. @return the number of vertices per row
7226 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
7227 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
7228 A set of flags specifying various characteristics of the action @return the flags
7229 A set of flags specifying various characteristics of the action @return the flags
7230 If the value in the /P entry is an integer, this will get the page number (zero-based) in the current document containing the file attachment annotation. @return the zero based page number or -1 if the /P entry value is missing or not a number.
7231 If the value in the /A entry is an integer, this will get the index (zero-based) of the annotation in the /Annots array of the page specified by the /P entry. @return the zero based page number or -1 if the /P entry value is missing or not a number.
7232 This will get the flags for this field. @return flags The set of flags.
7233 This will get the 'quadding' or justification of the text to be displayed. <br> 0 - Left (default)<br> 1 - Centered<br> 2 - Right<br> Please see the QUADDING_CONSTANTS in {@link PDVariableText }. @return The justification of the text strings.
7234 This will retrieve the rotation of the annotation widget. It must be a multiple of 90. Default is 0 @return the rotation
7235 Indicates if a timestamp is required. @return true if a timestamp is required
7236 Get the number of open nodes or a negative number if this node is closed. See PDF Reference 32000-1:2008 table 152 and 153 for more details. This value is updated as you append children and siblings. @return The Count attribute of the outline dictionary.
7237 This will get the document-wide default value for the quadding/justification of variable text fields. <p> 0 - Left(default)<br> 1 - Centered<br> 2 - Right<br> See the QUADDING constants of {@link PDVariableText}. @return The justification of the variable text fields.
7238 This will get the top index "TI" value. @return the top index, default value 0.
7239 This will get all dictionaries objects by type. @param type The type of the object. @return This will return all objects with the specified type.
7240 Returns the page tree. @return the page tree
7241 This will load a document from a file. @param file The name of the file to load. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
7242 This will load a document from an input stream. The stream is loaded to the memory to establish random access to the data. @param input The stream that contains the document. To read the stream {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used @return The document that was loaded. @throws IOException If there is an error reading from the stream.
7243 This will parse the stream and populate the PDDocument object. This will close the keystore stream when it is done parsing. Lenient mode is active by default. @return the populated PDDocument @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error reading from the stream or corrupt data is found.
7244 Remove all page resources from the cache to avoid relying on the implementation of the Cache. Does make sense after processing a page.
7245 Returns the color space resource with the given name, or null if none exists. @param name Name of the color space resource. @return a new color space. @throws IOException if something went wrong.
7246 Adds the given font to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param font the font to add @return the name of the resource in the resources dictionary
7247 Adds the given color space to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param colorSpace the color space to add @return the name of the resource in the resources dictionary
7248 Adds the given extended graphics state to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param extGState the extended graphics state to add @return the name of the resource in the resources dictionary
7249 Adds the given shading to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param shading the shading to add @return the name of the resource in the resources dictionary
7250 Adds the given pattern to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param pattern the pattern to add @return the name of the resource in the resources dictionary
7251 Adds the given property list to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param properties the property list to add @return the name of the resource in the resources dictionary
7252 Adds the given image to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param image the image to add @return the name of the resource in the resources dictionary
7253 Adds the given form to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param form the form to add @return the name of the resource in the resources dictionary
7254 Adds the given XObject to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param xobject the XObject to add @param prefix the prefix to be used when creating the resource name @return the name of the resource in the resources dictionary
7255 Get the embedded file. @return The embedded file for this file spec.
7256 Get the embedded dos file. @return The embedded dos file for this file spec.
7257 Get the embedded Mac file. @return The embedded Mac file for this file spec.
7258 Get the embedded Unix file. @return The embedded file for this file spec.
7259 Get the embedded unicode file. @return The embedded unicode file for this file spec.
7260 Indicates whether an optional content group is enabled. @param group the group object @return true if the group is enabled
7261 Enables or disables all optional content groups with the given name. @param groupName the group name @param enable true to enable, false to disable @return true if at least one group with this name already had an on or off setting, false otherwise
7262 Get the annotations normal appearance. <p> This will get the annotations normal appearance. If this is not existent an empty appearance entry will be created. @return the appearance entry representing the normal appearance.
7263 Get the annotations rollover appearance. <p> This will get the annotations rollover appearance. If this is not existent an empty appearance entry will be created. @return the appearance entry representing the rollover appearance.
7264 Get the annotations down appearance. <p> This will get the annotations down appearance. If this is not existent an empty appearance entry will be created. @return the appearance entry representing the down appearance.
7265 Set the selected option given its index, and try to update the visual appearance. NOTE: this method is only usable if there are export values and used for radio buttons with FLAG_RADIOS_IN_UNISON not set. @param index index of option to be selected @throws IOException if the value could not be set @throws IllegalArgumentException if the index provided is not a valid index.
7266 Prepends the child to the linked list of children. This method only adjust pointers but doesn't take care of the Count key in the parent hierarchy. @param newChild
7267 Appends the child to the linked list of children. This method only adjust pointers but doesn't take care of the Count key in the parent hierarchy. @param newChild
7268 Search acroform fields for signature field with specific signature dictionary. @param fieldIterator iterator on all fields. @param sigObject signature object (the /V part). @return a signature field if found, or null if none was found.
7269 Returns the appearance stream to process for the given annotation. May be used to render a specific appearance such as "hover". @param annotation The current annotation. @return The stream to process.
7270 Add font resources from the widget to the AcroForm to make sure embedded fonts are being used and not added by ensureFontResources potentially using a fallback font. @param acroFormResources AcroForm default resources, should not be null. @param annotation annotation, should not be null.
7271 Get the values to set individual buttons within a group to the on state. <p>The On value could be an arbitrary string as long as it is within the limitations of a PDF name object. The Off value shall always be 'Off'. If not set or not part of the normal appearance keys 'Off' is the default</p> @return the potential values setting the check box to the On state. If an empty Set is returned there is no appearance definition.
7272 This will tell if this radio button is currently checked or not. This is equivalent to calling {@link #getValue()}. @return true If this field is checked.
7273 Checks the check box. @throws IOException if the appearance couldn't be generated.
7274 Returns the index of the given page, or -1 if it does not exist. @param page The page to search for. @return the zero-based index of the given page, or -1 if the page is not found.
7275 Sets the parent to the given node. @param parentNode the node to be set as parent
7276 Set the children of this named tree. @param kids The children of this named tree. These have to be in sorted order. Because of that, it is usually easier to call {@link #setNames(Map)} with a map and pass a single element list here.
7277 Set the names for this node. This method will set the appropriate upper and lower limits based on the keys in the map and take care of the ordering. @param names map of names to objects, or <code>null</code> for nothing.
7278 Creates an page label dictionary for a document using the information in the given COS dictionary. <p> Note that the page label dictionary won't be automatically added to the document; you will still need to do it manually (see {@link org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)}. </p> @param document The document the page label dictionary is created for. @param dict an existing page label dictionary @see org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels) @throws IOException If something goes wrong during the number tree conversion.
7279 Get the encode for the input parameter. @param paramNum The function parameter number. @return The encode parameter range or null if none is set.
7280 Create a new CalGray color space.
7281 Creates a new CalRGB color space.
7282 Creates a new Lab color space.
7283 Creates a new CalGray color space using the given COS array. @param array the COS array which represents this color space
7284 Creates a new CalRGB color space using the given COS array. @param rgb the cos array which represents this color space
7285 Creates a new Lab color space from a PDF array. @param lab the color space array
7286 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds the bounds of the area to paint, in device units @throws IOException if there is an error getting the color space or doing color conversion.
7287 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds the bounds of the area to paint, in device units @throws IOException if there is an error getting the color space or doing color conversion.
7288 Constructor. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if there is an error getting the color space or doing background color conversion.
7289 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream
7290 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
7291 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
7292 Gets a name value. @param name the attribute name @param defaultValue the default value @return the name value
7293 This will retrieve the border effect, see the STYLE_* constants for valid values. @return the effect of the border or {@link #STYLE_SOLID} if none is found.
7294 Convenience method for annotations: sets the line with and dash style. @param lineWidth The line width. @param bs The border style, may be null. @param border The border array, must have at least three entries. This is only used if the border style is null. @throws IOException If there is an error writing to the content stream.
7295 Create a new document to write the split contents to. @return the newly created PDDocument. @throws IOException If there is an problem creating the new document.
7296 Sets the PDF specification version for this document. @param newVersion the new PDF version (e.g. 1.4f)
7297 Returns the structure tree root. @return the structure tree root
7298 Returns a list of objects for the kids (K). @return a list of objects for the kids, never null.
7299 This will get the encryption dictionary for this document. This will still return the parameters if the document was decrypted. As the encryption architecture in PDF documents is pluggable this returns an abstract class, but the only supported subclass at this time is a PDStandardEncryption object. @return The encryption dictionary(most likely a PDStandardEncryption object)
7300 Prepare for decryption. @throws InvalidPasswordException If the password is incorrect. @throws IOException if something went wrong
7301 Reads the font's Encoding entry, which should be a CMap name/stream.
7302 Some Type 1 fonts have an invalid Length1, which causes the binary segment of the font to be truncated, see PDFBOX-2350, PDFBOX-3677. @param bytes Type 1 stream bytes @param length1 Length1 from the Type 1 stream @return repaired Length1 value
7303 Some Type 1 fonts have an invalid Length2, see PDFBOX-3475. A negative /Length2 brings an IllegalArgumentException in Arrays.copyOfRange(), a huge value eats up memory because of padding. @param bytes Type 1 stream bytes @param length1 Length1 from the Type 1 stream @param length2 Length2 from the Type 1 stream @return repaired Length2 value
7304 This will return the value for the manner to display a fractional value. @return the manner to display a fractional value
7305 This will return the text to be used between orders of thousands in display of numerical values. @return thousands separator
7306 This will return the text to be used as the decimal point in displaying numerical values. @return decimal separator
7307 This will return the text to be concatenated to the left of the label specified by U. @return label prefix
7308 This will return the text to be concatenated after the label specified by U. @return label suffix
7309 This will return a value indicating the ordering of the label specified by U to the calculated unit value. @return label position
7310 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param embedded The embedded dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
7311 Returns a list of matching fonts, scored by suitability. Positive scores indicate matches for certain attributes, while negative scores indicate mismatches. Zero scores are neutral. @param fontDescriptor FontDescriptor, always present. @param cidSystemInfo Font's CIDSystemInfo, may be null.
7312 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param embedded The embedded dictionary to get. @param key The key to the item in the dictionary. @return The name converted to a string.
7313 Creates a new COSInputStream from an encoded input stream. @param filters Filters to be applied. @param parameters Filter parameters. @param in Encoded input stream. @return Decoded stream. @throws IOException If the stream could not be read.
7314 Constructor. @param stream The stream to parse. @param document The document for the current parsing. @throws IOException If there is an error initializing the stream.
7315 Constructor. @param stream The stream to parse. @throws IOException If there is an error initializing the stream.
7316 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @throws IOException if the font could not be read
7317 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @param trueTypeFont The true type font used to create the parent font @throws IOException if the font could not be read
7318 Reads a CMap given a COS Stream or Name. May return null if a predefined CMap does not exist. @param base COSName or COSStream @return the CMap if present @throws IOException if the CMap could not be read
7319 Creates a circle annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
7320 Creates a square annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
7321 Constructor. @param dict The annotations dictionary.
7322 Constructor. @param dict The annotations dictionary.
7323 Constructor. @param dict The annotations dictionary.
7324 Constructor. @param dict The annotations dictionary.
7325 Update the Pg and Obj references to the new (merged) page. @param parentTreeEntry @param objMapping mapping between old and new references
7326 This will add all of the dictionaries keys/values to this dictionary, but only if they are not in an exclusion list and if they don't already exist. If a key already exists in this dictionary then nothing is changed. @param src The source dictionary to get the keys/values from. @param dst The destination dictionary to merge the keys/values into. @param exclude Names of keys that shall be skipped.
7327 This will write the body of the document. @param doc The document to write the body for. @throws IOException If there is an error writing the data.
7328 Creates a cloudy border for a Polygon annotation. @param path polygon path @throws IOException If there is an error writing to the stream.
7329 Cloudy rectangle implementation is based on converting the rectangle to a polygon.
7330 Constructor. @param js Some javascript code.
7331 Creates a new tiling Paint. The parameters color and colorSpace must be null for a colored tiling Paint (because it has its own colors), and non null for an uncolored tiling Paint. @param drawer renderer to render the page @param pattern tiling pattern dictionary @param colorSpace color space for this tiling @param color color for this tiling @param xform device scale transform @throws java.io.IOException if something goes wrong while drawing the pattern
7332 Returns an RGB buffered image containing the opaque image stream without any masks applied. If this Image XObject is a mask then the buffered image will contain the raw mask. @param region The region of the source image to get, or null if the entire image is needed. The actual region will be clipped to the dimensions of the source image. @param subsampling The amount of rows and columns to advance for every output pixel, a value of 1 meaning every pixel will be read. It must not be larger than the image width or height. @return the image without any masks applied @throws IOException if the image cannot be read
7333 Returns the content of the given image as an AWT buffered image with an RGB color space. If a color key mask is provided then an ARGB image is returned instead. This method never returns null. @param pdImage the image to read @param colorKey an optional color key mask @return content of this image as an RGB buffered image @throws IOException if the image cannot be read
7334 Pushes the given stream's resources, returning the previous resources.
7335 Calculate the transform to be used when positioning the overlay. The default implementation centers on the destination. Override this method to do your own, e.g. move to a corner, or rotate. @param page The page that will get the overlay. @param overlayMediaBox The overlay media box. @return The affine transform to be used.
7336 Clips the given box to the bounds of the media box.
7337 This will find the MediaBox with rotation applied, for this page by looking up the hierarchy until it finds them. @return The MediaBox at this level in the hierarchy.
7338 Tells if this is a tagged PDF. @return true If this is a tagged PDF.
7339 Tells if structure elements use user properties. @return A boolean telling if the structure elements use user properties.
7340 Tells if this PDF contain 'suspect' tags. See PDF Reference 1.6 section 10.6 "Logical Structure" for more information about this property. @return true if the suspect flag has been set.
7341 This will specify whether to track the mouse position when the URI is resolved. Default value: false. This entry applies only to actions triggered by the user's clicking an annotation; it is ignored for actions associated with outline items or with a document's OpenAction entry. @return A flag specifying whether to track the mouse position when the URI is resolved.
7342 This will retrieve the initial state of the annotation, open Or closed (default closed). @return The initial state, true = open false = closed.
7343 This will return the value indication if the denominator of the fractional value is reduced/truncated . @return fd
7344 Specifies whether the property shall be hidden. @param hidden <code>true</code> if the property shall be hidden, <code>false</code> otherwise
7345 This will get the overprint control for non stroking operations. If this value is null then the regular overprint control value will be returned. @return The overprint control or null if one has not been set.
7346 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
7347 Set the invisible flag. @param invisible The new invisible flag.
7348 Set the hidden flag. @param hidden The new hidden flag.
7349 Set the printed flag. @param printed The new printed flag.
7350 Set the noZoom flag. @param noZoom The new noZoom flag.
7351 Set the noRotate flag. @param noRotate The new noRotate flag.
7352 Set the noView flag. @param noView The new noView flag.
7353 Set the readOnly flag. @param readOnly The new readOnly flag.
7354 Set the locked flag. @param locked The new locked flag.
7355 Set the toggleNoView flag. @param toggleNoView The new toggleNoView flag.
7356 Set the LockedContents flag. @param lockedContents The new LockedContents flag.
7357 Set the invisible flag. @param invisible The new invisible flag.
7358 Set the hidden flag. @param hidden The new hidden flag.
7359 Set the printed flag. @param printed The new printed flag.
7360 Set the noZoom flag. @param noZoom The new noZoom flag.
7361 Set the noRotate flag. @param noRotate The new noRotate flag.
7362 Set the noView flag. @param noView The new noView flag.
7363 Set the readOnly flag. @param readOnly The new readOnly flag.
7364 Set the locked flag. @param locked The new locked flag.
7365 Set the toggleNoView flag. @param toggleNoView The new toggleNoView flag.
7366 Set the LockedContents flag. If set, do not allow the contents of the annotation to be modified by the user. This flag does not restrict deletion of the annotation or changes to other annotation properties, such as position and size. @param lockedContents The new LockedContents flag value. @see <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#page=393">PDF 32000-1:2008 12.5.3, Table 165</a> @see #isLockedContents() @see #FLAG_LOCKED_CONTENTS @since PDF 1.7
7367 set true if the filter shall be required. @param flag if true, the specified Filter shall be used when signing.
7368 set true if the subfilter shall be required. @param flag if true, the first supported SubFilter in the array shall be used when signing.
7369 set true if the DigestMethod shall be required. @param flag if true, one digest from the array shall be used.
7370 set true if the V entry shall be required. @param flag if true, the V entry shall be used.
7371 set true if the Reason shall be required. @param flag if true, the Reason entry shall be used.
7372 set true if the LegalAttestation shall be required. @param flag if true, the LegalAttestation entry shall be used.
7373 set true if the AddRevInfo shall be required. @param flag if true, the AddRevInfo shall be used.
7374 set true if subject shall be required as a constraint on signature. @param flag if true, the specified Subject shall be enforced as a constraint.
7375 set true if Issuer shall be required as a constraint on signature. @param flag if true, the specified Issuer shall be enforced as a constraint.
7376 set true if OID shall be required as a constraint on signature. @param flag if true, the specified OID shall be enforced as a constraint.
7377 set true if subject DN shall be required as a constraint on signature. @param flag if true, the specified Subject DN shall be enforced as a constraint.
7378 set true if KeyUsage shall be required as a constraint on signature. @param flag if true, the specified KeyUsage shall be enforced as a constraint.
7379 set true if URL shall be required as a constraint on signature. @param flag if true, the specified URL shall be enforced as a constraint.
7380 Set the italic property of the text. @param italic The new italic flag.
7381 Set the bold property of the text. @param bold The new bold flag.
7382 Set the SignaturesExist bit. @param signaturesExist The value for SignaturesExist.
7383 Set the AppendOnly bit. @param appendOnly The value for AppendOnly.
7384 Set the Sort bit. @see #isSort() @param sort The value for Sort.
7385 Set the MultiSelect bit. @param multiSelect The value for MultiSelect.
7386 Set the DoNotSpellCheck bit. @param doNotSpellCheck The value for DoNotSpellCheck.
7387 Set the CommitOnSelChange bit. @param commitOnSelChange The value for CommitOnSelChange.
7388 Set the Combo bit. @param combo The value for Combo.
7389 Set the Edit bit. @param edit The value for Edit.
7390 sets the field to be read-only. @param readonly The new flag for readonly.
7391 sets the flag whether the field is to be required to have a value at the time it is exported by a submit-form action. @param required The new flag for required.
7392 sets the field to be not exported. @param noExport The new flag for noExport.
7393 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
7394 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
7395 From the PDF Spec <br> If set, a group of radio buttons within a radio button field that use the same value for the on state will turn on and off in unison; that is if one is checked, they are all checked. If clear, the buttons are mutually exclusive (the same behavior as HTML radio buttons). @param radiosInUnison The new flag for radiosInUnison.
7396 Set the multiline bit. @param multiline The value for the multiline.
7397 Set the password bit. @param password The value for the password.
7398 Set the file select bit. @param fileSelect The value for the fileSelect.
7399 Set the doNotSpellCheck bit. @param doNotSpellCheck The value for the doNotSpellCheck.
7400 Set the doNotScroll bit. @param doNotScroll The value for the doNotScroll.
7401 Set the comb bit. @param comb The value for the comb.
7402 Set the richText bit. @param richText The value for the richText.
7403 Get an integer from an embedded dictionary. Useful for 1-1 mappings. default:-1 @param embeddedDictionary The name of the embedded dictionary. @param key The key in the embedded dictionary. @return The value of the embedded integer.
7404 This will return the precision or denominator of a fractional amount. @return the precision or denominator
7405 Wraps and <code>OutputStream</code> in a predictor decoding stream as necessary. If no predictor is specified by the parameters, the original stream is returned as is. @param out The stream to which decoded data should be written @param decodeParams Decode parameters for the stream @return An <code>OutputStream</code> is returned, which will write decoded data into the given stream. If no predictor is specified, the original stream is returned.
7406 This will get the key of this Page in the structural parent tree. @return the integer key of the page's entry in the structural parent tree or -1 if there isn't any.
7407 Removes the given COS page.
7408 Adds the given page to this page tree. @param page The page to add.
7409 Get the number of bits that the output value will take up. Valid values are 1,2,4,8,12,16,24,32. @return Number of bits for each output value.
7410 Gets the marked content identifier. @return the marked content identifier
7411 Returns The next key for the parent tree. This is a number greater than any existing key, and which shall be used for the next entry to be added to the tree. @return The next key for the parent tree
7412 Gets the marked-content identifier. @return the marked-content identifier, or -1 if it doesn't exist.
7413 Creates a new CCITT Fax compressed image XObject from a TIFF file. @param document the document to create the image as part of. @param reader the random access TIFF file which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject, or null if no such page @throws IOException if there is an error reading the TIFF data.
7414 This will get the line cap style. @return null or the LC value of the dictionary.
7415 This will get the line join style. @return null or the LJ value in the dictionary.
7416 This will get the key of this annotation in the structural parent tree. @return the integer key of the annotation's entry in the structural parent tree or -1 if there isn't any.
7417 Return the P value. @return the P value
7418 Returns the maximum number of characters of the text field. @return the maximum number of characters, returns -1 if the value isn't present
7419 Gets an integer. @param name the attribute name @param defaultValue the default value @return the integer
7420 Get the invisible flag. @return The invisible flag.
7421 Get the hidden flag. @return The hidden flag.
7422 Get the printed flag. @return The printed flag.
7423 Get the noZoom flag. @return The noZoom flag.
7424 Get the noRotate flag. @return The noRotate flag.
7425 Get the noView flag. @return The noView flag.
7426 Get the readOnly flag. @return The readOnly flag.
7427 Get the locked flag. @return The locked flag.
7428 Get the toggleNoView flag. @return The toggleNoView flag.
7429 Get the LockedContents flag. @return The LockedContents flag.
7430 Get the invisible flag. @return The invisible flag.
7431 Get the hidden flag. @return The hidden flag.
7432 Get the printed flag. @return The printed flag.
7433 Get the noZoom flag. @return The noZoom flag.
7434 Get the noRotate flag. @return The noRotate flag.
7435 Get the noView flag. @return The noView flag.
7436 Get the readOnly flag. @return The readOnly flag.
7437 Get the locked flag. @return The locked flag.
7438 Get the toggleNoView flag. @return The toggleNoView flag.
7439 Get the LockedContents flag. @return The LockedContents flag. @see #setLockedContents(boolean)
7440 @return true if the Filter is required
7441 @return true if the SubFilter is required
7442 @return true if the DigestMethod is required
7443 @return true if the V entry is required
7444 @return true if the Reason is required
7445 @return true if the LegalAttestation is required
7446 @return true if the AddRevInfo is required
7447 @return true if the Subject is required
7448 @return true if the Issuer is required
7449 @return true if the OID is required
7450 @return true if the Subject DN is required
7451 @return true if the KeyUsage is required
7452 @return true if the URL is required
7453 A flag telling if the text should be italic. @return The italic flag.
7454 A flag telling if the text should be bold. @return The bold flag.
7455 Determines if SignaturesExist is set. @return true if the document contains at least one signature.
7456 Determines if AppendOnly is set. @return true if the document contains signatures that may be invalidated if the file is saved.
7457 Determines if push button bit is set. @return true if type of button field is a push button.
7458 Determines if radio button bit is set. @return true if type of button field is a radio button.
7459 Determines if Sort is set. <p> If set, the field’s option items shall be sorted alphabetically. The sorting has to be done when writing the PDF. PDF Readers are supposed to display the options in the order in which they occur in the Opt array. </p> @return true if the options are sorted.
7460 Determines if MultiSelect is set. @return true if multi select is allowed.
7461 Determines if DoNotSpellCheck is set. @return true if spell checker is disabled.
7462 Determines if CommitOnSelChange is set. @return true if value shall be committed as soon as a selection is made.
7463 Determines if Combo is set. @return true if value the choice is a combo box..
7464 Determines if Edit is set. @return true if the combo box shall include an editable text box as well as a drop-down list.
7465 @return true if the field is readonly
7466 @return true if the field is required to have a value at the time it is exported by a submit-form action.
7467 @return true if the field is not to be exported.
7468 @return true If the flag is set for radios in unison.
7469 @return true if the field is multiline
7470 @return true if the field is a password field.
7471 @return true if the field is a file select field.
7472 @return true if the field is not suppose to spell check.
7473 @return true if the field is not suppose to scroll.
7474 @return true if the field is not suppose to comb the text display.
7475 @return true if the field is a rich text field.
7476 Returns the page at the given index. @param index zero-based index @return the page at the given index @throws IllegalStateException if the requested index isn't found or doesn't point to a valid page dictionary @throws IndexOutOfBoundsException if the requested index is higher than the page count
7477 This will return the total page count of the PDF document. @return The total number of pages in the PDF document.
7478 Adds an attribute object. @param attributeObject the attribute object
7479 Updates the revision number for the given attribute object. @param attributeObject the attribute object
7480 Adds a class name. @param className the class name
7481 Increments th revision number.
7482 Prepares everything to decrypt the document. @param encryption encryption dictionary, can be retrieved via {@link PDDocument#getEncryption()} @param documentIDArray document id which is returned via {@link org.apache.pdfbox.cos.COSDocument#getDocumentID()} (not used by this handler) @param decryptionMaterial Information used to decrypt the document. @throws IOException If there is an error accessing data. If verbose mode is enabled, the exception message will provide more details why the match wasn't successful.
7483 This will get the O entry in the standard encryption dictionary. @return A 32 byte array or null if there is no owner key. @throws IOException If there is an error accessing the data.
7484 This will get the U entry in the standard encryption dictionary. @return A 32 byte array or null if there is no user key. @throws IOException If there is an error accessing the data.
7485 Returns the displacement vector (w0, w1) in text space, for the given character. For horizontal text only the x component is used, for vertical text only the y component. @param code character code @return displacement vector @throws IOException if the data could not be read
7486 Returns the width of the given Unicode string. @param text The text to get the width of. @return The width of the string in 1/1000 units of text space. @throws IOException If there is an error getting the width information. @throws IllegalArgumentException if a character isn't supported by the font.
7487 Returns the pattern resource with the given name, or null if none exists. @param name Name of the pattern resource. @return the pattern with the given name or null @throws IOException if something went wrong.
7488 Processes the operators of the given content stream. @param contentStream to content stream to parse. @throws IOException if there is an error reading or parsing the content stream.
7489 Returns the shading resource with the given name, or null if none exists. @param name Name of the shading resource. @return the shading state with the given name or null @throws IOException if something went wrong.
7490 This will get the shading resources for this pattern. @return The shading resources for this pattern. @throws IOException if something went wrong
7491 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
7492 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
7493 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
7494 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
7495 @return true if this node count is greater than zero, false otherwise.
7496 Creates a COSField subclass from the given field. @param form the form that the field is part of @param field the dictionary representing a field element @param parent the parent node of the node to be created @return the corresponding PDField instance
7497 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used. @param center true if the content is to be centered on the page (otherwise top-left). @param renderer the document renderer. Useful if {@link PDFRenderer} has been subclassed.
7498 Creates a new PDFRenderer. @param document the document to render
7499 This will load a document from a file. @param filename The name of the file to load. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
7500 Parses a PDF. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
7501 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws IOException in case of a file reading or parsing error
7502 RG Set the stroking colour space to DeviceRGB and set the colour to use for stroking operations. @param operator The operator that is being executed. @param arguments List @throws IOException If the color space cannot be read.
7503 Returns the XObject resource with the given name, or null if none exists. @param name Name of the XObject resource. @return the XObject with the given name or null @throws IOException if something went wrong.
7504 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
7505 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
7506 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
7507 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
7508 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
7509 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
7510 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
7511 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
7512 Indicates whether <em>at least one</em> optional content group with this name is enabled. There may be disabled optional content groups with this name even if this function returns true. @param groupName the group name @return true if at least one group is enabled
7513 Indicates whether an optional content group is enabled. @param group the group @return true if the group is enabled
7514 Adds the given node to the top of the children list. @param newChild The node to add. @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next sibling)
7515 Adds the given node to the bottom of the children list. @param newChild The node to add. @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next sibling)
7516 Checks value. @param value Name of radio button to select @throws IllegalArgumentException if the value is not a valid option.
7517 Replace the page destinations, if the source and destination pages are in the target document. This must be called after all pages (and its annotations) are processed. @param destinationDocument
7518 Returns the page labels descriptor of the document. @return the page labels descriptor of the document. @throws IOException If there is a problem retrieving the page labels.
7519 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if something went wrong
7520 Helper method for creating new documents at the appropriate pages. @throws IOException If there is an error creating the new document.
7521 This will write the header to the PDF document. @param doc The document to get the data from. @throws IOException If there is an error writing to the stream.
7522 Sets the optional content properties dictionary. The document version is incremented to 1.5 if lower. @param ocProperties the optional properties dictionary
7523 Returns the role map. @return the role map
7524 This will write the pdf document. If signature should be created externally, {@link #writeExternalSignature(byte[])} should be invoked to set signature after calling this method. @param doc The document to write. @param signInterface class to be used for signing; {@code null} if external signing would be performed or there will be no signing at all @throws IOException If an error occurs while generating the data. @throws IllegalStateException If the document has an encryption dictionary but no protection policy.
7525 Adds the given {@link COSBase} to this pool, using the given {@link COSObjectKey} as it's referencable ID. This method shall determine an appropriate key, for yet unregistered objects, to register them. Depending on the type of object, it shall either be appended as-is or shall be appended to a compressed {@link COSWriterObjectStream}. @param key The {@link COSObjectKey} that shall be used as the {@link COSBase}s ID, if possible. @param base The {@link COSBase}, that shall be registered in this pool.
7526 Protects the document with a protection policy. The document content will be really encrypted when it will be saved. This method only marks the document for encryption. It also calls {@link #setAllSecurityToBeRemoved(boolean)} with a false argument if it was set to true previously and logs a warning. <p> Do not use the document after saving, because the structures are encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @see org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy @see org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy @param policy The protection policy. @throws IOException if there isn't any suitable security handler.
7527 Prepare the document for encryption. @param doc The document that will be encrypted. @throws IOException If there is an error while encrypting.
7528 Returns the name of the glyph with the given character code. This is done by looking up the code in the parent font's ToUnicode map and generating a glyph name from that.
7529 Returns the GID for the given character code. @param code character code @return GID @throws IOException if the mapping could not be read
7530 Get the mac subtype. @return The mac subtype.
7531 Get the mac Creator. @return The mac Creator.
7532 Get the mac ResFork. @return The mac ResFork.
7533 Finds a CFF CID-Keyed font with the given PostScript name, or a suitable substitute, or null. This method can also map CJK fonts via their CIDSystemInfo (ROS). @param fontDescriptor FontDescriptor @param cidSystemInfo the CID system info, e.g. "Adobe-Japan1", if any.
7534 Returns a new InputStream which reads the decoded stream data. @return InputStream containing decoded stream data. @throws IOException If the stream could not be read.
7535 Brute force search for all objects streams of a pdf. @param xrefTable the cross reference table of the document @throws IOException if something went wrong
7536 Parse the object with the given key from the object stream with the given number. @param objstmObjNr the number of the offset stream @param key the key of the object to be parsed @return the parsed object @throws IOException if something went wrong when parsing the object
7537 Parses an xref object stream starting with indirect object id. @return value of PREV item in dictionary or <code>-1</code> if no such item exists
7538 Returns the content stream(s) of this page as a single input stream. @return An InputStream, never null. Multiple content streams are concatenated and separated with a newline. An empty stream is returned if the page doesn't have any content stream. @throws IOException If the stream could not be read
7539 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @throws IOException if the font could not be read
7540 Returns the descendant CIDFont.
7541 Create the correct annotation from the base COS object. @param base The COS object that is the annotation. @return The correctly typed annotation object, never null. @throws IOException If the annotation type is unknown.
7542 Creates a cloudy border for a rectangular annotation. The rectangle is specified by the <code>RD</code> entry and the <code>Rect</code> entry that was passed in to the constructor. <p> This can be used for Square and FreeText annotations. However, this does not produce the text and the callout line for FreeTexts. @param rd entry <code>RD</code>, or null if the entry does not exist @throws IOException If there is an error writing to the stream.
7543 Cloudy ellipse implementation.
7544 Creates a new colored tiling Paint, i.e. one that has its own colors. @param drawer renderer to render the page @param pattern tiling pattern dictionary @param xform device scale transform @throws java.io.IOException if something goes wrong while drawing the pattern
7545 Returns an RGB buffered image containing the opaque image stream without any masks applied. If this Image XObject is a mask then the buffered image will contain the raw mask. @return the image without any masks applied @throws IOException if the image cannot be read
7546 Create a new PDPage content stream. @param document The document the page is part of. @param sourcePage The page to write the contents to. @param appendContent Indicates whether content will be overwritten, appended or prepended. @param compress Tell if the content stream should compress the page contents. @param resetContext Tell if the graphic context should be reset. This is only relevant when the appendContent parameter is set to {@link AppendMode#APPEND}. You should use this when appending to an existing stream, because the existing stream may have changed graphic properties (e.g. scaling, rotation). @throws IOException If there is an error writing to the page contents.
7547 A rectangle, expressed in default user space units, defining the visible region of default user space. When the page is displayed or printed, its contents are to be clipped (cropped) to this rectangle. @return the cropbox of the page
7548 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
7549 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
7550 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
7551 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
7552 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
7553 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting data from the element.
7554 {@inheritDoc}
7555 {@inheritDoc}
7556 Removes the page with the given index from the page tree. @param index zero-based page index
7557 Removes the given page from the page tree. @param page The page to remove.
7558 This will add a page to the document. This is a convenience method, that will add the page to the root of the hierarchy and set the parent of the page to the root. @param page The page to add to the document.
7559 Insert a page before another page within a page tree. @param newPage the page to be inserted. @param nextPage the page that is to be after the new page. @throws IllegalArgumentException if one attempts to insert a page that isn't part of a page tree.
7560 Insert a page after another page within a page tree. @param newPage the page to be inserted. @param prevPage the page that is to be before the new page. @throws IllegalArgumentException if one attempts to insert a page that isn't part of a page tree.
7561 Appends a marked-content sequence kid. @param markedContent the marked-content sequence with the MCID. @throws IllegalArgumentException if the mcid is negative or doesn't exist.
7562 Fetches the corresponding UCS2 CMap if the font's CMap is predefined.
7563 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file stored in a byte array. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param byteArray the TIFF file in a byte array which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
7564 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param file the TIFF file which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
7565 This will set the display values - the 'Opt' key. <p> The Opt array specifies the list of options in the choice field either as an array of text strings representing the display value or as an array of a two-element array where the first element is the export value and the second the display value. </p> <p> To set both the export and the display value use {@link #setOptions(List, List)} </p> @param displayValues List containing all possible options.
7566 This will set the display and export values - the 'Opt' key. <p> This will set both, the export value and the display value of the choice field. If either one of the parameters is null or an empty list is supplied the options will be removed. </p> <p> An {@link IllegalArgumentException} will be thrown if the number of items in the list differ. </p> @see #setOptions(List) @param exportValues List containing all possible export values. @param displayValues List containing all possible display values.
7567 This will set the indices of the selected options - the 'I' key. <p> This method is preferred over {@link #setValue(List)} for choice fields which <ul> <li>do support multiple selections</li> <li>have export values with the same value</li> </ul> <p> Setting the index will set the value too. @param values List containing the indices of all selected options.
7568 Determine if the appearance shall provide a comb output. <p> May be set only if the MaxLen entry is present in the text field dictionary and if the Multiline, Password, and FileSelect flags are clear. If set, the field shall be automatically divided into as many equally spaced positions, or combs, as the value of MaxLen, and the text is laid out into those combs. </p> @return the comb state
7569 Returns the page at the given 0-based index. <p> This method is too slow to get all the pages from a large PDF document (1000 pages or more). For such documents, use the iterator of {@link PDDocument#getPages()} instead. @param pageIndex the 0-based page index @return the page at the given index.
7570 Creates a new instance of PageExtractor @param sourceDocument The document to split.
7571 Creates a new PDFPageable with the given page orientation and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer if non-zero, and optionally be centered. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed @param dpi if non-zero then the image will be rasterized at the given DPI @param center true if the content is to be centered on the page (otherwise top-left).
7572 Notifies the attribute object change listeners about a change in this attribute object.
7573 Prepares everything to decrypt the document. Only if decryption of single objects is needed this should be called. @param encryption encryption dictionary @param documentIDArray document id @param decryptionMaterial Information used to decrypt the document. @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error accessing data.
7574 Determines the width of the space character. This is very important for text extraction. @return the width of the space character
7575 Generate the appearance for comb fields. @param contents the content stream to write to @param appearanceStream the appearance stream used @param font the font to be used @param fontSize the font size to be used @throws IOException
7576 A convenience method that checks the flag bit. @return The flag value.
7577 A convenience method that checks the flag bit. @return The flag value.
7578 A convenience method that checks the flag bit. @return The flag value.
7579 A convenience method that checks the flag bit. @return The flag value.
7580 A convenience method that checks the flag bit. @return The flag value.
7581 A convenience method that checks the flag bit. @return The flag value.
7582 A convenience method that checks the flag bit. @return The flag value.
7583 A convenience method that checks the flag bit. @return The flag value.
7584 A convenience method that checks the flag bit. @return The flag value.
7585 A convenience method that sets the flag bit. @param flag The flag value.
7586 A convenience method that sets the flag bit. @param flag The flag value.
7587 A convenience method that sets the flag bit. @param flag The flag value.
7588 A convenience method that sets the flag bit. @param flag The flag value.
7589 A convenience method that sets the flag bit. @param flag The flag value.
7590 A convenience method that sets the flag bit. @param flag The flag value.
7591 A convenience method that sets the flag bit. @param flag The flag value.
7592 A convenience method that sets the flag bit. @param flag The flag value.
7593 A convenience method that sets the flag bit. @param flag The flag value.
7594 Returns the pattern for the given color. @param color color containing a pattern name @return pattern for the given color @throws java.io.IOException if the pattern name was not found.
7595 Processes a transparency group stream. @param group transparency group to be processed @throws IOException if the transparency group cannot be processed
7596 Processes a Type 3 character stream. @param charProc Type 3 character procedure @param textRenderingMatrix the Text Rendering Matrix @throws IOException if there is an error reading or parsing the character content stream.
7597 Process the given annotation with the specified appearance stream. @param annotation The annotation containing the appearance stream to process. @param appearance The appearance stream to process. @throws IOException If there is an error reading or parsing the appearance content stream.
7598 Process the given tiling pattern. Allows the pattern matrix to be overridden for custom rendering. @param tilingPattern the tiling pattern @param color color to use, if this is an uncoloured pattern, otherwise null. @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null. @param patternMatrix the pattern matrix, may be overridden for custom rendering. @throws IOException if there is an error reading or parsing the tiling pattern content stream.
7599 Process a content stream. @param contentStream the content stream @throws IOException if there is an exception while processing the stream
7600 The count parameter needs to be updated when you add, remove, open or close outline items. @param delta The amount to update by.
7601 Creates a COSField subclass from the given COS field. This is for reading fields from PDFs. @param form the form that the field is part of @param field the dictionary representing a field element @param parent the parent node of the node to be created, or null if root. @return a new PDField instance
7602 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used. @param center true if the content is to be centered on the page (otherwise top-left).
7603 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
7604 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws IOException in case of a file reading or parsing error
7605 Parses a PDF. Unrestricted main memory will be used for buffering PDF new streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
7606 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
7607 Parses a PDF. Unrestricted main memory will be used for buffering new/altered PDF streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
7608 Parses a PDF. Unrestricted main memory will be used for buffering new/altered PDF streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws IOException In case of a reading or parsing error.
7609 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
7610 Reads the visual signature from the given file. @param file the file containing the visual signature @throws IOException when something went wrong during parsing
7611 Reads the visual signature from the given input stream. @param is the input stream containing the visual signature @throws IOException when something went wrong during parsing
7612 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
7613 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
7614 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
7615 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
7616 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
7617 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
7618 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
7619 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
7620 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
7621 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
7622 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
7623 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
7624 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
7625 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
7626 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
7627 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
7628 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
7629 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
7630 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
7631 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
7632 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
7633 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
7634 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
7635 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
7636 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
7637 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
7638 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
7639 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
7640 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
7641 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
7642 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
7643 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
7644 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
7645 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
7646 Prepare document for encryption. @param document The document to encrypt. @throws IOException If there is an error accessing data.
7647 Sets the default value. @param value Name of option to select @throws IllegalArgumentException if the value is not a valid option.
7648 Set the selected option given its name, and try to update the visual appearance. @param value Name of option to select @throws IOException if the value could not be set @throws IllegalArgumentException if the value is not a valid option.
7649 Creates a clone of the source. @param src source dictionary or array. @param dstParent for the /P entry; parameter needed because arrays don't keep a parent. @param currentPageDict used to remember whether we have a page parent somewhere or not. Starts with null. @return a clone, or null if source is null or if there is no clone because it belongs to a different page or to no page.
7650 Returns the page number for this destination, regardless of whether this is a page number or a reference to a page. @see org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem @return the 0-based page number, or -1 if the destination type is unknown.
7651 Imports OCProperties from source document to target document so hidden layers can still be hidden after import. @param srcDoc The source PDF document that contains the /OCProperties to be copied. @throws IOException If an I/O error occurs.
7652 Rebuild a font subset.
7653 Returns the standard structure type, the actual structure type is mapped to in the role map. @return the standard structure type
7654 This will write the pdf document. If signature should be created externally, {@link #writeExternalSignature(byte[])} should be invoked to set signature after calling this method. @param doc The document to write. @throws IOException If an error occurs while generating the data.
7655 Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file or a stream, not if the document was created in PDFBox itself. There must be a path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set, starting from the document catalog. For signatures this is taken care by PDFBox itself. <p> Other usages of this method are for experienced users only. You will usually never need it. It is useful only if you are required to keep the current revision and append the changes. A typical use case is changing a signed file without invalidating the signature. <p> If your modification includes annotations, make sure these link back to their page by calling {@link PDAnnotation#setPage(PDPage)}. Although this is optional, not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. (PDFBox already does this for signature widget annotations) <p> Another problem with page-based modifications can occur if the page tree isn't flat: there won't be an closed update path from the catalog to the page. To fix this, add code like this: <pre>{@code COSDictionary parent = page.getCOSObject().getCOSDictionary(COSName.PARENT); while (parent != null) { parent.setNeedToBeUpdated(true); parent = parent.getCOSDictionary(COSName.PARENT); } }</pre> Don't use the input file as target as this will produce a corrupted file. @param output stream to write to. It will be closed when done. It <i><b>must never</b></i> point to the source file or that one will be harmed! @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream.
7656 Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file or a stream, not if the document was created in PDFBox itself. This allows to include objects even if there is no path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set so the incremental update gets smaller. Only dictionaries are supported; if you need to update other objects classes, then add their parent dictionary. <p> This method is for experienced users only. You will usually never need it. It is useful only if you are required to keep the current revision and append the changes. A typical use case is changing a signed file without invalidating the signature. To know which objects are getting changed, you need to have some understanding of the PDF specification, and look at the saved file with an editor to verify that you are updating the correct objects. You should also inspect the page and document structures of the file with PDFDebugger. <p> If your modification includes annotations, make sure these link back to their page by calling {@link PDAnnotation#setPage(PDPage)}. Although this is optional, not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. (PDFBox already does this for signature widget annotations) <p> Don't use the input file as target as this will produce a corrupted file. @param output stream to write to. It will be closed when done. It <i><b>must never</b></i> point to the source file or that one will be harmed! @param objectsToWrite objects that <b>must</b> be part of the incremental saving. @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream.
7657 Attempts to find yet unregistered streams and dictionaries in the given structure. @param current The object to be added for compressing. @throws IOException Shall be thrown, if compressing the object failed.
7658 Returns the contents of the stream as a PDF "text string". @return the PDF string representation of the stream content
7659 This will get a stream that can be read from. @return An input stream that can be read from. @throws IOException If an IO error occurs during reading.
7660 Create a patch list from a data stream, the returned list contains all the patches contained in the data stream. @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @return the obtained patch list @throws IOException when something went wrong
7661 Rebuild the trailer dictionary if startxref can't be found. @param xrefTable the cross reference table of the pdf @return the rebuild trailer dictionary @throws IOException if something went wrong
7662 Parse the object for the given object key. @param objKey key of object to be parsed @param requireExistingNotCompressedObj if <code>true</code> the object to be parsed must be defined in xref (comment: null objects may be missing from xref) and it must not be a compressed object within object stream (this is used to circumvent being stuck in a loop in a malicious PDF) @return the parsed object (which is also added to document object) @throws IOException If an IO error occurs.
7663 Parses cross reference tables. @param document the corresponding COS document of the pdf. @param startXRefOffset start offset of the first table @return the trailer dictionary @throws IOException if something went wrong
7664 Creates a new PDCIDFont instance with the appropriate subclass. @param dictionary descendant font dictionary @return a PDCIDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
7665 This will return a list of the annotations for this page. @param annotationFilter the annotation filter provided allowing to filter out specific annotations @return List of the PDAnnotation objects, never null. The returned list is backed by the annotations COSArray, so any adding or deleting in this list will change the document too. @throws IOException If there is an error while creating the annotation list.
7666 Gets a higher-level object for the referenced object. Currently this method may return a {@link PDAnnotation}, a {@link PDXObject} or <code>null</code>. @return a higher-level object for the referenced object
7667 This will retrieve the annotation to which this one is "In Reply To" the actual relationship is specified by the RT entry. @return the other annotation or null if there is none. @throws IOException if there is an error creating the other annotation.
7668 This will retrieve the markup annotation which this popup relates to. @return The parent markup annotation.
7669 Update the Pg and Obj references to the new (merged) page.
7670 Creates a cloudy border for a Circle annotation. The ellipse is specified by the <code>RD</code> entry and the <code>Rect</code> entry that was passed in to the constructor. @param rd entry <code>RD</code>, or null if the entry does not exist @throws IOException If there is an error writing to the stream.
7671 Get the annotations normal appearance content stream. <p> This will get the annotations normal appearance content stream, to 'draw' to. @param compress whether the content stream is to be compressed. Set this to true when creating long content streams. @return the appearance entry representing the normal appearance. @throws IOException
7672 Create a new PDPage content stream. This constructor overwrites all existing content streams of this page. @param document The document the page is part of. @param sourcePage The page to write the contents to. @throws IOException If there is an error writing to the page contents.
7673 Create a new PDPage content stream. If the appendContent parameter is set to {@link AppendMode#APPEND}, you may want to use {@link #PDPageContentStream(PDDocument, PDPage, PDPageContentStream.AppendMode, boolean, boolean)} instead, with the fifth parameter set to true. @param document The document the page is part of. @param sourcePage The page to write the contents to. @param appendContent Indicates whether content will be overwritten, appended or prepended. @param compress Tell if the content stream should compress the page contents. @throws IOException If there is an error writing to the page contents.
7674 Initializes the stream engine for the given page.
7675 A rectangle, expressed in default user space units, defining the region to which the contents of the page should be clipped when output in a production environment. The default is the CropBox. @return The BleedBox attribute.
7676 A rectangle, expressed in default user space units, defining the intended dimensions of the finished page after trimming. The default is the CropBox. @return The TrimBox attribute.
7677 A rectangle, expressed in default user space units, defining the extent of the page's meaningful content (including potential white space) as intended by the page's creator The default is the CropBox. @return The ArtBox attribute.
7678 This will find the CropBox with rotation applied, for this page by looking up the hierarchy until it finds them. @return The CropBox at this level in the hierarchy.
7679 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
7680 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
7681 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
7682 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
7683 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7684 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7685 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7686 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7687 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7688 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7689 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7690 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7691 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7692 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7693 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7694 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7695 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7696 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7697 Remove the page from the document. Do not use this method if other pages link to this one or if your document has a structure tree for accessibility unless you are able to fix these as well. In such cases it is better to use the splitter() class which will do these fixes. @param pageNumber 0 based index to page number.
7698 Remove the page from the document. Do not use this method if other pages link to this one or if your document has a structure tree for accessibility unless you are able to fix these as well. In such cases it is better to use the splitter() class which will do these fixes. @param page The page to remove from the document.
7699 This will import and copy the contents from another location. Currently the content stream is stored in a scratch file. The scratch file is associated with the document. If you are adding a page to this document from another document and want to copy the contents to this document's scratch file then use this method otherwise just use the {@link #addPage addPage()} method. <p> Unlike {@link #addPage addPage()}, this method creates a new PDPage object. If your page has annotations, and if these link to pages not in the target document, then the target document might become huge. What you need to do is to delete page references of such annotations. See <a href="http://stackoverflow.com/a/35477351/535646">here</a> for how to do this. <p> Inherited (global) resources are ignored because these can contain resources not needed for this page which could bloat your document, see <a href="https://issues.apache.org/jira/browse/PDFBOX-28">PDFBOX-28</a> and related issues. If you need them, call <code>importedPage.setResources(page.getResources());</code> <p> This method should only be used to import a page from a loaded document, not from a generated document because these can contain unfinished parts, e.g. font subsetting information. @param page The page to import. @return The page that was imported. @throws IOException If there is an error copying the page.
7700 Creates a PDDocument and adds the page parameter to it and keeps this as a template in the PDF template Structure. @param page the page to be added @throws IOException if the document could not be created
7701 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file stored in a byte array. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param byteArray the TIFF file in a byte array which contains a suitable CCITT compressed image @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
7702 Creates a new CCITT Fax compressed image XObject from the first image of a TIFF file. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(org.apache.pdfbox.pdmodel.PDDocument, java.awt.image.BufferedImage)} or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param file the TIFF file which contains a suitable CCITT compressed image @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
7703 Set the selected value of this field, and try to update the visual appearance. @param value The name of the selected item. @throws IOException if the value could not be set
7704 Update the 'I' key based on values set.
7705 Each page of document can be different sizes. This method calculates the page size based on the page media box. @param document @param page The 1-based page number for which the page size should be calculated. @throws IllegalArgumentException if the page argument is lower than 0.
7706 This method will attempt to find the page in this PDF document that this outline points to. If the outline does not point to anything then this method will return null. If the outline is an action that is not a GoTo action then this method will also return null. @param doc The document to get the page from. @return The page that this outline will go to when activated or null if it does not point to anything. @throws IOException If there is an error when trying to find the page.
7707 Creates a new PDFPageable. @param document the document to print
7708 Creates a new PDFPageable with the given page orientation. @param document the document to print @param orientation page orientation policy
7709 Creates a new PDFPageable with the given page orientation and with optional page borders shown. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed
7710 Creates a new PDFPageable with the given page orientation and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer if non-zero. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed @param dpi if non-zero then the image will be rasterized at the given DPI
7711 Returns a mapping with computed page labels as keys and corresponding 0-based page indices as values. The returned map will contain at most as much entries as the document has pages. <p> <strong>NOTE:</strong> If the document contains duplicate page labels, the returned map will contain <em>less</em> entries than the document has pages. The page index returned in this case is the <em>highest</em> index among all pages sharing the same label. </p> @return a mapping from labels to 0-based page indices.
7712 Returns a mapping with 0-based page indices as keys and corresponding page labels as values as an array. The array will have exactly as much entries as the document has pages. @return an array mapping from 0-based page indices to labels.
7713 Notifies the attribute object change listeners if the attribute is changed. @param oldBase old value @param newBase new value
7714 Called when a glyph is to be processed. The heuristic calculations here were originally written by Ben Litchfield for PDFStreamEngine.
7715 Break the paragraph into individual lines. @param font the font used for rendering the text. @param fontSize the fontSize used for rendering the text. @param width the width of the box holding the content. @return the individual lines. @throws IOException
7716 Returns the value of the symbolic flag, allowing for the fact that the result may be indeterminate. @return the value of the isSymbolic flag form the font descriptor
7717 Attempts to find a good fallback based on the font descriptor.
7718 Returns a PDFontDescriptor for the given PFB. @throws IOException if the font bounding box isn't available
7719 Returns a PDFontDescriptor for the given AFM. Used only for Standard 14 fonts. @param metrics AFM
7720 Creates a new font descriptor dictionary for the given TTF.
7721 Returns an AWT paint for the given PDColor. @param color The color to get a paint for. This can be an actual color or a pattern. @return an AWT paint for the given PDColor @throws IOException if the AWT paint could not be created
7722 Shows a transparency group from the content stream. @param form transparency group (form) XObject @throws IOException if the transparency group cannot be processed
7723 Processes a soft mask transparency group stream. @param group transparency group used for the soft mask @throws IOException if the transparency group cannot be processed
7724 Called when a glyph is to be processed. This method is intended for overriding in subclasses, the default implementation does nothing. @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub> @param font the current font @param code internal PDF character code for the glyph @param displacement the displacement (i.e. advance) of the glyph in text space @throws IOException if the glyph cannot be processed
7725 Shows the given annotation. @param annotation An annotation on the current page. @throws IOException If an error occurred reading the annotation
7726 Process the given tiling pattern. @param tilingPattern the tiling pattern @param color color to use, if this is an uncoloured pattern, otherwise null. @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null. @throws IOException if there is an error reading or parsing the tiling pattern content stream.
7727 Shows a form from the content stream. @param form form XObject @throws IOException if the form cannot be processed
7728 This will return all of the documents root fields. A field might have children that are fields (non-terminal field) or does not have children which are fields (terminal fields). The fields within an AcroForm are organized in a tree structure. The documents root fields might either be terminal fields, non-terminal fields or a mixture of both. Non-terminal fields mark branches which contents can be retrieved using {@link PDNonTerminalField#getChildren()}. @return A list of the documents root fields, never null. If there are no fields then this method returns an empty list.
7729 This will find one of the child elements. The name array are the components of the name to search down the tree of names. The nameIndex is where to start in that array. This method is called recursively until it finds the end point based on the name array. @param name An array that picks the path to the field. @param nameIndex The index into the array. @return The field at the endpoint or null if none is found.
7730 Returns this field's children. These may be either terminal or non-terminal fields. @return the list of child fields. Be aware that this list is <i>not</i> backed by the children of the field, so adding or deleting has no effect on the PDF document until you call {@link #setChildren(java.util.List) setChildren()} with the modified list.
7731 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used.
7732 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
7733 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error
7734 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error
7735 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error
7736 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws IOException in case of a file reading or parsing error
7737 Reads the visual signature from the given visual signature properties @param visSignatureProperties the <code>PDVisibleSigProperties</code> object containing the visual signature @throws IOException when something went wrong during parsing
7738 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
7739 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
7740 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
7741 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
7742 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
7743 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
7744 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
7745 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
7746 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
7747 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
7748 Imports a page from some PDF file as a Form XObject so it can be placed on another page in the target document. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before invoking the Form XObject to make sure that the graphics state is reset. @param sourceDoc the source PDF document that contains the page to be copied @param page the page in the source PDF document to be copied @return a Form XObject containing the original page's content @throws IOException if an I/O error occurs
7749 This will write the pdf document. @throws IOException If an error occurs while generating the data. @param doc The document to write.
7750 Save the document using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param output The stream to write to. It is recommended to wrap it in a {@link java.io.BufferedOutputStream}, unless it is already buffered. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
7751 <p> Constructs an object that can be used to compress the contents of a given {@link PDDocument}. It provides the means to: </p> <ul> <li>Compress the COSStructure of the document, by streaming {@link COSBase}s to compressed {@link COSWriterObjectStream}s</li> </ul> @param document The document, that shall be compressed. @param parameters The configuration of the compression operations, that shall be applied. @throws IOException Shall be thrown if a compression operation failed.
7752 Get a text or text stream. Some dictionary entries allow either a text or a text stream. @param base the potential text or text stream @return the text stream
7753 This will get the value for the field. The return type will either be: <ul> <li>String: for Checkboxes, Radio Button, Textfields</li> <li>List&lt;String&gt;: for a Choice Field</li> </ul> @return The value of the field. @throws IOException If there is an error getting the value.
7754 This will set the rich text that is associated with this field. @return The rich text XHTML stream.
7755 This will get the javascript that is executed before the import. @return Some javascript code.
7756 This will get the javascript that is executed after the import. @return Some javascript code.
7757 @return The Javascript Code.
7758 This will retrieve the rich text stream which is displayed in the popup window. @return the rich text stream.
7759 Get a text as text stream. Some dictionary entries allow either a text or a text stream. @param base the potential text or text stream @return the text stream
7760 Create a LayoutPage object from given PDPage object. @return @throws IOException
7761 This will copy the stream into a byte array. @return The byte array of the filteredStream. @throws IOException if an I/O error occurs.
7762 Get all sample values of this function. @return an array with all samples.
7763 Load the ICC profile, or init alternateColorSpace color space.
7764 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @throws IOException if something went wrong
7765 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream
7766 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if something went wrong
7767 Read the trailer information and provide a COSDictionary containing the trailer information. @return a COSDictionary containing the trailer information @throws IOException if something went wrong
7768 {@inheritDoc}
7769 {@inheritDoc}
7770 This will return a list of the annotations for this page. @return List of the PDAnnotation objects, never null. The returned list is backed by the annotations COSArray, so any adding or deleting in this list will change the document too. @throws IOException If there is an error while creating the annotation list.
7771 Get the annotations normal appearance content stream. <p> This will get the annotations normal appearance content stream, to 'draw' to. It will be uncompressed. @return the appearance entry representing the normal appearance. @throws IOException
7772 Places the given form over the existing content of the indicated page (like an overlay). The form is enveloped in a marked content section to indicate that it's part of an optional content group (OCG), here used as a layer. This optional group is returned and can be enabled and disabled through methods on {@link PDOptionalContentProperties}. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before calling this method to make sure that the graphics state is reset. @param targetPage the target page @param form the form to place @param transform the transformation matrix that controls the placement of your form. You'll need this if your page has a crop box different than the media box, or if these have negative coordinates, or if you want to scale or adjust your form. @param layerName the name for the layer/OCG to produce @return the optional content group that was generated for the form usage @throws IOException if an I/O error occurs
7773 This will initialize and process the contents of the stream. @param page the page to process @throws IOException if there is an error accessing the stream
7774 Process a child stream of the given page. Cannot be used with {@link #processPage(PDPage)}. @param contentStream the child content stream @param page the page to be used for processing @throws IOException if there is an exception while processing the stream
7775 {@inheritDoc} Returns the actual physical size of the pages in the PDF file. May not fit the local printer.
7776 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7777 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7778 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7779 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
7780 Sets the entry "V" to the given values. Requires {@link #isMultiSelect()} to be true. @param values the list of values @throws IOException if the appearance couldn't be generated.
7781 Constructor. @param document Already created PDDocument of your PDF document. @param imageStream Image as a stream. @param page The 1-based page number for which the page size should be calculated. @throws IOException If we can't read, flush, or can't close stream.
7782 Constructor. @param document Already created PDDocument of your PDF document. @param image the image to be used for the visible signature @param page The 1-based page number for which the page size should be calculated.
7783 Format the text block. @throws IOException if there is an error writing to the stream.
7784 My "not so great" method for calculating the fontsize. It does not work superb, but it handles ok. @return the calculated font-size @throws IOException If there is an error getting the font information.
7785 Reads the Encoding from the Font dictionary or the embedded or substituted font file. Must be called at the end of any subclass constructors. @throws IOException if the font file could not be read
7786 Internal implementation of isSymbolic, allowing for the fact that the result may be indeterminate. @return true if isSymbolic
7787 Finds a TrueType font with the given PostScript name, or a suitable substitute, or null. @param fontDescriptor FontDescriptor
7788 Finds a font with the given PostScript name, or a suitable substitute, or null. This allows any font to be substituted with a PFB, TTF or OTF. @param fontDescriptor the FontDescriptor of the font to find
7789 This will load a PFB to be embedded into a document. @param doc The PDF document that will hold the embedded font. @param dict The Font dictionary to write to. @param pfbStream The pfb input. @throws IOException If there is an error loading the data.
7790 Constructor for Standard 14.
7791 Creates a new TrueType font for embedding.
7792 Called when a glyph is to be processed. This method is intended for overriding in subclasses, the default implementation does nothing. @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub> @param font the current font @param code internal PDF character code for the glyph @param displacement the displacement (i.e. advance) of the glyph in text space @throws IOException if the glyph cannot be processed
7793 This will set this node to be open when it is shown in the viewer. By default, when a new node is created it will be closed. This will do nothing if the node is already open.
7794 Close this node.
7795 This will export all FDF form data. @return An FDF document used to export the document. @throws IOException If there is an error when exporting the document.
7796 This will tell if the AcroForm is a dynamic XFA form. @return true if the AcroForm is a dynamic XFA form
7797 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed
7798 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
7799 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error @deprecated use {@link Loader#loadPDF(File, String)} instead
7800 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error
7801 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
7802 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
7803 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
7804 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
7805 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
7806 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
7807 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
7808 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
7809 Initialize the content of the appearance stream. Get settings like border style, border width and colors to be used to draw a rectangle and background color around the widget @param widget the field widget @param appearanceCharacteristics the appearance characteristics dictionary from the widget or null @param appearanceStream the appearance stream to be used @throws IOException in case we can't write to the appearance stream
7810 Write font name, font size and color from the /DA string to the given content stream. @param contents The content stream. @param zeroFontSize The calculated font size to use if the /DA string has a size 0 (autosize). Otherwise the size from the /DA string is used.
7811 Imports a page from some PDF file as a Form XObject so it can be placed on another page in the target document. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before invoking the Form XObject to make sure that the graphics state is reset. @param sourceDoc the source PDF document that contains the page to be copied @param pageNumber the 0-based page number of the page to be copied @return a Form XObject containing the original page's content @throws IOException if an I/O error occurs
7812 This will save the document to an output stream. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param output The stream to write to. It is recommended to wrap it in a {@link java.io.BufferedOutputStream}, unless it is already buffered. @throws IOException if the output could not be written
7813 Save the document using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param file The file to save as. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
7814 This will write the compressed body of the document. @param document The document to write the body for. @throws IOException If there is an error writing the data.
7815 This will retrieve the rich text stream which is displayed in the popup window. @return the rich text stream.
7816 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
7817 Get the fields rich text value. @return the rich text value string
7818 Create a LayoutPage object from the first page of the given document. @param doc @return @throws IOException
7819 Constructor. @param functionStream The function stream. @throws IOException if an I/O error occurs while reading the function
7820 Do a linear interpolation if the two coordinates can be known, or call itself recursively twice. @param coord coord partially set coordinate (not set from step upwards); gets fully filled in the last call ("leaf"), where it is used to get the correct sample @param step between 0 (first call) and dimension - 1 @return interpolated result sample
7821 Creates a new ICC color space using the PDF array. @param iccArray the ICC stream object. @throws IOException if there is an error reading the ICC profile or if the parameter is invalid.
7822 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @throws IOException if something went wrong
7823 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @throws IOException if something went wrong
7824 Get the XFA content as byte array. The XFA is either a stream containing the entire XFA resource or an array specifying individual packets that together make up the XFA resource. A packet is a pair of a string and stream. The string contains the name of the XML element and the stream contains the complete text of this XML element. Each packet represents a complete XML element, with the exception of the first and last packet, which specify begin and end tags for the xdp:xdp element. [IS0 32000-1:2008: 12.7.8] @return the XFA content @throws IOException if the XFA content could not be created
7825 Update the StructParents and StructParent values in a PDPage. @param page the new page @param structParentOffset the offset which should be applied
7826 Clone the structure tree from the source to the current destination document. This must be called after all pages are processed. @param destinationDocument @throws IOException
7827 Clone all annotations because of changes possibly made, and because the structure tree is cloned. @param imported @throws IOException
7828 Build a map of page => set of widgets to be flattened @param fields a list of fields to be flattened @param pages the page tree @return @throws IOException
7829 This will initialize and process the contents of the stream. @param page the page to process @throws java.io.IOException if there is an error accessing the stream.
7830 This will create an FDF dictionary from an XFDF XML document. @param fdfXML The XML document that contains the XFDF data.
7831 This will import a fdf field from a fdf document. @param fdfField The fdf field to import. @throws IOException If there is an error importing the data for this field.
7832 Constructor. @param documentSource Original PDF document as RandomAccessRead @param imageStream Image as a stream @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
7833 Constructor. @param documentSource Original PDF document as RandomAccessRead @param image the image to be used for the visible signature @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
7834 Returns true if the font is a symbolic (that is, it does not use the Adobe Standard Roman character set). @return true if the font is a symbolic
7835 Creates a new Type 1 font for embedding. @param doc PDF document to write to @param pfbIn PFB file stream @param encoding encoding to be used for the font @throws IOException if the font could not be read
7836 Constructor for Standard 14.
7837 Constructor. @param fontDictionary Font dictionary.
7838 Creates a new TrueType font embedder for the given TTF as a PDCIDFontType2. @param document parent document @param dict font dictionary @param ttf True Type Font @param parent parent Type 0 font @throws IOException if the TTF could not be read
7839 Creates a new TrueType font embedder for the given TTF as a PDTrueTypeFont. @param document The parent document @param dict Font dictionary @param ttf TrueType font @param encoding The PostScript encoding vector to be used for embedding. @throws IOException if the TTF could not be read
7840 Test for dynamic XFA content. @param acroForm the AcroForm @return true if there is a dynamic XFA form.
7841 Creates a new PDFPrintable with the given page scaling. @param document the document to print @param scaling page scaling policy
7842 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error @deprecated use {@link Loader#loadPDF(File)} instead
7843 Generate and insert text content and clipping around it.
7844 Build a PDF with a visible signature step by step, and return it as a stream. @param properties properties to be used for the creation @return InputStream stream containing the pdf holding the visible signature @throws IOException if the PDF could not be created
7845 Save the document to a file using default compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param file The file to save as. @throws IOException if the output could not be written
7846 Save the document to a file using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param fileName The file to save as. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
7847 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
7848 Create the correct PD Model function based on the COS base function. @param function The COS function dictionary. @return The PDModel Function object, never null. @throws IOException If we are unable to create the PDFunction object.
7849 Calculate the interpolation. @return interpolated result sample
7850 Creates a new ICC color space using the PDF array, optionally using a resource cache. @param iccArray the ICC stream object. @param resources resources to use as cache, or null for no caching. @return an ICC color space. @throws IOException if there is an error reading the ICC profile or if the parameter is invalid.
7851 Creates a new lossless encoded image XObject from a BufferedImage. <p> <u>New for advanced users from 2.0.12 on:</u><br> If you created your image with a non standard ICC colorspace, it will be preserved. (If you load images in java using ImageIO then no need to read this segment) However a new colorspace will be created for each image. So if you create a PDF with several such images, consider replacing the colorspace with a common object to save space. This is done with {@link PDImageXObject#getColorSpace()} and {@link PDImageXObject#setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace) PDImageXObject.setColorSpace()} @param document the document where the image will be created @param image the BufferedImage to embed @return a new image XObject @throws IOException if something goes wrong
7852 Extract the matte color from a softmask. @param softMask @return the matte color. @throws IOException if the color conversion fails.
7853 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
7854 Get the XFA content as W3C document. @see #getBytes() @return the XFA content @throws IOException if something went wrong when reading the XFA content.
7855 Draws the page to the requested context. @param g The graphics context to draw onto. @param pageSize The size of the page to draw. @throws IOException If there is an IO error while drawing the page.
7856 Interface to start processing a new page. @param page The page that is about to get processed. @throws IOException If there is an error creating the new document.
7857 This will initialize and process the contents of the stream. @param page the page to process @throws java.io.IOException if there is an error accessing the stream.
7858 This will process the contents of a page. @param page The page to process. @throws IOException If there is an error processing the page.
7859 This will create an FDF catalog from an XFDF XML document. @param element The XML document that contains the XFDF data.
7860 Creates a new Type 1 font for embedding. @param doc PDF document to write to @param pfbIn PFB file stream @throws IOException if the font could not be read
7861 Creates a Type 1 standard 14 font for embedding. @param baseFont One of the standard 14 PostScript names, e.g. {@link FontName#HELVETICA_BOLD}.
7862 Constructor. @param fontDictionary Font dictionary.
7863 Constructor for reading a Type0 font from a PDF file. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the descendant font is missing.
7864 Private. Creates a new PDType0Font font for embedding. @param document @param ttf @param embedSubset @param closeTTF whether to close the ttf parameter after embedding. Must be true when the ttf parameter was created in the load() method, false when the ttf parameter was passed to the load() method. @param vertical whether to enable vertical substitutions. @throws IOException
7865 Creates a new TrueType font for embedding.
7866 Returns an iterator which walks all fields in the tree, in order.
7867 Creates a new PDFPrintable. @param document the document to print
7868 Constructor. @param filename Path of the PDF file @param imageStream image as a stream @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
7869 Constructor. @param filename Path of the PDF file @param image the image to be used for the visible signature @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
7870 start building of visible signature @throws IOException if the output could not be written
7871 Save the document to a file using default compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param fileName The file to save as. @throws IOException if the output could not be written
7872 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
7873 {@inheritDoc}
7874 Creates a new DeviceN color space from the given COS array. @param deviceN an array containing the color space information @param resources resources, can be null. @throws IOException if the colorspace could not be created
7875 This will get the tint transform function. @return The tint transform function. @throws IOException if there is an error creating the function.
7876 Creates a new Separation color space from a PDF color space array. @param separation an array containing all separation information. @param resources resources, can be null. @throws IOException if the color space or the function could not be created.
7877 This will return the function used to convert the color values. @return the function @throws java.io.IOException if we were not able to create the function.
7878 Provide the function(s) of the shading dictionary as array. @return an array containing the function(s). @throws IOException if we were unable to create a function.
7879 Returns the transfer function. @return the transfer function @throws IOException If we are unable to create the PDFunction object.
7880 Creates a new indexed color space from the given PDF array. @param indexedArray the array containing the indexed parameters @param resources the resources, can be null. Allows to use its cache for the colorspace. @throws IOException if the colorspace could not be created
7881 {@inheritDoc}
7882 Build the base image object from the IDATs and profile information
7883 Create a PDImageXObject from an image file. The file format is determined by the file name suffix. The following suffixes are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromStream}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param file the image file. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
7884 Create a PDImageXObject from an image file. The file format is determined by the file content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromStream}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param file the image file. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
7885 {@inheritDoc}
7886 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
7887 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
7888 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
7889 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
7890 Returns the given page as an RGB or ARGB image at the given scale. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @param imageType the type of image to return @param destination controlling visibility of optional content groups @return the rendered page image @throws IOException if the PDF cannot be read
7891 Renders a given page to an AWT Graphics2D instance. <p> Known problems: <ul> <li>rendering of PDF files with transparencies is not supported on Ubuntu, see <a href="https://issues.apache.org/jira/browse/PDFBOX-4581">PDFBOX-4581</a> and <a href="https://bugs.openjdk.java.net/browse/JDK-6689349">JDK-6689349</a>. Rendering will not abort, but the pages will be rendered incorrectly.</li> <li>Clipping the Graphics2D will not work properly, see <a href="https://issues.apache.org/jira/browse/PDFBOX-4583">PDFBOX-4583</a>.</li> </ul> If you encounter these problems, then you should render into an image by using the {@link #renderImage(int) renderImage} methods. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scaleX the scale to draw the page at for the x-axis, where 1 = 72 DPI @param scaleY the scale to draw the page at for the y-axis, where 1 = 72 DPI @param destination controlling visibility of optional content groups @throws IOException if the PDF cannot be read
7892 Interface method to handle the start of the page processing. @throws IOException If an IO error occurs.
7893 This will process all of the pages and the text that is in them. @param pages The pages object in the document. @throws IOException If there is an error parsing the text.
7894 This will create an FDF document from an XFDF XML document. @param doc The XML document that contains the XFDF data. @throws IOException If there is an error reading from the dom.
7895 Provide standard 14 Helvetica font as default if there isn't any font available. @return the default font
7896 Returns the mapped font for the specified Standard 14 font. The mapped font is cached. @param baseName name of the standard 14 font @return the mapped font
7897 Creates a new TrueType font from a Font dictionary. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the font could not be created
7898 Constructor. @param fontDictionary the corresponding dictionary @throws IOException it something went wrong
7899 Creates a Type 1 font from a Font dictionary in a PDF. @param fontDictionary font dictionary. @throws IOException if there was an error initializing the font. @throws IllegalArgumentException if /FontFile3 was used.
7900 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param resourceCache Resource cache, can be null. @throws IOException if the font could not be created
7901 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param randomAccessRead source of a TrueType font. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @param vertical whether to enable vertical substitutions. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
7902 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param ttf A TrueType font. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
7903 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param ttf A TrueType font. @param embedSubset True if the font will be subset before embedding @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
7904 Loads a TTF to be embedded into a document as a simple font. <p> <b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, InputStream)} instead. </p> @param doc The PDF document that will hold the embedded font. @param ttf A true type font @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
7905 Loads a TTF to be embedded into a document as a simple font. <p> <b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, File)} instead. </p> @param doc The PDF document that will hold the embedded font. @param randomAccessRead the source of the TTF. @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
7906 Retrieve all signature fields from the document. @return a <code>List</code> of <code>PDSignatureField</code>s
7907 Refreshes the appearance streams and appearance dictionaries for the widget annotations of all fields. @throws IOException if the appearance streams could not be refreshed
7908 Returns an iterator which walks all fields in the field tree, in order. @return an iterator which walks all fields in the field tree
7909 This will tell this form to cache the fields into a Map structure for fast access via the getField method. The default is false. You would want this to be false if you were changing the COSDictionary behind the scenes, otherwise setting this to true is acceptable. @param cache A boolean telling if we should cache the fields.
7910 This will get a field by name, possibly using the cache if setCache is true. @param fullyQualifiedName The name of the field to get. @return The field with that name of null if one was not found.
7911 This will add overlays to a document. @param specificPageOverlayMap Optional map of overlay files of which the first page will be used for specific pages of the input document. The page numbers are 1-based. The map must be empty (but not null) if no specific mappings are used. @return The modified input PDF document, which has to be saved and closed by the caller. If the input document was passed by {@link #setInputPDF(PDDocument) setInputPDF(PDDocument)} then it is that object that is returned. @throws IOException if something went wrong. @throws IllegalArgumentException if the input document is missing.
7912 This will add overlays documents to a document. If you created the overlay documents with subsetted fonts, you need to save them first so that the subsetting gets done. @param specificPageOverlayDocumentMap Optional map of overlay documents for specific pages. The page numbers are 1-based. The map must be empty (but not null) if no specific mappings are used. @return The modified input PDF document, which has to be saved and closed by the caller. If the input document was passed by {@link #setInputPDF(PDDocument) setInputPDF(PDDocument)} then it is that object that is returned. @throws IOException if something went wrong
7913 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
7914 Creates a color space given a name or array. Abbreviated device color names are not supported here, please replace them first. This method is for PDFBox internal use only, others should use {@link #create(COSBase, PDResources)}. @param colorSpace the color space COS object @param resources the current resources. @param wasDefault if current color space was used by a default color space. @return a new color space. @throws MissingResourceException if the color space is missing in the resources dictionary @throws IOException if the color space is unknown or cannot be created.
7915 Convert the input values using the functions of the shading dictionary. @param input the input values @return the output values @throws IOException thrown if something went wrong
7916 Creates a new indexed color space from the given PDF array. @param indexedArray the array containing the indexed parameters @throws IOException if the colorspace could not be created
7917 Create a PDImageXObject from an image file, see {@link #createFromFileByExtension(File, PDDocument)} for more details. @param imagePath the image file path. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject, or if the image type is not supported.
7918 {@inheritDoc} The returned images are cached via a SoftReference.
7919 Returns the given page as an RGB or ARGB image at the given scale. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @param imageType the type of image to return @return the rendered page image @throws IOException if the PDF cannot be read
7920 Renders a given page to an AWT Graphics2D instance. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scaleX the scale to draw the page at for the x-axis, where 1 = 72 DPI @param scaleY the scale to draw the page at for the y-axis, where 1 = 72 DPI @throws IOException if the PDF cannot be read
7921 This will take a document and split into several other documents. @param document The document to split. @return A list of all the split documents. These should all be saved before closing any documents, including the source document. Any further operations should be made after reloading them, to avoid problems due to resource sharing. For the same reason, they should not be saved with encryption. @throws IOException If there is an IOError
7922 This will take a PDDocument and write the text of that document to the print writer. @param doc The document to get the data from. @param outputStream The location to put the text. @throws IOException If the doc is in an invalid state.
7923 This will load a document from an input stream. The stream is loaded to the memory to establish random access to the data. @param input The stream that contains the document. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
7924 Process text from the PDF Stream. You should override this method if you want to perform an action when encoded text is being processed. @param string the encoded text @throws IOException if there is an error processing the string
7925 Returns the path for the character with the given name for the specified Standard 14 font. The mapped font is cached. The path may differ in different environments as it depends on the mapped font. @param baseName name of the standard 14 font @param glyphName name of glyph @return the mapped font @throws IOException if the data could not be read
7926 Creates an MMType1Font from a Font dictionary in a PDF. @param fontDictionary font dictionary @throws IOException if the font could not be read
7927 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the font could not be created
7928 Loads a TTF to be embedded and subset into a document as a Type 0 font. If you are loading a font for AcroForm, then use the 3-parameter constructor instead. @param doc The PDF document that will hold the embedded font. @param file A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font file.
7929 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param input An input stream of a TrueType font. It will be closed before returning. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
7930 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param file A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font file.
7931 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param input A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
7932 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param input A TrueType font. @param embedSubset True if the font will be subset before embedding @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
7933 Loads a TTF to be embedded into a document as a simple font. <p><b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, File)} instead.</p> @param doc The PDF document that will hold the embedded font. @param file A TTF file. @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
7934 Loads a TTF to be embedded into a document as a simple font. <p><b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, InputStream)} instead.</p> @param doc The PDF document that will hold the embedded font. @param input A TTF file stream @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
7935 Retrieve all signature dictionaries from the document. @return a <code>List</code> of <code>PDSignatureField</code>s
7936 This will add a signature to the document. If the 0-based page number in the options parameter is smaller than 0 or larger than max, the nearest valid page number will be used (i.e. 0 or max) and no exception will be thrown. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param signatureInterface is an interface whose implementation provides signing capabilities. Can be null if external signing if used. @param options signature options @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
7937 This method will import an entire FDF document into the PDF document that this acroform is part of. @param fdf The FDF document to import. @throws IOException If there is an error doing the import.
7938 This will save the document to an output stream and close the stream. @param output The stream to write to. @throws IOException If there is an error writing the document.
7939 Convert the input value using the functions of the shading dictionary. @param inputValue the input value @return the output values @throws IOException thrown if something went wrong
7940 Convert color to RGB color value, using function if required, then convert from the shading color space to an RGB value, which is encoded into an integer.
7941 Returns the non-stroking AWT Paint. You may need to call this if you override {@link #showGlyph(Matrix, PDFont, int, Vector) showGlyph()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5093">PDFBOX-5093</a> for more. @return The non-stroking AWT Paint. @throws IOException if the non-stroking AWT Paint could not be created
7942 For advanced users, to extract the transparency group into a separate graphics device. @param form the transparency group to be extracted @param graphics the target graphics device @throws IOException if the transparency group could not be extracted
7943 Returns the given page as an RGB image at the given scale. A scale of 1 will render at 72 DPI. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @return the rendered page image @throws IOException if the PDF cannot be read
7944 Returns the given page as an RGB image at the given DPI. @param pageIndex the zero-based index of the page to be converted @param dpi the DPI (dots per inch) to render at @return the rendered page image @throws IOException if the PDF cannot be read
7945 Returns the given page as an RGB image at the given DPI. @param pageIndex the zero-based index of the page to be converted @param dpi the DPI (dots per inch) to render at @param imageType the type of image to return @return the rendered page image @throws IOException if the PDF cannot be read
7946 Renders a given page to an AWT Graphics2D instance. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scale the scaling factor, where 1 = 72 DPI @throws IOException if the PDF cannot be read
7947 This will take a document and extract the desired pages into a new document. Both startPage and endPage are included in the extracted document. If the endPage is greater than the number of pages in the source document, it will go to the end of the document. If startPage is less than 1, it'll start with page 1. If startPage is greater than endPage or greater than the number of pages in the source document, a blank document will be returned. @return The extracted document @throws IOException If there is an IOError
7948 This will return the text of a document. See writeText. <br> NOTE: The document must not be encrypted when coming into this method. <p>IMPORTANT: By default, text extraction is done in the same sequence as the text in the PDF page content stream. PDF is a graphic format, not a text format, and unlike HTML, it has no requirements that text one on page be rendered in a certain order. The order is the one that was determined by the software that created the PDF. To get text sorted from left to right and top to botton, use {@link #setSortByPosition(boolean)}. @param doc The document to get the text from. @return The text of the PDF document. @throws IOException if the doc state is invalid or it is encrypted.
7949 This will load a document from a file. @param filename The name of the file to load. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
7950 This will load a document from a file. @param file The name of the file to load. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
7951 Called when a string of text is to be shown. @param string the encoded text @throws IOException if there was an error showing the text
7952 Called when a string of text with spacing adjustments is to be shown. @param array array of encoded text strings and adjustments @throws IOException if there was an error showing the text
7953 Creates a new PDFont instance with the appropriate subclass. @param dictionary a font dictionary @param resourceCache resource cache, only useful for type 3 fonts, can be null @return a PDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
7954 Loads a TTF to be embedded and subset into a document as a Type 0 font. If you are loading a font for AcroForm, then use the 3-parameter constructor instead. @param doc The PDF document that will hold the embedded font. @param input An input stream of a TrueType font. It will be closed before returning. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
7955 This will return the last signature from the field tree. Note that this may not be the last in time when empty signature fields are created first but signed after other fields. @return the last signature as <code>PDSignatureField</code>.
7956 Save PDF incrementally without closing for external signature creation scenario. The general sequence is: <pre> PDDocument pdDocument = ...; OutputStream outputStream = ...; SignatureOptions signatureOptions = ...; // options to specify fine tuned signature options or null for defaults PDSignature pdSignature = ...; // add signature parameters to be used when creating signature dictionary pdDocument.addSignature(pdSignature, signatureOptions); // prepare PDF for signing and obtain helper class to be used ExternalSigningSupport externalSigningSupport = pdDocument.saveIncrementalForExternalSigning(outputStream); // get data to be signed InputStream dataToBeSigned = externalSigningSupport.getContent(); // invoke signature service byte[] signature = sign(dataToBeSigned); // set resulted CMS signature externalSigningSupport.setSignature(signature); // last step is to close the document pdDocument.close(); </pre> <p> Note that after calling this method, only {@code close()} method may invoked for {@code PDDocument} instance and only AFTER {@link ExternalSigningSupport} instance is used. </p> <p> Don't use the input file as target as this will produce a corrupted file. @param output stream to write the final PDF. It will be closed when the document is closed. It <i><b>must never</b></i> point to the source file or that one will be harmed! @return instance to be used for external signing and setting CMS signature @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream or signature options were not set.
7957 This will flatten the specified form fields. <p> Flattening a form field will take the current appearance and make that part of the pages content stream. All form fields and annotations associated are removed. </p> <p> Invisible and hidden fields will be skipped and will not become part of the page content stream </p> @param fields a list of fields to be flattened @param refreshAppearances if set to true the appearances for the form field widgets will be updated @throws IOException if something went wrong flattening the fields
7958 Add parameters of signature to be created externally. See {@link #saveIncrementalForExternalSigning(OutputStream)} method description on external signature creation scenario details. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param options signature options @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
7959 Add a signature to be created using the instance of given interface. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param signatureInterface is an interface whose implementation provides signing capabilities. Can be null if external signing if used. @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
7960 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
7961 Renders a glyph. @param path the GeneralPath for the glyph @param font the font @param code character code @param displacement the glyph's displacement (advance) @param at the transformation @throws IOException if something went wrong
7962 Build a indexed image
7963 Returns the given page as an RGB image at 72 DPI @param pageIndex the zero-based index of the page to be converted. @return the rendered page image @throws IOException if the PDF cannot be read
7964 Renders a given page to an AWT Graphics2D instance at 72 DPI. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @throws IOException if the PDF cannot be read
7965 Returns the font resource with the given name, or null if none exists. @param name Name of the font resource. @return the font with the given name or null @throws IOException if something went wrong.
7966 Creates a new PDFont instance with the appropriate subclass. @param dictionary a font dictionary @return a PDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
7967 This will flatten all form fields. <p> Flattening a form field will take the current appearance and make that part of the pages content stream. All form fields and annotations associated are removed. </p> <p> Invisible and hidden fields will be skipped and will not become part of the page content stream </p> <p> The appearances for the form fields widgets will <strong>not</strong> be generated </p> @throws IOException if something went wrong flattening the fields
7968 Add parameters of signature to be created externally using default signature options. See {@link #saveIncrementalForExternalSigning(OutputStream)} method description on external signature creation scenario details. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
7969 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
7970 Get the points from the triangles, calculate their color and add point-color mappings.
7971 Fills and then strokes the path. @param windingRule The winding rule this path will use. @throws IOException If there is an IO error while filling the path.
7972 Convert the image using the state. @param doc the document to put the image in @param state the parser state containing the PNG chunks. @return null or the converted image
7973 Process the set font and font size operator. @param operands the font name and size @throws IOException in case there are missing operators or the font is not within the resources
7974 Copies any needed resources from the document’s DR dictionary into the stream’s Resources dictionary. Resources with the same name shall be left intact.
7975 This will get the font for this font setting. @return The font for this setting of null if one was not found. @throws IOException If there is an error getting the font.
7976 append all pages from source to destination. @param destination the document to receive the pages @param source the document originating the new pages @throws IOException If there is an error accessing data from either document.
7977 Try to convert a PNG into a PDImageXObject. If for any reason the PNG can not be converted, null is returned. <p> This usually means the PNG structure is damaged (CRC error, etc.) or it uses some features which can not be mapped to PDF. @param doc the document to put the image in @param imageData the byte data of the PNG @return null or the PDImageXObject built from the png
7978 This is used to handle an operation. @param operator The operation to perform. @param operands The list of arguments. @throws IOException If there is an error processing the operation.
7979 Constructs and sets new contents for given appearance stream.
7980 This will implement the gs operator. @param gs The state to copy this dictionaries values into. @throws IOException If there is an error copying font information.
7981 Merge the list of source documents, saving the result in the destination file. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @throws IOException If there is an error saving the document.
7982 Create a PDImageXObject from an image byte array. This overloaded version allows providing a custom factory to handle specific image formats, such as BMP and GIF, or to act as a fallback strategy when the default converters (e.g., for PNG or TIFF) fail. @param document the document that shall use this PDImageXObject. @param byteArray bytes from an image file. @param name name of image file for exception messages, can be null. @param customFactory optional factory used to handle BMP, GIF, or fallback cases (e.g., for PNG or TIFF). If {@code null}, this method delegates to {@link #createFromByteArray(PDDocument, byte[], String)}. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
7983 Processes the operators of the given content stream. @param content the content to parse. @throws IOException if there is an error reading or parsing the content stream.
7984 Merge the list of source documents, saving the result in the destination file. The source list is not reset after merge. If you want to merge one document at a time, then it's better to use {@link #appendDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDDocument)}. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @param compressParameters defines if compressed object streams are enabled @throws IOException If there is an error saving the document.
7985 Create a PDImageXObject from bytes of an image file. The file format is determined by the file content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromByteArray}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param byteArray bytes from an image file. @param document the document that shall use this PDImageXObject. @param name name of image file for exception messages, can be null. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
7986 Constructor for reading an existing DA string. @param defaultResources DR entry @param defaultAppearance DA entry @throws IOException If the DA could not be parsed
7987 Merge the list of source documents, saving the result in the destination file. The source list is not reset after merge. If you want to merge one document at a time, then it's better to use {@link #appendDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDDocument)}. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @throws IOException If there is an error saving the document.
7988 Get the default appearance. This is an inheritable attribute. The default appearance contains a set of default graphics and text operators to define the field’s text size and color. @return the DA element of the dictionary object
7989 This is the public method for setting the appearance stream. @param apValue the String value which the appearance should represent @throws IOException If there is an error creating the stream.
7990 Constructs a COSAppearance from the given field. @param field the field which you wish to control the appearance of @throws IOException
