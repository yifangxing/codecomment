1 Constructs an empty OperatorName instance.
2 Initializes an OperatorProcessor instance with a PDFStreamEngine context. @param context the parent engine context
3 Initializes a new instance of COSBase. This is an empty constructor, intended to be used by subclasses.
4 Initializes COSUpdateState with provided update information. @param updateInfo COSUpdateInfo object containing update details
5 Empty constructor to allow subclassing.
6 Initializes decoder options with specified source region. @param sourceRegion rectangle defining the input area
7 Initializes decode options with uniform subsampling. @param subsampling X and Y subsampling factor
8 Initializes a new instance of the Filter class.
9 Initializes PageExtractor with a PDDocument and page range. @param sourceDocument the input PDF document @param startPage starting page index (inclusive) @param endPage ending page index (inclusive)
10 Initializes XrefParser with COSParser instance. @param cosParser COSParser object to extract data from
11 Initializes an XReference instance with the specified reference type. @param type XReferenceType enumeration value
12 Initializes the content stream writer with an output stream. @param out the output stream where content will be written.
13 Initializes cache creation with stability flag. @param enableStableCache true to enable stable caching, false otherwise
14 Initializes a new instance of PDDocumentCatalog. @param doc PDDocument object to associate with @param rootDictionary COSDictionary representing the catalog's root dictionary
15 Initializes PDDocumentInformation with a COSDictionary. @param dic COS dictionary containing document information
16 Initializes name destination dictionary from COS dictionary. @param dict COSDictionary object containing name data
17 Initializes PDDocumentNameDictionary object with PDF document catalog and name dictionary. @param cat PDDocumentCatalog instance @param names COSDictionary containing name information
18 Initializes a new PDF page from a COS dictionary. @param pageDictionary COS dictionary representing the page
19 Initializes a new PDPage instance from a COS dictionary. @param pageDictionary COS dictionary containing page data @param resourceCache cache of shared resources
20 Initializes COSDictionaryMap with provided maps. @param actualsMap map of actual values @param dicMap dictionary map to store additional data
21 Initializes a new instance of PDDictionaryWrapper with the provided COSDictionary. @param dictionary COSDictionary object to be wrapped
22 Initializes a PDNameTreeNode instance from a COS dictionary.
23 Initializes a new PDNumberTreeNode from a COS dictionary and value class. @param dict the COS dictionary to initialize from @param valueClass the class of the value stored in the node
24 Initializes a new PDPageLabelRange instance from a COS dictionary. @param dict COS dictionary containing label range data
25 Initializes PDRange with a COSArray range. @param range COSArray containing range data
26 Initializes a PDRange object with the given array and index. @param range COSArray containing range data @param index starting index within the range array
27 Initializes PDStream with a COSStream object. @param str COSStream to be wrapped by this PDStream instance.
28 Initializes PDMarkInfo object from given dictionary. @param dic COSDictionary containing mark information
29 Initializes a new instance of PDMarkedContentReference from a COSDictionary. @param dictionary COSDictionary containing marked content reference data
30 Initializes a new PDObjectReference instance from a COS dictionary. @param theDictionary COS dictionary containing reference data
31 Constructs a PDStructureNode from a COSDictionary. @param dictionary COS dictionary containing node data
32 Initializes an empty Revisions object.
33 Initializes a new instance of PDPropertyList from a COS dictionary. @param dict COS dictionary containing property list data.
34 Initializes a new instance of PDBoxStyle from a COSDictionary. @param dic The dictionary containing style information
35 Initializes an instance with default access permissions.
36 Initializes an instance of AccessPermission with specified permissions. @param permissions integer value representing access permissions.
37 Initializes PDCryptFilterDictionary with a COSDictionary object. @param d COSDictionary containing cryptographic filter data
38 Initializes RC4 cipher with a 256-element salt array.
39 Constructs an FDFAnnotation instance from a COS dictionary. @param a COS dictionary containing annotation data
40 Creates an FDFCatalog instance from a COSDictionary. @param cat COSDictionary representing the catalog
41 Constructs an FDFDictionary instance from a COSDictionary object. @param fdfDictionary input COS dictionary
42 Initializes an FDFField object from a COSDictionary. @param f COS dictionary containing field data
43 Initializes FDFIconFit object with given COSDictionary. @param f COS dictionary to initialize from
44 Initializes an instance of FDFJavaScript with the provided JavaScript COS dictionary.
45 Initializes an FDFNamedPageReference with a COS dictionary. @param r COS dictionary containing reference data
46 Constructs an FDFOptionElement instance from a COSArray. @param o the COSArray containing option data
47 Initializes an FDFPage instance with a COSDictionary representation. @param p COSDictionary containing page data
48 Initializes an instance of FDFPageInfo from a COS dictionary. @param p COS dictionary containing page information.
49 Initializes an instance of FDFTemplate from a COS dictionary. @param t COS dictionary containing template data
50 Creates a new PDFontDescriptor instance from a given COS dictionary. @param desc COS dictionary containing font descriptor properties
51 Initializes a new PDFontSetting object from a given COSArray. @param fs COSArray containing font settings
52 Initializes a new instance of PDLineDashPattern with default settings.
53 Initializes a new BlendMode instance with the specified settings. @param name COSName representing the blend mode @param blendChannel BlendChannelFunction for channel-based blending (null for default) @param blend BlendFunction for overall blending
54 Initializes a PDColor object with specified pattern name and color space. @param patternName name of the pattern @param colorSpace color space of the color
55 Initializes PDDeviceNAttributes with a COSDictionary of device attributes. @param attributes COSDictionary containing device attributes.
56 Constructs a new PDDeviceNProcess instance from the provided COSDictionary attributes.
57 Initializes a PDGamma instance from a COSArray. @param array COSArray containing gamma data
58 Initializes a new PDTristimulus instance from a COSArray. @param array input color data
59 Initializes this object with transparency group attributes from a COS dictionary. @param dic COS dictionary containing transparency group data
60 Initializes Optional Content Properties from COS dictionary. @param props COS dictionary containing properties
61 Initializes a new instance of PDAbstractPattern with the given COS dictionary. @param dictionary COS dictionary containing pattern data
62 Initializes a new instance of PDShading from a COSDictionary. @param shadingDictionary PDF shading data
63 Initializes this Extended Graphics State with given COS dictionary and resource cache. @param dictionary COS dictionary containing graphics state information @param resourceCache Resource cache for accessing cached resources
64 Initializes a new instance of PDSoftMask with given COS dictionary and resource cache. @param dictionary COS dictionary containing mask data @param resourceCache Resource cache for accessing cached resources
65 Constructs a new PDAction instance from a COS dictionary. @param a COS dictionary containing action data
66 Constructs a PDActionFactory instance.
67 Initializes a PDAdditionalActions object from a COS dictionary. @param a COS dictionary containing additional actions data
68 Initializes PDAnnotationAdditionalActions with a COSDictionary. @param a COS dictionary containing annotation additional actions data
69 Initializes PDDocumentCatalogAdditionalActions from a COS dictionary. @param a COS dictionary containing additional actions data
70 Initializes additional form field actions from the given dictionary. @param a COSDictionary containing action data
71 Initializes PDPageAdditionalActions with a COSDictionary. @param a COSDictionary object containing additional actions
72 Initializes a new instance of PDTargetDirectory with the given COSDictionary. @param dictionary COSDictionary containing target directory data
73 Initializes a new PDURIDictionary instance from a COSDictionary. @param dictionary COSDictionary object to initialize with
74 Initializes PD Windows launch parameters from a dictionary. @param p input dictionary containing launch parameters
75 Initializes PDAppearanceCharacteristicsDictionary with a COS dictionary. @param dict COS dictionary containing appearance characteristics
76 Initializes a new instance of PDAppearanceDictionary from a COSDictionary object. @param dictionary COSDictionary containing appearance data
77 Constructs a new PDAppearanceEntry instance from a given COSDictionary. @param entry the COSDictionary containing appearance data.
78 Initializes a new PDBorderEffectDictionary instance from a COSDictionary object. @param dict COSDictionary containing border effect data
79 Initializes PDBorderStyleDictionary with COSDictionary data. @param dict COSDictionary object containing border style data
80 Initializes a new instance of PDExternalDataDictionary from a COSDictionary object. @param dictionary COSDictionary object to initialize with.
81 Constructs a CloudyBorder object with specified parameters. @param stream content stream to draw on @param intensity cloudy border intensity (0.0 - 1.0) @param lineWidth line width of the border @param rect bounding rectangle for the border
82 Initializes a new PDPropBuild object with a COSDictionary. @param dict COSDictionary instance containing build properties.
83 Initializes PDPropBuildDataDict with COS dictionary. @param dict COSDictionary object containing build data
84 Constructs a PDSeedValue object from a COSDictionary. @param dict COSDictionary containing seed value data
85 Initializes a new PDSeedValueCertificate object from a COSDictionary. @param dict COSDictionary containing certificate data
86 Initializes MDP (Multi-Dimensional Probability) seed value with given COS dictionary. @param dict COS dictionary containing seed value data
87 Initializes and sets the COSDictionary object. @param dict COSDictionary instance to be set
88 Initializes PDSignature with a COSDictionary. @param dict COSDictionary containing signature data
89 Initializes signature options with default page number (0).
90 Initializes PDFTemplateCreator with provided builder. @param templateBuilder PDF template creation configuration
91 Default constructor.
92 Initializes a PDField object with the given AcroForm, COS dictionary, and parent field. @param acroForm the containing AcroForm @param field the underlying COS dictionary @param parent the parent field in the non-terminal hierarchy
93 Initializes a new instance of PDXFAResource from an XFA base. @param xfaBase XFA object to initialize the resource with
94 Initializes a new instance of PDMeasureDictionary with the provided COSDictionary. @param dictionary COSDictionary containing measure data
95 Initializes PDNumberFormatDictionary with given COS dictionary. @param dictionary COS dictionary containing number format data
96 Initializes a new PDViewportDictionary instance from a COSDictionary. @param dictionary input dictionary containing viewport settings
97 Initializes a new PDThread instance from a given COSDictionary representation. @param t COSDictionary containing thread data
98 Initializes a new PDThreadBead instance from a COS dictionary. @param b COS dictionary containing bead data
99 Initializes viewer preferences from a COS dictionary. @param dic COSDictionary containing viewer preference data
100 Initializes PageDrawerParameters object with given settings. @param renderer PDFRenderer instance @param page PDPage to be rendered @param subsamplingAllowed whether subsampling is allowed @param destination RenderDestination for output @param renderingHints RenderingHints for optimization @param imageDownscalingOptimizationThreshold threshold value
101 Creates a new PositionWrapper instance from a TextPosition object.
102 Initializes a Matrix object with default values.
103 Initializes a new Matrix instance from a 1D array of floats. @param src the source float array to initialize the matrix with
104 Initializes a Matrix object with given values. @param a, b, c, d, e, f float values to populate matrix
105 Constructor to initialize XMLUtil instance.
106 Initializes a new instance of the PDFStreamEngine.
107 Masks operator in OperatorProcessor with m2 and m1 values. @param op OperatorProcessor instance to modify
108 Sets the mask character to a specific value, validating it against allowed range. @param term character code to validate and set as terminator
109 Sets page split length and validates input value. @param split number of pages to split
110 Sets the start page mask value. @param start non-negative integer representing start page
111 Sets the end page mask value. @param end non-negative integer end page value
112 Sets mask leniency flag. @param lenient true to enable leniency, false otherwise
113 Initializes CompressParameters with specified object stream size. @param objectStreamSize non-negative integer representing data size
114 Initializes PDResources with given dictionaries and caches. @param resourceDictionary COS dictionary containing resource data @param resourceCache cache for resource objects @param directFontCache cache for direct font references
115 Sets the blending mode. @param blendMode selected blending mode
116 Initializes a PDFieldTree with the given PDAcroForm as root. @param acroForm PDAcroForm object, must not be null
117 Returns a mask for function length. @throws IllegalStateException if OutputStream is still open
118 Initializes a new instance of the PDFMergerUtility class with an empty list of source PDF files.
119 Initializes a new COSWriter object stream with the specified compression pool. @param compressionPool instance of compression pool to use
120 Initializes a new instance of PublicKeyProtectionPolicy.
121 Resets text clippings collection.
122 Applies mask to file content and stores it in sources.
123 Updates mask value in sources based on input from RandomAccessRead. @param source input data to update mask
124 Masks instruction set by name. @param name unique identifier of instruction set to mask.
125 Masks instructions in the given sequence. @param child InstructionSequence to mask
126 Masks public key of specified recipient. @param recipient PublicKeyRecipient object to mask
127 Applies mask to specified region. @param regionName unique region identifier @param rect rectangular area for masking
128 Sets the current cross-reference trailer object. @param trailer COSDictionary representing the new trailer
129 Retrieves a COSBase instance using the provided key. @param key unique identifier in key pool
130 Retrieves an operator by name from the internal operators map. @param operatorName unique operator identifier
131 Converts Unicode sequence to font name, returning '.notdef' for unknown sequences.
132 Handles exceptions raised during operator execution. @param operator current operator @param operands list of operands @param exception thrown IOException
133 Retrieves and returns a PDGraphicsState instance from the graphics stack.
134 Clears graphics stack.
135 Returns a mask value from the graphics stack.
136 Computes a point in 2D space using the given coefficients. @param x x-coordinate of the input point @param y y-coordinate of the input point @return resulting Point2D object
137 Decrements the level counter and logs an error if it reaches zero.
138 Applies mask operation using provided integer value. @param value integer value to be applied
139 Throws exception if COSStream has been closed. @throws IOException if stream is closed
140 Throws an IOException when attempting to reset the system.
141 Throws an exception when attempting to reset (mask) the function.
142 Returns the PDEncryption object.
143 Returns the access permission mask for the parsed document. @throws IOException if document has not been parsed
144 Constructs an InvalidPasswordException with a custom error message. @param message detailed description of password validation failure
145 Constructs an Operator object from a given string, enforcing no leading '/'. @param aOperator unique operator identifier
146 Returns string representation of PDF operator. @return stringified PDFOperator instance
147 Returns the function mask string representation. @return Function mask string in format COSArray{objects}
148 Returns a string representation of the COSObject.
149 Retrieves a COS filter by name and returns it. @param filterName name of the filter to fetch @return Filter object or throws IOException on invalid filter name
150 Checks if all operands match a specific class. @param operands list of COSBase objects to check @param clazz target class type @return true if all operands are instances of the class, false otherwise
151 Sets instruction M1 with given float value. @param value input float value to be masked
152 Configures the visible sign designer with specified image width. @param width new image width
153 Configures designer with visible sign parameters. @param height image height
154 Calculates the squared Euclidean distance between two points. @param ps starting point @param pe ending point @return squared distance value
155 Calculates the cross product of two vectors formed by points. @param p point to calculate vector from @param p1 reference point @param p2 second reference point @return cross product value or 0 if vectors are parallel
156 Initializes a new instance of PDMarkedContent with the specified tag and properties. @param tag COSName representing the marked content type @param properties COSDictionary containing additional metadata
157 Returns a string pattern using CosName.PATTERN.m1(). @return string pattern value.
158 Returns shading function mask string. @return Shading function name as string.
159 Returns a string representation of the function mask.
160 Applies mask function to COSName.
161 Applies mask to terminal fields. @param fields list of fields to process
162 Checks if all mask bits are zero.
163 Computes a factorized mask array based on the given factor and domain. @return An int array containing the computed mask values
164 Computes a mask array based on the given factor and domain. @return int array representing the computed mask values
165 Initializes and returns a list of byte arrays representing the code table.
166 Applies mask operation to the provided list of RandomAccessRead objects. @param sourcesList list of read operations to be masked
167 Calls method m1 on 'objects' with given index. @param index input parameter for method m1
168 Delegates to actual instance's m1 method with specified index. @param index index value to be passed to m1
169 Calls the M1 method on Objects class. Returns the result of this operation.
170 Calls and returns result of actual's m1() method. @return result of m1() method on actual object.
171 Returns a flag integer from the m1() method of the 'recipients' object.
172 Calls m1() on objects and returns result.
173 Calls actual implementation of m1().
174 Checks if the provided PublicKeyRecipient matches a mask. @param recipient PublicKeyRecipient object to check @return true if recipient matches the mask, false otherwise
175 Returns an iterator of COSBase objects. @return Iterator containing COSBase elements or null if empty.
176 Delegates to actual iterator implementation. @return Iterator instance with actual data
177 Returns an iterator over public key recipients. @return Iterator of PublicKeyRecipient objects
178 Creates a list of objects with COSBase type mask. @return List of COSBase objects
179 Filters COSName objects and returns their names as a list.
180 Extracts COSString values from the object graph and returns them as a list. @return List of COSString values or empty if none found
181 Recursively unwraps Boolean wrappers to primitive boolean values. @param value wrapper object containing a boolean value @return primitive boolean value or null if input is null
182 Returns a formatted string mask using the provided value.
183 Writes TRUE or FALSE value to OutputStream. @param output target stream for writing
184 Writes zero-byte mask to OutputStream. @param output OutputStream instance
185 Masks input byte array with custom function using output stream. @param data input byte array to be masked
186 Retrieves a set of COS name and base entries. @return set of COS entries or empty set if none found
187 Compares two entries using their 'm1' methods and returns true if they differ. @param oldEntry the original entry to compare @param newEntry the new entry to compare with @return true if the entries are different, false otherwise
188 Calls item-specific method m1. @return result of underlying m1 operation
189 Retrieves a COSBase object from the 'items' collection based on the given key. @param key unique identifier or name of the item to retrieve
190 Delegates to items instance for retrieving COSName set.
191 Performs an action on each item in the collection. @param action Consumer to process each item (name and base)
192 Returns a collection of COSBase objects. @return Collection of COSBase elements.
193 Sets mask for COS dictionary. @param dict COSDictionary instance to modify
194 Calls COSName-based search on items collection. @param name COSName object to search for
195 Extracts and returns an array of substrings from input string 's' separated by spaces.
196 Converts input string to integer using built-in static method. @param token string representation of an integer @return integer value or throws NumberFormatException if invalid
197 Returns function type as string. @return Function type identifier string
198 Sets encryption key length with validation. @param l valid key length (40, 128, or 256)
199 Sets the start page value for masking. @param startPageValue 1-based page number (must be > 0)
200 Sets the end page value for pagination. @param endPageValue 1-based page number (must be > 0)
201 Initializes BruteForceParser with COSDocument and COSParser. @param cosDocument input COS document @param cosParser COS parser instance
202 Initializes an empty XrefTrailer object with default table type.
203 Initializes a PDResources object from the given COSDictionary. @param resourceDictionary dictionary containing resources to initialize
204 Initializes PDResources object with provided dictionary and cache. @param resourceDictionary COSDictionary containing resource data @param resourceCache ResourceCache instance for caching resources
205 Initializes a map of mathematical and logical operators with their corresponding functions.
206 Initializes an AcroForm object from a PDF document and form dictionary. @param doc the underlying PDF document @param form the AcroForm dictionary
207 Returns mask value from byte position to XREF map.
208 Retrieves a COSObject from the pool using the provided COSObjectKey. @param key unique identifier for the COSObject
209 Applies mask to XREF table values. @param xrefTableValues map of COS object keys to masked values
210 Converts string to 32-bit floating-point mask value. @param token input string representation of a float
211 Clamps or returns infinity/minimum value for float. @param floatValue input float to process
212 Calculates the mask value based on text matrix conditions. @return float representing the calculated mask value
213 Compares float values with mask 1. @param o Object to compare (must be a COSFloat)
214 Calls M1 method on float value. @return integer result of M1 operation
215 Converts numeric value to string representation with scientific format. @return formatted String or null if valueAsString is already set
216 Writes "null" and a space to the OutputStream. @param output OutputStream to write to
217 Initializes COSIncrement with the given update origin. @param incrementOrigin COSUpdateInfo object containing increment details.
218 Initializes PDF clone utility with destination PDDocument. @param dest target document to clone into
219 Initializes the cache with stability enabled status. @param enableStableCache true to enable stable caching, false otherwise
220 Returns true if the mask condition is met. @return true if m1() and m2() both evaluate to true
221 Evaluates condition based on COBOL object and processed object. @param base COBOSBase object to evaluate @return true if condition is met, false otherwise
222 Checks if COSBase matches exclusion mask. @param base COSBase object to check @return true if match found, false otherwise
223 Calls the m1() method on the COSBase object, passing it to the objects instance. @param object COSBase object to process
224 Processes COSObject by applying mask operation. @param base COSObject to process
225 Closes TrueType font resources. @param ttf TrueTypeFont object to close
226 Retrieves a set of COS dictionaries representing annotation widgets. @param fields list of PDField objects @return Set of COS dictionaries or empty set if no widgets found
227 Initializes COS InputStream with provided input stream and list of decode results. @param input underlying input stream @param decodeResults list of decoded result objects
228 Initializes an ASCII85 decoder from the given input stream. @param is input stream containing encoded data
229 Initializes CCITT Fax decoder with input stream, columns, compression type and options. @param stream input stream to decode @param columns number of pixels per row @param type compression type (CCITT T4, T6 or modified Huffman RLE) @param options additional encoding options @param byteAligned whether to align bytes in output
230 Creates or retrieves a COSInteger instance for the given value within the specified range. @param val long value to be masked
231 Checks if object matches current instance's mask value. @param o Object to check @return true if object is a COSInteger with matching mask, false otherwise
232 Returns the string representation of a COSInt. @return formatted string in format "COSInt{value}"
233 Writes a formatted string to the OutputStream using ASCII encoding. @param output target OutputStream
234 Delegates to underlying actuals implementation. @param key arbitrary object key @return result of underlying operation or null if not found
235 Maps font name to its functional mask equivalent. @param fontName user-specified font name
236 Sets up font aliasing based on provided name and base name. @param alias unique font identifier @param baseName base font name to be aliased
237 Filters and selects export values based on conditions. @return List of filtered string values
238 Calls the "m1" method on the 'name' object and returns its result.
239 Writes ASCII-formatted comment to output stream, validating for newline presence. @param comment string to be written
240 Writes newline character to output stream.
241 Converts string to a hexadecimal mask. @param text input string @return hexadecimal character array representation of the input string
242 Constructs COSObjectKey with object number, generation, and stream index. @param num positive object number @param gen non-negative generation number @param index stream index
243 Returns an integer value using the custom Long.m1() method. @return result of Long.m1(numberAndGeneration) as an int
244 Calculates a value based on the first two elements of the 'single' array. If the second element is non-zero, returns a specific mathematical operation; otherwise, returns the first element.
245 Calculates mask value from single array elements. @return float mask value or single[4] if invalid
246 Initializes COSOutputStream with specified filters, parameters, output stream, and cache. @param filters list of filters to apply @param parameters dictionary of additional parameters @param output output stream to write to @param streamCache cache for random access streams
247 Initializes ASCII85OutputStream with the given OutputStream. @param out target output stream for encoded data
248 Constructs a COSStandardOutputStream instance with the specified output stream.
249 Initializes a COSStandardOutputStream with specified output stream and position. @param out the underlying OutputStream @param position the initial file position in bytes.
250 Closes cached streams and read views.
251 Closes cached streams and views, ensuring resources are freed.
252 Returns an array of bytes representing a mask.
253 Initializes MASK operation by processing incremental input and updating output stream. @throws IOException if I/O error occurs
254 Converts byte array to ASCII string mask. @return ASCII-formatted string representation of bytes
255 Recursively checks if document state is valid. @return true if state is valid, false otherwise
256 Converts byte array to string by mapping bytes to Unicode characters. @param bytes input byte array
257 Extracts a function mask from the input stream.
258 Converts Unicode string to byte array using UNI_TO_CODE mapping. @param text input string @return byte array representation of the string
259 Checks if character is a valid Unicode code point mask. @param character input character to check
260 Delegates key lookup to actual implementation. @param key object used for lookup @return true if lookup is successful, false otherwise
261 Checks if font name matches a specific mask. @param fontName name of the font to check @return true if font name matches, false otherwise
262 Returns a map of function IDs to names.
263 Returns a map of inverted bitmasks.
264 Disables or enables function masking based on the input flag. @param flag true to enable, false to disable (currently unsupported)
265 Reads and decodes Ascii85 data from input stream. @throws IOException if invalid data is encountered
266 Resets and calls superclass method m1().
267 Flushes and writes data to output stream, updating line breaks. @param b single byte value
268 Writes buffered data to output stream, flushing and resetting counters.
269 Pads password with ENCRYPT_PADDING to ensure consistent encryption length. @param password input password to pad
270 Writes output and logs warning if text mode was exited without calling endText(). @throws IOException if write operation fails
271 Writes byte array to output stream with specified formatting. @param xmp input byte array
272 Checks if page number is at function mask position. @param pageNumber current page index
273 Throws unsupported exception for JPX encoding.
274 Throws an exception when attempting to apply mask operation on map.
275 Disallows modifying the mask by throwing an exception. @param value float value to be ignored and rejected
276 Prevents modification by throwing an exception. @param value float value (not used)
277 Suppresses any attempts to modify the immutable class. @param value ignored; this method is intended to prevent modification
278 Prevents modification of immutable object by throwing an exception. @param value ignored due to immutability
279 Returns a string representing the function mask. @throws UnsupportedOperationException as this method is not yet implemented
280 Creates a visible sign designer instance with specified mask. @param signatureText text to be masked
281 Disables setting mask value by string.
282 Calculates the optimal compression level for ZIP output. @return Compression level value or -1 if failed
283 Delegates call to actual implementation.
284 Initializes a FlateFilterDecoderStream from an InputStream. @param inputStream input stream containing compressed data
285 Calls superclass method and inflates UI.
286 Initializes PDF structure.
287 Initializes image format parameters from BufferedImage. @param image input image data
288 Finds a unique identifier in the code table that matches the given pattern. @param codeTable table of byte arrays @param pattern pattern to match @return unique identifier or -1 if not found
289 Applies predictor to the given line of pixels. @param predictor prediction algorithm ID @param colors number of color components in the pixel data @param bitsPerComponent bit depth of each component @param columns number of pixels per row @param actline current line of pixel data @param lastline previous line of pixel data
290 Checks if COSObjectKey matches a specific mask in the key pool. @param key COSObjectKey to check
291 Registers a security handler with the given name and protection policy. @param name unique handler identifier @param securityHandler SecurityHandler implementation class @param protectionPolicy ProtectionPolicy implementation class
292 Checks if a string matches a specific mask. @param name input string to be validated
293 Converts integer code to corresponding boolean mask. @param code integer code to be converted @return true if conversion is successful, false otherwise
294 Escapes special XML characters in the input string. @param input String to be processed @return Escaped string representation of the input
295 Applies or clears mask based on bounding box. @param bbox rectangle defining the area to apply/clear mask
296 Encodes input string into byte array using custom encoding rules. @param s input string to encode
297 Closes and releases resources associated with the document. @throws IOException if any operation fails
298 Validates PDF document and FDF source for masking. @throws IOException on validation failure
299 Returns the function dictionary or stream dictionary. @return COSDictionary object representing the function dictionary or stream dictionary
300 Initializes PDXObject with given stream and subtype. @param stream PDStream object to initialize from @param subtype COSName representing the subtype of this object
301 Returns a COSStream instance by delegating to stream's m1() method.
302 Returns COSStream with metadata filtered.
303 Sets metadata from COSStream. @param metadata input COSStream object
304 Checks if any annotation matches the given widget. @param annotations list of PDAnnotations @param widget target PDAnnotationWidget @return true if a match is found, false otherwise
305 Compares two annotations for equality. @param o the annotation to compare with this instance @return true if equal, false otherwise
306 Delegates call to actuals.m1(), returning result as a set of K.
307 Checks if a specific signature field exists in the given iterator. @param fieldIterator iterator over PDF fields @param signatureField target PDSignatureField to search for @return true if found, false otherwise
308 Delegates execution to actuals' m1() method. @return collection of type V containing results
309 Initializes parser with a PDF source reader. @param pdfSource RandomAccessRead object containing PDF data
310 Recursively calls m2 with the result of m1. @throws IOException if an I/O error occurs
311 Adds or updates XRef entry for the given object key at specified offset. @param objKey COSObjectKey to be referenced @param offset long value representing the offset
312 Updates mask data by executing two operations: mapping code to name and vice versa.
313 Recursively calls m2 with results of m1 and returns result.
314 Checks for valid line break functionality. @param linebreak input data to analyze @return true if valid, false otherwise
315 Calculates a mask value based on the input parameter and stream data. @param bracesParameter input parameter
316 Evaluates a character against two masks. @param c the input character to check @return true if the character matches either mask, false otherwise
317 Reads and constructs a StringBuilder representing a numeric value. @throws IOException if the number exceeds MAX_LENGTH_LONG
318 Decodes ByteArrayOutputStream to a string, handling UTF-8 and alternative charset fallbacks. @param buffer input byte array stream @return decoded string or null if decoding fails
319 Verifies the next character matches a specific mask. @param ec expected character to match
320 Recursively calls m2 with result of m1. @throws IOException if an error occurs during recursion
321 Retrieves the start XREF value from the PDF document. @return The start XREF value as a long integer, or -1 if not found
322 Finds the last EOF marker in the XREF table. @return The ID of the last EOF marker or Long.MAX_VALUE if none found.
323 Extracts offsets of XRef tables from the input stream. @return List of table offsets or empty list if not found
324 Retrieves and returns the number of color components. @return int representing the number of color components or -1 if unknown
325 Fetches and resolves offsets for fixed XREF streams. @return List of resolved offsets
326 Resolves trailer counts by object key. @return map of object keys to trailer counts
327 Calculates the function mask offset by reading and processing file trailer. @return function mask offset or throws IOException if invalid
328 Performs a streaming match for the "ENDSTREAM" keyword. @param out output stream to write matched content @return function mask value
329 Initializes writer mode to Unicode. @see #wMode
330 Sets label item for a page range starting at specified startPage. @param startPage non-negative page number @param item PDPageLabelRange object to apply
331 Converts CID to Unicode and updates the given text. @param cid 16-bit identifier @param text string to be updated
332 Checks for binary data presence by parsing input buffer. @return true if only whitespace or EI marker; false otherwise
333 Evaluates mask value from source data. @throws IOException if error occurs during evaluation
334 Masks or updates the specified XReferenceEntry in stream data. @param entry reference entry to be masked or updated
335 Computes the mask values as an array of integers. @return int[] containing the calculated mask values
336 Updates the highest XRef object number if provided value is higher. @param highestXRefObjectNumber new highest XRef object number
337 Returns trailer from COSDictionary using FUNC_MASK. @return Trailer object or null if not found
338 Retrieves COSDictionary trailer from byte position map. @return trailer object or null if invalid
339 Fetches a set of referenced object numbers by comparing the input object state number. @param objstmObjNr unique object state identifier @return Set<Long> containing referenced object numbers or null if trailer is not resolved
340 Calculates the function mask by invoking nested methods. @return calculated mask value
341 Calculates the function mask using nested operations. @return The calculated function mask value as a long integer.
342 Generates a formatted string representation of a FreeReference object. @return String representation of the object
343 Returns the function mask value.
344 Calculates function mask by invoking m1 and m2 methods.
345 Returns a string representation of the object reference, including its key and type.
346 Calculates and returns the functional mask value. @return The calculated functional mask value as a long integer.
347 Calculates and returns the function mask value.
348 Returns a string representation of the ObjectStreamEntry. @return formatted string with entry details
349 Writes data to output stream with specified offset and length. @param b byte array to write @param off starting offset in the array @param len number of bytes to write
350 Advances output stream and writes value to it. @param b value to write
351 Executes mask-related operations. @throws IOException on I/O errors
352 Checks if parameters are compressed and delegates to underlying logic. @return true if compression is valid, false otherwise
353 Applies mask function to XReferenceEntry. @param entry XReferenceEntry object to process
354 Writes a COS reference mask to the output stream. @param output OutputStream to write to @param indirectReference COS object key for the indirect reference
355 Generates an array of mask values based on consecutive XReferenceEntry numbers. @param xRefEntriesList List of XReferenceEntry objects @return Long array representing the mask values
356 Creates and returns an MD5 hash message digest instance. @return MessageDigest object for MD5 hashing, or throws exception if algorithm not found
357 Returns an instance of SHA-1 MessageDigest.
358 Returns an instance of SHA-256 message digest.
359 Updates the FDFDocument with incremental data from the provided document. @param doc FDFDocument to process
360 Retrieves value from object pool.
361 Returns a list of COS object keys with masks applied. @return List of masked COS object key objects
362 Updates inverted mapping and user ID to name mapping for a given code. @param code unique identifier @param name new or updated name
363 Applies mask to region and area by name. @param regionName unique identifier of region
364 Formats decimal to specified number of fractional digits. @param fractionDigitsNumber number of fractional digits
365 Initializes a new content stream for the given PDF document. @param document the parent PDF document @param outputStream output stream to write to @param resources associated resources for this stream
366 Calculates and returns the weighted displacement Y value based on the input code. @param code unique identifier for calculation
367 Returns standard value if present, otherwise returns default value. @param standardValue expected value or null @return actual value (standardValue or defaultValue)
368 Scales image dimensions and updates rectangle parameters. @param percent scaling percentage @return PDVisibleSignDesigner instance for method chaining
369 Returns the width of the image as a mask value.
370 Returns image height as a mask value. @return image height in pixels
371 Applies rotation-specific transformations and updates dimensions. @return PDVisibleSignDesigner instance for method chaining
372 Creates an AffineTransform from a predefined set of values. @return preconfigured AffineTransform object
373 Encodes input text into M4 format. @param text input string to be encoded
374 Returns the Unicode character name for a given code point. @param codePoint unique Unicode code point identifier @return character name or ".notdef" if not found
375 Recursively fetches RenderState by resolving COSName. @param state COSName reference to resolve @return RenderState object or null if unresolved
376 Recursively fetches the base state of a COS object. @param state COSName object to retrieve base state from @return BaseState enum value or ON if input is null
377 Applies GSUB substitution rules to a list of code points and writes the resulting glyphs to a ByteArrayOutputStream. @param gsubWorker GSUB worker instance @param out output stream for writing glyphs @param font PDType0Font used for glyph lookup @param word input string with code points to process @return updated list of glyph IDs after substitution
378 Initializes a new PDDocument instance with the given COSDocument, source data and access permissions. @param doc COSDocument object @param source RandomAccessRead source data @param permission AccessPermission object
379 Initializes an FDFDocument object from a COSDocument and a source. @param doc the COSDocument to initialize @param source the RandomAccessRead source for the FDF file
380 Delegates execution to actual implementation of m1().
381 Delegates array processing to actual implementation. @param a input array of type X @return processed array of type X or null if failed
382 Delegates call to actual object's m1 method. @param o Object to pass to m1 method
383 Delegates collection operation to actual instance. @param c arbitrary collection of elements
384 Iterates through collection and removes items matching a condition. @param c Collection to process @return true if removals were made, false otherwise
385 Removes items from array based on COSObjectable equality checks. @param c collection of items to process @return true if any removals were made, false otherwise
386 Delegates call to actual instance's m1 method. @param o arbitrary object reference @return true if m1 returns true, false otherwise
387 Calls the m1() method on the actual object.
388 Delegates to actual instance's m1 method. @param o object to pass to m1 method
389 Delegates to actual implementation to fetch iterator. @return iterator over elements of type E or null if not found
390 Retrieves a list iterator at the specified index. @param index position to retrieve iterator for @return ListIterator object or null if invalid index
391 Delegates list retrieval to actual implementation. @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive) @return List of elements or empty if out of bounds
392 Delegates call to actual implementation of m1. @param value input object to process @return result of processing (true/false)
393 Returns a set of key-value entries from actuals.m1().
394 Returns a set of predefined function masks. @return Set of String values representing function masks
395 Delegates call to actuals implementation.
396 Creates COSObjectable from COSBase, applying masking function. @param base COSBase object @return COSObjectable result or throws IOException on error
397 Converts a numerical ID to a string of corresponding letters. @param num numerical identifier
398 Returns a function mask value using m1() from labels.
399 Returns page label range for specified start page. @param startPage starting page number
400 Returns a set of unique integer labels.
401 Returns an array of mask values from m1(). @return An array of float values representing the mask.
402 Initializes a PDColor object with the given components and color space. @param components array of color components (e.g. RGB or CMYK values) @param colorSpace associated color space (may be null)
403 Computes mask array based on color space and component values. @return 1D float array representing the computed mask
404 Initializes a CoordinateColorPair object with given point and color. @param p Point2D representing spatial coordinates @param c array of 3 floats for RGB color values
405 Returns a formatted string representing the function mask.
406 Calculates mask boundaries for a rectangular region. @return array of 4 integers representing the left, top, right, and bottom bounds
407 Retrieves and returns a functional mask from the stack. @return Number representing the functional mask or null if not found
408 Returns a function mask value from the stack. @return Function mask integer value
409 Retrieves a masked value from the stack. @return Masked float value
410 Sets mask instruction based on provided boolean value. @param value true to enable, false to disable mask functionality
411 Initializes ExecutionContext with an Operator set. @param operatorSet set of available operators for execution context
412 Returns a list of compiled patterns from the predefined expressions.
413 Initializes expert encoding table by adding entries to internal map.
414 Initializes Mac Roman Encoding with predefined table entries.
415 Initializes standard encodings from predefined table.
416 Initializes symbol encodings from predefined table.
417 Initializes WinAnsiEncoding with mappings from code points to names. Mapped codes greater than 40 map to bullet character for unused codes.
418 Initializes the Zapf Dingbats encoding by adding all entries from the predefined table. @param none
419 Concatenates string values from an object array into a comma-separated string. @param array object array containing string values @return concatenated string or empty string if array is empty
420 Converts float array to comma-separated string of hexadecimal values. @param array input float array @return string representation of the array or null if empty
421 Applies mask to specified text position. @param text TextPosition object to be masked
422 Applies mask functionality to the given marked content. @param markedContent PDMarkedContent object to be processed
423 Applies mask operation to PDXObject. @param xobject PDXObject instance to process
424 Enables or disables printing based on input and current read-only status. @param allowPrinting true to enable printing, false otherwise
425 Enables or disables modifications to the data based on the read-only state. @param allowModifications true to enable modifications, false otherwise
426 Toggles extraction mask based on allowExtraction flag. @param allowExtraction true to enable or false to disable extraction
427 Enables or disables annotation modification. @param allowAnnotationModification true to enable, false to disable
428 Enables or disables form filling functionality. @param allowFillingInForm true to enable, false to disable
429 Enables or disables mask extraction based on accessibility requirements. @param allowExtraction true to enable extraction, false otherwise
430 Enables or disables document assembly based on the input flag. @param allowAssembly true to enable, false to disable assembly
431 Updates print faithful mask based on specified flag. @param canPrintFaithful true to enable or false to disable faithful printing
432 Returns true if mask bit is set. @return true if mask bit is set, false otherwise
433 Returns true if modification bit is set.
434 Returns true if the FUNC_MASK bit is set. @return true if the bit is set, false otherwise
435 Returns whether bit is set in modify annotations mask.
436 Returns true if mask bit is set. @return true if mask bit is set, false otherwise
437 Returns true if accessibility bit is set.
438 Returns true if document bit is assembled.
439 Returns true if faithful print bit is set.
440 Retrieves a private key from the keystore. @throws KeyStoreException if the key cannot be retrieved
441 Returns a secure random instance, potentially overridden by a custom implementation.
442 Encrypts and mixes key bytes with internal salt. @param key input byte array to be mixed
443 Encrypts a byte using the given salt array and outputs to the provided OutputStream. @param aByte input byte to encrypt @param output OutputStream to write encrypted result to
444 Removes diacritics and normalizes Unicode characters in a string. @param str input string @return normalized string without diacritics
445 Checks if a Unicode codepoint matches any of the specified functions. @param codepoint Unicode codepoint value @return true if the codepoint represents a function, false otherwise
446 Calculates the function mask based on key length and protection policy. @return integer value representing the function mask (1, 2, 4, or 5)
447 Returns the configured Bouncy Castle provider.
448 Extracts text content from a given XML node. @param node the input XML node
449 Writes input text to output stream with masking. @param text user input text to be masked
450 Retrieves or creates a CMap instance by name. @param cMapName unique identifier for the CMap @return existing or newly created CMap object
451 Parses a RandomAccessRead object into a CMap. @param randomAccessRead input data to parse @return parsed CMap or null if parsing fails
452 Extracts function masks from a PostScript name. @param postScriptName input PostScript name
453 Computes Bresenham's line algorithm to generate points between two coordinates. @param x0 starting X-coordinate @param y0 starting Y-coordinate @param x1 ending X-coordinate @param y1 ending Y-coordinate @return set of Point objects representing the line
454 Computes a bitmask from an array of 2D points. @param p array of Point2D objects @return int bitmask value
455 Stores a FontInfo and its corresponding FontBoxFont in the cache.
456 Retrieves cached FontBoxFont instance by ID from the cache. @param info unique FontInfo identifier @return cached FontBoxFont object or null if not found in cache
457 Sets aliasing mask for font name. @param baseName base font name
458 Replaces occurrences of a substring with a specified string. @param match the substring to find @param replace the replacement string
459 Retrieves FontInfo by name and format. @param format FontFormat to match @param postScriptName Postscript font name @return FontInfo object or null if not found/compatible
460 Processes PostScript name and returns list of masks. @param postScriptName input PostScript string
461 Converts font code to name. @param code font code value @return font name or "notdef" if unknown
462 Finds the optimal font match by iterating through the queue. @param queue priority queue of FontMatch objects @return the best matching FontMatch object
463 Retrieves character string for given CID. @param cid unique character identifier @return Type2CharString object or null if not found
464 Returns a mask value by invoking m2() on an instance returned by m1(). @param code input code to be processed
465 Converts color space components to RGB integer value.
466 Calculates a color value by interpolating between group and backdrop RGB values. @param groupRGB RGB value of the group @param backdropRGB RGB value of the backdrop @param shift bit shift for extracting color components @param alphaFactor interpolation factor (0.0-1.0) @return interpolated color component value (0-255)
467 Returns a byte array containing the specified mask.
468 Returns a glyph list with mask functionality enabled. @return GlyphList instance with mask applied
469 Initializes cmap data structures by parsing the TTF file. @throws IOException if I/O error occurs
470 Parses and loads font metrics for given font name. @param fontName unique font identifier
471 Checks if a TrueType font is functional. @param ttf TrueTypeFont object to check @return true if the font is functional, false otherwise
472 Checks if a TrueType font supports subsetting. @param ttf TrueTypeFont object @return true if supported, false otherwise
473 Generates a FUNC_MASK string from the given gidToCid map. @param gidToCid mapping of group IDs to corresponding character codes
474 Converts user-provided string to its corresponding Unicode representation. @param name input string @return Unicode character or null if not found
475 Encodes FontMetrics into Type1 encoding format. @param fontMetrics font metrics to encode
476 Initializes a PDColor object with specified components, pattern name, and color space. @param components array of color components @param patternName COSName for the pattern @param colorSpace PDColorSpace to associate with this color
477 Creates a BufferedImage with the specified WritableRaster and ColorSpace. @param raster WritableRaster to associate with the image @param awtColorSpace ColorSpace for the image
478 Creates a masked BufferedImage from a WritableRaster and ColorSpace. @param raster Writable image data @param colorSpace Color model for the output image @return Masked BufferedImage or null if conversion fails
479 Checks if profile is sRGB by parsing model string. @param profile ICC_Profile object to check @return true if sRGB, false otherwise
480 Determines the color space type based on ICC profile or alternate color space settings.
481 Creates a PDImageXObject from a given BufferedImage and PDDocument. @param document PDDocument instance @param image BufferedImage to convert
482 Initializes PredictorEncoder with the provided PDDocument and BufferedImage. @param document PDDocument instance @param image BufferedImage to be encoded
483 Resizes and optionally interpolates the given BufferedImage. @param image the original image @param width the desired width @param height the desired height @param type the desired image type @param interpolate whether to apply interpolation (true) or not (false) @return the resized BufferedImage or null on failure
484 Returns COS dictionary with function mask values.
485 Parses PNG image data and extracts relevant information. @param imageData the PNG image data bytes @return a PNGConverterState object containing extracted information or null if invalid
486 Combines IDAT chunks into a single input stream. @param state PNGConverterState object containing IDAT chunks @return MultipleInputStream object with concatenated IDAT data
487 Copies and assigns a 2D float array as patch corner color. @param color 2D array of floats representing color values
488 Calculates the area of clipped content. @return Area object representing the clipped region
489 Initializes PlainText object with a list of paragraph values. @param listValue collection of paragraph text strings
490 Returns the function mask value from the dictionary. @return Function mask integer value
491 Returns an AffineTransform representing a translation by the negative of the minimum bounding box coordinates.
492 Computes functional mask parameters based on input values. @param advInterm intermediate advection value @param advCorner corner advection value @param k curvature factor @param r radius value @param length total length @param array output array to store alpha and dx values @return number of iterations (n)
493 Calculates the FUNC_MASK value based on input points, radius, and curl advance. @param pt current point @param ptNext next point @param r radius @param curlAdv curl advance @return FUNC_MASK value or 0.0 if invalid
494 Applies masking function on input points based on convexity test result. @param points array of Point2D objects to process
495 Creates an array of Point2D.Double objects representing the boundary of an ellipse. @param left left x-coordinate @param bottom bottom y-coordinate @param right right x-coordinate @param top top y-coordinate @return array of points defining the ellipse's boundary
496 Checks if a GeneralPath represents a mask by iterating through its segments. @param path the GeneralPath to check @return true if the path is a valid mask, false otherwise
497 Calculates function mask value using m1(). @return The calculated float value.
498 Initializes visible sign designer with mask values at specified points. @param x horizontal position @param y vertical position
499 Initializes designer with transform mask. @param affineTransform affine transformation to apply
500 Constructs a new PDPageFitDestination instance from a COS array. @param arr COS array containing destination parameters
501 Constructs a PDF page fit height destination from an array.
502 Initializes a new PDPageFitRectangleDestination instance from a COS array. @param arr COS array containing destination parameters
503 Constructs a destination with fit-to-width page layout from given COS array.
504 Constructs a PDF page destination from an array. @param arr COSArray containing destination coordinates
505 Validates that a PDOutlineItem has no children.
506 Creates an iterator over masked PDF outline items. @return iterable collection of PDOutlineItem objects
507 Sorts the key-value pairs in ascending order using the BY_VALUE_COMPARATOR. @param pairs List of KeyValue objects to be sorted
508 Sorts list of key-value pairs by key using BY_KEY_COMPARATOR comparator. @param pairs list of KeyValue objects to be sorted
509 Applies mask to graphical output. @param renderingHints rendering hints and options
510 Applies a mask transformation to the given path. @param linePath input path to transform @return transformed path or original if no scaling occurs
511 Calculates optimal subsampling factor based on image and transform. @param pdImage image data @param at affine transformation @return optimal subsampling factor (1-8)
512 Rounds input number to nearest multiple of 5. @param num input double value @return rounded integer value
513 Calculates the mask value based on rotation. @param rotation angle of rotation in degrees @return mask value or 0 if rotation is not applicable
514 Calculates the mask value based on rotation angle. @param rotation rotation angle in degrees
515 Calculates the mask position based on rotation. @param rotation angle of rotation in degrees @return horizontal position of mask as a float value
516 Writes M2 representation of given TextPosition to output stream. @param text TextPosition object containing position data
517 Returns function mask value using m1() method.
518 Generates a mask string based on the specified region name. @param regionName name of the region to generate mask for
519 Generates M2 mask based on LTR orientation. @param isLTR true if layout is left-to-right, false otherwise
520 Generates and outputs a mask value using the m1() function.
521 Writes mask data to output stream. Uses result from m1() function. @throws IOException if write operation fails
522 Outputs the result of the m1 function as binary data. @throws IOException if an I/O error occurs
523 Handles paragraph formatting by toggling paragraph flag and writing output.
524 Outputs function mask using result of m1().
525 Writes function mask data to output stream.
526 Finds and returns the first matching pattern from the list. @param string input string to search @param patterns list of Pattern objects to match against
527 Normalizes Unicode bidirectional text by mirroring characters as needed. @param word input string to be normalized
528 Parses ASCII input stream, extracting and processing field data. @param inputStream Input stream containing ASCII-formatted data
529 Returns a formatted string with Arabic right-to-left code points masked.
530 Processes text position and updates character list accordingly. @param text TextPosition object to process
531 Checks if the input text matches a specific formatting mask. @return true if the text is valid, false otherwise
532 Formats a TimeZone object as GMT offset string. @param tz TimeZone to format
533 Converts a byte to a hexadecimal string mask. @param b input byte value @return two-character hex string representation (e.g. "AB") or empty string if invalid
534 Converts a byte array to a hexadecimal string representation. @param bytes input byte array
535 Returns 2-byte mask from input byte. @param b single byte to process
536 Converts binary byte array to ASCII byte array with each byte represented as two hexadecimal characters. @param bytes binary byte array @return ASCII byte array or null if input is null
537 Writes masked byte values to output stream. @param b input byte value @param output stream for writing masked bytes
538 Encodes or decodes a base64 value using a custom mask. @param base64Value input base64 string @return encoded/decoded byte array
539 Partitions the input array by recursively merging smaller subarrays. @param arr original array @param aux auxiliary array for temporary storage @param from starting index of subarray @param mid middle index of subarray @param to ending index of subarray @param cmp comparator function for sorting
540 Initializes a Matrix instance from an AffineTransform. @param at AffineTransform to extract matrix values from
541 Applies transformation to 2D point using linear combination. @param point input point coordinates
542 Converts float value to ASCII buffer with specified number of fraction digits. @param value input floating point value @param maxFractionDigits maximum number of fractional digits @param asciiBuffer output byte array for result @return length of ASCII representation, or -1 if invalid input
543 Retrieves the PDFBox version as a string from the embedded properties file. @return The version string or null if loading fails
544 Parses XML from InputStream, disallowing DTDs and external entities. @param is input stream containing XML data @param nsAware whether to be namespace-aware or not @return Document object representing parsed XML, or null if parsing fails
545 Fetches a value from the trie by traversing the nodes based on input bytes. @param bytes array of input bytes @return T object associated with the path or null if not found
546 Initializes COSBoolean with specified boolean value. @param aValue true or false value to set
547 Initializes COSName with specified name.
548 Private constructor to prevent instantiation of COSNull singleton.
549 Creates a COSString object from a byte array with optional hex encoding. @param bytes input byte data @param forceHex whether to enforce hex representation (default false)
550 Initializes a new COSDictionary instance with an internal COSUpdateState.
551 Initializes a COSObject instance with the given COSBase object. @param object COSBase object to initialize from
552 Initializes a COSObject instance with the given COSBase and ICOSParser. @param object COSBase object to wrap @param parser ICOSParser for parsing and validation
553 Initializes a COSObject instance with a given key and parser. @param key unique object identifier @param parser COS parser instance for parsing the object
554 Initializes DecodeOptions with rectangle bounds. @param x left coordinate @param y top coordinate @param width rectangle width @param height rectangle height
555 Constructs a new FreeXReference with the given COS object key and next free object ID. @param key unique identifier for the COS object @param nextFreeObject ID of the next available free object
556 Creates a new XReference for an Object Stream entry. @param objectStreamIndex index of the object stream @param key COSObjectKey instance @param object COSBase representing the object @param parentKey COSObjectKey instance for parent object (if applicable)
557 Initializes DefaultResourceCacheCreate with default settings.
558 Initializes a new instance of the wrapper class with the specified COS dictionary.
559 Constructs a PDAttributeObject instance from a COSDictionary. @param dictionary COS dictionary containing attribute data
560 Constructs a PDUserProperty object from a COSDictionary and PDUserAttributeObject. @param dictionary COSDictionary containing property data @param userAttributeObject associated PDUserAttributeObject
561 Constructs an outline node from a COS dictionary.
562 Constructs a PDTransition instance from a COS dictionary. @param dictionary COS dictionary containing transition data
563 Initializes a PDDestinationNameTreeNode from a given COS dictionary.
564 Initializes an embedded files name tree node from a dictionary. @param dic COSDictionary containing node data
565 Constructs a PDJavascriptNameTreeNode instance from a COS dictionary. @param dic COS dictionary containing node data
566 Constructs a PDStructureElementNameTreeNode instance from a COS dictionary.
567 Creates a PDNumberTreeNode instance from the given COSDictionary. @param dic COSDictionary to construct the tree node with
568 Initializes a new instance of PDMetadata from a COS stream. @param str COS stream containing metadata data
569 Initializes a new PDObjectStream instance from the provided COSStream. @param str COSStream object to wrap
570 Initializes an embedded file object from a COS stream. @param str COS stream containing embedded file data
571 Initializes a PDFunction object from a COSBase representation. @param function COSBase object to initialize from
572 Initializes PDXObject with stream and subtype. @param stream input stream to initialize from @param subtype specific type of XObject (e.g. Form XObject)
573 Initializes a new instance of PDStructureElement from a given COS dictionary. @param dic COS dictionary containing structure element data
574 Constructs a PDStructureTreeRoot object from a COS dictionary. @param dic COS dictionary containing tree structure data
575 Initializes an empty SecurityHandler instance.
576 Initializes SecurityHandler with a specified protection policy. @param protectionPolicy policy governing encryption and security
577 Initializes an instance of FDFAnnotationCaret from a COS dictionary. @param a COS dictionary containing annotation caret data.
578 Constructs an FDFAnnotationCircle object from a COS dictionary. @param a COS dictionary containing annotation circle data
579 Initializes an instance of FDFAnnotationFileAttachment from COS dictionary. @param a COS dictionary containing attachment data
580 Initializes an instance of FDFAnnotationFreeText from a COS dictionary.
581 Initializes an FDFAnnotationInk object from a COSDictionary.
582 Initializes an FDF annotation line from a COS dictionary. @param a COS dictionary containing annotation data
583 Constructs an FDFAnnotationLink object from a COS dictionary. @param a COS dictionary containing annotation link data
584 Constructs an FDFAnnotationPolygon object from a COS dictionary. @param a COSDictionary containing polygon data
585 Creates an instance of FDFAnnotationPolyline from a COS dictionary.
586 Constructs an FDFAnnotationSound object from a COSDictionary. @param a COS dictionary containing annotation sound data
587 Constructs an FDFAnnotationSquare object from a COS dictionary. @param a COS dictionary containing annotation square data
588 Constructs an FDFAnnotationStamp instance from a COS dictionary. @param a COS dictionary containing annotation stamp data
589 Constructs an instance of FDFAnnotationText from a COS dictionary.
590 Initializes an instance of FDFAnnotationTextMarkup from a COS dictionary.
591 Constructs PDPanoseClassification object from 10-byte PANOS mask.
592 Creates a composite graphic based on blend mode and alpha value. @param blendMode the blending mode to use @param constantAlpha the alpha value (clamped between 0 and 1)
593 Returns the transparency group attributes with FUNC_MASK or initializes it from the PDF dictionary.
594 Initializes PDShadingPattern from a COS dictionary. @param resourceDictionary COS dictionary containing pattern data
595 Initializes a PDTilingPattern object with given COSDictionary and ResourceCache. @param dictionary PDF document metadata @param resourceCache cache for shared resources
596 Initializes PDShadingType1 from COS dictionary. @param shadingDictionary dictionary containing shading data
597 Initializes an instance of PDShadingType2 from a COS dictionary.
598 Initializes axial shading paint with specified type and transformation matrix.
599 Initializes Radial Shading paint with given shading type and transformation matrix. @param shading PDShadingType3 object defining the radial shading characteristics @param matrix Matrix representing the transformation to apply
600 Initializes Type1ShadingPaint with given shading and transformation matrix. @param shading PDShadingType1 object @param matrix Transformation matrix
601 Initializes a Type4ShadingPaint object with the given shading and transformation matrix.
602 Initializes a new instance of Type 5 Shading Paint with the specified shading and transformation matrix. @param shading Type 5 shading data @param matrix Transformation matrix for the paint
603 Initializes a new instance of Type6ShadingPaint with specified shading and transformation. @param shading PDShadingType6 object @param matrix transformation matrix
604 Initializes a Type 7 Shading Paint object with specified shading and transformation. @param shading PDShadingType7 instance @param matrix transformation matrix
605 Constructs an instance from a COSDictionary representing an extended graphics state. @param dictionary COSDictionary containing extended graphics state parameters
606 Initializes a new instance from the given COS dictionary.
607 Initializes PlainText object from input text. @param textValue user-provided text content
608 Initializes an embedded goto action. @param a COS dictionary containing action parameters
609 Initializes an instance of PDActionGoTo from a COS dictionary. @param a COS dictionary containing action data
610 Constructs a Hide Action element from a COS dictionary. @param a COS dictionary containing action properties.
611 Initializes import data with given COS dictionary. @param a COS dictionary containing import data
612 Initializes JavaScript action from COS dictionary. @param a COS dictionary containing action data
613 Initializes a new instance of PDActionLaunch with the given dictionary. @param a COSDictionary containing action launch data
614 Initializes a new instance of PDActionMovie with a COS dictionary. @param a COS dictionary containing movie data.
615 Constructs a PDActionNamed instance from a COS dictionary. @param a COSDictionary containing action data
616 Initializes a remote goto action with the given dictionary data. @param a COSDictionary containing action settings
617 Initializes a new instance of the PDActionResetForm class from a COS dictionary. @param a the COS dictionary containing action parameters
618 Initializes an instance of PDActionSound from a COS dictionary. @param a COS dictionary containing sound properties
619 Initializes an action submit form with COS dictionary data. @param a COSDictionary containing form data and settings
620 Initializes an action thread with the given COS dictionary. @param a COS dictionary containing initialization data.
621 Initializes a new instance of PDActionURI with the given COS dictionary. @param a COS dictionary containing URI action data
622 Creates a list of KeyValue objects from corresponding key and value lists. @param key list of unique keys @param value list of corresponding values @return List of KeyValue pairs or empty list if inputs are empty
623 Constructs a non-terminal PDDocumentField instance. @param acroForm the containing ACROForm @param field the underlying COS dictionary @param parent the parent field in the document hierarchy
624 Constructs a PDAcroForm field with the specified properties. @param acroForm PDAcroForm instance @param field COSDictionary representing the field's structure @param parent PDNonTerminalField parent field (if any)
625 Constructs a linear measure dictionary from a given COS dictionary.
626 Returns a Matrix instance based on single.m1()'s result. @return A new Matrix object.
627 Creates a transformation matrix with translation by (x, y). @param x horizontal offset @param y vertical offset
628 Creates a transformation matrix with translation to (x,y). @param x horizontal offset @param y vertical offset
629 Creates a rotation matrix for the specified angle and translation. @param theta rotation angle in radians @param tx x-coordinate of translation @param ty y-coordinate of translation
630 Computes a masked function value from input vector. @param vector input vector
631 Scales vector components by scalar value. @param sxy scalar factor @return scaled Vector object
632 Creates a field tree with mask functionality. @return A new PDFieldTree instance.
633 Sets default mask value in the data structure. @param defaultValue new default value to set
634 Returns masked value at specified index. @param index position of value to mask @return T object with masked value
635 Calls m2 on the result of m1.
636 Calculates function mask value at specified index. @param index input index @return calculated mask value
637 Updates internal data structures with object and revision information. @param object the object to be updated @param revisionNumber the current revision number
638 Updates functional mask fields for the given object based on its revision number. @param object T object to update @param revisionNumber current revision number
639 Retrieves the encoding mask for a given COS name. @param name COSName object to determine encoding for @return Encoding mask (Standard, WinAnsi, etc.) or null if unknown
640 Creates a PDSoftMask object from the provided COSBase or COSDictionary. @param dictionary COSBase instance to create mask from @param resourceCache ResourceCache used for initialization @return PDSoftMask object or null if invalid
641 Finds the first visible PDAnnotationWidget and returns its index. @return Index of first visible widget, or -1 if none found
642 Wraps file path as a File object and delegates to overloaded version. @param source file path or name
643 Parses and resolves the trailer section in a PDF document. @throws IOException if an I/O error occurs
644 Retrieves an object from the pool using its key. @param key unique identifier for the object @return COSBase object or null if not found
645 Executes a sequence of instructions on the given context. @param context ExecutionContext object
646 Initializes COS document with provided stream cache creation function and parser. @param streamCacheCreateFunction function to create stream cache @param parser COS parser instance
647 Processes operator based on its type. @param operator Operator instance @param operands list of operand COSBase objects
648 Calls m1() to fetch an intermediate matrix result and then calls its m2() method.
649 Calls Matrix operation on the internal matrix.
650 Calls m2() on the result of m1().
651 Calls secondary matrix operation on result of primary operation. @param value input Matrix object
652 Calculates a mask value based on the input width. @param width input width value @return calculated mask value
653 Calculates and returns the functional mask color.
654 Applies a custom mask to the color using a three-step process. @param color PDColor object to be masked
655 Calculates color space mask using nested functions m1(), m2(), and m3().
656 Returns a color representing function mask. @return PDColor object representing function mask.
657 Applies mask to specified color. @param color PDColor object to be masked
658 Returns color space mask based on m1(), m2(), and m3() calculations.
659 Initializes an InputStream for reading, either from a written stream or a random access view. @throws IllegalStateException if writing is still in progress @throws IOException if no data has been written to the stream
660 Creates a stream writer with a mask filter. @return OutputStream object for writing data
661 Retrieves an ImageReader for a specified image format. @param formatName name of the image format @param errorCause cause of potential failure @return ImageReader object or throws MissingImageReaderException if not found
662 Retrieves an ImageReader instance for the given format name. @param formatName format name to search for @param errorCause cause of failure (for exception message) @throws MissingImageReaderException if no matching reader is found
663 Retrieves operator instance by name; prioritizes inline image data operators. @param operator name of the operator to fetch @return Operator object or null if not found
664 Returns a string representation of this COSArrayList instance. @return human-readable string containing contents of underlying ArrayList
665 Checks if a contour mask is valid based on control points. @param ctl array of Point2D objects representing control points
666 Calculates and returns the mask value based on the first element of rectArray.
667 Calculates and returns a float value from the 2nd element of rectArray. The calculation involves calling m1(1) on COSNumber object, then m2().
668 Calculates and returns a floating-point mask value from a COSNumber object. @return the calculated mask value as a float
669 Calculates the mask value from the third element of the rectangle array.
670 Calculates the mask value based on the font size. @return mask value as a float
671 Calculates a cosine-based mask value. @return floating-point mask value
672 Calculates a cosine-based mask value. @return cosine value as a float
673 Calculates and returns the value of a COSNumber instance. @return The result of the COSNumber operation
674 Calculates a function value (mask) using COSNumber at index 0. @return function mask as a float
675 Calculates and returns the cosine value of an angle in radians.
676 Calculates and returns a floating-point value based on cosine calculation. @return calculated float value
677 Retrieves a value from the index using default value if out of bounds. @param index integer index to access @param defaultValue fallback value if index is invalid @return retrieved or default value as an int
678 Retrieves a string value from the object at the specified index, or returns the default value if the index is out of range. @param index the array index @param defaultValue the default string to return if index is invalid @return the string value or the default value
679 Finds the index of the first item in the collection that matches a given object. @param object COSBase object to search for @return Index of matching item, or -1 if not found
680 Retrieves a list of filters from the input COSBase object. @return List of Filter objects
681 Initializes COSArrayList with actual list and COSArray. @param actualList underlying list of type E @param cosArray associated COSArray object
682 Computes function mask for input array. @param input input data array @return float array representing the computed mask
683 Retrieves a list of names based on the filtered collection. @return List of COSName objects or an empty list if none found
684 Retrieves filter masks from the stream. @return list of filter masks
685 Writes boolean value with mask to OutputStream. @param output OutputStream to write to @param cosBoolean boolean value to mask and write
686 Processes input string with ASCII mask. @param text input text to be processed
687 Writes a COSDictionary to the OutputStream. @param output OutputStream instance @param cosDictionary dictionary data
688 Updates user attribute mask based on entry changes. @param oldEntry previous entry object @param newEntry current entry object
689 Delegates call to map's m1() method. @return result of map.m1()
690 Retrieves COSObject instance associated with given key. @param key unique identifier
691 Tries to fetch COSBase by the given key. If first key fails, tries with the second. @param firstKey primary key for lookup @param secondKey secondary key for lookup (used if first fails) @return COSBase object or null if both keys fail
692 Retrieves and returns the mask value from the recipients array in the provided dictionary. @return the mask value as an integer
693 Retrieves a recipient mask string from the PDF dictionary. @param i index of the desired mask in the recipients array
694 Returns a COSBase object representing the function mask. @return COSBase object or COSInteger.ZERO if not found
695 Retrieves a set of unique function masks from the COS data. @return A set of string identifiers representing function masks
696 Collects attribute names from COSName hierarchy. @return list of attribute names
697 Masks specified keys in the trailer dictionary. @param trailerDict input dictionary to filter
698 Constructs and initializes a COSDictionary object by copying all entries from an existing dictionary. @param dict existing COSDictionary to copy entries from
699 Checks if a COSDictionary contains specific metadata flags. @param dictionary input PDF document dictionary @return true if no parent, author, or destination; false otherwise
700 Checks if there are missing or invalid widths. @return true if widths are incorrect, false otherwise
701 Returns true if missing width is enabled. @return True if missing width is enabled, false otherwise
702 Checks if mask is enabled. @return true if mask is enabled, false otherwise
703 Initializes an XrefTrailerObj with the given start position and type. @param startBytePos starting byte position @param type XRefType enum value
704 Parses and coerces a string representation of a float. @param aFloat string to parse, may be malformed
705 Returns a string representation of COSFloat mask.
706 Writes mask data to output stream. @param output OutputStream instance
707 Creates and returns a COSIncrement instance with updated information. @param updateInfo object containing incremental data to be applied
708 Initializes LayerUtility with a PDDocument instance. @param targetDoc PDDocument to be processed and cloned
709 Initializes a new instance of the DefaultResourceCache with default settings.
710 Recursively checks if update info is present. @param base COS object to check @return true if update info is found, false otherwise
711 Validates and processes MCID value. @param mcid unique identifier to process
712 Returns the mask value as a COS integer with 1 degree. @return COSInteger object representing the mask value
713 Writes a mask to the OutputStream using COSInteger and formatting. @param output OutputStream where the mask will be written @param cosInteger COSInteger object containing mask data
714 Writes formatted comment to output stream, throwing exception if it contains newline characters. @param comment input string to be written
715 Writes ASCII-formatted comment with mask to output stream. @param comment user-provided comment string
716 Writes ASCII-formatted comment with newline protection to output stream. @param comment input string to be written @throws IOException on write error
717 Writes ASCII-formatted comment to output stream, enforcing no newline. @param comment string comment to write
718 Constructs a COSObjectKey with default version (-1). @param num object number @param gen generation
719 Calculates a value based on the provided XReferenceEntry and internal state. @param xReferenceEntry XReferenceEntry object to consider @return calculated value or -1/-1 if invalid input
720 Returns the first element of the text matrix.
721 Returns the first element of the text matrix. @return First value in textMatrix, cast to float.
722 Initializes COSWriter with output stream and compression parameters. @param outputStream the output stream to write compressed data @param compressParameters compression settings for the writer
723 Initializes COSWriter with OutputStream and RandomAccessRead. @param outputStream stream to write to @param inputData source data for writing
724 Updates internal flag indicating whether data has been modified. @param updated true if data was updated, false otherwise
725 Extracts and decodes masked text from byte array. @return decoded string or null if not found
726 Initializes COSString with the given text and forceHex flag. @param text string to encode @param forceHex whether to use hex encoding if possible
727 Evaluates font mask based on conditions. @return true if valid, false otherwise
728 Reads bytes from internal buffer or file into provided array. @param data target byte array @param offset starting index in the array @param len number of bytes to read @return actual number of bytes written or -1 on error
729 Calls parent method and local operation, ensuring cleanup on failure or completion. @throws IOException if an I/O error occurs during execution
730 Handles output stream and logs warning for unended text mode.
731 Writes output to stream and logs potential text mode issue.
732 Ensures output stream is flushed when in text mode. Warns about missing endText() calls and flushes output.
733 Writes output to stream and logs warning if text mode was used without endText().
734 Fetches the next byte from the encoded data stream. @return Byte value or -1 if at EOF or invalid data
735 Reads and decodes specified number of bytes from input stream. @param data input byte array @param offset starting index in the array @param length number of bytes to read @return actual number of bytes read, or -1 if at end-of-file
736 Reads image data from input stream and performs image processing. @param stream InputStream containing image data
737 Encodes input stream into output stream using a dynamic code table. @param rawData input data to encode @param encoded output stream for encoded data @param parameters COSDictionary containing encoding parameters
738 Selects the compression method that yields the smallest estimated compressed sum. @return byte array for selected compression method
739 Iterates through XrefTrailer objects, executes their methods and resets current/resolved references.
740 Invokes m1() on various overlays and documents, then calls m2() methods.
741 Constructs a new PDFormXObject instance from a given PDF stream.
742 Initializes the parser with contents from the specified PD content stream. @param pdContentstream PDContentStream object containing document data
743 Initializes PDF parser with byte array data. @param bytes input byte array containing PDF document
744 Fetches a COSBase object by ID, positioning the underlying source stream. @param objectNumber unique COSBase identifier @return COSBase object or null if not found
745 Retrieves a mapping of object IDs to their corresponding mask values. @return A map of Long (object ID) to Integer (mask value), or null if failed
746 Initializes BuiltInEncoding with a map of encoding codes to names. @param codeToName mapping of encoding IDs to their corresponding names
747 Encodes function mask for a given Type 1 font Encoding. @param encoding input encoding instance @return encoded function mask as Type1Encoding object
748 Skips whitespace and consumes the first non-whitespace character.
749 Validates data by recursively calling m2 on nested objects. @throws IOException on validation failure
750 Extracts and formats a specific mask from the input stream. @throws IOException on parsing errors or end-of-file
751 Skips non-mask characters and sets mask flag. @throws IOException on I/O error
752 Returns the number of color components, initializing if not already set. @return int representing color component count
753 Returns the number of color components. @return int representing component count, or -1 if unknown
754 Calculates the offset for xref data based on the provided xrefOffset. @param xrefOffset input xref offset @return calculated offset or -1 if not found
755 Returns a flag indicating whether to mask function names. @return true if masking is enabled, false otherwise
756 Returns true if the function mask is set in the PDF file header. @throws IOException if an I/O error occurs while reading the header
757 Fetches a map of COS objects by processing object numbers and adjusting source position. @return Map of COSObjectKey to COSBase or empty if no objects found
758 Generates a masked encryption key from the object number and generation number. @param objectNumber unique identifier for the object @param genNumber generation number of the object @return byte array representing the masked encryption key
759 Initializes content stream with given appearance and output stream. @param appearance PDAppearanceStream object @param outputStream target output stream
760 Initializes a new page content stream object. @param doc the parent document @param appearance the associated appearance stream @param outputStream output stream for writing contents
761 Calculates and returns a Point2D with position (x, y) after applying transformation pipeline. @param x horizontal coordinate @param y vertical coordinate @return transformed point or null if error occurs
762 Applies transformation to the painting context. @param cm ColorModel object @return PaintContext object (result of internal call)
763 Updates the 'single' value using the given matrix and function m2. @param matrix input Matrix object
764 Updates the single array with masked values and applies transformation. @param tx x-coordinate of transformation @param ty y-coordinate of transformation
765 Scales the single array by factors sx and sy. @param sx horizontal scaling factor @param sy vertical scaling factor
766 Creates a mask matrix by applying m2(m1(single, other.single)) operation. @param other input matrix to be masked
767 Generates mask data for the given text and glyphs. @param gsubWorker GSUB worker object @param glyphIds set of glyph IDs to include in the mask @param font PDType0Font object for character rendering @param text input string to process @return byte array containing generated mask data or null on error
768 Creates a PDDocument instance with mask applied. @return PDDocument object
769 Constructs a new PDDocument instance from a COS document and input stream. @param doc COS document containing PDF data @param source input stream to read from
770 Resolves ProtectionPolicy to corresponding SecurityHandler instance. @param policy ProtectionPolicy object @return SecurityHandler instance or null if not found
771 Creates a SecurityHandler instance by name. @param name unique handler identifier @return SecurityHandler instance or null if not found
772 Validates a PDColor object by checking its components. @param color the color to validate @return true if valid, false otherwise
773 Checks if a PDColor object has valid components. @param color PDColor object to check @return true if the color has valid data, false otherwise
774 Initializes the MacOS Roman Encoding with predefined table entries.
775 Evaluates a composite mask condition by combining the results of eight individual boolean methods.
776 Evaluates multiple conditions and returns true if any condition is met. @return True if at least one condition is satisfied, false otherwise
777 Recursively writes each byte of input data to the specified OutputStream. @param data array of bytes to process @param output target stream to write to
778 Writes a subset of bytes to the specified OutputStream. @param data byte array containing data to write @param offset starting index within data array @param len number of bytes to write @param output OutputStream to write data to
779 Updates Unicode string and glyph widths for a given range, incorporating diacritical marks. @param i start index of the range @param diacritic TextPosition object to apply diacritical mark
780 Invokes recursive processing of text positions based on provided text. @param text input text to process @param textPositions list of text positions to iterate over
781 Initializes a new line segment with two points and their corresponding colors. @param p0 starting point of the line @param p1 ending point of the line @param c0 color at the start of the line @param c1 color at the end of the line
782 Initializes SoftMask with provided parameters. @param paint the Paint object @param mask the BufferedImage mask @param bboxDevice the device bounding box @param backdropColor the background color (optional) @param transferFunction the transfer function (identity if null)
783 Blends a backdrop image into a group image at specified offsets. @param backdrop the backdrop image to blend @param offsetX horizontal offset from group origin @param offsetY vertical offset from group origin
784 Retrieves FontMetrics for the specified font name, loading from cache or resource file if necessary. @param fontName unique font identifier @return FontMetrics object or null if not found
785 Initializes and loads a glyph list from an input stream. @param input InputStream containing glyph data @param numberOfEntries expected number of entries in the list
786 Copies and loads glyphs from existing list into a new GlyphList instance. @param glyphList existing GlyphList to copy @param input InputStream containing glyph data
787 Retrieves glyph ID by code, using various encoding and cmap strategies. @param code unique character code @return Glyph ID or 0 if not found
788 Retrieves a font glyph name by inputting the original string and applying mask rules. @param name input string to be masked
789 Resolves font glyph name using alternative names and Unicode mappings. @param name original font glyph name @return resolved font glyph name or ".notdef" if not found
790 Initializes color profile and conversion settings. @throws IOException if default CMYK profile cannot be loaded
791 Resizes and blends input image with mask. @param image original image @param mask overlay mask @param interpolateMask whether to interpolate missing pixel values in mask @param isSoft whether to apply soft blending or hard masking @param matte color correction matrix (null for no correction)
792 Validates a Chunk object by checking its CRC and bounds. @param chunk Chunk object to validate @return true if valid, false otherwise
793 Initializes a cubic Bezier curve with specified control points and level. @param ctrlPnts array of Point2D objects representing the curve's control points @param l the level of detail for the curve
794 Evaluates point p within a polygon based on degree and corners. @param p Point2D to test
795 Calculates the color at a given point based on degree of interpolation. @param p Point2D object representing the point
796 Converts GeneralPath to Path2D and processes it. @param path GeneralPath object to convert and process
797 Initializes path with area's bounds and smoothness flag. @param area area to be converted into a path
798 Applies clipping mask to the Graphics context. @param graphics Graphics2D object for rendering
799 Resets and reinitializes Graphics2D context for pattern rendering. @param g target graphics context
800 Computes final mask value by chaining m1 and m2 functions. @return final mask value as a float
801 Calculates initial text position for rendering. @param pageRotation rotation of the page (0, 90, 180, or 270) @param charCodes array of character codes to render
802 Calculates the mask value based on direction. @return Mask value for the given direction
803 Calculates and returns a mask value using rotation function m1.
804 Calculates the result of applying function m1 and then m2.
805 Calls overloaded m1 with default parameter value (true).
806 Processes non-paragraph content and outputs formatted result. @throws IOException if I/O error occurs
807 Generates pattern to mask function names in source code. @param pw PositionWrapper object containing text position and string
808 Normalizes and replaces Unicode characters with equivalent ASCII representations. @param word input string to be normalized
809 Formats date and time with DST offset. @param cal Calendar object to format @return Formatted string or null if input is null
810 Formats date and time with timezone offset. @param cal Calendar object to format @return formatted string in "YYYY-MM-DDTHH:MM:SS+/-ZZ:MM" format
811 Converts bytes to hexadecimal mask.
812 Sets CMS signature for incremental PDF output. @param cmsSignature byte array representing the signature
813 Encodes special characters in a byte array to a masked OutputStream. @param output OutputStream to write the encoded data
814 Processes each byte in the input array and writes it to the specified OutputStream. @param bytes input byte array @param output OutputStream to write processed data to
815 Sorts array using dual-pivot quicksort algorithm. @param arr input array to be sorted @param cmp comparator function for sorting elements of type T
816 Creates a new document from an input stream. @param is input stream containing document data
817 Determines the FileType based on input stream data. @param inputStream BufferedInputStream containing file data @return FileType enum value or throws IOException if invalid data
818 Initializes PDF stream engine with legacy operators.
819 Retrieves a COSName instance from cache or creates a new one. @param aName name to fetch or create @return COSName object or null if not found
820 Constructs a new COSString instance from a byte array. @param bytes input byte data to be converted
821 Initializes an empty COSArray instance.
822 Constructs a COSArray from a list of COS objects. @param cosObjectables list of COS objects to include in the array
823 Initializes COSStream with a cache instance. @param streamCache RandomAccessStreamCache to store streams
824 Creates an unmodifiable dictionary from the given COS dictionary. @param dict COS dictionary to wrap
825 Creates a new DecodeResult instance with an empty COS dictionary. @return DecodeResult object representing a masked decode result
826 Initializes a new instance of PDDocumentInformation with an empty dictionary.
827 Initializes a new instance of PDResources. @param none @return none (constructor)
828 Creates a COSDictionary from the provided map. @param someMap input map with name-value pairs
829 Initializes a new instance of PDDictionaryWrapper with an empty dictionary.
830 Initializes a new PDNameTreeNode with an empty dictionary.
831 Initializes a PDNumberTreeNode with the given value class. @param valueClass the class of the object to be stored in this tree node
832 Constructs a new PDPageLabelRange instance from an empty dictionary.
833 Initializes a PDMarkInfo object with an empty COSDictionary.
834 Initializes an empty PDF property list.
835 Initializes an empty PDF box style object.
836 Initializes filter dictionary with default settings.
837 Initializes a PDEncryption object with an empty dictionary.
838 Initializes the FDF Catalog with an empty dictionary.
839 Initializes a new instance of FDFDictionary. Creates an empty COS dictionary.
840 Initializes an empty FDFField object with a new COSDictionary instance.
841 Initializes an empty FDF icon fit dictionary.
842 Initializes an empty JavaScript object.
843 Initializes an empty named page reference dictionary.
844 Initializes an empty PDF page with a COS dictionary.
845 Initializes an empty FDFPageInfo instance with a new COSDictionary.
846 Initializes an empty FDFTemplate instance with a new dictionary.
847 Initializes a new instance of PDDeviceNAttributes with an empty COS dictionary.
848 Initializes an empty device process with a new COS dictionary.
849 Initializes a new instance of PDShading with an empty dictionary.
850 Initializes an empty dictionary of additional actions.
851 Initializes annotation additional actions with an empty dictionary.
852 Initializes catalog additional actions with an empty dictionary.
853 Initializes an empty dictionary of additional form field actions.
854 Initializes page additional actions with an empty dictionary.
855 Initializes a new instance of PDTargetDirectory with an empty dictionary.
856 Initializes an empty URI dictionary.
857 Initializes an empty PDWindowsLaunchParams object.
858 Initializes a new instance of PDBorderEffectDictionary with an empty COSDictionary.
859 Initializes PDBorderStyleDictionary with an empty COSDictionary.
860 Initializes a new PDPropBuild object with an empty COSDictionary.
861 Initializes a new PDPropBuildDataDict object with an empty COSDictionary.
862 Initializes an empty PDSeedValueMDP object with a direct dictionary.
863 Initializes a new instance of PDSeedValueTimeStamp with an empty dictionary.
864 Initializes a PDField from an existing PDAcroForm. @param acroForm parent form containing this field
865 Initializes a new viewport dictionary instance.
866 Initializes viewer preferences with an empty dictionary.
867 Initializes a COSObject with the given COSBase and key. @param object COSBase to assign @param objectKey COSObjectKey for this object
868 Constructs a new PD default attribute object from a COS dictionary.
869 Initializes a PDUserAttributeObject from a COSDictionary.
870 Initializes a standard attribute object from a COS dictionary. @param dictionary COS dictionary containing attribute data
871 Constructs a new PDOutlineItem instance from the given COS dictionary. @param dic COSDictionary containing item data
872 Retrieves PDMetadata from stream, returning null or an instance of PDMetadata. @return PDMetadata object or null if not found
873 Retrieves PDF metadata from the current document. @return PDMetadata object or null if not found
874 Creates a PDF object stream with mask functionality. @return PDObjectStream instance or null if failed
875 Initializes a new instance of PDFunctionType0 with the specified COSBase. @param function COSBase object containing function data
876 Initializes an instance of PDFunctionType3 from a COS stream. @param functionStream COS stream containing function data
877 Initializes a PostScript XObject from a COS stream. @param stream COS stream containing PostScript data
878 Initializes a new instance of the class from a PDF form XObject stream. @param stream COSStream object containing the XObject data
879 Initializes a new PDF form XObject instance from the given stream. @param stream COS stream containing the XObject data @param cache Resource cache for resolving resources
880 Constructs a new instance of PublicKeySecurityHandler.
881 Initializes a new instance of the StandardSecurityHandler.
882 Initializes the PublicKeySecurityHandler with a specified protection policy. @param publicKeyProtectionPolicy policy controlling public key security behavior
883 Initializes StandardSecurityHandler with a given protection policy. @param standardProtectionPolicy StandardProtectionPolicy instance to use
884 Initializes an annotation highlight with the given dictionary. @param a COSDictionary containing annotation highlight data
885 Initializes an FDFAnnotationSquiggly object from a COS dictionary. @param a COS dictionary containing annotation data
886 Creates an instance of FDFAnnotationStrikeOut from a COS dictionary. @param a COS dictionary containing strike out annotation attributes
887 Constructs an underline annotation using the provided COS dictionary. @param a COS dictionary containing annotation properties
888 Initializes a new PDTilingPattern with the given COSDictionary. @param dictionary COSDictionary containing pattern data
889 Initializes a new instance of PDShadingType3 from a COS dictionary. @param shadingDictionary dictionary containing type 3 shading data
890 Constructs a PDShadingType4 instance from a COS dictionary. @param shadingDictionary COS dictionary containing type 4 shading data
891 Initializes an instance of PDShadingType5 from a given COS dictionary. @param shadingDictionary COS dictionary containing type 5 shading data
892 Initializes a new PDButton instance with the given form, field, and parent.
893 Initializes a PDSignatureField object with the given parameters. @param acroForm the containing AcroForm @param field the underlying COSDictionary @param parent the non-terminal parent field
894 Initializes a Variable Text field in the AcroForm. @param acroForm form containing the field @param field COS dictionary for the field @param parent non-terminal field parenting this variable text field
895 Generates a unique field name by appending incrementing suffix to "Signature". @return Unique field name as String
896 Concatenates object and revision number pairs into a JSON-like string.
897 Returns a soft mask from the given PDF dictionary. @param dictionary COSBase object containing PDF data
898 Creates a new COSDocument instance from a given ICOSParser. @param parser ICOSParser object used to initialize the document
899 Creates a new COSDocument instance without a specific document ID.
900 Executes an operator on a list of COSBase objects. @param operation operator type @param arguments input data
901 Returns a marked content object based on the artifact marker. @param tag COS name to check for artifact marker @param properties COS dictionary containing additional data @return PDArtifactMarkedContent or PDMarkedContent depending on the tag
902 Calculates difference between two masked values. @return result of subtraction as a float value
903 Checks if point (x, y) is within the functional mask. @param x x-coordinate of the point @param y y-coordinate of the point @return true if point is within the mask, false otherwise
904 Calculates difference between two model values. @return Difference as a float value
905 Creates a GeneralPath by transforming and connecting points in the given matrix. @param matrix transformation matrix
906 Creates a GeneralPath representing a mask shape.
907 Returns a string representation of the function mask.
908 Calls m1 with default value of -1. @param index index to pass to m1
909 Redirects to overloaded method with default value. @param index index parameter @return result from overloaded method call
910 Creates a filtered output stream for PDF writing. @param filters COSBase filter to apply @return Filtered OutputStream instance
911 Initializes an image object from a PDF stream and resources. @param stream PDStream containing the image data @param resources PDResources for the image
912 Returns image file suffix based on the COSName filter list. @return image file suffix (e.g. "png", "jpg", etc.) or null if unknown
913 Writes a formatted float value to the output stream. @param real the float value to write
914 Formats decimal integer and writes it to output stream.
915 Applies mask functionality to input text. Calls sub-functions to perform specific masking operations.
916 Checks if mask value is zero. @return true if mask value equals 0, false otherwise
917 Parses and converts a string representation of a number to a COSNumber object. @param number input string
918 Writes float value to OutputStream with formatting. @param output OutputStream object @param cosFloat Float value to write
919 Calls M2 operation on result of M1 operation.
920 Generates a COSObjectKey for the given number and generation. @param num unique identifier @param gen generation value @return COSObjectKey instance or newly created one if not found in cache
921 Scans the source for object markers and updates search offsets. @throws IOException if an I/O error occurs
922 Builds a map of object stream offsets to COSObjectKey mappings. @return Map<Long, COSObjectKey> mapping of offsets to keys
923 Resolves XrefTrailer entries using the provided resolver. @param resolver object to resolve XrefTrailer entries
924 Fetches the COSObjectKey for a given offset, updating the key if necessary. @param objectKey initial object key @param offset search offset @param xrefOffset cross-reference offsets @return updated COSObjectKey or null if not found
925 Validates and processes an XRef table. @param startByteOffset starting offset for xref trailer resolver
926 Initializes a new COSWriter instance with the specified output stream. @param outputStream OutputStream to write compressed content to
927 Initializes COSWriter with objects to write and input data. @param objectsToWrite set of COSDictionaries to be written
928 Enables or disables mask functionality. @param flag true to enable, false to disable
929 Calls m1 with default parameter value.
930 Retrieves string value from index, falling back to default value if out of bounds. @param index array index @param defaultValue default string value when index is invalid @return String value at index or default value
931 Returns the function mask value from the file system.
932 Extracts mask value from destination, either as string or name. @return String representation of mask value or null if not found
933 Extracts a list of string values from the given items, indexed by pairIdx. @param items COSBase object to extract from @param pairIdx index into two-element arrays (0 or 1) @return List<String> containing extracted values; empty if not found
934 Extracts a list of mask values from the specified option. @return list of String values or empty list if not found
935 Retrieves the function mask from the DA attribute. @return String representing the function mask or null if invalid
936 Constructs a COSString instance from the specified text. @param text input string to be wrapped by the COSString object
937 Initializes Visible Sign Designer with an image stream. @param imageStream input stream containing the design image
938 Reads and processes mask design from file at specified path. @param path file system path to mask design file
939 Constructs a new PDTransparencyGroup instance from a given PDStream. @param stream input stream containing transparency group data
940 Parses COSDictionary from input stream. @param isDirect whether to parse directly @return COSDictionary object or null on error
941 Reads and formats a mask from the input stream. @return The formatted mask string or null on error
942 Verifies a character array against the input stream, throwing an IOException if mismatched. @param expectedString character array to match @param skipSpaces whether to ignore spaces in the comparison (default: false)
943 Builds a string mask based on input length. @param length maximum characters to read from input @return encoded string or null if invalid data encountered
944 Extracts and parses an integer value from a binary stream. @return parsed integer value or throws IOException if invalid
945 Parses and returns long value from buffer using m7 method. @throws IOException if parsing fails
946 Calculates and returns a fixed offset for an object's reference. @param objectOffset current object position @return corrected offset or 0 on failure
947 Encrypts user credentials based on provided revision and encryption settings. @param password user password @param owner user identifier @param permissions access rights @param id unique user ID @param encRevision encryption revision @param keyLengthInBytes key length in bytes @param encryptMetadata whether to encrypt metadata @return encrypted credentials or empty byte array for REVISION_5/6
948 Encrypts user password using RC4 algorithm with provided owner password. @param ownerPassword owner's password to derive encryption key @param userPassword user's password to encrypt @param encRevision encryption revision level @param length data length (must be 5 for REVISION_2) @return encrypted byte array or throws IOException on error
949 Applies mask operation to matrix based on given angle. @param theta input angle in radians
950 Applies 2D transformation to the model by calling nested functions. @param tx x-coordinate of the translation @param ty y-coordinate of the translation
951 Recursively calls m3 on the components of the input Vector. @param vector input vector with two components
952 Applies matrix multiplication with mask from 'b' to 'a'. @param a input matrix @param b matrix containing mask for multiplication @return resulting matrix after applying the mask
953 Initializes a new PDDocument instance from a COSDocument. @param cosDoc COSDocument object to import @param password password for encrypted document (null if none)
954 Recursively processes input text by extracting tokens and invoking this method on each token.
955 Returns cached AccessPermission instance or initializes it on first call.
956 Calculates revision mask based on version and access permissions. @param version system version
957 Decrypts/Encrypts data using a cipher with the provided key and IV. @param finalKey encryption key @param data input stream to process @param output output stream for encrypted/decrypted data @param decrypt whether to decrypt (true) or encrypt (false)
958 Encrypts/decrypts binary data using a cipher with provided key and IV. @param data InputStream containing encrypted/encrypted data @param output OutputStream to write decrypted/decrypted data @param decrypt whether to encrypt or decrypt the data
959 Encrypts input data using RC4 algorithm and writes to output stream. @param finalKey encryption key @param input data to encrypt @param output stream for encrypted data
960 Copies input stream to output stream in chunks. @param data input stream containing data to be copied @param output output stream where the data will be written
961 Returns a string with function mask applied. @param str input string to be processed @return modified string with function mask applied
962 Applies function mask to input string. @param str input string to process @return processed string or null if failed
963 Processes a list of words with text positions. @param line List of WordWithTextPositions objects
964 Retrieves FontBoxFont instance based on the specified format. @return FontBoxFont object or null if not found
965 Writes font information to cache file. @throws SecurityException if unable to write
966 Processes a list of files to fetch FSFontInfo objects from the disk cache. @param files list of File objects @return List<FSFontInfo> or null if font cache needs to be rebuilt
967 Updates internal font provider and fetches font info by name. @param fontProvider FontProvider instance to update
968 Initializes a shaded triangle object from given points and color data. @param p array of 3D points defining the triangle @param c array of RGB color values for the triangle's edges
969 Writes a CID font mask to the specified output stream. @param out OutputStream to write to
970 Loads a glyph list from the specified resource file. @param filename name of the glyph list resource @param numberOfEntries number of entries to read from the list @return GlyphList object or null if loading fails
971 Builds a cache map of GID to code mappings. @return Map of GIDs to corresponding codes
972 Validates PNG converter state. @param state PNGConverterState object to validate @return true if valid, false otherwise
973 Updates graphics state and text clippings based on rendering mode. @param none
974 Updates clipping paths and notifies graphics context. @param graphics graphics context to notify
975 Returns a sequence InputStream combining incremental input and increment part. @throws IOException if an I/O error occurs
976 Applies a diacritic mask to the input text. @param diacritic TextPosition object containing diacritic details
977 Checks if two TextPositions have significant overlap (> 15% width). @param tp2 TextPosition to check overlap with @return true if overlapping, false otherwise
978 Checks for overlapping rectangles between two TextPositions. @param tp2 second TextPosition to compare @return true if rectangles overlap, false otherwise
979 Performs initialization tasks (m1 and m2) to set up functionality. Throws IOException if any of these tasks fail.
980 Updates position based on line start and max height. @param position current position @param lastPosition previous position @param lastLineStartPosition start of previous line @param maxHeightForLine maximum height for line
981 Creates WordWithTextPositions object from given word and positions. @param word input word @param wordPositions list of text positions for the word
982 Writes a COSName object to an OutputStream using specified formatting. @param output OutputStream to write to @param cosName COSName object containing data to be written
983 Writes COSName to output stream with formatting. @param name COSName object to format and write
984 Formats byte array as ASCII or hexadecimal string. @param bytes input byte data @param forceHex forces hexadecimal representation even if ASCII @param output OutputStream to write formatted string
985 Applies a comparator to the specified list and updates its iterator. @param list input list @param cmp comparator to apply
986 Initializes PDF extractor with marked content operators. @param encoding PDF document encoding
987 Initializes PDFTextStripper with default marked content sequences.
988 Resolves COSName instance to COSBase. @param key input string to resolve @return COSBase object or null if not found
989 Recursively resolves COS name to internal representation. @param name name to resolve @return true if resolved successfully, false otherwise
990 Creates and returns a Filter object based on the given COS name. @param filterName COS name to create a Filter from
991 Parses and returns a COSName from the input stream. @return COSName object or null on error
992 Initializes PDColor object from COSArray and color space. @param array COSArray containing color data (components or name) @param colorSpace ColorSpace to associate with the color
993 Converts hexadecimal string to COSString. @param hex input hexadecimal string
994 Converts list of integers to COSArray using specified function.
995 Creates COSArray from list of string names. @param strings list of PDF object references @return COSArray containing PDF objects or null if empty
996 Converts a list of strings to a COSArray. @param strings list of string values
997 Initializes an empty COSArrayList instance. @param none @return none
998 Initializes COSArrayList with a given COSDictionary and key. @param dictionary the parent dictionary @param dictionaryKey unique identifier in the dictionary
999 Initializes a new instance of the page destination with an empty array.
1000 Initializes a rectangle with the specified coordinates and dimensions. @param x left X-coordinate @param y top Y-coordinate @param width rectangle's width @param height rectangle's height
1001 Initializes PDRectangle with bounding box coordinates. @param box BoundingBox object containing lower-left and upper-right corner values
1002 Applies filter masks to the stream. @param filters list of filter names
1003 Sets alternate color space in PDF stream. @param list List of PDColorSpace objects to set
1004 Creates and initializes a COSStream object with mask functionality.
1005 Initializes a new COSStream instance with no stream.
1006 Initializes COSStream with cached stream and read view. @param streamCache RandomAccessStreamCache instance @param randomAccessReadView RandomAccessReadView object
1007 Creates an unmodifiable COS dictionary with current function mask. @return UnmodifiableCOSDictionary object containing function mask properties
1008 Returns the decode result based on current state. @return DecodeResult object indicating success or failure
1009 Retrieves PDF resources dictionary. @return PDResources object or null if not found
1010 Initializes an empty PDAttributeObject instance.
1011 Initializes a new instance of PDUserProperty with the specified user attribute object. @param userAttributeObject User attribute object to associate with this property.
1012 Initializes an empty PDOutlineNode instance.
1013 Creates an empty PDDestinationNameTreeNode instance.
1014 Constructs an empty PDEmbeddedFilesNameTreeNode instance.
1015 Constructs an empty PDJavascriptNameTree node.
1016 Initializes a new instance of PDStructureElementNameTreeNode.
1017 Constructs a PDNonTerminalField instance from a PDAcroForm. @param acroForm containing non-terminal field information
1018 Initializes a new instance of PDTerminalField with an associated PDAcroForm. @param acroForm the parent AcroForm object
1019 Constructs a PDLayoutAttributeObject from a COSDictionary.
1020 Initializes a PDListAttributeObject with the given COSDictionary. @param dictionary COSDictionary containing attribute data
1021 Initializes a new instance of PDPrintFieldAttributeObject from a COSDictionary.
1022 Constructs PDTableAttributeObject from COSDictionary.
1023 Initializes PDAppearanceStream with COSStream data. @param stream COSStream object containing appearance data
1024 Initializes a new Transparency Group from the given COS Stream. @param stream COS Stream containing transparency group data @param cache Resource Cache for resolving resources
1025 Processes TrueType Collection (TTC) font file by extracting and validating checksum. @param ttcFile TTC font file to process
1026 Processes a font file and extracts relevant information. @param file the font file to process @param hash unique identifier for the file
1027 Processes a PFB font file and adds its info to the list. @param pfbFile PFB font file
1028 Initializes a checkbox form field with the given parameters. @param acroForm parent AcroForm object @param field COS dictionary representing the field @param parent parent non-terminal field
1029 Initializes a push button widget with specified form, field, and parent.
1030 Initializes a radio button widget with specified form and field properties. @param acroForm the PDF form containing this radio button @param field the AcroForm dictionary representing the radio button @param parent the parent non-terminal field of this radio button
1031 Initializes a new PDChoice object with the given form, field, and parent. @param acroForm the associated AcroForm @param field the field dictionary @param parent the non-terminal parent field
1032 Initializes a PDTextField instance with given parameters. @param acroForm PDAcroForm instance for the form @param field COSDictionary representing the field @param parent PDNonTerminalField parent of this text field
1033 Applies mask to graphics context. @see graphicsStack.m1() @see graphicsStack.m2()
1034 Saves and returns the current graphics stack. @return saved graphics state deque or null if empty
1035 Initializes a new COSDocument instance with in-memory stream caching.
1036 Initializes a COSParser instance from the given input stream and key store. @param source input stream to read from @param password encryption password (if applicable) @param keyStore input stream containing cryptographic keys @param keyAlias alias of the key to use for decryption @param streamCacheCreateFunction function to create a stream cache
1037 Applies mask to the specified rectangle. @param rectangle PDRectangle object to be masked
1038 Transforms and extracts the bounding box from a PDAppearanceStream. @param appearanceStream input stream containing graphical data
1039 Initializes graphics state with a clipping path from the given page rectangle. @param page page rectangle defining the clipping region
1040 Returns the value at index 2 from the 'array' configuration. @return The extracted value as an integer.
1041 Returns the value at index 2 of the 'm1' array. @return integer value from the array
1042 Returns a specific value from an array using index 3. @return integer value
1043 Retrieves the mask value from the array at index 4. @return The retrieved mask value.
1044 Returns the value at index 5 from an array named m1. @return integer value from array m1 at index 5
1045 Retrieves and returns a specific mask value from an array.
1046 Returns the mask value from the array at index 2. @return integer mask value
1047 Returns a specific mask value from an array. @return A single integer value from the array.
1048 Checks function mask bit using bounded type and array value. @return true if enabled, false otherwise
1049 Evaluates mask functionality based on bounded type and array value.
1050 Determines if mask is enabled based on bounded type and array value. @return true if enabled, false otherwise
1051 Returns an OutputStream instance. @throws IOException if I/O error occurs
1052 Returns an output stream based on the provided filter. @param filter COSName object used to filter the output
1053 Creates an image XObject from the given COS stream. @param cosStream input COS stream
1054 Creates a PD image XObject with mask functionality. @return PDImageXObject instance or null on failure
1055 Creates a PDImageXObject from the Function Mask stream. @return PDImageXObject instance or null if not found
1056 Masks an AffineTransform object by applying a custom transformation. @param transform the affine transformation to mask
1057 Enters text mode, disallowing nested beginText() calls.
1058 Ends text mode and flushes internal state. @throws IOException on write error
1059 Sets text leading mask with specified value. @param leading lead-in value
1060 Advances to next line in text mode. @throws IllegalStateException if not in text mode
1061 Sets text mask at specified offsets. @param tx x-coordinate of the mask @param ty y-coordinate of the mask
1062 Saves graphics state.
1063 Restores graphics state by popping font and color stacks.
1064 Sets color mask for stroking operations. @param r red intensity (0..1) @param g green intensity (0..1) @param b blue intensity (0..1)
1065 Initializes CMYK color mask with specified values and device. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
1066 Applies mask operation with specified parameter value. @param g float parameter value (must be within 0..1)
1067 Initializes color mask with RGB components. @param r red color component (0..1) @param g green color component (0..1) @param b blue color component (0..1)
1068 Initializes CMYK color model with given values. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
1069 Applies mask to image based on input value 'g'. @param g float value between 0 and 1
1070 Adds a rectangle to the drawing context with specified position and size. @param x left edge of the rectangle @param y top edge of the rectangle @param width rectangle width @param height rectangle height
1071 Adds a Bezier curve to the path using coordinates x1, y1 and control points x2, y2 and x3, y3. @param x1 start point X-coordinate @param y1 start point Y-coordinate @param x2 first control point X-coordinate @param y2 first control point Y-coordinate @param x3 second control point X-coordinate @param y3 second control point Y-coordinate
1072 Draws a Bézier curve from point (x2, y2) to (x3, y3). @throws IOException if an error occurs during drawing
1073 Adds a Bezier curve to the drawing path. @param x1 starting point X-coordinate @param y1 starting point Y-coordinate @param x3 ending point X-coordinate @param y3 ending point Y-coordinate
1074 Performs a move-to operation on the canvas, translating x and y coordinates. @param x horizontal coordinate @param y vertical coordinate
1075 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint
1076 Throws an error or initiates stroke path drawing depending on mode. @throws IOException on mode-related error
1077 Throws error and executes CLOSE_AND_STROKE operator when in text mode.
1078 Fills non-zero pixels in the image. @throws IOException
1079 Throws an error and fills even/odd mask when not in text mode.
1080 Disables fill and stroke for non-zero values.
1081 Fills and strokes the shape using even-odd rule. @throws IOException if an I/O error occurs
1082 Closes, fills non-zero areas, and strokes the current path. @throws IOException if an I/O error occurs
1083 Throws an error or closes and fills the shape in even/odd mode if in text mode.
1084 Closes current path and sets mask state.
1085 Closes current drawing path and clips non-zero values.
1086 Executes clip even/odd mask operation. @throws IOException on IO error
1087 Sets line width mask using specified value. @param lineWidth new line width value
1088 Sets the line join style based on the provided integer value. @param lineJoinStyle integer value representing the desired join style (0-2)
1089 Sets the line cap style using the provided value. @param lineCapStyle integer value representing the line cap style (0-2)
1090 Sets dashboard pattern using the provided array and phase. @param pattern array of float values @param phase float value representing phase
1091 Sets the line miter limit for rendering. @param miterLimit positive float value to set the limit
1092 Marks end of content with special marker. @throws IOException on write error
1093 Applies mask operation to set character spacing. @param spacing target spacing value
1094 Applies formatting mask with specified word spacing. @param spacing new word spacing value
1095 Applies scaling mask to user interface. @param scale float value representing scaling factor
1096 Sets text rendering mode by executing M2 and SET_TEXT_RENDERINGMODE operators. @param rm RenderingMode to apply
1097 Sets text rise mask value. @param rise new rise value
1098 Returns COS object key offsets map. @return Map of COSObjectKey to Long offset values
1099 Writes PDF mask to specified OutputStream. @param output target stream for mask data
1100 Calls methods on provided objects and returns results from nested calls.
1101 Calls methods on COSBase instances and invokes nested method calls. @param objectsList collection of COSBase objects to operate on
1102 Invokes COSBase methods on provided collection. @param objectsList list of COSBase objects
1103 Calls nested methods with provided integer values. @param index index value @param intVal integer value to be processed
1104 Removes and returns an object from the collection based on index. @param i index of the object to remove @return COSBase object or null if not found
1105 Removes object from collection and executes subsequent operation. @param o COSBase object to remove @return true if removal was successful, false otherwise
1106 Calls methods m1 on the 'items' object and m3 on an object returned by m2.
1107 Applies mask operation on COSName key. @param key COSName object to be masked
1108 Updates COS state based on origin and provided state. @param updateState current COS state to be updated
1109 Resets the base object and parser to their default states.
1110 Recursively updates origin document state with update info. @param originDocumentState current document state @param dereferencing whether to dereference update info
1111 Delegate call to overloaded version with default value. @param index zero-based index to use as default
1112 Returns a string representation of the mask value. @return "On" or "Off", or the numeric index if valid
1113 Initializes a new instance of PDSimpleFileSpecification with an empty file name.
1114 Sets the mask file name. @param fileName name of the mask file to load.
1115 Initializes a PDNamedDestination object with a given name. @param dest destination name as a string
1116 Sets or clears the destination name. @param dest destination name to set (null to clear)
1117 Validates and returns the generation number mask. @throws IOException if invalid generation number
1118 Validates and returns the object number mask. @throws IOException if object number exceeds threshold
1119 Returns encrypted mask based on encryption revision and password. @param ownerPassword encrypted owner password @param owner user identifier @param encRevision encryption revision (5 or 6 returns empty byte array) @return encrypted mask byte array
1120 Initializes a TensorPatch object with given control points and color. @param tcp array of 2D points for control points @param color 2D float array representing color data
1121 Encrypts and decrypts input data using RC4 algorithm. @param finalKey encryption key @param input encrypted or original data stream @param output decrypted or modified data stream
1122 Returns the font provider instance with default mask functionality. @return FontProvider object or null if not initialized
1123 Creates a list of shaded triangles from the given 2D array of CoordinateColorPairs. @param patchCC 2D array of CoordinateColorPair objects @return List of ShadedTriangle objects
1124 Initializes a Coons Patch with control points and color. @param points array of Point2D objects defining the patch's shape @param color 2D array of float values specifying the patch's color
1125 Suppresses duplicate overlapping text characters within a given tolerance. @param text TextPosition object to process
1126 Updates the TextPosition object based on actualText and article divisions. @param text TextPosition object to update
1127 Removes adjacent whitespace from text positions. @param textList list of text positions to process
1128 Updates PositionWrapper based on current, last position & start position. @param current current state @param lastPosition previous state @param lastLineStartPosition last line's start position @return updated last line start position
1129 Builds the mask string for a line of text. @param normalized list of words with positions @param lineBuilder StringBuilder to accumulate the mask @param wordPositions list of text positions for each word @param item LineItem object containing text position data @return StringBuilder containing the completed mask string
1130 Parses date string and returns a Calendar object. @param text input date string @return Calendar object or null on parse failure
1131 Performs masked content processing and marks beginning of marked content. @param tag COS name object
1132 Creates a marked content sequence with the specified MCID. @param tag COSName of the object being modified @param mcid unique identifier for marked content
1133 Sets mask on COSName object. @param tag COSName identifier
1134 Writes COS string contents to output stream. @param string COSString object containing data @param output OutputStream for writing data
1135 Writes byte array to output stream. @param bytes data to be written @param output target output stream
1136 Initializes a new PDFGraphicsStreamEngine instance for the specified page. @param page PDPage object to associate with this engine
1137 Default constructor to initialize extractor with no input stream.
1138 Initializes PDF text stripper with default settings.
1139 Parses hexadecimal mask from input source and returns as COSString.
1140 Applies filter list to PDF document. @param filters List of filter names
1141 Constructs an empty PDRectangle with default coordinates (0, 0).
1142 Initializes a PDRectangle with specified width and height. @param width rectangle width @param height rectangle height
1143 Creates a rectangle mask with dimensions based on the bounding box. @return PDRectangle object representing the mask
1144 Calculates the bounding box mask rectangle.
1145 Adjusts the dimensions of a PDRectangle by applying a uniform padding. @param rectangle input PDRectangle object @param padding amount to add around each side @return updated PDRectangle with added padding
1146 Updates a PDRectangle by applying the given geometric differences. @param rectangle original rectangle @param differences array of 4 float values (dx, dy, dw, dh) @return updated PDRectangle or original if invalid differences provided
1147 Updates a PDRectangle by applying a set of differences. @param rectangle original rectangle @param differences array of 4 floats to modify the rectangle's corners @return updated PDRectangle or original if invalid differences provided
1148 Calculates a new rectangle with added padding. @param box original rectangle bounds @param padding amount to add around the box @return updated PDRectangle object
1149 Initializes a new PDFXRefStream instance from a COSDocument. @param cosDocument input document containing cross-reference data
1150 Creates a PDF object stream from the given PDDocument. @param document input PDDocument @return PDObjectStream instance or null if failed
1151 Initializes a new PDStream instance from the given PDDocument. @param document PDDocument object to create COSStream from
1152 Creates a COS stream from a given COSDocument. @param document the input COS document
1153 Creates a PDF stream from the given document and input stream. @param doc PDDocument instance @param input InputStream containing the data to write @param filters COSBase filter settings
1154 Creates a COSStream from the given PDDocument and input stream. @param document PDDocument instance @param rawInput InputStream containing PDF data @return COSStream object representing the processed PDF content
1155 Calls recursive helper function with parameter dictionary's compressed data. @param input input stream @param encoded output stream for encoded data @param parameters dictionary containing compressed data @param index unused parameter
1156 Initializes a new instance of the PDDefaultAttributeObject.
1157 Initializes a new PDUserAttributeObject instance with default owner set to OWNER_USER_PROPERTIES.
1158 Initializes an empty PDStandardAttributeObject.
1159 Initializes a new PDOutlineItem instance.
1160 Initializes a new instance of PDVariableText with the given PDAcroForm. @param acroForm The parent AcroForm to associate with this text field.
1161 Initializes a new instance of PDExportFormatAttributeObject from a COS dictionary.
1162 Creates a PDAppearanceStream instance from the current entry. @throws IllegalStateException if entry is not an appearance stream
1163 Processes a TTF or OTF font file and extracts its metadata. @param ttfFile Font file to process
1164 Initializes PDShadingType6 with given COS dictionary. @param shadingDictionary dictionary containing type 6 shading data
1165 Initializes PDShadingType7 with COSDictionary. @param shadingDictionary dictionary containing shading data
1166 Initializes a new instance of PDComboBox with given parameters. @param acroForm AcroForm containing the form data @param field COSDictionary representing the field properties @param parent PDNonTerminalField parent container for this combo box
1167 Initializes a new instance of PDListBox with the specified form, field, and parent.
1168 Initializes COS parser with given key store and alias. @param source input stream to read from @param password encryption password @param keyStore key store input stream @param keyAlias alias of the encryption key
1169 Initializes a PDF parser with given parameters. @param source input data source @param decryptionPassword password for decrypting the PDF (if applicable) @param keyStore keystore containing encryption keys @param alias alias of the encryption key to use @param streamCacheCreateFunction function to create a stream cache
1170 Returns an OutputStream instance via stream.m1(). @throws IOException if error occurs during output operation
1171 Writes compressed data to the output stream. @param data byte array to be written @param appearanceStream PDAppearanceStream object for writing
1172 Creates a content stream from the given appearance stream with optional compression. @param appearance PDAppearanceStream object @param compress true to enable compression, false otherwise
1173 Sets text matrix from input matrix. @param matrix input matrix to set
1174 Applies functional mask to a Matrix, modifying its contents. @param matrix input Matrix object
1175 Enters text mode, beginning a text block.
1176 Enters text mode, preventing further nested text mode activations. @throws IOException if an I/O error occurs
1177 Begins text mode processing.
1178 Enters text mode, beginning a block of text.
1179 Ends text mode and writes END_TEXT operator. @throws IOException if an I/O error occurs
1180 Ends text mode and updates internal state.
1181 Ends text mode and sets flag to false.
1182 Ends text mode and writes END_TEXT operator. @throws IOException on write error
1183 Sets text leading mask based on given float value. @param leading lead-in value to apply
1184 Sets text leading mask with specified value. @param leading new leading value
1185 Sets leading text mask with specified value. @param leading leading text value
1186 Sets text leading to specified value and updates mask. @param leading leading value
1187 Advances to next line in text mode. @throws IllegalStateException if not in text mode
1188 Advances to next line in text mode. @throws IllegalStateException if not in text mode
1189 Advances to next line in text mode, throwing an exception if not initialized. @throws IllegalStateException if beginText() has not been called
1190 Advances to next line in text mode.
1191 Sets text mask at specified offset. @param tx horizontal offset @param ty vertical offset
1192 Updates text position at specified offsets using mask operations. @param tx x-coordinate offset @param ty y-coordinate offset
1193 Performs text-mode mask operation at specified offsets. @param tx x-coordinate offset @param ty y-coordinate offset
1194 Renders text mask at specified offset. @param tx x-coordinate of the mask @param ty y-coordinate of the mask
1195 Saves graphics state by resetting font and color stacks.
1196 Saves graphics state by resetting font and color stacks.
1197 Saves graphics state by popping color spaces and font stacks.
1198 Saves graphics state by resetting font and color stacks.
1199 Restores graphics state by resetting font and color stacks.
1200 Restores graphics state by popping color and font stacks.
1201 Restores graphics state by popping color and font stacks.
1202 Restores graphics state by popping font and color spaces.
1203 Sets mask color components to specified RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
1204 Initializes color mask with RGB values. @param r red channel value (0..1) @param g green channel value (0..1) @param b blue channel value (0..1)
1205 Sets the RGB color mask values. @param r red value (0..1) @param g green value (0..1) @param b blue value (0..1)
1206 Applies color mask with RGB values. @param r red channel value (0..1) @param g green channel value (0..1) @param b blue channel value (0..1)
1207 Sets CMYK mask values for printing. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
1208 Configures CMYK color model with specified values. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
1209 Configures CMYK color model with provided color components. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
1210 Initializes CMYK color model with specified values. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
1211 Applies mask function with specified gamma value. @param g float value between 0 and 1
1212 Applies mask function to input value and performs subsequent operations. @param g input float value (must be within 0..1)
1213 Validates and processes input value with gray-scale conversion. @param g float value in range 0..1
1214 Applies a function to the input parameter g and performs subsequent operations. @param g input value within 0..1 range
1215 Initializes color masks with RGB values. @param r red channel value (0..1) @param g green channel value (0..1) @param b blue channel value (0..1)
1216 Applies color mask to device with specified RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
1217 Applies color mask with RGB values. @param r red channel value (0..1) @param g green channel value (0..1) @param b blue channel value (0..1)
1218 Initializes color mask with RGB values. @param r red channel value (0..1) @param g green channel value (0..1) @param b blue channel value (0..1)
1219 Initializes CMYK color model with specified components. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1)
1220 Initializes CMYK color model with given components. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
1221 Initializes CMYK color model with specified values. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black key value (0..1)
1222 Initializes CMYK mask with given color values. @param c cyan (0..1) @param m magenta (0..1) @param y yellow (0..1) @param k black (0..1)
1223 Applies mask operation to a grayscale image. @param g value between 0 and 1
1224 Applies mask operations to an image with a specified gray value. @param g gray value between 0 and 1
1225 Applies mask operation to image based on given grayscale value. @param g float value between 0 and 1
1226 Applies mask operation to image based on input value. @param g input value in range 0..1
1227 Adds a rectangle to the drawing context with specified position and size. @param x x-coordinate of top-left corner @param y y-coordinate of top-left corner @param width rectangle's width @param height rectangle's height
1228 Adds a rectangle to the current drawing context. @param x left coordinate @param y top coordinate @param width rectangle width @param height rectangle height
1229 Adds a rectangle to the current graphics context. @param x left edge of rectangle @param y top edge of rectangle @param width rectangle width @param height rectangle height
1230 Adds a rectangle to the drawing context. @param x left coordinate of the rectangle @param y top coordinate of the rectangle @param width and height dimensions of the rectangle
1231 Draws a cubic Bezier curve from point (x1, y1) to (x2, y2) with control point (x3, y3). @throws IOException if invalid operation occurs
1232 Adds a cubic Bezier curve to the path. @param x1 y1 x2 y2 x3 y3 control points of the curve
1233 Creates a cubic Bezier curve from three points. @param x1 x-coordinate of first point @param y1 y-coordinate of first point @param x2 x-coordinate of second point @param y2 y-coordinate of second point @param x3 x-coordinate of third point @param y3 y-coordinate of third point
1234 Adds a Bezier curve segment to the drawing path. @param x1, y1 first control point @param x2, y2 second control point @param x3, y3 third control point
1235 Applies a quadratic Bezier curve to the drawing context. @param x2, y2 coordinates of first control point @param x3, y3 coordinates of second control point
1236 Adds a quadratic Bezier curve to the current path. @param x2, y2 coordinates of first control point @param x3, y3 coordinates of second control point
1237 Adds a Bezier curve to the drawing context. @param x2 initial point's x-coordinate @param y2 initial point's y-coordinate @param x3 end point's x-coordinate @param y3 end point's y-coordinate
1238 Adds a Bezier curve to the current path using three points. @param x2, y2 first control point coordinates @param x3, y3 second and third control point coordinates (same as initial point)
1239 Adds a Bezier curve with two control points. @param x1 first point's x-coordinate @param y1 first point's y-coordinate @param x3 third point's x-coordinate (final point) @param y3 third point's y-coordinate (final point)
1240 Creates a Bezier curve from two points. @param x1 first point's X-coordinate @param y1 first point's Y-coordinate @param x3 third point's X-coordinate (replicates final point) @param y3 third point's Y-coordinate (replicates final point)
1241 Draws a Bezier curve from (x1, y1) to (x3, y3). @param x1 initial x-coordinate @param y1 initial y-coordinate @param x3 final x-coordinate @param y3 final y-coordinate
1242 Creates a quadratic Bezier curve to a specified point. @param x1, y1 coordinates of the first control point @param x3, y3 coordinates of the final and second control point
1243 Moves to specified coordinates on the canvas. @param x x-coordinate @param y y-coordinate
1244 Moves to a point on the canvas using absolute coordinates. @param x horizontal position @param y vertical position
1245 Moves to specified coordinates on the canvas. @param x horizontal position @param y vertical position
1246 Moves to point (x, y) on the canvas. @param x X-coordinate of the move location @param y Y-coordinate of the move location
1247 Draws a line to specified coordinates. @param x the x-coordinate of the line's end point @param y the y-coordinate of the line's end point
1248 Performs a line-to operation at the specified coordinates. @param x horizontal coordinate @param y vertical coordinate
1249 Draws a line to the specified coordinates (x, y). @param x x-coordinate of the line end point @param y y-coordinate of the line end point
1250 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint
1251 Throws an error or executes a stroke path operation based on the current mode. @throws IOException if an I/O exception occurs
1252 Disables drawing functionality by throwing an error in text mode and starting a new stroke path.
1253 Throws an exception when trying to draw outside of text mode, or starts drawing a stroked path.
1254 Throws error or starts stroke path drawing when in text mode.
1255 Aborts drawing operation and closes stroke. @throws IOException on I/O error
1256 Disables drawing by closing and stroking the current shape.
1257 Closes and strokes the current element, throwing an error in text mode. @throws IOException if an I/O operation fails
1258 Closes and strokes the current shape, throwing an error if in text mode.
1259 Fills non-zero values in mask image. @throws IOException on I/O error
1260 Fills non-zero pixels in an image mask. @throws IOException on I/O error
1261 Fills non-zero pixels in an image, ignoring text mode. @throws IOException if an I/O error occurs
1262 Fills non-zero values in mask image. @throws IOException if I/O operation fails
1263 Fills even/odd bits based on the current operator.
1264 Fills even/odd mask in binary mode.
1265 Throws an error or fills even/odd mask based on mode.
1266 Throws error and fills even/odd pattern when in text mode. @throws IOException on error
1267 Disables fill and stroke for non-zero pixels. @throws IOException on failure
1268 Disables fill and stroke for the current shape.
1269 Disables fill and stroke operations. @throws IOException on error
1270 Disables fill and stroke for non-zero areas.
1271 Disables fill and stroke for even-odd mask operations. @throws IOException if an I/O error occurs
1272 Throws error or performs fill and stroke operation based on input mode. @throws IOException if an I/O exception occurs
1273 Throws error when trying to fill and stroke within a text block.
1274 Throws an error or performs fill and stroke operation based on mode. @throws IOException if an I/O error occurs
1275 Closes, fills non-zero areas, and strokes the current shape. @throws IOException if an I/O error occurs
1276 Closes, fills non-zero pixels, and strokes the current shape. @throws IOException if an I/O error occurs
1277 Closes, fills non-zero, and strokes the current shape. @throws IOException if an I/O error occurs
1278 Closes, fills non-zero, and strokes the current path. @throws IOException if an I/O error occurs
1279 Disables fill and stroke for even and odd shapes. @throws IOException if an I/O error occurs
1280 Disables fill and stroke for odd/even shapes. @throws IOException if an I/O error occurs
1281 Disables fill and stroke for even/odd polygons.
1282 Disables fill and stroke for even/odd shapes, throwing an error if called in text mode.
1283 Closes current path, throwing an error if called in text mode.
1284 Closes the current path, throwing an error if in text mode.
1285 Closes current path and clears mask.
1286 Closes the current path and invalidates further drawing operations within a text block.
1287 Disables clipping for the current path. @throws IOException if an I/O error occurs
1288 Closes current clipping path and resets operator stack.
1289 Closes current path, clipping non-zero area.
1290 Terminates current path and clips non-zero values.
1291 Executes Clip Even/Odd operator and ends current path. @throws IOException if an I/O error occurs
1292 Executes clip even/odd mask operation. @throws IOException if an I/O error occurs
1293 Marks the end of an even-odd clipping path.
1294 Executes clip even/odd operator and ends path.
1295 Sets line width using two-stage masking process. @param lineWidth desired line width value
1296 Sets line width mask value. @param lineWidth new line width value
1297 Sets line width in the graphics context. @param lineWidth new line width value
1298 Sets line width mask value. @param lineWidth desired line width
1299 Sets the line join style based on the provided integer value. @param lineJoinStyle one of 0, 1, or 2 (or an error is thrown)
1300 Sets the line join style based on the provided value. @param lineJoinStyle integer value representing the desired style (0-2)
1301 Sets the line join style based on a given parameter. @param lineJoinStyle integer value (0-2) representing the desired join style
1302 Sets the line join style based on the provided integer value. @param lineJoinStyle integer indicating the desired line join style (0-2)
1303 Sets the line cap style based on the input integer. @param lineCapStyle one of 0, 1, or 2 (but not any other value)
1304 Sets the line cap style based on the provided integer value. @param lineCapStyle integer value representing the line cap style (0-2)
1305 Sets line cap style based on provided integer code. @param lineCapStyle integer code representing line cap style (0-2)
1306 Sets line cap style using the specified integer value. @param lineCapStyle 0-2 or throws IOException
1307 Sets a DASH pattern on the device. @param pattern array of float values representing the pattern @param phase float value representing the phase
1308 Sets a mask pattern and phase for the specified operator. @param pattern array of float values representing the pattern @param phase float value representing the phase
1309 Sets a custom dash pattern on the graph. @param pattern array of float values defining the pattern @param phase float value representing the phase offset
1310 Sets the dash pattern and phase on a plot device. @param pattern array of float values representing the pattern @param phase float value representing the phase
1311 Sets or updates the line miter limit for rendering. @param miterLimit positive float value to set as miter limit
1312 Sets the line miter limit for rendering. @param miterLimit non-negative value to set as miter limit
1313 Sets the line miter limit for rendering. @param miterLimit non-negative float value
1314 Sets the line miter limit for rendering. @param miterLimit positive float value controlling line join appearance
1315 Marks end of content in file.
1316 Masks content with end marked operator.
1317 Sets end marked content mask. @throws IOException on I/O error
1318 Issues END MARKED CONTENT command to mask function.
1319 Applies mask operation with specified character spacing. @param spacing float value representing character spacing
1320 Sets character spacing based on provided float value. @param spacing float value representing character spacing
1321 Configures font mask with specified character spacing. @param spacing character spacing value
1322 Applies character spacing mask with specified width. @param spacing new spacing value
1323 Sets word spacing mask based on provided float value. @param spacing float value representing word spacing
1324 Applies word spacing mask with specified float value. @param spacing float spacing value
1325 Sets word spacing in the document to the specified value. @param spacing new word spacing value
1326 Sets word spacing mask based on provided float value. @param spacing float value to set as word spacing
1327 Applies horizontal scaling mask to user interface. @param scale scaling factor
1328 Applies scaling mask to text horizontally. @param scale horizontal scaling factor
1329 Applies scale factor to horizontal text scaling and performs associated operations. @param scale scale factor value
1330 Applies scaling mask to horizontal text alignment. @param scale floating-point scale value
1331 Executes rendering mode mask function. @param rm RenderingMode object to process
1332 Sets text rendering mode using M2 and SET_TEXT_RENDERINGMODE operators. @param rm RenderingMode to be set
1333 Applies rendering mode mask to text. @param rm RenderingMode object
1334 Sets text rendering mode using given rendering mode. @param rm RenderingMode to be applied
1335 Updates mask with specified rise value. @param rise float representing rise value
1336 Updates mask based on specified rise value. @param rise float value representing the rise
1337 Updates mask functionality based on specified rise value. @param rise float representing rise value
1338 Sets mask text rise value and performs related operations. @param rise new rise value
1339 Replaces or updates the XREF table using brute-force search if necessary.
1340 Writes data to file using an internal helper function. @param fileName unique file identifier
1341 Sets mask value in array at index 2 to given high byte. @param high high byte of mask value
1342 Applies mask to array at specified page number. @param pageNumber index of page in array to apply mask
1343 Removes specified object from filtered List. @param o object to be removed @return true if removal successful, false otherwise
1344 Recursively calls M1 on backing arrays, ignoring filtering. @param index the position to call M1 on @return result of recursive M1 call
1345 Invokes M1 operation on both Map and Actuals data structures.
1346 Calculates and stores value M3 using cached COS name. @param key unique object identifier @return calculated M3 value or null if failed
1347 Recursively checks if any child demands parent update in COSArray. @param array COSArray to traverse @return true if any child demands parent update, false otherwise
1348 Calls m1 with default flag value. @param originDocumentState COS document state object
1349 Updates origin document state using update info. @param child COSUpdateInfo object to apply
1350 Masks syntax in the given input using the provided handler. @param input input text to process @param handler handler for syntax masking
1351 Encrypts or decrypts data using AES or alternative algorithm based on configuration. @param objectNumber unique object identifier @param genNumber generation number @param data input stream to process @param output output stream for result @param decrypt true for decryption, false for encryption
1352 Determines encryption revision and calls corresponding method to process password. @param password input password to be processed @param o unused parameter (legacy) @param u unused parameter (legacy) @param oe unused parameter (legacy) @param ue unused parameter (legacy) @param permissions unused parameter (legacy) @param id unused parameter (legacy) @param encRevision encryption revision (5 or 6) @param keyLengthInBytes length of encryption key in bytes @param encryptMetadata whether to encrypt metadata @param isOwnerPassword whether password is owner's @return processed password as byte array, or throws IOException on error
1353 Determines whether the specified parameters are valid for encryption. @param password encrypted password @param user user identifier @param owner owner identifier @param permissions access permissions @param id unique ID @param encRevision encryption revision level @param keyLengthInBytes key length in bytes @param encryptMetadata whether to encrypt metadata @return true if valid, false otherwise
1354 Fetches FontBoxFont object by PostScript name. @param format FontFormat instance @param postScriptName unique font identifier @return FontBoxFont object or null if not found
1355 Normalizes a list of LineItems into WordWithTextPositions. @param line list of items to process @return normalized list or null if empty
1356 Recursively processes COSString input until it's empty. @param text non-null COSString to process @return null or the result of recursive processing
1357 Applies mask functionality to the specified XML tag. @param tag COSName object representing the XML element
1358 Sets up function mask by calling underlying methods. @param tag COSName object representing the current tag
1359 Applies mask to COS object using specified tag. @param tag unique COS identifier
1360 Processes and masks COS content using specified tag. @param tag COSName object to process
1361 Sets the marked content ID. @param tag COSName object to modify @param mcid non-negative integer identifier value
1362 Writes a marked content sequence to the output stream. @param tag COSName object representing the tag @param mcid unique identifier for the marked content sequence
1363 Generates marked content sequence with specified MCID. @param tag COSName identifier @param mcid unique multi-page ID (must be non-negative)
1364 Sets the mask content for a COSName tag. @param tag COSName to set mask content for @param mcid unique identifier for marked content sequence
1365 Applies mask operation on COS object. @param tag COS reference to apply mask on
1366 Generates mask for specified COSName. @param tag COSName to generate mask for
1367 Applies mask operation to COSName object. @param tag COSName object to process
1368 Updates mask data for the given COSName tag. @param tag COSName identifier
1369 Writes a formatted string to the output stream with trailing space. @param output OutputStream to write to @param cosString String to be written in COS format
1370 Writes formatted text to PDF output stream. @throws IOException if write operation fails
1371 Initializes PageDrawer with provided parameters. @param parameters PageDrawerParameters object with page, renderer, and other settings
1372 Parses a string from the input stream, handling escape sequences and nested parentheses. @throws IOException if parsing fails
1373 Initializes an immutable rectangle with specified width and height. @param width positive value representing rectangle's width @param height positive value representing rectangle's height
1374 Returns a rectangle with a mask based on previous calculations. @return PDRectangle object representing the mask
1375 Initializes PDMetadata with a PDDocument. @param document the underlying PDF document
1376 Creates an embedded file object within a PDF document. @param document the parent PDF document
1377 Initializes PDXObject with given document and subtype. @param document parent document @param subtype object subtype name
1378 Creates an image XObject from the given PDDocument. @param document source PDDocument to extract image data from
1379 Initializes PDStream from PDDocument and InputStream. @param doc PDDocument instance @param input InputStream to read from
1380 Constructs a new PDStream object from the given PDDocument, InputStream, and filter. @param doc the parent PDDocument @param input the InputStream to read from @param filter the COSName of the filter to apply
1381 Constructs a PDStream object from a PDDocument and input stream. @param doc the parent PDDocument @param input input stream to read data from @param filters optional COSArray of filter settings
1382 Creates a PDImageXObject from the given parameters. @param document PDDocument instance @param encodedStream InputStream containing image data @param cosFilter COSBase filter object @param width image width in pixels @param height image height in pixels @param bitsPerComponent image bit depth (e.g., 8, 24) @param initColorSpace initial color space for the image
1383 Initializes PDLayoutAttributeObject with default owner as OWNER_LAYOUT.
1384 Initializes PDListAttributeObject with default owner set to OWNER_LIST.
1385 Initializes a new instance of PDPrintFieldAttributeObject with default owner.
1386 Initializes a new instance of PDTableAttributeObject with default owner set to OWNER_TABLE.
1387 Constructs a COSParser instance from a RandomAccessRead source. @param source input source to parse
1388 Initializes a new instance of PDFParser with provided parameters. @param source the input stream for reading PDF data @param decryptionPassword password for decrypting PDF content (if applicable) @param keyStore InputStream for accessing encryption keys @param alias identifier for selecting specific encryption key
1389 Initializes content stream with given appearance stream. @param appearance PDAppearanceStream object to initialize from.
1390 Initializes PDFormContentStream with form content and resources. @param form FormXObject containing content stream and resources
1391 Creates a new page content stream from the given document and appearance. @param doc the parent document @param appearance the appearance stream to operate on
1392 Sets the text rendering matrix from a given 4x4 Matrix. @param matrix input matrix
1393 Sets text matrix from input matrix. @param matrix input Matrix object
1394 Sets text rendering matrix from provided Matrix object. @param matrix input Matrix to set
1395 Sets text rendering matrix from provided Matrix object. @param matrix input matrix to set
1396 Applies functional mask to a given Matrix. @param matrix input Matrix object
1397 Applies function mask to input matrix, modifying its contents. @param matrix input matrix to modify
1398 Applies a mask to the provided matrix. @param matrix input Matrix object
1399 Applies functional mask operation to a given Matrix. @param matrix input matrix for modification
1400 Draws an arrow shape in the content stream. @param cs Content stream to draw on @param x Base x-coordinate of the arrow @param y Base y-coordinate of the arrow @param len Length of the arrow arms
1401 Generates mask commands based on line width, stroke, and fill properties. @param lineWidth current line width @param hasStroke whether the shape has a stroke @param hasFill whether the shape has a fill
1402 Draws a circular mask on the content stream. @param cs PDAppearanceContentStream object @param x center x-coordinate @param y center y-coordinate @param r radius of the circle
1403 Generates a rounded rectangle mask in the PDAppearanceContentStream. @param cs content stream to draw on @param x center x-coordinate of the rectangle @param y center y-coordinate of the rectangle @param r radius of the corners
1404 Generates a mask for the specified PDAppearanceContentStream using circular arcs. @param cs target content stream @param x center X-coordinate of the circle @param y center Y-coordinate of the circle @param r radius of the circle
1405 Generates a PDAppearanceContentStream by drawing various geometric shapes.
1406 Applies mask function to line width value. @param lineWidth float representing line width
1407 Wraps file-based operation with a constructor call. @param fileName name of file to operate on
1408 Recursively traverses the specified COSBase object and returns true if a null value is found.
1409 Updates the document state based on the given COS dictionary. @param newTrailer COS dictionary containing updated state information
1410 Recursively processes update info in document tree. @param child node to process, may be null
1411 Processes update info from given iterable of base objects. @param children iterable of COSBase objects to process
1412 Dereferences the current object and returns its COSBase representation.
1413 Determines whether to use encryption method 1 or 2 based on the revision number. @param ownerPassword password for the owner @param user user data @param owner owner information @param permissions access rights @param id unique identifier @param encRevision encryption revision number @param keyLengthInBytes length of encryption key @param encryptMetadata whether to encrypt metadata @return true if valid, false otherwise
1414 Parses input text into an instruction sequence using Parser.m1. @param text input text to parse @return parsed InstructionSequence object
1415 Encrypts and writes user data to COSStream. @param stream COSStream object @param objNum object number @param genNum generation number
1416 Decrypts and filters user ID strings. @param string input string to process @param objNum object number @param genNum generation number @return filtered COSString or original if decryption fails
1417 Masks a COS object using the provided string and numbers. @param string input string to mask @param objNum object number for masking @param genNum generation number for masking @return masked COS string or throws IOException if error occurs
1418 Determines encryption method based on revision. @param password input password @param user user data @param owner owner data @param permissions access rights @param id unique identifier @param encRevision encryption revision @param keyLengthInBytes encryption key length @param encryptMetadata whether to encrypt metadata
1419 Tries to fetch a font by its PostScript name from various formats. @param postScriptName the font's PostScript name @return FontBoxFont object or null if not found
1420 Processes text positions and generates line items.
1421 Applies mask operation to COSBase data.
1422 Formats text with positioning data into a JSON-like string. @param textWithPositioningArray array containing strings and floats to be formatted
1423 Masks sensitive information in provided text. @param text input string to process
1424 Creates a PageDrawer instance with specified parameters. @param parameters PageDrawerParameters object
1425 Initializes a new PDFormXObject with the given PDDocument. @param document PDDocument instance
1426 Initializes a new PDMetadata object from the given PDDocument and InputStream. @param doc PDDocument instance @param str InputStream for metadata data
1427 Creates a PDEmbeddedFile object from the given PDDocument and input stream. @param doc PDDocument instance @param str InputStream containing embedded file data
1428 Creates an embedded file in the PDDocument. @param doc parent document @param input stream containing file data @param filter optional filter name
1429 Creates a PDI image from byte array using FLATE compression. @param document the parent PDDocument @param byteArray compressed image data @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of color bits per component @param initColorSpace initial color space for the image @return a new PDImageXObject instance
1430 Initializes PDExportFormatAttributeObject with an owner. @param owner unique identifier or name of the owning object
1431 Initializes local font provider with FontCache instance. Scans the local system for font files, loads cached FontInfo objects, and builds on-disk cache if necessary.
1432 Initializes parser from random access read source. @param source RandomAccessRead data stream
1433 Constructs a new PDF parser instance from the given source. @param source input data to parse @param decryptionPassword password for decrypting encrypted PDFs (may be null)
1434 Draws annotation line based on given style. @param style annotation line style @param cs content stream to draw on @param x x-coordinate of drawing position @param y y-coordinate of drawing position @param width line width @param hasStroke true if stroke should be drawn, false otherwise @param hasBackground true if background should be drawn, false otherwise
1435 Recursively updates dictionary considering child demands parent update. @param dictionary COSDictionary object to process @return true if dictionary needs updating, false otherwise
1436 Returns a set of COSBase objects.
1437 Processes COSBase object based on type and attributes. @param object COSBase instance to process
1438 Processes the given COSBase object and its associated data. @param i int parameter @param object COSBase object instance
1439 Processes and updates the given COSBase object in the object list. @param index position to update @param object COSBase object to process
1440 Sets a key-value pair in the document or dictionary. @param key COSName identifier @param value COSBase object to associate with key
1441 Invokes COSBase methods recursively on provided collection. @param objectsList list of COSBase objects
1442 Invokes M1 on objects and executes M3 if result is true. @param i integer parameter @param objectList collection of COSBase objects
1443 Recursively converts COSArray to Iterable interface.
1444 Recursively fetches a COSBase object by index, potentially unwrapping nested COSObjects. @param index unique index identifier @return COSBase object or null if not found
1445 Recursively checks for and removes a COS object by matching its attributes. @param o target object to match @return true if object was found and removed, false otherwise
1446 Finds the index of a given object in an array by matching its mask. @param object COSBase object to search for @return index or -1 if not found
1447 Checks if the given object is present in the collection. @param value object to search for @return true if found, false otherwise
1448 Retrieves the mask name from the given value. @param value object to search for a matching mask @return COSName of the matching mask or null if not found
1449 Retrieves the value of a named item, unwrapping nested objects and returning null for COSNull values. @param key name of the item to fetch @return the retrieved item or null if not found or null
1450 Recursively processes objects in the collection, removing indirect references. @param indirectObjects Collection of COSObjectKeys to process
1451 Retrieves a COSDictionary with LINEARIZED entry. @return COSDictionary object or null if not found
1452 Closes and processes all COS streams. @throws IOException if any stream processing fails
1453 Updates object state based on update state and children. @param object COSObject to update
1454 Visits the underlying object, delegating to it or a default implementation if null.
1455 Checks if the given COSBase object has a reference to its parent. @param parent COSBase object to check for self-reference @param value COSBase object to inspect @return true if the object references its parent, false otherwise
1456 Retrieves a COSNumber representing the mask from the given COSBase. @param lengthBaseObj COSBase containing the length or mask information @return COSNumber representing the mask, or null if not found
1457 Creates a NormalXReference with the specified byte offset, key, and object. @param byteOffset file system offset @param key COSObjectKey for referencing @param object COSBase object to reference
1458 Resolves COSObjectKey for the given COSBase object. @param obj COSBase object to resolve key for @return resolved COSObjectKey or null if not found
1459 Retrieves a COSObjectKey from the pool or creates a new one. @param object input COSBase object @return COSObjectKey instance or null if not found
1460 Checks if an object is in the mask, either directly or via its parent. @param object COSBase object to check @return true if object is masked, false otherwise
1461 Prepares mask for given COSObjectKey and COSBase object. @param key COSObjectKey to be masked @param object COSBase object to be modified
1462 Calls the internal method m2 with hashed password. @param password plaintext password @param user byte array representing user data @param owner byte array representing owner data @param permissions integer representing file permissions @param id unique identifier byte array @param encRevision encryption revision number @param keyLengthInBytes length of encryption key in bytes @param encryptMetadata flag to indicate metadata encryption
1463 Iterates through regions, fetching character and text data. @throws IOException on I/O errors
1464 Processes text with positioning data in a JSON-like format. @param textWithPositioningArray Array containing string and float values
1465 Processes text with positioning array, writing formatted output to console. @param textWithPositioningArray array containing Float positions and String texts
1466 Processes text with positioning data, iterating over the input array. @param textWithPositioningArray array containing float values and strings
1467 Processes text with positioning data in a JSON-like format. @param textWithPositioningArray array containing float values (x, y coordinates) and string values (text)
1468 Performs functional mask operation on input text. @param text string to be masked
1469 Applies mask to input text and performs subsequent operations. @param text input string to be processed
1470 Applies mask to input text. @param text string to be masked
1471 Performs mask operation on input text. @param text string to be masked
1472 Initializes a transparency group from a PDF document. @param document the parent PDDocument instance
1473 Initializes appearance stream from provided PDDocument. @param document PDDocument instance to fetch data from
1474 Converts BufferedImage to PDDocument with mask. @param document target PDF document @param image source image @param quality compression quality (0-100) @param dpi dots per inch for image resolution
1475 Initializes PDF parser from a RandomAccessRead source. @param source source data to read from
1476 Applies mask functions to points in the template array. @param template array of Point2D.Double coordinates @param x x-coordinate offset @param y y-coordinate offset
1477 Generates Bezier curve points between two angles. @param startAng starting angle @param endAng ending angle @param cx center x-coordinate @param cy center y-coordinate @param rx radius x-component @param ry radius y-component @param out collection of Point2D.Double objects to store curve points @param addMoveTo whether to include initial move-to point in the output
1478 Delegates call to m1() and returns its COSBase iterator.
1479 Recursively processes an object's underlying COS structure. @param object COSObjectable instance to process
1480 Applies mask operation to the given object for specified size. @param size target size @param object COSBase object to process
1481 Processes float values in the provided array using custom methods m1 and m2. @param value input float array to be processed
1482 Parses and returns a COSArray from the input stream.
1483 Processes and fetches compressed stream data. @throws IOException if I/O error occurs
1484 Initializes a COSArrayList with the given item and actual object. @param actualObject the actual object to store in the list @param item the item to add to the array @param dictionary the parent dictionary @param dictionaryKey the key used to reference the array in the dictionary
1485 Converts a list of objects into a COSArray. @param cosObjectableList list of objects to be converted @return COSArray representation or null if input is null
1486 Initializes PDRange with default value range [0, 1].
1487 Initializes an empty FDFOptionElement with default values.
1488 Initializes default PDF font settings with a single font and scale factor.
1489 Creates and populates COSArray with mask components. @return populated COSArray object
1490 Initializes a new PDDevice object with default device name.
1491 Initializes a 3D point with zero coordinates.
1492 Returns the color space for image masking. @return PDColorSpace object
1493 Initializes a PDIndexed object with default properties.
1494 Creates a COSArray representing a rectangular mask with x and y coordinates ranging from -100 to 100.
1495 Initializes a PDPattern object with the provided resources. @param resources PDResources instance for pattern configuration
1496 Initializes PDSeparation object with default values.
1497 Initializes PDTristimulus with default RGB values (0, 0, 0).
1498 Initializes a PDTristimulus object from a 1D float array. @param array input array containing up to 3 color values
1499 Applies the given affine transformation to a mask. @param transform AffineTransform object
1500 Creates a PDImageXObject from the given byte array and PDDocument. @param document PDDocument instance @param byteArray image data as bytes @return PDImageXObject object or null if not supported
1501 Creates a COSArray with mask values from the single array. @return COSArray object containing 6 float values
1502 Recursively processes a COSObjectable at the specified index. @param index current processing index @param object COSObjectable to process
1503 Sets a bit in the mask at the specified index to the given value. @param index the index of the bit to modify @param value the new value for the bit (0 or 1)
1504 Sets mask value at specified index with provided name. @param index index of mask to set @param name name associated with mask value
1505 Calls m1 with COSString representation of input string or null. @param index integer parameter @param string string to be converted (may be null)
1506 Initializes mask values in the range array with minimum threshold. @param min minimum value to use as threshold
1507 Initializes mask values in rangeArray with specified maximum value. @param max maximum value to use in initialization
1508 Sets mask value in rectArray. @param value float value to set
1509 Sets a float value to the first element of the rectangular array. @param value the float value to be set
1510 Sets the first element of rectArray's m1 array to the given value. @param value the float value to be assigned
1511 Sets mask value in the rectangle array. @param value float value to set
1512 Updates array value at specified index with the given colour. @param index array index @param colour PDGamma object to be stored or null for default value
1513 Masks COSArray elements with FUNC_MASK values. @param array COSArray to modify @param objNum object number @param genNum generation number
1514 Sets option mask to specified value. @param opt option value as string
1515 Sets a mask value using the provided string. @param da input string to set as mask
1516 Sets font mask size. @param size float value representing font size
1517 Masks colors in the provided list of names. @param names collection of colorant names to mask
1518 Initializes or resets device N attributes based on input. @param attributes DeviceNAttributes object to use (null for default)
1519 Updates the color mask with a new color space. @param cs new color space to apply
1520 Sets the first value of the mask to a cosine float with amplitude 'r'. @param r amplitude of the cosine float
1521 Updates M1 value with cosine of input angle. @param g input angle in radians
1522 Sets mask value to 2 times the input float value. @param b input float value
1523 Sets the color space mask to the provided base color space. @param base base color space object
1524 Sets the mask value in the array with the given name. @param name unique identifier of the array element
1525 Sets the alternate color space using the provided PDColorSpace. @param colorSpace alternate color space to set
1526 Sets the value of the first element in the array to the given float.
1527 Sets the value of M1 in the values array to 1 with a floating-point value.
1528 Sets mask value at index 2 to input float 'z'. @param z input value to be masked
1529 Recursively sets or updates a dictionary item with the given key and value. @param key name of the item to set @param value new value for the specified item (or null to remove)
1530 Sets mask flag with specified key and value. @param key unique identifier @param value true/false status of the mask
1531 Sets a mask attribute with given key and value. @param key unique identifier @param value boolean flag to set or clear
1532 Recursively wraps value in a COSName object with the given key.
1533 Sets a mask value in the document. @param key COSName of the key to set @param value string representation of the mask value
1534 Sets or clears a named flag using the given COS string. @param key COSName object representing the flag @param value String value to set or clear the flag with (null to clear)
1535 Sets a function mask attribute with the given name and value. @param key unique identifier of the attribute @param value new integer value for the attribute
1536 Sets an integer value in the COS dictionary. @param key unique identifier @param value integer value to set
1537 Sets a floating-point mask value. @param key unique identifier @param value floating-point value to set
1538 Processes a COSDictionary to produce a COSStream. @param dictionary input document object @param startPosition starting position in the stream @param streamLength length of the stream @return processed COSStream or null if error occurs
1539 Updates the encryption trailer in the given dictionary. @param encDictionary COSDictionary containing encryption information
1540 Applies mask to COSArray based on ID. @param id COSArray containing IDs to apply mask to
1541 Parses and interprets the content stream to extract a JSON-like object. @throws IOException if an error occurs during parsing
1542 Initializes a PDDocument with a StreamCacheCreateFunction. @param streamCacheCreateFunction function to create stream cache
1543 Updates document information with provided details. @param info PDDocumentInformation object containing updated data
1544 Initializes the PDDocumentCatalog instance from a given PDDocument. @param doc the parent PDDocument object
1545 Sets thread mask in PDF document. @param threads list of PDThreads to update
1546 Adds output intents to the PDF document's metadata. @param outputIntents list of PDOutputIntent objects
1547 Sets or clears the crop box mask. @param cropBox rectangle defining the crop area or null to clear
1548 Sets PDF content streams in the current page. @param contents list of PDStream objects
1549 Masks thread beads in the page using the provided list. @param beads list of PDThreadBead objects to mask
1550 Adds annotation list to PDF page metadata. @param annotations list of PDAnnotations to mask
1551 Updates the page's VP mask with the provided viewport dictionaries. @param viewports list of PDViewportDictionary objects
1552 Initializes a new PDPageTree object with an empty dictionary and default values.
1553 Processes object o and recursively calls m3 on child objects. @param o object to process @return true if processing succeeded, false otherwise
1554 Calls methods on child objects and performs additional operations. @param None
1555 Replaces an element at the specified index with a new one. @param index position in the list @param element new value to replace
1556 Adds an element to the list at a specified index. @param index position in the list @param element item to be added (must implement COSObjectable)
1557 Updates the map with a new key-value pair and delegates to another storage. @param key unique identifier @param value COSObjectable data
1558 Returns a dictionary representing the FUNC_MASK.
1559 Initializes PDF complex file specification object.
1560 Initializes PDComplexFileSpecification object from a COS dictionary. @param dict COS dictionary containing file specification data or null to create an empty one
1561 Updates range values and notifies associated components. @param rangeValues COSArray of updated range values
1562 Initializes mask with given domain values. @param domainValues COSArray of domain values
1563 Updates and encodes COS array values. @param encodeValues COS array to process
1564 Initializes mask values from COSArray. @param decodeValues COSArray containing mask data
1565 Applies mask to COSBase object. @param k COSBase object to modify
1566 Converts and stores class map data in a PDF document. @param classMap map of attribute names to objects
1567 Applies mask to list of user properties. @param userProperties list of PDUserProperty objects
1568 Applies a stroke-style pattern to the graphics context. @param dashArray line style pattern
1569 Updates filter dictionary with specified mask. @param cfm COSName representing the filter mask
1570 Sets filter mask using provided string value. @param filter filter string to apply
1571 Updates dictionary with masked byte array. @param o input byte array to mask
1572 Updates dictionary with user data from binary array. @param u binary user data
1573 Sets the OE mask in the PDF dictionary. @param oe byte array representing the OE mask
1574 Updates the U-E mask in the PDF dictionary. @param ue byte array representing the U-E mask
1575 Adds a list of recipient masks to the PDF document. @param recipients 2D array of byte arrays representing recipient masks
1576 Sets the mask for the specified stream filter. @param streamFilterName unique identifier of the stream filter
1577 Sets mask filter for the given COSName. @param stringFilterName name of the filter to apply
1578 Sets PDF permissions mask. @param perms byte array representing permission flags
1579 Clears mask-related entries from the dictionary.
1580 Initializes an empty annotation object with default settings.
1581 Sets a color mask annotation with the specified Color object. @param c Color to be masked
1582 Sets function mask with given return code. @param rc return code to set in function mask
1583 Applies a color mask to the annotation. @param color Color object to apply
1584 Applies mask to float array. @param callout input float array
1585 Initializes and sets the INKLIST annotation with a filtered InkList. @param inklist list of Ink arrays to process
1586 Sets mask values in annot based on input array. @param line input float array
1587 Sets mask annotation for the given color. @param color Color object to annotate
1588 Sets vertex data in the annotation model. @param vertices array of float values representing 3D vertices
1589 Sets annotation mask for the given Color object. @param color Color object to set mask for
1590 Sets 3D vertex mask array. @param vertices float array of vertices
1591 Applies a fill mask to the annotation based on the provided color. @param color Color object defining the fill color
1592 Sets mask annotation on the current object with given color. @param color Color object to use for masking
1593 Updates quadpoints in annotation model with 3D coordinates. @param coords array of 3D float coordinates
1594 Masks COSArray as user ID and updates FDF data.
1595 Adds field masks to PDF form data. @param fields list of FDFField objects to mask
1596 Adds FDF page list to PDF document. @param pages collection of FDF pages
1597 Sets annotations in PDF with given list of FDF annotations. @param annots list of FDF annotations to set
1598 Applies mask to COSStream. @param diff input stream containing differences
1599 Adds a list of PDFileSpecifications as embedded files to the PDF. @param embedded list of file specifications
1600 Sets field value to an array of FDFFields. @param kids list of FDF fields
1601 Sets a field mask using the provided value. @param value Object representing the mask value
1602 Sets function mask from COSBase value. @param value COSBase object containing function mask data
1603 Sets FF field with a masked integer value. @param ff the integer value to be set
1604 Updates FF mask field with specified integer value. @param ff the new mask value
1605 Sets field value to mask based on input flag. @param ff input flag to convert and set
1606 Sets mask value in field using provided integer. @param f integer value to set as mask
1607 Applies mask to field with specified flags. @param ff Integer representing flag values
1608 Sets a mask value for the specified field. @param ff Integer value to be set
1609 Sets masked return value in field. @param rv COSString containing masked value
1610 Sets mask value from COSStream. @param rv COSStream containing mask data
1611 Sets mask value to dictionary with specified string. @param before input string to be masked
1612 Updates mask value in dictionary with specified string. @param after string to set as mask value
1613 Puts key-value pairs from the provided map into a COSArray and adds it to the dictionary. @param map collection of JavaScript actions to be masked
1614 Sets template array on page. @param templates collection of FDFTemplates to be set
1615 Sets field mask using provided FDFFields. @param fields list of FDF fields to include in mask
1616 Calculates and stores font widths for CID-to-GID mapping. @param cidToGid mapping of character IDs to glyph IDs
1617 Initializes a PDFont object with default settings.
1618 Initializes a font descriptor dictionary. @param none
1619 Sets or updates the font name in the dictionary. @param fontName font name to set (null for removal)
1620 Sets font family mask in the PDF dictionary. @param fontFamily string value for the font family
1621 Sets the font stretch attribute in the document dictionary. @param fontStretch string value for font stretch (e.g. 'normal', 'condensed')
1622 Sets font bounding box mask for the specified rectangle. @param rect PDRectangle object to process
1623 Sets character set for mask dictionary. @param charSet encoding scheme (e.g. UTF-8)
1624 Sets gamma mask value. @param value gamma mask value to set
1625 Updates the function mask in the PDF dictionary with the specified gamma value. @param gamma PDGamma object containing gamma data or null to clear
1626 Converts Matrix object to COSArray and stores it in the dictionary. @param matrix input Matrix object
1627 Adds colorant information to the PDF document. @param colorants Map of color space names to their corresponding PDColorSpace objects
1628 Initializes transparency group attributes with default settings.
1629 Applies filter masks to the document. @param filters list of filter strings
1630 Initializes an empty PDF Optional Content Membership Dictionary.
1631 Applies mask to visibility policy. @param visibilityPolicy COSName representing new policy
1632 Sets the transformation matrix in a PDF page. @param transform AffineTransform object containing matrix data
1633 Sets or clears the bounding box mask. @param bbox rectangle object to set; null to clear
1634 Updates the background and dictionary with a new COSArray. @param newBackground COSArray containing new background data
1635 Updates the bounding box and notifies PDF viewer of change. @param newBBox new rectangle bounds or null to clear
1636 Sets the color space for masking. @param colorSpace PDColorSpace object or null to reset
1637 Initializes and updates internal function state from provided COSArray. @param newFunctions array of functions to initialize with
1638 Applies the provided AffineTransform to generate a PDF matrix. @param transform AffineTransform object
1639 Updates the domain of this object with the provided COS array. @param newDomain new domain to be applied
1640 Updates the mask extension and notifies listeners. @param newExtend COSArray representing updated mask extensions
1641 Updates the domain and notifies listeners of the change. @param newDomain new COSArray representing the updated domain
1642 Updates mask coordinates with new values. @param newCoords array of updated coordinate values
1643 Updates the COSArray and invokes m1() with DECODE operation. @param decodeValues array to update
1644 Initializes an extended graphics state object with default values.
1645 Sets Blend Mode in dictionary based on input mode. @param bm BlendMode to be applied
1646 Sets or clears a float value in the dictionary. @param key COSName key to update @param value Float value to set (null to clear)
1647 Applies mask operation to COSBase object. @param transfer COSBase object to process
1648 Sets the mask attribute of the dictionary. @param transfer2 COSBase object containing the new value
1649 Updates the action's NEXT mask with a list of actions. @param next List of PDActions to update the mask with
1650 Sets mask action on the given COSBase object. @param t COSBase object to set mask action on
1651 Sets the action mask based on the given boolean value. @param h true to set, false to clear
1652 Applies mask to COSArray. @param array COSArray to be masked
1653 Applies mask to COSStream sound. @param sound COSStream object to be masked
1654 Applies mask to COSArray. @param array COSArray to apply mask to
1655 Applies mask to COSBase object. @param d COSBase object to be masked
1656 Applies function mask to COSBase instance. @param b COSBase object to modify
1657 Validates and sets functional mask for the given relationship. @param relationship COSName representing the relationship type (P or C)
1658 Initializes a new PDF annotation object with type 'annotation'.
1659 Sets mask coordinates from a PDRectangle object. @param rectangle PDRectangle object containing mask bounds
1660 Applies mask to COSArray representing border. @param borderArray array of border elements
1661 Sets mask values for left, top, right, and bottom margins. @param differenceLeft left margin adjustment @param differenceTop top margin adjustment @param differenceRight right margin adjustment @param differenceBottom bottom margin adjustment
1662 Sets PDF page margins based on differences from default values. @param differenceLeft left margin adjustment @param differenceTop top margin adjustment @param differenceRight right margin adjustment @param differenceBottom bottom margin adjustment
1663 Applies function mask to float array. @param callout input float array
1664 Applies mask to user profile by updating Ink List. @param inkList 2D array of float paths
1665 Applies mask function to array of floats. @param l input float array
1666 Sets quad points mask. @param quadPoints array of point coordinates
1667 Sets mask value from input string. @param rc input string containing mask value
1668 Applies mask operation on input point array. @param points array of float values representing points
1669 Applies mask to 2D points array. @param points input point coordinates
1670 Applies markup mask to annotation. @param annot PDAnnotationMarkup object
1671 Sets page margins based on differences from default values. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1672 Applies quad point mask to specified array. @param quadPoints float array of quad points
1673 Initializes a new PDAppearanceDictionary instance with default settings.
1674 Applies mask to COSArray. @param dashArray array of coordinates to be masked
1675 Initializes a new PDF seed value object with default settings.
1676 Sets the filter mask in the COS dictionary. @param filter COSName representing the filter to apply
1677 Applies a list of subfilters to the dictionary. @param subfilter list of filter names
1678 Validates and appends allowed digest methods to a dictionary. @param digestMethod list of method names to validate
1679 Sets mask reason(s) in dictionary. @param reasons list of reason strings
1680 Stores MDP value in dictionary with key COSName.MDP. @param mdp PDSeedValueMDP object containing the value to store
1681 Stores timestamp value in the dictionary. @param timestamp PDSeedValueTimeStamp object containing time data
1682 Updates legal attestations in the dictionary with specified values. @param legalAttestation list of attestations to update
1683 Initializes a new PD Seed Value Certificate object.
1684 Masks subject data using provided byte arrays and stores in dictionary. @param subjects list of subject data to be masked
1685 Converts a list of subject DN maps to a COSDictionary array within the PDF dictionary. @param subjectDN list of subject DN name-value pairs
1686 Updates the KEY_USAGE extension in the dictionary with the specified list of key usages. @param keyUsageExtensions list of key usage extensions to update
1687 Updates issuer list in dictionary with provided issuer identities. @param issuers list of byte arrays representing issuer identities
1688 Updates OID values in the dictionary with the provided byte strings. @param oidByteStrings list of OID bytes
1689 Initializes PDSignature object with default signature type.
1690 Sets mask type in dictionary. @param type COSName object representing the mask type
1691 Sets filter mask in COSName dictionary. @param filter COSName object to set as filter
1692 Sets the SUB_FILTER attribute in the dictionary. @param subfilter COSName representing the filter to set
1693 Sets byte range mask in PDF document. @param range 4-element array of integers representing the byte range
1694 Adds byte content to PDF document. @param bytes array of bytes to add
1695 Sets the mask color for a fill operation. @param textColor Color object to convert and apply
1696 Initializes an AcroForm object from a given PDF document. @param doc the source PDF document
1697 Sets field mask using provided list of PDFields. @param fields list of PDF form fields to be masked
1698 Adds field masks to PDF document. @param fields list of PDFields to mask
1699 Initializes a PDF button with the given PDAcroForm. @param acroForm parent form object
1700 Applies mask to specified values. @param values list of strings to be masked
1701 Initializes a PDChoice object with an associated PDAcroForm. @param acroForm parent AcroForm object
1702 Sets PDF field children array. @param children list of PD fields to be set
1703 Sets mask value on specified COS object. @param object COS object to set mask on
1704 Updates the mask with the provided COSBase value. @param value COSBase object containing the new mask data
1705 Initializes a PDSignatureField object with the given acroForm. @param acroForm parent AcroForm
1706 Initializes PDTextField with PDAcroForm. @param acroForm parent form of the text field
1707 Applies a style mask to the document. @param defaultStyleString the style string to apply or null for default
1708 Sets mask value for Rich Text field. @param richTextValue text to be masked
1709 Initializes coordinate system origin with provided values. @param coordSystemOrigin array of float values representing origin coordinates
1710 Initializes a new PDF thread object. @param none
1711 Applies mask for specified transition direction. @param direction PDTransitionDirection enum value
1712 Sets animation duration using parametric formula. @param duration animation duration in seconds
1713 Applies scaling factor to mask. @param scale floating-point value representing scaling factor
1714 Sets the mask flag of the current 3D object based on opacity. @param opaque true if the object is not transparent
1715 Processes the given collection, handling filtered lists and recursive dictionary updates. @param c Collection to process
1716 Sets non-stroking color based on operand mask. @param operands list of color space identifiers
1717 Inserts element at specified index in the collection. @param index position to insert @param c Collection of elements to manipulate
1718 Processes COS array of objects, invoking subsequent methods based on result. @param objectList list of objects to process
1719 Returns an array of float values by processing the COS hierarchy. @return Array of floats or null if not processed
1720 Extracts a list of float values from the data stream. @return List of Float objects or null if invalid
1721 Generates a list of integers from the COSNumber objects in the given range. @return List of integers or null values if not applicable
1722 Updates COSArray with new parent and structure type for each dictionary entry. @param kArray COSArray to update @param newParent COSDictionary to set as parent @param newStructureType COSName of new structure type (optional)
1723 Returns the minimum value from the specified array index.
1724 Retrieves and returns the maximum value from the range array.
1725 Retrieves a PDGamma value from the array at the specified index. @param index array index @return PDGamma object or null if not found
1726 Retrieves and returns a string value from an Option object.
1727 Retrieves and returns a string value from the 'option' object. @return The retrieved string value or null if not available.
1728 Resolves the given COSBlendMode to a BlendMode enum value. @param cosBlendMode COS object representing the blend mode @return corresponding BlendMode enum value or NORMAL if not found
1729 Returns list of colorant names masked by functional group. @return List of String values representing colorant masks
1730 Returns the alternate color space. @return PDColorSpace object or null if not initialized
1731 Returns the function mask as a string. @return function mask value
1732 Creates a PDDestination object from the given COSBase. @param base COSBase input @return PDDestination object or null if invalid
1733 Creates a PDF page from the first item in the array, if it's a valid page. @return PDPage object or null if not valid
1734 Returns a function mask value based on the given array. @return int function mask value or -1 if not found
1735 Returns a float value from the 5th element of the array, or -1 if not a number.
1736 Initializes a new Matrix object from the given COSArray. Extracts and stores relevant values into the matrix's single array.
1737 Invokes M2 method with COSName.m1() result as input. @param key input string
1738 Tries to fetch a COSBase object by the given first or second key. If the first key is not found, attempts to use the second key instead. @param firstKey primary key to search for @param secondKey secondary key to search for if primary fails @return COSBase object or null if neither key is found
1739 Retrieves and returns a COSName object associated with the given key. @param key COSName to retrieve @return COSName object or null if not found
1740 Retrieves a COSDictionary instance by name, or returns null if not found. @param key unique COSName identifier
1741 Retrieves a COS stream associated with the given key. @param key unique identifier for the COS stream @return COSStream object or null if not found
1742 Returns a COSArray instance associated with the given key, or null if not found. @param key unique identifier for the array
1743 Returns a COSName instance from the given key or default value. @param key COSName to fetch, or null for default @param defaultValue default value to return if key is invalid @return COSName instance or defaultValue if key is invalid
1744 Retrieves a string mask value from the COSName or COSString object. @param key COSName to retrieve mask value from @return String mask value or null if not found
1745 Retrieves string representation from COSName object. @param key COSName to extract value from @return String representation or null if not applicable
1746 Converts a COSName to a date mask. @param key COSName to convert @return Calendar object or null if conversion fails
1747 Retrieves a mask value for the given COSName key, returning the default value if not found or not numeric. @param key COSName to fetch mask from @param defaultValue default value to return if not found @return long mask value or default value
1748 Retrieves a float value from a COSName key, or returns the default value. @param key unique identifier for the COSName @param defaultValue fallback value if not found @return float value associated with the key, or defaultValue if missing
1749 Saves and restores graphics state for a PDF page. @param page PDPage object to process
1750 Retrieves a collection of PDF streams from the page contents. @return Iterator of PDStream objects
1751 Checks for the presence of a stream or array in document contents.
1752 Converts input dictionary to a COSDictionaryMap. @param map input dictionary @return COSDictionaryMap or null if map is null
1753 Updates and clears MASK attribute in the given PDAttributeObject. @param attributeObject PDAttributeObject to update
1754 Extracts and returns a collection of unique class names from the specified key. @return Revisions collection of class names
1755 Masks or unsets a class attribute by name. @param className the name of the attribute to mask
1756 Updates or creates the 'K' key in the document object. @param object COSBase object to update
1757 Updates the mask for a given user by replacing or adding a new kid. @param newKid new COSBase object to replace or add @param refKid reference COSBase object to compare with
1758 Checks if an object should be masked based on its parent-child relationship. @param object COSBase object to evaluate
1759 Returns the mask value of the current COSBase object. @return COSBase object representing the mask
1760 Returns a COSBase instance based on specific mask values. @return COSBase object
1761 Returns a flag indicating whether to mask or not. @return boolean flag, defaulting to 'true' if metadata encryption is disabled
1762 Returns the Owner Encryption key as a byte array. @return byte[] Owner Encryption key or null if not present
1763 Retrieves the user encryption key as a binary array. @return byte[] user encryption key or null if not set
1764 Retrieves the permissions string from the PDF document. @return byte array containing the permissions or null if not found
1765 Retrieves the mask value from the annotation. @return The mask value as an Integer, or null if not found.
1766 Retrieves the base object associated with a function mask. @return COSBase object or null if invalid
1767 Retrieves the FF mask value from the field. @return Integer representation of the FF mask or null if not found
1768 Retrieves the FF mask value from the SET_FF field. @return Integer representation of the mask or null if not set
1769 Retrieves the FF mask value from the CLR_FF field. @return Integer representation of the FF mask or null if not found
1770 Retrieves the functional mask value. @return Integer representing the functional mask or null if not found
1771 Returns the function mask value. @return Function mask as an Integer, or null if not found
1772 Retrieves the mask value from the CLR_F field. @return Integer mask value or null if not found
1773 Calculates the default width for mask functionality. @return The default width value
1774 Retrieves the color space for the PDF document. @return PDColorSpace object or null if not found
1775 Retrieves the color space for a given PDF resource. @param resources PDF document resources @return PDColorSpace object or null if not found
1776 Constructs an Optional Content Group from a PDF dictionary. @param dict COSDictionary containing OCG-specific data
1777 Initializes an OCMD membership dictionary from a COSDictionary. @param dict COSDictionary object to initialize with
1778 Retrieves the function mask value from the dictionary. @return The function mask integer or null if not found
1779 Returns a PDSoftMask object from the dictionary. @return PDSoftMask object or null if not found
1780 Retrieves the numeric value associated with a given key from the dictionary. @param key unique identifier in the dictionary @return Float value or null if not found
1781 Returns the mask dictionary for function arguments. @return COSBase object representing the mask or null on error
1782 Retrieves the mask array from the dictionary, checking for correct size. @return COSBase object representing the mask or null on failure
1783 Returns the mask array for the backdrop color.
1784 Returns the open mode based on user preference or new window flag. @return OpenMode enum value
1785 Returns a mask of functional elements based on current action. @return COSBase object representing functional mask
1786 Returns the open mode based on user preference or new window setting. @return OpenMode value: NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE
1787 Returns the open mode based on user preference or window type. @return OpenMode enum value
1788 Retrieves a named destination from the PDF dictionary. @return PDNamedDestination object or null if not found
1789 Initializes a PDAnnotation object from a COSDictionary. @param dict COS dictionary containing annotation data
1790 Returns function mask as a byte array. @return byte array representation of function mask or empty array if not found
1791 Retrieves XFA resource from document dictionary. @return PDXFAResource object or null if not found
1792 Retrieves a list of field masks. @return List of field identifiers as strings
1793 Retrieves a list of mask values from the specified option. @return list of mask strings
1794 Extracts a list of string values from the given COSName. @param name COSName object to process @return List of strings or empty list if not found
1795 Retrieves COSBase object associated with the given key from the current or parent dictionary. @param key COSName identifier @return COSBase object or null if not found
1796 Returns a COSBase instance based on a specific mask value. @return COSBase object representing a masked value
1797 Retrieves and returns the function mask value. @return Function mask string or empty string if not found.
1798 Returns a COSBase instance with specific mask applied.
1799 Returns a string representation of the function mask. @return COSDictionary object as a string or an error message if IO occurs
1800 Recursively processes a collection of indirect objects, removing any that conflict with the primary object. @param indirectObjects Collection of COSObjectKeys to process
1801 Updates the imported page's indirect object keys and masks. @param importedPage PDPage object being updated
1802 Calls m1() on dependent objects and ensures cleanup of resources.
1803 Generates a mask for the specified COS object. @param key COSObjectKey to use in masking @param obj COSBase object to be masked
1804 Masks COS object with FUNC. @param obj COSBase object to mask
1805 Retrieves a key from the object pool. @param object input object to retrieve key for
1806 Generates or updates a COSObjectKey based on the provided COSBase object. @param key existing COSObjectKey to reuse or null @return new COSObjectKey instance if generated or updated
1807 Delegates object pool operation to object pool manager. @param object COSBase object to be operated on
1808 Creates and populates a list of COSWriterObjectStream objects. @return List of object streams
1809 Calculates and draws line layout with specified text alignment. @param lines list of text lines to be drawn @param isFirstParagraph true if this is the first paragraph, false otherwise
1810 Calculates and updates mask positions based on current angle. @param angleCur current rotation angle @param r radius of the circle @param alpha offset angle @param cx center x coordinate @param cy center y coordinate
1811 Calculates and returns an array of points that define a FUNC_MASK shape. @param angleCur the current angle @param r the radius @return Point2D.Double[] array of points or null if error occurs
1812 Generates a Bezier curve with specified parameters. @param startAng initial angle @param endAng final angle @param rx x-axis scaling factor @param ry y-axis scaling factor @param cx center x-coordinate @param cy center y-coordinate @param out list of points on the curve @param addMoveTo whether to add a "move to" command at the start
1813 Initializes ICCBased object from PDDocument. @param doc the input PDF document
1814 Initializes a PDPattern object with given resources and color space. @param resources PDResources instance @param colorSpace PDColorSpace instance
1815 Adds OCGS arrays to the dictionary. @param ocgs list of PDPropertyLists
1816 Applies a list of number format dictionaries to the mask. @param changeXs Array of PDNumberFormatDictionary objects
1817 Updates the Y mask in the PDF dictionary. @param changeYs array of PDNumberFormatDictionary updates
1818 Applies mask to an array of number format dictionaries. @param distances array of PDNumberFormatDictionary objects
1819 Applies mask to each PDF number format dictionary in the given array.
1820 Processes an array of PDNumberFormatDictionary objects and updates the PDF document's "T" entry. @param angles array of number format dictionaries to process
1821 Adds a list of PDNumberFormatDictionaries to the parent element. @param lineSloaps collection of dictionaries to add
1822 Calls overloaded version with default parameter. @param size array size
1823 Parses a directory entry character and returns the corresponding COSBase object. @return COSBase object or null if unknown or invalid
1824 Applies mask to decoded parameters. @param decodeParams list of decoded parameter values
1825 Sets mask for decoding parameters. @param decodeParams list of parameters to be decoded
1826 Applies mask to kid objects in the provided list. @param kids collection of kid objects to mask
1827 Sets an array of option values in the PDF document. @param options list of option objects
1828 Creates a PDRange object based on the given integer. @param n input value used to determine the PDRange instance
1829 Computes and sets the CID font mask. @param cidFont COS dictionary for the CID font
1830 Sets the line dash pattern mask. @param dashPattern line dash pattern to be applied
1831 Sets the mask value in the PDF document. @param color PDColor object containing the mask data
1832 Applies color mask to PDF graphics state. @param c PDColor object containing color values
1833 Sets mask color based on input PDColor object. @param ic input color to apply as mask
1834 Applies mask to color using internal function. @param ic input color object
1835 Applies color mask to PDColor object. @param ic input color data
1836 Applies mask to color. @param ic input color to be masked
1837 Applies mask to color. @param c color object
1838 Sets color mask for background using provided PDColor object. @param c PDColor object containing color data
1839 Applies mask to PDColor object. @param textColor color data
1840 Creates an image object from the given input stream. @param document PDDocument instance @param stream InputStream containing image data @return PDImageXObject instance or null on failure
1841 Applies default mask settings to the specified PDFont. @param font target font object
1842 Applies function mask transformation to the PDFunction object. @param tint input PDFunction object
1843 Sets and stores function mask transformation. @param tint function to be masked
1844 Applies mask to PDPage object. @param page the PDPage instance to modify
1845 Creates a rectangle from mask functions m1 and m3. @return PDRectangle object representing the result
1846 Applies mask to PDGamma color. @param colour input color object
1847 Applies mask to PDGamma object. @param colour PDGamma object to be modified
1848 Applies mask to specified PDGamma colour. @param colour PDGamma object to be masked
1849 Applies a gamma mask to the specified color. @param colour PDGamma object representing the color
1850 Decrypts or processes a COSBase object based on its type. @param obj the COSBase object to process @param objNum and genNum are parameters for decryption/processing
1851 Wraps primitive key in COSName object and delegates to m2. @param key string key @param value wrapped COSObjectable value
1852 Clears and resets the cached AcroForm object. @param acroForm PDAcroForm instance to reset
1853 Configures viewer preferences with a mask. @param prefs PDViewerPreferences instance to update
1854 Sets the document outline. @param outlines PDDocumentOutline object to set
1855 Sets metadata from PDMetadata object. @param meta PDMetadata object to set
1856 Adds an open action to the PDF destination. @param action PDDestinationOrAction object
1857 Applies mask to document catalog. @param actions PDDocumentCatalogAdditionalActions object
1858 Sets document name dictionary. @param names PDDocumentNameDictionary object
1859 Updates the root object with the given PDMarkInfo. @param markInfo PDMarkInfo object to update
1860 Sets URI mask on the root element. @param uri dictionary containing URI settings
1861 Sets mask on PDStructureTreeRoot object. @param treeRoot root of structure tree
1862 Sets page label mask on the PDF document. @param labels PDPageLabels object containing label settings
1863 Updates and clears destination masks in the PDDestinationNameTree. @param dests PDDestinationNameTreeNode to update
1864 Masks PDE embedded files in the name dictionary. @param ef PDEmbeddedFilesNameTreeNode object
1865 Updates JavaScript name dictionary with tree node. @param js JavascriptNameTreeNode instance to process
1866 Initializes a PDF page with specified media box. @param mediaBox rectangle defining the page's dimensions
1867 Sets and applies mask resources to the page. @param resources PDResources object or null to clear
1868 Updates the media box for the current PDF page. @param mediaBox new rectangle defining the page's boundaries
1869 Sets the bleed box mask on the PDF page. @param bleedBox rectangle defining the bleed area or null for default
1870 Sets or clears the trim box on the PDF page. @param trimBox rectangle to set as trim box or null for clear
1871 Sets or clears the Art Box mask. @param artBox rectangle to set as Art Box (null to clear)
1872 Sets the PDStream contents in the page model. @param contents PDF stream object
1873 Applies metadata mask to PDMetadata object. @param meta PDMetadata object to be masked
1874 Applies mask to PDPageAdditionalActions object. @param actions object containing page actions
1875 Sets mask on transition. @param transition PDTransition object to apply mask to
1876 Applies a mask to a page transition. @param transition the transition effect @param duration the duration of the mask
1877 Applies mask to PDPage instance. @param page PDPage object to be masked
1878 Applies mask to PDAnnotation. @param annotation PDAnnotation object to apply mask to
1879 Applies mask to PDX object. @param xobject PDXObject instance
1880 Applies mask to specified PDF page. @param page PDPage object to be masked
1881 Applies mask function to PDStructureNode. @param structureNode node to apply mask to
1882 Applies mask to specified PDF page. @param page PDPage object to apply mask to
1883 Updates attribute mask with revisions from the provided attributes collection. @param attributes Revisions of PDAttributeObjects to update
1884 Masks PDStructureElement tree based on ID. @param idTree PDNameTreeNode containing structure element IDs
1885 Sets mask on PDNumberTreeNode instance. @param parentTree PDNumberTreeNode to apply mask to
1886 Sets mask annotation on PDF page. @param rectangle bounding box of the mask
1887 Sets mask annotation for PDBorderStyleDictionary. @param bs PDBorderStyleDictionary to annotate
1888 Applies mask to PDBorderEffectDictionary. @param be dictionary with border effect data
1889 Applies mask to PDF rectangle. @param fringe PDRectangle object to mask
1890 Sets mask on rectangle. @param fringe PDRectangle object to annotate
1891 Sets the mask for the given PDRectangle. @param fringe rectangle to set mask for
1892 Sets mask annotation on rectangle with specified coordinates. @param fringe rectangle to annotate
1893 Registers FDF dictionary with catalog. @param fdf FDF dictionary to register
1894 Updates functional mask of a PDSignature object in the catalog. @param sig PDSignature object to update
1895 Sets mask bit in PDF file specification. @param fs PDFileSpecification object to modify
1896 Sets JavaScript function mask. @param js FDFJavaScript object to set
1897 Sets the FDF catalog mask in the PDF document. @param cat FDFCatalog object to set as the mask
1898 Sets mask appearance properties from PDAppearanceDictionary. @param ap PDAppearanceDictionary object
1899 Sets the named page reference mask. @param ref FDFNamedPageReference object
1900 Applies mask to FDF icon using specified fit type. @param fit icon fit type
1901 Applies mask action to the PDAction object. @param a PDAction object to modify
1902 Applies mask functionality to additional actions. @param aa PDAdditionalActions object to be masked
1903 Applies mask to PDRange based on COSName.A.
1904 Applies mask to PD file specification. @param fs PD file specification to be masked
1905 Sets the FDF page information mask. @param info FDFPageInfo object containing page data
1906 Sets mask value from named page reference. @param tRef Named page reference to set mask value from
1907 Sets font file from PDF stream. @param type1Stream PDF stream containing font data
1908 Applies font file mask to PDStream object. @param ttfStream input stream containing font data
1909 Applies mask to PDStream. @param stream input PDF stream
1910 Sets mask in PDStream. @param stream input stream to modify
1911 Sets the Tristimulus white point in the color space. @param whitepoint Tristimulus white point data
1912 Sets the black point of the display device. @param blackpoint PDTristimulus object containing color data
1913 Sets the extended graphics state and notifies all interested objects. @param extendedGraphicsState new extended graphics state
1914 Sets and applies mask to given PDShading resources. @param shadingResources Shading resources to be masked
1915 Applies mask to PDResources. @param resources PDResources object to be masked
1916 Replaces existing function with a new one in the array. @param newFunction Function object to replace the current one
1917 Updates the font dictionary with the given PDFontSetting. @param fs PDFontSetting object to update the font
1918 Updates destination mask for the given PDDestination object. @param d PDDestination object to update
1919 Applies mask to PDFileSpecification. @param fs file specification object
1920 Applies mask to target directory. @param targetDirectory directory to be masked
1921 Updates the mask for the specified destination. @param d PDDestination object to update
1922 Applies mask operation to PD file specification. @param fs PDFileSpecification object to process
1923 Applies mask to PDFileSpecification. @param fs file specification object
1924 Sets launch parameters with mask. @param win PDWindowsLaunchParams object to be masked
1925 Masks file specification with functional layer. @param fs PDFileSpecification object to mask
1926 Applies mask to PDF file specification. @param fs PDFileSpecification object to be masked
1927 Applies mask to PDFileSpecification using COSName.F. @param fs file specification to be masked
1928 Executes mask operation on PDAction. @param action PDAction object to operate on
1929 Applies function mask to action. @param e PDAction object to modify
1930 Applies mask action to specified PDAction instance. @param x PDAction object to apply mask to
1931 Applies mask action to the given PDAction. @param d PDAction object to apply mask to
1932 Performs functional mask operation on action. @param u PDAction object to process
1933 Applies mask action to the specified PDAction instance. @param fo the PDAction instance to apply the mask to
1934 Applies mask action to PDAction instance. @param bl PDAction instance to modify
1935 Executes PDAction with COSName.PO mask. @param po PDAction object to execute
1936 Sets the mask action for the given PDAction. @param pc PDAction object to set the mask for
1937 Applies mask to PDAction. @param pv PDAction object to modify
1938 Applies mask to PDAction instance. @param pi PDAction object to modify
1939 Applies mask to PDAction. @param wc PDAction object to apply mask to
1940 Performs function mask operation on PD action. @param ws input PDAction object
1941 Applies mask to PDAction instance. @param ds PDAction object to modify
1942 Updates WP mask in actions using provided PDAction. @param wp PDAction object to update with
1943 Applies mask action to PDAction object. @param dp PDAction object to modify
1944 Updates action mask with provided PDAction instance. @param k PDAction object to update
1945 Applies mask action to PDAction instance. @param f PDAction object to apply mask to
1946 Applies mask action to PDAction instance. @param v PDAction object to modify
1947 Performs function masking on the given PDAction instance. @param c PDAction instance to apply masking to
1948 Masks action with specified PDAction object. @param o PDAction object to mask
1949 Applies mask to action. @param c action to modify
1950 Applies mask to PDTargetDirectory. @param targetDirectory directory object to be masked
1951 Sets or clears mask for a named destination. @param dest PDNamedDestination object to set mask for
1952 Updates PDAppearanceDictionary with mask data. @param appearance PDAppearanceDictionary object to update
1953 Applies function mask to property list. @param oc PDPropertyList object to modify
1954 Configures page masking functionality on the provided PDPage instance. @param page the target PDPage object
1955 Applies mask to PDFileSpecification. @param file specification to be masked
1956 Updates mask with border effect dictionary. @param be PDBorderEffectDictionary object to update
1957 Applies mask to PDRectangle. @param rd rectangle to be masked
1958 Updates mask using specified PDAction. @param action PDAction to apply
1959 Updates mask properties in PDBorderStyleDictionary. @param bs dictionary to update with mask properties
1960 Applies mask to destination PDDestination object. @param dest PDDestination object to apply mask to
1961 Sets mask for the given action URI. @param pa PDActionURI object to set the mask for
1962 Applies mask to annotation popup. @param popup PDAnnotationPopup instance
1963 Sets IRT mask for the given PD annotation. @param irt PDAnnotation object
1964 Masks external data dictionary in database. @param externalData external data dictionary to mask
1965 Updates border style dictionary with mask functionality. @param bs PDBorderStyleDictionary to modify
1966 Applies mask to PDBorderEffectDictionary and processes it. @param be dictionary containing border effect data
1967 Applies mask to PDBorderEffectDictionary object. @param be border effect dictionary
1968 Applies mask to rectangle. @param rd rectangle data
1969 Masks PDA appearance characteristics. @param appearanceCharacteristics dictionary of appearance characteristics
1970 Applies mask operation to PDAction. @param action PDAction object to modify
1971 Applies mask to PDAnnotationAdditionalActions object. @param actions additional annotation actions
1972 Applies mask function to PDBorderStyleDictionary. @param bs PDBorderStyleDictionary object
1973 Marks the given PDTerminalField as having a parent. @param field PDTerminalField instance
1974 Sets mask for PDAppearanceEntry in dictionary. @param entry PDAppearanceEntry object to set mask for
1975 Masks PDAppearanceStream in dictionary using COSName.N.
1976 Masks PDA appearance entry. @param entry PDA appearance data to mask
1977 Masks PDA appearance stream using provided dictionary. @param ap PDAppearanceStream object to be masked
1978 Updates appearance mask in dictionary. @param entry PDAppearanceEntry object to update
1979 Applies mask to appearance stream. @param ap PDAppearanceStream object
1980 Sets the filter data in the build dictionary. @param filter PDPropBuildDataDict instance with filter properties
1981 Updates public security settings in the dictionary. @param pubSec PublicSecurity object to update
1982 Sets application-specific build data in the dictionary. @param app PDPropBuildDataDict object containing build data
1983 Updates the mask value in the dictionary with the provided certificate. @param certificate PDSeedValueCertificate to update with
1984 Sets property build mask in dictionary. @param propBuild Property build object to update
1985 Applies mask function to specified PDOutlineNode. @param outlineNode node to apply mask to
1986 Applies mask functionality to the specified PDOutlineNode. @param outlineNode node to process
1987 Sets destination mask. @param dest PDDestination object to configure
1988 Applies mask to PDAction based on COSName A. @param action PDAction object to modify
1989 Applies mask operation to PDStructureElement. @param structureElement element to process
1990 Applies mask to specified PDOutlineNode. @param outlineNode node to apply mask to
1991 Applies functional mask to specified PDOutlineNode. @param outlineNode node to apply mask to
1992 Sets mask resources from PDResources object. @param dr PDResources containing mask data
1993 Sets XFA resource mask in the dictionary. @param xfa PDXFAResource object to set
1994 Masks PDSignature object. @param value PDSignature to mask
1995 Sets mask on PDSignature object. @param value PDSignature object to modify
1996 Applies mask to PDSeedValue object. @param sv PDSeedValue object to apply mask to
1997 Applies additional form field actions to mask. @param actions Form field actions to apply
1998 Sets parent-child relationships between annotation widgets. @param children list of PDAnnotationWidgets to establish relationships for
1999 Applies mask to specified PDRectangle. @param rectangle target rectangle to apply mask to
2000 Applies mask to PDMeasureDictionary. @param measure PDMeasureDictionary object to be masked
2001 Sets PDF document information mask. @param info PDDocumentInformation object to modify
2002 Applies mask to PDThread. @param thread target thread to apply mask to
2003 Updates thread bead with mask from next bead. @param next reference to next bead in sequence
2004 Updates bead with next thread in sequence. @param previous previous thread bead
2005 Applies mask to specified PDF page. @param page target PDPage object
2006 Applies mask to rectangle. @param rect PDRectangle object with coordinates and size
2007 Marks an entry with the given boolean status. @param value true to mark, false otherwise
2008 Sets mask flag on user properties in dictionary. @param userProps true to enable, false otherwise
2009 Updates dictionary entry for suspects based on input flag. @param suspect true to mark as suspect, false otherwise
2010 Sets the "IsMap" flag based on the provided boolean value. @param value true to indicate map functionality, false otherwise
2011 Sets mask state based on the provided flag. @param open true to open or false to close the mask
2012 Sets mask flag using FD parameter. @param fd boolean value to set in mask
2013 Sets mask flag based on volatility of the file. @param fileIsVolatile true if file is volatile, false otherwise
2014 Configures mask functionality with optional metadata encryption. @param encryptMetaData true to enable encryption, false otherwise
2015 Applies CAP mask to annotation. @param cap boolean flag to enable/disable mask
2016 Sets mask flag to specified state. @param value true to enable or false to disable
2017 Sets mask value in template. @param value boolean flag to enable or disable mask
2018 Sets anti-aliasing flag in the graphics context. @param antiAlias true to enable, false to disable anti-aliasing
2019 Sets operation flag in dictionary. @param op true to enable or false to disable operation
2020 Sets mask operation flag in dictionary. @param op true to enable or false to disable
2021 Sets or clears the SA flag in the dictionary. @param sa true to set, false to clear
2022 Sets mask state in dictionary based on alpha value. @param alpha true to enable, false to disable mask
2023 Sets TK flag in dictionary. @param tk boolean value to set
2024 Applies a mask to the open mode based on the provided value. @param value OpenMode enum value
2025 Handles mask open mode based on the provided value. @param value OpenMode enum value
2026 Sets the mask mode based on the provided OpenMode value. @param value OpenMode enum value to determine the mask behavior
2027 Configures mask functionality to run synchronously or asynchronously. @param synchronous true for synchronous execution, false otherwise
2028 Sets repeat flag on M1 action. @param repeat true to enable repeat, false otherwise
2029 Applies mask to audio based on specified mixing flag. @param mix true to enable mixing, false otherwise
2030 Sets mask behavior based on the provided flag. @param cap true to enable or false to disable masking
2031 Sets mask state based on input flag. @param open true to enable, false to disable
2032 Sets the PRE_RELEASE flag in the dictionary. @param preRelease true to enable pre-release mode, false otherwise
2033 Sets the non-embedded font warning flag in the PDF dictionary. @param noEmbedFontWarning whether to suppress embedded font warnings
2034 Enables/disables trusted mode in the dictionary. @param trustedMode true to enable trusted mode, false otherwise
2035 Sets appearance requirement flag in database. @param value boolean indicating whether appearances are needed
2036 Sets hide toolbar preference. @param value true to hide toolbar, false otherwise
2037 Sets whether to hide the menubar in the preferences. @param value true to hide, false to show
2038 Toggles visibility of window UI based on specified boolean value. @param value true to hide, false to show window UI
2039 Sets the window fit mode preference. @param value true to enable or false to disable
2040 Sets the center window masking preference. @param value true to enable or false to disable masking
2041 Sets display document title preference. @param value boolean flag to enable or disable feature
2042 Builds a COSDictionary for an Appearance XML element. @param appearanceXML the input XML element
2043 Recursively processes key-value pairs using COSName encryption. @param key encrypted key to process @param value associated value to process
2044 Sets page mode mask based on provided mode. @param mode PageMode enumeration value
2045 Sets page layout mask on the root element. @param layout PageLayout object to apply
2046 Sets mask version. @param version new mask version string
2047 Validates and logs a trapped status with the given value. @param value trapped status to validate ('True', 'False', or 'Unknown')
2048 Sets or clears mask style on the root element. @param style style to set (or null to clear)
2049 Initializes a typed dictionary wrapper with the given data type. @param type the COS name of the dictionary type to wrap
2050 Applies mask to user data based on ownership. @param owner unique identifier of entity owning data
2051 Initializes a new instance of PDMarkedContentReference. Sets the type to the specified value.
2052 Initializes a new PDObjectReference instance with default values.
2053 Applies mask function to specified structure type. @param structureType name of structure to mask
2054 Processes revisions of class names and updates the catalog. @param classNames Revisions object containing class name data
2055 Initializes a PDStructureNode with the specified type. @param type PDF document type (e.g., "AcroForm")
2056 Applies mask to font based on provided style. @param style type of font mask (e.g., bold, italic)
2057 Sets specified sub-filter in the filter dictionary. @param subfilter sub-filter value to be set
2058 Sets IT functional mask with specified intent. @param intent functional mask intent string
2059 Applies mask to annotation with specified style. @param style formatting style for mask
2060 Sets mask icon. @param icon name of mask icon to set
2061 Updates COSName.VERSION attribute with specified version string. @param version new version identifier to be updated
2062 Sets the PDF encoding mask using the specified encoding scheme. @param encoding encoding scheme to set (e.g. "UTF-8")
2063 Applies mask to given SW option. @param option string option to be masked
2064 Applies a mask to the specified scale. @param scale the scale to be masked
2065 Initializes abstract pattern with an empty dictionary and sets its type to PATTERN.
2066 Sets mask type. @param type specific mask type to apply
2067 Sets mask value from given string. @param s input string containing mask value
2068 Sets subtype mask using the provided value. @param subType subtype name to set in COSName
2069 Applies mask to string using COSName.AS.
2070 Sets mask configuration by given name. @param name unique identifier of the mask configuration
2071 Applies mask with specified style to current graphics context. @param style name of graphic style to apply
2072 Configures mask settings based on caption positioning.
2073 Applies mask operation based on given mode. @param mode specifies the type of mask operation
2074 Sets mask value using provided runtime name. @param rt runtime name to set mask value for
2075 Applies mask to COS resource with given ID. @param it unique identifier of COS resource to be masked
2076 Calls m2 on retrieved COS instance with given name. @param name COS name to pass to m2
2077 Calls m1() and invokes m2 on its result with specified parameters.
2078 Validates and applies the specified highlighting mode. @param highlightingMode valid mode: N, I, O, P, T
2079 Applies mask to input string. @param s input string to be masked
2080 Initializes external data dictionary with default settings.
2081 Sets the subtype mask using the provided value. @param subtype subtype to set
2082 Updates COSName entry in dictionary with provided user name. @param name user name to update
2083 Updates URL type in the dictionary. @param urlType new URL type to store
2084 Initializes document outline object.
2085 Constructs a PDDocumentOutline from a COS dictionary. @param dic the COS dictionary containing outline information
2086 Initializes a new instance of the PDMeasureDictionary class. Sets the measure dictionary and type name in the underlying COS object.
2087 Sets mask subtype. @param subtype new subtype value
2088 Initializes PDNumberFormatDictionary object with default values.
2089 Calls nested method with COS name and user name. @param name user name to pass to nested method
2090 Initializes a new transition with the specified style. @param style desired transition style
2091 Applies mask to given transition dimension. @param dimension PDTransitionDimension object to be masked
2092 Applies mask function to transition motion. @param motion PDTransitionMotion object
2093 Sets non-full screen page mode preference. @param value NON_FULL_SCREEN_PAGE_MODE enum value
2094 Sets direction preference in user settings. @param value READING_DIRECTION enum value to store
2095 Updates view area boundary with given mask value. @param value BOUNDARY object containing new mask data
2096 Sets the view clip boundary to the specified value. @param value new boundary value
2097 Sets print area boundary mask. @param value Boundary object to apply
2098 Sets print clip boundary to specified value. @param value new boundary value
2099 Sets DUPLEX preference to specified value. @param value new DUPLEX setting
2100 Sets the print scaling preference. @param value PRINT_SCALING enum value
2101 Masks a COSName key with a specified calendar date. @param key COSName to mask @param date calendar date to apply
2102 Recursively updates the internal data structure with new key-value pair. @param key unique identifier @param value associated value
2103 Sets the mask language on the root element. @param language the desired language code
2104 Sets title mask with given string value. @param title title to be set as mask
2105 Sets author mask in database. @param author unique author identifier
2106 Sets subject mask with given string value. @param subject subject value to be masked
2107 Logs keyword filter settings. @param keywords comma-separated list of keywords to mask
2108 Sets mask creator information. @param creator unique user identifier of the mask creator
2109 Sets producer mask information. @param producer unique producer identifier
2110 Sets or clears MASK key in the database based on the provided prefix. @param prefix non-null string value to set the key with or null to clear it
2111 Sets mask on specified file. @param file path to file to set mask on
2112 Masks specified file path. @param file path to mask
2113 Sets mask description. @param description descriptive text for the mask
2114 Masks a user by ID using COSName. @param id unique identifier of the user to mask
2115 Sets mask title. @param title new title value
2116 Sets mask for the current locale based on the provided language. @param language the target language code (e.g. "en", "fr", etc.)
2117 Sets an alternate description in the COS metadata. @param alternateDescription new alternate description value
2118 Applies mask to input string using COSName.E. @param expandedForm string to be masked
2119 Sets the actual text value. @param actualText the new actual text value
2120 Applies FUNC_MASK annotation to the given date string. @param date date string to annotate
2121 Sets function mask annotation with given name. @param name unique function identifier string
2122 Sets content mask annotation with specified value. @param contents string to be annotated
2123 Sets functional mask annotation with given title. @param title functional mask title
2124 Sets annotation subject with provided string value. @param subject subject text to annotate
2125 Sets annotation mask for the given symbol. @param symbol input symbol to annotate
2126 Applies a mask to an annotation based on the specified appearance. @param appearance the appearance of the mask
2127 Sets annotation for mask type based on provided style. @param style style of mask to apply
2128 Applies functional mask to annotation with specified style. @param captionStyle style of functional mask
2129 Sets annotation with specified state value. @param state new state value to be annotated
2130 Sets function mask based on provided state model. @param stateModel state model string
2131 Updates mask status in FDF. @param status new status value
2132 Sets the target mask in FDF. @param target new target value to be set
2133 Masks field value using provided partial string. @param partial partial string to mask with
2134 Sets COSName.NAME to specified string value. @param name string identifier for COSName.NAME
2135 Sets the COSName NAME attribute in the dictionary. @param name string value to be set
2136 Initializes PDOptionalContentProperties object with default values.
2137 Applies JavaScript function mask to the specified action. @param sAction action string to be masked
2138 Applies mask function to input string. @param f input string to be processed
2139 Sets mask value for D-axis in M1 action. @param d new mask value as string
2140 Sets mask value from given string. @param o input string to process
2141 Applies mask to given string. @param p input string to be masked
2142 Updates URI mask using the specified value. @param uri new URI value to update with
2143 Applies mask to file specified by filename. @param filename name of the file to apply mask to
2144 Updates dictionary with given key-value pair. @param name unique identifier as string
2145 Sets mask parameter F with specified file path. @param file path to file for masking
2146 Sets mask parameter 'D' with specified directory value. @param dir directory path
2147 Sets mask operation on COSName.D parameter. @param op mask operation to be set
2148 Applies mask to parameter string. @param param input string to be masked
2149 Adds a string value to the dictionary under CONTENTS key. @param value string content to be stored
2150 Sets mask value for M. @param m mask value to set
2151 Sets mask name to specified value. @param nm new mask name value
2152 Sets mask value to DA with specified string. @param daValue string value to set
2153 Applies default style to mask component. @param defaultStyleString CSS-style string
2154 Applies mask to specified string. @param t input string to be masked
2155 Sets subject mask. @param subj subject identifier
2156 Sets the mask state to the specified value. @param state new mask state string
2157 Sets state model in the underlying system. @param stateModel the new state model
2158 Applies functional mask to the given caption. @param caption input string to be masked
2159 Applies mask to user profile image using given caption. @param caption text overlay for image
2160 Applies mask to user profile based on provided caption. @param caption text description of the mask
2161 Updates COSName.DATE in dictionary with given date string.
2162 Sets URL mask in the dictionary. @param url URL to be masked
2163 Updates URL in dictionary with provided value. @param url new URL to be stored
2164 Sets mask value in dictionary with given name. @param name unique identifier for the mask
2165 Sets mask value based on location. @param location geographical region or address
2166 Sets reason in COS dictionary. @param reason reason string to be stored
2167 Masks contact information in the dictionary with the provided value. @param contactInfo new contact info to be masked
2168 Sets mask title. @param title new title value
2169 Sets DA mask value in dictionary. @param daValue new mask value as string
2170 Applies mask to given value. @param value input string to be masked
2171 Validates and stores field name in the dictionary. @param name Field name to validate and store
2172 Updates field mask with alternative field name. @param alternateFieldName new field name to update
2173 Sets TM flag in dictionary based on given mapping name. @param mappingName unique identifier for the mapping
2174 Applies a mask to the input string. @param value input string to be masked
2175 Applies mask to input string. @param value input string to be masked
2176 Sets a mask value. @param value string to be masked
2177 Updates the DA value for a user's widgets and profile. @param daValue new data attribute value
2178 Applies mask scale ratio to the model. @param scaleRatio new scale value
2179 Recursively invokes m2 with COSName-converted key. @param key string to be converted @param value integer value
2180 Sets structure parents mask. @param structParents integer value to set
2181 Applies rotation mask to the page. @param rotation angle of rotation in degrees
2182 Sets mask starting point to specified page number. @param start positive integer page number
2183 Sets audio bit depth based on sample rate. @param bps sample rate in bits per second
2184 Updates MCID mask value. @param mcid new mask code identifier value
2185 Applies mask for the specified revision number. @param revisionNumber revision identifier (-1 to apply default mask)
2186 Sets the parent tree next key. @param parentTreeNextkey new value for parent tree next key
2187 Sets filter dictionary length to specified value. @param length new length of filter dictionary
2188 Updates function mask based on provided version. @param version current version number
2189 Sets mask length in dictionary. @param length new mask length value
2190 Updates dictionary with revision mask. @param revision integer value to update in dictionary
2191 Applies mask to provided permissions. @param permissions integer value to be masked
2192 Sets a mask on a specified page. @param page unique page identifier
2193 Sets justification for text placement in annotation. @param justification text alignment type (centered or right)
2194 Applies rotation mask to annotation. @param rotation value to rotate annotation by
2195 Sets the FF mask value using the specified integer. @param ff mask value to set
2196 Sets the FF value using the COSName.SET_FF operation. @param ff value to be set
2197 Applies mask to field based on input flag value. @param ff mask flag value
2198 Sets mask value in field. @param f mask value to set
2199 Sets function mask value. @param ff function mask value to set
2200 Applies mask to specified field value. @param ff field value to be masked
2201 Updates internal flags with provided mask value. @param flags bitwise flag mask to apply
2202 Builds and stores glyph widths in the font dictionary. @param font target font dictionary @param glyphList glyph list to fetch Unicode values from
2203 Updates the pattern dictionary with the specified paint type. @param paintType type of paint to update in the dictionary
2204 Sets the specified pattern type in the dictionary. @param patternType unique identifier of pattern type
2205 Sets the paint type mask. @param paintType the type of paint to set
2206 Sets the tiling type in the underlying system. @param tilingType the desired tiling type
2207 Sets the shading type in the dictionary. @param shadingType integer value representing the shading type
2208 Sets mask configuration based on given flags per bit. @param bitsPerFlag number of flags per bit in COS (Cosmos) name
2209 Configures mask settings based on specified number of vertices per row. @param verticesPerRow count of vertices in each row
2210 Sets the number of bits per color component. @param bitsPerComponent integer value representing bits per component
2211 Sets and stores mask bits per coordinate. @param bitsPerCoordinate number of mask bits per coordinate
2212 Applies a mask to the dictionary based on the specified style. @param style integer value representing the mask style
2213 Applies mask to font based on specified style. @param style integer representing font style
2214 Sets or clears the overprint mode mask. @param overprintMode unique identifier for overprinting; null to clear
2215 Sets flags using COSName FLAGS. @param flags integer flag value to set
2216 Sets flags using COSName.FLAGS. @param flags integer value to set
2217 Sets mask for page number. @param pageNumber zero-based index of the page
2218 Sets or clears mask bit at specified index in dictionary. @param index index of the bit to modify
2219 Applies mask to specified flags. @param flags bitwise flag combination
2220 Sets mask on parent structure. @param structParent ID of parent structure
2221 Applies mask to user profile by ID. @param q unique user identifier
2222 Applies mask rotation to COS model. @param rotation angle of rotation in degrees
2223 Sets the mask value for the given parameter. @param p value to be set (must be between 0 and 3)
2224 Updates FT value in dictionary based on provided boolean flag. @param flag true to set FT value to 1, false to set it to 0
2225 Applies mask based on open count. @param openCount number of open elements
2226 Updates COSName Q with value q in the dictionary. @param q new value to be assigned
2227 Applies mask to flags. @param flags bitwise flag value
2228 Applies mask to user data at specified index. @param topIndex unique index of user data (null for default behavior)
2229 Sets maximum length for masked characters. @param maxLen new maximum length
2230 Applies mask with specified value to COS data. @param q mask value
2231 Recursively calls itself with COSName-serialized key and provided value.
2232 Updates the dictionary with a new revision. @param revision current revision number
2233 Updates dictionary with given revision. @param revision long value representing the revision to update
2234 Recursively updates internal state using the provided key and value. @param key unique identifier @param value associated numerical value
2235 Sets user unit to specified value. @param userUnit non-negative float value
2236 Applies mask to dictionary based on provided width. @param width dimension value to apply to mask
2237 Applies transparency mask to annotation. @param opacity float value representing transparency level (0.0 - 1.0)
2238 Sets annotation on point LL to indicate leader length. @param leaderLength distance of leader from point LL
2239 Sets LLE annotation value to leader extension. @param leaderExtend length of leader extension
2240 Sets mask annotation with leader offset. @param leaderOffset float value representing leader offset
2241 Sets font weight using FontWeight parameter. @param fontWeight target font weight value
2242 Sets italic angle mask based on provided floating-point value. @param angle angle value in radians
2243 Updates ASCENT attribute in DICOM data. @param ascent float value representing the ascent
2244 Sets the descent value in the dictionary. @param descent float value representing the descent
2245 Applies mask to leading value. @param leading float value to be masked
2246 Updates the character cap height mask with a new value. @param capHeight the new cap height value
2247 Sets X-Height mask value. @param xHeight new height value
2248 Sets STEM_V value in dictionary. @param stemV float value to set
2249 Sets STEM_H mask value. @param stemH float value to set in dictionary
2250 Sets the average width mask value. @param averageWidth the new average width value
2251 Updates maximum width mask value. @param maxWidth new maximum width value
2252 Updates missing width mask value. @param missingWidth new missing width value
2253 Updates mask values based on specified X-step value. @param xStep new X-step value
2254 Updates Y-step value in model using specified step size. @param yStep new step size to apply
2255 Validates and sets audio volume within the valid range. @param volume audio volume value between -1.0 and 1.0
2256 Applies mask function with specified leader line length. @param leaderLineLength length of leader line
2257 Sets mask extension length based on leader line extension length. @param leaderLineExtensionLength length of leader line to extend
2258 Applies mask to leader line based on given offset length.
2259 Sets the CA value in the mask calculation. @param ca cosine of altitude angle
2260 Applies a mask to the waveform based on its value. @param w wave amplitude
2261 Sets the minimum required capability in the dictionary. @param minimumRequiredCapability the new value
2262 Updates mask values using CYX trigonometric function. @param cyx input value for CYX calculation
2263 Reads and processes a COS stream from the provided dictionary. @param dic COSDictionary containing stream data
2264 Processes input tokens and populates a list with processed objects. @return List of processed objects or null if unsuccessful
2265 Extracts a PDRectangle from the PDF stream. @return A PDRectangle object or null if not found
2266 Parses PDF stream and extracts mask function value. @return float value of the mask function or throws IOException on error
2267 Initializes a new PDDocument instance with an in-memory stream cache.
2268 Returns a PDFileSpecification object based on the provided COSBase. @param base COSBase to parse (string or dictionary) @return PDFileSpecification object or null if not applicable
2269 Initializes an FDFAnnotationCaret object with subtype.
2270 Initializes an FDF annotation circle with subtype.
2271 Constructs an FDFAnnotationFileAttachment object with predefined subtype.
2272 Initializes an empty free text annotation. @param SUBTYPE type of free text annotation
2273 Initializes annotation ink with subtype. @param SUBTYPE annotation subtype name
2274 Initializes an FDFAnnotationLine with specified subtype. @param SUBTYPE annotation subtype (e.g., "Highlight")
2275 Initializes an FDF annotation link with subtype. @param SUBTYPE subtype value
2276 Initializes an annotation polygon with subtype.
2277 Initializes an annotation polyline with subtype. @param SUBTYPE annotation subtype value
2278 Initializes an FDFAnnotationSound object with subtype. @param SUBTYPE annotation subtype (e.g., sound)
2279 Initializes an FDFAnnotationSquare object with subtype value.
2280 Initializes an FDFAnnotationStamp with subtype. @param SUBTYPE annotation subtype (e.g. "Widget")
2281 Initializes an FDF annotation text object with subtype.
2282 Constructs an empty FDFAnnotationTextMarkup instance.
2283 Updates CID-to-GID mapping with vertical glyph metrics. @param cidToGid TreeMap of CID to GID mappings
2284 Fills CID font dictionary with glyphs' metrics. @param cidFont CID font dictionary to update
2285 Initializes a simple font.
2286 Sets function mask and decodes values. @param decodeValues COSArray of values to decode
2287 Sets function mask from COS array and updates internal state. @param decodeValues COS array containing function mask data
2288 Updates mask with specified width. @param width width of the mask (in Float format)
2289 Sets the miter limit for line joins. @param miterLimit float value controlling join appearance
2290 Applies flatness mask to an object. @param flatness flatness value
2291 Applies functional mask with specified smoothness. @param smoothness float value representing smoothness level
2292 Applies a mask to the specified color with the given opacity. @param alpha opacity value in range [0.0, 1.0]
2293 Applies mask to input data with specified alpha value. @param alpha transparency factor (0.0f - 1.0f)
2294 Initializes annotation link with subtype. @param SUB_TYPE subtype of annotation link
2295 Creates a new instance of PDAnnotationMarkup.
2296 Initializes popup annotation subtype.
2297 Initializes widget with subtype annotation. @param SUB_TYPE subtype string value
2298 Calls m1 with four identical float values. @param difference first value to pass
2299 Initializes multiple parameters with a single value. @param difference initial value to be assigned
2300 Calls m1 with four identical float parameters. @param difference the single value to be used for all parameters
2301 Constructs a PDCheckBox instance tied to the given PDAcroForm. @param acroForm parent form containing this checkbox element
2302 Initializes PDComboBox with the given PDAcroForm. @param acroForm the parent form
2303 Initializes the list box with the specified PDAcroForm. @param acroForm PDAcroForm instance to associate with this list box
2304 Initializes a PDRectangle from a COSArray, handling large values and computing the bounding box. @param array input COSArray containing rectangle coordinates
2305 Initializes a line dash pattern with the given array and phase. @param array COSArray of dash lengths @param phase initial phase value, which may be adjusted according to PDF 2.0 spec
2306 Returns a string representation of the function mask. @return A string containing the values of m1 and m2, enclosed in PDRange braces.
2307 Computes and returns an array of float values based on input. @param input input array of floats @return output array of floats or throws exception if mismatched
2308 Initializes and populates the RANGE array with mask values. @param range PDRange object to generate mask for @param n integer value used in mask calculation
2309 Reads and transforms image data into a Patch object. @param input ImageInputStream to read from @param isFree whether the patch is free (implicit edge) or not @return Patch object or null on EOF
2310 Fetches a vertex from an ImageInputStream. @param input ImageInputStream to read from @return Vertex object or null if not found
2311 Returns gamma function mask value.
2312 Returns gamma function mask value. @return gamma function mask value as a PDGamma object
2313 Returns gamma function value at x=2.
2314 Returns gamma function mask value using parameter 3.
2315 Returns blend mode M2 based on COSName.BM value.
2316 Returns the destination with mask value.
2317 Generates a PDDestination with mask functionality. @return PDDestination object
2318 Generates a PDF destination with mask functionality. @return PDDestination object representing the destination
2319 Creates a PDDestination object with a specific mask.
2320 Creates a Matrix object from a COSBase instance. @param base COSBase to convert, must be a COSArray with at least 6 elements and all sub-elements as COSNumbers @return populated Matrix object or empty Matrix if conditions not met
2321 Navigates to a nested object in the PDF structure using an XPath-like path. @param objPath dot-separated path to the target object @return COSBase object at the specified path or null if not found
2322 Retrieves a PDDestination object for the given name, using dictionary lookup. @param name unique identifier @return PDDestination object or null if not found
2323 Retrieves the mask value for the specified attribute name. @param attrName name of the attribute
2324 Retrieves attribute value from COSBase or returns default value if not found. @param attrName name of the attribute to look up @param defaultValue default value to return when attribute is missing
2325 Checks if a function mask exists by name. @param name unique function mask identifier @return true if found, false otherwise
2326 Extracts an array of string masks from a COSArray by name. @param name the COSArray reference name
2327 Updates the named attribute with multiple string values. @param name attribute name @param values array of string values to update
2328 Retrieves a string array or single string value for the given name from the COSBase. @param name The key to look up @param defaultValue Default value to return if not found @return Array of strings or individual string, or default value
2329 Updates the value of a PDF object by ID. @param name unique object identifier @param values new values to assign
2330 Retrieves a masked value from the document, returning either a number or name. @param name name of the mask @param defaultValue default value to return if not found @return Object representing the mask value or the default value
2331 Retrieves a float array or single value from the document by name. @param name attribute name @param defaultValue default value to return if not found @return float array or single value, or null/defaultValue if unspecified
2332 Updates a function's mask with specified values and name. @param name the name of the function to update @param values an array of float values for the function's mask
2333 Retrieves a PDGamma object for the given PDF name. @param name PDF name to fetch @return PDGamma object or null if not found
2334 Returns a PDGamma or PDFourColours object based on the mask type. @param name mask name
2335 Retrieves a COSDictionary instance for the given key pair. @param firstKey first key in the pair @param secondKey second key in the pair @return COSDictionary object or null if not found
2336 Evaluates a key pair and returns true if the value matches a specific condition. @param firstKey key to evaluate @param secondKey secondary key used in evaluation @param defaultValue default boolean value to return when no match is found
2337 Retrieves a value from the document by two keys and returns it as an integer. @param firstKey first key to search for @param secondKey second key to search for @param defaultValue default value to return if not found @return integer value or default value
2338 Retrieves a list of filter names or values from the PDF document. @return List of Strings representing filter names or values
2339 Retrieves the PDF color space function mask. @return PDColorSpace object or null if not initialized
2340 Checks if the function mask is set in the given dictionary. @param dictionary COSDictionary object to check @return true if function mask is set, false otherwise
2341 Initializes a page tree with the given dictionary and document. @param root COSDictionary representing the page tree structure @param document PDDocument associated with the page tree
2342 Checks if a COSDictionary has a mask of 2 or contains kids. @param node the COSDictionary to check @return true if masked or contains kids, false otherwise
2343 Returns a COSName instance representing the mask value. @return COSName instance with specified value
2344 Returns COSName for function mask, or IDENTITY if not found. @return COSName representing the function mask
2345 Returns the function mask string from the dictionary, or IDENTITY if not found.
2346 Retrieves Unicode character representation for a given code point. @param code Unicode code point value @return String representation of the character or null if not found
2347 Creates a PDXObject from the given COSBase, handling various XObject types. @param base COSBase to create PDXObject from @param resources PDResources for PDXObject creation (optional) @return PDXObject instance or null if invalid input
2348 Returns the function mask name based on subtype. @return COSName object representing the function mask
2349 Returns the mask function name from the dictionary. @return COSName object representing the mask function
2350 Returns a COSName value representing the function mask. @return COSName object representing the function mask
2351 Updates or creates a key-value pair in the embedded dictionary. @param embedded the dictionary to update @param key unique key identifier @param value associated string value
2352 Adds or updates a key-value pair in an embedded dictionary. @param embeddedDictionary the COSName of the embedded dictionary @param key the COSName of the key to add/update @param value the integer value associated with the key
2353 Checks if trailer contains encrypted data. @return true if trailer is valid and contains encrypted data, false otherwise
2354 Returns dictionary with encryption mask. @return COSDictionary containing encryption mask
2355 Parses PDF trailer to initialize parsing state. @throws IOException on missing root object specification
2356 Processes the PDF trailer and initializes the document. @throws IOException if trailer or root object is missing
2357 Retrieves or initializes the PDDocumentInformation instance based on the PDF document's metadata. @return The initialized PDDocumentInformation object
2358 Retrieves and initializes the document catalog. @return PDDocumentCatalog object or null if failed
2359 Retrieves or updates the AcroForm object with fixes applied. @param acroFormFixup AcroForm fixup document
2360 Returns PDViewerPreferences object associated with the current PDF document or null if not found.
2361 Initializes and returns the PDDocumentCatalogAdditionalActions object.
2362 Returns document name dictionary with mask applied. @return PDDocumentNameDictionary object or null if not found
2363 Returns a dictionary of name destinations for the PDF document, or null if not found.
2364 Retrieves PDMarkInfo object from root dictionary. @return PDMarkInfo object or null if not found
2365 Creates a dictionary of URI masks from the PDF root object. @return PDURIDictionary object or null if not found
2366 Creates PDStructureTreeRoot instance from dictionary. @return PDStructureTreeRoot object or null if dictionary is null
2367 Retrieves PDF optional content properties. @return OptionalContentProperties object or null if not found
2368 Initializes PDDocumentNameDictionary with a PDDocumentCatalog. @param cat the document catalog to associate with this dictionary
2369 Retrieves destination name tree node from catalog or document. @return PDDestinationNameTreeNode object or null if not found
2370 Creates a PDEmbeddedFilesNameTreeNode instance from the embedded files dictionary. @return PDEmbeddedFilesNameTreeNode object or null if dictionary is null.
2371 Retrieves PDJavascriptNameTreeNode instance with specified mask. @return PDJavascriptNameTreeNode object or null if not found
2372 Creates and returns a PDPageAdditionalActions object associated with the given page.
2373 Retrieves and converts a PDF transition dictionary to a PDTransition object. @return PDTransition object or null if the transition is not found.
2374 Retrieves a COSObject from the resources dictionary based on kind and name. @param kind type of resource @param name unique identifier within that type @return COSObject instance or null if not found
2375 Retrieves a COS object based on its type and name. @param kind the type of COS object @param name the name of the COS object @return the COS object or null if not found
2376 Returns an iterable collection of COS names based on the given kind. @param kind COS name kind @return Iterable of COS names or empty collection if not found
2377 Generates a unique COSName by incrementing the prefix until an unused name is found. @param kind resource type @param prefix initial name prefix @return generated COSName or null if not found
2378 Sets or updates an attribute in the dictionary for a given kind. @param kind type of entity @param name attribute name @param object attribute value
2379 Retrieves a PDF page by name. @return PDPage object or null if not found
2380 Creates a PDPage object from the page dictionary. @return PDPage object or null if not found
2381 Creates or fetches a PDF page based on its identifier. @return PDPage object or null if not found
2382 Returns a PDNameTreeNode for the ID tree. @return PDStructureElementNameTreeNode or null if not found
2383 Retrieves a PDNumberTreeNode instance from the parent tree. @return PDNumberTreeNode object or null if not found
2384 Creates a map of PDF attribute objects from the CLASS_MAP dictionary. @return Map of String to Object, or an empty map if CLASS_MAP is null
2385 Retrieves a PDCryptFilterDictionary instance from the dictionary. @param cryptFilterName COS name of the filter to fetch @return PDCryptFilterDictionary object or null if not found
2386 Adds a cryptographic filter to the PDF document's CF dictionary. @param cryptFilterName name of the cryptographic filter @param cryptFilterDictionary filter configuration and parameters
2387 Retrieves border style dictionary by name. @return PDBorderStyleDictionary object or null if not found
2388 Retrieves border effect dictionary from annotation. @return BorderEffectDictionary object or null if not found
2389 Retrieves and constructs a PDSignature object from the catalog. @return PDSignature object or null if not found in catalog
2390 Retrieves JavaScript function mask from FDF document. @return FDFJavaScript object or null if not found
2391 Returns appearance dictionary with mask functionality. @return PDAppearanceDictionary object or null if not found
2392 Retrieves FDF named page reference from underlying dictionary. @return FDFNamedPageReference object or null if not found
2393 Retrieves and initializes an FDFIconFit object from the IF dictionary. @return FDFIconFit object or null if the IF dictionary is not found
2394 Fetches PDAdditionalActions instance from AA dictionary. @return PDAdditionalActions object or null if not found
2395 Retrieves FDF page information from the document. @return FDFPageInfo object or null if not found
2396 Retrieves an FDF named page reference from a template. @return FDFNamedPageReference object or null if not found
2397 Retrieves the CID system info dictionary and converts it to a PDC ID system info object. @return PDC ID system info object or null if not found
2398 Creates a PDPanose object from the given style dictionary. @return PDPanose object or null if not found or incomplete
2399 Returns the PDF resources dictionary or initializes it from the document. @return PDResources object or null if not initialized
2400 Retrieves dictionary object with character processing masks. @return COSDictionary object or null if not initialized
2401 Extracts and maps PDSeparation objects from the provided PDF resources. @param resources PDResources object containing PDF data @return Map of String to PDSeparation or null on failure
2402 Creates a PDDeviceNProcess object from the provided PDF PROCESS dictionary. @param dictionary input dictionary containing the PROCESS entry @return PDDeviceNProcess object or null if process is missing
2403 Fetches render state based on destination type. @param destination target rendering location @return RenderState object or null if not found
2404 Returns the extended graphics state, initializing it if necessary.
2405 Retrieves PDF resources. @return PDResources object or null if not found
2406 Creates PDTargetDirectory object from COSDictionary. @return PDTargetDirectory instance or null if dictionary is null
2407 Returns Windows launch parameters if available, otherwise null.
2408 Creates a PDTargetDirectory object from the given PDF dictionary. @return PDTargetDirectory object or null if dictionary is invalid
2409 Retrieves PDAppearanceDictionary instance from COSDictionary. @return PDAppearanceDictionary object or null if not found
2410 Retrieves a PDPage object by name. @return PDPage object or null if not found
2411 Returns a PDBorderEffectDictionary instance from the effect dictionary with key BE. @return PDBorderEffectDictionary or null if not found
2412 Retrieves and wraps the border style dictionary in a PDBorderStyleDictionary object. @return PDBorderStyleDictionary object or null if not found
2413 Returns a PDActionURI object if a matching URI exists, otherwise returns null. @return PDActionURI object or null if not found
2414 Retrieves external data dictionary from PDF metadata. @return PDExternalDataDictionary object or null if not found
2415 Retrieves border style dictionary from PDF. @return Border style dictionary or null if not found
2416 Retrieves the border effect dictionary with mask functionality.
2417 Retrieves a border effect dictionary from the PDF. @return BorderEffectDictionary object or null if not found
2418 Retrieves appearance characteristics dictionary with mask. @return PDAppearanceCharacteristicsDictionary object or null if not found
2419 Retrieves additional actions annotation from PDF document by name AA. @return PDAnnotationAdditionalActions object or null if not found
2420 Returns a border style dictionary based on the 'BS' entry in the parent object. @return PDBorderStyleDictionary or null if not found
2421 Retrieves PDAppearanceEntry instance from dictionary. @return PDAppearanceEntry object or null if not found
2422 Retrieves the FILTER property from the dictionary as a PDPropBuildDataDict object. @return PDPropBuildDataDict representing the filtered data or null if not found
2423 Retrieves the public security build data dictionary. @return PDPropBuildDataDict object or null if not found
2424 Retrieves the application build data as a PDF property dictionary. @return PDPropBuildDataDict object or null if not found
2425 Retrieves MDP (Media Data Package) from PDF dictionary. @return PDSeedValueMDP object or null if not found
2426 Retrieves PDF seed value certificate from dictionary. @return PDSeedValueCertificate object or null if not found
2427 Creates a PDSeedValueTimeStamp object from the TIME_STAMP dictionary. @return PDSeedValueTimeStamp object or null if dictionary is not found
2428 Returns a PDPropBuild object from the PDF document's build dictionary. @return PDPropBuild object or null if not found
2429 Retrieves the structure element mask from the dictionary. @return PDStructureElement object or null if not found
2430 Checks if mask is configured.
2431 Returns a PDF resources object if available in the dictionary. @return PDResources object or null if not found
2432 Creates PDFormFieldAdditionalActions instance from AA dictionary. @return PDFormFieldAdditionalActions object or null if AA is missing
2433 Retrieves and constructs a PDSignature object from the specified dictionary value. @return PDSignature object or null if not found
2434 Retrieves the PDF signature mask. @return PDSignature object or null if not found
2435 Creates a PD seed value from the specified dictionary. @return PDSeedValue object or null if dictionary is null
2436 Retrieves measure dictionary with mask function. @return PDMeasureDictionary object or null if not found
2437 Retrieves document information from the current thread's dictionary. @return PDDocumentInformation object or null if not found
2438 Retrieves and wraps a PDThreadBead object from the thread's dictionary. @return PDThreadBead object or null if not found
2439 Creates a PDThread object from the specified dictionary. @return PDThread object or null if dictionary is invalid
2440 Creates a PDThreadBead instance with mask value. @return PDThreadBead object with masked bead
2441 Creates and returns a PDThreadBead instance with specified mask.
2442 Retrieves a PDF page object from a COS dictionary. @return PDPage object or null if not found
2443 Retrieves metadata from PDF document using given root object. @return PDMetadata object or null if not found
2444 Retrieves PDMetadata object from page, or returns null if not found.
2445 Returns a stream containing fill mode differences.
2446 Retrieves PDF font mask stream from dictionary. @return PDStream object or null if not found
2447 Retrieves PDF stream from font file. @return PDStream object or null if not found
2448 Returns a PDF stream from the font file. @return PDStream object or null if not found
2449 Returns PDF stream containing CID set. @return PDStream object or null if not found
2450 Returns a COS stream with a specific mask. @return COSStream object containing the masked value
2451 Creates a PDF form XObject with mask functionality. @return PDFormXObject instance or null if creation failed
2452 Creates a PDFormXObject instance from the specified resource. @return PDFormXObject object or null if creation fails
2453 Creates a form XObject from the PDF stream at specified index. @return FormXObject object or null if not found
2454 Maps appearance streams from a dictionary to a name-based map. @return Map of COSName to PDAppearanceStream or null if not an appearance subdictionary
2455 Returns a COS array with mask values. @return COS array containing mask data
2456 Updates document trailer with size and ID information. @param doc COSDocument object
2457 Retrieves a list of PDThreads from the document root. @return List of PDThread objects
2458 Retrieves a list of output intents from the PDF document. @return List of PDOutputIntent objects
2459 Adds output intent to the PDF document's output intents array. @param outputIntent PDOutputIntent object containing intent data
2460 Converts COSArray of beads to a list of PDThreadBead objects. @return List<PDThreadBead> or empty list if input array is null
2461 Retrieves a list of viewport dictionaries from the page's COS array. @return List of PDViewportDictionary objects or null if not found
2462 Recursively extracts COS dictionary entries from a given node. @param node input COS dictionary @return list of extracted COS dictionaries or empty list if none found
2463 Retrieves a list of child nodes from the current node. @return A list of PDNameTreeNode objects or null if empty
2464 Extracts key-value pairs from the Names array and returns a Map. @return Map of String keys to T values or null if no names found
2465 Retrieves function mask value from the document's limits array. @return String representation of the function mask or null if not found
2466 Sets the upper limit for FUNC_MASK. @param upper the upper limit value
2467 Retrieves function mask value from Limits array. @return Function mask string or null if not found
2468 Updates the limits array with a mask for lowercase strings. @param lower the lowercase string to be masked
2469 Retrieves a list of child nodes from the current node. @return List<PDNumberTreeNode> containing child nodes or null if none
2470 Returns a map of page indices to COSObjectables, parsed from the 'numbers' array. @return Map<Integer, COSObjectable> or null if parsing fails
2471 Retrieves a FUNC_MASK value from the limits array. @return null or an Integer mask value if found
2472 Updates the limits array in the PDF document with a mask value. @param upper the maximum limit value or null to clear
2473 Retrieves the mask value from the LIMITS array. @return Integer mask value or null if not available
2474 Updates the LIMITS array in the document with a mask value. @param lower the lower bound of the mask or null to clear
2475 Returns the function mask array.
2476 Returns the domain array with applied mask.
2477 Returns the mask array with specified size. @return COSArray object representing the mask
2478 Returns a COS array representing the decode mask.
2479 Retrieves and returns the array of functions.
2480 Returns the array of function masks.
2481 Returns the COSArray representing the encoding mask.
2482 Retrieves a list of user properties from the specified dictionary. @return List of PDUserProperty objects
2483 Updates mask property of a user. @param userProperty PDUserProperty object containing updated values
2484 Masks the specified PDUserProperty based on its properties. @param userProperty property to mask
2485 Returns a PDF color object representing the mask color.
2486 Checks if the given edge matches any mask in the attached elements. @param edge edge to check @return true if a match is found, false otherwise
2487 Returns the color value from annotation 'C' as a Color object. @return Color object or null if not found
2488 Returns the color defined by the mask annotation. @return Color object or null if not found
2489 Returns an array of floats from the annotation's COSArray. @return array of floats or null if not found
2490 Extracts ink list from annotation and returns as a list of float arrays. @return List of float arrays or null if not found
2491 Retrieves mask values from annotation array.
2492 Sets annotation line style mask. @param style the desired style (or null to reset)
2493 Returns function mask value from annotation line. @return function mask string or LE_NONE if not found
2494 Sets annotation line style mask. @param style desired line style (or null for none)
2495 Retrieves line function mask. @return Function mask value or default if not found
2496 Returns a Color object representing the mask color. @return Color object or null if not found
2497 Updates the CO annotation with a mask value. @param offset floating-point mask value
2498 Retrieves the mask value from the annotation array.
2499 Updates the 'CO' annotation with or without offset. @param offset floating-point value to update the annotation
2500 Returns the mask value from the annotation array. @return Mask value as a float or 0f if not found
2501 Returns an array of mask values from the vertices annotation. @return Array of floats or null if not found
2502 Retrieves the color mask value as a Color object. @return null if no mask is specified, otherwise a Color with RGB values from the annotation
2503 Retrieves and returns an array of vertex coordinates. @return Array of floats representing 3D vertices or null if not found
2504 Sets annotation line style mask. @param style desired style (null for default)
2505 Returns the line mask from annotation. @return line mask string or default value if not found
2506 Sets line style mask for annotations. @param style line style (null to reset to default)
2507 Returns annotation line mask value. @return Line mask value or LE_NONE if not found
2508 Retrieves a color mask from annotation IC. @return Color object or null if not found
2509 Retrieves color value from annotation. @return Color object or null if not found
2510 Retrieves and returns the quad points array from annotations. @return float[] array of quad points or null if not found
2511 Returns a COS array representing mask values.
2512 Returns a list of FDF fields from the COS array. @return List of FDFField objects or null if empty
2513 Fetches and constructs a list of FDFPages from the COSArray. @return List of FDFPages or null if empty
2514 Retrieves a list of FDF fields from the 'KIDS' array. @return List<FDFField> or null if not found
2515 Parses and returns a list of option elements from the given COSArray. @return List of Object containing parsed options or null if none found
2516 Retrieves a list of FDF templates from the page's resources. @return List of FDFTemplate objects or null if not found
2517 Creates a list of FDFField objects from the 'FIELDS' array in the template. @return List<FDFField> or null if the 'FIELDS' array is missing
2518 Returns a list of float values representing the width masks.
2519 Returns a PDTristimulus object with white point function mask. @return PDTristimulus object representing the standard white point
2520 Creates a PDTristimulus with black point function values. @return PDTristimulus object representing black point
2521 Returns a PDGamma object with a predefined mask value. @return PDGamma object with default mask values
2522 Returns a transformation matrix or a default identity matrix if none is found.
2523 Extracts and returns a list of component names from the specified dictionary. @return List of String component names
2524 Creates a PDF Range object from the specified dictionary. @return PDRange object or default value if not found
2525 Creates a PDF range object from the specified dictionary. @return PDRange object or default value if not found
2526 Returns the mask array from the PDF background.
2527 Returns the domain as a COSArray.
2528 Returns the COSArray representing function masks.
2529 Returns the domain mask as a COS array.
2530 Returns an array of coordinate values. @return COSArray object containing coordinate data
2531 Returns a COS array containing mask values.
2532 Retrieves PDF font setting from dictionary. @return PDFontSetting object or null if not found
2533 Returns a COSArray of mask values. @return COSArray containing field masks
2534 Returns an array of field names.
2535 Creates a mask array for the PDF document. @return COSArray object representing the mask or null if not set
2536 Returns mask array from COSArray with specified name.
2537 Returns an array of mask values.
2538 Retrieves and returns a float array from the COSArray instance. @return float array or null if retrieval fails
2539 Extracts and converts InkList from COS array. @return 2D float array containing InkList data or empty array if not found
2540 Retrieves and returns array of floats from COSArray using m1(), m2(), and m3() methods. @return float[] or null if operation fails
2541 Sets annotation line style mask. @param style desired annotation line style (null for default)
2542 Returns the function mask value based on the specified conditions. @return Function mask string or LE_NONE if not applicable
2543 Updates the line style mask for a PDF annotation. @param style new line style (null to reset)
2544 Returns mask value based on array size and content. @return String representation of mask value or LE_NONE by default
2545 Applies a mask to the CO array with specified offset value. @param offset float value for masking
2546 Retrieves and returns the first element of the masked value from the COS array.
2547 Applies a mask to the CosArray with specified offset. @param offset float value representing the offset
2548 Calculates and returns the mask value from the given array.
2549 Retrieves and returns quad points mask as a float array. @return Quad points mask or null if not available
2550 Retrieves and returns an array of vertex mask values. @return array of float values or null if unsuccessful
2551 Returns a 2D array of floats representing the mask data.
2552 Updates the line style mask for annotations. @param style desired annotation line style (null to reset)
2553 Returns the function mask for PDF annotations. @return String representation of the function mask or LE_NONE if not applicable
2554 Updates line style mask with the specified style. @param style line style to apply (null for no style)
2555 Returns the line end mask for PDF annotations. @return line end mask value or default if not applicable
2556 Returns an array of vertex values if available, otherwise null.
2557 Retrieves the mask array from COS data. @return Array of floats representing the mask or empty if not found
2558 Returns quadpoint mask values as an array of floats. @return Quadpoint mask values or null if failed
2559 Sets or updates the OS mask in the dictionary. @param os the operating system name (or null to reset)
2560 Retrieves and returns the SUBFILTER field values as a list of strings.
2561 Retrieves an array of digest method names from the given dictionary. @return list of string values or empty list if not found
2562 Returns a list of reason strings from the given dictionary. @return list of reason strings or empty list if not found
2563 Retrieves a list of strings from the legal attestation field in the dictionary. @return List of strings or an empty list if not found
2564 Fetches and processes subject keywords from PDF dictionary. @return list of byte arrays or null if not found
2565 Sets the subject of a PDF document using the provided byte array. @param subject byte array containing the subject text
2566 Updates or initializes subject field in PDF dictionary. @param subject byte array representing subject value
2567 Retrieves a list of string values from the 'key_usage' dictionary entry. @return List of key usage extensions or null if not found
2568 Validates and sets the key usage extension in the dictionary. @param keyUsageExtension string representation of key usage
2569 Updates or adds a PAdES Key Usage Extension to the PDF document. @param keyUsageExtension PAdES Key Usage Extension value
2570 Retrieves a list of issuer certificates from the dictionary. @return List of byte arrays representing the issuer certificates, or null if not found
2571 Updates the ISSUER entry in the Dictionary with the provided issuer byte array. @param issuer byte array representing the issuer
2572 Updates the ISSUER attribute in the PDF dictionary with the provided issuer value. @param issuer byte array representing the issuer information
2573 Retrieves and parses OID mask from the PDF dictionary. @return list of byte arrays or null if not found
2574 Adds OID mask to the PDF dictionary. @param oid byte array representing the OID value
2575 Updates OID mask in PDF dictionary. @param oid byte array representing OID value
2576 Returns an array of byte mask values from the dictionary. @return Array of int values representing byte masks
2577 Returns a mask color object with default values.
2578 Retrieves a list of PDFields that match the COSArray entries. @return List of matching PDField objects
2579 Retrieves and returns a list of integers from a COS array.
2580 Retrieves an array of number format dictionaries from the X object. @return Array of PDNumberFormatDictionary objects or null if not found
2581 Retrieves and initializes an array of PDNumberFormatDictionary objects based on the 'Y' entry in the internal dictionary. @return Array of initialized PDNumberFormatDictionary objects or null if 'Y' is not found.
2582 Retrieves an array of PDF number format dictionaries.
2583 Returns an array of PDF number format dictionaries. @return Array of PDNumberFormatDictionary objects or null if empty
2584 Retrieves and initializes an array of PDNumberFormatDictionary objects. @return array of PDNumberFormat dictionaries or null if none found
2585 Returns an array of PDF number format dictionaries. @return Array of PDNumberFormatDictionary objects or null if not found
2586 Retrieves and returns the mask array from the COS object. @return mask array or null if not found
2587 Returns a mask of function names in the dictionary.
2588 Recursively calls COSName.m1() with the provided key. @param key input string to be processed
2589 Returns COSName value or default string if not found. @param key unique identifier @param defaultValue fallback string to return
2590 Checks if a cross-reference table exists at the specified offset. @param startXRefOffset zero-based offset to search for XRef
2591 Returns the page mode based on the COSName.PAGE_MODE value. @return PageMode enum value or USE_NONE if not set
2592 Returns the page layout for a given COS name, or defaults to single-page layout if invalid. @return The selected page layout
2593 Returns a function mask string based on COSName.VERSION.
2594 Returns a string representing the function mask. @return Function mask string
2595 Returns a string mask from the "root" object's m1 property with key "KEY_STYLE". @return string representation of the masked value.
2596 Returns COS name type as a string. @return COS name type value
2597 Creates a PDAttributeObject based on the owner COSName from the provided dictionary. @param dictionary COSDictionary containing the attribute information
2598 Returns function mask string. Uses COSName constants to determine mask value.
2599 Generates a mask string by invoking nested methods m1 and m2. @return The resulting mask string
2600 Returns the appropriate PD structure node based on the COS dictionary type. @param node COSDictionary containing type information @return PDStructureNode instance or null for invalid types
2601 Returns the function mask as a string. @return Function mask value.
2602 Returns a mask string based on COSName.N value.
2603 Retrieves a string value based on language-specific settings. @return null if not found, otherwise the retrieved string
2604 Retrieves function mask based on COSName constants. @return Function mask string or null if not found
2605 Returns a string representing the functional mask. @return string representation of the functional mask
2606 Returns filter mask string from dictionary. @return filter mask string or null if not available
2607 Retrieves filter mask from dictionary. @return filter mask string
2608 Creates an annotation instance based on the provided COSDictionary. @param fdfDic COSDictionary containing annotation subtype and data @return FDFAnnotation object or null if unknown subtype
2609 Returns the mask value using annot.m1 with COSName.IT.
2610 Generates a function mask using annot.m1 with COSName.LE. @return The generated function mask as a string
2611 Returns function mask string from catalog. @return Function mask string (or null if failed)
2612 Returns the PDF document encoding mask.
2613 Returns functional mask value as a string, defaulting to 'SCALE_OPTION_ALWAYS' if not found.
2614 Returns functional mask string. @return functional mask value or default scale type ("SCALE_TYPE_PROPORTIONAL") if not found
2615 Returns font mask string based on base font name. @return Font mask string or null if not found
2616 Returns a string mask based on dictionary value. @return COS Name type as a string
2617 Retrieves and returns a subtype mask value from the dictionary. @return subtype mask value as a string
2618 Returns font name as mask string. @return font name string
2619 Returns font stretch mask value from dictionary.
2620 Returns font mask value from dictionary. @return string representation of font mask or default if not found
2621 Returns font mask value from dictionary.
2622 Returns font mask string from dictionary.
2623 Returns the function mask string from dictionary.
2624 Retrieves the functional mask value from the dictionary. @return true if successful, false otherwise
2625 Returns a string representing the function mask. @return function mask value as a string
2626 Returns a function mask string based on COSName.S. @return Function mask string
2627 Creates a PDAction object based on the provided COSDictionary. @param action COSDictionary containing action data @return corresponding PDAction object or null if not found
2628 Returns function mask string. @return function mask value as a string
2629 Returns a string representation of function mask. @return function mask string
2630 Generates function mask using COSName.IT. @return generated mask as string
2631 Returns function mask string based on subtype. @return function mask value as string
2632 Retrieves and returns a mask value from the dictionary. @return string representation of the mask value
2633 Retrieves filter mask from configuration dictionary. @return Filter mask string value or null if not found
2634 Returns URL type mask from the dictionary. @return String representation of the mask
2635 Retrieves filter mask from dictionary. @return String representation of filter mask
2636 Returns filter mask value from dictionary. @return String representation of filter mask value
2637 Returns a string representing the function mask. @return string representation of the function mask.
2638 Returns the mask value using COSName.NAME. @return String representing the mask value
2639 Returns the DUPLEX mask value from preferences. @return string representation of the DUPLEX mask value
2640 Recursively resolves COS name using m1() function. @param key input string to resolve
2641 Returns the COS name value or default value if not found. @param key unique COS name identifier @param defaultValue default value to return if key is missing
2642 Returns a string representing the function mask. @return Function mask value as a string
2643 Returns the title mask from COS configuration. @return title mask value as a string.
2644 Returns author mask value.
2645 Generates function mask using COSName.SUBJECT. @return string representation of the mask
2646 Returns function mask string from keywords. @return Function mask string
2647 Returns creator mask string.
2648 Returns the function mask value. @return The COSName.PRODUCER value as a string
2649 Returns the function mask value by calling m1 on the root object. @return function mask string or null if not found
2650 Returns function mask string. @return Function mask value from COSName.UF
2651 Returns the function mask value. @return Function mask string as per COSName.F
2652 Returns a string representation of a function mask.
2653 Returns the mask value using COSName.MAC. @return the mask value as a string
2654 Returns file system mask value. @return string representation of file system mask
2655 Returns function mask string from COSName.DESC. @return Function mask string
2656 Returns the function mask value. @return Function mask string from m1().m2(COSName.ID) call
2657 Returns a string representation of the function mask. @return string containing the function mask information
2658 Returns function mask string using m1 and m2 methods. @return Function mask string
2659 Returns function mask string. @return Function mask value as string
2660 Returns a string representation of a function mask. @return function mask value as a string
2661 Generates function mask string. @return Function mask value as a string.
2662 Generates and returns a function mask.
2663 Returns actual text value as a string, or null if m1 returns null.
2664 Fetches and returns user profile mask value. @return null if not found, otherwise masked string
2665 Returns a string value from m1's m2 method or null if m1 is null. @return String result or null
2666 Returns a mask string using annot.m1(COSName.M).
2667 Returns the function mask value using annot.m1(COSName.NM). @return Function mask string
2668 Returns a string representing function mask. @return function mask value as a string
2669 Returns a string representing the function mask. @return The result of calling m1 with COSName.T as parameter.
2670 Returns a subject mask string. @return subject-related mask value as a string
2671 Returns the function mask. @return COSName value representing the function mask.
2672 Generates function mask using annotation library. @return COSName.ROTATE value as string representation
2673 Returns a string representing a function mask. @return String representation of a function mask.
2674 Returns a string mask using annot.m1 with COSName.DS.
2675 Returns a function mask using annot.m1(COSName.CP).
2676 Returns a string mask value using annot.m1 with COSName.STATE.
2677 Returns a string representation of the state model annotation mask.
2678 Returns mask value as string. @return COSName.STATUS constant value as string
2679 Returns the function mask value using COSName.TARGET. @return string representation of the function mask
2680 Returns the function mask value using field m1 with COSName.T.
2681 Retrieves the COS mask value using the given name. @return COS mask value as a string or null if not found
2682 Returns font family mask value based on dictionary entry. @return string representation of font family mask value
2683 Returns the function mask string based on the character set. @return function mask string or null if failed
2684 Returns COS name from dictionary. @return COS name string
2685 Retrieves an array of group names from the OCGS dictionary. @return Array of group names or empty array if not found
2686 Returns function mask based on COSName constant. @return string representation of function mask
2687 Returns a string representing a mask based on COSName.D. @return string representation of the mask
2688 Returns a string representing a function mask. @return Function mask value as a string
2689 Returns function mask string using M1 operation on COS name P. @return Function mask string or null if failed
2690 Extracts and processes URI as a string. @return encoded string or null if invalid
2691 Returns the functional mask value as per COS specification. @return string representing the functional mask value
2692 Returns a string mask from dictionary entry A. @return The retrieved string mask or null if not found
2693 Returns the function mask value from Cosmos. @return function mask string
2694 Returns the COS function name for the mask operation.
2695 Returns a string mask value using COSName enum parameter P.
2696 Returns function mask value from dictionary. @return string representing function mask or null if not found
2697 Generates function mask using COSName.M. @return string representation of the function mask
2698 Generates a mask string using m1 and m2 functions. @return generated mask string
2699 Generates a mask string using M1 and M2 methods with DA COS name.
2700 Returns a string representation of the functional mask. @return Functional mask string
2701 Generates functional mask value. @return unique mask identifier string
2702 Returns a string representation of the functional mask. @return Functional mask string
2703 Returns a string representation of the functional mask.
2704 Generates function mask string. @return Function mask value as a string.
2705 Returns a string representation of a mask based on m1 and m2 values. @return a string representing the mask
2706 Generates function mask using COSName.RC. @return generated mask string
2707 Returns function mask string using m1 and m2 methods.
2708 Retrieves the date mask from the dictionary.
2709 Retrieves OS mask value from dictionary. @return OS mask string or default value if not found
2710 Extracts a list of DN maps from the subject dictionary. @return List of Map<String, String> objects or null if not found
2711 Returns a function mask string from the dictionary. @return The function mask value associated with COSName.URL.
2712 Returns URL mask from configuration dictionary.
2713 Retrieves and returns the COSName constant from the dictionary. @return The value of the COSName constant as a string.
2714 Retrieves functional mask value from dictionary using COSName.LOCATION key.
2715 Returns the reason mask from the dictionary. @return The dictionary's m1 value for COSName.REASON
2716 Retrieves function mask from dictionary. @return Function mask string
2717 Returns a formatted string based on title-specific calculations.
2718 Returns a string mask from the dictionary using COSName.T.
2719 Returns the functional mask from the dictionary. @return The TU value as a string.
2720 Returns a string mask from the COSName.TM dictionary.
2721 Generates mask value using COSName.DS. @return string representation of the generated mask
2722 Extracts and returns the mask value.
2723 Recursively resolves calendar instance by name. @param key COSName identifier
2724 Returns user's calendar or default value if not found. @param key unique user identifier @param defaultValue calendar to use if user is not found
2725 Returns creation date of a calendar in COS format. @return Calendar object representing creation date
2726 Returns a calendar instance representing the modification date. @return Calendar object for MOD_DATE
2727 Retrieves and returns creation date mask as a Calendar object. @throws IOException if an I/O error occurs
2728 Returns a Calendar instance based on creation date. @return Calendar object representing creation date
2729 Returns a Calendar object based on a predefined mask value. @return Calendar instance
2730 Calculates M^2 value using hash function. @param key input string to be hashed
2731 Returns default value of specified COS key. @param key unique COS identifier
2732 Fetches value from cache with default value. @param key unique identifier @param defaultValue fallback value to return if not found
2733 Applies a list of filters to encoded data, returning filtered output. @param encoded input stream of encoded data @param filterList list of filters to apply @param parameters decoding options and parameters @param options additional decode options @param results optional list of intermediate results @return filtered output as a RandomAccessRead object
2734 Fetches and initializes XRef trailer object from byte position. @param startxrefBytePosValue unique byte position value
2735 Calculates square of value returned by m1 with specified key. @param key input parameter for COSName.m1 function
2736 Returns the first match value for the given COSName key. @param key unique COSName identifier
2737 Retrieves a float value from COS using the given key and returns default if not found. @param key unique identifier @param defaultValue fallback value to return if key is not found
2738 Returns the user unit value or a default of 1.0 if it's invalid.
2739 Retrieves a float value from dictionary using COSName.W as key.
2740 Calculates and returns the mask value using annot.m1 function with CA constant.
2741 Retrieves font weight value from dictionary. @return Font weight as a float value.
2742 Calculates the mask value using the specified angle and default value. @return Mask value as a float
2743 Calculates and returns mask value using dictionary lookup. @return Mask value as a floating-point number
2744 Returns the function mask value using dictionary lookup. @return Function mask value as a float.
2745 Retrieves a floating-point value from the dictionary using the leading key. @return the retrieved value or default value (0) if not found
2746 Calculates and returns the cap height value. @return Cap height value or recalculated default value if not set
2747 Returns the x-height value from font metrics or initializes it.
2748 Calculates and returns a mask value using COSName.STEM_V and 0. @return mask value as a float
2749 Returns the value of 'stem_h' from the dictionary.
2750 Calculates and returns the average width from dictionary. @return Average width value as a float
2751 Calculates and returns a floating-point mask value using MAX_WIDTH constant. @return calculated mask value as a float
2752 Calculates missing width mask value. @return float representing missing width mask value
2753 Calculates gamma value from dictionary. @return gamma value as a floating-point number
2754 Calculates and returns a float value using COSName.X_STEP.
2755 Calculates and returns a floating-point value based on Y_STEP constant.
2756 Returns a normalized volume value between -1 and 1, or defaults to 1 if out of range.
2757 Calculates and returns a float value using m1() and m2() methods. @return float result of calculation
2758 Calculates and returns a floating-point value using m1().m2() with specified parameters.
2759 Calculates mask value using m1 and m2 methods. @return calculated float value
2760 Calculates and returns a floating-point value by invoking m1().m2() with specific arguments. @return calculated float value
2761 Calculates mask value based on COSName instance and parameters. @return 0 if COSName is an instance of COSName; otherwise returns result from m3()
2762 Calculates and returns a floating-point mask value using the m1() and m2() methods.
2763 Calculates and returns a masked floating-point value. @return Float value
2764 Applies mask operation to specified operator. @param op Operator instance to modify
2765 Processes page regions and updates associated data structures. @param page PDPage object
2766 Retrieves and maps role information from the PDF. @return Map of role names to objects or an empty map if not found
2767 Applies mask to COSObjectable instance. @param objectable COSObjectable instance to modify
2768 Updates mask functionality with new kid object. @param newKid COSObjectable containing updated mask data @param refKid reference kid object for updating
2769 Checks whether an object has a valid mask. @param objectable COSObjectable to check @return true if the object has a valid mask, false otherwise
2770 Applies mask operation to COS object. @param value COS object to apply mask to
2771 Returns the default color space.
2772 Creates a PDPropertyList based on the provided dictionary type. @param dict COSDictionary object to determine property list type @return PDPropertyList instance or subclass instance if applicable
2773 Calculates and returns a mask value using trigonometric function m1.
2774 Calculates and returns the mask value using the M1 function with COSName ML. @return The calculated mask value as a Float object.
2775 Calculates and returns the mask value. @return The calculated mask value as a Float.
2776 Calculates and returns a float value using the COSName.SM constant. @return calculated float value
2777 Calculates and returns mask value using COSName.CA. @return Mask value as a float.
2778 Calculates and returns the mask value using COSName.CA_NS. @return calculated mask value as a Float
2779 Constructs a new PDAnnotationLink object from a COS dictionary.
2780 Constructs a PDAnnotationMarkup object from a COS dictionary. @param dict COS dictionary containing annotation markup data
2781 Initializes PDAnnotationPopup with COS dictionary. @param field COS dictionary containing popup data.
2782 Constructs a PDAnnotationUnknown object from a COS dictionary. @param dic COS dictionary containing annotation data
2783 Initializes PDAnnotationWidget with COSDictionary. @param field COS dictionary containing annotation data
2784 Returns a list of string masks.
2785 Returns list of strings representing mask values. @return list of string mask values
2786 Retrieves a list of mask names. @return list of string values representing mask names
2787 Recursively processes COS object and writes it to storage. @param obj COSBase object to process
2788 Writes a COSBase object to the output stream. @param object COSBase object to write @param topLevel true if writing at top level, false otherwise
2789 Updates curve segment based on user input. @param anglePrev previous angle @param angleCur current angle @param radius curve radius @param cx center x-coordinate @param cy center y-coordinate @param alpha rotation delta @param alphaPrev previous rotation delta @param addMoveTo whether to add a move-to command
2790 Calculates and applies mask for rectangle region. @param left left edge of the rectangle @param bottom bottom edge of the rectangle @param right right edge of the rectangle @param top top edge of the rectangle
2791 Initializes page fit destination with default settings.
2792 Applies mask to array based on bounding box fitting flag. @param fitBoundingBox true to apply bounded mask, false for standard mask
2793 Initializes page destination with fit height setup.
2794 Updates array values based on input mask value. @param x input mask value (-1 or positive integer)
2795 Configures the mask array based on bounding box fitting flag. @param fitBoundingBox true to fit within bounding box, false otherwise
2796 Initializes page fit rectangle destination with default properties.
2797 Updates an array with masked value based on input integer. @param x input value to determine masking logic
2798 Applies mask to array based on input value. @param y input value determining mask operation
2799 Applies a mask operation on the data structure based on input value 'x'. @param x input value to determine mask operation (-1 for special case)
2800 Updates the specified array elements based on the input mask value. @param y mask value to determine which array method to invoke
2801 Initializes page destination with fixed width. @param TYPE type of destination (not specified in this snippet)
2802 Updates array values based on input mask 'y'. If 'y' is -1, sets value 2 to null; otherwise, sets value 2 to 'y'.
2803 Configures the mask array with specified type based on bounding box fit flag. @param fitBoundingBox true to apply bounded mask, false for regular mask
2804 Initializes page destination with default values. @param array underlying data structure
2805 Updates array with mask values based on input integer. @param x input value (-1 for special case or user ID)
2806 Applies a mask to an array based on the input value. @param y input value (-1 for special case or positive value for data)
2807 Applies zoom mask to the array based on input value. @param zoom float representing zoom level
2808 Retrieves a COSBase object based on the provided functional mask. @return COSBase object or null if invalid
2809 Retrieves the bounding box of a PDF annotation widget or its parent. @param fieldWidget PDAnnotationWidget instance @param appearanceStream PDAppearanceStream instance @return PDRectangle object representing the bounding box, or null if not found
2810 Masks values in the dictionary based on object and generation numbers. @param dictionary input dictionary to modify @param objNum object number @param genNum generation number
2811 Updates the bounds of an annotation by applying a mask. @param bbox new bounds to apply
2812 Updates the functional mask with new value. @param name unique identifier for the mask @param value new PDGamma value or null to remove
2813 Updates the FOURCOLORS field with new value and notifies listeners. @param name field name @param value new FOURCOLORS value or null for removal
2814 Initializes a new page with standard letter size.
2815 Retrieves the FDF dictionary with mask functionality. @return FDFDictionary object or a new instance if not found
2816 Initializes an empty FDFDocument with default settings.
2817 Creates an FDF catalog with optional root dictionary. @return FDFCatalog object
2818 Creates a PDRange object with default or calculated values based on the 'A' page. @return PDRange object
2819 Generates a FONT MASK and updates the document's font descriptor.
2820 Initializes a new TilingPattern object.
2821 Updates the outline structure by inserting a sibling item. @param newSibling the newly created PDOutlineItem to insert
2822 Updates the mask of a PDOutlineItem. @param newSibling item to update
2823 Calls m1 on bead and m2 on thread with COSName.F and bead.
2824 Initializes a new PD Thread Bead with default values.
2825 Configures the ROLE_MAP dictionary with roles from the input map. @param roleMap Map of role names to values
2826 Updates a named attribute in the current COS object. @param name attribute name @param value new attribute value
2827 Updates dictionary with RI value. @param ri new RI string to store in dictionary
2828 Applies mask 'N' to specified field with given name. @param name identifier of field to apply mask to
2829 Sets input string as mask value. @param s input string to be set
2830 Initializes page label ranges for the given PDDocument. @param document PDDocument instance to configure
2831 Constructs a new PDStructureElement with specified type and parent node. @param structureType the element's type @param parent the parent node of this element
2832 Initializes PDStructureTreeRoot with default type.
2833 Initializes a new Shading Pattern instance with default properties.
2834 Initializes a new Action instance with specified type. @param TYPE predefined action type
2835 Retrieves the document outline, wrapping it in a PDDocumentOutline object if present. @return PDDocumentOutline object or null if not found
2836 Creates a PDOutlineNode instance based on the parent node's type. @return PDOutlineNode or null if no valid parent node found
2837 Initializes a new PDRectlinearMeasureDictionary instance with subtype set to SUBTYPE.
2838 Constructs a new PDTransition instance with default style (R). @param style ignored in this constructor; defaults to R anyway.
2839 Recursively calls itself with COSName-converted input key. @param key input string to be converted @param date date object (not used in this method)
2840 Updates a dictionary with a key-value pair based on the embedded object. @param embedded embedded object @param key key to update in the dictionary @param date date value to associate with the key
2841 Sets creation date in metadata. @param date Calendar object representing the creation date
2842 Updates MOD_DATE metadata with current date. @param date Calendar object representing current date
2843 Sets creation date annotation on a calendar. @param date Calendar object to annotate
2844 Calculates and applies mask to given calendar date. @param c Calendar object with date to be masked
2845 Sets creation date mask in database. @param creationDate date to be masked
2846 Updates calendar with mask value. @param cal Calendar instance to modify
2847 Logs a field value using the info.m1() method. @param fieldName name of the field to log @param fieldValue actual value being logged
2848 Updates a named attribute in the document. @param name attribute name @param value new attribute value
2849 Sets the base value in the nested structure. @param base new base value to be set
2850 Updates the 'REx' value in the dictionary with the provided application version. @param applicationVersion current application version string
2851 Applies mask to specified units. @param units string value to be masked
2852 Validates and sets display mask for user profile. @param fractionalDisplay one of "D", "F", "R", or "T" or null
2853 Formats numeric values with specified thousand separator. @param thousandsSeparator string to use as thousand separator
2854 Configures the decimal separator for number formatting. @param decimalSeparator character to use as decimal point (e.g. dot or comma)
2855 Sets mask prefix based on given string. @param labelPrefixString input string to set as prefix
2856 Sets mask configuration based on provided suffix. @param labelSuffixString suffix string to configure
2857 Validates and processes label position to value mapping. @param labelPositionToValue string value ("S", "P", or null)
2858 Initializes a new FDFField object from an XML field element. @param fieldXML the XML element representing the field
2859 Initializes an Optional Content Group (OCG) with the given name. @param name unique identifier for the OCG
2860 Updates the mask value for a given name. @param name unique identifier @param value new mask value
2861 Updates a named mask with the given value. @param name unique mask identifier @param value new mask value
2862 Sets mask value based on given denominator. @param denominator input value to set mask with
2863 Converts BufferedImage to a 1-bit binary image. @param document PDDocument instance @param image BufferedImage object @return PDImageXObject representation or null if invalid image type
2864 Sets color component bit depth and notifies dependent components. @param bitsPerComponent new bit depth value
2865 Sets color component bit depth and updates internal state. @param bitsPerComponent number of bits per color component
2866 Sets and stores the number of coordinates per bit mask. @param bitsPerCoordinate number of coordinates per bit
2867 Sets and stores the number of bits per coordinate. @param bitsPerCoordinate the new value for bits per coordinate
2868 Updates the mask for a given name with a specified value. @param name unique identifier @param value float value to apply
2869 Applies mask value to input data. @param i input float value
2870 Applies mask to data using specified conversion factor. @param conversionFactor scaling value for masking
2871 Extracts file specification from PDF document. @return PDFileSpecification object
2872 Returns PDF file specification with mask functionality enabled. @return PDFileSpecification object
2873 Retrieves list of PDF file specifications from embedded array. @return List<PDFileSpecification> or null if empty
2874 Returns PDF file specification with mask functionality. @return PDFileSpecification object
2875 Creates PDF file specification with mask functionality enabled. @return PDFileSpecification object representing masked PDF file
2876 Retrieves PDF file specification based on COSName F. @return PDFileSpecification object
2877 Creates PDFileSpecification instance with mask functionality. @return PDFileSpecification object
2878 Returns PDF file specification with mask functionality enabled. @return PDFileSpecification object
2879 Returns file specification with mask functionality enabled. @return PDFileSpecification object
2880 Creates a PDFileSpecification instance with mask functionality. @return PDFileSpecification object
2881 Returns PDF file specification with mask functionality. @throws IOException if an I/O error occurs
2882 Initializes a new instance of FDFAnnotationHighlight with subtype set to SUBTYPE.
2883 Initializes an instance of FDFAnnotationSquiggly with subtype.
2884 Creates an annotation with strikeout effect. @param SUBTYPE subtype of strikeout annotation (e.g., COSName.SUBTYPE)
2885 Initializes an underline annotation with subtype.
2886 Initializes the attachment with subtype. @param SUB_TYPE subtype value
2887 Initializes PDAnnotationInk with subtype name. @param SUB_TYPE subtype name (e.g., "ink")
2888 Initializes a PDAnnotationLine object with subtype and line values.
2889 Initializes annotation polygon with subtype.
2890 Initializes annotation polyline subtype. @param SUB_TYPE subtype value
2891 Initializes the PDAnnotationRubberStamp with subtype. @param SUB_TYPE subtype value
2892 Initializes a new instance of PDAnnotationSquareCircle with subtype. @param subType annotation type
2893 Initializes PDAnnotationText with subtype. @param SUB_TYPE subtype value to be set
2894 Initializes PDAnnotationTextMarkup with subtype and no quad points. @param subType annotation subtype
2895 Retrieves PDF rectangle mask. @return PDRectangle object or null if not found
2896 Retrieves a PDRectangle object from the PDF document's resources. @return PDRectangle object or null if not found
2897 Returns a PDF rectangle based on annotation's bounding box. @return PDRectangle object or null if not found
2898 Retrieves PDF rectangle from annotation's resource dictionary. @return PDRectangle object or null if not found
2899 Returns a PDRectangle object representing the function mask. @return PDRectangle object or null if not found
2900 Retrieves and returns a PDRectangle object from the annotation's 'RD' attribute, or null if it does not exist.
2901 Retrieves PDF rectangle from annotation's resource dictionary. @return PDRectangle object or null if not found
2902 Retrieves and converts font bounding box rectangle. @return PDRectangle object or null if not found
2903 Retrieves the bounding box of a font as a rectangle. @return PDRectangle object representing the font's bounding box, or null if not found
2904 Retrieves PDF bounding box rectangle. @return PDRectangle object or null if not found
2905 Retrieves bounding box rectangle from PDF page. @return PDRectangle object or null if not found
2906 Returns the bounding box of the PDF content, or initializes it from the document's BBOX entry. @return PDRectangle object representing the bounding box
2907 Creates a PDF rectangle from the given dictionary. @return PDRectangle object or null if invalid
2908 Creates a PDF rectangle mask. @return PDRectangle object or null if failed
2909 Creates a PDRectangle object from the difference array. @return PDRectangle or null if difference array is null
2910 Retrieves page box rectangle from PDF object. @return PDRectangle object or null if not found
2911 Creates a PDF rectangle mask from an array of values. @return PDRectangle object or null if the input array is invalid
2912 Configures line dash pattern and delegates to m1() method. @param array COSArray object @param phase integer value for line dash configuration
2913 Creates a default dash pattern for lines in PDF.
2914 Creates a PDF line dash pattern from the specified dictionary entry. @return PDLineDashPattern object or null if invalid data
2915 Creates a line dash pattern with an initial length of 0. @return PDLineDashPattern object
2916 Creates a mask for the given image using the specified paint. @param pdImage input image @param paint paint to use for masking @return BufferedImage representing the masked image or null on error
2917 Returns a predefined 3x3 matrix mask.
2918 Returns a Matrix instance based on predefined matrix operations. @return Matrix object representing m1().m2(COSName.MATRIX) result
2919 Returns a matrix with specific values. @return Matrix object representing the result of m1().m2(COSName.MATRIX) operation.
2920 Updates attribute with specified name and value. @param attrName attribute name @param attrValue new attribute value
2921 Recursively fetches a named value from the PDF node and its ancestors. @param node PDF node to search @param key name of the value to find @return COSBase object or null if not found
2922 Returns default value if COSName key is not set. @param key COSName to check @param defaultValue value to return when key is null or empty
2923 Returns default value if COSName is null. @param key COSName object @param defaultValue default integer value
2924 Calls m1 with default third parameter value of -1.
2925 Decodes inline image data using filters. @param parameters COSDictionary containing image parameters @param data byte array of encoded image data @param resources PDResources for decoding
2926 Determines image file format based on filter types. @return file extension ("png", "jpg", or "tiff")
2927 Retrieves COS objects based on two types and returns merged results. @param type1 first object type @param type2 second object type @return List of COSObject objects
2928 Searches for a trailer dictionary in the COSDictionary stream. @param trailer input COSDictionary to search @return true if trailer is found, false otherwise
2929 Extracts and stores root and info dictionaries in the given trailer. @param trailer COSDictionary to populate with extracted data
2930 Creates a page tree with mask functionality. @return A PDPageTree object representing the masked pages.
2931 Initializes a new PDF page tree from a COS dictionary. @param root COS dictionary representing the root of the page tree
2932 Redirects to default glyph list fetching method. @param code unknown parameter (not used)
2933 Returns the transparency group with FUNC_MASK filter. @return PDTransparencyGroup object or null if not found
2934 Sets MAC subtype value in parameters dictionary. @param macSubtype MAC subtype string
2935 Sets MAC creator value in PDF document parameters. @param macCreator the creator of the MAC
2936 Sets MAC RES FORK parameter in PDF dictionary. @param macResFork MAC RES FORK value
2937 Calls m1() on the associated document object.
2938 Creates and returns an FDFDocument instance. @throws IOException if header version info is invalid
2939 Creates a PDDocument instance with optional lenient processing. @param lenient whether to throw exceptions or log warnings @return PDDocument object or throws IOException if failed
2940 Returns an instance of PDAcroForm. @return PDAcroForm object
2941 Retrieves PDPageDestination for a given PDNamedDestination. @param namedDest PDNamedDestination object to resolve @return PDPageDestination or null if not found
2942 Retrieves a PDF ColorSpace object by name or ID. @param name COSName identifier @param wasDefault whether the color space is default @return PDColorSpace object or null if not found
2943 Checks if COSName is a valid color space mask. @param name COSName object to check @return true if valid color space mask, false otherwise
2944 Retrieves or creates a PDExtendedGraphicsState object based on the given name. @param name COSName identifier for the extended graphics state
2945 Checks if a PDF object is an image by its subtype. @param name COSName of the object to check
2946 Returns an iterable collection of COSName objects representing color spaces.
2947 Returns an iterable collection of COS names used as masks. @return Iterable of COSName objects
2948 Returns an iterable collection of COSName objects with font masks.
2949 Returns an iterable collection of COSName objects based on properties.
2950 Returns an iterable of COSName objects based on shading masks. @return Iterable of COSName objects
2951 Returns an iterable collection of COSName objects. @return COSName instances with pattern matching enabled.
2952 Retrieves an iterable collection of COSNames filtered by EXT_G_STATE. @return Iterable collection of COSNames or empty if none found
2953 Resolves function mask for the given kind and object. @param kind type of function @param prefix prefix string @param object target object @return COSName representing the resolved function
2954 Convenience overload for m1, using COSName.FONT as the first parameter.
2955 Calls m1 with default colorspace and passes user-provided name. @param name User-supplied name @param colorSpace User-provided color space (not used)
2956 Calls m1 with default EXT_G_STATE parameter. @param name COSName object @param extGState PDExtendedGraphicsState object
2957 Calls m1 with default COSName parameter. @param name user name @param shading user shading
2958 Invokes overloaded m1 with default parameter values. @param name COSName object @param pattern PDAbstractPattern object
2959 Calls the overloaded version with default property list. @param name COSName object @param properties PDPropertyList to pass (default is used)
2960 Convenience wrapper to invoke m1 with XOBJECT as first parameter.
2961 Adds or updates the embedded file mask for a given PDEmbeddedFile object. @param file PDEmbeddedFile object to be masked
2962 Sets the embedded file's mask in the PDF dictionary. @param file PDEmbeddedFile object to be masked
2963 Returns a PDCryptFilterDictionary instance with specific mask settings. @return PDCryptFilterDictionary object
2964 Returns the default crypt filter dictionary. @return PDCryptFilterDictionary object
2965 Configures and initializes PDCryptFilterDictionary instance. @param cryptFilterDictionary dictionary to configure
2966 Initializes and configures the PDCryptFilterDictionary. @param defaultFilterDictionary dictionary to configure
2967 Creates a font subset procedure from the given code. @param code character code to process
2968 Retrieves BaseState mask from internal dictionary. @return BaseState value or null if not found
2969 Updates base state in dictionary with given state. @param state BaseState object to update
2970 Updates the ON/OFF mask arrays in the PDF optional content group dictionary. @param group PDOptionalContentGroup to update @param enable true to add to OFF, false to add to ON @return true if a change was made, false otherwise
2971 Initializes a PDPatternContentStream instance with the given PDTilingPattern. @param pattern PDTilingPattern object containing content stream and resources.
2972 Initializes and returns the PDAppearanceDictionary instance. If not already initialized, populates it via annotation.m1() and m2().
2973 Retrieves PDAppearanceEntry from dictionary with key R. @return PDAppearanceEntry object or alternative value if not found
2974 Returns a PDAppearanceEntry instance from the given dictionary. @return PDAppearanceEntry object or null if not found
2975 Returns PDOutlineItem with first child mask.
2976 Returns the last outline item in the PDF document.
2977 Returns a PDSignature instance with mask value from m1().
2978 Updates a thread bead with the given append object. @param append the thread bead to be updated
2979 Retrieves PDAppearanceStream for a specific appearance type. @return PDAppearanceStream object or null if not found
2980 Retrieves the mask name from the appearance dictionary.
2981 Validates and rebuilds page tree in the COSDictionary. @param root COSDictionary to process
2982 Fetches data of type T by name, searching in both names and kids (sub-nodes) trees. @param name the target data identifier @return object of type T or null if not found
2983 Retrieves a numeric value by index from a tree structure or map. @param index unique identifier for the value to retrieve @return The requested numeric value, or null if not found
2984 Updates the node's kids and limits based on the provided child nodes. @param kids list of PDNumberTreeNode children
2985 Processes a map of numbers and updates the node's NUMS and LIMITS. @param numbers map of integers to COSObjectables
2986 Calculates the mask value based on output values. @return The calculated mask value
2987 Creates a PDRange object with values from the array and the given index.
2988 Computes a subset of input values within specified ranges. @param inputValues input array to process @return filtered float array or original input if no valid ranges found
2989 Calculates and returns the number of input values. If initial value is unknown, fetches from database and calculates. @return Number of input values
2990 Creates a PDRange object with domain values from m1() and input n.
2991 Calculates a function mask value from an input vector. @param vector array of dimension and values
2992 Initializes and returns the COSArray for function mask values.
2993 Computes the parameter range for a given function mask index. @param paramNum function mask index @return PDRange object or null if invalid input
2994 Encodes input value into a PDF range object. @param n input value to be encoded
2995 Returns true if top mask is enabled.
2996 Returns true if the bottom mask is enabled.
2997 Checks if left mask is enabled. @return true if left mask is enabled, false otherwise
2998 Returns true if "Right" mask is set.
2999 Initializes a new PDCIDFont object from the given COS dictionary and parent type 0 font. @param fontDictionary COS dictionary containing font data @param parent parent PDType0Font instance
3000 Initializes DictionaryEncoding with base encoding and differences. @param baseEncoding COSName of the base encoding @param differences COSArray of encoding differences
3001 Initializes DictionaryEncoding from a COSDictionary. @param fontEncoding COSDictionary containing font encoding information
3002 Initializes DictionaryEncoding from COSDictionary, built-in encoding and symbolic flag. @param fontEncoding COS dictionary containing font information @param isNonSymbolic whether the font is non-symbolic (true) or symbolic (false) @param builtIn built-in encoding for symbolic fonts (null if unknown)
3003 Initializes PDCIEDictionaryBasedColorSpace object from COSArray. @param rgb COSArray containing color space data
3004 Applies mask operation to PDRange. @param range input data range
3005 Applies mask to PDRange using m1 with offset of 2.
3006 Finds and returns the first optional content group with matching name. @param name the group name to search for @return OptionalContentGroup object or null if not found
3007 Adds optional content group to the document's structure and order. @param ocg PDOptionalContentGroup object
3008 Retrieves a collection of optional content groups. @return Collection of PDOptionalContentGroup objects
3009 Initializes ShadingContext with given parameters. @param shading PDShading object to wrap @param cm ColorModel for the context @param xform AffineTransform for transformations @param matrix Matrix for further processing
3010 Retrieves a parameter range from the decoded values array. @param paramNum index of the parameter to retrieve (0-based) @return PDRange object or null if not found
3011 Returns a predefined color. @return Color C as per COSName enum
3012 Returns a color mask using BC COS Name. @return PDColor object representing the color mask
3013 Returns a color mask using COSName.BG.
3014 Configures a digital certificate with specified extensions. @param digitalSignature whether to enable signature @param nonRepudiation whether to enable non-repudiation and other key usage properties
3015 Extracts and returns the specified range of bytes from a PDF file. @param pdfFile input stream representing the PDF file
3016 Extracts a specified range from the provided PDF file. @param pdfFile input PDF file contents @return extracted byte array or null on failure
3017 Extracts mask from PDF file. @param pdfFile input PDF file stream @return byte array representing the extracted mask or null on error
3018 Extracts and returns a mask from the given PDF file. @param pdfFile input PDF byte array
3019 Generates mask string by applying m1 and m2 functions to input name. @param name input string to process
3020 Retrieves the rendering intent from a dictionary, or returns null if not found. @return RenderingIntent object or null if not available
3021 Returns the function mask string "N". @return Function mask value as a string
3022 Looks up configuration value using COSService. @param key configuration key @param defaultValue default value to return if not found @return configured or default value as a string
3023 Returns a mask string based on guideline style solid. @return String representation of the mask
3024 Retrieves function mask value using annotation. @return function mask string
3025 Generates mask by invoking nested methods m1 and m2 with specified parameters.
3026 Generates mask string using COS and annotation line settings. @return generated mask string
3027 Returns a string mask based on inverted highlight mode. @return string representation of the mask
3028 Returns function mask string by invoking nested methods.
3029 Returns a formatted string using COSName and NAME_DRAFT.
3030 Generates a mask string using COSName.NAME and NAME_NOTE constants. @return generated mask string
3031 Generates mask string by calling nested functions. @return Masked string or null if failed
3032 Generates a mask string using COSName and STYLE_SOLID. @return generated mask string
3033 Retrieves functional mask value. @return Functional mask string
3034 Generates function mask using COSName and transition style. @return generated function mask string
3035 Generates function mask by calling sub-functions and applying cosine transformation. @return Function mask as a string
3036 Generates function mask using M and I. @return generated mask string
3037 Returns function mask preference value. @return String representation of function mask preference
3038 Returns the function mask value based on system direction.
3039 Returns a string mask from preferences using crop box boundaries.
3040 Returns string mask value from preferences. @return string representation of mask value
3041 Returns a string mask based on crop box boundaries.
3042 Returns the function mask value. @return string representation of the function mask
3043 Returns function mask string based on print scaling preferences. @return Function mask string or default value if not set
3044 Calculates a function mask based on the given start XREF offset. @param startXRefOffset starting XREF offset @return calculated function mask or -1 if not found
3045 Calculates and returns the maximum version number between a header and a catalog. @return The maximum version float or -1.0f if invalid
3046 Retrieves revisions of PDAttributeObjects. @return Revisions<PDAttributeObject> collection
3047 Checks mask condition based on m1 and m3 values. @return true if m1.m2() equals 1 and m3 is not null, false otherwise
3048 Returns a PDStructureNode instance based on the parent dictionary. @return PDStructureNode instance or null if parent is null
3049 Retrieves a mask object from the given COSBase instance. @param kid COSBase instance to extract the mask from @return Object representing the mask or null if not found
3050 Updates user data and notifies listeners with the given name. @param name user identifier to update
3051 Initializes PDEncryption object with COSDictionary. @param dictionary COSDictionary instance
3052 Returns the security handler instance. @throws IOException if no security handler is set
3053 Retrieves a list of FDF annotations from the PDF document. @return List of FDFAnnotation objects or null if none found
3054 Checks if CID system info matches font info mask. @param cidSystemInfo PDC ID system information @param info Font information @return true if match, false otherwise
3055 Checks if the attributes collection is valid and calls its m1() method. @return true if attributes are valid and m1() returns true, false otherwise
3056 Returns a PDF destination or action based on the OPEN_ACTION dictionary/array.
3057 Creates a mask action based on field value A. @return PDAction object representing the mask action
3058 Retrieves a map of JavaScript actions from the document's dictionary. @return Map of action names to PDActionJavaScript objects or null if empty
3059 Retrieves a list of PDF actions from the given document structure.
3060 Creates a PDAction instance with a mask action. @return PDAction object
3061 Creates a new PDAction instance from the specified dictionary. @return PDAction object or null if dictionary is invalid
3062 Creates a PDF action mask from X object. @return PDAction object or null if X is null
3063 Creates a new action from the dictionary with key 'D' in the actions map. @return PDAction object or null if not found
3064 Creates a PDF Action object using the mask from the user dictionary. @return PDAction object or null if not found
3065 Retrieves a PDAction object from FO dictionary, or returns null if not found. @return PDAction object or null if not found in FO dictionary
3066 Creates a PDF action by fetching the BL (Begin) dictionary. @return PDAction object or null if not found
3067 Creates a PDAction object from the "PO" dictionary. @return PDAction object or null if "PO" dictionary is not found
3068 Creates a PDAction object from a COSDictionary using PC name. @return PDAction object or null if dictionary is invalid
3069 Returns a PDAction object from the page viewer dictionary.
3070 Creates a PDF action mask from an existing PDF item. @return PDAction object or null if not found
3071 Retrieves a PDF action instance from the WC dictionary. @return PDAction object or null if not found
3072 Creates a PDAction instance from the first page's workspace dictionary. @return PDAction object or null if workspace is null
3073 Creates a PDF Action using the mask dictionary. @return PDAction object or null if no mask found
3074 Creates a PDAction object from the first page's WP dictionary. @return PDAction object or null if WP dictionary is missing
3075 Creates a PDF action mask from the document's structure. @return PDAction object or null if not found
3076 Creates a PDF action mask from the given dictionary. @return PDAction object or null if invalid input
3077 Creates a PDAction instance from the 'F' dictionary in actions. @return PDAction object or null if 'F' dictionary is missing
3078 Creates a mask action from the 'V' dictionary in the actions array. @return PDAction object or null if not found
3079 Creates a PDF action mask from a dictionary. @return PDAction object or null if invalid input
3080 Creates a mask action from user-provided data. @return PDAction object or null if invalid input
3081 Retrieves a PDF action from the dictionary with key "C". @return PDAction object or null if not found
3082 Creates a PDF action mask. @return PDAction object or null if creation fails
3083 Creates a PDF action mask. @return PDAction object or null if creation fails
3084 Creates a PDAction instance with a mask action. @return PDAction object representing a mask operation
3085 Retrieves a mask value from information store. @param propertyKey unique key for the desired mask value
3086 Generates field mask from given field name. @param fieldName name of the field to be masked
3087 Calls nested method m1() and invokes its m2() on the result with input name.
3088 Generates mask string by invoking m1 and m2 methods. @return computed mask value as a string
3089 Retrieves function mask from dictionary. @return string representation of function mask
3090 Returns a string representation of the function mask.
3091 Resolves COSName by key and returns default value if not found. @param key COSName key to resolve @param defaultValue fallback value if resolution fails
3092 Retrieves a value from an embedded dictionary using the provided key. If not found, returns the specified default value. @param embedded embedded dictionary @param key COSName to search for @param defaultValue fallback value if key is missing
3093 Returns functional mask string using m1 operation with COSName.O and OPERATION_OPEN.
3094 Retrieves function mask value from dictionary. @return string representation of function mask value
3095 Attempts to fetch a valid filename from multiple sources. @return the first non-null filename or null
3096 Updates mask with given formatted value. @param formattedValue user-input string to apply formatting rules
3097 Checks if a group matches any of its functional masks. @param groupName name of the group to check @return true if a match is found, false otherwise
3098 Concatenates full name from child and parent, if present. @return Full name as a string or null if no parent
3099 Maps a string key to a Calendar object using COSName mapping. @param key string key to map @param defaultValue default calendar value if key is not found @return Calendar object or defaultValue if key is not found
3100 Retrieves a dictionary value by key or returns the default value. @param embedded embedded dictionary @param key key to retrieve @param defaultValue default value if not found @return COSDictionary value or defaultValue
3101 Returns a function mask value using COSName.R.
3102 Returns a function mask value from the dictionary.
3103 Applies a list of filters to the input stream and returns the result as a COSInputStream. @param filters List of filters to apply @param parameters COSDictionary of parameter values @param in Input stream to process @param options DecodeOptions for filtering
3104 Creates a RandomAccessRead instance based on filters and options. @throws IOException if an I/O error occurs
3105 Applies filters to stream and returns filtered InputStream. @param stopFilters list of filters to stop on
3106 Calculates function mask value based on input name. @param name string identifier of function to calculate mask for
3107 Calculates function mask value. @return calculated function mask float value
3108 Initializes a PDFunctionType2 object from the given COS function. @param function COS representation of the function
3109 Calculates and returns the mask value using annot.m1(COSName.LL).
3110 Calculates and returns a mask value using annot.m1 with COSName.LLE.
3111 Calculates the mask value using annotation m1 and COSName LLO.
3112 Returns a float value from the dictionary based on COSName.V. @return A float value corresponding to COSName.V
3113 Calculates and returns the mask value using m1 and m2 methods. @return calculated mask value
3114 Retrieves mask value by name with default value fallback. @param name unique identifier of mask @param defaultValue initial value to use if not found
3115 Calculates and returns a floating-point mask value.
3116 Calculates the mask height of a PDF font. @param font PDF font object @return mask height in points or NaN if not found
3117 Applies mask function to each element in the input list. @param tokens List of elements to process
3118 Retrieves masked list of objects. @return List of Object instances or empty list if not found
3119 Retrieves a list of parameter masks. @return List of Object containing parameter mask values
3120 Applies mask operations to the given PDStructureElement. @param structureElement element to be masked
3121 Masks PD structure element with reference kid. @param newKid PDStructureElement to mask @param refKid reference kid object
3122 Removes PDStructureElement and updates its reference. @param structureElement element to be removed @return true if removed, false otherwise
3123 Calculates and returns a Vector representing the function mask. @param cid unknown identifier (purpose unclear without context)
3124 Fetches a PDF properties list by name. @param name COSName of the property to fetch @return PDPropertyList object or null if not found
3125 Retrieves the function mask from the PDF document. @return PDPropertyList object or null if not found
3126 Retrieves PDPropertyList from optional content dictionary. @return PDPropertyList object or null if not found
3127 Retrieves a list of PD property lists from the OC GS dictionary. @return List of PDPropertyList objects or empty list if not found
3128 Returns PDF property list based on optional content dictionary. @return PDPropertyList object or null if not found
3129 Constructs a PDAnnotationCaret instance from a COS dictionary. @param field COS dictionary containing annotation caret properties
3130 Constructs a PDAnnotationFileAttachment from a COS dictionary. @param field COS dictionary containing attachment data
3131 Creates an instance of PDAnnotationFreeText from a COS dictionary. @param field COSDictionary containing annotation data
3132 Constructs a PDAnnotationInk object from a COS dictionary. @param dict COS dictionary containing annotation ink data
3133 Constructs a PDAnnotationLine object from a COSDictionary. @param field COS dictionary representing annotation line data
3134 Initializes a new instance of PDAnnotationPolygon from a COSDictionary.
3135 Initializes a new PDAnnotationPolyline instance from the provided PDF dictionary.
3136 Creates a new PDAnnotationRubberStamp instance from a COS dictionary. @param field COS dictionary containing stamp properties
3137 Constructs a PDAnnotationSound instance from a COS dictionary.
3138 Initializes a new instance of PDAnnotationSquareCircle from COS dictionary. @param dict COS dictionary containing annotation properties
3139 Initializes PDAnnotationText from COS dictionary. @param field COSDictionary containing annotation text data
3140 Initializes PDAnnotationTextMarkup from COSDictionary.
3141 Creates a PDF annotation popup object from its dictionary representation. @return PDAnnotationPopup object or null if the dictionary is invalid
3142 Returns a list of annotation widgets in the PDF.
3143 Clones a COSBase object with masking. @param base the COSBase object to clone @return the cloned TCOSBase object or null if failed
3144 Packs and writes COSStream contents to the given stream. @param stream target COSStream
3145 Writes a COSArray to the OutputStream. @param output OutputStream to write to @param cosArray COSArray object containing values
3146 Applies a mask to the given polygon vertices. @param vertices array of polygon points @param isEllipse true if shape is an ellipse, false otherwise
3147 Compresses and fetches image data using lossless RLE algorithm. @throws IOException if compression fails
3148 Recursively processes the destination of a PDF page. @param page PDPage object to process
3149 Encrypts a PDF object stream using the provided COSStream. @param stream COSStream to encrypt @param objNum Object number to encrypt @param genNum Generation number to encrypt
3150 Initializes an embedded goto action. @see #setSubType(String) Sets sub-type to predefined constant.
3151 Initializes goto action with subtype. @see #setSubType(int) @param SUB_TYPE predefined subtype value
3152 Initializes a new instance of a hide action.
3153 Initializes import data action with subtype. @param SUB_TYPE predefined subtype value
3154 Initializes JavaScript action with subtype. @see #setSubType(String)
3155 Initializes a new action launch with the specified subtype. @param SUB_TYPE predefined subtype value
3156 Initializes a new PDActionMovie object with subtype set to SUB_TYPE.
3157 Initializes a new instance of PDActionNamed with subtype set. @see #setSubType(String)
3158 Initializes remote goto action with subtype.
3159 Initializes a new instance of the reset form action.
3160 Initializes an action sound with default subtype.
3161 Initializes submit form with default subtype.
3162 Initializes a new instance of PDActionThread with default subtype.
3163 Initializes a new PDActionURI with default subtype.
3164 Initializes annotation highlight with specific subtype. @param SUB_TYPE subtype identifier (assumed to be defined elsewhere)
3165 Initializes PDAnnotationSquiggly with subtype.
3166 Initializes a new instance of PDAnnotationStrikeout.
3167 Initializes PDAnnotationUnderline with subtype.
3168 Creates a rasterized mask for the given page drawing context. @param drawer PageDrawer object @param pattern Tiling Pattern to apply @param color Color to use @param xform AffineTransform to apply @param anchorRect Rectangle2D bounding box of the mask @return Rasterized BufferedImage or null if failed
3169 Calculates and returns the rectangle for a tiling pattern. @param pattern TilingPattern object containing pattern properties
3170 Processes image using Paint object. @param paint Paint object for processing @return Processed BufferedImage or throws exception if failed
3171 Creates a writable raster from the given PD image. @param pdImage input PDF image
3172 Generates a downscaled BufferedImage from a PDImage. @param pdImage input image @param region rectangle to clip the image @param subsampling factor for downsampling @param colorKey optional color key array (null if not used)
3173 Returns the resources for the current page. @return PDResources object or null if not loaded
3174 Returns the PDF page's media box rectangle. @return PDRectangle object representing the page's boundaries
3175 Calculates the function mask based on page rotation. @return Function mask value or 0 if no valid rotation angle found
3176 Recursively fetches and returns COSName value by key. @param key key to look up @param defaultValue default value if not found
3177 Returns a boolean value based on m1 result from COSName.V.
3178 Calculates and returns a boolean mask value. @return true/false result of m1().m2() operation
3179 Retrieves a boolean value from the dictionary using the specified key. @return True if the key exists and its value is true; false otherwise
3180 Checks if mask is enabled. @return true if mask is enabled, false otherwise
3181 Checks function mask value using m1 API. @return true if valid, false otherwise
3182 Evaluates function mask flag. @return true/false indicating flag state
3183 Calculates and returns a boolean flag based on M1 and COS name I. @return true/false flag value
3184 Evaluates mask function. @return true/false result of evaluation
3185 Checks if anti-aliasing is enabled in the rendering pipeline. @return true if enabled, false otherwise
3186 Checks and returns a specific flag value. @return true/false indicating flag status
3187 Retrieves the mask value from the dictionary. @return true/false indicating mask state
3188 Retrieves and evaluates a specific flag value from the dictionary. @return true if the flag is enabled, false otherwise
3189 Checks if function masking is enabled. @return true if enabled, false otherwise
3190 Checks the mask value using action interface. @return true if mask is valid, false otherwise
3191 Returns a mask indicating whether the current function is enabled. @return true if enabled, false otherwise
3192 Evaluates repeat mask functionality. @return true/false indicating enabled/disabled state
3193 Returns a flag indicating whether to mask function names. @return true/false indicating masking status
3194 Calculates and returns function mask value. @return true/false indicating function availability status
3195 Evaluates the mask function using M2 and COSName. @return true if successful, false otherwise
3196 Returns true if pre-release functionality is enabled. @return true if enabled, false otherwise
3197 Returns whether to mask non-EFont fonts. @return true if masking is enabled, false otherwise
3198 Retrieves and evaluates trusted mode flag from dictionary. @return true if trusted mode is enabled, false otherwise
3199 Checks if mask functionality is enabled. @return true if enabled, false otherwise
3200 Evaluates function mask using COSName.B and default flags. @return true if successful, false otherwise
3201 Checks if toolbar should be hidden. @return true if toolbar is to be hidden, false otherwise
3202 Determines whether to hide the menu bar. @return true if menu bar should be hidden, false otherwise
3203 Returns whether to hide window UI based on user preference. @return true if hidden, false otherwise
3204 Checks if fit window functionality is enabled. @return true if enabled, false otherwise
3205 Returns whether center window functionality is enabled. @return true if enabled, false otherwise
3206 Returns whether to display document title in UI. @return true if enabled, false otherwise
3207 Sets or clears a flag in the COSName field. @param field COSName field to modify @param bitFlag flag bitmask value @param value true to set, false to clear the flag
3208 Retrieves value from embedded dictionary using specified key. @param embeddedDictionary COS dictionary to search @param key name of the value to retrieve @param defaultValue default value if key not found @return retrieved value or defaultValue if key not found
3209 Recursively calls m2 with COSName result and default value. @param key input string to process
3210 Returns index of given COSName in default list. @param key COSName to search for
3211 Wraps call to m2 with COSName lookup. @param key lookup key @param defaultValue default value if not found
3212 Checks if a COSName field matches a specific mask. @param field COSName to check @param bitFlag bitmask flag @return true if the field matches the mask, false otherwise
3213 Searches for a 1-based page number within a COSDictionary. @param pageNum the target page number @param node the dictionary to search in @return the parent COSDictionary if found, or null otherwise
3214 Calculates and returns the function mask value. @return The calculated function mask integer value
3215 Calculates the mask value using the root's m1 function. @return integer mask value
3216 Calculates a mask value based on COSName.ORDER and an offset of 1.
3217 Calculates and returns a mask value using m1 and m2 methods. @return calculated mask value
3218 Returns a mask value based on dictionary filter. @return mask value as an integer
3219 Returns a mask value from the dictionary. @return integer mask value
3220 Returns a mask value based on dictionary lookup. @return integer mask value
3221 Retrieves function mask value from dictionary. @return function mask integer value
3222 Returns the mask value from the dictionary using COSName.P as key.
3223 Generates a function mask string using annot.m1(). @return function mask string
3224 Retrieves and returns the function mask value. @return The current function mask value
3225 Creates a PDAbstractPattern instance based on the given COSDictionary. @param dictionary COSDictionary containing pattern details @param resourceCache ResourceCache for resolving resources @return PDAbstractPattern object or throws IOException for unknown patterns
3226 Calculates and returns a mask value using COSName.PAINT_TYPE. @return calculated mask value
3227 Returns a function mask value. @return function mask integer value
3228 Creates a PDShading object based on the provided COSDictionary. @param shadingDictionary dictionary containing shading information @return PDShading object or null if unsupported type is encountered
3229 Calculates and returns a mask value based on COSName.BITS_PER_FLAG.
3230 Calculates and returns the mask value using m1() and m2().
3231 Retrieves the number of bits per color component. @return Number of bits per color component or -1 if not set
3232 Returns the number of bits per coordinate. @return The number of bits used to represent a single coordinate
3233 Calculates and returns a function mask value. @return function mask value as an integer
3234 Returns the function mask value. @return integer representing the function mask
3235 Returns mask value using dictionary and COSName constant. @return integer mask value
3236 Retrieves and returns the mask value from dictionary. @return The retrieved mask value
3237 Calculates and returns a function mask value. @return calculated function mask integer value
3238 Calculates and returns a function mask value. @return integer function mask value
3239 Returns a function mask value using COSName constants. @return integer function mask value
3240 Checks if function mask is enabled. @return true if enabled, false otherwise
3241 Returns a mask value based on COSName.COUNT and initialization value. @return integer mask value
3242 Retrieves a function mask value from the dictionary. @return function mask integer value
3243 Calculates and returns a function mask.
3244 Returns list of COS objects based on given type. @param type COS object type
3245 Calls m1() to set up page tree and then calls its m2() method.
3246 Parses an FDF document from the specified file. @param file input file containing FDF data @return parsed FDFDocument object or throws IOException if parsing fails
3247 Parses an InputStream into a FDFDocument object. @param input InputStream containing the PDF form data @return FDFDocument object or null on parsing failure
3248 Creates a new PDF document instance. @throws IOException if creation fails
3249 Loads resource mask from cache or page.
3250 Retrieves color space by name. @param name COS name of the color space
3251 Returns the font name as a COSName object. @param font PDFont object
3252 Returns COSName representation of PDColorSpace. @param colorSpace Color space object to convert.
3253 Returns the Cos name for extended graphics state. @param extGState extended graphics state object
3254 Returns a COSName instance based on the given PDShading object. @param shading PDShading instance to be converted
3255 Returns the name of the given abstract pattern. @param pattern PDAbstractPattern instance to extract name from
3256 Returns a COSName based on the type of input PDPropertyList. @param properties input property list
3257 Creates a COSName object from an image XObject. @param image PDImageXObject to create COSName from
3258 Returns a COSName object representing the Form XObject. @param form PDFormXObject instance
3259 Creates a COSName object with a specific type and prefix. @param xobject PDXObject instance @param prefix string prefix for the name
3260 Retrieves an embedded file from the PDF document with mask functionality. @return PDEmbeddedFile object or null if not found
3261 Retrieves a file embedded in the PDF as a DOS stream. @return PDEmbeddedFile object or null if not found
3262 Retrieves an embedded file from the MAC attribute. @return PDEmbeddedFile object or null if not found
3263 Returns a PDEmbeddedFile instance from the specified Unix stream. @return embedded file object or null on failure
3264 Retrieves the embedded file from the parent document. @return PDEmbeddedFile object or null if not found
3265 Checks if a PDOptionalContentGroup is masked based on its properties. @param group PDOptionalContentGroup object to check @return true if the group is masked, false otherwise
3266 Recursively checks for a group with the given name and enables/disables optional content. @param groupName unique group identifier @param enable flag to enable or disable optional content
3267 Retrieves and configures the default appearance entry for a dictionary. @return PDAppearanceEntry object or null if not found
3268 Retrieves a PDAppearanceEntry, optionally replacing it with a new instance.
3269 Creates and updates the down PDAppearanceEntry based on the dictionary. @return The updated down PDAppearanceEntry
3270 Validates and sets mask value at specified index. @param index field index (must be within bounds)
3271 Updates the outline item hierarchy by adding a child and adjusting parent-child relationships. @param newChild the newly added child PDOutlineItem
3272 Updates the outline item hierarchy by adding or replacing a child. @param newChild new child item to be added or replaced
3273 Retrieves the PDSignatureField from the iterator that matches the given signature. @param fieldIterator iterator of PDFields to search @param sigObject the PDSignature object to match @return matching PDSignatureField or null if not found
3274 Returns a PDAppearanceStream instance based on the provided PDAnnotation.
3275 Adds or updates font resources in the AcroForm based on annotations. @param acroFormResources PDResources containing AcroForm fonts @param annotation PDAnnotation object to process
3276 Retrieves a set of annotation values based on export rules and PDAnnotationWidgets. @return Set of String annotation values
3277 Checks if mask value is valid by calling intermediate functions. @return true if mask value is valid, false otherwise
3278 Calls m1() and then calls m2() with its result.
3279 Returns index of matching page in search tree. @param page PDPage object to search for
3280 Updates the current node to the specified parent and calls m1(). @param parentNode PDNameTreeNode object representing the new parent
3281 Updates node with kids and masks names if necessary. @param kids list of PDNameTreeNode children
3282 Updates the 'names' and 'limits' properties of a PDF object with name-value pairs from the provided map. @param names map of names to values
3283 Initializes a PDPageLabels object from a PDDocument and COSDictionary. @param document the parent PDF document @param dict the dictionary containing page label information
3284 Creates a PDRange object for the given parameter number. @param paramNum index of the parameter
3285 Initializes CALGRAY calendar type.
3286 Initializes a new instance of PDCalRGB with default color space. @see super(COSName.CALRGB)
3287 Initializes a new instance of PDLab with default COS name.
3288 Initializes a PDCalGray instance from a COSArray. @param array COSArray containing data to initialize the PDCalGray object
3289 Initializes a PDCalRGB object from a COSArray of RGB values. @param rgb array of color values in COS format
3290 Initializes a new instance of PDLab with the specified COSArray data. @param lab COSArray containing lab data
3291 Initializes AxialShadingContext with the provided parameters. @param shading PDShadingType2 object to fetch axial shading context from @param colorModel ColorModel used in this context @param xform AffineTransform for device and user space transformation @param matrix Matrix defining transform and affine properties @param deviceBounds Rectangle representing device bounds
3292 Initializes RadialShadingContext with provided parameters. @param shading PDShadingType3 object representing radial shading type @param colorModel ColorModel used in context @param xform AffineTransform for device space transformation @param matrix Matrix for coordinate system transformation @param deviceBounds Rectangle defining device bounds
3293 Initializes a triangle-based shading context from given parameters. @param shading PDShading object to use for rendering @param cm ColorModel to apply when rendering @param xform AffineTransform to apply to the geometry @param matrix Matrix representing the transformation to apply
3294 Initializes Type1ShadingContext with provided parameters. @param shading the PDShadingType1 object @param colorModel the ColorModel object @param xform the AffineTransform object @param matrix the Matrix object
3295 Creates a PDRange object based on the provided parameter number. @param paramNum index of the parameter to create a range for @return PDRange object or null if not possible
3296 Retrieves a PDRange object for the given parameter number. @param paramNum index of the parameter in the decode values @return PDRange object or null if not found
3297 Generates mask string using m1 and m2 functions. @param name input name @param defaultValue default value to use if generation fails
3298 Generates mask string with solid style. @return formatted mask string
3299 Configures line mask based on style dictionary and border settings. @param lineWidth line width value
3300 Creates a PDDocument with masked function based on existing catalog. @return PDDocument object
3301 Updates application version. @param newVersion new version to apply
3302 Retrieves the root of a PD structure tree. @return PDStructureTreeRoot object or null if not found
3303 Retrieves a list of objects associated with the given COSBase.
3304 Retrieves or initializes PDEncryption instance. If not initialized, attempts to initialize using document.m2(). @return PDEncryption object or null if initialization failed.
3305 Initializes encryption settings from document. @throws IOException on errors
3306 Initializes font-specific CMap and checks for descendant CJK ordering. @throws IOException if required CMap is missing
3307 Calculates FUNC_MASK value based on input byte array and length. @param bytes input byte array @param length1 input length value @return calculated FUNC_MASK value or adjusted length if invalid
3308 Calculates the valid mask length from byte array. @param bytes input byte array @param length1 starting index @return valid mask length or default value if invalid
3309 Returns a formatted string mask.
3310 Returns a formatted string mask. @return concatenated string result
3311 Generates function mask string using m1 and m2 methods. @return function mask string
3312 Generates a mask string using m1 and m2 methods. @return formatted string containing PS and space characters
3313 Returns a formatted string mask. @return Formatted string with 'SS' replaced by spaces
3314 Generates function mask using m1 and m2 methods. @return Function mask string
3315 Wraps call to m1 with null as third parameter.
3316 Evaluates font matches based on the provided PDFontDescriptor and PDCIDSystemInfo. @param fontDescriptor descriptor of the target font @param cidSystemInfo information about the CID system @return PriorityQueue of FontMatch objects, sorted by score
3317 Wraps a call to m1 with null as the third parameter. @param embedded name of embedded object @param key name of cryptographic key
3318 Returns an input stream configured with specified filters and parameters. @param filters List of filter configurations @param parameters Dictionary of parameter settings @param in Input stream to configure
3319 Initializes the parser with a COSStream and COSDocument. @param stream COSStream containing PDF objects @param document associated COSDocument
3320 Initializes the parser with a given PDF COS stream. @param stream COSStream object containing PDF data
3321 Initializes a PDCIDFontType0 from the given COS dictionary and parent PDType0Font. @param fontDictionary COS dictionary containing font metadata @param parent PDType0Font to which this font belongs
3322 Initializes a PDCIDFontType2 object from the given font dictionary and parent font. If a TrueTypeFont is provided, it will be used; otherwise, an embedded font will be fetched if available; otherwise, a substitute font will be found. The resulting font's OTF support and embedding status are determined accordingly. @param fontDictionary COS dictionary containing the font information @param parent PDType0Font parent font @param trueTypeFont TrueTypeFont object to use (optional)
3323 Retrieves a CMap from the given COSBase, either by name or stream. @param base COSBase object containing the CMap data @throws IOException if the input is invalid
3324 Creates a new circle annotation from the given COS dictionary. @param field COS dictionary representing the annotation properties
3325 Initializes a new PDAnnotationSquare with the given COSDictionary. @param field COS dictionary containing annotation properties
3326 Constructs a PDAnnotationHighlight from a COS dictionary. @param dict COS dictionary containing annotation highlight data
3327 Constructs a new PDAnnotationSquiggly instance from a COS dictionary. @param dict COS dictionary containing annotation data
3328 Constructs a strikeout annotation from a COS dictionary. @param dict COSDictionary containing strikeout annotation data
3329 Constructs an underline annotation from a COS dictionary.
3330 Recursively clones the page tree and object structure. @param cloner PDFCloneUtility instance @param parentTreeEntry current dictionary entry @param objMapping mapping of dictionaries to cloned objects
3331 Copies non-excluded entries from the source COSDictionary to the destination, using the provided PDFCloneUtility for cloning. @param src source dictionary @param dst destination dictionary @param cloner utility for cloning objects @param exclude set of names to exclude from copying
3332 Processes and updates the trailer dictionary of a COSDocument. @param doc COSDocument object to be processed
3333 Converts and processes a float path into a polygon representation. @param path 2D array of floats representing the path
3334 Draws a rectangular or elliptical mask with specified bounds. @param left left X coordinate @param bottom bottom Y coordinate @param right right X coordinate @param top top Y coordinate @param isEllipse true to draw an ellipse, false for rectangle
3335 Initializes JavaScript action with given script. @param js JavaScript code to execute
3336 Creates a texture paint for tiling a page with the given pattern. @param drawer PageDrawer object @param pattern PDTilingPattern to be used for tiling @param color PDColor of the tile @param xform AffineTransform for transformation
3337 Creates a sampled image mask within the specified region. @param region rectangle defining the area of interest @param subsampling sampling factor for the image mask
3338 Creates a BufferedImage from the given PDImage and color key. @param pdImage input image @param colorKey color key array
3339 Returns the parent resources for the given content stream. If available, uses the stream's resources; otherwise, falls back to page or creates a new resources object. @param contentStream the content stream to fetch resources from @return the parent resources (or null if not found)
3340 Calculates AffineTransform to position overlay media box in the center of page. @param page PDPage object @return AffineTransform object for overlay positioning
3341 Calculates the intersection of two rectangles. @param box input rectangle @return intersecting rectangle or null if empty
3342 Computes the media box rectangle for a page with possible rotation. @param page PDPage object containing rotation and media box information @return adjusted or original media box rectangle depending on rotation angle
3343 Checks if an item is marked. @return true if marked, false otherwise
3344 Checks if UserProperties flag is set in the dictionary. @return true if flag is set, false otherwise
3345 Checks if "Suspects" is present in the dictionary. @return true if key exists, false otherwise
3346 Checks if map is enabled. @return true if map is enabled, false otherwise
3347 Checks mask status by executing two-level function calls. @return true if mask is valid, false otherwise
3348 Checks the mask flag using m1 and m2 methods. @return true if mask is valid, false otherwise
3349 Configures mask visibility based on input flag. @param hidden true to hide, false to show
3350 Evaluates a function mask using COSName.OP_NS and result of m1(). @return true if mask is valid, false otherwise
3351 Draws a PDInlineImage at specified coordinates with given dimensions. @param inlineImage image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width image width @param height image height
3352 Sets flag indicating visibility of an annotation. @param invisible true to hide, false to show
3353 Sets the hidden flag in the annotation. @param hidden true to hide, false to show
3354 Sets the printed flag in the annotation. @param printed whether the annotation should be printed
3355 Sets mask flag based on zoom preference. @param noZoom true to disable zoom or false otherwise
3356 Sets flag to disable rotation based on input. @param noRotate whether to disable rotation (true) or not (false)
3357 Applies mask to function based on visibility flag. @param noView true to hide view, false otherwise
3358 Sets read-only flag on annotation. @param readOnly true to enable read-only mode
3359 Sets flag indicating whether function is locked. @param locked true if function is locked, false otherwise
3360 Toggles flag to show/hide view based on input value. @param toggleNoView true to hide view, false to show
3361 Sets flag indicating whether contents are locked. @param lockedContents true if contents are locked, false otherwise
3362 Sets mask visibility. @param invisible true to hide, false to show
3363 Sets flag to indicate whether mask is visible or hidden. @param hidden true if mask should be hidden, false otherwise
3364 Sets mask flag based on print status. @param printed whether to set printed flag
3365 Applies zoom mask to graphics context. @param noZoom whether to disable zoom functionality
3366 Applies mask operation with optional rotation flag. @param noRotate whether to disable rotation
3367 Sets mask flags based on view visibility. @param noView whether to hide or show view
3368 Configures function mask with read-only flag. @param readOnly true to enable read-only mode
3369 Sets lock flag on functional mask. @param locked new lock status
3370 Toggles no-view flag in COS object. @param toggleNoView true to enable or false to disable no-view mode
3371 Sets lock status on contents. @param lockedContents true to lock, false to unlock
3372 Configures mask filter based on input flag. @param flag boolean value to enable/disable mask filtering
3373 Sets mask flag based on input boolean value. @param flag true to enable or false to disable
3374 Sets mask flag based on input value. @param flag boolean value to set as mask
3375 Sets the mask flag based on input.
3376 Sets mask functionality based on input flag. @param flag true to enable, false to disable
3377 Applies mask to legal attestation based on input flag. @param flag boolean value controlling mask application
3378 Sets mask flag based on input boolean value. @param flag true to enable or false to disable
3379 Sets mask flag in subject dictionary. @param flag boolean value to set
3380 Sets issuer flag in the dictionary based on the provided boolean value. @param flag true to set, false to reset the issuer flag
3381 Sets the mask flag in the underlying dictionary. @param flag boolean value to set
3382 Updates subject DN mask in the dictionary with the given flag. @param flag boolean value to set or clear the mask
3383 Sets flag value in dictionary. @param flag boolean indicator to update
3384 Sets flag value in dictionary. @param flag boolean flag to set
3385 Applies italic mask to font. @param italic true to apply italic, false otherwise
3386 Applies or removes font bolding to the current graphics context. @param bold true to apply bolding, false to remove it
3387 Sets flag indicating whether signatures exist in the dictionary. @param signaturesExist true if signatures are present, false otherwise
3388 Sets mask flag in database. @param appendOnly whether to enable append-only mode
3389 Configures mask functionality with optional sorting. @param sort whether to enable sorting
3390 Configures mask behavior based on multi-select flag. @param multiSelect true to enable, false to disable multi-select mode
3391 Disables or enables spell checking. @param doNotSpellCheck true to disable spell checking, false otherwise
3392 Configures mask behavior based on selection change. @param commitOnSelChange whether to commit changes on selection change
3393 Sets mask flag based on combo status. @param combo true to enable or false to disable combo functionality
3394 Applies edit mask to COS name. @param edit true to enable editing
3395 Sets read-only flag in user profile dictionary. @param readonly true to mark as read-only, false otherwise
3396 Sets mask flag in dictionary based on requirement. @param required true to set flag, false otherwise
3397 Sets flag to exclude export based on input parameter. @param noExport true to exclude export, false otherwise
3398 Initializes a push button with an associated AcroForm. @param acroForm the AcroForm to associate with this button
3399 Initializes radio button with flag set to FF and radio type. @param acroForm parent AcroForm object
3400 Sets radio mask flag based on input. @param radiosInUnison true to enable or false to disable
3401 Sets mask flag with optional multiline option. @param multiline true to enable multiline flags
3402 Sets mask flag on user profile based on password visibility. @param password true to show/hide password
3403 Sets file selection flag in mask settings. @param fileSelect true to enable or false to disable file selection
3404 Enables or disables spell checking based on parameter. @param doNotSpellCheck true to disable, false to enable
3405 Configures mask behavior with optional scrolling suppression. @param doNotScroll true to prevent scrolling on mask creation
3406 Sets mask combination flag. @param comb boolean value indicating mask combination
3407 Sets mask flag based on rich text preference. @param richText true to enable rich text formatting
3408 Calls m1 with default timeout (-1).
3409 Returns FUNC mask value. @return integer representing FUNC mask
3410 Returns an OutputStream with optional prediction and color filtering. @param out the underlying output stream @param decodeParams dictionary containing filter parameters @return OutputStream instance or original out if no filters applied
3411 Returns integer mask value from page.m1 operation. @return Mask value result of page.m1 operation
3412 Recursively updates the count of parent nodes when a child is removed. @param node COSDictionary representing the child being removed
3413 Recursively increments the page count of a given PDF page's ancestors. @param page PDPage object to start from
3414 Calculates the function mask. @return integer function mask value
3415 Computes and returns a function mask value. @return integer function mask value
3416 Returns the mask value using m1 and m2 methods with parent tree next key.
3417 Calculates and returns the function mask value. @return integer mask value or -1 if m1 is null
3418 Creates a PDImageXObject from the specified image data. @param document PDDocument instance @param reader RandomAccessRead stream containing image bytes @param number Image identifier @return PDImageXObject object or null on failure
3419 Returns the mask value from the dictionary using COSName.LC key.
3420 Returns a mask integer value based on dictionary key LJ. @return An integer representing the mask.
3421 Retrieves a mask value using m1 and m2 methods. @return an integer mask value
3422 Retrieves and returns the mask value from the dictionary.
3423 Generates a mask value using COSName.MAX_LEN.
3424 Returns function mask value based on input string and default value. @param name input string @param defaultValue default value to return if not found
3425 Checks if the function mask is enabled.
3426 Determines whether to include function mask annotation.
3427 Checks if mask flag is set. @return true if mask flag is enabled, false otherwise
3428 Checks functional mask state. @return true if enabled, false otherwise
3429 Returns true if mask flag is enabled. @return true if mask flag is set, false otherwise
3430 Returns true if mask is enabled. @return true if mask is enabled, false otherwise
3431 Checks mask flag value using annotation. @return true if read-only, false otherwise
3432 Checks mask flag. @return true if masked, false otherwise
3433 Returns whether to toggle view flags based on annotation M1.
3434 Checks flag for locked contents. @return true if flagged, false otherwise
3435 Calculates the mask value based on the invisible flag.
3436 Checks flag mask with user input. @return true/false result of comparison
3437 Evaluates function mask condition. @return true if condition is met, false otherwise
3438 Evaluates function mask using m1() and m2() methods. @return true if mask is valid, false otherwise
3439 Calculates and returns a flag based on COSName.F and FLAG_NO_ROTATE.
3440 Checks function mask by invoking m1() with F flag and no view.
3441 Checks functionality mask. @return true if enabled, false otherwise
3442 Checks mask condition using m1().m2() with specific parameters. @return true if condition is met, false otherwise
3443 Returns true/false toggle value based on COS calculation.
3444 Checks if mask is enabled. @return true if enabled, false otherwise
3445 Calculates the mask value using m1 and m2 methods. @return true if successful, false otherwise
3446 Evaluates function mask using FF flag and subfilter option. @return true if mask is valid, false otherwise
3447 Returns true if function masking is enabled. @return true if enabled, false otherwise
3448 Evaluates the function mask using FF flag and V value. @return true if evaluation is successful, false otherwise
3449 Returns true/false flag based on masked result from m1(). @return true if mask succeeded, false otherwise
3450 Evaluates the functional mask. @return true if valid, false otherwise
3451 Calculates a flag mask using COSName and FLAG constants. @return computed flag value
3452 Returns true if mask flag is enabled. @return boolean value indicating mask flag status
3453 Checks if issuer flag is set in the dictionary.
3454 Checks flag OID in dictionary. @return true if present, false otherwise
3455 Checks if subject DN flag is enabled in the dictionary configuration. @return true if enabled, false otherwise
3456 Checks flag key usage in dictionary. @return true if FF flag is set, false otherwise
3457 Checks flag URL using COS dictionary. @return true if flag is valid, false otherwise
3458 Returns a flag indicating whether the font mask is enabled. @return true if font mask is enabled, false otherwise
3459 Returns true if the mask is enabled. @return true if mask is enabled, false otherwise
3460 Checks if signature flags exist in the dictionary.
3461 Checks if flag is set to append-only. @return true if flag is set, false otherwise
3462 Returns true if mask is enabled. @return true if mask is enabled, false otherwise
3463 Returns true if mask is enabled.
3464 Performs bitmask operation and returns true if successful. @return true if operation is successful, false otherwise
3465 Evaluates function mask based on FF flag and multi-selection. @return true if function mask is enabled, false otherwise
3466 Determines whether to mask function names. @return true if masking is enabled, false otherwise
3467 Determines whether to apply a mask. @return true if mask should be applied, false otherwise
3468 Evaluates the function mask condition. @return true if condition is met, false otherwise
3469 Checks edit flag functionality. @return true if successful, false otherwise
3470 Checks function mask flag. @return true if function is read-only, false otherwise
3471 Checks flag requirement status. @return true if flag is required, false otherwise
3472 Returns flag indicating whether to export function mask. @return true if function should be exported, false otherwise
3473 Checks mask functionality. @return true if enabled, false otherwise
3474 Evaluates flag mask using COSName.FF and FLAG_MULTILINE. @return true if evaluated successfully, false otherwise
3475 Evaluates function mask condition. @return true/false result of condition evaluation
3476 Performs a specific function mask operation. @return true if successful, false otherwise
3477 Configures function mask settings. @return true if successful, false otherwise
3478 Evaluates mask function using m1() and m2() methods. @return true if mask is valid, false otherwise
3479 Evaluates function mask using COSName.FF and FLAG_COMB. @return true if successful, false otherwise
3480 Checks mask functionality. @return true if enabled, false otherwise
3481 Creates a PDPage object from the given index and resources. @param index page index
3482 Computes a function mask value by chaining method calls. @return computed integer value
3483 Updates the attribute object with a mask value. @param attributeObject PDAttributeObject to update
3484 Replaces attribute value in an array or sets a new array with the specified mask value. @param attributeObject PDAttributeObject to update
3485 Sets mask for a class by name. @param className unique class identifier
3486 Increments the result of m1 and passes it to m2. @param none
3487 Decrypts user profile using provided encryption and decryption material. @param encryption PDEncryption object @param documentIDArray COSArray of document IDs @param decryptionMaterial DecryptionMaterial to use for decryption
3488 Generates a byte array representing the mask for the current object. @return byte[] representing the mask or null if not applicable
3489 Generates a byte array mask based on user data. @return byte[] user mask or null if undefined
3490 Converts integer code to vector representation. @param code input code value @return Vector object representing the encoded data
3491 Calculates the width of a text using custom function masks. @param text input string @return calculated width as float or throws IOException if error occurs
3492 Fetches a PDAbtractPattern object by name, caching the result if applicable. @param name unique COSName identifier
3493 Processes PDF stream content for masking. @param contentStream PDContentStream object to process
3494 Retrieves PDShading object by name. @param name COSName identifier @return PDShading object or null if not found
3495 Retrieves the PDF Shading object for FUNC_MASK. @return PDShading object or null if not found
3496 Retrieves the number of color component bits per pixel. @return Number of bits per color component or -1 if unknown
3497 Retrieves the number of color component bits. @return Number of bits per color component or -1 if undefined
3498 Returns the number of bits per coordinate. @return bitsPerCoordinate value or calculated default if not set
3499 Retrieves the number of bits per coordinate. If not set, fetches from configuration. @return bitsPerCoordinate value or -1 if unknown
3500 Checks if mask value is positive. @return true if mask value is greater than zero, false otherwise
3501 Determines the type of PDF field based on its dictionary and properties. @param form PDAcroForm object @param field COSDictionary representing the field @param parent PDNonTerminalField parent field @return PDField object or null if unknown type
3502 Initializes a new instance of PDFPrintable with specified settings. @param document PDDocument to print @param scaling Scaling factor for the output @param showPageBorder Whether to display page borders @param dpi Dots per inch for the output @param center Whether to center the content @param renderer PDFRenderer instance for rendering pages
3503 Initializes PDFRenderer with a PDDocument instance. @param document the PDDocument to render pages from
3504 Loads an FDFDocument from a file. @param filename path to the FDF file
3505 Decrypts and parses a PDF document using the provided key. @param input encrypted PDF data @param password decryption password @param keyStore key store for decryption @param alias key alias in the key store @param streamCacheCreateFunction function to create stream cache @return decrypted PDDocument object or throws IOException if failed
3506 Creates a PDDocument instance from encrypted or masked PDF data. @param randomAccessRead Random access read object for PDF data @param password Encryption password (if applicable) @param keyStore Key store input stream @param alias Alias for decryption (if applicable) @param streamCacheCreateFunction Function to create a stream cache @return PDDocument instance or throws IOException if error occurs
3507 Processes operator-specific PDF stream logic. @param operator the Operator instance @param arguments list of COSBase objects for processing
3508 Retrieves PDXObject for the given COSName. @param name unique identifier @return PDXObject instance or null if not found
3509 Applies font and size settings to the document context. @param font PDFont object @param fontSize font size value
3510 Sets graphics state parameters and executes mask operation. @param state extended graphics state context
3511 Applies a fill mask to the given PDShading object. @param shading PDShading object to apply mask to
3512 Adds a mask annotation to the PDF document. @param tag COSName of the annotation @param propertyList PDPropertyList containing annotation properties
3513 Applies mask functionality to a COS object and its properties. @param tag COSName representing the object @param propertyList PDPropertyList containing object properties
3514 Draws an image mask at specified position and size. @param image the PDImageXObject to draw @param x x-coordinate of top-left corner @param y y-coordinate of top-left corner @param width image width @param height image height
3515 Applies the given transformation to the image using the specified matrix. @param image image object @param matrix transformation matrix
3516 Draws a PDFormXObject on the page, disallowing text mode. @param form PDFormXObject object to be drawn
3517 Recursively checks if a group with the given name exists in the optional content hierarchy. @param groupName name of the group to search for @return true if found, false otherwise
3518 Checks if the given content group is valid based on optional content properties. @param group PDOptionalContentGroup object to validate @return true if valid, false otherwise
3519 Applies a set of operations to a PDOutlineItem instance. @param newChild PDOutlineItem instance to process
3520 Invokes a series of methods to process and mask a PDOutlineItem. @param newChild the item to be processed
3521 Validates input string against a set of allowed values. @param value input string to validate
3522 Updates page destinations in the destination document. @param destinationDocument PDDocument to update
3523 Retrieves page labels dictionary from PDF document. @return PDPageLabels object or null if not found
3524 Initializes a new GouraudShadingContext instance with the specified parameters. @param shading PDShading object @param colorModel ColorModel instance @param xform AffineTransform to apply @param matrix Matrix for transformation
3525 Initializes or refreshes the destination document and dictionary maps. @throws IOException if an I/O error occurs
3526 Updates document header and writes FDF/PDF mask. @param doc COSDocument object
3527 Updates PDF optional content properties and adjusts the document version. @param ocProperties PDOptionalContentProperties object to update
3528 Recursively fetches and returns the M2 structure from the PD Structure Tree. @return A map of string to object containing the M2 data, or an empty map if not found
3529 Updates the PDF document with a new signature. @param doc PDDocument to update @param signInterface SignatureInterface to use for signing
3530 Updates or adds object to the document's object pool. @param key COSObjectKey for the object @param base existing COSBase object (optional)
3531 Initializes and configures protection policy with specified security handler. @param policy ProtectionPolicy object
3532 Encrypts document with AES algorithm. @param doc PDDocument to encrypt
3533 Returns Unicode string representation for the given font code. @param code font code value
3534 Fetches the FUNC_MASK value for a given code. @param code unique font code
3535 Retrieves mask value from parameters dictionary. @return string representation of mask or null if not found
3536 Retrieves mask information from parameters dictionary. @return formatted string with MAC and CREATOR fields or null if not found
3537 Retrieves mask value from parameters dictionary. @return string representation of the mask or null if not found
3538 Finds a suitable CIDFontMapping based on the provided parameters. @param baseFont base font name @param fontDescriptor PDFontDescriptor object for font matching @param cidSystemInfo PDCIDSystemInfo object for collection and priority matching @return CIDFontMapping object or null if not found
3539 Returns a COS input stream with default decode options. @throws IOException if an I/O error occurs.
3540 Processes object stream offsets and updates XREF table. @param xrefTable map of COSObjectKey to Long
3541 Fetches COSBase object by key from decompressed objects or document. @param objstmObjNr object stream number @param key COSObjectKey to search for @return COSBase object or null if not found
3542 Resolves cross-reference stream for a given object offset. @param objByteOffset byte offset of the object @param isStandalone whether to resolve standalone trailer
3543 Returns an input stream containing the file's contents for random access. @return InputStream object or a zero-byte ByteArrayInputStream if not available
3544 Constructs a new PDCIDFontType2 instance from the given font dictionary and parent font. @param fontDictionary COS dictionary representing the font @param parent parent Type 0 font
3545 Creates a PDCIDFont object with mask functionality. @return PDCIDFont instance
3546 Creates a PDAnnotation object based on the given COSBase. @param base COSBase to process @return PDAnnotation object or null if unknown subtype
3547 Calculates and applies mask for the given PDRectangle. @param rd input rectangle data
3548 Adjusts the bounding box of a polygon based on its width and height. @param leftOrig original left boundary @param bottomOrig original bottom boundary @param rightOrig original right boundary @param topOrig original top boundary
3549 Initializes tiling paint with specified pattern and transform. @param drawer PageDrawer instance @param pattern PDTilingPattern object @param xform AffineTransform to apply
3550 Generates default image with specified level. @throws IOException if image generation fails
3551 Initializes a PDF page content stream for the given document and page. @param document target PDDocument instance @param sourcePage source PDPage to append content from
3552 Returns the mask rectangle for the given page. @return PDRectangle object representing the mask bounds
3553 Initializes PDInlineImage with specified coordinates and metadata. @param inlineImage image object @param x horizontal position @param y vertical position
3554 Draws inline image with specified bounds and metadata. @param inlineImage PDInlineImage object @param x float left coordinate @param y float top coordinate @param width float image width @param height float image height
3555 Draws a PDInlineImage within the current graphics context. @param inlineImage image to draw @param x image x-coordinate @param y image y-coordinate @param width image width @param height image height
3556 Draws a PDF inline image at the specified position with the given dimensions. @param inlineImage PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width image width @param height image height
3557 Draws a mask for the given inline image at specified position and size. @param inlineImage PDInlineImage to draw @param x x-coordinate of top-left corner @param y y-coordinate of top-left corner @param width image width @param height image height
3558 Constructs an FDFAnnotation object from the given XML element. @param element XML element containing annotation attributes
3559 Decodes image data from InputStream and writes it to OutputStream. @param encoded InputStream containing encoded image @param decoded OutputStream for writing decoded image @param parameters COSDictionary with decoding options @return DecodeResult object with decoding result
3560 Performs decoding operation based on provided parameters. @param encoded input stream containing encoded data @param decoded output stream for decoded data @param parameters dictionary of decoding parameters @param index index value used in decoding process @return DecodeResult object containing result of the operation
3561 Recursively traverses the tree starting from the given index. @param index current index to explore
3562 Recursively calls m2 on child pages. @param page parent PDPage object
3563 Applies mask functionality to the specified PDPage. @param page target PDF page
3564 Inserts a new page after the specified next page in the page tree. @param newPage new page to be inserted @param nextPage page to insert after
3565 Inserts a new page after the specified previous page. @param newPage new page to be inserted @param prevPage previous page for which the new page will follow
3566 Processes PDMarkedContent object. @param markedContent PDMarkedContent object to process
3567 Fetches and initializes the CMap for UCS-2 encoding. @throws IOException if unable to retrieve or initialize the CMap
3568 Creates a PDImageXObject from the given byte array and document. @param document input PDDocument @param byteArray image data in byte form @param number mask value @return created PDImageXObject or null on failure
3569 Creates a PD Image XObject from an image file with the specified mask. @param document PDDocument instance @param file File containing the image data @param number Mask identifier
3570 Applies mask to display values. @param displayValues list of strings to be masked
3571 Validates and processes export and display value lists. @param exportValues list of export values @param displayValues list of display values
3572 Sets mask values from a list of integers. @param values list of indices to set
3573 Validates PDTextField instance based on specified conditions. @return true if validation succeeds, false otherwise
3574 Creates a PDF page with mask functionality. @param pageIndex index of the page to be created
3575 Initializes the PageExtractor with a PDDocument instance. @param sourceDocument the PDF document to extract pages from
3576 Initializes PDFPageable object with PDDocument and display settings. @param document PDDocument instance @param orientation page orientation (e.g. Portrait, Landscape) @param showPageBorder whether to display page borders @param dpi dots per inch for rendering @param center whether to center the content on each page
3577 Invokes mask operation on user profile. @param none
3578 Performs encryption operations on a PDF document. @param encryption PDEncryption object containing encryption parameters @throws IOException if decryption material is incompatible or password is invalid
3579 Calculates the width of a space character in the current font. @return Width of a space character, defaulting to 250 if calculation fails
3580 Draws a string of characters in a field with specified quadding and font metrics. @param contents content stream to draw into @param appearanceStream appearance settings for the field @param font font used for drawing the text @throws IOException if an I/O error occurs during drawing
3581 Returns true if fixed pitch mode is enabled.
3582 Returns true if serif font is enabled.
3583 Returns true if symbolic flag is set. @param FLAG_SYMBOLIC input flag value
3584 Evaluates mask flag. @return true if script flag is set, false otherwise
3585 Returns a flag indicating whether the function mask is non-symbolic. @return true if the function mask is non-symbolic, false otherwise
3586 Returns true if italic formatting is enabled.
3587 Returns true if all caps flag is set.
3588 Returns true if small-cap flag is set. @return true if small-cap flag is enabled, false otherwise
3589 Returns true if bold formatting is enabled. @return whether bold formatting is forced on.
3590 Applies mask based on input flag. @param flag boolean toggle for masking functionality
3591 Applies serif mask based on input flag. @param flag true to apply serif mask, false otherwise
3592 Sets mask based on input flag. @param flag symbolic flag value to apply or clear mask
3593 Sets flag in script data. @param flag boolean value to set
3594 Sets mask based on provided boolean flag. @param flag non-symbolic flag value
3595 Applies italic mask to text based on the provided flag. @param flag boolean indicator to enable or disable italic formatting
3596 Applies a mask to all flags based on the provided boolean value. @param flag true to enable, false to disable
3597 Applies small-cap mask to UI elements based on input flag. @param flag true to apply mask, false otherwise
3598 Applies bold formatting to the mask based on the given condition. @param flag boolean flag to enable/disable bold formatting
3599 Retrieves a PDF pattern by color. @param color PDColor object identifying the pattern @return PDAbstractPattern object or throws IOException if not found
3600 Processes transparency group in current page context. @param group PDTransparencyGroup to process
3601 Saves and restores graphics state while rendering text. @param charProc PDType3CharProc object @param textRenderingMatrix transformation matrix for text
3602 Updates annotation mask based on appearance stream. @param annotation PDAnnotation object @param appearance PDAppearanceStream object
3603 Applies a tiling pattern with specified color and matrix. @param tilingPattern the PD Tiling Pattern to apply @param color the fill color @param colorSpace the color space (optional) @param patternMatrix the transformation matrix for the pattern
3604 Saves and restores graphics state while processing page contents. @param contentStream PDContentStream object containing page data
3605 Updates outline node's position and size based on the given delta. @param delta positional adjustment value
3606 Creates a PDField instance with a function mask. @param form PDAcroForm object @param field COSDictionary representing the field @param parent PDNonTerminalField parent field
3607 Initializes a new instance of the PDFPrintable class with specified settings. @param document PDDocument object to print from @param scaling Scaling factor for the printed output @param showPageBorder Flag to include page borders in the printout @param dpi Resolution (dots per inch) of the printed output @param center Flag to center the content horizontally and/or vertically
3608 Encrypts and loads a PDF document using a custom encryption algorithm. @param input PDF data to encrypt @param password encryption password @param keyStore keystore containing encryption keys @param alias specific key alias for decryption
3609 Loads PDDocument from file with optional encryption and streaming. @param file input PDF file @param password decryption password or null for none @param keyStore keystore containing certificate for encryption @param alias alias of certificate to use for encryption @param streamCacheCreateFunction function to create cache for streaming @return PDDocument object or throws IOException if loading fails
3610 Loads PDDocument from RandomAccessRead. @param randomAccessRead input stream to read PDF data
3611 Wraps and calls loader's m1 method with empty parameters.
3612 Decrypts and loads PDDocument from encrypted data. @param randomAccessRead encrypted data stream @param password decryption key
3613 Decrypts and loads a PDF document using provided credentials. @param randomAccessRead Random access read object @param password decryption password @param keyStore InputStream containing encryption keys @param alias key alias for decryption
3614 Wraps Loader.m1 call with provided stream cache creation function. @param randomAccessRead input data source @param password encryption key @param streamCacheCreateFunction factory for cached streams
3615 Applies masking to file contents. @param file input file to process
3616 Processes input stream using random access read buffer. @param is input stream to process
3617 Applies a font mask to the document resources and logs potential issues. @param font PDFont object @param fontSize float value of the font size
3618 Sets the current font and size, handling font stacks and type0 fonts with GSUB. @param font the PDFont to set @param fontSize the new font size
3619 Applies font mask and sets font size. @param font PDFont object @param fontSize float font size value
3620 Applies font and size settings to the PDF document. @param font target font @param fontSize desired text size
3621 Processes a color object, generating commands for stroking colors. @param color the PDColor object to process
3622 Processes a PDColor object and generates mask operations. @param color the PDColor object to process
3623 Sets graphics state parameters.
3624 Updates graphics mask parameters. @param state PDExtendedGraphicsState object containing current graphics settings
3625 Sets graphics state parameters. @param state PDExtendedGraphicsState object
3626 Applies graphics state mask to extended graphics state. @param state PDExtendedGraphicsState object
3627 Applies a fill mask to the given PDShading object. @param shading PDShading object to be masked
3628 Applies a mask to the specified PDShading object. @param shading PDShading object to be masked
3629 Applies function mask for the given PDShading object. @param shading PDShading object to apply mask to
3630 Applies a fill mask to the given PDShading object. @param shading PDShading object to process
3631 Adds a mask to the PDF content stream. @param tag COSName representing the object being masked @param propertyList PDPropertyList containing relevant metadata
3632 Adds a mask annotation to the PDF document. @param tag COSName of the annotation @param propertyList PDPropertyList containing annotation properties
3633 Applies mask to specified PDF resource. @param tag COSName representing the resource @param propertyList PDPropertyList containing resource properties
3634 Processes a PDF property list, applying mask functionality. @param tag COSName object @param propertyList PDPropertyList object
3635 Sets mask properties using the provided COSName and PDPropertyList. @param tag COSName object @param propertyList PDPropertyList containing mask properties
3636 Applies mask to a COSName object and its properties. @param tag COSName object to be masked @throws IOException if an I/O error occurs
3637 Updates mask properties in the specified COSName and PropertyList. @param tag COSName object to update @param propertyList PDPropertyList containing mask properties
3638 Applies mask operations to a COSName and PDPropertyList. @param tag COSName object @param propertyList PDPropertyList object
3639 Applies a mask to the specified image within the given bounds. @param image PDImageXObject instance @param x left edge of the bounding box @param y top edge of the bounding box @param width and height dimensions of the bounding box
3640 Draws a masked image object onto the page. @param image PDImageXObject to draw @param x top-left X coordinate of drawing area @param y top-left Y coordinate of drawing area @param width and height of drawing area
3641 Draws a masked image on the canvas with specified dimensions and position. @param image PDImageXObject to draw @param x left coordinate of the drawing area @param y top coordinate of the drawing area @param width and height of the drawing area
3642 Draws a PDImageXObject with the specified dimensions at the given coordinates. @param image the image to draw @param x top-left X coordinate of the image @param y top-left Y coordinate of the image @param width image width @param height image height
3643 Applies image transformation and mask to the provided image object. @param image PDImageXObject to be transformed @param matrix AffineTransform object containing transformation parameters
3644 Applies a mask transformation to the image using the provided matrix. @param image PDImageXObject to be transformed @param matrix Matrix object defining the transformation
3645 Applies image mask using provided image and transformation matrix. @param image the PDImageXObject to apply @param matrix transformation matrix for masking
3646 Performs image transformation and drawing on the PDImageXObject. @param image input image to be transformed @param matrix transformation matrix
3647 Processes and draws a PDFormXObject, throwing an error if in text mode. @param form PDFormXObject object to process
3648 Processes and draws the given PDF form object, throwing an exception if in text mode.
3649 Processes the form object, throwing an exception if in text mode. @param form PDFormXObject to process
3650 Processes a PD Form XObject for drawing. @param form the PDFormXObject to process
3651 Updates PDDocument with user profile and permissions. @param document the document to update
3652 Applies mask operation to input string. @param value input string subject to masking
3653 Updates mask based on provided value. @param value input string to process
3654 Determines the type of operation to perform based on the source object. @param src object to operate on @param dstParent parent dictionary for operation @param currentPageDict current page dictionary context @return COSBase result of operation or original object if not applicable
3655 Retrieves the mask value from the given array. @return The mask value, or -1 if not found
3656 Copies optional content properties from source to target PDF document. @param srcDoc source PDF document
3657 Processes a subset of glyphs from the given TTF file. @param ttfSubset input glyph subset @param tag unknown parameter (purpose unclear) @param gidToCid mapping of old GIDs to new CIDs
3658 Retrieves a string representation of the function mask.
3659 Calls m1 with given document and default parameters. @param doc PDDocument object
3660 Writes PDF content to the specified OutputStream. @param output target output stream
3661 Writes PDF objects to OutputStream using COSWriter. @param output OutputStream to write to @param objectsToWrite Set of COS dictionaries to write
3662 Applies mask to specified PDF object, handling various types and nested structures. @param current the PDF object to process
3663 Retrieves a mask value from an input stream. @return String representation of the mask or an empty string on failure
3664 Merges and returns input streams.
3665 Returns a list of Patch objects based on the provided AffineTransform, Matrix, and control points. @param xform AffineTransform object @param matrix Matrix object @param controlPoints int representing the number of control points @return List<Patch> containing patch objects or an empty list if not found
3666 Resolves xref table for the given COS dictionary. @param xrefTable map of xref keys to values @return resolved COSDictionary object or null if failed
3667 Fetches a compressed object or references an existing one by key. @param objKey unique object identifier @param requireExistingNotCompressedObj whether to reference existing non-compressed object if available @return COSBase object representing the original object or null if not found
3668 Resolves cross-reference (XRef) stream in the given COSDocument. @param document COSDocument to process @param startXRefOffset starting offset of XRef stream @return resolved XRef trailer dictionary or null if not found
3669 Creates a PDCIDFont object based on the provided dictionary and parent font. @param dictionary COSDictionary containing font data @param parent PDType0Font parent font @return PDCIDFont object or throws IOException for invalid font types
3670 Filters PDF annotations based on the provided filter criteria. @param annotationFilter filter object to apply @return filtered list of PDAnnotations or empty if none match
3671 Retrieves a COSObjectable instance from the dictionary by its type. @return COSObjectable instance or null if not found
3672 Retrieves PDF annotation mask from dictionary. @return PDAnnotation object or null if not found
3673 Retrieves PDAnnotationMarkup instance from page's parent annotation. @return PDAnnotationMarkup object or null on error
3674 Recursively traverses the number tree map and clones its contents. @param cloner PDF cloning utility @param numberTreeAsMap Map of COSObjectables to clone @param objMapping Mapping of COSDictionaries for cloning
3675 Computes and applies a mask function to the given rectangle. @param rd PDRectangle object containing dimensions
3676 Creates PDAppearanceContentStream based on appearance entry and compression flag. @param compress whether to compress the content
3677 Creates a new PDPageContentStream for writing to the specified page. @param document PDDocument instance @param sourcePage PDPage to write contents to
3678 Initializes a new page content stream from the specified source page. @param document PDDocument instance (required) @param sourcePage PDPage instance to copy from (required)
3679 Initializes and configures graphics state for the given page. @param page non-null PDPage object to configure
3680 Returns the bleed box rectangle, or a default rectangle if not found.
3681 Returns trimmed box rectangle. @return PDRectangle object or null if not found
3682 Returns an ArtBox rectangle from the page dictionary or a default empty box if not found.
3683 Computes the function mask rectangle for a given page. @param page PDPage object containing page information
3684 Calls overloaded m3 method with additional parameters.
3685 Calls extended version of m3 with default parameters. @param inlineImage PDInlineImage object @param x horizontal offset @param y vertical offset
3686 Invokes internal processing for PDInlineImage at specified coordinates. @param inlineImage image data @param x horizontal coordinate @param y vertical coordinate
3687 Invokes internal PDInlineImage processing with custom coordinates. @param inlineImage PDInlineImage object to process @param x horizontal coordinate @param y vertical coordinate
3688 Initializes an FDFAnnotationCaret object from the provided Element. @param element PDF element to process
3689 Initializes a circle FDF annotation from the given Element. @param element PDF object containing annotation data
3690 Initializes an FDF annotation file attachment with the given XML element. @param element XML element containing attachment details
3691 Creates an FDFAnnotationFreeText object from the given XML Element. @param element XML representation of the free text annotation
3692 Parses ink list from XML element, extracting gesture values. @param element input XML element
3693 Creates an FDFAnnotationLine object from an Element. @param element XML node containing annotation line data
3694 Initializes FDFAnnotationLink from an Element. @param element input XML element
3695 Initializes FDFAnnotationPolygon from given Element. @param element XML element containing polygon data
3696 Initializes an FDFAnnotationPolyline object from a given Element. @param element the input Element to process
3697 Creates an instance of FDFAnnotationSound from an Element. @param element XML element containing sound annotation details
3698 Initializes a FDFAnnotationSquare object from an Element. @param element input XML element
3699 Initializes a FDFAnnotationStamp object from an XFDF Element. @param element XFDF Element containing stamp data
3700 Creates a FDFAnnotationText object from the given PDF Element. @param element the PDF Element to parse
3701 Parses FDF annotation text markup from an XML element. @param element XML element containing 'coords' attribute
3702 Applies mask to page number. @param pageNumber integer value of page being masked
3703 Applies mask to PDPage. @param page The page to be masked
3704 Creates a new PDPage with the same content as the input page, applying mask functionality. @param page input page to be masked @return the newly created masked page
3705 Applies mask to PDPage and saves modified structure. @param page input PDF page
3706 Creates an image XObject from a given byte array and PDDocument. @param document PDDocument object @param byteArray byte array containing the image data
3707 Creates a PDImageXObject from a file. @param document PDDocument object @param file input image file
3708 Applies mask operation on given string value. @param value input string to be masked
3709 Masks and sorts list of string values based on corresponding options. @param values list of values to be processed @param options list of options for masking and sorting
3710 Initializes page mask settings from the first page of the PDF document. @param document PD Document object @param page Page number to use (must be at least 1)
3711 Retrieves a PDF page based on the document's destination. @param doc PDDocument object @return PDPage object or null if not found
3712 Initializes a new instance of PDFPageable from a PDDocument.
3713 Constructs a new PDFPageable instance from a PDDocument with specified orientation. @param document the underlying PDDocument @param orientation page orientation (e.g. Portrait, Landscape)
3714 Constructs a new PDFPageable instance with default zoom and page number. @param document PDDocument instance @param orientation Orientation to display pages in @param showPageBorder whether to display border around pages
3715 Constructs a new PDFPageable instance with default zoom. @param document PDDocument to render pages from @param orientation page layout orientation @param showPageBorder flag to display page borders @param dpi dots per inch for rendering
3716 Creates a map of labels to page indices.
3717 Retrieves and populates an array of page labels based on document metadata. @return Array of page labels or null if not populated
3718 Updates mask based on changes in COSBase objects. @param oldBase previous COSBase instance @param newBase updated COSBase instance
3719 Updates the text rendering matrix for a given character. @param textRenderingMatrix current text rendering matrix @param font PDFont object @param code Unicode code point of the character @param displacement Vector representing character position and size
3720 Calculates and formats text into lines based on given width. @param font PDFont object @param fontSize float representing font size @param width float representing maximum line width @return List<Line> containing formatted text lines
3721 Returns functional mask value if m1 is not null. @return Boolean value or null if m1 is null
3722 Generates font mask string based on PDFontDescriptor. @param fontDescriptor input descriptor @return font mask string (e.g. "Courier-Bold") or default ("Times-Roman")
3723 Creates a PDFontDescriptor for the given Type1 font. @param type1 Type1Font object to process @return PDFontDescriptor instance or null on failure
3724 Creates a PDFontDescriptor with specified metrics and flags. @param metrics FontMetrics object containing font data
3725 Creates a PDFontDescriptor from the given TrueTypeFont. @param ttf the font to process @return PDFontDescriptor object or null if an error occurs
3726 Creates a Paint object based on the provided color. @param color PDColor to process @return Paint object or null if not applicable
3727 Masks the specified transparency group with default values. @param form PDTransparencyGroup object to mask
3728 Applies transparency group mask to the graphics context. @param group TransparencyGroup object
3729 Processes a single character in the PDF page content. @param textRenderingMatrix matrix for rendering characters @param font font to use for character processing @param code unique character identifier @param displacement vector representing character position
3730 Processes annotation mask data. @param annotation PDAnnotation object
3731 Calls nested method m1() and passes result as additional argument.
3732 Process form x-object and apply mask if necessary. @param form the PDFormXObject to process
3733 Retrieves the list of PDF fields from the dictionary. @return List of PDField objects
3734 Recursively fetches a nested PDField by name and index. @param name array of field names @param nameIndex current field name index @return PDField object or null if not found
3735 Retrieves child fields from the PDF structure. @return list of PDField objects
3736 Initializes a new instance of PDFPrintable with default print settings. @param document the PDDocument to be printed @param scaling the scaling factor for printing @param showPageBorder whether to display page borders during printing @param dpi the dots per inch resolution
3737 Decrypts and loads PDF document using given password. @param input encrypted PDF data @param password decryption key @throws IOException if loading fails
3738 Loads PDDocument from specified file using provided stream cache creation function. @param file input PDF file @param streamCacheCreateFunction function to create stream cache
3739 Loads PDDocument from file with optional password protection. @param file input file @param password encryption key (null for no protection)
3740 Wraps Loader.m1 to create a PDDocument from the specified file and password. @param file PDF file to load @param password optional password for encrypted files @param streamCacheCreateFunction callback function for creating stream caches
3741 Loads encrypted PDF document using a custom keystore. @param file input PDF file @param password decryption password for the PDF @param keyStore custom keystore containing encryption keys @param alias keystore alias for decryption key
3742 Recursively processes visible signature properties. @param visSignatureProperties PDVisibleSigProperties object
3743 Converts Color object to PDF color and invokes recursive method. @param color the input color to convert
3744 Writes a color mask operation to the output stream. @param color PDColor object containing color data
3745 Processes a color object, potentially updating the stroking color space and adding color values. @param color PDColor object to process
3746 Writes a color mask to the output stream. @param color color object containing color data
3747 Processes a PDF color object, potentially updating stroking color space and adding color values or pattern data. @param color PDColor object to process
3748 Converts Color object to PDF color and processes it.
3749 Processes a PDF color and generates mask commands. @param color PDColor object to process
3750 Processes a color object, generating PDF operators as needed. @param color PDColor object to process
3751 Processes color mask operation for the given color. @param color PDColor object to process
3752 Processes a color object, emitting PDF operators as needed. @param color PDColor object to process
3753 Creates a PDF FormXObject from a source page, applying transformations and filtering. @param sourceDoc the source PDDocument @param page the source PDPage @return the resulting PDFormXObject
3754 Recursively processes COSDocument and its nested PDFs. @param doc the root document to process
3755 Saves the document to the specified output stream with optional compression. @param output OutputStream to write to @param compressParameters Compress parameters (null for no compression)
3756 Initializes compression pool for the given PDDocument and parameters. @param document PDDocument to compress @param parameters CompressParameters or null for default settings
3757 Extracts and formats content from a COSBase object. @param base input COSBase object
3758 Retrieves a mask object based on the field's value. @throws IOException if an unknown field type is encountered
3759 Retrieves the function mask value as a string. @return Function mask string or null if not found
3760 Retrieves the function mask from the dictionary. @return function mask as a string or null on failure
3761 Retrieves the function mask as a string or stream. @return Function mask as a string, stream, or null if not found
3762 Retrieves a string value from the JavaScript object. @return string representation or null on failure
3763 Retrieves the function mask value from the document. @return Function mask string or null if not found
3764 Returns a mask value from the given COSBase object. @param base COSBase instance to fetch mask from
3765 Creates a LayoutPage object from the given PDF page. @param page the input PDF page @return LayoutPage object or null on IOException
3766 Reads and returns the function mask data from an input stream. @throws IOException if reading fails
3767 Initializes and returns a pre-computed 2D array for function evaluation. @return 2D array containing function values or null if initialization failed
3768 Initializes color profile from stream and sets up AWT color space. @throws IOException if initialization fails
3769 Initializes PatchMeshesShadingContext with provided parameters. @param shading PDMeshBasedShadingType to use @param colorModel Color model for rendering @param xform AffineTransform for mesh transformation @param matrix Matrix for mesh transformation @param deviceBounds Device bounds for pixel table creation @param controlPoints Number of control points for patching
3770 Initializes a Type4ShadingContext with provided shading data. @param shading PDShadingType4 object @param cm ColorModel @param xform AffineTransform @param matrix Matrix @param deviceBounds Rectangle representing device bounds
3771 Creates a Type 5 shading context. @param shading PDShadingType5 object @param cm ColorModel @param xform AffineTransform @param matrix Matrix @param deviceBounds bounding box of the device
3772 Reconstructs the COSDictionary trailer, optionally rebuilding it if necessary. @return reconstructed COSDictionary object or null on failure
3773 Overridden method to handle PDFormXObject; skips processing if m2() returns true, otherwise calls superclass's implementation and restores line path.
3774 Updates the hidden OCG count based on the given tag and properties. @param tag COSName of the element to check @param properties COSDictionary containing additional data
3775 Retrieves all PDAnnotations.
3776 Returns a PDAppearanceContentStream instance with default settings.
3777 Creates an optional content group for the given page and form. @param targetPage page to associate with the group @param form form to include in the group @param transform transformation to apply to the form @param layerName unique name for the group @return created PDOptionalContentGroup instance
3778 Processes a PDPage, applying masks and setting processing flag. @param page PDPage object to process
3779 Resets the current page and flushes content stream. @param contentStream PDContentStream to process @param page PDPage object
3780 Calculates the page format for a given page index. @param pageIndex unique page identifier @return PageFormat object describing the page's dimensions and orientation
3781 Initializes an FDF annotation highlight object from an Element. @param element input Element to initialize with
3782 Initializes a new instance of FDFAnnotationSquiggly with the given Element. @param element PDF element to associate with this annotation.
3783 Initializes an FDF annotation strikeout object from the given PDF element. @param element the underlying PDF element to process.
3784 Initializes an underline annotation with subtype. @param element PDF element to annotate
3785 Validates and applies mask to list of values. @param values List of strings to validate
3786 Initializes PDVisibleSignDesigner with document and image stream. @param document PDDocument instance @param imageStream input stream containing the image data @param page page number to process
3787 Initializes a new PDVisibleSignDesigner instance with given document and image. @param document PDDocument instance @param image BufferedImage to be used for design @param page index of the page in the document
3788 Renders text content with masking functionality. @throws IOException if rendering fails
3789 Calculates minimum font size based on content rectangle and font properties. @param font PDFont object @param contentRect PDRectangle containing text content @return minimum required font size or original font size (if not applicable)
3790 Initializes encoding based on PDF dictionary. @throws IOException if an error occurs
3791 Determines the mask for a font based on its properties and encoding. @return Boolean value indicating whether to apply the mask or not
3792 Resolves TrueTypeFont for given baseFont or PDFontDescriptor. @param baseFont base font identifier @param fontDescriptor PDFontDescriptor object @return FontMapping with resolved TrueTypeFont or last resort font
3793 Resolves font mapping by base font and PDFontDescriptor. @param baseFont base font name @param fontDescriptor PDFontDescriptor object @return FontMapping object or null if not resolved
3794 Embeds a Type1 font into the PDF document. @param doc the PDF document @param dict the COS dictionary for the font @param pfbStream the input stream of the PFB file @param encoding the font encoding (optional)
3795 Initializes a PDFont object with the specified base font. @param baseFont name of the font to use
3796 Embeds TrueType font into PDF document. @param document the PDF document to embed into @param dict COSDictionary for font descriptor @param ttf TrueTypeFont object to embed @param embedSubset whether to embed subset or full font
3797 Dispatches mask operation based on font type. @param textRenderingMatrix transformation matrix @param font PDFont object @param code glyph code point @param displacement vector offset
3798 Conditionally calls m2() based on the result of m1(). @see m1() @see m2()
3799 Executes task m2 if condition m1 is true.
3800 Creates FDFDocument with populated catalog and fields. @return fully populated FDFDocument object
3801 Combines results of m1 and m2.m3 using logical AND operator.
3802 Initializes PDFPrintable with basic settings. @param document PDDocument to print @param scaling Scaling factor for printing @param showPageBorder flag to display page borders
3803 Loads PDF document from byte array. @param input byte array representing PDF data
3804 Loads a PDDocument from a file with optional encryption. @param file input PDF file @param password encryption key (may be null) @return PDDocument object or null on failure
3805 Loads PDDocument from specified file using custom loader. @param file input file to load
3806 Converts a Color object to a PDF color and processes it. @param color input Color object
3807 Converts a Color object to a PDF color and processes it. @param color Color object to convert
3808 Converts a Color object to a PDF color and calls the overloaded method.
3809 Converts Color object to PDF color and recursively processes it. @param color input color to convert
3810 Converts Color object to PDF-compatible color and delegates processing. @param color Color object to convert
3811 Converts Color object to PDF color and calls self. @param color the Color object to convert
3812 Converts Color object to PDF color and calls self recursively. @param color Color object to convert
3813 Converts Color object to PDF color and passes it to another method. @param color Color object to convert
3814 Applies mask to PDAnnotationWidget based on appearance characteristics. @param widget annotation widget @param appearanceCharacteristics appearance dictionary @param appearanceStream appearance stream
3815 Applies font mask to appearance content stream. @param contents PDAppearanceContentStream instance @param zeroFontSize fallback font size when m1() returns 0.0f
3816 Extracts form XObject from specified PDDocument and page number. @param sourceDoc input PDF document @param pageNumber page index (0-based) @return extracted PDFormXObject or null if not found
3817 Writes compressed data to the specified output stream using default compression parameters. @param output target output stream
3818 Overwrites an existing file with compressed data. @param file File object @param compressParameters Compress parameters
3819 Processes trailer dictionary and encrypt section of COSDocument. @param document input COSDocument
3820 Returns the function mask for the given COS name. @return string representation of the function mask
3821 Writes a single field to the output stream. @param output Writer instance
3822 Generates a mask string using COSName constants. @return generated mask string
3823 Applies mask to PDDocument and returns resulting LayoutPage. @param doc input PDF document
3824 Parses COS stream into PDFunctionType4 object. @param functionStream COSBase object containing the stream to parse
3825 Recursively generates a float array by interpolating between input values. @param coord current coordinate index @param step current step index @return interpolated float array
3826 Initializes a PDICCBased object from an ICC color profile COS array. @param iccArray ICC color profile data
3827 Constructs a Type6 Shading Context from the given parameters. @param shading PDShadingType6 object @param colorModel ColorModel instance @param xform AffineTransform for coordinate transformation @param matrix Matrix for scaling and rotation @param deviceBounds Rectangle representing device bounds
3828 Initializes Type7 Shading Context with specified parameters. @param shading PDShadingType7 object @param colorModel Color model for rendering @param xform Affine transform for coordinate mapping @param matrix Matrix for geometric transformations @param deviceBounds Device bounds for rendering
3829 Retrieves the mask data based on the underlying data type. @return a byte array containing the mask data or an empty array if not found
3830 Updates annotation parent offsets in the given page. @param page PDPage object to modify @param structParentOffset offset value to add to parent IDs
3831 Merges structure tree and page trees from source document into the given destination document. @param destinationDocument the target PDDocument
3832 Clones and updates annotations on the given page. @param imported PDPage object to update
3833 Builds a map of COS dictionaries to sets of corresponding widget dictionaries. @param fields list of PD fields @param pages list of PD pages @return map of page annotations or empty if missing page references found
3834 Initializes page properties and translation matrix from the provided PDPage. @param page PDPage object containing page dimensions
3835 Parses FDF XML element and populates the FDFDictionary object.
3836 Applies FDF import mask to specified FDFField. @param fdfField FDFField object containing import data
3837 Initializes PDVisibleSignDesigner with document source and image stream. @param documentSource RandomAccessRead to document data @param imageStream InputStream containing visible signature image @param page current page number
3838 Initializes the PDVisibleSignDesigner with a document source, image, and page number. @param documentSource RandomAccessRead to calculate page size from @param image BufferedImage for visible signature image @param page int representing the current page number
3839 Determines whether the mask is symbolic or not. @return True if symbolic, false otherwise
3840 Initializes a Type 1 font from an embedded PFB stream. @param doc the parent PDDocument @param pfbIn input stream containing the font data @param encoding optional character encoding for the font
3841 Initializes simple font with specified base font. @param baseFont base font to build upon
3842 Initializes a PDFont object from the given COSDictionary. @param fontDictionary dictionary containing font metadata
3843 Creates a PDCIDFontType2Embedder instance, setting up the CID font and its descriptor. @param document target PDF document @param dict COS dictionary for this font @param ttf TrueType font to embed @param embedSubset whether to embed subset or not @param parent Type 0 font that contains this CID font @param vertical whether the font is vertical or not
3844 Embeds a TrueType font into the given PDDocument. @param document target PDF document @param dict COS dictionary to store font metadata @param ttf TrueType font object @param encoding font encoding scheme
3845 Checks if PDAcroForm has valid mask functionality. @param acroForm PDAcroForm object to check @return true if mask is enabled, false otherwise
3846 Creates a PDF printable object from a PDDocument and scaling settings. @param document the underlying PDDocument @param scaling the scaling factor to apply
3847 Loads and returns a PDDocument instance from a file. @param file input PDF file to load @return loaded PDDocument object or null on failure
3848 Creates and writes a mask for the given PDAnnotationWidget to the specified OutputStream. @param widget the annotation widget @param appearanceStream the appearance stream @param output the output stream
3849 Generates PDF mask with signature field and returns it as an input stream. @param properties PDVisibleSignDesigner object containing design parameters
3850 Writes data to the specified file using default compression parameters. @param file target file
3851 Wraps file-based call to m1 with a String parameter. @param fileName path to the file @param compressParameters compression settings
3852 Outputs PDF metadata and field specifications to the given Writer. @param output target output stream
3853 Converts a COSBase to a PDF Function object based on its type. @param function COSBase representation of the function @return PDFunction object or throws IOException if invalid
3854 Creates float array mask using input values and initial value. @return float array of size numberOfInputValues
3855 Creates a PDICCBased mask from the given COSArray and resources. @param iccArray ICC color profile array @param resources PDF resources @return PDICCBased mask or null if not created
3856 Creates PDImageXObject for the given image using predictor encoder if possible. @param document PDDocument context @param image BufferedImage to encode @return PDImageXObject or null if creation fails
3857 Extracts and processes image mask data. @param softMask image object containing mask information
3858 Convenience wrapper to perform operation m3 with default parameters. @param image input image object @param x and y coordinates for operation
3859 Converts internal data to PDF document using XMLUtil. @return Document object or null on failure
3860 Applies mask to the graphics context, scaling and clipping based on page size. @param pageSize PDRectangle representing page dimensions
3861 Processes a PDPage for masking, importing resources and removing /B entries. @param page the input PDPage to process
3862 Initializes page transform based on provided PDPage object. @param page PDPage object containing page dimensions and rotation
3863 Processes a PDPage based on current page and bookmark ranges. @param page the input PDF page
3864 Constructs an FDFCatalog instance from an XML Element. @param element XML Element containing catalog data
3865 Creates a new PDType1Font instance from a PFB stream. @param doc the parent document @param pfbIn input stream containing font data
3866 Initializes a Type 1 font from the specified base font. @param baseFont the font to create a Type 1 representation of
3867 Initializes a simple font with the given dictionary. @param fontDictionary COS dictionary containing font data
3868 Initializes PDType0Font from a COSDictionary object. @param fontDictionary input dictionary containing font data
3869 Initializes a PDType0 font from a TrueType font, optionally embedding or closing it. @param document parent PDDocument object @param ttf TrueType font to initialize from @param embedSubset whether to embed the subset of the TTF @param closeTTF whether to close the underlying data source after initialization @param vertical whether to enable vertical substitutions in the font
3870 Initializes a PDTrueTypeFont object from a TrueType font, embedding it into a PDDocument. @param document PDDocument instance @param ttf TrueTypeFont object @param encoding Encoding scheme @param closeTTF whether to close the TTF resource after initialization
3871 Returns an iterator over fields in the acroForm.
3872 Constructs a PDF printable object from a PDDocument instance. @param document PDDocument instance to wrap
3873 Initializes a PDVisibleSignDesigner with image data from file and stream. @param filename path to PDF file @param imageStream input stream containing visible sign image @param page page number for which to set signature image
3874 Initializes a Visible Sign Designer with an image from file. @param filename path to the image file @param image image data to display @param page page number for calculation purposes
3875 Builds PDF template by executing a series of operations.
3876 Wraps file-based operation by delegating to overloaded version with File parameter. @param fileName name of file to process
3877 Serializes FDF dictionary to writer. @param output Writer instance
3878 Evaluates a type-3 PDFunction for the given input and returns the result. @param input single input value @return array containing the evaluated function result or throws IOException if not found
3879 Initializes a PDDeviceN object from the provided COS array and resources. @param deviceN COS array containing device N attributes @param resources PDResources object for color conversion cache initialization
3880 Returns the tint transform function.
3881 Initializes PDSeparation object from COSArray and resources. @param separation COSArray containing color space and tint transform @param resources PDResources for creating color spaces and functions
3882 Retrieves the function object from the PDF document. @return The function object or null if not initialized
3883 Initializes and returns the array of functions. @return Array of PDFunction objects
3884 Returns the transfer function, loading it from COS if not already initialized. @throws IOException if there's an issue reading the COS data
3885 Initializes a PDIndexed color space object from an indexed array and resources. @param indexedArray COSArray containing the index map @param resources PDResources for the color space
3886 Performs input data processing and interpolation. @param input float array to process @return processed float array or throws IOException on error
3887 Creates a PDImageXObject from the given document and PNGConverterState. @param document PDDocument object @param state PNGConverterState object containing image metadata @return PDImageXObject or null if creation fails
3888 Creates a PDImageXObject from the specified file and document. @param file input image file @param doc PDDocument object @return PDImageXObject or null if creation fails
3889 Creates a PDImageXObject from the specified file for the given PDDocument. @param file input image file @param doc target PDDocument @return created PDImageXObject or null if unsupported @throws IOException on file access errors
3890 Generates a masked image for the specified region and subsampling level. @param region rectangle defining the image area @param subsampling subsampling factor (0-3)
3891 Invokes an internal processing routine on the provided image.
3892 Invokes private methods 1 and 2 on the PDImageXObject with specified coordinates. @param image PDImageXObject instance @param x x-coordinate @param y y-coordinate
3893 Calls m3 with default parameters. @param image PDImageXObject instance @param x X-coordinate @param y Y-coordinate
3894 Invokes variant of m3 with additional parameters. @param image PDImageXObject to process @param x horizontal coordinate @param y vertical coordinate
3895 Draws a PDF page into an image. @param pageIndex unique page identifier @param scale scaling factor for the image @param imageType desired image type (e.g. ARGB, RGB) @param destination rendering destination (e.g. screen, printer) @return BufferedImage object containing the drawn page
3896 Draws a PDF page at the specified index with graphics and scaling. @param pageIndex unique page identifier @param graphics Graphics2D context for drawing @param scaleX horizontal scale factor @param scaleY vertical scale factor @param destination RenderDestination to draw on
3897 Iterates over pages in a document, applying mask to relevant pages. @throws IOException on input/output error
3898 Updates bookmark information and processes pages in the PDF document. @param pages PDPageTree object containing all pages
3899 Imports an XFDF document into an FDFDocument. @param doc XFDF document to import
3900 Returns the default font used for masking functionality. If not initialized, initializes Helvetica as the default font.
3901 Returns the FontBox font for a given base name, synchronizing access to generic fonts as needed. @param baseName the base name of the font @return FontBoxFont object or null if not found
3902 Creates a TrueType font object from the provided COS dictionary. @param fontDictionary COS dictionary containing font metadata
3903 Initializes a PDType1CFont object from a COSDictionary. @param fontDictionary the COSDictionary containing font data
3904 Parses a Type1 font from the provided COSDictionary. @param fontDictionary COS dictionary containing font information
3905 Initializes a PDF Type 3 font from a COS dictionary and cache. @param fontDictionary COS dictionary containing font metadata @param resourceCache Resource cache for font resources
3906 Creates a PDType0Font object from the given PDDocument and font data. @param doc PDDocument instance @param randomAccessRead RandomAccessRead to font data @param embedSubset whether to embed subset fonts @param vertical whether to create a vertical font
3907 Creates a PDF Type 0 font from the given TTF font. @param doc PDDocument instance @param ttf TrueTypeFont object to convert @param embedSubset whether to embed subset of font in PDF
3908 Creates a PDF Type 0 font from the given TTF font and PDDocument. @param doc PDDocument instance @param ttf TrueTypeFont to convert @param embedSubset whether to embed subset of font in PDF
3909 Creates a PDTrueTypeFont object from given parameters. @param doc PDDocument instance @param ttf TrueType font to use @return PDTrueTypeFont object
3910 Creates a PDTrueTypeFont object from the given PDDocument, RandomAccessReader and Encoding.
3911 Retrieves a list of signature fields from the PDF document. @return List of PDSignatureField objects
3912 Applies mask to terminal fields.
3913 Returns an iterator over filtered PDF fields.
3914 Initializes or clears the field cache. @param cache true to populate, false to clear
3915 Retrieves a PDField instance by fully qualified name from cache or data source. @param fullyQualifiedName unique identifier for the PDField @return PDField object or null if not found in cache or data source
3916 Creates a PDDocument with masked pages based on the provided overlay map. @param specificPageOverlayMap Map of page IDs to overlay paths @return Modified PDDocument object
3917 Applies overlays from the provided map to the input PDF document. @param specificPageOverlayDocumentMap map of overlay documents keyed by page number @return modified PDDocument object or null on failure
3918 Generates an XFDF XML document and writes it to the specified Writer. @param output target Writer for writing the XML content
3919 Resolves the specified color space. @param colorSpace COSBase representation of the color space @param resources PDResources object for accessing default colorspace @param wasDefault whether the current colorspace is the default @return a PDColorSpace object or throws an exception if not found
3920 Applies a series of functions to input data and returns the results, clamping values between 0 and 1. @param input input data array @return float[] array of function outputs
3921 Initializes a new instance of PDIndexed from a COS array. @param indexedArray COS array containing index data
3922 Creates a PDImageXObject from an image file and adds it to a PDF document. @param imagePath path to the image file @param doc the target PDF document @return the created PDImageXObject or null on failure
3923 Generates default image with specified level.
3924 Generates a BufferedImage based on page index, scale, and image type. @param pageIndex the current page number @param scale the scaling factor for the image @param imageType the type of the generated image
3925 Renders page content at specified index using provided graphics context and scale factors. @param pageIndex index of the page to render @param graphics Graphics2D context for rendering @param scaleX horizontal scaling factor @param scaleY vertical scaling factor
3926 Processes a PDF document and generates masked documents. @param document the input PDF document @return list of processed PDDocuments
3927 Processes a PDDocument for output, updating formatting settings and invoking related methods. @param doc the input document @param outputStream writer stream for output
3928 Creates an FDFDocument instance from the given InputStream. @param input input stream containing XML data
3929 Renders a string of bytes into graphics state. @param string input byte array to render
3930 Fetches the glyphs for a given font and glyph name. @param baseName FontName of the target font @param glyphName Name of the glyph to fetch @return A GeneralPath object representing the glyph, or null if not found
3931 Initializes a PDMMType1Font object from a COS dictionary.
3932 Initializes a new instance of a Type 3 font from a COS dictionary. @param fontDictionary dictionary containing font information
3933 Loads font from a specified file into the given document. @param doc target PDDocument instance @param file font file to load
3934 Creates a Type 0 font from an input stream. @param doc the document to associate with the font @param input input stream containing font data @param embedSubset whether to embed and subset the font
3935 Extracts font from PDDocument and writes it to file. @param doc PDDocument object @param file target file for font extraction @return extracted PDType0Font or null if failed
3936 Creates a PDDocument font from an InputStream. @param doc the parent document @param input the font data stream @return PDType0Font object or null on error
3937 Creates a font by reading from an input stream. @param doc the document @param input input stream containing font data @param embedSubset whether to embed subset in PDF
3938 Wraps PDDocument with buffered file stream. @param doc target document @param file file to read from @param encoding font encoding @return PDTrueTypeFont object
3939 Wraps an InputStream as a RandomAccessReadBuffer. @param input the InputStream to wrap @return PDTrueTypeFont object or null if failed
3940 Retrieves a list of PDF signature objects from the input document. @return List of PDSignature objects or empty list if no signatures found
3941 Adds a digital signature to the PDDocument. @param sigObject Signature object @param signatureInterface Interface for signing @param options Options for signature (e.g. size)
3942 Updates PDF document fields from FDF fields. @param fdf FDFDocument instance
3943 Flushes mask data to the specified writer. @param output Writer stream for output
3944 Returns an array of floats containing the result of processing the input value. @param inputValue single float value to process
3945 Computes function mask based on input array. @param values float array to process @return int result of computation or throws IOException if error occurs
3946 Returns a paint object representing the function mask.
3947 Draws transparency group and soft mask onto the graphics context. @param form PDTransparencyGroup to render @param graphics Graphics2D context for drawing
3948 Generates a BufferedImage for the given page index and scale. @param pageIndex unique page identifier @param scale image scaling factor
3949 Generates a mask image based on page index and DPI. @param pageIndex unique page identifier @param dpi device resolution in dots per inch
3950 Generates a BufferedImage mask based on page index and DPI. @param pageIndex unique page identifier @param dpi dots per inch (scaled to 72 for calculation) @param imageType type of the generated image
3951 Convenience constructor to call overloaded variant with equal width and height scales. @param pageIndex current page index @param graphics Graphics context for rendering @param scale scaling factor (width equals this value)
3952 Creates a PDDocument with masked pages. @return PDDocument object
3953 Converts PDDocument to a string representation. @param doc input PDF document
3954 Loads FDF document from file. @param filename path to the FDF file @return FDFDocument object or null on failure
3955 Loads FDFDocument from specified file. @param file input file containing FDFDocument data
3956 Applies function mask to input byte array. @param string input data to be processed
3957 Processes COSArray of font-related data, applying TJ transformation. @param array input COSArray to process
3958 Creates a PDFont object based on the provided COSDictionary and ResourceCache. @param dictionary COSDictionary containing font metadata @param resourceCache ResourceCache for font resources @return PDFont object or throws IOException if invalid font type
3959 Creates a type 0 font from an InputStream. @param doc parent PDDocument @param input stream containing font data
3960 Retrieves a PDSignature from the list of dictionaries. @return PDSignature object or null if empty
3961 Creates external signing support with specified output stream. @param output OutputStream to write signature data @return ExternalSigningSupport instance or null on error
3962 Updates field masks in the PDF document, handling XFA forms and refresh appearances. @param fields list of PDField objects to process @param refreshAppearances whether to update visual field appearances
3963 Wraps calling m1 with default signature options. @param sigObject PDSignature object @param options SignatureOptions (null for defaults)
3964 Configures and executes PDSignature operation. @param sigObject PDSignature object to operate on @param signatureInterface interface for configuration options
3965 Writes data to file using BufferedWriter. @param fileName name of the output file
3966 Applies font-specific mask to a GeneralPath, transforming and rendering it. @param path the path to transform @param font the PDFont to apply font-specific rules from
3967 Converts indexed image to PDImageXObject. @param doc PDDocument object @param state PNGConverterState object @return PDImageXObject object or null on error
3968 Returns a BufferedImage for the specified page index. @param pageIndex unique page identifier @return BufferedImage object or null if not found
3969 Draws page content on the specified graphics context. @param pageIndex current page index @param graphics graphics context to draw on
3970 Retrieves a PDFont object from the cache or creates it from COSName reference. @param name COSName reference to the font
3971 Returns a PDFont object based on the provided COSDictionary. @param dictionary COSDictionary containing font metadata
3972 Processes PDFields and calls recursive flattening if necessary.
3973 Processes a PDSignature object using default signature options. @param sigObject PDSignature to process
3974 Wraps file-based operation by delegating to overloaded version with File object. @param fileName path to file in string form
3975 Processes and renders a list of shaded triangles. @param triangleList List of ShadedTriangle objects @param array 2D array for rendering data @param deviceBounds Device bounds rectangle
3976 Updates the line path with a new winding rule and recalculates its state. @param windingRule integer specifying the new winding rule
3977 Parses and validates the IHDR chunk of a PNG image. @param doc PDDocument object @param state PNGConverterState object to store parsed data @return PDImageXObject or null on parsing error
3978 Sets font for PDF document. @param operands list of COSBase objects containing font name and size
3979 Initializes and updates resources in the given PDAppearanceStream. @param appearanceStream PDAppearanceStream instance to modify
3980 Initializes a PDFont object from the default mask font setting. @return PDFont object or null if initialization fails
3981 Merges the source PDF into the destination PDF. @param destination the PDF to merge into @param source the PDF to merge from
3982 Converts image data to a PDImageXObject using the specified converter. @param doc PDDocument instance @param imageData byte array containing image data @return PDImageXObject object or null if conversion fails
3983 Executes operator-specific functionality based on the provided operator and operands. @param operator The operator to execute @param operands List of COSBase objects representing the operator's parameters
3984 Generates and writes PDF mask stream for a widget. @param widget PDAnnotationWidget instance @param appearanceStream PDAppearanceStream to process
3985 Applies graphics state settings from the dictionary to the PDGraphicsState. @param gs PDGraphicsState object to update
3986 Combines source PDF documents into a single document. @param streamCacheCreateFunction function to create a PDDocument @param compressParameters compression parameters for the output
3987 Creates a PDImageXObject from the given byte array and custom factory. @param document PDDocument object @param byteArray image data @param name file name @param customFactory optional custom factory for unsupported formats @return PDImageXObject or throws exception if not supported
3988 Parses PDF stream to extract COSBase objects. @param content byte array representing the PDF stream
3989 Routes stream cache creation based on document merge mode. @param streamCacheCreateFunction function to create stream cache @param compressParameters parameters for compression
3990 Creates a PDImageXObject from the given byte array. @param document PDDocument instance @param byteArray image data in bytes @param name name of the image object
3991 Initializes the PDF page's default appearance. @param defaultAppearance string value for /DA parameter @param defaultResources PDResources object for /DR parameter
3992 Creates a stream cache with default compression. @param streamCacheCreateFunction function to create stream cache
3993 Creates a default appearance string for PDF generation. @throws IOException if an error occurs during resources retrieval
3994 Processes field mask for the given PDF value. @param apValue PDF value to process
3995 Initializes AppearanceGeneratorHelper with a PDVariableText field. @param field the PDVariableText field to process
