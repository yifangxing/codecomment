1 Private constructor for OperatorName class.
2 Initializes an OperatorProcessor with a given PDFStreamEngine. @param context the PDF processing context
3 Constructs an empty COSBase instance.
4 Constructs a new COSUpdateState with the given update information. @param updateInfo the COSUpdateInfo object containing update details
5 Default constructor for DecodeOptions.
6 Initializes new DecodeOptions with specified source region. @param sourceRegion rectangle defining the area to decode
7 Initializes decode options with uniform subsampling. @param subsampling factor for both X and Y dimensions
8 Constructs a new Filter instance.
9 Initializes a PageExtractor with a document and page range. @param sourceDocument the PDF document to extract pages from @param startPage the starting page index (inclusive) @param endPage the ending page index (exclusive)
10 Initializes XrefParser with a COSParser. @param cosParser the COSParser instance to use
11 Initializes an XReference with a specified type. @param type the XReferenceType to be assigned
12 Initializes a new instance of ContentStreamWriter. @param out the OutputStream to write content to
13 Initializes cache creation with stable cache option. @param enableStableCache flag to enable or disable stable caching
14 Initializes a new PDDocumentCatalog. @param doc the PDDocument associated with this catalog @param rootDictionary the root dictionary of the catalog
15 Initializes document information with a dictionary. @param dic dictionary containing document metadata
16 Initializes a new PDDocumentNameDestinationDictionary with a given COSDictionary. @param dict the underlying COSDictionary to use
17 Initializes a new PDDocumentNameDictionary with a document catalog and a COS dictionary. @param cat the document catalog to associate with this dictionary @param names the COS dictionary containing the names entries
18 Constructs a new PDPage from a COSDictionary. @param pageDictionary dictionary containing page information
19 Initializes a new PDF page. @param pageDictionary dictionary representing the page @param resourceCache cache for resources used in the page
20 Initializes a new COSDictionaryMap with provided maps. @param actualsMap the actual values map @param dicMap the COS dictionary map
21 Initializes a new PDDictionaryWrapper with the given COSDictionary. @param dictionary the underlying COSDictionary to wrap
22 Initializes a PDNameTreeNode with a given dictionary. @param dict The COSDictionary to initialize the node with.
23 Initializes a PDNumberTreeNode with a dictionary and value class. @param dict the COSDictionary representing the node @param valueClass the class of values stored in the node
24 Initializes a PDPageLabelRange with a given dictionary. @param dict COSDictionary containing page label information
25 Constructs a PDRange from a COSArray. @param range array representing the range values
26 Initializes a PDRange with a given COSArray and index. @param range the COSArray containing range data @param index the starting index within the array
27 Initializes a new PDStream with the given COSStream. @param str the underlying COSStream object
28 Initializes PDMarkInfo with a COSDictionary. @param dic the COSDictionary to initialize with
29 Initializes a new instance with a COSDictionary. @param dictionary the COSDictionary to use
30 Initializes a PDObjectReference with a COSDictionary. @param theDictionary the underlying COSDictionary object
31 Initializes a PDStructureNode with a given COSDictionary. @param dictionary the underlying COSDictionary
32 Constructs a new instance of Revisions.
33 Initializes a new instance with the given COS dictionary. @param dict COSDictionary to initialize with
34 Initializes a PDBoxStyle with a given COSDictionary. @param dic COSDictionary representing the box style
35 Initializes an AccessPermission with default permissions.
36 Initializes an AccessPermission with specified permissions. @param permissions integer representing access permissions
37 Initializes a new instance with a given dictionary. @param d COSDictionary containing cryptographic filter settings
38 Initializes the RC4Cipher with a 256-element salt array.
39 Initializes an annotation with a given dictionary. @param a COSDictionary representing the annotation
40 Initializes FDFCatalog with a COSDictionary. @param cat COSDictionary representing the catalog
41 Initializes a new FDFDictionary with the given COSDictionary. @param fdfDictionary the underlying COS dictionary to use
42 Constructs an FDFField from a COSDictionary. @param f COSDictionary representing the field data
43 Constructs an FDFIconFit with a given COSDictionary. @param f dictionary representing icon fit settings
44 Constructs a new FDFJavaScript instance. @param javaScript COSDictionary containing JavaScript data
45 Constructs an FDFNamedPageReference with a COSDictionary. @param r COSDictionary representing the page reference
46 Constructs an FDFOptionElement with a given COSArray. @param o COSArray representing the option element
47 Initializes a new FDFPage with a given COSDictionary. @param p COSDictionary representing the page
48 Constructs a new FDFPageInfo with the given COSDictionary. @param p COSDictionary representing page information
49 Constructs an FDFTemplate with a given COSDictionary. @param t COSDictionary representing the template
50 Initializes a font descriptor with a given dictionary. @param desc COSDictionary containing font descriptor information
51 Initializes a new PDFontSetting with a COSArray. @param fs COSArray representing font settings
52 Initializes an empty line dash pattern. @param none @return none
53 Initializes a new BlendMode with specified parameters. @param name the blend mode name @param blendChannel the channel blending function @param blend the overall blending function
54 Initializes a PDColor with a pattern name and color space. @param patternName the name of the pattern @param colorSpace the color space to use
55 Initializes PDDeviceNAttributes with given COSDictionary. @param attributes the COSDictionary containing device N attributes
56 Constructs a PDDeviceNProcess with given attributes. @param attributes COSDictionary containing process attributes
57 Constructs a PDGamma from a COSArray. @param array the COSArray containing gamma values
58 Initializes PDTristimulus with a COSArray. @param array containing tristimulus values
59 Initializes PDTransparencyGroupAttributes with a COSDictionary. @param dic the COSDictionary to be used
60 Initializes optional content properties from a COS dictionary. @param props COS dictionary containing properties
61 Initializes a pattern with a given COSDictionary. @param dictionary the COSDictionary representing the pattern
62 Constructs a PDShading with the given COSDictionary. @param shadingDictionary the COSDictionary representing the shading
63 Initializes a new instance of PDExtendedGraphicsState. @param dictionary COSDictionary containing graphics state properties @param resourceCache ResourceCache for managing resources
64 Initializes a new PDSoftMask with given dictionary and resource cache. @param dictionary COSDictionary containing mask properties @param resourceCache ResourceCache for managing resources
65 Initializes a PDAction with a COSDictionary. @param a COSDictionary representing the action
66 Private constructor to prevent instantiation of utility class.
67 Initializes PDAdditionalActions with a dictionary. @param a COSDictionary containing action data
68 Initializes additional actions from a dictionary. @param a COSDictionary containing action settings
69 Initializes a new instance with a given dictionary. @param a COSDictionary containing action data
70 Initializes additional form field actions. @param a dictionary containing action details
71 Initializes additional page actions from a dictionary. @param a COSDictionary containing action definitions
72 Initializes a PDTargetDirectory with a given COSDictionary. @param dictionary the COSDictionary to use
73 Initializes a new PDURIDictionary with the given COSDictionary. @param dictionary the underlying COSDictionary to use
74 Initializes PDWindowsLaunchParams with given dictionary. @param p COSDictionary containing parameters
75 Constructs a PDAppearanceCharacteristicsDictionary from a COSDictionary. @param dict the underlying COS dictionary
76 Constructs a PDAppearanceDictionary from a COSDictionary. @param dictionary the underlying COSDictionary to use
77 Constructs a PDAppearanceEntry with a given COSDictionary. @param entry the COSDictionary representing the appearance entry
78 Initializes a border effect dictionary from a COSDictionary. @param dict the COSDictionary representing the border effect
79 Initializes a border style dictionary from a COSDictionary. @param dict the underlying COSDictionary to use
80 Constructs a PDExternalDataDictionary from a COSDictionary. @param dictionary the underlying COSDictionary
81 Initializes a CloudyBorder with specified parameters. @param stream content stream for drawing @param intensity visual intensity of the border @param lineWidth width of the border line @param rect bounding rectangle for the border
82 Initializes a PDPropBuild with a given COSDictionary. @param dict the COSDictionary to be used
83 Initializes PDPropBuildDataDict with a COSDictionary. @param dict the underlying COSDictionary
84 Initializes PDSeedValue with a COSDictionary. @param dict the COSDictionary to initialize with
85 Initializes a new PDSeedValueCertificate with the given COSDictionary. @param dict the COSDictionary to use
86 Initializes a PDSeedValueMDP with a given COSDictionary. @param dict the COSDictionary to initialize with
87 Initializes PDSeedValueTimeStamp with a given COSDictionary. @param dict the COSDictionary to be used
88 Initializes a PDSignature with a given COSDictionary. @param dict the COSDictionary to initialize the signature with
89 Initializes a new instance of SignatureOptions. Sets default page number to 0.
90 Initializes PDFTemplateCreator with a builder. @param templateBuilder PDFTemplateBuilder instance to use
91 Private constructor to prevent instantiation of utility class.
92 Constructs a PDField with specified parameters. @param acroForm the form containing the field @param field the COSDictionary representing the field @param parent the parent non-terminal field
93 Initializes a new PDXFA resource. @param xfaBase the underlying COS base object
94 Initializes a new PDMeasureDictionary with the given COSDictionary. @param dictionary the underlying COSDictionary to use
95 Initializes a new instance with the given COSDictionary. @param dictionary the COSDictionary to use
96 Constructs a PDViewportDictionary with a given COSDictionary. @param dictionary the underlying COSDictionary to use
97 Constructs a PDThread with a given dictionary. @param t COSDictionary representing the thread
98 Constructs a PDThreadBead with a given COSDictionary. @param b the COSDictionary representing the thread bead
99 Initializes PDViewerPreferences with given dictionary. @param dic PDF dictionary containing viewer preferences
100 Initializes PageDrawerParameters for PDF rendering. @param renderer PDFRenderer instance @param page PDPage to be rendered @param subsamplingAllowed flag for allowing image subsampling @param destination RenderDestination for output @param renderingHints RenderingHints for customization @param imageDownscalingOptimizationThreshold threshold for image downscaling optimization
101 Wraps a TextPosition object. @param position TextPosition to be wrapped
102 Initializes a 3x3 identity transformation matrix.
103 Initializes a Matrix with a source array. @param src source float array representing matrix elements
104 Initializes a 3x3 transformation matrix. @param a, b, c, d, e, f matrix elements
105 Private constructor to prevent instantiation of utility class.
106 Constructs a new instance of PDFStreamEngine.
107 Applies mask operation using processor. @param op OperatorProcessor instance containing operation details
108 Sets the terminator character for masking. @param term character code for termination (must be 118-126 excluding 'z')
109 Sets the number of pages for splitting. @param split number of pages, must be greater than zero
110 Sets the starting page number. @param start the starting page index, must be greater than zero
111 Sets the end page. @param end page number, must be greater than zero
112 Sets leniency mode. @param lenient true for lenient parsing, false otherwise @throws IllegalArgumentException if called after initial parse
113 Initializes CompressParameters with object stream size. @param objectStreamSize the size of the object stream, must be non-negative
114 Initializes PDResources with dictionaries and caches. @param resourceDictionary PDF resource dictionary @param resourceCache shared resource cache @param directFontCache cache for direct fonts Throws IllegalArgumentException if any parameter is null
115 Sets the blending mode. @param blendMode the blending mode to apply, must not be null
116 Initializes a PDFieldTree with an AcroForm. @param acroForm the root AcroForm object, cannot be null
117 Returns the length of the COSStream. Throws IllegalStateException if there's an open OutputStream. @return Length of the stream as a long
118 Initializes a new instance of PDFMergerUtility with an empty list of sources.
119 Initializes a COSWriterObjectStream with a given compression pool. @param compressionPool pool used for managing compression resources
120 Constructs a new instance of PublicKeyProtectionPolicy.
121 Initializes text clippings list.
122 Masks a file by calling m1 on it. @param source File to be masked @throws FileNotFoundException if the file is not found
123 Masks data from a given source. @param source RandomAccessRead object containing input data
124 Masks a given name using an internal instruction. @param name the name to be masked
125 Masks an instruction sequence. @param child InstructionSequence to be masked
126 Adds a public key recipient. @param recipient the recipient to add
127 Masks a region with a rectangle. @param regionName name of the region to mask @param rect rectangle defining the mask area
128 Sets the trailer for the current XRef. @param trailer dictionary containing trailer information
129 Retrieves a COSBase object from the pool using a key. @param key unique identifier for the COSBase object @return COSBase object or null if not found
130 Retrieves an operator by name. @param operatorName the name of the operator to find @return Operator object or null if not found
131 Converts Unicode sequence to font glyph name. @param unicodeSequence Unicode character sequence @return Glyph name or ".notdef" if not found
132 Handles exceptions based on operator and operands. Logs specific exceptions; rethrows others.
133 Retrieves the current mask state from the graphics stack. @return PDGraphicsState object representing the mask state
134 Calls m1 on graphicsStack.
135 Returns mask value from graphics stack. @return integer mask value
136 Applies 2D transformation to coordinates. @param x original x-coordinate @param y original y-coordinate @return transformed Point2D.Float
137 Decreases the current level by one. Logs an error if level goes below zero.
138 Masks a value using instruction m1. @param value the integer value to mask
139 Checks if COSStream is open and throws IOException if closed.
140 Throws an exception indicating reset operation is unsupported. @throws IOException with message "Reset is not supported"
141 Throws an exception indicating reset operation is unsupported. @throws IOException always thrown with message "reset is not supported"
142 Retrieves encryption details of the parsed PDF document. @throws IOException if the document is not parsed yet @return PDEncryption object containing encryption information
143 Retrieves access permissions. @throws IOException if document is not parsed @return AccessPermission object
144 Constructs an InvalidPasswordException with a specified detail message. @param message the detail message
145 Initializes an Operator object. @param aOperator the operator string, must not start with '/' @throws IllegalArgumentException if the operator starts with '/'
146 Returns string representation of PDFOperator. @return formatted operator string
147 Returns string representation of COSArray. @return formatted string including array contents
148 Returns string representation of COSObject. @return formatted string with object details
149 Retrieves a filter by name. @param filterName the name of the filter to retrieve @return the Filter object associated with the given name @throws IOException if the filter is not found or invalid
150 Checks if any operand is an instance of given class. @param operands list of COSBase objects @param clazz class to check against @return true if any operand matches the class, false otherwise
151 Masks a float value using instruction m1. @param value the float value to mask
152 Sets the image width and updates formatter rectangle. @param width the new width for the image @return PDVisibleSignDesigner instance with updated settings
153 Sets image height and updates rectangle parameters. @param height desired image height @return this PDVisibleSignDesigner instance
154 Calculates distance between two points. @param ps starting point @param pe ending point @return Euclidean distance
155 Computes the determinant of a 2x2 matrix formed by points. @param p point to evaluate @param p1 first corner point @param p2 second corner point @return determinant value indicating orientation
156 Initializes a PDMarkedContent object. @param tag the content tag name @param properties dictionary containing content properties
157 Returns the mask string for pattern. @return Mask string for pattern
158 Returns the string representation of SHADING. @return String value of SHADING
159 Masks a function by retrieving and converting its name. @return Masked function name or empty string if not applicable
160 Masks functionality by invoking helper method. @throws IOException if an I/O error occurs
161 Masks terminal fields in a list. @param fields list of PDField objects to process
162 Checks if all coordinates (wpX, wpY, wpZ) are zero. @return true if all coordinates are zero, false otherwise
163 Generates an array mapping for shading. @return int array representing the mapping @throws IOException if an I/O error occurs
164 Generates a mask array based on shading calculations. @return int array representing the mask @throws IOException if an I/O error occurs during processing
165 Initializes and returns the code table. @return List of byte arrays representing the code table
166 Masks data from list of RandomAccessRead sources. @param sourcesList list of source objects to process
167 Retrieves an object from the underlying collection. @param index position of the object in the collection @return COSBase object at the specified index
168 Retrieves element at specified index. @param index position of the element to retrieve @return element at the given index
169 Calls m1 method on objects. @return result of objects.m1()
170 Delegates the call to the underlying implementation. @return result from the actual method invocation
171 Returns mask value from recipients. @return integer mask value
172 Delegates to objects.m1(). @return Result of objects.m1()
173 Delegates call to actual.m1(). @return result of actual.m1()
174 Masks public key recipient. @param recipient PublicKeyRecipient to be masked @return true if masking is successful
175 Returns an iterator over COSBase objects. @return Iterator of COSBase elements
176 Returns an iterator over elements of type E. Delegates to the underlying collection's iterator. @return Iterator over elements of type E
177 Returns an iterator over public key recipients. @return Iterator of PublicKeyRecipient objects
178 Returns a list of COSBase objects. @return List containing COSBase objects
179 Masks objects using COSName and collects results. @return List of masked object names
180 Masks strings in a list based on certain criteria. @return List of masked strings
181 Converts Boolean to COSBoolean using helper method. @param value Boolean object to convert @return COSBoolean representation of the input
182 Masks the input value using a specific function. @return masked string representation of the value
183 Writes boolean value as bytes to OutputStream. @param output stream to write to @throws IOException if writing fails
184 Writes NULL_BYTES to the output stream. @param output OutputStream to write to @throws IOException if an I/O error occurs
185 Writes byte array to output stream. @param data byte array to write @throws IOException if writing fails
186 Returns entries of the internal map. @return set of map entries
187 Compares two entries and returns true if they differ. @param oldEntry the original entry to compare @param newEntry the new entry to compare @return true if entries are different, false otherwise
188 Delegates to items' m1 method. @return result of items.m1()
189 Retrieves item by key. @param key unique identifier for the item @return COSBase object associated with the key or null if not found
190 Retrieves a set of COSNames. @return Set containing COSName objects
191 Applies an action to each item. @param action BiConsumer defining the action to apply
192 Returns a collection of COSBase objects. @return Collection of COSBase elements
193 Masks dictionary items. @param dict input COSDictionary to mask
194 Checks if an item with the given name exists. @param name the COSName of the item to check @return true if the item exists, false otherwise
195 Masks spaces in input string. @param s input string to process @return array of strings with masked spaces
196 Converts a string to an integer. @param token string representation of the integer @return integer value or throws NumberFormatException if invalid
197 Returns masked function type string. @return Concatenated string of "FunctionType" and result from m1()
198 Sets the encryption key length. @param l key length in bits; must be 40, 128, or 256
199 Sets the starting page value. @param startPageValue 1-based index for the starting page
200 Sets the end page value. @param endPageValue the last page number, must be greater than 0
201 Initializes a new BruteForceParser with given COSDocument and COSParser. @param cosDocument the COSDocument to parse @param cosParser the COSParser instance @throws IOException if an I/O error occurs during initialization
202 Initializes a new XrefTrailerObj with default settings.
203 Initializes PDResources with a COSDictionary. @param resourceDictionary the dictionary containing resources
204 Initializes PDResources with a dictionary and cache. @param resourceDictionary the COSDictionary containing resources @param resourceCache the ResourceCache for caching purposes
205 Initializes a map with operator names and their corresponding enum values.
206 Initializes a PDAcroForm with a document and a dictionary. @param doc PDDocument containing the form @param form COSDictionary representing the form data
207 Returns mask value from byte position map. @return integer mask value
208 Retrieves or creates a COSObject from the pool. @param key unique identifier for the COSObject @return COSObject instance or null if key is null
209 Updates cross-reference table with provided values. @param xrefTableValues map of object keys to their positions
210 Converts a hexadecimal string to a float. @param token hexadecimal string representation of a float @return float value represented by the hex string
211 Masks float value to prevent overflow and underflow. @param floatValue input floating-point number @return masked float value
212 Determines text direction based on matrix values. @return Direction in degrees (0, 90, 180, 270)
213 Compares object with current float value. @param o object to compare @return true if object is COSFloat with matching float value, false otherwise
214 Calls Float's m1 method with value. @param value input float value @return result of Float.m1(value)
215 Masks the value if it's in scientific notation. @return masked value as String
216 Writes "null" followed by a space to the OutputStream. @param output target OutputStream to write to
217 Constructs a COSIncrement with specified origin. @param incrementOrigin update information for the increment
218 Initializes a new instance of PDFCloneUtility. @param dest destination PDF document to clone into
219 Initializes the resource cache with stable cache option. @param enableStableCache flag to enable or disable stable caching
220 Checks mask condition. @return true if condition met, false otherwise
221 Checks if object is processed or valid. @param base COSBase object to check @return true if object is processed or valid, false otherwise
222 Checks if a COSBase object is excluded. @param base the COSBase object to check @return true if excluded, false otherwise
223 Recursively processes a COSBase object. @param object the COSBase object to process
224 Marks a COSObject as processed. @param base the COSObject to be marked
225 Adds TrueTypeFont to the list of fonts to close. @param ttf TrueTypeFont object to be managed
226 Extracts COS dictionaries from form field widgets. @param fields list of PDF document fields @return set of COS dictionaries representing widget annotations
227 Initializes COSInputStream with input stream and decode results. @param input source input stream @param decodeResults list of decoding results
228 Initializes ASCII85 input stream. @param is underlying input stream
229 Initializes a CCITT Fax Decoder stream. @param stream input stream containing fax data @param columns number of columns in the fax image @param type compression type (CCITT) @param options additional decoding options @param byteAligned flag indicating if data is byte-aligned
230 Returns a COSInteger for the given value within bounds. @param val long integer value to be converted @return COSInteger object representing the value
231 Checks if object is COSInteger with matching m1 value. @param o object to check @return true if conditions are met, false otherwise
232 Returns a string representation of the COSInt with its value. @return formatted string including the class name and value
233 Writes masked value to output stream. @param output destination OutputStream @throws IOException if an I/O error occurs
234 Retrieves value by key from an underlying map. @param key unique identifier for the value @return value associated with the key, or null if not found
235 Retrieves aliased font name. @param fontName original font name @return aliased font name or original if no alias exists
236 Registers an alias for a font name. @param alias the alias to register @param baseName the base font name associated with the alias
237 Masks export values based on certain conditions. @return List of masked export values
238 Delegates to 'm1' method of 'name'. @return result of 'name.m1()'
239 Writes a masked comment to output stream. @param comment text to be written, must not contain newlines @throws IOException if an I/O error occurs
240 Writes a newline character to the output stream. @throws IOException if an I/O error occurs
241 Converts a string to a hexadecimal character array. @param text input string to be converted @return char array representing the hexadecimal values of the input string
242 Constructs a COSObjectKey with given object and generation numbers. @param num object number, must be non-negative @param gen generation number, must be non-negative @param index stream index
243 Calls Long's m1 method with numberAndGeneration. @return result of Long.m1 invocation
244 Computes a value based on array elements. @return computed float value or single[0] if condition fails
245 Masks a value based on conditions. @return masked float value
246 Initializes a COSOutputStream with specified filters and parameters. @param filters list of filters to apply @param parameters dictionary containing stream parameters @param output underlying OutputStream @param streamCache cache for random access streams @throws IOException if an I/O error occurs during initialization
247 Initializes ASCII85OutputStream with given output stream. @param out underlying OutputStream to write data
248 Initializes a new instance of COSStandardOutputStream. @param out underlying OutputStream to write to
249 Initializes a new COSStandardOutputStream. @param out underlying output stream @param position initial position in the stream
250 Closes resources and caches in a controlled manner. @throws IOException if an I/O error occurs during closing
251 Closes and nullifies stream cache and related resources. @throws IOException if an I/O error occurs during closing
252 Masks byte array using XOR operation. @param bytes input byte array to be masked @return masked byte array
253 Masks data from input and writes to output. @throws IOException if an I/O error occurs
254 Converts byte array to ASCII string. @return ASCII string representation of bytes
255 Checks if origin document state is valid and meets condition. @return true if originDocumentState is not null and its m1() returns true, false otherwise
256 Converts byte array to string using a code-to-unicode mapping. @param bytes input byte array @return resulting string after conversion
257 Masks function name by reading characters until a specific pattern is found. @return Masked function name as a String @throws IOException if an I/O error occurs while reading from the source
258 Masks text by converting characters to byte codes. @param text input string to be masked @return byte array representing masked text
259 Checks if a character is masked. @param character the character to check @return true if the character is masked, false otherwise
260 Checks if the map contains the specified key. @param key the key to check @return true if the map contains the key, false otherwise
261 Checks if font name is an alias. @param fontName the font name to check @return true if font name is an alias, false otherwise
262 Returns a mapping of code to name. @return Map where key is code and value is corresponding name
263 Returns an inverted map of string to integer. @return Map with keys and values swapped
264 Placeholder method that throws an UnsupportedOperationException. @param flag boolean parameter (not used)
265 Reads a byte from an Ascii85 encoded stream. @return next byte or -1 if end of stream @throws IOException if invalid data is encountered
266 Resets state and calls superclass method. @throws IOException if an I/O error occurs
267 Processes input byte and updates output. @param b input byte to process @throws IOException if an I/O error occurs
268 Processes and outputs data with line breaks. @throws IOException if an I/O error occurs
269 Pads the input password with encryption padding. @param password byte array of the user's password @return byte array containing the padded password
270 Ends text mode and writes output. Logs a warning if endText() wasn't called. @throws IOException on I/O error
271 Masks data using OutputStream. @param xmp input byte array to be masked
272 Determines if a page number is at a mask boundary. @param pageNumber current page number @return true if page is at a mask boundary, false otherwise
273 Throws exception as JPX encoding is not supported. @param input source InputStream @param encoded destination OutputStream @param parameters encoding parameters
274 Throws UnsupportedOperationException as method is not implemented. @param t map to be processed (not used)
275 Throws an exception as the class is immutable. @param value float value to be masked (unused)
276 Throws an exception as the class is immutable. @param value unused parameter
277 Throws an exception as the class is immutable. @param value the float value to be masked (not used)
278 Throws UnsupportedOperationException as the class is immutable. @param value float value to be masked (not used)
279 Placeholder method that throws an exception indicating it's not implemented.
280 Placeholder for mask creation. @param signatureText text to be masked @return PDVisibleSignDesigner object (not yet implemented)
281 Throws exception as mask operations are unsupported. @param value input string value
282 Retrieves and validates the deflate level for compression. @return Compression level between -1 and Deflater.BEST_COMPRESSION
283 Delegates call to actual.m1. @param o the object to process @return result of actual.m1 invocation
284 Initializes a new FlateFilterDecoderStream. @param inputStream source input stream @throws IOException if an I/O error occurs while reading the zlib header
285 Calls m1 on inflater and then invokes superclass's m2. @throws IOException if an I/O error occurs
286 Initializes PDF structure and logs creation.
287 Sets the image and updates dimensions. @param image BufferedImage to process
288 Searches for a pattern in the code table. @param codeTable list of byte arrays representing codes @param pattern byte array to search for @return index of matching code or -1 if not found
289 Applies PNG filter based on predictor type. @param predictor filter type identifier @param colors number of color channels @param bitsPerComponent bits per color component @param columns number of image columns @param actline current row data to be filtered @param lastline previous row data for filtering
290 Checks if a COSObjectKey is present in the pool. @param key the COSObjectKey to check @return true if key is in the pool, false otherwise
291 Registers a security handler with a protection policy. @param name unique identifier for the security handler @param securityHandler class implementing SecurityHandler interface @param protectionPolicy class implementing ProtectionPolicy interface @throws IllegalStateException if the handler name is already registered
292 Checks if the given name is masked. @param name the name to check @return true if name is masked, false otherwise
293 Checks if a code is masked. @param code the code to check @return true if code is masked, false otherwise
294 Escapes XML special characters in input string. @param input original string to be processed @return escaped string safe for XML use
295 Sets the bounding box for a PDF element. @param bbox rectangle defining the bounds or null to clear it
296 Converts a hexadecimal string to a byte array. @param s input hexadecimal string @return byte array representation of the input string
297 Closes resources and throws an exception if any fail. @throws IOException if closing fails
298 Masks document and FDF source if not already masked. @throws IOException if an I/O error occurs during masking
299 Returns the COSDictionary associated with the function. @return COSDictionary object, either from functionStream or directly
300 Initializes a PDXObject with a given stream and subtype. @param stream the PDStream associated with this object @param subtype the COSName representing the subtype of the XObject
301 Returns the underlying COSStream. @return COSStream object
302 Retrieves metadata stream from document. @return COSStream containing metadata or null if not found
303 Sets metadata in the stream. @param metadata COSStream containing metadata to be set
304 Checks if any annotation matches the given widget. @param annotations list of PDAnnotation objects @param widget PDAnnotationWidget object to match against @return true if a matching annotation is found, false otherwise
305 Checks equality with another annotation. @param o object to compare @return true if equal, false otherwise
306 Returns the set of keys from the underlying collection. @return Set of keys
307 Checks if a signature field matches any in the iterator. @param fieldIterator iterator over PDField objects @param signatureField PDSignatureField to match @return true if a match is found, false otherwise
308 Returns all values from the underlying collection. @return Collection of values
309 Initializes a new instance of BaseParser with a PDF source. @param pdfSource the RandomAccessRead object representing the PDF file
310 Calls m2 with result from source.m1(). @throws IOException if an I/O error occurs @return true if successful, false otherwise
311 Adds an XRef entry for a given object key and offset. @param objKey the COSObjectKey to add @param offset the byte offset of the object in the file
312 Maps code to name and vice versa. @param code unique identifier @param name associated with the code
313 Calls m2 with source's m1 result. @throws IOException if an I/O error occurs
314 Masks a line by checking and processing conditions. @param linebreak the line to be processed @return true if masking is successful, false otherwise
315 Processes input parameter and checks byte sequence. @param bracesParameter input integer parameter @return processed integer or original if conditions not met
316 Checks if character is masked by either function. @param c character to check @return true if masked, false otherwise
317 Reads and masks characters from the source until a condition fails. @throws IOException if number exceeds MAX_LENGTH_LONG or read error occurs @return StringBuilder containing masked characters
318 Masks a buffer's content. @param buffer ByteArrayOutputStream containing data to mask @return masked string representation of the buffer
319 Reads a character and checks it against the expected value. @param ec expected character to match @throws IOException if characters do not match or an I/O error occurs
320 Calls m2 with result from source.m1(). @throws IOException if an I/O error occurs
321 Parses and retrieves the start XRef value from a PDF file. @return the start XRef position or -1 if not found @throws IOException if an I/O error occurs during parsing
322 Finds the last EOF marker in the source. @return The offset of the last EOF marker or Long.MAX_VALUE if not found @throws IOException if an I/O error occurs during processing
323 Searches for XREF table offsets and adds them to a list. @return List of Long containing offsets or empty if none found
324 Determines number of color components. @return int value representing the number of color components @throws IOException if an I/O error occurs during processing
325 Searches for XRef stream offsets and fixes references. @return List of fixed offsets or empty list if none found
326 Retrieves cross-reference trailer information. @return Map of COSObjectKey to Long representing object numbers
327 Reads and processes the file trailer to find the xref offset. @return xref offset within the file @throws IOException if an I/O error occurs or markers are missing
328 Processes input stream to detect endstream or endobj markers. @param out output stream for processed content @return length of processed content @throws IOException if an I/O error occurs
329 Initializes a new instance of ToUnicodeWriter with mode set to 0.
330 Sets a label for a range of pages starting from startPage. @param startPage the starting page index (must be >= 0) @param item the page label range to apply
331 Masks text with CID. @param cid character identifier, must be between 0 and 65535 @param text string to mask, cannot be null or empty
332 Checks for binary data and logs if non-binary content found. @return true if no binary data detected, false otherwise
333 Checks source condition. @throws IOException if I/O error occurs @return true if condition met, false otherwise
334 Masks an XReferenceEntry if already processed. @param entry the XReferenceEntry to process
335 Computes mask values from stream data. @return int array containing computed mask values
336 Initializes object pool with highest XRef object number. @param highestXRefObjectNumber the highest XRef object number to set
337 Retrieves COSDictionary from XRef map. @return COSDictionary object or null if conditions not met
338 Retrieves COSDictionary from XREF map. @return COSDictionary or null if conditions are not met
339 Retrieves object numbers referencing a given object. @param objstmObjNr the object number to check references for @return set of object numbers that reference the given object, or null if trailer is unresolved
340 Returns a masked value. @return long representing the masked result
341 Returns a masked value. @return long representing the masked result from nested methods
342 Generates a string representation of FreeReference. @return formatted string with key, nextFreeObject, and type information
343 Returns the result of calling m1(). @return The value returned by m1()
344 Returns the result of calling m2 on the object returned by m1. @return The result of m1().m2()
345 Returns a string representation of the object. @return formatted string with object details
346 Returns the masked value from nested methods. @return long value obtained by calling m2 on the result of m1()
347 Returns the mask value from function m1. @return long value representing the mask
348 Generates a string representation of the ObjectStreamEntry. @return formatted string with key, type, index, and parent information
349 Writes bytes to output stream. @param b byte array containing data to write @param off starting offset in the byte array @param len number of bytes to write @throws IOException if an I/O error occurs
350 Calls m1 with false and processes m2 on output. @param b integer parameter for processing @throws IOException if an I/O error occurs
351 Masks data based on condition. Throws IOException if an I/O error occurs.
352 Checks if compressParameters is non-null and calls its m1 method. @return true if both conditions are met, false otherwise
353 Masks an XReferenceEntry. @param entry the entry to be masked
354 Writes indirect object reference to OutputStream. @param output stream to write to @param indirectReference COSObjectKey of the object
355 Masks reference entries into ranges. @param xRefEntriesList list of XReferenceEntry objects @return array of Long representing masked ranges
356 Creates and returns an MD5 MessageDigest instance. @return MessageDigest object for MD5 hashing
357 Initializes SHA-1 MessageDigest instance. @return MessageDigest object for SHA-1 algorithm @throws RuntimeException if SHA-1 algorithm is unavailable
358 Creates a SHA-256 MessageDigest instance. @return MessageDigest object for SHA-256 hashing @throws RuntimeException if SHA-256 algorithm is not available
359 Masks FDF document and processes objects for encryption. @param doc FDFDocument to be processed
360 Delegates call to retrieve an object from the pool. @return the retrieved object's identifier
361 Returns a list of prepared COSObject keys. @return List of COSObjectKey objects
362 Updates mapping for a code and its corresponding name. @param code unique identifier @param name associated name for the code
363 Masks specified region by name. @param regionName name of the region to mask
364 Formats decimal with specified number of fraction digits. @param fractionDigitsNumber number of fraction digits to use
365 Initializes a new content stream for PDF document. @param document the PDDocument to write to @param outputStream where the content will be written @param resources resources for the content stream
366 Computes a float value based on an input code. @param code input integer code @return computed float value or default if not found
367 Returns the standard value if not null, otherwise returns the default value. @param standardValue the primary value to check @param defaultValue the fallback value @return the non-null value between standardValue and defaultValue
368 Increases image dimensions by a percentage. @param percent increase in size as a percentage @return PDVisibleSignDesigner instance with updated dimensions
369 Returns the width of the image. @return image width as a float
370 Returns the height of the image. @return image height as a float
371 Rotates and adjusts image position based on rotation angle. @return PDVisibleSignDesigner instance with updated transformations
372 Creates an AffineTransform from an array. @return AffineTransform object constructed from the array elements
373 Encodes a string into a byte array. @param text input string to encode @return encoded byte array @throws IOException if encoding fails
374 Masks Unicode code point to its name. @param codePoint Unicode code point value @return Name of the Unicode character or ".notdef" if unknown
375 Retrieves render state by COSName. @param state COSName representing the state @return RenderState object or null if state is null
376 Retrieves BaseState based on COSName. @param state COSName representing the state @return BaseState corresponding to the input or default ON if null
377 Processes a word to find and write its glyphs. @param gsubWorker worker for applying GSUB rules @param out stream to write the glyphs @param font font containing glyph information @param word input text to process @return list of glyph IDs after GSUB processing
378 Constructs a new PDF document. @param doc underlying COSDocument object @param source RandomAccessRead source of the PDF @param permission AccessPermission for the PDF
379 Initializes a new FDFDocument from a COSDocument and source. @param doc the underlying COSDocument @param source the RandomAccessRead source for the FDF data
380 Delegates call to actual implementation. @return result from actual.m1()
381 Delegates array processing to another method. @param a input array of generic type X @return processed array of generic type X
382 Delegates call to actual.m1. @param o input object @return result of actual.m1
383 Delegates to actual.m1 to check collection. @param c the collection to check @return true if condition met in actual.m1, false otherwise
384 Processes collection items, removing matches from array. @param c collection of COSObjectable items @return true if processing is successful
385 Filters and processes items in collection. @param c collection of COSObjectable items @return result of processing by actual object
386 Delegates call to actual.m1. @param o object to be processed @return result of actual.m1
387 Delegates call to actual.m1(). @return Result of actual.m1()
388 Delegates call to actual.m1. @param o object to be passed @return result of actual.m1
389 Returns a list iterator over the elements in this collection. @return a ListIterator over the elements of this collection
390 Returns a list iterator over the elements in this list starting at the specified position. @param index index of the first element to be returned from the list iterator (by a call to next) @return a ListIterator of the elements in this list starting at the specified position
391 Retrieves elements from index 'fromIndex' to 'toIndex'. @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive) @return list of elements within the specified range
392 Delegates call to actuals.m1. @param value object to be processed @return result of actuals.m1
393 Returns entry set of actuals. @return Set of map entries from actuals
394 Returns a set of masked aliases. @return Set containing masked alias strings
395 Delegates call to actuals' m1 method. @return result from actuals.m1()
396 Creates a COSObjectable from a COSBase. @param base the input COSBase object @return COSObjectable created from the base object @throws IOException if an error occurs during creation
397 Converts a number to a letter mask. @param num input number @return String representation of the letter mask
398 Returns mask value from labels. @return integer mask value
399 Creates a page label range starting from a given page. @param startPage the starting page number @return PDPageLabelRange object representing the page range
400 Returns a navigable set of labels. @return NavigableSet containing label integers from m1()
401 Returns an array of floats from mask operation. @return float array result of m1 method
402 Initializes a PDColor with specified components and colorspace. @param components array of color components @param colorSpace the colorspace to use
403 Applies mask based on color space. @return float array representing masked components
404 Initializes a CoordinateColorPair with a point and a color. @param p the 2D coordinate point @param c the color array (RGB values)
405 Generates a formatted string representing function type. @return String with concatenated values from methods m1, m2, and m3
406 Calculates boundary values from corner coordinates. @return int array containing calculated boundaries
407 Retrieves a number from the stack. @return Number object from the stack
408 Retrieves an integer value from the stack. @return masked integer value from the stack's m1 method
409 Retrieves a masked value from the stack. @return The masked float value from the stack.
410 Masks an instruction with a boolean value. @param value the boolean mask to apply
411 Initializes execution context with given operators. @param operatorSet set of available operators
412 Initializes and returns a list of compiled patterns. @return List of compiled regex patterns
413 Initializes encoding map with MAC expert table entries.
414 Initializes MacRomanEncoding with character mappings.
415 Initializes standard character encodings. Iterates over encoding table and adds entries to the encoding map.
416 Initializes symbol encoding by iterating over a table. Adds each character code and name to the encoding map.
417 Initializes WinAnsiEncoding with standard and default mappings.
418 Initializes the Zapf Dingbats encoding by populating a map.
419 Masks elements of an array. @param array input array of objects @return string representation of masked array
420 Masks float array elements. @param array input float array @return string representation of masked array
421 Masks a given text position. @param text TextPosition to be masked
422 Masks content using specified PDMarkedContent. @param markedContent content to be masked
423 Masks an XObject. @param xobject the XObject to be masked
424 Sets printing permission. @param allowPrinting flag to enable or disable printing
425 Sets modification permissions. @param allowModifications flag to enable or disable modifications
426 Masks extraction based on permission. @param allowExtraction flag to enable or disable extraction
427 Modifies annotation permission based on input. @param allowAnnotationModification flag to enable or disable annotation modification
428 Toggles form filling permission. @param allowFillingInForm flag to enable or disable form filling
429 Masks extraction based on read-only status. @param allowExtraction flag to enable or disable extraction
430 Sets document assembly permission. @param allowAssembly flag to enable or disable assembly
431 Updates print setting for faithful data. @param canPrintFaithful flag to enable or disable printing
432 Checks if PRINT_BIT is masked. @return true if PRINT_BIT is masked, false otherwise
433 Checks if modification bit is set. @return true if modification bit is set, false otherwise
434 Masks a bit using m1 function. @return result of masking operation
435 Checks if annotations can be modified. @return true if annotations are modifiable, false otherwise
436 Checks if form bit is set. @return true if form bit is set, false otherwise
437 Checks if accessibility bit is set. @return true if accessibility bit is enabled, false otherwise
438 Checks document assembly status. @return true if document is assembled, false otherwise
439 Checks if FAITHFUL_PRINT_BIT is set. @return true if bit is set, false otherwise
440 Retrieves a key from the keystore. @return Key object if found, otherwise throws KeyStoreException
441 Returns a SecureRandom instance. @return existing customSecureRandom if set, otherwise a new SecureRandom instance
442 Initializes encryption with a key. @param key byte array of length 1-32 bytes
443 Encrypts a byte using a modified stream cipher. @param aByte the byte to encrypt @param output the OutputStream for encrypted data @throws IOException if an I/O error occurs
444 Masks diacritics in a string; normalizes otherwise. @param str input string to process @return masked or normalized string
445 Checks if a Unicode code point matches any of 10 mask conditions. @param codepoint Unicode code point to check @return true if any condition is met, false otherwise
446 Determines mask value based on key length and policy. @return int representing mask value
447 Returns a singleton instance of the Bouncy Castle provider. @return Provider object initialized with Bouncy Castle
448 Extracts text content from child nodes of a given element. @param node the parent XML element @return concatenated text content of all child nodes
449 Masks and outputs given text. @param text input string to be masked
450 Retrieves or parses a CMap by name. @param cMapName the name of the CMap to fetch or parse @return the CMap object @throws IOException if an error occurs during parsing
451 Parses a CMap from the given RandomAccessRead. @param randomAccessRead source of data to parse @return parsed CMap object or null if parsing fails
452 Generates a set of masked names from the given post script name. @param postScriptName original post script name @return set containing original and masked names
453 Generates a set of points on the line from (x0, y0) to (x1, y1). @param x0 starting x-coordinate @param y0 starting y-coordinate @param x1 ending x-coordinate @param y1 ending y-coordinate @return Set of Point objects representing the line
454 Generates a mask value from an array of points. @param p array of Point2D objects @return integer mask value
455 Caches font information with a soft reference. @param info FontInfo object containing font details @param font FontBoxFont object representing the font
456 Retrieves cached FontBoxFont by FontInfo. @param info font information @return FontBoxFont object or null if not found
457 Registers font alias. @param baseName the base font name to alias
458 Replaces matches in a case-insensitive manner. @param match pattern to search for @param replace string to replace matches with
459 Retrieves font info by format and PostScript name. @param format font format @param postScriptName PostScript name of the font @return FontInfo object or null if not found
460 Masks the given PostScript name. @param postScriptName original PostScript name to mask @return List of masked strings
461 Converts code to name using m1 method. @param code numeric code to convert @return corresponding name or ".notdef" if not found
462 Retrieves and logs the best font match from a priority queue. @param queue priority queue of FontMatch objects @return best FontMatch object
463 Converts CID to character string. @param cid character identifier @return Type2CharString or null if conversion fails
464 Masks function code using parent's m1 and m2 methods. @param code input function code to be masked @return masked function code
465 Converts color components to RGB value. @return integer representing RGB color @throws IOException if an I/O error occurs
466 Adjusts color channel value based on group and backdrop colors. @param groupRGB color value of the group @param backdropRGB color value of the backdrop @param shift bit shift for target color channel @param alphaFactor blending factor @return adjusted color channel value clamped between 0 and 255
467 Masks bytes in the given array. @param bytes input byte array @param start starting index @param length number of bytes to mask @return masked byte array
468 Returns a GlyphList with mask applied. @return GlyphList instance with mask processing
469 Initializes character mapping tables for font processing. Sets up Windows Unicode, Symbol, Mac Roman, and Unicode 1.0/2.0 BMP mappings.
470 Parses and registers font metrics for a given font name. @param fontName the font name to process @throws IOException if resource is not found or parsing fails
471 Checks if a TrueTypeFont can be embedded. @param ttf the TrueTypeFont to check @return true if embedding is allowed, false otherwise
472 Checks if font subsetting is allowed. @param ttf TrueTypeFont object @return true if subsetting is allowed, false otherwise
473 Encodes a map of group IDs to category IDs into a string. @param gidToCid mapping from group ID to category ID @return encoded string representation
474 Converts name to Unicode string. @param name input name string @return Unicode representation or null if conversion fails
475 Initializes encoding with character metrics. @param fontMetrics FontMetrics object containing character data
476 Constructs a PDColor with specified components, pattern name, and color space. @param components array of color components @param patternName the name of the pattern @param colorSpace the color space for this color
477 Creates a buffered image from a writable raster and color space. @param raster the source raster data @param awtColorSpace the color space for the image @return a buffered image with the specified raster and color model
478 Applies mask to raster using specified color space. @param raster source image data @param colorSpace color space for conversion @return masked BufferedImage
479 Checks if ICC profile represents sRGB color model. @param profile ICC_Profile object to check @return true if profile is for sRGB, false otherwise
480 Determines color space type. @return Color space type or -1 if not recognized
481 Creates an image XObject with default quality. @param document PDDocument to add the image @param image BufferedImage to convert @return PDImageXObject created from the image @throws IOException if creation fails
482 Initializes PredictorEncoder with a PDF document and image. @param document PDDocument to be associated @param image BufferedImage to encode
483 Resizes an image with optional interpolation. @param image source BufferedImage to resize @param width new width of the image @param height new height of the image @param type image type (e.g., TYPE_BYTE_GRAY) @param interpolate true for smooth scaling, false for nearest neighbor @return resized BufferedImage or original if an error occurs
484 Returns a COSDictionary representing mask settings. @return COSDictionary with mask configuration
485 Parses PNG image data and initializes converter state. @param imageData byte array containing PNG data @return PNGConverterState object or null if parsing fails
486 Combines IDAT chunks into a single input stream. @param state PNG conversion state containing IDAT chunks @return Combined InputStream of all IDAT data
487 Sets corner colors. @param color 2D array of colors to be applied
488 Creates a clipped area based on paths. @return Clipped Area object
489 Constructs a PlainText object from a list of strings. @param listValue List of string parts to be converted into paragraphs
490 Returns the mask value from the dictionary. @return integer mask value
491 Creates an affine transform with specified translation. @return AffineTransform object with translation set to (-bboxMinX, -bboxMinY)
492 Calculates mask parameters for given dimensions. @param advInterm intermediate advancement distance @param advCorner corner advancement distance @param k curvature factor @param r radius @param length total length @param array output array to store alpha and dx @return number of segments or -1 if invalid length
493 Calculates masked angle for point transition. @param pt current point @param ptNext next point @param r radius factor @param curlAdv advance curl adjustment @return calculated angle or 0 if out of bounds
494 Adjusts point array based on slope condition. @param points array of Double Points to process
495 Generates points defining an ellipse's boundary. @param left x-coordinate of the left edge @param bottom y-coordinate of the bottom edge @param right x-coordinate of the right edge @param top y-coordinate of the top edge @return array of Point2D.Double representing ellipse boundary
496 Checks if a path is a simple quadrilateral. @param path the GeneralPath to check @return true if the path forms a simple quadrilateral, false otherwise
497 Returns result of m1 function. @return float value from m1()
498 Sets mask position for signing. @param x horizontal coordinate @param y vertical coordinate @return current instance of PDVisibleSignDesigner
499 Applies an affine transformation to the sign designer. @param affineTransform the transformation to apply @return the current instance of PDVisibleSignDesigner
500 Constructs a PDPageFitDestination from a COSArray. @param arr array representing the destination
501 Constructs a page destination that fits the height of the page. @param arr PDF array representing the destination
502 Constructs a page destination with a fit rectangle. @param arr COSArray containing destination parameters
503 Constructs a PDPageFitWidthDestination from a COSArray. @param arr array representing the destination
504 Constructs a PDPageXYZDestination from a COSArray. @param arr array representing the destination
505 Ensures the outline item has no sibling nodes. @param node PDOutlineItem to validate
506 Returns an iterable of outline items. @return Iterable containing PDOutlineItem objects
507 Sorts list of KeyValue pairs by value. @param pairs List of KeyValue objects to sort
508 Sorts list of KeyValue pairs by key. @param pairs List to be sorted
509 Applies rendering hints to graphics. @param renderingHints configuration options for rendering
510 Adjusts path based on transformation type and scale. @param linePath original path to be adjusted @return modified path or original if no changes needed
511 Calculates subsampling factor for image processing. @param pdImage the image to process @param at the affine transform applied to the image @return integer subsampling factor between 1 and 8
512 Applies mask to double number. @param num input number @return masked integer value
513 Determines mask value based on rotation. @param rotation angle in degrees @return calculated mask value or 0 if none match
514 Calculates a masked value based on rotation. @param rotation angle of rotation in degrees @return calculated float value or 0 if no match
515 Calculates masked rotation value based on text orientation. @param rotation current rotation angle in degrees @return adjusted float value for masking
516 Masks text by writing it to output. @param text TextPosition object containing text to mask
517 Returns the masked string value. @return Masked string from m1()
518 Masks sensitive information in region name. @param regionName original region name @return masked region name as a string
519 Masks output based on direction. @param isLTR true for left-to-right, false otherwise
520 Masks data and writes to output. @throws IOException if an I/O error occurs
521 Masks data by calling m1 and passing result to m2. @throws IOException if an I/O error occurs
522 Masks data by invoking m1 and sending to m2. @throws IOException if an I/O error occurs during processing
523 Handles paragraph processing and outputs masked content. @throws IOException if an I/O error occurs during processing
524 Masks and outputs data. @throws IOException if an I/O error occurs
525 Calls m1 and passes result to m2. @throws IOException if an I/O error occurs
526 Finds a matching pattern in the list for the given string. @param string input string to match against patterns @param patterns list of compiled regex patterns @return first matching Pattern or null if none match
527 Masks a word by reversing characters in RTL runs. @param word input string to be masked @return masked string with RTL characters reversed
528 Processes input stream to map characters. @param inputStream source of character data
529 Masks text if it contains RTL characters. @return Masked text or original if no RTL characters found
530 Processes text position within regions. @param text TextPosition object to process
531 Checks if character is a non-spacing mark, modifier symbol, or letter. @return true if condition met, false otherwise
532 Sets the time zone display name based on offset. @param tz TimeZone object to update
533 Converts byte to two hex characters. @param b input byte @return String with two hex characters representing the byte
534 Masks byte array to hex string. @param bytes input byte array @return masked hexadecimal string representation
535 Applies mask functions to a byte. @param b input byte @return array of masked bytes
536 Converts byte array to ASCII representation. @param bytes input byte array @return ASCII byte array representing input bytes
537 Writes masked byte to OutputStream as hex. @param b byte to mask and write @param output OutputStream to write to @throws IOException if I/O error occurs
538 Decodes and trims a Base64 encoded string. @param base64Value Base64 encoded string with potential spaces @return Decoded byte array from the input string
539 Merges two sorted subarrays into a single sorted array. @param arr main array containing elements to be merged @param aux auxiliary array for merging @param from starting index of the first subarray @param mid ending index of the first subarray and starting index of the second @param to ending index of the second subarray @param cmp comparator for element comparison
540 Initializes a matrix from an AffineTransform. @param at the AffineTransform to convert
541 Applies transformation to a 2D point. @param point the original Point2D object to transform
542 Converts float to ASCII string representation. @param value the float number to convert @param maxFractionDigits maximum number of fraction digits @param asciiBuffer buffer to store ASCII characters @return length of the ASCII string or -1 if invalid input
543 Reads PDFBox version from properties file. @return PDFBox version as String or null if an error occurs
544 Parses an XML input stream into a Document. @param is the XML input stream @param nsAware whether to create a namespace-aware parser @return the parsed Document object @throws IOException if parsing fails
545 Searches trie for value based on byte array. @param bytes input byte sequence to search @return associated value or default if not found
546 Constructs a COSBoolean with a specified boolean value. @param aValue the boolean value to set
547 Constructs a COSName with the specified name. @param aName the name to be assigned
548 Private constructor to restrict instantiation.
549 Initializes a COSString from byte array. @param bytes input byte array @param forceHex if true, forces hexadecimal representation
550 Constructs a new COSDictionary. Initializes the update state for dictionary operations.
551 Constructs a COSObject with a given base object. @param object the underlying COSBase object
552 Initializes a COSObject with a base object and parser. @param object the base COSBase object @param parser the ICOSParser used for parsing
553 Initializes a COSObject with a key and parser. @param key unique identifier for the COSObject @param parser used to parse COS data
554 Initializes DecodeOptions with a specified rectangle. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height
555 Constructs a free XReference. @param key object key for the reference @param nextFreeObject ID of the next free object
556 Initializes an ObjectStreamXReference. @param objectStreamIndex index in the object stream @param key unique identifier for the object @param object the COSBase object reference @param parentKey key of the parent object
557 Constructs a new DefaultResourceCacheCreateImpl with default settings.
558 Constructs a new instance of PDTypedDictionaryWrapper. @param dictionary underlying COSDictionary to wrap
559 Constructs a PDAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary
560 Initializes a PDUserProperty with a COSDictionary and a user attribute object. @param dictionary the COSDictionary containing user properties @param userAttributeObject the user attribute object associated with the property
561 Constructs a PDOutlineNode from a COSDictionary. @param dict dictionary representing the outline node
562 Constructs a PDTransition from a COSDictionary. @param dictionary the COSDictionary containing transition settings
563 Constructs a new PDDestinationNameTreeNode from a dictionary. @param dic COSDictionary containing node data
564 Constructs a PDEmbeddedFilesNameTreeNode from a COSDictionary. @param dic dictionary containing node data
565 Constructs a PDJavascriptNameTreeNode from a COSDictionary. @param dic dictionary containing node information
566 Constructs a PDStructureElementNameTreeNode from a COSDictionary. @param dic dictionary representing the node
567 Creates a PDNumberTreeNode from a dictionary. @param dic COSDictionary containing node data @return PDNumberTreeNode instance
568 Constructs a PDMetadata instance from a COSStream. @param str the underlying COS stream containing metadata
569 Constructs a PDObjectStream from a COSStream. @param str underlying COS stream
570 Constructs a PDEmbeddedFile from a COSStream. @param str the underlying COSStream
571 Initializes a PDFunction with a given COSBase. @param function the underlying COS object for the function
572 Initializes a PDXObject with a given stream and subtype. @param stream the underlying COSStream @param subtype the subtype of the XObject
573 Constructs a PDStructureElement using a COSDictionary. @param dic dictionary containing structure element data
574 Constructs a PDStructureTreeRoot from a COSDictionary. @param dic dictionary representing the structure tree root
575 Default constructor for SecurityHandler.
576 Initializes the security handler with a specified policy. @param protectionPolicy encryption policy to be applied
577 Constructs an FDFAnnotationCaret from a COSDictionary. @param a dictionary containing annotation properties
578 Constructs a circle annotation from a COS dictionary. @param a COS dictionary representing the annotation
579 Constructs an FDF annotation with file attachment. @param a COSDictionary containing annotation details
580 Initializes a new FDFAnnotationFreeText instance. @param a COSDictionary containing annotation properties
581 Constructs an FDFAnnotationInk from a COSDictionary. @param a COSDictionary containing annotation data
582 Constructs a new FDF annotation line from a COS dictionary. @param a COS dictionary representing the annotation
583 Constructs an FDF annotation link. @param a COSDictionary containing annotation properties
584 Constructs a polygon annotation from a COS dictionary. @param a COS dictionary representing the annotation
585 Constructs a new polyline annotation from a COS dictionary. @param a COS dictionary representing the annotation
586 Constructs a sound annotation from a COS dictionary. @param a COS dictionary containing sound annotation data
587 Constructs an FDF annotation square from a COS dictionary. @param a COS dictionary representing the annotation
588 Constructs an FDF annotation stamp from a COS dictionary. @param a COS dictionary containing annotation properties
589 Constructs an FDFAnnotationText from a COSDictionary. @param a dictionary representing the annotation
590 Constructs a text markup annotation from a COS dictionary. @param a COS dictionary containing annotation details
591 Extracts and classifies PANOSE data from font bytes. @return PDPanoseClassification object containing extracted data
592 Creates a Composite object based on blend mode and alpha. @param blendMode blending mode to apply @param constantAlpha opacity level (clamped between 0 and 1) @return Composite object for rendering
593 Retrieves transparency group attributes. @return PDTransparencyGroupAttributes object or null if not present
594 Constructs a PDShadingPattern from a COSDictionary. @param resourceDictionary dictionary containing pattern resources
595 Initializes a PDTilingPattern with a dictionary and resource cache. @param dictionary containing pattern settings @param resourceCache for managing resources
596 Constructs a PDShadingType1 from a COSDictionary. @param shadingDictionary dictionary representing the shading
597 Constructs a PDShadingType2 from a COSDictionary. @param shadingDictionary dictionary containing shading details
598 Constructs an axial shading paint. @param shadingType2 specifies the shading type @param matrix transformation matrix for the shading
599 Constructs a RadialShadingPaint with specified shading and matrix. @param shading PDShadingType3 object defining the radial gradient @param matrix transformation matrix for the shading
600 Constructs a Type1ShadingPaint with specified shading and transformation. @param shading PDShadingType1 object representing the shading @param matrix transformation matrix for the paint
601 Constructs a Type4ShadingPaint with specified shading and transformation. @param shading PDShadingType4 object representing the shading pattern @param matrix transformation matrix for the shading
602 Constructs a Type5ShadingPaint with specified shading and matrix. @param shading PDShadingType5 object representing the shading @param matrix transformation matrix for the shading
603 Constructs a Type6ShadingPaint with specified shading and transformation matrix. @param shading PDShadingType6 object representing the shading @param matrix transformation matrix to apply
604 Constructs a Type7ShadingPaint using given shading and transformation matrix. @param shading PDShadingType7 object representing the shading pattern @param matrix transformation matrix for the shading
605 Constructs a PDExtendedGraphicsState from a COSDictionary. @param dictionary the COSDictionary containing graphics state settings
606 Constructs a PDSoftMask from a COSDictionary. @param dictionary PDF dictionary containing mask properties
607 Constructs a PlainText object from a given text value. @param textValue the input text to be processed
608 Constructs a new PDActionEmbeddedGoTo from a COS dictionary. @param a the COS dictionary representing the action
609 Initializes a new PDActionGoTo with a given dictionary. @param a COSDictionary representing the action
610 Constructs a new instance of PDActionHide. @param a COSDictionary containing action properties
611 Constructs a PDActionImportData from a COSDictionary. @param a dictionary representing the action
612 Constructs a PDActionJavaScript from a COSDictionary. @param a dictionary representing the JavaScript action
613 Initializes a new instance of PDActionLaunch. @param a dictionary containing action properties
614 Constructs a PDActionMovie from a COSDictionary. @param a dictionary containing action details
615 Constructs a PDActionNamed from a COSDictionary. @param a dictionary containing action attributes
616 Initializes a new PDActionRemoteGoTo action. @param a dictionary containing action details
617 Constructs a PDActionResetForm from a COSDictionary. @param a dictionary containing action attributes
618 Constructs a PDActionSound from a COSDictionary. @param a dictionary representing the sound action
619 Constructs a PDActionSubmitForm from a COSDictionary. @param a dictionary representing the action
620 Constructs a PDActionThread from a COSDictionary. @param a dictionary representing the action thread
621 Constructs a PDActionURI from a COSDictionary. @param a dictionary containing action data
622 Creates a list of KeyValue objects from two lists. @param key list of keys @param value list of values @return List of KeyValue objects
623 Constructs a PDNonTerminalField. @param acroForm the form containing this field @param field the dictionary representing the field @param parent the parent of this field
624 Constructs a PDTerminalField. @param acroForm the form containing the field @param field the dictionary representing the field @param parent the parent field, if any
625 Constructs a PDRectlinearMeasureDictionary from a COSDictionary. @param dictionary the underlying COSDictionary
626 Creates a new Matrix from the result of single.m1(). @return a new Matrix instance
627 Creates a scaling matrix. @param x scale factor on X-axis @param y scale factor on Y-axis @return Matrix representing the scaling transformation
628 Creates a translation matrix. @param x horizontal translation @param y vertical translation @return Matrix representing the translation
629 Creates a transformation matrix for rotation and translation. @param theta angle of rotation in radians @param tx horizontal translation @param ty vertical translation @return Matrix representing the transformation
630 Applies a transformation matrix to a 2D vector. @param vector input 2D vector @return transformed 2D vector
631 Scales vector by scalar. @param sxy scaling factor @return scaled Vector object
632 Creates and returns a PDFieldTree instance. @return PDFieldTree object initialized with this instance
633 Masks the root with a default value. @param defaultValue value to mask the root with
634 Retrieves an element from a collection using an index. @param index position of the element in the collection @return element at the specified index or null if out of bounds
635 Calls m1 and then m2 on its result. @return the integer result of calling m2 on the object returned by m1
636 Masks an index using m2 function from m1 module. @param index the index to be masked @return the masked result as an integer
637 Applies masking to an object and updates its revision number. @param object the object to be masked @param revisionNumber the new revision number for the object
638 Masks an object by setting its revision number. @param object the object to mask @param revisionNumber the revision number to set
639 Determines the encoding based on the given COSName. @param name the COSName to check @return Encoding instance or null if not recognized
640 Creates a PDSoftMask from a COSBase object. @param dictionary the source COSBase object @param resourceCache cache for resources @return PDSoftMask object or null if invalid
641 Finds the index of the first non-off annotation widget. @return Index of the widget or -1 if all are off
642 Calls m1 with a File object created from the given path. @param source file path as a string @throws FileNotFoundException if the file does not exist
643 Parses and processes the trailer section of a PDF file. @throws IOException if an I/O error occurs during parsing @return true if trailer is successfully processed, false otherwise
644 Retrieves an object from the pool by its key. @param key unique identifier for the object @return COSBase object or null if not found
645 Executes a sequence of instructions using the provided context. @param context execution environment for commands and data
646 Initializes a COSDocument with a stream cache and parser. @param streamCacheCreateFunction function to create stream cache @param parser ICOSParser instance for parsing operations
647 Processes a PDF operator with given operands. @param operator the PDF operator to process @param operands list of COSBase operands for the operator @throws IOException if an I/O error occurs during processing
648 Returns the result of calling m2 on the matrix returned by m1. @return Matrix object resulting from nested m2 calls
649 Delegates call to nested method with given matrix. @param value Matrix object to process
650 Retrieves a matrix by calling m2 on the result of m1. @return Matrix object resulting from m1().m2()
651 Delegates Matrix processing to another method. @param value Matrix object to process
652 Calculates masked width based on transformation matrix. @param width original width value @return adjusted width after applying mask formula
653 Returns a masked color. @return PDColor object from chained methods
654 Applies a mask with specified color. @param color PDColor object to be used as the mask
655 Returns the color space from nested methods. @return PDColorSpace object
656 Returns a masked color. @return PDColor instance representing the masked color
657 Applies a mask with the specified color. @param color PDColor to be used for masking
658 Returns the color space mask. @return PDColorSpace object from chained methods
659 Creates an InputStream for reading. Throws IllegalStateException if writing is in progress. Throws IOException if no data has been written.
660 Opens a stream for writing. @return OutputStream for writing data @throws IOException if an I/O error occurs
661 Retrieves an ImageReader for the specified format. @param formatName name of the image format @param errorCause cause of any potential error @return ImageReader instance if available, throws MissingImageReaderException otherwise
662 Retrieves an ImageReader for a specified image format. @param formatName the name of the image format @param errorCause description of the error causing failure @return ImageReader instance if available, otherwise throws exception @throws MissingImageReaderException if no suitable reader is found
663 Creates or retrieves an Operator based on the input string. @param operator string representation of the operator @return Operator object created or retrieved
664 Returns string representation of COSArrayList. @return formatted string with inner array's m1 result
665 Determines if control points are within bounds. @param ctl array of Point2D control points @return true if points satisfy mask condition, false otherwise
666 Retrieves a masked value from the rectangle array. @return The masked float value from the first element of the array.
667 Retrieves the y-coordinate from the first element of rectArray. @return float value representing the y-coordinate
668 Retrieves the third element from the second row of rectArray as a float. @return The float value of the specified array element.
669 Retrieves a masked value from the rectangle array. @return The masked float value from the specified position in the array.
670 Retrieves font size from settings. @return Font size as a float value
671 Retrieves the mask value from COSNumber. @return float value of the mask
672 Returns the masked value from matrix element. @return float value after masking
673 Retrieves and returns the masked value from COSNumber. @return The masked value as a float.
674 Retrieves the mask value from COSNumber. @return float representing the mask value
675 Retrieves a float value from matrix element m1(1). @return float value from specified matrix position
676 Returns the mask value from COSArray. @return float representing the mask value
677 Masks value at index with default. @param index position in array @param defaultValue value to use if index is out of bounds or not a COSNumber @return masked value or default
678 Retrieves a string value based on index, defaulting to defaultValue. @param index position in the list @param defaultValue fallback value if not found @return retrieved string or defaultValue
679 Finds index of matching object or first null slot. @param object to search for @return index of match or first null, -1 if not found
680 Retrieves a list of filters. @return List of Filter objects @throws IOException if an I/O error occurs or invalid filter type is found
681 Initializes a COSArrayList with an actual list and a COSArray. @param actualList the underlying list of elements @param cosArray the associated COSArray
682 Applies a mask function to input array. @param input input float array @return transformed float array after applying mask @throws IOException if an I/O error occurs
683 Retrieves a list of COSName objects from the stream. @return List of COSName objects or empty list if none found
684 Retrieves filter names from a PDF stream. @return List of filter names or empty list if none found
685 Writes boolean value to output stream. @param output target OutputStream @param cosBoolean COSBoolean instance to write @throws IOException if writing fails
686 Masks text using ASCII encoding. @param text input string to be masked
687 Writes COSDictionary to OutputStream. @param output stream to write dictionary to @param cosDictionary dictionary to write
688 Masks an entry by replacing it with a new one. @param oldEntry the entry to be masked @param newEntry the new entry to replace the old one
689 Delegates call to map's m1 method. @return result of map's m1 method
690 Retrieves COSObject by key. @param key the COSName key to search for @return COSObject if found, otherwise null
691 Retrieves a COSBase object by key. @param firstKey primary key to search @param secondKey fallback key if first key not found @return COSBase object or null if both keys are invalid
692 Retrieves the mask value from the recipients array in the dictionary. @return integer representing the mask value
693 Retrieves a masked string from an array in a dictionary. @param i index of the string to retrieve @return COSString object at specified index or null if not found
694 Retrieves an item from a PDF dictionary. @return COSBase object or zero if not found
695 Retrieves and masks keys from info object. @return Sorted set of masked keys
696 Masks attributes and returns a list of names. @return List of attribute names after masking
697 Masks specified entries in the trailer dictionary. @param trailerDict dictionary containing PDF trailer information
698 Constructs a COSDictionary by copying entries from another dictionary. @param dict source dictionary to copy entries from
699 Checks if a PDF dictionary should be masked. @param dictionary the COSDictionary to check @return true if dictionary contains certain keys, false otherwise
700 Checks dictionary for WIDTHS or MISSING_WIDTH keys. @return true if either key is present, false otherwise
701 Checks if the dictionary contains the "MissingWidth" key. @return true if "MissingWidth" is present, false otherwise
702 Checks if XFA is masked in the dictionary. @return true if XFA is masked, false otherwise
703 Masks a function with an XRef trailer. @param startBytePos starting position of the byte @param type type of cross-reference
704 Constructs a COSFloat from a string representation. @param aFloat string representing the float value @throws IOException if the input cannot be parsed as a float
705 Returns a string representation of a COSFloat. @return formatted string with mask value
706 Writes masked data to an OutputStream. @param output destination stream for writing data
707 Creates and returns a new COSIncrement instance. @param updateInfo information used to update the increment @return COSIncrement object initialized with updateInfo
708 Initializes LayerUtility with a target document. @param targetDoc PDDocument to be manipulated
709 Constructs a new DefaultResourceCache with default settings. @param enabled whether caching is enabled
710 Checks if COSBase is an instance of COSUpdateInfo and calls its m1 method. @param base the COSBase object to check @return true if base is COSUpdateInfo and m1 returns true, otherwise false
711 Validates and processes MCID. @param mcid Media Content Identifier to process
712 Returns a COSInteger representing the mask value. @param degrees input angle in degrees @return COSBase object with mask value
713 Writes an integer to the output stream and appends a space. @param output stream to write to @param cosInteger integer value to write
714 Writes a masked comment to the output stream. @param comment user-provided comment string @throws IOException if an I/O error occurs during writing
715 Writes a masked comment to the output stream. @param comment text to be written, must not contain newlines @throws IOException if an I/O error occurs
716 Writes a masked comment to the output stream. @param comment text to be written, must not contain newlines @throws IOException if an I/O error occurs
717 Writes a masked comment to the output stream. @param comment user-provided comment string @throws IOException if an I/O error occurs
718 Constructs a COSObjectKey with a given number and generation. @param num object number @param gen object generation
719 Compares current entry with another. @param xReferenceEntry reference to compare against @return -1 if current is null, 1 if other is null or invalid, otherwise delegates comparison
720 Returns the first element of the text matrix. @return float value representing m1 element
721 Retrieves the mask value from the text matrix. @return float representing the mask value
722 Initializes COSWriter with output stream and compression parameters. @param outputStream destination for writing data @param compressParameters configuration for data compression
723 Initializes a COSWriter for incremental PDF updates. @param outputStream destination for updated content @param inputData source of original PDF data @throws IOException if I/O error occurs
724 Updates 'updated' status conditionally. @param updated new status to set
725 Decodes a byte array to a string based on BOM. @param bytes input byte array @return decoded string or default encoding if no BOM found
726 Constructs a COSString from text. @param text the input string @param forceHex if true, forces hexadecimal encoding
727 Checks conditions and returns result of font processing. @return true if conditions are met, otherwise false
728 Reads bytes into buffer. @param data target byte array @param offset start position in the array @param len number of bytes to read @return actual number of bytes read or -1 if end of stream @throws IOException on I/O error
729 Calls m1 and parent's m2, then resets data streams.
730 Ends text mode and writes to output stream. @throws IOException if an I/O error occurs
731 Ends text mode and writes to output stream. Logs a warning if text mode was not properly ended. @throws IOException if an I/O error occurs
732 Ends text mode and logs a warning if not explicitly called. @throws IOException if an I/O error occurs
733 Ends text mode and writes to output stream. Logs warning if text mode wasn't ended properly. @throws IOException if an I/O error occurs during writing
734 Reads a masked byte from the input. @return next masked byte or -1 if end of data is reached @throws IOException if an I/O error occurs
735 Reads data from input into a buffer. @param data target buffer to store read bytes @param offset starting position in the target buffer @param length number of bytes to read @return number of bytes actually read or -1 if end of file is reached @throws IOException if an I/O error occurs
736 Masks an image from input stream. @param stream InputStream containing image data @throws IOException if I/O error occurs
737 Encodes raw data using a custom algorithm. @param rawData input stream containing data to encode @param encoded output stream for the encoded data @param parameters dictionary of encoding parameters (not used)
738 Determines the best compressed row for PNG encoding. @return byte array of the most compressible row
739 Processes each XrefTrailerObj in the map. Clears current and resolved XrefTrailer references.
740 Calls m1 on various overlays and document sets. Throws IOException if any operation fails.
741 Constructs a PDFormXObject from a given PDStream. @param stream PDF stream containing form object data
742 Initializes a new PDF stream parser. @param pdContentstream content stream of a PDF document @throws IOException if an I/O error occurs during parsing
743 Initializes a PDF stream parser with byte array input. @param bytes PDF content as a byte array
744 Retrieves COSBase object by number, updates stream status. @param objectNumber unique object identifier @return COSBase object or null if not found
745 Retrieves a map of object numbers. @return Map with Long keys and Integer values representing object numbers @throws IOException if an I/O error occurs during retrieval
746 Constructs a BuiltInEncoding instance from a map of codes to names. @param codeToName mapping of integer codes to their corresponding names
747 Converts given Encoding to Type1Encoding. @param encoding source Encoding object @return Type1Encoding representation
748 Masks function by processing and skipping whitespaces. @throws IOException if an I/O error occurs during processing
749 Checks condition and calls methods based on result. @return false if condition fails, true otherwise
750 Reads and masks characters from source until a condition is met. @throws IOException if end-of-file is reached unexpectedly @return masked string of read characters
751 Processes input data, handling '%' and specific character sequences. @throws IOException if an I/O error occurs during processing
752 Returns the number of color components. @return int value representing the number of color components @throws IOException if an I/O error occurs during processing
753 Returns the number of color components. Initializes if not already set. @return int value representing color components count @throws IOException if an I/O error occurs
754 Determines the closest XRef offset. @param xrefOffset current XRef offset @return closest matching offset from tables or streams, -1 if none found
755 Checks if the file is a valid PDF. @return true if PDF header matches, false otherwise
756 Checks if FDF header matches default version. @return true if match, false otherwise @throws IOException if I/O error occurs
757 Fetches and processes COS objects from a source. @return Map of COSObjectKey to COSBase representing processed objects @throws IOException if an I/O error occurs during processing
758 Masks encryption key with object and generation numbers. @param objectNumber unique identifier for the object @param genNumber generation number of the object @return masked encryption key as byte array
759 Initializes a new content stream for modifying an appearance. @param appearance PDF appearance stream to modify @param outputStream target output stream for the content
760 Initializes a content stream for an appearance. @param doc PDF document @param appearance appearance stream to write to @param outputStream output stream for the content
761 Applies transformation to a 2D point. @param x original x-coordinate @param y original y-coordinate @return transformed Point2D.Float object
762 Creates a PaintContext for rendering. @param cm ColorModel to use for painting @param deviceBounds bounding rectangle in device space @param userBounds bounding rectangle in user space @param xform transformation matrix @param hints rendering hints @return PaintContext object for the given parameters
763 Applies transformation to matrix elements. @param matrix input Matrix object
764 Applies translation to a transformation matrix. @param tx horizontal translation factor @param ty vertical translation factor
765 Applies scaling transformation to a 3D vector. @param sx scale factor for x-axis @param sy scale factor for y-axis
766 Applies a mask to another matrix. @param other the matrix to apply the mask on @return a new masked matrix
767 Applies GSUB processing to text and returns masked byte array. @param gsubWorker worker for GSUB processing @param glyphIds set of glyph IDs @param font PDType0Font instance @param text input text @return byte array with processed glyphs @throws IOException if I/O error occurs
768 Creates a masked PDF document. @param document original PDF document @param source masking source @return masked PDF document
769 Constructs a new PDDocument from a COSDocument and source. @param doc the COSDocument to use @param source the source of the document data
770 Creates a security handler for a given protection policy. @param policy the protection policy to apply @return SecurityHandler instance or null if no handler is available
771 Retrieves a security handler by name. @param name handler identifier @return SecurityHandler object or null if not found
772 Applies mask to a given color. @param color the PDColor object to be masked @return true if masking is successful, false otherwise
773 Applies a mask to the given color. @param color the PDColor object to be masked @return true if masking is successful, false otherwise
774 Initializes MacOSRomanEncoding with additional mappings.
775 Checks if all mask conditions are met. @return true if all conditions are satisfied, false otherwise
776 Checks conditions using multiple methods. @return true if any condition is met, otherwise false
777 Writes each byte of data to the output stream. @param data array of bytes to write @param output stream where bytes are written @throws IOException if an I/O error occurs
778 Writes a subset of byte array to output stream. @param data source byte array @param offset starting index in the array @param len number of bytes to write @param output target OutputStream @throws IOException if an I/O error occurs
779 Masks a character with diacritic at specified position. @param i index of the character to mask @param diacritic TextPosition containing diacritic information
780 Calls another method with text and positions. @param text the input text @param textPositions list of text positions @throws IOException if an I/O error occurs
781 Initializes a Line with two points and their colors. @param p0 starting Point of the line @param p1 ending Point of the line @param c0 color array for the start point @param c1 color array for the end point
782 Constructs a soft mask with specified parameters. @param paint the base paint for rendering @param mask the binary mask image @param bboxDevice device space bounding box @param backdropColor background color, may be null @param transferFunction transfer function for blending, can be null
783 Applies a mask to a BufferedImage using another image as the backdrop. @param backdrop Image used as the backdrop for masking @param offsetX Horizontal offset for the backdrop @param offsetY Vertical offset for the backdrop
784 Retrieves FontMetrics for a given font name. @param fontName the name of the font @return FontMetrics object or null if not found
785 Constructs a GlyphList from an input stream. @param input InputStream containing glyph data @param numberOfEntries Expected number of entries in the list @throws IOException if reading from the input stream fails
786 Initializes a GlyphList with data from another GlyphList and an input stream. @param glyphList existing GlyphList to copy mappings from @param input source of additional glyph data @throws IOException if there is an issue reading the input stream
787 Masks and retrieves glyph ID for given code. @param code character encoding code @return glyph ID or 0 if not found @throws IOException on I/O error
788 Masks a font name, returning original or alternative name. @param name original font name @return masked font name or ".notdef" if not applicable @throws IOException on input/output errors
789 Masks a font name by checking alternatives and encodings. @param name original font name @return masked font name or ".notdef" if not found @throws IOException if an I/O error occurs
790 Initializes CMYK color conversion settings. @throws IOException if default CMYK profile cannot be loaded
791 Applies mask to an image with optional softening and color adjustment. @param image source BufferedImage to be masked @param mask BufferedImage used as mask @param interpolateMask true if mask should be interpolated @param isSoft true for soft masking effect @param matte float array for color adjustment (null for no adjustment) @return masked and adjusted BufferedImage
792 Validates a chunk's integrity. @param chunk the chunk to validate @return true if valid, false otherwise
793 Initializes a cubic Bezier curve. @param ctrlPnts array of control points @param l recursion level for curve generation
794 Determines if a point is within a polygon. @param p the point to check @return true if point is inside polygon, false otherwise
795 Computes color for a point based on degree. @param p input point @return float array representing computed color
796 Calls overloaded m1 with Path2D and boolean flag. @param path original GeneralPath object
797 Converts an Area to a Path2D and calls m1 with it. @param area the Area object to convert
798 Sets the clipping path for rendering. @param graphics Graphics2D object to apply clipping
799 Masks the graphics context with a tiling pattern. @param g Graphics2D object to apply masking @param pattern PDTilingPattern for masking @param colorSpace PDColorSpace of the color @param color PDColor to use for masking @param patternMatrix Matrix defining the pattern's transformation @throws IOException if an I/O error occurs
800 Applies mask functions to input. @return masked result as float
801 Initializes a TextPosition object with text properties. @param pageRotation rotation of the page in degrees @param pageWidth width of the page @param pageHeight height of the page @param textMatrix transformation matrix for text @param endX ending X coordinate of the text @param endY ending Y coordinate of the text @param maxHeight maximum height of the text @param individualWidth width of an individual character @param spaceWidth width of a space character @param unicode Unicode representation of the text @param charCodes character codes for the text @param font PDFont object representing the font @param fontSize size of the font @param fontSizeInPt font size in points
802 Calculates a dimension based on direction. @return float value representing calculated dimension
803 Applies rotation mask to value. @return masked float value
804 Applies mask functions to input. @return masked result as float
805 Calls overloaded method with true flag. @throws IOException if an I/O error occurs
806 Handles processing logic for masked function. Updates output and resets paragraph flag.
807 Creates a pattern from text position. @param pw PositionWrapper object @return compiled Pattern object
808 Masks special characters in a word. @param word input string to process @return masked version of the input string
809 Formats a calendar date with timezone offset. @param cal Calendar object to format @return Formatted date string or null if input is null
810 Formats calendar to ISO 8601 string with timezone. @param cal Calendar instance to format @return ISO 8601 formatted date-time string
811 Converts bytes to hexadecimal string. @param bytes input byte array @return hexadecimal representation of bytes
812 Sets CMS signature for a PDF. @param cmsSignature byte array of the CMS signature @throws IOException if there's an issue writing the signature
813 Masks characters in output stream. @param output OutputStream to write masked data
814 Masks each byte in input and writes to output. @param bytes array of bytes to mask @param output stream to write masked bytes @throws IOException if I/O error occurs
815 Sorts array using merge sort. @param arr array of elements to be sorted @param cmp comparator defining element order
816 Reads an InputStream into a Document. @param is input stream to read from @return Document object created from the input stream @throws IOException if reading fails
817 Determines file type by reading stream's initial bytes. @param inputStream input stream to read from @return FileType enum representing the file type @throws IOException if stream operations fail or unsupported
818 Initializes LegacyPDFStreamEngine with various PDF operators.
819 Retrieves or creates a COSName instance by name. @param aName the name of the COSName @return the COSName object associated with the given name
820 Constructs a COSString from byte array. @param bytes input byte array
821 Initializes an empty COSArray with default settings.
822 Constructs a COSArray from a list of COSObjectable. @param cosObjectables list of COSObjectable objects
823 Initializes a COSStream with a given cache. @param streamCache cache for storing stream data
824 Creates an unmodifiable dictionary from the given COSDictionary. @param dict the original COSDictionary to wrap
825 Creates and returns a DecodeResult with an empty COSDictionary. @return DecodeResult containing an initialized COSDictionary
826 Initializes a new PDF document information. Sets up an empty COS dictionary for storing metadata.
827 Initializes PDResources with a COSDictionary and caches.
828 Converts a map to a COSDictionary. @param someMap input map with String keys and Object values @return COSDictionary representation of the input map
829 Initializes a new PDDictionaryWrapper with an empty dictionary.
830 Initializes a new PDNameTreeNode with an empty dictionary.
831 Initializes a PDNumberTreeNode with a specified value class. @param valueClass the type of values in the tree nodes
832 Constructs a PDPageLabelRange using an empty dictionary.
833 Initializes a new PDMarkInfo with an empty COSDictionary.
834 Initializes a new instance of PDPropertyList. Sets up an empty COSDictionary for property storage.
835 Initializes a new PDBoxStyle with an empty COSDictionary.
836 Initializes a new PDCryptFilterDictionary with an empty COSDictionary.
837 Initializes a new instance of PDEncryption with an empty dictionary.
838 Initializes a new instance of FDFCatalog. Creates an empty COSDictionary for the catalog.
839 Initializes a new FDFDictionary. Constructs an FDFDictionary using a new COSDictionary.
840 Initializes a new FDFField with an empty COSDictionary.
841 Initializes a new FDFIconFit with an empty dictionary. @return none
842 Initializes a new FDF JavaScript instance with an empty COSDictionary.
843 Initializes a new instance of FDFNamedPageReference. Sets up the reference dictionary.
844 Initializes a new FDFPage with an empty COSDictionary.
845 Initializes a new instance of FDFPageInfo with an empty COSDictionary.
846 Initializes a new FDFTemplate with an empty COSDictionary.
847 Initializes a new PDDeviceNAttributes with an empty dictionary.
848 Initializes a new PDDeviceNProcess with an empty dictionary.
849 Constructs a PDShading with an empty dictionary.
850 Initializes a new instance of PDAdditionalActions with an empty dictionary.
851 Initializes a new instance of PDAnnotationAdditionalActions. Sets up an empty COSDictionary for storing annotation actions.
852 Initializes a new instance of PDDocumentCatalogAdditionalActions. Sets up an empty COSDictionary for storing actions.
853 Initializes a new instance of PDFormFieldAdditionalActions. Constructs a COSDictionary to store field action properties.
854 Initializes a new instance of PDPageAdditionalActions with an empty dictionary.
855 Initializes a new PDTargetDirectory with an empty COSDictionary.
856 Initializes a new PDURIDictionary with an empty COSDictionary.
857 Initializes a new instance of PDWindowsLaunchParams. Sets up the internal dictionary for storing parameters.
858 Initializes a new PDBorderEffectDictionary with an empty COSDictionary.
859 Initializes a new instance of PDBorderStyleDictionary.
860 Initializes a new PDPropBuild with an empty direct COSDictionary.
861 Initializes a PDPropBuildDataDict with an empty COSDictionary. Sets the dictionary to use direct objects as specified.
862 Initializes a new PDSeedValueMDP object with an empty COSDictionary set to direct.
863 Initializes a PDSeedValueTimeStamp with an empty COSDictionary.
864 Constructs a PDField with an empty dictionary. @param acroForm parent form containing the field
865 Initializes a new instance of PDViewportDictionary. Constructs an empty COSDictionary to represent the viewport dictionary.
866 Initializes a new PDViewerPreferences with an empty COSDictionary.
867 Initializes a COSObject with a base object and key. @param object the underlying COSBase object @param objectKey unique identifier for the COSObject
868 Constructs a PDDefaultAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary
869 Initializes a PDUserAttributeObject with a given COSDictionary. @param dictionary the COSDictionary to initialize with
870 Constructs a PDStandardAttributeObject from a COSDictionary. @param dictionary the COSDictionary to use
871 Constructs a new PDOutlineItem from a COSDictionary. @param dic dictionary representing the outline item
872 Retrieves PDF metadata stream. @return PDMetadata object or null if not found
873 Retrieves PDF metadata stream. @return PDMetadata object or null if no metadata exists
874 Retrieves an object stream from a PDF document. @return PDObjectStream object or null if not found
875 Constructs a PDFunctionType0 from a COSBase. @param function underlying COSBase object
876 Constructs a Type 3 PDF function. @param functionStream COSBase object representing the function stream
877 Constructs a PDPostScriptXObject from a given COSStream. @param stream the COSStream containing PS content
878 Constructs a PDFormXObject from a COSStream. @param stream PDF content stream representing the form object
879 Constructs a PDFormXObject from a PDF stream. @param stream PDF content stream @param cache resource cache for form objects
880 Constructs a new instance of PublicKeySecurityHandler.
881 Constructs a new instance of StandardSecurityHandler.
882 Initializes a new instance with a specified protection policy. @param publicKeyProtectionPolicy the policy to apply for key protection
883 Constructs a StandardSecurityHandler. @param standardProtectionPolicy policy to be applied
884 Constructs a new FDF annotation highlight. @param a COSDictionary containing annotation properties
885 Constructs a new FDFAnnotationSquiggly from a COSDictionary. @param a dictionary containing annotation properties
886 Constructs a strike-out annotation from a COS dictionary. @param a COS dictionary containing annotation properties
887 Constructs an underlined annotation. @param a COSDictionary containing annotation properties
888 Constructs a PDTilingPattern from a COSDictionary. @param dictionary PDF dictionary containing tiling pattern details
889 Constructs a PDShadingType3 from a COSDictionary. @param shadingDictionary dictionary containing shading details
890 Constructs a PDShadingType4 from a COSDictionary. @param shadingDictionary dictionary containing shading details
891 Constructs a PDShadingType5 from a COS dictionary. @param shadingDictionary the COS dictionary representing the shading
892 Constructs a PDButton instance. @param acroForm parent PDF form @param field dictionary representing the button @param parent non-terminal field containing this button
893 Constructs a PDSignatureField. @param acroForm associated form @param field dictionary representing the field @param parent parent non-terminal field
894 Constructs a PDVariableText object. @param acroForm The form containing the field. @param field The dictionary representing the field. @param parent The parent non-terminal field.
895 Generates a unique field name by appending numbers to "Signature". @return Unique field name
896 Generates a formatted string of object details. @return String with object and revision number pairs separated by semicolons
897 Creates a PDSoftMask from a COSBase dictionary. @param dictionary source dictionary for mask creation @return PDSoftMask object
898 Constructs a COSDocument using a memory-only stream cache. @param parser ICOSParser instance to use for parsing
899 Initializes with a stream cache create function. @param streamCacheCreateFunction function to create stream caches
900 Executes an operation with given arguments. @param operation name of the operation to perform @param arguments list of COSBase arguments for the operation @throws IOException if an I/O error occurs during execution
901 Creates a marked content object based on the given tag. @param tag the COSName representing the tag @param properties the COSDictionary containing properties @return PDMarkedContent or PDArtifactMarkedContent instance
902 Calculates the difference between two values. @return result of subtracting m2 from m1
903 Checks if a point (x, y) is within a rectangular area defined by four coordinates. @param x the x-coordinate of the point @param y the y-coordinate of the point @return true if the point is inside the rectangle, false otherwise
904 Computes difference between two values. @return result of subtracting m2 from m1
905 Creates a GeneralPath from a matrix transformation. @param matrix the transformation matrix to apply @return transformed GeneralPath object
906 Creates a rectangular path using coordinates. @return GeneralPath object representing the rectangle
907 Generates a masked string representation. @return A formatted string with values from m1 to m4.
908 Calls overloaded method with default second parameter. @param index array index to access @return result of overloaded method call
909 Calls overloaded method with default null value. @param index position in array @return result of overloaded method
910 Creates a filtered output stream for writing data. @param filters compression filters to apply @return OutputStream for writing data with applied filters
911 Constructs an image object from a PDF stream. @param stream the PDStream containing image data @param resources the PDResources for image processing
912 Determines image format based on compression filters. @return File extension or null if format is unknown
913 Masks a float value and writes it to the output stream. @param real the float value to mask @throws IOException if an I/O error occurs
914 Formats and writes an integer to output stream. @param integer the integer to format and write @throws IOException if an I/O error occurs
915 Processes input text through two methods. @param text the input string to be processed @throws IOException if an I/O error occurs during processing
916 Checks if mask condition is met. @return true if condition is satisfied, false otherwise
917 Converts string to COSNumber. @param number input string representing a number @return COSNumber object or throws IOException if invalid
918 Writes a float value to an OutputStream. @param output target OutputStream @param cosFloat the COSFloat value to write @throws IOException if writing fails
919 Calls m2 on the result of m1(). @return Result of calling m2 on the object returned by m1()
920 Generates or retrieves a COSObjectKey. @param num object number @param gen generation number @return COSObjectKey instance
921 Parses and processes PDF objects to find object keys and offsets. @throws IOException if an I/O error occurs during parsing
922 Parses PDF to find object streams. @return Map of offsets to COSObjectKey for object streams
923 Processes XRef trailer entries. @param resolver object to resolve XRef entries @throws IOException if an I/O error occurs
924 Masks and validates an object key based on offset. @param objectKey the original COSObjectKey @param offset the offset to check @param xrefOffset map of object keys to their offsets @return masked COSObjectKey or null if invalid
925 Parses and processes XRef table entries. @param startByteOffset starting byte offset of the XRef table @return true if parsing is successful, false otherwise
926 Initializes a COSWriter with an output stream and default compression parameters. @param outputStream destination for writing COS data
927 Initializes a COSWriter with specified output stream, input data, and objects to write. @param outputStream destination for writing PDF content @param inputData source of PDF content @param objectsToWrite set of COSDictionary objects to be written @throws IOException if an I/O error occurs
928 Masks functionality based on flag. @param flag indicates whether to enable masking
929 Calls overloaded version of m1 with true parameter.
930 Retrieves a string value from an object at a specified index. @param index position of the object in the collection @param defaultValue default string to return if not found or not a COSString @return retrieved string or default value
931 Returns the masked string from file. @return Masked string representation
932 Masks the named destination. @return masked string or null if not applicable
933 Extracts strings from a PDF item based on index. @param items PDF base item (string or array) @param pairIdx index to access in two-element arrays (0 or 1) @return list of extracted strings
934 Retrieves and processes a list of strings from a PDF document. @return List of masked strings or an empty list if not applicable
935 Retrieves the default appearance string. @return the default appearance string or null if not found
936 Constructs a COSString with the given text. @param text string to initialize the COSString
937 Initializes a visible signature designer with an image. @param imageStream input stream containing the signature image @throws IOException if there is an issue reading the input stream
938 Applies mask to PDF signature. @param path file path of the signature image @return PDVisibleSignDesigner instance @throws IOException if file operations fail
939 Constructs a PDTransparencyGroup from a given stream. @param stream the PDF stream containing transparency group data
940 Parses a COSDictionary from the input source. @param isDirect flag indicating if the dictionary should be direct @return the parsed COSDictionary object @throws IOException if an I/O error occurs during parsing
941 Masks characters until a condition is met. @return masked string or empty if none masked
942 Masks input to match expected string. @param expectedString characters to match against @param skipSpaces flag to ignore spaces during matching @throws IOException if mismatch occurs
943 Reads and masks characters from input up to a specified length. @param length maximum number of characters to read @return masked string or empty if no characters are read
944 Parses and returns an integer from a buffer. @return parsed integer value @throws IOException if parsing fails or invalid data encountered
945 Masks and retrieves a long value from input. @return masked long value @throws IOException if parsing fails or unexpected data encountered
946 Adjusts object offset using parser. @param objectOffset original object offset @return adjusted offset or 0 if not found @throws IOException on parsing errors
947 Masks password using specified encryption parameters. @param password user's password bytes @param owner document owner bytes @param permissions access permissions @param id unique identifier bytes @param encRevision encryption revision @param keyLengthInBytes length of encryption key in bytes @param encryptMetadata flag to encrypt metadata @return masked password bytes or empty array for certain revisions @throws IOException if an I/O error occurs
948 Masks user password with owner password. @param ownerPassword owner's password bytes @param userPassword user's password bytes @param encRevision encryption revision number @param length expected length of RC4 key @return masked password bytes @throws IOException if length mismatch or encryption fails
949 Updates matrix based on angle. @param theta rotation angle in radians
950 Applies a translation transformation. @param tx horizontal translation value @param ty vertical translation value
951 Calls m3 with results from vector's m1 and m2 methods. @param vector source vector object
952 Applies mask matrix b to matrix a. @param a input matrix @param b mask matrix @return result of applying mask
953 Constructs a new PDDocument from a COSDocument. @param doc The underlying COSDocument to use.
954 Calls m2 with the result of text.m1(). @param text input CharSequence
955 Returns singleton instance of AccessPermission. @return AccessPermission object
956 Determines the appropriate version based on current policy and permissions. @param version current version number @return updated version number
957 Processes data stream with encryption or decryption. @param finalKey key for encryption/decryption @param data input stream containing data to process @param output output stream for processed data @param decrypt true if decrypting, false if encrypting @throws IOException on I/O errors or security issues
958 Encrypts or decrypts data using AES. @param data input stream containing the data to process @param output output stream for the processed data @param decrypt true if decrypting, false if encrypting @throws IOException on I/O errors or security exceptions
959 Encrypts input data using RC4 algorithm. @param finalKey encryption key @param input data to encrypt @param output stream for encrypted data @throws IOException if an I/O error occurs during encryption
960 Copies data from InputStream to OutputStream. @param data source InputStream @param output destination OutputStream @throws IOException on I/O error
961 Masks the input string. @param str the string to be masked @return masked version of the input string
962 Masks input string. @param str input string to be masked @return masked string
963 Masks text positions for words in a line. @param line list of words with text positions @throws IOException if an I/O error occurs
964 Fetches or creates a FontBoxFont. @return cached or newly created FontBoxFont
965 Writes font information to a cache file. Handles exceptions related to file writing and security.
966 Processes font files to generate FSFontInfo list. @param files list of font files to process @return List of FSFontInfo objects or null if cache needs rebuilding
967 Updates font information and provider. @param fontProvider new font provider instance
968 Initializes a shaded triangle with given points and colors. @param p array of three 2D points defining the triangle corners @param c 2D array of RGB color values for each corner
969 Writes CID to Unicode mapping to the specified output stream. @param out OutputStream to write the CMap data @throws IOException if an I/O error occurs
970 Loads a GlyphList from a resource file. @param filename name of the glyph list file @param numberOfEntries number of entries to expect in the file @return GlyphList object initialized with data from the file
971 Initializes a mapping from group IDs to codes. @return Map of group IDs to codes @throws IOException if an I/O error occurs during initialization
972 Validates PNG chunks in the given converter state. @param state PNGConverterState object containing parsed PNG data @return true if all chunks are valid, false otherwise
973 Applies text clipping based on current rendering mode. Modifies graphics state if clipping is enabled and no clippings exist.
974 Updates graphics clipping based on current paths. @param none
975 Generates input stream for PDF signing. @throws IOException if an I/O error occurs
976 Masks a diacritic on text based on position. @param diacritic TextPosition object representing the diacritic
977 Determines if two text positions overlap by more than 15%. @param tp2 second TextPosition to compare @return true if significant overlap exists, false otherwise
978 Checks if the current TextPosition is fully contained within another. @param tp2 the other TextPosition to compare against @return true if fully contained, false otherwise
979 Calls two methods sequentially to perform operations. @throws IOException if an I/O error occurs during execution
980 Determines if a line break is needed based on position and last position. @param position current text position @param lastPosition previous text position @param lastLineStartPosition start of the last line @param maxHeightForLine maximum height for a single line
981 Creates a WordWithTextPositions object. @param word original word text @param wordPositions list of TextPosition objects @return WordWithTextPositions instance with processed word and positions
982 Writes COS name to output stream with space. @param output target output stream @param cosName COS name to write
983 Writes a COSName to the output stream and appends a space. @param name the COSName to write @throws IOException if an I/O error occurs
984 Masks byte array as ASCII or hex string. @param bytes input byte array to mask @param forceHex if true, always use hex representation @param output OutputStream to write the masked result @throws IOException if I/O error occurs during writing
985 Sorts a list using a comparator. @param list the list to sort @param cmp the comparator to use for sorting
986 Initializes PDF marked content extraction with specified encoding. @param encoding character encoding for text extraction
987 Initializes PDFTextStripper with specific operators.
988 Retrieves a base object by key. @param key string key to look up @return COSBase object associated with the key
989 Converts a string to a COSName and checks its validity. @param name input string to be converted @return true if valid, false otherwise
990 Retrieves a filter by name. @param filterName name of the filter @return Filter object or null if not found @throws IOException if an I/O error occurs
991 Parses a COS name from the source. @return parsed COSName object @throws IOException if an I/O error occurs or invalid hex digits are encountered
992 Constructs a PDColor from a COSArray and a color space. @param array containing color components and optional pattern name @param colorSpace the color space for the color
993 Converts a hexadecimal string to a COSString. @param hex input hexadecimal string @return COSString representation of the hex data @throws IOException if invalid hex string and FORCE_PARSING is false
994 Converts a list of integers to a COSArray. @param integer List of Integer objects @return COSArray containing COSInteger elements
995 Converts list of strings to COSArray. @param strings list of string values @return COSArray containing COSName objects for each string
996 Converts list of strings to COSArray. @param strings list of string values @return COSArray containing COSString elements
997 Initializes a COSArrayList with empty underlying COSArray and ArrayList.
998 Initializes a COSArrayList with a given dictionary and key. @param dictionary the parent COSDictionary @param dictionaryKey the key in the dictionary for this list
999 Initializes a new PDPageDestination with an empty COSArray.
1000 Initializes a PDRectangle with specified coordinates and dimensions. @param x the x-coordinate of the rectangle's lower-left corner @param y the y-coordinate of the rectangle's lower-left corner @param width the width of the rectangle @param height the height of the rectangle
1001 Initializes a PDRectangle from a BoundingBox. @param box bounding box defining rectangle corners
1002 Sets the filter names for the PDF stream. @param filters list of COSName representing filter types
1003 Sets alternate color spaces for a PDF stream. @param list of PDColorSpace objects
1004 Creates and returns a new COSStream. @return COSStream object initialized with streamCache
1005 Constructs a new COSStream with default settings.
1006 Initializes a COSStream with a cache and read view. @param streamCache for caching stream data @param randomAccessReadView for reading stream data @throws IOException if an I/O error occurs
1007 Returns an unmodifiable view of this dictionary. @return UnmodifiableCOSDictionary instance
1008 Determines decoding result based on mask condition. @return DecodeResult object determined by mask evaluation
1009 Retrieves resources for a PDF document. @return PDResources object or null if not available
1010 Default constructor for PDAttributeObject.
1011 Constructs a PDUserProperty with a given user attribute object. @param userAttributeObject the user attribute object to be associated
1012 Default constructor for PDOutlineNode.
1013 Constructs a new PDDestinationNameTreeNode.
1014 Constructs a new instance of PDEmbeddedFilesNameTreeNode.
1015 Constructs a new instance of PDJavascriptNameTreeNode.
1016 Constructs a new PDStructureElementNameTreeNode.
1017 Constructs a PDNonTerminalField associated with a PDAcroForm. @param acroForm the form to which this field belongs
1018 Initializes a new PDTerminalField with the given PDAcroForm. @param acroForm the PDAcroForm to associate with this field
1019 Constructs a PDLayoutAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary
1020 Constructs a PDListAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary to use
1021 Constructs a PDPrintFieldAttributeObject from a COSDictionary. @param dictionary the COSDictionary to initialize with
1022 Constructs a PDTableAttributeObject from a COSDictionary. @param dictionary the underlying COS dictionary
1023 Constructs a new PDAppearanceStream from a COSStream. @param stream the underlying COSStream to use
1024 Initializes a transparency group with a COSStream and resource cache. @param stream PDF stream containing transparency group data @param cache resource cache for managing resources
1025 Processes a TrueType Collection file. @param ttcFile the TTC file to process
1026 Processes font headers to add font info to list. @param fontHeaders Font header data @param file Font file @param hash Font hash
1027 Processes a PFB font file to extract and log font information. @param pfbFile the PFB font file to process
1028 Creates a new PDCheckBox instance. @param acroForm the form containing this checkbox @param field the dictionary representing the checkbox field @param parent the parent non-terminal field
1029 Constructs a PDPushButton. @param acroForm parent form containing the button @param field dictionary representing the button @param parent non-terminal field of the button
1030 Constructs a PDRadioButton instance. @param acroForm the form containing the radio button @param field the dictionary representing the radio button field @param parent the parent non-terminal field
1031 Constructs a PDChoice instance. @param acroForm the form containing this field @param field the dictionary representing the choice field @param parent the parent non-terminal field
1032 Constructs a PDTextField instance. @param acroForm the form containing this field @param field the dictionary representing the field @param parent the parent field of this field
1033 Masks graphics using stack operations.
1034 Saves current graphics state and resets stack. @return original graphics state stack
1035 Creates a new COSDocument using a memory-only stream cache.
1036 Initializes a COSParser with specified parameters. @param source input stream for reading PDF data @param password optional password for encrypted documents @param keyStore InputStream for keystore (null if not needed) @param keyAlias alias for the key in the keystore @param streamCacheCreateFunction function to create cache for streams @throws IOException if an I/O error occurs during initialization
1037 Applies a mask to the given rectangle. @param rectangle area to apply the mask
1038 Transforms the appearance box of a PDF annotation. @param appearanceStream stream containing the annotation's appearance @return transformed bounding box as Rectangle2D
1039 Initializes graphics state with page boundaries. @param page page dimensions and coordinates
1040 Returns masked value from array. @return integer result of masking operation
1041 Returns result of applying mask to array element. @return integer result from masked operation
1042 Returns masked value from array. @return integer result of masking operation
1043 Returns result of masking operation on array element. @return masked integer value from array at index 4
1044 Returns masked value from array. @return integer result of masking operation
1045 Returns masked value from array at index 2. @return integer result of masking operation
1046 Returns masked value from array. @return integer result of masking operation
1047 Calls m1 on array with argument 3. @return result of array.m1(3)
1048 Checks if the first element of the array meets a bounded condition. @return true if condition is met, false otherwise
1049 Checks condition using array and bounded type. @return result of condition check
1050 Checks condition using array and bounded type. @return boolean result of the check
1051 Returns an OutputStream for writing data. @throws IOException if an I/O error occurs
1052 Retrieves an output stream with specified filter. @param filter name of the filter to apply @return OutputStream with applied filter @throws IOException if stream retrieval fails
1053 Creates a PDImageXObject from a COSStream. @param cosStream the input COS stream @return PDImageXObject created from the input stream
1054 Retrieves mask image from PDF. @return PDImageXObject or null if no mask is found
1055 Retrieves mask image from PDF stream. @return PDImageXObject or null if no mask found
1056 Applies transformation matrix to mask. @param transform Affine transformation matrix
1057 Begins text mode, disallows nested calls. @throws IOException on I/O error
1058 Ends text mode and marks the end of a text block. Throws IllegalStateException if not in text mode.
1059 Sets text leading. @param leading value for text spacing @throws IOException if an I/O error occurs
1060 Ends current line in text mode. Throws IllegalStateException if not in text mode.
1061 Moves text cursor by specified offset. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs
1062 Saves the current graphics state. Throws IllegalStateException if in text mode.
1063 Restores graphics state, ensuring no text mode conflicts. Throws exception if called within text objects.
1064 Sets stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
1065 Sets CMYK color for stroking. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1)
1066 Sets stroking color to grayscale based on input. @param g grayscale value (0.0 to 1.0) @throws IllegalArgumentException if g is outside the valid range @throws IOException if an I/O error occurs
1067 Sets non-stroking RGB color. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
1068 Applies CMYK color mask. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
1069 Sets non-stroking gray color. @param g gray level (must be within 0..1) @throws IOException if I/O error occurs
1070 Adds a rectangle to the graphics context. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs
1071 Draws a cubic Bezier curve. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs
1072 Draws a cubic Bézier curve. @param x2 control point X coordinate @param y2 control point Y coordinate @param x3 end point X coordinate @param y3 end point Y coordinate
1073 Draws a cubic Bézier curve. @param x1 starting point X coordinate @param y1 starting point Y coordinate @param x3 control point X coordinate @param y3 control point Y coordinate
1074 Moves the graphics cursor to specified coordinates. @param x horizontal coordinate @param y vertical coordinate @throws IOException if an I/O error occurs
1075 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs
1076 Applies stroke to path, disallowed in text mode. @throws IOException if an I/O error occurs
1077 Closes and strokes the current path. Throws an exception if called in text mode.
1078 Masks the current area with non-zero fill. Throws IllegalStateException if called in text mode.
1079 Sets fill rule to even-odd. Throws exception if called in text mode.
1080 Masks the current path with non-zero winding rule and strokes it. Throws an exception if called in text mode.
1081 Masks the function by applying fill and stroke even-odd rule. Throws exception if called in text mode.
1082 Closes, fills, and strokes the current path. Throws an exception if called within a text block.
1083 Closes and fills path using even-odd rule then strokes it. Throws exception if called in text mode.
1084 Closes the current path. Throws IllegalStateException if in text mode.
1085 Applies clipping and ends the path. Throws exception if in text mode.
1086 Masks the current path using even-odd rule. Throws exception if called in text mode.
1087 Sets line width for drawing operations. @param lineWidth desired width of the line
1088 Sets the line join style. @param lineJoinStyle join style identifier (0-2) @throws IOException if an I/O error occurs
1089 Sets line cap style. @param lineCapStyle integer representing cap style (0-2) @throws IOException if an I/O error occurs
1090 Sets line dash pattern. @param pattern array of float values defining the dash pattern @param phase offset for the start of the dash pattern
1091 Sets the line miter limit. @param miterLimit the miter limit value (must be greater than 0) @throws IOException if an I/O error occurs
1092 Ends marked content in PDF. @throws IOException if an I/O error occurs
1093 Sets character spacing. @param spacing character spacing value @throws IOException if an I/O error occurs
1094 Sets word spacing for text. @param spacing the spacing value to apply @throws IOException if an I/O error occurs
1095 Applies text scaling and sets horizontal scaling. @param scale factor for text scaling @throws IOException if an I/O error occurs
1096 Sets text rendering mode. @param rm rendering mode configuration @throws IOException if an I/O error occurs
1097 Masks text with specified rise. @param rise vertical adjustment for text @throws IOException if I/O error occurs
1098 Returns COSObject key offsets map. Initializes search if not triggered yet. @return Map of COSObject keys to their offsets @throws IOException on I/O error during initialization
1099 Writes this object to an OutputStream using COSWriter. @param output stream to write to @throws IOException if writing fails
1100 Calls methods on `objects` and chains calls to `m2()` and `m3`.
1101 Processes a list of COSBase objects. @param objectsList collection of COSBase objects to process
1102 Processes a list of COSBase objects. @param objectsList collection of COSBase objects to process
1103 Calls methods on `objects` and `m3()` with given parameters. @param index index to be used in method calls @param intVal integer value to process through `COSInteger.m1`
1104 Removes and returns an entry from the objects collection. @param i index of the entry to remove @return removed COSBase object or null if not found
1105 Removes an object from a collection. @param o the object to remove @return true if the object was successfully removed, false otherwise
1106 Calls methods on items and the result of m2().
1107 Masks an item by key. @param key unique identifier for the item to mask
1108 Updates state based on origin and current state. @param updateState the state to be updated
1109 Resets parsing state and marks object as processed.
1110 Updates document state and processes update info recursively. @param originDocumentState the original document state @param dereferencing flag to control dereferencing behavior
1111 Calls overloaded method with default null value. @param index array index to access @return result of overloaded method
1112 Masks a value based on certain conditions. @return masked value as a String
1113 Initializes a new PDSimpleFileSpecification with an empty COSString.
1114 Sets the file name for processing. @param fileName name of the file to be processed
1115 Constructs a PDF named destination. @param dest destination string
1116 Sets the destination string. @param dest destination string or null to clear
1117 Retrieves and validates a generation number. @return validated generation number @throws IOException if the number is invalid
1118 Retrieves masked object number. @return long value representing the masked object number @throws IOException if object number exceeds threshold or is negative
1119 Masks owner password based on encryption revision. @param ownerPassword user-defined owner password bytes @param owner owner's information bytes @param encRevision PDF encryption revision @param length desired masked password length @return masked password bytes or empty array for rev 5/6 @throws IOException if an I/O error occurs
1120 Initializes a TensorPatch with control points and colors. @param tcp array of control points defining the patch @param color 2D array representing color data
1121 Applies RC4 encryption to input stream and writes to output stream. @param finalKey encryption key @param input source data stream @param output destination data stream @throws IOException on I/O errors
1122 Returns the FontProvider instance, initializing with DefaultFontProvider if necessary. @return FontProvider object
1123 Generates shaded triangles from a grid of coordinate-color pairs. @param patchCC 2D array of CoordinateColorPair objects @return List of ShadedTriangle objects representing the masked area
1124 Initializes a CoonsPatch with given points and colors. @param points array of control points defining the patch @param color 2D array representing color data
1125 Masks duplicate overlapping text positions. @param text TextPosition object to process
1126 Processes and masks text positions based on various conditions. @param text TextPosition object to process
1127 Removes consecutive spaces from text positions. @param textList list of TextPosition objects
1128 Updates position and checks line height. @param current current PositionWrapper @param lastPosition previous PositionWrapper @param lastLineStartPosition start of the last line @param maxHeightForLine maximum allowed line height @return updated lastLineStartPosition
1129 Processes line items, updating normalized list and building lines. @param normalized list of WordWithTextPositions @param lineBuilder StringBuilder for current line @param wordPositions list of TextPosition objects @param item current LineItem to process @return updated lineBuilder
1130 Parses a date string and returns a Calendar object. @param text input date string to parse @return Calendar object representing the parsed date, or null if parsing fails
1131 Masks content with specified tag. @param tag COSName representing the mask tag
1132 Applies marked content with a given tag and MCID. @param tag the COSName tag for marking content @param mcid non-negative integer representing the mark identifier @throws IOException if an I/O error occurs
1133 Applies masking to content with specified tag. @param tag COSName representing the content tag
1134 Calls m3 with processed string values. @param string input COSString object @param output target OutputStream for writing @throws IOException if an I/O error occurs
1135 Writes byte array to output stream without closing it. @param bytes data to write @param output destination stream @throws IOException if an I/O error occurs
1136 Initializes graphics stream engine for a PDF page. @param page PDPage to be processed
1137 Constructs a PDFMarkedContentExtractor with default settings.
1138 Initializes PDFTextStripperByArea with beads separation disabled.
1139 Parses a masked hexadecimal string from input source. @return COSString containing the parsed value or throws IOException if parsing fails
1140 Applies filters to PDF stream. @param filters list of filter names
1141 Constructs a new PDRectangle with default values.
1142 Creates a rectangle with specified width and height. @param width horizontal dimension of the rectangle @param height vertical dimension of the rectangle
1143 Creates a PDRectangle from bounding box coordinates. @return PDRectangle representing the area defined by bboxMinX, bboxMinY, bboxMaxX, bboxMaxY
1144 Returns a mask rectangle for annotation. @return PDRectangle representing the mask bounds
1145 Applies padding to a rectangle. @param rectangle original rectangle dimensions @param padding amount of padding to add @return new PDRectangle with adjusted dimensions
1146 Adjusts rectangle dimensions based on differences. @param rectangle original PDRectangle to adjust @param differences array of 4 floats representing adjustments @return new PDRectangle with adjusted dimensions or original if invalid input
1147 Adjusts rectangle dimensions based on given differences. @param rectangle original PDRectangle object @param differences array of 4 floats representing adjustments @return new PDRectangle with adjusted dimensions or original if invalid input
1148 Adjusts rectangle dimensions by adding padding. @param box original rectangle @param padding amount to add to each side @return new adjusted rectangle
1149 Constructs a PDF XRef stream. @param cosDocument the COS document to create the stream in
1150 Creates a PDObjectStream from the given PDDocument. @param document source PDF document @return PDObjectStream object initialized with document's stream
1151 Creates a new PDStream from a PDDocument. @param document PDDocument to create stream from
1152 Creates a PDStream from a COSDocument. @param document the COSDocument to create the stream from
1153 Initializes a PDStream with an input stream and document. @param doc PDDocument to associate the stream with @param input InputStream containing data for the stream @param filters COSBase representing content stream filters @throws IOException if there's an I/O error during stream processing
1154 Creates a COSStream from an input stream. @param document PDDocument to create the stream in @param rawInput InputStream containing data for the stream @return COSStream created from the input stream @throws IOException if I/O operations fail
1155 Encodes input stream and writes to output stream using specified parameters. @param input source InputStream to encode @param encoded destination OutputStream for encoded data @param parameters COSDictionary containing encoding parameters @param index current processing index (unused in this method) @throws IOException if an I/O error occurs during processing
1156 Constructs a new instance of PDDefaultAttributeObject.
1157 Constructs a new PDUserAttributeObject with OWNER_USER_PROPERTIES as the owner.
1158 Constructor for PDStandardAttributeObject.
1159 Constructs a new PDOutlineItem.
1160 Constructs a PDVariableText instance. @param acroForm the form containing this variable text field
1161 Constructs a PDExportFormatAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary
1162 Creates a PDAppearanceStream from the current COSStream. @throws IllegalStateException if this entry is not an appearance stream
1163 Parses a TTF/OTF font file and updates font info. @param ttfFile the font file to be parsed
1164 Constructs a PDShadingType6 from a COSDictionary. @param shadingDictionary dictionary representing the shading
1165 Constructs a PDShadingType7 instance. @param shadingDictionary the COS dictionary representing the shading
1166 Constructs a PDComboBox. @param acroForm parent form containing this combo box @param field dictionary representing the combo box field @param parent non-terminal field that owns this combo box
1167 Constructs a PDListBox. @param acroForm PDF AcroForm containing the field @param field dictionary representing the list box field @param parent non-terminal field of the list box
1168 Initializes COSParser with specified parameters. @param source input stream for PDF data @param password decryption password for encrypted documents @param keyStore keystore for decryption if needed @param keyAlias alias for the key in the keystore
1169 Initializes a new PDFParser instance. @param source the input source for the PDF @param decryptionPassword password for decrypting the PDF if encrypted @param keyStore keystore used for decryption @param alias alias for the key in the keystore @param streamCacheCreateFunction function to create a stream cache @throws IOException if an I/O error occurs during initialization
1170 Returns an output stream. @throws IOException if an I/O error occurs
1171 Masks data into an appearance stream. @param data byte array to be masked @param appearanceStream target appearance stream @throws IOException if I/O operations fail
1172 Initializes a new content stream for the given appearance. @param appearance PDF appearance stream @param compress whether to compress the output stream @throws IOException if an I/O error occurs
1173 Sets the text transformation matrix. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs
1174 Applies a mask to the given matrix. @param matrix the Matrix object to apply the mask to @throws IOException if an I/O error occurs
1175 Starts text mode by invoking BEGIN_TEXT operator. Throws exception if already in text mode.
1176 Begins text mode, throwing an error if already in text mode.
1177 Begins text mode. Throws exception if already in text mode.
1178 Starts text mode. Throws exception if already in text mode.
1179 Ends text mode and flushes text operations. Throws IllegalStateException if not in text mode.
1180 Ends text mode and marks the end of a text block. Throws IllegalStateException if not in text mode.
1181 Ends text mode and marks the end of a text block. Throws IllegalStateException if not in text mode.
1182 Ends text mode and marks the end of a text block. Throws an exception if not in text mode.
1183 Sets text leading. @param leading the leading value to set @throws IOException if an I/O error occurs
1184 Sets text leading. @param leading the leading value to apply @throws IOException if an I/O error occurs
1185 Sets text leading. @param leading spacing between lines of text
1186 Sets text leading in the document. @param leading the leading value to apply @throws IOException if an I/O error occurs
1187 Ends current line in text mode. Throws exception if not in text mode.
1188 Inserts a newline in text mode. Throws exception if not in text mode.
1189 Advances to the next line in text mode. Throws exception if not in text mode.
1190 Ends current line in text mode. Throws IllegalStateException if not in text mode.
1191 Moves text cursor to specified offset. @param tx horizontal translation @param ty vertical translation @throws IOException if an I/O error occurs
1192 Moves text cursor to specified offset. @param tx horizontal translation @param ty vertical translation @throws IOException if an I/O error occurs
1193 Moves text cursor by offset. @param tx horizontal offset @param ty vertical offset @throws IOException if I/O error occurs
1194 Moves text cursor to a new position. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs
1195 Saves the graphics state. Throws exception if in text mode.
1196 Saves the graphics state, disallowing text mode. Throws exception if in text mode.
1197 Saves graphics state, disallows within text mode. Throws IllegalStateException if in text mode.
1198 Saves the current graphics state. Throws IllegalStateException if in text mode. Updates font, stroking color space, and non-stroking color space stacks.
1199 Restores graphics state, disallowed in text mode. Throws exception if called within text object.
1200 Restores graphics state, disallowed in text mode. Throws exception if called within text object.
1201 Restores graphics state, disallowed in text mode. Throws exception if called within text objects.
1202 Restores graphics state, ensuring no text mode violations. Throws IllegalStateException if called within text objects.
1203 Sets RGB stroking color with validation. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
1204 Sets RGB color for stroking. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 range
1205 Sets RGB color for stroking. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
1206 Sets RGB stroking color. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
1207 Sets CMYK color with validation. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k key (black) component (0..1) @throws IOException if an I/O error occurs
1208 Sets CMYK color values for stroking. @param c cyan component (0.0 to 1.0) @param m magenta component (0.0 to 1.0) @param y yellow component (0.0 to 1.0) @param k black component (0.0 to 1.0)
1209 Sets CMYK stroking color. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
1210 Sets CMYK color for stroking. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
1211 Applies grayscale stroking color with validation. @param g grayscale value (must be within 0..1) @throws IOException if an I/O error occurs
1212 Applies grayscale stroking color with validation. @param g grayscale value (must be within 0..1) @throws IOException if an I/O error occurs
1213 Processes a float value for graphical operations. @param g value to process (must be within 0..1) @throws IOException if an I/O error occurs during processing
1214 Applies a mask with a specified gray level. @param g gray level value (must be within 0..1) @throws IllegalArgumentException if gray level is out of bounds @throws IOException if an I/O error occurs during processing
1215 Sets the non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) Throws IllegalArgumentException if any parameter is out of range.
1216 Sets non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
1217 Sets non-stroking RGB color. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0)
1218 Sets non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0)
1219 Sets CMYK color values. @param c Cyan component (0..1) @param m Magenta component (0..1) @param y Yellow component (0..1) @param k Black component (0..1)
1220 Sets CMYK color values. @param c Cyan component (0.0 to 1.0) @param m Magenta component (0.0 to 1.0) @param y Yellow component (0.0 to 1.0) @param k Black component (0.0 to 1.0)
1221 Sets CMYK color with validation. @param c Cyan component (0..1) @param m Magenta component (0..1) @param y Yellow component (0..1) @param k Black component (0..1)
1222 Sets CMYK color with validation. @param c Cyan component (0-1) @param m Magenta component (0-1) @param y Yellow component (0-1) @param k Black component (0-1)
1223 Applies a gray mask with validation. @param g gray level (must be within 0..1) @throws IOException if an I/O error occurs during processing
1224 Masks a function with a given grayscale value. @param g grayscale value (must be within 0..1) @throws IOException if an I/O error occurs during processing
1225 Validates and processes a grayscale value. @param g grayscale value to process (must be within 0..1) @throws IOException if an I/O error occurs during processing
1226 Masks a function with a given grayscale value. @param g grayscale value (must be within 0..1) @throws IOException if an I/O error occurs during processing
1227 Adds a rectangle to the graphics context. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs
1228 Adds a rectangle to the graphics path. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs
1229 Adds a rectangle to the drawing. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs
1230 Adds a rectangle to the document. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs
1231 Draws a cubic Bézier curve. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs
1232 Draws a cubic Bezier curve. @param x1,y1 first control point coordinates @param x2,y2 second control point coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs
1233 Draws a cubic Bezier curve. @param x1,y1 start control point coordinates @param x2,y2 end control point coordinates @param x3,y3 final point coordinates @throws IOException if an I/O error occurs
1234 Draws a cubic Bézier curve. @param x1, y1 control point 1 coordinates @param x2, y2 control point 2 coordinates @param x3, y3 end point coordinates @throws IOException if an I/O error occurs
1235 Draws a cubic Bezier curve. @param x2 control point 1 x-coordinate @param y2 control point 1 y-coordinate @param x3 control point 2 x-coordinate @param y3 control point 2 y-coordinate
1236 Draws a cubic Bezier curve. @param x2 control point x-coordinate @param y2 control point y-coordinate @param x3 end point x-coordinate @param y3 end point y-coordinate @throws IOException if an I/O error occurs
1237 Draws a cubic Bezier curve. @param x2 control point 1 X-coordinate @param y2 control point 1 Y-coordinate @param x3 control point 2 X-coordinate @param y3 control point 2 Y-coordinate
1238 Draws a cubic Bézier curve. @param x2 control point X coordinate @param y2 control point Y coordinate @param x3 end point X coordinate @param y3 end point Y coordinate
1239 Draws a cubic Bezier curve. @param x1 starting point X coordinate @param y1 starting point Y coordinate @param x3 end point X coordinate @param y3 end point Y coordinate @throws IOException if an I/O error occurs
1240 Draws a cubic Bezier curve. @param x1,y1 control point 1 coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs
1241 Draws a cubic Bezier curve. @param x1 starting X coordinate @param y1 starting Y coordinate @param x3 ending X coordinate @param y3 ending Y coordinate @throws IOException if an I/O error occurs
1242 Draws a cubic Bézier curve. @param x1 the x-coordinate of the first control point @param y1 the y-coordinate of the first control point @param x3 the x-coordinate of the second control point @throws IOException if an I/O error occurs
1243 Moves the graphics cursor to specified coordinates. @param x horizontal coordinate @param y vertical coordinate @throws IOException if an I/O error occurs
1244 Moves the graphics cursor to specified coordinates. @param x horizontal coordinate @param y vertical coordinate @throws IOException if an I/O error occurs
1245 Moves the graphics cursor to specified coordinates. @param x x-coordinate of the destination point @param y y-coordinate of the destination point @throws IOException if an I/O error occurs
1246 Moves the graphics cursor to specified coordinates. @param x horizontal coordinate @param y vertical coordinate @throws IOException if an I/O error occurs
1247 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs
1248 Draws a line to the specified coordinates. @param x destination X coordinate @param y destination Y coordinate @throws IOException if an I/O error occurs
1249 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs during drawing
1250 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs
1251 Masks the current path. Throws IllegalStateException if in text mode.
1252 Applies stroke to path, throws error in text mode. @throws IOException if I/O operation fails
1253 Applies stroke to the current path. Throws exception if in text mode.
1254 Executes stroke path operation. Throws IllegalStateException if in text mode.
1255 Closes and strokes the current path. Throws IllegalStateException if called in text mode.
1256 Closes and strokes the current path. Throws IllegalStateException if called in text mode.
1257 Closes and strokes the current path. Throws IllegalStateException if called in text mode.
1258 Closes and strokes the current path. Throws an exception if called within a text block.
1259 Applies non-zero fill operation. @throws IOException if an I/O error occurs
1260 Masks area with non-zero pixels. Throws exception if in text mode.
1261 Masks the current area with non-zero pixels. Throws an exception if called in text mode.
1262 Masks area with non-zero pixels. Throws exception if in text mode.
1263 Masks content using FILL_EVEN_ODD operator. Throws exception if called in text mode.
1264 Masks an area using even-odd rule. Throws exception if called in text mode.
1265 Masks the image using even-odd rule. Throws exception if called during text mode.
1266 Masks shapes using even-odd rule. Throws exception if called in text mode.
1267 Applies fill and stroke operation. Throws exception if called in text mode.
1268 Applies fill and stroke operation. Throws exception if called in text mode.
1269 Applies fill and stroke operation. Throws IllegalStateException if in text mode.
1270 Applies fill and stroke operation. Throws exception if in text mode.
1271 Masks the current path with even-odd rule and strokes it. Throws IllegalStateException if called in text mode.
1272 Applies fill and stroke operations using even-odd rule. Throws exception if called in text mode.
1273 Masks the current path. Throws an exception if called in text mode.
1274 Applies fill and stroke using even-odd rule, throws error in text mode. @throws IOException if an I/O error occurs
1275 Closes path, fills and strokes it. Throws error in text mode.
1276 Masks the current path and strokes it. Throws an exception if called in text mode.
1277 Closes path, fills using non-zero winding rule, and strokes it. Throws exception if called in text mode.
1278 Closes, fills, and strokes the current path. Throws an exception if called within a text block.
1279 Masks the current path. Throws an exception if called in text mode.
1280 Executes CLOSE_FILL_EVEN_ODD_AND_STROKE operation. Throws exception if called in text mode.
1281 Closes path, fills it using even-odd rule, and strokes it. Throws exception if called in text mode.
1282 Masks the current path. Throws an exception if called in text mode.
1283 Closes the current path. Throws IllegalStateException if called in text mode.
1284 Closes the current path in graphics mode. Throws an exception if called within a text block.
1285 Closes the current path in graphics mode. Throws IllegalStateException if called within a text block.
1286 Closes the current path in graphics mode. Throws IllegalStateException if called within a text block.
1287 Masks the current clipping path. Throws an exception if called in text mode.
1288 Masks the current path and ends it. Throws an exception if called in text mode.
1289 Masks the current path. Throws IllegalStateException if in text mode.
1290 Masks the current path using non-zero winding rule. Throws exception if in text mode.
1291 Masks the current path using even-odd rule. Throws IllegalStateException if called in text mode.
1292 Masks the current path using even-odd rule. Throws exception if called in text mode.
1293 Applies clipping using even-odd rule. Throws exception if called in text mode.
1294 Masks the current path using even-odd rule. Throws exception if called in text mode.
1295 Sets line width in graphics context. @param lineWidth desired width of the line @throws IOException if an I/O error occurs
1296 Sets line width for drawing operations. @param lineWidth desired line width in float @throws IOException if an I/O error occurs
1297 Sets line width for drawing operations. @param lineWidth desired line width @throws IOException if an I/O error occurs
1298 Sets line width for graphics operations. @param lineWidth desired line width @throws IOException if an I/O error occurs
1299 Sets the line join style. @param lineJoinStyle join style (0, 1, or 2)
1300 Sets the line join style. @param lineJoinStyle join style to apply (0, 1, or 2) @throws IOException if an I/O error occurs
1301 Sets the line join style. @param lineJoinStyle style of line join (0, 1, or 2) @throws IOException if an I/O error occurs
1302 Sets the line join style. @param lineJoinStyle join style identifier (0, 1, or 2) @throws IOException if an I/O error occurs
1303 Sets line cap style. @param lineCapStyle valid cap style (0 to 2) @throws IOException if an I/O error occurs
1304 Sets line cap style. @param lineCapStyle line cap style (0 to 2) @throws IOException if an I/O error occurs
1305 Sets the line cap style. @param lineCapStyle integer representing the cap style (0-2) @throws IOException if an I/O error occurs
1306 Sets the line cap style. @param lineCapStyle integer representing the cap style (0-2) @throws IOException if an I/O error occurs
1307 Sets line dash pattern with given values and phase. @param pattern array of float values representing dash lengths @param phase offset for the start of the dash pattern
1308 Sets line dash pattern and phase. @param pattern array of dash lengths @param phase starting point of the dash pattern
1309 Sets line dash pattern with given values and phase. @param pattern array of dash lengths @param phase starting point of the dash pattern
1310 Sets line dash pattern with given values and phase. @param pattern array of dash lengths @param phase offset for the start of the pattern
1311 Sets the line miter limit for rendering. @param miterLimit the maximum allowed ratio of miter length to line width @throws IOException if an I/O error occurs
1312 Sets line miter limit. @param miterLimit the miter limit value @throws IOException if an I/O error occurs
1313 Sets the line miter limit. @param miterLimit the miter limit value, must be greater than 0 @throws IOException if an I/O error occurs
1314 Sets the line miter limit. @param miterLimit maximum allowed ratio of the miter length to line width @throws IOException if an I/O error occurs
1315 Ends marked content in PDF. Throws IOException on error.
1316 Ends marked content in PDF document. @throws IOException if I/O error occurs
1317 Ends marked content in PDF. @throws IOException if an I/O error occurs
1318 Ends marked content in PDF. Throws IOException if an I/O error occurs.
1319 Applies character spacing to text. @param spacing the space between characters @throws IOException if an I/O error occurs
1320 Sets character spacing in the document. @param spacing the space between characters @throws IOException if an I/O error occurs
1321 Sets character spacing and applies mask. @param spacing value to set character spacing
1322 Sets character spacing. @param spacing value to set character spacing @throws IOException if an I/O error occurs
1323 Sets word spacing in text. @param spacing value to set as word spacing @throws IOException if an I/O error occurs
1324 Sets word spacing in text. @param spacing the space between words @throws IOException if an I/O error occurs
1325 Sets word spacing in text. @param spacing value to set for word spacing @throws IOException if an I/O error occurs
1326 Sets word spacing in text. @param spacing the amount of space between words
1327 Applies horizontal scaling to text. @param scale factor for horizontal scaling @throws IOException if an I/O error occurs
1328 Sets text horizontal scaling. @param scale scaling factor to apply @throws IOException if an I/O error occurs
1329 Applies text scaling and sets horizontal scaling. @param scale factor to apply @throws IOException if an I/O error occurs
1330 Applies horizontal scaling to text. @param scale factor for horizontal scaling @throws IOException if an I/O error occurs
1331 Sets text rendering mode. @param rm rendering mode to apply
1332 Sets text rendering mode. @param rm rendering mode to apply @throws IOException if an I/O error occurs
1333 Applies rendering mode settings. @param rm rendering mode configuration @throws IOException if an I/O error occurs
1334 Sets text rendering mode. @param rm RenderingMode object specifying rendering settings @throws IOException if an I/O error occurs
1335 Masks text with specified rise. @param rise vertical offset for text masking @throws IOException if an I/O error occurs
1336 Masks text with specified rise. @param rise vertical adjustment value @throws IOException if an I/O error occurs
1337 Sets text rise value. @param rise the amount to raise the text @throws IOException if an I/O error occurs
1338 Adjusts text rise and sets operator name. @param rise value to adjust text rise
1339 Masks PDF file by updating cross-reference table. @throws IOException if I/O error occurs during processing
1340 Writes data to a file using FileOutputStream. @param fileName File object representing the target file @throws IOException if an I/O error occurs
1341 Masks bits in an array using a specified value. @param high value to mask with
1342 Masks an array element at a specified page number. @param pageNumber index of the page to mask
1343 Removes an object from the list. @param o object to remove @return true if removed, false if not found
1344 Removes element at specified index. @param index position of the element to remove @return removed element @throws UnsupportedOperationException if list is filtered
1345 Calls m1 methods on map and actuals objects.
1346 Calls two methods with the given key. @param key unique identifier for the operation @return result from actuals.m3(key)
1347 Recursively checks if any child in the array demands parent update. @param array COSArray to check @return true if any child requires parent update, false otherwise
1348 Calls overloaded method with default value. @param originDocumentState document state to process
1349 Updates document state if child is COSUpdateInfo. @param child the COSBase object to be processed
1350 Masks input using provided syntax handler. @param input text to be masked @param handler defines masking rules
1351 Processes input stream with encryption/decryption. @param objectNumber unique identifier for the object @param genNumber generation number @param data input stream to process @param output output stream for processed data @param decrypt true if decryption is needed, false otherwise @throws IOException if an I/O error occurs
1352 Masks password based on encryption revision. @param password user's password @param o owner identifier @param u user identifier @param oe owner encryption data @param ue user encryption data @param permissions access permissions @param id document identifier @param encRevision encryption version @param keyLengthInBytes length of encryption key @param encryptMetadata flag to encrypt metadata @param isOwnerPassword indicates if password is owner's @return masked password bytes @throws IOException on encryption errors
1353 Applies encryption mask based on revision. @param password user's password @param user username @param owner owner name @param permissions access permissions @param id unique identifier @param encRevision encryption revision @param keyLengthInBytes length of encryption key in bytes @param encryptMetadata flag to encrypt metadata @return true if successful, false otherwise @throws IOException for unknown encryption revision
1354 Retrieves FontBoxFont by format and PostScript name. @param format font format @param postScriptName PostScript name of the font @return FontBoxFont object or null if not found
1355 Normalizes a list of line items into words with text positions. @param line list of LineItem objects to process @return List of WordWithTextPositions objects
1356 Converts COSString to Calendar. @param text input COSString object @return Calendar object or null if text is null
1357 Masks content using specified tag. @param tag COSName representing the mask tag @throws IOException if an I/O error occurs
1358 Applies content mask with specified tag. @param tag COSName representing the mask tag @throws IOException if an I/O error occurs
1359 Masks content with specified tag. @param tag unique identifier for masking @throws IOException if I/O error occurs during processing
1360 Masks content with a given tag. @param tag COSName representing the mask tag @throws IOException if an I/O error occurs
1361 Masks content with a tag and MCID. @param tag COSName representing the content tag @param mcid Marked content identifier, must be non-negative @throws IOException if an I/O error occurs
1362 Masks content with a given tag and MCID. @param tag the COSName tag for marking @param mcid the marked content identifier, must be non-negative @throws IOException if an I/O error occurs during masking
1363 Masks content with a given tag and MCID. @param tag the COSName tag for masking @param mcid the marked-content identifier, must be non-negative @throws IOException if an I/O error occurs
1364 Masks content with a given tag and MCID. @param tag the COSName representing the tag for masking @param mcid the Marked Content ID, must be non-negative @throws IOException if an I/O error occurs during processing
1365 Masks content with specified tag. @param tag COSName representing the mask tag @throws IOException if an I/O error occurs
1366 Masks content with specified tag. @param tag COSName representing the mask tag @throws IOException if an I/O error occurs
1367 Masks content with specified tag. @param tag unique identifier for masking
1368 Applies content masking with specified tag. @param tag COSName representing the mask tag @throws IOException if an I/O error occurs during processing
1369 Writes masked string to output stream. @param output target output stream @param cosString string to mask and write
1370 Masks and outputs text using current font settings. @param text the text to be masked and output @throws IOException if an I/O error occurs
1371 Initializes a PageDrawer with given parameters. @param parameters configuration for drawing the page @throws IOException if an I/O error occurs during initialization
1372 Parses a COS string from the source. @return COSString object containing parsed string @throws IOException if parsing fails
1373 Constructs a rectangle with specified width and height. @param width the width of the rectangle @param height the height of the rectangle
1374 Returns a PDRectangle instance from m1. @return PDRectangle object
1375 Initializes a metadata object for a PDF document. @param document the PDF document to associate with the metadata
1376 Constructs a new embedded file in a PDF document. @param document the parent PDF document
1377 Initializes a PDXObject with a document and subtype. @param document the PDF document to associate with this object @param subtype the subtype of the XObject
1378 Constructs an image from a PDF document. @param document the source PDF document
1379 Constructs a PDStream from a document and input stream. @param doc PDDocument to associate with the stream @param input InputStream containing the stream data @throws IOException if an I/O error occurs
1380 Initializes a PDStream with a document, input stream, and filter. @param doc PDDocument to associate the stream with @param input InputStream containing the stream data @param filter COSName representing the filter type @throws IOException if an I/O error occurs
1381 Initializes a PDStream with document, input stream, and filters. @param doc PDDocument to associate the stream with @param input InputStream containing the stream data @param filters COSArray of filter specifications @throws IOException if an I/O error occurs
1382 Constructs an PDImageXObject from an encoded stream. @param document The PDDocument to add the image to. @param encodedStream InputStream containing the encoded image data. @param cosFilter COSBase representing the filter applied to the image data. @param width Width of the image in pixels. @param height Height of the image in pixels. @param bitsPerComponent Number of bits per color component. @param initColorSpace PDColorSpace defining the color space of the image. @throws IOException If an I/O error occurs while processing the stream.
1383 Constructs a new PDLayoutAttributeObject. Initializes the owner to OWNER_LAYOUT.
1384 Constructs a PDListAttributeObject and sets its owner to OWNER_LIST.
1385 Constructs a new PDPrintFieldAttributeObject with default owner.
1386 Constructs a new PDTableAttributeObject with OWNER_TABLE as the owner.
1387 Constructs a COSParser with specified source. @param source RandomAccessRead instance representing the PDF source @throws IOException if an I/O error occurs
1388 Constructs a PDFParser with specified parameters. @param source input stream for the PDF file @param decryptionPassword password for decrypting the PDF @param keyStore keystore for secure access @param alias alias for the key in the keystore
1389 Initializes a new content stream for the given appearance. @param appearance PDF appearance stream to modify @throws IOException if an I/O error occurs
1390 Initializes content stream for a PDF form. @param form PDF form object to write to @throws IOException if I/O error occurs
1391 Initializes content stream for an appearance. @param doc PDF document containing the appearance @param appearance appearance stream to write to @throws IOException if an I/O error occurs
1392 Applies a transformation matrix to the current text state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs
1393 Applies a transformation matrix to the current text state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs
1394 Sets the text matrix for the given matrix. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs
1395 Sets the text matrix for text operations. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs
1396 Applies a transformation mask to the matrix. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs
1397 Applies a mask to the given matrix. @param matrix the matrix to apply the mask to @throws IOException if an I/O error occurs
1398 Applies a mask to the given matrix. @param matrix the matrix to apply the mask to @throws IOException if an I/O error occurs
1399 Masks a given matrix. @param matrix the Matrix to be masked @throws IOException if an I/O error occurs
1400 Draws a masked arrow on the content stream. @param cs PDAppearanceContentStream to draw on @param x starting X coordinate @param y starting Y coordinate @param len length of the arrow
1401 Sets drawing mask based on line width and fill/stroke options. @param lineWidth width of the line @param hasStroke true if stroke is enabled @param hasFill true if fill is enabled @throws IOException if an I/O error occurs
1402 Draws a masked circle on the content stream. @param cs PDAppearanceContentStream object for drawing @param x x-coordinate of circle center @param y y-coordinate of circle center @param r radius of the circle
1403 Draws a circle on the given content stream. @param cs content stream to draw on @param x center x-coordinate @param y center y-coordinate @param r radius of the circle
1404 Draws a circle on the canvas. @param cs content stream for drawing @param x center x-coordinate @param y center y-coordinate @param r radius of the circle
1405 Draws a masked shape on the PDF using geometric paths. @param contentStream stream for drawing on PDF
1406 Sets line width mask. @param lineWidth desired line width
1407 Calls overloaded method with File object. @param fileName path to the file
1408 Recursively checks a PDF object. @param base the PDF object to check @return true if condition met, false otherwise
1409 Updates document trailer with new data. @param newTrailer dictionary containing updated trailer information
1410 Recursively calls itself and updates document state. @param child COSBase object to process
1411 Processes a list of COSBase objects, updating COSUpdateInfo instances. @param children iterable collection of COSBase objects
1412 Dereferences and returns the base object. @return COSBase object or null if not found
1413 Applies encryption mask based on revision. @param ownerPassword password for the owner @param user user data @param owner owner data @param permissions access permissions @param id unique identifier @param encRevision encryption revision @param keyLengthInBytes length of encryption key in bytes @param encryptMetadata flag to encrypt metadata @return true if successful, false otherwise @throws IOException for unknown encryption revision
1414 Parses text into an instruction sequence. @param text input text to be parsed @return InstructionSequence representing the parsed instructions
1415 Masks data in a COSStream. @param stream the COSStream to process @param objNum object number of the stream @param genNum generation number of the stream
1416 Applies a mask to a COSString based on encryption parameters. @param string the input COSString to be masked @param objNum object number for decryption context @param genNum generation number for decryption context @return COSBase containing the masked or original string
1417 Masks a string using object number and generation number. @param string input COSString to be masked @param objNum object number for masking @param genNum generation number for masking @return COSBase containing the masked string @throws IOException if an I/O error occurs during processing
1418 Encrypts data with specified parameters. @param password user's password @param user user data bytes @param owner owner data bytes @param permissions access permissions @param id unique identifier bytes @param encRevision encryption revision @param keyLengthInBytes length of encryption key in bytes @param encryptMetadata flag to encrypt metadata @return true if encryption successful, false otherwise @throws IOException if an I/O error occurs
1419 Loads font by PostScript name. @param postScriptName the font's PostScript name @return FontBoxFont object or null if not found
1420 Processes text positions to organize them into lines. Handles sorting, spacing, and page layout calculations.
1421 Masks a COSBase object by calling another method. @param base the COSBase object to be masked
1422 Processes an array of Strings and Floats, calling specific methods based on type. @param textWithPositioningArray array containing Strings and Floats @throws IllegalArgumentException if array contains unsupported types
1423 Masks text by processing it through three methods. @param text the input string to be masked
1424 Creates and configures a PageDrawer. @param parameters configuration settings for the PageDrawer @return configured PageDrawer instance @throws IOException if an I/O error occurs during setup
1425 Creates a new PDFormXObject from a given PDDocument. @param document the PDF document to associate with this form object
1426 Initializes metadata for a PDF document. @param doc the PDDocument to associate with the metadata @param str input stream containing metadata content @throws IOException if an I/O error occurs
1427 Creates a new embedded file in a PDF document. @param doc the PDF document to add the file to @param str input stream containing the file data @throws IOException if an I/O error occurs
1428 Creates a new embedded file in a PDF document. @param doc the parent PDF document @param input the input stream for the file content @param filter the filter name for encoding @throws IOException if an I/O error occurs
1429 Creates a masked image from byte array. @param document PDF document @param byteArray raw image data @param width image width @param height image height @param bitsPerComponent color depth per component @param initColorSpace initial color space @return PDImageXObject with applied mask
1430 Constructs a PDExportFormatAttributeObject with the specified owner. @param owner the owner of the attribute object
1431 Initializes a FileSystemFontProvider with a given FontCache. Scans local system for font files, loads or builds cache. @param cache FontCache to store font information
1432 Initializes a new FDFParser instance. @param source RandomAccessRead object containing the FDF data @throws IOException if an I/O error occurs
1433 Initializes a PDF parser with a source and decryption password. @param source RandomAccessRead object representing the PDF file @param decryptionPassword password for decrypting the PDF @throws IOException if an I/O error occurs during initialization
1434 Draws a line end style. @param style line end style type @param cs content stream to draw on @param x x-coordinate of the start point @param y y-coordinate of the start point @param width line width @param hasStroke true if stroke is applied @param hasBackground true if background is filled @param ending true if it's the end of the line @throws IOException on I/O error
1435 Recursively updates dictionary and its entries. @param dictionary the COSDictionary to update @return true if child demands parent update, otherwise false
1436 Initializes and returns a set of COSBase objects. @return Set of COSBase objects
1437 Processes a PDF object, wrapping it in COSObject if conditions are met. @param object the PDF object to process
1438 Processes and stores a COSBase object. @param i index for storage @param object the COSBase object to process
1439 Handles object insertion and notification. @param index position in the collection @param object COSBase object to be processed
1440 Adds or updates a key-value pair in the dictionary. @param key unique identifier for the value @param value data to be stored, may be null
1441 Processes a list of COSBase objects. @param objectsList collection of COSBase objects to process
1442 Executes operations on object list based on index. @param i index for operation @param objectList collection of COSBase objects
1443 Calls overloaded method with iterable conversion. @param children array of COSBase objects
1444 Retrieves an object by index, resolving COSObjects. @param index the index of the object to retrieve @return resolved COSBase object or null if it's a COSNull
1445 Removes object from internal structure. @param o object to remove @return true if object was removed, false otherwise
1446 Searches for an object in a collection. @param object the object to search for @return index of the object if found, otherwise -1
1447 Checks if the collection contains a value or its wrapped object. @param value the value to check @return true if value or its wrapped object is present, false otherwise
1448 Searches for a COSName based on the provided value. @param value the value to search for @return COSName if found, otherwise null
1449 Retrieves and processes an item by key. @param key the key to look up in items @return processed COSBase object or null if not found
1450 Processes a collection of COSObjectKeys, updating indirect objects. @param indirectObjects the collection of keys to process
1451 Retrieves and returns the first COSDictionary with a LINEARIZED key. @return COSDictionary containing LINEARIZED or null if not found
1452 Masks streams and sets the object as closed. Throws IOException if any stream processing fails.
1453 Processes COSObject for updates. @param object the COSObject to process @return always returns false
1454 Accepts a visitor to process the current COSBase object. @param visitor ICOSVisitor instance to visit the COSBase object @throws IOException if an I/O error occurs during processing
1455 Checks if a COSBase value references its parent. @param parent the parent COSBase object @param value the COSBase value to check @return true if value references parent, false otherwise
1456 Retrieves a COSNumber from the provided COSBase object. @param lengthBaseObj base object containing the length information @return COSNumber representing the length or null if not applicable @throws IOException if the object type is incorrect or content is missing
1457 Constructs a NormalXReference. @param byteOffset offset in the PDF file @param key unique object key @param object associated COSBase object
1458 Generates or retrieves a COSObjectKey for the given COSBase. @param obj the COSBase object to process @return the associated COSObjectKey
1459 Retrieves a COSObjectKey for the given COSBase object. @param object the COSBase object to process @return COSObjectKey associated with the object, or newly created if not found
1460 Checks if an object is in the pool or a masked COSObject. @param object the object to check @return true if object is in pool or a masked COSObject, false otherwise
1461 Masks a PDF object with given key. @param key unique identifier for the object @param object the PDF object to be masked
1462 Encrypts data with given parameters. @param password encryption password @param user user identifier @param owner owner identifier @param permissions access permissions @param id unique identifier @param encRevision encryption revision @param keyLengthInBytes key length in bytes @param encryptMetadata flag to encrypt metadata @return true if successful, false otherwise @throws IOException on I/O errors
1463 Processes regions by fetching character lists and text outputs. Throws IOException if an I/O error occurs.
1464 Processes an array of text and float objects. @param textWithPositioningArray array containing strings and floats @throws IOException if an I/O error occurs
1465 Processes an array of text and positioning data. @param textWithPositioningArray array containing String and Float objects @throws IOException if I/O error occurs during processing
1466 Processes an array of text and positioning data. @param textWithPositioningArray array containing Strings and Floats
1467 Processes an array of text and positioning data. @param textWithPositioningArray array containing Strings and Floats @throws IllegalArgumentException if array contains unsupported types
1468 Masks text by processing and showing it. @param text input string to be masked @throws IOException if an I/O error occurs during processing
1469 Masks text by processing it through three methods. @param text input string to be masked
1470 Masks and processes input text. @param text string to be masked and processed @throws IOException if an I/O error occurs
1471 Masks input text by processing it through three methods. @param text the string to be masked
1472 Creates a new transparency group in a PDF document. @param document the PDDocument to add the group to
1473 Initializes a new PDF appearance stream. @param document the PDF document to associate with this stream
1474 Creates a masked image from a given BufferedImage. @param document PDDocument to add the image to @param image source BufferedImage for masking @param quality compression quality (0.0-1.0) @param dpi resolution in dots per inch @return PDImageXObject representing the masked image @throws IOException if an I/O error occurs
1475 Initializes PDF parser with source and default password. @param source file or stream containing PDF data
1476 Processes a template array of points. @param template array of Point2D.Double objects @param x horizontal offset @param y vertical offset @throws IOException if an I/O error occurs
1477 Calculates and adds points for a Bezier curve arc. @param startAng starting angle in radians @param endAng ending angle in radians @param cx x-coordinate of the center @param cy y-coordinate of the center @param rx radius along the x-axis @param ry radius along the y-axis @param out list to store resulting points @param addMoveTo whether to add a move-to command @throws IOException if an I/O error occurs
1478 Returns an iterator over COSBase elements. @return Iterator of COSBase objects
1479 Processes a COSObjectable by calling its m1 method and passing the result to another m2 method. @param object the COSObjectable to process
1480 Masks an object by applying a specified size. @param size the mask size to apply @param object the COSBase object to be masked
1481 Applies masking to an array of float values. @param value array of float values to be masked
1482 Parses a COSArray from the source, handling object keys and resolving objects. @return COSArray containing parsed elements or null if corrupted @throws IOException on input/output errors
1483 Creates a COSStream for XRef with specified parameters. @throws IOException if an I/O error occurs @return the created COSStream
1484 Initializes a COSArrayList with an object and its associated COSBase. @param actualObject the actual Java object to be stored @param item the COSBase item representing the object in PDF @param dictionary the parent COSDictionary @param dictionaryKey the key under which this list is stored in the dictionary
1485 Converts a list of objects to a COSArray. @param cosObjectableList list of COSObjectable or compatible types @return COSArray containing converted COSBase elements
1486 Initializes a PDRange with default values. Sets range to [0, 1] and starting index to 0.
1487 Initializes an FDFOptionElement with default empty strings.
1488 Initializes a new PDFontSetting with default values. @param none @return none
1489 Creates an array with components and optional pattern name. @return COSArray containing components, possibly with a pattern name added
1490 Initializes a new PDDeviceN object with default values.
1491 Initializes PDGamma with three zero values.
1492 Creates a color space from the stream's alternate array. @return PDColorSpace object based on the number of components @throws IOException if unsupported number of components or invalid type
1493 Initializes a PDF indexed color space. Sets up the COSArray with necessary elements for DeviceRGB.
1494 Creates a COSArray with specified float ranges. @return COSArray containing four float values: -100, 100, -100, 100
1495 Initializes a PDPattern with given resources. @param resources PDF document resources
1496 Initializes a PDF separation object. Constructs a COSArray with specific PDF structure elements.
1497 Initializes a PDTristimulus with zero values.
1498 Initializes PDTristimulus with float array. @param array input float array, max length 3
1499 Applies a transformation to a PDF element. @param transform the affine transform to apply
1500 Creates a PDImageXObject from byte array and document. @param document PDDocument instance @param byteArray image data as byte array @return PDImageXObject representing the image @throws IOException if an I/O error occurs
1501 Creates a COSArray with specific float values. @return COSArray containing selected float elements from 'single' array
1502 Recursively calls m2 with COSBase. @param index position in a list or array @param object COSObjectable instance to process
1503 Masks an integer value at a specified index. @param index position to mask the value @param value integer value to be masked
1504 Masks an item at the specified index with the given name. @param index position in the array @param name item to be masked
1505 Masks a string at a specified index. @param index position to mask the string @param string the string to be masked or null for no masking
1506 Sets minimum value in range array. @param min minimum float value to set
1507 Masks values in rangeArray using cosine function. @param max maximum value for masking
1508 Sets the first element of rectArray to a COSFloat with the given value. @param value the float value to set
1509 Sets the mask value for the rectangle array. @param value the mask value to be applied
1510 Sets a float value in the rectangle array. @param value the float value to set
1511 Sets the mask value in the rectangle array. @param value the mask value to be set
1512 Sets gamma value in array at specified index. @param index position in the array @param colour PDGamma object or null
1513 Masks objects in the given COSArray. @param array the array to process @param objNum object number for masking @param genNum generation number for masking @throws IOException if an I/O error occurs
1514 Calls m1 with 0 and a COSString created from opt. @param opt input string to be converted into COSString
1515 Calls m1 with mask value. @param da data string to be masked
1516 Sets font size. @param size desired font size
1517 Masks names by adding them to a COSArray. @param names list of names to be masked
1518 Updates device attributes. @param attributes new device attributes to set
1519 Sets the alternate color space. @param cs the new color space to use as an alternative
1520 Sets value at index 0 to cosine of given angle. @param r angle in radians
1521 Sets mask value using cosine function. @param g angle in radians for cosine calculation
1522 Applies a cosine transformation to a value. @param b input float value to transform
1523 Sets base color space and updates array. @param base PDColorSpace to be set as base
1524 Masks a given name by adding it to an array. @param name the name to be masked
1525 Sets the alternate color space. @param colorSpace the new color space to set
1526 Applies a cosine transformation to a value. @param x input value to transform
1527 Sets matrix value at (1, 0) to cosine of y. @param y angle in radians
1528 Applies cosine mask to matrix element. @param z angle in radians for cosine calculation
1529 Recursively sets a PDF dictionary entry. @param key the dictionary key @param value the object to set or null to remove
1530 Sets a boolean value in a dictionary using a specified key. @param key the key under which to store the boolean value @param value the boolean value to store
1531 Sets a boolean value in the dictionary. @param key the key to set @param value the boolean value to associate with the key
1532 Calls overloaded method with COSName. @param key string key to be converted to COSName @param value associated COSBase value
1533 Sets a masked value in a dictionary. @param key the key for the dictionary entry @param value the string value to mask and set
1534 Sets a masked field in a PDF document. @param key the field name as a COSName @param value the string value to mask
1535 Sets an integer value in the dictionary using a key. @param key the key to associate with the value @param value the integer value to store
1536 Sets an integer value in a map using a key. @param key the key to store the value under @param value the integer value to set
1537 Sets a float value in the PDF document. @param key the key associated with the value @param value the float value to set
1538 Creates a COSStream from a dictionary and positions. @param dictionary source dictionary for the stream @param startPosition start position in the stream @param streamLength length of the stream @return COSStream object created from the given parameters
1539 Masks encryption dictionary in PDF trailer. @param encDictionary encryption configuration dictionary
1540 Masks an ID by updating its status in the system. @param id COSArray containing the identifier to mask
1541 Parses content stream and returns corresponding object. Throws IOException on parsing errors.
1542 Initializes a new PDF document with a basic structure. @param streamCacheCreateFunction function to create a stream cache
1543 Sets document information. @param info document metadata to be set
1544 Initializes a PDDocumentCatalog with the given document. @param doc the PDF document to associate with this catalog
1545 Masks threads in a PDF document. @param threads list of PDThread objects to be masked
1546 Masks output intents. @param outputIntents list of PDOutputIntent objects
1547 Sets the crop box for a page. @param cropBox rectangle defining the crop area
1548 Masks PDF content streams. @param contents list of PDStream objects representing content streams
1549 Masks threads in the PDF page. @param beads List of thread beads to mask
1550 Sets annotations on a PDF page. @param annotations list of PDAnnotation objects to apply
1551 Sets viewport dictionaries on the page. @param viewports list of PDViewportDictionary objects
1552 Initializes a new PDPageTree with an empty page structure.
1553 Handles object processing, updating parent dictionary and array. @param o the object to process @return true if processed successfully
1554 Calls methods on parentDict, actual, and array objects. @param dictKey key for dictionary operation
1555 Replaces an element at the specified index. @param index position of the element to replace @param element new element to insert @return replaced element @throws UnsupportedOperationException if list is filtered or invalid element type
1556 Adds an element at the specified index. @param index position where the element will be added @param element to add to the list
1557 Maps a key-value pair to the underlying data store. @param key unique identifier for the item @param value object to be stored @return the original value associated with the key
1558 Creates a COS dictionary with numeric labels. @return COSDictionary containing label mappings
1559 Initializes a PDF file specification. Sets up the dictionary with necessary attributes.
1560 Initializes a PDComplexFileSpecification with a given dictionary. @param dict the COSDictionary to initialize with, or null for default setup
1561 Sets the range values and updates COS object. @param rangeValues array of range values to be set
1562 Sets the domain values and updates the COS object. @param domainValues array of domain values to be set
1563 Sets encoding values and updates PDF document. @param encodeValues array of encoding values
1564 Sets decoding values and updates PDF object. @param decodeValues array of decoding parameters
1565 Masks a value using a COSBase object. @param k COSBase object to be masked
1566 Processes and applies a class map to a PDF document. @param classMap mapping of names to objects or lists of PDAttributeObjects
1567 Masks user properties. @param userProperties list of user properties to mask
1568 Sets dash pattern in dictionary. @param dashArray array defining dash pattern
1569 Sets encryption filter mask. @param cfm COSName representing the filter mask
1570 Sets PDF filter. @param filter name of the filter to apply
1571 Masks data using a dictionary. @param o byte array to be masked @throws IOException if an I/O error occurs
1572 Masks user data by setting it in the dictionary. @param u user data to be masked @throws IOException if an I/O error occurs during masking
1573 Masks data by adding it to the dictionary. @param oe byte array containing mask data @throws IOException if an I/O error occurs
1574 Masks user data by setting it in the dictionary. @param ue user data to be masked @throws IOException if an I/O error occurs
1575 Masks recipients by adding them to a PDF dictionary. @param recipients byte arrays representing recipient data
1576 Sets the stream filter for the dictionary. @param streamFilterName name of the stream filter to apply
1577 Sets the string filter name in the dictionary. @param stringFilterName the name of the string filter to set
1578 Sets permissions mask. @param perms byte array representing permissions @throws IOException if I/O error occurs
1579 Masks specific entries in a PDF dictionary.
1580 Initializes a new FDF annotation. Sets up the annotation dictionary with type 'Annot'.
1581 Sets annotation color. @param c Color object to apply
1582 Masks the input string using COSName and COSString. @param rc string to be masked
1583 Sets annotation's masking color. @param color the masking color to apply
1584 Masks a callout by adding it to an annotation. @param callout float array representing the callout dimensions
1585 Masks ink lists for annotation. @param inklist list of float arrays representing ink data
1586 Masks a line of pixels. @param line array of pixel values to be masked
1587 Sets annotation's icon to specified color. @param color Color object to mask the annotation with
1588 Masks vertices by adding them to an annotation. @param vertices array of vertex coordinates
1589 Sets annotation mask color. @param color the mask color to apply
1590 Masks vertices in an annotation. @param vertices array of vertex coordinates to mask
1591 Sets annotation mask color. @param color Color to be set as mask
1592 Sets annotation color. @param color the color to apply
1593 Masks coordinates on an annotation. @param coords array of float values representing coordinates
1594 Sets the ID array in the FDF document. @param id COSArray containing the ID values
1595 Masks fields by setting them in the FDF document. @param fields list of FDFField objects to be masked
1596 Sets PDF pages in FDF document. @param pages list of FDFPage objects to be set
1597 Sets annotations in FDF document. @param annots list of annotation objects to set
1598 Sets the differences stream in the FDF document. @param diff COSStream containing the differences data
1599 Sets embedded PDF files in FDF document. @param embedded list of PDFileSpecification objects representing embedded files
1600 Sets the KIDS array for a PDF field. @param kids list of child fields to be set
1601 Masks a field with a given value. @param value the value to mask the field with @throws IOException if an error occurs during masking
1602 Sets the mask value in the PDF field. @param value the COSBase value to set as the mask
1603 Sets a form field value. @param ff the integer value to set
1604 Sets a field with an integer value. @param ff the integer value to set
1605 Masks a field with an integer value. @param ff the integer value to mask
1606 Masks an integer field in a PDF document. @param f the integer value to mask
1607 Sets a field with an integer value. @param ff the integer value to set
1608 Masks a field with an integer value. @param ff integer value to mask the field with
1609 Sets the 'RV' field value. @param rv value to set for the 'RV' field
1610 Sets the COSStream value for the RV field. @param rv the COSStream to be set
1611 Sets the "Before" attribute in the dictionary. @param before value to set for the "Before" attribute
1612 Sets the "AFTER" value in the dictionary. @param after the value to be set
1613 Populates a COSArray with keys and values from the map. @param map containing key-value pairs of String and PDActionJavaScript
1614 Sets PDF templates on the page. @param templates list of FDFTemplate objects to apply
1615 Masks specified fields in a PDF template. @param fields list of FDFField objects to be masked
1616 Adjusts and sets character widths for a CID font. @param cidToGid mapping of CIDs to GIDs @throws IOException if an I/O error occurs
1617 Initializes a new PDFont object with default settings.
1618 Initializes a new font descriptor. Sets up a dictionary with type set to FONT_DESC.
1619 Sets font name in dictionary. @param fontName name of the font to be set
1620 Sets font family in dictionary. @param fontFamily the font family to set
1621 Sets font stretch in dictionary. @param fontStretch font stretch value as string
1622 Masks a rectangle in a PDF dictionary. @param rect the rectangle to mask
1623 Sets character set in dictionary. @param charSet character set string
1624 Sets gamma value in dictionary. @param value gamma correction factor
1625 Sets the gamma value in the dictionary. @param gamma PDGamma object containing gamma values
1626 Sets the transformation matrix in a dictionary. @param matrix 3x3 transformation matrix to be set
1627 Sets colorants in the PDF dictionary. @param colorants map of color space names to PDColorSpace objects
1628 Initializes a new instance of PDTransparencyGroupAttributes. Sets up the dictionary with the necessary transparency settings.
1629 Applies filters to PDF parameters. @param filters list of filter strings
1630 Initializes a new optional content membership dictionary.
1631 Sets the visibility policy in the dictionary. @param visibilityPolicy the policy to set
1632 Applies an affine transformation to a PDF element. @param transform the affine transformation to apply
1633 Sets or clears the bounding box. @param bbox bounding box rectangle, null to clear
1634 Sets the background to a new COSArray. @param newBackground the new background array to set
1635 Updates the bounding box for a PDF element. @param newBBox the new bounding box rectangle
1636 Sets the color space for the object. @param colorSpace the new color space to be set
1637 Masks functions and updates array. @param newFunctions new COSArray of functions
1638 Applies a transformation to an object. @param transform the affine transformation to apply
1639 Sets the domain and updates related configuration. @param newDomain array representing the new domain
1640 Updates the extend array and notifies m1 about the change. @param newExtend the new COSArray to set as extend
1641 Updates the domain with a new array. @param newDomain the new COSArray to set as the domain
1642 Updates coordinates and sets in COSDictionary. @param newCoords array of new coordinates
1643 Sets decode values and updates COS object. @param decodeValues array of decode values
1644 Initializes a new PDExtendedGraphicsState with default settings.
1645 Sets blend mode in dictionary. @param bm blend mode to apply
1646 Sets or removes a float value in the dictionary. @param key the key for the dictionary entry @param value the float value to set, or null to remove the entry
1647 Masks a transfer in the dictionary. @param transfer COSBase object representing the transfer to mask
1648 Sets transfer function dictionary entry. @param transfer2 COSBase object representing transfer function
1649 Sets the next actions in the PDF document. @param next list of PDAction objects representing subsequent actions
1650 Masks an action with the given COSBase. @param t COSBase object to mask the action with
1651 Sets mask visibility. @param h boolean indicating whether to apply mask
1652 Masks fields in an action. @param array COSArray containing field names to mask
1653 Masks a sound stream in an action. @param sound COSStream representing the sound to be masked
1654 Masks fields in a PDF form. @param array COSArray containing field names to mask
1655 Masks an item using COSBase. @param d data to be masked
1656 Masks a base object in an action. @param b COSBase object to be masked
1657 Sets the relationship in the dictionary. @param relationship must be either COSName.P or COSName.C
1658 Constructs a new PDF annotation. Initializes the annotation's dictionary with type set to "Annot".
1659 Sets the rectangle bounds in the dictionary. @param rectangle PDRectangle object defining the bounds
1660 Sets the border array for an object. @param borderArray array defining the border properties
1661 Sets mask differences for a PDF element. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1662 Sets mask margins for a PDF element. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1663 Masks callout array using COSName and COSArray. @param callout float array to be masked
1664 Masks ink list in a PDF document. @param inkList 2D array of ink coordinates
1665 Masks an array of floats using a specific function. @param l array of float values to be masked
1666 Sets quad points for annotation. @param quadPoints array of float values representing quad points
1667 Masks a resource with given identifier. @param rc resource identifier to mask
1668 Masks vertices using provided float array. @param points array of vertex coordinates
1669 Masks points using vertices. @param points array of vertex coordinates
1670 Masks a PDF annotation by setting its parent. @param annot the annotation to mask
1671 Sets document margins. @param differenceLeft left margin adjustment @param differenceTop top margin adjustment @param differenceRight right margin adjustment @param differenceBottom bottom margin adjustment
1672 Sets quad points for annotation. @param quadPoints array of 8 floats defining the quadrilateral
1673 Initializes a new PDAppearanceDictionary with required entries.
1674 Sets dash pattern for drawing. @param dashArray array defining dash pattern
1675 Initializes a PDSeedValue with a COSDictionary. Sets the type to "SV" and marks it as a direct object.
1676 Sets the filter in the dictionary. @param filter the filter to be set
1677 Sets subfilters in dictionary. @param subfilter list of subfilter strings
1678 Validates and sets digest methods. @param digestMethod list of digest method names to be validated and set
1679 Masks given reasons in the dictionary. @param reasons list of reason strings to mask
1680 Sets MDP seed value in the dictionary. @param mdp PDSeedValueMDP object containing seed data
1681 Sets timestamp in dictionary if not null. @param timestamp PDSeedValueTimeStamp object to set
1682 Sets legal attestations in the document. @param legalAttestation list of legal attestation strings
1683 Initializes a new PDSeedValueCertificate. Sets up the internal dictionary with type SV_CERT and marks it as direct.
1684 Masks subjects in the document. @param subjects list of byte arrays representing subjects to be masked
1685 Converts a list of DN maps to COSDictionary and adds to main dictionary. @param subjectDN list of DN key-value pairs
1686 Sets key usage extensions in dictionary. @param keyUsageExtensions list of key usage extension strings
1687 Masks issuer information in PDF document. @param issuers list of issuer byte arrays
1688 Masks OIDs in a list of byte arrays. @param oidByteStrings list of OID byte arrays to mask
1689 Initializes a new PDSignature object. Sets up the signature dictionary with type "Sig".
1690 Sets the TYPE in the dictionary. @param type COSName representing the type to be set
1691 Sets the filter type in the dictionary. @param filter the filter to be applied
1692 Sets the sub-filter in the dictionary. @param subfilter the sub-filter to be set
1693 Sets byte range mask for a PDF document. @param range array of 4 integers defining the byte ranges
1694 Masks byte array and updates dictionary. @param bytes input byte array to mask
1695 Sets text color in PDF. @param textColor Color object representing the text color
1696 Initializes a new PDF AcroForm. @param doc the PDF document to associate with this form
1697 Masks fields by adding them to the dictionary. @param fields list of PDField objects to mask
1698 Masks specified PDF fields. @param fields list of PDField objects to be masked
1699 Constructs a PDButton. @param acroForm parent form containing this button
1700 Masks values by adding to COSArray. @param values List of string values to mask
1701 Initializes a new choice field in an Acrobat form. @param acroForm the parent form containing this field
1702 Masks fields by setting their children in a PDF document. @param children list of PDField objects to be masked
1703 Masks an object using COSName.V. @param object the object to be masked
1704 Masks a value by setting it in a COS object. @param value the value to be masked
1705 Creates a new PDSignatureField in the given form. @param acroForm parent PDF form
1706 Creates a new PDTextField instance. @param acroForm parent form containing the text field
1707 Sets or removes default style string in document settings. @param defaultStyleString style to apply or null to remove
1708 Sets or removes rich text value. @param richTextValue the rich text to set; null to remove it
1709 Sets coordinate system origin. @param coordSystemOrigin array containing x, y, z coordinates
1710 Initializes a new PDThread with a COSDictionary.
1711 Applies mask to transition based on direction. @param direction specifies the transition direction
1712 Sets mask duration. @param duration mask duration in seconds
1713 Sets scaling factor for transformation. @param scale scaling factor to apply
1714 Sets mask visibility. @param opaque true to make mask opaque, false otherwise
1715 Adds elements from a collection to the list. @param c collection of elements to add @return true if this list changed as a result of the call @throws UnsupportedOperationException if adding to a filtered list
1716 Sets the non-stroking color based on operands. @param operands list of COSBase objects representing color values @throws IOException if color space is not recognized or operands are missing
1717 Inserts a collection at a specified index. @param index position to insert the collection @param c collection of elements to insert @return true if insertion is successful @throws UnsupportedOperationException if inserting into a filtered list
1718 Processes an array of COS objects. @param objectList list of COS objects to process
1719 Generates a float array from COSBase objects. @return array of floats extracted from COSBase or 0 if not a COSNumber
1720 Masks and processes a list of numbers. @return List of Float values or nulls based on processing
1721 Generates a list of integers from masked values. @return List of integers or nulls based on masking logic
1722 Updates parent and structure type for entries in COSArray. @param kArray array of COSBase objects @param newParent new parent dictionary to set @param newStructureType optional new structure type to set
1723 Retrieves minimum value from a range array. @return minimum value as float
1724 Retrieves maximum value from a range array. @return Maximum value as float
1725 Retrieves a PDGamma object from an array at the specified index. @param index position in the array @return PDGamma object or null if not found
1726 Retrieves masked string from option. @return Masked string value or null if not applicable
1727 Retrieves masked value from COSString. @return Masked string or null if not applicable
1728 Converts a PDF blend mode to a Java BlendMode. @param cosBlendMode PDF blend mode object @return Java BlendMode or NORMAL if not recognized
1729 Retrieves colorant names from an array. @return List of colorant names as strings
1730 Retrieves or creates an alternate color space. @return PDColorSpace object representing the alternate color space @throws IOException if there is an issue creating the color space
1731 Retrieves and returns the colorant name from an array. @return The colorant name as a string.
1732 Converts a COSBase object to a PDDestination. @param base the COSBase object to convert @return PDDestination object or null if conversion fails @throws IOException if an error occurs during conversion
1733 Creates a PDPage from the first element of an array. @return PDPage object or null if conditions are not met
1734 Masks a value based on array conditions. @return masked integer or -1 if conditions not met
1735 Retrieves a numeric value from an array element. @return the numeric value or -1 if not found
1736 Initializes a Matrix from a COSArray. @param array COSArray containing matrix elements
1737 Retrieves a COSBase object by key. @param key unique identifier for the COSBase object @return COSBase object associated with the key
1738 Retrieves a value from a dictionary using two keys. @param firstKey primary key to search @param secondKey fallback key if first key is not found @return COSBase object or null if both keys are missing
1739 Retrieves a COSName from a given key. @param key the key to look up @return COSName object or null if not found
1740 Retrieves COSDictionary by key. @param key the key to search for in the dictionary @return COSDictionary object or null if not found
1741 Retrieves COSStream by key. @param key the key to search for @return COSStream object or null if not found
1742 Retrieves an array from a dictionary using a key. @param key the key for the desired array @return COSArray object or null if not found
1743 Retrieves a COSName value by key. @param key the key to search for @param defaultValue the default value to return if not found @return COSName associated with key or defaultValue
1744 Masks a given key to its string representation. @param key the COSName key to mask @return masked string value or null if not applicable
1745 Retrieves string value for a given key. @param key the key to search for @return string value or null if not found
1746 Converts a COSName to a Calendar date. @param key the COSName key to convert @return Calendar object or null if conversion fails
1747 Retrieves a numeric value by key with a default. @param key the key to look up @param defaultValue the default value if not found @return the numeric value or default
1748 Retrieves a float value from a dictionary using a key. @param key the key to look up in the dictionary @param defaultValue the default float value if the key is not found or not a number @return the retrieved float value or the default value
1749 Masks a PDF page by adding graphics state save and restore commands. @param page the PDPage to be masked @throws IOException if an I/O error occurs
1750 Retrieves content streams from a PDF page. @return Iterator of PDStream objects representing content streams
1751 Checks if page has content. @return true if page contains content, false otherwise
1752 Converts a COSDictionary to a COSDictionaryMap. @param map the input COSDictionary @return COSDictionaryMap with converted values or null if input is null @throws IOException if an unknown object type is encountered
1753 Masks an attribute in the PDF document. @param attributeObject object containing attributes to be masked
1754 Retrieves and processes revisions for a specific key. @return Revisions object containing class names and their versions
1755 Masks a class by name in the document. @param className name of the class to mask
1756 Masks an object by adding it to the K entry in a COSDictionary. @param object the object to mask
1757 Updates the reference of a kid in a PDF structure. @param newKid new COSBase object to replace the old reference @param refKid existing reference to be updated
1758 Removes object from K array or sets K to null if it's the only element. @param object the object to remove @return true if object was removed or set to null, false otherwise
1759 Returns a COSBase object by applying a mask function. @return COSBase object resulting from mask operation
1760 Retrieves a masked value from the document. @return COSBase object representing the masked value
1761 Checks if metadata encryption is enabled. @return true if metadata encryption is enabled, false otherwise
1762 Retrieves the masked owner encryption key. @return byte array of masked key or null if not found @throws IOException if an I/O error occurs
1763 Retrieves masked encryption key. @return byte array of masked key or null if not present
1764 Retrieves permissions from a COS string in the dictionary. @return byte array of permissions or null if not found @throws IOException if an I/O error occurs during retrieval
1765 Retrieves the mask value from an annotation's page attribute. @return Integer representing the mask or null if not found
1766 Retrieves and validates a COSBase value from a PDF field. @return COSBase object if valid, otherwise throws an exception or returns null
1767 Retrieves the mask value from a field. @return Integer representing the mask or null if not set
1768 Retrieves a masked value from a PDF field. @return Integer representing the masked value, or null if not found
1769 Retrieves mask value from a PDF field. @return Integer representing the mask or null if not found
1770 Retrieves a mask value from a PDF field. @return Integer representing the mask or null if not found
1771 Retrieves a masked value from the field. @return Integer value or null if not available
1772 Retrieves mask value from a field. @return Integer representing the mask or null if not set
1773 Retrieves the default width value. @return default width as a float, with a fallback of 1000 if not set
1774 Retrieves the color space from a PDF dictionary. @return PDColorSpace object or null if not found
1775 Retrieves the color space from resources. @param resources PDF document resources @return PDColorSpace object or null if not found
1776 Initializes an optional content group from a given dictionary. @param dict the COSDictionary representing the OCG @throws IllegalArgumentException if dictionary does not represent an OCG
1777 Constructs a PDOptionalContentMembershipDictionary from a COSDictionary. @param dict the COSDictionary to use for initialization @throws IllegalArgumentException if the dictionary is not of type 'OCMD'
1778 Retrieves the OPM value from a dictionary. @return Integer OPM value or null if not found
1779 Retrieves soft mask from dictionary. @return PDSoftMask object or null if not found
1780 Retrieves a float value from a dictionary using a key. @param key the key to look up in the dictionary @return Float value if found, otherwise null
1781 Retrieves and validates a COSBase object from the dictionary. @return COSBase object or null if conditions are not met
1782 Retrieves and validates a COSBase object from the dictionary. @return COSBase object or null if validation fails
1783 Retrieves or initializes the backdrop color. @return COSArray representing the backdrop color
1784 Determines the open mode based on a configuration setting. @return OpenMode enum value indicating window behavior
1785 Retrieves a masked action. @return COSBase representing the masked action
1786 Determines the open mode based on PDF settings. @return OpenMode enum indicating window behavior
1787 Determines the open mode based on a configuration setting. @return OpenMode enum value indicating how to open content
1788 Retrieves a named destination from the dictionary. @return PDNamedDestination object or null if not found
1789 Initializes a PDF annotation from a dictionary. @param dict the COSDictionary containing annotation data
1790 Retrieves contents as a byte array. @return byte array representing the contents or empty array if not found
1791 Retrieves XFA resource from dictionary. @return PDXFAResource object or null if not found
1792 Retrieves masked field values from PDF document. @return List of masked field values or empty list if none found
1793 Masks data by fetching and processing field values. @return List of masked strings from the field values
1794 Retrieves a list of strings from a PDF object by name. @param name the key to fetch the value from @return List of string values or empty list if not found
1795 Retrieves a COSBase object by key. @param key the key to search for @return the corresponding COSBase object or null if not found
1796 Retrieves a masked value from an object. @return COSBase object containing the masked value
1797 Retrieves masked value from PDF field. @return Masked string value or empty if null
1798 Retrieves a masked value from a COSBase object. @return COSBase object with masking applied
1799 Masks functionality with error handling. @return masked result or error message
1800 Processes a collection of COSObjectKeys, updating indirect objects. @param indirectObjects collection of keys to process
1801 Updates XRef object numbers for imported PDF page. @param importedPage the PDPage to be updated
1802 Calls m1 on visualSignature and pdfSource, handling exceptions. @throws IOException if an I/O error occurs
1803 Masks a PDF object in the document. @param key unique identifier for the COSObjectKey @param obj COSBase object to be masked @throws IOException if an I/O error occurs
1804 Masks a COSBase object by writing its key components. @param obj the COSBase object to mask @throws IOException if an I/O error occurs during masking
1805 Retrieves COSObjectKey from pool. @param object base object to key mapping @return COSObjectKey associated with object
1806 Assigns a unique object key to a PDF object. @param key initial or null object key @param object PDF object to be assigned a key @return updated or new COSObjectKey for the object
1807 Checks if an object is in the pool. @param object the object to check @return true if object is in the pool, false otherwise
1808 Creates and populates COSWriterObjectStreams. @return List of COSWriterObjectStreams containing objects from objectPool
1809 Processes lines for text alignment and spacing. @param lines list of Line objects to process @param isFirstParagraph flag indicating if it's the first paragraph @throws IOException if an I/O error occurs
1810 Draws masked segments based on current angle and parameters. @param angleCur current angle in degrees @param r radius of the circle @param alpha angle parameter for masking @param cx x-coordinate of center @param cy y-coordinate of center
1811 Generates mask points for given angle and radius. @param angleCur current angle in degrees @param r radius of the mask @return array of Points representing mask outline @throws IOException if an I/O error occurs
1812 Draws an arc segment. @param startAng starting angle in radians @param endAng ending angle in radians @param rx horizontal radius @param ry vertical radius @param cx center x-coordinate @param cy center y-coordinate @param out output list of points or null @param addMoveTo flag to move to start point @throws IOException if an I/O error occurs
1813 Initializes PDICCBased with a document. @param doc PDDocument to associate with the ICCBased object
1814 Initializes a PDPattern with specified resources and color space. @param resources PDResources object containing pattern resources @param colorSpace PDColorSpace defining the pattern's color model
1815 Masks a list of property lists. @param ocgs List of PDPropertyList objects to mask
1816 Updates number format dictionaries. @param changeXs array of PDNumberFormatDictionary objects to update
1817 Updates Y values with given format dictionaries. @param changeYs array of PDNumberFormatDictionary objects
1818 Masks distances by adding them to a COSArray. @param distances array of PDNumberFormatDictionary objects
1819 Masks specified areas in a document. @param areas array of PDNumberFormatDictionary objects to mask
1820 Masks angles by adding them to a COSArray. @param angles array of PDNumberFormatDictionary objects representing angles
1821 Masks line slopes in a PDF document. @param lineSloaps array of number format dictionaries for line slopes
1822 Calls overloaded method with default second parameter. @param size specifies the size of the operation
1823 Parses a masked token from the source. @throws IOException if an I/O error occurs during parsing @return COSBase object representing parsed value or null if invalid
1824 Sets decoding parameters for a stream. @param decodeParams list of decoding parameters
1825 Sets decode parameters using a list. @param decodeParams list of decode parameters
1826 Masks children objects. @param kids list of child objects to mask
1827 Sets field options from a list. @param options list of option objects
1828 Creates a PDRange from stream's range array. @param n index for the range array @return PDRange object or empty PDRange if conditions not met
1829 Populates CID font with glyph widths. @param cidFont CID font dictionary to update
1830 Sets line dash pattern in dictionary. @param dashPattern defines line dash pattern
1831 Sets mask color in PDF dictionary. @param color PDColor to be masked or null for no mask
1832 Masks color using PDColor. @param c PDColor object to be masked
1833 Masks image color. @param ic Image color to mask
1834 Sets the color mask. @param ic PDColor object representing the color mask
1835 Sets image color mask. @param ic PDColor object representing the color mask
1836 Masks an image color. @param ic PDColor to be masked
1837 Sets border color for PDF element. @param c PDColor object representing the color
1838 Sets background color using PDColor. @param c PDColor object representing the background color
1839 Applies text color mask. @param textColor color to apply as mask
1840 Creates an image mask from an input stream. @param document PDF document to add the mask to @param stream input stream containing mask data @return PDImageXObject representing the mask @throws IOException if there's an issue processing the stream
1841 Applies font settings to a PDF document. @param font the font to be applied
1842 Sets the tint transform function. @param tint PDFunction representing the tint transformation
1843 Sets the tint transformation function. @param tint PDFunction representing the tint transformation
1844 Masks a PDF page by applying an array operation. @param page PDPage to be masked
1845 Creates and configures a PDRectangle. @return Configured PDRectangle object
1846 Applies gamma correction to the first element. @param colour PDGamma object representing color data
1847 Applies gamma correction to color. @param colour PDGamma object representing the color
1848 Applies gamma correction to the image. @param colour PDGamma object representing the color settings
1849 Applies mask using specified color. @param colour PDGamma color to apply
1850 Applies mask to PDF object. @param obj PDF object to process @param objNum object number @param genNum generation number @return processed PDF object
1851 Calls overloaded method with COSName. @param key string key to be converted to COSName @param value object associated with the key
1852 Sets the AcroForm in the document. @param acroForm the form to be set
1853 Applies viewer preferences to the document. @param prefs PDViewerPreferences object containing settings
1854 Sets document outlines. @param outlines PDDocumentOutline object to set
1855 Sets metadata in the PDF document. @param meta PDMetadata object containing metadata to be set
1856 Sets the open action for the document. @param action the action to perform on opening
1857 Sets additional actions in document catalog. @param actions Additional actions to be set
1858 Sets document name dictionary. @param names document name dictionary to set
1859 Masks an image with provided mark info. @param markInfo information to apply as mask
1860 Sets URI dictionary in root element. @param uri PDURIDictionary containing URI information
1861 Updates PDF structure tree root. @param treeRoot new structure tree root
1862 Sets page labels in PDF document. @param labels PDPageLabels object containing page label settings
1863 Updates destination names in the document. @param dests PDDestinationNameTreeNode containing new destinations
1864 Sets embedded files in the name dictionary. @param ef PDEmbeddedFilesNameTreeNode object containing file information
1865 Masks JavaScript node in dictionary. @param js JavaScript node to mask
1866 Creates a new PDF page with specified media box. @param mediaBox dimensions and position of the page
1867 Sets PDF page resources. @param resources PDResources object containing page resources
1868 Sets the media box for a PDF page. @param mediaBox the new media box dimensions
1869 Sets or removes the bleed box for a page. @param bleedBox rectangle defining the bleed area or null to remove it
1870 Sets or removes the trim box for a page. @param trimBox the new trim box or null to remove it
1871 Sets or removes the art box for a page. @param artBox rectangle defining the art box or null to remove it
1872 Sets the content stream of a PDF page. @param contents PDStream containing the content to be set
1873 Sets metadata on a PDF document. @param meta PDMetadata object containing document metadata
1874 Sets additional actions for a PDF page. @param actions PDPageAdditionalActions object containing actions to set
1875 Sets transition effect for a PDF page. @param transition transition effect to apply
1876 Sets transition and duration for a PDF page. @param transition the page transition effect @param duration the transition duration in seconds
1877 Masks a PDF page. @param page PDPage to be masked
1878 Masks an annotation by adding it to a PDF object. @param annotation the annotation to be masked
1879 Masks an XObject using OBJ name. @param xobject PDF object to be masked
1880 Marks a PDF page. @param page PDPage object to be marked
1881 Masks a PDF structure node. @param structureNode the structure node to mask
1882 Masks a PDF page by setting its PG property. @param page PDPage object to be masked
1883 Masks attributes based on revision numbers. @param attributes list of attribute objects with revisions
1884 Sets the ID tree in the document structure. @param idTree node tree containing document structure elements
1885 Sets the parent tree node. @param parentTree PDNumberTreeNode representing the parent tree
1886 Sets annotation's rectangle. @param rectangle bounding box for annotation
1887 Sets border style for an annotation. @param bs border style dictionary to apply
1888 Sets border effect dictionary for annotation. @param be border effect dictionary to set
1889 Sets annotation mask with specified rectangle. @param fringe rectangle defining the mask area
1890 Masks annotation with specified rectangle. @param fringe defining the mask's boundary
1891 Masks annotation with specified rectangle. @param fringe rectangle defining mask area
1892 Sets annotation's rectangle to specified dimensions. @param fringe PDRectangle defining new dimensions
1893 Updates document catalog with FDF data. @param fdf FDF dictionary to be added
1894 Masks a signature in the PDF document. @param sig PDSignature object to be masked
1895 Sets file specification in FDF document. @param fs PDF file specification to set
1896 Sets JavaScript action in FDF document. @param js JavaScript object to be set
1897 Sets the catalog in the document's trailer. @param cat FDFCatalog to be set as the root
1898 Sets appearance dictionary for a field. @param ap appearance dictionary to set
1899 Masks a field on a PDF page. @param ref reference to the named page
1900 Sets the icon fit for the field. @param fit the icon fit configuration to apply
1901 Masks an action with a specific field. @param a PDAction to be masked
1902 Sets additional actions in a PDF field. @param aa PDAdditionalActions containing actions to be set
1903 Masks PDRange in fit. @param space PDRange to be masked
1904 Masks a file specification in a PDF document. @param fs file specification to be masked
1905 Sets document information on a PDF page. @param info FDFPageInfo containing metadata to set
1906 Sets a named page reference in the template. @param tRef named page reference to set
1907 Masks a stream as a font file. @param type1Stream PDStream containing the font data
1908 Masks font file stream. @param ttfStream TrueType font stream to be masked
1909 Masks font file in PDF stream. @param stream PDF data stream containing font file
1910 Masks stream with CID set. @param stream PDStream to be masked
1911 Sets the white point in the color space. @param whitepoint PDTristimulus object representing the white point
1912 Sets the black point in the PDF dictionary. @param blackpoint PDTristimulus object representing the black point
1913 Sets extended graphics state. @param extendedGraphicsState the new graphics state to apply
1914 Sets shading resources and updates PDF document. @param shadingResources PDShading object to be set
1915 Sets resources in the PDF document. @param resources PDResources to be set
1916 Updates the function and resets the array. @param newFunction the new PDFunction to set
1917 Sets font settings in PDF dictionary. @param fs PDFontSetting object containing font configuration
1918 Sets destination for a PDF action. @param d PDDestination object to set
1919 Masks file specification in PDF. @param fs file specification to be masked
1920 Masks target directory using specified COS name. @param targetDirectory directory to be masked
1921 Sets destination for a PDF document. @param d destination object to set
1922 Masks a file specification in an action. @param fs file specification to be masked
1923 Masks file specification in PDF. @param fs file specification to be masked
1924 Masks window launch parameters. @param win PDWindowsLaunchParams object containing window settings
1925 Masks file specification in PDF. @param fs file specification to be masked
1926 Sets file specification for an action. @param fs PDF file specification
1927 Masks a PDF file specification. @param fs PDF file specification to be masked
1928 Masks an action with a specific flag. @param action PDAction to be masked
1929 Masks an action with COSName.E. @param e PDAction to be masked
1930 Masks an action in a PDF document. @param x PDAction to be masked
1931 Masks an action with type D. @param d PDAction to be masked
1932 Masks an action with the "U" key. @param u PDAction to be masked
1933 Masks an action with FO. @param fo PDAction object to be masked
1934 Masks an action with BL name. @param bl PDAction to be masked
1935 Masks an action with specified parameters. @param po PDAction object to be masked
1936 Masks an action with PC name. @param pc PDAction object to be masked
1937 Masks an action with PV. @param pv PDAction object to be masked
1938 Masks an action with PI. @param pi PDAction to be masked
1939 Masks an action with WC name. @param wc PDAction to be masked
1940 Masks an action with a specified workspace. @param ws PDAction object representing the workspace to mask
1941 Masks an action with DS name. @param ds PDAction to be masked
1942 Masks an action with a specified PDF action. @param wp PDAction object to be masked
1943 Masks an action with a given PDAction. @param dp PDAction to be masked
1944 Masks an action with type K. @param k PDAction to be masked
1945 Adds an action to the document. @param f PDAction object representing the action to add
1946 Masks an action with a specific name. @param v PDAction to be masked
1947 Masks an action by adding it to the actions map. @param c PDAction object to be masked
1948 Masks an action with COSName.O. @param o PDAction object to be masked
1949 Masks an action by adding it to a specific category. @param c the action to be masked
1950 Masks a target directory. @param targetDirectory directory to be masked
1951 Sets named destination in dictionary. @param dest named destination to set
1952 Sets the appearance dictionary. @param appearance PDAppearanceDictionary to set
1953 Sets PDF property list for optional content. @param oc PDPropertyList object representing properties
1954 Masks a PDF page. @param page PDPage to be masked
1955 Masks a PDF file specification. @param file PDFileSpecification to be masked
1956 Sets border effect dictionary. @param be border effect dictionary to set
1957 Masks content within a specified rectangle. @param rd rectangle defining the area to mask
1958 Masks an action with a specific name. @param action the action to be masked
1959 Sets border style in dictionary. @param bs border style dictionary to apply
1960 Masks destination in PDF. @param dest destination to be masked
1961 Masks an action URI. @param pa PDActionURI object to be masked
1962 Sets the popup annotation. @param popup the annotation to set
1963 Masks an annotation by setting its IRT property. @param irt annotation to be masked
1964 Masks external data. @param externalData dictionary containing external data to mask
1965 Sets border style dictionary. @param bs border style to apply
1966 Sets border effect dictionary. @param be border effect configuration
1967 Sets border effect dictionary. @param be border effect dictionary to set
1968 Sets rectangle bounds. @param rd PDRectangle object defining bounds
1969 Sets mask properties for appearance characteristics. @param appearanceCharacteristics dictionary containing mask settings
1970 Masks an action with a specific name. @param action the action to be masked
1971 Sets additional actions for annotations. @param actions annotation actions to be set
1972 Sets border style dictionary. @param bs border style to apply
1973 Sets parent field in PDF terminal. @param field the terminal field to set as parent @throws IllegalArgumentException if field shares dictionary with its only widget
1974 Masks appearance entry in dictionary. @param entry PDAppearanceEntry to be masked
1975 Sets appearance stream in dictionary. @param ap appearance stream to set
1976 Masks an appearance entry in the dictionary. @param entry the PDAppearanceEntry to mask
1977 Sets appearance stream in dictionary. @param ap Appearance stream to set
1978 Masks an appearance entry in the dictionary. @param entry the PDAppearanceEntry to mask
1979 Sets appearance stream for annotation. @param ap appearance stream to set
1980 Sets filter property in dictionary. @param filter PDPropBuildDataDict containing filter details
1981 Sets public security settings in the dictionary. @param pubSec configuration data for public security
1982 Sets application data in the dictionary. @param app PDPropBuildDataDict containing application properties
1983 Adds a certificate to the dictionary under the CERT key. @param certificate PDSeedValueCertificate object to be added
1984 Sets property build in dictionary. @param propBuild property build object to set
1985 Masks an outline node by setting its previous sibling. @param outlineNode the node to be masked
1986 Sets the next node in an outline. @param outlineNode the node to set as the next node
1987 Sets destination for PDF action. @param dest destination object to set
1988 Masks an action by adding it to a PDF document. @param action PDAction to be masked
1989 Masks PDStructureElement by setting SE attribute. @param structureElement element to be masked
1990 Masks an outline node in PDF. @param outlineNode node to be masked
1991 Masks an outline node by setting its last attribute. @param outlineNode the outline node to be masked
1992 Updates resources in the document. @param dr PDResources object containing new resource data
1993 Sets XFA resource in dictionary. @param xfa PDXFAResource to be set
1994 Masks a signature in a PDF document. @param value PDSignature object to be masked @throws IOException if an I/O error occurs during processing
1995 Masks a signature by setting its value. @param value PDSignature object to be masked
1996 Masks seed value. @param sv seed value to be masked
1997 Sets additional actions for form fields. @param actions PDFormFieldAdditionalActions object containing actions
1998 Masks annotations by setting their parent and updating the KIDS array. @param children list of annotation widgets to mask
1999 Sets bounding box for a PDF element. @param rectangle PDRectangle defining the bounds
2000 Sets measure dictionary. @param measure PDMeasureDictionary object to set
2001 Masks document information. @param info PDDocumentInformation object to be masked
2002 Masks a thread by setting its status. @param thread PDThread to be masked
2003 Masks the current bead with the next thread bead. @param next the next PDThreadBead in sequence
2004 Masks the current bead with the previous one. @param previous the preceding bead in the thread
2005 Masks a PDF page. @param page PDPage object to be masked
2006 Sets the rectangle for the bead. @param rect PDRectangle defining the area
2007 Marks an item in the dictionary. @param value true to mark, false otherwise
2008 Masks user properties in dictionary. @param userProps flag to mask or unmask user properties
2009 Updates dictionary entry for suspects. @param suspect indicates if the entity is suspected
2010 Sets map visibility. @param value true to show map, false to hide
2011 Masks functionality based on open flag. @param open true to enable masking, false otherwise
2012 Masks functionality based on flag. @param fd flag to enable or disable masking
2013 Sets file volatility flag. @param fileIsVolatile true if file is volatile, false otherwise
2014 Sets encryption metadata flag. @param encryptMetaData true to enable, false otherwise
2015 Sets line cap style. @param cap true to enable round caps, false for square caps
2016 Sets mask flag. @param value boolean indicating whether to apply mask
2017 Masks functionality in template. @param value true to mask, false otherwise
2018 Sets anti-aliasing preference in dictionary. @param antiAlias true to enable anti-aliasing, false otherwise
2019 Sets operation flag in dictionary. @param op boolean value to set as operation flag
2020 Sets operation namespace flag. @param op boolean value to set the flag
2021 Sets security attribute in dictionary. @param sa boolean flag indicating security status
2022 Sets the Alpha Source flag in the dictionary. @param alpha boolean value to set AIS flag
2023 Sets token flag in dictionary. @param tk boolean value to set as token flag
2024 Sets open mode for a document. @param value the desired open mode (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
2025 Handles different open modes. @param value the open mode to be applied
2026 Sets window open mode. @param value the desired open mode (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
2027 Sets action to be synchronous or asynchronous. @param synchronous true for synchronous, false for asynchronous
2028 Sets repeat action. @param repeat true to enable repeat, false otherwise
2029 Sets mixing mode. @param mix true to enable mixing, false otherwise
2030 Sets line cap style. @param cap true for rounded cap, false for butt cap
2031 Sets the mask state. @param open true to enable mask, false otherwise
2032 Sets the pre-release flag in the dictionary. @param preRelease boolean indicating if it's a pre-release version
2033 Sets non-embedded font warning preference. @param noEmbedFontWarning flag to suppress warnings about non-embedded fonts
2034 Sets trusted mode in the dictionary. @param trustedMode true to enable trusted mode, false otherwise
2035 Sets the NEED_APPEARANCES flag in the PDF dictionary. @param value boolean indicating whether appearances are needed
2036 Sets toolbar visibility preference. @param value true to hide, false to show toolbar
2037 Sets menu bar visibility preference. @param value true to hide, false to show
2038 Sets the window UI visibility preference. @param value true to hide, false to show
2039 Sets the fit window preference. @param value true to enable fit window, false otherwise
2040 Sets center window preference. @param value true to enable, false to disable
2041 Sets display document title preference. @param value true to enable, false to disable
2042 Builds a COSDictionary from appearance XML. @param appearanceXML XML element representing appearance data @return COSDictionary containing processed appearance data @throws IOException if an I/O error occurs
2043 Calls overloaded method with COSName. @param key string key to convert to COSName @param value associated value
2044 Sets the page mode of the document. @param mode the desired page mode
2045 Sets page layout in PDF document. @param layout desired page layout configuration
2046 Sets the PDF version. @param version PDF version string
2047 Validates and sets the trapped status. @param value the trapped status to set; must be "True", "False", or "Unknown"
2048 Sets or clears the style. @param style the style to set or null to clear it
2049 Initializes a new dictionary with a specified type. @param type the type of the dictionary
2050 Masks content with specified owner. @param owner identifier of the content owner
2051 Initializes a new instance of PDMarkedContentReference. Sets up the dictionary with the type attribute.
2052 Initializes a new PDObjectReference with an empty dictionary. Sets the "Type" entry in the dictionary to "OBJR".
2053 Sets mask for a given structure type. @param structureType type of structure to apply mask
2054 Masks class names with revisions. @param classNames Revisions object containing class names and their revisions
2055 Initializes a PDStructureNode with a specified type. @param type node type as a string
2056 Masks the style in the dictionary. @param style the style to be masked
2057 Sets the sub-filter in the dictionary. @param subfilter the sub-filter value to be set
2058 Masks an intent by setting it in annotations. @param intent the intent to be masked
2059 Applies a mask style to an annotation. @param style the mask style to apply
2060 Masks an icon by setting its annotation. @param icon the icon to mask
2061 Sets the document version. @param version the version string to be set
2062 Sets the encoding for PDF document. @param encoding the character encoding to use
2063 Masks an option by setting it in the COSName. @param option the option to be masked
2064 Sets scaling factor for masking. @param scale scaling value as string
2065 Initializes a new pattern dictionary. Sets the type to "Pattern".
2066 Sets the action type. @param type the type of action to set
2067 Masks a string by invoking an action with COSName.S. @param s the string to mask
2068 Sets the subtype for an element. @param subType the subtype to be set
2069 Masks input string using COSName.AS. @param as input string to be masked
2070 Masks a function by name. @param name the name of the function to mask
2071 Applies a mask style to an element. @param style the mask style to apply
2072 Sets caption positioning. @param captionPositioning position of the caption
2073 Masks content based on mode. @param mode specifies masking behavior
2074 Masks a resource type. @param rt resource type to mask
2075 Sets the IT field in the document. @param it value to be set for the IT field
2076 Calls m2 on result of m1 with NAME constant and given name. @param name the name to be passed to m2
2077 Calls method m2 on the result of m1 with COSName.NAME and provided name. @param name the name to be passed to m2
2078 Sets the highlighting mode. @param highlightingMode valid modes: 'N', 'I', 'O', 'P', 'T' @throws IllegalArgumentException if invalid mode is provided
2079 Calls method m2 with COSName.S and string parameter. @param s input string to be processed
2080 Initializes a new instance of PDExternalDataDictionary. Sets up the data dictionary with type "ExData".
2081 Sets the subtype for the current object. @param subtype the subtype to be set
2082 Sets a named entry in the dictionary. @param name key to be set in the dictionary
2083 Sets URL type in dictionary. @param urlType type of URL to be set
2084 Initializes a new PDF document outline. Sets the "Type" field of the underlying COS object to "Outlines".
2085 Constructs a PDDocumentOutline from a COSDictionary. @param dic dictionary containing outline data
2086 Initializes a new PDMeasureDictionary with an empty dictionary.
2087 Sets the subtype for the current object. @param subtype the subtype to be set
2088 Initializes a new PDNumberFormatDictionary. Sets up the number format dictionary with type attribute.
2089 Calls m1 and then m2 on its result. @param name the name to be passed to m2
2090 Initializes a transition with a specified style. @param style the transition effect style
2091 Masks transition dimension. @param dimension transition dimension to mask
2092 Applies a transition effect to a PDF page. @param motion specifies the transition motion
2093 Sets non-full screen page mode preference. @param value mode to set for non-full screen view
2094 Sets reading direction preference. @param value direction setting to apply
2095 Sets view area boundary. @param value BOUNDARY object defining the area
2096 Updates view clip boundary. @param value BOUNDARY object representing new clip settings
2097 Sets print area boundary. @param value boundary object containing print area settings
2098 Sets print clipping preference. @param value boundary value to set
2099 Sets duplex printing preference. @param value duplex mode setting
2100 Sets print scaling preference. @param value new print scaling setting
2101 Masks a key with a given date. @param key the COSName to be masked @param date the date used for masking
2102 Calls overloaded method with COSName. @param key string key to be converted to COSName @param value associated value
2103 Sets the document language. @param language ISO 639-1 language code (e.g., "en" for English)
2104 Sets the document title. @param title the title to be set
2105 Sets the document's author metadata. @param author name of the document author
2106 Sets the document's subject metadata. @param subject the subject to be set
2107 Sets document keywords. @param keywords comma-separated list of keywords
2108 Sets the creator information in metadata. @param creator name of the document creator
2109 Sets the producer information in the document. @param producer name of the document producer
2110 Masks a key with an optional prefix. @param prefix prefix to use for masking; if null, uses default behavior
2111 Masks a file by setting its UF attribute. @param file path to the file to be masked
2112 Masks a file by invoking a filesystem operation. @param file path to the file to be masked
2113 Sets the description in the PDF document. @param description text to be set as the document's description
2114 Masks an ID by setting it in a COSName. @param id the ID to be masked
2115 Masks a title by setting it in a COSName. @param title the title to be masked
2116 Sets document language. @param language language code to be set
2117 Sets an alternative description. @param alternateDescription the new description to set
2118 Masks an expanded form using COSName.E. @param expandedForm the string to be masked
2119 Sets the actual text for an annotation. @param actualText the text to be displayed
2120 Masks a date by annotating it. @param date the date to be masked
2121 Masks a function by setting its name. @param name the name of the function to mask
2122 Masks the given contents by annotating them. @param contents the content to be masked
2123 Sets the annotation title. @param title the title to be set
2124 Sets the annotation's subject. @param subject the subject to be set
2125 Masks a symbol by converting it to a specific code. @param symbol the original symbol to be masked
2126 Sets the appearance of an annotation. @param appearance visual representation string
2127 Sets annotation style. @param style the style to apply
2128 Sets the caption style for annotations. @param captionStyle style to apply to captions
2129 Sets the annotation's state. @param state the new state value
2130 Sets the state model for annotation. @param stateModel the state model value to set
2131 Sets the status using COSName. @param status new status value to set
2132 Sets the target for masking. @param target the target string to be masked
2133 Masks a field with a given partial value. @param partial the partial value to mask the field with
2134 Sets a mask with the given name. @param name the name of the mask to set
2135 Masks a function by setting its name in the dictionary. @param name the name of the function to mask
2136 Initializes PDOptionalContentProperties with default settings.
2137 Sets JavaScript action. @param sAction JavaScript code to execute
2138 Masks a function by name. @param f function name to be masked
2139 Masks input data using COSName.D. @param d data to be masked
2140 Masks an object by name. @param o object to be masked
2141 Masks a string by passing it to an action method. @param p the string to be masked
2142 Sets URI in PDF action. @param uri the Uniform Resource Identifier to set
2143 Masks a file by adding it to the dictionary. @param filename name of the file to mask
2144 Masks a given name by adding it to a dictionary. @param name the name to be masked
2145 Masks a file by setting its parameter. @param file path to the file to be masked
2146 Masks directory by setting parameter. @param dir directory path to be masked
2147 Masks operation by setting parameter. @param op operation to mask
2148 Masks parameter by adding it to COS parameters. @param param value to be masked
2149 Sets the content of a PDF dictionary entry. @param value the content string to be set
2150 Masks input string using specific method. @param m input string to be masked
2151 Masks a name by setting it in a PDF document. @param nm the name to be masked
2152 Sets the field appearance string. @param daValue the appearance string to set
2153 Sets default style string. @param defaultStyleString style to be applied
2154 Masks text by setting its visibility. @param t text to be masked
2155 Sets the subject of a document. @param subj the subject string to be set
2156 Sets the state for an operation. @param state the state to be set
2157 Sets the state model. @param stateModel the state model to be set
2158 Sets the caption mask. @param caption text to be masked
2159 Sets a caption using COSName.RC. @param caption text to be set as caption
2160 Masks content with a given caption. @param caption text to mask the content
2161 Sets the DATE field in the dictionary with the provided date. @param date the date string to be set
2162 Sets URL in dictionary. @param url the URL to be set
2163 Masks a URL by adding it to a dictionary. @param url the URL to be masked
2164 Masks a name by adding it to the dictionary. @param name the name to be masked
2165 Sets the document location in the PDF. @param location the location string to be set
2166 Sets the mask reason in the dictionary. @param reason the reason for masking
2167 Sets contact information in the dictionary. @param contactInfo user's contact details
2168 Sets document title. @param title document title to be set
2169 Sets the default appearance value. @param daValue the default appearance string
2170 Masks a value by setting it in a specific context. @param value the value to be masked
2171 Masks a field name by adding it to the dictionary. @param name the field name to mask @throws IllegalArgumentException if the name contains a period character
2172 Sets an alternative field name in the dictionary. @param alternateFieldName the name to set as an alternative field
2173 Sets mapping name in dictionary. @param mappingName the name to map
2174 Masks a value using COSName.V. @param value the value to be masked @throws IOException if an I/O error occurs
2175 Masks a value by setting it in a PDF document. @param value the value to be masked
2176 Masks a value by setting it in a COS object. @param value the value to mask
2177 Masks a field value in PDF annotations. @param daValue the new DA value to set
2178 Sets scaling ratio. @param scaleRatio scaling factor as string
2179 Calls overloaded method with COSName instance. @param key string key to convert to COSName @param value integer value associated with the key
2180 Sets structure parents in PDF document. @param structParents parent structure index
2181 Sets the page rotation. @param rotation angle in degrees (0, 90, 180, or 270)
2182 Sets the starting page number. @param start positive integer indicating the starting page
2183 Sets bits per sample in PDF document. @param bps number of bits per sample
2184 Sets mask content identifier. @param mcid mask content identifier value
2185 Sets mask with given revision number. @param revisionNumber non-negative integer representing the revision
2186 Sets the next key in the parent tree. @param parentTreeNextkey the next key value to set
2187 Sets the mask length in the cryptographic filter dictionary. @param length the desired length of the mask
2188 Sets PDF version mask. @param version PDF version number to set
2189 Sets the length in the dictionary. @param length the length value to set
2190 Masks a function with a given revision. @param revision the revision number to apply
2191 Sets document permissions. @param permissions bitmask representing access rights
2192 Marks a page in an annotation. @param page page number to be marked
2193 Sets text justification for annotations. @param justification alignment type ("centered" or "right")
2194 Sets document rotation. @param rotation angle in degrees (0, 90, 180, or 270)
2195 Sets form field mask. @param ff mask value to apply
2196 Sets a mask value in the field. @param ff the mask value to set
2197 Sets mask value in field. @param ff mask value to set
2198 Sets a mask value on the field. @param f integer representing the mask value
2199 Sets mask value in PDF field. @param ff mask value to set
2200 Sets mask value for field. @param ff mask value to be applied
2201 Sets document flags. @param flags bitmask representing document flags
2202 Masks font with horizontal metrics and updates dictionary. @param font COSDictionary to update @param glyphList GlyphList for character mapping
2203 Sets the paint type in the pattern dictionary. @param paintType the type of painting to be used
2204 Sets pattern type in dictionary. @param patternType type of pattern to set
2205 Sets the paint type for an object. @param paintType the type of painting to apply
2206 Sets tiling type for PDF. @param tilingType type of tiling to be used
2207 Sets the shading type in the dictionary. @param shadingType the type of shading to apply
2208 Sets bits per flag configuration. @param bitsPerFlag number of bits to use for flags
2209 Sets the number of vertices per row. @param verticesPerRow number of vertices in each row
2210 Sets bits per color component. @param bitsPerComponent number of bits for each color component
2211 Sets bits per coordinate. @param bitsPerCoordinate number of bits for each coordinate
2212 Sets line cap style. @param style line cap style identifier
2213 Sets line join style. @param style line join style identifier
2214 Sets overprint mode in dictionary. @param overprintMode the overprint mode to set or null to remove it
2215 Sets action flags. @param flags bitmask representing action options
2216 Sets action flags. @param flags bitmask representing action options
2217 Sets page number in dictionary. @param pageNumber the page number to set
2218 Masks or unmasks dictionary entry based on index. @param index position in the dictionary; negative to mask, non-negative to unmask
2219 Masks operations with specified flags. @param flags bitmask representing operation flags
2220 Sets structure parent index. @param structParent index of structure parent
2221 Masks a value using COSName.Q. @param q value to be masked
2222 Sets mask rotation. @param rotation degrees to rotate the mask
2223 Masks a value in the dictionary. @param p value to mask, must be between 0 and 3
2224 Sets form field type based on flag. @param flag true for text field, false otherwise
2225 Sets the count of open items. @param openCount number of open items to set
2226 Sets the quality parameter in the dictionary. @param q quality value to be set
2227 Sets form field flags. @param flags bitmask of field attributes
2228 Sets or removes the top index in a document. @param topIndex the index to set; if null, removes the top index
2229 Sets maximum length constraint. @param maxLen maximum allowed length
2230 Calls m2 with COSName.Q and integer value. @param q integer value to be passed to m2
2231 Calls overloaded method with COSName. @param key string key to be converted to COSName @param value long value associated with the key
2232 Updates dictionary with revision. @param revision new revision number to set
2233 Masks a revision in the dictionary. @param revision the revision number to mask
2234 Calls m2 with COSName from key and given float value. @param key string key to convert to COSName @param value float value to pass
2235 Sets user unit on PDF page. @param userUnit scaling factor for user space units
2236 Sets the line width in the PDF document. @param width the desired line width
2237 Sets annotation opacity. @param opacity transparency level (0.0 to 1.0)
2238 Sets the leader line length. @param leaderLength the length of the leader line
2239 Sets leader line extension. @param leaderExtend extension length of leader line
2240 Sets the leader offset for annotation. @param leaderOffset the offset value for the leader line
2241 Sets font weight in dictionary. @param fontWeight numeric value representing font weight
2242 Sets the italic angle in a dictionary. @param angle the italic angle value
2243 Sets the font ascent value. @param ascent the ascent value to set
2244 Sets the font descent value. @param descent the font descent metric
2245 Sets leading property in dictionary. @param leading spacing between lines of text
2246 Sets and records the font's cap height. @param capHeight the height of capital letters in the font
2247 Sets the X-Height value. @param xHeight the new X-Height value to set
2248 Sets the vertical stem width. @param stemV vertical stem width value
2249 Sets the stem height for font rendering. @param stemH height of the stem in font units
2250 Sets the average width in the dictionary. @param averageWidth the average width value to set
2251 Sets the maximum width in the dictionary. @param maxWidth the maximum width value to set
2252 Sets the missing width in the dictionary. @param missingWidth the width to be set
2253 Sets X step value. @param xStep step size for X axis
2254 Sets the Y-axis step value. @param yStep the step size on the Y-axis
2255 Sets audio volume. @param volume level from -1.0 to 1.0
2256 Sets leader line length. @param leaderLineLength length of the leader line
2257 Sets leader line extension length. @param leaderLineExtensionLength length of leader line extension
2258 Sets leader line offset length. @param leaderLineOffsetLength the offset length of the leader line
2259 Sets the "CA" property in the current object. @param ca value to be set for the "CA" property
2260 Sets width property. @param w desired width value
2261 Sets minimum capability requirement. @param minimumRequiredCapability the required capability level
2262 Sets CYX value in m2 of m1. @param cyx CYX float value to set
2263 Processes a COSDictionary to create a COSStream. @param dic dictionary containing stream data @return processed COSStream object @throws IOException if processing fails
2264 Reads and collects objects from a stream. @return List of collected objects or empty list if none found
2265 Parses PDF stream to extract rectangle dimensions. @return PDRectangle object or null if parsing fails
2266 Parses PDF stream and processes operators. @return float result from processing @throws IOException if parsing fails
2267 Constructs a new PDF document using an in-memory stream cache.
2268 Creates a PDFileSpecification from a COSBase. @param base the COSBase object to process @return PDFileSpecification created or null if base is null @throws IOException if base type is unknown
2269 Constructs a new FDF annotation caret. Initializes the subtype to "Caret".
2270 Constructs a new circle annotation. Sets the subtype to 'CIRCLE'.
2271 Constructs a new FDF annotation for file attachment.
2272 Creates a new FDFAnnotationFreeText object. Initializes the annotation subtype to "FreeText".
2273 Constructs an FDFAnnotationInk object. Sets the annotation subtype to "INK".
2274 Creates an FDF annotation line. Sets the subtype to "Line".
2275 Initializes a new FDF annotation link.
2276 Creates a new polygon annotation. Initializes the annotation with subtype "Polygon".
2277 Initializes a new polyline annotation.
2278 Constructs a new sound annotation. Initializes the annotation subtype to "Sound".
2279 Creates a new square annotation. Sets the subtype to "Square".
2280 Initializes a new stamp annotation. Sets the subtype to "Stamp".
2281 Constructs an FDF annotation text object. Initializes the annotation subtype to "Text".
2282 Default constructor for FDFAnnotationTextMarkup.
2283 Processes CID to GID mapping for font metrics. @param cidToGid map of CID to GID @throws IOException if I/O error occurs
2284 Masks CID font metrics. @param cidFont CID font dictionary to process
2285 Constructs a new instance of PDSimpleFont.
2286 Sets decoding values and updates PDF object. @param decodeValues array of decoding parameters
2287 Sets decoding values for the object. @param decodeValues array of decoding values to be set
2288 Sets line width. @param width line width value
2289 Sets the miter limit for PDF line joins. @param miterLimit maximum ratio of miter length to line width
2290 Sets PDF content stream flatness. @param flatness desired flatness value
2291 Sets the smoothness parameter. @param smoothness value controlling smoothness
2292 Sets the opacity level. @param alpha transparency value (0.0 to 1.0)
2293 Sets the non-stroking alpha value. @param alpha opacity level (0.0 to 1.0)
2294 Creates a new PDF annotation link. Initializes the COS object with the subtype "Link".
2295 Constructs a new PDAnnotationMarkup instance.
2296 Constructs a new PDF annotation popup.
2297 Creates a new PDF annotation widget. Initializes the COS object with the subtype.
2298 Calls overloaded method with four identical float parameters. @param difference value to be used for all parameters
2299 Calls overloaded method with four identical float parameters. @param difference value to be passed to all parameters
2300 Calls overloaded method with four identical float arguments. @param difference value to be passed to all parameters
2301 Constructs a new PDCheckBox associated with an acroform. @param acroForm the PDAcroForm to which this checkbox belongs
2302 Constructs a PDComboBox. @param acroForm parent form containing the combo box
2303 Constructs a new PDListBox. @param acroForm parent form containing this list box
2304 Initializes PDRectangle from a COSArray. @param array COSArray containing rectangle coordinates
2305 Initializes a line dash pattern from an array and phase. @param array COSArray containing dash lengths @param phase starting point of the dash pattern
2306 Generates a string representation of PDRange. @return formatted string with values from m1 and m2
2307 Applies a mask function to input values. @param input array of input float values @return processed output float array
2308 Masks a PDRange in the stream's range array. @param range the PDRange to mask @param n index of the range in the array
2309 Processes image data to create a patch. @param input stream for reading image data @param isFree flag indicating if points are free @param implicitEdge predefined edge points @param implicitCornerColor predefined corner colors @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX horizontal coordinate range @param rangeY vertical coordinate range @param colRange color component ranges @param matrix transformation matrix @param xform affine transform @param controlPoints number of control points @return Patch object or null on EOF
2310 Reads and processes image data to create a vertex. @param input source image input stream @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X coordinate range @param rangeY Y coordinate range @param colRangeTab color component ranges @param matrix transformation matrix @param xform additional affine transform @return Vertex object with processed coordinates and colors @throws IOException if reading fails or invalid parameters are provided
2311 Retrieves PDGamma instance with mask 0. @return PDGamma object
2312 Applies a gamma mask to an image. @return PDGamma object representing the masked image
2313 Returns PDGamma with mask applied. @return PDGamma instance with mask effect
2314 Applies gamma correction with mask. @return PDGamma object after applying mask
2315 Retrieves blend mode from dictionary. @return BlendMode object based on COSName.BM
2316 Creates a PDF destination. @return PDDestination object configured with specific settings @throws IOException if an I/O error occurs during creation
2317 Creates a PDF destination. @return PDDestination object configured with specific settings
2318 Creates a destination from a COS name. @return PDDestination object @throws IOException if an error occurs during creation
2319 Creates a PDF destination. @return PDDestination object @throws IOException if an I/O error occurs
2320 Converts a COSBase to a Matrix. @param base input COSBase object @return Matrix created from COSArray or default empty Matrix
2321 Traverses a PDF object path to retrieve a specific COSBase element. @param objPath path string representing the object location @return COSBase element at the specified path or null if not found
2322 Retrieves a destination from the dictionary by name. @param name the key for the destination @return PDDestination object or null if not found @throws IOException if an I/O error occurs
2323 Retrieves COSBase by attribute name. @param attrName attribute name to search for @return COSBase object or null if not found
2324 Retrieves attribute value by name with a default. @param attrName the attribute's name to retrieve @param defaultValue the default value to return if attribute is not found @return the attribute's value or the default value
2325 Checks if a masked value exists for the given name. @param name the key to check in the mask map @return true if the masked value is present, false otherwise
2326 Retrieves an array of names from a PDF object. @param name key for the PDF object @return array of name strings or null if not found
2327 Updates a named item with an array of string values. @param name the name of the item to update @param values array of string values to set
2328 Retrieves a value from a PDF dictionary by name. @param name key to search for in the dictionary @param defaultValue default value to return if key is not found @return array of names or single name as String, or default value if not applicable
2329 Updates a named entry with an array of string values. @param name key for the dictionary entry @param values array of string values to be set
2330 Retrieves and converts a value by name. @param name key to fetch value @param defaultValue default value if conversion fails @return converted value or default
2331 Retrieves a float value by name or default. @param name key for the value in COSBase @param defaultValue fallback value if not found @return float array or single float, or null if unspecified and no default
2332 Masks values in a PDF document under a given name. @param name key for the mask @param values float array to be masked
2333 Retrieves a PDGamma object by name. @param name the key for the gamma function @return PDGamma object or null if not found
2334 Retrieves and processes a COSArray by name. @param name the key to fetch the array @return PDGamma or PDFourColours object based on array type, or null if not found
2335 Retrieves a COSDictionary using two keys. @param firstKey the primary key for lookup @param secondKey the secondary key for lookup @return COSDictionary if found, otherwise null
2336 Checks if a value exists for the given keys; returns default if not. @param firstKey primary key to check @param secondKey secondary key to check @param defaultValue boolean value to return if no entry found @return true if value exists and is true, otherwise defaultValue
2337 Masks value from dictionary using two keys. @param firstKey primary key for lookup @param secondKey secondary key for lookup @param defaultValue default integer value if not found @return masked integer value or default if not a number
2338 Masks and returns a list of filter names. @return List of filter names or empty list if none found
2339 Returns the color space for masking. @return PDColorSpace object or null if not defined
2340 Checks if dictionary is of type catalog or FDF. @param dictionary PDF dictionary to check @return true if dictionary is catalog or FDF, false otherwise
2341 Initializes a PDPageTree with the given root dictionary and document. @param root COSDictionary representing the page tree root @param document PDDocument to which the page tree belongs
2342 Checks if a PDF node is a pages dictionary. @param node the COSDictionary to check @return true if node represents a pages dictionary, false otherwise
2343 Retrieves the encryption filter mask. @return COSName representing the encryption filter mask or null if not found
2344 Retrieves mask function name. @return COSName representing mask function or IDENTITY if none set
2345 Retrieves the mask function name from the dictionary. @return COSName representing the mask function or IDENTITY if not set
2346 Converts code to Unicode string. @param code character code to convert @return Unicode string or null if conversion fails
2347 Creates a PDXObject based on the given base and resources. @param base COSBase object representing the XObject @param resources PDResources containing resources for XObjects @return PDXObject instance or null if base is null @throws IOException if unexpected object type or invalid subtype
2348 Returns the subtype as a COSName. Initializes with COSName.S if not set. @return COSName representing the subtype
2349 Retrieves mask function from dictionary. @return COSName representing the mask function or null if not found
2350 Returns the mask function name. @return COSName representing the mask function
2351 Sets a key-value pair in a dictionary for an embedded object. @param embedded the name of the embedded object @param key the key to set in the dictionary @param value the value to associate with the key
2352 Sets an integer value in the embedded dictionary. @param embeddedDictionary name of the embedded dictionary @param key key under which to store the value @param value integer value to set
2353 Checks if encryption is enabled in the PDF trailer. @return true if encryption is enabled, false otherwise
2354 Returns the encryption dictionary from the trailer. @return COSDictionary containing encryption details or null if not encrypted
2355 Parses PDF trailer to set initial parsing state. @throws IOException if root object is missing
2356 Parses PDF document trailer and updates root dictionary. @throws IOException if root object is missing or other I/O errors occur
2357 Retrieves or creates the document information. @return PDDocumentInformation object representing document metadata
2358 Returns the PDF document catalog. Initializes it if not already created. @return PDDocumentCatalog object
2359 Applies fixes to PDF document's AcroForm and returns the updated form. @param acroFormFixup fix-up operations for AcroForm @return PDAcroForm object with applied fixes or null if not found
2360 Retrieves PDF viewer preferences. @return PDViewerPreferences object or null if not found
2361 Retrieves or creates additional actions for a PDF document. @return PDDocumentCatalogAdditionalActions object representing the actions
2362 Retrieves document name dictionary. @return PDDocumentNameDictionary object or null if not found
2363 Retrieves document name destination dictionary. @return PDDocumentNameDestinationDictionary or null if not found
2364 Retrieves and wraps mark info from PDF document. @return PDMarkInfo object or null if not found
2365 Retrieves URI dictionary from root. @return PDURIDictionary object or null if not found
2366 Retrieves the PDF structure tree root. @return PDStructureTreeRoot object or null if not found
2367 Retrieves optional content properties. @return PDOptionalContentProperties object or null if not found
2368 Initializes a PDDocumentNameDictionary for the given document catalog. @param cat the PDDocumentCatalog to associate with this dictionary
2369 Retrieves destination names tree node. @return PDDestinationNameTreeNode or null if not found
2370 Retrieves the embedded files node from the dictionary. @return PDEmbeddedFilesNameTreeNode object or null if not found
2371 Retrieves JavaScript names dictionary. @return PDJavascriptNameTreeNode or null if not present
2372 Retrieves or creates additional actions for a page. @return PDPageAdditionalActions object for the page
2373 Retrieves and wraps the transition dictionary from a PDF page. @return PDTransition object or null if no transition is defined
2374 Retrieves a COSObject from resources by kind and name. @param kind the type of resource dictionary @param name the key for the object in the dictionary @return COSObject if found, otherwise null
2375 Retrieves a COSBase object from resources based on kind and name. @param kind the type of resource dictionary @param name the key for the value in the dictionary @return COSBase object or null if not found
2376 Retrieves mask names from resource dictionary. @param kind type of resource to look up @return iterable of COSName or empty collection if not found
2377 Generates a unique function mask name. @param kind type of resource @param prefix base string for the mask name @return COSName representing the unique mask name
2378 Adds or updates an entry in the resource dictionary. @param kind type of resource @param name key for the resource entry @param object value to be stored
2379 Retrieves and wraps a page dictionary. @return PDPage object or null if not found
2380 Creates a PDPage from the page dictionary. @return PDPage object or null if no page dictionary is found
2381 Creates a PDPage from a COSDictionary. @return PDPage object or null if dictionary is null
2382 Retrieves and wraps the ID tree for structure elements. @return PDNameTreeNode containing PDStructureElement or null if not found
2383 Retrieves and initializes PDNumberTreeNode from the parent tree. @return PDNumberTreeNode instance or null if parent tree is missing
2384 Populates a map with attribute objects from a COSDictionary. @return Map containing attribute names and their corresponding PDAttributeObjects or lists of PDAttributeObjects
2385 Retrieves a cryptographic filter dictionary by name. @param cryptFilterName the name of the cryptographic filter @return PDCryptFilterDictionary object or null if not found
2386 Adds a cryptographic filter to the dictionary. @param cryptFilterName name of the cryptographic filter @param cryptFilterDictionary configuration for the cryptographic filter
2387 Retrieves border style dictionary from annotation. @return PDBorderStyleDictionary object or null if not found
2388 Retrieves border effect dictionary from annotation. @return PDBorderEffectDictionary or null if not present
2389 Retrieves and wraps the signature dictionary from the catalog. @return PDSignature object or null if no signature is found
2390 Retrieves JavaScript dictionary from FDF document. @return FDFJavaScript object or null if not found
2391 Retrieves appearance dictionary for a field. @return PDAppearanceDictionary object or null if not found
2392 Retrieves named page reference from field. @return FDFNamedPageReference object or null if not found
2393 Retrieves icon fit settings from field dictionary. @return FDFIconFit object or null if not found
2394 Retrieves additional actions from a PDF field. @return PDAdditionalActions object or null if not found
2395 Retrieves page info from a PDF document. @return FDFPageInfo object or null if not found
2396 Retrieves named page reference from template. @return FDFNamedPageReference object or null if not found
2397 Retrieves CID system information from the dictionary. @return PDCIDSystemInfo object or null if not found
2398 Retrieves PDPanose from font dictionary. @return PDPanose object or null if not found
2399 Returns the resources dictionary. @return PDResources object or null if not available
2400 Returns the character procedures dictionary. Initializes if not already created. @return COSDictionary representing character procedures
2401 Masks and processes color separations from resources. @param resources PDF resources containing color information @return Map of processed color separation names to PDSeparation objects
2402 Retrieves and initializes a PDDeviceNProcess from the dictionary. @return PDDeviceNProcess object or null if not found
2403 Retrieves render state based on destination. @param destination target rendering destination (PRINT, VIEW) @return RenderState object or null if not found
2404 Returns the extended graphics state. Initializes it if not already created. @return PDExtendedGraphicsState object or null if base is null
2405 Retrieves mask resources from PDF. @return PDResources object or null if not found
2406 Retrieves and wraps target directory from a dictionary. @return PDTargetDirectory object or null if not found
2407 Retrieves Windows-specific launch parameters. @return PDWindowsLaunchParams object or null if not available
2408 Retrieves and wraps target directory from dictionary. @return PDTargetDirectory object or null if not found
2409 Retrieves the appearance dictionary. @return PDAppearanceDictionary object or null if not found
2410 Retrieves a mask page. @return PDPage object or null if not found
2411 Retrieves border effect dictionary. @return PDBorderEffectDictionary object or null if not found
2412 Retrieves border style dictionary. @return PDBorderStyleDictionary object or null if not found
2413 Retrieves and wraps an action URI from a dictionary. @return PDActionURI object or null if not found
2414 Retrieves external data dictionary. @return PDExternalDataDictionary object or null if not found
2415 Retrieves border style dictionary from a PDF. @return PDBorderStyleDictionary object or null if not found
2416 Retrieves border effect dictionary. @return PDBorderEffectDictionary object or null if not found
2417 Retrieves and wraps the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
2418 Retrieves appearance characteristics dictionary. @return PDAppearanceCharacteristicsDictionary object or null if not found
2419 Retrieves additional annotation actions. @return PDAnnotationAdditionalActions object or null if not found
2420 Retrieves border style dictionary. @return PDBorderStyleDictionary object or null if not found
2421 Retrieves appearance entry from dictionary. @return PDAppearanceEntry object or null if not found
2422 Retrieves and initializes a PDPropBuildDataDict from the dictionary. @return PDPropBuildDataDict object or null if not found
2423 Retrieves public security settings from the document. @return PDPropBuildDataDict containing public security data or null if not present
2424 Retrieves application-specific properties. @return PDPropBuildDataDict object or null if not found
2425 Retrieves and wraps MDP seed value from dictionary. @return PDSeedValueMDP object or null if not found
2426 Retrieves and wraps seed value certificate from dictionary. @return PDSeedValueCertificate object or null if not found
2427 Retrieves and wraps the timestamp from the dictionary. @return PDSeedValueTimeStamp object or null if not found
2428 Retrieves and constructs a PDPropBuild object from the dictionary. @return PDPropBuild object or null if not found
2429 Retrieves and wraps structure element from dictionary. @return PDStructureElement object or null if not found
2430 Checks if a specific mask is present. @return true if mask is present, false otherwise
2431 Retrieves resources from PDF dictionary. @return PDResources object or null if not found
2432 Retrieves additional actions from form field. @return PDFormFieldAdditionalActions object or null if not present
2433 Retrieves and returns a PDSignature object. @return PDSignature object or null if not found
2434 Retrieves and wraps a signature dictionary. @return PDSignature object or null if not found
2435 Retrieves and wraps seed value from dictionary. @return PDSeedValue object or null if not found
2436 Retrieves measure dictionary. @return PDMeasureDictionary object or null if not found
2437 Retrieves document information. @return PDDocumentInformation object or null if not available
2438 Retrieves and wraps a thread bead from the document. @return PDThreadBead object or null if none found
2439 Creates a PDThread from a dictionary. @return PDThread object or null if dictionary is null
2440 Creates a new PDThreadBead with a mask. @return PDThreadBead object configured with a mask
2441 Creates a new PDThreadBead with V mask. @return PDThreadBead object
2442 Retrieves and wraps a page dictionary as a PDPage. @return PDPage object or null if no valid dictionary found
2443 Retrieves PDF metadata. @return PDMetadata object or null if not found
2444 Retrieves PDF metadata from a page. @return PDMetadata object or null if not present
2445 Retrieves the differences stream from the FDF document. @return COSStream containing differences data or null if not found
2446 Retrieves font file stream. @return PDStream of font file or null if not found
2447 Retrieves font file stream from dictionary. @return PDStream object or null if not found
2448 Retrieves and wraps font file stream. @return PDStream of font file or null if not found
2449 Retrieves and wraps CID set stream. @return PDStream object or null if CID set is missing
2450 Retrieves sound stream from action. @return COSStream containing sound data
2451 Creates a PDFormXObject from a COSStream. @return PDFormXObject or null if stream is null
2452 Retrieves and wraps a form XObject from a resource dictionary. @return PDFormXObject instance or null if not found
2453 Creates a PDFormXObject from a COSStream. @return PDFormXObject or null if the stream is not found
2454 Retrieves appearance streams for this entry. @return Map of COSName to PDAppearanceStream or empty if none found
2455 Retrieves a specific array from a PDF document. @return COSArray containing mask information
2456 Updates document trailer and handles incremental updates. @param doc the COSDocument to be updated
2457 Retrieves or initializes threads list. @return List of PDThread objects
2458 Retrieves output intents from a PDF document. @return List of PDOutputIntent objects
2459 Adds output intent to the PDF document. @param outputIntent the output intent to be added
2460 Retrieves thread beads from a PDF page. @return List of PDThreadBead objects representing thread beads
2461 Retrieves viewport dictionaries from page. @return List of PDViewportDictionary objects or null if none exist
2462 Recursively processes COSDictionary nodes to collect and handle child dictionaries. @param node the root COSDictionary node @return a list of processed COSDictionary children
2463 Retrieves mask nodes from a PDF structure. @return List of PDNameTreeNode objects representing mask nodes
2464 Parses a COSName array into a map. @return Map of strings to generic type T or null if no names array exists
2465 Retrieves a masked value from a PDF node. @return The masked string or null if not found.
2466 Sets the upper limit for a node. @param upper the upper limit value as a String
2467 Retrieves a mask value from a COSArray. @return String representation of the mask or null if not found
2468 Sets the lower limit for a node. @param lower the lower bound value to set
2469 Retrieves mask nodes from the current node. @return List of PDNumberTreeNode representing mask objects or null if none found
2470 Parses page label indices from a PDF node. @return Immutable map of index to COSObjectable or null if parsing fails
2471 Retrieves the mask value from a PDF node. @return Integer mask value or null if not found
2472 Sets or removes the upper limit in a COSArray. @param upper the upper limit value to set, or null to remove it
2473 Retrieves the mask value from a PDF node. @return Integer mask value or null if not found
2474 Sets or removes the lower limit in a COSArray. @param lower the lower limit value to set, or null to remove it
2475 Returns the COSArray for mask range. Initializes if not already set. @return COSArray representing the mask range
2476 Returns the COSArray representing the domain. Initializes it if not already set. @return COSArray of domain values
2477 Returns the SIZE array from the COSDictionary. @return COSArray representing the SIZE or null if not set
2478 Returns the DECODE array, initializing it if necessary. @return COSArray representing DECODE or null if initialization fails
2479 Returns COSArray of functions. Initializes if not already created. @return COSArray containing functions
2480 Returns the bounds array. Initializes bounds if not already set. @return COSArray representing bounds
2481 Returns or initializes the encode array. @return COSArray representing the encode configuration
2482 Masks user properties. @return List of PDUserProperty objects
2483 Masks user property by adding it to a PDF array. @param userProperty the property to be masked
2484 Masks a user property if it exists. @param userProperty the property to be masked
2485 Retrieves or creates a mask color for an object. @return PDColor representing the mask color
2486 Checks if edge is attached. @param edge the edge to check @return true if edge is attached, false otherwise
2487 Retrieves color from annotation. @return Color object or null if not available
2488 Retrieves color from annotation's IC entry. @return Color object or null if not available
2489 Retrieves mask values from annotation. @return float array of mask values or null if not found
2490 Retrieves mask data from annotation. @return List of float arrays representing mask data or null if none exists
2491 Retrieves mask values from annotation. @return float array of mask values or null if not available
2492 Sets line end style for annotation. @param style desired line end style or null for default
2493 Retrieves mask value from annotation. @return Mask string or default if not found
2494 Sets the line style for an annotation. @param style line style to apply; defaults to LE_NONE if null
2495 Retrieves mask value from annotation. @return Mask string or default value if not present
2496 Retrieves mask color from annotation. @return Color object or null if not available
2497 Sets the offset for a mask annotation. @param offset the x-offset value to apply
2498 Retrieves the first float value from an annotation's CO array. @return The first float value or 0 if the array is null
2499 Updates annotation mask with a given offset. @param offset value to set in the annotation's mask
2500 Retrieves the second element from the CO array of an annotation. @return The second element as a float, or 0 if the array is null or does not contain enough elements.
2501 Retrieves vertices from annotation. @return float array of vertices or null if none exist
2502 Retrieves the mask color from an annotation. @return Color object or null if not available
2503 Retrieves vertices from annotation. @return float array of vertices or null if none exist
2504 Sets line ending style for annotation. Uses default if null. @param style line ending style to apply
2505 Retrieves line end style from annotation. @return Line end style as string or default value if not set
2506 Sets line end style for annotation. @param style the desired line end style or null for default
2507 Retrieves line end style from annotation. @return Line end style as string, default if none
2508 Retrieves mask color from annotation. @return Color object or null if not available
2509 Retrieves color mask from annotation. @return Color object or null if not available
2510 Retrieves quadrilateral points for an annotation. @return float array of quad points or null if not available
2511 Retrieves an array of IDs from FDF document. @return COSArray containing document IDs or null if not found
2512 Retrieves and masks FDF fields. @return List of masked FDFField objects or null if none found
2513 Retrieves a list of FDF pages from the FDF document. @return List of FDFPage objects or null if no pages are found
2514 Retrieves child fields of a PDF form field. @return List of FDFField objects or null if no children exist
2515 Masks and processes field options. @return List of processed option elements or null if no options present
2516 Retrieves FDF templates from a page. @return List of FDFTemplate objects or null if none found
2517 Retrieves and masks form fields from a template. @return List of FDFField objects or null if no fields are found
2518 Retrieves or initializes character widths. @return List of Float representing character widths
2519 Retrieves or creates the white point for a color space. @return PDTristimulus representing the white point
2520 Retrieves black point values, defaulting to zero if not present. @return PDTristimulus object representing black point
2521 Retrieves or creates a PDGamma object. @return PDGamma instance based on the GAMMA value in the dictionary
2522 Retrieves transformation matrix for masking. @return float array representing the matrix or identity if none exists
2523 Retrieves masked components from a dictionary. @return List of component names or empty list if none found
2524 Retrieves or creates a PDRange from the dictionary. @return PDRange object initialized with the range array
2525 Retrieves or creates a PDRange from the dictionary. @return PDRange object initialized with the range array
2526 Returns the background array from the dictionary. @return COSArray representing the background or null if not set
2527 Returns the COSArray representing the mask. Initializes from domain if not already set. @return COSArray object or null if domain is null
2528 Returns or initializes the EXTEND array. @return COSArray representing the EXTEND property
2529 Returns the domain array. Initializes if not already set. @return COSArray representing the domain
2530 Returns the coordinates array. Initializes if not already set. @return COSArray containing coordinates
2531 Retrieves or initializes the DECODE array. @return COSArray representing the DECODE array
2532 Retrieves font settings from dictionary. @return PDFontSetting object or null if not found
2533 Retrieves the fields array from the action. @return COSArray containing form field information
2534 Returns the fields array from the action. @return COSArray containing form field names or null if not found
2535 Ensures the PDF annotation has a valid 3-element border array. @return COSArray representing the border with at least three elements
2536 Retrieves margins from PDF document. @return array of floats representing margins or empty array if none found
2537 Retrieves margins from a PDF document. @return array of floats representing margins or empty array if none found
2538 Retrieves mask data. @return float array of mask values or null if not available
2539 Retrieves ink list data. @return 2D array of floats representing ink data or empty if none found
2540 Retrieves mask values from a COSArray. @return array of float values or null if not found
2541 Updates annotation line style. @param style new line style or null for default
2542 Masks function for COSArray. @return masked string or default value
2543 Sets line style for annotation. @param style desired line style or null for default
2544 Masks a function and returns the masked value. @return masked string or default value if conditions not met
2545 Updates or initializes the offset in a COSArray. @param offset the new offset value to set
2546 Retrieves a mask value from a COSArray. @return float value or 0.0f if array is null
2547 Updates or initializes the offset in a COSArray. @param offset the value to set at index 1 of the COSArray
2548 Retrieves second element from COSArray associated with COSName.CO. @return float value of the second element or 0 if not found
2549 Retrieves quad points from the current object. @return float array of quad points or null if not available
2550 Retrieves vertices from a COSArray. @return float array of vertices or null if not found
2551 Retrieves and processes a mask array from a PDF object. @return 2D float array representing the mask or null if not available
2552 Sets line style for annotation. @param style desired line style or null for default
2553 Masks function for COSArray. @return masked string or default value if conditions not met
2554 Sets line style for annotation. @param style line style to apply; null sets no line
2555 Masks a function to determine line ending style. @return line ending style or default if conditions not met
2556 Retrieves vertices array from a COSArray object. @return float array of vertices or null if not found
2557 Retrieves margins from COSArray. @return array of floats representing margins or empty array if none
2558 Retrieves quad points from a PDF element. @return float array of quad points or null if not available
2559 Sets the operating system in the document. @param os operating system name or null to reset
2560 Retrieves sub-filter names from a dictionary. @return List of sub-filter names or empty list if none found
2561 Retrieves digest methods from dictionary. @return List of digest method strings or empty list if none
2562 Retrieves masked reasons from dictionary. @return List of masked reason strings or empty list if none
2563 Retrieves legal attestation fields from a dictionary. @return List of field names or empty list if none found
2564 Retrieves masked data from dictionary. @return List of byte arrays or null if no data found
2565 Adds or updates the subject in a PDF document. @param subject byte array representing the subject to be set
2566 Adds a masked subject to the document's metadata. @param subject byte array representing the masked subject
2567 Retrieves key usage extensions from dictionary. @return List of key usage strings or null if not found
2568 Validates and sets key usage extension. @param keyUsageExtension string containing key usage data
2569 Updates key usage extension in the dictionary. @param keyUsageExtension new key usage value as a string
2570 Retrieves issuer information as byte arrays. @return List of byte arrays representing issuer data or null if not available
2571 Adds issuer to the dictionary. @param issuer byte array representing the issuer
2572 Adds or updates issuer in the dictionary. @param issuer byte array representing the issuer
2573 Retrieves and processes byte arrays from a dictionary. @return List of byte arrays or null if not found
2574 Adds an OID to the dictionary. @param oid byte array representing the OID
2575 Adds an OID to the dictionary's OID array. @param oid byte array representing the OID
2576 Retrieves the byte range array from a dictionary. @return int array representing byte ranges or empty if not found
2577 Creates a mask color using RGB values. @return PDColor object representing the mask color
2578 Retrieves masked form fields. @return List of PDField objects that are masked
2579 Retrieves integer list from COSArray. @return List of integers or empty list if array is null
2580 Retrieves number format dictionaries. @return array of PDNumberFormatDictionary or null if none found
2581 Retrieves number format dictionaries. @return array of PDNumberFormatDictionary or null if not available
2582 Retrieves number format dictionaries. @return array of PDNumberFormatDictionary or null if not found
2583 Retrieves number format dictionaries. @return array of PDNumberFormatDictionary objects or null if not found
2584 Retrieves number format dictionaries. @return array of PDNumberFormatDictionary or null if none found
2585 Retrieves number format dictionaries from a COSArray. @return array of PDNumberFormatDictionary objects or null if not found
2586 Retrieves and converts array from COSDictionary. @return float array or null if not found
2587 Retrieves the mask function name. @return COSName representing the mask function
2588 Converts key to COSName and returns its string representation. @param key input string key @return string representation of the COSName
2589 Retrieves value for given COSName key with a default fallback. @param key the COSName key to look up @param defaultValue the default value to return if key is not found @return the value associated with the key or the default value
2590 Checks and processes the XRef stream starting from a given offset. @param startXRefOffset offset to start checking for XRef stream @return true if valid XRef stream is found, false otherwise @throws IOException if an I/O error occurs during processing
2591 Retrieves and returns the page mode. @return PageMode enum value, defaulting to USE_NONE if invalid or null
2592 Retrieves page layout from document. @return PageLayout object, defaults to SINGLE_PAGE if invalid or missing
2593 Retrieves version information from the root. @return version string or null if not available
2594 Retrieves trapped information. @return Trapped status as a string
2595 Retrieves masked value using specified key. @return Masked string value
2596 Masks function by retrieving and returning its type. @return Type of the masked function as a string
2597 Creates a PDAttributeObject based on the dictionary's owner type. @param dictionary COSDictionary containing attribute data @return PDAttributeObject instance matching the owner type or default object
2598 Masks data using COSName.O. @return masked string result
2599 Masks data using COSName.S. @return masked string
2600 Creates a PDStructureNode based on the node type. @param node COSDictionary representing the structure node @return PDStructureTreeRoot or PDStructureElement based on the node's type
2601 Returns masked value from COSName. @return Masked string value
2602 Masks data using specific functions. @return masked string result
2603 Masks function; returns language if available. @return masked language string or null
2604 Retrieves masked function value. @return masked string value
2605 Retrieves masked value from PDF subtype. @return Masked string value or null if not applicable
2606 Retrieves the filter name from the dictionary. @return Filter name as a string or null if not found
2607 Retrieves the sub-filter value from the dictionary. @return the sub-filter as a string
2608 Creates an FDFAnnotation based on the given COSDictionary. @param fdfDic dictionary containing annotation data @return FDFAnnotation object or null if type is unknown or unsupported
2609 Masks data using COSName.IT. @return Masked string result
2610 Masks function using COSName.LE. @return masked string result from m1 method
2611 Retrieves version from catalog. @return version string
2612 Retrieves encoding type, defaulting to PDFDocEncoding. @return Encoding string
2613 Retrieves mask value from COSName or defaults to a scale option. @return Mask string, either from COSName or default scale option
2614 Retrieves and returns a masked value. @return Masked string or default proportional scale type if null
2615 Retrieves the base font name. @return Base font name as a string
2616 Retrieves the masked type from dictionary. @return masked type string
2617 Retrieves the subtype from the dictionary. @return Subtype string value
2618 Retrieves the font name from the dictionary. @return Font name as a string
2619 Retrieves font stretch value. @return Font stretch as string
2620 Retrieves base font name from dictionary. @return Base font name as string
2621 Retrieves base font name from dictionary. @return Base font name as String
2622 Retrieves base font name from dictionary. @return Base font name as a string
2623 Retrieves base font name from dictionary. @return Base font name as string
2624 Checks if the current channel is of type 'NChannel'. @return true if the channel subtype is 'NChannel', false otherwise
2625 Retrieves the masked function type. @return String representing the masked function type
2626 Returns a masked string using COSName.S. @return Masked string representation
2627 Creates a PDAction based on the action type. @param action COSDictionary representing the action @return PDAction object or null if unsupported type
2628 Retrieves masked function name. @return Masked function name as a String
2629 Masks data using COSName.CP. @return masked string result
2630 Masks data using specific function. @return masked string result
2631 Retrieves the subtype using mask functions. @return Subtype as a string
2632 Masks a function name using the COSName dictionary. @return Masked function name as a String
2633 Retrieves the filter value from the dictionary. @return Filter value as a string
2634 Retrieves URL type from dictionary. @return URL type as string
2635 Retrieves the filter name from the dictionary. @return Filter name as a string or null if not found
2636 Retrieves the sub-filter name from a COSName. @return Sub-filter name as a string
2637 Returns the field type of the form element. @return Field type as a string
2638 Masks data using COSName. @return masked string result
2639 Retrieves duplex setting from preferences. @return String representing duplex configuration
2640 Converts key to COSName and returns its string representation. @param key input string key @return string representation of the converted COSName
2641 Retrieves value by key, using default if not found. @param key the COSName key to search for @param defaultValue the default value to return if key is not found @return the retrieved value or default if not found
2642 Retrieves language attribute from the PDF document. @return Language string as defined in the PDF or null if not present
2643 Retrieves the title from the document information. @return The title as a string or null if not available.
2644 Retrieves the author information from document metadata. @return Author name as a string or null if not available
2645 Retrieves the subject information. @return Subject string from COSName
2646 Retrieves keywords from document information. @return A string containing keywords or an empty string if not available.
2647 Retrieves the creator information from document info. @return Creator string or empty if not available
2648 Retrieves the producer information from document metadata. @return Producer string or null if not available
2649 Masks a key using a prefix. @return masked key string
2650 Masks function using COSName UF. @return masked string result
2651 Returns masked function as string. @return Masked function name
2652 Masks COSName DOS using field strategy. @return masked string representation of COSName DOS
2653 Masks function using MAC algorithm. @return masked string result
2654 Masks data using UNIX format. @return masked string in UNIX format
2655 Masks a function using COSName.DESC. @return masked string result
2656 Generates a masked string using COSName.ID. @return Masked string representation
2657 Retrieves masked value using specific constants. @return masked string value
2658 Masks function to retrieve language. @return language string from COSName
2659 Masks data using COSName.ALT. @return masked string result
2660 Masks data using COSName.E. @return Masked string result
2661 Masks function by retrieving actual text. @return masked string value or null if not found
2662 Masks data using specified function. @return masked string result
2663 Masks function result. @return masked string or null if m1 is null
2664 Masks function using m1 and ALT. @return masked result or null if m1 is null
2665 Masks the value using COSName.E if available. @return masked value or null if m1 is null
2666 Masks a function using COSName.M. @return masked function as a string
2667 Masks function by returning its name. @return Name of the masked function as a string
2668 Retrieves the contents of an annotation. @return The string content of the annotation or null if not found.
2669 Returns masked string using COSName.T. @return Masked string result
2670 Masks function using COSName.SUBJ. @return masked string result
2671 Masks a value using COSName.SY. @return masked string representation
2672 Masks a function by retrieving its rotation. @return String representation of the rotation or null if not found
2673 Retrieves the default appearance string. @return Default appearance string from annotation
2674 Masks function using COSName.DS. @return Masked string result from m1 method
2675 Retrieves the masked content property. @return Masked content as a string
2676 Masks a function using the state annotation. @return masked string representation of the function
2677 Masks function by returning its state model. @return String representing the state model of the function
2678 Returns the status from COSName. @return Status string
2679 Retrieves target name from COSName. @return target name as a string
2680 Masks a field using COSName.T. @return masked field value as a string
2681 Masks a function name using COSName. @return masked function name as String
2682 Masks font family value. @return masked font family string
2683 Retrieves character set from dictionary. @return Character set string
2684 Masks a function name using dictionary. @return masked function name as String
2685 Retrieves OC Groups from dictionary. @return Array of group names or empty array if none found
2686 Masks data using specified function. @return masked data as string
2687 Masks data using COSName.D. @return masked string result
2688 Masks data using COSName.O. @return masked string result
2689 Masks data using COSName.P. @return masked string result
2690 Masks and returns URI from PDF action. @return masked URI string or null if not applicable
2691 Retrieves masked function value. @return String representation of the masked function
2692 Masks a value using dictionary method. @return masked string result
2693 Masks a function using parameters. @return masked function as string
2694 Masks function using parameter m1 with COSName.D. @return masked string result
2695 Masks function name. @return Masked function name as string
2696 Retrieves contents from dictionary. @return String containing contents or null
2697 Masks data using COSName.M. @return masked string result from m2 method
2698 Masks function, returns string from nested method calls.
2699 Masks data using specified COS name. @return masked string result
2700 Returns masked value from specific method calls. @return Masked string value
2701 Masks data using specified function. @return masked string result
2702 Masks functionality using COSName.SUBJ. @return Result of masking operation as a String
2703 Masks the state value. @return masked state string
2704 Retrieves masked state model value. @return Masked state model as a string
2705 Masks data using CA method. @return masked string result
2706 Retrieves masked data using RC. @return Masked string or null if not found
2707 Retrieves masked value using AC constant. @return masked string value
2708 Retrieves the date mask from the dictionary. @return Date mask string
2709 Masks OS value from dictionary. @return masked OS string or default if null
2710 Retrieves and masks subject DN information from a dictionary. @return List of maps containing masked subject DN data, or null if not found
2711 Retrieves masked URL from dictionary. @return Masked URL string
2712 Retrieves masked URL from dictionary. @return Masked URL as a string
2713 Returns a masked string using COSName. @return Masked string from COSName
2714 Retrieves the location value from the dictionary. @return String representation of the location or null if not found
2715 Retrieves the reason mask from the dictionary. @return String representation of the reason mask
2716 Retrieves contact info from dictionary. @return Contact information as a string
2717 Retrieves a masked value from a PDF document. @return Masked string value or null if not found
2718 Masks function using COSName.T. @return masked string result
2719 Retrieves masked string value from dictionary. @return Masked string value
2720 Retrieves masked value from dictionary. @return Masked string value
2721 Masks a function. @return masked string result
2722 Returns masked string using COSName.R. @return Masked string result
2723 Retrieves calendar based on key. @param key unique identifier @return Calendar object or null if not found
2724 Retrieves calendar value by key with default. @param key COSName key for retrieval @param defaultValue default Calendar to use if none found @return Calendar value or default if not found
2725 Retrieves the creation date calendar. @return Calendar representing the creation date or null if not available
2726 Retrieves the modification date calendar. @return Calendar representing the modification date
2727 Retrieves the creation date calendar from an annotation. @return Calendar object representing the creation date @throws IOException if an I/O error occurs during retrieval
2728 Retrieves the creation date calendar. @return Calendar object representing the creation date
2729 Retrieves calendar from dictionary using COSName.M key. @return Calendar object associated with COSName.M
2730 Calls m2 with COSName and default value. @param key string key to convert to COSName @return result of m2 call
2731 Calls overloaded method with default value. @param key unique identifier key @return result from overloaded method
2732 Retrieves a long value by key with a default. @param key unique identifier for the value @param defaultValue value to return if key not found @return long value associated with the key or default
2733 Decodes input stream using a list of filters. @param encoded input stream to decode @param filterList list of decoding filters @param parameters decoding parameters @param options decoding options @param results list to store decode results @return RandomAccessRead object with decoded data @throws IOException if an I/O error occurs
2734 Initializes XRef trailer with startxref byte position. @param startxrefBytePosValue the starting byte position for XRef processing
2735 Calls m2 with COSName and default value. @param key string key to convert to COSName @return result of m2 call
2736 Calls overloaded method with default value. @param key COSName key to look up @return result from overloaded method
2737 Retrieves a float value from COSName with a default if not found. @param key the key to look up @param defaultValue the default float value to return if key is not found @return the float value associated with the key or the default value
2738 Retrieves the user unit from the PDF page. @return User unit value or default of 1.0 if invalid
2739 Retrieves a value from the dictionary using key 'W' and default value 1. @return The retrieved float value or 1 if not found.
2740 Retrieves the opacity value of an annotation. @return float representing the opacity level
2741 Retrieves font weight value. @return font weight as float
2742 Retrieves italic angle from dictionary. @return italic angle as float or default value if not found
2743 Retrieves the ascent value from the dictionary. @return The ascent value as a float, defaulting to 0 if not found.
2744 Retrieves descent value from dictionary. @return Descent value as float
2745 Retrieves leading value from dictionary. @return float value of leading or default 0
2746 Masks and returns the cap height value. @return masked cap height as float
2747 Calculates and returns the masked xHeight value. @return masked xHeight as a float
2748 Retrieves mask value using STEM_V key. @return float value from dictionary or default if not found
2749 Retrieves stem height from dictionary. @return stem height as float
2750 Retrieves average width value from dictionary. @return float value representing average width or default if not found
2751 Retrieves maximum width value. @return float representing max width or default value if not set
2752 Retrieves missing width value from dictionary. @return missing width as float, default is 0
2753 Retrieves gamma value from dictionary. @return float representing gamma value, default is 1.0
2754 Calls m2 with COSName.X_STEP and 0 to get a float value. @return float result from m2 method call
2755 Retrieves Y step value using COSName. @return float value representing Y step
2756 Masks audio volume to range [-1, 1]. @return Clamped volume level
2757 Retrieves a masked value from PDF content. @return float representing the masked value
2758 Retrieves mask value using specified parameters. @return float representing the mask value
2759 Returns a masked value from m2 method. @return float result of masking operation
2760 Retrieves a masked value from a PDF document. @return float representing the masked value
2761 Checks condition and returns value. @return 0 if condition met, otherwise result of m3 method
2762 Returns a masked value using specific parameters. @return float result from function m2 with COSName.D and integer 1
2763 Retrieves a masked value using specific parameters. @return float result of the masking operation
2764 Applies a mask operation using the provided operator. @param op the operator to apply the mask with @throws IOException if an I/O error occurs during processing
2765 Masks regions on a PDF page. @param page PDPage object to mask @throws IOException if an I/O error occurs
2766 Retrieves and converts role map dictionary. @return Map representation of the role map or empty map if not found
2767 Masks an object by processing its content. @param objectable the object to be masked
2768 Updates object with new kid reference. @param newKid the new COSObjectable to be added @param refKid the reference key for the new kid
2769 Checks if an object is masked. @param objectable the object to check @return true if masked, false otherwise
2770 Masks a value by setting it in two different locations. @param value the COSBase value to mask
2771 Retrieves default color space. @throws IOException on I/O error @return PDColorSpace object
2772 Creates a PDPropertyList based on the dictionary type. @param dict COSDictionary containing properties @return PDPropertyList or subclass based on dictionary type
2773 Retrieves line width value. @return Float representing line width or null if not set
2774 Retrieves value associated with COSName.ML. @return Float value from m1 method
2775 Returns a float value from COSName. @return Float value associated with COSName.FL
2776 Returns a float value using COSName.SM. @return float value from m1 method
2777 Retrieves mask value using COSName CA. @return Float representation of the mask or null if not found
2778 Retrieves mask value from COSName. @return Float representing the mask value or null if not found
2779 Creates a new link annotation from a COS dictionary. @param field COS dictionary containing annotation properties
2780 Constructs a new annotation from the given dictionary. @param dict the COSDictionary containing annotation data
2781 Constructs a new PDAnnotationPopup from a COSDictionary. @param field dictionary containing annotation properties
2782 Creates a new unknown annotation from a COS dictionary. @param dic dictionary containing annotation data
2783 Creates a new PDAnnotationWidget from a COSDictionary. @param field dictionary containing annotation properties
2784 Returns a list of masked strings. @return List containing masked string values
2785 Masks function using COSName.V. @return List of masked strings
2786 Masks data using COSName.DV. @return List of masked strings
2787 Writes object to output stream and sets current key. @param obj COSBase object to be processed @throws IOException if I/O error occurs
2788 Writes a COSBase object to an OutputStream. @param output the OutputStream to write to @param object the COSBase object to write @param topLevel indicates if it's the top-level object @throws IOException if an I/O error occurs
2789 Calculates and processes arc segments for SVG path. @param anglePrev previous angle @param angleCur current angle @param radius circle radius @param cx center x-coordinate @param cy center y-coordinate @param alpha angular offset @param alphaPrev previous angular offset @param addMoveTo flag to add move-to command @throws IOException if an I/O error occurs
2790 Draws an ellipse within specified bounds. @param left x-coordinate of the left boundary @param bottom y-coordinate of the bottom boundary @param right x-coordinate of the right boundary @param top y-coordinate of the top boundary
2791 Initializes a new PDPageFitDestination. Grows array to size 2 and sets name at index 1.
2792 Adjusts array based on bounding box fitting. @param fitBoundingBox flag to determine adjustment type
2793 Initializes a PDPageFitHeightDestination. Sets up an array and names the second element.
2794 Calls methods on array based on input value. @param x control parameter to determine method calls
2795 Adjusts array based on bounding box requirement. @param fitBoundingBox flag to determine adjustment type
2796 Initializes a PDPageFitRectangleDestination with specific settings.
2797 Calls methods on array based on input. @param x input value determining method call
2798 Masks array elements based on input. @param y control value for masking logic
2799 Masks an integer value using array methods. @param x the integer to mask or special value -1
2800 Calls methods on an array based on input. @param y value to determine method call
2801 Initializes a new PDPageFitWidthDestination. Sets up an internal array and assigns a type name.
2802 Calls methods on array based on input value. @param y input value to determine method call
2803 Applies mask to array with optional bounding box. @param fitBoundingBox flag to apply bounding box constraint
2804 Initializes a new PDPageXYZDestination. Sets up an internal array and names it.
2805 Masks an integer value using array methods. @param x the integer to mask or special value -1
2806 Calls methods on array based on input value. @param y determines which method to call on array
2807 Applies mask with specified zoom level. @param zoom scaling factor for masking
2808 Parses and validates a PDF object mask. @return COSBase object or null if invalid
2809 Retrieves the bounding box for a widget's appearance. @param fieldWidget annotation widget associated with the field @param appearanceStream appearance stream of the widget @return PDRectangle representing the widget's bounds
2810 Masks sensitive data in a PDF dictionary. @param dictionary the PDF dictionary to process @param objNum object number of the dictionary @param genNum generation number of the dictionary @throws IOException if an I/O error occurs
2811 Updates bounding box in PDF. @param bbox new bounding rectangle
2812 Masks a gamma value by name. @param name the key for the gamma value @param value PDGamma object to be set
2813 Updates a color setting in the PDF document. @param name the name of the color setting @param value the new color value to set
2814 Constructs a new PDPage with LETTER size.
2815 Retrieves or creates an FDF dictionary. @return FDFDictionary object from catalog or a new one if not present
2816 Constructs a new FDFDocument with default settings.
2817 Creates or retrieves the FDF catalog. @return FDFCatalog object initialized from document's root or a new one if not present
2818 Returns a PDRange based on fit's A value. @return PDRange object, defaulting to 0.5 if A is null
2819 Creates a bitmask for CID mapping and sets it in the font descriptor. @param cidToGid map of CID to GID @throws IOException if an I/O error occurs
2820 Constructs a new tiling pattern. Initializes the COSStream and sets necessary attributes.
2821 Masks a new sibling outline item. @param newSibling the new outline item to be added as a sibling
2822 Adds a sibling to the outline tree. @param newSibling the new sibling item to add
2823 Calls methods on bead and thread. @param bead PDThreadBead object to process
2824 Initializes a PDThreadBead with default properties.
2825 Updates document's role map with provided data. @param roleMap mapping of roles to values
2826 Updates a named value and logs the change. @param name key of the value to update @param value new value to set
2827 Masks input string with "RI" key. @param ri input string to be masked
2828 Masks a given name by calling an action method. @param name the name to be masked
2829 Calls m2 with "S" and input string. @param s input string to be processed
2830 Initializes page labels for a document. @param document PDDocument to which labels are applied
2831 Constructs a PDStructureElement with a specified type and parent node. @param structureType type of the structure element @param parent parent PDStructureNode
2832 Constructs a new PDStructureTreeRoot. Initializes with a specific type.
2833 Initializes a new shading pattern. Sets the pattern type to shading pattern in the COS object.
2834 Initializes a new PDAction with a default dictionary and type.
2835 Retrieves document outline. @return PDDocumentOutline object or null if not found
2836 Creates a PDOutlineNode based on parent dictionary. @return PDOutlineNode or null if no valid parent found
2837 Initializes a new PDRectlinearMeasureDictionary with default subtype.
2838 Constructs a PDTransition with default style R.
2839 Calls overloaded method with COSName instance. @param key string key to convert to COSName @param date calendar date to pass
2840 Updates dictionary with a key-date pair. @param embedded the embedded COSName @param key the key to update in the dictionary @param date the date value to set
2841 Sets the creation date in the document information. @param date Calendar object representing the creation date
2842 Sets the modification date in the info dictionary. @param date Calendar object representing the modification date
2843 Sets the creation date annotation. @param date Calendar object representing the creation date
2844 Masks calendar date using COSName.M. @param c Calendar instance to be masked
2845 Sets the creation date in the document metadata. @param creationDate the Calendar object representing the creation date
2846 Masks calendar date using dictionary. @param cal Calendar instance to be masked
2847 Masks a field in an info record. @param fieldName name of the field to mask @param fieldValue value of the field to mask
2848 Updates a property value and notifies of change. @param name property name @param value new property value
2849 Calls m2 with "Base" and base parameter. @param base string to be passed to m2
2850 Masks application version. @param applicationVersion version string to mask
2851 Masks units by calling nested methods. @param units string representing units to be masked
2852 Masks fractional display value. @param fractionalDisplay fractional display type ("D", "F", "R", "T", or null)
2853 Sets thousands separator for formatting. @param thousandsSeparator character used as thousands separator
2854 Masks function with specified decimal separator. @param decimalSeparator character used as decimal point
2855 Masks a function with a given label prefix. @param labelPrefixString prefix for labeling the masked function
2856 Calls method m2 with specific parameters. @param labelSuffixString suffix to be appended to label
2857 Processes a label position value. @param labelPositionToValue the label position to process
2858 Constructs an FDFField from XML. @param fieldXML XML element representing the field @throws IOException if XML processing fails
2859 Creates a new optional content group with a specified name. @param name the name of the content group
2860 Updates a field with a new integer value and logs the change. @param name the name of the field to update @param value the new integer value for the field
2861 Masks a field by setting its value. @param name field name to mask @param value new masked value to set
2862 Masks a value using a given denominator. @param denominator the divisor used for masking
2863 Converts BufferedImage to PDImageXObject for masking. @param document PDDocument instance @param image 1-bit black and white BufferedImage @return PDImageXObject for use in PDF @throws IOException if conversion fails
2864 Sets bits per color component. @param bitsPerComponent number of bits for each color component
2865 Sets bits per color component. @param bitsPerComponent number of bits for each color component
2866 Sets bits per coordinate. @param bitsPerCoordinate number of bits for each coordinate
2867 Sets bits per coordinate. @param bitsPerCoordinate number of bits for each coordinate
2868 Updates a named value and compares the old and new base values. @param name the name of the value to update @param value the new float value to set
2869 Calls m2 with "I" and float value. @param i float value to pass to m2
2870 Applies a conversion factor to adjust settings. @param conversionFactor scaling factor for adjustments
2871 Retrieves file specification from PDF stream. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs
2872 Retrieves file specification from FDF document. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs
2873 Retrieves embedded PDF file specifications. @return List of PDFileSpecification objects or null if none embedded
2874 Retrieves file specification with mask applied. @return PDFileSpecification object @throws IOException if an I/O error occurs
2875 Creates a file specification for masking. @return PDFileSpecification object for masking @throws IOException if an I/O error occurs
2876 Creates a file specification for an action. @return PDFileSpecification object @throws IOException if an I/O error occurs
2877 Creates a file specification with a mask. @return PDFileSpecification object @throws IOException if an I/O error occurs
2878 Retrieves file specification from action. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs
2879 Retrieves file specification from action. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs
2880 Retrieves file specification from action. @return PDFileSpecification object or null if not found
2881 Creates a file specification with a mask. @return PDFileSpecification object representing masked file @throws IOException if an I/O error occurs
2882 Creates a new highlight annotation. Sets the subtype to "Highlight".
2883 Constructs a new squiggly annotation. Initializes the annotation with the subtype "Squiggly".
2884 Creates a new strike-out annotation. Initializes the annotation with the subtype "StrikeOut".
2885 Creates an underline annotation. Sets the subtype to "underline".
2886 Creates a new file attachment annotation.
2887 Creates a new ink annotation. Initializes the subtype to "Ink".
2888 Initializes a new PDAnnotationLine with default values.
2889 Creates a new polygon annotation. Sets the subtype to "Polygon".
2890 Creates a new polyline annotation. Initializes the COS object with the subtype "PolyLine".
2891 Creates a new rubber stamp annotation. Initializes the COS object with the subtype "RubberStamp".
2892 Creates a new square or circle annotation. @param subType subtype of the annotation ("Square" or "Circle")
2893 Creates a new text annotation. Initializes the COS object with the subtype set to "Text".
2894 Creates a text markup annotation. @param subType specific type of text markup (e.g., "Highlight")
2895 Retrieves the bounding box rectangle. @return PDRectangle object or null if not found
2896 Retrieves the bounding box rectangle. @return PDRectangle object or null if not found
2897 Retrieves rectangle from annotation. @return PDRectangle object or null if not found
2898 Retrieves the rectangle defining the annotation's boundary. @return PDRectangle object or null if not found
2899 Retrieves mask rectangle from annotation. @return PDRectangle object or null if not found
2900 Retrieves annotation's rectangle bounds. @return PDRectangle object or null if not found
2901 Retrieves the masking rectangle of an annotation. @return PDRectangle object representing the mask or null if not set
2902 Retrieves the font bounding box rectangle. @return PDRectangle object or null if not found
2903 Retrieves font bounding box. @return PDRectangle representing the font's bounding box or null if not available
2904 Retrieves the bounding box rectangle. @return PDRectangle object or null if not found
2905 Retrieves mask bounding box. @return PDRectangle object or null if not found
2906 Retrieves the bounding box rectangle. @return PDRectangle object representing the bounding box or null if not set
2907 Retrieves the rectangle from PDF dictionary. @return PDRectangle object or null if invalid or missing
2908 Retrieves rectangle difference as a PDRectangle. @return PDRectangle object or null if not found
2909 Retrieves mask rectangle from PDF. @return PDRectangle object or null if not found
2910 Retrieves bounding box rectangle. @return PDRectangle object or null if not available
2911 Retrieves the mask rectangle from a PDF bead. @return PDRectangle object or null if no mask is present
2912 Creates and sets a line dash pattern. @param array COSArray containing dash lengths @param phase offset for the dash pattern
2913 Creates or retrieves a line dash pattern. @return PDLineDashPattern object with default settings
2914 Creates a line dash pattern from dictionary. @return PDLineDashPattern object or null if not valid
2915 Creates or retrieves line dash pattern. @return PDLineDashPattern object with default settings
2916 Applies a mask to an image using a specified paint. @param pdImage the source image to mask @param paint the color or pattern to apply as a mask @return BufferedImage with applied mask @throws IOException if there is an issue reading the image data
2917 Applies mask transformation to matrix. @return transformed Matrix object
2918 Creates a masked matrix. @return Masked Matrix object
2919 Creates a masked matrix. @return Masked Matrix object
2920 Updates attribute value and handles changes. @param attrName name of the attribute to update @param attrValue new value for the attribute
2921 Recursively retrieves value from dictionary by key. @param node starting dictionary node @param key key to search for @return COSBase value or null if not found
2922 Calls overloaded method with null default value. @param key unique identifier for the COSName @param defaultValue boolean to use if not found @return result of the overloaded method
2923 Calls overloaded method with default value. @param key unique key identifier @param defaultValue value to return if not found @return result of the overloaded method
2924 Calls overloaded method with default value. @param firstKey first key parameter @param secondKey second key parameter @return result of the overloaded method
2925 Initializes an inline image with given parameters, data, and resources. @param parameters dictionary containing image parameters @param data raw image data bytes @param resources PDF resources associated with the image @throws IOException if decoding fails
2926 Determines image format based on filter list. @return Image format as a string ("jpg", "tiff", or "png")
2927 Fetches COSObjects of specified types from XRef table. @param type1 first COSName to filter by @param type2 second COSName to filter by @return list of COSObjects matching the types
2928 Searches PDF for trailer dictionary and updates provided COSDictionary. @param trailer target dictionary to update @return true if successful, false otherwise
2929 Masks PDF objects by updating trailer dictionary. @param trailer PDF document trailer @return true if root object is set, false otherwise
2930 Returns a PDPageTree representing the pages of the document. @return PDPageTree object containing document pages
2931 Constructs a PDPageTree from a COSDictionary. @param root the root dictionary of the page tree
2932 Calls another overloaded method with the same name. @param code an integer code @param customGlyphList a list of glyphs (unused) @return result from the other method
2933 Retrieves the transparency group. @return PDTransparencyGroup object or null if not found
2934 Sets MAC subtype in PDF parameters. @param macSubtype the MAC subtype to set
2935 Sets MAC creator in document parameters. @param macCreator MAC creator identifier
2936 Sets MAC resource fork parameter. @param macResFork resource fork value for MAC
2937 Checks if the document is valid. @return true if the document is valid, false otherwise
2938 Creates and returns a new FDFDocument. @throws IOException if header doesn't contain version info or other I/O errors occur
2939 Parses a PDF document with optional lenient error handling. @param lenient true to ignore missing version info, false to throw IOException @return PDDocument object representing the parsed PDF @throws IOException if parsing fails and lenient is false
2940 Creates and returns a PDAcroForm with default fixup. @return PDAcroForm object initialized with default settings
2941 Retrieves a page destination from a document. @param namedDest the named destination to find @return PDPageDestination object or null if not found
2942 Retrieves or creates a PDColorSpace based on the given name and default flag. @param name COSName of the colorspace @param wasDefault boolean indicating if it's a default colorspace @return PDColorSpace object @throws IOException if an I/O error occurs
2943 Checks if a given COSName is a valid color space. @param name the COSName to check @return true if name is a valid color space, false otherwise
2944 Retrieves extended graphics state by name. @param name the name of the graphics state @return PDExtendedGraphicsState object or null if not found
2945 Checks if a given name is an image mask. @param name the COSName to check @return true if the name represents an image mask, false otherwise
2946 Returns mask colorspace names. @return Iterable of COSName objects representing colorspaces
2947 Returns mask elements. @return Iterable of COSName objects representing mask elements
2948 Returns font mask names. @return Iterable of COSName objects representing font masks
2949 Retrieves properties mask. @return Iterable of COSName representing properties
2950 Returns an iterable of COSName objects with SHADING mask. @return Iterable containing COSName.SHADING
2951 Returns an iterable of COSName objects with PATTERN mask. @return Iterable of COSName objects
2952 Returns a list of COSNames related to EXT_G_STATE. @return Iterable of COSName objects
2953 Retrieves or creates a COSName for an object based on kind and prefix. @param kind type of resource dictionary key @param prefix string prefix for new COSName @param object COSObjectable instance to process @return COSName associated with the object
2954 Calls overloaded method with default COSName. @param name specific font name @param font PDFont object to be used
2955 Calls overloaded method with COLORSPACE constant. @param name COSName to be used @param colorSpace PDColorSpace associated with the name
2956 Calls overloaded method with EXT_G_STATE constant. @param name COSName object @param extGState PDExtendedGraphicsState object
2957 Calls overloaded m1 with specific COSName. @param name COSName parameter @param shading PDShading object
2958 Calls overloaded m1 with PATTERN constant. @param name unique identifier for the pattern @param pattern PDAbstractPattern object to process
2959 Calls overloaded method with specific COSName. @param name property name @param properties property list
2960 Calls overloaded m1 with COSName.XOBJECT as first argument. @param name resource name @param xobject PDF XObject to process
2961 Masks a file within a PDF document. @param file the embedded file to mask
2962 Sets a mask for a PDF embedded file. @param file the embedded file to be masked
2963 Returns a standard crypt filter dictionary. @return PDCryptFilterDictionary instance
2964 Returns a PDCryptFilterDictionary with default encryption filter. @return PDCryptFilterDictionary instance
2965 Configures encryption filter settings. @param cryptFilterDictionary dictionary containing crypto settings
2966 Configures encryption filter settings. @param defaultFilterDictionary dictionary containing encryption settings
2967 Retrieves character procedure for a given code. @param code character code @return PDType3CharProc object or null if not found
2968 Retrieves and converts base state from dictionary. @return BaseState object representing the base state
2969 Masks a base state in a dictionary. @param state BaseState object to be masked
2970 Toggles the visibility of a content group. @param group the content group to toggle @param enable true to show, false to hide @return true if the group was found and toggled, false otherwise
2971 Initializes a content stream for a tiling pattern. @param pattern the PD TilingPattern object to work with @throws IOException if an I/O error occurs
2972 Retrieves or creates an appearance dictionary for the annotation. @return PDAppearanceDictionary instance associated with the annotation
2973 Retrieves appearance entry with mask. @return PDAppearanceEntry object or default if none found
2974 Retrieves appearance entry from dictionary or default. @return PDAppearanceEntry object or default if not found
2975 Retrieves the first outline item. @return PDOutlineItem representing the first outline or null if none exists
2976 Retrieves the last outline item. @return PDOutlineItem representing the last outline or null if not found
2977 Returns a PDSignature instance. @return PDSignature object from m1 method
2978 Masks the given bead by appending it to the current thread. @param append bead to be masked and appended
2979 Retrieves the appearance stream for a masked PDF element. @return PDAppearanceStream object or null if not found
2980 Masks a widget's appearance. @return COSName of the masked entry or empty string if none found
2981 Masks pages in PDF document. @param root the root dictionary of the PDF @throws IOException if page tree is missing or invalid
2982 Retrieves an object by name from a map or tree structure. @param name the key to search for @return the object associated with the name, or null if not found @throws IOException if an I/O error occurs during retrieval
2983 Retrieves object by index from a map or list of nodes. @param index the position of the desired object @return the COSObjectable object or null if not found
2984 Masks PDF number tree nodes. @param kids list of PDNumberTreeNode children
2985 Masks numbers in a COSDictionary. @param numbers map of integers to COSObjectable values
2986 Determines the number of output values. @return Number of output values or 0 if none found
2987 Creates a PDRange from an array of values. @param n index to access in the array @return PDRange object created using the specified index
2988 Processes input values using defined ranges. @param inputValues array of input float values @return processed float array based on ranges
2989 Returns the number of input values. Initializes from array size if not already set. @return int representing the number of input values
2990 Creates a PDRange using specified index. @param n index for range creation @return PDRange object
2991 Computes an index based on a vector and size values. @param vector input vector of indices @return computed index as an integer
2992 Initializes and returns the encode COSArray. @return COSArray containing encode values or default if null
2993 Retrieves a PDRange from decode values based on parameter number. @param paramNum index of the range to retrieve @return PDRange object or null if not found
2994 Creates a PDRange using encoded values. @param n index for encoding values @return PDRange object
2995 Checks if "Top" is masked. @return true if masked, false otherwise
2996 Checks if "Bottom" is masked. @return true if "Bottom" is masked, false otherwise
2997 Checks mask status for "Left". @return true if mask is active, false otherwise
2998 Checks if "Right" is masked. @return true if "Right" is masked, false otherwise
2999 Initializes a PDCIDFont with given dictionary and parent font. @param fontDictionary the COSDictionary containing font data @param parent the PDType0Font that is the parent of this CID font
3000 Initializes a DictionaryEncoding with a base encoding and differences. @param baseEncoding the base encoding name @param differences array of character differences
3001 Initializes a DictionaryEncoding with a given COSDictionary. @param fontEncoding the font encoding dictionary to use
3002 Initializes DictionaryEncoding with specified font encoding. @param fontEncoding the COSDictionary representing the font encoding @param isNonSymbolic true if the font is non-symbolic @param builtIn the built-in Encoding for symbolic fonts
3003 Initializes color space with RGB array. @param rgb COSArray containing color space data
3004 Applies mask to specified range. @param range PDRange object defining the range to mask
3005 Applies mask to specified range. @param range PDRange to apply mask on
3006 Retrieves an optional content group by name. @param name the name of the optional content group @return PDOptionalContentGroup object or null if not found
3007 Adds a content group to optional content and updates order. @param ocg the Optional Content Group to add
3008 Retrieves maskable optional content groups. @return Collection of PDOptionalContentGroup objects
3009 Initializes a ShadingContext with given parameters. @param shading the PDShading object @param cm the ColorModel for rendering @param xform the AffineTransform for coordinate mapping @param matrix the Matrix for additional transformations @throws IOException if an I/O error occurs during initialization
3010 Retrieves a range from decode values. @param paramNum index of the parameter @return PDRange object or null if not found
3011 Returns a PDColor instance using COSName.C. @return PDColor object
3012 Retrieves color mask using BC key. @return PDColor object representing the color mask
3013 Returns background color. @return PDColor representing background color
3014 Constructs and processes a cryptographic key with various permissions. @param digitalSignature, nonRepudiation, etc. - flags indicating key capabilities
3015 Masks PDF content by extracting specified range. @param pdfFile input PDF stream @return masked content as byte array
3016 Masks a PDF file. @param pdfFile original PDF content as byte array @return masked PDF content as byte array @throws IOException if I/O error occurs
3017 Masks PDF content. @param pdfFile input PDF file stream @return masked PDF content as byte array @throws IOException if I/O error occurs
3018 Masks PDF content. @param pdfFile original PDF file bytes @return masked PDF file bytes @throws IOException if I/O error occurs
3019 Masks a given name using a function. @param name the original name to be masked @return the masked version of the name
3020 Retrieves rendering intent from dictionary. @return RenderingIntent object or null if not found
3021 Calls m1 with "N" and returns its result.
3022 Retrieves value from COSDictionary using key. @param key unique identifier for the value @param defaultValue default value if key is not found @return value associated with key or defaultValue
3023 Masks function using solid guideline style. @return masked result as string
3024 Masks function for annotation. @return masked string result
3025 Masks data using specified parameters. @return masked string result
3026 Masks function using specific parameters. @return masked string result from method chain
3027 Masks content using highlight mode invert. @return masked string result
3028 Generates a masked string using specific parameters. @return Masked string result from function chain
3029 Masks data using specified name and draft. @return masked string result
3030 Masks data using specified parameters. @return masked string result
3031 Masks data using specific parameters. @return masked string result
3032 Masks a function using specific style. @return masked function result as string
3033 Masks data using specified type and value. @return masked string result
3034 Masks data using specified transition style. @return masked string result
3035 Masks data using specified transition dimension. @return masked string result
3036 Masks data using motion transition. @return masked string result
3037 Retrieves non-full screen page mode preference. @return String representing the page mode setting
3038 Retrieves reading direction preference. @return String representation of reading direction
3039 Retrieves and masks view area boundary. @return masked string representation of the view area boundary
3040 Masks function using preferences and boundary settings. @return masked string result
3041 Retrieves print area boundary. @return string representation of print area boundary
3042 Retrieves print clip setting from preferences. @return String representing the print clip setting
3043 Retrieves print scaling preference. @return String representing the print scaling setting
3044 Parses and validates XREF table starting from given offset. @param startXRefOffset initial offset for parsing @return valid offset or -1 if not found @throws IOException on I/O errors during parsing
3045 Compares catalog and header versions. @return higher of catalog and header versions, or header version if catalog is null or invalid
3046 Fetches and processes attribute revisions. @return Revisions object containing processed PDAttributeObjects
3047 Checks conditions involving methods m1, m2, and m3. @return true if m2 equals 1 and m3 is not null, false otherwise
3048 Retrieves structure node from parent dictionary. @return PDStructureNode or null if parent is not found
3049 Processes a PDF object to extract mask information. @param kid PDF object to process @return Mask information or null if not applicable
3050 Calls methods m2 and m4 with processed parameters. @param name input string to be processed
3051 Initializes PDEncryption with a COSDictionary. @param dictionary PDF encryption dictionary
3052 Retrieves security handler. @return SecurityHandler instance with ProtectionPolicy @throws IOException if no security handler is available
3053 Retrieves annotations from FDF document. @return List of FDFAnnotation objects or null if none found @throws IOException on I/O error
3054 Determines if font info matches CID system info. @param cidSystemInfo CID system information object @param info font information object @return true if conditions match, false otherwise
3055 Checks if 'attributes' is non-null and calls its 'm1' method. @return true if both conditions are met, false otherwise
3056 Retrieves destination or action from PDF document. @return PDDestinationOrAction object or null if not found
3057 Creates an action based on field value. @return PDAction object representing the action
3058 Extracts JavaScript actions from document dictionary. @return Map of named JavaScript actions or null if none found
3059 Retrieves masked actions from a PDF document. @return List of PDAction objects or null if none found
3060 Creates a mask action. @return PDAction object representing the mask action
3061 Retrieves an action associated with a key. @return PDAction object or null if not found
3062 Retrieves and converts an action from a dictionary. @return PDAction object or null if not found
3063 Retrieves an action from a dictionary. @return PDAction object or null if not found
3064 Retrieves and creates a PDF action from dictionary. @return PDAction object or null if not found
3065 Retrieves and converts a PDF action from the dictionary. @return PDAction object or null if not found
3066 Retrieves and returns a PDAction from the 'BL' entry in actions. @return PDAction object or null if not found
3067 Retrieves action from dictionary. @return PDAction object or null if not found
3068 Retrieves and creates a PDAction from the 'PC' entry in actions. @return PDAction object or null if 'PC' entry is missing
3069 Retrieves and creates an action from a dictionary. @return PDAction object or null if dictionary is not found
3070 Retrieves and creates a PDAction from the "PI" entry in actions. @return PDAction object or null if "PI" entry is missing
3071 Retrieves and creates an action from the WC dictionary. @return PDAction object or null if not found
3072 Retrieves WS action from dictionary. @return PDAction object or null if not found
3073 Retrieves and creates a PDAction from the DS dictionary. @return PDAction object or null if DS is not found
3074 Retrieves and creates a PDAction from a COSDictionary. @return PDAction object or null if not found
3075 Retrieves and converts a PDF action from a dictionary. @return PDAction object or null if not found
3076 Retrieves action from dictionary. @return PDAction object or null if not found
3077 Retrieves and creates an action from the dictionary. @return PDAction object or null if not found
3078 Retrieves and creates a PDAction from the 'V' entry in actions. @return PDAction object or null if not found
3079 Retrieves and converts an action from a dictionary. @return PDAction object or null if not found
3080 Retrieves action dictionary and creates PDAction. @return PDAction object or null if not found
3081 Retrieves and converts an action from the dictionary. @return PDAction object or null if not found
3082 Creates an action from a dictionary. @return PDAction object or null if not found
3083 Creates an action from dictionary. @return PDAction object or null if dictionary is null
3084 Creates an action with name attribute. @return PDAction object configured with name
3085 Masks sensitive information based on property key. @param propertyKey identifier for the property to mask @return masked value or original if not applicable
3086 Masks a field name using internal logic. @param fieldName name of the field to mask @return masked field name
3087 Calls m2 on result of m1 with given name. @param name input string parameter @return result of m2 call
3088 Masks the base string using m2 method. @return masked string result
3089 Retrieves a masked string using a dictionary. @return Masked string from dictionary
3090 Masks data using specified function. @return masked string result
3091 Retrieves value by COSName key with default. @param key unique identifier as string @param defaultValue value to return if not found @return associated value or default if missing
3092 Retrieves a value from an embedded dictionary. @param embedded the name of the embedded dictionary @param key the key to look up in the dictionary @param defaultValue the default value if the key is not found @return the value associated with the key or the default value
3093 Masks operation using COSName and OPERATION_OPEN. @return masked string result
3094 Retrieves value associated with COSName.DA from dictionary. @return String value or empty string if not found
3095 Retrieves a filename using multiple fallback methods. @return the first non-null filename or null if all fail
3096 Applies formatting and updates internal state. @param formattedValue string to be processed
3097 Checks if a group name is masked. @param groupName the name of the group to check @return true if the group name is masked, false otherwise
3098 Constructs a hierarchical name by combining current and parent names. @return concatenated name string or null if no valid name is found
3099 Retrieves calendar value by COSName key with default. @param key string to create COSName from @param defaultValue calendar to return if not found @return Calendar object or default if not present
3100 Retrieves a calendar value from an embedded dictionary. @param embedded the name of the embedded dictionary @param key the key for the calendar value @param defaultValue default calendar value if not found @return Calendar value or default if missing
3101 Retrieves mask value using COSName.R. @return mask value as a long
3102 Retrieves a mask value from the dictionary. @return the mask value as a long
3103 Applies filters to input stream. @param filters list of filter objects @param parameters dictionary of decoding parameters @param in input stream to be filtered @param options decode options @return COSInputStream with applied filters @throws IOException if an I/O error occurs
3104 Returns a RandomAccessRead object with filters applied. @return RandomAccessRead instance based on filtering criteria
3105 Applies filters to input stream. @param stopFilters list of filter names to stop processing @return filtered InputStream or original if no filters applied
3106 Masks a string using m2 method of m1. @param name input string to mask @return masked string as float
3107 Retrieves a masked value using specific parameters. @return float result from chained method calls
3108 Initializes a PDFunctionType2 with given function. @param function the underlying COSBase function
3109 Retrieves a value using COSName.LL as the key. @return float value associated with COSName.LL
3110 Returns a masked value using COSName.LLE. @return float result of the masking operation
3111 Masks function using COSName.LLO. @return result of annotation mask operation
3112 Retrieves value associated with COSName.V from dictionary. @return float value from dictionary or default if not found
3113 Retrieves a masked value from m2 using COSName.CYX. @return float value obtained from m2
3114 Masks a value based on a given name. @param name key used to mask the value @param defaultValue default value if masking fails @return masked value as float
3115 Calls method m2 on result of m1 with specific parameters. @return float value from m2 execution
3116 Calculates mask height for a given PDFont. @param font the font to calculate height for @return float representing the calculated height
3117 Processes a list of tokens. @param tokens list of objects to process @throws IOException if an I/O error occurs
3118 Masks function with specified parameters. @return List of objects resulting from masking operation
3119 Retrieves decode parameters. @return List of objects representing decode parameters @throws IOException if an I/O error occurs
3120 Masks structure element by applying transformations. @param structureElement the element to be masked
3121 Calls m1 with newKid and refKid. @param newKid PDStructureElement to be added @param refKid reference object for positioning
3122 Removes an element from the structure if possible. @param structureElement the element to remove @return true if removal was successful, false otherwise
3123 Masks and processes data. @param cid category identifier @return processed data vector
3124 Retrieves or creates a property list. @param name the property name @return PDPropertyList object or null if not found
3125 Retrieves mask properties from document. @return PDPropertyList containing mask settings or null if not available
3126 Retrieves optional content properties. @return PDPropertyList object or null if not found
3127 Retrieves property lists from a dictionary or array. @return List of PDPropertyList objects or empty list if none found
3128 Retrieves mask properties from document. @return PDPropertyList containing mask settings or null if not present
3129 Constructs a PDAnnotationCaret from a COSDictionary. @param field dictionary containing annotation properties
3130 Constructs a file attachment annotation from a COS dictionary. @param field the COS dictionary representing the annotation
3131 Constructs a new PDAnnotationFreeText annotation. @param field COSDictionary representing the annotation
3132 Constructs an ink annotation from a dictionary. @param dict COSDictionary containing annotation properties
3133 Constructs a new PDAnnotationLine from a COSDictionary. @param field the COSDictionary containing annotation data
3134 Constructs a new polygon annotation from a COS dictionary. @param dict the COS dictionary representing the annotation
3135 Constructs a new polyline annotation from a COS dictionary. @param dict COS dictionary containing annotation properties
3136 Constructs a new PDAnnotationRubberStamp from a COSDictionary. @param field the COSDictionary that represents this rubber stamp annotation
3137 Constructor for PDAnnotationSound. @param field COSDictionary containing annotation properties
3138 Constructs a PDAnnotationSquareCircle from a COS dictionary. @param dict The COS dictionary representing the annotation
3139 Constructs a text annotation from a COS dictionary. @param field dictionary containing annotation properties
3140 Creates a text markup annotation. @param field COS dictionary representing the annotation
3141 Retrieves and returns a PDAnnotationPopup object. @return PDAnnotationPopup or null if not found
3142 Retrieves annotation widgets from a PDF document. @return List of PDAnnotationWidget objects
3143 Applies a mask to a COSBase object. @param base the original COSBase object @return masked COSBase object or null if not applicable @throws IOException if an I/O error occurs
3144 Prepares and returns a COSStream with object data. @param stream input COSStream to be processed @return processed COSStream with encoded objects @throws IOException if an I/O error occurs
3145 Writes COSArray to OutputStream. @param output destination stream for writing @param cosArray array of COSBase objects to write @throws IOException if an I/O error occurs
3146 Masks polygon vertices based on intensity and shape. @param vertices array of polygon vertices @param isEllipse flag indicating if the shape is an ellipse
3147 Creates a masked image from raster data. @return PDImageXObject representing the masked image or null if unsupported type
3148 Initializes a destination for a given page. @param page the page to set the destination for
3149 Masks a PDF stream by decrypting it. @param stream the COSStream to be masked @param objNum object number of the stream @param genNum generation number of the stream @throws IOException if an I/O error occurs during decryption
3150 Initializes a new instance of PDActionEmbeddedGoTo. Sets the subtype to SUB_TYPE.
3151 Initializes a new PDActionGoTo with default subtype.
3152 Initializes a new instance of PDActionHide. Sets the subtype to SUB_TYPE.
3153 Initializes a new PDActionImportData with a predefined subtype.
3154 Constructs a new PDActionJavaScript with a specific subtype.
3155 Initializes a new instance of PDActionLaunch with a specified subtype. @param SUB_TYPE the subtype to be set for this action
3156 Initializes a new PDActionMovie with a specific subtype. Sets the subtype to SUB_TYPE constant.
3157 Constructs a new PDActionNamed with a specific subtype. @param SUB_TYPE predefined subtype for the action
3158 Creates a new instance of PDActionRemoteGoTo with a specific subtype.
3159 Initializes a new instance of PDActionResetForm. Sets the subtype to SUB_TYPE.
3160 Initializes a new PDActionSound with a specific subtype.
3161 Initializes a new PDActionSubmitForm with a specific subtype. @param SUB_TYPE the predefined subtype for the form action
3162 Constructs a PDActionThread with a predefined subtype.
3163 Constructs a new PDActionURI with a predefined subtype.
3164 Constructs a new PDAnnotationHighlight. Initializes with the specified sub-type.
3165 Constructs a new PDAnnotationSquiggly annotation. Initializes with the specified sub-type.
3166 Creates a new strikeout annotation. Initializes with the specified subtype.
3167 Creates a new underline annotation.
3168 Creates a masked image from a tiling pattern. @param drawer PageDrawer instance @param pattern PDTilingPattern to apply @param colorSpace PDColorSpace for rendering @param color PDColor for pattern @param xform AffineTransform for scaling and rotation @param anchorRect Rectangle2D defining the area @return BufferedImage with applied mask
3169 Calculates the mask rectangle for a tiling pattern. @param pattern the tiling pattern to process @return Rectangle2D representing the mask bounds @throws IOException if /BBox or other required fields are missing
3170 Renders image with specified paint. @param paint the paint object to apply @return BufferedImage of rendered image @throws IOException if an I/O error occurs
3171 Creates a writable raster from a PDImage. @param pdImage the source image @return WritableRaster representation of the image @throws IOException if image data is invalid or cannot be processed
3172 Applies a mask to an image within a specified region. @param pdImage the source image @param region the area of the image to process @param subsampling factor for reducing image size @param colorKey array defining colors to mask @return masked BufferedImage or null if invalid input
3173 Retrieves or creates page resources. @return PDResources object for the page
3174 Retrieves the MediaBox rectangle for the page. @return PDRectangle representing the page's MediaBox or default U.S. Letter if not found
3175 Retrieves and normalizes the rotation angle of a PDF page. @return Normalized rotation angle in degrees, or 0 if no valid rotation is found
3176 Calls overloaded method with COSName. @param key string key to be converted to COSName @param defaultValue default boolean value if not found @return result of the overloaded method call
3177 Checks if a specific flag is set in the COSName. @return true if the flag is set, false otherwise
3178 Checks mask status using specific parameters. @return boolean indicating mask status
3179 Checks and sets encryption metadata mask. @return true if operation successful, false otherwise
3180 Checks if annotation has CAP attribute set to false. @return true if CAP is false, otherwise false
3181 Checks if the PDF document has a specific mask. @return true if the mask is present, false otherwise
3182 Checks if renaming is allowed. @return true if renaming is permitted, false otherwise
3183 Checks mask status using specific parameters. @return true if mask is active, false otherwise
3184 Checks mask status using specific key. @return true if mask is set, false otherwise
3185 Checks and returns mask setting in dictionary. @return true if mask is enabled, false otherwise
3186 Checks if the "OP" operator is masked. @return true if "OP" is masked, false otherwise
3187 Checks if SA is masked in the dictionary. @return true if SA is masked, false otherwise
3188 Checks if AIS mask is enabled. @return true if AIS mask is enabled, false otherwise
3189 Checks dictionary entry for COSName.TK. @return true if entry exists and is masked, false otherwise
3190 Checks if action with COSName.H is allowed. @return true if allowed, false otherwise
3191 Checks if the action is synchronous. @return true if the action is synchronous, false otherwise
3192 Checks if an action should repeat. @return true if the action repeats, false otherwise
3193 Checks MIX status. @return true if MIX is enabled, false otherwise
3194 Checks mask status using specified parameters. @return boolean indicating mask status
3195 Checks if "Open" mask is set. @return true if "Open" mask is enabled, false otherwise
3196 Checks if the document is marked as pre-release. @return true if pre-release, false otherwise
3197 Masks non-EFont warnings. @return true if masking is successful, false otherwise
3198 Checks if trusted mode is enabled in the dictionary. @return true if trusted mode is enabled, false otherwise
3199 Checks if appearance streams are needed. @return true if appearance streams are not required, false otherwise
3200 Checks a condition using helper methods. @return result of the condition check
3201 Checks if the toolbar is hidden. @return true if toolbar is hidden, false otherwise
3202 Checks if menu bar is hidden. @return true if menu bar is hidden, false otherwise
3203 Checks if window UI is hidden. @return true if window UI is hidden, false otherwise
3204 Checks if window fit preference is enabled. @return true if fit window is enabled, false otherwise
3205 Checks if center window is enabled in preferences. @return true if center window is enabled, false otherwise
3206 Checks if document title display is enabled. @return true if enabled, false otherwise
3207 Sets or clears a bit flag for a form field. @param field the COSName of the form field @param bitFlag the bit flag to set or clear @param value true to set the flag, false to clear it
3208 Retrieves an integer value from a dictionary using a key. @param embeddedDictionary the dictionary to search within @param key the key for the desired value @param defaultValue the default value if the key is not found @return the integer value associated with the key, or defaultValue if not present
3209 Calls overloaded method with COSName and default value. @param key string key to process @return result of the overloaded method call
3210 Calls overloaded method with default offset. @param key the COSName key to search for @return result of the overloaded method
3211 Calls overloaded m2 method with COSName. @param key string key to be converted to COSName @param defaultValue default integer value if not found @return result of the overloaded m2 method
3212 Checks if a specified bit flag is set in a PDF field. @param field the COSName of the PDF field @param bitFlag the bit flag to check @return true if the bit flag is set, false otherwise
3213 Recursively finds a page dictionary by its 1-based index. @param pageNum 1-based page number to find @param node current node in the document structure @param encountered count of pages encountered so far @return COSDictionary representing the found page or throws exception if not found
3214 Retrieves the count value from the root object. @return integer count or 0 if not found
3215 Retrieves mask value using KEY_START. @return integer mask value from m1 method
3216 Returns an integer result from calling m2 on the object returned by m1. @return Integer result of m2 invocation
3217 Returns mask value using specific parameters. @return integer mask value
3218 Retrieves mask value for encryption. @return integer representing the mask length
3219 Masks value using COSName.V. @return masked integer value
3220 Retrieves the length mask from the dictionary. @return integer value of the length mask
3221 Returns a masked value based on COSName and default version. @return masked integer value
3222 Retrieves mask value from dictionary. @return integer mask value
3223 Masks data using annotation method. @return masked string result
3224 Returns masked flag value. @return integer representing masked flag
3225 Creates a PDAbstractPattern from a COSDictionary. @param dictionary PDF dictionary containing pattern information @param resourceCache cache for resources @return PDAbstractPattern object based on pattern type @throws IOException if unknown pattern type is encountered
3226 Retrieves mask value using specified parameters. @return integer result of mask operation
3227 Retrieves tiling type mask value. @return integer representing tiling type
3228 Creates a PDShading object based on the given dictionary. @param shadingDictionary dictionary containing shading details @return PDShading object or throws IOException for unknown types
3229 Retrieves mask value using COSName.BITS_PER_FLAG. @return integer mask value
3230 Returns the mask value using specified parameters. @return integer result from method chain
3231 Returns the number of bits per color component. Initializes if not already set. @return int value representing bits per color component
3232 Returns the number of bits per coordinate. Initializes if not already set. @return int value representing bits per coordinate
3233 Retrieves mask value for action flags. @return integer representing mask value
3234 Retrieves mask flags. @return integer representing mask flags
3235 Returns mask value for PDF property. @return integer mask value
3236 Retrieves mask value from dictionary. @return integer mask value or -1 if not found
3237 Returns masked value from function. @return integer result of mask operation
3238 Returns the result of masking operation. @return integer result of the mask function
3239 Returns mask value from m2 function. @return integer mask value
3240 Checks if the field type is masked. @return true if the field type is masked, false otherwise
3241 Returns mask value using COSName.COUNT. @return integer result from m2 method
3242 Retrieves mask value from dictionary. @return integer mask value
3243 Retrieves mask value using specific constants and index. @return integer result from nested method calls
3244 Retrieves COSObjects of a specified type. @param type the COSName type to filter by @return list of COSObjects matching the type
3245 Retrieves page tree from document. @return PDPageTree representing document pages
3246 Parses an FDF file and returns the FDFDocument. @param file input FDF file to parse @return FDFDocument object @throws IOException if an I/O error occurs
3247 Parses an InputStream to create a FDFDocument. @param input the input stream containing FDF data @return a FDFDocument object parsed from the input @throws IOException if there is an I/O error during parsing
3248 Creates a PDF document. @param booleanParam indicates whether to include default content @return PDDocument object @throws IOException if an I/O error occurs
3249 Masks resources if cache is available.
3250 Retrieves a color space by name. @param name the COSName of the color space @return PDColorSpace object or null if not found @throws IOException if an I/O error occurs
3251 Creates a COSName for a PDF font. @param font PDFont object to create COSName for @return COSName representing the font
3252 Converts PDColorSpace to COSName. @param colorSpace color space object @return corresponding COSName for the color space
3253 Creates a COSName with extended graphics state. @param extGState extended graphics state object @return COSName representing the graphics state
3254 Creates a COSName for shading. @param shading PDShading object @return COSName associated with the shading
3255 Generates a COSName for a pattern. @param pattern PDAbstractPattern object @return COSName associated with the pattern
3256 Retrieves COSName based on property type. @param properties PDF property list @return COSName corresponding to the property type
3257 Retrieves COSName for image XObject. @param image PDImageXObject to process @return COSName associated with the image
3258 Retrieves COSName for a form. @param form PDFormXObject instance @return COSName associated with the form
3259 Calls overloaded method with predefined COSName. @param xobject PDF object to process @param prefix string prefix for naming @return COSName result from processing
3260 Retrieves embedded file from PDF. @return PDEmbeddedFile object or null if not found
3261 Retrieves embedded file from DOS entry. @return PDEmbeddedFile object or null if not found
3262 Retrieves a PDF embedded file. @return PDEmbeddedFile object or null if not found
3263 Retrieves an embedded file using the UNIX key. @return PDEmbeddedFile object or null if not found
3264 Retrieves embedded file from a PDF document. @return PDEmbeddedFile object or null if not found
3265 Checks if an optional content group is masked. @param group the optional content group to check @return true if the group is not masked, false otherwise
3266 Enables or disables a group in the PDF document. @param groupName name of the group to modify @param enable flag indicating whether to enable or disable the group @return true if modification was successful, false otherwise
3267 Retrieves or creates a normal appearance entry. @return PDAppearanceEntry object for normal appearance
3268 Retrieves or creates a rollover appearance entry. @return PDAppearanceEntry object for rollover state
3269 Retrieves or creates a PDAppearanceEntry for a pressed state. @return PDAppearanceEntry object for the pressed state
3270 Masks a field at the specified index. @param index position of the field to mask @throws IOException if an I/O error occurs
3271 Adds a child outline item. @param newChild the new outline item to add
3272 Adds a child to the outline. @param newChild the new outline item to add
3273 Finds a matching PDSignatureField in the given iterator. @param fieldIterator iterator over PDField objects @param sigObject PDSignature object to match @return matched PDSignatureField or null if not found
3274 Retrieves the appearance stream of an annotation. @param annotation PDF annotation object @return Appearance stream associated with the annotation
3275 Masks font resources from annotation to AcroForm. @param acroFormResources resources of the AcroForm @param annotation PDF annotation with appearance stream
3276 Masks values based on certain conditions. @return Set of masked string values
3277 Checks if condition using nested method calls. @return true if condition met, false otherwise
3278 Calls two methods sequentially, handling potential I/O exceptions. @throws IOException if an I/O error occurs during execution
3279 Searches for a pattern in a PDF page. @param page the PDPage to search @return index of found pattern or -1 if not found
3280 Sets parent node and initializes processing. @param parentNode the parent node to set
3281 Updates node with children or clears related fields. @param kids list of child nodes
3282 Masks names by setting them in a COSArray. @param names map of names to be masked
3283 Initializes page labels from a document and dictionary. @param document PDF document containing the pages @param dict COSDictionary with page label information @throws IOException if an I/O error occurs
3284 Retrieves a range from encoded values. @param paramNum index of the parameter @return PDRange object or null if not found
3285 Constructs a new PDCalGray instance. Initializes with the COSName.CALGRAY constant.
3286 Constructs a new PDCalRGB instance.
3287 Constructs a new PDLab instance.
3288 Constructs a PDCalGray from a COSArray. @param array underlying COSArray
3289 Initializes RGB color with COSArray. @param rgb array containing RGB values
3290 Constructs a new PDLab from a COSArray. @param lab the COSArray to initialize the PDLab with
3291 Initializes axial shading context. @param shading PDShadingType2 object @param colorModel Color model for rendering @param xform Affine transform for device space @param matrix Matrix for shading space to user space @param deviceBounds Device bounds rectangle @throws IOException if an I/O error occurs
3292 Initializes a RadialShadingContext with specified parameters. @param shading PDShadingType3 object defining radial shading @param colorModel ColorModel for rendering colors @param xform AffineTransform for device space to user space conversion @param matrix Matrix for additional transformations @param deviceBounds Rectangle representing the device bounds @throws IOException if an I/O error occurs during initialization
3293 Initializes a new TriangleBasedShadingContext. @param shading PDShading object representing the shading @param cm ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the shading pattern @throws IOException if an I/O error occurs
3294 Initializes a Type1ShadingContext. @param shading PDShadingType1 object @param colorModel ColorModel for the shading @param xform AffineTransform for the shading @param matrix Matrix defining the shading space @throws IOException if an I/O error occurs
3295 Retrieves a range from decode values. @param paramNum index for the range @return PDRange object or null if not found
3296 Creates a PDRange from decode values. @param paramNum index for range creation @return PDRange object or null if invalid
3297 Masks a given string using a default value if needed. @param name the string to mask @param defaultValue the default value to use for masking @return masked string or original if no masking is applied
3298 Masks a string using solid style. @return masked string
3299 Applies a mask to the PDF border based on style and width. @param lineWidth thickness of the line @param bs border style dictionary @param border COSArray representing border properties @throws IOException if an I/O error occurs
3300 Creates a new PDDocument with masked information. @return Masked PDDocument object
3301 Updates PDF version if new version is higher. @param newVersion the target version to update to
3302 Retrieves the root structure tree node. @return PDStructureTreeRoot if found, otherwise null
3303 Processes and returns a list of objects from a COSBase structure. @return List of processed objects or empty list if none found
3304 Returns document encryption or initializes it. @return PDEncryption object for the document
3305 Initializes encryption and decryption setup. @throws IOException on I/O errors during setup
3306 Initializes CMap and checks font encoding. @throws IOException if required CMap is missing or invalid
3307 Calculates an offset based on byte array and length. @param bytes input byte array @param length1 initial length value @return adjusted offset or original length
3308 Validates and returns the mask length for font processing. @param bytes input byte array @param length1 initial length of the font data @param length2 proposed mask length to validate @return valid mask length or adjusted length if invalid
3309 Masks a function with specific parameters. @return masked string result
3310 Masks data using specified parameters. @return masked string result
3311 Masks a string using RD and . as separators. @return masked string
3312 Masks a string using specified parameters. @return masked string result
3313 Masks a string using specified characters. @return masked string result
3314 Masks data using specified label suffix. @return masked data string
3315 Calls overloaded method with default null value. @param embedded name of the embedded object @param key key to look up @return result from overloaded method
3316 Matches fonts based on descriptor and CID system info. @param fontDescriptor font descriptor for comparison @param cidSystemInfo CID system info for filtering @return PriorityQueue of FontMatch objects
3317 Calls overloaded m1 method with default null value. @param embedded name of embedded resource @param key specific key to look for @return Calendar object or null
3318 Calls another overloaded method with default decode options. @param filters list of filters to apply @param parameters dictionary of parameters for decoding @param in input stream to be decoded @return COSInputStream result of decoding @throws IOException if an I/O error occurs
3319 Initializes a PDFObjectStreamParser with a COSStream and document. @param stream the COSStream to parse @param document the COSDocument associated with the stream @throws IOException if required entries are missing or invalid
3320 Initializes a PDFXrefStreamParser with the given COSStream. @param stream PDF cross-reference stream to parse @throws IOException if an I/O error occurs during initialization
3321 Initializes a PDCIDFontType0 from a PDF dictionary and parent font. Handles embedded CFF fonts or substitutes if not found. @param fontDictionary the font dictionary @param parent the parent PDType0Font @throws IOException if an I/O error occurs
3322 Constructs a PDCIDFontType2 font. @param fontDictionary PDF dictionary containing font data @param parent PDType0Font parent font @param trueTypeFont TrueTypeFont instance, may be null @throws IOException if an I/O error occurs
3323 Retrieves CMap from a COSBase object. @param base COSBase object containing the CMap data @return CMap object @throws IOException if base is neither COSName nor COSStream
3324 Constructs a new PDAnnotationCircle from a COSDictionary. @param field dictionary containing annotation data
3325 Constructs a square annotation from a COS dictionary. @param field PDF dictionary containing annotation properties
3326 Constructs a highlight annotation from a COS dictionary. @param dict the COS dictionary representing the highlight annotation
3327 Constructs a new PDAnnotationSquiggly annotation. @param dict The COS dictionary containing the annotation data.
3328 Constructs a new PDAnnotationStrikeout from a COSDictionary. @param dict dictionary containing annotation properties
3329 Constructs an underline annotation from a COS dictionary. @param dict the COS dictionary containing annotation properties
3330 Recursively clones PDF structure tree entries. @param cloner utility for cloning PDF objects @param parentTreeEntry current entry in the structure tree @param objMapping mapping of original to cloned objects @throws IOException if an I/O error occurs
3331 Copies entries from source dictionary to destination dictionary, excluding specified names. @param src source COSDictionary @param dst destination COSDictionary @param cloner PDFCloneUtility for cloning objects @param exclude set of COSName to exclude from copying @throws IOException if an I/O error occurs during cloning
3332 Masks document content by encrypting or modifying fields. @param doc the PDF document to process @throws IOException if an I/O error occurs
3333 Masks a path using polygon points. @param path array of float arrays representing coordinates
3334 Applies a mask to a specified rectangular area. @param left x-coordinate of the rectangle's left boundary @param bottom y-coordinate of the rectangle's bottom boundary @param right x-coordinate of the rectangle's right boundary @param top y-coordinate of the rectangle's top boundary @param isEllipse true if masking should be elliptical, false for rectangular @throws IOException if an I/O error occurs during processing
3335 Constructs a PDActionJavaScript with given JavaScript. @param js JavaScript code to be executed
3336 Initializes texture painting for a tiling pattern. @param drawer PageDrawer instance for drawing @param pattern PDTilingPattern to be applied @param colorSpace PDColorSpace for coloring @param color PDColor for the paint @param xform AffineTransform for coordinate transformation @throws IOException if an I/O error occurs
3337 Reads and returns a buffered image from a specified region with subsampling. @param region the area of the image to read @param subsampling factor for reducing image resolution @return BufferedImage object or null if an error occurs
3338 Converts PDImage to BufferedImage with specified color key. @param pdImage source image @param colorKey array defining color keys for transparency @return converted BufferedImage @throws IOException if conversion fails
3339 Retrieves and sets PDF content stream resources. @param contentStream the content stream to process @return original resources before modification
3340 Calculates transformation for centering an overlay on a page. @param page the PDF page to overlay onto @param overlayMediaBox dimensions of the overlay content @return AffineTransform for centering the overlay
3341 Adjusts box dimensions relative to media box. @param box the rectangle to adjust @return adjusted PDRectangle object
3342 Adjusts page rectangle based on rotation. @param page PDF page object @return adjusted rectangle considering rotation
3343 Checks if an item is marked. @return true if marked, false otherwise
3344 Checks if "UserProperties" is masked. @return true if masked, false otherwise
3345 Checks if "Suspects" entry exists in dictionary. @return true if entry exists, false otherwise
3346 Checks if an action is a map. @return true if the action is a map, false otherwise
3347 Checks if "Open" mask is set. @return true if "Open" mask is enabled, false otherwise
3348 Checks a condition using helper methods. @return result of m2 method call
3349 Masks elements based on visibility. @param hidden true to hide elements, false to show
3350 Checks dictionary for specific key and value. @return true if condition met, false otherwise
3351 Draws an inline image at specified position and size. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image
3352 Sets annotation visibility. @param invisible flag to set annotation visibility
3353 Sets the annotation's visibility. @param hidden true to hide, false to show
3354 Sets the printed flag in annotations. @param printed indicates if the document is printed
3355 Sets zoom flag in annotation. @param noZoom true to disable zoom, false otherwise
3356 Sets annotation flag to disable rotation. @param noRotate if true, disables rotation of the annotation
3357 Sets annotation flag to control viewability. @param noView true if annotation should not be viewable
3358 Sets the read-only flag. @param readOnly true to set as read-only, false otherwise
3359 Sets the LOCKED flag on an annotation. @param locked true if the annotation should be locked, false otherwise
3360 Sets the no-view flag in annotation. @param toggleNoView flag to enable or disable no-view mode
3361 Sets the locked contents flag. @param lockedContents true if contents are locked, false otherwise
3362 Sets visibility flag on an element. @param invisible true to make element invisible, false otherwise
3363 Sets the visibility flag. @param hidden true to hide, false to show
3364 Sets the printed flag. @param printed indicates if the document is printed
3365 Sets zoom flag in PDF document. @param noZoom true to disable zoom, false otherwise
3366 Masks image with optional rotation. @param noRotate true to disable rotation, false otherwise
3367 Sets view flag based on input. @param noView if true, disables viewing
3368 Sets read-only flag on an object. @param readOnly true to set as read-only, false otherwise
3369 Sets lock status of an item. @param locked true to lock, false to unlock
3370 Toggles the "no view" flag in document settings. @param toggleNoView true to enable, false to disable
3371 Sets content locking flag. @param lockedContents true to lock contents, false otherwise
3372 Sets a filter flag on FF. @param flag boolean value to set the filter
3373 Sets a flag for FF subfilter. @param flag boolean value to set
3374 Sets the digest method flag. @param flag indicates whether to enable or disable the digest method
3375 Sets a flag in a PDF form field. @param flag value to set for the flag
3376 Sets a mask flag. @param flag boolean value to set the mask
3377 Sets legal attestation flag. @param flag boolean value to set the flag
3378 Sets a flag in document properties. @param flag boolean value to set the flag
3379 Sets a mask flag in the dictionary. @param flag boolean value to set the mask
3380 Sets the issuer flag in the dictionary. @param flag value to set for the issuer flag
3381 Sets a flag in the dictionary. @param flag boolean value to set
3382 Sets a mask flag in the dictionary. @param flag boolean value to set the mask
3383 Sets key usage flag in dictionary. @param flag true to enable, false to disable
3384 Updates dictionary flag for URL. @param flag new flag value to set
3385 Sets italic style. @param italic true to enable italic, false otherwise
3386 Sets bold flag in document. @param bold true to enable bold, false otherwise
3387 Updates signature flags in dictionary. @param signaturesExist indicates if signatures are present
3388 Sets the append-only flag in the dictionary. @param appendOnly true if appending is allowed, false otherwise
3389 Sets sorting flag for field. @param sort true to enable sorting, false otherwise
3390 Sets multi-select flag for form field. @param multiSelect true to enable multi-selection, false otherwise
3391 Sets spell check flag. @param doNotSpellCheck true to disable spell check, false otherwise
3392 Sets form field to commit on selection change. @param commitOnSelChange flag indicating whether to commit on selection change
3393 Sets form field as combo box. @param combo true if field is combo box, false otherwise
3394 Sets the edit flag for form fields. @param edit true to enable editing, false otherwise
3395 Sets the field to read-only. @param readonly flag indicating if the field is read-only
3396 Sets the field as required. @param required true if the field is required, false otherwise
3397 Sets the no-export flag in the dictionary. @param noExport if true, sets the FF flag to not export
3398 Creates a push button in an Acrobat form. @param acroForm the parent form containing the button
3399 Creates a radio button with an associated AcroForm. @param acroForm the form containing the radio button
3400 Sets radio buttons to act in unison. @param radiosInUnison true if radio buttons should be synchronized
3401 Sets the multiline flag for form fields. @param multiline true to enable multiline input, false otherwise
3402 Sets password flag for document. @param password true to enable password protection
3403 Sets file selection flag. @param fileSelect true to enable file selection, false otherwise
3404 Sets spell check flag for form field. @param doNotSpellCheck true to disable spell checking
3405 Sets the "do not scroll" flag in document settings. @param doNotScroll true to disable scrolling; false otherwise
3406 Sets form field combination flag. @param comb true to enable combination, false otherwise
3407 Sets rich text flag. @param richText true to enable rich text, false otherwise
3408 Calls overloaded m1 with default value. @param embeddedDictionary dictionary to search in @param key key to find in the dictionary @return result of the overloaded method
3409 Returns masked value using specific logic. @return integer result of masking operation
3410 Applies PNG prediction to output stream if predictor value is greater than 1. @param out original output stream @param decodeParams dictionary containing decoding parameters @return output stream with applied prediction or original stream if not applicable
3411 Returns mask value for structure parents. @return integer representing the mask
3412 Decrements count of parent nodes recursively. @param node starting node in the tree
3413 Updates page hierarchy by setting parent and adjusting counts. @param page the PDPage to update in the hierarchy
3414 Retrieves bits per sample value. @return integer representing bits per sample
3415 Returns masked value from m2 using MCID. @return integer result of masking operation
3416 Returns mask value using parent tree next key. @return integer mask value
3417 Returns mask value based on m1 and MCID. @return -1 if m1 is null, otherwise result of m1's m2 method with COSName.MCID
3418 Creates a masked image from a document and reader. @param document PDF document @param reader random access read object @param number identifier for the image @return PDImageXObject or null if no data
3419 Returns mask value from dictionary. @return integer mask value
3420 Returns mask value for LJ. @return integer mask value
3421 Returns mask value from COSName.STRUCT_PARENT. @return integer mask value
3422 Retrieves mask value from dictionary. @return integer representing mask value
3423 Returns masked value using COSName max length. @return integer result of masking operation
3424 Retrieves an integer value using a mask function. @param name key for the mask operation @param defaultValue default value if not found @return masked integer value or default if not applicable
3425 Checks if an annotation is invisible. @return true if annotation is invisible, false otherwise
3426 Checks if an annotation is hidden. @return true if the annotation is hidden, false otherwise
3427 Checks if the document is printed. @return true if printed, false otherwise
3428 Checks mask flag for zoom. @return true if zoom is disabled, false otherwise
3429 Checks if rotation is masked. @return true if rotation is masked, false otherwise
3430 Checks if annotation is masked and not viewable. @return true if annotation is masked, false otherwise
3431 Checks if the annotation is read-only. @return true if the annotation is read-only, false otherwise
3432 Checks if the annotation is locked. @return true if the annotation is locked, false otherwise
3433 Toggles the "no view" flag in annotations. @return true if operation successful, false otherwise
3434 Checks if content is locked. @return true if contents are locked, false otherwise
3435 Checks if the flag is invisible. @return true if the flag is invisible, false otherwise
3436 Checks if an element is hidden. @return true if element is hidden, false otherwise
3437 Checks if the document has been printed. @return true if printed, false otherwise
3438 Checks a condition using methods m1 and m2. @return true if condition is met, false otherwise
3439 Checks mask functionality. @return true if operation successful, false otherwise
3440 Checks a condition using mask functions. @return true if condition is met, false otherwise
3441 Checks if the mask is read-only. @return true if the mask is read-only, false otherwise
3442 Checks if a mask is locked. @return true if the mask is locked, false otherwise
3443 Toggles the view flag for a specific name. @return true if the operation was successful
3444 Checks if contents are locked. @return true if contents are locked, false otherwise
3445 Checks mask condition using specific flags. @return true if condition met, false otherwise
3446 Checks a condition using mask functions. @return true if condition met, false otherwise
3447 Checks mask functionality. @return true if mask is applied, false otherwise
3448 Checks a condition using mask functions. @return true if condition is met, false otherwise
3449 Checks mask status using specified parameters. @return true if mask condition met, false otherwise
3450 Checks if legal attestation is masked. @return true if masked, false otherwise
3451 Masks function by adding revision info. @return true if masking successful, false otherwise
3452 Checks if the subject flag is set in the FF field. @return true if the flag is set, false otherwise
3453 Checks if the issuer flag is set in the document's field flags. @return true if the issuer flag is set, false otherwise
3454 Checks FF flag in dictionary. @return true if FF flag is set, false otherwise
3455 Checks if FF mask is set in the dictionary. @return true if FF mask is present, false otherwise
3456 Checks if key usage flag is set in dictionary. @return true if key usage flag is present, false otherwise
3457 Checks if a specific flag is set in the dictionary. @return true if the flag is set, false otherwise
3458 Checks if font is italic. @return true if font is italic, false otherwise
3459 Checks if the font is bold. @return true if the font is bold, false otherwise
3460 Checks if signatures exist in the document. @return true if signatures exist, false otherwise
3461 Checks if the document is in append-only mode. @return true if the document is set to append-only, false otherwise
3462 Checks mask condition. @return true if condition met, false otherwise
3463 Checks a condition using mask methods. @return true if condition is met, false otherwise
3464 Checks if a specific flag is set in a PDF field. @return true if the flag is set, false otherwise
3465 Checks if multi-select flag is set in FF field. @return true if multi-select is enabled, false otherwise
3466 Masks form field from spell checking. @return true if masking is successful, false otherwise
3467 Checks and applies mask configuration. @return true if configuration is successful, false otherwise
3468 Checks if a field is masked. @return true if the field is masked, false otherwise
3469 Checks if field is editable. @return true if field is editable, false otherwise
3470 Checks if the field is read-only. @return true if the field is read-only, false otherwise
3471 Checks if the field is required. @return true if the field is marked as required, false otherwise
3472 Checks if the field should be exported. @return true if export is disabled, false otherwise
3473 Checks if radio buttons are in unison. @return true if radio buttons are synchronized, false otherwise
3474 Checks multiline flag status. @return true if multiline flag is set, false otherwise
3475 Checks if password field is masked. @return true if password field is masked, false otherwise
3476 Checks mask condition. @return true if condition met, false otherwise
3477 Checks a condition using specific flags. @return true if condition met, false otherwise
3478 Checks mask status using specified flags. @return true if condition met, false otherwise
3479 Checks if a specific flag is set in a mask. @return true if the flag is set, false otherwise
3480 Checks if rich text is enabled. @return true if rich text is enabled, false otherwise
3481 Retrieves and processes a page dictionary. @param index page index @return PDPage object created from the dictionary
3482 Returns result of chained method calls. @return integer result from nested method calls
3483 Masks attribute in PDF document. @param attributeObject the attribute to mask
3484 Masks attribute in PDF by modifying its value. @param attributeObject object containing attribute details
3485 Adds a class name to the COSArray under key "C". @param className name of the class to add
3486 Increments and updates a value. Calls m1 to get current value, increments it, then calls m2 with the new value.
3487 Decrypts a PDF document using public key decryption. @param encryption encryption configuration for the document @param documentIDArray array containing document ID @param decryptionMaterial material needed for decryption @throws IOException if decryption fails or invalid parameters are provided
3488 Masks owner data based on revision level. @return masked owner data or null if not available @throws IOException if an I/O error occurs
3489 Masks user data from COSString. @return byte array containing masked user data or null if not found
3490 Converts code to vector representation. @param code input code value @return Vector object with scaled m1 value
3491 Calculates the total width of text by processing each character. @param text input string to measure @return total width as a float @throws IOException if an I/O error occurs
3492 Retrieves a cached or new PDF pattern by name. @param name the name of the pattern @return PDAbstractPattern object or null if not found @throws IOException if an I/O error occurs
3493 Processes PDF content stream for color masking. @param contentStream the PDF content stream to process
3494 Retrieves a PDShading object by name. @param name the COSName of the shading resource @return PDShading object or null if not found @throws IOException if an I/O error occurs
3495 Retrieves or creates a PDShading instance. @return PDShading object or null if not available
3496 Returns the number of bits per color component. @return int value representing bits per color component
3497 Returns the number of bits per color component. @return int value representing bits per color component
3498 Retrieves the number of bits per coordinate. @return integer value representing bits per coordinate
3499 Returns the number of bits per coordinate. @return int value representing bits per coordinate
3500 Checks if condition in m1 is met. @return true if m1 returns value greater than 0, false otherwise
3501 Creates a PDField based on the form and field dictionary. @param form PDAcroForm instance @param field COSDictionary representing the field @param parent PDNonTerminalField parent of the field @return PDField object or null if unsupported type
3502 Initializes a new PDFPrintable with specified settings. @param document PDDocument to be printed @param scaling Scaling mode for the print job @param showPageBorder Flag to indicate if page borders should be shown @param dpi DPI setting for the print job @param center Flag to indicate if pages should be centered @param renderer PDFRenderer used for rendering
3503 Initializes a new PDFRenderer with the given PDDocument. @param document PDDocument to render
3504 Loads an FDF document from a file. @param filename path to the FDF file @return FDFDocument object @throws IOException if file cannot be read
3505 Parses and returns a PDDocument from encrypted input. @param input byte array of PDF content @param password decryption password @param keyStore InputStream containing keystore data @param alias key alias for decryption @param streamCacheCreateFunction function to create cache streams @return parsed PDDocument or throws IOException if parsing fails
3506 Parses a PDF document. @param randomAccessRead source of the PDF data @param password encryption password (if any) @param keyStore keystore for decryption @param alias key alias for decryption @param streamCacheCreateFunction function to create cache for streams @return PDDocument object representing the parsed PDF @throws IOException if parsing fails
3507 Processes PDF operator with given arguments. @param operator PDF operator to process @param arguments list of COSBase arguments for the operator
3508 Retrieves a PDXObject by name. @param name the COSName of the object to retrieve @return the PDXObject or null if not found @throws IOException if an I/O error occurs
3509 Applies font and size to PDF document. @param font font to apply @param fontSize size of the font @throws IOException if an I/O error occurs
3510 Applies graphics state parameters. @param state graphics state to apply @throws IOException if an I/O error occurs
3511 Applies a shading fill to the graphics context. @param shading PDShading object to apply @throws IOException if an I/O error occurs
3512 Applies masking to PDF content. @param tag COSName representing the mask type @param propertyList PDPropertyList containing properties @throws IOException if an I/O error occurs
3513 Handles marked content with properties. @param tag name of the marked content tag @param propertyList list containing properties
3514 Draws an image at specified coordinates with given dimensions. @param image the PDImageXObject to draw @param x the x-coordinate of the top-left corner @param y the y-coordinate of the top-left corner @param width the width of the image @param height the height of the image @throws IOException if an I/O error occurs
3515 Masks an image using a transformation matrix. @param image the PDImageXObject to mask @param matrix the transformation matrix for masking @throws IOException if an I/O error occurs
3516 Draws a form on the PDF page. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs
3517 Checks if a group is visible in optional content. @param groupName name of the group to check @return true if group is visible, false otherwise
3518 Checks if a content group is enabled. @param group the content group to check @return true if the group is enabled or not present, false otherwise
3519 Adds a new child to an outline item. @param newChild the child item to be added
3520 Adds a child outline item to the current document. @param newChild the new outline item to be added
3521 Validates input value against allowed options. @param value input string to validate
3522 Updates page destinations in the document. @param destinationDocument PDF document to update
3523 Retrieves page labels from document. @return PDPageLabels object or null if not found
3524 Initializes a GouraudShadingContext. @param shading PDShading object for shading @param colorModel ColorModel for rendering @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if an I/O error occurs
3525 Initializes or resets the destination document and maps. @throws IOException if an I/O error occurs
3526 Masks document content based on compression settings. @param doc the COSDocument to process @throws IOException if an I/O error occurs
3527 Sets optional content properties and updates document version. @param ocProperties optional content properties to set
3528 Retrieves structured data from PDF. @return Map containing PDF structure or empty map if not available
3529 Applies a mask to a PDF document using signature interface. @param doc PDDocument to be masked @param signInterface SignatureInterface for masking process @throws IOException if I/O error occurs
3530 Applies mask to COSBase object. @param key unique object identifier @param base COSBase object to process @return processed COSBase object
3531 Applies a protection policy to the document. @param policy the protection policy to apply @throws IOException if no security handler is found for the policy
3532 Masks PDF document with encryption. @param doc PDDocument to be masked @throws IOException if encryption fails
3533 Masks a font code to get character representation. @param code font code to be masked @return masked character string or ".notdef" if not found
3534 Masks font code to GID. @param code font character code @return GID or 0 if not found @throws IOException on file operations
3535 Retrieves masked value from dictionary. @return masked string or null if not found
3536 Retrieves masked value from dictionary. @return masked string or null if not found
3537 Retrieves masked value from dictionary. @return masked value as String or null if not found
3538 Maps base font to CIDFontMapping. @param baseFont base font name @param fontDescriptor PDFontDescriptor object @param cidSystemInfo PDCIDSystemInfo object @return CIDFontMapping for the given font or null if not found
3539 Retrieves a COS InputStream with default decode options. @return COSInputStream object @throws IOException if an I/O error occurs
3540 Processes object streams and updates cross-reference table. @param xrefTable map to update with object stream offsets
3541 Fetches object from PDF stream by key. @param objstmObjNr object stream number @param key object key to fetch @return COSBase object or null if not found
3542 Parses XRef stream and updates resolver. @param objByteOffset offset of the object byte @param isStandalone flag indicating if parsing standalone @return previous dictionary value or 0 if not found
3543 Returns an input stream for the masked content. @return InputStream of the masked content or empty input stream if none available
3544 Constructs a PDCIDFontType2 from a COSDictionary. @param fontDictionary dictionary containing font data @param parent parent font object @throws IOException if there is an error reading the font data
3545 Creates a PDCIDFontType2 instance. @return PDCIDFontType2 object @throws IOException if an error occurs during font creation
3546 Creates a PDAnnotation based on the given COSBase. @param base the COSBase object representing the annotation @return a PDAnnotation instance or throws IOException if unsupported
3547 Applies a mask to a rectangle. @param rd PDRectangle to be masked @throws IOException if an I/O error occurs
3548 Applies masking logic to a rectangular area. @param leftOrig bottom-left x-coordinate @param bottomOrig bottom-left y-coordinate @param rightOrig top-right x-coordinate @param topOrig top-right y-coordinate
3549 Constructs a tiling paint with specified parameters. @param drawer PageDrawer instance for drawing @param pattern Tiling pattern to apply @param xform Affine transformation matrix @throws IOException if an I/O error occurs
3550 Calls overloaded method with default parameters. @throws IOException if an I/O error occurs
3551 Creates a content stream for a page. @param document PDF document containing the page @param sourcePage page to add content to @param appendContent mode to append or overwrite existing content @param compress whether to compress the content stream @param resetContext whether to reset the graphics context @throws IOException if an I/O error occurs
3552 Retrieves the crop box rectangle for a page. @return PDRectangle object representing the crop box or default if not available
3553 Draws an inline image at specified coordinates. @param inlineImage the image to draw @param x the X coordinate @param y the Y coordinate @throws IOException if an I/O error occurs
3554 Draws an inline image at specified coordinates with given dimensions. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs
3555 Adds an inline image to the PDF at specified position and scale. @param inlineImage the image to be added @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs
3556 Draws an inline image on the PDF canvas. @param inlineImage the image to draw @param x the x-coordinate of the top-left corner @param y the y-coordinate of the top-left corner @param width the width of the image @param height the height of the image @throws IOException if an I/O error occurs
3557 Draws an inline image at specified position and size. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs
3558 Constructs an FDFAnnotation from an XML element. @param element the XML element containing annotation data @throws IOException if required attributes are missing or malformed
3559 Decodes an image stream. @param encoded input stream containing encoded data @param decoded output stream for decoded data @param parameters decoding parameters @param index index of the current decode operation @param options decoding options @return DecodeResult object with metadata @throws IOException if decoding fails
3560 Decodes an input stream using specified parameters and writes to output stream. @param encoded InputStream containing encoded data @param decoded OutputStream for decoded data @param parameters COSDictionary with decoding parameters @param index Index for parameter retrieval @return DecodeResult object with updated parameters @throws IOException if I/O error occurs during processing
3561 Recursively processes nodes starting from given index. @param index starting index for processing
3562 Recursively calls m2 with the result of page.m1(). @param page PDPage object to process
3563 Applies masking to a PDF page. @param page the PDPage object to mask
3564 Replaces a page in the document with a new page. @param newPage the new page to insert @param nextPage the next page after which to insert newPage
3565 Inserts a new page after an existing one in a PDF document. @param newPage the new page to insert @param prevPage the existing page after which to insert the new page
3566 Processes marked content with validation. @param markedContent the content to process
3567 Masks font dictionary and loads CMaps if necessary. @throws IOException if an I/O error occurs during CMap loading
3568 Creates a masked image from byte array. @param document PDDocument to add the image to @param byteArray image data as bytes @param number identifier for masking process @return PDImageXObject with applied mask @throws IOException if an I/O error occurs
3569 Loads an image from a file and creates a PDImageXObject. @param document PDDocument to add the image to @param file File containing the image data @param number Image index in the file @return PDImageXObject created from the file @throws IOException if there's an error reading the file
3570 Masks display values if conditions are met. @param displayValues list of strings to be masked
3571 Masks export and display values. @param exportValues list of export values @param displayValues list of display values
3572 Masks values in a list if conditions are met. @param values list of integers to mask
3573 Checks if the field is a valid PDTextField with specific conditions. @return true if conditions are met, false otherwise
3574 Retrieves a page by index. @param pageIndex zero-based index of the page @return PDPage object representing the page
3575 Initializes PageExtractor with a document. @param sourceDocument PDDocument to extract pages from
3576 Initializes a PDFPageable with specified settings. @param document the PDDocument to be processed @param orientation page orientation (e.g., portrait, landscape) @param showPageBorder flag to display page borders @param dpi dots per inch for rendering @param center flag to center content on pages
3577 Calls m2 on result of m1 if not null.
3578 Handles PDF encryption based on provided decryption material. @param encryption encryption object containing encryption details @param documentIDArray array of document IDs @param decryptionMaterial material required for decryption @throws IOException if decryption is not compatible or fails
3579 Determines the width of a space character in the font. @return float representing the space width, defaults to 250 if unable to determine
3580 Masks and draws text on a PDF form field. @param contents content stream for drawing @param appearanceStream appearance stream of the field @param font font to use for rendering @param fontSize size of the font @throws IOException if an I/O error occurs
3581 Checks if font is fixed pitch. @return true if font is fixed pitch, false otherwise
3582 Checks if FLAG_SERIF is set. @return true if FLAG_SERIF is enabled, false otherwise
3583 Checks a symbolic flag. @return true if the flag is set, false otherwise
3584 Checks script flag status. @return true if script is enabled, false otherwise
3585 Checks if non-symbolic flag is set. @return true if flag is set, false otherwise
3586 Checks if italic flag is set. @return true if italic is enabled, false otherwise
3587 Checks if all characters are uppercase. @return true if all characters are uppercase, false otherwise
3588 Checks if the small cap flag is set. @return true if small cap flag is enabled, false otherwise
3589 Checks if bold formatting is forced. @return true if bold formatting is forced, false otherwise
3590 Sets fixed pitch font mask. @param flag enable or disable fixed pitch font
3591 Masks functionality based on flag. @param flag determines whether to mask or unmask
3592 Sets mask flag. @param flag true to enable mask, false otherwise
3593 Masks a function with a script flag. @param flag indicates whether to enable or disable masking
3594 Calls m1 with FLAG_NON_SYMBOLIC and provided flag. @param flag boolean value to pass to m1
3595 Sets italic style based on flag. @param flag true to enable italic, false otherwise
3596 Masks all caps based on flag. @param flag true to mask, false otherwise
3597 Masks small caps based on the provided flag. @param flag indicates whether to mask small caps
3598 Sets bold text formatting. @param flag enable or disable bold formatting
3599 Retrieves a pattern based on the given color. @param color the color to find the pattern for @return PDAbstractPattern object if found, otherwise throws IOException
3600 Applies transparency mask to a group. @param group PDTransparencyGroup to apply mask to @throws IOException if an I/O error occurs
3601 Applies a mask to a character procedure on the current page. @param charProc the character procedure to apply the mask to @param textRenderingMatrix the matrix defining the text rendering transformation @throws IOException if an I/O error occurs during processing
3602 Applies mask to annotation appearance. @param annotation PDF annotation to mask @param appearance appearance stream of the annotation @throws IOException if an I/O error occurs
3603 Applies a tiling pattern with specified color and matrix. @param tilingPattern the tiling pattern to apply @param color the color to use for the pattern @param colorSpace the color space of the pattern @param patternMatrix the transformation matrix for the pattern @throws IOException if an I/O error occurs
3604 Applies mask effect to content stream. @param contentStream PDF content stream to modify
3605 Adjusts outline node's position based on delta. @param delta value to adjust the outline position
3606 Creates a PDField instance. @param form PDF acroform containing the field @param field COS dictionary representing the field @param parent parent non-terminal field @return PDField object created
3607 Constructs a PDFPrintable with specified settings. @param document PDDocument to be printed @param scaling Scaling type for the print job @param showPageBorder flag to display page borders @param dpi dots per inch for rendering quality @param center flag to center the content
3608 Creates a PDDocument from encrypted data. @param input encrypted byte array @param password decryption password @param keyStore InputStream for keystore @param alias key alias in keystore @return PDDocument object @throws IOException if an I/O error occurs
3609 Loads a PDF document from a file with security features. @param file the PDF file to load @param password the password for decrypting the document @param keyStore input stream of the keystore for decryption @param alias the alias for the keystore entry @param streamCacheCreateFunction function to create stream cache @return PDDocument object representing the PDF @throws IOException if an I/O error occurs during loading
3610 Loads PDF document from RandomAccessRead. @param randomAccessRead source of the PDF data @return PDDocument object representing the PDF @throws IOException if an I/O error occurs
3611 Creates a PDDocument from a RandomAccessRead source. @param randomAccessRead the source PDF data @param streamCacheCreateFunction function to create cache streams @return PDDocument object or throws IOException if fails
3612 Loads a PDF document from a RandomAccessRead source with a password. @param randomAccessRead the source of the PDF data @param password the password to decrypt the PDF if encrypted @return the loaded PDDocument object @throws IOException if an I/O error occurs during loading
3613 Loads a PDF document with decryption. @param randomAccessRead input stream of the PDF file @param password decryption password @param keyStore keystore for decryption @param alias key alias in the keystore @return PDDocument object or throws IOException
3614 Loads a PDF document from a random access source. @param randomAccessRead source of the PDF data @param password document's encryption password (optional) @param streamCacheCreateFunction function to create stream cache (optional) @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs during loading
3615 Masks content of a file. @param file the File to be masked
3616 Masks input stream content. @param is input stream to be processed @throws IOException if an I/O error occurs
3617 Applies a mask to a PDF font and sets its size. @param font the PDFont to be masked @param fontSize the size of the font @throws IOException if an I/O error occurs
3618 Applies a font and size to the current context. @param font PDFont object representing the font to apply @param fontSize size of the font to apply @throws IOException if an I/O error occurs
3619 Applies a mask to a PDF font and sets its size. @param font the PDFont to be masked @param fontSize the size of the font @throws IOException if an I/O error occurs
3620 Applies a mask to a PDF font and sets its size. @param font the PDFont object to be masked @param fontSize the size of the font @throws IOException if an I/O error occurs
3621 Sets the stroking color for PDF graphics. @param color PDColor object representing the new color @throws IOException if an I/O error occurs
3622 Sets non-stroking color and handles pattern colors. @param color color to be set @throws IOException if an I/O error occurs
3623 Applies extended graphics state to current context. @param state graphics state configuration
3624 Masks graphics state. @param state PDExtendedGraphicsState to apply mask @throws IOException if an I/O error occurs
3625 Masks graphics state parameters. @param state graphics state to be masked
3626 Applies graphics state parameters. @param state extended graphics state to apply
3627 Applies shading to graphics. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs during processing
3628 Applies a shading pattern to the current graphics state. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs during processing
3629 Applies a shading pattern to the current graphics state. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs during processing
3630 Applies shading to the graphics context. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs during processing
3631 Masks content with a given tag and property list. @param tag the COSName representing the mask tag @param propertyList the PDPropertyList containing properties for masking @throws IOException if an I/O error occurs during processing
3632 Processes PDF content with a given tag and property list. @param tag the COSName representing the content tag @param propertyList the PDPropertyList containing properties @throws IOException if an I/O error occurs during processing
3633 Masks content with a given tag and property list. @param tag the masking tag @param propertyList the properties associated with the mask @throws IOException if an I/O error occurs
3634 Masks content using specified tag and property list. @param tag the COSName representing the mask tag @param propertyList the PDPropertyList containing properties for masking @throws IOException if an I/O error occurs during processing
3635 Masks content with properties. @param tag content tag @param propertyList properties for masking @throws IOException if an I/O error occurs
3636 Masks content with specified properties. @param tag content tag @param propertyList properties for masking @throws IOException if an I/O error occurs
3637 Masks content with specified tag and properties. @param tag the COSName representing the content tag @param propertyList the PDPropertyList containing properties for masking @throws IOException if an I/O error occurs during processing
3638 Applies a mask to PDF content with properties. @param tag COSName representing the content type @param propertyList PDPropertyList containing properties for masking @throws IOException if an I/O error occurs during processing
3639 Draws an image on the PDF canvas. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image
3640 Draws an image on the PDF at specified coordinates and dimensions. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs
3641 Draws an image on the PDF canvas. @param image PDImageXObject to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs
3642 Draws an image on the PDF at specified position and size. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image
3643 Draws an image on the PDF canvas with a specified transformation. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if an I/O error occurs
3644 Draws an image on the PDF canvas. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if drawing fails
3645 Draws an image on the PDF canvas. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if an I/O error occurs
3646 Masks an image onto the PDF canvas. @param image PDImageXObject to be masked @param matrix transformation matrix for positioning @throws IOException if an I/O error occurs
3647 Draws a form on the PDF. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs
3648 Draws a PDF form on the current page. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs
3649 Draws a PDF form on the current page. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs during drawing
3650 Draws a form on the PDF. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs
3651 Masks a PDF document with encryption. @param document the PDDocument to encrypt
3652 Masks input value by calling helper methods. @param value the string value to be masked
3653 Processes input value through a series of methods. @param value input string to be processed @throws IOException if an I/O error occurs during processing
3654 Masks source base object based on its type. @param src source COSBase object to mask @param dstParent parent COSBase object for destination @param currentPageDict current page dictionary @return masked COSBase object
3655 Masks function for array elements. @return masked value or -1 if conditions not met
3656 Masks optional content properties from source document to target document. @param srcDoc source PDF document
3657 Processes TTF subset and updates character mappings. @param ttfSubset input TTF stream @param tag identifier for processing @param gidToCid mapping of glyph IDs to character IDs @throws IOException if an I/O error occurs
3658 Masks a value based on its type. @return masked value as a string
3659 Calls overloaded method with default null value. @param doc PDDocument to process
3660 Writes PDF document to output stream. @param output destination for PDF content @throws IOException if an I/O error occurs
3661 Writes PDF objects to output stream. @param output destination for the written data @param objectsToWrite set of COSDictionary objects to write @throws IOException if an I/O error occurs
3662 Masks PDF objects recursively. @param current the current PDF object to process
3663 Masks content from input stream. @return masked content as a String or empty if an error occurs
3664 Returns an input stream from the underlying stream. @throws IOException if an I/O error occurs
3665 Generates a list of patches for image processing. @param xform affine transformation matrix @param matrix additional transformation matrix @param controlPoints number of control points @return List of Patch objects @throws IOException if an I/O error occurs
3666 Parses XRef table and updates document trailer. @param xrefTable cross-reference table mapping @return COSDictionary containing parsed trailer data
3667 Retrieves and processes a PDF object by key. @param objKey the key of the PDF object to retrieve @param requireExistingNotCompressedObj flag to check for existing uncompressed objects @return the processed COSBase object or null if not found @throws IOException if an I/O error occurs during processing
3668 Parses PDF XRef and trailer. @param document PDF document to parse @param startXRefOffset starting offset for XRef parsing @return COSDictionary containing parsed trailer @throws IOException if parsing fails
3669 Creates a PDCIDFont instance based on the dictionary subtype. @param dictionary font dictionary containing font details @param parent parent PDType0Font object @return PDCIDFont instance or throws exception if invalid type @throws IOException if dictionary does not contain expected font type
3670 Filters annotations on a PDF page. @param annotationFilter criteria to filter annotations @return List of filtered PDAnnotation objects
3671 Retrieves a COSObjectable from a dictionary. @return COSObjectable or null if not found
3672 Retrieves an annotation mask. @return PDAnnotation object or null if not found @throws IOException if an I/O error occurs
3673 Retrieves and casts the parent annotation as PDAnnotationMarkup. @return PDAnnotationMarkup object or null if casting fails or an exception occurs
3674 Recursively clones PDF objects using a cloner. @param cloner utility for cloning PDF objects @param numberTreeAsMap map of PDF objects to clone @param objMapping mapping of original to cloned objects @throws IOException if an I/O error occurs during cloning
3675 Applies a mask to a rectangle. @param rd PDRectangle object to be masked
3676 Creates a content stream for appearance masking. @param compress indicates if compression should be applied @return PDAppearanceContentStream object @throws IOException if an I/O error occurs
3677 Creates a content stream for a page. @param document PDF document containing the page @param sourcePage page to add content to
3678 Creates a content stream from an existing page. @param document PDDocument containing the page @param sourcePage PDPage to create content stream from @param appendContent AppendMode for adding content @param compress whether to compress the content stream
3679 Sets the current page and initializes graphics state. @param page the PDF page to be processed
3680 Retrieves the mask rectangle from a PDF page. @return PDRectangle representing the mask or default if not present
3681 Retrieves the mask rectangle from a PDF page. @return PDRectangle representing the mask or default if none exists
3682 Retrieves the mask rectangle from a PDF page. @return PDRectangle representing the mask or default if none exists
3683 Adjusts page dimensions based on rotation. @param page PDF page to process @return Adjusted PDRectangle for rotated pages
3684 Draws an inline image at specified coordinates with default dimensions. @param inlineImage the image to draw @param x the x-coordinate of the top-left corner @param y the y-coordinate of the top-left corner @throws IOException if an I/O error occurs
3685 Draws an inline image at specified coordinates. @param inlineImage the image to draw @param x the x-coordinate @param y the y-coordinate
3686 Draws an inline image at specified coordinates with default dimensions. @param inlineImage the image to draw @param x the x-coordinate of the image's top-left corner @param y the y-coordinate of the image's top-left corner
3687 Draws an inline image at specified coordinates with default dimensions. @param inlineImage the image to draw @param x the X coordinate @param y the Y coordinate
3688 Constructs a FDFAnnotationCaret from an XML element. @param element XML element containing annotation data @throws IOException if an I/O error occurs during initialization
3689 Creates a circle annotation from an XML element. @param element XML element representing the annotation @throws IOException if there's an error processing the element
3690 Constructs an FDF annotation for file attachment. @param element XML element representing the annotation @throws IOException if there is an error processing the element
3691 Initializes a free text annotation from an XML element. @param element XML element containing annotation data @throws IOException if there's an error processing the element
3692 Initializes a new FDFAnnotationInk object. @param element XML element containing annotation data @throws IOException if required elements are missing or parsing fails
3693 Constructs an FDFAnnotationLine from an XML Element. @param element XML element representing annotation data @throws IOException if required attributes are missing or invalid
3694 Constructs a FDFAnnotationLink from an XML element. @param element XML element representing the annotation @throws IOException if there's an error processing the element
3695 Initializes a polygon annotation from an XML element. @param element XML element representing the annotation @throws IOException if there is an error processing the element
3696 Constructs a polyline annotation from an XML element. @param element XML element representing the annotation @throws IOException if there's an issue processing the element
3697 Constructs a sound annotation from an XML element. @param element XML element representing the annotation @throws IOException if there is an I/O error during processing
3698 Constructs a square annotation from an XML element. @param element XML element containing annotation data @throws IOException if there is an error processing the element
3699 Constructs a FDFAnnotationStamp from an XML element. @param element XML element representing the stamp annotation @throws IOException if there's an error processing the appearance or XML
3700 Constructs a FDFAnnotationText from an XML Element. @param element XML element containing annotation data @throws IOException if there is an error processing the element
3701 Initializes a text markup annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3702 Masks a page by number. @param pageNumber the page to be masked
3703 Applies mask to PDF page. @param page PDPage to be masked
3704 Creates a masked copy of the given PDPage. @param page original PDPage to be copied @return new PDPage with applied mask
3705 Masks a PDF page by applying a template. @param page PDPage to be masked @throws IOException if an I/O error occurs
3706 Creates an image object from a byte array. @param document PDF document to add the image @param byteArray image data as bytes @return PDImageXObject representing the image
3707 Creates an image object from a file. @param document PDF document to add the image to @param file image file @return PDImageXObject created from the file @throws IOException if file cannot be read
3708 Masks input value by setting it in COSName.V and calling subsequent methods. @param value the string value to be masked
3709 Masks values based on options. @param values list of strings to be masked @param options list of masking options
3710 Masks a PDF document page. @param document the PDDocument to process @param page the page number to mask (1-based index)
3711 Retrieves a page from a PDF document based on destination. @param doc the PDF document @return PDPage object or null if not found @throws IOException if an I/O error occurs
3712 Constructs a PDFPageable with default settings. @param document PDDocument to be pageable
3713 Creates a new PDFPageable with specified document and orientation. @param document PDDocument to be processed @param orientation page orientation (e.g., PORTRAIT, LANDSCAPE)
3714 Constructs a PDFPageable with specified document and page settings. @param document PDDocument to be paginated @param orientation page orientation (e.g., landscape or portrait) @param showPageBorder flag to indicate if page borders should be shown
3715 Initializes a new PDFPageable with default settings. @param document the PDDocument to be processed @param orientation page orientation (e.g., portrait, landscape) @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch for rendering
3716 Creates a map of page labels to their indices. @return Map with page labels as keys and indices as values
3717 Generates a mapping of page indices to labels. @return Array of strings where each index corresponds to a page label
3718 Masks base object with new one if condition met. @param oldBase original COSBase object @param newBase replacement COSBase object
3719 Renders a character at the specified position using the given font and matrix. @param textRenderingMatrix current text rendering matrix @param font font to render the character with @param code character code to render @param displacement vector for character positioning @throws IOException if an I/O error occurs
3720 Masks text content into lines with specified font and width. @param font PDFont to use for masking @param fontSize size of the font @param width maximum width of each line @return List of Line objects containing masked text
3721 Checks condition based on m1 and m2 methods. @return Boolean result of m2 or null if m1 is null
3722 Determines font name based on PDFontDescriptor attributes. @param fontDescriptor descriptor containing font details @return formatted font name string
3723 Creates a PDFontDescriptor from a Type1Font. @param type1 the input Type1Font @return PDFontDescriptor object configured with font details @throws IOException if an I/O error occurs
3724 Creates a PDFontDescriptor from FontMetrics. @param metrics font metrics object @return configured PDFontDescriptor instance
3725 Generates a PDFontDescriptor for a TrueTypeFont. @param ttf TrueTypeFont object @return PDFontDescriptor object @throws IOException if required font tables are missing
3726 Converts PDF color to Java Paint. @param color PDF color object @return Java Paint object or transparent if not applicable @throws IOException on I/O errors during processing
3727 Masks transparency group. @param form PDTransparencyGroup to be masked @throws IOException if an I/O error occurs
3728 Applies a mask to a transparency group. @param group the transparency group to apply the mask to
3729 Renders a character using a Type 3 font. @param textRenderingMatrix transformation matrix for text rendering @param font PDType3Font object representing the font @param code character code to render @param displacement vector for character positioning @throws IOException if an I/O error occurs during rendering
3730 Masks an annotation by modifying its appearance stream. @param annotation the PDF annotation to mask
3731 Invokes another m2 method with additional parameters. @param tilingPattern the tiling pattern to use @param color the color to apply @param colorSpace the color space for rendering @throws IOException if an I/O error occurs
3732 Masks form on the current page. @param form PDF form object to mask @throws IOException if an I/O error occurs
3733 Retrieves masked fields from a PDF dictionary. @return List of PDField objects representing the masked fields
3734 Recursively finds a PDField by name. @param name array of field names to search for @param nameIndex current index in the name array @return PDField object or null if not found
3735 Retrieves child fields of a PDF form. @return List of PDField objects representing child fields
3736 Constructs a new PDFPrintable with default page border visibility. @param document the PDDocument to print @param scaling the scaling mode for printing @param showPageBorder whether to display page borders @param dpi dots per inch for printing quality
3737 Loads PDF document from byte array. @param input byte array containing PDF data @param password document password (null if none) @return PDDocument object @throws IOException if loading fails
3738 Loads PDF document from file. @param file PDF file to load @param streamCacheCreateFunction function for creating stream cache @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs
3739 Loads a PDF document from a file with a given password. @param file PDF file to load @param password decryption password for the PDF @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs during loading
3740 Loads a PDF document with a password using a custom cache function. @param file the PDF file to load @param password the password for the PDF file @param streamCacheCreateFunction function to create a stream cache @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs
3741 Loads a PDF document from a file with security settings. @param file the PDF file to load @param password the password for opening the PDF @param keyStore the input stream of the keystore @param alias the alias for the keystore entry @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs
3742 Calls another method with extracted properties. @param visSignatureProperties object containing signature properties @throws IOException if an I/O error occurs
3743 Converts a Color object to PDColor and calls another method. @param color the input Color object
3744 Sets the stroking color for graphics. @param color PDColor object representing the new stroke color @throws IOException if an I/O error occurs during processing
3745 Sets stroking color and updates graphics state. @param color PDColor object to set as stroke color @throws IOException if an I/O error occurs
3746 Sets stroking color for PDF. @param color PDColor object to be applied @throws IOException if an I/O error occurs
3747 Sets stroking color for graphics. @param color PDColor object to set as stroke color
3748 Converts Color to PDColor and calls m4 method. @param color the input Color object
3749 Sets non-stroking color for PDF content. @param color the color to be set @throws IOException if an I/O error occurs
3750 Applies a mask color to the graphics context. @param color the color to be applied @throws IOException if an I/O error occurs
3751 Applies a mask color to the current graphics state. @param color the color to be applied as a mask @throws IOException if an I/O error occurs during processing
3752 Sets non-stroking color in PDF. @param color the color to be set @throws IOException if an I/O error occurs
3753 Creates a masked form object from a page. @param sourceDoc the source document containing the page @param page the PDF page to be processed @return PDFormXObject representing the masked form @throws IOException if an I/O error occurs
3754 Converts COSDocument to PDDocument and processes it. @param doc content stream document to be converted
3755 Writes document to output stream with compression. @param output target output stream @param compressParameters optional compression settings @throws IOException if document is closed or write fails
3756 Initializes a COSWriterCompressionPool for compressing a PDF document. @param document the PDDocument to be compressed @param parameters optional compression parameters @throws IOException if an I/O error occurs during initialization
3757 Masks COSBase content. @param base the COSBase object to mask @return masked string or empty string if unsupported type
3758 Retrieves and processes the masked value of a field. @return processed value based on the field's type or null if not applicable @throws IOException if an unknown type is encountered
3759 Retrieves masked value from field. @return String representation of the masked value or null if not applicable
3760 Retrieves masked value from dictionary. @return String representation of the masked value or null if not applicable
3761 Retrieves masked value from dictionary. @return Masked string value or null if not applicable
3762 Masks action by extracting and returning its JavaScript or stream content. @return masked content as String or null if not applicable
3763 Retrieves masked value from COSBase. @return String representation of the masked value or null if not applicable
3764 Masks a string or stream value. @param base the COSBase object to mask @return masked string representation or empty string if not applicable
3765 Constructs a LayoutPage from a PDF page. @param page PDPage object to be processed @return LayoutPage object representing the layout of the given page
3766 Reads data from an input stream and returns it as a byte array. @return byte array containing read data @throws IOException if an I/O error occurs during reading
3767 Initializes and returns a mask array from input stream. @return 2D integer array representing mask data
3768 Initializes color space settings. Handles alternate color space if enabled; otherwise, processes ICC profile. @throws IOException on input/output errors
3769 Initializes a PatchMeshesShadingContext. @param shading PDMeshBasedShadingType instance @param colorModel ColorModel for rendering @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @param controlPoints Number of control points for patch collection @throws IOException if an I/O error occurs during initialization
3770 Initializes a Type4ShadingContext. @param shading PDShadingType4 object representing the shading @param cm ColorModel for color conversion @param xform AffineTransform for device to user space transformation @param matrix Matrix defining the shading pattern @param deviceBounds Rectangle specifying the device bounds @throws IOException if an I/O error occurs during initialization
3771 Initializes context for Type 5 shading. @param shading PDShadingType5 instance @param cm ColorModel for rendering @param xform AffineTransform applied to the shading @param matrix transformation matrix @param deviceBounds device bounds for rendering @throws IOException if an I/O error occurs
3772 Parses PDF trailer and rebuilds if necessary. @return COSDictionary representing the trailer or null if failed @throws IOException on I/O errors during parsing
3773 Processes a form object, conditionally calling superclass method. @param form PDFormXObject to process @throws IOException if an I/O error occurs
3774 Handles hidden OCG count for a given tag and properties. @param tag COSName representing the tag @param properties COSDictionary containing properties
3775 Retrieves all annotations from a PDF document. @return List of PDAnnotation objects @throws IOException if an I/O error occurs
3776 Creates a PDAppearanceContentStream instance. @return PDAppearanceContentStream object @throws IOException if an I/O error occurs
3777 Creates a new optional content group (layer) and adds it to the target page. @param targetPage the page to add the layer to @param form the form object to be associated with the layer @param transform the transformation matrix for the form @param layerName the name of the new layer @return the newly created PDOptionalContentGroup @throws IOException if an I/O error occurs
3778 Processes a PDF page by applying mask operations. @param page the PDPage to be processed @throws IOException if an I/O error occurs during processing
3779 Applies content mask to a PDF page. @param contentStream the content stream to apply the mask to @param page the PDF page to process @throws IOException if an I/O error occurs
3780 Configures page format for PDF printing. @param pageIndex index of the page in the document @return PageFormat object configured for printing
3781 Creates a highlight annotation from an XML element. @param element XML element representing the annotation @throws IOException if there is an error processing the element
3782 Creates a new FDFAnnotationSquiggly. @param element PDF element to be annotated @throws IOException if an I/O error occurs
3783 Constructs a strike-out annotation from an XML element. @param element XML element representing the annotation @throws IOException if there's an issue processing the element
3784 Constructs an underline annotation from a PDF element. @param element PDF element representing the annotation @throws IOException if there is an error processing the element
3785 Masks values in a list box. @param values list of values to mask @throws IOException if an I/O error occurs
3786 Initializes a visible signature designer. @param document PDDocument to apply the signature to @param imageStream InputStream of the signature image @param page page number where the signature will be placed @throws IOException if there's an issue reading the image stream or calculating page size
3787 Initializes visible sign designer with document, image, and page. @param document PDDocument to add the signature to @param image BufferedImage representing the signature @param page page number in the document where to place the signature
3788 Masks text content based on alignment and line wrapping. @throws IOException if an I/O error occurs during processing
3789 Calculates optimal font size for text within a rectangle. @param font PDFont object representing the font @param contentRect PDRectangle defining the content area @return Adjusted font size as float @throws IOException if there is an issue with font processing
3790 Sets the encoding based on dictionary entries. Handles different types of encoding configurations.
3791 Determines font masking based on encoding and other conditions. @return Boolean indicating masking status or null if indeterminate
3792 Maps a base font to a TrueTypeFont. @param baseFont base font name @param fontDescriptor PDFontDescriptor for alternative mapping @return FontMapping with TrueTypeFont and boolean indicating if fallback was used
3793 Maps a base font to a FontBoxFont with fallbacks. @param baseFont the initial font name @param fontDescriptor PDFontDescriptor for additional info @return FontMapping containing the mapped font and a boolean indicating if a fallback was used
3794 Embeds a Type1 font in a PDF document. @param doc PDF document to embed the font into @param dict Dictionary for font properties @param pfbStream InputStream containing PFB font data @param encoding Font encoding or null for default @throws IOException if an I/O error occurs
3795 Creates a PDFont object for a given base font. @param baseFont the base font to use @throws IllegalArgumentException if no AFM is found for the font
3796 Embeds TrueType font into PDF document. @param document PDF document to embed font into @param dict dictionary for font properties @param ttf TrueTypeFont object @param embedSubset true if subset embedding is used @throws IOException if embedding fails or not permitted
3797 Renders text using the specified font and matrix. @param textRenderingMatrix transformation matrix for text rendering @param font PDFont to render the text with @param code character code to render @param displacement vector for additional positioning @throws IOException if an I/O error occurs
3798 Executes function M2 if M1 returns false.
3799 Executes m2 if m1 returns true.
3800 Creates an FDF document from form fields. @return FDFDocument containing form data
3801 Checks conditions using methods m1 and m2.m3. @return true if both conditions are satisfied, false otherwise
3802 Initializes a new PDFPrintable with specified settings. @param document PDDocument to be printed @param scaling scaling method for printing @param showPageBorder flag to indicate if page border should be shown
3803 Creates PDF document from byte array. @param input byte array containing PDF data @return PDDocument object representing the PDF @throws IOException if an I/O error occurs
3804 Loads and returns a PDF document. @param file PDF file to load @param password document password (optional) @return PDDocument object @deprecated Use alternative method instead
3805 Loads a PDF document from a file. @param file input PDF file @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs during loading
3806 Converts a Color object to PDColor and calls another method. @param color the input Color object @throws IOException if an I/O error occurs
3807 Converts a Color object to PDColor and calls another method. @param color the input color to be converted
3808 Converts a Color to PDColor and calls m4 with it. @param color the input Color object @throws IOException if an I/O error occurs
3809 Converts a Color to PDColor and calls another method. @param color the input Color object
3810 Converts a Color object to PDColor and calls another method. @param color the Color object to convert @throws IOException if an I/O error occurs
3811 Converts Color to PDColor and calls m4. @param color input Java AWT Color object
3812 Converts Color to PDColor and calls m4. @param color the source color to convert @throws IOException if an I/O error occurs
3813 Converts a Color object to PDColor and calls m4 with it. @param color the input Color object @throws IOException if an I/O error occurs
3814 Masks widget appearance with background and border. @param widget PDF annotation widget @param appearanceCharacteristics appearance characteristics dictionary @param appearanceStream appearance stream to modify @throws IOException on I/O error
3815 Sets font size and content in PDF stream. @param contents PDF appearance content stream @param zeroFontSize default font size if current is zero @throws IOException on I/O error
3816 Retrieves form object from specified page in document. @param sourceDoc the source PDF document @param pageNumber 1-based index of the page @return PDFormXObject representing the form on the page @throws IOException if an I/O error occurs
3817 Writes data to an OutputStream with default compression. @param output target OutputStream for writing
3818 Writes compressed data to a file. @param file the target file to write to @param compressParameters parameters for compression @throws IOException if an I/O error occurs
3819 Masks document by processing encryption and compression. @param document PDF document to be masked
3820 Masks a function using COSName.RC. @return masked function result as String
3821 Writes field data to a Writer. @param output Writer object to write to @throws IOException if an I/O error occurs
3822 Masks the COSName.RV value. @return masked string representation of COSName.RV
3823 Generates a layout page from the first document page. @param doc PDDocument object @return LayoutPage object @throws IOException if an I/O error occurs
3824 Constructs a PDFunctionType4 from a COSBase stream. @param functionStream the COSBase stream containing the function data @throws IOException if an I/O error occurs during parsing
3825 Computes interpolated values based on coordinates and step. @param coord array of coordinates @param step current processing step @return float array of computed values
3826 Initializes a PDICCBased object with ICC profile data. @param iccArray COSArray containing ICC profile information @throws IOException if an error occurs while loading the ICC profile
3827 Initializes Type6ShadingContext with specified parameters. @param shading PDShadingType6 object representing the shading @param colorModel ColorModel for rendering @param xform AffineTransform for coordinate conversion @param matrix transformation matrix @param deviceBounds bounding rectangle for device space
3828 Constructs a Type7ShadingContext. @param shading PDShadingType7 object @param colorModel ColorModel for the shading @param xform AffineTransform for the shading @param matrix Matrix defining the shading space @param deviceBounds Rectangle bounds of the device @throws IOException if an I/O error occurs
3829 Masks data based on internal object type. @throws IOException if an I/O error occurs @return masked data as byte array or empty array if no mask applicable
3830 Adjusts structure parents for annotations on a PDF page. @param page the PDF page to process @param structParentOffset offset to apply to structure parent indices
3831 Copies structure tree from source to destination document. @param destinationDocument target PDF document for structure copy
3832 Clones and processes annotations from a PDF page. @param imported the source PDPage object @throws IOException if an I/O error occurs
3833 Maps pages to their annotations from given fields. @param fields list of form fields @param pages document pages @return map of COSDictionary to set of COSDictionary representing page-to-annotation mapping @throws IOException if an I/O error occurs
3834 Initializes page properties and translation matrix. @param page PDPage object to process
3835 Parses FDF XML and initializes dictionary. @param fdfXML root element of FDF document
3836 Masks a field value and updates flags. @param fdfField the field to mask @throws IOException if an error occurs during processing
3837 Initializes a PDVisibleSignDesigner with a document source, image stream, and page number. @param documentSource the PDF document source @param imageStream the input stream for the signature image @param page the page number to apply the signature @throws IOException if an I/O error occurs
3838 Initializes a new instance of PDVisibleSignDesigner. @param documentSource source PDF document @param image signature image to be added @param page page number in the document where the signature will be placed @throws IOException if an I/O error occurs while processing the document
3839 Determines if the function is symbolic. @return boolean indicating symbolic status, defaulting to true if undetermined
3840 Constructs a PDType1Font from an InputStream. @param doc PDF document to associate the font with @param pfbIn InputStream containing PFB data @param encoding character encoding for the font @throws IOException if there's an issue reading the input stream
3841 Constructs a PDSimpleFont with the specified base font. @param baseFont name of the base font to be used
3842 Initializes a PDFont from a COSDictionary. @param fontDictionary dictionary containing font data
3843 Embeds a Type 2 CID font in a PDF document. @param document the PDF document to embed the font into @param dict dictionary for the font @param ttf TrueTypeFont object @param embedSubset whether to subset the font @param parent parent Type0Font object @param vertical true if vertical writing is used @throws IOException if an I/O error occurs during embedding
3844 Embeds a TrueType font into a PDF document. @param document The PDF document to embed the font into. @param dict The COSDictionary for the font. @param ttf The TrueTypeFont object. @param encoding The character encoding for the font. @throws IOException If an I/O error occurs during embedding.
3845 Checks if PDAcroForm is non-null and its m1() returns true. @param acroForm the form to check @return true if acroForm is valid and m1() is true, false otherwise
3846 Constructs a PDFPrintable with default settings. @param document PDDocument to be printed @param scaling scaling strategy for printing
3847 Deprecated: Loads PDF document from file. @param file PDF file to load @return PDDocument object @throws IOException if file cannot be read
3848 Masks annotation widget appearance. @param widget PDF annotation widget @param appearanceStream stream for appearance content @param output output stream
3849 Generates a PDF stream with a masked signature field. @param properties design properties for the signature @return InputStream containing the generated PDF
3850 Calls overloaded method with default compression. @param file file to process
3851 Compresses a file using specified parameters. @param fileName path to the file to be compressed @param compressParameters compression settings @throws IOException if an I/O error occurs
3852 Writes FDF document details to the provided Writer. @param output Writer to write FDF data @throws IOException if an I/O error occurs
3853 Creates a PDFunction based on the given COSBase. @param function COSBase representing the function @return PDFunction object @throws IOException if the function is invalid or of unknown type
3854 Generates a mask array using input values. @return float array representing the mask
3855 Creates a PDICCBased color space from an ICC array. @param iccArray COSArray containing ICC profile data @param resources PDF resources object @return PDICCBased color space instance @throws IOException if an I/O error occurs
3856 Creates a masked image from a BufferedImage. @param document PDDocument to add the image to @param image BufferedImage to be processed @return PDImageXObject with applied mask or null if processing fails
3857 Retrieves and processes the matte array from a soft mask image. @param softMask PDImageXObject representing the soft mask @return float[] processed matte array or null if invalid
3858 Draws an image at specified coordinates with default scaling. @param image the PDImageXObject to draw @param x the x-coordinate for the top-left corner of the image @param y the y-coordinate for the top-left corner of the image
3859 Converts internal data to XML document. @return XML Document representation of the data @throws IOException if an I/O error occurs
3860 Applies mask to PDF page. @param g Graphics2D object for drawing @param pageSize dimensions of the PDF page @throws IOException if an I/O error occurs
3861 Applies mask and modifies resources of a PDF page. @param page PDPage to be processed
3862 Sets up page properties and translation matrix. @param page the PDPage object to process
3863 Processes a page based on current and bookmark page numbers. @param page PDPage to be processed
3864 Constructs an FDFCatalog from an XML Element. @param element XML element containing FDF data
3865 Constructs a PDType1Font from an input stream. @param doc PDF document to associate with the font @param pfbIn input stream containing PFB font data @throws IOException if there is an error reading the input stream
3866 Constructs a PDType1Font with the specified base font. @param baseFont the base font name
3867 Constructs a PDSimpleFont from a COSDictionary. @param fontDictionary dictionary containing font information
3868 Constructs a PDType0Font from a COSDictionary. @param fontDictionary the font dictionary to use @throws IOException if there is an issue with the font data
3869 Initializes a PDType0Font with TrueType font. @param document PDF document @param ttf TrueType font @param embedSubset whether to subset the font @param closeTTF whether to close the TTF after processing @param vertical whether the font is used for vertical text @throws IOException if an I/O error occurs
3870 Constructs a PDTrueTypeFont from a TrueType font. @param document PDF document @param ttf TrueType font @param encoding character encoding @param closeTTF flag to close the TTF after embedding @throws IOException if an I/O error occurs
3871 Returns an iterator over PDFields in the acroForm. @return Iterator<PDField> containing fields from the acroForm
3872 Initializes a new PDFPrintable with default scaling. @param document the PDDocument to be printed
3873 Initializes a PDVisibleSignDesigner with an image. @param filename path to the PDF file @param imageStream input stream for the signature image @param page page number in the PDF (0-indexed) @throws IOException if there's an issue reading the file or stream
3874 Initializes a visible signature designer. @param filename path to the PDF file @param image image to be used as the signature @param page page number in the document (0-indexed) @throws IOException if an I/O error occurs
3875 Creates and processes a PDF template. @throws IOException if an I/O error occurs
3876 Calls m1 with a File object created from the given file name. @param fileName path to the file @throws IOException if an I/O error occurs
3877 Writes FDF data to an output stream. @param output Writer to write FDF data @throws IOException if I/O error occurs
3878 Applies a PDF Type 3 function to an input value. @param input array containing the input value @return transformed value as an array @throws IOException if partition not found or other I/O error occurs
3879 Initializes a PDDeviceN object with given device N array and resources. @param deviceN COSArray containing device N settings @param resources PDResources for color space creation @throws IOException if an error occurs during initialization
3880 Returns or creates a mask function. @return PDFunction representing the mask @throws IOException if an I/O error occurs
3881 Initializes a PDSeparation with given separation array and resources. @param separation COSArray representing the separation @param resources PDResources containing color space information @throws IOException if tint transform has invalid output parameters
3882 Returns the mask function. @return PDFunction object or null if not found
3883 Retrieves and initializes PDF functions. @return Array of PDFunction objects @throws IOException if the function is not a dictionary or array
3884 Retrieves mask function. @return PDFunction or null if not available
3885 Initializes a PDIndexed object. @param indexedArray COSArray containing indexed color data @param resources PDF resources for color space creation @throws IOException if an I/O error occurs during initialization
3886 Applies a mask to input values. @param input array of float values to process @return masked and transformed float array
3887 Creates a masked image from PNG state. @param document PDF document to add the image to @param state PNG conversion state containing image data and metadata @return PDImageXObject with applied mask or null on error
3888 Creates a PDImageXObject from a file. @param file the image file @param doc the PDDocument to add the image to @return PDImageXObject created from the file @throws IOException if an I/O error occurs
3889 Creates a PDImageXObject from a file. @param file the image file to process @param doc the PDDocument to add the image to @return PDImageXObject representing the image @throws IOException if an I/O error occurs or unsupported image type
3890 Generates a masked BufferedImage for the given region and subsampling. @param region the area to process, null processes the entire image @param subsampling factor to reduce image resolution @return BufferedImage with applied mask or original if no mask is present @throws IOException if an I/O error occurs during processing
3891 Draws an image at specified coordinates with additional parameters. @param image PDImageXObject to be drawn @param x x-coordinate for the image position @param y y-coordinate for the image position
3892 Draws an image at specified coordinates with default scaling. @param image the PDImageXObject to draw @param x the x-coordinate of the top-left corner @param y the y-coordinate of the top-left corner @throws IOException if an I/O error occurs
3893 Draws an image at specified coordinates with default scaling. @param image PDImageXObject to be drawn @param x X coordinate for the image's top-left corner @param y Y coordinate for the image's top-left corner @throws IOException if an I/O error occurs
3894 Draws an image at specified coordinates with default dimensions. @param image PDImageXObject to be drawn @param x x-coordinate position @param y y-coordinate position
3895 Renders a page as an image. @param pageIndex index of the page to render @param scale scaling factor for rendering @param imageType desired image type @param destination where to draw the image @return rendered BufferedImage @throws IOException if rendering fails or exceeds max size
3896 Renders a PDF page to a graphics context. @param pageIndex index of the page to render @param graphics Graphics2D object for rendering @param scaleX horizontal scaling factor @param scaleY vertical scaling factor @param destination where to send the rendered content @throws IOException if an I/O error occurs
3897 Masks pages in a document within specified range. Throws IOException on I/O errors.
3898 Processes PDF pages and applies bookmarks. @param pages PDPageTree object containing all pages @throws IOException if an I/O error occurs
3899 Constructs an FDFDocument from a given XML Document. @param doc XML document representing the FDF content @throws IOException if the root element is not 'xfdf'
3900 Returns the default Helvetica font. @return PDType1Font object representing Helvetica
3901 Retrieves or creates a FontBoxFont for the given base name. @param baseName font's base name @return FontBoxFont instance
3902 Initializes a PDTrueTypeFont from a font dictionary. @param fontDictionary the COSDictionary containing font information @throws IOException if there's an issue reading or parsing the font data
3903 Initializes a PDType1CFont from a COSDictionary. @param fontDictionary the font dictionary containing font data @throws IOException if an error occurs during font parsing or reading
3904 Constructs a PDType1Font from a COSDictionary. @param fontDictionary the dictionary containing font data @throws IOException if there's an issue reading the font data
3905 Initializes a PDType3Font with given dictionary and resource cache. @param fontDictionary the COS dictionary for the font @param resourceCache the resource cache for font resources @throws IOException if an I/O error occurs during initialization
3906 Creates a PDType0Font from a TrueType font. @param doc PDDocument instance @param randomAccessRead source of the font data @param embedSubset whether to subset the font @param vertical whether the font is used vertically @return PDType0Font object @throws IOException if an I/O error occurs
3907 Creates a PDType0Font from a TrueTypeFont. @param doc PDDocument to add the font to @param ttf TrueTypeFont object @param embedSubset true if subset embedding is enabled @return PDType0Font created from the given parameters
3908 Creates a PDType0Font from a TrueTypeFont. @param doc PDF document to add the font to @param ttf TrueTypeFont object @param embedSubset whether to subset the embedded font @return PDType0Font object @throws IOException if an I/O error occurs
3909 Creates a PDF true type font. @param doc PDF document to add the font to @param ttf TrueTypeFont object @param encoding character encoding @return PDTrueTypeFont instance @throws IOException if there's an error creating the font
3910 Creates a PDTrueTypeFont from document and font data. @param doc PDDocument to add the font to @param randomAccessRead source of font data @param encoding character encoding for the font @return PDTrueTypeFont instance
3911 Retrieves all signature fields from the PDF document. @return List of PDSignatureField objects
3912 Masks terminal fields in a document. @throws IOException if an I/O error occurs
3913 Returns an iterator over fields in a PDF document. @return Iterator of PDField objects
3914 Initializes or clears a cache of fields based on the cache parameter. @param cache true to initialize the cache, false to clear it
3915 Retrieves a PDField by its fully qualified name. @param fullyQualifiedName the unique identifier of the field @return PDField object or null if not found
3916 Applies overlays to specific PDF pages. @param specificPageOverlayMap map of page numbers and overlay paths @return modified PDDocument with overlays applied
3917 Applies overlays to a PDF document. @param specificPageOverlayDocumentMap map of page numbers and overlay documents @return modified input PDF document
3918 Writes XML header and XFDF content to the provided Writer. @param output Writer object for outputting XML data @throws IOException if an I/O error occurs during writing
3919 Creates a PDColorSpace from a given COSBase. @param colorSpace the base colorspace object @param resources document resources @param wasDefault flag indicating if default colorspace is used @return PDColorSpace instance or throws IOException for invalid input
3920 Applies mask functions to input values. @param input array of input float values @return array of masked float values, clamped between 0 and 1
3921 Constructs a PDIndexed from a COSArray. @param indexedArray the COSArray representing the indexed data @throws IOException if an error occurs during processing
3922 Creates a masked image from an image file. @param imagePath path to the image file @param doc PDF document to add the image to @return PDImageXObject with mask applied @throws IOException if file cannot be read or processed
3923 Calls overloaded method with default parameters. @return BufferedImage from overloaded method @throws IOException if an I/O error occurs
3924 Retrieves an image from a specified page with given scale and type. @param pageIndex zero-based index of the page @param scale factor for image resizing @param imageType format of the output image @return BufferedImage object @throws IOException if an I/O error occurs
3925 Calls overloaded method with default destination. @param pageIndex page index to render @param graphics Graphics2D object for rendering @param scaleX horizontal scaling factor @param scaleY vertical scaling factor @throws IOException if an I/O error occurs
3926 Processes a PDF document, applying mask operations. @param document the source PDDocument to process @return List of processed PDDocuments @throws IOException if an I/O error occurs during processing
3927 Masks document content and writes to output. @param doc PDDocument to process @param outputStream Writer for output @throws IOException if I/O operations fail
3928 Creates an FDFDocument from an InputStream. @param input stream containing FDF data @return FDFDocument object created from the input @throws IOException if there is an error reading the input stream
3929 Processes a string to render text with specified font and styles. @param string input byte array representing the text to be processed
3930 Generates a mask for a specified glyph in a given font. @param baseName the base font name @param glyphName the glyph name to process @return a GeneralPath representing the glyph's mask or an empty path if not found @throws IOException if an I/O error occurs during processing
3931 Constructs a PDMMType1Font from a COSDictionary. @param fontDictionary dictionary containing font data @throws IOException if an I/O error occurs during initialization
3932 Constructs a PDType3Font from a COSDictionary. @param fontDictionary dictionary containing font data @throws IOException if an I/O error occurs
3933 Loads font from PDF document. @param doc PDF document @param file font file @return PDType0Font object
3934 Creates a PDType0Font from an input stream. @param doc PDF document to add the font to @param input stream containing font data @param embedSubset flag to subset the font @return PDType0Font object @throws IOException if an I/O error occurs
3935 Creates a font from a PDF document and file. @param doc PDDocument instance @param file font file @return PDType0Font object @throws IOException if an I/O error occurs
3936 Creates a PDType0Font from an input stream. @param doc PDDocument instance @param input font data as InputStream @return PDType0Font object @throws IOException if an I/O error occurs
3937 Creates a PDType0Font from an input stream. @param doc PDDocument to add the font to @param input InputStream containing font data @param embedSubset boolean indicating if the font should be subset embedded @return PDType0Font object created from the input stream @throws IOException if there's an issue reading the input stream
3938 Creates a true type font from a document and file. @param doc PDF document @param file font file @param encoding character encoding @return PDTrueTypeFont object @throws IOException if file access fails
3939 Creates a true type font from an input stream. @param doc PDDocument to add the font to @param input InputStream containing font data @param encoding character encoding for the font @return PDTrueTypeFont object created from the input stream @throws IOException if there's an error reading the input stream
3940 Retrieves and masks PDF signature fields. @return List of PDSignature objects representing masked signatures
3941 Adds a signature to a PDF document. @param sigObject the signature object to be added @param signatureInterface interface for handling signature operations @param options configuration options for the signature @throws IOException if an I/O error occurs during processing
3942 Populates PDF form fields from FDF document. @param fdf FDFDocument containing field data
3943 Calls m2 and ensures output is closed. @param output Writer to be processed
3944 Converts single float to array and calls overloaded method. @param inputValue single float value @return result from overloaded method @throws IOException if an I/O error occurs
3945 Applies mask to float array. @param values input float array @return masked integer value
3946 Generates mask paint. @return Paint object representing mask @throws IOException if I/O error occurs during processing
3947 Applies transparency mask to form. @param form PDTransparencyGroup object @param graphics Graphics2D context for drawing @throws IOException if image processing fails
3948 Retrieves image at specified page index and scale. @param pageIndex zero-based index of the page @param scale factor for image scaling @return BufferedImage object @throws IOException if an I/O error occurs
3949 Retrieves image mask for a given page. @param pageIndex zero-based index of the page @param dpi dots per inch for rendering @return BufferedImage containing the mask or null if not found @throws IOException if an I/O error occurs
3950 Generates a masked image. @param pageIndex page index to process @param dpi dots per inch for the image @param imageType type of image to generate @return BufferedImage with applied mask @throws IOException if an I/O error occurs
3951 Calls overloaded method with equal x and y scales. @param pageIndex page index to process @param graphics 2D graphics context for rendering @param scale scaling factor for both axes @throws IOException if an I/O error occurs
3952 Splits a PDF document and returns the first page of the split. @return PDDocument containing the first page or an empty document if invalid range @throws IOException if there is an error reading the source document
3953 Masks content in a PDF document. @param doc PDDocument to process @return Masked content as a string
3954 Loads an FDF document from a file. @param filename path to the FDF file @return FDFDocument object @throws IOException if file cannot be read
3955 Loads an FDF document from a file. @param file the input file containing the FDF data @return the loaded FDFDocument object @throws IOException if an I/O error occurs while reading the file
3956 Masks a byte array using a helper function. @param string input byte array to be masked @throws IOException if an I/O error occurs during masking
3957 Processes text rendering operations. @param array COSArray containing text and positioning data
3958 Creates a PDFont from a COSDictionary. @param dictionary font dictionary @param resourceCache resource cache for Type3 fonts @return PDFont object or default Type1Font if invalid subtype @throws IOException on unsupported font types
3959 Creates a PDType0Font from document and input stream. @param doc PDDocument to add font to @param input InputStream containing font data @return PDType0Font object @throws IOException if an I/O error occurs
3960 Retrieves the last PDSignature from a list. @return Last PDSignature object or null if list is empty
3961 Prepares external signing support for a PDF document. @param output stream to write the signed PDF @return ExternalSigningSupport object for further signing steps @throws IOException if I/O error occurs or document is not properly initialized
3962 Masks fields in a PDF document. @param fields list of PDField objects to mask @param refreshAppearances flag to refresh field appearances @throws IOException if an I/O error occurs
3963 Calls overloaded method with default appearance. @param sigObject PDSignature object to be processed @param options SignatureOptions for the operation @throws IOException if an I/O error occurs
3964 Initializes and processes a digital signature with default options. @param sigObject PDSignature object representing the signature @param signatureInterface interface for handling signature operations
3965 Writes data to a file using UTF-8 encoding. @param fileName the File object representing the target file
3966 Applies mask to path based on font and displacement. @param path shape to apply mask @param font font used for masking @param code character code @param displacement vector for displacement @param at affine transform for scaling @throws IOException if an I/O error occurs
3967 Creates a masked image from PNG data. @param doc PDF document to add the image to @param state conversion state containing PNG chunks and parameters @return PDImageXObject with mask or null if creation fails
3968 Retrieves image at specified page index. @param pageIndex zero-based index of the page @return BufferedImage object representing the page @throws IOException if an I/O error occurs
3969 Calls overloaded method with default zoom level. @param pageIndex index of the page to render @param graphics Graphics2D context for rendering
3970 Retrieves a PDFont by name, caching results for efficiency. @param name the COSName of the font @return PDFont object or null if not found
3971 Retrieves a font from a COSDictionary. @param dictionary the COSDictionary containing the font data @return the retrieved PDFont object @throws IOException if an I/O error occurs
3972 Processes form fields; logs if flattening XFA is unsupported. @throws IOException if an I/O error occurs
3973 Calls overloaded method with default options. @param sigObject PDSignature object to process
3974 Loads data from a file. @param fileName path to the file @throws IOException if file operations fail
3975 Masks shaded triangles onto an array within device bounds. @param triangleList list of ShadedTriangle objects to mask @param array target array for masking @param deviceBounds bounding rectangle for device area @throws IOException if an I/O error occurs during processing
3976 Sets the winding rule and updates the line path. @param windingRule rule for determining the interior of the path
3977 Converts a PNG image to a PDImageXObject. @param doc PDF document to add the image @param state PNG conversion state containing IHDR data @return PDImageXObject or null if unsupported format
3978 Sets the font for text operations. @param operands list of operands containing font name and size @throws IOException if required operands are missing or font not found
3979 Masks an appearance stream with a font resource. @param appearanceStream the stream to mask @throws IOException if an I/O error occurs
3980 Retrieves a PDFont from font settings. @return PDFont object or null if not found
3981 Merges source PDF into destination PDF. @param destination target PDF document @param source source PDF document to merge @throws IOException if an I/O error occurs during merging
3982 Creates a masked image from byte data. @param doc PDF document to add the image to @param imageData raw image bytes @return PDImageXObject with mask or null if creation fails
3983 Handles PDF operators for setting font, color, and size. @param operator the PDF operator to be processed @param operands list of operands associated with the operator @throws IOException if an I/O error occurs during processing
3984 Masks annotation widget in PDF. @param widget annotation widget to mask @param appearanceStream stream for appearance @throws IOException if I/O error occurs
3985 Applies graphics state attributes from a dictionary. @param gs Graphics state to update @throws IOException on I/O error
3986 Merges multiple documents into a single PDF. @param streamCacheCreateFunction function to create cache for streams @param compressParameters parameters for compression @throws IOException if an I/O error occurs
3987 Creates a PDImageXObject from a byte array. @param document PDF document to add the image to @param byteArray image data as bytes @param name image file name for error messages @param customFactory optional custom factory for specific formats @return PDImageXObject or throws IllegalArgumentException if unsupported @throws IOException on I/O errors during processing
3988 Parses PDF content and processes operators. @param content byte array containing PDF data @throws IOException if parsing fails
3989 Handles document merging based on mode. @param streamCacheCreateFunction function to create stream cache @param compressParameters parameters for compression @throws IOException if an I/O error occurs
3990 Creates an image object from byte array. @param document PDF document to add the image @param byteArray image data as bytes @param name image name @return PDImageXObject or throws IOException if fails
3991 Initializes default appearance and resources. @param defaultAppearance appearance string configuration @param defaultResources associated resources @throws IOException if an I/O error occurs
3992 Initializes stream cache with default compression. @param streamCacheCreateFunction function to create stream cache @throws IOException if an I/O error occurs
3993 Retrieves default appearance string. @return PDDefaultAppearanceString object or throws IOException
3994 Masks field value and updates widget appearances. @param apValue field value to mask
3995 Initializes an AppearanceGeneratorHelper with a PDVariableText field. Validates and sets up resources, then retrieves the default appearance string. @param field the PDF form field to process @throws IOException if there is an issue processing the field's appearance
