1 Constructs an extended graphics state from a COSDictionary. @param dictionary the source of graphics state parameters
2 Constructor to initialize PlainText with a string value, splitting it into paragraphs. @param textValue The input string containing multiple paragraphs separated by line breaks.
3 Constructs a new PDActionImportData object from a COSDictionary. @param a the COSDictionary containing data for initialization
4 Retrieves a COSObject by its key. @param key the unique identifier for the COSObject @return COSObject if found, otherwise null
5 Constructs a PDActionURI instance from COSDictionary. @param a COSDictionary containing URI action data
6 Constructs a PDActionSubmitForm with the given COSDictionary. @param a the COSDictionary containing form submission data
7 Constructs a PDActionSound object from a COSDictionary. @param a COSDictionary containing sound action data
8 Initializes a new instance of PDActionHide with a specified COSDictionary. @param a the COSDictionary used to initialize the object
9 Constructs a PDActionMovie object from a COSDictionary. @param a a COSDictionary containing the data to construct the object
10 Initializes a PDActionLaunch object with a COSDictionary. @param a COSDictionary containing action data
11 Constructs a PDActionResetForm object from a COSDictionary. @param a The COSDictionary containing the form reset action data
12 Initializes a remote go to action with a given dictionary. @param a the COSDictionary containing action information
13 Constructs a PDActionGoTo object from a COSDictionary. @param a the COSDictionary containing action data
14 Constructs a PDActionEmbeddedGoTo object from a COSDictionary. @param a COSDictionary containing the embedded go-to action data
15 Constructs a named action from a COSDictionary. @param a COSDictionary containing the action data
16 Initializes a new PDActionThread with a COSDictionary. @param a The COSDictionary used to initialize the thread
17 Constructs a PDActionJavaScript object from a COSDictionary. @param a A COSDictionary containing JavaScript action details
18 Creates an input stream for raw data. Throws exceptions if not in a readable state. @return InputStream object for reading the raw data @throws IOException if data has not been written to the stream before this call @throws IllegalStateException if there is an open writer to the stream
19 Finds an ImageReader for the specified format. Throws exception if not found. @param formatName name of the image format @param errorCause cause of the potential failure @return ImageReader object or throws MissingImageReaderException if not found
20 Finds a raster image reader for the given format. @param formatName name of the image format @param errorCause description of the error cause @return ImageReader that can read raster images or throws exception if not found
21 Retrieves an Operator object based on the input string. @param operator String representation of the operator @return Operator object corresponding to the input string, or null if not found
22 Returns a string representation of the COSArrayList object.
23 Checks if edge AB is a line in the quadrilateral defined by points A, B, C, D. @param ctl array of 4 Point2D objects representing vertices of a quadrilateral @return true if edge AB is a line, false otherwise
24 Returns the x-coordinate of the lower left corner of a rectangle. @return The floating point value representing the x-coordinate
25 Returns the lower left y-coordinate from a rectangular array. @return The lower left y-coordinate as a float value
26 Returns the x-coordinate of the upper right corner of a rectangle. @return The x-coordinate as a float value
27 Returns the y-coordinate of the upper right corner of a rectangle. @return Float value representing the y-coordinate
28 Retrieves font size from a specific setting in the font object. @return float value representing the font size
29 Retrieves the first floating point value from a collection of values. @return The first value in the collection as a float, or 0 if not found or not a number
30 Returns the float value at index 1 from a list of COSNumbers. @return Float value at index 1 or NaN if not found or not a number
31 Retrieves and returns the float value at index 2 from values collection.
32 Returns the float value of the first element in values collection. @return Float value of the first COSNumber object in values collection
33 Returns the float value at index 1 from values collection. @return Float value at index 1 in values or throws ClassCastException if not a COSNumber
34 Retrieves the current stroking color space from the graphics state context. @return The PDColorSpace object representing the stroking color space
35 Sets the stroking color in the graphics state context. @param color PDColor object to be used as the new stroking color
36 Overrides to retrieve current stroking color from graphics state context. @return Current stroking color in use by the graphics state context
37 Returns the encoding instance based on the provided COSName. @param name a constant representing an encoding type @return Encoding object or null if the encoding is not supported
38 Creates a soft mask from the given COSBase and ResourceCache. @param dictionary COSBase object that contains soft mask data @param resourceCache cache for storing resources @return PDSoftMask object or null if creation fails
39 Returns the index of the first selected widget or -1 if none are selected.
40 Parses PNG chunks from byte data into a state object. @param imageData the raw PNG image data as bytes @return PNGConverterState if parsing is successful, otherwise null
41 Adds a new source file to the system. @param source Path of the source file @throws FileNotFoundException if the file does not exist
42 Parses and sets the trailer object in PDF, handling common deviations from the standard. @return true if successful, false otherwise @throws IOException for input/output errors
43 Fetches and returns the Z value from a collection of values as a float.
44 Retrieves an object from the pool using its unique key. @param key Unique identifier for the object in the pool @return The COSBase object corresponding to the key, or null if not found
45 Fetches and returns the text line matrix from the current graphics state.
46 Sets the text line matrix for graphics state. @param value Matrix object to be used as the new text line matrix
47 Returns the text matrix of the current graphics state. @return The text matrix as a Matrix object.
48 Transforms the input width based on the current transformation matrix. @param width The original width to be transformed @return The transformed width as a float value
49 Overrides to fetch and return the current non-stroking color from the graphics state context.
50 Sets the non-stroking color in the graphics state context. @param color PDColor object to be set as the new non-stroking color
51 Fetches and returns the non-stroking color space from the current graphics state.
52 Executes operations from the instruction set in the given context. @param context execution environment with stack and operators
53 Retrieves an integer value from a collection at a given index. @param index position in the collection @param defaultValue fallback value if index is out of bounds or not an integer @return integer value at index, or defaultValue if conditions are not met
54 Fetches a specific revision number by its index. @param index position of the desired revision number @return the revision number at the specified index
55 Writes a boolean value to an OutputStream in PDF format. @param output the target stream for writing @param cosBoolean the COSBoolean object containing the boolean value to write
56 Creates and returns an exact copy of this Matrix object. @return A deep copy of the current Matrix instance
57 Initializes PDF Rectlinear Measure Dictionary from a COS Dictionary. @param dictionary input COS Dictionary containing measure data
58 Constructs a non-terminal field in an AcroForm. @param acroForm the parent AcroForm @param field the COS dictionary representing this field @param parent the parent non-terminal field (if any)
59 Constructs a non-terminal field in an AcroForm. @param acroForm the containing AcroForm object @param field the COSDictionary representing this field @param parent the parent of this field in the form hierarchy
60 Notifies change if entry has been modified. @param oldEntry previous state of the object @param newEntry current state of the object
61 Returns the number of elements in the map. @return The number of elements (key-value pairs) in the map
62 Writes ASCII encoded bytes of given text to an output stream. @param text the string to be written @throws IOException if an I/O error occurs
63 Returns a translation matrix instance based on given coordinates. @param x translation value along the X-axis @param y translation value along the Y-axis @return Matrix object representing the translation transformation
64 Returns the number of objects in the collection. @return The count of objects in the collection
65 Fetches an object from a list by its index. @param index position of the object in the list @return Object at the specified index, or null if not found
66 Returns a field tree representation of the current document. @return PDFieldTree object representing the document's fields
67 Fetches the name at a given index, or returns defaultValue if not found or invalid. @param index position to fetch from @param defaultValue fallback value if index is out of bounds or object is not COSName @return String with the name or defaultValue
68 Returns the index of a given object in the collection, or -1 if not found. @param object The COSBase object to search for @return Index of object in collection, or -1 if not found
69 Fetches and returns a list of filters from the COSBase object. @return List of Filter objects or an empty list if no valid filters found @throws IOException if the COSArray contains invalid types for filters
70 Returns a scaled instance of Matrix with given scale factors. @param x Horizontal scaling factor @param y Vertical scaling factor @return A new Matrix object scaled by the provided factors
71 Retrieves a list of filter names from the stream's filters. @return List of COSNames representing filter types, or an empty list if none.
72 Retrieves file filters from the stream as a list of strings. @return List containing filter names or empty if none found
73 Scales the vector by given factor. @param sxy scaling factor @return a new scaled Vector object
74 Transforms a 2D vector using a given matrix transformation. @param vector the input Vector to be transformed @return a new Vector after applying transformation
75 Returns a rotation matrix instance for given angle and translation. @param theta rotation angle in radians @param tx x-axis translation @param ty y-axis translation @return Matrix object representing the rotation transformation
76 Evaluates an input array using exponential interpolation and clips the result to a range. @param input Array of floats, where input[0] is used for exponentiation. @return Float array resulting from the evaluation and clipping process. @throws IOException if there's an issue with input/output operations.
77 Sets the text matrix for the graphics state. @param value the new Matrix to be used as the text matrix
78 Compares this object with another XReferenceEntry based on their referenced keys. @param xReferenceEntry the entry to compare with @return negative, zero or positive value as this is less than, equal to or greater than xReferenceEntry
79 Returns the number of recipients in a dictionary object.
80 Initializes Type7ShadingPaint with PDShadingType7 and transformation matrix. @param shading - the PDShadingType7 object to be used for painting @param matrix - transformation matrix to apply during painting operations
81 Scales the coordinates of a single object by given factors. @param sx scaling factor for x-coordinates @param sy scaling factor for y-coordinates
82 Multiplies this matrix by another matrix and returns the result. @param other The matrix to multiply with. @return A new matrix resulting from the multiplication.
83 Creates a SecurityHandler for the given ProtectionPolicy. @param policy The protection policy to create a handler for @return A SecurityHandler or null if no matching handler is found
84 Creates a SecurityHandler for the given filter name. @param name the name of the security filter @return SecurityHandler object or null if not found for the given name
85 Sets the stroking color on demand with given PDColor object, returns true if successful. @param color PDColor object to be used for setting stroke color @return boolean indicating whether the operation was successful or not
86 Sets non-stroking color based on given PDColor object, if valid components exist. @param color the PDColor object to set as non-stroking color @return true if color was successfully set, false otherwise
87 Translates the coordinates of a 3D point by (tx, ty). @param tx translation along x-axis @param ty translation along y-axis
88 Fetches a glyph name for the given string in a specific font, handling alternatives and Unicode. @param name the input string to find a glyph name for @return a glyph name if found, otherwise ".notdef" @throws IOException if an I/O error occurs while fetching glyph data
89 Initializes color space for CMYK conversion, ensuring thread safety and handling potential I/O errors. @throws IOException if default CMYK color profile cannot be loaded
90 Applies a mask to an image and returns the modified image. @param image The original BufferedImage @param mask The BufferedImage mask to apply @param interpolateMask If true, interpolates the mask during scaling @param isSoft If false, performs a fast bit combination for alpha composition @param matte Float array for additional matte calculations (optional) @return The modified BufferedImage with the applied mask
91 Constructs a cubic Bezier curve with given control points and level of detail. @param ctrlPnts array of 4 Point2D objects representing the control points @param l level of detail for generating curve points
92 Checks if a point lies within or on the edges of a triangle. @param p Point2D object representing the point to be checked @return true if the point is inside or on the triangle, false otherwise
93 Calculates and returns the color components for a given point.
94 Intersects the current clipping path with a new path, updating it in-place. @param path The new GeneralPath to intersect with the current clipping path.
95 Draws a tiling pattern using provided graphics, color space, and matrix. @param g Graphics2D object for drawing @param pattern PDTilingPattern to be drawn @param colorSpace PDColorSpace for the pattern @param color PDColor of the pattern @param patternMatrix Matrix transforming the pattern
96 Intersects the current clipping path with the provided area. @param area The area to intersect with the clipping path.
97 Transfers the current clipping path to a new Graphics2D object, handling edge cases for an empty path. @param graphics The Graphics2D object to which the clipping path is transferred.
98 Retrieves the name of a glyph in a specific font format. @param name The name of the glyph @return The name if found, otherwise a default value (".notdef") @throws IOException if an I/O error occurs
99 Inserts a diacritic at specified position in Unicode text, adjusting width array accordingly.
100 Converts a character code to its corresponding GID in the font's encoding. @param code the character code to convert @return the GID of the character or 0 if not found @throws IOException if there is an error reading the font data
101 Constructs a GlyphList from an InputStream and initializes capacity. @param input the source of glyph data @param numberOfEntries expected number of entries to allocate memory for @throws IOException if there is an error reading from the input stream
102 Constructs a Line object with two points and corresponding colors. @param p0 first Point object @param p1 second Point object @param c0 color of the first point as float array @param c1 color of the second point as float array
103 Normalizes a word by handling specific Unicode characters, applying NFKC normalization and reversing certain sequences for Hebrew and Arabic letters. @param word the input string to be normalized @return the normalized string
104 Initializes SoftMask with given parameters for image processing. @param paint the Paint object @param mask the BufferedImage mask @param bboxDevice the Rectangle2D bounding box in device space @param backdropColor the PDColor for the backdrop; if null, default is used @param transferFunction the PDFunction for transferring color values (null if identity)
105 Removes backdrop from a BufferedImage by applying alpha blending. @param backdrop the image to remove @param offsetX horizontal offset for removal @param offsetY vertical offset for removal
106 Constructs a GlyphList by copying from another and loading additional data from InputStream. @param glyphList the source GlyphList to clone @param input the InputStream to load additional data from @throws IOException if an I/O error occurs while reading from the InputStream
107 Concatenates input Matrix with instance's 'single' array, updates 'single'. @param matrix Input Matrix to be concatenated
108 Parses an InputStream into a Document. No validation is performed. @param is the InputStream to be parsed @return the resulting Document object @throws IOException if there's an error reading from the stream
109 Writes a COSInteger to an OutputStream and appends a space character. @param output the stream where data will be written @param cosInteger the integer object to write to the stream @throws IOException if writing to the stream fails
110 Returns the X scaling factor of the text matrix. @return The current X scaling factor as a float value
111 Returns the Y scaling factor of the text matrix.
112 Creates a raw output stream for writing data. Throws exceptions if already closed or writing. @return OutputStream object to write data @throws IOException if an I/O error occurs
113 Initializes a COSWriter with an OutputStream and CompressParameters. @param outputStream the stream to write data to @param compressParameters parameters for compression operations
114 Initializes COSWriter with output and input data for incremental updates. @param outputStream the stream to write updated data to @param inputData the existing data to be updated
115 Converts byte array to string using Unicode if BOM is present; otherwise uses PDFDocEncoding. @return String representation of the byte array
116 Constructs a COSString based on input text and encoding preference. @param text the string to encode @param forceHex if true, forces hexadecimal encoding; otherwise uses PDFDocEncoding if possible
117 Retrieves a cached or creates a new COSInteger for the given value. @param val long value to retrieve or create COSInteger for @return existing or newly created COSInteger object
118 Writes the given FDFDocument to an output stream. May perform incremental update.
119 Checks if current font is a Standard 14 PDF font based on its name and embedding status. @return true if it's a Standard 14 font, false otherwise
120 Initializes LayerUtility with a PDDocument and creates a PDFCloneUtility instance. @param targetDoc the document to be used for layer utility operations
121 Retrieves recipient string at a given index from the recipients array in the dictionary. @param i index of the recipient string to retrieve @return COSString object at the specified index or null if not found
122 Retrieves the direction from a COS object, defaults to 0 if not found. @return COSBase object representing the direction or default value (COSInteger.ZERO) if not found
123 Retrieves and sorts unique metadata keys. @return Set of sorted metadata keys as Strings
124 Retrieves a list of attribute names excluding the 'O' attribute. @return List containing names of attributes as Strings
125 Adds specific trailer information to the stream from a dictionary. @param trailerDict dictionary containing trailer data
126 Constructs a new COSDictionary by copying another's elements. @param dict the source dictionary to be copied
127 Checks if the COSDictionary contains information metadata keys. @param dictionary a COSDictionary object to be checked @return true if it contains info metadata, false otherwise
128 Checks if the dictionary contains width information. @return true if it has width or missing width key, false otherwise
129 Checks if the dictionary contains the key for missing width. @return true if missing width is present, false otherwise
130 Checks if dictionary contains XFA (Extensible Forms Architecture) key. @return true if the key is present, false otherwise
131 Returns a string representation of this COSFloat object. @return formatted string representing this COSFloat instance
132 Writes formatted string data into a PDF file using the provided OutputStream. @param output The OutputStream to write the PDF data to @throws IOException if an I/O error occurs while writing the data
133 Writes a COSArray to an OutputStream using specified formatting.
134 Creates and returns a new COSIncrement object with update information. @return Newly created COSIncrement object
135 Initializes a new instance of DefaultResourceCache with default settings.
136 Reads up to 'len' bytes of data into an array starting at 'offset'. @param data the buffer into which the data is read @param offset the start position in the destination array @param len maximum number of bytes read @return total number of bytes read, -1 if end of stream has been reached @throws IOException if an I/O error occurs
137 Reads and returns a map of object IDs to their respective numbers. Closes the source and clears the document after operation. @return Map with Long keys (object IDs) and Integer values (numbers), or null if an error occurs @throws IOException if there is an issue reading from the source
138 Parses and returns all objects from the data source. @return Map of COSObjectKey to corresponding COSBase object @throws IOException if an I/O error occurs while reading from the source
139 Constructs a PDPageFitWidthDestination object from a given COSArray. @param arr The COSArray containing the destination data.
140 Creates a PDPageFitRectangleDestination from a COSArray. @param arr an array containing destination parameters
141 Calculates the final key using objectNumber and genNumber as inputs. @param objectNumber unique identifier for an object @param genNumber generation number of the object @return byte array representing the calculated final key
142 Initializes a PDPageFitHeightDestination with a given COSArray. @param arr a COSArray containing destination data
143 Constructs a PDPageFitDestination from a COSArray. @param arr COSArray containing destination information
144 Initializes a content stream for a PDF appearance with an output stream and resources. @param appearance the PDF appearance object to create the stream for @param outputStream the stream where the content will be written
145 Constructs COSFloat from String, handles various invalid formats. @param aFloat the string representation of a float @throws IOException if the string cannot be converted to a float
146 Initializes a new content stream for a page in a PDF document. @param doc the target PDF document @param appearance the appearance stream to be used @param outputStream the output stream for the content
147 Transforms given x and y coordinates using the current transformation matrix. @param x original x coordinate @param y original y coordinate @return transformed Point2D.Float object
148 Creates a new PaintContext with an adjusted transformation for the pattern. @param cm ColorModel, deviceBounds Rectangle, userBounds Rectangle2D, xform AffineTransform, and hints RenderingHints are parameters used in context creation. The method modifies the transformation to remove scaling from the pattern. @return A new PaintContext with modified transformation.
149 Parses a COSBase object from the source based on its number. @param objectNumber unique identifier for the object to be parsed @return COSBase object or null if not found, throws IOException
150 Initializes PDFStreamParser with byte array data. @param bytes input data in byte array format
151 Initializes a new PDFStreamParser with PDContentStream data. @param pdContentstream the content stream to be parsed @throws IOException if an I/O error occurs while reading the stream
152 Converts FontBox Encoding to a Type1Encoding object. @param encoding the input FontBox Encoding @return a corresponding Type1Encoding object
153 Constructs a Mac OS Roman Encoding object by adding differences and additional entries to the MacRomanEncoding.
154 Constructs a PDPageXYZDestination from a given COSArray. @param arr the CosArray containing destination data
155 Fetches an item using either of the provided keys. @param firstKey primary key to search for the item @param secondKey secondary key used if first key fails @return COSBase object or null if not found with either key
156 Reads and returns the next byte of data from a stream, or -1 if end of stream is reached. @return The next byte of data as an integer, or -1 if end of stream is reached. @throws IOException If an I/O error occurs while reading the data.
157 Reads a specified amount of data into the given byte array. @param data destination byte array @param offset start position in the array @param length number of bytes to read @return number of bytes read or -1 if EOF is reached
158 Reads an image from an input stream and sets it to the current object. @param stream InputStream containing image data @throws IOException if reading from the stream fails
159 Encodes input data using LZW algorithm and writes encoded bits to output stream. @param rawData InputStream containing raw data to encode @param encoded OutputStream for writing the encoded data @param parameters COSDictionary containing encoding parameters @throws IOException if an I/O error occurs
160 Selects the optimal data row for writing based on estimated compression sum. @return byte array of the chosen data row for writing
161 Converts a COSName to its corresponding RenderState. @param state the input COSName object @return the matching RenderState or null if input is null or no match found
162 Converts a COSName object to its corresponding BaseState value. @param state the COSName object to convert, null returns ON by default @return the BaseState value associated with the given COSName or ON if input is null
163 Constructs Type6ShadingPaint object with given PDShadingType6 and transformation matrix. @param shading the PDShadingType6 object to create paint from @param matrix the transformation matrix for the paint
164 Constructs a PDSoftMask from a COSDictionary with default settings. @param dictionary contains soft mask properties
165 Constructor for Type4ShadingPaint with shading and transformation matrix. @param shading PDShadingType4 object containing shading information @param matrix Matrix object for transformations
166 Adds a new TextPosition to the contents of an object. @param text The TextPosition object to be added
167 Adds a marked content to the list of contents in the current object. @param markedContent The PDMarkedContent object to be added
168 Sets print permission. If not in read-only mode, allows or denies printing based on the input parameter. @param allowPrinting true to allow printing, false to deny
169 Sets permission to modify based on the input parameter. Ignores request if in read-only mode. @param allowModifications true to enable modifications, false otherwise
170 Sets whether content extraction is allowed. If not read-only, updates the permission bit accordingly. @param allowExtraction boolean flag to enable or disable content extraction
171 Sets permission to modify annotations based on input. Ignores request if in read-only mode. @param allowAnnotationModification true to enable, false to disable modification of annotations
172 Adds a PDXObject to the contents of this object. @param xobject the PDXObject to be added
173 Sets permission for filling in the form based on provided flag. @param allowFillingInForm true to enable, false to disable form filling
174 Retrieves the highest XRef object number from the pool. @return highest XRef object number in the pool
175 Applies GSUB rules to a word, converts it to glyph IDs, and writes them to an output stream. @param gsubWorker the worker applying GSUB transformations @param out the ByteArrayOutputStream to write glyph IDs @param font the type 0 font for encoding @param word the input string @return List of transformed glyph IDs
176 Initializes a PDDocument object with COSDocument and sets permissions. @param doc the COSDocument to initialize from @param source the RandomAccessRead source of the document @param permission the AccessPermission for the document
177 Constructs an FDFDocument object from a COSDocument and RandomAccessRead source. @param doc the underlying COSDocument @param source the source of random access read data for this document
178 Returns a string representation of FunctionType2 object. @return A formatted string with C0, C1 and N values
179 Sets the permission for accessibility data extraction. If not read-only, updates the permission bit.
180 Sets the ability to print faithfully. Ignores operation if in read-only mode. @param canPrintFaithful true to enable faithful printing, false otherwise
181 Returns the Adobe Glyph List used for text rendering. @return A GlyphList object representing the Adobe Glyph List
182 Creates a PDColor object with specified color components, pattern name, and color space. @param components float array representing color components @param patternName unique identifier for the pattern @param colorSpace color space in which the color lies
183 Sets the document assembly permission for this object. If not read-only, updates permission bit. @param allowAssembly true to enable document assembly, false otherwise
184 Checks and returns if print permission is enabled. @return true if print permission is on, false otherwise
185 Checks if modification permission is granted. @return true if modification permission is enabled, false otherwise
186 Checks if content extraction is permitted based on permission bits. @return true if content extraction is allowed, false otherwise
187 Checks if the user has permission to modify annotations. @return true if permission is granted, false otherwise
188 Checks if user has permission to fill in form. @return true if permission bit is on, false otherwise
189 Checks if extraction permission is enabled for accessibility. @return true if enabled, false otherwise
190 Checks if document assembly permission is granted. @return true if user has permission, false otherwise
191 Checks and returns if faithful print permission is enabled. @return true if faithful print permission is on, false otherwise
192 Sets the encryption key and initializes the salt array. @param key byte array containing the key (1 to 32 bytes long).
193 Checks if a Unicode code point is prohibited for certain uses. @param codepoint The Unicode code point to check @return True if the code point is prohibited, false otherwise
194 Computes and returns a version number based on key length and protection policy. @return an integer representing the computed version number
195 Converts a given code to its corresponding CID using the parent's character map. @param code integer value representing a specific code @return integer value of the corresponding CID, or an error code if not found
196 Writes encrypted byte to OutputStream using a custom algorithm. @param aByte the byte to be written and encrypted @param output the OutputStream where the encrypted byte is sent @throws IOException if an I/O error occurs while writing to the stream
197 Writes an object reference to the OutputStream. @param output Stream where data is written @param indirectReference Key of the COSObject to be referenced @throws IOException if writing fails
198 Checks if compression parameters are set and enabled. @return true if compression is enabled, false otherwise
199 Checks if an update is needed based on the current state. @return true if update is required, false otherwise
200 Compares this integer object with another object for equality. @param o the object to compare with @return true if objects are equal, false otherwise
201 Constructs COSObjectKey with object number, generation, and stream index. @param num Object number (must be non-negative) @param gen Generation number (must be non-negative) @param index Stream index
202 Checks if the original document state allows updates. @return true if updates are accepted, false otherwise
203 Writes ASCII85 encoded data to output stream. @param b the byte to write @throws IOException if an I/O error occurs
204 Flushes the output stream and writes encoded data to it, handling 'z' expansion.
205 Calculates and returns the text direction based on textMatrix properties. @return The text direction in degrees (0, 90, 180, or 270)
206 Decodes a predictor row based on the specified prediction algorithm. @param predictor The type of prediction algorithm to use (1-14) @param colors Number of color components per pixel @param bitsPerComponent Bits per component @param columns Number of pixels in a row @param actline Current row data @param lastline Previous row data for certain prediction algorithms
207 Sets the bounding box (bbox) for a COS object. If null, removes the item; otherwise, sets it. @param bbox PDRectangle object representing the bounding box to set or remove
208 Decodes a hexadecimal string to byte array. Ignores newlines and carriage returns. @param s the hexadecimal string to decode @return decoded byte array or logs error and aborts on invalid input
209 Closes the document and associated resources, handling any IOExceptions. @throws IOException if an I/O error occurs while closing resources
210 Safely closes the document and associated I/O streams, handling exceptions. @throws IOException if there's an error during closing operations
211 Converts a java.lang.Boolean to a COSBoolean object. @param value The java.lang.Boolean to convert. @return The equivalent COSBoolean object.
212 Initializes a PDMarkedContent object with a given tag and properties, and an empty contents list. @param tag COSName representing the content's tag @param properties COSDictionary containing additional properties for the content
213 Initializes Type 5 Shading Paint with given shading and transformation matrix. @param shading PDShadingType5 object defining the shading characteristics @param matrix Matrix object for transforming the shading
214 Returns the name of the Cosmetic Object Specification (COS) pattern. @return A string representing the COS pattern name
215 Returns the name of the shading type used in this context.
216 Retrieves the default value, returning its name or an empty string. @return The name of the default value as a String, or an empty String if not found or not a COSName.
217 Unchecks an item by setting its value to 'Off' and saving changes. @throws IOException if there is an error during the save operation
218 Adds an XReferenceEntry to the collection of entries. @param entry The XReferenceEntry object to be added
219 Constructs a PDXObject with the given stream and subtype. @param stream input data stream @param subtype COSName defining object's type (e.g., IMAGE or FORM)
220 Gets the startxref offset in a PDF file. Throws exceptions if EOF marker or startxref is missing. @return The startxref offset, or an exception if not found @throws IOException If there's an issue reading the file or required markers are missing
221 Reads from the input stream until it reaches the end of the stream or finds the 'endstream' keyword. @param out EndstreamFilterStream to write filtered content @return Calculated length of the output stream after filtering @throws IOException if an I/O error occurs while reading from source stream
222 Checks if next character in source is a space or return. @return true if it's a space or return, false otherwise @throws IOException if error occurs while reading the source
223 Adds a unique XReferenceEntry to the collection if not already present. @param entry The XReferenceEntry to add, must have a unique referenced key number
224 Returns the numeric value of the first column in this object's type. @return The numeric value of the first column.
225 Fetches and returns the generation value of the referenced key. @return the generation value as a long integer
226 Retrieves and returns the cross-reference table. @return a map where keys are COS object keys and values are their respective long representations
227 Returns a string representation of the FreeReference object. @return String with details about the FreeReference's key, next free object and type
228 Returns the generation value of the referenced key's third column. @return The generation value as a long.
229 Returns a string representation of the object, including its key, type and byte offset.
230 Returns the numeric value of the second column from parent key. @return Numeric value of the second column in the parent key
231 Overrides to fetch the value of the third column. @return The index value from the object stream
232 Returns a string representation of this ObjectStreamEntry. @return String formatted with key, type, index, and parent key
233 Writes a specified number of bytes from a byte array to the output stream. @param b The data. @param off The start offset in the data. @param len The number of bytes to write. @throws IOException If an I/O error occurs.
234 Writes a byte to the output stream and updates position. @param b the byte to be written @throws IOException if an I/O error occurs
235 Writes an end-of-line character if not already on a new line. @throws IOException if an I/O error occurs during writing
236 Overrides to return the byte offset value of the second column. @return The byte offset value as a long
237 Retrieves the COSDictionary object based on the function stream availability. @return COSDictionary object from function stream or a predefined dictionary if stream is null
238 Searches for XRef streams in a PDF file and returns their offsets. @return List of Long values representing the offsets of XRef streams. @throws IOException if an I/O error occurs during the search process.
239 Brute force search for the last End-of-File marker in PDF data, handling any exceptions. @return The position of the last EOF marker or Long.MAX_VALUE if not found. @throws IOException If an I/O error occurs during the search process.
240 Overrides to return the COSStream object of this instance's stream. @return The COSStream object associated with this instance's stream
241 Retrieves metadata as a COSStream from the underlying COS object's stream. @return COSStream containing the metadata, or null if not available
242 Sets metadata for the COSStream object associated with this instance. @param metadata A COSStream containing metadata to be set
243 Compares this annotation with another object for equality. @param o the object to compare with @return true if both objects are equal, false otherwise
244 Searches for and returns offsets of cross-reference (xref) tables in a PDF file. @return List of offsets where xref tables start, or an empty list if none found. @throws IOException if there's an issue reading from the source.
245 Checks if the next character in source is a digit. @return true if the next char is a digit, false otherwise @throws IOException if an I/O error occurs while reading the source
246 Sets cross-reference for a given object key at specified offset.
247 Checks if the next character in source is a space. @return true if the next char is a space, false otherwise @throws IOException if an I/O error occurs
248 Skips line breaks (CR, LF or CRLF). @param linebreak the character to check for a line break @return true if it's a valid line break, false otherwise @throws IOException if an I/O error occurs while reading from source
249 Checks for end of string based on specific byte patterns. @param bracesParameter input parameter to check against end of string indicators @return 0 if end of string is found, otherwise returns the input parameter
250 Checks if the character is a line ending (LF or CR). @param c the character to check @return true if it's an end of line character, false otherwise
251 Reads a string number from the input source, stopping at non-digit characters or EOF. @return StringBuilder containing the read number or an empty StringBuilder if none found @throws IOException if number is too long or error occurs while reading
252 Checks if next character in source is whitespace. @return true if next char is a whitespace, false otherwise @throws IOException if unable to read from the source
253 Parses and returns the starting cross-reference (xref) of a PDF document, or -1 if not found. @return The byte offset of the first object referenced by the xref or xref stream. @throws IOException If an I/O error occurs during parsing.
254 Overrides to return this object's underlying COS dictionary. @return The COS Dictionary representing this object.
255 Constructs a new COSBoolean with the given boolean value. @param aValue the boolean value to be assigned to this COSBoolean object
256 Constructs a new COSName with the given string value. @param aName the name to be assigned to the new COSName object
257 Limits instantiation of COSNull class to one instance using Singleton pattern.
258 Initializes a COSString object with given bytes and hex encoding flag. @param bytes byte array to be stored in the object @param forceHex determines if hex encoding should be forced
259 Initializes a new instance of COSDictionary and sets up its update state.
260 Constructs a COSObject with the given base object. @param object the underlying base object for this COSObject
261 Initializes a COSObject with the given base object and parser. @param object the base object to initialize with @param parser the ICOSParser to use for parsing the object
262 Initializes a COSObject with a given key and parser. @param key unique object identifier @param parser instance of ICOSParser for processing the object
263 Initializes a new Free XReference object with the given COSObjectKey and next free object number. @param key unique identifier for the reference @param nextFreeObject number of the next free object in sequence
264 Initializes ObjectStreamXReference with provided parameters. @param objectStreamIndex index of the object stream @param key unique object identifier @param object the COSBase object to reference @param parentKey unique identifier of the parent object
265 Initializes DefaultResourceCacheCreate with default settings (enabled).
266 Constructs a PDTypedDictionaryWrapper object from a COSDictionary. @param dictionary the input COSDictionary to wrap
267 Constructor to initialize PDAttributeObject with COSDictionary. @param dictionary contains attribute data in key-value pairs
268 Constructs a Type 2 shading object from a given COS dictionary. @param shadingDictionary contains the shading type and parameters
269 Initializes PDUserProperty with a COSDictionary and a PDUserAttributeObject. @param dictionary contains data for the property @param userAttributeObject provides additional user attribute information
270 Constructs an outline node from a COSDictionary. @param dict the dictionary containing outline node data
271 Constructs an FDFAnnotationLink from a COSDictionary. @param a The COSDictionary to construct the link from.
272 Constructs an FDFAnnotationPolygon from a COSDictionary. @param a the input COSDictionary containing polygon data
273 Constructs an FDFAnnotationPolyline from a COSDictionary. @param a The COSDictionary to construct this object from
274 Constructs an FDFAnnotationSound object from a COSDictionary. @param a the COSDictionary containing sound data
275 Constructs an FDFAnnotationSquare from a COSDictionary. @param a the COSDictionary containing data for the square annotation
276 Constructs an FDFAnnotationStamp from a COSDictionary. @param a The COSDictionary containing data to initialize the object
277 Constructs an FDFAnnotationText object from a COSDictionary. @param a The COSDictionary containing annotation text data.
278 Constructs an FDFAnnotationTextMarkup object from a COSDictionary. @param a The COSDictionary containing the data for the text markup annotation.
279 Constructs a PDShadingType1 object from a COSDictionary. @param shadingDictionary dictionary containing shading information
280 Constructs an FDFAnnotationLine from a COSDictionary. @param a the COSDictionary to construct the line from
281 Initializes PDTilingPattern with a COSDictionary and a ResourceCache. @param dictionary contains tiling pattern data @param resourceCache stores reusable resources for efficiency
282 Fetches or creates a transparency group attribute object for the PDF. @return Transparency group attributes, may be newly created or null if not available
283 Returns a Composite instance based on blend mode and alpha value. @param blendMode the blending mode to use (cannot be null) @param constantAlpha the constant alpha value (clamped between 0 and 1)
284 Extracts and returns the PANOSE classification from a byte array. @return PDPanoseClassification object containing the extracted data
285 Constructs a shading pattern from the given resource dictionary. @param resourceDictionary COSDictionary containing shading pattern resources
286 Constructor for FDFAnnotationInk that initializes with COSDictionary. @param a The COSDictionary used to initialize the object.
287 Constructor for creating an FDFAnnotationFreeText object from a COSDictionary. @param a The COSDictionary to create the object from.
288 Constructs an FDFAnnotationFileAttachment from a COSDictionary. @param a COSDictionary containing file attachment data
289 Constructs a PDTransition object from a COSDictionary. @param dictionary the source data for the transition
290 Constructs a PDDestinationNameTreeNode object from a given COSDictionary. @param dic The input dictionary to create the node
291 Initializes a new PDEmbeddedFilesNameTreeNode with the given COSDictionary. @param dic A COSDictionary containing necessary data for initialization.
292 Constructs a PDJavascriptNameTreeNode from a given COSDictionary. @param dic the input dictionary to construct the node
293 Initializes a PDStructureElementNameTreeNode with a given COSDictionary. @param dic a dictionary containing structure element data
294 Creates and returns a new child node in the number tree. @param dic The dictionary to be used for creating the child node @return A new PDNumberTreeNode object
295 Constructs PDMetadata with a given COSStream. @param str input stream containing metadata information
296 Initializes a PDObjectStream from a given COSStream. @param str the input Cos Stream to initialize this object stream
297 Constructs a PDEmbeddedFile object from a given COSStream. @param str the input stream containing embedded file data
298 Initializes a PDFunction object from a COSBase instance. @param function can be a COSStream or a COSDictionary
299 Initializes a PDXObject with the provided COSStream and subtype. @param stream input data stream @param subtype specifies the type of XObject (e.g., IMAGE, FORM)
300 Constructs a PDStructureElement from a COSDictionary. @param dic the dictionary containing structure element data
301 Constructs PDStructureTreeRoot from COSDictionary. @param dic COSDictionary containing structure tree data
302 Initializes a new instance of the SecurityHandler class.
303 Constructs an FDFAnnotationCaret object from a COSDictionary. @param a The COSDictionary to construct the object from.
304 Constructs an FDFAnnotationCircle from a COSDictionary. @param a the COSDictionary containing the data for the circle
305 Constructs DecodeOptions with given dimensions. @param x X-coordinate of the rectangle @param y Y-coordinate of the rectangle @param width Width of the rectangle @param height Height of the rectangle
306 Returns visually ordered Unicode string. Reverses if RTL characters are present (excluding single code-point)
307 Converts a single byte to its hexadecimal representation. @param b the input byte @return a two-element byte array containing the high and low nibbles of the input byte in hexadecimal form
308 Converts a byte array to its ASCII representation. @param bytes input byte array @return new byte array with ASCII representation of input bytes
309 Writes a byte to an OutputStream in hexadecimal format. @param b the byte to be written @param output the OutputStream where the byte is written @throws IOException if an I/O error occurs while writing to the stream
310 Formats a float value into an ASCII buffer. @param value the float to format @param maxFractionDigits maximum number of digits after decimal point @param asciiBuffer output buffer for the formatted string @return length of the formatted string, or -1 if input is invalid
311 Constructs an axial shading paint object from a PDShadingType2 and a transformation matrix. @param shadingType2 the shading type to be used for painting @param matrix the transformation matrix to apply during painting
312 Constructs RadialShadingPaint with PDShadingType3 shading and transformation matrix. @param shading the shading type for radial gradient @param matrix the transformation to be applied to the shading
313 Finds and returns a value associated with the given byte array in a trie structure. @param bytes input byte array to search for in the trie @return The value of type T if found, otherwise null
314 Returns a string representation of this object in Unicode format. Overrides Object's toString method. @return A string representing the object in Unicode format
315 Converts a byte array to its hexadecimal string representation. @param bytes the input byte array @return the hexadecimal string representation of the byte array
316 Converts a byte to its hexadecimal string representation. @param b the input byte @return the hexadecimal string representation of the byte
317 Starts the article writing process. Writes the starting content based on LTR (Left-to-Right) direction. @param isLTR boolean indicating if text direction is Left-to-Right or not @throws IOException in case of I/O errors during writing
318 Calculates the width based on rotation angle. @param rotation in degrees (90 or 270 for vertical, others for horizontal) @return absolute difference between end coordinates and translation values
319 Ends the current article by writing its closing tag to the output stream. @throws IOException if an I/O error occurs while writing to the output stream
320 Calculates the y-coordinate of lower left rotation based on given angle. @param rotation Angle of rotation in degrees (0, 90, 180, or 270) @return Corresponding y-coordinate for lower left rotation
321 Writes a line separator to the output stream. @throws IOException if an I/O error occurs while writing
322 Returns the x-coordinate rotation based on the given rotation angle. @param rotation The angle of rotation (0, 90, 180, or 270 degrees) @return The corresponding x-coordinate rotation value
323 Writes a word separator to the output stream. @throws IOException if an I/O error occurs while writing
324 Writes the start of a paragraph to the output, closing any open paragraph first if necessary. @throws IOException if an I/O error occurs while writing to the output stream
325 Writes the start of the page to the output stream. @throws IOException if an I/O error occurs while writing
326 Writes the page end content to the output stream. @throws IOException if an I/O error occurs during writing
327 Sets X and Y axis coordinates for PDVisibleSignDesigner. @param x the new X-coordinate @param y the new Y-coordinate @return current instance of PDVisibleSignDesigner for method chaining
328 Checks if the Unicode character is a diacritic mark. @return true if it's a non-spacing, modifier symbol or letter, false otherwise
329 Throws exception if the provided PDOutlineItem has any siblings. @param node PDOutlineItem to be checked for siblings @throws IllegalArgumentException if node has siblings
330 Constructs a Type1ShadingPaint object from a PDShadingType1 and a transformation matrix. @param shading the PDShadingType1 to be used for painting @param matrix the transformation matrix to apply during painting
331 Writes Unicode characters to an output stream. @param text TextPosition object containing the Unicode character to be written @throws IOException if there is a problem writing to the output stream
332 Returns the height of the template. @return Float value representing the height of the template
333 Constructs a new COSDocument with a memory-only stream cache and specified parser. @param parser the ICOSParser to use for parsing document data
334 Checks if a point (x, y) is within the defined boundaries. @param x The x-coordinate of the point to check. @param y The y-coordinate of the point to check. @return True if the point is inside the boundaries; false otherwise.
335 Initializes a new PDF signature field with a given form, dictionary, and parent. @param acroForm The PDF AcroForm containing this field @param field The COSDictionary representing the field in the document @param parent The PDNonTerminalField that contains this field
336 Returns a string representation of the object collection, including objects and their revision numbers.
337 Generates a unique partial name for a field, appending an incrementing number if needed. @return Unique partial name for the field
338 Constructs a PDButton object with given parameters. @param acroForm PDF AcroForm object @param field COSDictionary representing the field @param parent PDNonTerminalField parent of this field
339 Constructs a variable text field in an AcroForm. @param acroForm the parent AcroForm @param field the COSDictionary representing this field @param parent the parent non-terminal field if any, otherwise null
340 Creates a PDSoftMask object from the given COSBase dictionary. @param dictionary contains data to construct the soft mask @return PDSoftMask object or null if creation fails
341 Constructs a Type 5 Shading object from a given COS dictionary. @param shadingDictionary contains the parameters for the shading
342 Constructs a type 4 (free-form functional) shading pattern. @param shadingDictionary COS dictionary containing shading information
343 Constructs a PDShadingType3 object from a COSDictionary. @param shadingDictionary dictionary containing shading information
344 Constructs a tiling pattern from a given COSDictionary. @param dictionary contains parameters for tiling pattern construction
345 Constructs an underline annotation from a COS dictionary. @param a COSDictionary containing annotation data
346 Constructs an FDFAnnotationStrikeOut object from a COSDictionary. @param a A dictionary containing annotation data
347 Constructs an FDFAnnotationSquiggly object from a COSDictionary. @param a COSDictionary containing the annotation data
348 Constructs an FDFAnnotationHighlight object from a COSDictionary. @param a The COSDictionary containing data for the highlight annotation.
349 Initializes StandardSecurityHandler with a specified protection policy. @param standardProtectionPolicy The policy defining security standards to be enforced.
350 Initializes PublicKeySecurityHandler with a given PublicKeyProtectionPolicy. @param publicKeyProtectionPolicy the policy to protect public keys
351 Initializes a new instance of the StandardSecurityHandler class.
352 Initializes an instance of PublicKeySecurityHandler.
353 Constructs a PDFormXObject from a COSStream and caches it for resource management. @param stream the input data stream @param cache the resource cache for efficient reuse of resources
354 Constructs a PDFormXObject from a COSStream. @param stream the underlying COS stream containing form data
355 Calculates and returns the height of an object by subtracting lower left Y from upper right Y. @return The height as a floating-point number
356 Converts bounding coordinates into a GeneralPath object representing a rectangle. @return GeneralPath object representing the rectangle defined by this object's coordinates
357 Fetches or creates FontBoxFont based on its format. Uses cache to avoid re-creation.
358 Saves disk cache by writing font information to a file. @throws SecurityException if permission is denied to write the file
359 Sets a new FontProvider and updates the font information cache. @param fontProvider the new FontProvider to set
360 Constructs a shaded triangle with given corners and colors. Calculates area, degree, and initializes line based on conditions. @param p Array of Point2D objects representing the triangle's corners @param c 2D array of floats representing the RGB color values for each corner
361 Loads a glyph list from the given filename with specified entries. @param filename name of the file to load @param numberOfEntries number of entries to include in the glyph list @return GlyphList object containing the loaded data @throws RuntimeException if the file is not found or an I/O error occurs
362 Constructs a new COSString with the specified text. @param text the string to be encapsulated in the COSString object
363 Retrieves the default appearance string from a COSBase object. @return Default appearance string, or null if not found or not a COSString.
364 Retrieves export values as a list of strings from an inheritable attribute. @return List of strings representing the export values or empty if none found.
365 Extracts pairable strings from a COSBase object based on the given index. @param items COSBase object containing data @param pairIdx index to select string pairs (0 or 1) @return list of pairable strings, may be empty
366 Fetches the named destination as a String. Supports both COSString and COSName types. @return Named destination as a String or null if not found or unsupported type
367 Returns the string representation of the file. @return String representation of the file
368 Encrypts or Decrypts data using AES-256 algorithm. @param data InputStream to be encrypted/decrypted @param output OutputStream for the result @param decrypt true if decryption is needed, false for encryption @throws IOException in case of I/O or security errors
369 Encrypts or decrypts data using AES with provided key and IV. @param finalKey encryption/decryption key @param data input stream to be encrypted/decrypted @param output output stream for encrypted/decrypted data @param decrypt true if decryption, false if encryption
370 Overrides token method to accept CharSequence and convert it to String before processing. @param text input sequence of characters to be processed as a token
371 Concatenates two matrices by multiplying them in reverse order (b*a). @param a the first matrix to be multiplied @param b the second matrix to be multiplied @return the result of the multiplication, or null if not possible
372 Translates a 2D vector by its x and y components. @param vector The Vector object containing the x and y components to be translated
373 Adjusts the text position by translating it using (tx, ty). @param tx translation in x-direction @param ty translation in y-direction
374 Rotates the matrix by given angle around the origin (0,0). @param theta rotation angle in radians
375 Computes an encrypted password using RC4 algorithm. @param ownerPassword The original owner's password. @param userPassword The user's password to be encrypted. @param encRevision The encryption revision (affects key computation). @param length Expected length of the output, throws exception if not met. @return Encrypted byte array representing the user's password. @throws IOException If expected length is not met for REVISION_2.
376 Computes a user password based on provided parameters and encryption revision. @param password, owner, id are input data for the computation. @param permissions specifies access level. @param encRevision determines the encryption algorithm (2, 3, 4). @param keyLengthInBytes specifies output length. @param encryptMetadata flag to include metadata in encryption. @return byte array representing the computed password.
377 Reads an image from the specified file path and prepares it for signing. @param path the absolute path to the image file @return PDVisibleSignDesigner object for further manipulation @throws IOException if there is a problem reading the file
378 Initializes a PDVisibleSignDesigner with an input stream of a signature image. @param imageStream the input stream containing the signature image data @throws IOException if there is an error reading from the input stream
379 Fetches or generates a mapping of GIDs to codes. @return Map<Integer, Integer> where key is GID and value is corresponding code @throws IOException if an I/O error occurs during code generation for GID
380 Constructs a PDPostScriptXObject from a given COSStream object and sets its subtype to PS. @param stream the input data stream containing PostScript content
381 Checks if the data structure is empty. @return true if the size is zero, false otherwise
382 Writes an operator followed by a new line. @param text the operator to be written @throws IOException if writing fails
383 Writes an integer operand to the output stream in decimal format, followed by a space. @param integer the value to be written @throws IOException if there's an error writing to the output stream
384 Writes a finite floating-point number to the output stream. Throws exception for non-finite numbers. @param real the floating-point number to write @throws IOException if an I/O error occurs while writing to the output stream
385 Returns the file suffix based on the stream's filters. Supports PNG, JPG, JPX, TIFF, and JB2 formats.
386 Initializes PDImageXObject with a stream and resources, handling JPX filter if present. @param stream the input data stream @param resources associated resources for the image object
387 Creates an output stream with optional filters applied for this object. @param filters COSBase objects used to filter the output @return OutputStream for writing data
388 Fetches name at specified index. If index is invalid, returns null. @param index position of the name to fetch @return Name as a String or null if index is invalid
389 Fetches an integer at specified index with default fallback value. @param index position in array to retrieve integer from @return integer at given index or -1 if not found or invalid index
390 Returns a string representation of the rectangle's coordinates. @return String in format "[lowerLeftX,lowerLeftY,upperRightX,upperRightY]"
391 Transforms a rectangular shape using the provided matrix and returns the new GeneralPath. @param matrix transformation matrix to apply to the shape @return A transformed GeneralPath object representing the shape
392 Retrieves a string at the given index, or returns defaultValue if not found or not a string. @param index position of the desired string @param defaultValue value to return if no valid string is found at the index @return String value at the specified index or defaultValue if invalid
393 Constructs a new COSWriter with an OutputStream. Compression parameters are optional. @param outputStream the stream to write data to
394 Returns a COSBase instance representing the degrees value as an integer. @return COSBase object containing the degree value
395 Appends a kid with the given MCID, throws exception if MCID is negative. @param mcid unique kid identifier, must be non-negative
396 Parses and returns a COSNumber object from the given string. Throws IOException if the string is not a valid number representation. @param number String representing a number @return Corresponding COSNumber object (COSInteger or COSFloat) @throws IOException If the string does not represent a valid number
397 Converts update state of this object into an increment. @return COSIncrement representing the updated state as an increment
398 Writes a COSFloat object to an OutputStream and adds a space separator. @param output the OutputStream where data will be written @param cosFloat the COSFloat object to be written to the OutputStream @throws IOException if writing to the OutputStream fails
399 Ends text clip by intersecting current clipping path with buffered clippings and resets them.
400 Sets and transfers clipping paths to graphics. Handles initial clip transformation if needed.
401 Calculates and returns the width of an object. @return The width as a floating point number.
402 Initializes a type 0 PDF function with a given COS base function. @param function the base function for the PDF function type 0
403 Retrieves FontMetrics for a given font name. If not loaded, it loads and returns them.
404 Writes a specified portion of bytes to the provided output stream. @param data byte array containing data to be written @param offset starting index in the data array @param len number of bytes to write from the array @param output OutputStream object to which data is written @throws IOException if an I/O error occurs during writing
405 Writes given byte array to an output stream. @param data bytes to be written @param output destination of the data @throws IOException if writing fails
406 Checks if any revision3 permission is set for the user. @return true if user has any of the permissions: fill form, extract accessibility, assemble document, or print faithfully; false otherwise
407 Checks if the user has all owner permissions. @return true if user has all permissions, otherwise false
408 Returns the adjusted X direction based on rotation. @return Float value representing the adjusted X direction
409 Detects the type of a file from its input stream using a tree-based search for magic numbers. @param inputStream the stream to read the file data from @return the detected FileType or throws IOException if the detection fails @throws IOException if the input stream does not support mark/reset or ends before magic number is determined
410 Writes a byte array in hexadecimal format to an output stream. @param bytes the byte array to be written @param output the output stream where data is written @throws IOException if an I/O error occurs
411 Writes the name of the object to an OutputStream in PDF format. @param output the OutputStream to write to @throws IOException if an I/O error occurs
412 Writes an external CMS signature to the PDF, overwriting existing contents. @param cmsSignature byte array of the CMS signature in hexadecimal format @throws IOException if there's not enough space for the signature or other I/O errors
413 Converts byte array into hexadecimal string representation. @return Hexadecimal string representation of bytes
414 Converts a Calendar object to an ISO8601 formatted string. @param cal the Calendar object to convert @return ISO8601 formatted string representation of the Calendar object
415 Converts a Calendar object to a formatted string. @param cal the Calendar object to convert @return formatted string representation of the calendar or null if input is null
416 Writes the end of a paragraph to the output stream, starting a new one if not already in a paragraph. @throws IOException if an I/O error occurs while writing to the output stream
417 Starts an article with default settings.
418 Calculates and returns the width direction adjustment. @return The calculated width direction adjustment as a float value.
419 Returns the width of the current object after rotation. @return The width as a floating point number
420 Calculates and returns adjusted Y direction based on the rotation angle. @return Adjusted Y direction value for PDFBox operations
421 Initializes TextPosition with given parameters for text rendering. @param pageRotation rotation of the page, width & height, text matrix, and coordinates @param font PDFont object and size in points used for text rendering
422 Skips whitespace and comments in the input source. @throws IOException if an I/O error occurs while reading from the source
423 Reads and returns a line from the source, handling end-of-file and EOL characters. @return String containing the line or throws IOException if at End-of-File
424 Skips and handles line breaks in the input stream. @return true if a line break is found, otherwise rewinds stream and returns false @throws IOException if an I/O error occurs while reading from source
425 Skips white spaces and line breaks after a stream in the PDF source. @throws IOException if an I/O error occurs while reading from the source
426 Constructs a PDFormXObject from a given PDStream and sets its type to FORM. @param stream the input data stream for the XObject
427 Searches for the nearest XRef offset from a list of table and stream offsets. @param xrefOffset target offset to search for @return nearest found offset or -1 if not found @throws IOException if an I/O error occurs during the search
428 Safely closes the resource, flushes data, and sets input/output streams to null. @throws IOException if an I/O error occurs while closing or flushing
429 Updates 'updated' status based on acceptance, used in synchronization. @param updated new status to be set if updates are accepted
430 Constructs COSObjectKey with specified number and generation. @param num unique object number @param gen object generation identifier
431 Checks if the given COSBase object needs to be updated. @param base a COSBase object to evaluate for updates @return true if the object is an instance of COSUpdateInfo and needs updating, otherwise false
432 Closes all resources and clears data used by the object. Throws IOException if an error occurs.
433 Parses the header of a PDF file. @return true if parsing is successful, false otherwise @throws IOException if there's an error reading the PDF file
434 Parses the FDF header and returns true if successful. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs during parsing
435 Constructs a PDDocument object from a COSDocument and RandomAccessRead source. @param doc the underlying COS document @param source the random access read source for data input
436 Creates and returns a new PDDocument object using document data. @return PDDocument instance with access permission set @throws IOException if an I/O error occurs during document creation
437 Constructs a Type 3 PostScript function with a given base function stream. @param functionStream the base function stream for the Type 3 function
438 Initializes launch parameters for a PDWindows application.
439 Initializes a new instance of PDTargetDirectory with an empty dictionary.
440 Initializes a new instance of PDURIDictionary with an empty COSDictionary.
441 Initializes a new instance of PDEncryption with an empty COSDictionary.
442 Initializes a new instance of PDBorderEffectDictionary with an empty COSDictionary.
443 Initializes an empty dictionary for crypt filter operations.
444 Initializes a new instance of PDBorderStyleDictionary with an empty COSDictionary.
445 Initializes a PDPropBuild object with an empty COSDictionary using direct objects.
446 Initializes a new instance of PDBoxStyle with an empty COSDictionary.
447 Initializes a new instance of PDPropertyList with an empty COSDictionary.
448 Initializes a new instance of PDMarkInfo with an empty COSDictionary.
449 Initializes and sets up a property build data dictionary for PDF processing.
450 Initializes and sets up a PDSeedValueMDP object with an empty dictionary.
451 Initializes a new instance of PDSeedValueTimeStamp with an empty COSDictionary.
452 Constructs a PDField object with an AcroForm and default settings. @param acroForm the form to which the field belongs
453 Initializes and creates a new PDViewportDictionary object.
454 Initializes preferences for PDViewer with an empty COSDictionary.
455 Initializes PDPageAdditionalActions with an empty COSDictionary.
456 Initializes a new instance of PDFormFieldAdditionalActions with an empty dictionary.
457 Initializes a new instance of PDDocumentCatalogAdditionalActions with an empty COSDictionary.
458 Initializes an instance of PDAnnotationAdditionalActions with a new COSDictionary.
459 Initializes a new instance of FDFJavaScript with an empty COSDictionary.
460 Initializes an instance of FDFIconFit with a new empty COSDictionary.
461 Initializes an instance of FDFField with a new COSDictionary.
462 Initializes an instance of FDFDictionary with a new COSDictionary.
463 Creates and returns a default DecodeResult object with an empty COSDictionary.
464 Initializes an instance of FDFCatalog with a new empty COSDictionary.
465 Initializes an instance of FDFNamedPageReference with a new COSDictionary.
466 Initializes a new instance of FDFPage with an empty COSDictionary.
467 Constructs a default attribute object from a COSDictionary. @param dictionary input data in COSDictionary format
468 Initializes an instance of FDFPageInfo with an empty COSDictionary.
469 Initializes an instance of FDFTemplate with an empty COSDictionary.
470 Initializes a new instance of PDDeviceNAttributes with an empty COSDictionary.
471 Initializes a new instance of PDDeviceNProcess with an empty dictionary.
472 Initializes a PDShading object with an empty COSDictionary.
473 Initializes a new COSStream object with a given RandomAccessStreamCache. Sets the initial length to 0. @param streamCache the cache for random access to the stream data
474 Initializes an empty COSArray with default settings.
475 Initializes an instance of PDAdditionalActions with a new empty COSDictionary.
476 Creates an unmodifiable copy of a COSDictionary object. @param dict the original, modifiable dictionary to copy
477 Constructs a PDUserAttributeObject from a COSDictionary. @param dictionary input dictionary containing user attribute data
478 Constructs a COSObject with the given COSBase and COSObjectKey. @param object the underlying data object @param objectKey the unique key for the object
479 Constructs a standard attribute object from a COSDictionary. @param dictionary source of data for the object
480 Initializes a new empty PDNameTreeNode with an empty COSDictionary.
481 Initializes a new instance of PDDictionaryWrapper with an empty COSDictionary.
482 Constructs a new PDPageLabelRange with an empty COSDictionary.
483 Retrieves metadata from the stream in the form of PDMetadata object. Handles different cases: returns null for COSNull, throws exception for unexpected types. @return PDMetadata object or null if no metadata is present or it's a COSNull
484 Fetches and returns metadata from a COS stream, or null if not found. @return PDMetadata object containing the metadata or null if none exists
485 Constructs a PDOutlineItem from a given COSDictionary. @param dic the dictionary containing outline item data
486 Initializes a new instance of PDDocumentInformation with an empty COSDictionary.
487 Initializes PDResources with new dictionaries and caches.
488 Constructs a new COSString with specified byte array. @param bytes input data as a byte array
489 Retrieves a COSName object for the given string, using caching and thread safety. @param aName the input string to retrieve a COSName object for @return a COSName object corresponding to the input string
490 Initializes LegacyPDFStreamEngine with various text operators.
491 Fetches the extended object stream from the COSObject, if it exists. @return PDObjectStream if extends stream is present, otherwise null
492 Checks if a COSName object, created from the given string, exists in the map. @param name String to be converted into COSName and checked for existence @return true if the corresponding COSName object is found; otherwise, false
493 Fetches an item by its PDF name key. @param key the PDF name of the item @return COSBase object corresponding to the key, or null if not found
494 Parses a COS name from the input stream, handling '#' escapes for hexadecimal characters. @return The parsed COS name or null if an error occurs during parsing @throws IOException If there is an issue reading from the input stream
495 Constructs a PDColor object from COSArray and PDColorSpace. Extracts color components and pattern name. @param array input data in COSArray format @param colorSpace the color space to be used for interpreting the color values
496 Fetches a filter by its name in both string and COSName formats. @param filterName the name of the filter to fetch @return the Filter object corresponding to the given name @throws IOException if there's an error while retrieving the filter
497 Creates a thumbnail image object from the given COS stream. @param cosStream the input stream containing image data @return PDImageXObject representing the created thumbnail
498 Writes a byte array to an OutputStream as ASCII or hexadecimal based on content. @param bytes the input byte array @param forceHex true to always write as hex, false for ASCII if possible @param output the destination stream
499 Initializes a PDFMarkedContentExtractor with specified encoding and adds relevant operators. @param encoding the character encoding to be used for text extraction
500 Fetches data to be signed from a PDF. Throws exception if not ready for signing. @return InputStream containing the bytes to sign or throws IllegalStateException
501 Begins a text segment, throws exception if already in text mode. @throws IOException if an I/O error occurs
502 Merges a diacritic into the text position. It determines where to insert the diacritic based on its overlap with characters. @param diacritic TextPosition object containing the diacritic to be merged
503 Checks if a given text position overlaps with this text position by at least 15%.
504 Checks if the current TextPosition completely contains another. @param tp2 Another TextPosition object to be checked @return True if it completely contains, False otherwise
505 Writes a paragraph separator by ending the current paragraph and starting a new one. @throws IOException if an I/O error occurs during writing
506 Writes an AffineTransform object to output stream as float operands. @param transform the AffineTransform object to be written @throws IOException if an I/O error occurs during writing
507 Retrieves the soft mask image object from a COS stream. @return PDImageXObject if soft mask exists (always DeviceGray), otherwise null
508 Initializes a PDFTextStripper with operators for handling marked content.
509 Writes an operand to the PDF output stream in a formatted way. @param name COSName object representing the operand @throws IOException if writing to the output stream fails
510 Fetches the mask associated with a PDF image object. @return PDImageXObject for the mask or null if not found or color key masked
511 Writes a COSName to the OutputStream and appends a space character. @param output the stream where the COSName will be written @param cosName the name object to write to the stream @throws IOException if an I/O error occurs while writing to the stream
512 Initializes a PDRectangle with the dimensions of a given BoundingBox. @param box The BoundingBox object providing coordinates for the rectangle.
513 Creates an output stream with the specified filter. @param filter The COSName filter to use for the output stream @return OutputStream object @throws IOException if an I/O error occurs
514 Constructs a push button field in a PDF form. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field @param parent the non-terminal field that contains this field
515 Initializes a PDCheckBox object from an AcroForm, field dictionary, and parent field. @param acroForm the form containing this field @param field the field's dictionary @param parent the parent field of this checkbox
516 Creates an output stream with default settings. @return An OutputStream object used for writing data @throws IOException if an input or output exception occurs
517 Constructs a PDRadioButton object. @param acroForm the AcroForm this field belongs to @param field the COSDictionary representing the field @param parent the non-terminal field that contains this radio button
518 Creates a PDChoice object from a form's field and dictionary. @param acroForm the PDF AcroForm @param field the COSDictionary containing field data @param parent the non-terminal field that contains this choice field
519 Constructs a PDF text field with given form, dictionary, and parent. @param acroForm the PDF acroform this field belongs to @param field the COS dictionary representing this field @param parent the non-terminal field that contains this one (if any)
520 Saves current graphics state by pushing a clone onto stack.
521 Transforms the bounding box of an appearance stream using its matrix and returns the result as a Rectangle2D object. @param appearanceStream the PDAppearanceStream to transform @return the transformed bounding box as a Rectangle2D object
522 Clips the current graphics state to a specified rectangle. @param rectangle The rectangle to use for clipping, if null no operation is performed.
523 Returns the left value from the array at index 2. @return The integer value at index 2 of the array
524 Returns the element at index 3 from an integer array. @return The integer value at index 3 in the array
525 Returns the right value from an integer array at index 4. @return The integer value at index 4 of the array
526 Retrieves the integer at index 5 from an internal array. @return The integer value at index 5 in the internal array
527 Fetches an integer value from a specific index in an array. @return Integer value at index 2 of the array
528 Fetches the integer value at index 3 from an internal array. @return The integer value at index 3 in the array
529 Checks if the array's second element is of type BOUNDED. @return true if it's BOUNDED, false otherwise
530 Checks if the second element in an array is of type BOUNDED. @return true if the second element is BOUNDED, false otherwise
531 Constructs a new COSDocument with an in-memory stream cache.
532 Checks if the second element in the array is of type 'TYPE_BOUNDED'. @return true if it matches, false otherwise
533 Saves and resets the current graphics stack, returning the previous state for restoration. @return Deque of PDGraphicsState objects representing the previous graphics stack
534 Retrieves the third element from an integer array. @return The value of the third element in the integer array
535 Adds a Type 1 font to the fontInfoList from a PFB file. @param pfbFile The PostScript Type 1 font file in PFB format.
536 Returns an unmodifiable version of this COSDictionary. @return a new, read-only COSDictionary instance
537 Initializes COSStream with a cache and read view for random access. @param streamCache the cache to use for the stream @param randomAccessReadView the read view for random access to the stream @throws IOException if an I/O error occurs during initialization
538 Initializes an empty COSStream.
539 Creates a new COSStream and adds it to the document's stream collection for later closure. @return A newly created COSStream object
540 Ends text mode and writes the END_TEXT operator. @throws IllegalStateException if called without prior beginText() call
541 Fetches the latest decoded result from a list. @return The last DecodeResult object in the list or a default if empty
542 Constructs a PDRectangle with specified coordinates and dimensions. @param x X-coordinate of the rectangle's bottom left corner @param y Y-coordinate of the rectangle's bottom left corner @param width Width of the rectangle @param height Height of the rectangle
543 Constructor for COSArrayList. Initializes a new instance with the given dictionary and key. @param dictionary COSDictionary object to initialize array from @param dictionaryKey COSName object representing the key in the dictionary
544 Initializes a new instance of COSArrayList with an empty COSArray and an empty ArrayList.
545 Parses a hexadecimal string into a COSString object, handling whitespace and malformed strings. @param hex the input hexadecimal string @return a COSString object representing the parsed hexadecimal value @throws IOException if the input string is not a valid hexadecimal string
546 Initializes an empty page destination array.
547 Saves the current document to an OutputStream. @param output The stream where the document will be saved @throws IOException if there is a problem writing to the stream
548 Retrieves and returns resources from COS object. Handles empty resource cases. @return PDResources object or null if not available or empty
549 Adds TrueType font to the list based on provided headers and metadata. Ignores invalid or bitmap fonts, logs warnings for skipped entries. @param fontHeaders Font header information @param file Font file @param hash Unique identifier for the font data
550 Adds a TrueType Collection (TTC) font file to the system. Handles loading and processing of TTC files, computes hash for verification. @param ttcFile the TrueType Collection file to add
551 Constructs a new PDTransparencyGroup from the given COSStream and ResourceCache. @param stream Input data stream for transparency group @param cache Resource cache to optimize resource access and management
552 Constructs an appearance stream from a COSStream. @param stream The input COSStream to create the appearance stream from.
553 Initializes PDTableAttributeObject with a COSDictionary. @param dictionary input data in a COSDictionary format
554 Constructs a PDPrintFieldAttributeObject from a COSDictionary. @param dictionary PDF dictionary containing print field attributes
555 Constructs PDListAttributeObject from COSDictionary. @param dictionary input data structure to initialize object
556 Constructs a PDLayoutAttributeObject from a COSDictionary. @param dictionary the input COSDictionary to create the object
557 Constructs a new PDTerminalField object with the given PDAcroForm. @param acroForm an instance of PDAcroForm for this terminal field
558 Default constructor for PDStructureElementNameTreeNode. Calls the parent class' default constructor.
559 Constructs an empty PDJavascriptNameTreeNode.
560 Initializes an empty PDEmbeddedFilesNameTreeNode.
561 Initializes an empty PDDestinationNameTreeNode.
562 Default constructor for PDOutlineNode class.
563 Constructs a new PDUserProperty with the given user attribute object. @param userAttributeObject contains attributes for the user property
564 Protected constructor for PDAttributeObject.
565 Constructs a new non-terminal field in an AcroForm. @param acroForm the parent AcroForm object for this field
566 Sets the text leading value and writes it to the output stream. @param leading The amount of additional space between lines of text @throws IOException if an I/O error occurs while writing to the stream
567 Sets the rendering mode and writes it to a stream. @param rm RenderingMode to be set @throws IOException if writing to the stream fails
568 Sets horizontal scaling for text rendering and writes to output stream. @param scale the desired horizontal scaling factor @throws IOException if an I/O error occurs during write operation
569 Sets word spacing and writes it to output with SET_WORD_SPACING operator. @param spacing the amount of spacing between words @throws IOException if error occurs while writing to output
570 Sets character spacing and writes it to a stream. @param spacing the desired character spacing value @throws IOException if writing operations fail
571 Ends marked content in an output stream by writing END_MARKED_CONTENT operator. @throws IOException if an I/O error occurs while writing to the output stream
572 Sets the miter limit for line joins. Throws exception if miter limit is less than or equal to 0. @param miterLimit the new miter limit value @throws IOException if an I/O error occurs while writing the data
573 Sets the line dash pattern for drawing operations. @param pattern an array of float values representing dash lengths @param phase a float value that specifies the offset into the dash pattern
574 Sets the line cap style with a given integer value, throwing an exception if the value is invalid. @param lineCapStyle An integer representing the desired line cap style (0-2) @throws IOException If there's an issue writing to the stream @throws IllegalArgumentException If the lineCapStyle value is outside of the valid range
575 Sets the line join style. Throws IOException or IllegalArgumentException if input is invalid. @param lineJoinStyle integer representing the line join style (0-2) @throws IOException if an I/O error occurs @throws IllegalArgumentException for invalid line join style values
576 Sets the width of the drawing line and writes it to a data stream. @param lineWidth the desired width for the line @throws IOException if an I/O error occurs while writing to the stream
577 Sets the text rise value and writes it to a stream. @param rise The vertical distance to raise or lower the text baseline from its normal position @throws IOException If an I/O error occurs while writing to the stream
578 Clips even-odd rule to the current path in a non-text block, throws exception if used within text mode. @throws IllegalStateException if called within a text block @throws IOException if there is an I/O error during writing
579 Closes the current path in graphics context, throwing exception if called within a text block. @throws IOException if an I/O error occurs while writing operator @throws IllegalStateException if method is called within a text block
580 Closes, fills and strokes even-odd path segments. Throws exception if used within text mode. @throws IllegalStateException if used within a text block
581 Closes, fills and strokes the current path in graphics context. Throws exception if called within text mode. @throws IllegalStateException if used within a text block @throws IOException for potential I/O errors during write operation
582 Fills and strokes even-odd rule if not in text mode, throws exception otherwise.
583 Fills and strokes the current path if not in text mode, throws exception otherwise. @throws IllegalStateException if called within a text block
584 Fills even and odd cells based on OperatorName.FILL_EVEN_ODD. Throws exception if used in text mode.
585 Fills the graphics context with non-zero pixels, throwing an exception if called in text mode. @throws IllegalStateException if fill is attempted within a text block @throws IOException if an I/O error occurs during write operation
586 Closes and strokes the current path. Throws exception if called within a text block. @throws IOException if an I/O error occurs while writing operator
587 Draws the current path, throwing exception if called within a text block. @throws IOException if an I/O error occurs while writing operator @throws IllegalStateException if stroke is not allowed within a text block
588 Draws a line to the specified coordinates. Throws an exception if called within a text block. @param x - the x-coordinate for the end of the line @param y - the y-coordinate for the end of the line @throws IllegalStateException if called within a text block
589 Writes a new line in the text mode. Throws exception if not in text mode.
590 Moves the drawing point to specified coordinates (x, y). Throws exception if used within a text block. @param x new horizontal coordinate @param y new vertical coordinate @throws IOException if writing operands or operator fails
591 Converts a COSString to a Calendar object. @param text the input COSString, may be null @return Calendar object if conversion is successful, or null if text is null
592 Creates a marked content object based on the given tag and properties. @param tag COSName indicating the type of marked content @param properties COSDictionary containing additional properties @return PDMarkedContent object (PDArtifactMarkedContent for ARTIFACT tag)
593 Fetches user password based on revision. Returns empty if rev is 5 or 6, otherwise calls getUserPassword234(). @param ownerPassword user's current password @param owner user identifier @param encRevision encryption revision number @param length password length @return byte array of the user password or empty if rev is 5 or 6 @throws IOException if an I/O error occurs
594 Initializes a TensorPatch with given control points and colors. @param tcp array of 2D points defining the shape @param color corresponding RGB values for each point
595 Fetches or sets and returns a default FontProvider instance if none exists. @return the current FontProvider instance, defaults to DefaultFontProvider if not set
596 Generates shaded triangles from a color-coordinate patch array. @param patchCC a 2D array of CoordinateColorPair objects @return List of ShadedTriangle objects representing the generated triangles
597 Initializes CoonsPatch with given control points and colors. @param points Array of Point2D representing control points @param color 2D float array representing RGB color values for control points
598 Draws a curve to the specified point, replicating final point. Throws exception if used within text block. @param x1 X-coordinate of control point @param y1 Y-coordinate of control point @param x3 X-coordinate of end point @param y3 Y-coordinate of end point
599 Clips the graphics context using the current path and non-zero winding rule, then ends the path. Throws exception if called within a text block. @throws IOException if an I/O error occurs while writing operators
600 Searches for objects in a data stream using BF (Best Fit) algorithm. @throws IOException if there is an error reading from the data source
601 Reads a string of specified length from the source, skipping spaces and certain special characters. @param length maximum length to read @return the read string or an empty string if no valid character is found
602 Reads and returns the next integer from the input stream, handling any number format exceptions and rewinding the stream. @throws IOException if an I/O error occurs or if the next data is not an integer
603 Reads and parses a long value from the input stream, handling exceptions. @return Parsed long value or throws IOException if parsing fails
604 Calculates and fixes the XRef offset for a given object offset. @param objectOffset The starting point for searching the XRef table/stream. @return Fixed XRef offset or 0 if not found. Throws IOException if error occurs during parsing.
605 Constructs a PDDocument from a COSDocument. @param doc the underlying COSDocument
606 Initializes graphics state with a given page's boundaries as the initial clipping path. @param page the rectangle representing the page boundaries.
607 Retrieves current access permission, initializing with owner permissions if not set. @return the current AccessPermission object
608 Computes revision number based on input version and access permissions. @param version the current version number @return the computed revision number
609 Encrypts data using RC4 algorithm. @param finalKey encryption key, @param input plaintext bytes, @param output stream for encrypted bytes
610 Writes input stream to an output stream using a byte buffer. @param data InputStream to be written @param output OutputStream where the data is sent @throws IOException if there's an issue with reading from or writing to streams
611 Performs SASL Prep on input string. @param str the input string to be prepared for SASL authentication @return the processed string according to SASL Preparation rules
612 Performs SASL preparation on stored string. @param str input string to be prepared @return the SASL-prepared string
613 Writes a custom CID-to-Unicode map to an output stream for PDF encoding. @param out the OutputStream where the data is written
614 Sets the named destination for this object. Throws IOException if an error occurs. @param dest The name of the destination to set. If null, clears the current destination.
615 Constructs a PDNamedDestination object with a specified COSString. @param dest a COSString representing the destination name
616 Sets the file name for this object. @param fileName The new name of the file to be set.
617 Restores the graphics state by popping font and color space stacks, then writes a RESTORE operator. Throws IllegalStateException if called within text objects. @throws IOException if an I/O error occurs during operation
618 Initializes an empty PDSimpleFileSpecification object with an empty COSString.
619 Fetches a value based on an attribute and returns it as a String. @return String value or "Off" if not found or default applies
620 Fetches string at specified index with default locale. @param index position of the string @return string at given index or null if not found
621 Saves current graphics state to stack, throws exception if in text mode. @throws IOException if an I/O error occurs while writing operator.
622 Moves the text cursor to a new line at specified offsets within current text mode. @param tx X-coordinate for the new line position @param ty Y-coordinate for the new line position @throws IOException if an I/O error occurs during operation
623 Validates and reads an expected string from the source, with optional space skipping. @param expectedString The string to validate and read @param skipSpaces Whether to skip spaces before and after reading the string @throws IOException If the expected string is not found in the source
624 Retrieves a COSObjectKey from cache or creates one if not found. @param num object number @param gen generation number @return COSObjectKey instance from cache or newly created
625 Reads a string from the source, stopping at end of name. @return The read string or an empty string if no characters were read. @throws IOException If there's an error reading from the source.
626 Sets stroking color in CMYK format. Throws exception if values are not within 0..1. @param c cyan value (0 = no cyan, 1 = full cyan) @param m magenta value (0 = no magenta, 1 = full magenta) @param y yellow value (0 = no yellow, 1 = full yellow) @param k key/black value (0 = no black, 1 = full black) @throws IOException if writing color fails
627 Sets the stroking color with a grayscale value, ensuring it's within 0..1 range. @param g Grayscale value (0=black, 1=white) @throws IOException if writing operations fail
628 Sets the non-stroking color using RGB values. Throws exception if values are not within 0..1. @param r red value (0..1) @param g green value (0..1) @param b blue value (0..1) @throws IOException if error occurs while writing color data
629 Sets non-stroking CMYK color with values between 0 and 1.
630 Sets the non-stroking color using a gray value (0..1). @param g gray value between 0 and 1; throws exception if outside this range @throws IOException if an error occurs while writing the color operator
631 Adds a rectangle to the canvas at given coordinates and dimensions. Throws exception if called within a text block. @param x top left corner x-coordinate, y top left corner y-coordinate, width, height of rectangle @throws IOException if there is an error writing to the output stream
632 Updates data with default settings.
633 Sets the update state of an object. @param flag boolean value to determine if updates are needed
634 Draws a cubic Bezier curve from the current point to (x3, y3) using control points (x1, y1) and (x2, y2). Throws an exception if called within text mode.
635 Draws a curve using the specified control points, throwing exception if used within a text block. @param x2 X-coordinate of first control point @param y2 Y-coordinate of first control point @param x3 X-coordinate of second control point @param y3 Y-coordinate of second control point @throws IllegalStateException if used within a text block
636 Parses XRef table from a given byte offset. Returns false for any parsing errors or invalid data. @param startByteOffset the starting byte offset to parse from @return true if parsing is successful, otherwise false @throws IOException if an I/O error occurs during parsing
637 Parses Xref trailers and sets cross-references in the provided resolver. @param resolver object to store parsed cross-reference data @throws IOException if an I/O error occurs while reading data
638 Searches for object stream offsets and returns a map of these offsets with their corresponding COSObjectKey. @return Map<Long, COSObjectKey> where Long is the offset and COSObjectKey is the unique identifier for the object @throws IOException if there's an issue reading from the source
639 Constructs a PDTransparencyGroup from the given PDStream. @param stream The input PDStream containing transparency group data
640 Returns an integer value from a specific index in an array. @return The integer value at index 2 of the 'array' object.
641 Sets the stroking color using RGB values. Throws exception if values are not within 0..1. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs
642 Removes a COSBase object from the collection and updates state if successful. @param o The COSBase object to be removed @return True if removal was successful, false otherwise
643 Parses and returns a COSString from a hexadecimal input stream, handling invalid characters and missing brackets.
644 Constructs a default PDRectangle with all dimensions set to 0.0f.
645 Constructs a PDRectangle with specified width and height at origin (0,0). @param width the width of rectangle @param height the height of rectangle
646 Returns a new PDRectangle object based on bbox coordinates.
647 Calculates the difference in rectangle dimensions. @return A PDRectangle object representing the differences in dimensions.
648 Sets an integer value at a specified index in the objects list and updates the state. @param index position to set the value @param intVal integer value to be set
649 Adds differences to the dimensions of a PDRectangle object. @param rectangle The original PDRectangle object. @param differences Array containing [left, bottom, right, top] adjustments. @return A new PDRectangle with adjusted dimensions or original if differences are invalid.
650 Applies differences to a rectangle and returns a new one. @param rectangle the original PDRectangle object @param differences an array of four floats representing x-differences @return a new PDRectangle object with applied differences, or the original if input is invalid
651 Applies padding to a rectangle and returns the new dimensions. @param box PDRectangle object to apply padding @param padding Amount of space to add around the rectangle's edges @return Newly padded PDRectangle object
652 Initializes a new instance of PDFXRefStream with a given COSDocument. @param cosDocument the document to create the COSStream within
653 Creates and returns a new PDObjectStream for the given document. @param document The PDDocument to create an object stream for @return A newly created PDObjectStream instance
654 Initializes a new PDF stream object within the specified document. @param document the parent PDDocument for the new stream
655 Returns a new PDRectangle with specified padding applied to the original rectangle. @param rectangle The input rectangle object @param padding The amount of padding to apply on all sides of the rectangle @return A new PDRectangle object with padding applied
656 Initializes PDFTextStripperByArea without separating by beads, throwing IOException if an error occurs.
657 Initializes a new instance of PDFMarkedContentExtractor with default settings.
658 Reads and validates the generation number. Throws an exception if invalid. @return a non-negative integer with max 5 digits @throws IOException if the number is negative or has more than 5 digits
659 Reads an object number from input stream. Validates and returns if within allowed range. @return a long representing the object number @throws IOException if number has more than 10 digits or is negative
660 Encrypts data using RC4 algorithm with the provided key from input to output stream. @param finalKey encryption key @param input input stream of data to be encrypted @param output output stream for encrypted data @throws IOException if an I/O error occurs during encryption process
661 Processes and merges text positions, handling overlapping and diacritics. @param text the TextPosition object to process
662 Processes a text position, handles duplicates and diacritics, and assigns to the correct article division. @param text TextPosition object to process
663 Begins a marked content block with the given tag name. @param tag COSName representing the tag for the marked content block @throws IOException if an I/O error occurs while writing data
664 Begins a marked content sequence with the specified tag and MCID, writing operands and operators to the output stream. @param tag the COSName of the tag for the marked content sequence @param mcid the unique identifier for the marked content sequence @throws IOException if an I/O error occurs while writing to the output stream
665 Sets and writes a marked content point with the given COSName tag. @param tag COSName object representing the marking tag @throws IOException if an I/O error occurs during writing operations
666 Writes a COSString to an OutputStream in bytes or hex format based on its forceHexForm property. @param string the COSString to be written @param output the stream where the string will be written to
667 Writes a byte array to an OutputStream. @param bytes the data to be written @param output the stream to which the data is written @throws IOException if an I/O error occurs during writing
668 Initializes PDFGraphicsStreamEngine with operators for a given PDPage. @param page the PDF page to be processed by the engine
669 Initializes a new PDStream with a COSDocument. @param document The input COSDocument to create a new PDStream from.
670 Initializes a PDStream with document, input stream and filters. @param doc the parent PDDocument @param input source of data for the stream @param filters COSBase objects to apply to the stream's data @throws IOException if there is an error reading from the input stream or writing to the output stream
671 Creates a raw COSStream from an InputStream and adds it to the PDDocument. @param document the PDF document to which the stream will be added @param rawInput the input stream containing the data for the stream @return the created COSStream object
672 Removes an item by its unique key and updates the state
673 Clears all items and updates the state of this object.
674 Removes an entry from a collection by index and updates the state. @param i the index of the entry to be removed @return the removed COSBase object or null if not found
675 Clears all objects and triggers an update.
676 Writes byte data to the given PDF appearance stream. @param data byte array containing data to be written @param appearanceStream stream for PDF appearance @throws IOException if an I/O error occurs during write operation
677 Constructs a PDAppearanceContentStream from the given PDAppearanceStream and compression flag. @param appearance the appearance stream to be used @param compress true if output should be compressed, false otherwise @throws IOException if an I/O error occurs while creating the output stream
678 Sets the text matrix for the current text state. Throws exception if not in text mode. @param matrix a 2D transformation matrix to be applied to the text space @throws IOException if an I/O error occurs while writing data
679 Transforms matrix and writes affine transform & operator, throws exception if in text mode. @param matrix to be transformed @throws IOException if writing fails
680 Updates different origin in COSUpdateState if incrementOrigin's state differs. @param updateState the state object to be updated if necessary
681 Sets `baseObject` to NULL and resets related state and parser.
682 Encodes an InputStream to an OutputStream using provided parameters. @param input source InputStream @param encoded destination OutputStream for the encoded data @param parameters COSDictionary containing encoding settings @param index specific index used in the encoding process @throws IOException if there is an error during reading or writing
683 Creates an instance of PDDefaultAttributeObject with default values.
684 Initializes PDUserAttributeObject with user properties owner.
685 Default constructor for PDStandardAttributeObject.
686 Constructs a new instance of PDOutlineItem. Inherits from superclass.
687 Initializes PDVariableText with an AcroForm. @param acroForm The form containing variable text elements.
688 Initializes an export format attribute object from a COSDictionary. @param dictionary contains export format attribute data
689 Fetches the appearance stream for this PDF entry. Throws exception if it's not a stream. @return PDAppearanceStream object representing the appearance stream @throws IllegalStateException if this entry is not an appearance stream
690 Adds a TrueType or OpenType font from the provided file. @param ttfFile the file containing the font (either .ttf or .otf)
691 Constructs a type 6 shading object from its dictionary definition. @param shadingDictionary COSDictionary containing shading properties
692 Constructs a PDShadingType7 object from a COSDictionary. @param shadingDictionary dictionary containing shading data
693 Constructs a PDComboBox object from AcroForm, field dictionary and parent field. @param acroForm the form containing this field @param field the COSDictionary representing the field @param parent the parent of this field in the form hierarchy
694 Constructs a PDListBox object. @param acroForm the AcroForm containing this field @param field the COSDictionary representing this field @param parent the parent non-terminal field of this field
695 Constructs a new COSParser with the given parameters. Delegates to another constructor for further processing. @param source RandomAccessRead object containing data to parse @param password String used for decryption if necessary @param keyStore InputStream of keystore for additional encryption keys @param keyAlias String alias of the key in the keystore @throws IOException if an I/O error occurs while reading data
696 Creates and returns an output stream from the internal stream. @return OutputStream for writing data @throws IOException if an I/O error occurs during creation of the stream
697 Sets the origin document state and updates related objects. @param originDocumentState the new document state to set @param dereferencing whether to perform dereferencing during update
698 Saves data to a specified file. @param fileName the file where data will be saved @throws IOException if an I/O error occurs during saving
699 Checks if the provided password matches the user's password for specific encryption revisions. @param password The password to check @param user The user data @param owner The owner data @param permissions User permissions @param id Unique identifier @param encRevision Encryption revision (2-4 or 5-6) @return True if password matches, false otherwise. Throws IOException for unknown revisions.
700 Locates and returns a FontBoxFont based on format & PostScript name, with fallback strategies for damaged PDFs. @param format the font format @param postScriptName the PostScript name of the font to find @return the found FontBoxFont or null if not found
701 Converts a COSString object to a Calendar object. @param text Input string in the form of a COSString object @return Calendar object if conversion is successful, null otherwise
702 Parses a dictionary value from input and references it from pool if valid. @return COSBase object or NULL if invalid or not found in pool
703 Computes an encrypted key based on various parameters and encryption revision. @param password byte array of the password @param encRevision specifies the encryption revision to use (2-6) @return byte array representing the encrypted key
704 Fetches offsets of COS objects in BF search. Triggers search if not already done. @return Map with COS object keys and their corresponding offsets @throws IOException if an I/O error occurs during the search
705 Constructs a PDAppearanceContentStream with a given PDAppearanceStream and its output stream. @param appearance the PDAppearanceStream to be used @throws IOException if there is an issue creating the output stream
706 Writes a page of text to the output, handling formatting and line breaks. @throws IOException if an error occurs while writing to the output stream
707 Finds and returns a FontBoxFont by its PostScript name in various formats. @param postScriptName the PostScript name of the font to find @return FontBoxFont object or null if not found in supported formats
708 Verifies if the given password is valid for a user with specified attributes. @param password to be checked @param user, owner, id bytes and permissions for user authentication @return true if password is correct, false otherwise @throws IOException if there's an issue with input/output operations
709 Validates the owner password based on encryption revision. @param ownerPassword byte array of owner's password @param user byte array of user data @param owner byte array of owner data @param encRevision encryption revision number @return true if password is valid, false otherwise @throws IOException for unknown encryption revisions
710 Initializes a PDF Parser with source, password, keystore, and alias. @param source RandomAccessRead input for parsing @param decryptionPassword Password for decrypting the document @param keyStore InputStream of the keystore @param alias Alias to be used from the keystore @throws IOException if there is an error reading the source or keystore
711 Parses a CharSequence into an InstructionSequence. @param text the input sequence to parse @return an InstructionSequence object representing the parsed instructions
712 Sets the original document state with an option to skip validation. @param originDocumentState the new document state to be set
713 Removes and returns the value associated with the specified key from this map. @param key the key of the entry to remove @return the previous value associated with the key, or null if not found
714 Initializes a PDFormContentStream with the given PDFormXObject for drawing operations. @param form The PDFormXObject to be used for drawing operations. @throws IOException if an I/O error occurs while creating the output stream.
715 Clears all data from the map and actuals lists.
716 Initializes a new instance of PDPrintFieldAttributeObject and sets its owner to OWNER_PRINT_FIELD.
717 Initializes a new instance of PDListAttributeObject and sets its owner to OWNER_LIST.
718 Constructs a new PDLayoutAttributeObject and sets its owner to OWNER_LAYOUT.
719 Initializes COSParser with RandomAccessRead source. @param source input stream for parsing @throws IOException if an I/O error occurs
720 Constructs a content stream for a given document and appearance stream. @param doc the PDF document @param appearance the appearance stream to associate with the content stream @throws IOException if an I/O error occurs while creating the output stream
721 Sets line width if it's not equal to 1, as Acrobat defaults to 1 and doesn't write a line width command. @param lineWidth the desired line width; not applied if equal to 1 @throws IOException if an I/O error occurs while setting the line width
722 Draws a paperclip shape on the given PDF content stream. @param contentStream The PDF content stream to draw onto. @throws IOException If an I/O error occurs while drawing.
723 Draws a circle on the given content stream at (x, y) with radius r using Bezier curves. @param cs PDAppearanceContentStream to draw on @param x X-coordinate of center @param y Y-coordinate of center @param r Radius of circle @throws IOException if an I/O error occurs while drawing the circle
724 Draws a circle using given parameters and appearance content stream.
725 Draws a diamond shape on the given content stream at specified coordinates and radius. @param cs PDF appearance content stream @param x X-coordinate of the diamond's center @param y Y-coordinate of the diamond's center @param r Radius of the diamond @throws IOException if an I/O error occurs while drawing
726 Draws a shape with specified line width, stroke and fill options. @param lineWidth width of the lines to be drawn @param hasStroke whether to apply stroke to the shape @param hasFill whether to apply fill to the shape
727 Creates a PDImageXObject from an input stream and sets its properties. @param document the PDF document @param encodedStream the input stream containing image data @param cosFilter the COS filter to apply @param width the width of the image in pixels @param height the height of the image in pixels @throws IOException if an I/O error occurs
728 Draws an arrow on a PDF content stream at given position with specified length. @param cs PDAppearanceContentStream object for drawing @param x x-coordinate of the arrow's base point @param y y-coordinate of the arrow's base point @param len length of the arrow @throws IOException if an I/O error occurs during drawing
729 Removes and returns the element at the specified position in this list. Throws exception if operation is performed on a filtered list. @param index of the element to be removed @return the removed element @throws UnsupportedOperationException if list is filtered
730 Initializes PDTableAttributeObject and sets its owner to OWNER_TABLE.
731 Constructs a new PDStream object with specified document, input stream, and filters. @param doc the PDF document to which the stream belongs @param input the input stream for the stream data @param filters an array of COSBase objects representing the filter pipeline @throws IOException if there is an error reading from the input stream
732 Fetches the bounding box of this rectangle. @return The PDRectangle object representing the bounding box
733 Constructs an immutable rectangle with specified width and height. @param width The width of the rectangle as a float value @param height The height of the rectangle as a float value
734 Parses a COS string from the input stream, handling escaped characters and braces. @return a COSString object representing the parsed string @throws IOException if there's an issue with reading the input or parsing errors occur
735 Sets the current page number in an array at index 0. @param pageNumber the new page number to be set
736 Removes the first occurrence of an object from the List if not filtered. @param o Object to be removed @return true if object was found and removed, otherwise false
737 Sets the high value at index 2 in an array. @param high The new high value to be set in the array.
738 Initializes a PageDrawer with specified parameters. @param parameters object containing drawer configuration details. @throws IOException if an I/O error occurs during initialization.
739 Internal method to display text using current font settings and apply subsetting if necessary. @param text the string to be displayed @throws IOException if an I/O error occurs
740 Writes a COS string to the given output stream. @param output target output stream @param cosString the COS string to be written @throws IOException if an I/O error occurs during writing
741 Initializes PDMetadata with a given PDDocument and sets its type and subtype. @param document the input PDDocument to be used for metadata initialization
742 Encrypts or decrypts input stream data based on provided parameters and writes to output stream. @param objectNumber object identifier @param genNumber generation number @param data input data stream @param output output data stream @param decrypt true for decryption, false for encryption
743 Creates an embedded file object in a PDF document. @param document the parent PDF document
744 Saves data to a file specified by its name. @param fileName name of the file to be saved @throws IOException if an I/O error occurs while saving
745 Recursively collects and updates COSArray entries. @param array the COSArray to process @return true if any entry or descendant requires an update, false otherwise
746 Constructs a PDStream with a given document, input stream and filter. @param doc the PDF document to which the stream belongs @param input the input stream containing the data for the stream @param filter the name of the filter used to encode the data in the stream @throws IOException if an I/O error occurs while reading the input stream
747 Constructs a PDStream object from an input stream. @param doc the PDDocument to which this stream belongs @param input the input stream containing the data for the stream @throws IOException if there is an error reading from the input stream
748 Validates and checks cross-reference offsets, replaces with brute force results if invalid. @throws IOException if I/O operations fail during validation or replacement
749 Constructs a PDImageXObject using a given PDDocument. @param document the source document containing image data
750 Initializes a PDXObject with the specified document and subtype. @param document The PDF document to which this object belongs @param subtype The COSName specifying the type of XObject (e.g., image, form)
751 Initializes PDMetadata for a given document and input stream. Sets the type and subtype of metadata. @param doc the PDF document @param str the input stream containing metadata @throws IOException if an I/O error occurs
752 Draws the specified style on a content stream based on given parameters. @param style The type of line end to draw (e.g., arrow, butt, diamond). @param cs Content stream where drawing is performed. @param x X-coordinate for the drawing. @param y Y-coordinate for the drawing. @param width Width of the line to draw. @param ending Determines if it's an ending style.
753 Checks if the provided password matches the owner's password for a given file. @param password the input password to check @param user user data, owner data, permissions, id and encryption details are required for verification @return true if password is correct, false otherwise
754 Constructs a PDFormXObject from a PDDocument and initializes it with a COSName of FORM. @param document the parent PDDocument for this XObject
755 Dereferences and returns the COSBase object if not already done. @return The dereferenced COSBase object or null if an error occurs.
756 Updates the state of a COSBase object. Sets origin document state for COSUpdateInfo objects. @param child the COSBase object to update
757 Sets the trailer dictionary and updates its origin document state. @param newTrailer COSDictionary containing trailer data to be set
758 Collects and handles updatable objects like dictionaries, arrays, or specific objects. @param base the COSBase object to be collected and handled @return true if collection is successful, false otherwise
759 Writes regional pages by iterating through regions, setting character and output data, then calling the parent's writePage method.
760 Initializes an FDFParser with a RandomAccessRead source. @param source the data source to parse FDF from @throws IOException if there is an issue reading from the source
761 Creates a PageDrawer object with specified parameters and annotation filter. @param parameters Configuration settings for the PageDrawer @return Configured PageDrawer object @throws IOException If there is an issue creating or configuring the PageDrawer
762 Displays given text and writes operator name to output stream. @param text the string to be displayed @throws IOException if an I/O error occurs during writing operation
763 Displays text with positioning using an array consisting of Strings and Floats. @param textWithPositioningArray - Object array containing text (Strings) and positions (Floats). @throws IOException if there's an issue writing the output.
764 Constructs a PDEmbeddedFile object with the given document and input stream. Sets the type of the COS object to EMBEDDED_FILE. @param doc PDDocument object @param str InputStream for data @throws IOException if an I/O error occurs
765 Constructs an embedded file object with the specified document, input stream, and filter. @param doc The PDF document to which this embedded file belongs. @param input The input stream from which data is read for the embedded file. @param filter The COSName filter used during construction of the embedded file. @throws IOException if an I/O error occurs.
766 Writes a COSBase token to the output stream. @param base The COSBase object to be written @throws IOException if an I/O error occurs during writing
767 Initializes a PDFParser with a source and optional decryption password. @param source RandomAccessRead input for the parser @param decryptionPassword String used to decrypt encrypted PDF files
768 Encrypts data in a given COSStream if it contains data. @param stream COSStream to be encrypted @param objNum object number for encryption @param genNum generation number for encryption @throws IOException if an I/O error occurs during encryption
769 Decrypts a COSString if encrypted with a filter other than identity. @param string the input encrypted or unencrypted COSString @param objNum object number for decryption context @param genNum generation number for decryption context @return Decrypted COSString or original if not encrypted with a filter other than identity
770 Initializes FileSystemFontProvider and scans local system for fonts. Caches found fonts for future use. @param cache FontCache object to store fetched font information
771 Prepares and encodes an image object for a PDF document. @param byteArray raw image data @param width image width in pixels @param height image height in pixels @return encoded PDImageXObject ready to be used in the document @throws IOException if encoding or input/output operations fail
772 Encrypts a given string using object and generation numbers. @param string the input COSString to be encrypted @param objNum the object number for encryption @param genNum the generation number for encryption @return an encrypted COSString
773 Decrypts a given stream if it is not metadata or identity-filtered XREF.
774 Constructs a new PDExportFormatAttributeObject with the specified owner. @param owner the unique identifier of the object's owner
775 Retrieves and manages an object key for a COSBase object. @param obj the COSBase object to get or create a key for @return the corresponding COSObjectKey
776 Checks if 'value' is an object that refers back to 'parent'. Logs a warning if so. @param parent the potential referrer object @param value the potential referred-to object @return true if there's a self-reference, false otherwise
777 Checks if a given value exists in the collection, including indirect references. @param value Object to search for @return true if the value is found, false otherwise
778 Accepts a visitor and applies it to the encapsulated object or NULL if none exists. @param visitor The ICOSVisitor to be applied. @throws IOException If an I/O error occurs during visitation.
779 Closes all open I/O streams and resources, logging any errors.
780 Retrieves the linearized dictionary from the pool, if present. @return Linearized COSDictionary or null if not found in the pool.
781 Retrieves the key for a given value in the COSName-COSBase map. @param value The object to search for in the map values @return The corresponding COSName key or null if not found
782 Finds the index of a specific object in the list. @param object The COSBase object to search for @return Index if found, otherwise -1
783 Retrieves an object from the dictionary using a key. Handles indirect objects and null values. @param key unique identifier for the object in the dictionary @return COSBase object or null if not found or is a null object
784 Retrieves the length from a COSBase object. @param lengthBaseObj base object containing length information @return COSNumber representing the length, or null if not found or invalid type @throws IOException if there's an issue reading the length object
785 Collects updated dictionary entries, excluding direct or different origin ones. @param dictionary the COSDictionary to collect from @return true if a child entry demands parent update, otherwise false
786 Constructs a new PDTransparencyGroup object. @param document The parent PDF document
787 Initializes a new PDAppearanceStream instance with the given PDDocument. @param document The parent PDF document object to associate this stream with.
788 Creates a PDImageXObject from a BufferedImage using JPEG compression. @param document the PDF document to which the object will be added @param image the source image as a BufferedImage @param quality the desired quality of the compressed image (0-1) @param dpi the desired resolution in dots per inch @return a PDImageXObject representing the compressed image @throws IOException if an I/O error occurs during compression or writing to document
789 Constructs a PDFParser with a given RandomAccessRead source and an empty password. @param source input data to parse as a PDF @throws IOException if there's an issue reading from the source
790 Collects a COSObject and updates its state based on various conditions. @param object the COSObject to collect @return true if child demands parent update, otherwise false
791 Initializes a NormalXReference with byte offset, key, and object. Determines if object is an object stream. @param byteOffset byte offset of the reference @param key unique identifier for the COSObject @param object the COSBase object which may or may not be a COSStream
792 Retrieves object at a specific index from a collection. @param index position in the collection @return COSBase object or null if it's a COSNull instance
793 Fetches and returns a set of COSBase objects, initializing from the origin if not already done. @return A set of COSBase objects
794 Adds a COSBase object to the collection and updates its state. @param object The COSBase object to be added and updated.
795 Adds a COSBase object to the collection at a specific index. Handles direct and indirect dictionaries/arrays differently. @param i index for insertion @param object COSBase object to be added
796 Sets a COSBase object at given index and updates its state
797 Sets an item in the dictionary with a key-value pair. Handles null values and updates state accordingly. @param key unique identifier for the item @param value data to be associated with the key, can be COSDictionary or COSArray, otherwise just stored as is
798 Removes the given object from the collection. @param o The COSBase object to be removed @return True if the object was found and removed, false otherwise
799 Updates the children elements of an object using a COSArray. @param children array containing new child elements
800 Prepares a stream object by adding its key and value to respective lists. @param key the unique identifier for the object @param object the COSBase object to be prepared for streaming
801 Checks if the given COSBase object exists in the pool. @param object The COSBase object to search for @return True if the object is found, false otherwise
802 Retrieves the key for a given COSBase object from the object pool. @param object the input COSBase object @return the corresponding COSObjectKey or null if not found
803 Retrieves a list of colorant names from the underlying data structure. @return List of colorant names as strings
804 Returns the alternate color space, creating it if not already available. @return The alternate color space object @throws IOException If there's an error retrieving or creating the object
805 Retrieves a BlendMode instance based on the provided COSBase object. @param cosBlendMode base object containing blend mode information @return BlendMode instance or NORMAL if not found
806 Retrieves a float value from the dictionary. @param key The unique identifier for the float value. @param defaultValue The value to return if the key is not found. @return The float value associated with the key or defaultValue if not found.
807 Retrieves a color by its index from an array, returns as PDGamma object or null. @param index position of the color in the array @return PDGamma object if found, otherwise null
808 Retrieves the maximum float value from a range array at a specific index. @return Maximum float value in the range array
809 Returns the minimum value from a range array at a specified index. @return The float value of the minimum in the range at the given index
810 Converts objects to a list of Integers, replacing non-numbers with null. @return List of Integers representing the contained COSNumber instances or null if not a number
811 Sets a float item in the dictionary associated with the provided key. If value is null, removes the item from the dictionary; otherwise, sets or updates it. @param key unique identifier for the item @param value Float object to be set/updated or null to remove item
812 Initializes a new instance of the PDExtendedGraphicsState class with default settings.
813 Sets the border of the object using a COSArray. @param borderArray defines the border properties as an array
814 Sets a rectangle object in the dictionary using its COS array representation. @param rectangle the PDRectangle object to be set in the dictionary
815 Initializes PDAnnotation with a given COSDictionary. Checks and sets the dictionary's type to ANNOT if not already set. @param dict the COSDictionary for the annotation
816 Initializes a new instance of PDAnnotation with default settings.
817 Sets the relationship to either 'P' (parent) or 'C' (child). Throws exception for invalid values. @param relationship a COSName object that can be either 'P' or 'C'
818 Sets the COSBase object 'b' as an item with key "B" in the 'action' object. @param b The COSBase object to be set.
819 Sets the 'D' attribute of an object with the provided COSBase value. @param d the new value for the 'D' attribute as a COSBase object
820 Sets the fields of an action using a COSArray. @param array COSArray containing field values to be set
821 Sets the sound stream for an action in a COS document. @param sound the COSStream object representing the sound to be set
822 Sets an array of fields to the current action object. @param array Array containing field data to be added
823 Sets the value of 'H' property in action item to a boolean value. @param h Boolean value to be set for 'H' property
824 Sets the 'T' item in the action object to the provided COSBase value. @param t The new COSBase value for the 'T' item.
825 Sets the transfer function of type COSBase in the dictionary. @param transfer2 the new transfer function to be set
826 Sets the transfer object in the dictionary using the COSName.TR key. @param transfer The new transfer object to be added to the dictionary.
827 Retrieves the page number from an array. Returns -1 if not found or invalid.
828 Retrieves the first page from a PDF document. @return PDPage object if it exists, otherwise null
829 Sets the blend mode for the object using a COSName from the provided BlendMode. @param bm the BlendMode to be used in setting the blend mode of the object
830 Fetches and returns the colorant's name from an array. @return The colorant's name as a String
831 Converts objects to a list of Float values, replacing non-numbers with null. @return List of Float values or null for non-number objects
832 Sets the rich text value in the object or removes it if null. @param richTextValue string to be set as rich text; if null, removes existing rich text
833 Sets and updates the decode values in the COS object. @param decodeValues an array of decoding values to set
834 Sets the transformation matrix using an AffineTransform object and updates the COSObject. @param transform AffineTransform object containing the new matrix values
835 Sets the visibility policy for this object in the COS dictionary. @param visibilityPolicy a COSName representing the new visibility policy
836 Adds all elements of the provided COSArray to an existing list and updates the state. @param objectList array of objects to be added
837 Sets or removes the bounding box (bbox) for the object in the COS array. @param bbox The rectangle to set as the bbox; if null, removes the bbox
838 Adds the first intermediate curl to a path at a given angle and position. @param angleCur current angle; r radius; alpha angle adjustment; cx,cy coordinates
839 Generates a series of intermediate curl template points based on angle and radius. @param angleCur The current angle in degrees. @param r The radius for generating the arc segments. @return An array of Point2D.Double objects representing the generated points. @throws IOException If an error occurs during file reading or writing.
840 Initializes an Optional Content Membership Dictionary with a predefined type.
841 Creates an image object for a PDF document from a BufferedImage. @param document the PDF document @param image the source BufferedImage @param quality compression quality (0-1) @return PDImageXObject to be added to the PDF document
842 Converts objects to a float array. If an object is not a COSNumber, it's converted to 0. @return A new float array with the converted values
843 Sets the background of an object using a COSArray. @param newBackground the new background to be set as a COSArray
844 Sets the color space for this object and updates its dictionary accordingly. @param colorSpace the new color space to be set; if null, removes the color space
845 Sets new coordinates for the COS object and updates its internal representation. @param newCoords a COSArray containing new coordinate values
846 Sets and updates the domain in COS object with a new array of domains. @param newDomain an array containing new domain information
847 Sets and updates the EXTEND property of the COSObject with a new array value. @param newExtend the new array to set as the EXTEND property
848 Sets and updates the domain in the COSObject with a new array of domains. @param newDomain a COSArray containing new domain information
849 Sets the transformation matrix for this object using an AffineTransform. @param transform AffineTransform representing the new matrix values
850 Sets the default style string for the COS object or removes it if null is provided. @param defaultStyleString the new default style string to be set; if null, removes the existing one
851 Sets the bounding box for this object and updates its dictionary item accordingly. @param newBBox New bounding box to set; if null, removes the item from the dictionary
852 Sets a new array of functions and updates the COS object accordingly. @param newFunctions an array of COS functions to be set
853 Sets the origin of the coordinate system using a float array. @param coordSystemOrigin an array representing the new origin coordinates
854 Initializes a new PDF thread dictionary as per the PDF specification.
855 Sets the transition direction for this PDTransition object. @param direction the desired transition direction (an enum value from PDTransitionDirection)
856 Sets the duration of an object in the COS (Carousel Object Specification). @param duration The new duration value as a float.
857 Sets the fly scale value in the COS object. @param scale floating-point value to set as the fly scale
858 Sets the fly area to be either opaque or transparent based on the provided boolean value. @param opaque if true, sets the fly area to be opaque; otherwise, it's set to be transparent.
859 Sets rectangular differences for the COS object. @param differenceLeft left difference @param differenceTop top difference @param differenceRight right difference @param differenceBottom bottom difference
860 Sets the callout values for a COS object in an array format. @param callout float array containing callout values
861 Sets the ink list in the COS object or removes it if null. @param inkList a 2D float array representing the ink list to set; null to remove
862 Sets the line coordinates in the COS object using an array of floats. @param l float array containing line coordinates
863 Determines the open mode for a new window based on COS object settings. @return OpenMode (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
864 Fetches and returns an object (Dict/Str/Array) named 'T' from the action dictionary. @return COSBase object (Dict/Str/Array) named 'T', or null if not found
865 Retrieves the open mode (new window or same) from COSObject dictionary. @return OpenMode enum value based on the setting in COSObject
866 Retrieves the open mode for a new window based on COS object settings. @return OpenMode (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
867 Retrieves a named destination from the dictionary. @return PDNamedDestination object or null if not found or invalid type
868 Fetches and returns the contents from a dictionary as bytes. @return Byte array containing content or empty if not found/not a string
869 Retrieves an XFA resource from the PDF document if it exists. @return PDXFAResource object or null if not available in the dictionary
870 Retrieves an inheritable attribute by key from dictionary or parent, falling back to acroForm if not found. @param key the COSName of the attribute @return the corresponding COSBase object or null if not found
871 Fetches and returns the backdrop color as a COSArray object. If not already fetched, it retrieves from the COS object's dictionary using "BC" key.
872 Retrieves and returns the COSBase object associated with 'V' from the dictionary of the COSObject.
873 Fetches and returns the default value from the underlying COS object's dictionary. @return The default value as a COSBase object or null if not found
874 Closes the PDF source and visual signature resources safely. @throws IOException if an I/O error occurs while closing resources.
875 Retrieves the unique key associated with a given COSBase object. @param object The COSBase object for which to retrieve the key @return The COSObjectKey corresponding to the input object
876 Checks if the specified COSBase object exists in the pool. @param object The COSBase object to search for in the pool @return true if the object is found, false otherwise
877 Creates and prepares a list of COSWriterObjectStream objects for writing data. @return List<COSWriterObjectStream> containing prepared stream objects
878 Retrieves a COSName object from the dictionary. @param key the key to look up in the dictionary @param defaultValue value returned if key is not found or not a COSName
879 Puts a COSBase object into the pool with an associated key. Avoids mixing up similar base objects with different keys. @param key unique identifier for the object @param object the COSBase object to be stored in the pool @return actualKey used for storage or null if object is null or already exists with same key
880 Retrieves a string representation of the object associated with the given key. @param key unique identifier for the object in the dictionary @return String representation or null if not found or not COSName/COSString type
881 Retrieves string value from dictionary using the provided key. @param key unique identifier of the dictionary object @return String value or null if not found or not a COSString
882 Converts basic types from a COSDictionary to a Map<String, Object>. @param map the input COSDictionary @return a Map with converted objects or null if input is null @throws IOException if an unsupported object type is encountered
883 Fetches and returns the string value of a dictionary object, or an empty string if not found. @return String representation of the dictionary object's value or an empty string if not found
884 Retrieves and returns an option as a string from the first object in 'option'.
885 Retrieves transfer object from dictionary, validates its structure. @return COSBase object if it's a valid transfer array, otherwise null
886 Retrieves a Float object from the dictionary using a given key, if it exists. @param key unique identifier in the dictionary @return Float value or null if not found or not a COSNumber
887 Retrieves content streams from the page dictionary object, if any exist. @return Iterator over PDStream objects representing content streams
888 Checks if the page has any content, either in a stream or an array. @return true if the page contains data, otherwise false
889 Retrieves and organizes class names with their revisions from a COSObject. @return Revisions<String> object containing class names and their revision numbers
890 Fetches and returns the K object from the underlying COS dictionary. @return The K object from the COS dictionary or null if not found
891 Retrieves the value object from the underlying COS object's dictionary. @return The COSBase object corresponding to the 'V' key in the dictionary.
892 Checks if metadata should be encrypted in a COSObject. @return boolean, true if encryption is required, false otherwise (default is true)
893 Fetches the owner's encryption key from a dictionary object. @return byte array of encryption key or null if not found, truncated to 32 bytes @throws IOException if an I/O error occurs while fetching the key
894 Fetches and returns the user encryption key as a byte array. @return User encryption key or null if not found, truncated to 32 bytes
895 Retrieves permission bytes from the dictionary object. @return byte array containing permissions or null if not found @throws IOException if an error occurs during retrieval
896 Retrieves the page number from a COS annotation object. @return Integer representing the page number or null if not present
897 Fetches and validates the COSBase value from a field. @return COSBase object if it's of a known type, throws IOException for unknown types, or returns null if not found
898 Retrieves the transfer object from a dictionary. Validates that the object is a COSArray of size 4, otherwise returns null. @return The transfer object or null if conditions are not met
899 Fetches and returns the field flags as an Integer. @return Field flags as Integer, or null if not found.
900 Retrieves clear field flags for a field. @return Integer value of clear field flags, or null if not set
901 Fetches and returns the widget field flags as an Integer. @return Widget field flags or null if not found
902 Retrieves and returns the Set Widget Field Flags as an Integer. @return Set Widget Field Flags or null if not found
903 Retrieves clear widget field flags as an Integer value from a COSNumber object. @return Integer value of the clear widget field flags or null if not found
904 Fetches and returns the default width. If not set, it's fetched from dict or defaults to 1000.
905 Fetches and returns the color space from the dictionary. @return The PDColorSpace object or null if not found in the dictionary. @throws IOException If there's an error accessing the dictionary.
906 Retrieves the color space from given resources or creates one if not already defined. @param resources PDResources object containing color space data @return PDColorSpace object representing the color space @throws IOException if an error occurs while reading the color space data
907 Constructs a PDOptionalContentGroup from a COSDictionary, checking if it's the correct type. @param dict COSDictionary to construct from; must be of type 'COSName.OCG' @throws IllegalArgumentException if provided dictionary is not of type 'COSName.OCG'
908 Constructs a PDOptionalContentMembershipDictionary from a given COSDictionary. Throws exception if the dictionary is not of type 'OCMD'. @param dict the input COSDictionary to be used for construction
909 Retrieves the overprint mode from a dictionary object. @return Integer representing the overprint mode, or null if not found
910 Retrieves the soft mask from the dictionary object. @return Soft mask object or null if not available
911 Retrieves the set field flags of a COSNumber object in a dictionary, or returns null if not found.
912 Retrieves default appearance string from an option object. @return Default appearance string as a String.
913 Extracts string values from a COS object based on the given name. @param name identifier for the object to extract values from @return List of extracted strings or an empty list if not found or not applicable
914 Constructs a new PDTextField within the given PDAcroForm and sets its field type to TX. @param acroForm the form that will contain this text field
915 Sets the highest imported object number in the document.
916 Initializes a PDF Seed Value Certificate with its predefined type and sets it as direct.
917 Sets the time stamp in a dictionary using the provided PDSeedValueTimeStamp object. @param timestamp the time stamp to be set; if null, no operation is performed
918 Sets the MDP (Media Decryption Process) in the dictionary with a given PDSeedValueMDP object. @param mdp The PDSeedValueMDP object containing the COSObject for MDP
919 Initializes a new PDSignature object with TYPE set to SIG in its COSDictionary.
920 Sets a filter in the dictionary using a COSName object. @param filter a CosName object representing the filter to be set
921 Initializes a PDSeedValue object and sets its type as 'SV' with direct objects.
922 Sets the dash style of the object using a COSArray. @param dashArray array defining the dash pattern to be applied
923 Initializes a PDAppearanceDictionary with a required 'N' entry.
924 Sets the quad points for the object in a CosArray format. @param quadPoints an array of float values representing the quad points
925 Sets the rectangular differences for the object's COSArray. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
926 Sets the parent of a PDAnnotationMarkup object using its COSObject. @param annot the PDAnnotationMarkup object to set as parent
927 Sets vertices in COSObject using provided float array of points. @param points float array representing vertex coordinates.
928 Sets vertices of a COS object with given float array of points. @param points an array containing the coordinates for each vertex
929 Sets rich content for the COS object using provided string. @param rc String containing the rich content to be set
930 Sets the quadrilateral points for a COS object in an array format. @param quadPoints float array containing four sets of x and y coordinates
931 Sets the type of the object in the COS dictionary. @param type The new COSName type to be assigned
932 Sets a filter for the dictionary object using a COSName identifier. @param filter COSName representing the filter to be applied
933 Sets the sub-filter in the PDF document's dictionary. @param subfilter COSName representing the sub-filter to be set
934 Initializes a PDSignatureField with the given PDACroForm, sets field type to SIG, and configures the first widget. @param acroForm the form this signature field belongs to
935 Retrieves an object from dictionary using a string key. @param key the name of the object to retrieve @return COSBase object associated with the key or null if not found
936 Creates a PDDestination object based on the provided COSBase. @param base the input data for creating the destination @return a PDDestination object or null if base is null, throws IOException if conversion fails
937 Returns a string representation of the COSDictionary object. Handles IOException by logging and returning an error message.
938 Retrieves a COSArray object from the dictionary using a given key. @param key unique identifier of type COSName to locate the COSArray @return COSArray object if found, otherwise returns null
939 Retrieves a COSStream object from the dictionary using a given key. @param key unique identifier for the COSStream in the dictionary @return COSStream object if found, otherwise returns null
940 Retrieves a COSDictionary object for the given key. @param key unique identifier of type COSName @return COSDictionary if found, or null otherwise
941 Retrieves a COSName object from the dictionary using a given key. @param key a unique identifier of type COSName @return COSName object if found, otherwise null
942 Retrieves an object from dictionary using first key. If not found, uses the second key. @param firstKey primary COSName key to search @param secondKey alternative COSName key if primary is not found @return COSBase object or null if neither key is found
943 Initializes a Matrix object from a COSArray of COSNumbers. @param array data source for initializing the matrix
944 Fetches the zoom level from an object in an array, returns as float. @return Zoom level if found (as float), otherwise -1
945 Sets the default value for the COS object with a specified base value. @param value the base value to set as the default
946 Sets the value for a COSBase object and updates related items.
947 Initializes a form choice field in a PDF document. @param acroForm the parent AcroForm of this choice field
948 Constructs a pushbutton field in an AcroForm. @param acroForm the parent AcroForm object
949 Initializes a PDAcroForm object with the given PDDocument and sets up an empty fields array in its dictionary. @param doc The PDDocument to be associated with this PDAcroForm object.
950 Sets the text color in a PDF document. @param textColor PDColor object representing the new text color
951 Sets the contents of a dictionary object with given byte array. @param bytes the data to be set as contents
952 Sets the byte range for a COSArray in the dictionary using an integer array of length 4. @param range an integer array containing four elements representing the byte range
953 Retrieves a long value from the dictionary using a key. @param key unique identifier for the value in the dictionary @param defaultValue value to return if key is not found or not a COSNumber @return long value corresponding to key, or defaultValue if not found or not a number
954 Writes COSObject to output stream, handles null or missing objects gracefully. @param key unique object identifier @param obj object to be written
955 Sets rectangle differences for the COS object. @param differenceLeft left difference value @param differenceTop top difference value @param differenceRight right difference value @param differenceBottom bottom difference value
956 Initializes a PDTransparencyGroupAttributes object with default settings.
957 Sets an integer value for a given key in the COS object.
958 Sets a string value for the specified key in the object. @param key unique identifier of type COSName @param value string to be set; if null, removes the key-value pair
959 Sets a named key with a given value in the COS object. Converts the string value to a PDF-compatible format if not null. @param key The unique identifier for the data item @param value The data item's value as a String, will be converted to COSName if not null
960 Sets an item in the PDF document using a key and its corresponding value. @param key unique identifier for the item @param value COSBase object representing the item's value
961 Sets a boolean value in the COS object using the given key. @param key unique identifier of the item to be set @param value boolean value to be assigned to the key
962 Sets a boolean value in the PDF document using a specified key. @param key the unique identifier for the boolean value @param value the boolean value to be set
963 Sets a key-value pair in the item, with an optional transformation of the value. @param key unique identifier for the item @param value object to be stored; if null, sets the item's value to null
964 Sets the Z value in an array of values to the given float value. @param z the float value to be stored at index 2 in the 'values' array
965 Sets the Y value in the values collection at index 1 with a new COSFloat object. @param y float value to be set
966 Sets the X value in the 'values' array at index 0 with the provided float. @param x The new floating-point value to be set
967 Sets an alternate color space for the object and updates its internal representation. @param colorSpace new color space to be set (null resets it)
968 Sets the colorant name in the array at index 1 with a PDF-compatible name. @param name The new colorant name to be set.
969 Sets the base color space and updates the internal array with its COS object. @param base the new base color space to set
970 Sets the float value at index 2 in the 'values' list to the given parameter 'b'. @param b the float value to be set
971 Sets the value of 'g' within an array of values using a COSFloat object. @param g float value to be set at index 1 in the values array
972 Sets the radius value in the values collection at index 0. @param r float value representing the radius to be set
973 Sets the alternate color space for this object and updates its COSBase representation. @param cs the PDColorSpace to be set as the alternate color space
974 Sets or removes device N attributes from the object's internal array. @param attributes PDDeviceNAttributes to be set; null to remove them
975 Sets the font size to a specified value in a PDF document. @param size the desired font size as a floating-point number
976 Sets the default appearance string in an option object. @param da the default appearance string to be set
977 Sets a long value associated with a given key in the object. @param key unique identifier for the data @param value long integer to be stored
978 Sets an option using the provided string value. @param opt The string value to be set as an option
979 Sets a floating-point number as the value for the given key in this object. @param key unique identifier of the value @param value floating-point number to be stored
980 Sets the encryption dictionary in the PDF trailer. @param encDictionary COSDictionary containing encryption settings.
981 Clears all items in the dictionary and associated arrays. If a parent dictionary exists, sets this item to null.
982 Initializes a new empty PDPageTree object with default settings.
983 Sets the crop box for a PDF page. If null is passed, removes the crop box; otherwise, sets it. @param cropBox rectangle defining the new crop box or null to remove it
984 Initializes the PDF document catalog and sets it as the root of the document. @param doc the PDDocument to which this catalog belongs
985 Sets and updates document information in the PDDocument. @param info PDDocumentInformation object containing updated information
986 Parses and returns the next token from a data source, handling various types of data. @return The parsed object or null if end of file or error occurs. @throws IOException if an I/O error occurs while reading the source.
987 Updates the parent entry in a COSArray with a new parent and structure type. @param kArray the array to update @param newParent the new parent dictionary @param newStructureType the new structure type name (optional)
988 Sets the document ID in the trailer of this object. @param id a COSArray containing the unique document identifier
989 Creates a COSStream object from the given dictionary and stream parameters. @param dictionary contains metadata about the stream @param startPosition beginning point of the stream data @param streamLength length of the stream data @return initialized COSStream object
990 Decrypts all elements in a COSArray using provided keys. @param array the COSArray to be decrypted @param objNum object number for decryption key @param genNum generation number for decryption key @throws IOException if an I/O error occurs during decryption
991 Sets the color at a specific index in an array to the provided PDGamma object or null value. @param index position in the array @param colour PDGamma object representing the color; null sets it to NULL
992 Sets the upper right y-coordinate of the rectangle in an array. @param value new coordinate for the upper right y-point
993 Initializes a new PDFontSetting object with default values: null and 1.0.
994 Initializes an FDFOptionElement with two empty strings in a COSArray.
995 Initializes a PDRange object with default values [0,1].
996 Prepares and returns a COSStream for cross-reference data, setting type, size, index, and width entries. @return the prepared COSStream object @throws IOException if there's an issue writing stream data
997 Clears current data and sets new float array values. @param value an array of floats to be added to the object
998 Ensures the capacity of 'objects' and grows it to a specified size by adding given objects. @param size desired capacity @param object object to be added until reaching the desired size
999 Adds a COSObject to the collection from a given COSObjectable object. @param object The source of the COSObject, can be null
1000 Returns an iterator over all COSBase objects in this collection. @return An iterator of type COSBase
1001 Retrieves a date from the dictionary using key. @param key unique identifier for the date in the dictionary @return Calendar object if found, otherwise null
1002 Converts components to a COSArray and optionally adds pattern name. @return COSArray representation of the object, with optional pattern name appended
1003 Initializes a PDDeviceN object with an array containing DEVICEN and three NULL placeholders.
1004 Initializes a PDGamma object with default values (0, 0, 0).
1005 Sets the upper right x coordinate of a rectangle in an array. @param value The new x-coordinate value to be set
1006 Sets the lower left Y coordinate of the rectangle in the array. @param value new Y coordinate for the lower left corner
1007 Sets the lower left X coordinate of the rectangle in the array. @param value float value representing the new X coordinate
1008 Sets the maximum value in the range array at the specified index. @param max the maximum value to be set
1009 Sets the minimum value of the range at a specific index in an array. @param min The minimum value to be set
1010 Sets a string at the specified index. If the input string is not null, it wraps it in a COSString and sets it; otherwise, it sets null. @param index position to set the string @param string the string to be set or null if removing an existing string
1011 Sets a PDF name at a specific index in the collection. @param index position to insert the name @param name string to be converted and inserted as a PDF name
1012 Sets an integer value at a specified index in the collection. @param index position to insert the value @param value integer value to be inserted
1013 Sets a COSObject at the specified index in the collection. @param index position to insert or replace the object @param object COSObjectable instance to be converted and inserted; null is allowed
1014 Writes a reference to the COSBase object in specific format. @param obj The COSBase object to write a reference for @throws IOException if an I/O error occurs during writing
1015 Creates a PDImageXObject from a byte array, using specified document and color space. @param document the document to which the image belongs @param byteArray the input data for the image @return a PDImageXObject instance created from the provided byte array @throws IOException if an I/O error occurs during the creation process
1016 Sets the matrix transformation for this object using an AffineTransform. @param transform The AffineTransform containing the new matrix values.
1017 Creates a PDTristimulus object from an array of floats, up to 3 elements. @param array input float values for the tristimulus object
1018 Initializes a PDTristimulus object with default values (0, 0, 0).
1019 Initializes a PDSeparation object with standard separation parameters.
1020 Initializes a PDPattern object with given resources and sets up an array for pattern data. @param resources the resources to be used in the pattern
1021 Generates a default COSArray for range with predefined float values. @return COSArray object containing default range values
1022 Initializes an indexed color space with DeviceRGB and 255 bits per component.
1023 Fetches the alternate color space from a stream's dictionary object. @return The alternate color space, or throws an IOException if not found or invalid type. @throws IOException If the alternate color space is not a COSArray or COSName.
1024 Converts specific elements of a float array to a COSArray. @return COSArray with selected float values from the input array
1025 Wraps a PDF page's content in save/restore (q/Q) to control the environment for additional content addition. @param page The PDPage object to be wrapped @throws IOException if contents are of an unknown type
1026 Returns a COSDictionary object containing labels as key-value pairs in a COSArray. @return COSDictionary with labels represented as a COSArray
1027 Sets the F flag for a widget field with an integer value or removes it if null is passed. @param f Integer value to set as the F flag, or null to remove the flag
1028 Sets clear field flags for a COS field. Accepts an Integer to set the flag; null clears existing flag. @param ff The integer value for the clear field flag
1029 Sets the SET_FF flag for a field with an integer value. @param ff Integer value to set; if null, removes the flag
1030 Sets the field flags with a given integer value. If the input is null, sets it to null. @param ff Integer value representing the field flags
1031 Sets the 'V' item in the field with the provided COSBase value. @param value a COSBase object to be set as the 'V' item
1032 Sets the COS value of a field with type checking and conversion. @param value Object to be set as the field's value (List, String, or COSObjectable) @throws IOException if the value is an unsupported type
1033 Sets the differences in the FDF document using a COSStream object. @param diff The COSStream object containing the difference data to set.
1034 Sets the ID in the FDF object with the provided COSArray. @param id a COSArray representing the new ID to be set
1035 Sets coordinate points in a QuadPoints array for the annotation object. @param coords float array containing the coordinates to be set
1036 Sets the interior color for the annotation. @param color the Color object to be set as interior color
1037 Sets the interior color of a PDF annotation. @param color Color object to set as interior color; null for no color
1038 Sets vertex data in a COS array for further processing
1039 Sets interior color for the annotation. If no color is provided, resets to default.
1040 Sets vertex data for annotation. @param vertices array of floating point numbers representing vertex coordinates
1041 Sets the interior color of a PDF annotation.
1042 Sets line coordinates in an array format to a COS object. @param line float array containing line coordinates
1043 Sets the widget field flags in a COS object using an integer value. @param ff Integer representing the new field flags; null sets to default.
1044 Sets clear widget field flags with the provided integer value. @param ff Integer value to set, nullable for clearing flags
1045 Sets the rich text value for the field using COSStream object
1046 Sets the transformation matrix for this object in PDF document. @param matrix a 3x3 transformation matrix (or null to remove)
1047 Sets the Gamma value for this PDGamma object in the dictionary. @param gamma The PDGamma object containing new gamma values; if null, removes existing gamma from dictionary.
1048 Sets the Gamma value in the dictionary to the provided float value. @param value The new Gamma value to be set
1049 Sets the character set for the dictionary object. @param charSet string representing the new character set, null to remove it
1050 Sets the font bounding box in the dictionary using a given rectangle. @param rect a PDRectangle object to set as the font bounding box; null resets it
1051 Sets the font stretch in a dictionary object based on input string
1052 Sets the font family for a dictionary object. @param fontFamily string representing the desired font family
1053 Sets the font name in a dictionary. @param fontName new font name to be set; if null, removes existing font name
1054 Retrieves a list of options from the COS object's dictionary. @return List of string options; may be empty if none found
1055 Initializes and sets up a new PDFontDescriptor with TYPE as FONT_DESC.
1056 Initializes a PDFont object with default settings.
1057 Sets the 'After' property in the dictionary with the specified value. @param after the string to be set as the 'After' property
1058 Sets the 'Before' item in the dictionary with the provided string value. @param before The string to be set as the 'Before' item.
1059 Fetches display values for options from a COS object dictionary. @return List of strings representing the display values or an empty list if none found
1060 Sets the callout value in the annotation object using a float array. @param callout an array of floating point numbers representing callout values
1061 Sets rich text value in COSField using provided COSString object. @param rv the COSString object containing rich text value
1062 Sets a filter for the dictionary using the provided string. @param filter The filter to be applied in PDF format
1063 Sets the owner key in the dictionary with a byte array value. @param o byte array representing the owner key @throws IOException if an I/O error occurs during setting the item
1064 Removes a specific attribute from the PDAttributeObject and updates the COSObject accordingly. @param attributeObject The object containing the attribute to remove
1065 Sets the encryption filter method in the crypt dictionary. @param cfm encryption filter method as a COSName object
1066 Sets the line dash pattern in the dictionary using a given COSArray. @param dashArray an array containing the dash pattern values
1067 Sets the interior color for annotation. Accepts a Color object and converts it to a COSArray format. @param color the desired interior color; if null, removes any existing interior color
1068 Sets and updates the range values in the COS object with provided array. @param rangeValues a COSArray containing new range values to be set
1069 Sets the user key in the dictionary with provided byte array. @param u byte array representing the user key @throws IOException if an I/O error occurs during operation
1070 Sets the 'K' value of the COS object using a provided COSBase object. @param k COSBase object to be set as 'K'
1071 Removes a kid object from the collection if it exists. @param object The COSBase object to be removed as a kid @return True if the object was successfully removed, false otherwise
1072 Sets and updates the COS object's domain values with the provided array. @param domainValues an array of domain values to be set for the COS object
1073 Inserts a new kid object before the reference kid in the COSArray or replaces the single existing kid. @param newKid the new COSBase object to insert @param refKid the reference COSObjectable or COSBase object before which to insert newKid
1074 Sets and updates the encoding values for the COS object. @param encodeValues a COSArray of encoding values to be set
1075 Sets and updates the decoding values for this object in COS format. @param decodeValues an array of COS objects containing the decoding values
1076 Appends a 'kid' object to the existing structure, handling various scenarios. @param object COSBase object to be appended as a 'kid'. If null, method returns early.
1077 Initializes a PDF complex file specification with a default type.
1078 Sets the owner encryption key in the dictionary. @param oe byte array representing the encryption key @throws IOException if an I/O error occurs during operation
1079 Removes a class name from the COS object dictionary. @param className the name of the class to be removed
1080 Sets the user encryption key in a dictionary object. @param ue byte array representing the user encryption key @throws IOException if there is an issue setting the key
1081 Sets the recipients for a PDF document from a byte array. @param recipients 2D byte array containing recipient data @throws IOException if an I/O error occurs
1082 Sets rich content in the COS (Carousel Object Specification) object. @param rc String containing the rich content to be set
1083 Sets the stream filter name in the PDF dictionary. @param streamFilterName the COSName representing the stream filter to be set
1084 Sets the color of the annotation using a given Color object. @param c the Color object to set; if null, removes the color
1085 Sets the filter name in the dictionary using a COSName object. @param stringFilterName a COSName representing the new filter name
1086 Sets permissions for an item in the dictionary using a byte array. @param perms a byte array containing permission data @throws IOException if there's an issue with input/output operations
1087 Constructs a PDComplexFileSpecification object from a given dictionary. If the dictionary is null, creates a new one and sets its type to FILESPEC. @param dict COSDictionary for file specification, can be null
1088 Removes V45 filters from the dictionary object.
1089 Initializes a new FDFAnnotation object with default settings.
1090 Grows the current structure to a specified size. @param size the desired size to grow to
1091 Initializes a PDPattern object with specified resources and color space. @param resources the associated PDResources object @param colorSpace the underlying PDColorSpace object for the pattern
1092 Sets the X values in the COS object using provided PDNumberFormatDictionary objects. @param changeXs Array of PDNumberFormatDictionary objects to be set as X values
1093 Sets areas using PDNumberFormatDictionary objects in a COSArray and updates the COS object.
1094 Sets the distances using a provided array of PDNumberFormatDictionaries. @param distances an array containing distance data in COS format
1095 Clones a COSBase object based on its type. @param src the source object to clone @param dstParent the parent of the destination object @param currentPageDict the dictionary containing the current page @return a new instance of COSArray or COSDictionary if applicable, otherwise returns the original object
1096 Sets the angles in the COS object using an array of PDNumberFormatDictionaries. @param angles array containing the angle values to be set
1097 Returns the text color from the PDF object, or creates and returns a default RGB black color if not found. @return The text color as a PDColor object
1098 Sets the line slopes for a COS object using an array of PDNumberFormatDictionary objects. @param lineSloaps array containing number format dictionaries to be added to the COS object
1099 Sets the change in Y-coordinates for a dictionary of number formats. @param changeYs an array of PDNumberFormatDictionary objects representing changes in Y-coordinates
1100 Sets the range for a component in the stream's COSObject array. @param range PDRange object representing the minimum and maximum values @param n index to set the range within the COSArray
1101 Sets the interior color of an object using a PDColor object. @param ic PDColor object representing the desired interior color
1102 Retrieves a color or four colors based on the input name from COSObject dictionary. @param name key to locate color data in COSObject @return PDGamma for single color, PDFourColours for four colors, otherwise null
1103 Sets a new page at index 0 in an array of pages. @param page the new PDPage to be inserted at position 0
1104 Sets the tint transform function and updates the array with it. @param tint the PDFunction to set as the tint transform
1105 Sets the tint transform function and updates the internal array. @param tint PDFunction to be used as the new tint transform
1106 Sets the specified font for the document at index 0. @param font The PDFont object to be used as the new font
1107 Creates a PDImageXObject from an input stream. @param document the PDF document to which the image belongs @param stream the input stream containing the image data @return a PDImageXObject instance created from the stream's byte array @throws IOException if there is an error reading the stream
1108 Retrieves the PDPage range from a dictionary or defaults to a default range. @return PDRange object containing page ranges
1109 Retrieves a PDPage's range array or default if not present. @return PDRange object containing the range array and index 0
1110 Sets the text color in a PDF document using the provided PDColor object. @param textColor the color to be set for the text
1111 Sets the background color for the current object using a given PDColor. @param c the PDColor to be set as the background color
1112 Sets the border color of the current object using a specified PDColor. @param c the PDColor object representing the new border color
1113 Sets the interior color using a PDColor object.
1114 Sets the interior color using a provided PDColor object. @param ic the PDColor object representing the desired interior color
1115 Sets the interior color of an object using a PDColor object. @param ic PDColor object representing the desired color
1116 Sets the color of an object using a PDColor object and updates its COSObject. @param c PDColor object representing the new color
1117 Sets the guide line color using a PDColor object. If color is null, sets it to default (no color).
1118 Sets the line dash pattern in the dictionary object using a COSName and the given dash pattern's COSObject. @param dashPattern the line dash pattern to be set
1119 Builds and sets widths of glyphs in a CID font from TrueType data. @param cidFont the target CID font dictionary @throws IOException if there's an issue reading TrueType data
1120 Retrieves the range for a specified component from an array. @param n index of the component @return PDRange object containing the range or default if not found
1121 Constructs an ICCBased object from a PDDocument. Initializes a COSArray and adds ICCBASED name to it, then creates a PDStream from the document and adds that to the array. @param doc the PDDocument used to create the PDStream for the ICCBased object
1122 Retrieves the colorant map from provided PDF resources. If none exists, creates a new one. @param resources PDF document resources @return Map of string keys to PDSeparation objects representing colorants @throws IOException if an error occurs while accessing the resources
1123 Fetches a date from PDF using a given key. @param key Key to identify the date in the PDF @return Calendar object for the identified date or null if not found
1124 Initial parsing of the PDF document. Throws an exception if root object is missing in trailer. Sets up the document for decryption after checking pages dictionaries.
1125 Sets a new value and notifies if it has changed. @param value the COSBase object to be set as the new value
1126 Returns the guideline color from a dictionary or a default black color if not found. @return PDColor object representing the guideline color
1127 Retrieves the starting point ending style of a line annotation. @return Starting point ending style or LE_NONE if not defined
1128 Sets the horizontal offset for a caption in the PDF document.
1129 Sets the vertical offset for a caption in the PDF document. @param offset The value to set as the vertical offset
1130 Sets a crypt filter dictionary in the current dictionary using a given name and COS object. @param cryptFilterName unique identifier for the crypt filter @param cryptFilterDictionary the crypt filter dictionary to be set
1131 Adds an Object Identifier (OID) to a PDF dictionary. @param oid byte array representing the OID to be added
1132 Adds an issuer to the existing list of issuers in the dictionary. @param issuer a byte array representing the new issuer to be added
1133 Sets the Operating System (OS) in a PDF dictionary. Removes if null; adds to array otherwise.
1134 Adds a key usage extension to the dictionary. Validates and appends the extension if it only contains 0, 1, or X. @param keyUsageExtension string containing the key usage extension to add
1135 Sets the vertical offset of a caption for an annotation. @param offset The new vertical offset value as a float.
1136 Sets the horizontal offset of a caption in a PDF annotation. @param offset The value to set as the horizontal offset
1137 Adds a subject to the dictionary as a byte array. @param subject The subject to be added in bytes.
1138 Retrieves and returns document information from the PDF document. If not already loaded, it initializes the documentInformation object. @return Document information as a PDDocumentInformation object
1139 Retrieves the black point from the dictionary, or returns a default (0,0,0) if not found. @return Black point as a PDTristimulus object
1140 Retrieves and returns a list of PDThread objects from the root object. If none exist, creates an empty list and sets it in the root object.
1141 Retrieves the whitepoint of the PDF document, defaults to (1, 1, 1) if not found. @return PDTristimulus object representing the whitepoint
1142 Fetches a date associated with a key, returning the default value if not found. @param key COSName to identify the date @param defaultValue Calendar object used when no date is found for the key @return Calendar object (either fetched or default)
1143 Retrieves the creation date of the object from its information. @return The creation date as a Calendar object
1144 Returns the modification date of an object in PDF format. @return The modification date as a Calendar object
1145 Fetches creation date from annotations. @return Creation date as a Calendar object, or null if not found @throws IOException if there is an error while reading the data
1146 Fetches and returns the creation date of the COS object. @return Creation date as a Calendar object
1147 Fetches and returns the signing date from the dictionary object. @return Calendar object representing the signing date, or null if not found
1148 Writes an Operator token to the output stream. @param op The Operator object to be written @throws IOException if writing to the output stream fails
1149 Adds a new property to the user's profile and notifies of changes. @param userProperty the property to be added to the user's profile
1150 Extracts and returns COSDictionary objects from a given node's "KIDS" array. Handles null or non-COSDictionary entries. @param node the source COSDictionary object @return List of COSDictionary objects extracted from the node
1151 Retrieves the Gamma correction value from a dictionary or returns default if not found. @return PDGamma object containing gamma correction values
1152 Sets the upper limit of a COSArray in a node.
1153 Retrieves additional actions for a PDF page. If none exist, creates and returns an empty one. @return PDPageAdditionalActions object containing the page's additional actions
1154 Initializes document name dictionary from the given document catalog. @param cat PDDocumentCatalog object containing document information
1155 Adds an output intent to the PDF document's root object. @param outputIntent the output intent to add
1156 Retrieves additional actions from the document catalog. Creates a new one if it doesn't exist. @return PDDocumentCatalogAdditionalActions object
1157 Sets the lower limit in a COSArray with a given integer value or removes it if null is provided. @param lower Integer to set as lower limit; use null to remove existing limit
1158 Sets the rectangle for the annotation using the provided PDRectangle object. @param rectangle the new rectangle to be set for the annotation
1159 Sets the endpoint ending style for a PDF annotation line. @param style The desired style (null treated as LE_NONE)
1160 Sets the mapping name in the dictionary using COSName.TM as key. @param mappingName the new name to be assigned
1161 Sets an alternative field name in the PDF document's dictionary. @param alternateFieldName the new name for a specific field
1162 Sets the partial name for an object, throwing exception if it contains a period. @param name the new partial name to set @throws IllegalArgumentException if the name contains a period character
1163 Sets the default value for COS object. @param value The string to be set as the default value
1164 Sets the default appearance string in a COS dictionary object. @param daValue the new default appearance value to be applied
1165 Sets the title of the COS object. @param title The new title to be assigned to the COS object
1166 Sets the contact information in the PDF dictionary. @param contactInfo a String containing the new contact info to be set
1167 Sets the reason in the dictionary using COSName.REASON as the key
1168 Sets the location in the dictionary using the provided string. @param location the new location to be set
1169 Sets the name value in the dictionary object using COSName.NAME key. @param name The new name to be set
1170 Sets the URL in the dictionary using the provided string. @param url the new URL to be set in the dictionary
1171 Sets the URL in the dictionary using COSName.URL as the key. @param url the new URL to be set
1172 Sets the date in the dictionary using the provided string
1173 Sets the string value and updates the COS object. @param value The new string value to be set @throws IOException if an error occurs during update
1174 Sets an alternate caption to the COS object. @param caption a String representing the new alternate caption
1175 Sets a normal caption to the COS object. @param caption the text to be set as the caption
1176 Sets the state model string in the COS object. @param stateModel a string representing the new state model to be set
1177 Sets the state of the COS object using the provided string value. @param state The new state to be set for the COS object
1178 Sets the subject of the COS object to the provided string. @param subj The new subject for the COS object
1179 Sets the title popup text in the COS (Carousel Object Specification) object. @param t The new title popup text to be set
1180 Sets the default style string in the COS object. @param defaultStyleString the new style string to be set
1181 Sets the default appearance of an object using a provided string value. @param daValue the string representation of the default appearance to be set
1182 Sets the annotation name in the COS object. @param nm new annotation name as a String
1183 Sets the modified date of the COS object. @param m the new modified date in string format
1184 Sets the contents of the dictionary to the provided string value
1185 Sets an execution parameter with the given string value. @param param the string to be set as the execution parameter
1186 Sets the operation type for this object. @param op The operation type to be set
1187 Sets the directory in parameters using the provided string. @param dir The directory to be set
1188 Sets the rollover caption for the COS object. @param caption The text to be displayed on rollover.
1189 Sets a string value and applies changes to the COS object. @param value The string value to be set @throws IOException if an I/O error occurs during the operation
1190 Sets the default value for the COS object with the provided string. @param value The new default value to be set for the COS object.
1191 Sets the default appearance for this annotation and its child widgets (if any). @param daValue string value representing the new default appearance
1192 Sets the flag value for an object and updates it in a dictionary. @param flags integer value representing various flags to be set
1193 Sets clear widget field flags in COSName object. @param ff integer value for the clear widget field flags
1194 Sets specific flags for a widget field using the provided integer value. @param ff Integer representing the flags to be set
1195 Sets the widget field flags with specified integer value. @param f an integer representing the new field flags
1196 Sets clear field flags for the field object. @param ff integer value representing clear field flags to be set
1197 Sets the field flags for the COSName SET_FF in an internal field object. @param ff integer value to set as the field flag
1198 Sets the field flags in the COSName object. @param ff integer value representing the field flags to be set
1199 Sets the rotation angle for an object in a COS document. @param rotation The desired rotation angle in degrees
1200 Sets justification for the text in a PDF document using the provided string. @param justification String indicating the type of justification ("centered", "right" or default)
1201 Sets the current page number in annotation data. @param page new page number to be set
1202 Sets permission level in the dictionary object using provided integer value. @param permissions an integer representing the desired permission level
1203 Sets the revision number for the dictionary object. @param revision The new revision number to be set
1204 Sets the length of the dictionary object in COS format. @param length the new length to be set
1205 Sets the version of an object in the COS (Content Object System). @param version the new version number to be assigned
1206 Sets the length of the crypt filter dictionary to the provided value. @param length new length for the crypt filter dictionary
1207 Sets the next key for the parent tree in COS object. @param parentTreeNextKey new value for the next key of parent tree
1208 Sets the revision number for a COS object. Throws exception if input is negative. @param revisionNumber the new revision number to set (shall be > -1)
1209 Sets the Master Content Identifier (MCID) for a COS Object. @param mcid integer value representing the MCID to be set
1210 Sets the bits per sample value in a COS Object. @param bps integer representing the number of bits per sample to set
1211 Sets the starting point for paging. Throws exception if input is not a positive integer. @param start The new starting point for paging
1212 Initializes a PDPageTree with the given COSDictionary and PDDocument. Repairs bad PDFs containing a Page dict instead of a page tree. @param root The COSDictionary representing the page tree's root (cannot be null) @param document The PDDocument to which this page tree belongs
1213 Sets the rotation of the page to the specified angle in degrees. @param rotation The desired rotation angle in degrees (0-359).
1214 Sets the structural parents of the PDF page using the provided integer value. @param structParents integer representing the structural parents to be set
1215 Sets an integer value in the specified key of an embedded dictionary.
1216 Sets an integer value in the PDF document using a given key. @param key a string representing the key or identifier for the value @param value the integer value to be set for the corresponding key
1217 Sets the scale ratio for the COS object. @param scaleRatio a string representing the desired scale ratio
1218 Sets the filename in parameters for a COS operation. @param file The new filename to be set
1219 Sets widths for a given font and glyph list in a PDF document. @param font the COSDictionary to set the widths on @param glyphList the glyph list containing glyph names @throws IOException if an error occurs during I/O operations
1220 Sets annotation name in dictionary using COSName.A as key. @param name new annotation name to be stored
1221 Sets the URI for an action using a provided string. @param uri the new URI to be set
1222 Sets the file description in the PDF document. @param description The new description to be set for the file.
1223 Sets the file name in the PDF document. @param file the new file name to be set
1224 Sets the Unicode filename in a file system object. @param file the new Unicode filename to be set
1225 Sets or removes the prefix from the root object based on input. @param prefix new prefix to set; if null, removes existing prefix
1226 Sets the producer information in the PDF document. @param producer name or identifier of the producer
1227 Sets the creator of an object in the PDF document. @param creator name or identifier of the document's creator
1228 Sets the keyword string for an object's metadata. @param keywords a space-separated list of keywords to be associated with the object
1229 Sets the subject of an object in PDF document metadata. @param subject The new subject to be set for the PDF document
1230 Sets the author of an object in the PDF document. @param author The name of the author to be set
1231 Sets the title in an information object. @param title The new title to be set
1232 Sets the specified language in the root object of a PDF document. @param language the language to be set
1233 Sets an embedded string in a dictionary under a specified key. Creates the dictionary or updates it as necessary. @param embedded COSName of the embedded object @param key COSName for the string entry @param value String to be set, null removes the entry
1234 Sets a string value with the given key in PDF document. @param key The name of the entry to be added to the dictionary. @param value The value associated with the key.
1235 Sets an identifier for the COS object in PDF document. @param id unique string identifier to be assigned to the object
1236 Sets a date value in COS format using a given key. @param key the name of the entry to be added or updated @param date the Calendar object containing the date to be set
1237 Sets the transition motion for this object using a given PDTransitionMotion. @param motion The PDTransitionMotion to be set for the object's transition
1238 Sets the transition dimension of this object with the given dimension value. @param dimension a PDTransitionDimension enum representing the desired dimension
1239 Initializes a PDTransition object with the specified transition style. @param style The desired transition style (PDTransitionStyle)
1240 Sets the name of the COS object to the given string value. @param name new name for the object
1241 Initializes a new PDNumberFormatDictionary with a default type name.
1242 Sets the SUBTYPE attribute of the COS object to the provided value. @param subtype the new value for the SUBTYPE attribute
1243 Sets the title of the COS object. @param title The new title to be assigned to the COS object.
1244 Sets the language attribute of the COS object to the specified value. @param language the new language code to be set
1245 Sets an alternate description for the COS object. @param alternateDescription the new description to be set
1246 Sets the value of 'P' in the action object using a given string. @param p the string to be set as the value of 'P'
1247 Sets the specified string value to 'O' in the action object. @param o The string value to be set for 'O' in the action object.
1248 Sets the 'D' attribute with the provided string value in the action object. @param d the new value for the 'D' attribute
1249 Sets the value of 'F' in the action object using the provided string. @param f the string to be set as the value for 'F'
1250 Sets the JavaScript action for an object. @param sAction the JavaScript action to be set
1251 Initializes Optional Content Properties with default settings. @return void; sets up a dictionary structure for optional content.
1252 Sets the name in the dictionary using COSName.NAME as the key. @param name new name to be set in the dictionary
1253 Sets the name in the reference object using the provided string value. @param name The new name to be set
1254 Sets the partial field name in the COS object with the given string. @param partial The string to be used as a partial field name.
1255 Sets the target string in an FDF (Forms Data Format) object. @param target The new target string to be set
1256 Sets the status of an object using the provided string value. @param status the new status to be set for the object
1257 Sets the state model for the annotation. @param stateModel a string representing the state model to be set
1258 Sets the state value in annotations. @param state The new state to be set
1259 Sets the caption style for the annotation object. @param captionStyle a string representing the desired caption style
1260 Sets the default style for annotation. @param style the style to be set as a String
1261 Sets the default appearance string for annotation in PDF document. @param appearance The appearance string to be set
1262 Sets a symbol for the annotation based on the input string. @param symbol the input string to determine the symbol ('paragraph' becomes 'P', otherwise 'None')
1263 Sets the subject of the annotation in the PDF document. @param subject The new subject to be set
1264 Sets the title of the object using provided string. @param title The new title to be assigned to the object
1265 Sets the content of the annotation using the provided string. @param contents The new content for the annotation
1266 Sets the name property in the annotation object with the provided string value. @param name the new name to be set
1267 Sets the modification date in the COSName object. @param date String representation of the date to be set
1268 Sets the actual text in the COS object using the provided string. @param actualText The text to be set as the actual text in the COS object
1269 Sets the expanded form of the COS object using the provided string. @param expandedForm the new expanded form to be set for the COS object.
1270 Sets the filename in the dictionary using COSName.N as the key. @param filename the new filename to be set in the dictionary
1271 Initializes and sets up a measurement dictionary object.
1272 Constructs an instance of FDFAnnotationTextMarkup.
1273 Initializes FDFAnnotationText object with predefined subtype.
1274 Initializes an FDFAnnotationStamp by setting its subtype name.
1275 Initializes and sets the name of the FDFAnnotationSquare subtype.
1276 Initializes FDFAnnotationSound with a specific subtype name.
1277 Initializes FDFAnnotationPolyline with the subtype name set to COSName.SUBTYPE.
1278 Initializes a new FDFAnnotationPolygon object and sets its subtype to 'POLYGON'.
1279 Initializes FDFAnnotationLink by setting its subtype name.
1280 Initializes a new FDFAnnotationLine object and sets its subtype.
1281 Initializes FDFAnnotationInk and sets its subtype to a predefined value.
1282 Sets the subtype of the annotation to 'FDFAnnotationFreeText'.
1283 Initializes an FDFAnnotationCircle object and sets its subtype name.
1284 Initializes FDFAnnotationCaret with the specified subtype.
1285 Removes a COSObjectable kid from the list. @param objectable The COSObjectable to be removed @return True if removal is successful, false otherwise
1286 Inserts a new COSObjectable before the reference object in the list. @param newKid the COSObjectable to be inserted @param refKid the reference COSObjectable in the list
1287 Appends a COSObjectable kid to the current object, unless it's null. @param objectable The COSObjectable object to be appended as a kid
1288 Creates a PDF File Specification object from COSBase. @param base the input data to create the specification (COSString or COSDictionary) @return PDFileSpecification object or null if base is null, throws IOException for invalid types
1289 Fetches and returns the document catalog. If not already created, initializes it based on PDF structure. @return The document catalog object
1290 Constructs a new PDDocument with an in-memory stream cache.
1291 Parses and returns the width from PDF stream data. @return float value representing width, or throws IOException if parsing fails
1292 Parses a PDF stream to find and return the glyph bounding box as a PDRectangle object, or null if not found.
1293 Parses input data and returns a list of objects found in the stream. @throws IOException if an error occurs during parsing @return List<Object> containing parsed tokens from input stream
1294 Merges the contents of two COSObjects, skipping if they are identical or null. @param base the source object to merge from @param target the destination object to merge into @throws IOException if an I/O error occurs during merging
1295 Initializes FDFAnnotationFileAttachment and sets its subtype.
1296 Builds and sets the vertical metrics for a CID font dictionary. @param cidFont the CID font dictionary to modify @throws IOException if there's an issue reading from the TrueType font
1297 Initializes a new instance of the PDSimpleFont class.
1298 Draws a basic ellipse using the given coordinates. @param left x-coordinate of the left edge @param bottom y-coordinate of the bottom edge @param right x-coordinate of the right edge @param top y-coordinate of the top edge @throws IOException if an error occurs during drawing
1299 Adds corner curl effect to a path based on given angles and radii. @param anglePrev previous angle, angleCur current angle, radius of the arc, cx,cy coordinates, alpha and alphaPrev are rotation angles. @throws IOException if an I/O error occurs during drawing operations
1300 Creates a PDImageXObject from a BufferedImage with default compression. @param document the PDDocument to which the image will be added @param image the BufferedImage to be converted into a PDImageXObject @return a PDImageXObject representing the given image @throws IOException if there is an error during the conversion process
1301 Retrieves and formats the border array from a COSObject. Ensures array has at least 3 elements, filling with zeros if necessary. @return The formatted border array or a new one if original was null
1302 Initializes a new PDListBox object with the given PDAcroForm. @param acroForm The form that this list box belongs to.
1303 Initializes a PDComboBox with an AcroForm. @param acroForm the form to be associated with this combo box
1304 Constructs a PDCheckBox object with an associated PDAcroForm. @param acroForm The form to which the checkbox belongs.
1305 Sets equal differences to all sides of the rectangle. @param difference The value to be set for all four sides.
1306 Sets equal differences for all sides of a rectangle. @param difference The value to be applied to all four sides.
1307 Sets equal differences for all sides of a rectangle. @param difference The value to be used as the difference for each side
1308 Constructs an annotation widget from a COS dictionary. Sets the subtype for the object. @param field COS dictionary containing annotation data
1309 Constructs an unknown PDF annotation from a COS dictionary. @param dic the COS dictionary representing the annotation
1310 Constructs an annotation popup using the provided COSDictionary field. @param field COSDictionary containing annotation field data
1311 Constructs a PDAnnotationMarkup from COSDictionary. @param dict COSDictionary containing annotation data
1312 Constructs a new PDAnnotationLink from a COSDictionary. @param field the dictionary containing annotation data
1313 Initializes a new PDAnnotationWidget object and sets its subtype to SUB_TYPE.
1314 Initializes an instance of PDAnnotationPopup and sets its subtype to SUB_TYPE.
1315 Constructs an empty PDAnnotationMarkup object.
1316 Initializes a new PDAnnotationLink object and sets its subtype.
1317 Sets the non-stroking alpha constant value in the graphics state dictionary. @param alpha floating point value for non-stroking alpha (transparency)
1318 Sets the stroking alpha constant to the specified value.
1319 Sets the smoothness tolerance level in the graphics settings. @param smoothness a float value representing the new smoothness level
1320 Sets the flatness tolerance level in the COS document. @param flatness a float value representing the desired flatness tolerance
1321 Sets the miter limit value in the graphics context. @param miterLimit the new miter limit to be applied
1322 Sets the line width in a graphical context. @param width float value representing the new line width
1323 Parses a COSStream from the provided dictionary and validates its length. @param dic COSDictionary containing the stream data @return COSStream object representing the parsed stream @throws IOException if there's an issue reading or validating the stream
1324 Sets the CYX value in the COS object to a given float. @param cyx The new float value for CYX
1325 Sets the width of an object in a COS document. Handles both float and integer values.
1326 Sets the top index in COS object or removes it if input is null. @param topIndex new value for the top index, can be null to remove
1327 Sets field flags in the dictionary using provided integer value. @param flags integer representing new field flags to be set
1328 Sets the quality factor in the COS dictionary object. @param q The quality factor to be set (integer value)
1329 Sets the open count value in COS object. @param openCount new value to be set for open count
1330 Sets whether timestamp is required in the document. @param flag true if required, false otherwise
1331 Sets the P value in a dictionary within specified range (0 to 3). @param p The value to be set for P @throws IllegalArgumentException if p is not between 0 and 3
1332 Sets the rotation of the COS object in degrees. @param rotation The degree of rotation (0-360).
1333 Sets the quality value of COS object using provided integer. @param q the quality value to be set
1334 Sets the structural parent of the COS object to a specified value. @param structParent an integer representing the new structural parent
1335 Sets annotation flags for COS object. @param flags integer value representing annotation flags
1336 Sets the annotation index in a dictionary. Removes if index is negative; sets otherwise. @param index The new annotation index to set (negative values remove the index)
1337 Sets the page number for a document. Removes if negative, otherwise sets it. @param pageNumber the page number to set; if < 0, removes the page number
1338 Sets the flag value for an action in COS (Content Operating System). @param flags integer representing the new flag value
1339 Sets the maximum length for the COS object. @param maxLen the maximum length to be set
1340 Sets the flag value for the action object
1341 Sets the line join style in a graphics dictionary. @param style an integer representing the desired line join style
1342 Sets the line cap style in the dictionary using given integer value. @param style an integer representing the line cap style to be set
1343 Sets the number of bits per coordinate in the COS object and updates the local value. @param bitsPerCoordinate The new number of bits per coordinate to set.
1344 Sets the number of bits per color component for this object. @param bitsPerComponent number of bits per color component
1345 Sets the number of vertices per row in the COS object
1346 Sets the number of bits per flag in the COS object. @param bitsPerFlag The desired number of bits per flag.
1347 Sets the shading type in the dictionary using a specified integer value. @param shadingType an integer representing the desired shading type
1348 Sets the tiling type for the COS object. @param tilingType an integer representing the desired tiling type
1349 Sets the paint type in COS object based on provided integer value. @param paintType an integer representing the desired paint type
1350 Sets the type of pattern in the pattern dictionary. @param patternType integer value representing the pattern type
1351 Sets the paint type in the pattern dictionary. @param paintType an integer representing the paint type to be set
1352 Sets the overprint mode in the dictionary. Removes if null, otherwise sets the value. @param overprintMode new overprint mode (null to remove)
1353 Sets the Q value in the COS object. @param q The new value for the Q property.
1354 Sets a long value in the PDF document using a specified key. @param key The string identifier for the value to be stored. @param value The long value to be stored in the PDF document.
1355 Writes the PDF document trailer and handles updates, including sorting xref and removing checksums. @param doc COSDocument object containing the document to be written @throws IOException if an I/O error occurs during writing
1356 Sets the constant opacity attribute for the COS object to the specified value. @param ca the constant opacity value to be set
1357 Sets the leader line offset length for the COS object. @param leaderLineOffsetLength float value representing the new offset length
1358 Sets the length of the leader line extension for the COS object. @param leaderLineExtensionLength float value representing the new length
1359 Sets the length of the leader line in the COS object. @param leaderLineLength float value representing the length of the leader line
1360 Sets the audio volume level. Throws an exception if not in the range -1.0 to 1.0. @param volume float value for audio volume
1361 Sets the vertical step size in the COS object. @param yStep the new vertical step size to be set
1362 Sets the X step value in the COS object. @param xStep The new X step value to be set
1363 Sets the missing width value in the dictionary. @param missingWidth the new missing width value to be set
1364 Sets the maximum width for an object in a dictionary.
1365 Sets the average width value in a dictionary object. @param averageWidth the new average width to be set
1366 Sets the vertical stem height in a dictionary object. @param stemH the desired vertical stem height as a float value
1367 Sets the vertical stem length in the dictionary object with the provided value. @param stemV new vertical stem length to be set
1368 Sets the X height value in the dictionary and updates the object's X height. @param xHeight float value to be set as the X height
1369 Sets the height of a capital letter in a font. @param capHeight the new height for capital letters
1370 Sets the leading value in the dictionary object. @param leading The new leading value to be set
1371 Sets the descent value in a dictionary object. @param descent The new descent value to be set
1372 Sets the ascent value in the dictionary. @param ascent The new ascent value to be set
1373 Sets the italic angle for the font in degrees. @param angle the angle value to be set (in degrees)
1374 Sets the font weight value in the dictionary object. @param fontWeight a floating-point number representing the desired font weight
1375 Sets the leader offset in the COS (Carousel Object Specification) annotation. @param leaderOffset the new value for the leader offset
1376 Sets the leader extend value in annotations using a floating-point number. @param leaderExtend The new leader extend value to set
1377 Sets the length of the leader line in the PDF annotation. @param leaderLength new value for the leader line length
1378 Sets the opacity level of the annotation. @param opacity float value representing the opacity level (0.0 to 1.0)
1379 Sets the width of a guideline in the document. @param width float value representing the new width
1380 Sets the user unit for the page. Throws exception if input is not positive. @param userUnit the value to set as the user unit
1381 Sets a floating point number in PDF using given key and value
1382 Sets the minimum revision number in the dictionary. @param revision the new minimum revision number to be set
1383 Sets the revision of the COS dictionary object to the specified value. @param revision the new revision value to be set
1384 Sets the V value in the dictionary to the specified minimum required capability
1385 Sets the start and end style for a line annotation. @param style The desired style; if null, defaults to LE_NONE
1386 Initializes a document outline from the given COS dictionary. Sets the type of the object to 'Outlines'. @param dic the COS dictionary used for initialization
1387 Sets the URL type in the dictionary using the provided string value. @param urlType the type of URL to be set
1388 Sets Windows launch parameters for an action. @param win PDWindowsLaunchParams object containing the launch parameters
1389 Sets the file specification for this object in the COS document. @param fs a PDFileSpecification object containing file information
1390 Sets the file specification for the current action.
1391 Sets the destination for this action. Validates and sets only if it's a valid PDPageDestination. @param d The destination to be set (must be an instance of PDPageDestination)
1392 Sets the target directory for this object in COS (Cos Object Stream). @param targetDirectory The PDTargetDirectory to be set
1393 Sets a file specification to the COS object. @param fs PDFileSpecification object containing the file details
1394 Sets the destination for a PDF action. Throws exception if not valid. @param d PDF destination object (PDPageDestination) or null to remove it
1395 Sets the font setting in the dictionary using the provided PDFontSetting object. @param fs The PDFontSetting object containing the new font settings
1396 Sets a new PDFunction for this object and updates the COSObject. @param newFunction The new PDFunction to be set
1397 Sets and associates resource objects with this object in the COS layer. @param resources a PDResources object containing various graphic resources
1398 Sets and applies a shading resource to the current object. @param shadingResources the PDShading object to be applied
1399 Sets the extended graphics state for the PDF document and updates its COS object. @param extendedGraphicsState the new extended graphics state to be set
1400 Sets a file specification for this PDF document's action. @param fs The PDFileSpecification object containing the file information
1401 Sets the black point value in the color dictionary
1402 Sets the CID (Character Identification) Set in the dictionary with a given PDStream. @param stream the PDStream containing the CID set data
1403 Sets the font file 3 in the dictionary with a provided PDF stream. @param stream The PDF stream containing the font file 3 data.
1404 Sets the second font file stream for a dictionary object. @param ttfStream the TrueType font stream to be set as FONT_FILE2
1405 Sets the font file stream for this PDF document object. @param type1Stream the input font file stream in Type 1 format
1406 Sets the template reference for this FDF document's page. @param tRef the FDFNamedPageReference object to be set as the template reference
1407 Sets page information in FDFPageInfo object to the page. @param info The FDFPageInfo object containing new page information
1408 Sets the file specification for the PDF document. @param fs PDFileSpecification object containing file specifications
1409 Sets the fractional space to allocate for PDF fitting. @param space a PDRange object representing the space to be allocated
1410 Sets additional actions for the PDF document. @param aa PDAdditionalActions object containing the new actions
1411 Sets an action for the PDF document using provided PDAction object. @param a the action to be set for the PDF document
1412 Sets the icon fitting style for the field. @param fit The desired icon fitting style (FDFIconFit enum value)
1413 Sets appearance stream reference for the field in the FDF document. @param ref FDFNamedPageReference object to be set as the appearance stream reference
1414 Sets the white point for the PDF document. Throws exception if input is null.
1415 Sets a file specification for this PDFileSpecification object in the PDF document. @param fs The PDFileSpecification to be set
1416 Sets a file specification object for an action. @param fs PDFileSpecification object to be set
1417 Sets the form field action in the PDF document's dictionary. @param action the PDAction object to be set as the form field action
1418 Sets and applies rectangle difference to COS object for PDF rendering. @param rd PDRectangle object containing the difference values
1419 Sets border effect using a provided dictionary object. @param be PDBorderEffectDictionary to be used for setting the border effect
1420 Sets the file specification for this object in the COS (Content Object Stream). @param file PDFileSpecification to be set
1421 Sets a PDF page to the current object's COSObject. @param page PDPage object to be set in the COSObject
1422 Sets optional content for the PDF document. @param oc PDPropertyList containing optional content settings
1423 Sets the appearance of an object using PDAppearanceDictionary. @param appearance The appearance dictionary to be set for the object
1424 Sets or removes a named destination in the PDF document. @param dest PDNamedDestination object to set; if null, removes existing destination
1425 Sets the target directory in the dictionary. @param targetDirectory the PDTargetDirectory object to be set
1426 Sets a PDAction object to the 'C' key in the actions map. @param c the PDAction object to be stored
1427 Sets an action object to the document. @param o the PDAction object to be set
1428 Sets a PDAction object to the 'C' key in the actions map. @param c The PDAction object to be set
1429 Sets the action value in the PDF document. @param v the PDAction object to be set as the 'V' action
1430 Sets an action F to the list of actions at the specified index. @param f a PDAction object representing the action to be set
1431 Sets the K action in the list of PDActions. @param k the PDAction object to be set as K
1432 Sets the Document Properties (DP) action for this object using the provided PDAction. @param dp The PDAction containing the new document properties action to be set.
1433 Sets the WP (Write Page) action for this PDF document. @param wp the PDAction object representing the write page action
1434 Sets the document security action for this PDF object. @param ds the PDAction containing the security details
1435 Sets the WS (Writing Style) action for this PDF document. @param ws The PDAction object representing the writing style to be set
1436 Sets the WC action in the PDAction object. @param wc the PDAction to be set as WC
1437 Sets a Print Interval action for this document. @param pi the Print Interval action to be set
1438 Sets the Page View (PV) action for an object in a collection. @param pv the PDAction to be set as the PV action
1439 Sets the Print Condition (PC) action in the PDF document. @param pc The PDAction object containing the print condition instructions.
1440 Sets the PDAction (Printed Output) object for this document. @param po The PDAction object to be set
1441 Sets the Blend action in the PDF document. @param bl the PDAction object representing the blend action to be set
1442 Sets the form field output action (FO) for this PDF document. @param fo the form field output action to be set
1443 Sets the U action in the PDF document to the provided PDAction object. @param u a PDAction object representing the new U action
1444 Sets the D action in this PDF document. @param d the PDAction to be set
1445 Sets and stores a specific action 'x' to be performed in the document. @param x the PDF document action to be set
1446 Sets an action 'e' in the actions list with key "E". @param e The PDAction to be added or updated in the list
1447 Sets the appearance dictionary for this field's COS object. @param ap the PDAppearanceDictionary to be set
1448 Sets an action to be performed on the PDF object. @param action the PDAction object to be set
1449 Sets the catalog for the PDF document. @param cat FDFCatalog object to be assigned
1450 Sets a file specification for this PDFileSpecification object. @param fs the PDFileSpecification to be set
1451 Sets the structure tree root for this PDF document. @param treeRoot PDStructureTreeRoot object to be set as the root
1452 Sets the URI to the provided PDURIDictionary object in the root item of this object. @param uri The PDURIDictionary object containing the new URI information.
1453 Sets the mark information in the PDF document. @param markInfo PDMarkInfo object containing mark data to be set
1454 Sets the name dictionary in the PDF document's root object. @param names the new name dictionary for the PDF document
1455 Sets additional actions for the PDF document catalog. @param actions PDDocumentCatalogAdditionalActions object containing new actions
1456 Sets the open action for the PDF document. @param action The destination or action to be executed when the document is opened
1457 Sets metadata for this PDF document. @param meta PDMetadata object containing new metadata
1458 Sets the document outline for the PDF document using a given PDDocumentOutline object. @param outlines the new document outline to be set
1459 Sets and updates viewer preferences using provided PDViewerPreferences object. @param prefs the new viewer preferences to be set
1460 Sets the AcroForm object for this document and clears any cached version. @param acroForm The new AcroForm object to be set.
1461 Sets an item in the collection using a specified key and object-based value. @param key unique identifier for the item @param value object to be stored under the given key
1462 Decrypts a COSBase object based on its type. Supports strings, streams, dictionaries, and arrays.
1463 Sets the end color of an object by calling a helper method with index 3. @param colour PDGamma object representing the color to be set as end color
1464 Sets page labels for the PDF document. @param labels PDPageLabels object containing new page labels to be applied
1465 Sets the start color of an object using PDGamma color. @param colour The new PDGamma color to be set as the start color
1466 Sets the before color in the PDGamma array at index 0. @param colour a PDGamma object representing the new color to set
1467 Creates and returns a new PDRectangle with translated dimensions. @return A new PDRectangle object with width and height set to current instance's values
1468 Sets the lower limit of a COSArray in the node with the provided string value. @param lower The new lower limit as a String
1469 Sets the upper limit for a given COSArray in the node. @param upper the new upper limit as a String
1470 Sets the ending style for the endpoint in annotation line. @param style desired ending style; null treated as "LE_NONE"
1471 Sets the start and ending style for a line annotation. @param style The string representing the style to be set. If null, LE_NONE is used.
1472 Sets the ending style for the endpoint in a PDF annotation line. @param style the desired style; null defaults to LE_NONE
1473 Sets the start and ending style for a line annotation. @param style The desired style (null means no specific style)
1474 Sets the endpoint ending style for the annotation. If no style is provided, defaults to none. @param style The desired endpoint ending style (null defaults to LE_NONE)
1475 Sets the start and ending style for a line annotation. @param style the desired style; null is treated as LE_NONE
1476 Sets the after color for image processing using PDGamma object. @param colour PDGamma object representing the desired after color
1477 Sets destination nodes and clears document catalog's DESTS entry. @param dests PDDestinationNameTreeNode containing destination information
1478 Sets embedded files for the object using a provided name tree node. @param ef A PDEmbeddedFilesNameTreeNode containing the embedded files to be set
1479 Sets the JavaScript item in the name dictionary with the provided PDJavascriptNameTreeNode. @param js the PDJavascriptNameTreeNode to be set as the JavaScript item
1480 Sets the digital signature for the PDF document. @param sig The PDSignature object containing the digital signature.
1481 Sets FDF (Forms Data Format) dictionary in a PDF document's catalog. @param fdf FDFDictionary object containing form data to be set
1482 Sets the rectangle defining the page's fringe area. @param fringe PDRectangle object representing the fringe area
1483 Sets the fringe (boundary) of the PDF annotation using a PDRectangle object. @param fringe A rectangle representing the new boundary for the annotation
1484 Sets the fringe (border) of the annotation using a rectangle object. @param fringe PDRectangle object representing the border to be set
1485 Sets the fringe (boundary) of the annotation with a rectangle object. @param fringe PDRectangle object representing the new boundary
1486 Sets the border effect for the annotation using the provided dictionary. @param be PDBorderEffectDictionary object containing the new border effect settings
1487 Sets the border style of the annotation using a provided dictionary. @param bs A PDBorderStyleDictionary containing the desired border style settings.
1488 Sets the parent tree of the current node in a PDF document structure. @param parentTree PDNumberTreeNode representing the parent tree to be set
1489 Sets a specific PDF page to the document using its COSObject. @param page PDPage object representing the page to be set
1490 Sets the parent node of this structure node in COS object. @param structureNode The PDStructureNode to be set as parent
1491 Sets a new page in the document using the provided PDPage object. @param page the new page to be set for the document
1492 Sets and references an object in the current COSObject. @param xobject the PDXObject to be set as a reference
1493 Sets a referenced object (annotation) in the current COSObject. @param annotation the PDAnnotation to be set as the referenced object
1494 Sets the current PDF page to the specified PDPage object. @param page the PDPage object to be set as the current page
1495 Adds or updates a resource in the specified dictionary of the resources object. @param kind type of resource dictionary (e.g., Font, XObject) @param name name of the resource @param object the resource object to be added or updated
1496 Sets a transition effect for the PDF page with specified duration. @param transition The PDTransition object representing the effect @param duration Duration of the transition in seconds
1497 Sets the transition effect for the PDF page. @param transition PDTransition object representing the desired effect
1498 Sets additional actions for a PDPage object. @param actions Additional actions to be applied on the page
1499 Sets metadata for the current PDF page. @param meta PDMetadata object containing the new metadata
1500 Sets the content stream of the PDF page. @param contents PDStream object containing page content
1501 Sets the Art Box of a page in PDF document. If null, removes the Art Box.
1502 Sets or removes the trim box for a PDF page. @param trimBox rectangle to set as trim box, null to remove it
1503 Sets the bleed box for the PDF page. If null is provided, removes the existing bleed box. @param bleedBox a PDRectangle object representing the new bleed box or null to remove it
1504 Sets the media box of a PDF page and handles null values by removing MEDIA_BOX item. @param mediaBox rectangle defining page's visible area; if null, removes MEDIA_BOX from page
1505 Sets or removes the resource object for this page. @param resources PDResources object to be set, or null to remove
1506 Constructs a PDPage object with the specified media box. @param mediaBox the rectangle defining the boundaries of the page
1507 Sets JavaScript object to FDF document. @param js the JavaScript object to be set in FDF document
1508 Initializes and sets the type of the document outline to OUTLINES in the COS object.
1509 Sets the border style of the PDF object using a provided dictionary. @param bs Border style dictionary to be set for the PDF object
1510 Sets the previous URI action for this PDActionURI object. @param pa the PDActionURI to be set as the previous URI action
1511 Initializes PDTypedDictionaryWrapper with a specified type. @param type the type to be set for the COSObject
1512 Sets the style for an object in a data structure. If style is null, removes it. @param style new style to be set or null to remove existing style
1513 Sets the trapped status with given value ('True', 'False', or 'Unknown'). @param value The new trapped status; must be one of 'True', 'False', or 'Unknown' @throws IllegalArgumentException if an invalid value is provided
1514 Sets the version of the COS (Container Object Storage) object. @param version a String representing the new version to be set
1515 Sets the page layout of the document using the provided PageLayout object. @param layout The new page layout to be set for the document.
1516 Sets the page mode for the PDF document. @param mode The desired page mode (use, outline, thumbnails, fullscreen)
1517 Sets a name in PDF document using provided key and value. @param key the string representing the name to be set @param value the string representing the value of the name
1518 Sets an array of float values in the object's dictionary by name and notifies changes. @param name Key for the array in the dictionary @param values Array of float numbers to be set in the dictionary
1519 Sets an array of names in the COS object and notifies if changed. @param name key for the dictionary object @param values string array to be added as COSName objects
1520 Sets an array of strings in the object's dictionary under a given name
1521 Sets whether document title should be displayed in preferences. @param value true to display, false otherwise
1522 Sets the preference to center or not center the window. @param value True if the window should be centered, false otherwise.
1523 Sets the fit window preference to the specified boolean value
1524 Sets the owner of the COS object using provided string value. @param owner name or identifier of the new owner
1525 Sets the preference to hide or show window UI. @param value true to hide, false to show window UI
1526 Sets the visibility of the toolbar based on the provided boolean value. @param value true to hide the toolbar, false to show it
1527 Sets the need for appearances in the PDF document
1528 Sets the trusted mode in the dictionary. @param trustedMode boolean value to enable or disable trusted mode
1529 Sets the non-embedded font warning flag in the PDF dictionary. @param noEmbedFontWarning if true, suppresses non-embedded font warnings
1530 Sets the pre-release status of an object in the dictionary. @param preRelease boolean value indicating if it's a pre-release or not
1531 Sets the 'Open' state of the COS object in a PDF document. @param open boolean value to set the 'Open' state (true for open, false for closed)
1532 Sets the CAP (caption) attribute of the COS object to the specified boolean value. @param cap true or false to enable/disable caption
1533 Sets the mixing mode for this action. @param mix true to enable mixing, false otherwise
1534 Sets the 'repeat' property of an action to true or false.
1535 Sets the synchronization mode for the action. @param synchronous if true, sets the action to be synchronous; otherwise asynchronous
1536 Sets the open mode for a new window. @param value OpenMode (NEW_WINDOW, SAME_WINDOW, USER_PREFERENCE)
1537 Sets open mode for a new window. @param value OpenMode enumeration (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
1538 Sets open behavior in a new window based on provided mode
1539 Sets the preference to hide or show the menubar. @param value true to hide the menubar, false to show it
1540 Initializes a PDMarkedContentReference with a new dictionary and sets its type.
1541 Initializes a PDObjectReference with a new dictionary and sets its type.
1542 Sets the structure type of the COS object using the provided string. @param structureType a string representing the new structure type
1543 Sets the name in the dictionary using COSName.NAME as the key. @param name The new name to be set in the dictionary
1544 Sets the SUBTYPE property of COSObject to a specified value. @param subtype the new value for the SUBTYPE property
1545 Initializes an external data dictionary with a specific type.
1546 Sets the style of the COS object using the provided string value. @param s The style to be set for the COS object
1547 Sets the highlighting mode. Valid modes are: 'N', 'I', 'O', 'P', 'T'. @param highlightingMode the new mode to set; null is equivalent to 'N' @throws IllegalArgumentException if an invalid mode is provided
1548 Sets the name of the COS object using the provided string value. @param name The new name for the COS object
1549 Sets the name of the COS object using the provided string. @param name The new name to be assigned to the COS object.
1550 Sets the intent name in COS object. @param it The intent name to be set
1551 Sets reply type in COS object using provided string representation. @param rt String representing the reply type to be set
1552 Sets the highlight mode of the COS object to the specified mode. @param mode The mode to be set for highlighting (e.g., "N" for none, "I" for invert)
1553 Sets the caption positioning in the COS object. @param captionPositioning a String representing the desired positioning
1554 Sets the line ending style for COS Object. @param style the desired line ending style as a String
1555 Sets the attachment name in COS object. @param name new attachment name to be set
1556 Sets the appearance state of the COS object using the provided string. @param as The desired appearance state to be set
1557 Sets the SUBTYPE property of the COS object to the specified value. @param subType the new value for the SUBTYPE property
1558 Sets the subtype of an action with the provided string value. @param s the string to be set as the subtype
1559 Sets the type of the action using the provided string value. @param type a string representing the type to be set for the action
1560 Initializes a new instance of the PDAbstractPattern class and sets its type to 'Pattern' in the dictionary.
1561 Sets the scaling type for an image using the provided string representation. @param scale The string representing the desired scaling type.
1562 Sets the scale option for fitting content in the document. @param option a String representing the desired scaling option
1563 Sets the specified encoding to the FDF (Forms Data Format) object. @param encoding the encoding string to be set
1564 Sets the version of the catalog in the PDF document. @param version The version string to be set
1565 Sets the icon name in annotations object. @param icon String representing the new icon's name
1566 Sets the line ending style in the annotation object. @param style desired line ending style to be set
1567 Sets the specified intent in the COSName object used by this class. @param intent the new intent to be set
1568 Sets a sub filter in the dictionary using the provided string. @param subfilter the string representing the sub filter to be set
1569 Sets the guideline style in the dictionary to the provided style. @param style The desired style for the guideline as a string.
1570 Initializes a PDStructureNode with given type and creates an empty dictionary. @param type the type of the structure node as a string
1571 Sets the text knockout flag in the dictionary to the specified value. @param tk boolean value for text knockout flag
1572 Sets the destination of the PDF object to the specified PDDestination. @param dest The destination to be set for the PDF object
1573 Sets the Alpha Source Flag in dictionary to the specified value. @param alpha Boolean value for the Alpha Source Flag
1574 Sets non-stroking overprint control in the dictionary. @param op true to enable, false to disable
1575 Sets a structure element in the COS object.
1576 Sets an action to the COS object of this class. @param action the PDAction to be set in the COS object
1577 Sets the destination of the COS object to the provided PDDestination. @param dest a PDDestination object representing the destination
1578 Sets the next sibling node in the document outline. @param outlineNode the node to be set as the next sibling
1579 Sets the previous sibling of an outline node in a PDF document. @param outlineNode the node to be set as the previous sibling
1580 Sets the property build object in the dictionary using the COS name PROP_BUILD. @param propBuild The PDPropBuild object to set in the dictionary
1581 Sets the seed value certificate in the PDF document's dictionary. @param certificate PDSeedValueCertificate to be set
1582 Sets the application property in the PDF document's dictionary using a provided data dictionary object. @param app A PDPropBuildDataDict object representing the application property to be set.
1583 Sets the Public Security property in a PDF data dictionary. @param pubSec PDPropBuildDataDict object containing public security properties
1584 Sets a property build filter to the dictionary using provided PDPropBuildDataDict object. @param filter an instance of PDPropBuildDataDict used for setting the filter in the dictionary
1585 Sets the down appearance stream in the PDF document's dictionary. @param ap PDAppearanceStream object representing the down appearance
1586 Sets down appearance in the document's dictionary using given PDAppearanceEntry. @param entry PDAppearanceEntry object containing new down appearance settings
1587 Sets rollover appearance stream for this PDF object. @param ap PDAppearanceStream object representing the rollover appearance
1588 Sets the rollover appearance for an entry in the PDF document. @param entry PDAppearanceEntry object containing the appearance details
1589 Sets the normal appearance of an entry in the dictionary using PDAppearanceEntry object. @param entry the PDAppearanceEntry object containing the normal appearance settings
1590 Sets the parent of PDTerminalField and updates COSObject accordingly. Throws IllegalArgumentException if field shares a dictionary with its only widget. @param field the parent field to be set
1591 Sets and updates the border style using a PDBorderStyleDictionary object. @param bs PDBorderStyleDictionary object containing new border style settings
1592 Sets additional actions for the annotation in a PDF document. @param actions PDAnnotationAdditionalActions object to be set
1593 Sets an action to the current COSObject using the provided PDAction object. @param action the PDAction object representing the new action
1594 Sets the appearance characteristics dictionary for this object. @param appearanceCharacteristics a PDF dictionary containing visual attributes
1595 Sets the rectangle difference object in the COS (Carrier Object System). @param rd The PDRectangle object to be set as the rectangle difference
1596 Sets the border effect in the COS object using a provided dictionary. @param be a PDBorderEffectDictionary containing the desired border effect
1597 Sets the border effect in the PDF document using a given dictionary. @param be PDBorderEffectDictionary containing border effect settings.
1598 Sets the border style using a provided dictionary object. @param bs PDBorderStyleDictionary containing new border style settings
1599 Sets the external data dictionary for this object in the PDF document. @param externalData PDExternalDataDictionary containing the external data to be set
1600 Sets the annotation to which this annotation is in reply. @param irt The PDAnnotation object that this annotation replies to
1601 Sets the annotation popup for this object. @param popup the PDAnnotationPopup to be set
1602 Sets the normal appearance stream for the PDF document. @param ap PDAppearanceStream object containing the appearance details
1603 Sets the first child node of an outline node in a PDF document. @param outlineNode the new first child node to be set
1604 Sets the last child in an outline node of a PDF document. @param outlineNode the outline node to be set as the last child
1605 Sets default resources for the PDF document. @param dr PDResources object containing default resource data
1606 Sets stroking overprint control in the dictionary. @param op Boolean value for overprint control (true enables, false disables)
1607 Sets the anti-aliasing property in the dictionary. @param antiAlias boolean value to enable or disable anti-aliasing
1608 Sets the rename option in the PDF template. @param value true to enable renaming, false otherwise
1609 Sets the scale-to-fit annotation for the object to the specified boolean value. @param value true to enable scaling, false to disable
1610 Sets the caption property of an object in a COS (Common Object System) document. @param cap boolean value to be set as the caption property
1611 Sets encryption metadata for COS object. @param encryptMetaData boolean flag to enable/disable encryption
1612 Sets whether the file is volatile (can be changed) or not. @param fileIsVolatile true if the file is volatile, false otherwise
1613 Sets the "FD" attribute of the COS object to the provided boolean value. @param fd boolean value to be set for "FD" attribute
1614 Sets the 'open' status of the COS object. @param open boolean value indicating if the object should be opened or closed
1615 Sets the tracking of mouse position on or off in the application map. @param value true to enable mouse position tracking, false to disable
1616 Sets the 'Suspect' status in the dictionary to the given boolean value. @param suspect true if suspect, false otherwise
1617 Sets a boolean property for the user in the dictionary. @param userProps boolean value representing user properties
1618 Sets the 'Marked' status in the dictionary to the provided boolean value. @param value The new 'Marked' status (true or false)
1619 Sets a rectangle to the specified item in the bead object. @param rect the rectangle to be set
1620 Sets the page in the document using provided PDPage object
1621 Sets the previous bead in the thread. @param previous The PDThreadBead object to be set as the previous bead
1622 Sets the next thread bead in the PDF document structure. @param next The PDThreadBead to be set as the next bead
1623 Sets the specified thread in the bead object using COSName.T. @param thread the PDThread object to be set
1624 Sets document information for the current thread. @param info Document information to be set.
1625 Sets the measurement dictionary in the COS object. @param measure PDMeasureDictionary to be set for the object
1626 Sets the bounding box of the object using a given rectangle. @param rectangle defines the new bounding box dimensions
1627 Sets additional actions for a PDF form field using the provided object. @param actions PDFormFieldAdditionalActions object containing the actions to be set
1628 Sets the seed value for the PD object. If provided, it updates the COS object with the new seed value. @param sv The new seed value to be set (PDSeedValue object)
1629 Sets a default value to the COS object in this signature. @param value The new default value for the COS object.
1630 Sets the signature value and applies changes to the COS object. @param value PDSignature object to be set @throws IOException if an I/O error occurs during change application
1631 Sets the XFA resource in the dictionary. @param xfa PDXFAResource object to be set
1632 Sets automatic stroke adjustment in dictionary. @param sa Boolean value to enable or disable automatic stroke adjustment
1633 Fetches the ending style of the line annotation endpoint. @return Ending style as a String, or LE_NONE if not defined
1634 Retrieves the type of the COS object as a string value. @return The type of the COS object, or null if not found.
1635 Fetches the upper limit from a COSArray node at index 1. @return Upper limit as an Integer, or null if not found
1636 Fetches the lower limit from a COSArray in the node. @return Lower limit as Integer or null if not found
1637 Fetches and returns the COSArray of range values, initializing it if necessary. @return The COSArray containing range values or null if not found
1638 Retrieves the COSArray of domain values, initializing it if necessary. @return The COSArray containing domain values
1639 Fetches and returns the size of a COSArray object, initializing it if needed. @return The COSArray representing the size or null if not found
1640 Retrieves decoding values. If not already set, fetches from COSArray or defaults to range values. @return COSArray of decoding values
1641 Returns the array of functions, initializing it if not already done. @return COSArray object containing the functions
1642 Retrieves the boundary values of a COS object. If not already fetched, fetches and stores the boundaries in 'bounds'. @return The array containing the boundary values
1643 Fetches default values associated with COSName.DV. @return a list of string values representing the default settings
1644 Fetches a list of values associated with 'V' name. @return A List object containing String values or an empty List if none found
1645 Fetches and returns the encoded COSArray object, initializing it from the COSObject if null. @return The encoded COSArray object
1646 Retrieves and converts the role map from a COSDictionary to a Map<String, Object>. @return A Map containing the role data or an empty HashMap if not found.
1647 Retrieves the scale ratio from the COS object as a string. @return The scale ratio as a string or null if not found
1648 Retrieves default style string from COS object using DS key. @return Default style string, or null if not found
1649 Retrieves the mapping name from the dictionary using COSName.TM as key. @return The mapping name as a string
1650 Retrieves an alternate field name from the dictionary using a predefined key. @return The alternate field name as a string
1651 Retrieves a partial name from a dictionary using COSName.T as key. @return A string representing the partial name, or null if not found
1652 Returns the state model of the COS object as a string. @return The state model string, or null if not found.
1653 Fetches and returns the normal caption from COS object using CA name. @return Normal caption as a string or null if not found
1654 Fetches rollover caption from COS object using RC identifier. @return Rollover caption as a string, or null if not found
1655 Fetches alternate caption from COS object using AC key. @return Alternate caption as a string or null if not found
1656 Retrieves the date from a dictionary using a specified key. @return The date as a string or null if not found in the dictionary
1657 Fetches the operating system name from a COSDictionary object in PDF. @return Operating System name as String or null if not found
1658 Retrieves a map of integers to COSObjectable objects from the node's numbers array. @return An unmodifiable map or null if an error occurs during conversion @throws IOException If there is an issue reading the numbers array
1659 Extracts and returns a list of Subject DN maps from the dictionary. @return List of maps containing Subject DN data, or null if not present.
1660 Retrieves the URL from the dictionary using COSName.URL as key. @return A string representing a URL or null if not found
1661 Retrieves and returns the name from a dictionary using a predefined key. @return The name as a string or null if not found in the dictionary
1662 Retrieves the location string from the dictionary using a predefined key. @return The location string stored in the dictionary, or null if not found.
1663 Fetches and returns the reason string from the dictionary. @return The reason string from the dictionary or null if not found
1664 Fetches contact information from a dictionary using a predefined key. @return Contact information as a string, or null if not found
1665 Retrieves the title from a COS object. @return The title as a string or null if not found
1666 Fetches and returns the URL from the dictionary object. @return The URL as a String or null if not found
1667 Fetches and returns the state from the COS object. @return current state as a string
1668 Retrieves and returns a list of children nodes from the number tree node. @return List of PDNumberTreeNode objects or null if no children exist
1669 Retrieves a list of child nodes from the current node. @return List of PDNameTreeNode<T> objects or null if no children exist
1670 Retrieves additional actions from the form field's dictionary. @return PDFormFieldAdditionalActions object or null if not found
1671 Retrieves the PDF signature from the COS dictionary. @return PDSignature object or null if not present in COS dictionary
1672 Retrieves the default signature from a COS dictionary, if it exists. @return PDSignature object or null if not found in the dictionary
1673 Retrieves the seed value from a COS dictionary if it exists, otherwise returns null. @return PDSeedValue object or null if not found in the dictionary
1674 Retrieves the measure dictionary from a COS object. @return PDMeasureDictionary object or null if not found in COS object
1675 Retrieves document information from a thread. @return Document information or null if not available.
1676 Retrieves the first bead from a PDF thread dictionary. @return First PDThreadBead object or null if not found in the thread's COSDictionary
1677 Retrieves a PDThread object from the bead's COSDictionary, if available. @return PDThread object or null if not found in the dictionary
1678 Retrieves the next thread bead in a sequence, encapsulated as a PDThreadBead object. @return PDThreadBead object representing the next bead in the sequence
1679 Returns the previous bead in the thread with COSDictionary from the current bead's V key. @return Previous PDThreadBead object or null if not found
1680 Fetches and returns a page from the PDF document if it exists, otherwise returns null. @return PDPage object or null if not found in the document
1681 Retrieves metadata from the PDF document. @return PDMetadata object or null if not present in the document
1682 Retrieves and returns the metadata of a page in PDF stream format, or null if not available. @return PDMetadata object containing metadata information or null if unavailable
1683 Fetches and returns the differences stream from the PDF document.
1684 Retrieves the font file as a PDStream object from a given dictionary. @return PDStream object containing the font file or null if not found
1685 Retrieves the font file from a dictionary as a PDStream object. @return PDStream containing the font data or null if not found
1686 Retrieves the font file 3 from a dictionary object, if it exists. @return PDStream object for the font file 3 or null if not found
1687 Retrieves and returns a list of PDViewportDictionary objects from the page's COSArray. @return List of PDViewportDictionary or empty list if none found
1688 Fetches and returns thread beads from a page as a list. @return List of PDThreadBead objects; empty if none found
1689 Retrieves the output intents from a PDF document. @return List of PDOutputIntent objects, may be empty if none exist
1690 Creates a specific PDAttributeObject based on the owner type in a COSDictionary. @param dictionary contains data for creating attribute object @return appropriate PDAttributeObject or PDDefaultAttributeObject if no match found
1691 Fetches and returns the document ID from the trailer's COS array. @return COSArray containing the document ID, or null if not found
1692 Retrieves a map of names from a COS array and converts them to a specific type T. @return Map with string keys and values of type T, or null if the COS array is not found @throws IOException if an unexpected object type is encountered in the array
1693 Fetches an alternate icon as a form XObject from the COSStream, if available. @return PDFormXObject object or null if not found in the IX stream
1694 Fetches and returns a normal icon as a form XObject from the COSStream, or null if not found
1695 Fetches and returns a list of string values representing export options. @return A list of strings containing export option values
1696 Fetches and returns the sound stream from the action object. @return The COSStream representing the sound, or null if not found
1697 Fetches and returns a CID set stream from the dictionary. @return PDStream object or null if not found in the dictionary
1698 Retrieves the rollover icon as a form XObject from the COS stream. @return PDFormXObject if rollover icon exists, otherwise returns null
1699 Retrieves the default resources from a COSDictionary object. @return PDResources object or null if not found in dictionary
1700 Fetches the subject from COS object using SUBJ key. @return Subject string or null if not found
1701 Retrieves the default style string from the COS object. @return The default style string as a String, or null if not found.
1702 Fetches and returns the name from COS annotation object. @return Name as a string, or null if not found
1703 Retrieves modification date from annotation object. @return Modification date as a string in specified format
1704 Fetches the expanded form string from properties, if available. @return Expanded form string or null if not found in properties
1705 Fetches alternate description from properties. @return Alternate description or null if not found in properties
1706 Fetches the actual text from properties, if available. @return Actual text string or null if not found in properties
1707 Fetches and returns a formatted value as a string from COS object. @return Formatted value as a string, or null if not found
1708 Fetches and returns the actual text from the COS object. @return The actual text as a string, or null if not found
1709 Fetches and returns the expanded form of the COS object as a string. @return Expanded form of the COS object stored in E field, or null if not found
1710 Fetches the alternate description from COS object. @return Alternate description as a string or null if not found
1711 Fetches and returns the language of the COS object. @return The language as a string, or null if not found
1712 Fetches the title from the COS object. @return Title as a string, or null if not found
1713 Retrieves the element identifier from COS object. @return unique string identifier of the element
1714 Fetches and returns the file description from its metadata. @return A string describing the file, or null if not available
1715 Fetches and returns the UNIX file system information as a string.
1716 Retrieves the MAC (Message Authentication Code) of a file as a string. @return The MAC of the file as a string
1717 Fetches DOS (Disk Operating System) information from file system. @return String representation of DOS information or null if not found
1718 Retrieves file name from the FileSystem object. @return The name of the file as a String
1719 Returns the field type of the COS object as a string. This is extracted from the COS object's FT (field type) property. @return Field type as a string, or null if not found
1720 Retrieves and returns the name of the COS object as a string. @return The name of the COS object or null if not found
1721 Fetches the duplex setting from preferences. @return Duplex setting as a string or null if not found
1722 Fetches a string value from PDF using a given key. @param key the name of the key to fetch @return the fetched string or null if not found
1723 Fetches a string value by key with a fallback to default value. @param key unique identifier for the string value @param defaultValue value returned if key is not found @return String value or defaultValue if key is not found
1724 Retrieves the language information from an internal data source. @return A string representing the language setting, or null if not found
1725 Retrieves and returns string contents from 'annot'. @return Contents of type String as represented by COSName.CONTENTS
1726 Retrieves the title from the information object. @return Title as a String, or null if not found
1727 Fetches the subject string from the information object. @return The subject string, or null if not present
1728 Fetches and returns keywords from the information object.
1729 Retrieves the creator information from the object. @return A string representing the creator's name or identifier
1730 Retrieves producer information from the document metadata. @return Producer's name as a string or null if not found
1731 Returns the prefix value from the root configuration. @return The configured prefix as a string
1732 Retrieves file unicode from COSName object. @return File unicode as a string
1733 Retrieves the author's name from information data. @return Author's name as a string, or null if not found
1734 Fetches and returns the title of a popup from COS object using 'T' key.
1735 Returns the subject from the COSName.SUBJ field of the annotation object. @return The subject as a String. May be null if not set in the annotation.
1736 Fetches and returns the rotation value from the annotation object. @return Rotation value as a String, or null if not found
1737 Fetches default appearance string from COS object. @return Default appearance string or null if not found
1738 Retrieves the annotation name from the COS object. @return The name of the annotation as a String
1739 Retrieves the modified date of a COS object as a string. @return Modified date in string format, or null if not found
1740 Retrieves and returns the contents of a COSName object from the dictionary. @return The contents as a string or null if not found
1741 Retrieves the execute parameter from the parameters object. @return The string value of the execute parameter or null if not found
1742 Retrieves the directory path from parameters. @return The directory path as a string
1743 Fetches and returns the filename from parameters. @return The filename as a string or null if not found
1744 Retrieves and returns the name of the annotation from the dictionary. @return The name of the annotation as a string
1745 Retrieves the filename from a dictionary using a predefined key. @return The filename as a String
1746 Fetches and decodes the URI from a given dictionary object. @return Decoded URI as string or null if not found/decodable
1747 Fetches and returns the P string value from a COSName object.
1748 Retrieves and returns the string value associated with 'O' from an action object.
1749 Retrieves and returns the string value associated with 'D' from an action object.
1750 Retrieves and returns the F value from the action object.
1751 Fetches and returns an array of group names from the dictionary object. @return String[] containing group names or empty if no groups found
1752 Returns the name from a COS dictionary using the NAME key. @return The name as a string or null if not found in the dictionary
1753 Retrieves default appearance string from annotations. @return Default appearance string, or null if not found
1754 Retrieves the default style from annotations. @return Default style as a string, or null if not found
1755 Retrieves the caption style from the annotation object. @return The string representation of the caption style
1756 Retrieves and returns the state from an annotation object. @return State as a string value from the annotation object
1757 Fetches the state model from the annotation object. @return the state model as a string
1758 Fetches and returns the current status from an object. @return The current status as a String
1759 Fetches and returns a symbol from the annotation. @return The symbol as a string or null if not found
1760 Retrieves the target string from a COSName object in fdf. @return The target string or null if not found
1761 Retrieves the name from the referenced object. @return The name as a string or null if not found
1762 Fetches and returns the font family from the dictionary object.
1763 Retrieves the character set from the dictionary object. @return The character set as a string or null if not found.
1764 Retrieves the partial field name from the COSName object. @return The string representation of the T value in the field's COSName.
1765 Checks if the object contains any child objects in its COS dictionary. @return true if children exist, false otherwise
1766 Retrieves the structure element from a COS dictionary. @return A PDStructureElement object or null if not found in the dictionary
1767 Fetches the string filter name from a dictionary. @return The string filter name or IDENTITY if not found in the dictionary
1768 Converts a font code to its corresponding Unicode string using a ToUnicode CMap. @param code the font code to convert @return the Unicode string or null if conversion is not possible
1769 Fetches the subtype of this object, initializing it with a default if not already set. @return COSName representing the subtype of this object
1770 Retrieves the relationship type from the dictionary. @return The COSName representing the relationship type.
1771 Retrieves the appearance state from the COS object. @return The COSName representing the appearance state, or null if not found.
1772 Checks if a trailer's COSDictionary is encrypted. @return true if encrypted, false otherwise
1773 Retrieves the encryption dictionary from the trailer. @return The encryption dictionary or null if not found
1774 Parses the PDF document and retrieves the root dictionary from the trailer. @throws IOException if the root object specification is missing in the trailer.
1775 Retrieves the AcroForm of a PDF document with optional fixups. @param acroFormFixup object to apply fixes to the AcroForm @return PDAcroForm object or null if not available
1776 Retrieves viewer preferences from the PDF document. @return PDViewerPreferences object or null if not found in the document
1777 Fetches and returns the document's name dictionary or null if it doesn't exist.
1778 Fetches and returns the destination dictionary from PDF root, or null if not found. @return PDDocumentNameDestinationDictionary object or null if not found
1779 Retrieves mark information from the root dictionary. @return PDMarkInfo object if found, otherwise null
1780 Fetches and returns the URI dictionary from the document's root, or null if not found.
1781 Retrieves the structure tree root of a PDF document. @return PDStructureTreeRoot object or null if not found in the document
1782 Fetches and returns optional content properties from the root dictionary. @return PDOptionalContentProperties object or null if not found in the root dictionary
1783 Fetches and returns a destination name tree node from the document's name dictionary or catalog. @return PDDestinationNameTreeNode object or null if not found in either location
1784 Removes a specified key usage extension from the dictionary. @param keyUsageExtension the extension to be removed
1785 Removes a subject from the COSArray in the PDF dictionary. @param subject byte array representing the subject to be removed
1786 Removes a user property from the COS object array and notifies changes. @param userProperty the property to be removed
1787 Fetches a specific page from the PDF document. @return PDPage object or null if not found in the document
1788 Fetches a page from the COSDictionary object. @return PDPage object or null if not found in the dictionary
1789 Retrieves a page object from the COS dictionary, or returns null if not found. @return PDPage object or null if not present in the COS dictionary
1790 Fetches and returns the stream filter name from a dictionary. If not found, defaults to IDENTITY.
1791 Retrieves a resource object based on its kind and name from the resources dictionary. @param kind Resource type (COSName) @param name Resource identifier (COSName) @return COSBase object or null if not found
1792 Retrieves a COSObject from the resources dictionary using provided kind and name. @param kind The type of resource to search for (COSName) @param name The specific resource to retrieve (COSName) @return Corresponding COSObject or null if not found or not an indirect object
1793 Fetches and returns a PDTransition object from the page's dictionary, or null if not found.
1794 Fetches JavaScript node from the name dictionary. @return PDJavascriptNameTreeNode or null if not found in the dictionary
1795 Retrieves the embedded files tree node from the name dictionary. @return PDEmbeddedFilesNameTreeNode if found, otherwise null
1796 Returns names of a specific kind from the resources dictionary. @param kind type of name to retrieve @return iterable set of names or empty if not found
1797 Removes a specified issuer from the COSArray in the dictionary. @param issuer The byte array representing the issuer to be removed.
1798 Retrieves the crypt filter method from the dictionary. @return The crypt filter method as a COSName object
1799 Checks if a given dictionary is of catalog type in PDF context. @param dictionary COSDictionary object to be checked @return true if it's a catalog, false otherwise
1800 Parses a COS Dictionary from the input stream. Handles invalid data and incomplete dictionaries. @param isDirect indicates if the dictionary should be direct or not @return COSDictionary object, may contain partially parsed data on error @throws IOException if there's an issue with reading from the source
1801 Constructs a PDRectangle from a float array, handling large values as per PDF specification. @param array input array with 4 float values representing rectangle coordinates
1802 Constructs line dash pattern for PDF, adjusting phase if necessary. @param array COSArray of float values defining dash pattern @param phase Initial phase (may be adjusted to positive value)
1803 Returns a string representation of PDRange in the format "PDRange{min, max}" @return String representing the range
1804 Evaluates input values against a predefined function and returns resultant values. @param input float array of values to be processed @return float array containing evaluated output values @throws IOException if there's an issue with the function execution
1805 Reads a patch from an image input stream based on provided parameters. @param input the source of the image data @param isFree indicates if the patch is free or not @param implicitEdge edge points for non-free patches @param implicitCornerColor corner colors for non-free patches @return a Patch object, or null on EOFException
1806 Reads a vertex from an image stream and applies transformations. @param input ImageInputStream to read from @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color component value @return Vertex object with transformed coordinates and color components
1807 Fetches and returns the gamma color before the current index. @return PDGamma object representing the before color, or null if not found
1808 Fetches and returns the gamma value after color adjustment. @return The PDGamma object at index 1, or null if not found
1809 Fetches and returns the starting color from the color palette. @return The PDGamma object representing the starting color
1810 Fetches the ending color from an indexed list. @return The ending color as a PDGamma object
1811 Retrieves the blend mode from the dictionary object. @return The blend mode instance if found, otherwise null
1812 Retrieves the color space of an object. If not already set, creates and sets it. @return The color space of the object @throws IOException if there is an error creating or retrieving the color space
1813 Checks if a given COSDictionary represents a page tree node in PDF structure. @param node the COSDictionary to be checked @return true if it is a page tree node, false otherwise
1814 Retrieves a list of filter names from the parameters object. @return List<String> containing filter names or an empty list if not found
1815 Retrieves an integer value from a dictionary object. @param firstKey primary key for the object @param secondKey secondary key for the object @param defaultValue value to return if no integer is found @return int value or defaultValue if not found or not an integer
1816 Retrieves a boolean value from dictionary using two keys. @param firstKey primary key for dictionary lookup @param secondKey secondary key for dictionary lookup @param defaultValue fallback value if key not found or value is not a boolean @return boolean value or defaultValue if not found or not a boolean
1817 Retrieves a COSDictionary object using two keys. @param firstKey the primary key for retrieval @param secondKey the secondary key for retrieval @return COSDictionary if found, otherwise returns null
1818 Creates a matrix from the provided base object, validating its type and content. @param base The input object to create the matrix from (COSArray expected) @return A Matrix object based on the input; empty if validation fails or incompatible type
1819 Removes a specified Object ID from the dictionary's OID array. @param oid byte array representing the Object ID to remove
1820 Fetches the upper limit from a COSArray node. @return Upper limit as String or null if not found in the array
1821 Fetches a specific page from the PDF document. @return PDPage object representing the page, or null if not found
1822 Retrieves the border effect dictionary from a COS object. @return PDBorderEffectDictionary if BE exists, otherwise null
1823 Retrieves the border style from a COS object as a PD border style dictionary. @return A PD border style dictionary or null if not found in the COS object
1824 Fetches the previous URI from the COS object if it exists. @return PDActionURI object or null if not found
1825 Fetches external data from the COS object and returns it as a dictionary. @return PDExternalDataDictionary if external data exists, otherwise null
1826 Retrieves the border style dictionary from a COS object, if it exists. @return Border style dictionary or null if not found
1827 Fetches and returns the border effect dictionary from a COS object, if available. @return Border effect dictionary or null if not found
1828 Fetches and returns the border effect dictionary from a COS object, or null if not found.
1829 Retrieves appearance characteristics from the COS object's dictionary. @return PDAppearanceCharacteristicsDictionary or null if not found in the COS object
1830 Fetches additional actions for a PDF annotation. @return PDAnnotationAdditionalActions object or null if not found
1831 Retrieves the border style from a COS dictionary object. @return A PDBorderStyleDictionary object or null if not found in the COS dictionary.
1832 Retrieves the normal appearance entry from a COSDictionary. @return PDAppearanceEntry object or null if not found in dictionary
1833 Fetches the filter data dictionary from the PDF object. @return PDPropBuildDataDict object or null if not found in PDF object
1834 Retrieves the Public Security Dictionary from the object's dictionary. @return PDPropBuildDataDict object or null if not found in the dictionary.
1835 Fetches and returns the application data dictionary or null if not found. @return PDPropBuildDataDict object containing application data or null if not found
1836 Fetches and returns a PDPropBuild object from the dictionary, or null if not found.
1837 Retrieves the timestamp from a COSDictionary object. @return PDSeedValueTimeStamp object or null if not found in dictionary
1838 Fetches the SEED value certificate from a COSDictionary. @return PDSeedValueCertificate object or null if not found in dictionary
1839 Retrieves a COSBase object from a given path. @param objPath the path to the object within a COSArray or COSDictionary @return the retrieved COSBase object, or 'this' if not found
1840 Retrieves an attribute value by its name from a COS object. @param attrName the name of the attribute @return the COSBase object representing the attribute value, or null if not found
1841 Fetches attribute value by name or returns a default value if not found. @param attrName the name of the attribute to fetch @param defaultValue the value to return if specified attribute is not found @return Attribute value or defaultValue if attribute is not present
1842 Fetches the appearance dictionary from the object's internal dictionary. @return PDAppearanceDictionary if found, otherwise returns null
1843 Checks if a specified object exists in COS dictionary by its name. @param name the unique identifier of the object @return true if object exists, false otherwise
1844 Retrieves a name or an array of names based on the input. @param name key to retrieve object from dictionary @param defaultValue value returned if no match is found @return single name, array of names, or defaultValue
1845 Retrieves a number or name from COSObject. @param name key to search for in the dictionary @param defaultValue returned if no matching object found @return float value, string name, or defaultValue
1846 Fetches a number or array of numbers by name from an object. @param name key to search for in the object's dictionary @param defaultValue fallback value if no matching number is found @return float value, float array, null, or defaultValue based on the object's content
1847 Fetches a color object by name from the COS dictionary. @param name unique identifier of the color in the dictionary @return PDGamma color object or null if not found
1848 Creates a unique key for the specified dictionary type and prefix. @param kind dictionary type @param prefix initial part of the key @return unique COSName key for the dictionary
1849 Fetches and returns a PDSeedValueMDP from the dictionary using key "MDP".
1850 Fetches an array of strings by name from COS object dictionary. @param name key to retrieve the array @return String array or null if not found or not a COSArray
1851 Fetches the target directory from a COS dictionary object. @return PDTargetDirectory object or null if not found in the dictionary
1852 Retrieves Windows launch parameters from a COS dictionary. @return PDWindowsLaunchParams object or null if not found in the action's dictionary
1853 Retrieves the target directory from a COS object dictionary, if it exists. @return PDTargetDirectory object or null if not found in the dictionary
1854 Retrieves a destination by name from PDF data dictionary. @param name the unique name of the destination @return PDDestination object or null if not found or invalid type
1855 Retrieves and creates a destination object from COS object's dictionary. @return A PDDestination object if successful, throws IOException otherwise
1856 Retrieves and creates a destination object from the COS dictionary. @return PDDestination object containing destination information @throws IOException if there's an issue with reading the COS object
1857 Fetches and returns a destination object from COS dictionary. @return Destination object extracted from the COS object's dictionary, or throws IOException if not found.
1858 Fetches and returns a destination object from COS dictionary. @return PDDestination object created from the DEST key in COS dictionary @throws IOException if there's an error while fetching or creating the object
1859 Retrieves JavaScript object from FDF dictionary if it exists, otherwise returns null. @return FDFJavaScript object or null if not found in the FDF dictionary
1860 Retrieves the digital signature from a PDF catalog dictionary, if present. @return PDSignature object or null if not found in the PDF catalog
1861 Retrieves the border style from a COS dictionary in annotations. @return PDBorderStyleDictionary object or null if not found
1862 Retrieves crypt filter dictionary for a given crypt filter name. @param cryptFilterName the name of the crypt filter @return Crypt filter dictionary or null if not found
1863 Fetches and processes a map of classes from the COS object's dictionary. @return Map<String, Object> containing processed PDAttributeObjects or Lists thereof
1864 Fetches the parent tree node from COS dictionary if it exists. @return Parent tree node object or null if not found.
1865 Retrieves the ID tree as a node object from the COSDictionary. @return PDStructureElementNameTreeNode if ID tree exists, otherwise null
1866 Retrieves the lower limit from a COSArray node. @return String containing the lower limit or null if not found
1867 Fetches and returns a border effect dictionary from the annotation, or null if none exists.
1868 Returns the sub filter name from the dictionary as a string. @return Sub filter name or null if not found in dictionary
1869 Retrieves the appearance dictionary for a PDF field. @return PDAppearanceDictionary object or null if not found
1870 Creates a PDXObject from the given base and resources. Throws an exception if base is not COSStream or has invalid subtype. @param base COSBase object representing the source data @param resources Resources used to create the PDXObject @return PDXObject instance based on the input type and subtype @throws IOException if base is not a COSStream or has invalid subtype
1871 Fetches and returns the PDF resources from the object. @return PDResources object or null if not found in COSDictionary
1872 Fetches and creates an extended graphics state if not already present. @return Extended graphics state object or null if not found or created
1873 Fetches the render state based on the destination (PRINT, VIEW). Falls back to EXPORT if not found. @param destination the rendering target (PRINT or VIEW) @return corresponding RenderState object or null if not found
1874 Retrieves the device N process from a COSDictionary. @return PDDeviceNProcess object or null if not found in dictionary
1875 Retrieves the character processing dictionary from an object. @return COSDictionary containing character processing data, or null if not found
1876 Fetches and returns the PDF resources. If not already loaded, it initializes them from a dictionary. @return PDResources object containing PDF resources
1877 Retrieves the appearance stream reference for a field, if it exists. @return FDFNamedPageReference object or null if not found
1878 Retrieves Panose data from a COSDictionary style object. @return PDPanose object if found, otherwise null
1879 Retrieves the named page reference from a PDF template dictionary, if it exists. @return FDFNamedPageReference object or null if not found in the template dictionary.
1880 Retrieves and encapsulates page information from a COSDictionary. @return FDFPageInfo object or null if no dictionary is found
1881 Fetches additional actions from a PDF field dictionary. @return PDAdditionalActions object or null if not found in the field
1882 Retrieves the icon fit from a field's COS dictionary. @return FDFIconFit object if found, otherwise null
1883 Fetches all appearance streams from sub-dictionary. Throws exception if entry is not a sub-dictionary. @return Map of COSName to PDAppearanceStream objects or empty map if no valid streams found
1884 Fetches and returns the CID System Information from a dictionary object. @return PDCIDSystemInfo object or null if not found in the dictionary
1885 Returns the filter name from the dictionary as a string. @return The filter name in string format or null if not found
1886 Retrieves the title from the annotation object using COSName.T as key. @return Title string extracted from the annotation object
1887 Retrieves the filter name from the dictionary object. @return The filter's name as a string or null if not found
1888 Retrieves a long value from COSName by key with a fallback default value. @param key the string identifier for the desired long value @param defaultValue the value to return if the key is not found @return the long value associated with the key or defaultValue if not found
1889 Fetches a long value from the COSName key. If not found, returns default value (-1L). @param key unique identifier of type COSName @return long value or -1L if not found
1890 Fetches a long value from the PDF document using the provided key. @param key the string name of the object to fetch @return the long value associated with the key, or -1 if not found
1891 Retrieves visibility policy from dictionary. @return COSName object representing the visibility policy
1892 Fetches the origin of the coordinate system as a float array. @return Float array representing the origin coordinates, or null if not found
1893 Retrieves an array of line slope dictionaries from the COS object. @return Array of PDNumberFormatDictionary objects or null if not found
1894 Retrieves an array of number format dictionaries from the COS object. @return Array of PDNumberFormatDictionary objects, or null if not found
1895 Retrieves an array of number format dictionaries from the COS object. @return Array of PDNumberFormatDictionary objects or null if not found.
1896 Fetches and returns an array of number format dictionaries for distances. @return Array of PDNumberFormatDictionary objects or null if not found
1897 Retrieves an array of number format dictionaries from the COSObject's Y array. @return Array of PDNumberFormatDictionary objects or null if not found
1898 Fetches and returns an array of PDNumberFormatDictionaries from the COSObject. @return Array of PDNumberFormatDictionary objects or null if not found
1899 Retrieves a list of selected options' indices. @return List of integers representing the indices, or an empty list if none are selected
1900 Retrieves a list of PDFields in the calculated order from COSArray CO. @return List of PDField objects or an empty list if not found
1901 Fetches a range of bytes from the dictionary. @return An integer array representing the byte range, or an empty array if not found.
1902 Fetches and returns a list of byte arrays from the OID (Object Identifier) in the dictionary. @return List of byte arrays or null if no OID is found
1903 Fetches the issuer from a COS dictionary as a list of byte arrays. @return List of byte arrays representing the issuer or null if not found
1904 Retrieves a list of key usage extensions from the dictionary. @return List<String> containing key usage extensions or null if not found
1905 Fetches the subject data as a list of byte arrays from a COS dictionary. @return List<byte[]> containing subject data or null if not found in dictionary
1906 Fetches legal attestations from the document's dictionary and returns them as a list of strings. @return List of string representations of legal attestations or an empty list if none are found
1907 Retrieves a list of reasons from the dictionary object. @return List<String> containing reason strings or an empty list if none found
1908 Sets and resolves the startxref for PDF processing, handling XRef objects and their chains. @param startxrefBytePosValue byte position value of the starting XRef object
1909 Fetches a floating point value by key. If not found, returns default value (-1). @param key the identifier for the floating point value @return the floating point value or -1 if not found
1910 Returns the Y step value from COS object or default to 0 if not found.
1911 Retrieves the X step value from a COS object. @return The X step value as a float, or default to 0 if not found.
1912 Retrieves the gamma value from the dictionary. Defaults to 1.0 if not found. @return float value of gamma
1913 Retrieves missing width from dictionary as a float value. Defaults to 0 if not found. @return The missing width as a float
1914 Retrieves the maximum width from a dictionary object. @return The maximum width as a float; defaults to 0 if not found
1915 Fetches and returns the average width from a dictionary object. @return Average width as a float, defaults to 0 if not found
1916 Retrieves the STEM_H value from a dictionary, defaults to 0 if not found. @return The float value of STEM_H or 0 if not present in the dictionary
1917 Retrieves the STEM_V value from the dictionary. Defaults to 0 if not found. @return float value of STEM_V or 0 if not present
1918 Retrieves the X height of a font, handling negative infinity values. @return The absolute value of X height if it was negative infinity, otherwise returns X height.
1919 Retrieves the cap height value, handling potential negative infinity issues. @return Cap height as a float value
1920 Retrieves the leading value from a dictionary using a predefined key. @return Float value of the leading attribute or default 0 if not found.
1921 Retrieves the descent value from a dictionary object. @return Float value of descent or 0 if not found
1922 Retrieves the ascent value from an internal dictionary. @return The ascent value as a float (default is 0 if not found)
1923 Retrieves the italic angle from a dictionary object. @return Italic angle as a float; defaults to 0 if not found
1924 Fetches and returns the font weight value from a dictionary object. @return Font weight as a float; defaults to 0 if not found
1925 Fetches the opacity value from annotations. Defaults to 1 if not found. @return Current opacity value as a float
1926 Returns the guideline width from the dictionary, defaulting to 1 if not found.
1927 Retrieves the user unit value from a page. If the value is less than or equal to 0, it returns 1.0 as default. @return User unit value as float
1928 Fetches a float value from PDF by key, returns default if not found. @param key the name of the property to fetch @param defaultValue the value returned if key is not found @return float value associated with key or defaultValue if not found
1929 Retrieves a floating point value from a given PDF key. @param key the PDF key as a string @return the corresponding floating point value or -1 if not found
1930 Retrieves the list of digest methods from a dictionary. @return List of digest method names, or an empty list if none found
1931 Retrieves sub-filter names from a dictionary object. @return List of sub-filter names or an empty list if none exist
1932 Retrieves quad points from a COS object as an array of floats. @return float array of quad points or null if not present
1933 Fetches the background array from a COSDictionary object. @return COSArray of background elements, or null if not found
1934 Retrieves a list of component names from the dictionary. @return List of component names or empty if none are found
1935 Retrieves the interior color from an annotation. @return Interior Color as a Color object or null if not found/invalid
1936 Retrieves the transformation matrix from a dictionary. If no matrix is found, returns an identity matrix. @return float array representing the transformation matrix
1937 Retrieves the list of widths from the dictionary or returns an empty list if not found. @return List<Float> containing width values or an empty list
1938 Retrieves a list of FDFField objects from the template's COSArray. @return List<FDFField> if fields exist, otherwise returns null
1939 Retrieves a list of FDFTemplates from the page object. @return List of FDFTemplates or null if no templates are found
1940 Retrieves and processes options from a COSArray into a List of Objects. @return List containing processed objects or null if no options found
1941 Retrieves a list of child fields (FDFField objects) from the current field. @return List<FDFField> or null if no children exist
1942 Retrieves a list of FDFPages from the FDF object. @return List of FDFPage objects or null if not found
1943 Retrieves and returns a list of FDFField objects from the fdf object. @return List<FDFField> or null if no fields are found in the fdf object
1944 Fetches and returns the ID array from the document. @return COSArray containing document IDs or null if not found
1945 Retrieves the interior color from annotation, if available. @return Interior color as a Color object or null if not found in annotation
1946 Fetches and returns the coordinate points of an annotation as a float array. @return Float array of coordinates or null if not found (shouldn't occur)
1947 Fetches and returns the COSArray representing the domain. If not already fetched, it retrieves from the underlying COSObject. @return COSArray object representing the domain
1948 Fetches the extended COSArray object associated with this object. If not already fetched, it retrieves from the underlying COSObject using EXTEND key. @return The extended COSArray or null if not found or an error occurred during fetching.
1949 Retrieves and returns the COSArray representing the document's domain. If not already retrieved, it fetches from the underlying COSObject. @return The COSArray representation of the document's domain
1950 Retrieves the coordinates as a COSArray object. If not already fetched, it obtains them from the COSObject. @return The coordinates as a COSArray or null if they don't exist
1951 Fetches and returns the rectangular differences as a float array. @return float array of rectangular differences or an empty array if not found
1952 Retrieves vertex coordinates as a float array from the COS object. @return Float array of vertex coordinates or null if not found
1953 Retrieves the endpoint ending style from a COSArray. @return Endpoint ending style as a string or "None" if not found in array
1954 Fetches the starting point ending style from a COSArray object. @return The name of the style or "None" if not found or invalid data
1955 Fetches and returns a 2D array of floats representing the object's path. Returns null if no path is found. Each sub-array contains floating point numbers from COSArray objects.
1956 Fetches and returns the vertices as a float array from the COS object. @return Float array of vertices or null if not found in the COS object
1957 Retrieves quadrilateral points from a COS object as a float array. @return Float array of quadrilateral points or null if not found
1958 Fetches and returns the second vertical offset from a COSArray, or 0 if not found.
1959 Retrieves the horizontal offset for a caption from a COSArray object. @return The first float value in the COSArray or 0 if the array is null.
1960 Retrieves and normalizes the volume level from an action object. @return A float value between -1 and 1 representing the volume level, defaults to 1 if out of range
1961 Fetches the endpoint ending style from a COSArray or returns default if not found. @return Endpoint ending style as a String, defaults to LE_NONE if not available
1962 Fetches and returns the URL type from the dictionary. @return The URL type as a string
1963 Fetches a list of floats representing ink data from the COSObject. @return 2D float array containing ink data, or an empty array if not found
1964 Fetches a float array from the 'CL' key in the COS object, if it exists. @return Float array or null if not found
1965 Fetches an array of rectangle differences from a COS object. @return Float array of rectangle differences or empty if not found
1966 Fetches and returns rectangular differences as a float array. If no data is available, an empty array is returned.
1967 Retrieves the fields from an internal data structure as a COSArray. @return COSArray of fields or null if not found
1968 Retrieves the fields array from an underlying action object. @return COSArray containing field data, or null if not present
1969 Retrieves the font setting from a dictionary object. @return PDFontSetting object if found, otherwise returns null
1970 Retrieves and returns the decoding values as a COSArray object. @return COSArray of decoding values or null if not present
1971 Fetches the start point ending style from a COSArray or returns default if not found. @return Start point ending style as string or "LE_NONE" if not available.
1972 Retrieves the length of the leader line from a COS object. @return The length of the leader line as a float
1973 Retrieves a line as an array of floating-point numbers from the COS object. @return float array representing a line, or null if not found
1974 Retrieves the leader line offset length from the COS object. @return Leader line offset length as a float value
1975 Retrieves the version from the catalog. @return A string representation of the version
1976 Retrieves the intent from the annotation as a string. @return The intent name as a string or null if not present in the annotation
1977 Creates a FDFAnnotation object based on the provided COSDictionary's subtype. @param fdfDic the dictionary containing annotation information @return a FDFAnnotation object or null if creation fails
1978 Retrieves the sub-filter name from the dictionary object. @return The sub-filter name as a string or null if not found
1979 Retrieves the filter name from the dictionary. @return The filter name as a string or null if not found
1980 Fetches and returns the subtype property from the object's properties. @return The subtype name as a string, or null if not found
1981 Returns the type of the object as a string from its properties. @return The type name as a string or null if not found
1982 Returns the language of the document, or null if properties are not available.
1983 Fetches and returns the name from the COS object. @return The name as a string or null if not found
1984 Creates and returns a PDF structure node based on the given COS dictionary type. @param node COS dictionary containing node information, its type determines the returned object @return PDStructureNode (StructTreeRoot or StructElem) based on the node's type; throws exception for unknown types
1985 Retrieves and returns the structure type of the COS object as a string.
1986 Retrieves the owner's name from COS Object using specific key. @return The owner's name as a String or null if not found
1987 Retrieves the type of the COS object as a string. @return Type of the COS object as a string
1988 Fetches and returns the style attribute from the root object.
1989 Fetches the trapped state of an object as a string. @return The trapped state as a string or null if not found
1990 Retrieves the version of the object from its root name. @return Version string from the object's root name, or null if not found
1991 Retrieves the page layout from a root object, handling invalid inputs by returning SINGLE_PAGE @return PageLayout enum representing the retrieved or default layout
1992 Retrieves the page mode from a COSName object, or returns USE_NONE if not found or invalid. @return The retrieved or default PageMode
1993 Checks if a potential XRef stream starts at the provided offset. @param startXRefOffset The starting location to check for an XRef stream. @return True if it's a valid XRef stream, otherwise False. @throws IOException If there is an issue with reading from the source.
1994 Fetches the text encoding from a COS object, defaults to 'PDFDocEncoding' if not found. @return the encoding type as String
1995 Retrieves the name as a string. If not available, returns a default value. @param key unique identifier for the name @param defaultValue fallback value to be returned if name is null @return name as a String or defaultValue if name is null
1996 Fetches and returns the scale option name, defaults to 'Always' if not found. @return String representing the scale option name
1997 Retrieves the base font name from the dictionary. @return The base font name as a string or null if not found
1998 Fetches and returns the name from the dictionary as a string.
1999 Retrieves the subtype of the COS object as a string. @return The subtype name or null if not found
2000 Retrieves the length of leader line extension from COS object. @return Float value representing the leader line extension length
2001 Fetches and returns the intent name from COS object. @return Name of the intent as a string, or null if not found
2002 Fetches caption positioning from COS object using CP name as a string identifier. @return Caption positioning as a String, or null if not found
2003 Fetches and returns the subtype of the COS object as a string. @return Subtype of the COS object as a string, or null if not found
2004 Creates a PDAction object based on the provided COSDictionary. @param action a COSDictionary containing action information @return appropriate PDAction subclass or null if type is unsupported
2005 Fetches and returns the subtype of an action in string format. @return The subtype name as a string or null if not found
2006 Returns the type of the action as a string.
2007 Checks if the dictionary's subtype name is "NChannel". @return true if subtype is "NChannel", false otherwise
2008 Returns the base font name from the dictionary. @return The base font name as a string or null if not found
2009 Retrieves the base font name from a dictionary object. @return The base font name as a string or null if not found
2010 Retrieves the base font name from the dictionary. @return The base font name as a string, or null if not found
2011 Retrieves the base font name from the dictionary. @return The name of the base font as a string, or null if not found
2012 Retrieves the font stretch value from the dictionary. @return Font stretch value as a string, or null if not found
2013 Retrieves and returns the font name from the dictionary object.
2014 Returns the subtype name from a dictionary as a string. @return The subtype name or null if not found in the dictionary
2015 Fetches and returns the type of the object as a string from its dictionary.
2016 Returns the scale type, defaults to proportional if not defined. @return String representing the scale type
2017 Returns the name as a string from the given PDF key. @param key the PDF key to retrieve the name for @return the name as a string or null if not found
2018 Retrieves the line ending style from annotation. @return Line ending style as a string
2019 Checks if a specific edge is attached in the properties array. @param edge The edge to check for attachment @return True if the edge is found, otherwise false
2020 Fetches the horizontal offset of a caption from its COSArray data. @return The first float value in the 'CO' array, or 0 if not found.
2021 Retrieves the vertical offset for a caption in a PDF annotation. @return Vertical offset value as float, or 0 if not found
2022 Writes a COSBase object to output stream and adds it to writtenObjects list. @param obj The COSBase object to be written @throws IOException if an I/O error occurs during writing
2023 Retrieves vertices from a COSArray. @return float array of vertices or null if not found
2024 Fetches the interior color from annotations, if available. @return Color object or null if not found in annotations
2025 Fetches vertex data from annotation. @return float array of vertices or null if not found
2026 Fetches the non-stroking alpha constant value. @return Non-stroking alpha constant as a Float, or null if not found
2027 Fetches and returns the stroking alpha constant value from COSName.CA. @return Floating-point value representing the stroking alpha constant
2028 Fetches smoothness tolerance value. @return Smoothness tolerance as a float
2029 Fetches and returns the flatness tolerance value used in graphics operations.
2030 Retrieves the interior color from an annotation array, if available. @return Interior color as a Color object or null if not found or invalid data
2031 Retrieves the miter limit value from a float item. @return Miter limit as a Float object, or null if not found
2032 Creates a property list based on the type specified in the COSDictionary. @param dict Contains data and information about the object to create. @return A PDPropertyList object of the appropriate subclass or null if type is unsupported.
2033 Fetches the color space. @return The PDColorSpace object or null if not found @throws IOException If an error occurs during fetching
2034 Fetches and returns a list of user properties owned by the object. @return List of PDUserProperty objects or an empty list if none found
2035 Extracts regions from a given PDPage and prepares for text extraction. @param page the PDF page to extract regions from @throws IOException if an I/O error occurs during processing
2036 Retrieves the fly scale value from COS object. @return Fly scale value as a float
2037 Returns the duration of an object in COS format. @return Duration as a floating-point number
2038 Retrieves the width value from a COS object's dictionary. Handles case where value is a COSName (returns 0 as per Adobe behavior). @return The width value as a float
2039 Fetches and returns the constant opacity value from the COS object. @return The constant opacity value as a float, defaults to 1 if not found
2040 Retrieves the line width from a float item by its CosName (LW). @return Line width as a Float value
2041 Writes a COSBase object to an OutputStream. Handles various data types and references.
2042 Returns the ending style of an annotation's endpoint, or a default value if not found. @return Ending style as String, or "None" if not specified
2043 Fetches the list of ink coordinates from annotation. @return List of float arrays representing ink coordinates, or null if not found (which should not occur)
2044 Retrieves a color object from annotated data, if available. @return Color object or null if not found in the annotation
2045 Retrieves the interior color from annotations. @return Interior Color object or null if not found or invalid format
2046 Fetches a line from the annotation as a float array. @return Float array representing the line or null if not found
2047 Retrieves callout values from the annotation. @return float array of callout values or null if not present
2048 Fetches the starting point ending style of a line annotation. @return The name of the ending style or "None" if not found.
2049 Puts an XObject into this COSDictionary under a given name. @param name the COSName of the XObject @param xobject the PDXObject to be stored
2050 Sets the unit of measurement for the object. @param units The new unit of measurement as a String
2051 Sets the display format for fractions. Throws exception if input is invalid. @param fractionalDisplay String representing display format ("D", "F", "R", "T" or null)
2052 Fetches the bounding box of this PDF object. @return Bounding box as a PDRectangle or null if not found.
2053 Fetches and returns a rectangle object from the annotation, if available. @return PDRectangle object or null if not found in the annotation
2054 Fetches the fringe (border) of a PDF annotation as a rectangle. @return PDRectangle object representing the fringe or null if not found
2055 Fetches the fringe of a PDF annotation as a rectangle. @return PDRectangle object or null if not found in the annotation
2056 Fetches the fringe rectangle from a COSArray if it exists, otherwise returns null. @return PDRectangle object or null if not found in annot's COSArray(RD)
2057 Retrieves a fringe rectangle from the annotation, if present. @return PDRectangle object or null if not found in the annotation
2058 Retrieves the font bounding box as a PDRectangle. @return PDRectangle object representing the font bounding box, or null if not found
2059 Fetches the font bounding box from dictionary. @return PDRectangle object representing the font's bounding box, or null if not found
2060 Retrieves the bounding box of a PDF object as a PDRectangle or returns null if it doesn't exist. @return PDRectangle representing the bounding box or null if not found
2061 Retrieves all shading names from the collection. @return An iterable containing COSName objects representing shadings
2062 Fetches the bounding box of a PDF object as a rectangle. @return PDRectangle object or null if not found for this object
2063 Places a named pattern into the COS object with the specified name. @param name the unique identifier for the pattern @param pattern the abstract pattern to be placed in the COS object
2064 Retrieves the bounding box of a PDF object as a PDRectangle or returns null if not found. @return PDRectangle object representing the bounding box, or null if it doesn't exist
2065 Initializes an empty FDFDocument for creating or editing FDF files.
2066 Resolves the bounding box for a widget based on appearance stream or field widget rectangle. @param fieldWidget annotation widget containing field information @param appearanceStream contains visual appearance data of the annotation @return PDRectangle representing the bounding box
2067 Sets the bounding box (BBOX) for the object and notifies of any changes. @param bbox a PDRectangle representing the new bounding box
2068 Sets a color value for a given name and notifies if it's changed. @param name the name of the color @param value the new PDGamma value to set
2069 Determines the image suffix based on its filters. Supports JPG, TIFF, and PNG formats. @return Image format suffix as a string (jpg, tiff, or png)
2070 Sets four colors in PDF object and notifies if changed. @param name key for the color setting @param value new PDFourColours object to be set
2071 Constructs a new PDPage with LETTER size by default.
2072 Retrieves the FDF dictionary from the catalog or creates a new one if not present. @return FDFDictionary object
2073 Adds or retrieves an existing resource of a specific kind. @param kind type of the resource (e.g., COSName.FONT) @param prefix unique identifier prefix for new resources @param object the resource to add or retrieve @return COSName key of the resource, creating one if not found
2074 Adds or updates a font entry in the PDF document with given name and font object. @param name unique identifier for the font @param font the actual font object to be added/updated
2075 Puts a named color space into the dictionary with the given name and value. @param name unique identifier for the color space @param colorSpace the color space object to be added
2076 Adds an extended graphics state to the PDF document under a specified name. @param name unique identifier for the extended graphics state @param extGState the extended graphics state object to be added
2077 Adds or updates a shading object in the COS (Cosmetic Object System) with a given name. @param name unique identifier for the shading object @param shading the PDShading object to be added or updated
2078 Adds a COSName with its associated property list to the main object. @param name The COSName to be added @param properties The associated property list for the COSName
2079 Returns the bounding box of the PDF document. If not already calculated, it fetches and sets it. @return The bounding box as a PDRectangle object or null if not found in the document
2080 Retrieves the bounding box of a PDF object as a PDRectangle. @return A PDRectangle representing the bounding box or null if not found
2081 Fetches and returns a rectangle difference from the COS object, or null if not present.
2082 Fetches a color space by name and caches it for future use if possible. @param name the COSName of the color space @param wasDefault indicates if this is a default color space @return the PDColorSpace object or null if not found or an error occurs
2083 Sets or removes a Unicode embedded file in the PDF dictionary. @param file PDEmbeddedFile object to set as UF (null to remove)
2084 Sets an embedded file in the PDF document's dictionary. @param file The PDEmbeddedFile object to be set; if null, removes existing file
2085 Retrieves and creates a matrix object from the COS dictionary. @return Matrix object created from the COS dictionary
2086 Checks if a specific color space is present in the object. @param name the COSName representing the color space to check @return true if the color space exists, false otherwise
2087 Fetches extended graphics state by name from a COS object.
2088 Checks if a given name corresponds to an image XObject in the COSBase instance. @param name COSName to be checked @return true if it's an image XObject, false otherwise
2089 Fetches and returns all font names in the document. @return An iterable collection of COSName objects representing font names
2090 Retrieves all XObject names from the source. @return An iterable collection of COSName objects representing XObjects
2091 Fetches all color space names from the COSName object. @return An iterable collection of COSName objects representing color spaces
2092 Retrieves an inheritable attribute from a COSDictionary node by its key. @param node the COSDictionary to search in @param key the name of the attribute to retrieve @return the attribute value or null if not found
2093 Fetches a boolean value associated with a given key. @param key the name of the value to fetch @param defaultValue the value returned if the key is not found @return the fetched boolean value or defaultValue if not found
2094 Fetches an integer value based on two keys. Returns a default value if not found. @param firstKey the primary key for retrieval @param secondKey the secondary key for retrieval @return integer value or -1 if not found
2095 Fetches and validates a rectangle from the dictionary. @return PDRectangle object if valid or null otherwise
2096 Retrieves and creates a matrix object from COS dictionary. @return Matrix object representing the transformed data
2097 Retrieves and returns the PDAcroForm, using default fixup. @return PDAcroForm object for the document
2098 Retrieves and returns a difference rectangle from the COS object, or null if it doesn't exist.
2099 Fetches an integer value associated with a given key. @param key unique identifier for the integer value @param defaultValue value to return if no association is found @return Integer value or defaultValue if not found
2100 Retrieves a rectangle object from the bead's COSArray, or returns null if not present. @return PDRectangle object derived from COSArray data, or null if not found
2101 Sets the line dash pattern for graphics state. @param array COSArray containing dash pattern values @param phase Phase offset in the dash pattern
2102 Fetches and returns a line dash pattern from the dictionary. @return PDLineDashPattern object or null if not found or invalid format
2103 Generates a stencil image from PDImage using specified paint. @param pdImage the input PDF image @param paint the painting style to apply on the image @return BufferedImage object with applied stencil and paint @throws IOException if an I/O error occurs during processing
2104 Retrieves and creates a matrix object from COS dictionary. @return Matrix object created from the COS dictionary
2105 Fetches COS objects by their types from the xref table. @param type1 first type of COS object to fetch @param type2 second type of COS object to fetch @return List of COSObjects matching the given types
2106 Constructs PDInlineImage with given params and applies filter decoding if needed. @param parameters COSDictionary containing image parameters @param data byte array of the image data @param resources PDResources object for additional resources @throws IOException if an I/O error occurs during processing
2107 Converts an integer code to Unicode string. Supports custom glyphs if provided. @param code the integer code to convert @param customGlyphList optional list of custom glyphs for conversion @return the corresponding Unicode string, or null if not found
2108 Checks if the document is encrypted. @return true if encrypted, false otherwise
2109 Parses FDF data from the source into a FDFDocument object. Throws IOException if header doesn't contain version info. @return FDFDocument if parsing is successful, otherwise throws IOException
2110 Initializes a PDThreadBead object with default settings.
2111 Sets the version of an application in the dictionary with key "REx". @param applicationVersion the version string to be stored
2112 Initializes an instance of PDRectlinearMeasureDictionary with a specific subtype.
2113 Fetches an optional content group by its name from the collection. @param name unique identifier for the optional content group @return PDOptionalContentGroup object if found, or null otherwise
2114 Fetches and returns a collection of optional content groups from the document. @return Collection of PDOptionalContentGroup objects or an empty collection if none found
2115 Fetches all pattern names from the COS system. @return An iterable collection of COSName objects representing patterns
2116 Sets the modification date of the COS object using provided Calendar. @param c Calendar instance containing the new modification date
2117 Sets the creation date for the COS object. @param creationDate a Calendar instance representing the creation date to be set
2118 Sets the sign date in the dictionary using the provided Calendar object. @param cal the Calendar object containing the new sign date
2119 Adds key usage properties to the certificate. @param digitalSignature char for digital signature @param nonRepudiation char for non-repudiation ... and similarly for other parameters
2120 Retrieves the parent node of a PDF outline. @return Parent PDOutlineNode or null if none exists
2121 Fetches and returns the document outline if available, otherwise returns null. @return PDDocumentOutline object or null if not found in the root dictionary
2122 Initializes a new PDAction object and sets its type.
2123 Initializes a shading pattern object and sets its type to shading pattern.
2124 Initializes a new instance of PDStructureTreeRoot with default type.
2125 Constructs a PDStructureElement with specified type and parent node. @param structureType the type of the structure element @param parent the parent structure node of this element
2126 Sets a custom metadata value with given field name and value. @param fieldName the name of the metadata field @param fieldValue the new value for the metadata field
2127 Initializes page labels for a PDF document with a default decimal style starting from the first page. @param document the PDDocument to initialize page labels for
2128 Sets and formats a value for the object, notifying changes if necessary. @param formattedValue The new value to be set and formatted.
2129 Sets a string value in the object's dictionary and notifies of changes. @param name key for the string value @param value new string value to set
2130 Sets the object's name and notifies of any changes. @param name new name for the object
2131 Parses a PDF document from input and returns it as PDDocument object. @param lenient if true, parsing errors are logged instead of thrown @return PDDocument object representing the parsed PDF @throws IOException if an error occurs during parsing or if header doesn't contain version info
2132 Sets the modification date of an object in the PDF document. @param date The new modification date as a Calendar object
2133 Sets the creation date of an object in the system. @param date a Calendar instance representing the creation date to be set
2134 Sets the creation date in the annotation object. @param date Calendar object representing the creation date.
2135 Sets an embedded date in a COS dictionary. Creates the dictionary if it doesn't exist and the date is not null. @param embedded COSName for the dictionary @param key COSName for the date entry @param date Calendar object containing the date to set, or null to remove the entry
2136 Sets the base string in COS object. @param base The new base string to be set
2137 Constructs a new PDTransition with default style R.
2138 Sets and prepares the standard crypt filter dictionary for encryption. @param cryptFilterDictionary the dictionary to be used for encryption
2139 Sets the default crypt filter dictionary for encryption. @param defaultFilterDictionary the dictionary to be used as the default crypt filter dictionary
2140 Sets a date value in the PDF document using a given key and calendar object
2141 Sets the style of the COS object using a given string. @param s The style to be set for the COS object
2142 Sets the name "N" to the given string value in an action object. @param name The string value to be assigned to "N".
2143 Sets the top element of an integer array or removes it if input is -1
2144 Initializes and sets up a PDPageFitWidthDestination object in an array.
2145 Sets the top element of an integer array or removes it if input is -1
2146 Sets the fitting bounding box type in an array.
2147 Initializes an XYZ destination in a PDF document page with default settings.
2148 Sets the left element of an array to a value or null based on input. @param x the value to set; -1 sets it to null, otherwise sets it to x
2149 Sets the top value of an array at index 3. If input is -1, sets it to null; otherwise, sets it to the input value. @param y new value for the top element in the array (-1 for null)
2150 Sets the zoom level for an array. If zoom is -1, sets index 4 to null; otherwise, sets it to a new COSFloat object with the given zoom value. @param zoom The zoom level to be set (use -1 for null)
2151 Sets the right value in an array at index 4. If input is -1, sets it to null; otherwise, sets it to the integer value. @param x The value to set at index 4 in the array
2152 Decrypts a given dictionary based on object and generation numbers. Ignores signatures.
2153 Fetches and returns file decode parameters in a list of objects. @return List of Objects containing decode parameters or an empty list if none found @throws IOException if there is an error during the fetch operation
2154 Retrieves the document's catalog. If not found, creates a new one and sets it. @return FDFCatalog object representing the document's catalog
2155 Sets the A range for the component using the provided PDRange object. @param range The PDRange object containing the new range values.
2156 Sets the B range of components using the provided PDRange. @param range the new range to be set for component B
2157 Fetches decoding parameters using standard or alternative names. @return List of Objects containing decoding parameters @throws IOException if an input/output error occurs during fetching
2158 Sets the bottom value of an object in a resizable array at index 3. @param y new bottom value (-1 indicates null)
2159 Sets the left element of an array to a given value or null if value is -1. @param x the value to set at the left position (null if -1)
2160 Initializes and sets up a PDPageFitRectangleDestination object in the array.
2161 Sets the rendering intent in a dictionary object. @param ri rendering intent to be set
2162 Sets a named value in the COS object's dictionary and notifies of any changes. @param name the key for the value to set @param value the new value to associate with the key
2163 Appends a bead to the thread, adjusting previous and next beads as necessary. @param append PDThreadBead object to be appended to the thread
2164 Sets the first bead of a thread and updates its reference. @param bead The PDThreadBead to set as the first bead; can't be null
2165 Inserts a new sibling item after the current node in an outline. @param newSibling the PDOutlineItem to be inserted
2166 Inserts a new sibling before this item in the outline hierarchy. @param newSibling the item to be inserted as a sibling
2167 Retrieves or creates the appearance dictionary for an annotation. @return PDAppearanceDictionary object, creating a new one if it doesn't exist
2168 Initializes a tiling pattern for Paint Device (PDF). Sets up resources and pattern type.
2169 Retrieves the fractional space to allocate from fit data. If no data is found, defaults to a range of 0.5. @return A PDRange object representing the fractional space
2170 Initializes a PDPageFitDestination object and sets its type in an array.
2171 Sets the fitting bounding box for the array based on the input flag. @param fitBoundingBox true to set TYPE_BOUNDED, false to set TYPE
2172 Initializes and sets up a PDPageFitHeightDestination object with required parameters.
2173 Sets the left element of an array to a value or null if the value is -1. @param x value to be set as the left element; -1 sets it to null
2174 Sets the bounding box type for the array based on a boolean flag. @param fitBoundingBox true to set as bounded type, false for default type
2175 Returns an iterable collection of extended graphic state names. @return An Iterable object containing COSName objects representing the extended graphic state names.
2176 Returns all property names in this COS object. @return an iterable collection of COSName objects representing the properties
2177 Retrieves the standard crypt filter dictionary. @return The standard crypt filter dictionary (PDCryptFilterDictionary)
2178 Retrieves a string from an embedded dictionary with a fallback value. @param embedded COSName of the embedded dictionary @param key COSName of the desired entry in the dictionary @param defaultValue String to return if key is not found or dictionary is null @return String value from the dictionary or the defaultValue if not found
2179 Retrieves a string value from COSName using a given key or returns a default value if not found. @param key unique identifier for the string @param defaultValue fallback value when key is not found @return the retrieved string or default value if not found
2180 Retrieves the units from the COS object as a string. @return A string representing the units of the object
2181 Retrieves the version from a dictionary using "REx" as the key. @return The version string from the dictionary
2182 Retrieves the base string from COS object. @return the base string, or null if not found
2183 Retrieves a string value by name from an underlying COS object. @param name The key or identifier of the string to retrieve @return The corresponding string value, or null if not found
2184 Retrieves custom metadata value by field name. @param fieldName name of the metadata field @return string value of the field, or null if not found
2185 Retrieves string value of a property by its key from an internal data structure. @param propertyKey the key to identify the property @return the string value of the property, or null if not found
2186 Retrieves and creates an action object from the COS dictionary of this object's COS object. @return PDAction object or null if not found in dictionary
2187 Retrieves a PDF action from the COS object if it exists, otherwise returns null. @return A PDAction object or null if not found in the COSDictionary
2188 Fetches and returns a PDAction object from the COSDictionary, or null if not found.
2189 Retrieves a PDAction from the 'C' dictionary, if it exists. @return PDAction object or null if not found in the dictionary
2190 Fetches and creates a PDAction object from the 'O' dictionary in actions. @return PDAction object or null if 'O' dictionary is not found
2191 Fetches and creates a PDF action from the 'C' dictionary.
2192 Fetches the operation parameter from `params`. Returns 'OPERATION_OPEN' if not found. @return The operation string or 'OPERATION_OPEN' as default.
2193 Retrieves a visual action from the dictionary, if it exists. @return PDAction object or null if not found in the dictionary
2194 Fetches the default appearance string from the dictionary. @return Default appearance string or an empty string if not found
2195 Retrieves the on-value from a widget's appearance dictionary, excluding 'Off'. @return The on-value as a string or an empty string if not found.
2196 Fetches and returns the normal appearance stream from the appearance dictionary. @return Normal appearance stream or null if it doesn't exist or is not a sub-dictionary.
2197 Initializes a DictionaryEncoding with base and difference encoding. @param baseEncoding the COSName of the base encoding @param differences an array of character differences from the base encoding
2198 Extracts specific content from a PDF file based on calculated byte range. @param pdfFile the input PDF file as a byte array @return a byte array containing the extracted contents @throws IOException if an I/O error occurs while reading the file
2199 Fetches and returns specific contents from a PDF file stream.
2200 Fetches and returns the background color from the COSName object. @return PDColor object representing the background color
2201 Retrieves the border color of an object. @return PDColor representing the border color, or null if not set
2202 Returns the color defined by COSName.C in the PDF document. @return PDColor object representing the specified color
2203 Returns the fully qualified name of this object, including parent names. @return Fully qualified name or null if not applicable
2204 Checks if a group with the given name exists. @param groupName the name of the group to search for @return true if the group is found, false otherwise
2205 Fetches the filename using various encoding methods. @return Filename string or null if not found using any method
2206 Retrieves a PDAction object from the 'F' key in the actions dictionary. @return PDAction object or null if not found in the dictionary
2207 Fetches a PDF action (PDAction) from the 'K' dictionary entry, or returns null if not found.
2208 Retrieves the Document-level Print Action from a dictionary. @return PDAction object or null if not found in the dictionary
2209 Retrieves and returns the line dash pattern for this object. If no pattern is found, defaults to a pattern of [3].
2210 Checks if the character set of FontInfo matches with the CID system info. @param cidSystemInfo contains registry and ordering information @param info contains font-specific details including code page range and name @return true if character sets match, false otherwise
2211 Fetches and returns a list of FDFAnnotations from the FDF object. @return List<FDFAnnotation> or null if no annotations found @throws IOException if there's an issue reading the annotation data
2212 Fetches the SecurityHandler for ProtectionPolicy. Throws IOException if not available. @return SecurityHandler<ProtectionPolicy> object, or throws IOException if unavailable
2213 Constructs a new PDEncryption object with the given COSDictionary and sets up its security handler. @param dictionary COSDictionary containing encryption data
2214 Creates an Object from a given COSBase, handling dictionaries and integers. @param kid the COSBase object to create an Object from @return created Object or Integer value if applicable, otherwise null
2215 Retrieves the parent node of a PDF structure node. @return Parent PDStructureNode or null if not found
2216 Checks if the object contains only one COSObject and has an owner. @return true if it's empty as per definition, false otherwise
2217 Checks if the current instance has an 'n' channel attribute set to true. @return True if 'n' channel attribute is true, false otherwise
2218 Fetches and returns the open action from a PDF dictionary object. @return Open action as Destination or Action, or null if not found/supported type @throws IOException if there's an issue reading the PDF data
2219 Retrieves an action object from field's COS dictionary using key "A". @return PDAction object retrieved or created, may be null if not found
2220 Fetches and creates a PDAction from the Workspace Presence (WP) dictionary in the COSDictionary. @return PDAction object or null if WP dictionary is not found
2221 Fetches and creates a PDAction from the Document Security (DS) dictionary. @return PDAction object or null if DS dictionary is not found
2222 Retrieves a page description action from the COS dictionary, if it exists. @return PDAction object or null if not found in the dictionary
2223 Retrieves the WC (Window Close) action from a dictionary of actions. @return PDAction object or null if not found in the dictionary
2224 Retrieves a Print Interval action from the COS dictionary, if it exists. @return PDAction object or null if not found in the dictionary
2225 Fetches and creates a Presentation View (PDAction) from the COSDictionary. @return PDAction object or null if not found in the dictionary
2226 Retrieves the Print Condition action from a dictionary of actions. @return PDAction object for Print Condition or null if not found
2227 Fetches the transparency group object. If not found, creates a new one from COSObject. @return PDTransparencyGroup object or null if not found or creation fails @throws IOException if there's an error reading the COSObject
2228 Retrieves a print operation action from the actions dictionary. @return PDAction object or null if not found in the dictionary
2229 Fetches and creates a PDAction object from the "FO" dictionary in actions. @return PDAction object or null if "FO" dictionary is not found
2230 Retrieves a PDAction object from the actions dictionary using key 'U'. @return PDAction object or null if not found in the dictionary
2231 Retrieves a PDAction object from the 'D' key in a COSDictionary, or returns null if not found. @return PDAction object or null if 'D' key is not present or invalid
2232 Retrieves an action from the 'X' key in a dictionary, if it exists. @return PDAction object or null if not found in the dictionary
2233 Fetches an action from a dictionary by key "E". Returns the created action or null if not found.
2234 Retrieves a PDAction from the actions dictionary using COSName.F as key. @return PDAction object retrieved from the actions dictionary
2235 Fetches a map of JavaScript actions from the document's dictionary. @return Map with names as keys and PDActionJavaScript objects as values, or null if not found in document dictionary
2236 Retrieves a page description action by name 'BL'. @return PDAction object or null if not found in actions dictionary
2237 Checks and returns the correct XRef offset. Throws IOException if an error occurs. @param startXRefOffset initial offset to check @return Correct XRef offset or -1 if not found
2238 Finds and returns the page destination for a given named destination in the PDF document. @param namedDest The named destination to search for @return PDPageDestination object or null if not found @throws IOException If there's an error reading from the PDF document
2239 Retrieves the line dash pattern from the dictionary or defaults to a solid line if none exists. @return PDLineDashPattern object representing the line dash pattern
2240 Initializes PDAnnotationRubberStamp with a specific COS subtype.
2241 Initializes a new PDAnnotationPolyline object and sets its subtype in COSObject.
2242 Initializes a new PDAnnotationPolygon by setting its COS object's subtype to SUB_TYPE.
2243 Writes prepared objects to a COSStream with FLATE compression. @param stream the target COSStream for writing objects @return the same COSStream after writing, now containing the objects
2244 Writes a COSDictionary to the given OutputStream in PDF format. @param output stream to write the dictionary to @param cosDictionary dictionary object to be written @throws IOException if an I/O error occurs
2245 Initializes a PDF annotation line object with default values and sets its subtype.
2246 Initializes PDAnnotationInk object and sets its subtype to COSName.SUBTYPE.
2247 Initializes PDAnnotationFileAttachment with its specific subtype in COSObject.
2248 Initializes and sets up FDFAnnotationUnderline with a specific subtype.
2249 Initializes a new instance of FDFAnnotationStrikeOut and sets its subtype.
2250 Initializes FDFAnnotationSquiggly with a specific subtype for the annotation.
2251 Initializes FDFAnnotationHighlight and sets its subtype name.
2252 Removes a child element from the structure and updates its parent reference. @param structureElement The PDStructureElement to be removed as a kid @return True if removal was successful, false otherwise
2253 Constructs a PDAnnotationSquareCircle with the specified subtype. @param subType the subtype of the annotation square circle
2254 Constructs a new text markup annotation with the specified subtype. Initializes quad points to an empty array as they are required. @param subType the type of the text markup annotation
2255 Retrieves a list of annotation widgets from the object. @return List of PDAnnotationWidget objects, may be empty if none found
2256 Retrieves the annotation popup if it exists, otherwise returns null. @return PDAnnotationPopup object or null if not found
2257 Constructs a PDAnnotationTextMarkup from a COSDictionary. @param field COSDictionary containing annotation data
2258 Constructs a PDAnnotationText object from a COSDictionary. @param field the COSDictionary containing annotation text data
2259 Constructs a new PDAnnotationSquareCircle from a COSDictionary. @param dict the dictionary containing annotation data
2260 Constructs a PDAnnotationSound instance from a COSDictionary. @param field COSDictionary containing sound annotation data
2261 Constructs an instance of PDAnnotationRubberStamp from a COSDictionary. @param field The COSDictionary containing the rubber stamp's data
2262 Constructs a new polyline annotation from a COS dictionary. @param dict COS dictionary containing annotation data
2263 Constructs a polygon annotation from a COSDictionary. @param dict the dictionary containing annotation data
2264 Constructs a new PDAnnotationLine from COSDictionary. @param field COSDictionary containing annotation data
2265 Constructor for PDAnnotationInk. Initializes with a COSDictionary. @param dict the dictionary containing ink annotation data
2266 Constructs an annotation free text object from a COS dictionary. @param field COS dictionary containing annotation data
2267 Initializes a new instance of PDAnnotationFileAttachment with a COSDictionary. @param field a dictionary containing annotation data
2268 Constructs an annotation caret from a COSDictionary field. @param field a dictionary containing annotation data
2269 Initializes PDAnnotationText with COS object subtype set to SUB_TYPE.
2270 Inserts a new element before a reference element in the structure. @param newKid the element to be inserted @param refKid the existing element before which newKid is to be inserted
2271 Appends an element to current structure and sets parent reference. @param structureElement the PDStructureElement to append
2272 Returns a file specification object from the COS dictionary. @return PDFileSpecification object @throws IOException if an I/O error occurs while reading the data
2273 Creates a PDImageXObject from a BufferedImage; supports only 1-bit black/white images. @param document the PDF document to which the image will be added @param image the source BufferedImage, must be 1-bit black/white @return a PDImageXObject created from the provided BufferedImage @throws IOException if an I/O error occurs or if the image is not 1-bit black/white
2274 Initializes PDPageTree with a given COSDictionary root and default resource cache. @param root The root dictionary of the page tree
2275 Retrieves and returns a tree of all pages in the PDF document. @return PDPageTree containing all pages in the document
2276 Checks the validity of page objects in the COSDictionary root, ensuring all pages are dereferenced and the root contains a PAGES dictionary. @param root The COSDictionary to check for page object validity @throws IOException If the root does not contain a PAGES dictionary
2277 Retrieves encoded values array, initializes if null with default pattern. @return COSArray of encoded values
2278 Initializes PDFunctionType2 with default values if necessary, sets coefficients and exponent. @param function COSBase object containing the function data
2279 Fetches and organizes attribute objects from the COS object's dictionary. @return Revisions<PDAttributeObject> containing fetched attributes with revision numbers
2280 Retrieves a value associated with the given name from this node or its children. @param name The key for which to retrieve the value. @return The value associated with the name, or null if not found. @throws IOException If an I/O error occurs during retrieval.
2281 Searches for a trailer dictionary in the PDF file. @param trailer COSDictionary to store found trailer data @return true if valid trailer is found, otherwise false @throws IOException if an I/O error occurs
2282 Searches for trailer items in a COSDictionary and updates it accordingly. @param trailer the dictionary to search within @return true if root object is found and updated, false otherwise
2283 Sets an attribute with a given name to a specified value and notifies of any changes. @param attrName the name of the attribute @param attrValue the new value for the attribute
2284 Retrieves file specification from action dictionary object. @return PDFileSpecification object representing the file, or null if not found @throws IOException if there is an error accessing the file system
2285 Retrieves and creates a file specification from action's dictionary object. @return PDFileSpecification object representing the file, throws IOException if error occurs @throws IOException if an input/output error occurred
2286 Retrieves file specification from the action dictionary object. @return PDFileSpecification object representing the file or throws IOException if an error occurs @throws IOException if there is an issue reading the file
2287 Retrieves and creates a file specification from the COS object dictionary. @return PDFileSpecification object representing the file or throws IOException if an error occurs
2288 Fetches and creates a file specification from the action's dictionary object. @return PDFileSpecification object or throws IOException if an error occurs
2289 Fetches a file specification from COS object's dictionary. @return PDFileSpecification object or throws IOException if not found
2290 Retrieves file specification from a dictionary object. @return PDFileSpecification object or null if not found, throws IOException if error occurs during retrieval
2291 Constructs a Pattern Content Stream using a Tiling Pattern. @param pattern the tiling pattern to be used for content stream creation @throws IOException if an I/O error occurs while creating the output stream
2292 Retrieves a list of embedded PDFileSpecifications from the FDF object. @return A List of PDFileSpecification objects or null if none are found. @throws IOException if there's an issue reading the data
2293 Retrieves a file specification from the stream's dictionary. @return PDFileSpecification object or throws IOException if not found @throws IOException if there is an error accessing the stream's dictionary
2294 Fetches and returns the latest version of the document from its header or catalog. @return the most recent version as a float value
2295 Sets the conversion factor value in the COS object. @param conversionFactor float value to be set
2296 Sets intensity level of the COS object. @param i float value representing intensity level
2297 Sets a float value for the given name in the COS object and notifies if changed. @param name key to set the value for @param value float value to be set
2298 Fetches and creates a file specification from the FDF dictionary object. @return PDFileSpecification object or throws IOException if not found
2299 Retrieves print scaling preference with a fallback to default if not set. @return Print scaling value as string, defaults to "AppDefault" if not found
2300 Retrieves print area preference as a string using specified name and boundary. @return Print area preference as a string or default if not found
2301 Sets the MAC creator parameter in the COS object dictionary. If it doesn't exist and a value is provided, it creates it. @param macCreator The string to set as the MAC creator
2302 Creates a view of the data source with optional filters applied. @return RandomAccessRead object for reading filtered or raw data @throws IOException if an I/O error occurs
2303 Fetches the minimum revision from the dictionary. @return The minimum revision as a long value
2304 Fetches and returns the revision number from the dictionary object.
2305 Retrieves the next action in a sequence, handling single or multiple actions. @return List of PDAction objects, or null if none found
2306 Signs the provided PDF file content and returns the signed byte array. @param pdfFile the byte array of the original PDF file @return the byte array of the signed PDF file @throws IOException if an I/O error occurs during signing
2307 Sets the MAC resource fork for the COS object with a given string. @param macResFork String representing the MAC resource fork to be set
2308 Initializes a PDCIEDictionaryBasedColorSpace with RGB values and sets the white point cache. @param rgb COSArray containing RGB color space data
2309 Fetches the decoding range for a specific parameter. @param paramNum the number of the parameter @return Decode range or null if not available
2310 Initializes ShadingContext with given parameters and sets up color models. @param shading PDShading object for shading @param cm ColorModel object for input @param xform AffineTransform object for transformation @param matrix Matrix object for calculations @throws IOException if an I/O error occurs
2311 Signs the content of an input PDF stream and returns it as a byte array. @param pdfFile InputStream containing the PDF file to be signed @return Byte array representation of the signed PDF content @throws IOException if there's an error reading from the input stream
2312 Returns default crypt filter dictionary. @return Crypt filter dictionary with default name
2313 Sets the MAC subtype in the COSDictionary of the object. If necessary, creates a new PARAMS dictionary. @param macSubtype The MAC subtype to be set
2314 Retrieves a floating point number from COS object by its name. @param name identifier for the number in COS object @return Floating point number or throws exception if not found
2315 Retrieves the base state from a COS dictionary. @return The base state as an enumerated value of type BaseState
2316 Adds a group to the existing OCGs and ensures it appears in the user interface by adding it to the "Order" entry. @param ocg The optional content group to be added.
2317 Initializes DictionaryEncoding with a COSDictionary font encoding, applying differences and handling base encoding. @param fontEncoding the font encoding dictionary to be used for initializing this object.
2318 Retrieves a floating point number from an object by its name. @param name the identifier of the number to retrieve @param defaultValue the value returned if the named number is not found @return the retrieved float or the default value if not found
2319 Sets the label position to a specified value ("S" or "P"), or removes it if null. @param labelPositionToValue The new label position, can be "S", "P", or null. @throws IllegalArgumentException If an invalid value is provided.
2320 Fetches and returns the CYX value from the COS object. @return the CYX value as a float
2321 Retrieves leader offset value from annotation. @return The leader offset value as a float
2322 Retrieves leader extension value from annotation. @return Float value representing leader extension, or default if not found
2323 Fetches the length of the leader from annotations. @return Float value representing the leader length
2324 Retrieves the conversion factor from COS object. @return Float value representing the conversion factor
2325 Sets the label prefix string in the COS object. @param labelPrefixString the new prefix string for labels
2326 Parses and returns a base object from the input stream based on the first character encountered. @return COSBase object or null if not recognized or end of stream reached @throws IOException if an I/O error occurs
2327 Retrieves the float value associated with the "V" key from the dictionary. @return Float value stored under the "V" key in the dictionary
2328 Sets the enabled status of a content group in PDF document. @param group The target PDOptionalContentGroup object @param enable True to enable, false to disable the group @return True if the operation was successful, otherwise false
2329 Sets the decimal separator used in calculations. @param decimalSeparator string representing the decimal separator to be used
2330 Returns a PDRange object based on provided index and internal array. @param n index to select a value from the internal array @return PDRange object constructed with selected value and full array
2331 Clips an array of floats to specified ranges. If no ranges, returns the original values. @param inputValues array of floating point numbers @return clipped or original float array based on defined ranges
2332 Returns the number of input parameters, calculates if not already set. @return The number of input parameters in the domain values array
2333 Retrieves a domain range for a given input. @param n input value to determine the domain range @return PDRange object containing the determined domain values
2334 Calculates an index based on a vector and the object's size. @param vector int array used for calculation @return calculated integer index
2335 Fetches and constructs a PDRange for a given parameter number from decoded values. @param paramNum the parameter number @return PDRange object or null if not found or invalid input
2336 Returns the number of output parameters, calculating from range values if not already set. @return The number of output parameters (0 if no range values)
2337 Retrieves a parameter's encoding range. @param n the parameter index @return PDRange object containing encoded values for the specified parameter
2338 Checks if the current object is top-attached. @return true if attached to "Top", false otherwise
2339 Checks if the object is attached at the bottom. @return true if attached at the bottom, false otherwise
2340 Checks if an object is left-attached. @return true if left-attached, false otherwise
2341 Checks if an item is rightly attached. @return true if item is attached to the right, false otherwise
2342 Initializes a PDCIDFont object with the given font dictionary and parent type 0 font. @param fontDictionary COSDictionary containing font data @param parent PDType0Font as the parent font for this instance
2343 Sets the thousand separator string in the COS object configuration. @param thousandsSeparator the string to use as a thousand separator
2344 Fetches a value from the number tree by index. May use "nums" or "kids" nodes for retrieval. @param index to locate the value in the number tree @return the corresponding object if found, otherwise null @throws IOException if an I/O error occurs while fetching data
2345 Fetches a Type 3 character procedure by its code. @param code unique identifier for the character procedure @return PDType3CharProc object or null if not found or encoding/charProcs are null
2346 Retrieves the rollover appearance from a PDF dictionary. @return PDAppearanceEntry object or normal appearance if not found
2347 Fetches the down appearance from a COSDictionary if it exists, otherwise returns the normal appearance. @return PDAppearanceEntry object or the result of getNormalAppearance() if not found in dictionary
2348 Fetches and returns the last child outline item. @return The last PDOutlineItem in the outline or null if none exists.
2349 Retrieves the digital signature. @return The PDSignature object containing the signature data
2350 Initializes DictionaryEncoding based on font properties and encodings. @param fontEncoding COSDictionary containing font encoding info @param isNonSymbolic boolean flag for non-symbolic fonts @param builtIn Encoding object representing the font's built-in encoding
2351 Initializes FDFField with XML data and handles child elements. @param fieldXML Element containing field data @throws IOException if there's an issue parsing the XML
2352 Retrieves the first child outline item. @return The first child outline item or null if none exists
2353 Sets an integer value in the object's dictionary by name and notifies if changed. @param name the key for the integer value @param value the new integer value to set
2354 Initializes an Optional Content Group (OCG) with a given name. @param name the name of the OCG to be initialized
2355 Sets the denominator value in the COS object. @param denominator new denominator value to be stored
2356 Fetches and returns the name of the attachment as a string. @return The name of the attachment or null if not found.
2357 Retrieves the icon name from an annotation as a string. @return The icon name as a String or null if not found
2358 Fetches the style of the guideline from the dictionary as a string. @return String representation of the guideline style or default if not found
2359 Fetches and returns a named string from PDF metadata with fallback to default value. @param key the name of the metadata field @param defaultValue the value returned if the key is not found in metadata @return the corresponding string or default value if not present
2360 Retrieves properties for a given COSName from the PDPropertyList instance. @param name unique identifier of type COSName @return corresponding PDPropertyList object or null if not found
2361 Retrieves a date from an embedded dictionary. @param embedded the COSName of the embedded dictionary @param key the COSName of the date key @param defaultValue the default value to return if not found @return the retrieved date or the default value if not found
2362 Fetches the optional content from the COS object, if it exists. @return PDPropertyList object or null if not found in COS dictionary
2363 Retrieves a date from the PDF document using a given key. @param key the name of the date object in the PDF document @param defaultValue the value to return if the key is not found @return the retrieved Calendar object or the default value if not found
2364 Fetches and returns the name associated with the key "N" from an action object.
2365 Sets an integer value for a given name in the COS object dictionary and notifies of any changes. @param name the key for the value to be set @param value the integer value to be set
2366 Retrieves the rendering intent from a dictionary, or returns null if not found. @return RenderingIntent object or null if not present in the dictionary
2367 Retrieves print clip preference as a string using specified name and boundary. @return Print clip preference or default crop box if not found
2368 Sets the suffix string for a label in the COS object. @param labelSuffixString the string to be appended as a suffix to labels
2369 Retrieves a specified string from COS object by its name. @param name The key for the desired string in COS object @return The string value associated with the given name, or null if not found
2370 Retrieves the optional content from a COS object, if it exists. @return PDPropertyList of optional content or null if not found
2371 Retrieves the Optional Content from a COS Dictionary, if it exists. @return PDPropertyList object or null if not found in the COS Object
2372 Returns the highlight mode of the COS object as a string. @return Highlight mode name or default if not set
2373 Retrieves the line ending style from a COS object as a string. @return Line ending style or default if not specified (LE_NONE)
2374 Fetches and returns the name of the COS object as a string.
2375 Returns intensity value from COS object. Defaults to 0 if not found.
2376 Computes the font height for a given PDFont. @param font the PDFont object to compute the height for @return computed font height as float value
2377 Retrieves view clip as a string using specified name and boundary crop box. @return View clip as a string or null if not found
2378 Fetches and returns the view area from preferences using specified name and boundary.
2379 Fetches the reading direction from preferences or returns a default value. @return String representing the reading direction.
2380 Fetches the non-full screen page mode as a string from preferences. @return Non-full screen page mode or default if not found.
2381 Retrieves the motion type from a COS object in PDF context. @return String representing the motion type or null if not found
2382 Retrieves the dimension of the COS object in the PDF document. @return The name of the dimension as a string (H for horizontal)
2383 Retrieves the reply type from COS object. @return Reply type as a string or default if not specified
2384 Returns the name of the transition style from the COS object as a string. @return Name of the transition style or a default value if not found
2385 Fetches and returns the type of the COS object as a string. Defaults to "ExData" if no specific type is found.
2386 Returns default position vector based on component ID. @param cid unique component identifier @return Vector object with calculated x and y positions
2387 Retrieves the style name from the COS object. @return The style name as a string, defaulting to "Solid" if not found.
2388 Retrieves and returns the highlighting mode as a string from COS object.
2389 Fetches and returns the name of the COS object as a string. @return The name of the COS object or null if not found
2390 Retrieves optional content groups from the dictionary. @return List of PDPropertyList objects representing OCGs, may be empty
2391 Repairs the length of a byte array segment ending with 'exec'. @param bytes input data @param length1 initial segment length @return adjusted segment length or original if no adjustment needed
2392 Fetches the decimal separator used in the COS object configuration. @return Decimal separator as a string, defaults to '.' if not found
2393 Parses and returns a COSArray from the source stream. @return A populated COSArray object or an empty one if parsing fails @throws IOException If there's an issue reading from the source stream
2394 Sets current value to the result of getOnValue(). Throws IOException if there's an error while getting on value.
2395 Checks if the current value equals the on-value. @return true if they are equal, false otherwise.
2396 Retrieves and combines 'on' values from exports and widgets into a Set. @return A Set of unique 'on' values.
2397 Adds font resources from annotation to acroFormResources if not already present, excluding subsetted fonts. @param acroFormResources resources of the AcroForm @param annotation the annotation containing potential font resources
2398 Retrieves the appearance stream of a given annotation. @param annotation The input PDAnnotation object @return The PDAppearanceStream object or null if not found
2399 Initializes a PDFXrefStreamParser for the given COSStream. Closes and rethrows any initialization errors. @param stream input stream to parse @throws IOException if there's an issue with reading or closing the stream
2400 Parses and returns a PDDocument. Throws an IOException if an error occurs during parsing.
2401 Repairs length2 if necessary by validating and adjusting it based on the byte array's length and length1. @param bytes input byte array @param length1 first length parameter @param length2 second length parameter to be repaired if needed @return corrected value for length2 or maximum possible if invalid input is provided
2402 Fetches an embedded string from a specified dictionary. @param embedded the COSName of the embedded dictionary @param key the COSName of the desired entry in the dictionary @return the corresponding String value or null if not found
2403 Searches for the index of a given page in the document tree. @param page PDPage object to find @return Index of the page or -1 if not found
2404 Retrieves the label position value from COS object with fallback to default suffix. @return String representation of the label position or a default value if not found
2405 Fetches and returns a label suffix string from the COS object. @return Label suffix string or an empty space if not found
2406 Retrieves an encoded range for a given parameter number from the array of encode values. @param paramNum the parameter number @return PDRange object or null if not available
2407 Retrieves a COSDictionary object from the tree structure based on the given page number. @param pageNum The 1-based index of the desired page @param node The current COSDictionary node being examined @param encountered The count of nodes already encountered during traversal @return The corresponding COSDictionary object or throws an exception if not found
2408 Fetches label prefix string from COS object. @return Label prefix string or a space if not found
2409 Fetches thousands separator used in number formatting. @return A string representing the thousand separator, defaults to comma if not found.
2410 Loads and parses an FDF document from the provided input stream. @param input InputStream containing FDF data @return Parsed FDFDocument object, or throws IOException if error occurs @throws IOException If there is a problem reading from the InputStream
2411 Loads an FDF document from a file. @param file the input File object containing the FDF data @return a parsed FDFDocument object @throws IOException if there is an error reading or parsing the file
2412 Retrieves a priority queue of font matches based on descriptor and CID system info. @param fontDescriptor describes the desired font @param cidSystemInfo provides additional character set information, can be null @return PriorityQueue<FontMatch> sorted by match quality
2413 Encodes the image into a PDImageXObject using various compression techniques. @return PDImageXObject or null if encoding is unsuccessful for the image type @throws IOException if an I/O error occurs during encoding
2414 Constructor for PDAnnotationHighlight, extending from a superclass.
2415 Sets the new version if it's higher than current and document version >= 1.4, otherwise logs an error.
2416 Creates a new PDDocument with the same properties as the source document. @return The newly created PDDocument object @throws IOException if there is an issue reading from or writing to a file
2417 Retrieves all pages from the document's page tree. @return A PDPageTree object containing all document pages.
2418 Constructor for PDAnnotationSquiggly. Extends superclass with SUB_TYPE.
2419 Enables or disables an Optional Content Group by name. @param groupName the name of the group to modify @param enable true to enable, false to disable @return true if operation was successful, false otherwise
2420 Initializes PDActionURI with its subtype.
2421 Initializes a new instance of PDActionThread and sets its subtype.
2422 Initializes and sets the subtype of the PDActionSubmitForm object.
2423 Initializes a new instance of PDActionSound and sets its subtype.
2424 Appends a child item to the outline and updates sibling references. @param newChild the PDOutlineItem to be appended
2425 Prepends a new child item to the outline, adjusting sibling relationships. @param newChild The PDOutlineItem to prepend as the first child.
2426 Checks if a specific content group is enabled based on the base state and COS dictionary. @param group Optional Content Group to check, null for base state check @return true if enabled, false otherwise
2427 Constructs a new PDF annotation strikeout with default settings.
2428 Constructs a new instance of PDAnnotationUnderline. Inherits properties from its superclass.
2429 Initializes a new PDAnnotationCircle from a COSDictionary. @param field a dictionary containing annotation data
2430 Draws a cloudy rectangle or ellipse based on input parameters. @param left X-coordinate of the left edge @param bottom Y-coordinate of the bottom edge @param right X-coordinate of the right edge @param top Y-coordinate of the top edge @param isEllipse Boolean flag to draw an ellipse if true, rectangle otherwise @throws IOException If there's an error during drawing operation
2431 Creates a cloudy polygon from given path data and handles it internally. @param path 2D array of floats representing points in the path @throws IOException if there's an issue with handling the polygon creation
2432 Constructs an underline annotation from a COS dictionary. @param dict the COS dictionary containing annotation data
2433 Constructs a strikeout annotation from COSDictionary. @param dict the dictionary containing annotation data
2434 Constructs a PDAnnotationSquiggly object from a COSDictionary. @param dict a dictionary containing annotation data
2435 Constructs a PDAnnotationHighlight from a COSDictionary. @param dict The COSDictionary containing annotation data
2436 Initializes a new instance of PDLab with given COSArray. @param lab The COSArray to initialize the lab with.
2437 Constructs a PD CalRGB color space from a COS array. @param rgb the input COS array containing RGB values
2438 Constructs a new PDCalGray object from a COSArray. @param array input data in the form of a COSArray
2439 Constructor for PDLab class that calls superclass constructor with COSName.LAB as argument.
2440 Constructor for the PDCalRGB class, extends COSName.CALRGB.
2441 Initializes a new instance of the CALGRAY color space in PDF.
2442 Constructs an instance of PDAnnotationSquare with given COSDictionary. @param field a dictionary containing the square annotation properties
2443 Initializes and sets the subtype for a form reset action.
2444 Initializes a new instance of PDActionRemoteGoTo and sets its subtype.
2445 Initializes a new PDActionNamed object with its subtype.
2446 Initializes a new instance of PDActionMovie with default subtype.
2447 Adds a PDShading object to this resource and returns its COSName. @param shading the PDShading object to be added @return the COSName of the added PDShading object
2448 Sets a value at specified index in the export values list, throws exception if index is invalid. @param index position to set the value @throws IOException if an I/O error occurs during update or change application
2449 Adds an extended graphics state to the COSName collection. @param extGState The extended graphics state to be added. @return A unique COSName identifier for the added graphics state.
2450 Adds a color space to the document and returns its name. @param colorSpace The color space object to be added @return COSName representing the added color space
2451 Adds a PDFont object to the document and returns its COSName.
2452 Sets the border line style and width for a PDF element. @param lineWidth Width of the border line @param bs Border style dictionary (optional) @param border Border array (optional)
2453 Sets the destination to a specific PDF page with default coordinates. @param page The target PDPage for the destination, if null then destination is cleared
2454 Reads and interprets the encoding from a dictionary. Handles predefined CMap and custom CMap. @throws IOException if required CMap is missing or invalid
2455 Adds a pattern to the list and returns its COSName. @param pattern the abstract pattern to be added @return COSName of the added pattern
2456 Adds a property list to the object and returns a COSName based on its type. @param properties PDPropertyList to be added, can be PDOptionalContentGroup or another type @return corresponding COSName for the added properties
2457 Adds a PDFormXObject to the collection and returns its COSName. @param form PDFormXObject to be added @return COSName of the added object
2458 Initializes an instance of PDActionLaunch with its specific subtype.
2459 Initializes a new instance of PDActionJavaScript with default subtype.
2460 Initializes PDActionImportData with its specific subtype.
2461 Initializes and sets up a PDActionHide object with its specific subtype.
2462 Initializes a new PDActionGoTo object with the specified subtype.
2463 Initializes an embedded go-to action with its default subtype.
2464 Initializes page labels for a PDF document from a COSDictionary. @param document the PDF document @param dict the dictionary containing page label information @throws IOException if there is an issue with reading the dictionary
2465 Retrieves and ensures the existence of a normal appearance entry in the dictionary. @return Normal PDAppearanceEntry, creates new if not found or invalid.
2466 Fetches and ensures existence of the rollover appearance entry in the dictionary. @return PDAppearanceEntry object for rollover, creates new if not found or invalid
2467 Overloaded method to fetch an embedded date with default timezone. @param embedded the embedded object name @param key the specific key for the date @return Calendar object representing the embedded date or null if not found
2468 Retrieves the Down Appearance entry from the Appearance dictionary. If it's a sub-dictionary, creates and sets a new COS Stream entry. @return PDAppearanceEntry object for Down Appearance
2469 Adds an XObject to the PDF document and returns its name. @param xobject The object to be added @param prefix A prefix for the object's name @return The COSName of the added XObject
2470 Adds an image object to the PDF document and returns its name. @param image the image object to be added @return COSName of the added image object
2471 Retrieves fractional display string from COS object with default fallback. @return Fractional display string or default if not found
2472 Retrieves the starting value from the root object. @return The start value as an integer (default is 1)
2473 Retrieves and returns the count value from the root object. @return The count as an integer; defaults to 0 if not found
2474 Checks if a specific bit flag is set for a given COSName field. @param field the COSName field to check @param bitFlag the bit flag to look for @return true if the bit flag is set, false otherwise
2475 Fetches an integer value from a PDF document by key with fallback to default value. @param key the name of the object to fetch @param defaultValue the value returned if key is not found @return the fetched integer or default value if not found in the PDF document
2476 Fetches an integer value associated with a given key. @param key unique identifier of the integer value @return integer value or -1 if not found
2477 Fetches an integer value from PDF data using a given key. @param key the name of the data item to fetch @return int value or -1 if not found or invalid type
2478 Retrieves an integer value from an embedded dictionary. @param embeddedDictionary the source of the dictionary @param key the key to find in the dictionary @param defaultValue the value to return if key is not found @return the integer value or defaultValue if not found
2479 Fetches the order number from COS object. Returns default value of 1 if not found. @return Order number as an integer
2480 Fetches and returns the preference to center the window. @return true if the window should be centered, otherwise false
2481 Retrieves the window fitting preference from preferences. @return true if window should be fitted, otherwise false
2482 Retrieves user's preference to hide menubar. @return true if the menubar should be hidden; otherwise, false
2483 Checks and returns if toolbar should be hidden based on preferences. @return true if toolbar is set to hide in preferences, otherwise false
2484 Checks if the fly area in the COS object is opaque. @return true if opaque, false otherwise
2485 Checks if appearances are needed from the dictionary using a specific COS name. @return true if needed, false otherwise
2486 Fetches the trusted mode status from the dictionary. @return true if in trusted mode, false otherwise
2487 Checks if document title should be displayed based on preferences. @return true if document title is set to display, false otherwise
2488 Fetches the NON_EFONT_NO_WARN flag from the dictionary with a default of true. @return boolean value representing the NON_EFONT_NO_WARN flag
2489 Retrieves the revision number of the COS object. @return The integer representation of the revision number
2490 Fetches and returns the version number from the dictionary object. @return The version number as an integer; defaults to 0 if not found
2491 Retrieves the annotation index from the dictionary. @return An integer representing the annotation index or -1 if not found
2492 Retrieves and returns integer flags associated with an action. @return Integer flags value; defaults to 0 if not found
2493 Fetches and returns the flags value from an action object. @return integer representation of the flags; defaults to 0 if not found
2494 Fetches the number of bits per coordinate from a COS object. If not already set, it retrieves and stores this value for future use. @return The number of bits per coordinate
2495 Fetches the number of bits per color component from COSObject if not already set. @return int representing the number of bits per color component
2496 Fetches and returns the number of vertices per row from a COS object. @return int representing vertices per row or -1 if not found
2497 Retrieves the number of bits per flag from the COS object. @return The number of bits per flag or -1 if not found/invalid
2498 Creates a PDShading object based on the provided COSDictionary. @param shadingDictionary contains information about the shading type @return PDShading object of the appropriate type or throws IOException if unknown type
2499 Retrieves the length value from a crypt filter dictionary. @return The length value or default of 40 if not found
2500 Fetches and returns the tiling type from a COS object. Defaults to 0 if not found.
2501 Creates a pattern object based on the given dictionary and resource cache. @param dictionary COSDictionary containing pattern data @param resourceCache cache for resources used in creating the pattern @return PDAbstractPattern object of appropriate type, or throws IOException if unknown pattern type
2502 Fetches and returns the flag value from a dictionary object. If not already set, it initializes with default or fetched value.
2503 Returns the justification value from annotation as a string. @return Justification value as a string
2504 Retrieves permission settings from dictionary object. @return Integer representing permission settings
2505 Fetches the revision number from the dictionary object. @return The revision number or a default value if not found.
2506 Retrieves and returns the length value from the dictionary. Defaults to 40 if not found in the dictionary.
2507 Retrieves the paint type from the COS object. @return an integer representing the paint type
2508 Fetches and returns annotation flags from COS object. @return integer representation of annotation flags, defaults to 0 if not found
2509 Fetches pre-release status from the dictionary using a specified key. @return true if in pre-release, otherwise false
2510 Checks if an object has a caption. @return true if the object has a caption, false otherwise
2511 Returns a BufferedImage from the given PDImage, applying region and subsampling. @param pdImage source image @param region rectangle defining the area of interest in the image @param subsampling factor to reduce the size of the output image @param colorKey array for color masking @return BufferedImage representation of the PDImage, or null if empty @throws IOException if there is an issue with the source image or parameters
2512 Fetches the raw raster data of a PDImage. Throws exceptions if image is empty or dimensions are invalid. @param pdImage the input PDImage object @return WritableRaster object containing raw pixel data @throws IOException if image stream is empty, dimensions are invalid, or an error occurs during processing
2513 Fetches the stencil image with applied paint. Throws exception if image is not a stencil. @param paint The paint to apply on the stencil image @return BufferedImage of the stencil with applied paint, throws exception if not a stencil @throws IllegalStateException if the image is not a stencil
2514 Calculates and returns the scaled anchor rectangle of a tiling pattern. @param pattern The input PDTilingPattern object @return Rectangle2D representing the scaled anchor rectangle @throws IOException If there's an issue with the input pattern
2515 Generates a BufferedImage by drawing a tiling pattern with specified parameters. @param drawer PageDrawer object for rendering @param pattern PDTilingPattern to be drawn @param colorSpace PDColorSpace of the pattern @param color Color of the pattern @param xform AffineTransform for scaling and translation @param anchorRect Rectangle2D defining the size of the image @return BufferedImage containing the drawn tiling pattern
2516 Parses XML for stamp annotation appearance and builds a COSDictionary. @param appearanceXML the XML representation of the appearance @return COSDictionary object built from the XML, or an empty one if not handled @throws IOException if there's an issue parsing the stream element
2517 Gets the 'Open' attribute of the COS object in a PDF document. @return true if open, otherwise false
2518 Fetches and returns the resources associated with the page. If not already present, initializes them. @return PDResources object containing page resources
2519 Retrieves and normalizes the page rotation angle. @return Normalized rotation angle in degrees, or 0 if not found or invalid
2520 Retrieves a boolean value associated with 'MIX' from an action object. @return Boolean value or false if not found
2521 Retrieves the repeat status of an action. @return true if the action is set to repeat, otherwise false
2522 Returns the synchronous mode status from an action object. @return true if in synchronous mode, otherwise false
2523 Fetches and returns a boolean value associated with 'H' from an action object. Defaults to true if not found.
2524 Fetches the Text Knockout flag from the dictionary. Returns true if not present or set to true.
2525 Retrieves Alpha Source Flag from dictionary. Defaults to false if not found. @return true if Alpha Source Flag is set, false otherwise
2526 Retrieves automatic stroke adjustment setting from dictionary. @return true if enabled, false otherwise
2527 Fetches the stroking overprint control value from the dictionary. @return Boolean value of OP key in dictionary, defaults to false if not found
2528 Fetches the media box of the page. If not found or invalid, defaults to US Letter size. @return PDRectangle object representing the media box dimensions.
2529 Retrieves the anti-alias setting from the dictionary. @return true if anti-alias is enabled, otherwise false
2530 Checks if the COS object is isolated. @return true if the object is isolated, otherwise false
2531 Checks if a rename operation is needed based on a template flag. @return true if rename is necessary, otherwise false
2532 Checks whether annotation scaling to fit is enabled. @return true if scaling to fit is enabled, otherwise false
2533 Retrieves the CAP boolean value from annotation. @return Boolean value of CAP or false if not found
2534 Checks if metadata should be encrypted in a document. @return boolean indicating encryption requirement for metadata (default is true)
2535 Checks if the COS object is marked as hidden. @return true if hidden, false otherwise
2536 Checks if the current file system object is volatile. @return true if volatile, otherwise false
2537 Fetches a boolean value from a given key with a fallback option. @param key the string identifier for the boolean value @return the boolean value or default if not found
2538 Checks if the COS object is in a knockout state. @return true if in knockout state, false otherwise
2539 Retrieves the integer value of 'Q' from the COS object; defaults to 0 if not found. @return The integer value associated with 'Q' in the COS object or 0 if not present.
2540 Checks and returns the preference to hide Window UI. @return true if Window UI should be hidden, otherwise false
2541 Checks if timestamp is required based on the dictionary value of FT. @return true if timestamp is required, false otherwise
2542 Sets a specific bit flag in the field to the given value.
2543 Initializes PDFObjectStreamParser with COSStream and COSDocument. Validates and sets up the number of objects and the first object's offset. @param stream input data stream @param document associated COSDocument for reference @throws IOException if mandatory entries are missing or invalid in the object stream
2544 Constructs PDCIDFontType0 from a COS dictionary & parent font. Handles embedded and fallback CFF fonts. @param fontDictionary COS dictionary containing font data @param parent parent PDType0Font object @throws IOException if there's an issue reading the font data
2545 Initializes PDCIDFontType2 with font dictionary and TrueTypeFont. Handles embedded OTF or TTF. @param fontDictionary COSDictionary containing font data @param trueTypeFont the TrueTypeFont to be used, can be null for embedded fonts @throws IOException if there's an error reading the embedded font
2546 Reads and returns a CMap based on the input base. @param base a COSBase object, typically a COSName for predefined CMap or COSStream for embedded CMap @return a CMap object; throws IOException if base is neither Name nor Stream
2547 Retrieves the rotation angle of an object in degrees. @return The rotation angle as an integer value.
2548 Writes the body of a COS document, preserving root, info, and encryption objects. @param doc The COSDocument to write @throws IOException if an I/O error occurs during writing
2549 Fetches object's name using provided key or returns a default value if not found. @param name the key to search for in the object @param defaultValue the fallback value to return if key is not present @return the value associated with the key, or the default value if not found
2550 Retrieves the style of the object as a string. @return The name of the style from COS object or default if not found
2551 Fetches the root of the structure tree by traversing up from the current node. @return The PDStructureTreeRoot if found, otherwise returns null.
2552 Retrieves a list of kid objects from the COS dictionary. @return List<Object> containing all found kid objects
2553 Returns the PDEncryption object for this document, creating it if necessary and encrypted. @return PDEncryption object or null if not encrypted
2554 Prepares the document for decryption using provided credentials. @throws IOException in case of encryption errors or invalid credentials
2555 Initializes a Type1ShadingContext with shading parameters and transformations. @param shading PDShadingType1 object containing color function information @param colorModel ColorModel for the shading @param xform AffineTransform to apply @param matrix Matrix for additional transformation
2556 Retrieves the page number from a dictionary object. @return The page number as an integer or -1 if not found
2557 Fetches color space by name. @param name unique identifier of color space @return PDColorSpace object or null if not found @throws IOException if there is an error reading the color space data
2558 Retrieves the top index from COS object or returns default value (0) if not found. @return The top index as an integer
2559 Fetches COS objects of a specified type. @param type the COS object type to fetch @return list of matching COSObject instances or empty if none found
2560 Retrieves embedded file in Unicode format from object dictionary. @return PDEmbeddedFile instance if found, otherwise null
2561 Retrieves the embedded file for Mac from EFDictionary, if it exists and is a stream. @return PDEmbeddedFile object or null if not found or not a COSStream
2562 Retrieves embedded file from DOS dictionary in PDF object. @return PDEmbeddedFile object or null if not found as COSStream
2563 Removes page-specific resources from the cache to free up memory.
2564 Retrieves an embedded file from a PDF stream. @return PDEmbeddedFile object or null if not found in the stream
2565 Retrieves and returns the open count from COSObject. @return Open count as an integer, defaults to 0 if not found.
2566 Fetches the embedded file in UNIX format from a PDF object. @return PDEmbeddedFile object or null if not found in UNIX format
2567 Retrieves an integer value associated with 'Q' from a dictionary. @return The integer value of 'Q' or default value 0 if not found
2568 Initializes AxialShadingContext with shading, color model, and transform details. @param shading PDShadingType2 object containing shading info @param colorModel ColorModel for the shading @param xform AffineTransform object @param matrix Matrix object for transformation @param deviceBounds Rectangle defining the device boundaries @throws IOException if an error occurs during initialization
2569 Initializes a triangle-based shading context for rendering. @param shading the shading object to be used @param cm the color model to be used in the shading process @param xform the affine transformation to apply during shading @param matrix the transformation matrix for the shading @throws IOException if an error occurs during initialization
2570 Initializes a RadialShadingContext with provided parameters and calculates necessary constants. @param shading PDShadingType3 object representing the shading type @param colorModel ColorModel for the shading @param xform AffineTransform to be applied @param matrix Matrix used in calculations @param deviceBounds Rectangle defining device boundaries @throws IOException if an I/O error occurs
2571 Sets the subfilter requirement flag in the COS object. @param flag true to require subfilter, false otherwise
2572 Sets the lock status of contents in COS object. @param lockedContents a boolean value indicating if contents should be locked or not
2573 Sets the flag for toggling no view in COS object. @param toggleNoView boolean value to set the flag
2574 Prepares a PDF document for encryption using AES algorithm.
2575 Sets the lock status of contents in a PDF annotation. @param lockedContents boolean value indicating if content should be locked or not
2576 Sets the legal attestation requirement flag in the COS object. @param flag true to require legal attestation, false otherwise
2577 Sets the visibility of the COS object based on the boolean parameter. @param invisible true to make object invisible, false to make it visible
2578 Sets the visibility of the COS object to be hidden or visible. @param hidden boolean value indicating if the object should be hidden (true) or not (false)
2579 Sets the print status of the COS object to 'printed' or not. @param printed boolean value indicating print status
2580 Sets or unsets the flag to disable zooming in PDF viewer for this object. @param noZoom true to disable zooming, false to enable it
2581 Sets the filter requirement flag in the COS object. @param flag true to require filtering, false otherwise
2582 Sets the reason required flag in a COS object. @param flag boolean value to set the reason requirement
2583 Sets or clears the flag to prevent rotation of a COS object. @param noRotate if true, prevents rotation; otherwise, allows it
2584 Sets or unsets the 'no view' flag for the COS object. @param noView if true, sets the 'no view' flag; otherwise, unsets it
2585 Sets the vertical coordinate system requirement flag in COS object. @param flag true to require vertical coordinates, false otherwise
2586 Sets the digest method requirement flag in the COS object. @param flag true to require a digest method, false otherwise
2587 Sets or unsets the read-only flag for the COS object. @param readOnly boolean value to set the read-only status
2588 Sets or clears the lock flag on the COS object. @param locked true to lock, false to unlock
2589 Draws an inline image at specified coordinates and dimensions. @param inlineImage the PDInlineImage object to be drawn @param x, y the starting coordinates for drawing @param width, height the dimensions of the image @throws IOException if there's an issue with writing or reading data
2590 Sets the font and size for PDF text, handles subsetting and type0 fonts. @param font the PDFont object representing the desired font @param fontSize the desired font size as a float
2591 Sets the add revision info required flag for the COS object. @param flag boolean value to set the flag
2592 Draws a cloud-like ellipse with specified dimensions. If intensity is zero or less, it draws a basic ellipse instead. @param leftOrig Left coordinate of the original ellipse @param bottomOrig Bottom coordinate of the original ellipse @param rightOrig Right coordinate of the original ellipse @param topOrig Top coordinate of the original ellipse @throws IOException If an I/O error occurs during drawing operations
2593 Creates a cloudy rectangle and applies the effect to its coordinates. @param rd The original PDRectangle object @throws IOException If an I/O error occurs during processing
2594 Sets or unsets the issuer requirement in a PDF dictionary. @param flag true to require issuer, false otherwise
2595 Sets the subject requirement flag in the dictionary. @param flag true if subject is required, false otherwise
2596 Creates a PDF annotation object based on the provided COSBase. @param base COSBase containing dictionary with annotation details @return PDAnnotation object corresponding to the subtype, or null if unsupported
2597 Sets the Optional Content Properties for a PDF document, and updates version to 1.5 if necessary. @param ocProperties Object containing optional content properties to be set
2598 Writes the PDF header, adjusts version if compression is enabled. @param doc COSDocument to write header for
2599 Creates a new document if necessary, based on current page and destination document. @throws IOException if there is an error creating the new document
2600 Initializes PDFRenderer with given PDDocument and sets up page tree. @param document the input PDF document to be rendered
2601 Initializes a PDFPrintable object with given document, rendering settings, and options. @param document the PDDocument to be printed @param scaling Scaling factor for printing @param showPageBorder whether to display page borders during print @param dpi Dots per inch resolution for print output @param center whether to center the content on the page @param renderer PDFRenderer object to handle rendering tasks
2602 Fixes destinations in a PDF document by checking and updating pages' presence. @param destinationDocument the PDDocument to fix destinations for
2603 Checks if a specific content group is enabled in the document's catalog properties. @param group PDOptionalContentGroup to check for enabling @return true if the group is enabled or if no properties are set; false otherwise
2604 Constructs a PDActionJavaScript object with specified JavaScript code. @param js JavaScript code to be executed by the action
2605 Fetches and returns page labels from the document's root dictionary. @return PDPageLabels object or null if not found @throws IOException if an I/O error occurs while fetching page labels
2606 Draws a form object on the page if not in text mode, else throws an exception. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs while writing the data
2607 Draws an image using the specified transformation matrix. Throws exception if called within a text block. @param image PDImageXObject to be drawn @param matrix AffineTransform for positioning and scaling the image @throws IOException if there's an issue with writing operands or operators
2608 Draws an image onto the PDF document at specified coordinates and dimensions. Throws exception if used within a text block. @param image PDImageXObject to be drawn @param x, y starting coordinates of the image @param width, height dimensions of the image @throws IOException if an I/O error occurs
2609 Sets a marked content point with properties in the PDF document. @param tag COSName identifier for the mark @param propertyList list of properties to associate with the mark
2610 Begins a marked content sequence with the given tag and properties. @param tag COSName representing the content type @param propertyList list of properties for the marked content @throws IOException if an error occurs during writing operations
2611 Applies a shading fill to the graphics object. Throws exception if used within a text block. @param shading PDShading object representing the desired shading effect @throws IOException if an I/O error occurs
2612 Sets and writes the graphics state parameters to the output stream. @param state The extended graphics state object containing the parameters @throws IOException if an I/O error occurs during writing
2613 Checks if a specific group is enabled in the document. @param groupName name of the group to check @return true if the group is enabled, false otherwise
2614 Increments the revision number by one.
2615 Sets or unsets the APPEND_ONLY flag for the PDF dictionary object. @param appendOnly boolean value to set the flag
2616 Sets the sorting flag in COS object to true or false. @param sort boolean value indicating whether to enable sorting
2617 Sets or unsets the multi-select flag for the COS object. @param multiSelect true to enable multi-select, false otherwise
2618 Sets or unsets the 'do not spell check' flag for the COS object. @param doNotSpellCheck true to disable spell checking, false to enable
2619 Sets the COMMIT ON SELECTION CHANGE flag for the COS object. @param commitOnSelChange true to enable, false to disable
2620 Sets or unsets the combo flag in COS object based on input parameter. @param combo true to set, false to unset the combo flag
2621 Sets the edit flag for this COS object. @param edit boolean value to enable/disable editing
2622 Sets or unsets the read-only flag on a COSName object in the dictionary. @param readonly boolean value to set the read-only status (true for read-only)
2623 Sets or clears the 'required' flag in the dictionary. @param required boolean value to set the requirement status
2624 Sets the 'no export' flag in the dictionary to control visibility during export. @param noExport if true, the item will not be exported; otherwise it can be.
2625 Sets the flag indicating if digital signatures exist in a document. @param signaturesExist boolean value representing signature presence
2626 Constructs a push button in the given AcroForm. Sets its flag to PUSHBUTTON. @param acroForm The AcroForm object where this push button will be added
2627 Constructs a radio button in an AcroForm with flag set for radio behavior. @param acroForm the parent AcroForm object
2628 Sets the flag for radios in unison in the COS object. @param radiosInUnison boolean value to set the flag
2629 Sets the multiline flag for the COS object. @param multiline boolean value to set the flag
2630 Sets the password flag for COS object. @param password true to enable, false to disable
2631 Sets the file select flag in COS object for a given boolean value. @param fileSelect boolean value to set the flag
2632 Sets the spell check flag for the COS object. @param doNotSpellCheck true to disable spell checking; false otherwise
2633 Sets or clears the 'do not scroll' flag for a COS object. @param doNotScroll true to set the flag, false to clear it
2634 Sets the flag for combining objects in PDF document. @param comb boolean value; true to combine, false otherwise.
2635 Sets the Rich Text flag for the COS object. @param richText boolean value to enable or disable Rich Text
2636 Creates a PDImageXObject from RandomAccessRead using CCITTFaxDecode. @param document the PDDocument to which the image object belongs @param reader the source of the image data @param number the specific image index in the data source @return PDImageXObject or null if no valid image is found @throws IOException if an I/O error occurs
2637 Sets or unsets the bold formatting flag for the COS object. @param bold true to set bold, false to unset
2638 Sets the Subject DN required flag in the dictionary. @param flag true if Subject DN is required, false otherwise
2639 Sets a flag to toggle no view in the annotation. @param toggleNoView boolean value to set the flag
2640 Sets the lock status of the object in COS (Content Object System). @param locked true to lock, false to unlock
2641 Returns the total number of pages in the document catalog. @return The count of all pages in the document catalog
2642 Sets or unsets the NO_VIEW flag in annotations for hiding/showing content. @param noView if true, hides content; otherwise, shows content
2643 Sets or clears the 'no rotation' flag for a PDF annotation. @param noRotate if true, disables rotation; otherwise, enables it
2644 Sets the Object Identifier (OID) requirement in a dictionary. @param flag true to require OID, false otherwise
2645 Sets the NO_ZOOM flag for annotation. @param noZoom if true, disables zoom; otherwise, enables it
2646 Sets the hidden flag for this object's annotation. @param hidden boolean value to set the hidden status
2647 Sets or unsets the 'invisible' flag in the PDF annotation
2648 Retrieves a page from the PDF using its index. @param index position of the page in the PDF @return PDPage object representing the page
2649 Sets the italic formatting flag for the object. @param italic true to set italic, false to unset
2650 Sets the URL requirement in the dictionary with given boolean flag. @param flag indicates whether a URL is required or not.
2651 Sets the key usage requirement flag in the dictionary. @param flag true to require key usage, false otherwise
2652 Adds a child node at the beginning of the outline and updates parent open count. @param newChild PDOutlineItem to be added as first child
2653 Adds a new child item to the end of this outline. @param newChild the PDOutlineItem to be added
2654 Parses an XRef object stream and resolves its trailer, returns previous offset. @param objByteOffset byte offset of the object @param isStandalone indicates if it's a standalone xref table @return previous object's byte offset or -1 if not found @throws IOException if an I/O error occurs during parsing
2655 Sets the print status of the annotation flag. @param printed boolean value to indicate if the annotation is printed or not
2656 Sets the read-only flag for this object. @param readOnly boolean value to determine if the object should be read-only
2657 Checks if zooming is disabled for a COS object. @return true if zooming is disabled, false otherwise
2658 Fetches and returns the line join style from the dictionary object. @return Line join style integer value as defined in COSName.LJ
2659 Initializes a GouraudShadingContext with the provided parameters. @param shading PDShading object for rendering @param colorModel ColorModel to use for shading @param xform AffineTransform object for coordinate transformation @param matrix Matrix object for advanced transformations @throws IOException if there's an issue with the input objects
2660 Creates an input stream to read data from the COS object. @return COSInputStream to read data or throw IOException if error occurs
2661 Parses and retrieves an object from a PDF object stream. @param objstmObjNr the object stream number @param key unique identifier for the object in the stream @return COSBase object or null if not found @throws IOException if there's an issue parsing the stream
2662 Fetches and returns an InputStream for the contents. @return InputStream containing contents or empty if not available @throws IOException if there's a problem accessing contents
2663 Constructs a Type 2 CIDFont using a font dictionary and optional parent font. @param fontDictionary contains font data @param parent optional parent font of type PDType0Font @throws IOException if there's an issue reading the font data
2664 Checks if COS object has NO_VIEW flag set. @return true if NO_VIEW flag is present, false otherwise
2665 Retrieves a CID font object based on cidFont, parent and ttf parameters. @return PDCIDFontType2 object representing the CID font @throws IOException if there is an issue reading the font data
2666 Checks if the COS object is hidden based on its flag. @return true if the object is hidden, false otherwise
2667 Checks if the COS object has an invisible flag set. @return true if the object is invisible, false otherwise
2668 Checks if contents are locked based on specific flag in annotation. @return true if contents are locked, false otherwise
2669 Checks if rotation is disabled for a COS object. @return true if no rotation is set, false otherwise
2670 Fetches a PDXObject by name from the XOBJECT dictionary. @param name unique identifier for the object @return PDXObject instance or null if not found
2671 Initializes tiling paint with a texture pattern. @param drawer PageDrawer object for drawing @param pattern Tiling pattern to apply @param colorSpace Color space of the pattern @param color Pattern color @param xform Affine transformation to be applied @throws IOException if an I/O error occurs during image retrieval
2672 Checks if a node is open based on its open count. @return true if open count is greater than 0, false otherwise
2673 Checks if the COS object is read-only. @return true if read-only, false otherwise
2674 Creates a PDField based on the provided form and COSDictionary. @param form PDAcroForm to which field belongs @param field COSDictionary containing field properties @param parent PDNonTerminalField that is the parent of this field (if applicable) @return Corresponding PDField instance or null if invalid field type
2675 Checks if toggle no view flag is set in the annotation. @return true if flag is set, false otherwise
2676 Checks if the annotation flag is set to locked. @return true if the annotation flag is locked, false otherwise
2677 Checks if the object has read-only flag set. @return true if object is read-only, false otherwise
2678 Fetches and returns the line cap style from the dictionary object.
2679 Checks if rotation is disabled based on a specific flag in annotations. @return true if rotation is disabled, false otherwise
2680 Retrieves the parent structure from COS object. @return The integer value representing the parent structure
2681 Fetches and returns an integer value associated with 'P' in the dictionary.
2682 Checks if zooming is disabled in PDF annotation flags. @return true if zooming is disabled, false otherwise
2683 Fetches the maximum length from the COS object. @return The maximum length as an integer value
2684 Retrieves an integer value from COS object by name or returns a default value. @param name the key to search for in the COS object @param defaultValue the value returned if 'name' is not found in the COS object @return an integer value from the COS object or the default value if not found
2685 Checks if an object is invisible based on its flags. @return true if the object is flagged as invisible, false otherwise
2686 Checks if a flag in annotation is set to hidden. @return true if the flag is set to hidden, false otherwise
2687 Fetches a CID font mapping based on base font name and descriptor. @param baseFont font's base name @param fontDescriptor PDFontDescriptor object @param cidSystemInfo PDCIDSystemInfo object for special character collections @return CIDFontMapping object, falls back to lastResortFont if no match is found
2688 Retrieves the Mac resource fork from a COSObject's parameters. @return the embedded string of the Mac resource fork or null if not found
2689 Fetches the MAC creator from a COS object's parameters. @return String representing the MAC creator or null if not found
2690 Fetches the MAC subtype from the COS object parameters. @return MAC subtype as a String or null if not found
2691 Maps character code to glyph ID based on font type (embedded or not). @param code the character code to map @return the corresponding glyph ID, or a default value if not found @throws IOException if an I/O error occurs
2692 Retrieves the glyph name for a given Unicode code point. @param code Unicode code point @return Glyph name or ".notdef" if not found
2693 Checks and returns if the print flag is set in the annotation. @return true if printed flag is set; false otherwise
2694 Applies a protection policy to the encryption. If no encryption exists, it creates one. @param policy The protection policy to be applied @throws IOException if no security handler is available for the given policy
2695 Adds a COSBase object to the pool, handling null and duplicate objects. @param key unique identifier for the object @param base object to be added to the pool @return the same object or a replacement if handled differently
2696 Fetches and returns a map of roles from the structure tree root. @return Map containing role names as keys and their associated objects; empty if no root found
2697 Fetches the Main Content ID (MCID) from properties or returns -1 if not found.
2698 Retrieves the next key in the parent tree of a COS object. @return The next key as an integer value
2699 Retrieves the MCID (Machine Coding Identifier) from the COS object. @return The Machine Coding Identifier as an integer
2700 Retrieves a BufferedImage with RGB values from the given PDImage and color key. @param pdImage source image object @param colorKey array of color keys for indexed images @return BufferedImage with RGB values or null if an IOException occurs @throws IOException if there is an error reading the image data
2701 Manages resource lookup for content stream, prioritizing stream resources over page resources. @param contentStream the stream to push resources from @return the previous resources object or null if none existed
2702 Checks if no view flag is set in the annotation. @return true if no view flag is set, false otherwise
2703 Calculates an AffineTransform for centering a rectangle within another rectangle. @param page the PDPage containing the media box to center overlayMediaBox in @param overlayMediaBox the PDRectangle to be centered within the page's media box @return an AffineTransform that can be used for centering overlayMediaBox on page
2704 Validates if 'value' is a valid option for a specific field, throws exception otherwise. @param value the string to be checked
2705 Rotates the media box of a page based on its rotation angle. @param page The PDPage object to get the media box from @return A rotated PDRectangle or the original if no rotation is needed
2706 Checks if an item is marked in the dictionary. @return true if marked, false otherwise
2707 Checks if user properties are used in the system. @return true if user properties are enabled, otherwise false
2708 Checks if an entity is marked as a suspect in the dictionary. @return true if marked as suspect, otherwise false
2709 Checks if an object is open. @return true if the object is open, otherwise false
2710 Checks and returns if "FD" exists in COSObject and its value is true. @return true if "FD" exists and is true, otherwise false
2711 Gets non-stroking overprint control from the dictionary. @return boolean value indicating non-stroking overprint control
2712 Fetches an integer value from a specific dictionary with a fallback. @param embeddedDictionary the target dictionary @param key the key to retrieve the int value @return the int value or -1 if not found or on error
2713 Fetches and returns the denominator value from COS object.
2714 Wraps the output stream with a predictor based on given parameters. @param out original OutputStream @param decodeParams dictionary containing decoding parameters, including predictor type and colors @return modified or original OutputStream depending on predictor value
2715 Fetches and returns the integer value of STRUCT_PARENTS from the page object.
2716 Fetches and returns the bits per sample from the COS object.
2717 Checks if mouse position tracking is enabled based on map settings. @return true if tracking is enabled, otherwise false
2718 Retrieves an opaque image of a specified region with optional subsampling. @param region the area of the image to be fetched @param subsampling factor for reducing image size and complexity @return BufferedImage object representing the specified region, or throws IOException if error occurs
2719 Writes a PDDocument to an output stream using the specified SignatureInterface. Handles encryption, incremental updates, and document ID generation. @param doc the PDDocument to write @param signInterface the interface for signing the document @throws IOException if there's an error writing the document
2720 Checks if the flag 'FLAG_REQUIRED' is set in the COSName 'FF'. @return true if required, false otherwise
2721 Checks if the 'no export' flag is set in the dictionary. @return true if 'no export' flag is set; false otherwise
2722 Checks if radios are in unison based on a flag in the COS object. @return true if radios are in unison, false otherwise
2723 Checks if COS object has multiline flag set. @return true if object is multiline; false otherwise
2724 Checks if a COS object has a password flag set. @return true if the object has a password flag, false otherwise
2725 Checks if the COS object is marked as a file select. @return true if the object has the FILE_SELECT flag set; otherwise false
2726 Checks if spell check is disabled for the COS object. @return true if spell check is disabled, false otherwise
2727 Checks if scrolling is disabled for this COS object. @return true if scrolling is disabled; false otherwise
2728 Checks if the COS object has the COMB flag set. @return true if the COMB flag is set, false otherwise
2729 Checks if the COS object contains rich text. @return true if it's rich text, false otherwise
2730 Prepares for decryption using the provided encryption data and decryption material. @param encryption Encryption object containing document metadata @param documentIDArray Array of document IDs (not used in this method) @param decryptionMaterial Decryption material, must be PublicKeyDecryptionMaterial type @throws IOException If decryption material is not compatible or if there are issues with the certificate
2731 Fetches and modifies owner key based on revision number. @return byte array of the modified owner key or null if not found @throws IOException if input/output error occurs
2732 Checks if toggle no view flag is set for the COS object. @return true if toggle no view flag is set, false otherwise
2733 Calculates displacement vector based on width code. @param code unique identifier for width @return Displacement vector as a Vector object @throws IOException if there's an issue retrieving the width
2734 Checks if the dictionary is read-only. @return true if dictionary is read-only, false otherwise
2735 Checks if the COS object is sorted based on specific flag. @return true if sorted, false otherwise
2736 Checks if the COS object has the edit flag set. @return true if the edit flag is set, false otherwise
2737 Checks if subfilter flag is required for the COS object. @return true if subfilter flag is required, false otherwise
2738 Checks if filtering is required based on COS object flags. @return true if filtering is required, false otherwise
2739 Processes and interprets stream operators in a PDF content stream. @param contentStream the input stream containing PDF operations to process @throws IOException if an I/O error occurs while reading the stream
2740 Checks if the COS object has the 'printed' flag set. @return true if printed, false otherwise
2741 Adds a page to the PDF document and updates the tree structure. @param page The PDPage object to be added to the PDF document.
2742 Removes a COSDictionary node from its parent's kids and updates ancestor counts. @param node the COSDictionary to be removed
2743 Calculates the total width of a given text string by summing up individual character widths. @param text input string to calculate width for @return total width of the string @throws IOException if an I/O error occurs during encoding or reading the stream
2744 Checks if spell check should be disabled for the COS object. @return true if spell check is disabled, false otherwise
2745 Sets the visibility of the object and notifies if there's a change. @param hidden true to hide, false to show
2746 Checks if the Commit On Selection Change flag is set in the COS object. @return true if flag is set, false otherwise
2747 Clips the given rectangle to the media box and returns the clipped rectangle. @param box the input rectangle to be clipped @return a new PDRectangle object representing the clipped rectangle
2748 Checks if the COS object has the COMBO flag set. @return true if the COMBO flag is set, false otherwise
2749 Checks if contents are locked based on COS object flags. @return true if locked; false otherwise
2750 Adds an attribute object to the structure element and updates COS object dictionary. @param attributeObject the attribute to be added, which will be associated with this structure element
2751 Checks if the COS object supports multi-selection. @return true if multi-select is supported, false otherwise
2752 Checks if the COS object has the radio button flag set. @return true if it's a radio button, false otherwise
2753 Fetches and formats the user key from a dictionary object. @return Byte array representing the user key or null if not found. @throws IOException if there's an issue reading the bytes from COSString
2754 Retrieves a pattern object by name from the cache or creates it if not found. @param name unique identifier of the pattern @return PDAbstractPattern object or null if not created/found @throws IOException if there's an issue with reading the pattern data
2755 Checks if V flag is required in the COS object. @return true if V flag is set, false otherwise
2756 Checks if a reason flag is required for the COS object. @return true if reason is required, false otherwise
2757 Checks if legal attestation is required for the COS object. @return true if required, false otherwise
2758 Checks if additional revision information is required for the COS object. @return true if additional revision info is needed, false otherwise
2759 Checks if subject is required based on dictionary flags. @return true if subject is required, false otherwise
2760 Adds a class name to the COSArray in the COSObject dictionary. @param className the name of the class to be added
2761 Checks if issuer flag is required in the COS dictionary. @return true if required, false otherwise
2762 Checks if Object Identifier (OID) is required in the document's flags. @return true if OID is required; false otherwise
2763 Checks if digest method is required for a COS object flag. @return true if digest method is required, false otherwise
2764 Checks if key usage flag is required in the dictionary. @return true if required, false otherwise
2765 Checks if URL is required based on a flag in the dictionary. @return true if URL is required, false otherwise
2766 Checks if text style in this object is italic. @return true if italic, false otherwise
2767 Loads an FDF document from a specified file. @param filename the path to the FDF file @return an FDFDocument object @throws IOException if there's an error reading the file
2768 Checks if the text style of the object is bold. @return true if the text is bold; false otherwise
2769 Checks if signatures exist in the dictionary using a specific flag. @return true if signatures exist, false otherwise
2770 Checks if the COS object is locked. @return true if locked, false otherwise
2771 Checks if the dictionary has the append-only flag set. @return true if append-only, false otherwise
2772 Retrieves a PDShading object by name from the document's resources. @param name COSName of the shading resource @return PDShading object or null if not found or an error occurs
2773 Checks if subject DN (Distinguished Name) is required as per the flag in the dictionary. @return true if subject DN is required, false otherwise
2774 Updates revision number in attribute object's COSArray if applicable. @param attributeObject the PDAttributeObject to be updated
2775 Returns the shading object associated with this instance, creating it if necessary. @return PDShading object or null if not available @throws IOException if there is an error reading the shading data
2776 Checks if the COS object is marked as a push button. @return true if the object is a push button, false otherwise
2777 Initializes PDF page settings for rendering. @param document the source PDF document @param orientation page orientation (portrait/landscape) @param showPageBorder whether to display page borders @param dpi resolution in dots per inch @param center whether to center pages on output
2778 Loads a PDF document from a given input source using provided credentials and settings. @param randomAccessRead the data source to load the PDF from @param password the password for the PDF, if encrypted @param keyStore the KeyStore containing the private key, if needed @param alias the alias of the private key in the KeyStore @return a PDDocument object representing the loaded PDF document @throws IOException if there is an error reading from the data source or decrypting the PDF
2779 Adds a new PDPage to the document and updates highest object number. @param page the PDPage object to be added to the document
2780 Loads a PDF document from a RandomAccessRead source with an optional password. @param randomAccessRead the source to read the PDF document from @param password the password for the PDF document, if any @return PDDocument object representing the loaded PDF
2781 Loads a PDF document from input stream with memory-only cache. @param randomAccessRead input stream of the PDF document @return PDDocument object representing the loaded document @throws IOException if an I/O error occurs or the document is invalid
2782 Loads a PDF document from byte array input with optional password and keystore. @param input the byte array containing PDF data @param password the decryption password (optional) @param keyStore the InputStream of the keystore (optional) @param alias the alias for the certificate in the keystore (optional) @return a PDDocument object representing the loaded PDF document @throws IOException if an I/O error occurs
2783 Constructs a new PageExtractor object with the given PDDocument as its source. @param sourceDocument The PDF document from which to extract pages.
2784 Initializes visual signature from a specified File. @param file The input File to read and initialize the visual signature from @throws IOException if an I/O error occurs while reading the file
2785 Parses a COSBase object dynamically from the document pool or file based on its key. @param objKey unique identifier for the COSObject @param requireExistingNotCompressedObj flag to determine if existing, non-compressed objects are required @return parsed COSBase object or null if not found or an issue occurred during parsing @throws IOException if there's an error reading from the document pool or file
2786 Sets or unsets the fixed pitch mode. @param flag true to enable fixed pitch, false to disable
2787 Sets the serif style for text. @param flag true to enable serif, false to disable
2788 Sets the symbolic flag for this object. @param flag true to enable symbolic mode, false to disable
2789 Sets script flag to true or false. @param flag Boolean value to enable/disable the script feature
2790 Sets the non-symbolic flag in the object. @param flag true to enable, false to disable non-symbolic behavior
2791 Sets the italic formatting flag for text. @param flag true to enable italics, false to disable
2792 Initializes FDFAnnotation with attributes from the provided XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or malformed
2793 Creates a PDImageXObject from a file in the given document. @param document PDF document to which the image will be added @param file source image file @param number index or identifier of the image @return PDImageXObject created from the file @throws IOException if there's an error reading the file
2794 Creates a PDImageXObject from a byte array with specified parameters. @param document the PDDocument to which the image will belong @param byteArray the input data for the image @param number a specific parameter related to image creation @return a PDImageXObject instance or throws IOException if an error occurs
2795 Sets or clears the force bold display flag. @param flag true to enable force bold; false to disable
2796 Sets the small cap flag to true or false. @param flag a boolean value; true enables small cap, false disables it
2797 Sets or unsets the all-capital letters flag. @param flag true to enable all-caps, false to disable
2798 Parses and validates the cross-reference (xref) table or stream in a PDF document. @param document The COSDocument to parse the xref from. @param startXRefOffset The starting offset for parsing. @return The trailer dictionary of the parsed xref. @throws IOException If there is an error reading or parsing the data.
2799 Initializes visual signature from input stream. @param is InputStream containing visual signature data @throws IOException if there's an error reading the input stream
2800 Updates open count of the parent node by a given delta value. @param delta The amount to add or subtract from the parent's open count.
2801 Sets the non-stroking color for drawing operations, handling various color spaces and patterns. @param color PDColor object representing the desired color @throws IOException if there's an issue writing the color data
2802 Sets the stroking color for the PDF document and writes it to the output stream. @param color the PDColor object representing the new stroking color @throws IOException if an I/O error occurs while writing to the output stream
2803 Fetches a specific page from the document by index. @param pageIndex the position of the desired page (0-based) @return the PDPage object at the specified index or null if not found
2804 Retrieves the page number from an array. Returns -1 if not found or invalid type.
2805 Prepares a PDF document for encryption using owner and user passwords, and sets encryption parameters. @param document the PDDocument to be encrypted @throws IOException if an I/O error occurs
2806 Draws an inline image at specified coordinates with original size. @param inlineImage the image to be drawn @param x horizontal coordinate for drawing @param y vertical coordinate for drawing @throws IOException if an error occurs during image processing
2807 Sets a new value and handles updates based on export values or Opt entry. @param value the string value to be set @throws IOException if an I/O error occurs during update
2808 Retrieves the crop box for a page. If available, returns a clipped rectangle; otherwise, returns the media box. @return PDRectangle representing the crop box or media box if no crop box is found.
2809 Inserts a generated comb appearance in PDF content stream. @param contents PDF content stream @param appearanceStream PDF appearance stream @param font the font to be used for text @param fontSize size of the font @throws IOException if an I/O error occurs
2810 Adds a structure to the pool, handling streams and dictionaries. @param current the COSBase object to be added @throws IOException if an I/O error occurs during addition
2811 Fetches and maps structure type to a standardized value. @return Standardized structure type as a string
2812 Creates a CID-based descendant font from dictionary and parent Type0 font. @param dictionary containing font data @param parent Type0 font to inherit properties @return PDCIDFont object based on subtype in dictionary @throws IOException if invalid font type or 'Font' dictionary not found
2813 Collects patches from a COSStream object using provided transformations and control points. @param xform AffineTransform for transformation @param matrix Matrix for calculations @param controlPoints Number of control points @return List of Patch objects or an empty list if no valid patches found @throws IOException If there is an error reading the stream or decoding parameters
2814 Creates and returns an input stream from the underlying stream object. @return COSInputStream object @throws IOException if an I/O error occurs while creating the input stream
2815 Reads input stream and returns its content as a String. @return Content of the input stream or an empty String if IOException occurs.
2816 Creates a cloudy ellipse within the specified rectangle and finishes drawing. @param rd PDRectangle defining the boundaries of the ellipse @throws IOException if an I/O error occurs during drawing
2817 Notifies that the structure element has changed and updates it accordingly.
2818 Saves incremental changes to the PDF document into an output stream. @param output the OutputStream where the changes will be written @throws IOException if an I/O error occurs @throws IllegalStateException if the document was not loaded from a file or a stream
2819 Writes a PDDocument to the output stream with default settings. @param doc The PDF document to be written. @throws IOException if an I/O error occurs during writing.
2820 Sets default value and checks its validity. @param value the string to be set as a default value
2821 Fetches and returns the parent PDAnnotationMarkup object of this instance. If failure occurs or parent is not of type PDAnnotationMarkup, logs error and returns null.
2822 Retrieves the annotation this annotation is in reply to, if any. @return PDAnnotation object or null if none exists @throws IOException if there's a problem accessing the data
2823 Fetches and returns a COSObjectable from the dictionary, handling both annotations and streams. @return COSObjectable object or null if not found or invalid
2824 Fetches and filters annotations based on a given filter. @param annotationFilter filters out unwanted annotations @return List of PDAnnotation objects that pass the filter @throws IOException if there's an error accessing the PDF data
2825 Imports optional content properties from source to target document. @param srcDoc the source PDF document @throws IOException if an I/O error occurs
2826 Constructs a PDFPrintable object for printing the document. @param document PDDocument to be printed @param scaling Scaling options for the print @param showPageBorder Flag to display page border @param dpi Dots per inch resolution for the print @param center Flag to center the print on the page
2827 Decodes JPX input stream to output stream based on data buffer type. @param encoded InputStream containing encoded JPX data @param decoded OutputStream for decoded data @param parameters COSDictionary of decode parameters @param options DecodeOptions object @return DecodeResult object with updated parameters @throws IOException if an I/O error occurs or data type is not implemented
2828 Fetches and sets the Unicode CMap for composite fonts with specific encodings or CJK descendants. @throws IOException if there's an issue reading the CMap files
2829 Appends marked content to the list using its MCID, validating it first. @param markedContent object containing data and MCID @throws IllegalArgumentException if MCID is negative or doesn't exist
2830 Removes a dictionary node at the specified index. @param index position of the node to be removed
2831 Performs LZW decoding on input stream to output stream using provided parameters and predictor. @param encoded InputStream containing the encoded data @param decoded OutputStream for the decoded data @param parameters Dictionary with decode parameters @param index Parameter index @return DecodeResult object containing updated parameters @throws IOException if input/output operations fail
2832 Returns an opaque version of the image. @return BufferedImage object representing the opaque image @throws IOException if there is a problem reading the image data
2833 Initializes tiling paint with a specific pattern and transformation. @param drawer PageDrawer object for drawing patterns @param pattern Tiling pattern to be used @param xform AffineTransform object for transforming the pattern @throws IOException if there's an issue with reading the pattern
2834 Checks if the field should be combined for text extraction. @return true if conditions are met, false otherwise
2835 Processes and applies a tiling pattern to the graphics context. @param tilingPattern the pattern to apply @param color the base color for the pattern @param colorSpace the color space for the pattern @param patternMatrix the transformation matrix for the pattern
2836 Checks if all characters in the flag are capitalized. @return true if all characters are capitalized, false otherwise
2837 Checks if the text style flag for italics is on. @return true if text is italic, false otherwise
2838 Checks if the object has the non-symbolic flag set. @return true if non-symbolic, false otherwise
2839 Checks if the script flag is set. @return true if the script flag is on, false otherwise
2840 Checks if the symbolic flag is on. @return true if the symbolic flag is set, false otherwise
2841 Checks if the serif flag is on. @return true if the serif flag is on, false otherwise
2842 Retrieves a pattern based on the given color. @param color PDColor object containing the pattern name @return PDAbstractPattern object if found, throws IOException otherwise
2843 Creates a PDField object from a dictionary in the given PDForm and PDF structure. @param form the PDForm containing the field @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField, if any @return the created PDField object
2844 Inserts a new PDF page after the specified existing page. @param newPage The page to be inserted @param prevPage The existing page after which the new page is inserted
2845 Processes a PDF content stream, applying transformations and clipping.
2846 Checks if the flag bit for small cap is on. @return true if small cap, false otherwise
2847 Removes a specified PDPage from the document using its COSObject. @param page the PDPage to be removed
2848 Inserts a new PDF page right before the nextPage in document structure. @param newPage The page to be inserted. @param nextPage The reference page before which newPage will be inserted. Throws exception if nextPage is not found in current document structure.
2849 Processes and transforms annotation appearance based on its rectangle. @param annotation the PDAnnotation to process @param appearance the PDAppearanceStream of the annotation @throws IOException if input/output operation fails
2850 Processes a Type 3 stream with given character processor and text rendering matrix. @param charProc PDType3CharProc object for character processing @param textRenderingMatrix Matrix object for text rendering transformations
2851 Processes a transparency group, applying transformations and graphics state changes. @param group PDTransparencyGroup object to be processed @throws IOException if an I/O error occurs during processing
2852 Prepares the object for decryption using provided encryption details and material. Throws exception if decryption material is incompatible or password is incorrect. @param encryption PDEncryption object containing encryption details @param documentIDArray COSArray of document IDs @param decryptionMaterial DecryptionMaterial to be used for decryption @throws IOException if decryption fails due to incompatible material or incorrect password
2853 Checks if the audio format has fixed pitch. @return true if the format has fixed pitch, false otherwise
2854 Returns the width of a space character in the font, calculating it if necessary.
2855 Checks if the force bold flag bit is on. @return true if the flag bit is on, false otherwise
2856 Initializes FDFAnnotationStamp with XML element and sets its appearance. @param element XML element containing stamp data @throws IOException if there's an issue parsing or decoding the appearance
2857 Constructs FDFAnnotationSquare & sets interior color if provided in element attribute. @param element contains attributes for annotation setup, including "interior-color" @throws IOException if there's an issue with the input/output operation
2858 Initializes FDFAnnotationFreeText object and sets its properties based on the provided XML element. @param element XML Element containing annotation data @throws IOException if there's an issue with setting default appearance or style
2859 Initializes FDFAnnotationInk and sets the ink list from an XML element. @param element XML element containing ink data @throws IOException if 'gesture' element is missing or parsing fails
2860 Constructs an FDFAnnotationLine object from the given XML element, setting its properties. @param element XML element containing line attributes @throws IOException if required attributes are missing or invalid
2861 Initializes FDFAnnotationLink and sets URI action based on provided XML element. @param element XML element containing annotation data @throws IOException if there's an issue handling the element
2862 Initializes FDFAnnotationPolygon with element and sets interior color if provided in the element's attributes. @param element XML element containing annotation data @throws IOException when there are issues reading from the element
2863 Initializes and sets up a FDFAnnotationPolyline object from the given Element. @param element the source Element to create the polyline annotation from @throws IOException if there is an issue reading data from the element
2864 Fetches all annotations without filtering. @return List of PDAnnotation objects or empty list if none found @throws IOException if the operation fails due to I/O errors
2865 Imports a page from one PDF document as a form object in another, handling transformations and resources. @param sourceDoc The source PDF document @param page The page to be imported @return PDFormXObject representing the imported page as a form @throws IOException if there is an error reading from the source document
2866 Constructs a new PDFPrintable object for printing the given PDDocument. @param document The PDF document to be printed @param scaling Scaling factor for the printout @param showPageBorder Whether to display page borders @param dpi Dots per inch resolution for the printout
2867 Initializes a new FDFAnnotationSound with specified Element and sets its subtype. @param element the Element to initialize the annotation sound @throws IOException if there is an error during initialization
2868 Handles the start of a marked content sequence, managing hidden OCGs based on properties. @param tag the COSName tag for the sequence @param properties the COSDictionary containing additional properties
2869 Shows a form if it's not hidden and content is rendered. @param form the PDFormXObject to be shown @throws IOException if an I/O error occurs
2870 Sets the non-stroking color for drawing operations. @param color PDColor object representing the desired color @throws IOException if there is an error writing the color data
2871 Finds the destination page in a PDF document based on its destination. @param doc the input PDDocument object @return the PDPage object if found, or null otherwise
2872 Calculates and sets the size of a specific PDF page, validating input and handling rotation. @param document the PDDocument instance to fetch the page from @param page the page number (starting from 1) to calculate the size for
2873 Imports a PDF page into the document, handling resources and properties.
2874 Creates and sets a template for the PDF structure using given PDPage. @param page The page to be added to the template document. @throws IOException If there is an error creating or adding the page to the template.
2875 Constructs a new PDFPageable object with default settings. @param document the input PDDocument to be paginated
2876 Constructs a PDFPageable with specified document and orientation. @param document the source PDDocument @param orientation page orientation (Portrait or Landscape)
2877 Constructs a PDFPageable with specified document, orientation, and border display options. @param document the PDDocument to be paginated @param orientation page orientation (Portrait/Landscape) @param showPageBorder indicates whether to display page borders
2878 Constructs a PDFPageable object with specified parameters. @param document the PDDocument to be paginated @param orientation page orientation (portrait or landscape) @param showPageBorder whether to display page borders @param dpi resolution of the pages in DPI
2879 Loads a PDF document from a byte array with an optional password. @param input the byte array of the PDF file @param password the password for the PDF (or null if none) @return PDDocument object representing the loaded PDF @throws IOException if there is an error reading or decrypting the PDF
2880 Loads a PDF document from a File with an optional password. @param file the PDF file to load @param password the password for the PDF, or null if no password is required @return PDDocument object representing the loaded PDF @throws IOException if there's an error reading the file or loading the document
2881 Loads a PDF document from the given file using specified password and keystore. @param file The PDF file to load @param password Decryption password for the PDF @param keyStore Input stream of the keystore containing the private key @param alias Alias of the entry in the keystore @return Loaded PDDocument object @throws IOException If an I/O error occurs or file is not a valid PDF
2882 Constructs a PDF annotation file attachment from XML element. @param element the XML element containing annotation data @throws IOException if there is an error reading or processing the element
2883 Sets the stroking color for drawing operations in a PDF document. @param color PDColor object representing the desired stroke color @throws IOException if there is an error writing to the PDF document
2884 Retrieves the trailer dictionary from the document, handling potential errors and rebuilding if necessary. @return COSDictionary representing the trailer or null if an error occurred and leniency is not enabled @throws IOException if there's a problem reading the document
2885 Initializes FDFAnnotationTextMarkup with coordinates from the given element. @param element contains 'coords' attribute with comma-separated float values @throws IOException if 'coords' is missing or has less than 8 numbers
2886 Initializes FDFAnnotationText and sets icon & state if provided in the element. @param element containing annotation data, including optional "icon" and "state" attributes @throws IOException if there's a problem reading from the element
2887 Sets visual signature properties for the document. @param visSignatureProperties object containing visible signature properties @throws IOException if there is an error setting the signature
2888 Initializes a FDFAnnotationCircle with given Element and sets its interior color if specified. @param element the XML Element containing annotation data @throws IOException if there's an issue reading from the Element
2889 Removes a specific page from the document. @param page the PDPage object to be removed
2890 Creates an image object from a file using a specific document. @param document the PDF document to use @param file the source file for the image @return a PDImageXObject representing the image @throws IOException if there's an error reading the file
2891 Extracts string data from a given COSBase object. @param base the input COSBase object, which can be null, COSString, or COSStream @return corresponding string value or an empty string if not applicable
2892 Finds a child field by its name in an array of names. @param name Array of field names @param nameIndex Current index in the name array @return Child PDField if found, otherwise null
2893 Retrieves a list of PDField objects from the dictionary. @return List of PDField objects or an empty list if none found
2894 Generates a Paint object from the given PDColor, handling various color space types. @param color the input color in PDF format @return Paint object for rendering or transparency if color space is null/invalid @throws IOException if there's an issue with the color conversion
2895 Determines the fallback font name based on a given PDFontDescriptor. @param fontDescriptor descriptor of the original font @return the name of the fallback font
2896 Fetches symbolic flag from font descriptor. @return Boolean value of isSymbolic() or null if font descriptor is missing
2897 Breaks down the text into lines based on given font, size, and width. @param font PDFont object for text styling @param fontSize Size of the font @param width Maximum line width @return List of Line objects representing the broken-down text lines @throws IOException If there's an issue with text content processing
2898 Retrieves and returns a processed value based on its type. @return The processed value or null if the original value is null @throws IOException if an unknown type for field import is encountered
2899 Renders and positions a glyph in display units using legacy calculations. @param textRenderingMatrix matrix for rendering @param font the PDFont object @param code the character code @param displacement the original displacement of the glyph
2900 Saves the document to an output stream with optional compression. @param output The output stream where the document is saved. @param compressParameters Parameters for compressing the document. If null, no compression is applied. @throws IOException if document is closed or there's a problem writing the output.
2901 Checks if a value has changed and notifies listeners if so. @param oldBase original COSBase object @param newBase updated COSBase object
2902 Initializes the page for further operations like drawing or modifying. @param page the PDF page to initialize, cannot be null
2903 Returns the bleed box of a page, or the crop box if not defined. @return PDRectangle object representing the bleed box or crop box
2904 Fetches the trim box of a PDF page, or its crop box if trim box is not available. @return Trim box as a PDRectangle object, or crop box if trim box is null
2905 Returns the art box of the PDF page, clipped to its media box if available; otherwise, returns the crop box. @return The art box rectangle or the crop box as a fallback.
2906 Returns the rotated crop box of a PDF page, considering its rotation angle. @param page the PDF page to be processed @return the rotated crop box rectangle for the given page
2907 Writes a COSDocument to an output stream. @param doc the document to be written @throws IOException if an I/O error occurs during writing
2908 Retrieves rich text content from a field. @return String representation of the rich text or null if not found or inappropriate type
2909 Retrieves the "before" object from a dictionary, handling both strings and streams. @return String representation of the "before" object or null if not found or unsupported type
2910 Retrieves the 'after' string from a dictionary object. @return The 'after' string or null if not found or not a COSString/COSStream
2911 Initializes FDFAnnotationCaret with the given Element and sets its subtype and symbol. @param element the XML element to initialize the caret from @throws IOException if there is an issue initializing the caret
2912 Loads and initializes ICC profile. Handles errors by falling back to alternate color space.
2913 Initializes a COSWriterCompressionPool for a given document and compression parameters. @param document the PDDocument to be compressed @param parameters the CompressParameters to use, or default if null @throws IOException if an I/O error occurs
2914 Sets the string value of the COS object and updates selected options index. @param value the new string value to be set @throws IOException if an I/O error occurs while setting the value
2915 Initializes Type 5 shading context and sets up triangle list & pixel table for rendering. @param shading PDShadingType5 object containing shading information @param cm ColorModel used for the shading @param xform AffineTransform applied to the shading @param matrix Matrix applied to the shading @param deviceBounds Rectangle defining the device bounds @throws IOException if an I/O error occurs
2916 Initializes a Type4 shading context and sets up the pixel table for rendering. @param shading The PDShadingType4 object containing shading information @param cm The ColorModel to be used for color operations @param xform The AffineTransform to be applied during rendering @param matrix The Matrix to be used in the rendering process @param deviceBounds The rectangle defining the area of the device on which to render
2917 Initializes PatchMeshesShadingContext with given parameters and prepares for rendering. @param shading PDMeshBasedShadingType object @param colorModel ColorModel object @param xform AffineTransform object @param matrix Matrix object @param deviceBounds Rectangle object for device bounds @param controlPoints number of control points @throws IOException if an I/O error occurs
2918 Retrieves and possibly initializes a 2D integer array of input/output samples. @return A 2D int array containing sample data for input/output parameters.
2919 Converts input stream data into a byte array. @return Byte array representation of the input stream data @throws IOException if an I/O error occurs when reading from the input stream
2920 Creates a layout page from PDF page with content and resource streams. @param page PDPage object containing the page data @return LayoutPage object with combined content stream and resources @throws IOException if there's an issue reading or writing data
2921 Extracts string content from a COSBase object, handling both COSString and COSStream types. @param base the input COSBase object to extract text from @return the extracted text as String, or empty String if not found or unsupported type
2922 Retrieves rich content as a String from the object. @return String representation of rich contents or null if not available
2923 Retrieves the action as a String. Supports JS and Stream types. @return The action as a String or null if unsupported type
2924 Displays the specified transparency group. @param form PDTransparencyGroup object to be displayed @throws IOException if an input/output error occurs during processing
2925 Retrieves child fields from the field object. Handles circular references and invalid data types. @return List of PDField objects representing child fields
2926 Shows a specific glyph from a Type 3 font, applying the given transformation matrix. @param textRenderingMatrix the matrix for rendering the text @param font the PDType3Font object containing the glyphs @param code the unique identifier of the glyph to display @param displacement a vector representing displacement values @throws IOException if there's an error processing the Type 3 stream
2927 Builds a font descriptor from FontMetrics. @param metrics object containing font metrics @return PDFontDescriptor with set properties from the metrics
2928 Builds a font descriptor for a Type 1 font. @param type1 the input Type1Font object @return a PDFFontDescriptor object with various properties set
2929 Fetches labels for each page index in a document. @return String array containing page labels, or null if no pages exist
2930 Maps labels to their corresponding page indices in a document. @return Map where keys are labels and values are page indices
2931 Removes a specific page from the collection by its index. @param pageNumber the position of the page to be removed
2932 Shows the form on the current page. Throws exception if no page or if form data is invalid. @param form the PDFormXObject to be shown @throws IOException if an I/O error occurs during processing
2933 Creates a PDFontDescriptor for the given TrueTypeFont. Throws IOException if required tables are missing. @param ttf input TrueTypeFont object @return PDFontDescriptor with font metrics and attributes set
2934 Fetches normal appearance as a content stream. @param compress flag to enable/disable compression @return PDAppearanceContentStream or throws IOException if error occurs
2935 Creates a PDImageXObject from a byte array with specified offset. @param document the PDDocument to which the image will belong @param byteArray the source data for the image @return a PDImageXObject created from the byte array @throws IOException if there is an error reading the byte array
2936 Processes a tiling pattern with given color and color space using its matrix. @param tilingPattern the PDTilingPattern to be processed @param color the PDColor for the pattern @param colorSpace the PDColorSpace for the pattern @throws IOException if an input/output error occurs during processing
2937 Constructs a PDPageContentStream for drawing on a PDF page with default settings. @param document the PDF document @param sourcePage the page to draw on @throws IOException if an I/O error occurs
2938 Displays and processes the visual representation of a given annotation. @param annotation The annotation to be shown and processed @throws IOException if there's an error in getting or processing the annotation's appearance stream
2939 Processes and applies the soft mask to a transparency group, modifying graphics state. @param group PDTransparencyGroup object to process soft mask for @throws IOException if an I/O error occurs during processing
2940 Initializes and customizes the appearance of a widget based on provided characteristics. @param widget The annotation widget to be styled @param appearanceCharacteristics Characteristics that define the appearance (e.g., color) @param appearanceStream Stream for writing the appearance data
2941 Initializes a Strike Out Annotation for a given Element. @param element The Element to apply the strike out annotation on @throws IOException if there is an error during initialization
2942 Initializes an underline annotation for a given PDF element. @param element the PDF document's Element to be underlined @throws IOException if there is an error during initialization
2943 Writes the text to a PDF content stream with specified font and color. @param contents PDAppearanceContentStream to write to @param zeroFontSize fallback size if current font size is 0
2944 Initializes a PDICCBased object using an ICC color profile from the given COSArray. @param iccArray contains ICC profile and associated stream @throws IOException if there's an error reading the stream
2945 Processes a single page from a PDF document. @param page PDPage object to be processed @throws IOException if an I/O error occurs during processing
2946 Processes a child content stream within the context of a page. Throws exception if called outside of #processPage. @param contentStream the PDContentStream to be processed @param page the parent PDPage for the content stream @throws IOException if an I/O error occurs
2947 Initializes sign designer with a PDF document and an image on the specified page. @param document PDDocument object to be modified @param image BufferedImage to be placed on the document @param page The page number where the sign will be placed
2948 Initializes a PDVisibleSignDesigner with a specified document and image stream. @param document the PDF document to be signed @param imageStream input stream of the image for signing @param page the page number in the document where the signature will be placed
2949 Constructs a PDFPrintable object for printing. @param document PDDocument to print @param scaling Scaling options for the print @param showPageBorder Boolean flag to display page border
2950 Loads and returns a PDF document from given byte array. @param input byte array representing the PDF content @return PDDocument object representing the loaded PDF document @throws IOException if loading fails due to invalid input or I/O errors
2951 Initializes Type7ShadingContext with given parameters. @param shading PDShadingType7 object @param colorModel ColorModel for the context @param xform AffineTransform instance @param matrix Transformation matrix @param deviceBounds Bounding rectangle of the device @throws IOException if there is an input/output error
2952 Constructs a Type6ShadingContext for given parameters. @param shading PDShadingType6 object @param colorModel specifies the color space and has information about alpha and transparency @param xform an AffineTransform object used to transform coordinates in 2D space @param matrix a mathematical construct usually used for transformations in graphics and computational geometry @param deviceBounds defines the boundaries of the rendering area
2953 Appends a form as a layer to the target page in PDF document. @param targetPage Page to append the form to @param form FormXObject to be appended @param transform Affine transformation for the form @param layerName Name of the optional content group (layer) @return Created PDOptionalContentGroup or throws exception if layer exists
2954 Fetches bytes from COSArray or COSStream object. @return Byte array containing stream/packet data, or empty if not found. @throws IOException if an I/O error occurs while fetching the bytes.
2955 Recursively interpolates values based on input coordinates and step. @param coord array of integer coordinates @param step current step in the recursion @return float array containing interpolated samples
2956 Constructs a PDFunctionType4 object from the given COSBase function stream. Parses the byte array into a string and generates instruction sequence. @param functionStream base COS stream containing function data @throws IOException if there's an error reading or parsing the stream
2957 Writes XML representation of field to the provided writer. @param output Writer object for writing XML data @throws IOException if an I/O error occurs during writing
2958 Fetches rich content from annotated dictionary object. @return Rich content as a string or null if not found
2959 Checks if XFA is dynamic (has it and no fields). @return true if XFA exists and there are no fields, false otherwise
2960 Fetches a FontBoxFont based on baseFont or fallbackName. Returns a FontMapping object. @param baseFont original font name @param fontDescriptor descriptor for the font @return FontMapping<FontBoxFont> object, uses fallback if necessary
2961 Retrieves a TrueType font by base name or fallback. @param baseFont desired font's base name @param fontDescriptor descriptor for the font @return FontMapping object containing TrueTypeFont and fallback status
2962 Determines if the font is symbolic based on its encoding and other attributes. @return Boolean value indicating if the font is symbolic or not, or null if unknown
2963 Reads and sets the encoding for the font from a dictionary object. Handles various encoding types and falls back to font-based encoding if necessary. @throws IOException if there's an issue reading the encoding
2964 Calculates the optimal font size for text within a PDF rectangle. @param font the PDFont object representing the font to be used @param contentRect the PDRectangle object defining the area where the text will be placed @return the calculated font size that fits both width and height of the contentRect @throws IOException if there is an error reading from the font or contentRect objects
2965 Formats text content based on appearance style and width. Throws IOException if there's an issue with the text processing.
2966 Initializes a new FDFAnnotationSquiggly with the given Element and sets its name to a COS subtype. @param element the Element used for initialization @throws IOException if there is an issue during initialization
2967 Fetches rich text value from inheritable attribute RV. @return rich text value as a String or null if not found
2968 Initializes FDFAnnotationHighlight with a given Element and sets its name to SUBTYPE. @param element the Element to initialize the annotation highlight @throws IOException if there's an error initializing the annotation highlight
2969 Loads a PDF document from a given File. @param file the File object representing the PDF document @return PDDocument object containing the loaded PDF data @throws IOException if an error occurs while reading the file
2970 Saves data to a file with optional compression. Warns if overwriting an existing file. @param file the target File object @param compressParameters parameters for compression (if applicable) @throws IOException if there's an error during saving or compression
2971 Retrieves the page format for a given index in the document, handling landscape/portrait orientation. @param pageIndex the index of the page @return PageFormat object containing the page's dimensions and orientation
2972 Processes and clones annotations from a given page, fixing any issues with destinations or links. @param imported the PDPage object containing the annotations to be processed @throws IOException if there is an error reading or writing COS objects
2973 Deprecated. Loads a PDF document from a File with an optional password. @param file the input File object containing the PDF document @param password (optional) the password to decrypt the PDF @return PDDocument object representing the loaded PDF document @throws IOException if there is an error reading the File or processing the PDF
2974 Saves data to an OutputStream with default compression settings. @param output the stream where data is written @throws IOException if an I/O error occurs during saving
2975 Fetches normal appearance content stream. No resources are included. @return PDAppearanceContentStream object or null if not found @throws IOException if there is an error reading the stream
2976 Opens a node if it's not already open, and increments node count.
2977 Closes an open node by switching its count. Does nothing if node is already closed.
2978 Retrieves and creates a layout page from the first page of a PDF document. @param doc input PDF document @return LayoutPage object representing the formatted page or null if error occurs @throws IOException if an I/O error occurs while reading the document
2979 Displays a glyph based on the provided font and text rendering matrix. @param textRenderingMatrix transforms text space to user space @param font the font containing the glyph @param code unique identifier for the glyph @param displacement x, y shift for the glyph position
2980 Clones structure tree from source to destination document for preserving PDF structure and accessibility. @param destinationDocument the document to which the structure tree will be cloned @throws IOException if there's an issue with input/output operations
2981 Updates structure parent entries for a given PDPage and offset. @param page the PDPage to update @param structParentOffset the offset value to apply
2982 Writes the compressed body of a COSDocument to an output stream. @param document The COSDocument object to be written @throws IOException If an I/O error occurs during writing
2983 Imports a specific page from a PDF document as a form object. @param sourceDoc the source PDF document @param pageNumber the page number to be imported (0-indexed) @return PDFormXObject representing the imported page or throws IOException if an error occurs
2984 Exports document fields to FDF format. @return FDFDocument object containing exported field data @throws IOException if an I/O error occurs during the process
2985 Embeds a PDType1 font into a PDF document and sets its properties. @param doc the PDF document @param dict the COS dictionary for the font @param pfbStream input stream of the PFB font file @param encoding the font's encoding, default is from FontBox if null
2986 Embeds TrueType font into PDF document with specified options. @param document the PDDocument to embed the font into @param dict the COSDictionary for the font @param ttf the TrueTypeFont to embed @param embedSubset whether to embed only a subset of the font @throws IOException if embedding is not permitted or TrueType collections are used with full embedding
2987 Performs interpolation on input values. Returns an array of floats.
2988 Extracts and converts a soft mask's matte array to RGB. @param softMask the soft mask image object @return float array of RGB values or null if conversion fails
2989 Processes a page, sets rotation and size, and adjusts translation matrix for cropbox. @param page the PDPage object to process @throws IOException if an I/O error occurs
2990 Retrieves and parses a document from bytes using XMLUtil. @return Parsed Document object or throws IOException if error occurs @throws IOException if an I/O error occurs during parsing
2991 Constructs a PDType1Font object from an input stream and encoding, embedding it in the document. @param doc the PDF document @param pfbIn input stream containing PFB data @param encoding text encoding for the font @throws IOException if there's an error reading the input stream or creating the font
2992 Initializes PDVisibleSignDesigner with a document source, image, and page number. Sets the visible signature image and calculates document page size. @param documentSource source of the document @param image visible signature image @param page page number in the document @throws IOException if there's an error reading from the document source
2993 Creates a PDFunction based on the provided COSBase object. @param function COSBase object representing a PDF function @return Corresponding PDFunction object, throws IOException if invalid or unsupported type
2994 Determines if the font contains symbolic characters. @return true if symbolic, false otherwise or null if uncertain
2995 Checks if the provided AcroForm object represents a dynamic XFA form. @param acroForm PDAcroForm object to be checked @return true if it's a dynamic XFA form, false otherwise
2996 Constructs a FDFDictionary from an XML Element. @param fdfXML the input XML Element containing FDF data.
2997 Creates a PDImageXObject from a BufferedImage. Uses predictor encoding if possible, otherwise exports as 8-bit sRGB. May lose color info in the latter case. @param document The PDF document @param image The source BufferedImage @return PDImageXObject created from the image @throws IOException If an I/O error occurs
2998 Processes a PDF page, imports it into the document, and handles its resources and annotations. @param page The PDPage object to process @throws IOException if there is an issue with input/output operations
2999 Embeds a TrueType font into a PDF document and sets its properties. @param document the target PDF document @param dict the COS dictionary for this font @param ttf the TrueTypeFont to embed @param encoding the text encoding to use
3000 Embeds a Type2 CID font into the PDF document. @param document The PDF document to embed the font in @param dict Font dictionary for the new font @param ttf TrueTypeFont object to be embedded @param embedSubset Whether to embed only a subset of the font @param parent Parent Type 0 font (if any) @param vertical Whether the font is written vertically
3001 Initializes a PDFont object with the given COSDictionary. Loads font descriptor and Unicode cmap. @param fontDictionary contains font information
3002 Constructs a PDFPrintable object with specified document and scaling. @param document PDDocument to be printed @param scaling Scaling factor for the print job
3003 Creates or retrieves an ICC-based color space from a COS array and resources. @param iccArray input data for the color space @param resources external resources to cache or retrieve the color space @return PDICCBased color space object, potentially cached in resources
3004 Draws a page with specified Graphics2D and PDRectangle. @param g Graphics2D object for drawing @param pageSize PDRectangle specifying the size of the page @throws IOException if an I/O error occurs
3005 Builds a PDF with visible signature using provided design properties. @param properties Object containing design parameters for the PDF @return InputStream of the built PDF or throws IOException if an error occurs
3006 Saves a file with default compression settings. @param file The file to be saved @throws IOException if an I/O error occurs
3007 Saves a file with specified compression parameters. @param fileName name of the file to be saved @param compressParameters object containing compression settings @throws IOException if an I/O error occurs during saving
3008 Inserts a generated appearance stream for a widget into the output stream, considering font, size, and alignment settings. @param widget The annotation widget to generate the appearance for @param appearanceStream The appearance stream to be inserted @param output The output stream where the appearance stream is written to
3009 Imports FDF field data into the current field. Handles various field value types and updates flags. @param fdfField FDFField object containing the field data to be imported @throws IOException if an unknown type for field import is encountered
3010 Writes XML representation of the file and its fields to a Writer. @param output Writer object to write XML data to @throws IOException if writing to the Writer fails
3011 Initializes PDVisibleSignDesigner with document source, image stream, and page number. Sets visible signature image input stream and calculates document page size. @param documentSource RandomAccessRead object for the document @param imageStream InputStream for the visible signature image @param page Page number to calculate size from @throws IOException If there is an error reading the streams or calculating page size
3012 Draws an image at specified coordinates with original size. @param image the PDImageXObject to be drawn @param x the horizontal coordinate for the top left corner of the image @param y the vertical coordinate for the top left corner of the image @throws IOException if the image cannot be read or drawn
3013 Initializes an iterator over the fields in a PDF AcroForm. @param form the AcroForm containing the fields to iterate through
3014 Deprecated. Use Loader.loadPDF(File) instead. Loads a PDF document from a file. @param file the input File object representing the PDF document @return PDDocument object containing the loaded document @throws IOException if an I/O error occurs
3015 Initializes a FDFCatalog with an Element and sets its FDF dictionary. @param element the XML Element to initialize the FDFCatalog from
3016 Initializes a TrueType font within a PDF document, with optional embedding and closing of the source. @param document target PDF document @param ttf TrueTypeFont to be initialized @param encoding text encoding to be used @param closeTTF if true, closes the TTF data source after initialization
3017 Initializes a PDType0Font object with specified properties. @param document PDF document @param ttf TrueType font @param embedSubset true if subset embedding is required, false otherwise @param closeTTF true to close TTF after initialization, false otherwise @param vertical true for vertical text, false for horizontal
3018 Constructs a Type 0 font from the given dictionary. Throws exception if required data is missing or invalid. @param fontDictionary COSDictionary containing font information @throws IOException if descendant font data is missing, empty, or of incorrect type in the dictionary
3019 Constructs a PDSimpleFont object from a COSDictionary. @param fontDictionary contains font data used for construction
3020 Constructs a PDType1Font object from an input stream. @param doc the document to which the font will be added @param pfbIn the input stream containing PFB data for the font @throws IOException if there is an error reading from the input stream
3021 Initializes PDVisibleSignDesigner with a file, input stream, and page. Sets the visible signature image from the input stream and calculates the document page size. @param filename name of the document file @param imageStream input stream for the signature image @param page number of the document page to use @throws IOException if there is an issue reading the file or image stream
3022 Initializes PDVisibleSignDesigner with a file, image, and page number. Sets the visible signature image and calculates the page size from the file. @param filename name of the document file @param image visible signature image to be set @param page page number for which to calculate the size
3023 Renders a specified page of a PDF as an image with given scale and type. @param pageIndex index of the page to render @param scale rendering scale factor @param imageType desired output image type @return BufferedImage representation of the rendered page @throws IOException if page cannot be accessed or image size exceeds maximum limit
3024 Processes specific pages of a document based on start and end page numbers. @throws IOException if an I/O error occurs while processing the pages
3025 Renders a page to graphics using provided parameters and settings. @param pageIndex index of the page to render @param graphics Graphics2D object for rendering @param scaleX X-axis scaling factor @param scaleY Y-axis scaling factor @param destination RenderDestination object
3026 Constructs a PDFPrintable with default scaling option SHRINK_TO_FIT for the given PDDocument. @param document the PDDocument to be printed
3027 Returns an iterator over all PDFields in the acroForm. @return An iterator of type PDField
3028 Saves data to a file with the given name. @param fileName name of the file to save data to @throws IOException if an I/O error occurs during saving
3029 Builds and sets a visible signature for the PDF using PDFTemplateBuilder and PDFTemplateCreator. Throws IOException if there's an issue with building or setting the signature.
3030 Creates an image object from a file based on its content. Supports JPEG, TIFF, BMP, GIF, and PNG formats. @param file the input file @param doc the document to which the image will be added @return PDImageXObject representing the created image @throws IOException if an I/O error occurs or the file type is not supported
3031 Creates a PDImageXObject from a file based on its extension. Supports JPG/JPEG, TIFF, GIF, BMP, and PNG formats. @param file The input file @param doc The document to which the image will be added @return A PDImageXObject instance for the given file @throws IOException If an error occurs while reading the file
3032 Fetches the tint transform function for this object. @return PDFunction object representing tint transformation or null if not defined @throws IOException if there is an error accessing the underlying data
3033 Constructs a PDDeviceN object from COSArray and PDResources. Initializes color space and tint transform. @param deviceN contains colorant names and attributes @param resources provides additional context for the color space
3034 Constructs a PDSeparation object with given parameters. Throws IOException if tint transform function has less output parameters than the alternate colorspace. @param separation COSArray containing separation details @param resources PDResources for color space creation and function creation @throws IOException when tint transform function's output parameters are less than alternate colorspace components
3035 Processes a single PDF page within specified range and bookmarks, clears & resizes character lists for new data. @param page PDPage object to be processed @throws IOException if an I/O error occurs
3036 Fetches the PDFunction object associated with this instance. @return PDFunction object or null if not defined @throws IOException if there is an error reading the COSBase dictionary object
3037 Fetches and returns the transfer function, creating it if necessary. @return PDFunction object or null if not available or created @throws IOException if an error occurs while fetching the function
3038 Evaluates input based on a "stitching" function, selecting an appropriate child function and domain. @param input array containing the value to be evaluated @return float array with the result of the evaluation, or throws IOException if partition is not found
3039 Writes XML representation of FDF data to a provided Writer. @param output the Writer object for outputting XML data @throws IOException if an I/O error occurs while writing
3040 Retrieves an image from the specified region with optional subsampling. @param region Rectangle defining the part of the image to retrieve @param subsampling Level of subsampling (1 means no subsampling) @return BufferedImage representing the retrieved portion of the image @throws IOException if there is an error reading the image data
3041 Constructs a PDIndexed object with specified array and resources, initializing color tables. @param indexedArray COSArray for indexing @param resources PDF resources to be used @throws IOException if there is an issue reading from the array or creating color space
3042 Evaluates input array using linear interpolation and returns transformed values. @param input float array to be evaluated @return float array with transformed values or null if an IOException occurs
3043 Retrieves and returns an array of PDFunctions from the COSObject. @return Array of PDFunction objects @throws IOException if /Function element is not a dictionary or an array
3044 Retrieves the default font for PDF documents. If not already set, initializes it as Helvetica. @return The default PDFont object used in documents
3045 Loads a Type 0 font into the PDF document. @param doc the PDF document @param ttf the TrueType font to load @param embedSubset whether to embed subset of characters @return loaded PDType0Font object @throws IOException if an I/O error occurs
3046 Constructs a PDTrueTypeFont object from a given COSDictionary. @param fontDictionary dictionary containing font data @throws IOException if there's an issue reading the embedded TrueTypeFont
3047 Constructs a PDType1CFont from the given COSDictionary. @param fontDictionary contains font data @throws IOException if there's an issue reading the embedded Type1C font
3048 Constructs a PDType1Font from a COSDictionary. Supports Type1C and PFB formats. @param fontDictionary the dictionary containing font data @throws IOException if there's an issue reading or parsing the font data
3049 Constructs a PDType3Font object from a COS dictionary and a resource cache. @param fontDictionary contains font data @param resourceCache provides access to external resources @throws IOException if there's an issue reading the font encoding
3050 Loads a Type0 font from the given document and data source. @param doc The PDF document to load the font into. @param randomAccessRead Data source for the font data. @param embedSubset Whether to embed font subsets. @param vertical Font orientation (true for vertical). @return A PDType0Font object. @throws IOException if an error occurs during reading or parsing.
3051 Loads a vertical, Type 0 font into the document. @param doc the PDF document @param ttf the TrueType font to load @param embedSubset whether to embed subsets of the font @return PDType0Font object for use in the document @throws IOException if an I/O error occurs
3052 Loads a TrueType font into a PDF document. @param doc the target PDF document @param ttf the TrueType font to load @param encoding text encoding for the font @return PDTrueTypeFont object loaded in the document @throws IOException if an I/O error occurs
3053 Loads a TrueType font from input stream into a PDF document. @param doc PDF document to load the font into @param randomAccessRead Input stream of the font file @param encoding Character encoding of the font @return PDTrueTypeFont object for use in the PDF document @throws IOException if there is an error reading from input stream
3054 Initializes an FDFDocument object from a given Document, validating the root node is 'xfdf'. @param doc The source XML document containing FDF data. @throws IOException If the root element of the document is not 'xfdf'.
3055 Creates a PDImageXObject from a file. @param imagePath the path of the image file @param doc the PDF document to which the image will be added @return a PDImageXObject instance representing the image @throws IOException if an I/O error occurs while reading the file
3056 Renders a specific page to the given Graphics2D context with specified scaling factors. @param pageIndex index of the page to render @param graphics Graphics2D context for rendering @param scaleX horizontal scaling factor @param scaleY vertical scaling factor
3057 Renders an image of a specific page with given scale and type to its destination. @param pageIndex index of the page to render @param scale rendering scale factor @param imageType type of the image (e.g., JPEG, PNG) @return BufferedImage object representing the rendered image @throws IOException if an I/O error occurs during rendering
3058 Retrieves all signature fields from the PDF document's acroform. @return List of PDSignatureField objects found in the document
3059 Refreshes the appearances of all terminal fields in the document. @throws IOException if an I/O error occurs during appearance construction
3060 Writes an XML document to the provided Writer stream. @param output Writer object for outputting XML content @throws IOException if there's a problem writing to the output stream
3061 Splits a PDF document into multiple documents, each containing one page. @param document the source PDDocument to split @return List of PDDocument objects, each representing a single-page document @throws IOException if an I/O error occurs during splitting
3062 Constructs PDIndexed object from COSArray. @param indexedArray the array containing indexed data @throws IOException if there is an issue with input/output operations
3063 Evaluates a set of functions with the given input array and adjusts values to be within [0, 1]. @param input float array containing function inputs @return float array with evaluated function outputs, adjusted to [0, 1] range @throws IOException if there's an issue reading or processing functions
3064 Fetches an image with default settings. @return a BufferedImage object representing the fetched image @throws IOException if there is an error while fetching or reading the image
3065 Processes a range of PDF pages, applying actions and updating bookmark page numbers. @param pages the tree of PDF pages to be processed @throws IOException if an I/O error occurs during processing
3066 Creates and returns the appropriate PDColorSpace based on the input. @param colorSpace COSBase object representing the color space @param resources PDResources object for additional resources @param wasDefault boolean flag indicating if it's a default color space @return PDColorSpace object corresponding to the input @throws IOException if an error occurs during creation
3067 Retrieves a PDField object by its fully qualified name from cache or field tree. @param fullyQualifiedName the unique identifier for the field @return PDField object if found, otherwise null
3068 Sets or clears the cache for fields based on the input flag. @param cache true to set, false to clear the field cache
3069 Returns an iterator over all PDField objects in this document. @return Iterator over PDField instances
3070 Renders an image from a specified page with given scale and returns it as BufferedImage. @param pageIndex index of the page to render @param scale scale factor for rendering the image @return BufferedImage object representing the rendered image @throws IOException if an I/O error occurs while rendering the image
3071 Renders a specific image page with specified DPI (dots per inch). @param pageIndex index of the page to render @param dpi desired resolution in dots per inch @return BufferedImage object representing the rendered image @throws IOException if an input/output error occurs while rendering
3072 Renders an image with specified DPI and page index. @param pageIndex index of the page to render @param dpi desired DPI for rendering @param imageType type of the image to be rendered @return BufferedImage object representing the rendered image @throws IOException if an error occurs during rendering
3073 Renders a specified page to the given graphics context with scaling. @param pageIndex index of the page to be rendered @param graphics Graphics2D object for rendering @param scale scaling factor for rendering
3074 Extracts a specific range of pages from a PDF document. @return PDDocument containing the extracted pages or an empty one if invalid range @throws IOException if there's an issue reading the source document
3075 Saves XFDF data to a Writer and ensures the stream is closed, even in case of exceptions. @param output The Writer object to save the XFDF data to. @throws IOException If an I/O error occurs while writing or closing the Writer.
3076 Displays given text using current graphics state and font settings. @param string byte array representing text to display @throws IOException if there is an issue reading from the input stream
3077 Loads a TrueType font from a file into the specified document. @param doc the PDF document to load the font into @param file the input TrueType font file @param encoding the character encoding of the font @return PDTrueTypeFont object for use in the document @throws IOException if there is an error reading from the file
3078 Constructs a PDMMType1Font object from a COSDictionary. @param fontDictionary contains font data @throws IOException if there's an error reading the dictionary
3079 Loads a TrueType font from an InputStream into a PDF document. @param doc the PDF document to load the font into @param input the InputStream containing the font data @param encoding the text encoding for the font @return a PDTrueTypeFont object loaded with the specified parameters @throws IOException if there is an error reading from the input stream
3080 Loads a Type 0 font from specified file into the PDF document. @param doc the target PDF document @param file the source font file @return PDType0Font object representing the loaded font @throws IOException if there is an error reading the file or processing the font
3081 Loads an XFDF document from the given InputStream. @param input stream containing the XFDF data @return a loaded FDFDocument object @throws IOException if there's an issue reading from the input stream or parsing the XML
3082 Loads a Type 0 font from an input stream into a PDDocument. @param doc the target PDDocument @param input the source InputStream @param embedSubset whether to embed the subset of characters used in the document @return loaded PDType0Font object @throws IOException if there is an error reading from the input stream
3083 Loads a vertical type 0 font from a file into the specified PDF document. @param doc the target PDF document @param file the source font file @return loaded PDType0Font object @throws IOException if an I/O error occurs during loading
3084 Loads a vertical Type 0 font from an input stream into a PDF document. @param doc the target PDF document @param input the input stream containing the font data @return a PDType0Font object for the loaded font @throws IOException if there's an error reading from the input stream or creating the font
3085 Loads a vertical Type 0 font from an InputStream into a PDDocument. @param doc the PDF document to which the font will be added @param input the source of the font data @param embedSubset whether to embed only a subset of glyphs used in the text @return the loaded PDType0Font object @throws IOException if there is an error reading from the InputStream
3086 Constructs a PDType3Font object from a COS dictionary. @param fontDictionary contains font parameters @throws IOException if there's an error reading the font dictionary
3087 Adds a digital signature to the PDF document. @param sigObject The PDSignature object representing the signature @param signatureInterface Interface for signing operations @param options Options for the signature appearance and behavior @throws IOException if an I/O error occurs during the operation
3088 Writes text from a PDDocument to an output stream, with optional formatting. @param doc the PDF document containing the text @param outputStream the writer to which the text is written @throws IOException if there's an error reading from the doc or writing to the outputStream
3089 Retrieves a list of digital signatures from signature fields. @return List of PDSignature objects extracted from signature fields.
3090 Imports FDF data into the document fields. @param fdf FDFDocument containing field data to be imported @throws IOException if an I/O error occurs while importing
3091 Evaluates function for a single input value. @param inputValue the value to evaluate the function with @return an array of floats as result of the evaluation @throws IOException if there's an issue with input/output operations
3092 Displays transparency group on provided graphics if content is rendered and not hidden. @param form the transparency group to display @param graphics the graphics context where the group will be shown @throws IOException if there's an issue handling the image data
3093 Fetches and applies soft mask to non-stroking paint based on graphics state. @return Paint object after applying soft mask or throws IOException if error occurs
3094 Evaluates function and converts the result to RGB. @param values input array for the function evaluation @return integer representing RGB value, may throw IOException
3095 Renders an image from a specific page. @param pageIndex index of the page to render @return BufferedImage object containing the rendered image @throws IOException if there is an error reading or rendering the image
3096 Loads a Type 0 font from an input stream into a PDF document. @param doc the target PDF document @param input the input stream containing the font data @return the loaded PDType0Font object @throws IOException if there is an error reading from the input stream or processing the font data
3097 Creates a PDFont object based on the provided COSDictionary and ResourceCache. @param dictionary contains the font data @param resourceCache for caching resources @return a specific type of PDFont object based on the font subtype in the dictionary @throws IOException if there's an issue with creating the font or invalid subtypes are found
3098 Loads an XFDF document from a file. @param filename the name of the file to load @return an FDFDocument object representing the loaded XFDF data @throws IOException if there is an error reading the file
3099 Displays text represented as a byte array. @param string byte array representing the text to be displayed @throws IOException if an I/O error occurs during displaying
3100 Loads an XFDF document from a given file. @param file the source of the XFDF document @return FDFDocument object representing the loaded data @throws IOException if there's an error reading the file
3101 Renders a specific page to a Graphics2D object. @param pageIndex the index of the page to be rendered @param graphics the Graphics2D object to render onto @throws IOException if an I/O error occurs during rendering
3102 Processes and displays text strings from a COSArray, handling displacement calculations based on font properties. @param array the input COSArray containing text and positioning information
3103 Adds a digital signature to an object with specified options. @param sigObject the PDSignature object to be added @param options SignatureOptions for customizing the addition process @throws IOException if there is an issue during the addition process
3104 Retrieves the last PDSignature from a list of signatures. @return Last PDSignature in the list or null if list is empty
3105 Saves incremental changes for external signing to an output stream. @param output the stream where the changes will be saved @return ExternalSigningSupport object for further operations or throws exception if document is not ready for signing
3106 Extracts text from a PDF document and returns it as a string. @param doc the PDDocument object containing the PDF data @return a String representation of the document's text @throws IOException if an I/O error occurs during extraction
3107 Adds a digital signature using provided objects and default options. @param sigObject the signature object to be added @param signatureInterface interface for handling the signature @throws IOException if an I/O error occurs during addition
3108 Saves XFDF data to a specified file in UTF-8 encoding. @param fileName the file where XFDF data will be saved @throws IOException if an I/O error occurs
3109 Draws a glyph on the path using specified font and transformations, considering rendering mode. @param path the general path to draw on @param font the PDFont object used for drawing @param code the glyph code @param displacement vector for positioning @param at the affine transformation to apply @throws IOException if an I/O error occurs
3110 Adds a signature to the document using default options. @param sigObject The PDSignature object containing the signature data @throws IOException if an input/output error occurs while adding the signature
3111 Creates a PDF font from a COSDictionary. @param dictionary contains font data @return a PDFFont object @throws IOException if an error occurs during creation
3112 Fetches a font by name from cache or creates a new one. @param name COSName of the font @return PDFont object or null if not found/created @throws IOException if there's an error accessing the font data
3113 Fills and strokes a path using the specified winding rule
3114 Saves XFDF data to a file. @param fileName name of the file to save to @throws IOException if an I/O error occurs
3115 Flattens the form if it's not a dynamic XFA form. @throws IOException if an I/O error occurs during processing
3116 Copies necessary font resources to the appearance stream. @param appearanceStream target PDAppearanceStream @throws IOException if an I/O error occurs during copying
3117 Merges source PDF into destination PDF by appending pages. Handles various document properties and structures. @param destination the PDDocument to append to @param source the PDDocument to append from @throws IOException if there's an error during merging
3118 Converts PNG image data to a PDImageXObject. @param doc PDF document object @param imageData byte array containing the PNG image data @return PDImageXObject or null if conversion fails due to invalid data @throws IOException if an I/O error occurs during conversion
3119 Fetches a PDF font based on the current settings. @return PDFont object or null if not found or invalid type @throws IOException if error occurs during I/O operations
3120 Sets and modifies the content of a widget's appearance stream. @param widget annotation widget to modify @param appearanceStream stream containing visual representation data @throws IOException if there is an error reading or writing the stream
3121 Creates PDImageXObject from byte array based on the detected file type. @param document the PDDocument @param byteArray the input data @param name the image name @param customFactory a factory for creating images, can be null @return PDImageXObject instance or throws IllegalArgumentException if unsupported format @throws IOException if an I/O error occurs
3122 Copies graphic state properties from this object to the provided graphics state. @param gs The graphics state to copy into @throws IOException if an error occurs during I/O operations
3123 Processes appearance string operators and their arguments from a byte array content. @param content the byte array containing PDF stream data @throws IOException if an I/O error occurs during parsing
3124 Creates a PDImageXObject from a byte array. @param document the PDDocument to which the image object belongs @param byteArray the input data for the image @param name the name of the image object @return a new PDImageXObject instance @throws IOException if an I/O error occurs
3125 Sets the default appearance string and resources for a PDF document. @param defaultAppearance COSString containing the default appearance settings @param defaultResources PDResources object containing the default resources @throws IOException if there's an error processing the appearance string operators
3126 Fetches and returns the default appearance string. @return PDDefaultAppearanceString object containing DA data and default resources @throws IOException if an error occurs during fetching or conversion of data
3127 Sets and formats the appearance value for a field in PDF document.
3128 Initializes helper with a text field and sets its default appearance string. @param field PDVariableText object representing the text field @throws IOException if there's an issue processing the default appearance string
