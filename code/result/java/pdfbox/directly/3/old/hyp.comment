1 Initializes a new instance of the OperatorName class.
2 Initializes an OperatorProcessor with a given PDFStreamEngine context. @param context The engine that provides data for processing operators
3 Default constructor for COSBase class.
4 Initializes an instance of COSUpdateState with provided update information. @param updateInfo object containing details for the update operation
5 Initializes an empty instance of DecodeOptions.
6 Initializes DecodeOptions with a specified source region. @param sourceRegion Rectangle defining the area to be decoded
7 Initializes DecodeOptions with specified subsampling rate. @param subsampling the level of subsampling for both X and Y axes
8 Default constructor for the Filter class. Initializes an empty filter.
9 Constructs a new PageExtractor for the given document and page range. @param sourceDocument the PDF document to extract pages from @param startPage the first page number to extract (1-indexed) @param endPage the last page number to extract (1-indexed)
10 Initializes an instance of AbstractXReference with specified XReferenceType. @param type the XReferenceType to initialize this AbstractXReference with
11 Initializes a new instance of ContentStreamWriter with an OutputStream. @param out The OutputStream to write content to.
12 Initializes the DefaultResourceCache with an option to enable or disable stable cache. @param enableStableCache a boolean flag to enable (true) or disable (false) stable cache
13 Initializes PDDocumentCatalog with document and root dictionary. @param doc the associated PDDocument object @param rootDictionary the root dictionary of the document
14 Constructs PDDocumentInformation from a COSDictionary. @param dic a dictionary containing document information
15 Initializes a PDDocumentNameDestinationDictionary with a given COSDictionary. @param dict the dictionary to be used for initialization
16 Initializes PDDocumentNameDictionary with document catalog and COS dictionary. @param cat the PDF document catalog @param names a COS (CosObject) dictionary of names
17 Constructs a PDPage from a COSDictionary. @param pageDictionary dictionary containing page data
18 Constructs a PDPage object from a COSDictionary and a ResourceCache. @param pageDictionary the dictionary containing page data @param resourceCache cache for reusing resources across pages
19 Constructs a new PDDictionaryWrapper object with the given COSDictionary. @param dictionary a COSDictionary to wrap and manage
20 Constructs a new PDNameTreeNode from a given COSDictionary. @param dict The dictionary to be used as the basis for the tree node.
21 Constructs a PDPageLabelRange from a COSDictionary. @param dict the dictionary containing page label range data
22 Constructs a PDRange object from a COSArray. @param range a COSArray representing a PDF range
23 Initializes a new PDRange object with a given array and starting index. @param range the input COSArray for the range @param index the starting index in the array
24 Initializes a PDStream instance with a COSStream. @param str the underlying COSStream to be wrapped by this PDStream
25 Initializes PDMarkInfo with a given COSDictionary. @param dic COSDictionary to initialize PDMarkInfo
26 Constructs a PDMarkedContentReference using a COSDictionary object. @param dictionary - a dictionary containing the marked content reference data
27 Constructs a PDObjectReference from a COSDictionary. @param theDictionary the COSDictionary to be wrapped by this reference
28 Initializes PDStructureNode with a given COSDictionary. @param dictionary a dictionary containing structure elements
29 Initializes an empty instance of the Revisions class.
30 Initializes a new PDPropertyList with a given COSDictionary. @param dict source dictionary to initialize the property list
31 Constructs a PDBoxStyle object from a COSDictionary. @param dic a COSDictionary containing the style information
32 Initializes an AccessPermission object with default permissions.
33 Constructs an AccessPermission object with specified permissions. @param permissions integer representing permission bits
34 Initializes PDCryptFilterDictionary with provided COSDictionary. @param d COSDictionary to be used for initialization
35 Initializes the salt array used in the RC4 cipher.
36 Constructs a new FDFAnnotation with a given COSDictionary. @param a the COSDictionary to initialize this FDFAnnotation
37 Initializes an FDFCatalog with a given COSDictionary. @param cat a COSDictionary containing catalog data
38 Initializes FDFDictionary with a given COSDictionary. @param fdfDictionary input dictionary to initialize FDFDictionary
39 Constructs an FDFField using a provided COSDictionary. @param f the input COSDictionary to be used for constructing the FDFField
40 Initializes FDFIconFit object with provided COSDictionary. @param f a COSDictionary containing icon fitting data
41 Constructs a new instance of FDFJavaScript with the provided COSDictionary. @param javaScript a COSDictionary containing JavaScript code
42 Constructs an FDFNamedPageReference object from a COSDictionary. @param r the COSDictionary to construct the reference from
43 Constructs an FDFOptionElement with the given COSArray. @param o a COSArray containing options for PDF formatting
44 Initializes an FDFPage object with a given COSDictionary. @param p The COSDictionary containing page data.
45 Initializes an instance of FDFPageInfo with a COSDictionary. @param p the COSDictionary to be stored in this FDFPageInfo object
46 Constructs an FDFTemplate object from a COSDictionary. @param t the input COSDictionary to create the template
47 Constructs a PDFontDescriptor from a given COSDictionary. @param desc the COSDictionary containing font descriptor data
48 Initializes PDFontSetting with a given COSArray. @param fs COSArray containing font settings
49 Initializes an empty line dash pattern with no dashes and zero phase.
50 Constructs a PDColor object with given pattern name and color space. @param patternName the COSName of the pattern @param colorSpace the PDColorSpace for the color
51 Initializes PDDeviceNAttributes with given COSDictionary. @param attributes COSDictionary containing device attributes
52 Initializes PDDeviceNProcess with given COSDictionary attributes. @param attributes COSDictionary containing device attributes
53 Initializes PDGamma with a COSArray. @param array input array to be stored in PDGamma instance
54 Initializes PDTristimulus with COSArray values. @param array an array containing tristimulus values
55 Initializes PDTransparencyGroupAttributes with a COSDictionary. @param dic the COSDictionary to be used for initialization
56 Initializes PDF optional content properties with given dictionary. @param props COSDictionary containing PDF optional content properties
57 Initializes a new instance of PDAbstractPattern with given COSDictionary. @param dictionary contains data for the pattern
58 Initializes PDShading with given COSDictionary. @param shadingDictionary dictionary containing shading information
59 Initializes a new instance of PDExtendedGraphicsState with a COSDictionary and ResourceCache. @param dictionary contains the graphics state data @param resourceCache stores and manages resources for efficient access and usage
60 Constructs a PDSoftMask object from a COSDictionary and a ResourceCache. @param dictionary the source of data for constructing the soft mask @param resourceCache cache for reusing resources efficiently
61 Initializes a new paragraph with the given text content. @param text The string of text to be stored in the paragraph
62 Constructor to initialize a new Word object with given text. @param text the content of the word as a string
63 Initializes a new instance of PDAction with a given COSDictionary. @param a the COSDictionary to initialize the PDAction with
64 Private constructor for utility class PDActionFactory.
65 Constructor to initialize PDAdditionalActions with a given COSDictionary. @param a COSDictionary containing additional action data
66 Initializes PDAnnotationAdditionalActions with a given COSDictionary. @param a COSDictionary containing additional annotation actions
67 Initializes AdditionalActions with a given COSDictionary. @param a COSDictionary containing additional actions
68 Initializes PDFormFieldAdditionalActions with a given COSDictionary. @param a COSDictionary containing additional field actions
69 Initializes additional page actions from a COSDictionary. @param a COSDictionary containing additional page actions
70 Constructs a PDTargetDirectory object from a COSDictionary. @param dictionary input dictionary containing target directory data
71 Initializes PDURIDictionary with a COSDictionary object. @param dictionary contains URI mapping data
72 Constructs PDWindowsLaunchParams with given COSDictionary. @param p COSDictionary containing launch parameters
73 Constructs an appearance characteristics dictionary from given COSDictionary. @param dict COSDictionary containing appearance characteristic data
74 Constructs PDAppearanceDictionary from a COSDictionary. @param dictionary input COSDictionary to create appearance dictionary
75 Initializes an appearance entry with a given COSDictionary. @param entry a COSDictionary containing appearance data
76 Initializes PDBorderEffectDictionary with a given COSDictionary. @param dict a COSDictionary containing border effect data
77 Initializes a PDBorderStyleDictionary with the provided COSDictionary. @param dict input dictionary to initialize the border style dictionary
78 Initializes an external data dictionary from a COSDictionary object. @param dictionary the input COSDictionary to initialize the data dictionary
79 Initializes a CloudyBorder with given parameters for a PDF appearance content stream. @param stream the PDF appearance content stream @param intensity the cloudiness intensity @param lineWidth the width of the lines in the border @param rect the rectangle defining the annotation's area
80 Initializes PDPropBuild with a COSDictionary and sets it to use direct objects as per specification. @param dict input dictionary to be used for initialization
81 Constructs a PDPropBuildDataDict from given COSDictionary and sets it as direct. @param dict input dictionary to be used for construction
82 Initializes PDSeedValue object with a COSDictionary and sets it to use direct objects. @param dict COSDictionary containing seed value data
83 Initializes PDSeedValueCertificate with given COSDictionary and sets it as direct. @param dict the COSDictionary to be used for initialization
84 Initializes PDSeedValueMDP with COSDictionary and sets it as direct. @param dict the COSDictionary to be used for initialization
85 Initializes and sets up a PDSeedValueTimeStamp object with given COSDictionary. @param dict the COSDictionary to be used for setup
86 Initializes a PDSignature object with a given COSDictionary. @param dict the COSDictionary to initialize the signature with
87 Initializes SignatureOptions with default page number (0).
88 Constructs a PDF Template Creator with a given builder. @param templateBuilder object to build the PDF template
89 Private constructor to prevent instantiation of utility class.
90 Constructs a PDField object with given parameters. @param acroForm the AcroForm instance @param field the COSDictionary of the field @param parent the parent PDNonTerminalField (if any)
91 Initializes a PDXFAResource object with a COSBase XFA object. @param xfaBase the base XFA object to be initialized with
92 Initializes a PDMeasureDictionary with a COSDictionary. @param dictionary a dictionary containing measure information
93 Constructs a PDNumberFormatDictionary from a COSDictionary. @param dictionary the input COSDictionary to be used for construction
94 Constructor to initialize PDViewportDictionary with provided COSDictionary. @param dictionary a dictionary containing viewport information
95 Constructs a PDThread object from a given COSDictionary. @param t The COSDictionary used to initialize the PDThread
96 Constructs a PDThreadBead with a given COSDictionary. @param b input COSDictionary to initialize the PDThreadBead object
97 Initializes PDViewerPreferences with a given COSDictionary. @param dic a dictionary containing viewer preferences settings
98 Initializes PageDrawerParameters for PDF page drawing. @param renderer the PDFRenderer instance @param page the PDPage to be drawn @param subsamplingAllowed flag indicating if subsampling is allowed @param destination the RenderDestination for the rendered image @param renderingHints hints for rendering the page @param imageDownscalingOptimizationThreshold threshold for optimizing image downscaling
99 Initializes a new empty LineItem with text position set to null.
100 Initializes a transformation matrix with identity values.
101 Initializes a Matrix with a given float array. @param src source float array to populate the Matrix
102 Initializes a new Matrix object with specified values. @param a,b,c,d,e,f float values for matrix elements at specific positions
103 Private constructor to prevent instantiation of utility class.
104 Constructs an instance of PDFStreamEngine.
105 Adds an OperatorProcessor to the collection based on its name. @param op the OperatorProcessor object to be added
106 Sets the terminator character, ensuring it's within range 118-126 and not 'Z'. @param term the new terminator character @throws IllegalArgumentException if term is out of bounds or equals 'Z'
107 Sets the page number at which content should be split. @param split The page number (must be greater than zero).
108 Sets the start page for a collection. Throws an exception if input is less than or equal to zero. @param start The desired starting page number @throws IllegalArgumentException If the start page is less than or equal to zero
109 Sets the ending page number. Throws exception for invalid input (<=0). @param end Ending page number to be set
110 Sets the leniency of parsing. Must be called before parsing begins. @param lenient If true, parsing will be more forgiving. Throws exception if called after parsing starts.
111 Constructs CompressParameters with the specified object stream size. Throws an exception if object stream size is negative. @param objectStreamSize size of the object stream to be compressed
112 Sets the blending mode for the object. Cannot be null. @param blendMode the desired BlendMode to set
113 Constructs a PDFieldTree with the given PDAcroForm as root. Throws exception if input is null. @param acroForm the root PDAcroForm for the field tree
114 Retrieves the length of the stream if it's not currently being written to. @return Length of the stream as a long value, defaults to 0 if writing in progress. @throws IllegalStateException If an OutputStream is open for this COSStream.
115 Initializes a new instance of PDFMergerUtility with an empty source list.
116 Initializes COSWriterObjectStream with given compression pool. @param compressionPool COSWriterCompressionPool for handling compression tasks
117 Initializes an empty list to store text clippings, representing a single clipping area.
118 Adds a source file to the collection of sources. @param source The file to be added @throws FileNotFoundException if the file does not exist
119 Adds a new source to the collection of sources. @param source a RandomAccessRead object to be added
120 Adds a new name to the instructions list. @param name The name to be added to the instructions list.
121 Adds an InstructionSequence to the list of instructions. @param child the InstructionSequence to be added
122 Adds a new recipient to the list of recipients using their Public Key. @param recipient The Public Key Recipient object to be added
123 Adds a new region with its name and area to the collection. @param regionName unique identifier for the region @param rect Rectangle2D object representing the region's area
124 Sets the trailer of the current cross-reference (XRef) object. @param trailer COSDictionary containing trailer data to be set
125 Retrieves an object from the pool using its unique key. @param key a COSObjectKey to identify the object in the pool @return COSBase object if found, null otherwise
126 Retrieves an Operator object by its unique name from the operators map. @param operatorName the name of the operator to retrieve @return the corresponding Operator object, or null if not found
127 Converts a Unicode sequence to its corresponding name. @param unicodeSequence the input Unicode sequence @return the corresponding name or ".notdef" if not found
128 Retrieves the current graphics state from the stack. @return The top PDGraphicsState object on the stack
129 Restores previous graphics state from the stack.
130 Returns the size of the graphics stack. @return the number of elements in the graphics stack
131 Transforms a 2D point using a given transformation matrix. @param x The x-coordinate of the point to transform @param y The y-coordinate of the point to transform @return A new Point2D.Float object representing the transformed point
132 Decreases the object's level by one and logs an error if it becomes negative
133 Adds an integer to the instruction list. @param value integer to be added to the instructions
134 Checks if COSStream is closed and throws IOException if true. @throws IOException if COSStream has been closed and cannot be read.
135 Throws an IOException as resetting this object is not supported. @throws IOException indicating that reset operation is unsupported
136 Resets the state of the object. Throws an IOException as this operation is unsupported. @throws IOException always thrown, indicating that reset operation is not supported
137 Fetches the encryption used in the parsed document. @return PDEncryption object or throws IOException if document is not parsed first @throws IOException if document is not parsed before calling getEncryption()
138 Fetches and returns the AccessPermission for the parsed document. @return The AccessPermission object, throws IOException if document is not parsed
139 Constructs an InvalidPasswordException with a specified error message. @param message explains why the password is invalid
140 Constructs an Operator object with the given string, throwing an exception if it starts with '/'. @param aOperator the operator as a String @throws IllegalArgumentException if the operator starts with '/'
141 Returns a string representation of the PDF operator. @return A string containing the name of the PDF operator.
142 Returns a string representation of the COSArray object. @return A string containing the class name and array elements
143 Returns a string representation of the COSObject. @return String in the format "COSObject{key}"
144 Retrieves a filter by its name from the filters map. Throws IOException if not found. @param filterName unique identifier for the filter @return Filter object corresponding to the given name @throws IOException if no filter with the specified name is found
145 Adds a real number to the list of instructions. @param value the real number to be added
146 Sets the width of the sign designer and updates formatter rectangle parameters. @param width new width value for the sign designer @return PDVisibleSignDesigner object with updated width
147 Sets the height of the sign designer and updates formatter rectangle parameters. @param height new height value as a float @return current PDVisibleSignDesigner object for method chaining
148 Calculates the length of a line between two 2D points. @param ps starting point @param pe ending point @return the length of the line as a double value
149 Calculates the value of an edge equation for a given point and line segment. @param p Point2D to be evaluated @param p1 First endpoint of line segment @param p2 Second endpoint of line segment @return Double value resulting from the edge equation calculation
150 Initializes a PDMarkedContent object with a given tag and properties, and an empty contents list. @param tag COSName representing the content's tag @param properties COSDictionary containing additional properties for the content
151 Returns the name of the Cosmetic Object Specification (COS) pattern. @return A string representing the COS pattern name
152 Returns the name of the shading type used in this context.
153 Retrieves the default value, returning its name or an empty string. @return The name of the default value as a String, or an empty String if not found or not a COSName.
154 Unchecks an item by setting its value to 'Off' and saving changes. @throws IOException if there is an error during the save operation
155 Checks if the white point coordinates (wpX, wpY, wpZ) are all equal to 1. @return true if all coordinates are 1, false otherwise
156 Calculates a color table based on the shading type and domain. @return An int array representing RGB colors for various factors @throws IOException if an error occurs during function evaluation
157 Calculates a color table based on the given domain and shading type. @return An int array representing RGB values for each factor in the domain. @throws IOException if an I/O error occurs during evaluation of the function.
158 Creates a deep copy of the initial code table and returns it as a list of byte arrays. @return List<byte[]> A deep copied version of the initial code table
159 Retrieves an object from a list by its index. @param index position of the object in the list @return COSBase object at specified index or null if not found
160 Retrieves an element from the collection at the specified position. @param index Position of the element to retrieve @return The element at the specified position in the collection
161 Returns the number of elements in the collection.
162 Returns the number of elements in the collection.
163 Returns the total number of recipients in the current context.
164 Checks if the collection of objects is empty. @return true if no objects are present, false otherwise
165 Checks if the underlying collection is empty. @return True if empty, false otherwise
166 Removes a PublicKeyRecipient from the list of recipients. @param recipient The PublicKeyRecipient to be removed @return true if the recipient was found and removed, false otherwise
167 Returns an iterator over all COSBase objects in the collection. @return An iterator of type COSBase
168 Returns an iterator over the elements in this collection. @return An iterator over the elements in this collection
169 Returns an iterator over all Public Key Recipients. @return Iterator of type PublicKeyRecipient
170 Converts an internal collection of objects into a List. @return A new List containing all elements from the internal collection
171 Converts a list of COSNames to a list of their corresponding names as strings. @return A List containing the names of each COSName in the objects list
172 Converts a list of COSString objects to a list of strings. @return List of strings extracted from COSString objects
173 Converts a java.lang.Boolean to a COSBoolean object. @param value The java.lang.Boolean to convert. @return The equivalent COSBoolean object.
174 Returns a string representation of the object's value. @return a string representation of the object's value
175 Writes a boolean value to the provided OutputStream in PDF format. @param output The stream where the PDF data will be written @throws IOException if an I/O error occurs while writing to the stream
176 Writes NULL bytes to an OutputStream. @param output the target OutputStream @throws IOException if an I/O error occurs while writing to the stream
177 Writes byte array to the output stream. @param data The byte array to be written @throws IOException if an I/O error occurs
178 Returns a set view of the mappings contained in this map. @return a set view of the map's entries
179 Checks if two entries have changed. @param oldEntry previous entry @param newEntry current entry @return true if entries are not equal, false otherwise
180 Returns the number of items in the collection. @return The total count of items
181 Retrieves an item from the collection by its unique key. @param key Unique identifier of type COSName @return The corresponding COSBase object, or null if not found
182 Returns a set view of all keys in this COSDictionary. @return a set view of the keys contained in this map
183 Returns all values from the 'items' collection. @return A collection of COSBase objects
184 Adds all key-value pairs from given dictionary to this dictionary. @param dict COSDictionary object containing items to be added
185 Checks if a specific key exists in the collection. @param name unique identifier of type COSName @return true if the key is found, false otherwise
186 Tokenizes a string into an array of strings on spaces, handling leading and trailing spaces. @param s the input string to tokenize @return an array of strings resulting from splitting the input string on spaces
187 Parses a string into an integer. @param token the string to be parsed @return the integer value of the string
188 Returns a string representation of the FunctionType. @return A string with the prefix "FunctionType" and the type of the function
189 Sets the encryption key length. Valid lengths are 40, 128, or 256. @param l the desired encryption key length @throws IllegalArgumentException if an invalid length is provided
190 Sets the starting page value. Throws an exception if the input is zero or negative. @param startPageValue The new starting page number (must be 1-based)
191 Sets the end page value. Throws exception if input is zero or negative. @param endPageValue The new end page value (must be 1-based)
192 Initializes a BruteForceParser with a COSDocument and COSParser. @param cosDocument the input document @param cosParser the document's parser
193 Initializes XrefTrailerObj with default TABLE type.
194 Resets the current and resolved xref trailer objects.
195 Constructs PDResources object from a COSDictionary. Throws exception if input dictionary is null. @param resourceDictionary A COSDictionary containing resources
196 Constructs PDResources with a COSDictionary and ResourceCache. @param resourceDictionary contains the resources, cannot be null @param resourceCache caches resources for efficient access
197 Initializes a map of mathematical and logical operators for expression evaluation.
198 Initializes a PDF AcroForm with a given PDDocument and COSDictionary. @param doc the PDF document to associate with this AcroForm @param form the COSDictionary representing the AcroForm data
199 Returns the count of trailers in the map. @return The number of trailers in the byte position to cross-reference map
200 Retrieves a COSObject from the pool using its unique key. If the key is valid and not already in the pool, creates a new object. @param key unique identifier for the COSObject @return COSObject if found or created, otherwise null
201 Parses and returns a floating point number from a given string. @param token input string representing a real number @return the parsed floating point number or NaN if parsing fails
202 Coerces a floating-point value within specified limits. @param floatValue the input floating-point number @return coerced floating-point number, or 0 if under minimum threshold
203 Calculates and returns the text direction based on textMatrix properties. @return The text direction in degrees (0, 90, 180, or 270)
204 Compares this object with another for equality based on float value. @param o the reference object with which to compare @return true if both objects have equal float values, false otherwise
205 Returns the hash code value for this object's 'value'. @return A hash code value for the object's 'value' field
206 Formats and returns a string representation of the value. If valueAsString is null, it generates a formatted string from 'value'.
207 Writes the string "null" to the provided OutputStream in ISO-8859-1 encoding, followed by a space. @param output the stream where the data will be written @throws IOException if an I/O error occurs while writing to the stream
208 Constructs a new COSIncrement object with given origin update information. @param incrementOrigin the update information to be used for initialization
209 Initializes a new instance of PDFCloneUtility with a destination PDDocument. @param dest The destination PDDocument to clone content into.
210 Initializes the DefaultResourceCache with stable cache setting. @param enableStableCache boolean to enable or disable stable caching
211 Checks if an update is needed based on the current state. @return true if update is required, false otherwise
212 Checks if a given object is present in the collection. @param base The object to search for in the collection @return True if object is found, false otherwise
213 Checks if a COSBase object is in the list of excluded objects. @param base the COSBase object to check @return true if the object is excluded, false otherwise
214 Adds a non-null COSBase object to the collection.
215 Adds a COSObject to the list of processed objects, if it's not null. @param base The COSObject to be added to the processed list.
216 Registers a TrueType font to be closed later. @param ttf the TrueTypeFont object to be registered for closing
217 Initializes an ASCII85InputStream with a given InputStream. @param is the input stream to read from
218 Initializes a CCITTFaxDecoderStream with specified parameters. @param stream input data stream @param columns number of columns in image @param type compression type (CCITT_MODIFIED_HUFFMAN_RLE, T4 or T6) @param options decoding options @param byteAligned true if bytes are aligned
219 Compares this integer object with another object for equality. @param o the object to compare with @return true if objects are equal, false otherwise
220 Returns a string representation of this COSInt object. @return a string in the format "COSInt{value}"
221 Writes the value as a string to an OutputStream in ISO-8859-1 encoding.
222 Retrieves a value from the map using a specified key. @param key the unique identifier to locate the value @return the value associated with the key, or null if not found
223 Maps a given font name to its corresponding mapped font name from ALIASES. @param fontName the input font name to be mapped @return the mapped font name, or null if no match is found in ALIASES
224 Retrieves and filters export values based on specific conditions. @return List of filtered export values as Strings
225 Checks if the object's name property is empty. @return true if name is empty, false otherwise
226 Appends a comment to the output stream, ensuring it doesn't contain newlines. @param comment The text to append; must not include '\r' or '\n' characters @throws IOException if an I/O error occurs while writing to the output stream
227 Writes a newline character to the output stream. @throws IOException if an I/O error occurs while writing to the stream
228 Converts a String to its UTF-16BE hexadecimal representation. @param text the input string @return char array of hexadecimal values in UTF-16BE format
229 Dereferences and returns the COSBase object if not already done. @return The dereferenced COSBase object or null if an error occurs.
230 Constructs COSObjectKey with object number, generation, and stream index. @param num Object number (must be non-negative) @param gen Generation number (must be non-negative) @param index Stream index
231 Generates a unique hash code based on 'numberAndGeneration' field. @return an integer hash code value for this object
232 Calculates and returns the scaling factor in X direction, accounting for rotation if any.
233 Calculates and returns the scaling factor in Y direction. @return Scaling factor as a float value
234 Initializes an ASCII85OutputStream with the given OutputStream. @param out OutputStream to write encoded data to
235 Constructs a new COSStandardOutputStream with the given OutputStream. @param out The output stream to write data to
236 Constructs a new COSStandardOutputStream with an OutputStream and initial position. @param out the output stream @param position the initial position in the stream
237 Returns a copy of the internal byte array. @return A new byte array containing all elements from the internal array
238 Writes an increment to existing PDF and updates it with new data. @throws IOException if there is a problem reading or writing files.
239 Converts byte array to an ASCII string. @return ASCII representation of the byte array
240 Checks if the original document state allows updates. @return true if updates are accepted, false otherwise
241 Converts a byte array to a string using a predefined character map.
242 Reads and returns an operator from the source data stream, skipping whitespaces and specific characters. @return String containing the read operator or an empty string if none found @throws IOException if an I/O error occurs while reading from the source data stream
243 Converts a string to bytes using a given character-to-byte mapping. @param text the input string @return byte array representation of the string
244 Checks if a given character exists in the UNI_TO_CODE map. @param character The character to check for existence in the map @return True if the character is present, false otherwise
245 Checks if a given key exists in the map. @param key The key to search for @return True if the key is found, false otherwise
246 Checks if the given font name exists in ALIASES map. @param fontName the name of the font to check @return true if the font name is an alias, false otherwise
247 Returns an unmodifiable view of the code to name mapping. @return Unmodifiable map with integer codes as keys and names as values.
248 Returns an unmodifiable map of names to their corresponding codes. @return Unmodifiable Map with String names as keys and Integer codes as values
249 Sets whether the object needs to be updated. @param flag true if update is needed, false otherwise
250 Reads and decodes a byte from an Ascii85 encoded stream. Throws IOException if data is invalid. @return the next byte in the stream or -1 if end of file is reached @throws IOException if invalid data is encountered in the Ascii85 stream
251 Closes and cleans up resources, setting ASCII to null, EOF flag to true, and buffer to null. @throws IOException if an I/O error occurs during closing
252 Writes ASCII85 encoded data to output stream. @param b the byte to write @throws IOException if an I/O error occurs
253 Flushes the output stream and writes encoded data to it, handling 'z' expansion.
254 Trims or pads input byte array to match the length of ENCRYPT_PADDING. @param password byte array to be trimmed or padded @return byte array with length equal to ENCRYPT_PADDING, filled with input data and padding if necessary
255 Closes the output stream and logs a warning if in text mode without ending it
256 Imports XMP metadata into the system from a given byte array. @param xmp byte array containing XMP metadata @throws IOException if there is an issue writing the data
257 Checks if splitting at a given page number is necessary based on the start page and split length. @param pageNumber the current page number to check for splitting @return true if splitting is needed, false otherwise
258 Sets the source region. Throws an exception as this instance is immutable. @param sourceRegion rectangle representing the source region to set
259 Sets subsampling in the X direction. Throws exception as this instance is immutable. @param ssX subsampling value for X direction @throws UnsupportedOperationException if modification attempt is made
260 Throws an exception as this instance is immutable and cannot have subsamplingY set. @param ssY the value to be set for subsamplingY, which will cause an error.
261 Sets subsampling offset X, but throws exception as this instance is immutable. @param ssOffsetX the value to set for subsampling offset X @throws UnsupportedOperationException always thrown as modification is not supported
262 Sets the subsampling offset in Y direction. Throws UnsupportedOperationException as this instance is immutable. @param ssOffsetY Subsampling offset in Y direction
263 Encodes an InputStream to JPEG2000 format. Not currently implemented.
264 Sets the upper right y-coordinate. Throws UnsupportedOperationException as it's an immutable class. @param value the new y-coordinate to be set
265 Sets the upper right x-coordinate of an object, but throws exception as it's an immutable class. @param value The new value for the upper right x-coordinate @throws UnsupportedOperationException as this is an immutable class
266 Sets the lower left y-coordinate of an object. Throws exception as this is an immutable class. @param value float representing the new y-coordinate
267 Sets the lower left X coordinate. Throws exception as this is an immutable class. @param value the new X coordinate value to be set @throws UnsupportedOperationException as this operation is not supported in an immutable class
268 Fetches the signature text. @return The signature text as a string (Not implemented yet)
269 Sets the text for the digital signature. @param signatureText the text to be used as a signature @return PDVisibleSignDesigner object with updated signature text
270 Sets the signature field value. Throws exception if a string is provided; use PDSignature object instead. @param value the signature field value to be set as a PDSignature object @throws UnsupportedOperationException if a String is passed as argument
271 Fetches the compression level from system properties or uses a default value. @return An integer representing the compression level (-1 to 9)
272 Checks if the set contains the specified object. @param o The object to be checked for presence in this set. @return True if the set contains the object, false otherwise.
273 Initializes a new FlateFilterDecoderStream from the given InputStream, skipping the zlib header. @param inputStream the source of compressed data to be decompressed @throws IOException if an I/O error occurs while reading from the InputStream
274 Closes and ends the inflater before closing the stream. @throws IOException if an I/O error occurs during closing operations
275 Sets the BufferedImage and updates related parameters for this object. @param image The BufferedImage to be set
276 Decodes a predictor row based on the specified prediction algorithm. @param predictor The type of prediction algorithm to use (1-14) @param colors Number of color components per pixel @param bitsPerComponent Bits per component @param columns Number of pixels in a row @param actline Current row data @param lastline Previous row data for certain prediction algorithms
277 Checks if a given COSObjectKey exists in the pool. @param key The COSObjectKey to check for existence @return true if the key is found, false otherwise
278 Checks if a given name exists in an inverted data structure. @param name The string to search for in the inverted data structure. @return True if the name is found, false otherwise.
279 Checks if a given code exists in the map of codes to names. @param code integer value to be checked for existence @return true if the code is found, false otherwise
280 Escapes special XML characters in the input string. @param input the original string to be escaped @return the escaped XML-safe string
281 Sets the bounding box (bbox) for a COS object. If null, removes the item; otherwise, sets it. @param bbox PDRectangle object representing the bounding box to set or remove
282 Decodes a hexadecimal string to byte array. Ignores newlines and carriage returns. @param s the hexadecimal string to decode @return decoded byte array or logs error and aborts on invalid input
283 Closes the document and associated resources, handling any IOExceptions. @throws IOException if an I/O error occurs while closing resources
284 Safely closes the document and associated I/O streams, handling exceptions. @throws IOException if there's an error during closing operations
285 Retrieves the COSDictionary object based on the function stream availability. @return COSDictionary object from function stream or a predefined dictionary if stream is null
286 Constructs a PDXObject with the given stream and subtype. @param stream input data stream @param subtype COSName defining object's type (e.g., IMAGE or FORM)
287 Overrides to return the COSStream object of this instance's stream. @return The COSStream object associated with this instance's stream
288 Retrieves metadata as a COSStream from the underlying COS object's stream. @return COSStream containing the metadata, or null if not available
289 Sets metadata for the COSStream object associated with this instance. @param metadata A COSStream containing metadata to be set
290 Compares this annotation with another object for equality. @param o the object to compare with @return true if both objects are equal, false otherwise
291 Returns a set view of the keys contained in this map. @return A set containing all keys in the map, or an empty set if the map is empty
292 Returns all values in this collection. @return A collection of values (type V)
293 Initializes BaseParser with given PDF source data. @param pdfSource random access read interface for PDF data
294 Checks if the next character in source is a digit. @return true if the next char is a digit, false otherwise @throws IOException if an I/O error occurs while reading the source
295 Sets cross-reference for a given object key at specified offset.
296 Adds a unique code and corresponding name to two maps for bi-directional lookup. @param code unique identifier @param name associated with the unique identifier
297 Checks if the next character in source is a space. @return true if the next char is a space, false otherwise @throws IOException if an I/O error occurs
298 Skips line breaks (CR, LF or CRLF). @param linebreak the character to check for a line break @return true if it's a valid line break, false otherwise @throws IOException if an I/O error occurs while reading from source
299 Checks for end of string based on specific byte patterns. @param bracesParameter input parameter to check against end of string indicators @return 0 if end of string is found, otherwise returns the input parameter
300 Checks if the character is a line ending (LF or CR). @param c the character to check @return true if it's an end of line character, false otherwise
301 Reads a string number from the input source, stopping at non-digit characters or EOF. @return StringBuilder containing the read number or an empty StringBuilder if none found @throws IOException if number is too long or error occurs while reading
302 Decodes a ByteArrayOutputStream into a String using UTF-8 or an alternative charset if decoding fails. @param buffer the ByteArrayOutputStream to decode @return the decoded String
303 Reads and validates the expected character from source, throws IOException if mismatch occurs. @param ec Expected character @throws IOException If read character does not match expected character
304 Checks if next character in source is whitespace. @return true if next char is a whitespace, false otherwise @throws IOException if unable to read from the source
305 Parses and returns the starting cross-reference (xref) of a PDF document, or -1 if not found. @return The byte offset of the first object referenced by the xref or xref stream. @throws IOException If an I/O error occurs during parsing.
306 Brute force search for the last End-of-File marker in PDF data, handling any exceptions. @return The position of the last EOF marker or Long.MAX_VALUE if not found. @throws IOException If an I/O error occurs during the search process.
307 Searches for and returns offsets of cross-reference (xref) tables in a PDF file. @return List of offsets where xref tables start, or an empty list if none found. @throws IOException if there's an issue reading from the source.
308 Returns the number of color components in the image. Throws IOException if an I/O error occurs during computation. @return Number of color components in the image
309 Searches for XRef streams in a PDF file and returns their offsets. @return List of Long values representing the offsets of XRef streams. @throws IOException if an I/O error occurs during the search process.
310 Retrieves and returns the cross-reference table. @return a map where keys are COS object keys and values are their respective long representations
311 Gets the startxref offset in a PDF file. Throws exceptions if EOF marker or startxref is missing. @return The startxref offset, or an exception if not found @throws IOException If there's an issue reading the file or required markers are missing
312 Reads from the input stream until it reaches the end of the stream or finds the 'endstream' keyword. @param out EndstreamFilterStream to write filtered content @return Calculated length of the output stream after filtering @throws IOException if an I/O error occurs while reading from source stream
313 Initializes ToUnicodeWriter with writing mode set to 0.
314 Sets a label item for a specific page in the document. @param startPage the page number to apply the label (must be >= 0) @param item the label range object to be applied on the startPage
315 Adds a Unicode character representation to the map using a CID (Character ID). @param cid unique identifier for the Unicode character (0-65535) @param text Unicode character representation as a String
316 Checks if there is no following binary data in a source stream. @return true if no binary data follows, false otherwise @throws IOException if an I/O error occurs
317 Checks if next character in source is a space or return. @return true if it's a space or return, false otherwise @throws IOException if error occurs while reading the source
318 Adds a unique XReferenceEntry to the collection if not already present. @param entry The XReferenceEntry to add, must have a unique referenced key number
319 Calculates the max bytes needed to display each column value in streamData. @return int array with three elements representing max bytes for each column
320 Initializes a pool of COSObjects with the given maximum object number. @param highestXRefObjectNumber the highest expected XRef object number
321 Fetches the first trailer dictionary in the PDF document. @return The first COSDictionary trailer or null if not found
322 Fetches the last trailer dictionary from a set of offsets, or null if no entries exist. @return Last COSDictionary trailer or null if none found
323 Retrieves object numbers contained in the resolved Xref trailer. @param objstmObjNr unique identifier for comparison @return Set of object numbers or null if no match found
324 Returns the numeric value of the first column in this object's type. @return The numeric value of the first column.
325 Fetches and returns the generation value of the referenced key. @return the generation value as a long integer
326 Returns a string representation of the FreeReference object. @return String with details about the FreeReference's key, next free object and type
327 Overrides to return the byte offset value of the second column. @return The byte offset value as a long
328 Returns the generation value of the referenced key's third column. @return The generation value as a long.
329 Returns a string representation of the object, including its key, type and byte offset.
330 Returns the numeric value of the second column from parent key. @return Numeric value of the second column in the parent key
331 Overrides to fetch the value of the third column. @return The index value from the object stream
332 Returns a string representation of this ObjectStreamEntry. @return String formatted with key, type, index, and parent key
333 Writes a specified number of bytes from a byte array to the output stream. @param b The data. @param off The start offset in the data. @param len The number of bytes to write. @throws IOException If an I/O error occurs.
334 Writes a byte to the output stream and updates position. @param b the byte to be written @throws IOException if an I/O error occurs
335 Writes an end-of-line character if not already on a new line. @throws IOException if an I/O error occurs during writing
336 Checks if compression parameters are set and enabled. @return true if compression is enabled, false otherwise
337 Adds an XReferenceEntry to the collection of entries. @param entry The XReferenceEntry object to be added
338 Writes an object reference to the OutputStream. @param output Stream where data is written @param indirectReference Key of the COSObject to be referenced @throws IOException if writing fails
339 Fetches and returns an MD5 message digest instance. Throws RuntimeException if the algorithm is not available.
340 Generates a SHA-1 message digest instance. @return MessageDigest for SHA-1 or throws RuntimeException if algorithm not available.
341 Returns a SHA-256 message digest instance, or throws a runtime exception if not available.
342 Retrieves the highest XRef object number from the pool. @return highest XRef object number in the pool
343 Returns an unmodifiable list of prepared COS object keys. @return Unmodifiable list of COSObjectKey instances
344 Overwrites the reverse mapping with a new name for a given code. @param code unique identifier @param name new name to associate with the code
345 Removes a specified region and its area from data structures. @param regionName the name of the region to be removed
346 Sets the maximum number of decimal places to display in a numeric value. @param fractionDigitsNumber the desired number of decimal places
347 Initializes a new content stream for the given document, output stream and resources. @param document the PDF document to be processed @param outputStream where the content will be written to @param resources additional resources required for processing
348 Retrieves the vertical displacement vector Y based on a given code. @param code unique identifier to map to CID and fetch corresponding vertical displacement Y @return Float representing vertical displacement Y or default value if not found
349 Returns input value if not null, otherwise returns a default value. @param standardValue the input Float to check for null @return the input value or defaultValue if input is null
350 Zooms the image by a given percentage and updates its dimensions.
351 Returns the width of the image. @return The width of the image as a floating point number
352 Returns the height of an image. @return The height of the image as a float value.
353 Adjusts the design for rotation based on current rotation angle (90, 180, or 270 degrees). @return Modified PDVisibleSignDesigner object after adjustment.
354 Creates and returns an AffineTransform object based on provided data. @return AffineTransform object with specified parameters
355 Encodes a given string into bytes using UTF-8 encoding. @param text the input string to encode @return byte array representation of the encoded string @throws IOException if an I/O error occurs during encoding
356 Fetches the Unicode character name for a given code point. @param codePoint The integer representing a Unicode character @return String representation of the character's name or ".notdef" if not found
357 Applies GSUB rules to a word, converts it to glyph IDs, and writes them to an output stream. @param gsubWorker the worker applying GSUB transformations @param out the ByteArrayOutputStream to write glyph IDs @param font the type 0 font for encoding @param word the input string @return List of transformed glyph IDs
358 Initializes a PDDocument object with COSDocument and sets permissions. @param doc the COSDocument to initialize from @param source the RandomAccessRead source of the document @param permission the AccessPermission for the document
359 Constructs an FDFDocument object from a COSDocument and RandomAccessRead source. @param doc the underlying COSDocument @param source the source of random access read data for this document
360 Converts this object into an array and returns it. @return An Object array containing all elements of this object
361 Returns the index of the first occurrence of an object in this list. @param o The object to search for @return Index of the object, or -1 if not found
362 Overrides Object's equals() to compare based on 'actual'. @param o object to compare with this instance @return true if 'o' is equal to 'actual', false otherwise
363 Overrides Object's hashCode to provide custom hashing logic. @return the hash code value for this object
364 Returns the index of the last occurrence of an object in the list. @param o The object to search for @return The index; -1 if not found
365 Returns a list iterator over the elements in this list (in proper sequence). @return a list iterator over the elements in this list
366 Returns a list iterator over the elements in this collection from the given index. @param index starting position for iteration @return a ListIterator over the elements in this collection
367 Returns a view of the portion of this list between 'fromIndex' and 'toIndex'. @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive) @return sublist within the specified range
368 Checks if a given value exists in this map's values. @param value The object to search for within the map's values @return true if the value is found, false otherwise
369 Returns an unmodifiable set of the map's entries. @return Unmodifiable set of map entries
370 Returns an unmodifiable set of all names in the ALIASES map. @return Unmodifiable set of names from ALIASES map
371 Overrides default toString() to provide a string representation of 'actuals'. @return A string representation of 'actuals'
372 Converts COSBase object to specified type using reflection. @param base the COSBase object to be converted @return an object of the specified type, or throws IOException if conversion fails @throws IOException if constructor not found or instantiation fails
373 Generates an alphabetical label based on the input number. @param num Input integer to convert into a label @return Alphabetical label as a string
374 Returns the total number of pages in the label collection.
375 Fetches the page label range starting from the given page index. @param startPage The index of the starting page @return PDPageLabelRange object or null if not found
376 Returns a sorted set of page indices from the labels map. @return NavigableSet containing unique page indices in ascending order
377 Returns a copy of the dash array used in graphical representations. @return A float array representing the dash pattern
378 Constructs a PDColor object with given components and color space. @param components Array of color components. @param colorSpace The color space for the components.
379 Returns a copy of the color components based on the color space. @return float[] representing color components
380 Initializes a CoordinateColorPair object with given Point2D and color array. @param p Point2D representing coordinates @param c float[] representing RGB or CMYK colors
381 Returns a string representation of FunctionType2 object. @return A formatted string with C0, C1 and N values
382 Calculates and returns the minimum and maximum x and y coordinates of a shape's corners. @return int array [minX, maxX, minY, maxY] representing the boundaries
383 Pops and returns the top number from the stack. @return The popped Number object or null if stack is empty.
384 Removes and returns the integer at the top of the stack. @return The popped integer from the stack
385 Pops and returns the top element of the stack as a float value. @return The popped element converted to float or throws ClassCastException if not convertible.
386 Adds a boolean value to the instructions list. @param value boolean value to be added
387 Initializes an ExecutionContext with a set of operators. @param operatorSet The set of operators to be used in the context.
388 Returns a list of compiled patterns for list item expressions. Initializes the list if null. @return A List<Pattern> containing compiled regex patterns for list items
389 Converts an Object array to a string representation with elements separated by commas. @param array the Object array to convert @return a string representation of the array
390 Converts a float array to a string representation. @param array the input float array @return a string of the form "[a, b, c]", where a, b, c are the elements of the array
391 Adds a new TextPosition to the contents of an object. @param text The TextPosition object to be added
392 Adds a marked content to the list of contents in the current object. @param markedContent The PDMarkedContent object to be added
393 Adds a PDXObject to the contents of this object. @param xobject the PDXObject to be added
394 Sets print permission. If not in read-only mode, allows or denies printing based on the input parameter. @param allowPrinting true to allow printing, false to deny
395 Sets permission to modify based on the input parameter. Ignores request if in read-only mode. @param allowModifications true to enable modifications, false otherwise
396 Sets whether content extraction is allowed. If not read-only, updates the permission bit accordingly. @param allowExtraction boolean flag to enable or disable content extraction
397 Sets permission to modify annotations based on input. Ignores request if in read-only mode. @param allowAnnotationModification true to enable, false to disable modification of annotations
398 Sets permission for filling in the form based on provided flag. @param allowFillingInForm true to enable, false to disable form filling
399 Sets the permission for accessibility data extraction. If not read-only, updates the permission bit.
400 Sets the document assembly permission for this object. If not read-only, updates permission bit. @param allowAssembly true to enable document assembly, false otherwise
401 Sets the ability to print faithfully. Ignores operation if in read-only mode. @param canPrintFaithful true to enable faithful printing, false otherwise
402 Checks and returns if print permission is enabled. @return true if print permission is on, false otherwise
403 Checks if modification permission is granted. @return true if modification permission is enabled, false otherwise
404 Checks if content extraction is permitted based on permission bits. @return true if content extraction is allowed, false otherwise
405 Checks if the user has permission to modify annotations. @return true if permission is granted, false otherwise
406 Checks if user has permission to fill in form. @return true if permission bit is on, false otherwise
407 Checks if extraction permission is enabled for accessibility. @return true if enabled, false otherwise
408 Checks if document assembly permission is granted. @return true if user has permission, false otherwise
409 Checks and returns if faithful print permission is enabled. @return true if faithful print permission is on, false otherwise
410 Retrieves a private key from keystore. Throws exception if key is not found or not recoverable. @return PrivateKey object if found and recoverable, throws KeyStoreException otherwise
411 Returns a secure random number generator. If a custom one is provided, it returns that. Otherwise, creates and returns a new one.
412 Sets the encryption key and initializes the salt array. @param key byte array containing the key (1 to 32 bytes long).
413 Writes encrypted byte to OutputStream using a custom algorithm. @param aByte the byte to be written and encrypted @param output the OutputStream where the encrypted byte is sent @throws IOException if an I/O error occurs while writing to the stream
414 Combines diacritics in a string using Unicode or custom mapping.
415 Checks if a Unicode code point is prohibited for certain uses. @param codepoint The Unicode code point to check @return True if the code point is prohibited, false otherwise
416 Computes and returns a version number based on key length and protection policy. @return an integer representing the computed version number
417 Fetches and ensures a singleton instance of Provider. @return Singleton instance of Provider, initialized with BouncyCastleProvider if not already done.
418 Extracts and concatenates text values from child nodes of an XML element. @param node the XML element to extract text values from @return a string containing all text values of child nodes, or empty if none
419 Writes a given string to the output stream. @param text the string to be written @throws IOException if an I/O error occurs
420 Fetches a predefined character mapping (CMap) by name from cache or parses it if not found. @param cMapName the name of the CMap to fetch/parse @return the requested predefined CMap object @throws IOException if there is an error while parsing the CMap
421 Parses a CMap from a RandomAccessRead object. @param randomAccessRead input data to parse @return parsed CMap or null if input is null @throws IOException if an I/O error occurs
422 Returns a set of PostScript names based on the input name, including original and modified versions. @param postScriptName The initial PostScript name @return A set containing the original and hyphen-removed PostScript names
423 Calculates the line between two points and returns a set of those points.
424 Calculates and returns the number of unique points in a given array, rounded to 3 decimal places. @param p an array of Point2D objects representing coordinates @return the count of unique points after rounding to 3 decimal places
425 Adds a font to the cache using provided metadata and font object. @param info Metadata about the font (e.g., name, style) @param font Font object to be added to the cache
426 Retrieves a FontBoxFont object from the cache based on provided FontInfo. @param info font information used as a key in the cache @return FontBoxFont object if found, or null otherwise
427 Adds a substitute value to the system for a given match string. @param match The string to be replaced in text. @param replace The replacement string.
428 Retrieves font information based on given format and PostScript name. @param format the desired font format @param postScriptName unique identifier for the font @return FontInfo object or null if not found in the specified format
429 Fetches a list of substitute strings based on the given PostScript name. @param postScriptName The original PostScript name to find substitutes for @return A list of substitute strings, or an empty list if none found
430 Retrieves name associated with a given code from a map. @param code unique identifier @return Name string or ".notdef" if not found
431 Fetches Type2 character string for a given CID. @param cid Character identifier @return Type2CharString object or null if not found @throws IOException if an I/O error occurs
432 Converts a given code to its corresponding CID using the parent's character map. @param code integer value representing a specific code @return integer value of the corresponding CID, or an error code if not found
433 Converts color components to an RGB integer value. @return int representing the RGB value of the color components @throws IOException if conversion fails
434 Removes backdrop from an image using RGB values and alpha factor. @param groupRGB color value of the group @param backdropRGB color value of the backdrop @param shift bitwise shift amount for color extraction @param alphaFactor blending factor between group and backdrop colors @return adjusted RGB color value after backdrop removal
435 Extracts a portion of bytes from an array based on start and length. @return A new byte array containing the extracted bytes
436 Returns the Adobe Glyph List used for text rendering. @return A GlyphList object representing the Adobe Glyph List
437 Extracts and organizes CMAP subtables for different platform & encoding IDs. @throws IOException if there's an issue with reading the TTF file
438 Checks if embedding of TrueTypeFont is permitted based on fsType. @param ttf the TrueTypeFont to be checked @return true if embedding is allowed, otherwise false
439 Checks if subsetting is permitted for a given TrueTypeFont. @param ttf the TrueTypeFont to check @return false if subsetting is not allowed, otherwise true @throws IOException if an I/O error occurs
440 Converts a given name to its Unicode representation if available. @param name the input string to convert @return Unicode representation or null if not found/applicable
441 Creates a PDColor object with specified color components, pattern name, and color space. @param components float array representing color components @param patternName unique identifier for the pattern @param colorSpace color space in which the color lies
442 Converts a WritableRaster and ColorSpace into a BufferedImage. @param raster the pixel data to use for the image @param awtColorSpace the color space of the image @return BufferedImage representation of the input data
443 Converts a raster image to an RGB BufferedImage using the provided ColorSpace. Optimized for performance. @param raster The image data in writable raster format @param colorSpace The color space of the original image @return A BufferedImage with TYPE_INT_RGB representation of the input raster and color space
444 Checks if the given ICC profile is sRGB by examining its device model. @param profile the ICC profile to check @return true if it's an sRGB profile, false otherwise
445 Returns the type of color space based on ICC profile and alternate color space. @return ColorSpace type constant (TYPE_GRAY, TYPE_RGB, TYPE_CMYK) or -1 if invalid
446 Initializes PredictorEncoder with document and image, sets up data structures for encoding. @param document PDF document to encode @param image BufferedImage to be encoded
447 Scales a BufferedImage to the specified dimensions using the given interpolation type. @param image the original BufferedImage @param width the desired width of the scaled image @param height the desired height of the scaled image @param type the image type for the new BufferedImage @param interpolate whether to apply interpolation during scaling @return a scaled BufferedImage with specified dimensions and properties
448 Overrides to return this object's underlying COS dictionary. @return The COS Dictionary representing this object.
449 Updates the corner colors of an object with provided 2D float array. @param color A 2D float array representing RGB color values for corners
450 Returns the intersected area of all clipping paths, caching and simplifying them for future use. @return Area object representing intersection of all clipping paths
451 Constructs a new TextAttribute with the given name. @param name unique identifier or description of the text attribute
452 Generates a unique hash code based on the dictionary object in this class. @return A 32-bit integer representing the hash code of the dictionary object.
453 Returns an AffineTransform instance for translating coordinates. @return AffineTransform object for shifting coordinates based on bounding box minimums
454 Computes parameters for polygon segment. Returns number of curls and adjusts input array with angle and error per curl. @param advInterm distance between intermediate curls, advCorner corner advance, k, r constants, length segment length, array to store results @return Number of curls or -1 if length is 0
455 Flattens an ellipse into an array of Point2D.Double objects. @param left, bottom, right, top coordinates defining the ellipse's bounding box @return Array of Point2D.Double objects representing flattened ellipse points
456 Checks if a GeneralPath shape is rectangular. Supports only SEG_MOVETO and SEG_LINETO segments. @param path the GeneralPath to check @return true if the shape is rectangular, false otherwise
457 Returns the height of the template. @return Float value representing the height of the template
458 Sets X and Y axis coordinates for PDVisibleSignDesigner. @param x the new X-coordinate @param y the new Y-coordinate @return current instance of PDVisibleSignDesigner for method chaining
459 Transforms this object using the provided AffineTransform and returns this object for method chaining. @param affineTransform an object that transforms 2D coordinates according to a matrix @return the current instance of PDVisibleSignDesigner after transformation
460 Throws exception if the provided PDOutlineItem has any siblings. @param node PDOutlineItem to be checked for siblings @throws IllegalArgumentException if node has siblings
461 Returns an iterable collection of child outline items. @return Iterable object containing PDOutlineItem objects
462 Sets rendering hints to improve graphics quality and performance.
463 Adjusts the clip of a GeneralPath based on transformations. @param linePath the path to adjust @return adjusted clipped path or original if no adjustment needed
464 Calculates optimal subsampling for an image transformation. @param pdImage the original PDImage object @param at the AffineTransform object representing the transformation @return the optimal subsampling value as an integer
465 Rounds up a double to the nearest integer with 5 decimal places precision. @param num The number to be rounded up. @return The ceiling value of the input as an integer.
466 Returns the x-coordinate rotation based on the given rotation angle. @param rotation The angle of rotation (0, 90, 180, or 270 degrees) @return The corresponding x-coordinate rotation value
467 Calculates the y-coordinate of lower left rotation based on given angle. @param rotation Angle of rotation in degrees (0, 90, 180, or 270) @return Corresponding y-coordinate for lower left rotation
468 Calculates the width based on rotation angle. @param rotation in degrees (90 or 270 for vertical, others for horizontal) @return absolute difference between end coordinates and translation values
469 Writes Unicode characters to an output stream. @param text TextPosition object containing the Unicode character to be written @throws IOException if there is a problem writing to the output stream
470 Returns a string representation of this object in Unicode format. Overrides Object's toString method. @return A string representing the object in Unicode format
471 Retrieves formatted text for a specified region. @param regionName name of the region @return Formatted text string for the region or null if not found
472 Starts the article writing process. Writes the starting content based on LTR (Left-to-Right) direction. @param isLTR boolean indicating if text direction is Left-to-Right or not @throws IOException in case of I/O errors during writing
473 Ends the current article by writing its closing tag to the output stream. @throws IOException if an I/O error occurs while writing to the output stream
474 Writes a line separator to the output stream. @throws IOException if an I/O error occurs while writing
475 Writes a word separator to the output stream. @throws IOException if an I/O error occurs while writing
476 Writes the start of a paragraph to the output, closing any open paragraph first if necessary. @throws IOException if an I/O error occurs while writing to the output stream
477 Writes the start of the page to the output stream. @throws IOException if an I/O error occurs while writing
478 Writes the page end content to the output stream. @throws IOException if an I/O error occurs during writing
479 Handles direction of text for mixed LTR and RTL languages using Bidi algorithm. @param word input string to process @return processed string with correct directionality
480 Parses a bidi file and initializes the MIRRORING_CHAR_MAP. @param inputStream Input stream of the bidi file @throws IOException if an I/O error occurs
481 Returns visually ordered Unicode string. Reverses if RTL characters are present (excluding single code-point)
482 Processes a TextPosition within the regionArea and updates charactersByArticle if it contains the text position.
483 Checks if the Unicode character is a diacritic mark. @return true if it's a non-spacing, modifier symbol or letter, false otherwise
484 Updates the TimeZone ID based on its offset from GMT. @param tz the TimeZone object to update
485 Converts a byte to its hexadecimal string representation. @param b the input byte @return the hexadecimal string representation of the byte
486 Converts a byte array to its hexadecimal string representation. @param bytes the input byte array @return the hexadecimal string representation of the byte array
487 Converts a single byte to its hexadecimal representation. @param b the input byte @return a two-element byte array containing the high and low nibbles of the input byte in hexadecimal form
488 Converts a byte array to its ASCII representation. @param bytes input byte array @return new byte array with ASCII representation of input bytes
489 Writes a byte to an OutputStream in hexadecimal format. @param b the byte to be written @param output the OutputStream where the byte is written @throws IOException if an I/O error occurs while writing to the stream
490 Decodes a given Base64 encoded string into a byte array. @param base64Value The input Base64 encoded string with spaces removed @return A decoded byte array from the input Base64 string
491 Initializes a Matrix object from an AffineTransform. @param at the AffineTransform to be converted into a Matrix
492 Transforms a Point2D object using a given set of coefficients. @param point the Point2D object to be transformed
493 Formats a float value into an ASCII buffer. @param value the float to format @param maxFractionDigits maximum number of digits after decimal point @param asciiBuffer output buffer for the formatted string @return length of the formatted string, or -1 if input is invalid
494 Retrieves the PDFBox library version from properties file. @return Version string or null if unable to retrieve
495 Parses an XML document from the InputStream, with namespace awareness controlled by nsAware. @param is InputStream containing XML data @param nsAware boolean flag to enable/disable namespace awareness @return Document object representing the parsed XML document @throws IOException if parsing fails or an external entity is encountered
496 Finds and returns a value associated with the given byte array in a trie structure. @param bytes input byte array to search for in the trie @return The value of type T if found, otherwise null
497 Constructs a new COSBoolean with the given boolean value. @param aValue the boolean value to be assigned to this COSBoolean object
498 Constructs a new COSName with the given string value. @param aName the name to be assigned to the new COSName object
499 Limits instantiation of COSNull class to one instance using Singleton pattern.
500 Initializes a COSString object with given bytes and hex encoding flag. @param bytes byte array to be stored in the object @param forceHex determines if hex encoding should be forced
501 Initializes a new instance of COSDictionary and sets up its update state.
502 Constructs a COSObject with the given base object. @param object the underlying base object for this COSObject
503 Initializes a COSObject with the given base object and parser. @param object the base object to initialize with @param parser the ICOSParser to use for parsing the object
504 Initializes a COSObject with a given key and parser. @param key unique object identifier @param parser instance of ICOSParser for processing the object
505 Constructs DecodeOptions with given dimensions. @param x X-coordinate of the rectangle @param y Y-coordinate of the rectangle @param width Width of the rectangle @param height Height of the rectangle
506 Initializes a new Free XReference object with the given COSObjectKey and next free object number. @param key unique identifier for the reference @param nextFreeObject number of the next free object in sequence
507 Initializes ObjectStreamXReference with provided parameters. @param objectStreamIndex index of the object stream @param key unique object identifier @param object the COSBase object to reference @param parentKey unique identifier of the parent object
508 Initializes DefaultResourceCacheCreate with default settings (enabled).
509 Constructs a PDTypedDictionaryWrapper object from a COSDictionary. @param dictionary the input COSDictionary to wrap
510 Constructor to initialize PDAttributeObject with COSDictionary. @param dictionary contains attribute data in key-value pairs
511 Initializes PDUserProperty with a COSDictionary and a PDUserAttributeObject. @param dictionary contains data for the property @param userAttributeObject provides additional user attribute information
512 Constructs an outline node from a COSDictionary. @param dict the dictionary containing outline node data
513 Constructs a PDTransition object from a COSDictionary. @param dictionary the source data for the transition
514 Constructs a PDDestinationNameTreeNode object from a given COSDictionary. @param dic The input dictionary to create the node
515 Initializes a new PDEmbeddedFilesNameTreeNode with the given COSDictionary. @param dic A COSDictionary containing necessary data for initialization.
516 Constructs a PDJavascriptNameTreeNode from a given COSDictionary. @param dic the input dictionary to construct the node
517 Initializes a PDStructureElementNameTreeNode with a given COSDictionary. @param dic a dictionary containing structure element data
518 Creates and returns a new child node in the number tree. @param dic The dictionary to be used for creating the child node @return A new PDNumberTreeNode object
519 Constructs PDMetadata with a given COSStream. @param str input stream containing metadata information
520 Initializes a PDObjectStream from a given COSStream. @param str the input Cos Stream to initialize this object stream
521 Constructs a PDEmbeddedFile object from a given COSStream. @param str the input stream containing embedded file data
522 Initializes a PDFunction object from a COSBase instance. @param function can be a COSStream or a COSDictionary
523 Initializes a PDXObject with the provided COSStream and subtype. @param stream input data stream @param subtype specifies the type of XObject (e.g., IMAGE, FORM)
524 Initializes PDSimpleFileSpecification object with a given file name. @param fileName The name of the file as a COSString object
525 Constructs a PDStructureElement from a COSDictionary. @param dic the dictionary containing structure element data
526 Constructs PDStructureTreeRoot from COSDictionary. @param dic COSDictionary containing structure tree data
527 Initializes StandardDecryptionMaterial with the provided password. @param pwd the decryption password to be set
528 Constructs an instance of PublicKeyProtectionPolicy.
529 Initializes a StandardProtectionPolicy object with owner and user passwords, and access permissions. @param ownerPassword password for the owner @param userPassword password for standard users @param permissions specifies allowed actions (AccessPermission)
530 Initializes a new instance of the SecurityHandler class.
531 Constructs an FDFAnnotationCaret object from a COSDictionary. @param a The COSDictionary to construct the object from.
532 Constructs an FDFAnnotationCircle from a COSDictionary. @param a the COSDictionary containing the data for the circle
533 Constructs an FDFAnnotationFileAttachment from a COSDictionary. @param a COSDictionary containing file attachment data
534 Constructor for creating an FDFAnnotationFreeText object from a COSDictionary. @param a The COSDictionary to create the object from.
535 Constructor for FDFAnnotationInk that initializes with COSDictionary. @param a The COSDictionary used to initialize the object.
536 Constructs an FDFAnnotationLine from a COSDictionary. @param a the COSDictionary to construct the line from
537 Constructs an FDFAnnotationLink from a COSDictionary. @param a The COSDictionary to construct the link from.
538 Constructs an FDFAnnotationPolygon from a COSDictionary. @param a the input COSDictionary containing polygon data
539 Constructs an FDFAnnotationPolyline from a COSDictionary. @param a The COSDictionary to construct this object from
540 Constructs an FDFAnnotationSound object from a COSDictionary. @param a the COSDictionary containing sound data
541 Constructs an FDFAnnotationSquare from a COSDictionary. @param a the COSDictionary containing data for the square annotation
542 Constructs an FDFAnnotationStamp from a COSDictionary. @param a The COSDictionary containing data to initialize the object
543 Constructs an FDFAnnotationText object from a COSDictionary. @param a The COSDictionary containing annotation text data.
544 Constructs an FDFAnnotationTextMarkup object from a COSDictionary. @param a The COSDictionary containing the data for the text markup annotation.
545 Extracts and returns the PANOSE classification from a byte array. @return PDPanoseClassification object containing the extracted data
546 Returns a Composite instance based on blend mode and alpha value. @param blendMode the blending mode to use (cannot be null) @param constantAlpha the constant alpha value (clamped between 0 and 1)
547 Fetches or creates a transparency group attribute object for the PDF. @return Transparency group attributes, may be newly created or null if not available
548 Constructs a shading pattern from the given resource dictionary. @param resourceDictionary COSDictionary containing shading pattern resources
549 Initializes PDTilingPattern with a COSDictionary and a ResourceCache. @param dictionary contains tiling pattern data @param resourceCache stores reusable resources for efficiency
550 Constructs a PDShadingType1 object from a COSDictionary. @param shadingDictionary dictionary containing shading information
551 Constructs a Type 2 shading object from a given COS dictionary. @param shadingDictionary contains the shading type and parameters
552 Constructs an axial shading paint object from a PDShadingType2 and a transformation matrix. @param shadingType2 the shading type to be used for painting @param matrix the transformation matrix to apply during painting
553 Constructs RadialShadingPaint with PDShadingType3 shading and transformation matrix. @param shading the shading type for radial gradient @param matrix the transformation to be applied to the shading
554 Constructs a Type1ShadingPaint object from a PDShadingType1 and a transformation matrix. @param shading the PDShadingType1 to be used for painting @param matrix the transformation matrix to apply during painting
555 Constructor for Type4ShadingPaint with shading and transformation matrix. @param shading PDShadingType4 object containing shading information @param matrix Matrix object for transformations
556 Initializes Type 5 Shading Paint with given shading and transformation matrix. @param shading PDShadingType5 object defining the shading characteristics @param matrix Matrix object for transforming the shading
557 Constructs Type6ShadingPaint object with given PDShadingType6 and transformation matrix. @param shading the PDShadingType6 object to create paint from @param matrix the transformation matrix for the paint
558 Initializes Type7ShadingPaint with PDShadingType7 and transformation matrix. @param shading - the PDShadingType7 object to be used for painting @param matrix - transformation matrix to apply during painting operations
559 Constructs an extended graphics state from a COSDictionary. @param dictionary the source of graphics state parameters
560 Constructs a PDSoftMask from a COSDictionary with default settings. @param dictionary contains soft mask properties
561 Constructor to initialize PlainText with a string value, splitting it into paragraphs. @param textValue The input string containing multiple paragraphs separated by line breaks.
562 Constructs a PDActionEmbeddedGoTo object from a COSDictionary. @param a COSDictionary containing the embedded go-to action data
563 Constructs a PDActionGoTo object from a COSDictionary. @param a the COSDictionary containing action data
564 Initializes a new instance of PDActionHide with a specified COSDictionary. @param a the COSDictionary used to initialize the object
565 Constructs a new PDActionImportData object from a COSDictionary. @param a the COSDictionary containing data for initialization
566 Constructs a PDActionJavaScript object from a COSDictionary. @param a A COSDictionary containing JavaScript action details
567 Initializes a PDActionLaunch object with a COSDictionary. @param a COSDictionary containing action data
568 Constructs a PDActionMovie object from a COSDictionary. @param a a COSDictionary containing the data to construct the object
569 Constructs a named action from a COSDictionary. @param a COSDictionary containing the action data
570 Initializes a remote go to action with a given dictionary. @param a the COSDictionary containing action information
571 Constructs a PDActionResetForm object from a COSDictionary. @param a The COSDictionary containing the form reset action data
572 Constructs a PDActionSound object from a COSDictionary. @param a COSDictionary containing sound action data
573 Constructs a PDActionSubmitForm with the given COSDictionary. @param a the COSDictionary containing form submission data
574 Initializes a new PDActionThread with a COSDictionary. @param a The COSDictionary used to initialize the thread
575 Constructs a PDActionURI instance from COSDictionary. @param a COSDictionary containing URI action data
576 Initializes a PDF visible signature builder with a new PDF template structure.
577 Initializes a named destination with the provided COSString. @param dest the COSString representing the named destination
578 Constructs a PDNamedDestination object with the given COSName. @param dest The COSName representing the destination
579 Default constructor for PDNamedDestination. Doesn't perform any actions.
580 Constructs a page destination from a given COSArray. @param arr a COSArray representing the page destination.
581 Constructs a non-terminal field in an AcroForm. @param acroForm the containing AcroForm object @param field the COSDictionary representing this field @param parent the parent of this field in the form hierarchy
582 Constructs a non-terminal field in an AcroForm. @param acroForm the parent AcroForm @param field the COS dictionary representing this field @param parent the parent non-terminal field (if any)
583 Initializes PDF Rectlinear Measure Dictionary from a COS Dictionary. @param dictionary input COS Dictionary containing measure data
584 Creates and returns an exact copy of this Matrix object. @return A deep copy of the current Matrix instance
585 Returns a scaled instance of Matrix with given scale factors. @param x Horizontal scaling factor @param y Vertical scaling factor @return A new Matrix object scaled by the provided factors
586 Returns a translation matrix instance based on given coordinates. @param x translation value along the X-axis @param y translation value along the Y-axis @return Matrix object representing the translation transformation
587 Returns a rotation matrix instance for given angle and translation. @param theta rotation angle in radians @param tx x-axis translation @param ty y-axis translation @return Matrix object representing the rotation transformation
588 Transforms a 2D vector using a given matrix transformation. @param vector the input Vector to be transformed @return a new Vector after applying transformation
589 Scales the vector by given factor. @param sxy scaling factor @return a new scaled Vector object
590 Initializes the MacExpertEncoding map with predefined values.
591 Initializes MacRomanEncoding with predefined character mappings.
592 Initializes the standard encoding table by populating it with character codes and names.
593 Populates SymbolEncoding with predefined symbol-code pairs.
594 Initializes an instance of Type1Encoding.
595 Populates encoding with character codes and names from provided FontMetrics. @param fontMetrics object containing character metrics to be added to the encoding
596 Initializes WinAnsiEncoding by populating it with characters and their codes, and assigning bullet character to unused codes greater than 40.
597 Initializes the Zapf Dingbats encoding table.
598 Returns a field tree representation of the current document. @return PDFieldTree object representing the document's fields
599 Fetches an object from a list by its index. @param index position of the object in the list @return Object at the specified index, or null if not found
600 Returns the number of objects in the collection. @return The count of objects in the collection
601 Fetches a specific revision number by its index. @param index position of the desired revision number @return the revision number at the specified index
602 Parses PNG chunks from byte data into a state object. @param imageData the raw PNG image data as bytes @return PNGConverterState if parsing is successful, otherwise null
603 Returns the encoding instance based on the provided COSName. @param name a constant representing an encoding type @return Encoding object or null if the encoding is not supported
604 Creates a soft mask from the given COSBase and ResourceCache. @param dictionary COSBase object that contains soft mask data @param resourceCache cache for storing resources @return PDSoftMask object or null if creation fails
605 Returns the index of the first selected widget or -1 if none are selected.
606 Adds a new source file to the system. @param source Path of the source file @throws FileNotFoundException if the file does not exist
607 Parses and sets the trailer object in PDF, handling common deviations from the standard. @return true if successful, false otherwise @throws IOException for input/output errors
608 Retrieves an object from the pool using its unique key. @param key Unique identifier for the object in the pool @return The COSBase object corresponding to the key, or null if not found
609 Executes operations from the instruction set in the given context. @param context execution environment with stack and operators
610 Fetches and returns the text line matrix from the current graphics state.
611 Sets the text line matrix for graphics state. @param value Matrix object to be used as the new text line matrix
612 Returns the text matrix of the current graphics state. @return The text matrix as a Matrix object.
613 Sets the text matrix for the graphics state. @param value the new Matrix to be used as the text matrix
614 Transforms the input width based on the current transformation matrix. @param width The original width to be transformed @return The transformed width as a float value
615 Overrides to fetch and return the current non-stroking color from the graphics state context.
616 Sets the non-stroking color in the graphics state context. @param color PDColor object to be set as the new non-stroking color
617 Fetches and returns the non-stroking color space from the current graphics state.
618 Overrides to retrieve current stroking color from graphics state context. @return Current stroking color in use by the graphics state context
619 Sets the stroking color in the graphics state context. @param color PDColor object to be used as the new stroking color
620 Retrieves the current stroking color space from the graphics state context. @return The PDColorSpace object representing the stroking color space
621 Creates an input stream for raw data. Throws exceptions if not in a readable state. @return InputStream object for reading the raw data @throws IOException if data has not been written to the stream before this call @throws IllegalStateException if there is an open writer to the stream
622 Finds an ImageReader for the specified format. Throws exception if not found. @param formatName name of the image format @param errorCause cause of the potential failure @return ImageReader object or throws MissingImageReaderException if not found
623 Finds a raster image reader for the given format. @param formatName name of the image format @param errorCause description of the error cause @return ImageReader that can read raster images or throws exception if not found
624 Retrieves an Operator object based on the input string. @param operator String representation of the operator @return Operator object corresponding to the input string, or null if not found
625 Returns a string representation of the COSArrayList object.
626 Checks if edge AB is a line in the quadrilateral defined by points A, B, C, D. @param ctl array of 4 Point2D objects representing vertices of a quadrilateral @return true if edge AB is a line, false otherwise
627 Returns the x-coordinate of the lower left corner of a rectangle. @return The floating point value representing the x-coordinate
628 Returns the lower left y-coordinate from a rectangular array. @return The lower left y-coordinate as a float value
629 Returns the x-coordinate of the upper right corner of a rectangle. @return The x-coordinate as a float value
630 Returns the y-coordinate of the upper right corner of a rectangle. @return Float value representing the y-coordinate
631 Retrieves font size from a specific setting in the font object. @return float value representing the font size
632 Retrieves the first floating point value from a collection of values. @return The first value in the collection as a float, or 0 if not found or not a number
633 Returns the float value at index 1 from a list of COSNumbers. @return Float value at index 1 or NaN if not found or not a number
634 Retrieves and returns the float value at index 2 from values collection.
635 Returns the float value of the first element in values collection. @return Float value of the first COSNumber object in values collection
636 Returns the float value at index 1 from values collection. @return Float value at index 1 in values or throws ClassCastException if not a COSNumber
637 Fetches and returns the Z value from a collection of values as a float.
638 Retrieves an integer value from a collection at a given index. @param index position in the collection @param defaultValue fallback value if index is out of bounds or not an integer @return integer value at index, or defaultValue if conditions are not met
639 Fetches the name at a given index, or returns defaultValue if not found or invalid. @param index position to fetch from @param defaultValue fallback value if index is out of bounds or object is not COSName @return String with the name or defaultValue
640 Returns the index of a given object in the collection, or -1 if not found. @param object The COSBase object to search for @return Index of object in collection, or -1 if not found
641 Fetches and returns a list of filters from the COSBase object. @return List of Filter objects or an empty list if no valid filters found @throws IOException if the COSArray contains invalid types for filters
642 Evaluates an input array using exponential interpolation and clips the result to a range. @param input Array of floats, where input[0] is used for exponentiation. @return Float array resulting from the evaluation and clipping process. @throws IOException if there's an issue with input/output operations.
643 Retrieves a list of filter names from the stream's filters. @return List of COSNames representing filter types, or an empty list if none.
644 Retrieves file filters from the stream as a list of strings. @return List containing filter names or empty if none found
645 Writes a boolean value to an OutputStream in PDF format. @param output the target stream for writing @param cosBoolean the COSBoolean object containing the boolean value to write
646 Writes ASCII encoded bytes of given text to an output stream. @param text the string to be written @throws IOException if an I/O error occurs
647 Notifies change if entry has been modified. @param oldEntry previous state of the object @param newEntry current state of the object
648 Returns the number of elements in the map. @return The number of elements (key-value pairs) in the map
649 Retrieves a COSObject by its key. @param key the unique identifier for the COSObject @return COSObject if found, otherwise null
650 Fetches an item using either of the provided keys. @param firstKey primary key to search for the item @param secondKey secondary key used if first key fails @return COSBase object or null if not found with either key
651 Returns the number of recipients in a dictionary object.
652 Retrieves recipient string at a given index from the recipients array in the dictionary. @param i index of the recipient string to retrieve @return COSString object at the specified index or null if not found
653 Retrieves the direction from a COS object, defaults to 0 if not found. @return COSBase object representing the direction or default value (COSInteger.ZERO) if not found
654 Retrieves and sorts unique metadata keys. @return Set of sorted metadata keys as Strings
655 Retrieves a list of attribute names excluding the 'O' attribute. @return List containing names of attributes as Strings
656 Adds specific trailer information to the stream from a dictionary. @param trailerDict dictionary containing trailer data
657 Constructs a new COSDictionary by copying another's elements. @param dict the source dictionary to be copied
658 Checks if the COSDictionary contains information metadata keys. @param dictionary a COSDictionary object to be checked @return true if it contains info metadata, false otherwise
659 Checks if the dictionary contains width information. @return true if it has width or missing width key, false otherwise
660 Checks if the dictionary contains the key for missing width. @return true if missing width is present, false otherwise
661 Checks if dictionary contains XFA (Extensible Forms Architecture) key. @return true if the key is present, false otherwise
662 Initializes XrefParser with provided COSParser and sets its source. @param cosParser the COSParser object to be used for parsing
663 Returns a string representation of this COSFloat object. @return formatted string representing this COSFloat instance
664 Writes formatted string data into a PDF file using the provided OutputStream. @param output The OutputStream to write the PDF data to @throws IOException if an I/O error occurs while writing the data
665 Writes a COSArray to an OutputStream using specified formatting.
666 Creates and returns a new COSIncrement object with update information. @return Newly created COSIncrement object
667 Initializes LayerUtility with a PDDocument and creates a PDFCloneUtility instance. @param targetDoc the document to be used for layer utility operations
668 Initializes a new instance of DefaultResourceCache with default settings.
669 Checks if the given COSBase object needs to be updated. @param base a COSBase object to evaluate for updates @return true if the object is an instance of COSUpdateInfo and needs updating, otherwise false
670 Writes the given FDFDocument to an output stream. May perform incremental update.
671 Writes a COSInteger to an OutputStream and appends a space character. @param output the stream where data will be written @param cosInteger the integer object to write to the stream @throws IOException if writing to the stream fails
672 Retrieves object at a specific index from a collection. @param index position in the collection @return COSBase object or null if it's a COSNull instance
673 Finds the index of a specific object in the list. @param object The COSBase object to search for @return Index if found, otherwise -1
674 Checks if a given value exists in the collection, including indirect references. @param value Object to search for @return true if the value is found, false otherwise
675 Retrieves the key for a given value in the COSName-COSBase map. @param value The object to search for in the map values @return The corresponding COSName key or null if not found
676 Retrieves an object from the dictionary using a key. Handles indirect objects and null values. @param key unique identifier for the object in the dictionary @return COSBase object or null if not found or is a null object
677 Retrieves the linearized dictionary from the pool, if present. @return Linearized COSDictionary or null if not found in the pool.
678 Closes all open I/O streams and resources, logging any errors.
679 Accepts a visitor and applies it to the encapsulated object or NULL if none exists. @param visitor The ICOSVisitor to be applied. @throws IOException If an I/O error occurs during visitation.
680 Checks if 'value' is an object that refers back to 'parent'. Logs a warning if so. @param parent the potential referrer object @param value the potential referred-to object @return true if there's a self-reference, false otherwise
681 Retrieves the length from a COSBase object. @param lengthBaseObj base object containing length information @return COSNumber representing the length, or null if not found or invalid type @throws IOException if there's an issue reading the length object
682 Initializes a NormalXReference with byte offset, key, and object. Determines if object is an object stream. @param byteOffset byte offset of the reference @param key unique identifier for the COSObject @param object the COSBase object which may or may not be a COSStream
683 Retrieves the key for a given COSBase object from the object pool. @param object the input COSBase object @return the corresponding COSObjectKey or null if not found
684 Checks if the given COSBase object exists in the pool. @param object The COSBase object to search for @return True if the object is found, false otherwise
685 Prepares a stream object by adding its key and value to respective lists. @param key the unique identifier for the object @param object the COSBase object to be prepared for streaming
686 Constructs COSObjectKey with specified number and generation. @param num unique object number @param gen object generation identifier
687 Compares this object with another XReferenceEntry based on their referenced keys. @param xReferenceEntry the entry to compare with @return negative, zero or positive value as this is less than, equal to or greater than xReferenceEntry
688 Returns the X scaling factor of the text matrix. @return The current X scaling factor as a float value
689 Returns the Y scaling factor of the text matrix.
690 Creates a raw output stream for writing data. Throws exceptions if already closed or writing. @return OutputStream object to write data @throws IOException if an I/O error occurs
691 Initializes a COSWriter with an OutputStream and CompressParameters. @param outputStream the stream to write data to @param compressParameters parameters for compression operations
692 Initializes COSWriter with output and input data for incremental updates. @param outputStream the stream to write updated data to @param inputData the existing data to be updated
693 Updates 'updated' status based on acceptance, used in synchronization. @param updated new status to be set if updates are accepted
694 Converts byte array to string using Unicode if BOM is present; otherwise uses PDFDocEncoding. @return String representation of the byte array
695 Constructs a COSString based on input text and encoding preference. @param text the string to encode @param forceHex if true, forces hexadecimal encoding; otherwise uses PDFDocEncoding if possible
696 Checks if current font is a Standard 14 PDF font based on its name and embedding status. @return true if it's a Standard 14 font, false otherwise
697 Reads up to 'len' bytes of data into an array starting at 'offset'. @param data the buffer into which the data is read @param offset the start position in the destination array @param len maximum number of bytes read @return total number of bytes read, -1 if end of stream has been reached @throws IOException if an I/O error occurs
698 Safely closes the resource, flushes data, and sets input/output streams to null. @throws IOException if an I/O error occurs while closing or flushing
699 Reads and returns the next byte of data from a stream, or -1 if end of stream is reached. @return The next byte of data as an integer, or -1 if end of stream is reached. @throws IOException If an I/O error occurs while reading the data.
700 Reads a specified amount of data into the given byte array. @param data destination byte array @param offset start position in the array @param length number of bytes to read @return number of bytes read or -1 if EOF is reached
701 Reads an image from an input stream and sets it to the current object. @param stream InputStream containing image data @throws IOException if reading from the stream fails
702 Encodes input data using LZW algorithm and writes encoded bits to output stream. @param rawData InputStream containing raw data to encode @param encoded OutputStream for writing the encoded data @param parameters COSDictionary containing encoding parameters @throws IOException if an I/O error occurs
703 Selects the optimal data row for writing based on estimated compression sum. @return byte array of the chosen data row for writing
704 Converts a COSName to its corresponding RenderState. @param state the input COSName object @return the matching RenderState or null if input is null or no match found
705 Converts a COSName object to its corresponding BaseState value. @param state the COSName object to convert, null returns ON by default @return the BaseState value associated with the given COSName or ON if input is null
706 Closes all resources and clears data used by the object. Throws IOException if an error occurs.
707 Constructs a PDFormXObject from a given PDStream and sets its type to FORM. @param stream the input data stream for the XObject
708 Initializes a new PDFStreamParser with PDContentStream data. @param pdContentstream the content stream to be parsed @throws IOException if an I/O error occurs while reading the stream
709 Initializes PDFStreamParser with byte array data. @param bytes input data in byte array format
710 Parses a COSBase object from the source based on its number. @param objectNumber unique identifier for the object to be parsed @return COSBase object or null if not found, throws IOException
711 Reads and returns a map of object IDs to their respective numbers. Closes the source and clears the document after operation. @return Map with Long keys (object IDs) and Integer values (numbers), or null if an error occurs @throws IOException if there is an issue reading from the source
712 Skips white spaces and line breaks after a stream in the PDF source. @throws IOException if an I/O error occurs while reading from the source
713 Skips and handles line breaks in the input stream. @return true if a line break is found, otherwise rewinds stream and returns false @throws IOException if an I/O error occurs while reading from source
714 Reads and returns a line from the source, handling end-of-file and EOL characters. @return String containing the line or throws IOException if at End-of-File
715 Skips whitespace and comments in the input source. @throws IOException if an I/O error occurs while reading from the source
716 Searches for the nearest XRef offset from a list of table and stream offsets. @param xrefOffset target offset to search for @return nearest found offset or -1 if not found @throws IOException if an I/O error occurs during the search
717 Parses the header of a PDF file. @return true if parsing is successful, false otherwise @throws IOException if there's an error reading the PDF file
718 Parses the FDF header and returns true if successful. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs during parsing
719 Parses and returns all objects from the data source. @return Map of COSObjectKey to corresponding COSBase object @throws IOException if an I/O error occurs while reading from the source
720 Calculates the final key using objectNumber and genNumber as inputs. @param objectNumber unique identifier for an object @param genNumber generation number of the object @return byte array representing the calculated final key
721 Initializes a content stream for a PDF appearance with an output stream and resources. @param appearance the PDF appearance object to create the stream for @param outputStream the stream where the content will be written
722 Initializes a new content stream for a page in a PDF document. @param doc the target PDF document @param appearance the appearance stream to be used @param outputStream the output stream for the content
723 Transforms given x and y coordinates using the current transformation matrix. @param x original x coordinate @param y original y coordinate @return transformed Point2D.Float object
724 Creates a new PaintContext with an adjusted transformation for the pattern. @param cm ColorModel, deviceBounds Rectangle, userBounds Rectangle2D, xform AffineTransform, and hints RenderingHints are parameters used in context creation. The method modifies the transformation to remove scaling from the pattern. @return A new PaintContext with modified transformation.
725 Concatenates input Matrix with instance's 'single' array, updates 'single'. @param matrix Input Matrix to be concatenated
726 Translates the coordinates of a 3D point by (tx, ty). @param tx translation along x-axis @param ty translation along y-axis
727 Scales the coordinates of a single object by given factors. @param sx scaling factor for x-coordinates @param sy scaling factor for y-coordinates
728 Multiplies this matrix by another matrix and returns the result. @param other The matrix to multiply with. @return A new matrix resulting from the multiplication.
729 Creates and returns a new PDDocument object using document data. @return PDDocument instance with access permission set @throws IOException if an I/O error occurs during document creation
730 Constructs a PDDocument object from a COSDocument and RandomAccessRead source. @param doc the underlying COS document @param source the random access read source for data input
731 Creates a SecurityHandler for the given ProtectionPolicy. @param policy The protection policy to create a handler for @return A SecurityHandler or null if no matching handler is found
732 Creates a SecurityHandler for the given filter name. @param name the name of the security filter @return SecurityHandler object or null if not found for the given name
733 Sets the stroking color on demand with given PDColor object, returns true if successful. @param color PDColor object to be used for setting stroke color @return boolean indicating whether the operation was successful or not
734 Sets non-stroking color based on given PDColor object, if valid components exist. @param color the PDColor object to set as non-stroking color @return true if color was successfully set, false otherwise
735 Checks if the user has all owner permissions. @return true if user has all permissions, otherwise false
736 Checks if any revision3 permission is set for the user. @return true if user has any of the permissions: fill form, extract accessibility, assemble document, or print faithfully; false otherwise
737 Writes given byte array to an output stream. @param data bytes to be written @param output destination of the data @throws IOException if writing fails
738 Writes a specified portion of bytes to the provided output stream. @param data byte array containing data to be written @param offset starting index in the data array @param len number of bytes to write from the array @param output OutputStream object to which data is written @throws IOException if an I/O error occurs during writing
739 Inserts a diacritic at specified position in Unicode text, adjusting width array accordingly.
740 Constructs a Line object with two points and corresponding colors. @param p0 first Point object @param p1 second Point object @param c0 color of the first point as float array @param c1 color of the second point as float array
741 Initializes SoftMask with given parameters for image processing. @param paint the Paint object @param mask the BufferedImage mask @param bboxDevice the Rectangle2D bounding box in device space @param backdropColor the PDColor for the backdrop; if null, default is used @param transferFunction the PDFunction for transferring color values (null if identity)
742 Removes backdrop from a BufferedImage by applying alpha blending. @param backdrop the image to remove @param offsetX horizontal offset for removal @param offsetY vertical offset for removal
743 Retrieves FontMetrics for a given font name. If not loaded, it loads and returns them.
744 Constructs a GlyphList from an InputStream and initializes capacity. @param input the source of glyph data @param numberOfEntries expected number of entries to allocate memory for @throws IOException if there is an error reading from the input stream
745 Constructs a GlyphList by copying from another and loading additional data from InputStream. @param glyphList the source GlyphList to clone @param input the InputStream to load additional data from @throws IOException if an I/O error occurs while reading from the InputStream
746 Converts a character code to its corresponding GID in the font's encoding. @param code the character code to convert @return the GID of the character or 0 if not found @throws IOException if there is an error reading the font data
747 Retrieves the name of a glyph in a specific font format. @param name The name of the glyph @return The name if found, otherwise a default value (".notdef") @throws IOException if an I/O error occurs
748 Fetches a glyph name for the given string in a specific font, handling alternatives and Unicode. @param name the input string to find a glyph name for @return a glyph name if found, otherwise ".notdef" @throws IOException if an I/O error occurs while fetching glyph data
749 Constructs a new PDJPXColorSpace object with the given ColorSpace. @param colorSpace the ColorSpace to be associated with the PDJPXColorSpace object
750 Initializes color space for CMYK conversion, ensuring thread safety and handling potential I/O errors. @throws IOException if default CMYK color profile cannot be loaded
751 Applies a mask to an image and returns the modified image. @param image The original BufferedImage @param mask The BufferedImage mask to apply @param interpolateMask If true, interpolates the mask during scaling @param isSoft If false, performs a fast bit combination for alpha composition @param matte Float array for additional matte calculations (optional) @return The modified BufferedImage with the applied mask
752 Constructs a cubic Bezier curve with given control points and level of detail. @param ctrlPnts array of 4 Point2D objects representing the control points @param l level of detail for generating curve points
753 Checks if a point lies within or on the edges of a triangle. @param p Point2D object representing the point to be checked @return true if the point is inside or on the triangle, false otherwise
754 Calculates and returns the color components for a given point.
755 Intersects the current clipping path with a new path, updating it in-place. @param path The new GeneralPath to intersect with the current clipping path.
756 Intersects the current clipping path with the provided area. @param area The area to intersect with the clipping path.
757 Transfers the current clipping path to a new Graphics2D object, handling edge cases for an empty path. @param graphics The Graphics2D object to which the clipping path is transferred.
758 Draws a tiling pattern using provided graphics, color space, and matrix. @param g Graphics2D object for drawing @param pattern PDTilingPattern to be drawn @param colorSpace PDColorSpace for the pattern @param color PDColor of the pattern @param patternMatrix Matrix transforming the pattern
759 Returns the adjusted X direction based on rotation. @return Float value representing the adjusted X direction
760 Initializes TextPosition with given parameters for text rendering. @param pageRotation rotation of the page, width & height, text matrix, and coordinates @param font PDFont object and size in points used for text rendering
761 Calculates and returns adjusted Y direction based on the rotation angle. @return Adjusted Y direction value for PDFBox operations
762 Returns the width of the current object after rotation. @return The width as a floating point number
763 Calculates and returns the width direction adjustment. @return The calculated width direction adjustment as a float value.
764 Starts an article with default settings.
765 Writes the end of a paragraph to the output stream, starting a new one if not already in a paragraph. @throws IOException if an I/O error occurs while writing to the output stream
766 Normalizes a word by handling specific Unicode characters, applying NFKC normalization and reversing certain sequences for Hebrew and Arabic letters. @param word the input string to be normalized @return the normalized string
767 Converts a Calendar object to a formatted string. @param cal the Calendar object to convert @return formatted string representation of the calendar or null if input is null
768 Converts a Calendar object to an ISO8601 formatted string. @param cal the Calendar object to convert @return ISO8601 formatted string representation of the Calendar object
769 Converts byte array into hexadecimal string representation. @return Hexadecimal string representation of bytes
770 Writes an external CMS signature to the PDF, overwriting existing contents. @param cmsSignature byte array of the CMS signature in hexadecimal format @throws IOException if there's not enough space for the signature or other I/O errors
771 Writes the name of the object to an OutputStream in PDF format. @param output the OutputStream to write to @throws IOException if an I/O error occurs
772 Writes a byte array in hexadecimal format to an output stream. @param bytes the byte array to be written @param output the output stream where data is written @throws IOException if an I/O error occurs
773 Parses an InputStream into a Document. No validation is performed. @param is the InputStream to be parsed @return the resulting Document object @throws IOException if there's an error reading from the stream
774 Detects the type of a file from its input stream using a tree-based search for magic numbers. @param inputStream the stream to read the file data from @return the detected FileType or throws IOException if the detection fails @throws IOException if the input stream does not support mark/reset or ends before magic number is determined
775 Initializes LegacyPDFStreamEngine with various text operators.
776 Retrieves a COSName object for the given string, using caching and thread safety. @param aName the input string to retrieve a COSName object for @return a COSName object corresponding to the input string
777 Constructs a new COSFloat object with the given float value. @param aFloat the initial float value to be stored in the object
778 Constructs a COSFloat object with given float and string values. @param aFloat the float value to be stored @param valueString the string representation of the float value
779 Constructs COSFloat from String, handles various invalid formats. @param aFloat the string representation of a float @throws IOException if the string cannot be converted to a float
780 Initializes a new instance of COSInteger with given value and validity status. @param val the integer value to be stored @param valid indicates if the value is valid or not
781 Constructs a new COSString with specified byte array. @param bytes input data as a byte array
782 Initializes an empty COSArray with default settings.
783 Initializes a new COSStream object with a given RandomAccessStreamCache. Sets the initial length to 0. @param streamCache the cache for random access to the stream data
784 Creates an unmodifiable copy of a COSDictionary object. @param dict the original, modifiable dictionary to copy
785 Creates and returns a default DecodeResult object with an empty COSDictionary.
786 Initializes a new instance of PDDocumentInformation with an empty COSDictionary.
787 Initializes PDResources with new dictionaries and caches.
788 Initializes a new instance of PDDictionaryWrapper with an empty COSDictionary.
789 Initializes a new empty PDNameTreeNode with an empty COSDictionary.
790 Constructs a new PDPageLabelRange with an empty COSDictionary.
791 Initializes a new instance of PDMarkInfo with an empty COSDictionary.
792 Initializes a new instance of PDPropertyList with an empty COSDictionary.
793 Initializes a new instance of PDBoxStyle with an empty COSDictionary.
794 Initializes an empty dictionary for crypt filter operations.
795 Initializes a new instance of PDEncryption with an empty COSDictionary.
796 Initializes an instance of FDFCatalog with a new empty COSDictionary.
797 Initializes an instance of FDFDictionary with a new COSDictionary.
798 Initializes an instance of FDFField with a new COSDictionary.
799 Initializes an instance of FDFIconFit with a new empty COSDictionary.
800 Initializes a new instance of FDFJavaScript with an empty COSDictionary.
801 Initializes an instance of FDFNamedPageReference with a new COSDictionary.
802 Initializes a new instance of FDFPage with an empty COSDictionary.
803 Initializes an instance of FDFPageInfo with an empty COSDictionary.
804 Initializes an instance of FDFTemplate with an empty COSDictionary.
805 Initializes a new instance of PDDeviceNAttributes with an empty COSDictionary.
806 Initializes a new instance of PDDeviceNProcess with an empty dictionary.
807 Initializes a PDShading object with an empty COSDictionary.
808 Initializes an instance of PDAdditionalActions with a new empty COSDictionary.
809 Initializes an instance of PDAnnotationAdditionalActions with a new COSDictionary.
810 Initializes a new instance of PDDocumentCatalogAdditionalActions with an empty COSDictionary.
811 Initializes a new instance of PDFormFieldAdditionalActions with an empty dictionary.
812 Initializes PDPageAdditionalActions with an empty COSDictionary.
813 Initializes a new instance of PDTargetDirectory with an empty dictionary.
814 Initializes a new instance of PDURIDictionary with an empty COSDictionary.
815 Initializes launch parameters for a PDWindows application.
816 Initializes a new instance of PDBorderEffectDictionary with an empty COSDictionary.
817 Initializes a new instance of PDBorderStyleDictionary with an empty COSDictionary.
818 Initializes a PDPropBuild object with an empty COSDictionary using direct objects.
819 Initializes and sets up a property build data dictionary for PDF processing.
820 Initializes and sets up a PDSeedValueMDP object with an empty dictionary.
821 Initializes a new instance of PDSeedValueTimeStamp with an empty COSDictionary.
822 Constructs a PDField object with an AcroForm and default settings. @param acroForm the form to which the field belongs
823 Initializes and creates a new PDViewportDictionary object.
824 Initializes preferences for PDViewer with an empty COSDictionary.
825 Constructs a COSObject with the given COSBase and COSObjectKey. @param object the underlying data object @param objectKey the unique key for the object
826 Constructs a default attribute object from a COSDictionary. @param dictionary input data in COSDictionary format
827 Constructs a PDUserAttributeObject from a COSDictionary. @param dictionary input dictionary containing user attribute data
828 Constructs a standard attribute object from a COSDictionary. @param dictionary source of data for the object
829 Constructs a PDOutlineItem from a given COSDictionary. @param dic the dictionary containing outline item data
830 Retrieves metadata from the stream in the form of PDMetadata object. Handles different cases: returns null for COSNull, throws exception for unexpected types. @return PDMetadata object or null if no metadata is present or it's a COSNull
831 Fetches and returns metadata from a COS stream, or null if not found. @return PDMetadata object containing the metadata or null if none exists
832 Fetches the extended object stream from the COSObject, if it exists. @return PDObjectStream if extends stream is present, otherwise null
833 Initializes a type 0 PDF function with a given COS base function. @param function the base function for the PDF function type 0
834 Constructs a Type 3 PostScript function with a given base function stream. @param functionStream the base function stream for the Type 3 function
835 Constructs a PDPostScriptXObject from a given COSStream object and sets its subtype to PS. @param stream the input data stream containing PostScript content
836 Constructs a PDFormXObject from a COSStream. @param stream the underlying COS stream containing form data
837 Constructs a PDFormXObject from a COSStream and caches it for resource management. @param stream the input data stream @param cache the resource cache for efficient reuse of resources
838 Initializes an instance of PublicKeySecurityHandler.
839 Initializes a new instance of the StandardSecurityHandler class.
840 Initializes PublicKeySecurityHandler with a given PublicKeyProtectionPolicy. @param publicKeyProtectionPolicy the policy to protect public keys
841 Initializes StandardSecurityHandler with a specified protection policy. @param standardProtectionPolicy The policy defining security standards to be enforced.
842 Constructs an FDFAnnotationHighlight object from a COSDictionary. @param a The COSDictionary containing data for the highlight annotation.
843 Constructs an FDFAnnotationSquiggly object from a COSDictionary. @param a COSDictionary containing the annotation data
844 Constructs an FDFAnnotationStrikeOut object from a COSDictionary. @param a A dictionary containing annotation data
845 Constructs an underline annotation from a COS dictionary. @param a COSDictionary containing annotation data
846 Constructs a tiling pattern from a given COSDictionary. @param dictionary contains parameters for tiling pattern construction
847 Constructs a PDShadingType3 object from a COSDictionary. @param shadingDictionary dictionary containing shading information
848 Constructs a type 4 (free-form functional) shading pattern. @param shadingDictionary COS dictionary containing shading information
849 Constructs a Type 5 Shading object from a given COS dictionary. @param shadingDictionary contains the parameters for the shading
850 Constructs a PDPageFitDestination from a COSArray. @param arr COSArray containing destination information
851 Initializes a PDPageFitHeightDestination with a given COSArray. @param arr a COSArray containing destination data
852 Creates a PDPageFitRectangleDestination from a COSArray. @param arr an array containing destination parameters
853 Constructs a PDPageFitWidthDestination object from a given COSArray. @param arr The COSArray containing the destination data.
854 Constructs a PDPageXYZDestination from a given COSArray. @param arr the CosArray containing destination data
855 Constructs a PDButton object with given parameters. @param acroForm PDF AcroForm object @param field COSDictionary representing the field @param parent PDNonTerminalField parent of this field
856 Initializes a new PDF signature field with a given form, dictionary, and parent. @param acroForm The PDF AcroForm containing this field @param field The COSDictionary representing the field in the document @param parent The PDNonTerminalField that contains this field
857 Constructs a variable text field in an AcroForm. @param acroForm the parent AcroForm @param field the COSDictionary representing this field @param parent the parent non-terminal field if any, otherwise null
858 Constructs a Mac OS Roman Encoding object by adding differences and additional entries to the MacRomanEncoding.
859 Converts FontBox Encoding to a Type1Encoding object. @param encoding the input FontBox Encoding @return a corresponding Type1Encoding object
860 Generates a unique partial name for a field, appending an incrementing number if needed. @return Unique partial name for the field
861 Returns a string representation of the object collection, including objects and their revision numbers.
862 Creates a PDSoftMask object from the given COSBase dictionary. @param dictionary contains data to construct the soft mask @return PDSoftMask object or null if creation fails
863 Constructs a new COSDocument with a memory-only stream cache and specified parser. @param parser the ICOSParser to use for parsing document data
864 Creates a marked content object based on the given tag and properties. @param tag COSName indicating the type of marked content @param properties COSDictionary containing additional properties @return PDMarkedContent object (PDArtifactMarkedContent for ARTIFACT tag)
865 Calculates and returns the width of an object. @return The width as a floating point number.
866 Checks if a point (x, y) is within the defined boundaries. @param x The x-coordinate of the point to check. @param y The y-coordinate of the point to check. @return True if the point is inside the boundaries; false otherwise.
867 Calculates and returns the height of an object by subtracting lower left Y from upper right Y. @return The height as a floating-point number
868 Transforms a rectangular shape using the provided matrix and returns the new GeneralPath. @param matrix transformation matrix to apply to the shape @return A transformed GeneralPath object representing the shape
869 Converts bounding coordinates into a GeneralPath object representing a rectangle. @return GeneralPath object representing the rectangle defined by this object's coordinates
870 Returns a string representation of the rectangle's coordinates. @return String in format "[lowerLeftX,lowerLeftY,upperRightX,upperRightY]"
871 Fetches an integer at specified index with default fallback value. @param index position in array to retrieve integer from @return integer at given index or -1 if not found or invalid index
872 Fetches name at specified index. If index is invalid, returns null. @param index position of the name to fetch @return Name as a String or null if index is invalid
873 Creates an output stream with optional filters applied for this object. @param filters COSBase objects used to filter the output @return OutputStream for writing data
874 Initializes PDImageXObject with a stream and resources, handling JPX filter if present. @param stream the input data stream @param resources associated resources for the image object
875 Returns the file suffix based on the stream's filters. Supports PNG, JPG, JPX, TIFF, and JB2 formats.
876 Writes a finite floating-point number to the output stream. Throws exception for non-finite numbers. @param real the floating-point number to write @throws IOException if an I/O error occurs while writing to the output stream
877 Writes an integer operand to the output stream in decimal format, followed by a space. @param integer the value to be written @throws IOException if there's an error writing to the output stream
878 Writes an operator followed by a new line. @param text the operator to be written @throws IOException if writing fails
879 Checks if the data structure is empty. @return true if the size is zero, false otherwise
880 Writes a COSFloat object to an OutputStream and adds a space separator. @param output the OutputStream where data will be written @param cosFloat the COSFloat object to be written to the OutputStream @throws IOException if writing to the OutputStream fails
881 Converts update state of this object into an increment. @return COSIncrement representing the updated state as an increment
882 Converts objects to a float array. If an object is not a COSNumber, it's converted to 0. @return A new float array with the converted values
883 Converts objects to a list of Float values, replacing non-numbers with null. @return List of Float values or null for non-number objects
884 Converts objects to a list of Integers, replacing non-numbers with null. @return List of Integers representing the contained COSNumber instances or null if not a number
885 Returns the minimum value from a range array at a specified index. @return The float value of the minimum in the range at the given index
886 Retrieves the maximum float value from a range array at a specific index. @return Maximum float value in the range array
887 Retrieves a color by its index from an array, returns as PDGamma object or null. @param index position of the color in the array @return PDGamma object if found, otherwise null
888 Retrieves a BlendMode instance based on the provided COSBase object. @param cosBlendMode base object containing blend mode information @return BlendMode instance or NORMAL if not found
889 Retrieves a list of colorant names from the underlying data structure. @return List of colorant names as strings
890 Returns the alternate color space, creating it if not already available. @return The alternate color space object @throws IOException If there's an error retrieving or creating the object
891 Fetches and returns the colorant's name from an array. @return The colorant's name as a String
892 Retrieves the first page from a PDF document. @return PDPage object if it exists, otherwise null
893 Retrieves the page number from an array. Returns -1 if not found or invalid.
894 Fetches the zoom level from an object in an array, returns as float. @return Zoom level if found (as float), otherwise -1
895 Initializes a Matrix object from a COSArray of COSNumbers. @param array data source for initializing the matrix
896 Retrieves an object from dictionary using first key. If not found, uses the second key. @param firstKey primary COSName key to search @param secondKey alternative COSName key if primary is not found @return COSBase object or null if neither key is found
897 Retrieves a COSName object from the dictionary using a given key. @param key a unique identifier of type COSName @return COSName object if found, otherwise null
898 Retrieves a COSDictionary object for the given key. @param key unique identifier of type COSName @return COSDictionary if found, or null otherwise
899 Retrieves a COSStream object from the dictionary using a given key. @param key unique identifier for the COSStream in the dictionary @return COSStream object if found, otherwise returns null
900 Retrieves a COSArray object from the dictionary using a given key. @param key unique identifier of type COSName to locate the COSArray @return COSArray object if found, otherwise returns null
901 Retrieves a COSName object from the dictionary. @param key the key to look up in the dictionary @param defaultValue value returned if key is not found or not a COSName
902 Retrieves a long value from the dictionary using a key. @param key unique identifier for the value in the dictionary @param defaultValue value to return if key is not found or not a COSNumber @return long value corresponding to key, or defaultValue if not found or not a number
903 Retrieves a float value from the dictionary. @param key The unique identifier for the float value. @param defaultValue The value to return if the key is not found. @return The float value associated with the key or defaultValue if not found.
904 Retrieves content streams from the page dictionary object, if any exist. @return Iterator over PDStream objects representing content streams
905 Checks if the page has any content, either in a stream or an array. @return true if the page contains data, otherwise false
906 Retrieves and organizes class names with their revisions from a COSObject. @return Revisions<String> object containing class names and their revision numbers
907 Fetches and returns the K object from the underlying COS dictionary. @return The K object from the COS dictionary or null if not found
908 Retrieves the value object from the underlying COS object's dictionary. @return The COSBase object corresponding to the 'V' key in the dictionary.
909 Checks if metadata should be encrypted in a COSObject. @return boolean, true if encryption is required, false otherwise (default is true)
910 Fetches the owner's encryption key from a dictionary object. @return byte array of encryption key or null if not found, truncated to 32 bytes @throws IOException if an I/O error occurs while fetching the key
911 Fetches and returns the user encryption key as a byte array. @return User encryption key or null if not found, truncated to 32 bytes
912 Retrieves permission bytes from the dictionary object. @return byte array containing permissions or null if not found @throws IOException if an error occurs during retrieval
913 Retrieves the page number from a COS annotation object. @return Integer representing the page number or null if not present
914 Fetches and validates the COSBase value from a field. @return COSBase object if it's of a known type, throws IOException for unknown types, or returns null if not found
915 Fetches and returns the field flags as an Integer. @return Field flags as Integer, or null if not found.
916 Retrieves the set field flags of a COSNumber object in a dictionary, or returns null if not found.
917 Retrieves clear field flags for a field. @return Integer value of clear field flags, or null if not set
918 Fetches and returns the widget field flags as an Integer. @return Widget field flags or null if not found
919 Retrieves and returns the Set Widget Field Flags as an Integer. @return Set Widget Field Flags or null if not found
920 Retrieves clear widget field flags as an Integer value from a COSNumber object. @return Integer value of the clear widget field flags or null if not found
921 Fetches and returns the default width. If not set, it's fetched from dict or defaults to 1000.
922 Fetches and returns the color space from the dictionary. @return The PDColorSpace object or null if not found in the dictionary. @throws IOException If there's an error accessing the dictionary.
923 Retrieves the color space from given resources or creates one if not already defined. @param resources PDResources object containing color space data @return PDColorSpace object representing the color space @throws IOException if an error occurs while reading the color space data
924 Constructs a PDOptionalContentGroup from a COSDictionary, checking if it's the correct type. @param dict COSDictionary to construct from; must be of type 'COSName.OCG' @throws IllegalArgumentException if provided dictionary is not of type 'COSName.OCG'
925 Constructs a PDOptionalContentMembershipDictionary from a given COSDictionary. Throws exception if the dictionary is not of type 'OCMD'. @param dict the input COSDictionary to be used for construction
926 Retrieves the overprint mode from a dictionary object. @return Integer representing the overprint mode, or null if not found
927 Retrieves the soft mask from the dictionary object. @return Soft mask object or null if not available
928 Retrieves a Float object from the dictionary using a given key, if it exists. @param key unique identifier in the dictionary @return Float value or null if not found or not a COSNumber
929 Retrieves the transfer object from a dictionary. Validates that the object is a COSArray of size 4, otherwise returns null. @return The transfer object or null if conditions are not met
930 Retrieves transfer object from dictionary, validates its structure. @return COSBase object if it's a valid transfer array, otherwise null
931 Fetches and returns the backdrop color as a COSArray object. If not already fetched, it retrieves from the COS object's dictionary using "BC" key.
932 Determines the open mode for a new window based on COS object settings. @return OpenMode (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
933 Fetches and returns an object (Dict/Str/Array) named 'T' from the action dictionary. @return COSBase object (Dict/Str/Array) named 'T', or null if not found
934 Retrieves the open mode (new window or same) from COSObject dictionary. @return OpenMode enum value based on the setting in COSObject
935 Retrieves the open mode for a new window based on COS object settings. @return OpenMode (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
936 Retrieves a named destination from the dictionary. @return PDNamedDestination object or null if not found or invalid type
937 Fetches and returns the contents from a dictionary as bytes. @return Byte array containing content or empty if not found/not a string
938 Retrieves an XFA resource from the PDF document if it exists. @return PDXFAResource object or null if not available in the dictionary
939 Retrieves an inheritable attribute by key from dictionary or parent, falling back to acroForm if not found. @param key the COSName of the attribute @return the corresponding COSBase object or null if not found
940 Retrieves and returns the COSBase object associated with 'V' from the dictionary of the COSObject.
941 Fetches and returns the string value of a dictionary object, or an empty string if not found. @return String representation of the dictionary object's value or an empty string if not found
942 Fetches and returns the default value from the underlying COS object's dictionary. @return The default value as a COSBase object or null if not found
943 Closes the PDF source and visual signature resources safely. @throws IOException if an I/O error occurs while closing resources.
944 Clones a COSBase object for use in a new document, handling circular references. @param base the COSBase object to clone @return cloned COSBase object or null if input is null, else original object if already cloned
945 Writes COSObject to output stream, handles null or missing objects gracefully. @param key unique object identifier @param obj object to be written
946 Retrieves the unique key associated with a given COSBase object. @param object The COSBase object for which to retrieve the key @return The COSObjectKey corresponding to the input object
947 Checks if the specified COSBase object exists in the pool. @param object The COSBase object to search for in the pool @return true if the object is found, false otherwise
948 Creates and prepares a list of COSWriterObjectStream objects for writing data. @return List<COSWriterObjectStream> containing prepared stream objects
949 Retrieves a COSObjectKey from cache or creates one if not found. @param num object number @param gen generation number @return COSObjectKey instance from cache or newly created
950 Searches for objects in a data stream using BF (Best Fit) algorithm. @throws IOException if there is an error reading from the data source
951 Searches for object stream offsets and returns a map of these offsets with their corresponding COSObjectKey. @return Map<Long, COSObjectKey> where Long is the offset and COSObjectKey is the unique identifier for the object @throws IOException if there's an issue reading from the source
952 Parses Xref trailers and sets cross-references in the provided resolver. @param resolver object to store parsed cross-reference data @throws IOException if an I/O error occurs while reading data
953 Parses XRef table from a given byte offset. Returns false for any parsing errors or invalid data. @param startByteOffset the starting byte offset to parse from @return true if parsing is successful, otherwise false @throws IOException if an I/O error occurs during parsing
954 Retrieves and manages an object key for a COSBase object. @param obj the COSBase object to get or create a key for @return the corresponding COSObjectKey
955 Puts a COSBase object into the pool with an associated key. Avoids mixing up similar base objects with different keys. @param key unique identifier for the object @param object the COSBase object to be stored in the pool @return actualKey used for storage or null if object is null or already exists with same key
956 Constructs a new COSWriter with an OutputStream. Compression parameters are optional. @param outputStream the stream to write data to
957 Sets the update state of an object. @param flag boolean value to determine if updates are needed
958 Updates data with default settings.
959 Retrieves a string at the given index, or returns defaultValue if not found or not a string. @param index position of the desired string @param defaultValue value to return if no valid string is found at the index @return String value at the specified index or defaultValue if invalid
960 Retrieves a string representation of the object associated with the given key. @param key unique identifier for the object in the dictionary @return String representation or null if not found or not COSName/COSString type
961 Retrieves string value from dictionary using the provided key. @param key unique identifier of the dictionary object @return String value or null if not found or not a COSString
962 Converts basic types from a COSDictionary to a Map<String, Object>. @param map the input COSDictionary @return a Map with converted objects or null if input is null @throws IOException if an unsupported object type is encountered
963 Returns the string representation of the file. @return String representation of the file
964 Retrieves and returns an option as a string from the first object in 'option'.
965 Retrieves default appearance string from an option object. @return Default appearance string as a String.
966 Fetches the named destination as a String. Supports both COSString and COSName types. @return Named destination as a String or null if not found or unsupported type
967 Extracts pairable strings from a COSBase object based on the given index. @param items COSBase object containing data @param pairIdx index to select string pairs (0 or 1) @return list of pairable strings, may be empty
968 Retrieves export values as a list of strings from an inheritable attribute. @return List of strings representing the export values or empty if none found.
969 Extracts string values from a COS object based on the given name. @param name identifier for the object to extract values from @return List of extracted strings or an empty list if not found or not applicable
970 Retrieves the default appearance string from a COSBase object. @return Default appearance string, or null if not found or not a COSString.
971 Constructs a new COSString with the specified text. @param text the string to be encapsulated in the COSString object
972 Initializes a PDVisibleSignDesigner with an input stream of a signature image. @param imageStream the input stream containing the signature image data @throws IOException if there is an error reading from the input stream
973 Reads an image from the specified file path and prepares it for signing. @param path the absolute path to the image file @return PDVisibleSignDesigner object for further manipulation @throws IOException if there is a problem reading the file
974 Constructs a PDTransparencyGroup from the given PDStream. @param stream The input PDStream containing transparency group data
975 Parses a COS Dictionary from the input stream. Handles invalid data and incomplete dictionaries. @param isDirect indicates if the dictionary should be direct or not @return COSDictionary object, may contain partially parsed data on error @throws IOException if there's an issue with reading from the source
976 Reads a string from the source, stopping at end of name. @return The read string or an empty string if no characters were read. @throws IOException If there's an error reading from the source.
977 Validates and reads an expected string from the source, with optional space skipping. @param expectedString The string to validate and read @param skipSpaces Whether to skip spaces before and after reading the string @throws IOException If the expected string is not found in the source
978 Reads a string of specified length from the source, skipping spaces and certain special characters. @param length maximum length to read @return the read string or an empty string if no valid character is found
979 Reads and returns the next integer from the input stream, handling any number format exceptions and rewinding the stream. @throws IOException if an I/O error occurs or if the next data is not an integer
980 Reads and parses a long value from the input stream, handling exceptions. @return Parsed long value or throws IOException if parsing fails
981 Calculates and fixes the XRef offset for a given object offset. @param objectOffset The starting point for searching the XRef table/stream. @return Fixed XRef offset or 0 if not found. Throws IOException if error occurs during parsing.
982 Computes a user password based on provided parameters and encryption revision. @param password, owner, id are input data for the computation. @param permissions specifies access level. @param encRevision determines the encryption algorithm (2, 3, 4). @param keyLengthInBytes specifies output length. @param encryptMetadata flag to include metadata in encryption. @return byte array representing the computed password.
983 Computes an encrypted password using RC4 algorithm. @param ownerPassword The original owner's password. @param userPassword The user's password to be encrypted. @param encRevision The encryption revision (affects key computation). @param length Expected length of the output, throws exception if not met. @return Encrypted byte array representing the user's password. @throws IOException If expected length is not met for REVISION_2.
984 Rotates the matrix by given angle around the origin (0,0). @param theta rotation angle in radians
985 Adjusts the text position by translating it using (tx, ty). @param tx translation in x-direction @param ty translation in y-direction
986 Translates a 2D vector by its x and y components. @param vector The Vector object containing the x and y components to be translated
987 Concatenates two matrices by multiplying them in reverse order (b*a). @param a the first matrix to be multiplied @param b the second matrix to be multiplied @return the result of the multiplication, or null if not possible
988 Constructs a PDDocument from a COSDocument. @param doc the underlying COSDocument
989 Overrides token method to accept CharSequence and convert it to String before processing. @param text input sequence of characters to be processed as a token
990 Retrieves current access permission, initializing with owner permissions if not set. @return the current AccessPermission object
991 Computes revision number based on input version and access permissions. @param version the current version number @return the computed revision number
992 Encrypts or decrypts data using AES with provided key and IV. @param finalKey encryption/decryption key @param data input stream to be encrypted/decrypted @param output output stream for encrypted/decrypted data @param decrypt true if decryption, false if encryption
993 Encrypts or Decrypts data using AES-256 algorithm. @param data InputStream to be encrypted/decrypted @param output OutputStream for the result @param decrypt true if decryption is needed, false for encryption @throws IOException in case of I/O or security errors
994 Encrypts data using RC4 algorithm. @param finalKey encryption key, @param input plaintext bytes, @param output stream for encrypted bytes
995 Writes input stream to an output stream using a byte buffer. @param data InputStream to be written @param output OutputStream where the data is sent @throws IOException if there's an issue with reading from or writing to streams
996 Performs SASL Prep on input string. @param str the input string to be prepared for SASL authentication @return the processed string according to SASL Preparation rules
997 Performs SASL preparation on stored string. @param str input string to be prepared @return the SASL-prepared string
998 Fetches or creates FontBoxFont based on its format. Uses cache to avoid re-creation.
999 Saves disk cache by writing font information to a file. @throws SecurityException if permission is denied to write the file
1000 Sets a new FontProvider and updates the font information cache. @param fontProvider the new FontProvider to set
1001 Constructs a shaded triangle with given corners and colors. Calculates area, degree, and initializes line based on conditions. @param p Array of Point2D objects representing the triangle's corners @param c 2D array of floats representing the RGB color values for each corner
1002 Writes a custom CID-to-Unicode map to an output stream for PDF encoding. @param out the OutputStream where the data is written
1003 Loads a glyph list from the given filename with specified entries. @param filename name of the file to load @param numberOfEntries number of entries to include in the glyph list @return GlyphList object containing the loaded data @throws RuntimeException if the file is not found or an I/O error occurs
1004 Fetches or generates a mapping of GIDs to codes. @return Map<Integer, Integer> where key is GID and value is corresponding code @throws IOException if an I/O error occurs during code generation for GID
1005 Initializes a PDICCBased object using an ICC color profile from the given COSArray. @param iccArray contains ICC profile and associated stream @throws IOException if there's an error reading the stream
1006 Ends text clip by intersecting current clipping path with buffered clippings and resets them.
1007 Sets and transfers clipping paths to graphics. Handles initial clip transformation if needed.
1008 Fetches data to be signed from a PDF. Throws exception if not ready for signing. @return InputStream containing the bytes to sign or throws IllegalStateException
1009 Merges a diacritic into the text position. It determines where to insert the diacritic based on its overlap with characters. @param diacritic TextPosition object containing the diacritic to be merged
1010 Checks if a given text position overlaps with this text position by at least 15%.
1011 Checks if the current TextPosition completely contains another. @param tp2 Another TextPosition object to be checked @return True if it completely contains, False otherwise
1012 Writes a paragraph separator by ending the current paragraph and starting a new one. @throws IOException if an I/O error occurs during writing
1013 Writes a COSName to the OutputStream and appends a space character. @param output the stream where the COSName will be written @param cosName the name object to write to the stream @throws IOException if an I/O error occurs while writing to the stream
1014 Writes an operand to the PDF output stream in a formatted way. @param name COSName object representing the operand @throws IOException if writing to the output stream fails
1015 Writes a byte array to an OutputStream as ASCII or hexadecimal based on content. @param bytes the input byte array @param forceHex true to always write as hex, false for ASCII if possible @param output the destination stream
1016 Initializes a PDFMarkedContentExtractor with specified encoding and adds relevant operators. @param encoding the character encoding to be used for text extraction
1017 Initializes a PDFTextStripper with operators for handling marked content.
1018 Retrieves an object from dictionary using a string key. @param key the name of the object to retrieve @return COSBase object associated with the key or null if not found
1019 Fetches an item by its PDF name key. @param key the PDF name of the item @return COSBase object corresponding to the key, or null if not found
1020 Checks if a COSName object, created from the given string, exists in the map. @param name String to be converted into COSName and checked for existence @return true if the corresponding COSName object is found; otherwise, false
1021 Fetches a filter by its name in both string and COSName formats. @param filterName the name of the filter to fetch @return the Filter object corresponding to the given name @throws IOException if there's an error while retrieving the filter
1022 Parses a COS name from the input stream, handling '#' escapes for hexadecimal characters. @return The parsed COS name or null if an error occurs during parsing @throws IOException If there is an issue reading from the input stream
1023 Constructs a PDColor object from COSArray and PDColorSpace. Extracts color components and pattern name. @param array input data in COSArray format @param colorSpace the color space to be used for interpreting the color values
1024 Retrieves a cached or creates a new COSInteger for the given value. @param val long value to retrieve or create COSInteger for @return existing or newly created COSInteger object
1025 Parses a hexadecimal string into a COSString object, handling whitespace and malformed strings. @param hex the input hexadecimal string @return a COSString object representing the parsed hexadecimal value @throws IOException if the input string is not a valid hexadecimal string
1026 Initializes a new instance of COSArrayList with an empty COSArray and an empty ArrayList.
1027 Constructor for COSArrayList. Initializes a new instance with the given dictionary and key. @param dictionary COSDictionary object to initialize array from @param dictionaryKey COSName object representing the key in the dictionary
1028 Initializes an empty page destination array.
1029 Constructs a PDRectangle with specified coordinates and dimensions. @param x X-coordinate of the rectangle's bottom left corner @param y Y-coordinate of the rectangle's bottom left corner @param width Width of the rectangle @param height Height of the rectangle
1030 Initializes a PDRectangle with the dimensions of a given BoundingBox. @param box The BoundingBox object providing coordinates for the rectangle.
1031 Creates a new COSStream and adds it to the document's stream collection for later closure. @return A newly created COSStream object
1032 Initializes an empty COSStream.
1033 Initializes COSStream with a cache and read view for random access. @param streamCache the cache to use for the stream @param randomAccessReadView the read view for random access to the stream @throws IOException if an I/O error occurs during initialization
1034 Returns an unmodifiable version of this COSDictionary. @return a new, read-only COSDictionary instance
1035 Fetches the latest decoded result from a list. @return The last DecodeResult object in the list or a default if empty
1036 Retrieves and returns resources from COS object. Handles empty resource cases. @return PDResources object or null if not available or empty
1037 Protected constructor for PDAttributeObject.
1038 Constructs a new PDUserProperty with the given user attribute object. @param userAttributeObject contains attributes for the user property
1039 Default constructor for PDOutlineNode class.
1040 Initializes an empty PDDestinationNameTreeNode.
1041 Initializes an empty PDEmbeddedFilesNameTreeNode.
1042 Constructs an empty PDJavascriptNameTreeNode.
1043 Default constructor for PDStructureElementNameTreeNode. Calls the parent class' default constructor.
1044 Constructs a new non-terminal field in an AcroForm. @param acroForm the parent AcroForm object for this field
1045 Constructs a new PDTerminalField object with the given PDAcroForm. @param acroForm an instance of PDAcroForm for this terminal field
1046 Constructs a PDLayoutAttributeObject from a COSDictionary. @param dictionary the input COSDictionary to create the object
1047 Constructs PDListAttributeObject from COSDictionary. @param dictionary input data structure to initialize object
1048 Constructs a PDPrintFieldAttributeObject from a COSDictionary. @param dictionary PDF dictionary containing print field attributes
1049 Initializes PDTableAttributeObject with a COSDictionary. @param dictionary input data in a COSDictionary format
1050 Constructs an appearance stream from a COSStream. @param stream The input COSStream to create the appearance stream from.
1051 Constructs a new PDTransparencyGroup from the given COSStream and ResourceCache. @param stream Input data stream for transparency group @param cache Resource cache to optimize resource access and management
1052 Adds a TrueType Collection (TTC) font file to the system. Handles loading and processing of TTC files, computes hash for verification. @param ttcFile the TrueType Collection file to add
1053 Adds TrueType font to the list based on provided headers and metadata. Ignores invalid or bitmap fonts, logs warnings for skipped entries. @param fontHeaders Font header information @param file Font file @param hash Unique identifier for the font data
1054 Adds a Type 1 font to the fontInfoList from a PFB file. @param pfbFile The PostScript Type 1 font file in PFB format.
1055 Creates a PDDestination object based on the provided COSBase. @param base the input data for creating the destination @return a PDDestination object or null if base is null, throws IOException if conversion fails
1056 Initializes a PDCheckBox object from an AcroForm, field dictionary, and parent field. @param acroForm the form containing this field @param field the field's dictionary @param parent the parent field of this checkbox
1057 Constructs a push button field in a PDF form. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field @param parent the non-terminal field that contains this field
1058 Constructs a PDRadioButton object. @param acroForm the AcroForm this field belongs to @param field the COSDictionary representing the field @param parent the non-terminal field that contains this radio button
1059 Creates a PDChoice object from a form's field and dictionary. @param acroForm the PDF AcroForm @param field the COSDictionary containing field data @param parent the non-terminal field that contains this choice field
1060 Constructs a PDF text field with given form, dictionary, and parent. @param acroForm the PDF acroform this field belongs to @param field the COS dictionary representing this field @param parent the non-terminal field that contains this one (if any)
1061 Saves current graphics state by pushing a clone onto stack.
1062 Saves and resets the current graphics stack, returning the previous state for restoration. @return Deque of PDGraphicsState objects representing the previous graphics stack
1063 Constructs a new COSDocument with an in-memory stream cache.
1064 Returns a string representation of the COSDictionary object. Handles IOException by logging and returning an error message.
1065 Clips the current graphics state to a specified rectangle. @param rectangle The rectangle to use for clipping, if null no operation is performed.
1066 Transforms the bounding box of an appearance stream using its matrix and returns the result as a Rectangle2D object. @param appearanceStream the PDAppearanceStream to transform @return the transformed bounding box as a Rectangle2D object
1067 Initializes graphics state with a given page's boundaries as the initial clipping path. @param page the rectangle representing the page boundaries.
1068 Returns an integer value from a specific index in an array. @return The integer value at index 2 of the 'array' object.
1069 Returns the left value from the array at index 2. @return The integer value at index 2 of the array
1070 Returns the element at index 3 from an integer array. @return The integer value at index 3 in the array
1071 Returns the right value from an integer array at index 4. @return The integer value at index 4 of the array
1072 Retrieves the integer at index 5 from an internal array. @return The integer value at index 5 in the internal array
1073 Retrieves the third element from an integer array. @return The value of the third element in the integer array
1074 Fetches an integer value from a specific index in an array. @return Integer value at index 2 of the array
1075 Fetches the integer value at index 3 from an internal array. @return The integer value at index 3 in the array
1076 Checks if the array's second element is of type BOUNDED. @return true if it's BOUNDED, false otherwise
1077 Checks if the second element in an array is of type BOUNDED. @return true if the second element is BOUNDED, false otherwise
1078 Checks if the second element in the array is of type 'TYPE_BOUNDED'. @return true if it matches, false otherwise
1079 Creates an output stream with default settings. @return An OutputStream object used for writing data @throws IOException if an input or output exception occurs
1080 Creates an output stream with the specified filter. @param filter The COSName filter to use for the output stream @return OutputStream object @throws IOException if an I/O error occurs
1081 Creates a thumbnail image object from the given COS stream. @param cosStream the input stream containing image data @return PDImageXObject representing the created thumbnail
1082 Fetches the mask associated with a PDF image object. @return PDImageXObject for the mask or null if not found or color key masked
1083 Retrieves the soft mask image object from a COS stream. @return PDImageXObject if soft mask exists (always DeviceGray), otherwise null
1084 Writes an AffineTransform object to output stream as float operands. @param transform the AffineTransform object to be written @throws IOException if an I/O error occurs during writing
1085 Begins a text segment, throws exception if already in text mode. @throws IOException if an I/O error occurs
1086 Ends text mode and writes the END_TEXT operator. @throws IllegalStateException if called without prior beginText() call
1087 Sets the text leading value and writes it to the output stream. @param leading The amount of additional space between lines of text @throws IOException if an I/O error occurs while writing to the stream
1088 Writes a new line in the text mode. Throws exception if not in text mode.
1089 Moves the text cursor to a new line at specified offsets within current text mode. @param tx X-coordinate for the new line position @param ty Y-coordinate for the new line position @throws IOException if an I/O error occurs during operation
1090 Saves current graphics state to stack, throws exception if in text mode. @throws IOException if an I/O error occurs while writing operator.
1091 Restores the graphics state by popping font and color space stacks, then writes a RESTORE operator. Throws IllegalStateException if called within text objects. @throws IOException if an I/O error occurs during operation
1092 Sets the stroking color using RGB values. Throws exception if values are not within 0..1. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs
1093 Sets stroking color in CMYK format. Throws exception if values are not within 0..1. @param c cyan value (0 = no cyan, 1 = full cyan) @param m magenta value (0 = no magenta, 1 = full magenta) @param y yellow value (0 = no yellow, 1 = full yellow) @param k key/black value (0 = no black, 1 = full black) @throws IOException if writing color fails
1094 Sets the stroking color with a grayscale value, ensuring it's within 0..1 range. @param g Grayscale value (0=black, 1=white) @throws IOException if writing operations fail
1095 Sets the non-stroking color using RGB values. Throws exception if values are not within 0..1. @param r red value (0..1) @param g green value (0..1) @param b blue value (0..1) @throws IOException if error occurs while writing color data
1096 Sets non-stroking CMYK color with values between 0 and 1.
1097 Sets the non-stroking color using a gray value (0..1). @param g gray value between 0 and 1; throws exception if outside this range @throws IOException if an error occurs while writing the color operator
1098 Adds a rectangle to the canvas at given coordinates and dimensions. Throws exception if called within a text block. @param x top left corner x-coordinate, y top left corner y-coordinate, width, height of rectangle @throws IOException if there is an error writing to the output stream
1099 Draws a cubic Bezier curve from the current point to (x3, y3) using control points (x1, y1) and (x2, y2). Throws an exception if called within text mode.
1100 Draws a curve using the specified control points, throwing exception if used within a text block. @param x2 X-coordinate of first control point @param y2 Y-coordinate of first control point @param x3 X-coordinate of second control point @param y3 Y-coordinate of second control point @throws IllegalStateException if used within a text block
1101 Draws a curve to the specified point, replicating final point. Throws exception if used within text block. @param x1 X-coordinate of control point @param y1 Y-coordinate of control point @param x3 X-coordinate of end point @param y3 Y-coordinate of end point
1102 Moves the drawing point to specified coordinates (x, y). Throws exception if used within a text block. @param x new horizontal coordinate @param y new vertical coordinate @throws IOException if writing operands or operator fails
1103 Draws a line to the specified coordinates. Throws an exception if called within a text block. @param x - the x-coordinate for the end of the line @param y - the y-coordinate for the end of the line @throws IllegalStateException if called within a text block
1104 Draws the current path, throwing exception if called within a text block. @throws IOException if an I/O error occurs while writing operator @throws IllegalStateException if stroke is not allowed within a text block
1105 Closes and strokes the current path. Throws exception if called within a text block. @throws IOException if an I/O error occurs while writing operator
1106 Fills the graphics context with non-zero pixels, throwing an exception if called in text mode. @throws IllegalStateException if fill is attempted within a text block @throws IOException if an I/O error occurs during write operation
1107 Fills even and odd cells based on OperatorName.FILL_EVEN_ODD. Throws exception if used in text mode.
1108 Fills and strokes the current path if not in text mode, throws exception otherwise. @throws IllegalStateException if called within a text block
1109 Fills and strokes even-odd rule if not in text mode, throws exception otherwise.
1110 Closes, fills and strokes the current path in graphics context. Throws exception if called within text mode. @throws IllegalStateException if used within a text block @throws IOException for potential I/O errors during write operation
1111 Closes, fills and strokes even-odd path segments. Throws exception if used within text mode. @throws IllegalStateException if used within a text block
1112 Closes the current path in graphics context, throwing exception if called within a text block. @throws IOException if an I/O error occurs while writing operator @throws IllegalStateException if method is called within a text block
1113 Clips the graphics context using the current path and non-zero winding rule, then ends the path. Throws exception if called within a text block. @throws IOException if an I/O error occurs while writing operators
1114 Clips even-odd rule to the current path in a non-text block, throws exception if used within text mode. @throws IllegalStateException if called within a text block @throws IOException if there is an I/O error during writing
1115 Sets the width of the drawing line and writes it to a data stream. @param lineWidth the desired width for the line @throws IOException if an I/O error occurs while writing to the stream
1116 Sets the line join style. Throws IOException or IllegalArgumentException if input is invalid. @param lineJoinStyle integer representing the line join style (0-2) @throws IOException if an I/O error occurs @throws IllegalArgumentException for invalid line join style values
1117 Sets the line cap style with a given integer value, throwing an exception if the value is invalid. @param lineCapStyle An integer representing the desired line cap style (0-2) @throws IOException If there's an issue writing to the stream @throws IllegalArgumentException If the lineCapStyle value is outside of the valid range
1118 Sets the line dash pattern for drawing operations. @param pattern an array of float values representing dash lengths @param phase a float value that specifies the offset into the dash pattern
1119 Sets the miter limit for line joins. Throws exception if miter limit is less than or equal to 0. @param miterLimit the new miter limit value @throws IOException if an I/O error occurs while writing the data
1120 Ends marked content in an output stream by writing END_MARKED_CONTENT operator. @throws IOException if an I/O error occurs while writing to the output stream
1121 Sets character spacing and writes it to a stream. @param spacing the desired character spacing value @throws IOException if writing operations fail
1122 Sets word spacing and writes it to output with SET_WORD_SPACING operator. @param spacing the amount of spacing between words @throws IOException if error occurs while writing to output
1123 Sets horizontal scaling for text rendering and writes to output stream. @param scale the desired horizontal scaling factor @throws IOException if an I/O error occurs during write operation
1124 Sets the rendering mode and writes it to a stream. @param rm RenderingMode to be set @throws IOException if writing to the stream fails
1125 Sets the text rise value and writes it to a stream. @param rise The vertical distance to raise or lower the text baseline from its normal position @throws IOException If an I/O error occurs while writing to the stream
1126 Constructs a PDRectangle from a float array, handling large values as per PDF specification. @param array input array with 4 float values representing rectangle coordinates
1127 Constructs line dash pattern for PDF, adjusting phase if necessary. @param array COSArray of float values defining dash pattern @param phase Initial phase (may be adjusted to positive value)
1128 Returns a string representation of PDRange in the format "PDRange{min, max}" @return String representing the range
1129 Evaluates input values against a predefined function and returns resultant values. @param input float array of values to be processed @return float array containing evaluated output values @throws IOException if there's an issue with the function execution
1130 Reads a patch from an image input stream based on provided parameters. @param input the source of the image data @param isFree indicates if the patch is free or not @param implicitEdge edge points for non-free patches @param implicitCornerColor corner colors for non-free patches @return a Patch object, or null on EOFException
1131 Reads a vertex from an image stream and applies transformations. @param input ImageInputStream to read from @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color component value @return Vertex object with transformed coordinates and color components
1132 Fetches and returns the gamma color before the current index. @return PDGamma object representing the before color, or null if not found
1133 Fetches and returns the gamma value after color adjustment. @return The PDGamma object at index 1, or null if not found
1134 Fetches and returns the starting color from the color palette. @return The PDGamma object representing the starting color
1135 Fetches the ending color from an indexed list. @return The ending color as a PDGamma object
1136 Retrieves the blend mode from the dictionary object. @return The blend mode instance if found, otherwise null
1137 Creates a matrix from the provided base object, validating its type and content. @param base The input object to create the matrix from (COSArray expected) @return A Matrix object based on the input; empty if validation fails or incompatible type
1138 Sets the highest imported object number in the document.
1139 Retrieves a COSDictionary object using two keys. @param firstKey the primary key for retrieval @param secondKey the secondary key for retrieval @return COSDictionary if found, otherwise returns null
1140 Retrieves a boolean value from dictionary using two keys. @param firstKey primary key for dictionary lookup @param secondKey secondary key for dictionary lookup @param defaultValue fallback value if key not found or value is not a boolean @return boolean value or defaultValue if not found or not a boolean
1141 Retrieves an integer value from a dictionary object. @param firstKey primary key for the object @param secondKey secondary key for the object @param defaultValue value to return if no integer is found @return int value or defaultValue if not found or not an integer
1142 Retrieves a list of filter names from the parameters object. @return List<String> containing filter names or an empty list if not found
1143 Retrieves the color space of an object. If not already set, creates and sets it. @return The color space of the object @throws IOException if there is an error creating or retrieving the color space
1144 Checks if a given dictionary is of catalog type in PDF context. @param dictionary COSDictionary object to be checked @return true if it's a catalog, false otherwise
1145 Checks if a given COSDictionary represents a page tree node in PDF structure. @param node the COSDictionary to be checked @return true if it is a page tree node, false otherwise
1146 Retrieves the crypt filter method from the dictionary. @return The crypt filter method as a COSName object
1147 Fetches and returns the stream filter name from a dictionary. If not found, defaults to IDENTITY.
1148 Fetches the string filter name from a dictionary. @return The string filter name or IDENTITY if not found in the dictionary
1149 Decrypts a given dictionary based on object and generation numbers. Ignores signatures.
1150 Converts a font code to its corresponding Unicode string using a ToUnicode CMap. @param code the font code to convert @return the Unicode string or null if conversion is not possible
1151 Fetches the subtype of this object, initializing it with a default if not already set. @return COSName representing the subtype of this object
1152 Retrieves the relationship type from the dictionary. @return The COSName representing the relationship type.
1153 Retrieves the appearance state from the COS object. @return The COSName representing the appearance state, or null if not found.
1154 Checks if a trailer's COSDictionary is encrypted. @return true if encrypted, false otherwise
1155 Retrieves the encryption dictionary from the trailer. @return The encryption dictionary or null if not found
1156 Parses the PDF document and retrieves the root dictionary from the trailer. @throws IOException if the root object specification is missing in the trailer.
1157 Retrieves the AcroForm of a PDF document with optional fixups. @param acroFormFixup object to apply fixes to the AcroForm @return PDAcroForm object or null if not available
1158 Retrieves viewer preferences from the PDF document. @return PDViewerPreferences object or null if not found in the document
1159 Fetches and returns the document's name dictionary or null if it doesn't exist.
1160 Fetches and returns the destination dictionary from PDF root, or null if not found. @return PDDocumentNameDestinationDictionary object or null if not found
1161 Retrieves mark information from the root dictionary. @return PDMarkInfo object if found, otherwise null
1162 Fetches and returns the URI dictionary from the document's root, or null if not found.
1163 Retrieves the structure tree root of a PDF document. @return PDStructureTreeRoot object or null if not found in the document
1164 Fetches and returns optional content properties from the root dictionary. @return PDOptionalContentProperties object or null if not found in the root dictionary
1165 Fetches and returns a destination name tree node from the document's name dictionary or catalog. @return PDDestinationNameTreeNode object or null if not found in either location
1166 Retrieves the embedded files tree node from the name dictionary. @return PDEmbeddedFilesNameTreeNode if found, otherwise null
1167 Fetches JavaScript node from the name dictionary. @return PDJavascriptNameTreeNode or null if not found in the dictionary
1168 Fetches and returns a PDTransition object from the page's dictionary, or null if not found.
1169 Retrieves a COSObject from the resources dictionary using provided kind and name. @param kind The type of resource to search for (COSName) @param name The specific resource to retrieve (COSName) @return Corresponding COSObject or null if not found or not an indirect object
1170 Retrieves a resource object based on its kind and name from the resources dictionary. @param kind Resource type (COSName) @param name Resource identifier (COSName) @return COSBase object or null if not found
1171 Returns names of a specific kind from the resources dictionary. @param kind type of name to retrieve @return iterable set of names or empty if not found
1172 Retrieves a page object from the COS dictionary, or returns null if not found. @return PDPage object or null if not present in the COS dictionary
1173 Fetches a page from the COSDictionary object. @return PDPage object or null if not found in the dictionary
1174 Fetches a specific page from the PDF document. @return PDPage object or null if not found in the document
1175 Retrieves the ID tree as a node object from the COSDictionary. @return PDStructureElementNameTreeNode if ID tree exists, otherwise null
1176 Fetches the parent tree node from COS dictionary if it exists. @return Parent tree node object or null if not found.
1177 Fetches and processes a map of classes from the COS object's dictionary. @return Map<String, Object> containing processed PDAttributeObjects or Lists thereof
1178 Retrieves crypt filter dictionary for a given crypt filter name. @param cryptFilterName the name of the crypt filter @return Crypt filter dictionary or null if not found
1179 Retrieves the border style from a COS dictionary in annotations. @return PDBorderStyleDictionary object or null if not found
1180 Fetches and returns a border effect dictionary from the annotation, or null if none exists.
1181 Retrieves the digital signature from a PDF catalog dictionary, if present. @return PDSignature object or null if not found in the PDF catalog
1182 Retrieves JavaScript object from FDF dictionary if it exists, otherwise returns null. @return FDFJavaScript object or null if not found in the FDF dictionary
1183 Retrieves the appearance dictionary for a PDF field. @return PDAppearanceDictionary object or null if not found
1184 Retrieves the appearance stream reference for a field, if it exists. @return FDFNamedPageReference object or null if not found
1185 Retrieves the icon fit from a field's COS dictionary. @return FDFIconFit object if found, otherwise null
1186 Fetches additional actions from a PDF field dictionary. @return PDAdditionalActions object or null if not found in the field
1187 Retrieves and encapsulates page information from a COSDictionary. @return FDFPageInfo object or null if no dictionary is found
1188 Retrieves the named page reference from a PDF template dictionary, if it exists. @return FDFNamedPageReference object or null if not found in the template dictionary.
1189 Fetches and returns the CID System Information from a dictionary object. @return PDCIDSystemInfo object or null if not found in the dictionary
1190 Retrieves Panose data from a COSDictionary style object. @return PDPanose object if found, otherwise null
1191 Fetches and returns the PDF resources. If not already loaded, it initializes them from a dictionary. @return PDResources object containing PDF resources
1192 Retrieves the character processing dictionary from an object. @return COSDictionary containing character processing data, or null if not found
1193 Retrieves the device N process from a COSDictionary. @return PDDeviceNProcess object or null if not found in dictionary
1194 Fetches the render state based on the destination (PRINT, VIEW). Falls back to EXPORT if not found. @param destination the rendering target (PRINT or VIEW) @return corresponding RenderState object or null if not found
1195 Fetches and creates an extended graphics state if not already present. @return Extended graphics state object or null if not found or created
1196 Fetches and returns the PDF resources from the object. @return PDResources object or null if not found in COSDictionary
1197 Retrieves the target directory from a COS object dictionary, if it exists. @return PDTargetDirectory object or null if not found in the dictionary
1198 Retrieves Windows launch parameters from a COS dictionary. @return PDWindowsLaunchParams object or null if not found in the action's dictionary
1199 Fetches the target directory from a COS dictionary object. @return PDTargetDirectory object or null if not found in the dictionary
1200 Fetches the appearance dictionary from the object's internal dictionary. @return PDAppearanceDictionary if found, otherwise returns null
1201 Fetches a specific page from the PDF document. @return PDPage object representing the page, or null if not found
1202 Retrieves the border effect dictionary from a COS object. @return PDBorderEffectDictionary if BE exists, otherwise null
1203 Retrieves the border style from a COS object as a PD border style dictionary. @return A PD border style dictionary or null if not found in the COS object
1204 Fetches the previous URI from the COS object if it exists. @return PDActionURI object or null if not found
1205 Fetches external data from the COS object and returns it as a dictionary. @return PDExternalDataDictionary if external data exists, otherwise null
1206 Retrieves the border style dictionary from a COS object, if it exists. @return Border style dictionary or null if not found
1207 Fetches and returns the border effect dictionary from a COS object, if available. @return Border effect dictionary or null if not found
1208 Fetches and returns the border effect dictionary from a COS object, or null if not found.
1209 Retrieves appearance characteristics from the COS object's dictionary. @return PDAppearanceCharacteristicsDictionary or null if not found in the COS object
1210 Fetches additional actions for a PDF annotation. @return PDAnnotationAdditionalActions object or null if not found
1211 Retrieves the border style from a COS dictionary object. @return A PDBorderStyleDictionary object or null if not found in the COS dictionary.
1212 Retrieves the normal appearance entry from a COSDictionary. @return PDAppearanceEntry object or null if not found in dictionary
1213 Fetches the filter data dictionary from the PDF object. @return PDPropBuildDataDict object or null if not found in PDF object
1214 Retrieves the Public Security Dictionary from the object's dictionary. @return PDPropBuildDataDict object or null if not found in the dictionary.
1215 Fetches and returns the application data dictionary or null if not found. @return PDPropBuildDataDict object containing application data or null if not found
1216 Fetches and returns a PDSeedValueMDP from the dictionary using key "MDP".
1217 Fetches the SEED value certificate from a COSDictionary. @return PDSeedValueCertificate object or null if not found in dictionary
1218 Retrieves the timestamp from a COSDictionary object. @return PDSeedValueTimeStamp object or null if not found in dictionary
1219 Fetches and returns a PDPropBuild object from the dictionary, or null if not found.
1220 Retrieves the structure element from a COS dictionary. @return A PDStructureElement object or null if not found in the dictionary
1221 Checks if the object contains any child objects in its COS dictionary. @return true if children exist, false otherwise
1222 Retrieves the default resources from a COSDictionary object. @return PDResources object or null if not found in dictionary
1223 Retrieves additional actions from the form field's dictionary. @return PDFormFieldAdditionalActions object or null if not found
1224 Retrieves the PDF signature from the COS dictionary. @return PDSignature object or null if not present in COS dictionary
1225 Retrieves the default signature from a COS dictionary, if it exists. @return PDSignature object or null if not found in the dictionary
1226 Retrieves the seed value from a COS dictionary if it exists, otherwise returns null. @return PDSeedValue object or null if not found in the dictionary
1227 Retrieves the measure dictionary from a COS object. @return PDMeasureDictionary object or null if not found in COS object
1228 Retrieves document information from a thread. @return Document information or null if not available.
1229 Retrieves the first bead from a PDF thread dictionary. @return First PDThreadBead object or null if not found in the thread's COSDictionary
1230 Retrieves a PDThread object from the bead's COSDictionary, if available. @return PDThread object or null if not found in the dictionary
1231 Retrieves the next thread bead in a sequence, encapsulated as a PDThreadBead object. @return PDThreadBead object representing the next bead in the sequence
1232 Returns the previous bead in the thread with COSDictionary from the current bead's V key. @return Previous PDThreadBead object or null if not found
1233 Fetches and returns a page from the PDF document if it exists, otherwise returns null. @return PDPage object or null if not found in the document
1234 Retrieves metadata from the PDF document. @return PDMetadata object or null if not present in the document
1235 Retrieves and returns the metadata of a page in PDF stream format, or null if not available. @return PDMetadata object containing metadata information or null if unavailable
1236 Fetches and returns the differences stream from the PDF document.
1237 Retrieves the font file as a PDStream object from a given dictionary. @return PDStream object containing the font file or null if not found
1238 Retrieves the font file from a dictionary as a PDStream object. @return PDStream containing the font data or null if not found
1239 Retrieves the font file 3 from a dictionary object, if it exists. @return PDStream object for the font file 3 or null if not found
1240 Fetches and returns a CID set stream from the dictionary. @return PDStream object or null if not found in the dictionary
1241 Fetches and returns the sound stream from the action object. @return The COSStream representing the sound, or null if not found
1242 Fetches and returns a normal icon as a form XObject from the COSStream, or null if not found
1243 Retrieves the rollover icon as a form XObject from the COS stream. @return PDFormXObject if rollover icon exists, otherwise returns null
1244 Fetches an alternate icon as a form XObject from the COSStream, if available. @return PDFormXObject object or null if not found in the IX stream
1245 Fetches and returns the document ID from the trailer's COS array. @return COSArray containing the document ID, or null if not found
1246 Retrieves the output intents from a PDF document. @return List of PDOutputIntent objects, may be empty if none exist
1247 Fetches and returns thread beads from a page as a list. @return List of PDThreadBead objects; empty if none found
1248 Retrieves and returns a list of PDViewportDictionary objects from the page's COSArray. @return List of PDViewportDictionary or empty list if none found
1249 Retrieves a list of child nodes from the current node. @return List of PDNameTreeNode<T> objects or null if no children exist
1250 Retrieves a map of names from a COS array and converts them to a specific type T. @return Map with string keys and values of type T, or null if the COS array is not found @throws IOException if an unexpected object type is encountered in the array
1251 Retrieves and returns a list of children nodes from the number tree node. @return List of PDNumberTreeNode objects or null if no children exist
1252 Retrieves a map of integers to COSObjectable objects from the node's numbers array. @return An unmodifiable map or null if an error occurs during conversion @throws IOException If there is an issue reading the numbers array
1253 Fetches the upper limit from a COSArray node at index 1. @return Upper limit as an Integer, or null if not found
1254 Fetches the lower limit from a COSArray in the node. @return Lower limit as Integer or null if not found
1255 Fetches and returns the COSArray of range values, initializing it if necessary. @return The COSArray containing range values or null if not found
1256 Retrieves the COSArray of domain values, initializing it if necessary. @return The COSArray containing domain values
1257 Fetches and returns the size of a COSArray object, initializing it if needed. @return The COSArray representing the size or null if not found
1258 Retrieves decoding values. If not already set, fetches from COSArray or defaults to range values. @return COSArray of decoding values
1259 Returns the array of functions, initializing it if not already done. @return COSArray object containing the functions
1260 Retrieves the boundary values of a COS object. If not already fetched, fetches and stores the boundaries in 'bounds'. @return The array containing the boundary values
1261 Fetches and returns the encoded COSArray object, initializing it from the COSObject if null. @return The encoded COSArray object
1262 Fetches and returns a list of user properties owned by the object. @return List of PDUserProperty objects or an empty list if none found
1263 Checks if a specific edge is attached in the properties array. @param edge The edge to check for attachment @return True if the edge is found, otherwise false
1264 Retrieves a color object from annotated data, if available. @return Color object or null if not found in the annotation
1265 Retrieves the interior color from annotations. @return Interior Color object or null if not found or invalid format
1266 Retrieves callout values from the annotation. @return float array of callout values or null if not present
1267 Fetches the list of ink coordinates from annotation. @return List of float arrays representing ink coordinates, or null if not found (which should not occur)
1268 Fetches a line from the annotation as a float array. @return Float array representing the line or null if not found
1269 Fetches the starting point ending style of a line annotation. @return The name of the ending style or "None" if not found.
1270 Returns the ending style of an annotation's endpoint, or a default value if not found. @return Ending style as String, or "None" if not specified
1271 Retrieves the interior color from an annotation array, if available. @return Interior color as a Color object or null if not found or invalid data
1272 Fetches the horizontal offset of a caption from its COSArray data. @return The first float value in the 'CO' array, or 0 if not found.
1273 Retrieves the vertical offset for a caption in a PDF annotation. @return Vertical offset value as float, or 0 if not found
1274 Retrieves vertices from a COSArray. @return float array of vertices or null if not found
1275 Fetches the interior color from annotations, if available. @return Color object or null if not found in annotations
1276 Fetches vertex data from annotation. @return float array of vertices or null if not found
1277 Retrieves the starting point ending style of a line annotation. @return Starting point ending style or LE_NONE if not defined
1278 Fetches the ending style of the line annotation endpoint. @return Ending style as a String, or LE_NONE if not defined
1279 Retrieves the interior color from annotation, if available. @return Interior color as a Color object or null if not found in annotation
1280 Retrieves the interior color from an annotation. @return Interior Color as a Color object or null if not found/invalid
1281 Fetches and returns the coordinate points of an annotation as a float array. @return Float array of coordinates or null if not found (shouldn't occur)
1282 Fetches and returns the ID array from the document. @return COSArray containing document IDs or null if not found
1283 Retrieves and returns a list of FDFField objects from the fdf object. @return List<FDFField> or null if no fields are found in the fdf object
1284 Retrieves a list of FDFPages from the FDF object. @return List of FDFPage objects or null if not found
1285 Retrieves a list of child fields (FDFField objects) from the current field. @return List<FDFField> or null if no children exist
1286 Retrieves and processes options from a COSArray into a List of Objects. @return List containing processed objects or null if no options found
1287 Retrieves a list of FDFTemplates from the page object. @return List of FDFTemplates or null if no templates are found
1288 Retrieves a list of FDFField objects from the template's COSArray. @return List<FDFField> if fields exist, otherwise returns null
1289 Retrieves the list of widths from the dictionary or returns an empty list if not found. @return List<Float> containing width values or an empty list
1290 Retrieves the transformation matrix from a dictionary. If no matrix is found, returns an identity matrix. @return float array representing the transformation matrix
1291 Retrieves a list of component names from the dictionary. @return List of component names or empty if none are found
1292 Fetches the background array from a COSDictionary object. @return COSArray of background elements, or null if not found
1293 Fetches and returns the COSArray representing the domain. If not already fetched, it retrieves from the underlying COSObject. @return COSArray object representing the domain
1294 Fetches the extended COSArray object associated with this object. If not already fetched, it retrieves from the underlying COSObject using EXTEND key. @return The extended COSArray or null if not found or an error occurred during fetching.
1295 Retrieves and returns the COSArray representing the document's domain. If not already retrieved, it fetches from the underlying COSObject. @return The COSArray representation of the document's domain
1296 Retrieves the coordinates as a COSArray object. If not already fetched, it obtains them from the COSObject. @return The coordinates as a COSArray or null if they don't exist
1297 Retrieves and returns the decoding values as a COSArray object. @return COSArray of decoding values or null if not present
1298 Retrieves the font setting from a dictionary object. @return PDFontSetting object if found, otherwise returns null
1299 Retrieves the fields array from an underlying action object. @return COSArray containing field data, or null if not present
1300 Retrieves the fields from an internal data structure as a COSArray. @return COSArray of fields or null if not found
1301 Fetches and returns rectangular differences as a float array. If no data is available, an empty array is returned.
1302 Fetches an array of rectangle differences from a COS object. @return Float array of rectangle differences or empty if not found
1303 Fetches a float array from the 'CL' key in the COS object, if it exists. @return Float array or null if not found
1304 Fetches a list of floats representing ink data from the COSObject. @return 2D float array containing ink data, or an empty array if not found
1305 Retrieves a line as an array of floating-point numbers from the COS object. @return float array representing a line, or null if not found
1306 Fetches the start point ending style from a COSArray or returns default if not found. @return Start point ending style as string or "LE_NONE" if not available.
1307 Fetches the endpoint ending style from a COSArray or returns default if not found. @return Endpoint ending style as a String, defaults to LE_NONE if not available
1308 Retrieves the horizontal offset for a caption from a COSArray object. @return The first float value in the COSArray or 0 if the array is null.
1309 Fetches and returns the second vertical offset from a COSArray, or 0 if not found.
1310 Retrieves quadrilateral points from a COS object as a float array. @return Float array of quadrilateral points or null if not found
1311 Fetches and returns the vertices as a float array from the COS object. @return Float array of vertices or null if not found in the COS object
1312 Fetches and returns a 2D array of floats representing the object's path. Returns null if no path is found. Each sub-array contains floating point numbers from COSArray objects.
1313 Fetches the starting point ending style from a COSArray object. @return The name of the style or "None" if not found or invalid data
1314 Retrieves the endpoint ending style from a COSArray. @return Endpoint ending style as a string or "None" if not found in array
1315 Retrieves vertex coordinates as a float array from the COS object. @return Float array of vertex coordinates or null if not found
1316 Fetches and returns the rectangular differences as a float array. @return float array of rectangular differences or an empty array if not found
1317 Retrieves quad points from a COS object as an array of floats. @return float array of quad points or null if not present
1318 Retrieves sub-filter names from a dictionary object. @return List of sub-filter names or an empty list if none exist
1319 Retrieves the list of digest methods from a dictionary. @return List of digest method names, or an empty list if none found
1320 Retrieves a list of reasons from the dictionary object. @return List<String> containing reason strings or an empty list if none found
1321 Fetches legal attestations from the document's dictionary and returns them as a list of strings. @return List of string representations of legal attestations or an empty list if none are found
1322 Fetches the subject data as a list of byte arrays from a COS dictionary. @return List<byte[]> containing subject data or null if not found in dictionary
1323 Retrieves a list of key usage extensions from the dictionary. @return List<String> containing key usage extensions or null if not found
1324 Fetches the issuer from a COS dictionary as a list of byte arrays. @return List of byte arrays representing the issuer or null if not found
1325 Fetches and returns a list of byte arrays from the OID (Object Identifier) in the dictionary. @return List of byte arrays or null if no OID is found
1326 Fetches a range of bytes from the dictionary. @return An integer array representing the byte range, or an empty array if not found.
1327 Retrieves a list of PDFields in the calculated order from COSArray CO. @return List of PDField objects or an empty list if not found
1328 Retrieves a list of selected options' indices. @return List of integers representing the indices, or an empty list if none are selected
1329 Fetches and returns an array of PDNumberFormatDictionaries from the COSObject. @return Array of PDNumberFormatDictionary objects or null if not found
1330 Retrieves an array of number format dictionaries from the COSObject's Y array. @return Array of PDNumberFormatDictionary objects or null if not found
1331 Fetches and returns an array of number format dictionaries for distances. @return Array of PDNumberFormatDictionary objects or null if not found
1332 Retrieves an array of number format dictionaries from the COS object. @return Array of PDNumberFormatDictionary objects or null if not found.
1333 Retrieves an array of number format dictionaries from the COS object. @return Array of PDNumberFormatDictionary objects, or null if not found
1334 Retrieves an array of line slope dictionaries from the COS object. @return Array of PDNumberFormatDictionary objects or null if not found
1335 Fetches the origin of the coordinate system as a float array. @return Float array representing the origin coordinates, or null if not found
1336 Retrieves visibility policy from dictionary. @return COSName object representing the visibility policy
1337 Fetches a long value from the PDF document using the provided key. @param key the string name of the object to fetch @return the long value associated with the key, or -1 if not found
1338 Fetches a long value from the COSName key. If not found, returns default value (-1L). @param key unique identifier of type COSName @return long value or -1L if not found
1339 Retrieves a long value from COSName by key with a fallback default value. @param key the string identifier for the desired long value @param defaultValue the value to return if the key is not found @return the long value associated with the key or defaultValue if not found
1340 Sets and resolves the startxref for PDF processing, handling XRef objects and their chains. @param startxrefBytePosValue byte position value of the starting XRef object
1341 Retrieves a floating point value from a given PDF key. @param key the PDF key as a string @return the corresponding floating point value or -1 if not found
1342 Fetches a floating point value by key. If not found, returns default value (-1). @param key the identifier for the floating point value @return the floating point value or -1 if not found
1343 Fetches a float value from PDF by key, returns default if not found. @param key the name of the property to fetch @param defaultValue the value returned if key is not found @return float value associated with key or defaultValue if not found
1344 Retrieves the user unit value from a page. If the value is less than or equal to 0, it returns 1.0 as default. @return User unit value as float
1345 Returns the guideline width from the dictionary, defaulting to 1 if not found.
1346 Fetches the opacity value from annotations. Defaults to 1 if not found. @return Current opacity value as a float
1347 Fetches and returns the font weight value from a dictionary object. @return Font weight as a float; defaults to 0 if not found
1348 Retrieves the italic angle from a dictionary object. @return Italic angle as a float; defaults to 0 if not found
1349 Retrieves the ascent value from an internal dictionary. @return The ascent value as a float (default is 0 if not found)
1350 Retrieves the descent value from a dictionary object. @return Float value of descent or 0 if not found
1351 Retrieves the leading value from a dictionary using a predefined key. @return Float value of the leading attribute or default 0 if not found.
1352 Retrieves the cap height value, handling potential negative infinity issues. @return Cap height as a float value
1353 Retrieves the X height of a font, handling negative infinity values. @return The absolute value of X height if it was negative infinity, otherwise returns X height.
1354 Retrieves the STEM_V value from the dictionary. Defaults to 0 if not found. @return float value of STEM_V or 0 if not present
1355 Retrieves the STEM_H value from a dictionary, defaults to 0 if not found. @return The float value of STEM_H or 0 if not present in the dictionary
1356 Fetches and returns the average width from a dictionary object. @return Average width as a float, defaults to 0 if not found
1357 Retrieves the maximum width from a dictionary object. @return The maximum width as a float; defaults to 0 if not found
1358 Retrieves missing width from dictionary as a float value. Defaults to 0 if not found. @return The missing width as a float
1359 Retrieves the gamma value from the dictionary. Defaults to 1.0 if not found. @return float value of gamma
1360 Retrieves the X step value from a COS object. @return The X step value as a float, or default to 0 if not found.
1361 Returns the Y step value from COS object or default to 0 if not found.
1362 Retrieves and normalizes the volume level from an action object. @return A float value between -1 and 1 representing the volume level, defaults to 1 if out of range
1363 Retrieves the length of the leader line from a COS object. @return The length of the leader line as a float
1364 Retrieves the length of leader line extension from COS object. @return Float value representing the leader line extension length
1365 Retrieves the leader line offset length from the COS object. @return Leader line offset length as a float value
1366 Fetches and returns the constant opacity value from the COS object. @return The constant opacity value as a float, defaults to 1 if not found
1367 Retrieves the width value from a COS object's dictionary. Handles case where value is a COSName (returns 0 as per Adobe behavior). @return The width value as a float
1368 Returns the duration of an object in COS format. @return Duration as a floating-point number
1369 Retrieves the fly scale value from COS object. @return Fly scale value as a float
1370 Extracts regions from a given PDPage and prepares for text extraction. @param page the PDF page to extract regions from @throws IOException if an I/O error occurs during processing
1371 Fetches the color space. @return The PDColorSpace object or null if not found @throws IOException If an error occurs during fetching
1372 Creates a property list based on the type specified in the COSDictionary. @param dict Contains data and information about the object to create. @return A PDPropertyList object of the appropriate subclass or null if type is unsupported.
1373 Retrieves the line width from a float item by its CosName (LW). @return Line width as a Float value
1374 Retrieves the miter limit value from a float item. @return Miter limit as a Float object, or null if not found
1375 Fetches and returns the flatness tolerance value used in graphics operations.
1376 Fetches smoothness tolerance value. @return Smoothness tolerance as a float
1377 Fetches and returns the stroking alpha constant value from COSName.CA. @return Floating-point value representing the stroking alpha constant
1378 Fetches the non-stroking alpha constant value. @return Non-stroking alpha constant as a Float, or null if not found
1379 Fetches offsets of COS objects in BF search. Triggers search if not already done. @return Map with COS object keys and their corresponding offsets @throws IOException if an I/O error occurs during the search
1380 Writes a COSBase object to output stream and adds it to writtenObjects list. @param obj The COSBase object to be written @throws IOException if an I/O error occurs during writing
1381 Writes a reference to the COSBase object in specific format. @param obj The COSBase object to write a reference for @throws IOException if an I/O error occurs during writing
1382 Saves the current document to an OutputStream. @param output The stream where the document will be saved @throws IOException if there is a problem writing to the stream
1383 Clears all objects and triggers an update.
1384 Removes an entry from a collection by index and updates the state. @param i the index of the entry to be removed @return the removed COSBase object or null if not found
1385 Removes a COSBase object from the collection and updates state if successful. @param o The COSBase object to be removed @return True if removal was successful, false otherwise
1386 Clears all items and updates the state of this object.
1387 Removes an item by its unique key and updates the state
1388 Updates different origin in COSUpdateState if incrementOrigin's state differs. @param updateState the state object to be updated if necessary
1389 Sets `baseObject` to NULL and resets related state and parser.
1390 Sets the origin document state and updates related objects. @param originDocumentState the new document state to set @param dereferencing whether to perform dereferencing during update
1391 Fetches string at specified index with default locale. @param index position of the string @return string at given index or null if not found
1392 Returns the name as a string from the given PDF key. @param key the PDF key to retrieve the name for @return the name as a string or null if not found
1393 Retrieves the name as a string. If not available, returns a default value. @param key unique identifier for the name @param defaultValue fallback value to be returned if name is null @return name as a String or defaultValue if name is null
1394 Checks if a potential XRef stream starts at the provided offset. @param startXRefOffset The starting location to check for an XRef stream. @return True if it's a valid XRef stream, otherwise False. @throws IOException If there is an issue with reading from the source.
1395 Retrieves the page mode from a COSName object, or returns USE_NONE if not found or invalid. @return The retrieved or default PageMode
1396 Retrieves the page layout from a root object, handling invalid inputs by returning SINGLE_PAGE @return PageLayout enum representing the retrieved or default layout
1397 Retrieves the version of the object from its root name. @return Version string from the object's root name, or null if not found
1398 Fetches the trapped state of an object as a string. @return The trapped state as a string or null if not found
1399 Fetches and returns the style attribute from the root object.
1400 Retrieves the type of the COS object as a string. @return Type of the COS object as a string
1401 Retrieves the owner's name from COS Object using specific key. @return The owner's name as a String or null if not found
1402 Retrieves and returns the structure type of the COS object as a string.
1403 Creates and returns a PDF structure node based on the given COS dictionary type. @param node COS dictionary containing node information, its type determines the returned object @return PDStructureNode (StructTreeRoot or StructElem) based on the node's type; throws exception for unknown types
1404 Retrieves the type of the COS object as a string value. @return The type of the COS object, or null if not found.
1405 Fetches and returns the name from the COS object. @return The name as a string or null if not found
1406 Returns the language of the document, or null if properties are not available.
1407 Returns the type of the object as a string from its properties. @return The type name as a string or null if not found
1408 Fetches and returns the subtype property from the object's properties. @return The subtype name as a string, or null if not found
1409 Retrieves the filter name from the dictionary. @return The filter name as a string or null if not found
1410 Retrieves the sub-filter name from the dictionary object. @return The sub-filter name as a string or null if not found
1411 Creates a FDFAnnotation object based on the provided COSDictionary's subtype. @param fdfDic the dictionary containing annotation information @return a FDFAnnotation object or null if creation fails
1412 Retrieves the intent from the annotation as a string. @return The intent name as a string or null if not present in the annotation
1413 Retrieves the line ending style from annotation. @return Line ending style as a string
1414 Retrieves the version from the catalog. @return A string representation of the version
1415 Fetches the text encoding from a COS object, defaults to 'PDFDocEncoding' if not found. @return the encoding type as String
1416 Fetches and returns the scale option name, defaults to 'Always' if not found. @return String representing the scale option name
1417 Returns the scale type, defaults to proportional if not defined. @return String representing the scale type
1418 Retrieves the base font name from the dictionary. @return The base font name as a string or null if not found
1419 Fetches and returns the type of the object as a string from its dictionary.
1420 Returns the subtype name from a dictionary as a string. @return The subtype name or null if not found in the dictionary
1421 Retrieves and returns the font name from the dictionary object.
1422 Retrieves the font stretch value from the dictionary. @return Font stretch value as a string, or null if not found
1423 Retrieves the base font name from the dictionary. @return The name of the base font as a string, or null if not found
1424 Retrieves the base font name from the dictionary. @return The base font name as a string, or null if not found
1425 Retrieves the base font name from a dictionary object. @return The base font name as a string or null if not found
1426 Returns the base font name from the dictionary. @return The base font name as a string or null if not found
1427 Checks if the dictionary's subtype name is "NChannel". @return true if subtype is "NChannel", false otherwise
1428 Returns the type of the action as a string.
1429 Fetches and returns the subtype of an action in string format. @return The subtype name as a string or null if not found
1430 Creates a PDAction object based on the provided COSDictionary. @param action a COSDictionary containing action information @return appropriate PDAction subclass or null if type is unsupported
1431 Fetches and returns the subtype of the COS object as a string. @return Subtype of the COS object as a string, or null if not found
1432 Fetches caption positioning from COS object using CP name as a string identifier. @return Caption positioning as a String, or null if not found
1433 Fetches and returns the intent name from COS object. @return Name of the intent as a string, or null if not found
1434 Retrieves the subtype of the COS object as a string. @return The subtype name or null if not found
1435 Fetches and returns the name from the dictionary as a string.
1436 Retrieves the filter name from the dictionary object. @return The filter's name as a string or null if not found
1437 Fetches and returns the URL type from the dictionary. @return The URL type as a string
1438 Returns the filter name from the dictionary as a string. @return The filter name in string format or null if not found
1439 Returns the sub filter name from the dictionary as a string. @return Sub filter name or null if not found in dictionary
1440 Returns the field type of the COS object as a string. This is extracted from the COS object's FT (field type) property. @return Field type as a string, or null if not found
1441 Retrieves and returns the name of the COS object as a string. @return The name of the COS object or null if not found
1442 Fetches the duplex setting from preferences. @return Duplex setting as a string or null if not found
1443 Fetches a string value from PDF using a given key. @param key the name of the key to fetch @return the fetched string or null if not found
1444 Fetches a string value by key with a fallback to default value. @param key unique identifier for the string value @param defaultValue value returned if key is not found @return String value or defaultValue if key is not found
1445 Retrieves the language information from an internal data source. @return A string representing the language setting, or null if not found
1446 Retrieves the title from the information object. @return Title as a String, or null if not found
1447 Retrieves the author's name from information data. @return Author's name as a string, or null if not found
1448 Fetches the subject string from the information object. @return The subject string, or null if not present
1449 Fetches and returns keywords from the information object.
1450 Retrieves the creator information from the object. @return A string representing the creator's name or identifier
1451 Retrieves producer information from the document metadata. @return Producer's name as a string or null if not found
1452 Returns the prefix value from the root configuration. @return The configured prefix as a string
1453 Retrieves file unicode from COSName object. @return File unicode as a string
1454 Retrieves file name from the FileSystem object. @return The name of the file as a String
1455 Fetches DOS (Disk Operating System) information from file system. @return String representation of DOS information or null if not found
1456 Retrieves the MAC (Message Authentication Code) of a file as a string. @return The MAC of the file as a string
1457 Fetches and returns the UNIX file system information as a string.
1458 Fetches and returns the file description from its metadata. @return A string describing the file, or null if not available
1459 Retrieves the element identifier from COS object. @return unique string identifier of the element
1460 Fetches the title from the COS object. @return Title as a string, or null if not found
1461 Fetches and returns the language of the COS object. @return The language as a string, or null if not found
1462 Fetches the alternate description from COS object. @return Alternate description as a string or null if not found
1463 Fetches and returns the expanded form of the COS object as a string. @return Expanded form of the COS object stored in E field, or null if not found
1464 Fetches and returns the actual text from the COS object. @return The actual text as a string, or null if not found
1465 Fetches and returns a formatted value as a string from COS object. @return Formatted value as a string, or null if not found
1466 Fetches the actual text from properties, if available. @return Actual text string or null if not found in properties
1467 Fetches alternate description from properties. @return Alternate description or null if not found in properties
1468 Fetches the expanded form string from properties, if available. @return Expanded form string or null if not found in properties
1469 Retrieves modification date from annotation object. @return Modification date as a string in specified format
1470 Fetches and returns the name from COS annotation object. @return Name as a string, or null if not found
1471 Retrieves and returns string contents from 'annot'. @return Contents of type String as represented by COSName.CONTENTS
1472 Retrieves the title from the annotation object using COSName.T as key. @return Title string extracted from the annotation object
1473 Returns the subject from the COSName.SUBJ field of the annotation object. @return The subject as a String. May be null if not set in the annotation.
1474 Fetches and returns a symbol from the annotation. @return The symbol as a string or null if not found
1475 Fetches and returns the rotation value from the annotation object. @return Rotation value as a String, or null if not found
1476 Retrieves default appearance string from annotations. @return Default appearance string, or null if not found
1477 Retrieves the default style from annotations. @return Default style as a string, or null if not found
1478 Retrieves the caption style from the annotation object. @return The string representation of the caption style
1479 Retrieves and returns the state from an annotation object. @return State as a string value from the annotation object
1480 Fetches the state model from the annotation object. @return the state model as a string
1481 Fetches and returns the current status from an object. @return The current status as a String
1482 Retrieves the target string from a COSName object in fdf. @return The target string or null if not found
1483 Retrieves the partial field name from the COSName object. @return The string representation of the T value in the field's COSName.
1484 Retrieves the name from the referenced object. @return The name as a string or null if not found
1485 Fetches and returns the font family from the dictionary object.
1486 Retrieves the character set from the dictionary object. @return The character set as a string or null if not found.
1487 Returns the name from a COS dictionary using the NAME key. @return The name as a string or null if not found in the dictionary
1488 Fetches and returns an array of group names from the dictionary object. @return String[] containing group names or empty if no groups found
1489 Retrieves and returns the F value from the action object.
1490 Retrieves and returns the string value associated with 'D' from an action object.
1491 Retrieves and returns the string value associated with 'O' from an action object.
1492 Fetches and returns the P string value from a COSName object.
1493 Fetches and decodes the URI from a given dictionary object. @return Decoded URI as string or null if not found/decodable
1494 Retrieves the filename from a dictionary using a predefined key. @return The filename as a String
1495 Retrieves and returns the name of the annotation from the dictionary. @return The name of the annotation as a string
1496 Fetches and returns the filename from parameters. @return The filename as a string or null if not found
1497 Retrieves the directory path from parameters. @return The directory path as a string
1498 Retrieves the execute parameter from the parameters object. @return The string value of the execute parameter or null if not found
1499 Retrieves and returns the contents of a COSName object from the dictionary. @return The contents as a string or null if not found
1500 Retrieves the modified date of a COS object as a string. @return Modified date in string format, or null if not found
1501 Retrieves the annotation name from the COS object. @return The name of the annotation as a String
1502 Fetches default appearance string from COS object. @return Default appearance string or null if not found
1503 Retrieves the default style string from the COS object. @return The default style string as a String, or null if not found.
1504 Fetches and returns the title of a popup from COS object using 'T' key.
1505 Fetches the subject from COS object using SUBJ key. @return Subject string or null if not found
1506 Fetches and returns the state from the COS object. @return current state as a string
1507 Returns the state model of the COS object as a string. @return The state model string, or null if not found.
1508 Fetches and returns the normal caption from COS object using CA name. @return Normal caption as a string or null if not found
1509 Fetches rollover caption from COS object using RC identifier. @return Rollover caption as a string, or null if not found
1510 Fetches alternate caption from COS object using AC key. @return Alternate caption as a string or null if not found
1511 Retrieves the date from a dictionary using a specified key. @return The date as a string or null if not found in the dictionary
1512 Fetches the operating system name from a COSDictionary object in PDF. @return Operating System name as String or null if not found
1513 Extracts and returns a list of Subject DN maps from the dictionary. @return List of maps containing Subject DN data, or null if not present.
1514 Fetches and returns the URL from the dictionary object. @return The URL as a String or null if not found
1515 Retrieves the URL from the dictionary using COSName.URL as key. @return A string representing a URL or null if not found
1516 Retrieves and returns the name from a dictionary using a predefined key. @return The name as a string or null if not found in the dictionary
1517 Retrieves the location string from the dictionary using a predefined key. @return The location string stored in the dictionary, or null if not found.
1518 Fetches and returns the reason string from the dictionary. @return The reason string from the dictionary or null if not found
1519 Fetches contact information from a dictionary using a predefined key. @return Contact information as a string, or null if not found
1520 Retrieves the title from a COS object. @return The title as a string or null if not found
1521 Retrieves a partial name from a dictionary using COSName.T as key. @return A string representing the partial name, or null if not found
1522 Retrieves an alternate field name from the dictionary using a predefined key. @return The alternate field name as a string
1523 Retrieves the mapping name from the dictionary using COSName.TM as key. @return The mapping name as a string
1524 Retrieves default style string from COS object using DS key. @return Default style string, or null if not found
1525 Retrieves the scale ratio from the COS object as a string. @return The scale ratio as a string or null if not found
1526 Retrieves and converts the role map from a COSDictionary to a Map<String, Object>. @return A Map containing the role data or an empty HashMap if not found.
1527 Retrieves a list of options from the COS object's dictionary. @return List of string options; may be empty if none found
1528 Fetches display values for options from a COS object dictionary. @return List of strings representing the display values or an empty list if none found
1529 Fetches a value based on an attribute and returns it as a String. @return String value or "Off" if not found or default applies
1530 Fetches a list of values associated with 'V' name. @return A List object containing String values or an empty List if none found
1531 Fetches default values associated with COSName.DV. @return a list of string values representing the default settings
1532 Initializes an empty PDSimpleFileSpecification object with an empty COSString.
1533 Sets the file name for this object. @param fileName The new name of the file to be set.
1534 Constructs a PDNamedDestination object with a specified COSString. @param dest a COSString representing the destination name
1535 Sets the named destination for this object. Throws IOException if an error occurs. @param dest The name of the destination to set. If null, clears the current destination.
1536 Reads and validates the generation number. Throws an exception if invalid. @return a non-negative integer with max 5 digits @throws IOException if the number is negative or has more than 5 digits
1537 Reads an object number from input stream. Validates and returns if within allowed range. @return a long representing the object number @throws IOException if number has more than 10 digits or is negative
1538 Fetches user password based on revision. Returns empty if rev is 5 or 6, otherwise calls getUserPassword234(). @param ownerPassword user's current password @param owner user identifier @param encRevision encryption revision number @param length password length @return byte array of the user password or empty if rev is 5 or 6 @throws IOException if an I/O error occurs
1539 Initializes a TensorPatch with given control points and colors. @param tcp array of 2D points defining the shape @param color corresponding RGB values for each point
1540 Encrypts data using RC4 algorithm with the provided key from input to output stream. @param finalKey encryption key @param input input stream of data to be encrypted @param output output stream for encrypted data @throws IOException if an I/O error occurs during encryption process
1541 Fetches or sets and returns a default FontProvider instance if none exists. @return the current FontProvider instance, defaults to DefaultFontProvider if not set
1542 Generates shaded triangles from a color-coordinate patch array. @param patchCC a 2D array of CoordinateColorPair objects @return List of ShadedTriangle objects representing the generated triangles
1543 Creates or retrieves an ICC-based color space from a COS array and resources. @param iccArray input data for the color space @param resources external resources to cache or retrieve the color space @return PDICCBased color space object, potentially cached in resources
1544 Initializes CoonsPatch with given control points and colors. @param points Array of Point2D representing control points @param color 2D float array representing RGB color values for control points
1545 Processes and merges text positions, handling overlapping and diacritics. @param text the TextPosition object to process
1546 Processes a text position, handles duplicates and diacritics, and assigns to the correct article division. @param text TextPosition object to process
1547 Converts a COSString to a Calendar object. @param text the input COSString, may be null @return Calendar object if conversion is successful, or null if text is null
1548 Begins a marked content block with the given tag name. @param tag COSName representing the tag for the marked content block @throws IOException if an I/O error occurs while writing data
1549 Begins a marked content sequence with the specified tag and MCID, writing operands and operators to the output stream. @param tag the COSName of the tag for the marked content sequence @param mcid the unique identifier for the marked content sequence @throws IOException if an I/O error occurs while writing to the output stream
1550 Sets and writes a marked content point with the given COSName tag. @param tag COSName object representing the marking tag @throws IOException if an I/O error occurs during writing operations
1551 Writes a COSString to an OutputStream in bytes or hex format based on its forceHexForm property. @param string the COSString to be written @param output the stream where the string will be written to
1552 Writes a byte array to an OutputStream. @param bytes the data to be written @param output the stream to which the data is written @throws IOException if an I/O error occurs during writing
1553 Initializes PDFGraphicsStreamEngine with operators for a given PDPage. @param page the PDF page to be processed by the engine
1554 Initializes a new instance of PDFMarkedContentExtractor with default settings.
1555 Initializes PDFTextStripperByArea without separating by beads, throwing IOException if an error occurs.
1556 Retrieves a COSBase object from a given path. @param objPath the path to the object within a COSArray or COSDictionary @return the retrieved COSBase object, or 'this' if not found
1557 Retrieves an attribute value by its name from a COS object. @param attrName the name of the attribute @return the COSBase object representing the attribute value, or null if not found
1558 Fetches attribute value by name or returns a default value if not found. @param attrName the name of the attribute to fetch @param defaultValue the value to return if specified attribute is not found @return Attribute value or defaultValue if attribute is not present
1559 Checks if a specified object exists in COS dictionary by its name. @param name the unique identifier of the object @return true if object exists, false otherwise
1560 Fetches an array of strings by name from COS object dictionary. @param name key to retrieve the array @return String array or null if not found or not a COSArray
1561 Retrieves a name or an array of names based on the input. @param name key to retrieve object from dictionary @param defaultValue value returned if no match is found @return single name, array of names, or defaultValue
1562 Retrieves a number or name from COSObject. @param name key to search for in the dictionary @param defaultValue returned if no matching object found @return float value, string name, or defaultValue
1563 Fetches a number or array of numbers by name from an object. @param name key to search for in the object's dictionary @param defaultValue fallback value if no matching number is found @return float value, float array, null, or defaultValue based on the object's content
1564 Fetches a color object by name from the COS dictionary. @param name unique identifier of the color in the dictionary @return PDGamma color object or null if not found
1565 Creates a unique key for the specified dictionary type and prefix. @param kind dictionary type @param prefix initial part of the key @return unique COSName key for the dictionary
1566 Sets an integer value at a specified index in the objects list and updates the state. @param index position to set the value @param intVal integer value to be set
1567 Parses and returns a COSNumber object from the given string. Throws IOException if the string is not a valid number representation. @param number String representing a number @return Corresponding COSNumber object (COSInteger or COSFloat) @throws IOException If the string does not represent a valid number
1568 Appends a kid with the given MCID, throws exception if MCID is negative. @param mcid unique kid identifier, must be non-negative
1569 Returns a COSBase instance representing the degrees value as an integer. @return COSBase object containing the degree value
1570 Parses and returns a COSString from a hexadecimal input stream, handling invalid characters and missing brackets.
1571 Constructs a default PDRectangle with all dimensions set to 0.0f.
1572 Constructs a PDRectangle with specified width and height at origin (0,0). @param width the width of rectangle @param height the height of rectangle
1573 Returns a new PDRectangle object based on bbox coordinates.
1574 Calculates the difference in rectangle dimensions. @return A PDRectangle object representing the differences in dimensions.
1575 Returns a new PDRectangle with specified padding applied to the original rectangle. @param rectangle The input rectangle object @param padding The amount of padding to apply on all sides of the rectangle @return A new PDRectangle object with padding applied
1576 Adds differences to the dimensions of a PDRectangle object. @param rectangle The original PDRectangle object. @param differences Array containing [left, bottom, right, top] adjustments. @return A new PDRectangle with adjusted dimensions or original if differences are invalid.
1577 Applies differences to a rectangle and returns a new one. @param rectangle the original PDRectangle object @param differences an array of four floats representing x-differences @return a new PDRectangle object with applied differences, or the original if input is invalid
1578 Applies padding to a rectangle and returns the new dimensions. @param box PDRectangle object to apply padding @param padding Amount of space to add around the rectangle's edges @return Newly padded PDRectangle object
1579 Initializes a new instance of PDFXRefStream with a given COSDocument. @param cosDocument the document to create the COSStream within
1580 Creates and returns a new PDObjectStream for the given document. @param document The PDDocument to create an object stream for @return A newly created PDObjectStream instance
1581 Initializes a new PDF stream object within the specified document. @param document the parent PDDocument for the new stream
1582 Initializes a new PDStream with a COSDocument. @param document The input COSDocument to create a new PDStream from.
1583 Initializes a PDStream with document, input stream and filters. @param doc the parent PDDocument @param input source of data for the stream @param filters COSBase objects to apply to the stream's data @throws IOException if there is an error reading from the input stream or writing to the output stream
1584 Creates a raw COSStream from an InputStream and adds it to the PDDocument. @param document the PDF document to which the stream will be added @param rawInput the input stream containing the data for the stream @return the created COSStream object
1585 Encodes an InputStream to an OutputStream using provided parameters. @param input source InputStream @param encoded destination OutputStream for the encoded data @param parameters COSDictionary containing encoding settings @param index specific index used in the encoding process @throws IOException if there is an error during reading or writing
1586 Creates an instance of PDDefaultAttributeObject with default values.
1587 Initializes PDUserAttributeObject with user properties owner.
1588 Default constructor for PDStandardAttributeObject.
1589 Constructs a new instance of PDOutlineItem. Inherits from superclass.
1590 Initializes PDVariableText with an AcroForm. @param acroForm The form containing variable text elements.
1591 Initializes an export format attribute object from a COSDictionary. @param dictionary contains export format attribute data
1592 Fetches the appearance stream for this PDF entry. Throws exception if it's not a stream. @return PDAppearanceStream object representing the appearance stream @throws IllegalStateException if this entry is not an appearance stream
1593 Fetches all appearance streams from sub-dictionary. Throws exception if entry is not a sub-dictionary. @return Map of COSName to PDAppearanceStream objects or empty map if no valid streams found
1594 Creates a PDXObject from the given base and resources. Throws an exception if base is not COSStream or has invalid subtype. @param base COSBase object representing the source data @param resources Resources used to create the PDXObject @return PDXObject instance based on the input type and subtype @throws IOException if base is not a COSStream or has invalid subtype
1595 Adds a TrueType or OpenType font from the provided file. @param ttfFile the file containing the font (either .ttf or .otf)
1596 Constructs a type 6 shading object from its dictionary definition. @param shadingDictionary COSDictionary containing shading properties
1597 Constructs a PDShadingType7 object from a COSDictionary. @param shadingDictionary dictionary containing shading data
1598 Retrieves a destination by name from PDF data dictionary. @param name the unique name of the destination @return PDDestination object or null if not found or invalid type
1599 Retrieves and creates a destination object from COS object's dictionary. @return A PDDestination object if successful, throws IOException otherwise
1600 Retrieves and creates a destination object from the COS dictionary. @return PDDestination object containing destination information @throws IOException if there's an issue with reading the COS object
1601 Fetches and returns a destination object from COS dictionary. @return Destination object extracted from the COS object's dictionary, or throws IOException if not found.
1602 Fetches and returns a destination object from COS dictionary. @return PDDestination object created from the DEST key in COS dictionary @throws IOException if there's an error while fetching or creating the object
1603 Constructs a PDComboBox object from AcroForm, field dictionary and parent field. @param acroForm the form containing this field @param field the COSDictionary representing the field @param parent the parent of this field in the form hierarchy
1604 Constructs a PDListBox object. @param acroForm the AcroForm containing this field @param field the COSDictionary representing this field @param parent the parent non-terminal field of this field
1605 Constructs a new COSParser with the given parameters. Delegates to another constructor for further processing. @param source RandomAccessRead object containing data to parse @param password String used for decryption if necessary @param keyStore InputStream of keystore for additional encryption keys @param keyAlias String alias of the key in the keystore @throws IOException if an I/O error occurs while reading data
1606 Creates and returns an output stream from the internal stream. @return OutputStream for writing data @throws IOException if an I/O error occurs during creation of the stream
1607 Writes byte data to the given PDF appearance stream. @param data byte array containing data to be written @param appearanceStream stream for PDF appearance @throws IOException if an I/O error occurs during write operation
1608 Constructs a PDAppearanceContentStream from the given PDAppearanceStream and compression flag. @param appearance the appearance stream to be used @param compress true if output should be compressed, false otherwise @throws IOException if an I/O error occurs while creating the output stream
1609 Sets the text matrix for the current text state. Throws exception if not in text mode. @param matrix a 2D transformation matrix to be applied to the text space @throws IOException if an I/O error occurs while writing data
1610 Transforms matrix and writes affine transform & operator, throws exception if in text mode. @param matrix to be transformed @throws IOException if writing fails
1611 Fetches the bounding box of this PDF object. @return Bounding box as a PDRectangle or null if not found.
1612 Fetches the bounding box of a PDF object as a rectangle. @return PDRectangle object or null if not found for this object
1613 Fetches and returns a rectangle object from the annotation, if available. @return PDRectangle object or null if not found in the annotation
1614 Fetches the fringe (border) of a PDF annotation as a rectangle. @return PDRectangle object representing the fringe or null if not found
1615 Fetches the fringe of a PDF annotation as a rectangle. @return PDRectangle object or null if not found in the annotation
1616 Fetches the fringe rectangle from a COSArray if it exists, otherwise returns null. @return PDRectangle object or null if not found in annot's COSArray(RD)
1617 Retrieves a fringe rectangle from the annotation, if present. @return PDRectangle object or null if not found in the annotation
1618 Retrieves the font bounding box as a PDRectangle. @return PDRectangle object representing the font bounding box, or null if not found
1619 Fetches the font bounding box from dictionary. @return PDRectangle object representing the font's bounding box, or null if not found
1620 Retrieves the bounding box of a PDF object as a PDRectangle or returns null if it doesn't exist. @return PDRectangle representing the bounding box or null if not found
1621 Retrieves the bounding box of a PDF object as a PDRectangle or returns null if not found. @return PDRectangle object representing the bounding box, or null if it doesn't exist
1622 Returns the bounding box of the PDF document. If not already calculated, it fetches and sets it. @return The bounding box as a PDRectangle object or null if not found in the document
1623 Fetches and validates a rectangle from the dictionary. @return PDRectangle object if valid or null otherwise
1624 Fetches and returns a rectangle difference from the COS object, or null if not present.
1625 Retrieves and returns a difference rectangle from the COS object, or null if it doesn't exist.
1626 Retrieves the bounding box of a PDF object as a PDRectangle. @return A PDRectangle representing the bounding box or null if not found
1627 Retrieves a rectangle object from the bead's COSArray, or returns null if not present. @return PDRectangle object derived from COSArray data, or null if not found
1628 Sets the line dash pattern for graphics state. @param array COSArray containing dash pattern values @param phase Phase offset in the dash pattern
1629 Fetches and returns a line dash pattern from the dictionary. @return PDLineDashPattern object or null if not found or invalid format
1630 Generates a stencil image from PDImage using specified paint. @param pdImage the input PDF image @param paint the painting style to apply on the image @return BufferedImage object with applied stencil and paint @throws IOException if an I/O error occurs during processing
1631 Retrieves and creates a matrix object from COS dictionary. @return Matrix object created from the COS dictionary
1632 Retrieves and creates a matrix object from COS dictionary. @return Matrix object representing the transformed data
1633 Retrieves and creates a matrix object from the COS dictionary. @return Matrix object created from the COS dictionary
1634 Retrieves an inheritable attribute from a COSDictionary node by its key. @param node the COSDictionary to search in @param key the name of the attribute to retrieve @return the attribute value or null if not found
1635 Fetches a boolean value associated with a given key. @param key the name of the value to fetch @param defaultValue the value returned if the key is not found @return the fetched boolean value or defaultValue if not found
1636 Fetches an integer value associated with a given key. @param key unique identifier for the integer value @param defaultValue value to return if no association is found @return Integer value or defaultValue if not found
1637 Fetches an integer value based on two keys. Returns a default value if not found. @param firstKey the primary key for retrieval @param secondKey the secondary key for retrieval @return integer value or -1 if not found
1638 Constructs PDInlineImage with given params and applies filter decoding if needed. @param parameters COSDictionary containing image parameters @param data byte array of the image data @param resources PDResources object for additional resources @throws IOException if an I/O error occurs during processing
1639 Determines the image suffix based on its filters. Supports JPG, TIFF, and PNG formats. @return Image format suffix as a string (jpg, tiff, or png)
1640 Fetches COS objects by their types from the xref table. @param type1 first type of COS object to fetch @param type2 second type of COS object to fetch @return List of COSObjects matching the given types
1641 Converts an integer code to Unicode string. Supports custom glyphs if provided. @param code the integer code to convert @param customGlyphList optional list of custom glyphs for conversion @return the corresponding Unicode string, or null if not found
1642 Checks if the document is encrypted. @return true if encrypted, false otherwise
1643 Parses FDF data from the source into a FDFDocument object. Throws IOException if header doesn't contain version info. @return FDFDocument if parsing is successful, otherwise throws IOException
1644 Retrieves and returns the PDAcroForm, using default fixup. @return PDAcroForm object for the document
1645 Fetches a color space by name and caches it for future use if possible. @param name the COSName of the color space @param wasDefault indicates if this is a default color space @return the PDColorSpace object or null if not found or an error occurs
1646 Checks if a specific color space is present in the object. @param name the COSName representing the color space to check @return true if the color space exists, false otherwise
1647 Fetches extended graphics state by name from a COS object.
1648 Checks if a given name corresponds to an image XObject in the COSBase instance. @param name COSName to be checked @return true if it's an image XObject, false otherwise
1649 Fetches all color space names from the COSName object. @return An iterable collection of COSName objects representing color spaces
1650 Retrieves all XObject names from the source. @return An iterable collection of COSName objects representing XObjects
1651 Fetches and returns all font names in the document. @return An iterable collection of COSName objects representing font names
1652 Returns all property names in this COS object. @return an iterable collection of COSName objects representing the properties
1653 Retrieves all shading names from the collection. @return An iterable containing COSName objects representing shadings
1654 Fetches all pattern names from the COS system. @return An iterable collection of COSName objects representing patterns
1655 Returns an iterable collection of extended graphic state names. @return An Iterable object containing COSName objects representing the extended graphic state names.
1656 Retrieves the standard crypt filter dictionary. @return The standard crypt filter dictionary (PDCryptFilterDictionary)
1657 Returns default crypt filter dictionary. @return Crypt filter dictionary with default name
1658 Fetches a Type 3 character procedure by its code. @param code unique identifier for the character procedure @return PDType3CharProc object or null if not found or encoding/charProcs are null
1659 Retrieves the rollover appearance from a PDF dictionary. @return PDAppearanceEntry object or normal appearance if not found
1660 Fetches the down appearance from a COSDictionary if it exists, otherwise returns the normal appearance. @return PDAppearanceEntry object or the result of getNormalAppearance() if not found in dictionary
1661 Retrieves the first child outline item. @return The first child outline item or null if none exists
1662 Fetches and returns the last child outline item. @return The last PDOutlineItem in the outline or null if none exists.
1663 Retrieves the digital signature. @return The PDSignature object containing the signature data
1664 Fetches a value from the number tree by index. May use "nums" or "kids" nodes for retrieval. @param index to locate the value in the number tree @return the corresponding object if found, otherwise null @throws IOException if an I/O error occurs while fetching data
1665 Returns the number of output parameters, calculating from range values if not already set. @return The number of output parameters (0 if no range values)
1666 Returns a PDRange object based on provided index and internal array. @param n index to select a value from the internal array @return PDRange object constructed with selected value and full array
1667 Clips an array of floats to specified ranges. If no ranges, returns the original values. @param inputValues array of floating point numbers @return clipped or original float array based on defined ranges
1668 Returns the number of input parameters, calculates if not already set. @return The number of input parameters in the domain values array
1669 Retrieves a domain range for a given input. @param n input value to determine the domain range @return PDRange object containing the determined domain values
1670 Calculates an index based on a vector and the object's size. @param vector int array used for calculation @return calculated integer index
1671 Fetches and constructs a PDRange for a given parameter number from decoded values. @param paramNum the parameter number @return PDRange object or null if not found or invalid input
1672 Retrieves a parameter's encoding range. @param n the parameter index @return PDRange object containing encoded values for the specified parameter
1673 Checks if the current object is top-attached. @return true if attached to "Top", false otherwise
1674 Checks if the object is attached at the bottom. @return true if attached at the bottom, false otherwise
1675 Checks if an object is left-attached. @return true if left-attached, false otherwise
1676 Checks if an item is rightly attached. @return true if item is attached to the right, false otherwise
1677 Initializes a PDCIDFont object with the given font dictionary and parent type 0 font. @param fontDictionary COSDictionary containing font data @param parent PDType0Font as the parent font for this instance
1678 Initializes DictionaryEncoding with a COSDictionary font encoding, applying differences and handling base encoding. @param fontEncoding the font encoding dictionary to be used for initializing this object.
1679 Initializes DictionaryEncoding based on font properties and encodings. @param fontEncoding COSDictionary containing font encoding info @param isNonSymbolic boolean flag for non-symbolic fonts @param builtIn Encoding object representing the font's built-in encoding
1680 Initializes ShadingContext with given parameters and sets up color models. @param shading PDShading object for shading @param cm ColorModel object for input @param xform AffineTransform object for transformation @param matrix Matrix object for calculations @throws IOException if an I/O error occurs
1681 Fetches the decoding range for a specific parameter. @param paramNum the number of the parameter @return Decode range or null if not available
1682 Signs the content of an input PDF stream and returns it as a byte array. @param pdfFile InputStream containing the PDF file to be signed @return Byte array representation of the signed PDF content @throws IOException if there's an error reading from the input stream
1683 Signs the provided PDF file content and returns the signed byte array. @param pdfFile the byte array of the original PDF file @return the byte array of the signed PDF file @throws IOException if an I/O error occurs during signing
1684 Fetches and returns the revision number from the dictionary object.
1685 Fetches the minimum revision from the dictionary. @return The minimum revision as a long value
1686 Creates a view of the data source with optional filters applied. @return RandomAccessRead object for reading filtered or raw data @throws IOException if an I/O error occurs
1687 Retrieves a floating point number from COS object by its name. @param name identifier for the number in COS object @return Floating point number or throws exception if not found
1688 Retrieves the conversion factor from COS object. @return Float value representing the conversion factor
1689 Fetches the length of the leader from annotations. @return Float value representing the leader length
1690 Retrieves leader extension value from annotation. @return Float value representing leader extension, or default if not found
1691 Retrieves leader offset value from annotation. @return The leader offset value as a float
1692 Retrieves the float value associated with the "V" key from the dictionary. @return Float value stored under the "V" key in the dictionary
1693 Fetches and returns the CYX value from the COS object. @return the CYX value as a float
1694 Retrieves a floating point number from an object by its name. @param name the identifier of the number to retrieve @param defaultValue the value returned if the named number is not found @return the retrieved float or the default value if not found
1695 Returns intensity value from COS object. Defaults to 0 if not found.
1696 Computes the font height for a given PDFont. @param font the PDFont object to compute the height for @return computed font height as float value
1697 Returns default position vector based on component ID. @param cid unique component identifier @return Vector object with calculated x and y positions
1698 Retrieves properties for a given COSName from the PDPropertyList instance. @param name unique identifier of type COSName @return corresponding PDPropertyList object or null if not found
1699 Retrieves the Optional Content from a COS Dictionary, if it exists. @return PDPropertyList object or null if not found in the COS Object
1700 Fetches the optional content from the COS object, if it exists. @return PDPropertyList object or null if not found in COS dictionary
1701 Retrieves optional content groups from the dictionary. @return List of PDPropertyList objects representing OCGs, may be empty
1702 Retrieves the optional content from a COS object, if it exists. @return PDPropertyList of optional content or null if not found
1703 Validates and checks cross-reference offsets, replaces with brute force results if invalid. @throws IOException if I/O operations fail during validation or replacement
1704 Saves data to a specified file. @param fileName the file where data will be saved @throws IOException if an I/O error occurs during saving
1705 Removes the first occurrence of an object from the List if not filtered. @param o Object to be removed @return true if object was found and removed, otherwise false
1706 Removes and returns the element at the specified position in this list. Throws exception if operation is performed on a filtered list. @param index of the element to be removed @return the removed element @throws UnsupportedOperationException if list is filtered
1707 Removes the given object from the collection. @param o The COSBase object to be removed @return True if the object was found and removed, false otherwise
1708 Removes a user property from the COS object array and notifies changes. @param userProperty the property to be removed
1709 Removes a subject from the COSArray in the PDF dictionary. @param subject byte array representing the subject to be removed
1710 Removes a specified key usage extension from the dictionary. @param keyUsageExtension the extension to be removed
1711 Removes a specified issuer from the COSArray in the dictionary. @param issuer The byte array representing the issuer to be removed.
1712 Removes a specified Object ID from the dictionary's OID array. @param oid byte array representing the Object ID to remove
1713 Clears all data from the map and actuals lists.
1714 Removes and returns the value associated with the specified key from this map. @param key the key of the entry to remove @return the previous value associated with the key, or null if not found
1715 Collects updated dictionary entries, excluding direct or different origin ones. @param dictionary the COSDictionary to collect from @return true if a child entry demands parent update, otherwise false
1716 Collects a COSObject and updates its state based on various conditions. @param object the COSObject to collect @return true if child demands parent update, otherwise false
1717 Sets the original document state with an option to skip validation. @param originDocumentState the new document state to be set
1718 Fetches the upper limit from a COSArray node. @return Upper limit as String or null if not found in the array
1719 Retrieves the lower limit from a COSArray node. @return String containing the lower limit or null if not found
1720 Retrieves a specified string from COS object by its name. @param name The key for the desired string in COS object @return The string value associated with the given name, or null if not found
1721 Retrieves the rendering intent from a dictionary, or returns null if not found. @return RenderingIntent object or null if not present in the dictionary
1722 Fetches and returns the name associated with the key "N" from an action object.
1723 Fetches and returns a named string from PDF metadata with fallback to default value. @param key the name of the metadata field @param defaultValue the value returned if the key is not found in metadata @return the corresponding string or default value if not present
1724 Fetches the style of the guideline from the dictionary as a string. @return String representation of the guideline style or default if not found
1725 Retrieves the icon name from an annotation as a string. @return The icon name as a String or null if not found
1726 Fetches and returns the name of the attachment as a string. @return The name of the attachment or null if not found.
1727 Retrieves the line ending style from a COS object as a string. @return Line ending style or default if not specified (LE_NONE)
1728 Returns the highlight mode of the COS object as a string. @return Highlight mode name or default if not set
1729 Retrieves the reply type from COS object. @return Reply type as a string or default if not specified
1730 Fetches and returns the name of the COS object as a string.
1731 Fetches and returns the name of the COS object as a string. @return The name of the COS object or null if not found
1732 Retrieves and returns the highlighting mode as a string from COS object.
1733 Retrieves the style name from the COS object. @return The style name as a string, defaulting to "Solid" if not found.
1734 Fetches and returns the type of the COS object as a string. Defaults to "ExData" if no specific type is found.
1735 Returns the name of the transition style from the COS object as a string. @return Name of the transition style or a default value if not found
1736 Retrieves the dimension of the COS object in the PDF document. @return The name of the dimension as a string (H for horizontal)
1737 Retrieves the motion type from a COS object in PDF context. @return String representing the motion type or null if not found
1738 Fetches the non-full screen page mode as a string from preferences. @return Non-full screen page mode or default if not found.
1739 Fetches the reading direction from preferences or returns a default value. @return String representing the reading direction.
1740 Fetches and returns the view area from preferences using specified name and boundary.
1741 Retrieves view clip as a string using specified name and boundary crop box. @return View clip as a string or null if not found
1742 Retrieves print area preference as a string using specified name and boundary. @return Print area preference as a string or default if not found
1743 Retrieves print clip preference as a string using specified name and boundary. @return Print clip preference or default crop box if not found
1744 Retrieves print scaling preference with a fallback to default if not set. @return Print scaling value as string, defaults to "AppDefault" if not found
1745 Checks and returns the correct XRef offset. Throws IOException if an error occurs. @param startXRefOffset initial offset to check @return Correct XRef offset or -1 if not found
1746 Checks if the object contains only one COSObject and has an owner. @return true if it's empty as per definition, false otherwise
1747 Retrieves the parent node of a PDF structure node. @return Parent PDStructureNode or null if not found
1748 Creates an Object from a given COSBase, handling dictionaries and integers. @param kid the COSBase object to create an Object from @return created Object or Integer value if applicable, otherwise null
1749 Constructs a new PDEncryption object with the given COSDictionary and sets up its security handler. @param dictionary COSDictionary containing encryption data
1750 Fetches the SecurityHandler for ProtectionPolicy. Throws IOException if not available. @return SecurityHandler<ProtectionPolicy> object, or throws IOException if unavailable
1751 Fetches and returns a list of FDFAnnotations from the FDF object. @return List<FDFAnnotation> or null if no annotations found @throws IOException if there's an issue reading the annotation data
1752 Checks if the character set of FontInfo matches with the CID system info. @param cidSystemInfo contains registry and ordering information @param info contains font-specific details including code page range and name @return true if character sets match, false otherwise
1753 Checks if the current instance has an 'n' channel attribute set to true. @return True if 'n' channel attribute is true, false otherwise
1754 Fetches and returns the open action from a PDF dictionary object. @return Open action as Destination or Action, or null if not found/supported type @throws IOException if there's an issue reading the PDF data
1755 Retrieves an action object from field's COS dictionary using key "A". @return PDAction object retrieved or created, may be null if not found
1756 Fetches a map of JavaScript actions from the document's dictionary. @return Map with names as keys and PDActionJavaScript objects as values, or null if not found in document dictionary
1757 Retrieves a PDAction from the actions dictionary using COSName.F as key. @return PDAction object retrieved from the actions dictionary
1758 Fetches an action from a dictionary by key "E". Returns the created action or null if not found.
1759 Retrieves an action from the 'X' key in a dictionary, if it exists. @return PDAction object or null if not found in the dictionary
1760 Retrieves a PDAction object from the 'D' key in a COSDictionary, or returns null if not found. @return PDAction object or null if 'D' key is not present or invalid
1761 Retrieves a PDAction object from the actions dictionary using key 'U'. @return PDAction object or null if not found in the dictionary
1762 Fetches and creates a PDAction object from the "FO" dictionary in actions. @return PDAction object or null if "FO" dictionary is not found
1763 Retrieves a page description action by name 'BL'. @return PDAction object or null if not found in actions dictionary
1764 Retrieves a print operation action from the actions dictionary. @return PDAction object or null if not found in the dictionary
1765 Retrieves the Print Condition action from a dictionary of actions. @return PDAction object for Print Condition or null if not found
1766 Fetches and creates a Presentation View (PDAction) from the COSDictionary. @return PDAction object or null if not found in the dictionary
1767 Retrieves a Print Interval action from the COS dictionary, if it exists. @return PDAction object or null if not found in the dictionary
1768 Retrieves the WC (Window Close) action from a dictionary of actions. @return PDAction object or null if not found in the dictionary
1769 Retrieves a page description action from the COS dictionary, if it exists. @return PDAction object or null if not found in the dictionary
1770 Fetches and creates a PDAction from the Document Security (DS) dictionary. @return PDAction object or null if DS dictionary is not found
1771 Fetches and creates a PDAction from the Workspace Presence (WP) dictionary in the COSDictionary. @return PDAction object or null if WP dictionary is not found
1772 Retrieves the Document-level Print Action from a dictionary. @return PDAction object or null if not found in the dictionary
1773 Fetches a PDF action (PDAction) from the 'K' dictionary entry, or returns null if not found.
1774 Retrieves a PDAction object from the 'F' key in the actions dictionary. @return PDAction object or null if not found in the dictionary
1775 Retrieves a visual action from the dictionary, if it exists. @return PDAction object or null if not found in the dictionary
1776 Fetches and creates a PDF action from the 'C' dictionary.
1777 Fetches and creates a PDAction object from the 'O' dictionary in actions. @return PDAction object or null if 'O' dictionary is not found
1778 Retrieves a PDAction from the 'C' dictionary, if it exists. @return PDAction object or null if not found in the dictionary
1779 Fetches and returns a PDAction object from the COSDictionary, or null if not found.
1780 Retrieves a PDF action from the COS object if it exists, otherwise returns null. @return A PDAction object or null if not found in the COSDictionary
1781 Retrieves and creates an action object from the COS dictionary of this object's COS object. @return PDAction object or null if not found in dictionary
1782 Retrieves string value of a property by its key from an internal data structure. @param propertyKey the key to identify the property @return the string value of the property, or null if not found
1783 Retrieves custom metadata value by field name. @param fieldName name of the metadata field @return string value of the field, or null if not found
1784 Retrieves a string value by name from an underlying COS object. @param name The key or identifier of the string to retrieve @return The corresponding string value, or null if not found
1785 Retrieves the base string from COS object. @return the base string, or null if not found
1786 Retrieves the version from a dictionary using "REx" as the key. @return The version string from the dictionary
1787 Retrieves the units from the COS object as a string. @return A string representing the units of the object
1788 Retrieves a string value from COSName using a given key or returns a default value if not found. @param key unique identifier for the string @param defaultValue fallback value when key is not found @return the retrieved string or default value if not found
1789 Retrieves a string from an embedded dictionary with a fallback value. @param embedded COSName of the embedded dictionary @param key COSName of the desired entry in the dictionary @param defaultValue String to return if key is not found or dictionary is null @return String value from the dictionary or the defaultValue if not found
1790 Fetches the operation parameter from `params`. Returns 'OPERATION_OPEN' if not found. @return The operation string or 'OPERATION_OPEN' as default.
1791 Fetches the default appearance string from the dictionary. @return Default appearance string or an empty string if not found
1792 Fetches the filename using various encoding methods. @return Filename string or null if not found using any method
1793 Checks if a group with the given name exists. @param groupName the name of the group to search for @return true if the group is found, false otherwise
1794 Returns the fully qualified name of this object, including parent names. @return Fully qualified name or null if not applicable
1795 Fetches and returns a list of string values representing export options. @return A list of strings containing export option values
1796 Encrypts or decrypts input stream data based on provided parameters and writes to output stream. @param objectNumber object identifier @param genNumber generation number @param data input data stream @param output output data stream @param decrypt true for decryption, false for encryption
1797 Computes an encrypted key based on various parameters and encryption revision. @param password byte array of the password @param encRevision specifies the encryption revision to use (2-6) @return byte array representing the encrypted key
1798 Checks if the provided password matches the user's password for specific encryption revisions. @param password The password to check @param user The user data @param owner The owner data @param permissions User permissions @param id Unique identifier @param encRevision Encryption revision (2-4 or 5-6) @return True if password matches, false otherwise. Throws IOException for unknown revisions.
1799 Locates and returns a FontBoxFont based on format & PostScript name, with fallback strategies for damaged PDFs. @param format the font format @param postScriptName the PostScript name of the font to find @return the found FontBoxFont or null if not found
1800 Converts a COSString object to a Calendar object. @param text Input string in the form of a COSString object @return Calendar object if conversion is successful, null otherwise
1801 Writes a COS string to the given output stream. @param output target output stream @param cosString the COS string to be written @throws IOException if an I/O error occurs during writing
1802 Internal method to display text using current font settings and apply subsetting if necessary. @param text the string to be displayed @throws IOException if an I/O error occurs
1803 Initializes a PageDrawer with specified parameters. @param parameters object containing drawer configuration details. @throws IOException if an I/O error occurs during initialization.
1804 Returns the color defined by COSName.C in the PDF document. @return PDColor object representing the specified color
1805 Retrieves the border color of an object. @return PDColor representing the border color, or null if not set
1806 Fetches and returns the background color from the COSName object. @return PDColor object representing the background color
1807 Sets the high value at index 2 in an array. @param high The new high value to be set in the array.
1808 Sets the current page number in an array at index 0. @param pageNumber the new page number to be set
1809 Parses a COS string from the input stream, handling escaped characters and braces. @return a COSString object representing the parsed string @throws IOException if there's an issue with reading the input or parsing errors occur
1810 Fetches and returns specific contents from a PDF file stream.
1811 Extracts specific content from a PDF file based on calculated byte range. @param pdfFile the input PDF file as a byte array @return a byte array containing the extracted contents @throws IOException if an I/O error occurs while reading the file
1812 Constructs an immutable rectangle with specified width and height. @param width The width of the rectangle as a float value @param height The height of the rectangle as a float value
1813 Fetches the bounding box of this rectangle. @return The PDRectangle object representing the bounding box
1814 Initializes PDMetadata with a given PDDocument and sets its type and subtype. @param document the input PDDocument to be used for metadata initialization
1815 Creates an embedded file object in a PDF document. @param document the parent PDF document
1816 Initializes a PDXObject with the specified document and subtype. @param document The PDF document to which this object belongs @param subtype The COSName specifying the type of XObject (e.g., image, form)
1817 Constructs a PDImageXObject using a given PDDocument. @param document the source document containing image data
1818 Constructs a PDStream object from an input stream. @param doc the PDDocument to which this stream belongs @param input the input stream containing the data for the stream @throws IOException if there is an error reading from the input stream
1819 Constructs a PDStream with a given document, input stream and filter. @param doc the PDF document to which the stream belongs @param input the input stream containing the data for the stream @param filter the name of the filter used to encode the data in the stream @throws IOException if an I/O error occurs while reading the input stream
1820 Constructs a new PDStream object with specified document, input stream, and filters. @param doc the PDF document to which the stream belongs @param input the input stream for the stream data @param filters an array of COSBase objects representing the filter pipeline @throws IOException if there is an error reading from the input stream
1821 Creates a PDImageXObject from an input stream and sets its properties. @param document the PDF document @param encodedStream the input stream containing image data @param cosFilter the COS filter to apply @param width the width of the image in pixels @param height the height of the image in pixels @throws IOException if an I/O error occurs
1822 Constructs a new PDLayoutAttributeObject and sets its owner to OWNER_LAYOUT.
1823 Initializes a new instance of PDListAttributeObject and sets its owner to OWNER_LIST.
1824 Initializes a new instance of PDPrintFieldAttributeObject and sets its owner to OWNER_PRINT_FIELD.
1825 Initializes PDTableAttributeObject and sets its owner to OWNER_TABLE.
1826 Creates a specific PDAttributeObject based on the owner type in a COSDictionary. @param dictionary contains data for creating attribute object @return appropriate PDAttributeObject or PDDefaultAttributeObject if no match found
1827 Fetches and returns the normal appearance stream from the appearance dictionary. @return Normal appearance stream or null if it doesn't exist or is not a sub-dictionary.
1828 Retrieves the on-value from a widget's appearance dictionary, excluding 'Off'. @return The on-value as a string or an empty string if not found.
1829 Fetches the transparency group object. If not found, creates a new one from COSObject. @return PDTransparencyGroup object or null if not found or creation fails @throws IOException if there's an error reading the COSObject
1830 Finds and returns the page destination for a given named destination in the PDF document. @param namedDest The named destination to search for @return PDPageDestination object or null if not found @throws IOException If there's an error reading from the PDF document
1831 Initializes COSParser with RandomAccessRead source. @param source input stream for parsing @throws IOException if an I/O error occurs
1832 Initializes a PDF Parser with source, password, keystore, and alias. @param source RandomAccessRead input for parsing @param decryptionPassword Password for decrypting the document @param keyStore InputStream of the keystore @param alias Alias to be used from the keystore @throws IOException if there is an error reading the source or keystore
1833 Constructs a PDAppearanceContentStream with a given PDAppearanceStream and its output stream. @param appearance the PDAppearanceStream to be used @throws IOException if there is an issue creating the output stream
1834 Initializes a PDFormContentStream with the given PDFormXObject for drawing operations. @param form The PDFormXObject to be used for drawing operations. @throws IOException if an I/O error occurs while creating the output stream.
1835 Constructs a content stream for a given document and appearance stream. @param doc the PDF document @param appearance the appearance stream to associate with the content stream @throws IOException if an I/O error occurs while creating the output stream
1836 Constructs a Pattern Content Stream using a Tiling Pattern. @param pattern the tiling pattern to be used for content stream creation @throws IOException if an I/O error occurs while creating the output stream
1837 Draws an arrow on a PDF content stream at given position with specified length. @param cs PDAppearanceContentStream object for drawing @param x x-coordinate of the arrow's base point @param y y-coordinate of the arrow's base point @param len length of the arrow @throws IOException if an I/O error occurs during drawing
1838 Draws a shape with specified line width, stroke and fill options. @param lineWidth width of the lines to be drawn @param hasStroke whether to apply stroke to the shape @param hasFill whether to apply fill to the shape
1839 Draws a diamond shape on the given content stream at specified coordinates and radius. @param cs PDF appearance content stream @param x X-coordinate of the diamond's center @param y Y-coordinate of the diamond's center @param r Radius of the diamond @throws IOException if an I/O error occurs while drawing
1840 Draws a circle using given parameters and appearance content stream.
1841 Draws a circle on the given content stream at (x, y) with radius r using Bezier curves. @param cs PDAppearanceContentStream to draw on @param x X-coordinate of center @param y Y-coordinate of center @param r Radius of circle @throws IOException if an I/O error occurs while drawing the circle
1842 Draws a paperclip shape on the given PDF content stream. @param contentStream The PDF content stream to draw onto. @throws IOException If an I/O error occurs while drawing.
1843 Sets line width if it's not equal to 1, as Acrobat defaults to 1 and doesn't write a line width command. @param lineWidth the desired line width; not applied if equal to 1 @throws IOException if an I/O error occurs while setting the line width
1844 Generates a BufferedImage by drawing a tiling pattern with specified parameters. @param drawer PageDrawer object for rendering @param pattern PDTilingPattern to be drawn @param colorSpace PDColorSpace of the pattern @param color Color of the pattern @param xform AffineTransform for scaling and translation @param anchorRect Rectangle2D defining the size of the image @return BufferedImage containing the drawn tiling pattern
1845 Calculates and returns the scaled anchor rectangle of a tiling pattern. @param pattern The input PDTilingPattern object @return Rectangle2D representing the scaled anchor rectangle @throws IOException If there's an issue with the input pattern
1846 Fetches the stencil image with applied paint. Throws exception if image is not a stencil. @param paint The paint to apply on the stencil image @return BufferedImage of the stencil with applied paint, throws exception if not a stencil @throws IllegalStateException if the image is not a stencil
1847 Fetches the raw raster data of a PDImage. Throws exceptions if image is empty or dimensions are invalid. @param pdImage the input PDImage object @return WritableRaster object containing raw pixel data @throws IOException if image stream is empty, dimensions are invalid, or an error occurs during processing
1848 Returns a BufferedImage from the given PDImage, applying region and subsampling. @param pdImage source image @param region rectangle defining the area of interest in the image @param subsampling factor to reduce the size of the output image @param colorKey array for color masking @return BufferedImage representation of the PDImage, or null if empty @throws IOException if there is an issue with the source image or parameters
1849 Fetches and returns the resources associated with the page. If not already present, initializes them. @return PDResources object containing page resources
1850 Fetches the media box of the page. If not found or invalid, defaults to US Letter size. @return PDRectangle object representing the media box dimensions.
1851 Retrieves and normalizes the page rotation angle. @return Normalized rotation angle in degrees, or 0 if not found or invalid
1852 Fetches a boolean value from a given key with a fallback option. @param key the string identifier for the boolean value @return the boolean value or default if not found
1853 Checks if the current file system object is volatile. @return true if volatile, otherwise false
1854 Checks if the COS object is marked as hidden. @return true if hidden, false otherwise
1855 Checks if metadata should be encrypted in a document. @return boolean indicating encryption requirement for metadata (default is true)
1856 Retrieves the CAP boolean value from annotation. @return Boolean value of CAP or false if not found
1857 Checks whether annotation scaling to fit is enabled. @return true if scaling to fit is enabled, otherwise false
1858 Checks if a rename operation is needed based on a template flag. @return true if rename is necessary, otherwise false
1859 Checks if the COS object is isolated. @return true if the object is isolated, otherwise false
1860 Checks if the COS object is in a knockout state. @return true if in knockout state, false otherwise
1861 Retrieves the anti-alias setting from the dictionary. @return true if anti-alias is enabled, otherwise false
1862 Fetches the stroking overprint control value from the dictionary. @return Boolean value of OP key in dictionary, defaults to false if not found
1863 Retrieves automatic stroke adjustment setting from dictionary. @return true if enabled, false otherwise
1864 Retrieves Alpha Source Flag from dictionary. Defaults to false if not found. @return true if Alpha Source Flag is set, false otherwise
1865 Fetches the Text Knockout flag from the dictionary. Returns true if not present or set to true.
1866 Fetches and returns a boolean value associated with 'H' from an action object. Defaults to true if not found.
1867 Returns the synchronous mode status from an action object. @return true if in synchronous mode, otherwise false
1868 Retrieves the repeat status of an action. @return true if the action is set to repeat, otherwise false
1869 Retrieves a boolean value associated with 'MIX' from an action object. @return Boolean value or false if not found
1870 Checks if an object has a caption. @return true if the object has a caption, false otherwise
1871 Gets the 'Open' attribute of the COS object in a PDF document. @return true if open, otherwise false
1872 Fetches pre-release status from the dictionary using a specified key. @return true if in pre-release, otherwise false
1873 Fetches the NON_EFONT_NO_WARN flag from the dictionary with a default of true. @return boolean value representing the NON_EFONT_NO_WARN flag
1874 Fetches the trusted mode status from the dictionary. @return true if in trusted mode, false otherwise
1875 Checks if appearances are needed from the dictionary using a specific COS name. @return true if needed, false otherwise
1876 Checks if the fly area in the COS object is opaque. @return true if opaque, false otherwise
1877 Checks and returns if toolbar should be hidden based on preferences. @return true if toolbar is set to hide in preferences, otherwise false
1878 Retrieves user's preference to hide menubar. @return true if the menubar should be hidden; otherwise, false
1879 Checks and returns the preference to hide Window UI. @return true if Window UI should be hidden, otherwise false
1880 Retrieves the window fitting preference from preferences. @return true if window should be fitted, otherwise false
1881 Fetches and returns the preference to center the window. @return true if the window should be centered, otherwise false
1882 Checks if document title should be displayed based on preferences. @return true if document title is set to display, false otherwise
1883 Retrieves an integer value from an embedded dictionary. @param embeddedDictionary the source of the dictionary @param key the key to find in the dictionary @param defaultValue the value to return if key is not found @return the integer value or defaultValue if not found
1884 Fetches an integer value from PDF data using a given key. @param key the name of the data item to fetch @return int value or -1 if not found or invalid type
1885 Fetches an integer value associated with a given key. @param key unique identifier of the integer value @return integer value or -1 if not found
1886 Fetches an integer value from a PDF document by key with fallback to default value. @param key the name of the object to fetch @param defaultValue the value returned if key is not found @return the fetched integer or default value if not found in the PDF document
1887 Checks if a specific bit flag is set for a given COSName field. @param field the COSName field to check @param bitFlag the bit flag to look for @return true if the bit flag is set, false otherwise
1888 Retrieves and returns the count value from the root object. @return The count as an integer; defaults to 0 if not found
1889 Retrieves the starting value from the root object. @return The start value as an integer (default is 1)
1890 Fetches the order number from COS object. Returns default value of 1 if not found. @return Order number as an integer
1891 Retrieves the revision number of the COS object. @return The integer representation of the revision number
1892 Retrieves the length value from a crypt filter dictionary. @return The length value or default of 40 if not found
1893 Fetches and returns the version number from the dictionary object. @return The version number as an integer; defaults to 0 if not found
1894 Retrieves and returns the length value from the dictionary. Defaults to 40 if not found in the dictionary.
1895 Fetches the revision number from the dictionary object. @return The revision number or a default value if not found.
1896 Retrieves permission settings from dictionary object. @return Integer representing permission settings
1897 Returns the justification value from annotation as a string. @return Justification value as a string
1898 Fetches and returns the flag value from a dictionary object. If not already set, it initializes with default or fetched value.
1899 Creates a pattern object based on the given dictionary and resource cache. @param dictionary COSDictionary containing pattern data @param resourceCache cache for resources used in creating the pattern @return PDAbstractPattern object of appropriate type, or throws IOException if unknown pattern type
1900 Retrieves the paint type from the COS object. @return an integer representing the paint type
1901 Fetches and returns the tiling type from a COS object. Defaults to 0 if not found.
1902 Creates a PDShading object based on the provided COSDictionary. @param shadingDictionary contains information about the shading type @return PDShading object of the appropriate type or throws IOException if unknown type
1903 Retrieves the number of bits per flag from the COS object. @return The number of bits per flag or -1 if not found/invalid
1904 Fetches and returns the number of vertices per row from a COS object. @return int representing vertices per row or -1 if not found
1905 Fetches the number of bits per color component from COSObject if not already set. @return int representing the number of bits per color component
1906 Fetches the number of bits per coordinate from a COS object. If not already set, it retrieves and stores this value for future use. @return The number of bits per coordinate
1907 Fetches and returns the flags value from an action object. @return integer representation of the flags; defaults to 0 if not found
1908 Retrieves and returns integer flags associated with an action. @return Integer flags value; defaults to 0 if not found
1909 Retrieves the page number from a dictionary object. @return The page number as an integer or -1 if not found
1910 Retrieves the annotation index from the dictionary. @return An integer representing the annotation index or -1 if not found
1911 Fetches and returns annotation flags from COS object. @return integer representation of annotation flags, defaults to 0 if not found
1912 Retrieves the integer value of 'Q' from the COS object; defaults to 0 if not found. @return The integer value associated with 'Q' in the COS object or 0 if not present.
1913 Retrieves the rotation angle of an object in degrees. @return The rotation angle as an integer value.
1914 Checks if timestamp is required based on the dictionary value of FT. @return true if timestamp is required, false otherwise
1915 Retrieves and returns the open count from COSObject. @return Open count as an integer, defaults to 0 if not found.
1916 Retrieves an integer value associated with 'Q' from a dictionary. @return The integer value of 'Q' or default value 0 if not found
1917 Retrieves the top index from COS object or returns default value (0) if not found. @return The top index as an integer
1918 Fetches COS objects of a specified type. @param type the COS object type to fetch @return list of matching COSObject instances or empty if none found
1919 Removes page-specific resources from the cache to free up memory.
1920 Fetches color space by name. @param name unique identifier of color space @return PDColorSpace object or null if not found @throws IOException if there is an error reading the color space data
1921 Retrieves an embedded file from a PDF stream. @return PDEmbeddedFile object or null if not found in the stream
1922 Retrieves embedded file from DOS dictionary in PDF object. @return PDEmbeddedFile object or null if not found as COSStream
1923 Retrieves the embedded file for Mac from EFDictionary, if it exists and is a stream. @return PDEmbeddedFile object or null if not found or not a COSStream
1924 Fetches the embedded file in UNIX format from a PDF object. @return PDEmbeddedFile object or null if not found in UNIX format
1925 Retrieves embedded file in Unicode format from object dictionary. @return PDEmbeddedFile instance if found, otherwise null
1926 Initializes AxialShadingContext with shading, color model, and transform details. @param shading PDShadingType2 object containing shading info @param colorModel ColorModel for the shading @param xform AffineTransform object @param matrix Matrix object for transformation @param deviceBounds Rectangle defining the device boundaries @throws IOException if an error occurs during initialization
1927 Initializes a RadialShadingContext with provided parameters and calculates necessary constants. @param shading PDShadingType3 object representing the shading type @param colorModel ColorModel for the shading @param xform AffineTransform to be applied @param matrix Matrix used in calculations @param deviceBounds Rectangle defining device boundaries @throws IOException if an I/O error occurs
1928 Initializes a triangle-based shading context for rendering. @param shading the shading object to be used @param cm the color model to be used in the shading process @param xform the affine transformation to apply during shading @param matrix the transformation matrix for the shading @throws IOException if an error occurs during initialization
1929 Initializes a Type1ShadingContext with shading parameters and transformations. @param shading PDShadingType1 object containing color function information @param colorModel ColorModel for the shading @param xform AffineTransform to apply @param matrix Matrix for additional transformation
1930 Initializes PDFObjectStreamParser with COSStream and COSDocument. Validates and sets up the number of objects and the first object's offset. @param stream input data stream @param document associated COSDocument for reference @throws IOException if mandatory entries are missing or invalid in the object stream
1931 Constructs PDCIDFontType0 from a COS dictionary & parent font. Handles embedded and fallback CFF fonts. @param fontDictionary COS dictionary containing font data @param parent parent PDType0Font object @throws IOException if there's an issue reading the font data
1932 Initializes PDCIDFontType2 with font dictionary and TrueTypeFont. Handles embedded OTF or TTF. @param fontDictionary COSDictionary containing font data @param trueTypeFont the TrueTypeFont to be used, can be null for embedded fonts @throws IOException if there's an error reading the embedded font
1933 Reads and returns a CMap based on the input base. @param base a COSBase object, typically a COSName for predefined CMap or COSStream for embedded CMap @return a CMap object; throws IOException if base is neither Name nor Stream
1934 Writes the body of a COS document, preserving root, info, and encryption objects. @param doc The COSDocument to write @throws IOException if an I/O error occurs during writing
1935 Saves data to a file specified by its name. @param fileName name of the file to be saved @throws IOException if an I/O error occurs while saving
1936 Collects and handles updatable objects like dictionaries, arrays, or specific objects. @param base the COSBase object to be collected and handled @return true if collection is successful, false otherwise
1937 Sets the trailer dictionary and updates its origin document state. @param newTrailer COSDictionary containing trailer data to be set
1938 Updates the state of a COSBase object. Sets origin document state for COSUpdateInfo objects. @param child the COSBase object to update
1939 Retrieves a value associated with the given name from this node or its children. @param name The key for which to retrieve the value. @return The value associated with the name, or null if not found. @throws IOException If an I/O error occurs during retrieval.
1940 Fetches object's name using provided key or returns a default value if not found. @param name the key to search for in the object @param defaultValue the fallback value to return if key is not present @return the value associated with the key, or the default value if not found
1941 Retrieves the style of the object as a string. @return The name of the style from COS object or default if not found
1942 Fetches the root of the structure tree by traversing up from the current node. @return The PDStructureTreeRoot if found, otherwise returns null.
1943 Retrieves a list of kid objects from the COS dictionary. @return List<Object> containing all found kid objects
1944 Returns the PDEncryption object for this document, creating it if necessary and encrypted. @return PDEncryption object or null if not encrypted
1945 Prepares the document for decryption using provided credentials. @throws IOException in case of encryption errors or invalid credentials
1946 Reads and interprets the encoding from a dictionary. Handles predefined CMap and custom CMap. @throws IOException if required CMap is missing or invalid
1947 Repairs the length of a byte array segment ending with 'exec'. @param bytes input data @param length1 initial segment length @return adjusted segment length or original if no adjustment needed
1948 Repairs length2 if necessary by validating and adjusting it based on the byte array's length and length1. @param bytes input byte array @param length1 first length parameter @param length2 second length parameter to be repaired if needed @return corrected value for length2 or maximum possible if invalid input is provided
1949 Retrieves fractional display string from COS object with default fallback. @return Fractional display string or default if not found
1950 Fetches thousands separator used in number formatting. @return A string representing the thousand separator, defaults to comma if not found.
1951 Fetches the decimal separator used in the COS object configuration. @return Decimal separator as a string, defaults to '.' if not found
1952 Fetches label prefix string from COS object. @return Label prefix string or a space if not found
1953 Fetches and returns a label suffix string from the COS object. @return Label suffix string or an empty space if not found
1954 Retrieves the label position value from COS object with fallback to default suffix. @return String representation of the label position or a default value if not found
1955 Fetches an embedded string from a specified dictionary. @param embedded the COSName of the embedded dictionary @param key the COSName of the desired entry in the dictionary @return the corresponding String value or null if not found
1956 Retrieves a priority queue of font matches based on descriptor and CID system info. @param fontDescriptor describes the desired font @param cidSystemInfo provides additional character set information, can be null @return PriorityQueue<FontMatch> sorted by match quality
1957 Validates the owner password based on encryption revision. @param ownerPassword byte array of owner's password @param user byte array of user data @param owner byte array of owner data @param encRevision encryption revision number @return true if password is valid, false otherwise @throws IOException for unknown encryption revisions
1958 Parses a CharSequence into an InstructionSequence. @param text the input sequence to parse @return an InstructionSequence object representing the parsed instructions
1959 Decrypts a given stream if it is not metadata or identity-filtered XREF.
1960 Encrypts data in a given COSStream if it contains data. @param stream COSStream to be encrypted @param objNum object number for encryption @param genNum generation number for encryption @throws IOException if an I/O error occurs during encryption
1961 Decrypts a COSString if encrypted with a filter other than identity. @param string the input encrypted or unencrypted COSString @param objNum object number for decryption context @param genNum generation number for decryption context @return Decrypted COSString or original if not encrypted with a filter other than identity
1962 Encrypts a given string using object and generation numbers. @param string the input COSString to be encrypted @param objNum the object number for encryption @param genNum the generation number for encryption @return an encrypted COSString
1963 Verifies if the given password is valid for a user with specified attributes. @param password to be checked @param user, owner, id bytes and permissions for user authentication @return true if password is correct, false otherwise @throws IOException if there's an issue with input/output operations
1964 Finds and returns a FontBoxFont by its PostScript name in various formats. @param postScriptName the PostScript name of the font to find @return FontBoxFont object or null if not found in supported formats
1965 Writes a page of text to the output, handling formatting and line breaks. @throws IOException if an error occurs while writing to the output stream
1966 Retrieves a date from the dictionary using key. @param key unique identifier for the date in the dictionary @return Calendar object if found, otherwise null
1967 Writes a COSBase token to the output stream. @param base The COSBase object to be written @throws IOException if an I/O error occurs during writing
1968 Writes a COSBase object to an OutputStream. Handles various data types and references.
1969 Displays text with positioning using an array consisting of Strings and Floats. @param textWithPositioningArray - Object array containing text (Strings) and positions (Floats). @throws IOException if there's an issue writing the output.
1970 Displays given text and writes operator name to output stream. @param text the string to be displayed @throws IOException if an I/O error occurs during writing operation
1971 Creates a PageDrawer object with specified parameters and annotation filter. @param parameters Configuration settings for the PageDrawer @return Configured PageDrawer object @throws IOException If there is an issue creating or configuring the PageDrawer
1972 Constructs a PDFormXObject from a PDDocument and initializes it with a COSName of FORM. @param document the parent PDDocument for this XObject
1973 Initializes PDMetadata for a given document and input stream. Sets the type and subtype of metadata. @param doc the PDF document @param str the input stream containing metadata @throws IOException if an I/O error occurs
1974 Constructs a PDEmbeddedFile object with the given document and input stream. Sets the type of the COS object to EMBEDDED_FILE. @param doc PDDocument object @param str InputStream for data @throws IOException if an I/O error occurs
1975 Constructs an embedded file object with the specified document, input stream, and filter. @param doc The PDF document to which this embedded file belongs. @param input The input stream from which data is read for the embedded file. @param filter The COSName filter used during construction of the embedded file. @throws IOException if an I/O error occurs.
1976 Prepares and encodes an image object for a PDF document. @param byteArray raw image data @param width image width in pixels @param height image height in pixels @return encoded PDImageXObject ready to be used in the document @throws IOException if encoding or input/output operations fail
1977 Constructs a new PDExportFormatAttributeObject with the specified owner. @param owner the unique identifier of the object's owner
1978 Fetches and organizes attribute objects from the COS object's dictionary. @return Revisions<PDAttributeObject> containing fetched attributes with revision numbers
1979 Retrieves the appearance stream of a given annotation. @param annotation The input PDAnnotation object @return The PDAppearanceStream object or null if not found
1980 Adds font resources from annotation to acroFormResources if not already present, excluding subsetted fonts. @param acroFormResources resources of the AcroForm @param annotation the annotation containing potential font resources
1981 Retrieves and combines 'on' values from exports and widgets into a Set. @return A Set of unique 'on' values.
1982 Checks if the current value equals the on-value. @return true if they are equal, false otherwise.
1983 Sets current value to the result of getOnValue(). Throws IOException if there's an error while getting on value.
1984 Initializes FileSystemFontProvider and scans local system for fonts. Caches found fonts for future use. @param cache FontCache object to store fetched font information
1985 Initializes an FDFParser with a RandomAccessRead source. @param source the data source to parse FDF from @throws IOException if there is an issue reading from the source
1986 Initializes a PDFParser with a source and optional decryption password. @param source RandomAccessRead input for the parser @param decryptionPassword String used to decrypt encrypted PDF files
1987 Draws the specified style on a content stream based on given parameters. @param style The type of line end to draw (e.g., arrow, butt, diamond). @param cs Content stream where drawing is performed. @param x X-coordinate for the drawing. @param y Y-coordinate for the drawing. @param width Width of the line to draw. @param ending Determines if it's an ending style.
1988 Initializes tiling paint with a texture pattern. @param drawer PageDrawer object for drawing @param pattern Tiling pattern to apply @param colorSpace Color space of the pattern @param color Pattern color @param xform Affine transformation to be applied @throws IOException if an I/O error occurs during image retrieval
1989 Retrieves an opaque image of a specified region with optional subsampling. @param region the area of the image to be fetched @param subsampling factor for reducing image size and complexity @return BufferedImage object representing the specified region, or throws IOException if error occurs
1990 Retrieves a BufferedImage with RGB values from the given PDImage and color key. @param pdImage source image object @param colorKey array of color keys for indexed images @return BufferedImage with RGB values or null if an IOException occurs @throws IOException if there is an error reading the image data
1991 Manages resource lookup for content stream, prioritizing stream resources over page resources. @param contentStream the stream to push resources from @return the previous resources object or null if none existed
1992 Calculates an AffineTransform for centering a rectangle within another rectangle. @param page the PDPage containing the media box to center overlayMediaBox in @param overlayMediaBox the PDRectangle to be centered within the page's media box @return an AffineTransform that can be used for centering overlayMediaBox on page
1993 Rotates the media box of a page based on its rotation angle. @param page The PDPage object to get the media box from @return A rotated PDRectangle or the original if no rotation is needed
1994 Checks if an item is marked in the dictionary. @return true if marked, false otherwise
1995 Checks if user properties are used in the system. @return true if user properties are enabled, otherwise false
1996 Checks if an entity is marked as a suspect in the dictionary. @return true if marked as suspect, otherwise false
1997 Checks if mouse position tracking is enabled based on map settings. @return true if tracking is enabled, otherwise false
1998 Checks if an object is open. @return true if the object is open, otherwise false
1999 Checks and returns if "FD" exists in COSObject and its value is true. @return true if "FD" exists and is true, otherwise false
2000 Gets non-stroking overprint control from the dictionary. @return boolean value indicating non-stroking overprint control
2001 Fetches an integer value from a specific dictionary with a fallback. @param embeddedDictionary the target dictionary @param key the key to retrieve the int value @return the int value or -1 if not found or on error
2002 Fetches and returns the denominator value from COS object.
2003 Wraps the output stream with a predictor based on given parameters. @param out original OutputStream @param decodeParams dictionary containing decoding parameters, including predictor type and colors @return modified or original OutputStream depending on predictor value
2004 Fetches and returns the integer value of STRUCT_PARENTS from the page object.
2005 Fetches and returns the bits per sample from the COS object.
2006 Retrieves the MCID (Machine Coding Identifier) from the COS object. @return The Machine Coding Identifier as an integer
2007 Retrieves the next key in the parent tree of a COS object. @return The next key as an integer value
2008 Fetches the Main Content ID (MCID) from properties or returns -1 if not found.
2009 Fetches and returns the line cap style from the dictionary object.
2010 Fetches and returns the line join style from the dictionary object. @return Line join style integer value as defined in COSName.LJ
2011 Retrieves the parent structure from COS object. @return The integer value representing the parent structure
2012 Fetches and returns an integer value associated with 'P' in the dictionary.
2013 Fetches the maximum length from the COS object. @return The maximum length as an integer value
2014 Retrieves an integer value from COS object by name or returns a default value. @param name the key to search for in the COS object @param defaultValue the value returned if 'name' is not found in the COS object @return an integer value from the COS object or the default value if not found
2015 Checks if an object is invisible based on its flags. @return true if the object is flagged as invisible, false otherwise
2016 Checks if a flag in annotation is set to hidden. @return true if the flag is set to hidden, false otherwise
2017 Checks and returns if the print flag is set in the annotation. @return true if printed flag is set; false otherwise
2018 Checks if zooming is disabled in PDF annotation flags. @return true if zooming is disabled, false otherwise
2019 Checks if rotation is disabled based on a specific flag in annotations. @return true if rotation is disabled, false otherwise
2020 Checks if no view flag is set in the annotation. @return true if no view flag is set, false otherwise
2021 Checks if the object has read-only flag set. @return true if object is read-only, false otherwise
2022 Checks if the annotation flag is set to locked. @return true if the annotation flag is locked, false otherwise
2023 Checks if toggle no view flag is set in the annotation. @return true if flag is set, false otherwise
2024 Checks if contents are locked based on specific flag in annotation. @return true if contents are locked, false otherwise
2025 Checks if the COS object has an invisible flag set. @return true if the object is invisible, false otherwise
2026 Checks if the COS object is hidden based on its flag. @return true if the object is hidden, false otherwise
2027 Checks if the COS object has the 'printed' flag set. @return true if printed, false otherwise
2028 Checks if zooming is disabled for a COS object. @return true if zooming is disabled, false otherwise
2029 Checks if rotation is disabled for a COS object. @return true if no rotation is set, false otherwise
2030 Checks if COS object has NO_VIEW flag set. @return true if NO_VIEW flag is present, false otherwise
2031 Checks if the COS object is read-only. @return true if read-only, false otherwise
2032 Checks if the COS object is locked. @return true if locked, false otherwise
2033 Checks if toggle no view flag is set for the COS object. @return true if toggle no view flag is set, false otherwise
2034 Checks if contents are locked based on COS object flags. @return true if locked; false otherwise
2035 Checks if filtering is required based on COS object flags. @return true if filtering is required, false otherwise
2036 Checks if subfilter flag is required for the COS object. @return true if subfilter flag is required, false otherwise
2037 Checks if digest method is required for a COS object flag. @return true if digest method is required, false otherwise
2038 Checks if V flag is required in the COS object. @return true if V flag is set, false otherwise
2039 Checks if a reason flag is required for the COS object. @return true if reason is required, false otherwise
2040 Checks if legal attestation is required for the COS object. @return true if required, false otherwise
2041 Checks if additional revision information is required for the COS object. @return true if additional revision info is needed, false otherwise
2042 Checks if subject is required based on dictionary flags. @return true if subject is required, false otherwise
2043 Checks if issuer flag is required in the COS dictionary. @return true if required, false otherwise
2044 Checks if Object Identifier (OID) is required in the document's flags. @return true if OID is required; false otherwise
2045 Checks if subject DN (Distinguished Name) is required as per the flag in the dictionary. @return true if subject DN is required, false otherwise
2046 Checks if key usage flag is required in the dictionary. @return true if required, false otherwise
2047 Checks if URL is required based on a flag in the dictionary. @return true if URL is required, false otherwise
2048 Checks if text style in this object is italic. @return true if italic, false otherwise
2049 Checks if the text style of the object is bold. @return true if the text is bold; false otherwise
2050 Checks if signatures exist in the dictionary using a specific flag. @return true if signatures exist, false otherwise
2051 Checks if the dictionary has the append-only flag set. @return true if append-only, false otherwise
2052 Checks if the COS object is marked as a push button. @return true if the object is a push button, false otherwise
2053 Checks if the COS object has the radio button flag set. @return true if it's a radio button, false otherwise
2054 Checks if the COS object is sorted based on specific flag. @return true if sorted, false otherwise
2055 Checks if the COS object supports multi-selection. @return true if multi-select is supported, false otherwise
2056 Checks if spell check should be disabled for the COS object. @return true if spell check is disabled, false otherwise
2057 Checks if the Commit On Selection Change flag is set in the COS object. @return true if flag is set, false otherwise
2058 Checks if the COS object has the COMBO flag set. @return true if the COMBO flag is set, false otherwise
2059 Checks if the COS object has the edit flag set. @return true if the edit flag is set, false otherwise
2060 Checks if the dictionary is read-only. @return true if dictionary is read-only, false otherwise
2061 Checks if the flag 'FLAG_REQUIRED' is set in the COSName 'FF'. @return true if required, false otherwise
2062 Checks if the 'no export' flag is set in the dictionary. @return true if 'no export' flag is set; false otherwise
2063 Checks if radios are in unison based on a flag in the COS object. @return true if radios are in unison, false otherwise
2064 Checks if COS object has multiline flag set. @return true if object is multiline; false otherwise
2065 Checks if a COS object has a password flag set. @return true if the object has a password flag, false otherwise
2066 Checks if the COS object is marked as a file select. @return true if the object has the FILE_SELECT flag set; otherwise false
2067 Checks if spell check is disabled for the COS object. @return true if spell check is disabled, false otherwise
2068 Checks if scrolling is disabled for this COS object. @return true if scrolling is disabled; false otherwise
2069 Checks if the COS object has the COMB flag set. @return true if the COMB flag is set, false otherwise
2070 Checks if the COS object contains rich text. @return true if it's rich text, false otherwise
2071 Prepares for decryption using the provided encryption data and decryption material. @param encryption Encryption object containing document metadata @param documentIDArray Array of document IDs (not used in this method) @param decryptionMaterial Decryption material, must be PublicKeyDecryptionMaterial type @throws IOException If decryption material is not compatible or if there are issues with the certificate
2072 Fetches and modifies owner key based on revision number. @return byte array of the modified owner key or null if not found @throws IOException if input/output error occurs
2073 Fetches and formats the user key from a dictionary object. @return Byte array representing the user key or null if not found. @throws IOException if there's an issue reading the bytes from COSString
2074 Calculates displacement vector based on width code. @param code unique identifier for width @return Displacement vector as a Vector object @throws IOException if there's an issue retrieving the width
2075 Calculates the total width of a given text string by summing up individual character widths. @param text input string to calculate width for @return total width of the string @throws IOException if an I/O error occurs during encoding or reading the stream
2076 Retrieves a pattern object by name from the cache or creates it if not found. @param name unique identifier of the pattern @return PDAbstractPattern object or null if not created/found @throws IOException if there's an issue with reading the pattern data
2077 Retrieves a PDShading object by name from the document's resources. @param name COSName of the shading resource @return PDShading object or null if not found or an error occurs
2078 Returns the shading object associated with this instance, creating it if necessary. @return PDShading object or null if not available @throws IOException if there is an error reading the shading data
2079 Checks if a node is open based on its open count. @return true if open count is greater than 0, false otherwise
2080 Creates a PDField based on the provided form and COSDictionary. @param form PDAcroForm to which field belongs @param field COSDictionary containing field properties @param parent PDNonTerminalField that is the parent of this field (if applicable) @return Corresponding PDField instance or null if invalid field type
2081 Fetches a PDXObject by name from the XOBJECT dictionary. @param name unique identifier for the object @return PDXObject instance or null if not found
2082 Initializes a GouraudShadingContext with the provided parameters. @param shading PDShading object for rendering @param colorModel ColorModel to use for shading @param xform AffineTransform object for coordinate transformation @param matrix Matrix object for advanced transformations @throws IOException if there's an issue with the input objects
2083 Creates an input stream to read data from the COS object. @return COSInputStream to read data or throw IOException if error occurs
2084 Parses and retrieves an object from a PDF object stream. @param objstmObjNr the object stream number @param key unique identifier for the object in the stream @return COSBase object or null if not found @throws IOException if there's an issue parsing the stream
2085 Fetches and returns an InputStream for the contents. @return InputStream containing contents or empty if not available @throws IOException if there's a problem accessing contents
2086 Constructs a Type 2 CIDFont using a font dictionary and optional parent font. @param fontDictionary contains font data @param parent optional parent font of type PDType0Font @throws IOException if there's an issue reading the font data
2087 Retrieves a CID font object based on cidFont, parent and ttf parameters. @return PDCIDFontType2 object representing the CID font @throws IOException if there is an issue reading the font data
2088 Recursively collects and updates COSArray entries. @param array the COSArray to process @return true if any entry or descendant requires an update, false otherwise
2089 Fetches and returns a set of COSBase objects, initializing from the origin if not already done. @return A set of COSBase objects
2090 Adds a COSBase object to the collection and updates its state. @param object The COSBase object to be added and updated.
2091 Adds a COSBase object to the collection at a specific index. Handles direct and indirect dictionaries/arrays differently. @param i index for insertion @param object COSBase object to be added
2092 Sets a COSBase object at given index and updates its state
2093 Sets an item in the dictionary with a key-value pair. Handles null values and updates state accordingly. @param key unique identifier for the item @param value data to be associated with the key, can be COSDictionary or COSArray, otherwise just stored as is
2094 Updates the children elements of an object using a COSArray. @param children array containing new child elements
2095 Fetches and returns a map of roles from the structure tree root. @return Map containing role names as keys and their associated objects; empty if no root found
2096 Adds a COSBase object to the pool, handling null and duplicate objects. @param key unique identifier for the object @param base object to be added to the pool @return the same object or a replacement if handled differently
2097 Applies a protection policy to the encryption. If no encryption exists, it creates one. @param policy The protection policy to be applied @throws IOException if no security handler is available for the given policy
2098 Retrieves the glyph name for a given Unicode code point. @param code Unicode code point @return Glyph name or ".notdef" if not found
2099 Maps character code to glyph ID based on font type (embedded or not). @param code the character code to map @return the corresponding glyph ID, or a default value if not found @throws IOException if an I/O error occurs
2100 Fetches the MAC subtype from the COS object parameters. @return MAC subtype as a String or null if not found
2101 Fetches the MAC creator from a COS object's parameters. @return String representing the MAC creator or null if not found
2102 Retrieves the Mac resource fork from a COSObject's parameters. @return the embedded string of the Mac resource fork or null if not found
2103 Fetches a CID font mapping based on base font name and descriptor. @param baseFont font's base name @param fontDescriptor PDFontDescriptor object @param cidSystemInfo PDCIDSystemInfo object for special character collections @return CIDFontMapping object, falls back to lastResortFont if no match is found
2104 Checks if the provided password matches the owner's password for a given file. @param password the input password to check @param user user data, owner data, permissions, id and encryption details are required for verification @return true if password is correct, false otherwise
2105 Writes regional pages by iterating through regions, setting character and output data, then calling the parent's writePage method.
2106 Fetches a date from PDF using a given key. @param key Key to identify the date in the PDF @return Calendar object for the identified date or null if not found
2107 Fetches a date associated with a key, returning the default value if not found. @param key COSName to identify the date @param defaultValue Calendar object used when no date is found for the key @return Calendar object (either fetched or default)
2108 Retrieves the creation date of the object from its information. @return The creation date as a Calendar object
2109 Returns the modification date of an object in PDF format. @return The modification date as a Calendar object
2110 Fetches creation date from annotations. @return Creation date as a Calendar object, or null if not found @throws IOException if there is an error while reading the data
2111 Fetches and returns the creation date of the COS object. @return Creation date as a Calendar object
2112 Fetches and returns the signing date from the dictionary object. @return Calendar object representing the signing date, or null if not found
2113 Writes an Operator token to the output stream. @param op The Operator object to be written @throws IOException if writing to the output stream fails
2114 Writes prepared objects to a COSStream with FLATE compression. @param stream the target COSStream for writing objects @return the same COSStream after writing, now containing the objects
2115 Writes a COSDictionary to the given OutputStream in PDF format. @param output stream to write the dictionary to @param cosDictionary dictionary object to be written @throws IOException if an I/O error occurs
2116 Constructs a new PDTransparencyGroup object. @param document The parent PDF document
2117 Initializes a new PDAppearanceStream instance with the given PDDocument. @param document The parent PDF document object to associate this stream with.
2118 Creates a PDImageXObject from a BufferedImage using JPEG compression. @param document the PDF document to which the object will be added @param image the source image as a BufferedImage @param quality the desired quality of the compressed image (0-1) @param dpi the desired resolution in dots per inch @return a PDImageXObject representing the compressed image @throws IOException if an I/O error occurs during compression or writing to document
2119 Validates if 'value' is a valid option for a specific field, throws exception otherwise. @param value the string to be checked
2120 Loads an FDF document from a file. @param file the input File object containing the FDF data @return a parsed FDFDocument object @throws IOException if there is an error reading or parsing the file
2121 Loads and parses an FDF document from the provided input stream. @param input InputStream containing FDF data @return Parsed FDFDocument object, or throws IOException if error occurs @throws IOException If there is a problem reading from the InputStream
2122 Constructs a PDFParser with a given RandomAccessRead source and an empty password. @param source input data to parse as a PDF @throws IOException if there's an issue reading from the source
2123 Initializes tiling paint with a specific pattern and transformation. @param drawer PageDrawer object for drawing patterns @param pattern Tiling pattern to be used @param xform AffineTransform object for transforming the pattern @throws IOException if there's an issue with reading the pattern
2124 Returns an opaque version of the image. @return BufferedImage object representing the opaque image @throws IOException if there is a problem reading the image data
2125 Performs LZW decoding on input stream to output stream using provided parameters and predictor. @param encoded InputStream containing the encoded data @param decoded OutputStream for the decoded data @param parameters Dictionary with decode parameters @param index Parameter index @return DecodeResult object containing updated parameters @throws IOException if input/output operations fail
2126 Appends marked content to the list using its MCID, validating it first. @param markedContent object containing data and MCID @throws IllegalArgumentException if MCID is negative or doesn't exist
2127 Fetches and sets the Unicode CMap for composite fonts with specific encodings or CJK descendants. @throws IOException if there's an issue reading the CMap files
2128 Checks if the field should be combined for text extraction. @return true if conditions are met, false otherwise
2129 Prepares the object for decryption using provided encryption details and material. Throws exception if decryption material is incompatible or password is incorrect. @param encryption PDEncryption object containing encryption details @param documentIDArray COSArray of document IDs @param decryptionMaterial DecryptionMaterial to be used for decryption @throws IOException if decryption fails due to incompatible material or incorrect password
2130 Returns the width of a space character in the font, calculating it if necessary.
2131 Checks if the audio format has fixed pitch. @return true if the format has fixed pitch, false otherwise
2132 Checks if the serif flag is on. @return true if the serif flag is on, false otherwise
2133 Checks if the symbolic flag is on. @return true if the symbolic flag is set, false otherwise
2134 Checks if the script flag is set. @return true if the script flag is on, false otherwise
2135 Checks if the object has the non-symbolic flag set. @return true if non-symbolic, false otherwise
2136 Checks if the text style flag for italics is on. @return true if text is italic, false otherwise
2137 Checks if all characters in the flag are capitalized. @return true if all characters are capitalized, false otherwise
2138 Checks if the flag bit for small cap is on. @return true if small cap, false otherwise
2139 Checks if the force bold flag bit is on. @return true if the flag bit is on, false otherwise
2140 Retrieves a pattern based on the given color. @param color PDColor object containing the pattern name @return PDAbstractPattern object if found, throws IOException otherwise
2141 Creates a PDField object from a dictionary in the given PDForm and PDF structure. @param form the PDForm containing the field @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField, if any @return the created PDField object
2142 Reads input stream and returns its content as a String. @return Content of the input stream or an empty String if IOException occurs.
2143 Creates and returns an input stream from the underlying stream object. @return COSInputStream object @throws IOException if an I/O error occurs while creating the input stream
2144 Collects patches from a COSStream object using provided transformations and control points. @param xform AffineTransform for transformation @param matrix Matrix for calculations @param controlPoints Number of control points @return List of Patch objects or an empty list if no valid patches found @throws IOException If there is an error reading the stream or decoding parameters
2145 Creates a CID-based descendant font from dictionary and parent Type0 font. @param dictionary containing font data @param parent Type0 font to inherit properties @return PDCIDFont object based on subtype in dictionary @throws IOException if invalid font type or 'Font' dictionary not found
2146 Returns an iterator over all COSBase objects in this collection. @return An iterator of type COSBase
2147 Adds a COSObject to the collection from a given COSObjectable object. @param object The source of the COSObject, can be null
2148 Ensures the capacity of 'objects' and grows it to a specified size by adding given objects. @param size desired capacity @param object object to be added until reaching the desired size
2149 Clears current data and sets new float array values. @param value an array of floats to be added to the object
2150 Parses and returns a COSArray from the source stream. @return A populated COSArray object or an empty one if parsing fails @throws IOException If there's an issue reading from the source stream
2151 Prepares and returns a COSStream for cross-reference data, setting type, size, index, and width entries. @return the prepared COSStream object @throws IOException if there's an issue writing stream data
2152 Initializes a PDRange object with default values [0,1].
2153 Retrieves encoded values array, initializes if null with default pattern. @return COSArray of encoded values
2154 Initializes PDFunctionType2 with default values if necessary, sets coefficients and exponent. @param function COSBase object containing the function data
2155 Initializes an FDFOptionElement with two empty strings in a COSArray.
2156 Initializes a new PDFontSetting object with default values: null and 1.0.
2157 Retrieves the whitepoint of the PDF document, defaults to (1, 1, 1) if not found. @return PDTristimulus object representing the whitepoint
2158 Retrieves the black point from the dictionary, or returns a default (0,0,0) if not found. @return Black point as a PDTristimulus object
2159 Converts components to a COSArray and optionally adds pattern name. @return COSArray representation of the object, with optional pattern name appended
2160 Initializes a PDDeviceN object with an array containing DEVICEN and three NULL placeholders.
2161 Initializes a PDGamma object with default values (0, 0, 0).
2162 Fetches the alternate color space from a stream's dictionary object. @return The alternate color space, or throws an IOException if not found or invalid type. @throws IOException If the alternate color space is not a COSArray or COSName.
2163 Initializes an indexed color space with DeviceRGB and 255 bits per component.
2164 Generates a default COSArray for range with predefined float values. @return COSArray object containing default range values
2165 Initializes a PDPattern object with given resources and sets up an array for pattern data. @param resources the resources to be used in the pattern
2166 Initializes a PDSeparation object with standard separation parameters.
2167 Initializes a PDTristimulus object with default values (0, 0, 0).
2168 Creates a PDTristimulus object from an array of floats, up to 3 elements. @param array input float values for the tristimulus object
2169 Sets the matrix transformation for this object using an AffineTransform. @param transform The AffineTransform containing the new matrix values.
2170 Creates a PDImageXObject from a byte array, using specified document and color space. @param document the document to which the image belongs @param byteArray the input data for the image @return a PDImageXObject instance created from the provided byte array @throws IOException if an I/O error occurs during the creation process
2171 Converts specific elements of a float array to a COSArray. @return COSArray with selected float values from the input array
2172 Sets a COSObject at the specified index in the collection. @param index position to insert or replace the object @param object COSObjectable instance to be converted and inserted; null is allowed
2173 Sets an integer value at a specified index in the collection. @param index position to insert the value @param value integer value to be inserted
2174 Sets a PDF name at a specific index in the collection. @param index position to insert the name @param name string to be converted and inserted as a PDF name
2175 Sets a string at the specified index. If the input string is not null, it wraps it in a COSString and sets it; otherwise, it sets null. @param index position to set the string @param string the string to be set or null if removing an existing string
2176 Sets the minimum value of the range at a specific index in an array. @param min The minimum value to be set
2177 Sets the maximum value in the range array at the specified index. @param max the maximum value to be set
2178 Sets the lower left X coordinate of the rectangle in the array. @param value float value representing the new X coordinate
2179 Sets the lower left Y coordinate of the rectangle in the array. @param value new Y coordinate for the lower left corner
2180 Sets the upper right x coordinate of a rectangle in an array. @param value The new x-coordinate value to be set
2181 Sets the upper right y-coordinate of the rectangle in an array. @param value new coordinate for the upper right y-point
2182 Sets the color at a specific index in an array to the provided PDGamma object or null value. @param index position in the array @param colour PDGamma object representing the color; null sets it to NULL
2183 Decrypts all elements in a COSArray using provided keys. @param array the COSArray to be decrypted @param objNum object number for decryption key @param genNum generation number for decryption key @throws IOException if an I/O error occurs during decryption
2184 Sets an option using the provided string value. @param opt The string value to be set as an option
2185 Sets the default appearance string in an option object. @param da the default appearance string to be set
2186 Sets the font size to a specified value in a PDF document. @param size the desired font size as a floating-point number
2187 Sets or removes device N attributes from the object's internal array. @param attributes PDDeviceNAttributes to be set; null to remove them
2188 Sets the alternate color space for this object and updates its COSBase representation. @param cs the PDColorSpace to be set as the alternate color space
2189 Sets the radius value in the values collection at index 0. @param r float value representing the radius to be set
2190 Sets the value of 'g' within an array of values using a COSFloat object. @param g float value to be set at index 1 in the values array
2191 Sets the float value at index 2 in the 'values' list to the given parameter 'b'. @param b the float value to be set
2192 Sets the range for a component in the stream's COSObject array. @param range PDRange object representing the minimum and maximum values @param n index to set the range within the COSArray
2193 Sets the base color space and updates the internal array with its COS object. @param base the new base color space to set
2194 Sets the colorant name in the array at index 1 with a PDF-compatible name. @param name The new colorant name to be set.
2195 Sets an alternate color space for the object and updates its internal representation. @param colorSpace new color space to be set (null resets it)
2196 Sets the X value in the 'values' array at index 0 with the provided float. @param x The new floating-point value to be set
2197 Sets the Y value in the values collection at index 1 with a new COSFloat object. @param y float value to be set
2198 Sets the Z value in an array of values to the given float value. @param z the float value to be stored at index 2 in the 'values' array
2199 Sets a key-value pair in the item, with an optional transformation of the value. @param key unique identifier for the item @param value object to be stored; if null, sets the item's value to null
2200 Sets a boolean value in the PDF document using a specified key. @param key the unique identifier for the boolean value @param value the boolean value to be set
2201 Sets a boolean value in the COS object using the given key. @param key unique identifier of the item to be set @param value boolean value to be assigned to the key
2202 Sets an item in the PDF document using a key and its corresponding value. @param key unique identifier for the item @param value COSBase object representing the item's value
2203 Sets a named key with a given value in the COS object. Converts the string value to a PDF-compatible format if not null. @param key The unique identifier for the data item @param value The data item's value as a String, will be converted to COSName if not null
2204 Sets a string value for the specified key in the object. @param key unique identifier of type COSName @param value string to be set; if null, removes the key-value pair
2205 Sets an integer value for a given key in the COS object.
2206 Sets a long value associated with a given key in the object. @param key unique identifier for the data @param value long integer to be stored
2207 Sets a floating-point number as the value for the given key in this object. @param key unique identifier of the value @param value floating-point number to be stored
2208 Creates a COSStream object from the given dictionary and stream parameters. @param dictionary contains metadata about the stream @param startPosition beginning point of the stream data @param streamLength length of the stream data @return initialized COSStream object
2209 Sets the encryption dictionary in the PDF trailer. @param encDictionary COSDictionary containing encryption settings.
2210 Sets the document ID in the trailer of this object. @param id a COSArray containing the unique document identifier
2211 Wraps a PDF page's content in save/restore (q/Q) to control the environment for additional content addition. @param page The PDPage object to be wrapped @throws IOException if contents are of an unknown type
2212 Updates the parent entry in a COSArray with a new parent and structure type. @param kArray the array to update @param newParent the new parent dictionary @param newStructureType the new structure type name (optional)
2213 Searches for a trailer dictionary in the PDF file. @param trailer COSDictionary to store found trailer data @return true if valid trailer is found, otherwise false @throws IOException if an I/O error occurs
2214 Searches for trailer items in a COSDictionary and updates it accordingly. @param trailer the dictionary to search within @return true if root object is found and updated, false otherwise
2215 Initial parsing of the PDF document. Throws an exception if root object is missing in trailer. Sets up the document for decryption after checking pages dictionaries.
2216 Parses and returns the next token from a data source, handling various types of data. @return The parsed object or null if end of file or error occurs. @throws IOException if an I/O error occurs while reading the source.
2217 Writes a PDDocument to an output stream using the specified SignatureInterface. Handles encryption, incremental updates, and document ID generation. @param doc the PDDocument to write @param signInterface the interface for signing the document @throws IOException if there's an error writing the document
2218 Retrieves and returns document information from the PDF document. If not already loaded, it initializes the documentInformation object. @return Document information as a PDDocumentInformation object
2219 Sets and updates document information in the PDDocument. @param info PDDocumentInformation object containing updated information
2220 Initializes the PDF document catalog and sets it as the root of the document. @param doc the PDDocument to which this catalog belongs
2221 Retrieves and returns a list of PDThread objects from the root object. If none exist, creates an empty list and sets it in the root object.
2222 Retrieves additional actions from the document catalog. Creates a new one if it doesn't exist. @return PDDocumentCatalogAdditionalActions object
2223 Adds an output intent to the PDF document's root object. @param outputIntent the output intent to add
2224 Initializes document name dictionary from the given document catalog. @param cat PDDocumentCatalog object containing document information
2225 Sets the crop box for a PDF page. If null is passed, removes the crop box; otherwise, sets it. @param cropBox rectangle defining the new crop box or null to remove it
2226 Retrieves additional actions for a PDF page. If none exist, creates and returns an empty one. @return PDPageAdditionalActions object containing the page's additional actions
2227 Initializes a new empty PDPageTree object with default settings.
2228 Extracts and returns COSDictionary objects from a given node's "KIDS" array. Handles null or non-COSDictionary entries. @param node the source COSDictionary object @return List of COSDictionary objects extracted from the node
2229 Clears all items in the dictionary and associated arrays. If a parent dictionary exists, sets this item to null.
2230 Returns a COSDictionary object containing labels as key-value pairs in a COSArray. @return COSDictionary with labels represented as a COSArray
2231 Initializes a PDF complex file specification with a default type.
2232 Constructs a PDComplexFileSpecification object from a given dictionary. If the dictionary is null, creates a new one and sets its type to FILESPEC. @param dict COSDictionary for file specification, can be null
2233 Sets and updates the range values in the COS object with provided array. @param rangeValues a COSArray containing new range values to be set
2234 Sets and updates the COS object's domain values with the provided array. @param domainValues an array of domain values to be set for the COS object
2235 Sets and updates the encoding values for the COS object. @param encodeValues a COSArray of encoding values to be set
2236 Sets and updates the decoding values for this object in COS format. @param decodeValues an array of COS objects containing the decoding values
2237 Sets an attribute with a given name to a specified value and notifies of any changes. @param attrName the name of the attribute @param attrValue the new value for the attribute
2238 Removes a specific attribute from the PDAttributeObject and updates the COSObject accordingly. @param attributeObject The object containing the attribute to remove
2239 Updates revision number in attribute object's COSArray if applicable. @param attributeObject the PDAttributeObject to be updated
2240 Adds a class name to the COSArray in the COSObject dictionary. @param className the name of the class to be added
2241 Removes a class name from the COS object dictionary. @param className the name of the class to be removed
2242 Appends a 'kid' object to the existing structure, handling various scenarios. @param object COSBase object to be appended as a 'kid'. If null, method returns early.
2243 Inserts a new kid object before the reference kid in the COSArray or replaces the single existing kid. @param newKid the new COSBase object to insert @param refKid the reference COSObjectable or COSBase object before which to insert newKid
2244 Removes a kid object from the collection if it exists. @param object The COSBase object to be removed as a kid @return True if the object was successfully removed, false otherwise
2245 Sets the 'K' value of the COS object using a provided COSBase object. @param k COSBase object to be set as 'K'
2246 Sets a new value and notifies if it has changed. @param value the COSBase object to be set as the new value
2247 Returns the guideline color from a dictionary or a default black color if not found. @return PDColor object representing the guideline color
2248 Retrieves the line dash pattern from the dictionary or defaults to a solid line if none exists. @return PDLineDashPattern object representing the line dash pattern
2249 Sets the line dash pattern in the dictionary using a given COSArray. @param dashArray an array containing the dash pattern values
2250 Sets the encryption filter method in the crypt dictionary. @param cfm encryption filter method as a COSName object
2251 Sets a filter for the dictionary using the provided string. @param filter The filter to be applied in PDF format
2252 Sets the owner key in the dictionary with a byte array value. @param o byte array representing the owner key @throws IOException if an I/O error occurs during setting the item
2253 Sets the user key in the dictionary with provided byte array. @param u byte array representing the user key @throws IOException if an I/O error occurs during operation
2254 Sets the owner encryption key in the dictionary. @param oe byte array representing the encryption key @throws IOException if an I/O error occurs during operation
2255 Sets the user encryption key in a dictionary object. @param ue byte array representing the user encryption key @throws IOException if there is an issue setting the key
2256 Sets the recipients for a PDF document from a byte array. @param recipients 2D byte array containing recipient data @throws IOException if an I/O error occurs
2257 Sets a crypt filter dictionary in the current dictionary using a given name and COS object. @param cryptFilterName unique identifier for the crypt filter @param cryptFilterDictionary the crypt filter dictionary to be set
2258 Sets the stream filter name in the PDF dictionary. @param streamFilterName the COSName representing the stream filter to be set
2259 Sets the filter name in the dictionary using a COSName object. @param stringFilterName a COSName representing the new filter name
2260 Sets permissions for an item in the dictionary using a byte array. @param perms a byte array containing permission data @throws IOException if there's an issue with input/output operations
2261 Removes V45 filters from the dictionary object.
2262 Initializes a new FDFAnnotation object with default settings.
2263 Sets the color of the annotation using a given Color object. @param c the Color object to set; if null, removes the color
2264 Sets rich content in the COS (Carousel Object Specification) object. @param rc String containing the rich content to be set
2265 Sets the interior color for annotation. Accepts a Color object and converts it to a COSArray format. @param color the desired interior color; if null, removes any existing interior color
2266 Sets the callout value in the annotation object using a float array. @param callout an array of floating point numbers representing callout values
2267 Sets line coordinates in an array format to a COS object. @param line float array containing line coordinates
2268 Sets the interior color of a PDF annotation.
2269 Sets the horizontal offset of a caption in a PDF annotation. @param offset The value to set as the horizontal offset
2270 Sets the vertical offset of a caption for an annotation. @param offset The new vertical offset value as a float.
2271 Sets vertex data for annotation. @param vertices array of floating point numbers representing vertex coordinates
2272 Sets interior color for the annotation. If no color is provided, resets to default.
2273 Sets vertex data in a COS array for further processing
2274 Sets the interior color of a PDF annotation. @param color Color object to set as interior color; null for no color
2275 Sets the interior color for the annotation. @param color the Color object to be set as interior color
2276 Sets coordinate points in a QuadPoints array for the annotation object. @param coords float array containing the coordinates to be set
2277 Sets the ID in the FDF object with the provided COSArray. @param id a COSArray representing the new ID to be set
2278 Sets the differences in the FDF document using a COSStream object. @param diff The COSStream object containing the difference data to set.
2279 Sets the COS value of a field with type checking and conversion. @param value Object to be set as the field's value (List, String, or COSObjectable) @throws IOException if the value is an unsupported type
2280 Sets the 'V' item in the field with the provided COSBase value. @param value a COSBase object to be set as the 'V' item
2281 Sets the field flags with a given integer value. If the input is null, sets it to null. @param ff Integer value representing the field flags
2282 Sets the SET_FF flag for a field with an integer value. @param ff Integer value to set; if null, removes the flag
2283 Sets clear field flags for a COS field. Accepts an Integer to set the flag; null clears existing flag. @param ff The integer value for the clear field flag
2284 Sets the F flag for a widget field with an integer value or removes it if null is passed. @param f Integer value to set as the F flag, or null to remove the flag
2285 Sets the widget field flags in a COS object using an integer value. @param ff Integer representing the new field flags; null sets to default.
2286 Sets clear widget field flags with the provided integer value. @param ff Integer value to set, nullable for clearing flags
2287 Sets rich text value in COSField using provided COSString object. @param rv the COSString object containing rich text value
2288 Sets the rich text value for the field using COSStream object
2289 Sets the 'Before' item in the dictionary with the provided string value. @param before The string to be set as the 'Before' item.
2290 Sets the 'After' property in the dictionary with the specified value. @param after the string to be set as the 'After' property
2291 Initializes a PDFont object with default settings.
2292 Initializes and sets up a new PDFontDescriptor with TYPE as FONT_DESC.
2293 Sets the font name in a dictionary. @param fontName new font name to be set; if null, removes existing font name
2294 Sets the font family for a dictionary object. @param fontFamily string representing the desired font family
2295 Sets the font stretch in a dictionary object based on input string
2296 Sets the font bounding box in the dictionary using a given rectangle. @param rect a PDRectangle object to set as the font bounding box; null resets it
2297 Sets the character set for the dictionary object. @param charSet string representing the new character set, null to remove it
2298 Initializes a DictionaryEncoding with base and difference encoding. @param baseEncoding the COSName of the base encoding @param differences an array of character differences from the base encoding
2299 Sets the Gamma value in the dictionary to the provided float value. @param value The new Gamma value to be set
2300 Retrieves the Gamma correction value from a dictionary or returns default if not found. @return PDGamma object containing gamma correction values
2301 Sets the Gamma value for this PDGamma object in the dictionary. @param gamma The PDGamma object containing new gamma values; if null, removes existing gamma from dictionary.
2302 Sets the transformation matrix for this object in PDF document. @param matrix a 3x3 transformation matrix (or null to remove)
2303 Retrieves the colorant map from provided PDF resources. If none exists, creates a new one. @param resources PDF document resources @return Map of string keys to PDSeparation objects representing colorants @throws IOException if an error occurs while accessing the resources
2304 Initializes a PDTransparencyGroupAttributes object with default settings.
2305 Initializes an Optional Content Membership Dictionary with a predefined type.
2306 Sets the visibility policy for this object in the COS dictionary. @param visibilityPolicy a COSName representing the new visibility policy
2307 Sets the transformation matrix using an AffineTransform object and updates the COSObject. @param transform AffineTransform object containing the new matrix values
2308 Sets or removes the bounding box (bbox) for the object in the COS array. @param bbox The rectangle to set as the bbox; if null, removes the bbox
2309 Sets the background of an object using a COSArray. @param newBackground the new background to be set as a COSArray
2310 Sets the bounding box for this object and updates its dictionary item accordingly. @param newBBox New bounding box to set; if null, removes the item from the dictionary
2311 Sets the color space for this object and updates its dictionary accordingly. @param colorSpace the new color space to be set; if null, removes the color space
2312 Sets a new array of functions and updates the COS object accordingly. @param newFunctions an array of COS functions to be set
2313 Sets the transformation matrix for this object using an AffineTransform. @param transform AffineTransform representing the new matrix values
2314 Sets and updates the domain in the COSObject with a new array of domains. @param newDomain a COSArray containing new domain information
2315 Sets and updates the EXTEND property of the COSObject with a new array value. @param newExtend the new array to set as the EXTEND property
2316 Sets and updates the domain in COS object with a new array of domains. @param newDomain an array containing new domain information
2317 Sets new coordinates for the COS object and updates its internal representation. @param newCoords a COSArray containing new coordinate values
2318 Sets and updates the decode values in the COS object. @param decodeValues an array of decoding values to set
2319 Initializes a new instance of the PDExtendedGraphicsState class with default settings.
2320 Sets the blend mode for the object using a COSName from the provided BlendMode. @param bm the BlendMode to be used in setting the blend mode of the object
2321 Sets a float item in the dictionary associated with the provided key. If value is null, removes the item from the dictionary; otherwise, sets or updates it. @param key unique identifier for the item @param value Float object to be set/updated or null to remove item
2322 Sets the transfer object in the dictionary using the COSName.TR key. @param transfer The new transfer object to be added to the dictionary.
2323 Sets the transfer function of type COSBase in the dictionary. @param transfer2 the new transfer function to be set
2324 Sets the 'T' item in the action object to the provided COSBase value. @param t The new COSBase value for the 'T' item.
2325 Sets the value of 'H' property in action item to a boolean value. @param h Boolean value to be set for 'H' property
2326 Sets an array of fields to the current action object. @param array Array containing field data to be added
2327 Sets the sound stream for an action in a COS document. @param sound the COSStream object representing the sound to be set
2328 Sets the fields of an action using a COSArray. @param array COSArray containing field values to be set
2329 Sets the 'D' attribute of an object with the provided COSBase value. @param d the new value for the 'D' attribute as a COSBase object
2330 Sets the COSBase object 'b' as an item with key "B" in the 'action' object. @param b The COSBase object to be set.
2331 Sets the relationship to either 'P' (parent) or 'C' (child). Throws exception for invalid values. @param relationship a COSName object that can be either 'P' or 'C'
2332 Initializes a new instance of PDAnnotation with default settings.
2333 Initializes PDAnnotation with a given COSDictionary. Checks and sets the dictionary's type to ANNOT if not already set. @param dict the COSDictionary for the annotation
2334 Sets a rectangle object in the dictionary using its COS array representation. @param rectangle the PDRectangle object to be set in the dictionary
2335 Sets the border of the object using a COSArray. @param borderArray defines the border properties as an array
2336 Sets rectangle differences for the COS object. @param differenceLeft left difference value @param differenceTop top difference value @param differenceRight right difference value @param differenceBottom bottom difference value
2337 Sets rectangular differences for the COS object. @param differenceLeft left difference @param differenceTop top difference @param differenceRight right difference @param differenceBottom bottom difference
2338 Sets the callout values for a COS object in an array format. @param callout float array containing callout values
2339 Sets the ink list in the COS object or removes it if null. @param inkList a 2D float array representing the ink list to set; null to remove
2340 Sets the line coordinates in the COS object using an array of floats. @param l float array containing line coordinates
2341 Sets the horizontal offset for a caption in the PDF document.
2342 Sets the vertical offset for a caption in the PDF document. @param offset The value to set as the vertical offset
2343 Sets the quadrilateral points for a COS object in an array format. @param quadPoints float array containing four sets of x and y coordinates
2344 Sets rich content for the COS object using provided string. @param rc String containing the rich content to be set
2345 Sets vertices of a COS object with given float array of points. @param points an array containing the coordinates for each vertex
2346 Sets vertices in COSObject using provided float array of points. @param points float array representing vertex coordinates.
2347 Sets the parent of a PDAnnotationMarkup object using its COSObject. @param annot the PDAnnotationMarkup object to set as parent
2348 Sets the rectangular differences for the object's COSArray. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2349 Sets the quad points for the object in a CosArray format. @param quadPoints an array of float values representing the quad points
2350 Initializes a PDAppearanceDictionary with a required 'N' entry.
2351 Sets the dash style of the object using a COSArray. @param dashArray array defining the dash pattern to be applied
2352 Retrieves and returns the line dash pattern for this object. If no pattern is found, defaults to a pattern of [3].
2353 Sets the Operating System (OS) in a PDF dictionary. Removes if null; adds to array otherwise.
2354 Initializes a PDSeedValue object and sets its type as 'SV' with direct objects.
2355 Sets a filter in the dictionary using a COSName object. @param filter a CosName object representing the filter to be set
2356 Sets the MDP (Media Decryption Process) in the dictionary with a given PDSeedValueMDP object. @param mdp The PDSeedValueMDP object containing the COSObject for MDP
2357 Sets the time stamp in a dictionary using the provided PDSeedValueTimeStamp object. @param timestamp the time stamp to be set; if null, no operation is performed
2358 Initializes a PDF Seed Value Certificate with its predefined type and sets it as direct.
2359 Adds a subject to the dictionary as a byte array. @param subject The subject to be added in bytes.
2360 Adds a key usage extension to the dictionary. Validates and appends the extension if it only contains 0, 1, or X. @param keyUsageExtension string containing the key usage extension to add
2361 Adds an issuer to the existing list of issuers in the dictionary. @param issuer a byte array representing the new issuer to be added
2362 Adds an Object Identifier (OID) to a PDF dictionary. @param oid byte array representing the OID to be added
2363 Initializes a new PDSignature object with TYPE set to SIG in its COSDictionary.
2364 Sets the type of the object in the COS dictionary. @param type The new COSName type to be assigned
2365 Sets a filter for the dictionary object using a COSName identifier. @param filter COSName representing the filter to be applied
2366 Sets the sub-filter in the PDF document's dictionary. @param subfilter COSName representing the sub-filter to be set
2367 Sets the byte range for a COSArray in the dictionary using an integer array of length 4. @param range an integer array containing four elements representing the byte range
2368 Sets the contents of a dictionary object with given byte array. @param bytes the data to be set as contents
2369 Sets the text color in a PDF document. @param textColor PDColor object representing the new text color
2370 Initializes a PDAcroForm object with the given PDDocument and sets up an empty fields array in its dictionary. @param doc The PDDocument to be associated with this PDAcroForm object.
2371 Constructs a pushbutton field in an AcroForm. @param acroForm the parent AcroForm object
2372 Initializes a form choice field in a PDF document. @param acroForm the parent AcroForm of this choice field
2373 Sets the value for a COSBase object and updates related items.
2374 Sets the default value for the COS object with a specified base value. @param value the base value to set as the default
2375 Initializes a PDSignatureField with the given PDACroForm, sets field type to SIG, and configures the first widget. @param acroForm the form this signature field belongs to
2376 Constructs a new PDTextField within the given PDAcroForm and sets its field type to TX. @param acroForm the form that will contain this text field
2377 Sets the default style string for the COS object or removes it if null is provided. @param defaultStyleString the new default style string to be set; if null, removes the existing one
2378 Sets the rich text value in the object or removes it if null. @param richTextValue string to be set as rich text; if null, removes existing rich text
2379 Sets the origin of the coordinate system using a float array. @param coordSystemOrigin an array representing the new origin coordinates
2380 Initializes a new PDF thread dictionary as per the PDF specification.
2381 Sets the transition direction for this PDTransition object. @param direction the desired transition direction (an enum value from PDTransitionDirection)
2382 Sets the duration of an object in the COS (Carousel Object Specification). @param duration The new duration value as a float.
2383 Sets the fly scale value in the COS object. @param scale floating-point value to set as the fly scale
2384 Sets the fly area to be either opaque or transparent based on the provided boolean value. @param opaque if true, sets the fly area to be opaque; otherwise, it's set to be transparent.
2385 Adds all elements of the provided COSArray to an existing list and updates the state. @param objectList array of objects to be added
2386 Fetches and maps structure type to a standardized value. @return Standardized structure type as a string
2387 Adds a structure to the pool, handling streams and dictionaries. @param current the COSBase object to be added @throws IOException if an I/O error occurs during addition
2388 Retrieves a date from the PDF document using a given key. @param key the name of the date object in the PDF document @param defaultValue the value to return if the key is not found @return the retrieved Calendar object or the default value if not found
2389 Retrieves a date from an embedded dictionary. @param embedded the COSName of the embedded dictionary @param key the COSName of the date key @param defaultValue the default value to return if not found @return the retrieved date or the default value if not found
2390 Inserts a generated comb appearance in PDF content stream. @param contents PDF content stream @param appearanceStream PDF appearance stream @param font the font to be used for text @param fontSize size of the font @throws IOException if an I/O error occurs
2391 Creates an image object for a PDF document from a BufferedImage. @param document the PDF document @param image the source BufferedImage @param quality compression quality (0-1) @return PDImageXObject to be added to the PDF document
2392 Loads an FDF document from a specified file. @param filename the path to the FDF file @return an FDFDocument object @throws IOException if there's an error reading the file
2393 Adds the first intermediate curl to a path at a given angle and position. @param angleCur current angle; r radius; alpha angle adjustment; cx,cy coordinates
2394 Generates a series of intermediate curl template points based on angle and radius. @param angleCur The current angle in degrees. @param r The radius for generating the arc segments. @return An array of Point2D.Double objects representing the generated points. @throws IOException If an error occurs during file reading or writing.
2395 Renders and positions a glyph in display units using legacy calculations. @param textRenderingMatrix matrix for rendering @param font the PDFont object @param code the character code @param displacement the original displacement of the glyph
2396 Breaks down the text into lines based on given font, size, and width. @param font PDFont object for text styling @param fontSize Size of the font @param width Maximum line width @return List of Line objects representing the broken-down text lines @throws IOException If there's an issue with text content processing
2397 Fetches symbolic flag from font descriptor. @return Boolean value of isSymbolic() or null if font descriptor is missing
2398 Determines the fallback font name based on a given PDFontDescriptor. @param fontDescriptor descriptor of the original font @return the name of the fallback font
2399 Generates a Paint object from the given PDColor, handling various color space types. @param color the input color in PDF format @return Paint object for rendering or transparency if color space is null/invalid @throws IOException if there's an issue with the color conversion
2400 Retrieves a list of PDField objects from the dictionary. @return List of PDField objects or an empty list if none found
2401 Finds a child field by its name in an array of names. @param name Array of field names @param nameIndex Current index in the name array @return Child PDField if found, otherwise null
2402 Retrieves child fields from the field object. Handles circular references and invalid data types. @return List of PDField objects representing child fields
2403 Extracts string data from a given COSBase object. @param base the input COSBase object, which can be null, COSString, or COSStream @return corresponding string value or an empty string if not applicable
2404 Retrieves and returns a processed value based on its type. @return The processed value or null if the original value is null @throws IOException if an unknown type for field import is encountered
2405 Retrieves rich text content from a field. @return String representation of the rich text or null if not found or inappropriate type
2406 Retrieves the "before" object from a dictionary, handling both strings and streams. @return String representation of the "before" object or null if not found or unsupported type
2407 Retrieves the 'after' string from a dictionary object. @return The 'after' string or null if not found or not a COSString/COSStream
2408 Retrieves the action as a String. Supports JS and Stream types. @return The action as a String or null if unsupported type
2409 Retrieves rich content as a String from the object. @return String representation of rich contents or null if not available
2410 Extracts string content from a COSBase object, handling both COSString and COSStream types. @param base the input COSBase object to extract text from @return the extracted text as String, or empty String if not found or unsupported type
2411 Creates a layout page from PDF page with content and resource streams. @param page PDPage object containing the page data @return LayoutPage object with combined content stream and resources @throws IOException if there's an issue reading or writing data
2412 Converts input stream data into a byte array. @return Byte array representation of the input stream data @throws IOException if an I/O error occurs when reading from the input stream
2413 Retrieves and possibly initializes a 2D integer array of input/output samples. @return A 2D int array containing sample data for input/output parameters.
2414 Initializes PatchMeshesShadingContext with given parameters and prepares for rendering. @param shading PDMeshBasedShadingType object @param colorModel ColorModel object @param xform AffineTransform object @param matrix Matrix object @param deviceBounds Rectangle object for device bounds @param controlPoints number of control points @throws IOException if an I/O error occurs
2415 Initializes a Type4 shading context and sets up the pixel table for rendering. @param shading The PDShadingType4 object containing shading information @param cm The ColorModel to be used for color operations @param xform The AffineTransform to be applied during rendering @param matrix The Matrix to be used in the rendering process @param deviceBounds The rectangle defining the area of the device on which to render
2416 Initializes Type 5 shading context and sets up triangle list & pixel table for rendering. @param shading PDShadingType5 object containing shading information @param cm ColorModel used for the shading @param xform AffineTransform applied to the shading @param matrix Matrix applied to the shading @param deviceBounds Rectangle defining the device bounds @throws IOException if an I/O error occurs
2417 Adds an attribute object to the structure element and updates COS object dictionary. @param attributeObject the attribute to be added, which will be associated with this structure element
2418 Adds a new property to the user's profile and notifies of changes. @param userProperty the property to be added to the user's profile
2419 Constructs an ICCBased object from a PDDocument. Initializes a COSArray and adds ICCBASED name to it, then creates a PDStream from the document and adds that to the array. @param doc the PDDocument used to create the PDStream for the ICCBased object
2420 Initializes a PDPattern object with specified resources and color space. @param resources the associated PDResources object @param colorSpace the underlying PDColorSpace object for the pattern
2421 Sets the X values in the COS object using provided PDNumberFormatDictionary objects. @param changeXs Array of PDNumberFormatDictionary objects to be set as X values
2422 Sets the change in Y-coordinates for a dictionary of number formats. @param changeYs an array of PDNumberFormatDictionary objects representing changes in Y-coordinates
2423 Sets the distances using a provided array of PDNumberFormatDictionaries. @param distances an array containing distance data in COS format
2424 Sets areas using PDNumberFormatDictionary objects in a COSArray and updates the COS object.
2425 Sets the angles in the COS object using an array of PDNumberFormatDictionaries. @param angles array containing the angle values to be set
2426 Sets the line slopes for a COS object using an array of PDNumberFormatDictionary objects. @param lineSloaps array containing number format dictionaries to be added to the COS object
2427 Grows the current structure to a specified size. @param size the desired size to grow to
2428 Returns the text color from the PDF object, or creates and returns a default RGB black color if not found. @return The text color as a PDColor object
2429 Clones a COSBase object based on its type. @param src the source object to clone @param dstParent the parent of the destination object @param currentPageDict the dictionary containing the current page @return a new instance of COSArray or COSDictionary if applicable, otherwise returns the original object
2430 Parses and returns a base object from the input stream based on the first character encountered. @return COSBase object or null if not recognized or end of stream reached @throws IOException if an I/O error occurs
2431 Initializes a PDFXrefStreamParser for the given COSStream. Closes and rethrows any initialization errors. @param stream input stream to parse @throws IOException if there's an issue with reading or closing the stream
2432 Retrieves the next action in a sequence, handling single or multiple actions. @return List of PDAction objects, or null if none found
2433 Retrieves the range for a specified component from an array. @param n index of the component @return PDRange object containing the range or default if not found
2434 Retrieves an encoded range for a given parameter number from the array of encode values. @param paramNum the parameter number @return PDRange object or null if not available
2435 Retrieves a color or four colors based on the input name from COSObject dictionary. @param name key to locate color data in COSObject @return PDGamma for single color, PDFourColours for four colors, otherwise null
2436 Builds and sets widths of glyphs in a CID font from TrueType data. @param cidFont the target CID font dictionary @throws IOException if there's an issue reading TrueType data
2437 Sets the line dash pattern in the dictionary object using a COSName and the given dash pattern's COSObject. @param dashPattern the line dash pattern to be set
2438 Initializes a PDCIEDictionaryBasedColorSpace with RGB values and sets the white point cache. @param rgb COSArray containing RGB color space data
2439 Sets the guide line color using a PDColor object. If color is null, sets it to default (no color).
2440 Sets the color of an object using a PDColor object and updates its COSObject. @param c PDColor object representing the new color
2441 Sets the interior color of an object using a PDColor object. @param ic PDColor object representing the desired interior color
2442 Sets the interior color of an object using a PDColor object. @param ic PDColor object representing the desired color
2443 Sets the interior color using a provided PDColor object. @param ic the PDColor object representing the desired interior color
2444 Sets the interior color using a PDColor object.
2445 Sets the border color of the current object using a specified PDColor. @param c the PDColor object representing the new border color
2446 Sets the background color for the current object using a given PDColor. @param c the PDColor to be set as the background color
2447 Sets the text color in a PDF document using the provided PDColor object. @param textColor the color to be set for the text
2448 Retrieves a PDPage's range array or default if not present. @return PDRange object containing the range array and index 0
2449 Retrieves the PDPage range from a dictionary or defaults to a default range. @return PDRange object containing page ranges
2450 Creates a PDImageXObject from an input stream. @param document the PDF document to which the image belongs @param stream the input stream containing the image data @return a PDImageXObject instance created from the stream's byte array @throws IOException if there is an error reading the stream
2451 Sets the specified font for the document at index 0. @param font The PDFont object to be used as the new font
2452 Sets the tint transform function and updates the internal array. @param tint PDFunction to be used as the new tint transform
2453 Sets the tint transform function and updates the array with it. @param tint the PDFunction to set as the tint transform
2454 Sets a new page at index 0 in an array of pages. @param page the new PDPage to be inserted at position 0
2455 Sets the upper limit of a COSArray in a node.
2456 Sets the lower limit in a COSArray with a given integer value or removes it if null is provided. @param lower Integer to set as lower limit; use null to remove existing limit
2457 Sets the start and end style for a line annotation. @param style The desired style; if null, defaults to LE_NONE
2458 Sets the endpoint ending style for a PDF annotation line. @param style The desired style (null treated as LE_NONE)
2459 Sets the start and ending style for a line annotation. @param style the desired style; null is treated as LE_NONE
2460 Sets the endpoint ending style for the annotation. If no style is provided, defaults to none. @param style The desired endpoint ending style (null defaults to LE_NONE)
2461 Sets the start and ending style for a line annotation. @param style The desired style (null means no specific style)
2462 Sets the ending style for the endpoint in a PDF annotation line. @param style the desired style; null defaults to LE_NONE
2463 Sets the start and ending style for a line annotation. @param style The string representing the style to be set. If null, LE_NONE is used.
2464 Sets the ending style for the endpoint in annotation line. @param style desired ending style; null treated as "LE_NONE"
2465 Sets the upper limit for a given COSArray in the node. @param upper the new upper limit as a String
2466 Sets the lower limit of a COSArray in the node with the provided string value. @param lower The new lower limit as a String
2467 Clips the given rectangle to the media box and returns the clipped rectangle. @param box the input rectangle to be clipped @return a new PDRectangle object representing the clipped rectangle
2468 Creates and returns a new PDRectangle with translated dimensions. @return A new PDRectangle object with width and height set to current instance's values
2469 Sets the before color in the PDGamma array at index 0. @param colour a PDGamma object representing the new color to set
2470 Sets the after color for image processing using PDGamma object. @param colour PDGamma object representing the desired after color
2471 Sets the start color of an object using PDGamma color. @param colour The new PDGamma color to be set as the start color
2472 Sets the end color of an object by calling a helper method with index 3. @param colour PDGamma object representing the color to be set as end color
2473 Decrypts a COSBase object based on its type. Supports strings, streams, dictionaries, and arrays.
2474 Sets an item in the collection using a specified key and object-based value. @param key unique identifier for the item @param value object to be stored under the given key
2475 Sets the AcroForm object for this document and clears any cached version. @param acroForm The new AcroForm object to be set.
2476 Sets and updates viewer preferences using provided PDViewerPreferences object. @param prefs the new viewer preferences to be set
2477 Sets the document outline for the PDF document using a given PDDocumentOutline object. @param outlines the new document outline to be set
2478 Sets metadata for this PDF document. @param meta PDMetadata object containing new metadata
2479 Sets the open action for the PDF document. @param action The destination or action to be executed when the document is opened
2480 Sets additional actions for the PDF document catalog. @param actions PDDocumentCatalogAdditionalActions object containing new actions
2481 Sets the name dictionary in the PDF document's root object. @param names the new name dictionary for the PDF document
2482 Sets the mark information in the PDF document. @param markInfo PDMarkInfo object containing mark data to be set
2483 Sets the URI to the provided PDURIDictionary object in the root item of this object. @param uri The PDURIDictionary object containing the new URI information.
2484 Sets the structure tree root for this PDF document. @param treeRoot PDStructureTreeRoot object to be set as the root
2485 Sets page labels for the PDF document. @param labels PDPageLabels object containing new page labels to be applied
2486 Sets destination nodes and clears document catalog's DESTS entry. @param dests PDDestinationNameTreeNode containing destination information
2487 Sets embedded files for the object using a provided name tree node. @param ef A PDEmbeddedFilesNameTreeNode containing the embedded files to be set
2488 Sets the JavaScript item in the name dictionary with the provided PDJavascriptNameTreeNode. @param js the PDJavascriptNameTreeNode to be set as the JavaScript item
2489 Constructs a PDPage object with the specified media box. @param mediaBox the rectangle defining the boundaries of the page
2490 Sets or removes the resource object for this page. @param resources PDResources object to be set, or null to remove
2491 Sets the media box of a PDF page and handles null values by removing MEDIA_BOX item. @param mediaBox rectangle defining page's visible area; if null, removes MEDIA_BOX from page
2492 Sets the bleed box for the PDF page. If null is provided, removes the existing bleed box. @param bleedBox a PDRectangle object representing the new bleed box or null to remove it
2493 Sets or removes the trim box for a PDF page. @param trimBox rectangle to set as trim box, null to remove it
2494 Sets the Art Box of a page in PDF document. If null, removes the Art Box.
2495 Sets the content stream of the PDF page. @param contents PDStream object containing page content
2496 Sets metadata for the current PDF page. @param meta PDMetadata object containing the new metadata
2497 Sets additional actions for a PDPage object. @param actions Additional actions to be applied on the page
2498 Sets the transition effect for the PDF page. @param transition PDTransition object representing the desired effect
2499 Sets a transition effect for the PDF page with specified duration. @param transition The PDTransition object representing the effect @param duration Duration of the transition in seconds
2500 Adds or updates a resource in the specified dictionary of the resources object. @param kind type of resource dictionary (e.g., Font, XObject) @param name name of the resource @param object the resource object to be added or updated
2501 Sets an embedded file in the PDF document's dictionary. @param file The PDEmbeddedFile object to be set; if null, removes existing file
2502 Sets or removes a Unicode embedded file in the PDF dictionary. @param file PDEmbeddedFile object to set as UF (null to remove)
2503 Sets the current PDF page to the specified PDPage object. @param page the PDPage object to be set as the current page
2504 Sets a referenced object (annotation) in the current COSObject. @param annotation the PDAnnotation to be set as the referenced object
2505 Sets and references an object in the current COSObject. @param xobject the PDXObject to be set as a reference
2506 Sets a new page in the document using the provided PDPage object. @param page the new page to be set for the document
2507 Sets the parent node of this structure node in COS object. @param structureNode The PDStructureNode to be set as parent
2508 Sets a specific PDF page to the document using its COSObject. @param page PDPage object representing the page to be set
2509 Sets the parent tree of the current node in a PDF document structure. @param parentTree PDNumberTreeNode representing the parent tree to be set
2510 Sets the rectangle for the annotation using the provided PDRectangle object. @param rectangle the new rectangle to be set for the annotation
2511 Sets the border style of the annotation using a provided dictionary. @param bs A PDBorderStyleDictionary containing the desired border style settings.
2512 Sets the border effect for the annotation using the provided dictionary. @param be PDBorderEffectDictionary object containing the new border effect settings
2513 Sets the fringe (boundary) of the annotation with a rectangle object. @param fringe PDRectangle object representing the new boundary
2514 Sets the fringe (border) of the annotation using a rectangle object. @param fringe PDRectangle object representing the border to be set
2515 Sets the fringe (boundary) of the PDF annotation using a PDRectangle object. @param fringe A rectangle representing the new boundary for the annotation
2516 Sets the rectangle defining the page's fringe area. @param fringe PDRectangle object representing the fringe area
2517 Sets FDF (Forms Data Format) dictionary in a PDF document's catalog. @param fdf FDFDictionary object containing form data to be set
2518 Sets the digital signature for the PDF document. @param sig The PDSignature object containing the digital signature.
2519 Sets a file specification for this PDFileSpecification object. @param fs the PDFileSpecification to be set
2520 Sets JavaScript object to FDF document. @param js the JavaScript object to be set in FDF document
2521 Sets the catalog for the PDF document. @param cat FDFCatalog object to be assigned
2522 Sets the appearance dictionary for this field's COS object. @param ap the PDAppearanceDictionary to be set
2523 Sets appearance stream reference for the field in the FDF document. @param ref FDFNamedPageReference object to be set as the appearance stream reference
2524 Sets the icon fitting style for the field. @param fit The desired icon fitting style (FDFIconFit enum value)
2525 Sets an action for the PDF document using provided PDAction object. @param a the action to be set for the PDF document
2526 Sets additional actions for the PDF document. @param aa PDAdditionalActions object containing the new actions
2527 Sets the fractional space to allocate for PDF fitting. @param space a PDRange object representing the space to be allocated
2528 Sets the file specification for the PDF document. @param fs PDFileSpecification object containing file specifications
2529 Sets page information in FDFPageInfo object to the page. @param info The FDFPageInfo object containing new page information
2530 Sets the template reference for this FDF document's page. @param tRef the FDFNamedPageReference object to be set as the template reference
2531 Sets the font file stream for this PDF document object. @param type1Stream the input font file stream in Type 1 format
2532 Sets the second font file stream for a dictionary object. @param ttfStream the TrueType font stream to be set as FONT_FILE2
2533 Sets the font file 3 in the dictionary with a provided PDF stream. @param stream The PDF stream containing the font file 3 data.
2534 Sets the CID (Character Identification) Set in the dictionary with a given PDStream. @param stream the PDStream containing the CID set data
2535 Sets the white point for the PDF document. Throws exception if input is null.
2536 Sets the black point value in the color dictionary
2537 Sets the extended graphics state for the PDF document and updates its COS object. @param extendedGraphicsState the new extended graphics state to be set
2538 Sets and applies a shading resource to the current object. @param shadingResources the PDShading object to be applied
2539 Sets and associates resource objects with this object in the COS layer. @param resources a PDResources object containing various graphic resources
2540 Sets a new PDFunction for this object and updates the COSObject. @param newFunction The new PDFunction to be set
2541 Sets the font setting in the dictionary using the provided PDFontSetting object. @param fs The PDFontSetting object containing the new font settings
2542 Sets the destination for a PDF action. Throws exception if not valid. @param d PDF destination object (PDPageDestination) or null to remove it
2543 Sets a file specification to the COS object. @param fs PDFileSpecification object containing the file details
2544 Sets the target directory for this object in COS (Cos Object Stream). @param targetDirectory The PDTargetDirectory to be set
2545 Sets the destination for this action. Validates and sets only if it's a valid PDPageDestination. @param d The destination to be set (must be an instance of PDPageDestination)
2546 Sets the file specification for the current action.
2547 Sets the file specification for this object in the COS document. @param fs a PDFileSpecification object containing file information
2548 Sets Windows launch parameters for an action. @param win PDWindowsLaunchParams object containing the launch parameters
2549 Sets a file specification for this PDF document's action. @param fs The PDFileSpecification object containing the file information
2550 Sets a file specification for this PDFileSpecification object in the PDF document. @param fs The PDFileSpecification to be set
2551 Sets a file specification object for an action. @param fs PDFileSpecification object to be set
2552 Sets the form field action in the PDF document's dictionary. @param action the PDAction object to be set as the form field action
2553 Sets an action 'e' in the actions list with key "E". @param e The PDAction to be added or updated in the list
2554 Sets and stores a specific action 'x' to be performed in the document. @param x the PDF document action to be set
2555 Sets the D action in this PDF document. @param d the PDAction to be set
2556 Sets the U action in the PDF document to the provided PDAction object. @param u a PDAction object representing the new U action
2557 Sets the form field output action (FO) for this PDF document. @param fo the form field output action to be set
2558 Sets the Blend action in the PDF document. @param bl the PDAction object representing the blend action to be set
2559 Sets the PDAction (Printed Output) object for this document. @param po The PDAction object to be set
2560 Sets the Print Condition (PC) action in the PDF document. @param pc The PDAction object containing the print condition instructions.
2561 Sets the Page View (PV) action for an object in a collection. @param pv the PDAction to be set as the PV action
2562 Sets a Print Interval action for this document. @param pi the Print Interval action to be set
2563 Sets the WC action in the PDAction object. @param wc the PDAction to be set as WC
2564 Sets the WS (Writing Style) action for this PDF document. @param ws The PDAction object representing the writing style to be set
2565 Sets the document security action for this PDF object. @param ds the PDAction containing the security details
2566 Sets the WP (Write Page) action for this PDF document. @param wp the PDAction object representing the write page action
2567 Sets the Document Properties (DP) action for this object using the provided PDAction. @param dp The PDAction containing the new document properties action to be set.
2568 Sets the K action in the list of PDActions. @param k the PDAction object to be set as K
2569 Sets an action F to the list of actions at the specified index. @param f a PDAction object representing the action to be set
2570 Sets the action value in the PDF document. @param v the PDAction object to be set as the 'V' action
2571 Sets a PDAction object to the 'C' key in the actions map. @param c The PDAction object to be set
2572 Sets an action object to the document. @param o the PDAction object to be set
2573 Sets a PDAction object to the 'C' key in the actions map. @param c the PDAction object to be stored
2574 Sets the target directory in the dictionary. @param targetDirectory the PDTargetDirectory object to be set
2575 Sets or removes a named destination in the PDF document. @param dest PDNamedDestination object to set; if null, removes existing destination
2576 Sets the appearance of an object using PDAppearanceDictionary. @param appearance The appearance dictionary to be set for the object
2577 Sets optional content for the PDF document. @param oc PDPropertyList containing optional content settings
2578 Sets a PDF page to the current object's COSObject. @param page PDPage object to be set in the COSObject
2579 Sets the file specification for this object in the COS (Content Object Stream). @param file PDFileSpecification to be set
2580 Sets border effect using a provided dictionary object. @param be PDBorderEffectDictionary to be used for setting the border effect
2581 Sets and applies rectangle difference to COS object for PDF rendering. @param rd PDRectangle object containing the difference values
2582 Sets an action to be performed on the PDF object. @param action the PDAction object to be set
2583 Sets the border style of the PDF object using a provided dictionary. @param bs Border style dictionary to be set for the PDF object
2584 Sets the destination of the PDF object to the specified PDDestination. @param dest The destination to be set for the PDF object
2585 Sets the previous URI action for this PDActionURI object. @param pa the PDActionURI to be set as the previous URI action
2586 Sets the annotation popup for this object. @param popup the PDAnnotationPopup to be set
2587 Sets the annotation to which this annotation is in reply. @param irt The PDAnnotation object that this annotation replies to
2588 Sets the external data dictionary for this object in the PDF document. @param externalData PDExternalDataDictionary containing the external data to be set
2589 Sets the border style using a provided dictionary object. @param bs PDBorderStyleDictionary containing new border style settings
2590 Sets the border effect in the PDF document using a given dictionary. @param be PDBorderEffectDictionary containing border effect settings.
2591 Sets the border effect in the COS object using a provided dictionary. @param be a PDBorderEffectDictionary containing the desired border effect
2592 Sets the rectangle difference object in the COS (Carrier Object System). @param rd The PDRectangle object to be set as the rectangle difference
2593 Sets the appearance characteristics dictionary for this object. @param appearanceCharacteristics a PDF dictionary containing visual attributes
2594 Sets an action to the current COSObject using the provided PDAction object. @param action the PDAction object representing the new action
2595 Sets additional actions for the annotation in a PDF document. @param actions PDAnnotationAdditionalActions object to be set
2596 Sets and updates the border style using a PDBorderStyleDictionary object. @param bs PDBorderStyleDictionary object containing new border style settings
2597 Sets the parent of PDTerminalField and updates COSObject accordingly. Throws IllegalArgumentException if field shares a dictionary with its only widget. @param field the parent field to be set
2598 Sets the normal appearance of an entry in the dictionary using PDAppearanceEntry object. @param entry the PDAppearanceEntry object containing the normal appearance settings
2599 Sets the normal appearance stream for the PDF document. @param ap PDAppearanceStream object containing the appearance details
2600 Sets the rollover appearance for an entry in the PDF document. @param entry PDAppearanceEntry object containing the appearance details
2601 Sets rollover appearance stream for this PDF object. @param ap PDAppearanceStream object representing the rollover appearance
2602 Sets down appearance in the document's dictionary using given PDAppearanceEntry. @param entry PDAppearanceEntry object containing new down appearance settings
2603 Sets the down appearance stream in the PDF document's dictionary. @param ap PDAppearanceStream object representing the down appearance
2604 Sets a property build filter to the dictionary using provided PDPropBuildDataDict object. @param filter an instance of PDPropBuildDataDict used for setting the filter in the dictionary
2605 Sets the Public Security property in a PDF data dictionary. @param pubSec PDPropBuildDataDict object containing public security properties
2606 Sets the application property in the PDF document's dictionary using a provided data dictionary object. @param app A PDPropBuildDataDict object representing the application property to be set.
2607 Sets the seed value certificate in the PDF document's dictionary. @param certificate PDSeedValueCertificate to be set
2608 Sets the property build object in the dictionary using the COS name PROP_BUILD. @param propBuild The PDPropBuild object to set in the dictionary
2609 Sets the previous sibling of an outline node in a PDF document. @param outlineNode the node to be set as the previous sibling
2610 Sets the next sibling node in the document outline. @param outlineNode the node to be set as the next sibling
2611 Sets the destination of the COS object to the provided PDDestination. @param dest a PDDestination object representing the destination
2612 Sets an action to the COS object of this class. @param action the PDAction to be set in the COS object
2613 Sets a structure element in the COS object.
2614 Sets the first child node of an outline node in a PDF document. @param outlineNode the new first child node to be set
2615 Sets the last child in an outline node of a PDF document. @param outlineNode the outline node to be set as the last child
2616 Sets default resources for the PDF document. @param dr PDResources object containing default resource data
2617 Sets the XFA resource in the dictionary. @param xfa PDXFAResource object to be set
2618 Sets the signature value and applies changes to the COS object. @param value PDSignature object to be set @throws IOException if an I/O error occurs during change application
2619 Sets a default value to the COS object in this signature. @param value The new default value for the COS object.
2620 Sets the seed value for the PD object. If provided, it updates the COS object with the new seed value. @param sv The new seed value to be set (PDSeedValue object)
2621 Sets additional actions for a PDF form field using the provided object. @param actions PDFormFieldAdditionalActions object containing the actions to be set
2622 Sets the bounding box of the object using a given rectangle. @param rectangle defines the new bounding box dimensions
2623 Sets the measurement dictionary in the COS object. @param measure PDMeasureDictionary to be set for the object
2624 Sets document information for the current thread. @param info Document information to be set.
2625 Sets the specified thread in the bead object using COSName.T. @param thread the PDThread object to be set
2626 Sets the next thread bead in the PDF document structure. @param next The PDThreadBead to be set as the next bead
2627 Sets the previous bead in the thread. @param previous The PDThreadBead object to be set as the previous bead
2628 Sets the page in the document using provided PDPage object
2629 Sets a rectangle to the specified item in the bead object. @param rect the rectangle to be set
2630 Sets the 'Marked' status in the dictionary to the provided boolean value. @param value The new 'Marked' status (true or false)
2631 Sets a boolean property for the user in the dictionary. @param userProps boolean value representing user properties
2632 Sets the 'Suspect' status in the dictionary to the given boolean value. @param suspect true if suspect, false otherwise
2633 Sets the tracking of mouse position on or off in the application map. @param value true to enable mouse position tracking, false to disable
2634 Sets the 'open' status of the COS object. @param open boolean value indicating if the object should be opened or closed
2635 Sets the "FD" attribute of the COS object to the provided boolean value. @param fd boolean value to be set for "FD" attribute
2636 Sets whether the file is volatile (can be changed) or not. @param fileIsVolatile true if the file is volatile, false otherwise
2637 Sets the visibility of the object and notifies if there's a change. @param hidden true to hide, false to show
2638 Sets encryption metadata for COS object. @param encryptMetaData boolean flag to enable/disable encryption
2639 Sets the caption property of an object in a COS (Common Object System) document. @param cap boolean value to be set as the caption property
2640 Sets the scale-to-fit annotation for the object to the specified boolean value. @param value true to enable scaling, false to disable
2641 Sets the rename option in the PDF template. @param value true to enable renaming, false otherwise
2642 Sets the anti-aliasing property in the dictionary. @param antiAlias boolean value to enable or disable anti-aliasing
2643 Sets stroking overprint control in the dictionary. @param op Boolean value for overprint control (true enables, false disables)
2644 Sets non-stroking overprint control in the dictionary. @param op true to enable, false to disable
2645 Sets automatic stroke adjustment in dictionary. @param sa Boolean value to enable or disable automatic stroke adjustment
2646 Sets the Alpha Source Flag in dictionary to the specified value. @param alpha Boolean value for the Alpha Source Flag
2647 Sets the text knockout flag in the dictionary to the specified value. @param tk boolean value for text knockout flag
2648 Sets open behavior in a new window based on provided mode
2649 Sets open mode for a new window. @param value OpenMode enumeration (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
2650 Sets the open mode for a new window. @param value OpenMode (NEW_WINDOW, SAME_WINDOW, USER_PREFERENCE)
2651 Sets the synchronization mode for the action. @param synchronous if true, sets the action to be synchronous; otherwise asynchronous
2652 Sets the 'repeat' property of an action to true or false.
2653 Sets the mixing mode for this action. @param mix true to enable mixing, false otherwise
2654 Sets the CAP (caption) attribute of the COS object to the specified boolean value. @param cap true or false to enable/disable caption
2655 Sets the 'Open' state of the COS object in a PDF document. @param open boolean value to set the 'Open' state (true for open, false for closed)
2656 Sets the pre-release status of an object in the dictionary. @param preRelease boolean value indicating if it's a pre-release or not
2657 Sets the non-embedded font warning flag in the PDF dictionary. @param noEmbedFontWarning if true, suppresses non-embedded font warnings
2658 Sets the trusted mode in the dictionary. @param trustedMode boolean value to enable or disable trusted mode
2659 Sets the need for appearances in the PDF document
2660 Sets the visibility of the toolbar based on the provided boolean value. @param value true to hide the toolbar, false to show it
2661 Sets the preference to hide or show the menubar. @param value true to hide the menubar, false to show it
2662 Sets the preference to hide or show window UI. @param value true to hide, false to show window UI
2663 Sets the fit window preference to the specified boolean value
2664 Sets the preference to center or not center the window. @param value True if the window should be centered, false otherwise.
2665 Sets whether document title should be displayed in preferences. @param value true to display, false otherwise
2666 Sets an array of strings in the object's dictionary under a given name
2667 Sets an array of names in the COS object and notifies if changed. @param name key for the dictionary object @param values string array to be added as COSName objects
2668 Sets an array of float values in the object's dictionary by name and notifies changes. @param name Key for the array in the dictionary @param values Array of float numbers to be set in the dictionary
2669 Parses XML for stamp annotation appearance and builds a COSDictionary. @param appearanceXML the XML representation of the appearance @return COSDictionary object built from the XML, or an empty one if not handled @throws IOException if there's an issue parsing the stream element
2670 Sets a name in PDF document using provided key and value. @param key the string representing the name to be set @param value the string representing the value of the name
2671 Sets the page mode for the PDF document. @param mode The desired page mode (use, outline, thumbnails, fullscreen)
2672 Sets the page layout of the document using the provided PageLayout object. @param layout The new page layout to be set for the document.
2673 Sets the version of the COS (Container Object Storage) object. @param version a String representing the new version to be set
2674 Sets the trapped status with given value ('True', 'False', or 'Unknown'). @param value The new trapped status; must be one of 'True', 'False', or 'Unknown' @throws IllegalArgumentException if an invalid value is provided
2675 Sets the style for an object in a data structure. If style is null, removes it. @param style new style to be set or null to remove existing style
2676 Initializes PDTypedDictionaryWrapper with a specified type. @param type the type to be set for the COSObject
2677 Sets the owner of the COS object using provided string value. @param owner name or identifier of the new owner
2678 Initializes a PDMarkedContentReference with a new dictionary and sets its type.
2679 Initializes a PDObjectReference with a new dictionary and sets its type.
2680 Sets the structure type of the COS object using the provided string. @param structureType a string representing the new structure type
2681 Initializes a PDStructureNode with given type and creates an empty dictionary. @param type the type of the structure node as a string
2682 Sets the object's name and notifies of any changes. @param name new name for the object
2683 Sets the guideline style in the dictionary to the provided style. @param style The desired style for the guideline as a string.
2684 Sets a sub filter in the dictionary using the provided string. @param subfilter the string representing the sub filter to be set
2685 Sets the specified intent in the COSName object used by this class. @param intent the new intent to be set
2686 Sets the line ending style in the annotation object. @param style desired line ending style to be set
2687 Sets the icon name in annotations object. @param icon String representing the new icon's name
2688 Sets the version of the catalog in the PDF document. @param version The version string to be set
2689 Sets the specified encoding to the FDF (Forms Data Format) object. @param encoding the encoding string to be set
2690 Sets the scale option for fitting content in the document. @param option a String representing the desired scaling option
2691 Sets the scaling type for an image using the provided string representation. @param scale The string representing the desired scaling type.
2692 Initializes a new instance of the PDAbstractPattern class and sets its type to 'Pattern' in the dictionary.
2693 Sets the type of the action using the provided string value. @param type a string representing the type to be set for the action
2694 Sets the subtype of an action with the provided string value. @param s the string to be set as the subtype
2695 Sets the SUBTYPE property of the COS object to the specified value. @param subType the new value for the SUBTYPE property
2696 Sets the appearance state of the COS object using the provided string. @param as The desired appearance state to be set
2697 Sets the attachment name in COS object. @param name new attachment name to be set
2698 Sets the line ending style for COS Object. @param style the desired line ending style as a String
2699 Sets the caption positioning in the COS object. @param captionPositioning a String representing the desired positioning
2700 Sets the highlight mode of the COS object to the specified mode. @param mode The mode to be set for highlighting (e.g., "N" for none, "I" for invert)
2701 Sets reply type in COS object using provided string representation. @param rt String representing the reply type to be set
2702 Sets the intent name in COS object. @param it The intent name to be set
2703 Sets the name of the COS object using the provided string. @param name The new name to be assigned to the COS object.
2704 Sets the name of the COS object using the provided string value. @param name The new name for the COS object
2705 Sets the highlighting mode. Valid modes are: 'N', 'I', 'O', 'P', 'T'. @param highlightingMode the new mode to set; null is equivalent to 'N' @throws IllegalArgumentException if an invalid mode is provided
2706 Sets the style of the COS object using the provided string value. @param s The style to be set for the COS object
2707 Initializes an external data dictionary with a specific type.
2708 Sets the SUBTYPE property of COSObject to a specified value. @param subtype the new value for the SUBTYPE property
2709 Sets the name in the dictionary using COSName.NAME as the key. @param name The new name to be set in the dictionary
2710 Sets the URL type in the dictionary using the provided string value. @param urlType the type of URL to be set
2711 Initializes and sets the type of the document outline to OUTLINES in the COS object.
2712 Initializes a document outline from the given COS dictionary. Sets the type of the object to 'Outlines'. @param dic the COS dictionary used for initialization
2713 Sets default value and checks its validity. @param value the string to be set as a default value
2714 Initializes and sets up a measurement dictionary object.
2715 Sets the SUBTYPE attribute of the COS object to the provided value. @param subtype the new value for the SUBTYPE attribute
2716 Initializes a new PDNumberFormatDictionary with a default type name.
2717 Sets the name of the COS object to the given string value. @param name new name for the object
2718 Initializes a PDTransition object with the specified transition style. @param style The desired transition style (PDTransitionStyle)
2719 Sets the transition dimension of this object with the given dimension value. @param dimension a PDTransitionDimension enum representing the desired dimension
2720 Sets the transition motion for this object using a given PDTransitionMotion. @param motion The PDTransitionMotion to be set for the object's transition
2721 Sets a date value in COS format using a given key. @param key the name of the entry to be added or updated @param date the Calendar object containing the date to be set
2722 Sets a string value with the given key in PDF document. @param key The name of the entry to be added to the dictionary. @param value The value associated with the key.
2723 Sets an embedded string in a dictionary under a specified key. Creates the dictionary or updates it as necessary. @param embedded COSName of the embedded object @param key COSName for the string entry @param value String to be set, null removes the entry
2724 Sets the specified language in the root object of a PDF document. @param language the language to be set
2725 Sets the title in an information object. @param title The new title to be set
2726 Sets the author of an object in the PDF document. @param author The name of the author to be set
2727 Sets the subject of an object in PDF document metadata. @param subject The new subject to be set for the PDF document
2728 Sets the keyword string for an object's metadata. @param keywords a space-separated list of keywords to be associated with the object
2729 Sets the creator of an object in the PDF document. @param creator name or identifier of the document's creator
2730 Sets the producer information in the PDF document. @param producer name or identifier of the producer
2731 Sets or removes the prefix from the root object based on input. @param prefix new prefix to set; if null, removes existing prefix
2732 Sets the Unicode filename in a file system object. @param file the new Unicode filename to be set
2733 Sets the file name in the PDF document. @param file the new file name to be set
2734 Sets the file description in the PDF document. @param description The new description to be set for the file.
2735 Sets an identifier for the COS object in PDF document. @param id unique string identifier to be assigned to the object
2736 Sets the title of the COS object. @param title The new title to be assigned to the COS object.
2737 Sets the language attribute of the COS object to the specified value. @param language the new language code to be set
2738 Sets an alternate description for the COS object. @param alternateDescription the new description to be set
2739 Sets the expanded form of the COS object using the provided string. @param expandedForm the new expanded form to be set for the COS object.
2740 Sets the actual text in the COS object using the provided string. @param actualText The text to be set as the actual text in the COS object
2741 Sets and formats a value for the object, notifying changes if necessary. @param formattedValue The new value to be set and formatted.
2742 Sets the modification date in the COSName object. @param date String representation of the date to be set
2743 Sets the name property in the annotation object with the provided string value. @param name the new name to be set
2744 Sets the content of the annotation using the provided string. @param contents The new content for the annotation
2745 Sets the title of the object using provided string. @param title The new title to be assigned to the object
2746 Sets the subject of the annotation in the PDF document. @param subject The new subject to be set
2747 Sets a symbol for the annotation based on the input string. @param symbol the input string to determine the symbol ('paragraph' becomes 'P', otherwise 'None')
2748 Sets the default appearance string for annotation in PDF document. @param appearance The appearance string to be set
2749 Sets the default style for annotation. @param style the style to be set as a String
2750 Sets the caption style for the annotation object. @param captionStyle a string representing the desired caption style
2751 Sets the state value in annotations. @param state The new state to be set
2752 Sets the state model for the annotation. @param stateModel a string representing the state model to be set
2753 Sets the status of an object using the provided string value. @param status the new status to be set for the object
2754 Sets the target string in an FDF (Forms Data Format) object. @param target The new target string to be set
2755 Sets the partial field name in the COS object with the given string. @param partial The string to be used as a partial field name.
2756 Sets the name in the reference object using the provided string value. @param name The new name to be set
2757 Sets the name in the dictionary using COSName.NAME as the key. @param name new name to be set in the dictionary
2758 Initializes Optional Content Properties with default settings. @return void; sets up a dictionary structure for optional content.
2759 Sets the JavaScript action for an object. @param sAction the JavaScript action to be set
2760 Sets the value of 'F' in the action object using the provided string. @param f the string to be set as the value for 'F'
2761 Sets the 'D' attribute with the provided string value in the action object. @param d the new value for the 'D' attribute
2762 Sets the specified string value to 'O' in the action object. @param o The string value to be set for 'O' in the action object.
2763 Sets the value of 'P' in the action object using a given string. @param p the string to be set as the value of 'P'
2764 Sets the URI for an action using a provided string. @param uri the new URI to be set
2765 Sets the filename in the dictionary using COSName.N as the key. @param filename the new filename to be set in the dictionary
2766 Sets annotation name in dictionary using COSName.A as key. @param name new annotation name to be stored
2767 Sets the filename in parameters for a COS operation. @param file The new filename to be set
2768 Sets the directory in parameters using the provided string. @param dir The directory to be set
2769 Sets the operation type for this object. @param op The operation type to be set
2770 Sets an execution parameter with the given string value. @param param the string to be set as the execution parameter
2771 Sets the contents of the dictionary to the provided string value
2772 Sets the modified date of the COS object. @param m the new modified date in string format
2773 Sets the annotation name in the COS object. @param nm new annotation name as a String
2774 Sets the default appearance of an object using a provided string value. @param daValue the string representation of the default appearance to be set
2775 Sets the default style string in the COS object. @param defaultStyleString the new style string to be set
2776 Sets the title popup text in the COS (Carousel Object Specification) object. @param t The new title popup text to be set
2777 Sets the subject of the COS object to the provided string. @param subj The new subject for the COS object
2778 Sets the state of the COS object using the provided string value. @param state The new state to be set for the COS object
2779 Sets the state model string in the COS object. @param stateModel a string representing the new state model to be set
2780 Sets a normal caption to the COS object. @param caption the text to be set as the caption
2781 Sets the rollover caption for the COS object. @param caption The text to be displayed on rollover.
2782 Sets an alternate caption to the COS object. @param caption a String representing the new alternate caption
2783 Sets the date in the dictionary using the provided string
2784 Sets the URL in the dictionary using COSName.URL as the key. @param url the new URL to be set
2785 Sets the URL in the dictionary using the provided string. @param url the new URL to be set in the dictionary
2786 Sets the name value in the dictionary object using COSName.NAME key. @param name The new name to be set
2787 Sets the location in the dictionary using the provided string. @param location the new location to be set
2788 Sets the reason in the dictionary using COSName.REASON as the key
2789 Sets the contact information in the PDF dictionary. @param contactInfo a String containing the new contact info to be set
2790 Sets the title of the COS object. @param title The new title to be assigned to the COS object
2791 Sets the default appearance string in a COS dictionary object. @param daValue the new default appearance value to be applied
2792 Sets the default value for COS object. @param value The string to be set as the default value
2793 Sets the partial name for an object, throwing exception if it contains a period. @param name the new partial name to set @throws IllegalArgumentException if the name contains a period character
2794 Sets an alternative field name in the PDF document's dictionary. @param alternateFieldName the new name for a specific field
2795 Sets the mapping name in the dictionary using COSName.TM as key. @param mappingName the new name to be assigned
2796 Sets the string value and updates the COS object. @param value The new string value to be set @throws IOException if an error occurs during update
2797 Sets a string value and applies changes to the COS object. @param value The string value to be set @throws IOException if an I/O error occurs during the operation
2798 Sets the default value for the COS object with the provided string. @param value The new default value to be set for the COS object.
2799 Sets the default appearance for this annotation and its child widgets (if any). @param daValue string value representing the new default appearance
2800 Sets the scale ratio for the COS object. @param scaleRatio a string representing the desired scale ratio
2801 Sets an integer value in the PDF document using a given key. @param key a string representing the key or identifier for the value @param value the integer value to be set for the corresponding key
2802 Sets an integer value in the specified key of an embedded dictionary.
2803 Sets a specific bit flag in the field to the given value.
2804 Sets the structural parents of the PDF page using the provided integer value. @param structParents integer representing the structural parents to be set
2805 Sets the rotation of the page to the specified angle in degrees. @param rotation The desired rotation angle in degrees (0-359).
2806 Initializes a PDPageTree with the given COSDictionary and PDDocument. Repairs bad PDFs containing a Page dict instead of a page tree. @param root The COSDictionary representing the page tree's root (cannot be null) @param document The PDDocument to which this page tree belongs
2807 Removes a COSDictionary node from its parent's kids and updates ancestor counts. @param node the COSDictionary to be removed
2808 Adds a page to the PDF document and updates the tree structure. @param page The PDPage object to be added to the PDF document.
2809 Sets the starting point for paging. Throws exception if input is not a positive integer. @param start The new starting point for paging
2810 Sets the bits per sample value in a COS Object. @param bps integer representing the number of bits per sample to set
2811 Sets the Master Content Identifier (MCID) for a COS Object. @param mcid integer value representing the MCID to be set
2812 Sets the revision number for a COS object. Throws exception if input is negative. @param revisionNumber the new revision number to set (shall be > -1)
2813 Sets the next key for the parent tree in COS object. @param parentTreeNextKey new value for the next key of parent tree
2814 Sets the length of the crypt filter dictionary to the provided value. @param length new length for the crypt filter dictionary
2815 Sets the version of an object in the COS (Content Object System). @param version the new version number to be assigned
2816 Sets the length of the dictionary object in COS format. @param length the new length to be set
2817 Sets the revision number for the dictionary object. @param revision The new revision number to be set
2818 Sets permission level in the dictionary object using provided integer value. @param permissions an integer representing the desired permission level
2819 Sets the current page number in annotation data. @param page new page number to be set
2820 Sets justification for the text in a PDF document using the provided string. @param justification String indicating the type of justification ("centered", "right" or default)
2821 Sets the rotation angle for an object in a COS document. @param rotation The desired rotation angle in degrees
2822 Sets the field flags in the COSName object. @param ff integer value representing the field flags to be set
2823 Sets the field flags for the COSName SET_FF in an internal field object. @param ff integer value to set as the field flag
2824 Sets clear field flags for the field object. @param ff integer value representing clear field flags to be set
2825 Sets the widget field flags with specified integer value. @param f an integer representing the new field flags
2826 Sets specific flags for a widget field using the provided integer value. @param ff Integer representing the flags to be set
2827 Sets clear widget field flags in COSName object. @param ff integer value for the clear widget field flags
2828 Sets the flag value for an object and updates it in a dictionary. @param flags integer value representing various flags to be set
2829 Sets widths for a given font and glyph list in a PDF document. @param font the COSDictionary to set the widths on @param glyphList the glyph list containing glyph names @throws IOException if an error occurs during I/O operations
2830 Sets the paint type in the pattern dictionary. @param paintType an integer representing the paint type to be set
2831 Sets the type of pattern in the pattern dictionary. @param patternType integer value representing the pattern type
2832 Sets the paint type in COS object based on provided integer value. @param paintType an integer representing the desired paint type
2833 Sets the tiling type for the COS object. @param tilingType an integer representing the desired tiling type
2834 Sets the shading type in the dictionary using a specified integer value. @param shadingType an integer representing the desired shading type
2835 Sets the number of bits per flag in the COS object. @param bitsPerFlag The desired number of bits per flag.
2836 Sets the number of vertices per row in the COS object
2837 Sets the number of bits per color component for this object. @param bitsPerComponent number of bits per color component
2838 Sets the number of bits per coordinate in the COS object and updates the local value. @param bitsPerCoordinate The new number of bits per coordinate to set.
2839 Sets the line cap style in the dictionary using given integer value. @param style an integer representing the line cap style to be set
2840 Sets the line join style in a graphics dictionary. @param style an integer representing the desired line join style
2841 Sets the overprint mode in the dictionary. Removes if null, otherwise sets the value. @param overprintMode new overprint mode (null to remove)
2842 Sets the flag value for the action object
2843 Sets the flag value for an action in COS (Content Operating System). @param flags integer representing the new flag value
2844 Sets the page number for a document. Removes if negative, otherwise sets it. @param pageNumber the page number to set; if < 0, removes the page number
2845 Sets the annotation index in a dictionary. Removes if index is negative; sets otherwise. @param index The new annotation index to set (negative values remove the index)
2846 Sets annotation flags for COS object. @param flags integer value representing annotation flags
2847 Sets the structural parent of the COS object to a specified value. @param structParent an integer representing the new structural parent
2848 Sets the quality value of COS object using provided integer. @param q the quality value to be set
2849 Sets the rotation of the COS object in degrees. @param rotation The degree of rotation (0-360).
2850 Sets the P value in a dictionary within specified range (0 to 3). @param p The value to be set for P @throws IllegalArgumentException if p is not between 0 and 3
2851 Sets whether timestamp is required in the document. @param flag true if required, false otherwise
2852 Sets the open count value in COS object. @param openCount new value to be set for open count
2853 Sets the quality factor in the COS dictionary object. @param q The quality factor to be set (integer value)
2854 Sets field flags in the dictionary using provided integer value. @param flags integer representing new field flags to be set
2855 Sets the top index in COS object or removes it if input is null. @param topIndex new value for the top index, can be null to remove
2856 Sets the maximum length for the COS object. @param maxLen the maximum length to be set
2857 Sets the Q value in the COS object. @param q The new value for the Q property.
2858 Sets a long value in the PDF document using a specified key. @param key The string identifier for the value to be stored. @param value The long value to be stored in the PDF document.
2859 Writes the PDF document trailer and handles updates, including sorting xref and removing checksums. @param doc COSDocument object containing the document to be written @throws IOException if an I/O error occurs during writing
2860 Sets the revision of the COS dictionary object to the specified value. @param revision the new revision value to be set
2861 Sets the minimum revision number in the dictionary. @param revision the new minimum revision number to be set
2862 Sets a floating point number in PDF using given key and value
2863 Sets the user unit for the page. Throws exception if input is not positive. @param userUnit the value to set as the user unit
2864 Sets the width of a guideline in the document. @param width float value representing the new width
2865 Sets the opacity level of the annotation. @param opacity float value representing the opacity level (0.0 to 1.0)
2866 Sets the length of the leader line in the PDF annotation. @param leaderLength new value for the leader line length
2867 Sets the leader extend value in annotations using a floating-point number. @param leaderExtend The new leader extend value to set
2868 Sets the leader offset in the COS (Carousel Object Specification) annotation. @param leaderOffset the new value for the leader offset
2869 Sets the font weight value in the dictionary object. @param fontWeight a floating-point number representing the desired font weight
2870 Sets the italic angle for the font in degrees. @param angle the angle value to be set (in degrees)
2871 Sets the ascent value in the dictionary. @param ascent The new ascent value to be set
2872 Sets the descent value in a dictionary object. @param descent The new descent value to be set
2873 Sets the leading value in the dictionary object. @param leading The new leading value to be set
2874 Sets the height of a capital letter in a font. @param capHeight the new height for capital letters
2875 Sets the X height value in the dictionary and updates the object's X height. @param xHeight float value to be set as the X height
2876 Sets the vertical stem length in the dictionary object with the provided value. @param stemV new vertical stem length to be set
2877 Sets the vertical stem height in a dictionary object. @param stemH the desired vertical stem height as a float value
2878 Sets the average width value in a dictionary object. @param averageWidth the new average width to be set
2879 Sets the maximum width for an object in a dictionary.
2880 Sets the missing width value in the dictionary. @param missingWidth the new missing width value to be set
2881 Sets the X step value in the COS object. @param xStep The new X step value to be set
2882 Sets the vertical step size in the COS object. @param yStep the new vertical step size to be set
2883 Sets the audio volume level. Throws an exception if not in the range -1.0 to 1.0. @param volume float value for audio volume
2884 Sets the length of the leader line in the COS object. @param leaderLineLength float value representing the length of the leader line
2885 Sets the length of the leader line extension for the COS object. @param leaderLineExtensionLength float value representing the new length
2886 Sets the leader line offset length for the COS object. @param leaderLineOffsetLength float value representing the new offset length
2887 Sets the constant opacity attribute for the COS object to the specified value. @param ca the constant opacity value to be set
2888 Sets the width of an object in a COS document. Handles both float and integer values.
2889 Sets the V value in the dictionary to the specified minimum required capability
2890 Sets the CYX value in the COS object to a given float. @param cyx The new float value for CYX
2891 Parses a COSStream from the provided dictionary and validates its length. @param dic COSDictionary containing the stream data @return COSStream object representing the parsed stream @throws IOException if there's an issue reading or validating the stream
2892 Merges the contents of two COSObjects, skipping if they are identical or null. @param base the source object to merge from @param target the destination object to merge into @throws IOException if an I/O error occurs during merging
2893 Parses a PDF document from input and returns it as PDDocument object. @param lenient if true, parsing errors are logged instead of thrown @return PDDocument object representing the parsed PDF @throws IOException if an error occurs during parsing or if header doesn't contain version info
2894 Processes and interprets stream operators in a PDF content stream. @param contentStream the input stream containing PDF operations to process @throws IOException if an I/O error occurs while reading the stream
2895 Parses input data and returns a list of objects found in the stream. @throws IOException if an error occurs during parsing @return List<Object> containing parsed tokens from input stream
2896 Parses a PDF stream to find and return the glyph bounding box as a PDRectangle object, or null if not found.
2897 Parses and returns the width from PDF stream data. @return float value representing width, or throws IOException if parsing fails
2898 Writes a PDDocument to the output stream with default settings. @param doc The PDF document to be written. @throws IOException if an I/O error occurs during writing.
2899 Saves incremental changes to the PDF document into an output stream. @param output the OutputStream where the changes will be written @throws IOException if an I/O error occurs @throws IllegalStateException if the document was not loaded from a file or a stream
2900 Constructs a new PDDocument with an in-memory stream cache.
2901 Fetches and returns the document catalog. If not already created, initializes it based on PDF structure. @return The document catalog object
2902 Retrieves a COSDictionary object from the tree structure based on the given page number. @param pageNum The 1-based index of the desired page @param node The current COSDictionary node being examined @param encountered The count of nodes already encountered during traversal @return The corresponding COSDictionary object or throws an exception if not found
2903 Creates a PDF File Specification object from COSBase. @param base the input data to create the specification (COSString or COSDictionary) @return PDFileSpecification object or null if base is null, throws IOException for invalid types
2904 Notifies that the structure element has changed and updates it accordingly.
2905 Appends a COSObjectable kid to the current object, unless it's null. @param objectable The COSObjectable object to be appended as a kid
2906 Inserts a new COSObjectable before the reference object in the list. @param newKid the COSObjectable to be inserted @param refKid the reference COSObjectable in the list
2907 Removes a COSObjectable kid from the list. @param objectable The COSObjectable to be removed @return True if removal is successful, false otherwise
2908 Sets and prepares the standard crypt filter dictionary for encryption. @param cryptFilterDictionary the dictionary to be used for encryption
2909 Sets the default crypt filter dictionary for encryption. @param defaultFilterDictionary the dictionary to be used as the default crypt filter dictionary
2910 Initializes FDFAnnotationCaret with the specified subtype.
2911 Initializes an FDFAnnotationCircle object and sets its subtype name.
2912 Initializes FDFAnnotationFileAttachment and sets its subtype.
2913 Sets the subtype of the annotation to 'FDFAnnotationFreeText'.
2914 Initializes FDFAnnotationInk and sets its subtype to a predefined value.
2915 Initializes a new FDFAnnotationLine object and sets its subtype.
2916 Initializes FDFAnnotationLink by setting its subtype name.
2917 Initializes a new FDFAnnotationPolygon object and sets its subtype to 'POLYGON'.
2918 Initializes FDFAnnotationPolyline with the subtype name set to COSName.SUBTYPE.
2919 Initializes FDFAnnotationSound with a specific subtype name.
2920 Initializes and sets the name of the FDFAnnotationSquare subtype.
2921 Initializes an FDFAnnotationStamp by setting its subtype name.
2922 Initializes FDFAnnotationText object with predefined subtype.
2923 Constructs an instance of FDFAnnotationTextMarkup.
2924 Builds and sets the vertical metrics for a CID font dictionary. @param cidFont the CID font dictionary to modify @throws IOException if there's an issue reading from the TrueType font
2925 Initializes a new instance of the PDSimpleFont class.
2926 Fetches an optional content group by its name from the collection. @param name unique identifier for the optional content group @return PDOptionalContentGroup object if found, or null otherwise
2927 Fetches and returns a collection of optional content groups from the document. @return Collection of PDOptionalContentGroup objects or an empty collection if none found
2928 Sets the line width in a graphical context. @param width float value representing the new line width
2929 Sets the miter limit value in the graphics context. @param miterLimit the new miter limit to be applied
2930 Sets the flatness tolerance level in the COS document. @param flatness a float value representing the desired flatness tolerance
2931 Sets the smoothness tolerance level in the graphics settings. @param smoothness a float value representing the new smoothness level
2932 Sets the stroking alpha constant to the specified value.
2933 Sets the non-stroking alpha constant value in the graphics state dictionary. @param alpha floating point value for non-stroking alpha (transparency)
2934 Initializes a new PDAnnotationLink object and sets its subtype.
2935 Constructs an empty PDAnnotationMarkup object.
2936 Initializes an instance of PDAnnotationPopup and sets its subtype to SUB_TYPE.
2937 Initializes a new PDAnnotationWidget object and sets its subtype to SUB_TYPE.
2938 Constructs a new PDAnnotationLink from a COSDictionary. @param field the dictionary containing annotation data
2939 Constructs a PDAnnotationMarkup from COSDictionary. @param dict COSDictionary containing annotation data
2940 Constructs an annotation popup using the provided COSDictionary field. @param field COSDictionary containing annotation field data
2941 Constructs an unknown PDF annotation from a COS dictionary. @param dic the COS dictionary representing the annotation
2942 Constructs an annotation widget from a COS dictionary. Sets the subtype for the object. @param field COS dictionary containing annotation data
2943 Sets equal differences for all sides of a rectangle. @param difference The value to be used as the difference for each side
2944 Sets equal differences for all sides of a rectangle. @param difference The value to be applied to all four sides.
2945 Sets equal differences to all sides of the rectangle. @param difference The value to be set for all four sides.
2946 Sets the border line style and width for a PDF element. @param lineWidth Width of the border line @param bs Border style dictionary (optional) @param border Border array (optional)
2947 Adds key usage properties to the certificate. @param digitalSignature char for digital signature @param nonRepudiation char for non-repudiation ... and similarly for other parameters
2948 Constructs a PDCheckBox object with an associated PDAcroForm. @param acroForm The form to which the checkbox belongs.
2949 Initializes a PDComboBox with an AcroForm. @param acroForm the form to be associated with this combo box
2950 Initializes a new PDListBox object with the given PDAcroForm. @param acroForm The form that this list box belongs to.
2951 Sets the string value of the COS object and updates selected options index. @param value the new string value to be set @throws IOException if an I/O error occurs while setting the value
2952 Retrieves and formats the border array from a COSObject. Ensures array has at least 3 elements, filling with zeros if necessary. @return The formatted border array or a new one if original was null
2953 Initializes a COSWriterCompressionPool for a given document and compression parameters. @param document the PDDocument to be compressed @param parameters the CompressParameters to use, or default if null @throws IOException if an I/O error occurs
2954 Overloaded method to fetch an embedded date with default timezone. @param embedded the embedded object name @param key the specific key for the date @return Calendar object representing the embedded date or null if not found
2955 Creates a PDImageXObject from a BufferedImage with default compression. @param document the PDDocument to which the image will be added @param image the BufferedImage to be converted into a PDImageXObject @return a PDImageXObject representing the given image @throws IOException if there is an error during the conversion process
2956 Adds corner curl effect to a path based on given angles and radii. @param anglePrev previous angle, angleCur current angle, radius of the arc, cx,cy coordinates, alpha and alphaPrev are rotation angles. @throws IOException if an I/O error occurs during drawing operations
2957 Draws a basic ellipse using the given coordinates. @param left x-coordinate of the left edge @param bottom y-coordinate of the bottom edge @param right x-coordinate of the right edge @param top y-coordinate of the top edge @throws IOException if an error occurs during drawing
2958 Formats text content based on appearance style and width. Throws IOException if there's an issue with the text processing.
2959 Calculates the optimal font size for text within a PDF rectangle. @param font the PDFont object representing the font to be used @param contentRect the PDRectangle object defining the area where the text will be placed @return the calculated font size that fits both width and height of the contentRect @throws IOException if there is an error reading from the font or contentRect objects
2960 Reads and sets the encoding for the font from a dictionary object. Handles various encoding types and falls back to font-based encoding if necessary. @throws IOException if there's an issue reading the encoding
2961 Determines if the font is symbolic based on its encoding and other attributes. @return Boolean value indicating if the font is symbolic or not, or null if unknown
2962 Retrieves a TrueType font by base name or fallback. @param baseFont desired font's base name @param fontDescriptor descriptor for the font @return FontMapping object containing TrueTypeFont and fallback status
2963 Fetches a FontBoxFont based on baseFont or fallbackName. Returns a FontMapping object. @param baseFont original font name @param fontDescriptor descriptor for the font @return FontMapping<FontBoxFont> object, uses fallback if necessary
2964 Checks if XFA is dynamic (has it and no fields). @return true if XFA exists and there are no fields, false otherwise
2965 Fetches rich content from annotated dictionary object. @return Rich content as a string or null if not found
2966 Writes XML representation of field to the provided writer. @param output Writer object for writing XML data @throws IOException if an I/O error occurs during writing
2967 Fetches rich text value from inheritable attribute RV. @return rich text value as a String or null if not found
2968 Constructs a PDFunctionType4 object from the given COSBase function stream. Parses the byte array into a string and generates instruction sequence. @param functionStream base COS stream containing function data @throws IOException if there's an error reading or parsing the stream
2969 Recursively interpolates values based on input coordinates and step. @param coord array of integer coordinates @param step current step in the recursion @return float array containing interpolated samples
2970 Constructs a Type6ShadingContext for given parameters. @param shading PDShadingType6 object @param colorModel specifies the color space and has information about alpha and transparency @param xform an AffineTransform object used to transform coordinates in 2D space @param matrix a mathematical construct usually used for transformations in graphics and computational geometry @param deviceBounds defines the boundaries of the rendering area
2971 Initializes Type7ShadingContext with given parameters. @param shading PDShadingType7 object @param colorModel ColorModel for the context @param xform AffineTransform instance @param matrix Transformation matrix @param deviceBounds Bounding rectangle of the device @throws IOException if there is an input/output error
2972 Fetches bytes from COSArray or COSStream object. @return Byte array containing stream/packet data, or empty if not found. @throws IOException if an I/O error occurs while fetching the bytes.
2973 Initializes a PDPageFitDestination object and sets its type in an array.
2974 Sets the fitting bounding box for the array based on the input flag. @param fitBoundingBox true to set TYPE_BOUNDED, false to set TYPE
2975 Initializes and sets up a PDPageFitHeightDestination object with required parameters.
2976 Sets the left element of an array to a value or null if the value is -1. @param x value to be set as the left element; -1 sets it to null
2977 Sets the bounding box type for the array based on a boolean flag. @param fitBoundingBox true to set as bounded type, false for default type
2978 Initializes and sets up a PDPageFitRectangleDestination object in the array.
2979 Sets the left element of an array to a given value or null if value is -1. @param x the value to set at the left position (null if -1)
2980 Sets the bottom value of an object in a resizable array at index 3. @param y new bottom value (-1 indicates null)
2981 Sets the right value in an array at index 4. If input is -1, sets it to null; otherwise, sets it to the integer value. @param x The value to set at index 4 in the array
2982 Sets the top element of an integer array or removes it if input is -1
2983 Initializes and sets up a PDPageFitWidthDestination object in an array.
2984 Sets the top element of an integer array or removes it if input is -1
2985 Sets the fitting bounding box type in an array.
2986 Initializes an XYZ destination in a PDF document page with default settings.
2987 Sets the left element of an array to a value or null based on input. @param x the value to set; -1 sets it to null, otherwise sets it to x
2988 Sets the top value of an array at index 3. If input is -1, sets it to null; otherwise, sets it to the input value. @param y new value for the top element in the array (-1 for null)
2989 Sets the zoom level for an array. If zoom is -1, sets index 4 to null; otherwise, sets it to a new COSFloat object with the given zoom value. @param zoom The zoom level to be set (use -1 for null)
2990 Parses a dictionary value from input and references it from pool if valid. @return COSBase object or NULL if invalid or not found in pool
2991 Fetches decoding parameters using standard or alternative names. @return List of Objects containing decoding parameters @throws IOException if an input/output error occurs during fetching
2992 Fetches and returns file decode parameters in a list of objects. @return List of Objects containing decode parameters or an empty list if none found @throws IOException if there is an error during the fetch operation
2993 Initializes a new instance of the CALGRAY color space in PDF.
2994 Constructor for the PDCalRGB class, extends COSName.CALRGB.
2995 Constructor for PDLab class that calls superclass constructor with COSName.LAB as argument.
2996 Constructs a new PDCalGray object from a COSArray. @param array input data in the form of a COSArray
2997 Constructs a PD CalRGB color space from a COS array. @param rgb the input COS array containing RGB values
2998 Initializes a new instance of PDLab with given COSArray. @param lab The COSArray to initialize the lab with.
2999 Loads and initializes ICC profile. Handles errors by falling back to alternate color space.
3000 Sets the A range for the component using the provided PDRange object. @param range The PDRange object containing the new range values.
3001 Sets the B range of components using the provided PDRange. @param range the new range to be set for component B
3002 Retrieves the crop box for a page. If available, returns a clipped rectangle; otherwise, returns the media box. @return PDRectangle representing the crop box or media box if no crop box is found.
3003 Resolves the bounding box for a widget based on appearance stream or field widget rectangle. @param fieldWidget annotation widget containing field information @param appearanceStream contains visual appearance data of the annotation @return PDRectangle representing the bounding box
3004 Sets the bounding box (BBOX) for the object and notifies of any changes. @param bbox a PDRectangle representing the new bounding box
3005 Sets a color value for a given name and notifies if it's changed. @param name the name of the color @param value the new PDGamma value to set
3006 Sets four colors in PDF object and notifies if changed. @param name key for the color setting @param value new PDFourColours object to be set
3007 Constructs a new PDPage with LETTER size by default.
3008 Adds or retrieves an existing resource of a specific kind. @param kind type of the resource (e.g., COSName.FONT) @param prefix unique identifier prefix for new resources @param object the resource to add or retrieve @return COSName key of the resource, creating one if not found
3009 Adds or updates a font entry in the PDF document with given name and font object. @param name unique identifier for the font @param font the actual font object to be added/updated
3010 Puts a named color space into the dictionary with the given name and value. @param name unique identifier for the color space @param colorSpace the color space object to be added
3011 Adds an extended graphics state to the PDF document under a specified name. @param name unique identifier for the extended graphics state @param extGState the extended graphics state object to be added
3012 Adds or updates a shading object in the COS (Cosmetic Object System) with a given name. @param name unique identifier for the shading object @param shading the PDShading object to be added or updated
3013 Places a named pattern into the COS object with the specified name. @param name the unique identifier for the pattern @param pattern the abstract pattern to be placed in the COS object
3014 Adds a COSName with its associated property list to the main object. @param name The COSName to be added @param properties The associated property list for the COSName
3015 Puts an XObject into this COSDictionary under a given name. @param name the COSName of the XObject @param xobject the PDXObject to be stored
3016 Retrieves the FDF dictionary from the catalog or creates a new one if not present. @return FDFDictionary object
3017 Initializes an empty FDFDocument for creating or editing FDF files.
3018 Retrieves the document's catalog. If not found, creates a new one and sets it. @return FDFCatalog object representing the document's catalog
3019 Retrieves the fractional space to allocate from fit data. If no data is found, defaults to a range of 0.5. @return A PDRange object representing the fractional space
3020 Initializes a tiling pattern for Paint Device (PDF). Sets up resources and pattern type.
3021 Retrieves or creates the appearance dictionary for an annotation. @return PDAppearanceDictionary object, creating a new one if it doesn't exist
3022 Inserts a new sibling before this item in the outline hierarchy. @param newSibling the item to be inserted as a sibling
3023 Inserts a new sibling item after the current node in an outline. @param newSibling the PDOutlineItem to be inserted
3024 Appends a child item to the outline and updates sibling references. @param newChild the PDOutlineItem to be appended
3025 Prepends a new child item to the outline, adjusting sibling relationships. @param newChild The PDOutlineItem to prepend as the first child.
3026 Sets the first bead of a thread and updates its reference. @param bead The PDThreadBead to set as the first bead; can't be null
3027 Initializes a PDThreadBead object with default settings.
3028 Appends a bead to the thread, adjusting previous and next beads as necessary. @param append PDThreadBead object to be appended to the thread
3029 Sets a named value in the COS object's dictionary and notifies of any changes. @param name the key for the value to set @param value the new value to associate with the key
3030 Sets the rendering intent in a dictionary object. @param ri rendering intent to be set
3031 Sets the name "N" to the given string value in an action object. @param name The string value to be assigned to "N".
3032 Sets the style of the COS object using a given string. @param s The style to be set for the COS object
3033 Initializes page labels for a PDF document with a default decimal style starting from the first page. @param document the PDDocument to initialize page labels for
3034 Constructs a PDStructureElement with specified type and parent node. @param structureType the type of the structure element @param parent the parent structure node of this element
3035 Initializes a new instance of PDStructureTreeRoot with default type.
3036 Initializes a shading pattern object and sets its type to shading pattern.
3037 Initializes a new PDAction object and sets its type.
3038 Fetches and returns the document outline if available, otherwise returns null. @return PDDocumentOutline object or null if not found in the root dictionary
3039 Retrieves the parent node of a PDF outline. @return Parent PDOutlineNode or null if none exists
3040 Sets a value at specified index in the export values list, throws exception if index is invalid. @param index position to set the value @throws IOException if an I/O error occurs during update or change application
3041 Initializes an instance of PDRectlinearMeasureDictionary with a specific subtype.
3042 Constructs a new PDTransition with default style R.
3043 Sets a date value in the PDF document using a given key and calendar object
3044 Sets an embedded date in a COS dictionary. Creates the dictionary if it doesn't exist and the date is not null. @param embedded COSName for the dictionary @param key COSName for the date entry @param date Calendar object containing the date to set, or null to remove the entry
3045 Sets the creation date of an object in the system. @param date a Calendar instance representing the creation date to be set
3046 Sets the modification date of an object in the PDF document. @param date The new modification date as a Calendar object
3047 Sets the creation date in the annotation object. @param date Calendar object representing the creation date.
3048 Sets the modification date of the COS object using provided Calendar. @param c Calendar instance containing the new modification date
3049 Sets the creation date for the COS object. @param creationDate a Calendar instance representing the creation date to be set
3050 Sets the sign date in the dictionary using the provided Calendar object. @param cal the Calendar object containing the new sign date
3051 Sets a custom metadata value with given field name and value. @param fieldName the name of the metadata field @param fieldValue the new value for the metadata field
3052 Sets a string value in the object's dictionary and notifies of changes. @param name key for the string value @param value new string value to set
3053 Sets the base string in COS object. @param base The new base string to be set
3054 Sets the version of an application in the dictionary with key "REx". @param applicationVersion the version string to be stored
3055 Sets the unit of measurement for the object. @param units The new unit of measurement as a String
3056 Sets the display format for fractions. Throws exception if input is invalid. @param fractionalDisplay String representing display format ("D", "F", "R", "T" or null)
3057 Sets the thousand separator string in the COS object configuration. @param thousandsSeparator the string to use as a thousand separator
3058 Sets the decimal separator used in calculations. @param decimalSeparator string representing the decimal separator to be used
3059 Sets the label prefix string in the COS object. @param labelPrefixString the new prefix string for labels
3060 Sets the suffix string for a label in the COS object. @param labelSuffixString the string to be appended as a suffix to labels
3061 Sets the label position to a specified value ("S" or "P"), or removes it if null. @param labelPositionToValue The new label position, can be "S", "P", or null. @throws IllegalArgumentException If an invalid value is provided.
3062 Sets the MAC subtype in the COSDictionary of the object. If necessary, creates a new PARAMS dictionary. @param macSubtype The MAC subtype to be set
3063 Sets the MAC creator parameter in the COS object dictionary. If it doesn't exist and a value is provided, it creates it. @param macCreator The string to set as the MAC creator
3064 Sets the MAC resource fork for the COS object with a given string. @param macResFork String representing the MAC resource fork to be set
3065 Initializes FDFField with XML data and handles child elements. @param fieldXML Element containing field data @throws IOException if there's an issue parsing the XML
3066 Initializes an Optional Content Group (OCG) with a given name. @param name the name of the OCG to be initialized
3067 Adds a group to the existing OCGs and ensures it appears in the user interface by adding it to the "Order" entry. @param ocg The optional content group to be added.
3068 Retrieves the base state from a COS dictionary. @return The base state as an enumerated value of type BaseState
3069 Sets the enabled status of a content group in PDF document. @param group The target PDOptionalContentGroup object @param enable True to enable, false to disable the group @return True if the operation was successful, otherwise false
3070 Sets an integer value in the object's dictionary by name and notifies if changed. @param name the key for the integer value @param value the new integer value to set
3071 Sets an integer value for a given name in the COS object dictionary and notifies of any changes. @param name the key for the value to be set @param value the integer value to be set
3072 Sets the denominator value in the COS object. @param denominator new denominator value to be stored
3073 Sets or unsets the 'invisible' flag in the PDF annotation
3074 Sets the hidden flag for this object's annotation. @param hidden boolean value to set the hidden status
3075 Sets the print status of the annotation flag. @param printed boolean value to indicate if the annotation is printed or not
3076 Sets the NO_ZOOM flag for annotation. @param noZoom if true, disables zoom; otherwise, enables it
3077 Sets or clears the 'no rotation' flag for a PDF annotation. @param noRotate if true, disables rotation; otherwise, enables it
3078 Sets or unsets the NO_VIEW flag in annotations for hiding/showing content. @param noView if true, hides content; otherwise, shows content
3079 Sets the read-only flag for this object. @param readOnly boolean value to determine if the object should be read-only
3080 Sets the lock status of the object in COS (Content Object System). @param locked true to lock, false to unlock
3081 Sets a flag to toggle no view in the annotation. @param toggleNoView boolean value to set the flag
3082 Sets the lock status of contents in a PDF annotation. @param lockedContents boolean value indicating if content should be locked or not
3083 Sets the visibility of the COS object based on the boolean parameter. @param invisible true to make object invisible, false to make it visible
3084 Sets the visibility of the COS object to be hidden or visible. @param hidden boolean value indicating if the object should be hidden (true) or not (false)
3085 Sets the print status of the COS object to 'printed' or not. @param printed boolean value indicating print status
3086 Sets or unsets the flag to disable zooming in PDF viewer for this object. @param noZoom true to disable zooming, false to enable it
3087 Sets or clears the flag to prevent rotation of a COS object. @param noRotate if true, prevents rotation; otherwise, allows it
3088 Sets or unsets the 'no view' flag for the COS object. @param noView if true, sets the 'no view' flag; otherwise, unsets it
3089 Sets or unsets the read-only flag for the COS object. @param readOnly boolean value to set the read-only status
3090 Sets or clears the lock flag on the COS object. @param locked true to lock, false to unlock
3091 Sets the flag for toggling no view in COS object. @param toggleNoView boolean value to set the flag
3092 Sets the lock status of contents in COS object. @param lockedContents a boolean value indicating if contents should be locked or not
3093 Sets the filter requirement flag in the COS object. @param flag true to require filtering, false otherwise
3094 Sets the subfilter requirement flag in the COS object. @param flag true to require subfilter, false otherwise
3095 Sets the digest method requirement flag in the COS object. @param flag true to require a digest method, false otherwise
3096 Sets the vertical coordinate system requirement flag in COS object. @param flag true to require vertical coordinates, false otherwise
3097 Sets the reason required flag in a COS object. @param flag boolean value to set the reason requirement
3098 Sets the legal attestation requirement flag in the COS object. @param flag true to require legal attestation, false otherwise
3099 Sets the add revision info required flag for the COS object. @param flag boolean value to set the flag
3100 Sets the subject requirement flag in the dictionary. @param flag true if subject is required, false otherwise
3101 Sets or unsets the issuer requirement in a PDF dictionary. @param flag true to require issuer, false otherwise
3102 Sets the Object Identifier (OID) requirement in a dictionary. @param flag true to require OID, false otherwise
3103 Sets the Subject DN required flag in the dictionary. @param flag true if Subject DN is required, false otherwise
3104 Sets the key usage requirement flag in the dictionary. @param flag true to require key usage, false otherwise
3105 Sets the URL requirement in the dictionary with given boolean flag. @param flag indicates whether a URL is required or not.
3106 Sets the italic formatting flag for the object. @param italic true to set italic, false to unset
3107 Sets or unsets the bold formatting flag for the COS object. @param bold true to set bold, false to unset
3108 Sets the flag indicating if digital signatures exist in a document. @param signaturesExist boolean value representing signature presence
3109 Sets or unsets the APPEND_ONLY flag for the PDF dictionary object. @param appendOnly boolean value to set the flag
3110 Sets the sorting flag in COS object to true or false. @param sort boolean value indicating whether to enable sorting
3111 Sets or unsets the multi-select flag for the COS object. @param multiSelect true to enable multi-select, false otherwise
3112 Sets or unsets the 'do not spell check' flag for the COS object. @param doNotSpellCheck true to disable spell checking, false to enable
3113 Sets the COMMIT ON SELECTION CHANGE flag for the COS object. @param commitOnSelChange true to enable, false to disable
3114 Sets or unsets the combo flag in COS object based on input parameter. @param combo true to set, false to unset the combo flag
3115 Sets the edit flag for this COS object. @param edit boolean value to enable/disable editing
3116 Sets or unsets the read-only flag on a COSName object in the dictionary. @param readonly boolean value to set the read-only status (true for read-only)
3117 Sets or clears the 'required' flag in the dictionary. @param required boolean value to set the requirement status
3118 Sets the 'no export' flag in the dictionary to control visibility during export. @param noExport if true, the item will not be exported; otherwise it can be.
3119 Constructs a push button in the given AcroForm. Sets its flag to PUSHBUTTON. @param acroForm The AcroForm object where this push button will be added
3120 Constructs a radio button in an AcroForm with flag set for radio behavior. @param acroForm the parent AcroForm object
3121 Sets the flag for radios in unison in the COS object. @param radiosInUnison boolean value to set the flag
3122 Sets the multiline flag for the COS object. @param multiline boolean value to set the flag
3123 Sets the password flag for COS object. @param password true to enable, false to disable
3124 Sets the file select flag in COS object for a given boolean value. @param fileSelect boolean value to set the flag
3125 Sets the spell check flag for the COS object. @param doNotSpellCheck true to disable spell checking; false otherwise
3126 Sets or clears the 'do not scroll' flag for a COS object. @param doNotScroll true to set the flag, false to clear it
3127 Sets the flag for combining objects in PDF document. @param comb boolean value; true to combine, false otherwise.
3128 Sets the Rich Text flag for the COS object. @param richText boolean value to enable or disable Rich Text
3129 Decodes JPX input stream to output stream based on data buffer type. @param encoded InputStream containing encoded JPX data @param decoded OutputStream for decoded data @param parameters COSDictionary of decode parameters @param options DecodeOptions object @return DecodeResult object with updated parameters @throws IOException if an I/O error occurs or data type is not implemented
3130 Checks the validity of page objects in the COSDictionary root, ensuring all pages are dereferenced and the root contains a PAGES dictionary. @param root The COSDictionary to check for page object validity @throws IOException If the root does not contain a PAGES dictionary
3131 Retrieves and returns a tree of all pages in the PDF document. @return PDPageTree containing all pages in the document
3132 Initializes PDPageTree with a given COSDictionary root and default resource cache. @param root The root dictionary of the page tree
3133 Removes a specified PDPage from the document using its COSObject. @param page the PDPage to be removed
3134 Inserts a new PDF page right before the nextPage in document structure. @param newPage The page to be inserted. @param nextPage The reference page before which newPage will be inserted. Throws exception if nextPage is not found in current document structure.
3135 Inserts a new PDF page after the specified existing page. @param newPage The page to be inserted @param prevPage The existing page after which the new page is inserted
3136 Increments the revision number by one.
3137 Creates a PDImageXObject from a BufferedImage; supports only 1-bit black/white images. @param document the PDF document to which the image will be added @param image the source BufferedImage, must be 1-bit black/white @return a PDImageXObject created from the provided BufferedImage @throws IOException if an I/O error occurs or if the image is not 1-bit black/white
3138 Creates a PDImageXObject from RandomAccessRead using CCITTFaxDecode. @param document the PDDocument to which the image object belongs @param reader the source of the image data @param number the specific image index in the data source @return PDImageXObject or null if no valid image is found @throws IOException if an I/O error occurs
3139 Sets a float value for the given name in the COS object and notifies if changed. @param name key to set the value for @param value float value to be set
3140 Sets intensity level of the COS object. @param i float value representing intensity level
3141 Sets the conversion factor value in the COS object. @param conversionFactor float value to be set
3142 Parses an XRef object stream and resolves its trailer, returns previous offset. @param objByteOffset byte offset of the object @param isStandalone indicates if it's a standalone xref table @return previous object's byte offset or -1 if not found @throws IOException if an I/O error occurs during parsing
3143 Parses and returns a PDDocument. Throws an IOException if an error occurs during parsing.
3144 Processes a transparency group, applying transformations and graphics state changes. @param group PDTransparencyGroup object to be processed @throws IOException if an I/O error occurs during processing
3145 Processes a Type 3 stream with given character processor and text rendering matrix. @param charProc PDType3CharProc object for character processing @param textRenderingMatrix Matrix object for text rendering transformations
3146 Processes and transforms annotation appearance based on its rectangle. @param annotation the PDAnnotation to process @param appearance the PDAppearanceStream of the annotation @throws IOException if input/output operation fails
3147 Processes and applies a tiling pattern to the graphics context. @param tilingPattern the pattern to apply @param color the base color for the pattern @param colorSpace the color space for the pattern @param patternMatrix the transformation matrix for the pattern
3148 Processes a PDF content stream, applying transformations and clipping.
3149 Writes a COSDocument to an output stream. @param doc the document to be written @throws IOException if an I/O error occurs during writing
3150 Saves the document to an output stream with optional compression. @param output The output stream where the document is saved. @param compressParameters Parameters for compressing the document. If null, no compression is applied. @throws IOException if document is closed or there's a problem writing the output.
3151 Fetches and returns the latest version of the document from its header or catalog. @return the most recent version as a float value
3152 Retrieves a page from the PDF using its index. @param index position of the page in the PDF @return PDPage object representing the page
3153 Removes a dictionary node at the specified index. @param index position of the node to be removed
3154 Searches for the index of a given page in the document tree. @param page PDPage object to find @return Index of the page or -1 if not found
3155 Retrieves a file specification from the stream's dictionary. @return PDFileSpecification object or throws IOException if not found @throws IOException if there is an error accessing the stream's dictionary
3156 Fetches and creates a file specification from the FDF dictionary object. @return PDFileSpecification object or throws IOException if not found
3157 Retrieves a list of embedded PDFileSpecifications from the FDF object. @return A List of PDFileSpecification objects or null if none are found. @throws IOException if there's an issue reading the data
3158 Retrieves file specification from a dictionary object. @return PDFileSpecification object or null if not found, throws IOException if error occurs during retrieval
3159 Fetches a file specification from COS object's dictionary. @return PDFileSpecification object or throws IOException if not found
3160 Fetches and creates a file specification from the action's dictionary object. @return PDFileSpecification object or throws IOException if an error occurs
3161 Retrieves and creates a file specification from the COS object dictionary. @return PDFileSpecification object representing the file or throws IOException if an error occurs
3162 Retrieves file specification from the action dictionary object. @return PDFileSpecification object representing the file or throws IOException if an error occurs @throws IOException if there is an issue reading the file
3163 Retrieves and creates a file specification from action's dictionary object. @return PDFileSpecification object representing the file, throws IOException if error occurs @throws IOException if an input/output error occurred
3164 Retrieves file specification from action dictionary object. @return PDFileSpecification object representing the file, or null if not found @throws IOException if there is an error accessing the file system
3165 Returns a file specification object from the COS dictionary. @return PDFileSpecification object @throws IOException if an I/O error occurs while reading the data
3166 Checks if a value has changed and notifies listeners if so. @param oldBase original COSBase object @param newBase updated COSBase object
3167 Appends an element to current structure and sets parent reference. @param structureElement the PDStructureElement to append
3168 Inserts a new element before a reference element in the structure. @param newKid the element to be inserted @param refKid the existing element before which newKid is to be inserted
3169 Removes a child element from the structure and updates its parent reference. @param structureElement The PDStructureElement to be removed as a kid @return True if removal was successful, false otherwise
3170 Initializes FDFAnnotationHighlight and sets its subtype name.
3171 Initializes FDFAnnotationSquiggly with a specific subtype for the annotation.
3172 Initializes a new instance of FDFAnnotationStrikeOut and sets its subtype.
3173 Initializes and sets up FDFAnnotationUnderline with a specific subtype.
3174 Initializes PDAnnotationFileAttachment with its specific subtype in COSObject.
3175 Initializes PDAnnotationInk object and sets its subtype to COSName.SUBTYPE.
3176 Initializes a PDF annotation line object with default values and sets its subtype.
3177 Initializes a new PDAnnotationPolygon by setting its COS object's subtype to SUB_TYPE.
3178 Initializes a new PDAnnotationPolyline object and sets its subtype in COSObject.
3179 Initializes PDAnnotationRubberStamp with a specific COS subtype.
3180 Constructs a PDAnnotationSquareCircle with the specified subtype. @param subType the subtype of the annotation square circle
3181 Initializes PDAnnotationText with COS object subtype set to SUB_TYPE.
3182 Constructs a new text markup annotation with the specified subtype. Initializes quad points to an empty array as they are required. @param subType the type of the text markup annotation
3183 Constructs an annotation caret from a COSDictionary field. @param field a dictionary containing annotation data
3184 Initializes a new instance of PDAnnotationFileAttachment with a COSDictionary. @param field a dictionary containing annotation data
3185 Constructs an annotation free text object from a COS dictionary. @param field COS dictionary containing annotation data
3186 Constructor for PDAnnotationInk. Initializes with a COSDictionary. @param dict the dictionary containing ink annotation data
3187 Constructs a new PDAnnotationLine from COSDictionary. @param field COSDictionary containing annotation data
3188 Constructs a polygon annotation from a COSDictionary. @param dict the dictionary containing annotation data
3189 Constructs a new polyline annotation from a COS dictionary. @param dict COS dictionary containing annotation data
3190 Constructs an instance of PDAnnotationRubberStamp from a COSDictionary. @param field The COSDictionary containing the rubber stamp's data
3191 Constructs a PDAnnotationSound instance from a COSDictionary. @param field COSDictionary containing sound annotation data
3192 Constructs a new PDAnnotationSquareCircle from a COSDictionary. @param dict the dictionary containing annotation data
3193 Constructs a PDAnnotationText object from a COSDictionary. @param field the COSDictionary containing annotation text data
3194 Constructs a PDAnnotationTextMarkup from a COSDictionary. @param field COSDictionary containing annotation data
3195 Retrieves the annotation popup if it exists, otherwise returns null. @return PDAnnotationPopup object or null if not found
3196 Retrieves a list of annotation widgets from the object. @return List of PDAnnotationWidget objects, may be empty if none found
3197 Writes the compressed body of a COSDocument to an output stream. @param document The COSDocument object to be written @throws IOException If an I/O error occurs during writing
3198 Determines if the font contains symbolic characters. @return true if symbolic, false otherwise or null if uncertain
3199 Checks if the provided AcroForm object represents a dynamic XFA form. @param acroForm PDAcroForm object to be checked @return true if it's a dynamic XFA form, false otherwise
3200 Initializes an iterator over the fields in a PDF AcroForm. @param form the AcroForm containing the fields to iterate through
3201 Creates a PDFunction based on the provided COSBase object. @param function COSBase object representing a PDF function @return Corresponding PDFunction object, throws IOException if invalid or unsupported type
3202 Performs interpolation on input values. Returns an array of floats.
3203 Extracts and converts a soft mask's matte array to RGB. @param softMask the soft mask image object @return float array of RGB values or null if conversion fails
3204 Retrieves and parses a document from bytes using XMLUtil. @return Parsed Document object or throws IOException if error occurs @throws IOException if an I/O error occurs during parsing
3205 Encodes the image into a PDImageXObject using various compression techniques. @return PDImageXObject or null if encoding is unsuccessful for the image type @throws IOException if an I/O error occurs during encoding
3206 Sets the destination to a specific PDF page with default coordinates. @param page The target PDPage for the destination, if null then destination is cleared
3207 Initializes the page for further operations like drawing or modifying. @param page the PDF page to initialize, cannot be null
3208 Returns the bleed box of a page, or the crop box if not defined. @return PDRectangle object representing the bleed box or crop box
3209 Fetches the trim box of a PDF page, or its crop box if trim box is not available. @return Trim box as a PDRectangle object, or crop box if trim box is null
3210 Returns the art box of the PDF page, clipped to its media box if available; otherwise, returns the crop box. @return The art box rectangle or the crop box as a fallback.
3211 Returns the rotated crop box of a PDF page, considering its rotation angle. @param page the PDF page to be processed @return the rotated crop box rectangle for the given page
3212 Adds a PDFont object to the document and returns its COSName.
3213 Adds a color space to the document and returns its name. @param colorSpace The color space object to be added @return COSName representing the added color space
3214 Adds an extended graphics state to the COSName collection. @param extGState The extended graphics state to be added. @return A unique COSName identifier for the added graphics state.
3215 Adds a PDShading object to this resource and returns its COSName. @param shading the PDShading object to be added @return the COSName of the added PDShading object
3216 Adds a pattern to the list and returns its COSName. @param pattern the abstract pattern to be added @return COSName of the added pattern
3217 Adds a property list to the object and returns a COSName based on its type. @param properties PDPropertyList to be added, can be PDOptionalContentGroup or another type @return corresponding COSName for the added properties
3218 Adds an image object to the PDF document and returns its name. @param image the image object to be added @return COSName of the added image object
3219 Adds a PDFormXObject to the collection and returns its COSName. @param form PDFormXObject to be added @return COSName of the added object
3220 Adds an XObject to the PDF document and returns its name. @param xobject The object to be added @param prefix A prefix for the object's name @return The COSName of the added XObject
3221 Exports document fields to FDF format. @return FDFDocument object containing exported field data @throws IOException if an I/O error occurs during the process
3222 Retrieves the Down Appearance entry from the Appearance dictionary. If it's a sub-dictionary, creates and sets a new COS Stream entry. @return PDAppearanceEntry object for Down Appearance
3223 Fetches and ensures existence of the rollover appearance entry in the dictionary. @return PDAppearanceEntry object for rollover, creates new if not found or invalid
3224 Retrieves and ensures the existence of a normal appearance entry in the dictionary. @return Normal PDAppearanceEntry, creates new if not found or invalid.
3225 Adds a new child item to the end of this outline. @param newChild the PDOutlineItem to be added
3226 Adds a child node at the beginning of the outline and updates parent open count. @param newChild PDOutlineItem to be added as first child
3227 Initializes page labels for a PDF document from a COSDictionary. @param document the PDF document @param dict the dictionary containing page label information @throws IOException if there is an issue with reading the dictionary
3228 Initializes an embedded go-to action with its default subtype.
3229 Initializes a new PDActionGoTo object with the specified subtype.
3230 Initializes and sets up a PDActionHide object with its specific subtype.
3231 Initializes PDActionImportData with its specific subtype.
3232 Initializes a new instance of PDActionJavaScript with default subtype.
3233 Initializes an instance of PDActionLaunch with its specific subtype.
3234 Initializes a new instance of PDActionMovie with default subtype.
3235 Initializes a new PDActionNamed object with its subtype.
3236 Initializes a new instance of PDActionRemoteGoTo and sets its subtype.
3237 Initializes and sets the subtype for a form reset action.
3238 Initializes a new instance of PDActionSound and sets its subtype.
3239 Initializes and sets the subtype of the PDActionSubmitForm object.
3240 Initializes a new instance of PDActionThread and sets its subtype.
3241 Initializes PDActionURI with its subtype.
3242 Updates open count of the parent node by a given delta value. @param delta The amount to add or subtract from the parent's open count.
3243 Sets a new value and handles updates based on export values or Opt entry. @param value the string value to be set @throws IOException if an I/O error occurs during update
3244 Checks if a specific content group is enabled based on the base state and COS dictionary. @param group Optional Content Group to check, null for base state check @return true if enabled, false otherwise
3245 Enables or disables an Optional Content Group by name. @param groupName the name of the group to modify @param enable true to enable, false to disable @return true if operation was successful, false otherwise
3246 Retrieves all pages from the document's page tree. @return A PDPageTree object containing all document pages.
3247 Returns the total number of pages in the document catalog. @return The count of all pages in the document catalog
3248 Sets or unsets the fixed pitch mode. @param flag true to enable fixed pitch, false to disable
3249 Sets the serif style for text. @param flag true to enable serif, false to disable
3250 Sets the symbolic flag for this object. @param flag true to enable symbolic mode, false to disable
3251 Sets script flag to true or false. @param flag Boolean value to enable/disable the script feature
3252 Sets the non-symbolic flag in the object. @param flag true to enable, false to disable non-symbolic behavior
3253 Sets the italic formatting flag for text. @param flag true to enable italics, false to disable
3254 Sets or unsets the all-capital letters flag. @param flag true to enable all-caps, false to disable
3255 Sets the small cap flag to true or false. @param flag a boolean value; true enables small cap, false disables it
3256 Sets or clears the force bold display flag. @param flag true to enable force bold; false to disable
3257 Creates a PDImageXObject from a byte array with specified parameters. @param document the PDDocument to which the image will belong @param byteArray the input data for the image @param number a specific parameter related to image creation @return a PDImageXObject instance or throws IOException if an error occurs
3258 Creates a PDImageXObject from a file in the given document. @param document PDF document to which the image will be added @param file source image file @param number index or identifier of the image @return PDImageXObject created from the file @throws IOException if there's an error reading the file
3259 Initializes FDFAnnotation with attributes from the provided XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or malformed
3260 Parses a COSBase object dynamically from the document pool or file based on its key. @param objKey unique identifier for the COSObject @param requireExistingNotCompressedObj flag to determine if existing, non-compressed objects are required @return parsed COSBase object or null if not found or an issue occurred during parsing @throws IOException if there's an error reading from the document pool or file
3261 Parses and validates the cross-reference (xref) table or stream in a PDF document. @param document The COSDocument to parse the xref from. @param startXRefOffset The starting offset for parsing. @return The trailer dictionary of the parsed xref. @throws IOException If there is an error reading or parsing the data.
3262 Displays the specified transparency group. @param form PDTransparencyGroup object to be displayed @throws IOException if an input/output error occurs during processing
3263 Processes and applies the soft mask to a transparency group, modifying graphics state. @param group PDTransparencyGroup object to process soft mask for @throws IOException if an I/O error occurs during processing
3264 Shows a specific glyph from a Type 3 font, applying the given transformation matrix. @param textRenderingMatrix the matrix for rendering the text @param font the PDType3Font object containing the glyphs @param code the unique identifier of the glyph to display @param displacement a vector representing displacement values @throws IOException if there's an error processing the Type 3 stream
3265 Displays and processes the visual representation of a given annotation. @param annotation The annotation to be shown and processed @throws IOException if there's an error in getting or processing the annotation's appearance stream
3266 Processes a tiling pattern with given color and color space using its matrix. @param tilingPattern the PDTilingPattern to be processed @param color the PDColor for the pattern @param colorSpace the PDColorSpace for the pattern @throws IOException if an input/output error occurs during processing
3267 Shows the form on the current page. Throws exception if no page or if form data is invalid. @param form the PDFormXObject to be shown @throws IOException if an I/O error occurs during processing
3268 Saves data to an OutputStream with default compression settings. @param output the stream where data is written @throws IOException if an I/O error occurs during saving
3269 Saves data to a file with optional compression. Warns if overwriting an existing file. @param file the target File object @param compressParameters parameters for compression (if applicable) @throws IOException if there's an error during saving or compression
3270 Creates a new PDDocument with the same properties as the source document. @return The newly created PDDocument object @throws IOException if there is an issue reading from or writing to a file
3271 Sets the new version if it's higher than current and document version >= 1.4, otherwise logs an error.
3272 Returns an iterator over all PDPage objects in this document. @return an iterator of type Iterator<PDPage>
3273 Fetches a specific page from the document by index. @param pageIndex the position of the desired page (0-based) @return the PDPage object at the specified index or null if not found
3274 Writes XML representation of the file and its fields to a Writer. @param output Writer object to write XML data to @throws IOException if writing to the Writer fails
3275 Prepares a PDF document for encryption using AES algorithm.
3276 Constructor for PDAnnotationHighlight, extending from a superclass.
3277 Constructor for PDAnnotationSquiggly. Extends superclass with SUB_TYPE.
3278 Constructs a new PDF annotation strikeout with default settings.
3279 Constructs a new instance of PDAnnotationUnderline. Inherits properties from its superclass.
3280 Initializes a new PDAnnotationCircle from a COSDictionary. @param field a dictionary containing annotation data
3281 Constructs an instance of PDAnnotationSquare with given COSDictionary. @param field a dictionary containing the square annotation properties
3282 Constructs a PDAnnotationHighlight from a COSDictionary. @param dict The COSDictionary containing annotation data
3283 Constructs a PDAnnotationSquiggly object from a COSDictionary. @param dict a dictionary containing annotation data
3284 Constructs a strikeout annotation from COSDictionary. @param dict the dictionary containing annotation data
3285 Constructs an underline annotation from a COS dictionary. @param dict the COS dictionary containing annotation data
3286 Imports FDF field data into the current field. Handles various field value types and updates flags. @param fdfField FDFField object containing the field data to be imported @throws IOException if an unknown type for field import is encountered
3287 Draws an inline image at specified coordinates and dimensions. @param inlineImage the PDInlineImage object to be drawn @param x, y the starting coordinates for drawing @param width, height the dimensions of the image @throws IOException if there's an issue with writing or reading data
3288 Creates a cloudy polygon from given path data and handles it internally. @param path 2D array of floats representing points in the path @throws IOException if there's an issue with handling the polygon creation
3289 Draws a cloudy rectangle or ellipse based on input parameters. @param left X-coordinate of the left edge @param bottom Y-coordinate of the bottom edge @param right X-coordinate of the right edge @param top Y-coordinate of the top edge @param isEllipse Boolean flag to draw an ellipse if true, rectangle otherwise @throws IOException If there's an error during drawing operation
3290 Returns an iterator over all PDFields in the acroForm. @return An iterator of type PDField
3291 Evaluates input based on a "stitching" function, selecting an appropriate child function and domain. @param input array containing the value to be evaluated @return float array with the result of the evaluation, or throws IOException if partition is not found
3292 Constructs a PDDeviceN object from COSArray and PDResources. Initializes color space and tint transform. @param deviceN contains colorant names and attributes @param resources provides additional context for the color space
3293 Fetches the tint transform function for this object. @return PDFunction object representing tint transformation or null if not defined @throws IOException if there is an error accessing the underlying data
3294 Constructs a PDSeparation object with given parameters. Throws IOException if tint transform function has less output parameters than the alternate colorspace. @param separation COSArray containing separation details @param resources PDResources for color space creation and function creation @throws IOException when tint transform function's output parameters are less than alternate colorspace components
3295 Fetches the PDFunction object associated with this instance. @return PDFunction object or null if not defined @throws IOException if there is an error reading the COSBase dictionary object
3296 Retrieves and returns an array of PDFunctions from the COSObject. @return Array of PDFunction objects @throws IOException if /Function element is not a dictionary or an array
3297 Fetches and returns the transfer function, creating it if necessary. @return PDFunction object or null if not available or created @throws IOException if an error occurs while fetching the function
3298 Constructs a PDIndexed object with specified array and resources, initializing color tables. @param indexedArray COSArray for indexing @param resources PDF resources to be used @throws IOException if there is an issue reading from the array or creating color space
3299 Evaluates input array using linear interpolation and returns transformed values. @param input float array to be evaluated @return float array with transformed values or null if an IOException occurs
3300 Retrieves an image from the specified region with optional subsampling. @param region Rectangle defining the part of the image to retrieve @param subsampling Level of subsampling (1 means no subsampling) @return BufferedImage representing the retrieved portion of the image @throws IOException if there is an error reading the image data
3301 Creates a PDImageXObject from a BufferedImage. Uses predictor encoding if possible, otherwise exports as 8-bit sRGB. May lose color info in the latter case. @param document The PDF document @param image The source BufferedImage @return PDImageXObject created from the image @throws IOException If an I/O error occurs
3302 Processes a single page from a PDF document. @param page PDPage object to be processed @throws IOException if an I/O error occurs during processing
3303 Processes a child content stream within the context of a page. Throws exception if called outside of #processPage. @param contentStream the PDContentStream to be processed @param page the parent PDPage for the content stream @throws IOException if an I/O error occurs
3304 Constructs a PDPageContentStream for drawing on a PDF page with default settings. @param document the PDF document @param sourcePage the page to draw on @throws IOException if an I/O error occurs
3305 Sets the font and size for PDF text, handles subsetting and type0 fonts. @param font the PDFont object representing the desired font @param fontSize the desired font size as a float
3306 Sets and writes the graphics state parameters to the output stream. @param state The extended graphics state object containing the parameters @throws IOException if an I/O error occurs during writing
3307 Applies a shading fill to the graphics object. Throws exception if used within a text block. @param shading PDShading object representing the desired shading effect @throws IOException if an I/O error occurs
3308 Begins a marked content sequence with the given tag and properties. @param tag COSName representing the content type @param propertyList list of properties for the marked content @throws IOException if an error occurs during writing operations
3309 Sets a marked content point with properties in the PDF document. @param tag COSName identifier for the mark @param propertyList list of properties to associate with the mark
3310 Draws an image onto the PDF document at specified coordinates and dimensions. Throws exception if used within a text block. @param image PDImageXObject to be drawn @param x, y starting coordinates of the image @param width, height dimensions of the image @throws IOException if an I/O error occurs
3311 Draws an image using the specified transformation matrix. Throws exception if called within a text block. @param image PDImageXObject to be drawn @param matrix AffineTransform for positioning and scaling the image @throws IOException if there's an issue with writing operands or operators
3312 Draws a form object on the page if not in text mode, else throws an exception. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs while writing the data
3313 Fetches normal appearance as a content stream. @param compress flag to enable/disable compression @return PDAppearanceContentStream or throws IOException if error occurs
3314 Fetches and returns page labels from the document's root dictionary. @return PDPageLabels object or null if not found @throws IOException if an I/O error occurs while fetching page labels
3315 Constructs a PDActionJavaScript object with specified JavaScript code. @param js JavaScript code to be executed by the action
3316 Checks if a specific group is enabled in the document. @param groupName name of the group to check @return true if the group is enabled, false otherwise
3317 Checks if a specific content group is enabled in the document's catalog properties. @param group PDOptionalContentGroup to check for enabling @return true if the group is enabled or if no properties are set; false otherwise
3318 Fixes destinations in a PDF document by checking and updating pages' presence. @param destinationDocument the PDDocument to fix destinations for
3319 Adds a new PDPage to the document and updates highest object number. @param page the PDPage object to be added to the document
3320 Removes a specific page from the document. @param page the PDPage object to be removed
3321 Removes a specific page from the collection by its index. @param pageNumber the position of the page to be removed
3322 Initializes a PDFPrintable object with given document, rendering settings, and options. @param document the PDDocument to be printed @param scaling Scaling factor for printing @param showPageBorder whether to display page borders during print @param dpi Dots per inch resolution for print output @param center whether to center the content on the page @param renderer PDFRenderer object to handle rendering tasks
3323 Initializes PDFRenderer with given PDDocument and sets up page tree. @param document the input PDF document to be rendered
3324 Constructs a new PageExtractor object with the given PDDocument as its source. @param sourceDocument The PDF document from which to extract pages.
3325 Maps labels to their corresponding page indices in a document. @return Map where keys are labels and values are page indices
3326 Fetches labels for each page index in a document. @return String array containing page labels, or null if no pages exist
3327 Initializes PDF page settings for rendering. @param document the source PDF document @param orientation page orientation (portrait/landscape) @param showPageBorder whether to display page borders @param dpi resolution in dots per inch @param center whether to center pages on output
3328 Builds a font descriptor for a Type 1 font. @param type1 the input Type1Font object @return a PDFFontDescriptor object with various properties set
3329 Builds a font descriptor from FontMetrics. @param metrics object containing font metrics @return PDFontDescriptor with set properties from the metrics
3330 Creates a PDFontDescriptor for the given TrueTypeFont. Throws IOException if required tables are missing. @param ttf input TrueTypeFont object @return PDFontDescriptor with font metrics and attributes set
3331 Creates a PDImageXObject from a byte array with specified offset. @param document the PDDocument to which the image will belong @param byteArray the source data for the image @return a PDImageXObject created from the byte array @throws IOException if there is an error reading the byte array
3332 Creates an image object from a file using a specific document. @param document the PDF document to use @param file the source file for the image @return a PDImageXObject representing the image @throws IOException if there's an error reading the file
3333 Initializes FDFAnnotationCaret with the given Element and sets its subtype and symbol. @param element the XML element to initialize the caret from @throws IOException if there is an issue initializing the caret
3334 Initializes a FDFAnnotationCircle with given Element and sets its interior color if specified. @param element the XML Element containing annotation data @throws IOException if there's an issue reading from the Element
3335 Constructs a PDF annotation file attachment from XML element. @param element the XML element containing annotation data @throws IOException if there is an error reading or processing the element
3336 Initializes FDFAnnotationFreeText object and sets its properties based on the provided XML element. @param element XML Element containing annotation data @throws IOException if there's an issue with setting default appearance or style
3337 Initializes FDFAnnotationInk and sets the ink list from an XML element. @param element XML element containing ink data @throws IOException if 'gesture' element is missing or parsing fails
3338 Constructs an FDFAnnotationLine object from the given XML element, setting its properties. @param element XML element containing line attributes @throws IOException if required attributes are missing or invalid
3339 Initializes FDFAnnotationLink and sets URI action based on provided XML element. @param element XML element containing annotation data @throws IOException if there's an issue handling the element
3340 Initializes FDFAnnotationPolygon with element and sets interior color if provided in the element's attributes. @param element XML element containing annotation data @throws IOException when there are issues reading from the element
3341 Initializes and sets up a FDFAnnotationPolyline object from the given Element. @param element the source Element to create the polyline annotation from @throws IOException if there is an issue reading data from the element
3342 Initializes a new FDFAnnotationSound with specified Element and sets its subtype. @param element the Element to initialize the annotation sound @throws IOException if there is an error during initialization
3343 Constructs FDFAnnotationSquare & sets interior color if provided in element attribute. @param element contains attributes for annotation setup, including "interior-color" @throws IOException if there's an issue with the input/output operation
3344 Initializes FDFAnnotationStamp with XML element and sets its appearance. @param element XML element containing stamp data @throws IOException if there's an issue parsing or decoding the appearance
3345 Initializes FDFAnnotationText and sets icon & state if provided in the element. @param element containing annotation data, including optional "icon" and "state" attributes @throws IOException if there's a problem reading from the element
3346 Initializes FDFAnnotationTextMarkup with coordinates from the given element. @param element contains 'coords' attribute with comma-separated float values @throws IOException if 'coords' is missing or has less than 8 numbers
3347 Retrieves the trailer dictionary from the document, handling potential errors and rebuilding if necessary. @return COSDictionary representing the trailer or null if an error occurred and leniency is not enabled @throws IOException if there's a problem reading the document
3348 Loads a PDF document from byte array input with optional password and keystore. @param input the byte array containing PDF data @param password the decryption password (optional) @param keyStore the InputStream of the keystore (optional) @param alias the alias for the certificate in the keystore (optional) @return a PDDocument object representing the loaded PDF document @throws IOException if an I/O error occurs
3349 Loads a PDF document from input stream with memory-only cache. @param randomAccessRead input stream of the PDF document @return PDDocument object representing the loaded document @throws IOException if an I/O error occurs or the document is invalid
3350 Loads a PDF document from a RandomAccessRead source with an optional password. @param randomAccessRead the source to read the PDF document from @param password the password for the PDF document, if any @return PDDocument object representing the loaded PDF
3351 Loads a PDF document from a given input source using provided credentials and settings. @param randomAccessRead the data source to load the PDF from @param password the password for the PDF, if encrypted @param keyStore the KeyStore containing the private key, if needed @param alias the alias of the private key in the KeyStore @return a PDDocument object representing the loaded PDF document @throws IOException if there is an error reading from the data source or decrypting the PDF
3352 Initializes visual signature from a specified File. @param file The input File to read and initialize the visual signature from @throws IOException if an I/O error occurs while reading the file
3353 Initializes visual signature from input stream. @param is InputStream containing visual signature data @throws IOException if there's an error reading the input stream
3354 Displays a glyph based on the provided font and text rendering matrix. @param textRenderingMatrix transforms text space to user space @param font the font containing the glyph @param code unique identifier for the glyph @param displacement x, y shift for the glyph position
3355 Builds a PDF with visible signature using provided design properties. @param properties Object containing design parameters for the PDF @return InputStream of the built PDF or throws IOException if an error occurs
3356 Saves a file with default compression settings. @param file The file to be saved @throws IOException if an I/O error occurs
3357 Saves a file with specified compression parameters. @param fileName name of the file to be saved @param compressParameters object containing compression settings @throws IOException if an I/O error occurs during saving
3358 Creates a new document if necessary, based on current page and destination document. @throws IOException if there is an error creating the new document
3359 Writes the PDF header, adjusts version if compression is enabled. @param doc COSDocument to write header for
3360 Sets the Optional Content Properties for a PDF document, and updates version to 1.5 if necessary. @param ocProperties Object containing optional content properties to be set
3361 Retrieves and creates a layout page from the first page of a PDF document. @param doc input PDF document @return LayoutPage object representing the formatted page or null if error occurs @throws IOException if an I/O error occurs while reading the document
3362 Calculates and sets the size of a specific PDF page, validating input and handling rotation. @param document the PDDocument instance to fetch the page from @param page the page number (starting from 1) to calculate the size for
3363 Finds the destination page in a PDF document based on its destination. @param doc the input PDDocument object @return the PDPage object if found, or null otherwise
3364 Retrieves the page format for a given index in the document, handling landscape/portrait orientation. @param pageIndex the index of the page @return PageFormat object containing the page's dimensions and orientation
3365 Retrieves the page number from an array. Returns -1 if not found or invalid type.
3366 Writes XML representation of FDF data to a provided Writer. @param output the Writer object for outputting XML data @throws IOException if an I/O error occurs while writing
3367 Prepares a PDF document for encryption using owner and user passwords, and sets encryption parameters. @param document the PDDocument to be encrypted @throws IOException if an I/O error occurs
3368 Creates a PDF annotation object based on the provided COSBase. @param base COSBase containing dictionary with annotation details @return PDAnnotation object corresponding to the subtype, or null if unsupported
3369 Draws an inline image at specified coordinates with original size. @param inlineImage the image to be drawn @param x horizontal coordinate for drawing @param y vertical coordinate for drawing @throws IOException if an error occurs during image processing
3370 Creates a cloudy rectangle and applies the effect to its coordinates. @param rd The original PDRectangle object @throws IOException If an I/O error occurs during processing
3371 Draws a cloud-like ellipse with specified dimensions. If intensity is zero or less, it draws a basic ellipse instead. @param leftOrig Left coordinate of the original ellipse @param bottomOrig Bottom coordinate of the original ellipse @param rightOrig Right coordinate of the original ellipse @param topOrig Top coordinate of the original ellipse @throws IOException If an I/O error occurs during drawing operations
3372 Retrieves all signature fields from the PDF document's acroform. @return List of PDSignatureField objects found in the document
3373 Refreshes the appearances of all terminal fields in the document. @throws IOException if an I/O error occurs during appearance construction
3374 Returns an iterator over all PDField objects in this document. @return Iterator over PDField instances
3375 Sets or clears the cache for fields based on the input flag. @param cache true to set, false to clear the field cache
3376 Retrieves a PDField object by its fully qualified name from cache or field tree. @param fullyQualifiedName the unique identifier for the field @return PDField object if found, otherwise null
3377 Creates and returns the appropriate PDColorSpace based on the input. @param colorSpace COSBase object representing the color space @param resources PDResources object for additional resources @param wasDefault boolean flag indicating if it's a default color space @return PDColorSpace object corresponding to the input @throws IOException if an error occurs during creation
3378 Evaluates a set of functions with the given input array and adjusts values to be within [0, 1]. @param input float array containing function inputs @return float array with evaluated function outputs, adjusted to [0, 1] range @throws IOException if there's an issue reading or processing functions
3379 Constructs PDIndexed object from COSArray. @param indexedArray the array containing indexed data @throws IOException if there is an issue with input/output operations
3380 Fetches an image with default settings. @return a BufferedImage object representing the fetched image @throws IOException if there is an error while fetching or reading the image
3381 Processes a page, sets rotation and size, and adjusts translation matrix for cropbox. @param page the PDPage object to process @throws IOException if an I/O error occurs
3382 Sets the stroking color for the PDF document and writes it to the output stream. @param color the PDColor object representing the new stroking color @throws IOException if an I/O error occurs while writing to the output stream
3383 Sets the non-stroking color for drawing operations, handling various color spaces and patterns. @param color PDColor object representing the desired color @throws IOException if there's an issue writing the color data
3384 Draws an image at specified coordinates with original size. @param image the PDImageXObject to be drawn @param x the horizontal coordinate for the top left corner of the image @param y the vertical coordinate for the top left corner of the image @throws IOException if the image cannot be read or drawn
3385 Fetches normal appearance content stream. No resources are included. @return PDAppearanceContentStream object or null if not found @throws IOException if there is an error reading the stream
3386 Opens a node if it's not already open, and increments node count.
3387 Closes an open node by switching its count. Does nothing if node is already closed.
3388 Imports a PDF page into the document, handling resources and properties.
3389 Creates and sets a template for the PDF structure using given PDPage. @param page The page to be added to the template document. @throws IOException If there is an error creating or adding the page to the template.
3390 Constructs a PDFPrintable object for printing the document. @param document PDDocument to be printed @param scaling Scaling options for the print @param showPageBorder Flag to display page border @param dpi Dots per inch resolution for the print @param center Flag to center the print on the page
3391 Constructs a new PDFPageable object with default settings. @param document the input PDDocument to be paginated
3392 Constructs a PDFPageable with specified document and orientation. @param document the source PDDocument @param orientation page orientation (Portrait or Landscape)
3393 Constructs a PDFPageable with specified document, orientation, and border display options. @param document the PDDocument to be paginated @param orientation page orientation (Portrait/Landscape) @param showPageBorder indicates whether to display page borders
3394 Constructs a PDFPageable object with specified parameters. @param document the PDDocument to be paginated @param orientation page orientation (portrait or landscape) @param showPageBorder whether to display page borders @param dpi resolution of the pages in DPI
3395 Embeds a PDType1 font into a PDF document and sets its properties. @param doc the PDF document @param dict the COS dictionary for the font @param pfbStream input stream of the PFB font file @param encoding the font's encoding, default is from FontBox if null
3396 Embeds TrueType font into PDF document with specified options. @param document the PDDocument to embed the font into @param dict the COSDictionary for the font @param ttf the TrueTypeFont to embed @param embedSubset whether to embed only a subset of the font @throws IOException if embedding is not permitted or TrueType collections are used with full embedding
3397 Creates a PDImageXObject from a file based on its extension. Supports JPG/JPEG, TIFF, GIF, BMP, and PNG formats. @param file The input file @param doc The document to which the image will be added @return A PDImageXObject instance for the given file @throws IOException If an error occurs while reading the file
3398 Creates an image object from a file based on its content. Supports JPEG, TIFF, BMP, GIF, and PNG formats. @param file the input file @param doc the document to which the image will be added @return PDImageXObject representing the created image @throws IOException if an I/O error occurs or the file type is not supported
3399 Initializes FDFAnnotationHighlight with a given Element and sets its name to SUBTYPE. @param element the Element to initialize the annotation highlight @throws IOException if there's an error initializing the annotation highlight
3400 Initializes a new FDFAnnotationSquiggly with the given Element and sets its name to a COS subtype. @param element the Element used for initialization @throws IOException if there is an issue during initialization
3401 Initializes a Strike Out Annotation for a given Element. @param element The Element to apply the strike out annotation on @throws IOException if there is an error during initialization
3402 Initializes an underline annotation for a given PDF element. @param element the PDF document's Element to be underlined @throws IOException if there is an error during initialization
3403 Loads a PDF document from a byte array with an optional password. @param input the byte array of the PDF file @param password the password for the PDF (or null if none) @return PDDocument object representing the loaded PDF @throws IOException if there is an error reading or decrypting the PDF
3404 Loads a PDF document from a File with an optional password. @param file the PDF file to load @param password the password for the PDF, or null if no password is required @return PDDocument object representing the loaded PDF @throws IOException if there's an error reading the file or loading the document
3405 Loads a PDF document from the given file using specified password and keystore. @param file The PDF file to load @param password Decryption password for the PDF @param keyStore Input stream of the keystore containing the private key @param alias Alias of the entry in the keystore @return Loaded PDDocument object @throws IOException If an I/O error occurs or file is not a valid PDF
3406 Sets visual signature properties for the document. @param visSignatureProperties object containing visible signature properties @throws IOException if there is an error setting the signature
3407 Builds and sets a visible signature for the PDF using PDFTemplateBuilder and PDFTemplateCreator. Throws IOException if there's an issue with building or setting the signature.
3408 Saves data to a file with the given name. @param fileName name of the file to save data to @throws IOException if an I/O error occurs during saving
3409 Imports optional content properties from source to target document. @param srcDoc the source PDF document @throws IOException if an I/O error occurs
3410 Initializes a PDVisibleSignDesigner with a specified document and image stream. @param document the PDF document to be signed @param imageStream input stream of the image for signing @param page the page number in the document where the signature will be placed
3411 Initializes sign designer with a PDF document and an image on the specified page. @param document PDDocument object to be modified @param image BufferedImage to be placed on the document @param page The page number where the sign will be placed
3412 Writes an XML document to the provided Writer stream. @param output Writer object for outputting XML content @throws IOException if there's a problem writing to the output stream
3413 Fetches and filters annotations based on a given filter. @param annotationFilter filters out unwanted annotations @return List of PDAnnotation objects that pass the filter @throws IOException if there's an error accessing the PDF data
3414 Fetches and returns a COSObjectable from the dictionary, handling both annotations and streams. @return COSObjectable object or null if not found or invalid
3415 Retrieves the annotation this annotation is in reply to, if any. @return PDAnnotation object or null if none exists @throws IOException if there's a problem accessing the data
3416 Fetches and returns the parent PDAnnotationMarkup object of this instance. If failure occurs or parent is not of type PDAnnotationMarkup, logs error and returns null.
3417 Creates a cloudy ellipse within the specified rectangle and finishes drawing. @param rd PDRectangle defining the boundaries of the ellipse @throws IOException if an I/O error occurs during drawing
3418 Retrieves a list of digital signatures from signature fields. @return List of PDSignature objects extracted from signature fields.
3419 Imports FDF data into the document fields. @param fdf FDFDocument containing field data to be imported @throws IOException if an I/O error occurs while importing
3420 Evaluates function for a single input value. @param inputValue the value to evaluate the function with @return an array of floats as result of the evaluation @throws IOException if there's an issue with input/output operations
3421 Evaluates function and converts the result to RGB. @param values input array for the function evaluation @return integer representing RGB value, may throw IOException
3422 Fetches and applies soft mask to non-stroking paint based on graphics state. @return Paint object after applying soft mask or throws IOException if error occurs
3423 Processes a single PDF page within specified range and bookmarks, clears & resizes character lists for new data. @param page PDPage object to be processed @throws IOException if an I/O error occurs
3424 Sets the stroking color for drawing operations in a PDF document. @param color PDColor object representing the desired stroke color @throws IOException if there is an error writing to the PDF document
3425 Sets the non-stroking color for drawing operations. @param color PDColor object representing the desired color @throws IOException if there is an error writing the color data
3426 Appends a form as a layer to the target page in PDF document. @param targetPage Page to append the form to @param form FormXObject to be appended @param transform Affine transformation for the form @param layerName Name of the optional content group (layer) @return Created PDOptionalContentGroup or throws exception if layer exists
3427 Shows a form if it's not hidden and content is rendered. @param form the PDFormXObject to be shown @throws IOException if an I/O error occurs
3428 Displays transparency group on provided graphics if content is rendered and not hidden. @param form the transparency group to display @param graphics the graphics context where the group will be shown @throws IOException if there's an issue handling the image data
3429 Handles the start of a marked content sequence, managing hidden OCGs based on properties. @param tag the COSName tag for the sequence @param properties the COSDictionary containing additional properties
3430 Constructs a new PDFPrintable object for printing the given PDDocument. @param document The PDF document to be printed @param scaling Scaling factor for the printout @param showPageBorder Whether to display page borders @param dpi Dots per inch resolution for the printout
3431 Constructs a PDType1Font object from an input stream and encoding, embedding it in the document. @param doc the PDF document @param pfbIn input stream containing PFB data @param encoding text encoding for the font @throws IOException if there's an error reading the input stream or creating the font
3432 Initializes a PDFont object with the given COSDictionary. Loads font descriptor and Unicode cmap. @param fontDictionary contains font information
3433 Embeds a Type2 CID font into the PDF document. @param document The PDF document to embed the font in @param dict Font dictionary for the new font @param ttf TrueTypeFont object to be embedded @param embedSubset Whether to embed only a subset of the font @param parent Parent Type 0 font (if any) @param vertical Whether the font is written vertically
3434 Embeds a TrueType font into a PDF document and sets its properties. @param document the target PDF document @param dict the COS dictionary for this font @param ttf the TrueTypeFont to embed @param encoding the text encoding to use
3435 Creates a PDImageXObject from a file. @param imagePath the path of the image file @param doc the PDF document to which the image will be added @return a PDImageXObject instance representing the image @throws IOException if an I/O error occurs while reading the file
3436 Constructs a FDFDictionary from an XML Element. @param fdfXML the input XML Element containing FDF data.
3437 Loads and returns a PDF document from given byte array. @param input byte array representing the PDF content @return PDDocument object representing the loaded PDF document @throws IOException if loading fails due to invalid input or I/O errors
3438 Deprecated. Loads a PDF document from a File with an optional password. @param file the input File object containing the PDF document @param password (optional) the password to decrypt the PDF @return PDDocument object representing the loaded PDF document @throws IOException if there is an error reading the File or processing the PDF
3439 Loads a PDF document from a given File. @param file the File object representing the PDF document @return PDDocument object containing the loaded PDF data @throws IOException if an error occurs while reading the file
3440 Imports a page from one PDF document as a form object in another, handling transformations and resources. @param sourceDoc The source PDF document @param page The page to be imported @return PDFormXObject representing the imported page as a form @throws IOException if there is an error reading from the source document
3441 Initializes PDVisibleSignDesigner with document source, image stream, and page number. Sets visible signature image input stream and calculates document page size. @param documentSource RandomAccessRead object for the document @param imageStream InputStream for the visible signature image @param page Page number to calculate size from @throws IOException If there is an error reading the streams or calculating page size
3442 Initializes PDVisibleSignDesigner with a document source, image, and page number. Sets the visible signature image and calculates document page size. @param documentSource source of the document @param image visible signature image @param page page number in the document @throws IOException if there's an error reading from the document source
3443 Saves XFDF data to a Writer and ensures the stream is closed, even in case of exceptions. @param output The Writer object to save the XFDF data to. @throws IOException If an I/O error occurs while writing or closing the Writer.
3444 Fetches all annotations without filtering. @return List of PDAnnotation objects or empty list if none found @throws IOException if the operation fails due to I/O errors
3445 Retrieves the last PDSignature from a list of signatures. @return Last PDSignature in the list or null if list is empty
3446 Saves incremental changes for external signing to an output stream. @param output the stream where the changes will be saved @return ExternalSigningSupport object for further operations or throws exception if document is not ready for signing
3447 Draws a glyph on the path using specified font and transformations, considering rendering mode. @param path the general path to draw on @param font the PDFont object used for drawing @param code the glyph code @param displacement vector for positioning @param at the affine transformation to apply @throws IOException if an I/O error occurs
3448 Processes a range of PDF pages, applying actions and updating bookmark page numbers. @param pages the tree of PDF pages to be processed @throws IOException if an I/O error occurs during processing
3449 Initializes and customizes the appearance of a widget based on provided characteristics. @param widget The annotation widget to be styled @param appearanceCharacteristics Characteristics that define the appearance (e.g., color) @param appearanceStream Stream for writing the appearance data
3450 Writes the text to a PDF content stream with specified font and color. @param contents PDAppearanceContentStream to write to @param zeroFontSize fallback size if current font size is 0
3451 Constructs a PDFPrintable object for printing. @param document PDDocument to print @param scaling Scaling options for the print @param showPageBorder Boolean flag to display page border
3452 Constructs a PDType1Font object from an input stream. @param doc the document to which the font will be added @param pfbIn the input stream containing PFB data for the font @throws IOException if there is an error reading from the input stream
3453 Constructs a PDSimpleFont object from a COSDictionary. @param fontDictionary contains font data used for construction
3454 Constructs a Type 0 font from the given dictionary. Throws exception if required data is missing or invalid. @param fontDictionary COSDictionary containing font information @throws IOException if descendant font data is missing, empty, or of incorrect type in the dictionary
3455 Initializes a PDType0Font object with specified properties. @param document PDF document @param ttf TrueType font @param embedSubset true if subset embedding is required, false otherwise @param closeTTF true to close TTF after initialization, false otherwise @param vertical true for vertical text, false for horizontal
3456 Initializes a TrueType font within a PDF document, with optional embedding and closing of the source. @param document target PDF document @param ttf TrueTypeFont to be initialized @param encoding text encoding to be used @param closeTTF if true, closes the TTF data source after initialization
3457 Initializes a FDFCatalog with an Element and sets its FDF dictionary. @param element the XML Element to initialize the FDFCatalog from
3458 Deprecated. Use Loader.loadPDF(File) instead. Loads a PDF document from a file. @param file the input File object representing the PDF document @return PDDocument object containing the loaded document @throws IOException if an I/O error occurs
3459 Imports a specific page from a PDF document as a form object. @param sourceDoc the source PDF document @param pageNumber the page number to be imported (0-indexed) @return PDFormXObject representing the imported page or throws IOException if an error occurs
3460 Saves XFDF data to a specified file in UTF-8 encoding. @param fileName the file where XFDF data will be saved @throws IOException if an I/O error occurs
3461 Updates structure parent entries for a given PDPage and offset. @param page the PDPage to update @param structParentOffset the offset value to apply
3462 Clones structure tree from source to destination document for preserving PDF structure and accessibility. @param destinationDocument the document to which the structure tree will be cloned @throws IOException if there's an issue with input/output operations
3463 Processes and clones annotations from a given page, fixing any issues with destinations or links. @param imported the PDPage object containing the annotations to be processed @throws IOException if there is an error reading or writing COS objects
3464 Adds a digital signature to the PDF document. @param sigObject The PDSignature object representing the signature @param signatureInterface Interface for signing operations @param options Options for the signature appearance and behavior @throws IOException if an I/O error occurs during the operation
3465 Fills and strokes a path using the specified winding rule
3466 Writes text from a PDDocument to an output stream, with optional formatting. @param doc the PDF document containing the text @param outputStream the writer to which the text is written @throws IOException if there's an error reading from the doc or writing to the outputStream
3467 Inserts a generated appearance stream for a widget into the output stream, considering font, size, and alignment settings. @param widget The annotation widget to generate the appearance for @param appearanceStream The appearance stream to be inserted @param output The output stream where the appearance stream is written to
3468 Draws a page with specified Graphics2D and PDRectangle. @param g Graphics2D object for drawing @param pageSize PDRectangle specifying the size of the page @throws IOException if an I/O error occurs
3469 Constructs a PDFPrintable object with specified document and scaling. @param document PDDocument to be printed @param scaling Scaling factor for the print job
3470 Retrieves the default font for PDF documents. If not already set, initializes it as Helvetica. @return The default PDFont object used in documents
3471 Constructs a PDTrueTypeFont object from a given COSDictionary. @param fontDictionary dictionary containing font data @throws IOException if there's an issue reading the embedded TrueTypeFont
3472 Constructs a PDType1CFont from the given COSDictionary. @param fontDictionary contains font data @throws IOException if there's an issue reading the embedded Type1C font
3473 Constructs a PDType1Font from a COSDictionary. Supports Type1C and PFB formats. @param fontDictionary the dictionary containing font data @throws IOException if there's an issue reading or parsing the font data
3474 Constructs a PDType3Font object from a COS dictionary and a resource cache. @param fontDictionary contains font data @param resourceCache provides access to external resources @throws IOException if there's an issue reading the font encoding
3475 Loads a Type0 font from the given document and data source. @param doc The PDF document to load the font into. @param randomAccessRead Data source for the font data. @param embedSubset Whether to embed font subsets. @param vertical Font orientation (true for vertical). @return A PDType0Font object. @throws IOException if an error occurs during reading or parsing.
3476 Loads a Type 0 font into the PDF document. @param doc the PDF document @param ttf the TrueType font to load @param embedSubset whether to embed subset of characters @return loaded PDType0Font object @throws IOException if an I/O error occurs
3477 Loads a vertical, Type 0 font into the document. @param doc the PDF document @param ttf the TrueType font to load @param embedSubset whether to embed subsets of the font @return PDType0Font object for use in the document @throws IOException if an I/O error occurs
3478 Loads a TrueType font into a PDF document. @param doc the target PDF document @param ttf the TrueType font to load @param encoding text encoding for the font @return PDTrueTypeFont object loaded in the document @throws IOException if an I/O error occurs
3479 Loads a TrueType font from input stream into a PDF document. @param doc PDF document to load the font into @param randomAccessRead Input stream of the font file @param encoding Character encoding of the font @return PDTrueTypeFont object for use in the PDF document @throws IOException if there is an error reading from input stream
3480 Initializes an FDFDocument object from a given Document, validating the root node is 'xfdf'. @param doc The source XML document containing FDF data. @throws IOException If the root element of the document is not 'xfdf'.
3481 Initializes PDVisibleSignDesigner with a file, input stream, and page. Sets the visible signature image from the input stream and calculates the document page size. @param filename name of the document file @param imageStream input stream for the signature image @param page number of the document page to use @throws IOException if there is an issue reading the file or image stream
3482 Initializes PDVisibleSignDesigner with a file, image, and page number. Sets the visible signature image and calculates the page size from the file. @param filename name of the document file @param image visible signature image to be set @param page page number for which to calculate the size
3483 Saves XFDF data to a file. @param fileName name of the file to save to @throws IOException if an I/O error occurs
3484 Processes a PDF page, imports it into the document, and handles its resources and annotations. @param page The PDPage object to process @throws IOException if there is an issue with input/output operations
3485 Adds a digital signature to an object with specified options. @param sigObject the PDSignature object to be added @param options SignatureOptions for customizing the addition process @throws IOException if there is an issue during the addition process
3486 Adds a digital signature using provided objects and default options. @param sigObject the signature object to be added @param signatureInterface interface for handling the signature @throws IOException if an I/O error occurs during addition
3487 Merges source PDF into destination PDF by appending pages. Handles various document properties and structures. @param destination the PDDocument to append to @param source the PDDocument to append from @throws IOException if there's an error during merging
3488 Converts PNG image data to a PDImageXObject. @param doc PDF document object @param imageData byte array containing the PNG image data @return PDImageXObject or null if conversion fails due to invalid data @throws IOException if an I/O error occurs during conversion
3489 Extracts text from a PDF document and returns it as a string. @param doc the PDDocument object containing the PDF data @return a String representation of the document's text @throws IOException if an I/O error occurs during extraction
3490 Renders a specified page of a PDF as an image with given scale and type. @param pageIndex index of the page to render @param scale rendering scale factor @param imageType desired output image type @return BufferedImage representation of the rendered page @throws IOException if page cannot be accessed or image size exceeds maximum limit
3491 Renders a page to graphics using provided parameters and settings. @param pageIndex index of the page to render @param graphics Graphics2D object for rendering @param scaleX X-axis scaling factor @param scaleY Y-axis scaling factor @param destination RenderDestination object
3492 Constructs a PDFPrintable with default scaling option SHRINK_TO_FIT for the given PDDocument. @param document the PDDocument to be printed
3493 Displays given text using current graphics state and font settings. @param string byte array representing text to display @throws IOException if there is an issue reading from the input stream
3494 Constructs a PDMMType1Font object from a COSDictionary. @param fontDictionary contains font data @throws IOException if there's an error reading the dictionary
3495 Constructs a PDType3Font object from a COS dictionary. @param fontDictionary contains font parameters @throws IOException if there's an error reading the font dictionary
3496 Loads a Type 0 font from specified file into the PDF document. @param doc the target PDF document @param file the source font file @return PDType0Font object representing the loaded font @throws IOException if there is an error reading the file or processing the font
3497 Loads a Type 0 font from an input stream into a PDDocument. @param doc the target PDDocument @param input the source InputStream @param embedSubset whether to embed the subset of characters used in the document @return loaded PDType0Font object @throws IOException if there is an error reading from the input stream
3498 Loads a vertical type 0 font from a file into the specified PDF document. @param doc the target PDF document @param file the source font file @return loaded PDType0Font object @throws IOException if an I/O error occurs during loading
3499 Loads a vertical Type 0 font from an input stream into a PDF document. @param doc the target PDF document @param input the input stream containing the font data @return a PDType0Font object for the loaded font @throws IOException if there's an error reading from the input stream or creating the font
3500 Loads a vertical Type 0 font from an InputStream into a PDDocument. @param doc the PDF document to which the font will be added @param input the source of the font data @param embedSubset whether to embed only a subset of glyphs used in the text @return the loaded PDType0Font object @throws IOException if there is an error reading from the InputStream
3501 Loads a TrueType font from a file into the specified document. @param doc the PDF document to load the font into @param file the input TrueType font file @param encoding the character encoding of the font @return PDTrueTypeFont object for use in the document @throws IOException if there is an error reading from the file
3502 Loads a TrueType font from an InputStream into a PDF document. @param doc the PDF document to load the font into @param input the InputStream containing the font data @param encoding the text encoding for the font @return a PDTrueTypeFont object loaded with the specified parameters @throws IOException if there is an error reading from the input stream
3503 Loads an XFDF document from the given InputStream. @param input stream containing the XFDF data @return a loaded FDFDocument object @throws IOException if there's an issue reading from the input stream or parsing the XML
3504 Processes specific pages of a document based on start and end page numbers. @throws IOException if an I/O error occurs while processing the pages
3505 Adds a signature to the document using default options. @param sigObject The PDSignature object containing the signature data @throws IOException if an input/output error occurs while adding the signature
3506 Flattens the form if it's not a dynamic XFA form. @throws IOException if an I/O error occurs during processing
3507 Creates PDImageXObject from byte array based on the detected file type. @param document the PDDocument @param byteArray the input data @param name the image name @param customFactory a factory for creating images, can be null @return PDImageXObject instance or throws IllegalArgumentException if unsupported format @throws IOException if an I/O error occurs
3508 Renders an image of a specific page with given scale and type to its destination. @param pageIndex index of the page to render @param scale rendering scale factor @param imageType type of the image (e.g., JPEG, PNG) @return BufferedImage object representing the rendered image @throws IOException if an I/O error occurs during rendering
3509 Renders a specific page to the given Graphics2D context with specified scaling factors. @param pageIndex index of the page to render @param graphics Graphics2D context for rendering @param scaleX horizontal scaling factor @param scaleY vertical scaling factor
3510 Displays text represented as a byte array. @param string byte array representing the text to be displayed @throws IOException if an I/O error occurs during displaying
3511 Processes and displays text strings from a COSArray, handling displacement calculations based on font properties. @param array the input COSArray containing text and positioning information
3512 Creates a PDFont object based on the provided COSDictionary and ResourceCache. @param dictionary contains the font data @param resourceCache for caching resources @return a specific type of PDFont object based on the font subtype in the dictionary @throws IOException if there's an issue with creating the font or invalid subtypes are found
3513 Loads a Type 0 font from an input stream into a PDF document. @param doc the target PDF document @param input the input stream containing the font data @return the loaded PDType0Font object @throws IOException if there is an error reading from the input stream or processing the font data
3514 Loads an XFDF document from a file. @param filename the name of the file to load @return an FDFDocument object representing the loaded XFDF data @throws IOException if there is an error reading the file
3515 Loads an XFDF document from a given file. @param file the source of the XFDF document @return FDFDocument object representing the loaded data @throws IOException if there's an error reading the file
3516 Splits a PDF document into multiple documents, each containing one page. @param document the source PDDocument to split @return List of PDDocument objects, each representing a single-page document @throws IOException if an I/O error occurs during splitting
3517 Creates a PDImageXObject from a byte array. @param document the PDDocument to which the image object belongs @param byteArray the input data for the image @param name the name of the image object @return a new PDImageXObject instance @throws IOException if an I/O error occurs
3518 Renders an image from a specified page with given scale and returns it as BufferedImage. @param pageIndex index of the page to render @param scale scale factor for rendering the image @return BufferedImage object representing the rendered image @throws IOException if an I/O error occurs while rendering the image
3519 Renders a specific image page with specified DPI (dots per inch). @param pageIndex index of the page to render @param dpi desired resolution in dots per inch @return BufferedImage object representing the rendered image @throws IOException if an input/output error occurs while rendering
3520 Renders an image with specified DPI and page index. @param pageIndex index of the page to render @param dpi desired DPI for rendering @param imageType type of the image to be rendered @return BufferedImage object representing the rendered image @throws IOException if an error occurs during rendering
3521 Renders a specified page to the given graphics context with scaling. @param pageIndex index of the page to be rendered @param graphics Graphics2D object for rendering @param scale scaling factor for rendering
3522 Fetches a font by name from cache or creates a new one. @param name COSName of the font @return PDFont object or null if not found/created @throws IOException if there's an error accessing the font data
3523 Creates a PDF font from a COSDictionary. @param dictionary contains font data @return a PDFFont object @throws IOException if an error occurs during creation
3524 Extracts a specific range of pages from a PDF document. @return PDDocument containing the extracted pages or an empty one if invalid range @throws IOException if there's an issue reading the source document
3525 Renders an image from a specific page. @param pageIndex index of the page to render @return BufferedImage object containing the rendered image @throws IOException if there is an error reading or rendering the image
3526 Renders a specific page to a Graphics2D object. @param pageIndex the index of the page to be rendered @param graphics the Graphics2D object to render onto @throws IOException if an I/O error occurs during rendering
3527 Copies necessary font resources to the appearance stream. @param appearanceStream target PDAppearanceStream @throws IOException if an I/O error occurs during copying
3528 Fetches a PDF font based on the current settings. @return PDFont object or null if not found or invalid type @throws IOException if error occurs during I/O operations
3529 Sets and modifies the content of a widget's appearance stream. @param widget annotation widget to modify @param appearanceStream stream containing visual representation data @throws IOException if there is an error reading or writing the stream
3530 Copies graphic state properties from this object to the provided graphics state. @param gs The graphics state to copy into @throws IOException if an error occurs during I/O operations
3531 Processes appearance string operators and their arguments from a byte array content. @param content the byte array containing PDF stream data @throws IOException if an I/O error occurs during parsing
3532 Sets the default appearance string and resources for a PDF document. @param defaultAppearance COSString containing the default appearance settings @param defaultResources PDResources object containing the default resources @throws IOException if there's an error processing the appearance string operators
3533 Fetches and returns the default appearance string. @return PDDefaultAppearanceString object containing DA data and default resources @throws IOException if an error occurs during fetching or conversion of data
3534 Sets and formats the appearance value for a field in PDF document.
3535 Initializes helper with a text field and sets its default appearance string. @param field PDVariableText object representing the text field @throws IOException if there's an issue processing the default appearance string
