1 Constructs a PDExtendedGraphicsState with a COSDictionary. @param dictionary The COSDictionary to initialize from.
2 Creates a PlainText object from a string. @param textValue The text to be parsed into paragraphs.
3 Constructs a PDActionImportData object from a COSDictionary.
4 Retrieves a COSObject associated with the given key. @param key The COSName key to look up. @return The COSObject or null if not found.
5 Constructs a PDActionURI object from a COSDictionary.
6 Constructs a PDActionSubmitForm with the given COSDictionary.
7 Constructs a PDActionSound object from a COSDictionary.
8 Constructs a PDActionHide object from a COSDictionary.
9 Creates a PDActionMovie object from a COSDictionary. @param a The COSDictionary containing movie data.
10 Constructs a PDActionLaunch object from a COSDictionary.
11 Constructs a PDActionResetForm from a COSDictionary. @param a The COSDictionary containing form data.
12 Constructs a PDActionRemoteGoTo object from a COSDictionary.
13 Constructs a PDActionGoTo object from a COSDictionary.
14 Constructs a PDActionEmbeddedGoTo object from a COSDictionary.
15 Constructs a PDActionNamed object from a COSDictionary.
16 Constructs a PDActionThread with the given COSDictionary.
17 Constructs a PDActionJavaScript object from a COSDictionary.
18 Creates an InputStream for reading data from the stream. Returns a RandomAccessInputStream or throws IOException.
19 Finds an ImageReader for the given format name. @param formatName image format name @param errorCause error cause if reader is missing @throws MissingImageReaderException if no reader is found
20 Finds an ImageReader that can read raster data for the given format. @param formatName image format name @param errorCause error cause string @throws MissingImageReaderException if no suitable reader is found
21 Retrieves an Operator object based on the provided operator string.
22 Returns a string representation of this COSArrayList.
23 Checks if an edge is approximately a line segment. Uses control points to evaluate edge equation values.
24 Returns the X coordinate of the lower-left corner of the rectangle.
25 Returns the y-coordinate of the lower-left corner of the rectangle.
26 Returns the x-coordinate of the rectangle's upper-right corner.
27 Returns the Y coordinate of the rectangle's upper-right corner.
28 Returns the font size from the font setting. Returns a float representing the font size.
29 Returns the red color component as a float.
30 Returns the G value as a float from the values list.
31 Returns the value of the 'b' parameter as a float.
32 Returns the X coordinate as a float from the values list.
33 Returns the Y coordinate as a float.
34 Returns the stroking color space from the graphics state.
35 Sets the stroking color using the provided PDColor object.
36 Returns the current stroking color from the graphics state.
37 Returns the Encoding instance for the given COS name. @param name COS name to match for encoding. @return Encoding instance or null if not found.
38 Creates a PDSoftMask from a COSBase dictionary. @param dictionary COSBase object representing the mask @param resourceCache Resource cache for mask creation @return PDSoftMask object or null if invalid input
39 Returns the index of the first visible widget, or -1 if none.
40 Parses PNG chunks from image data and returns a state object. @param imageData byte array containing PNG image data @return PNGConverterState object or null if parsing fails
41 Adds a source file. @param source Path to the source file to add. @throws FileNotFoundException if the file does not exist.
42 Parses the PDF trailer dictionary from the input stream. Resolves the trailer and sets it in the xref trailer resolver.
43 Returns the Z coordinate as a float.
44 Retrieves a COS object from the object pool. @param key The key used to identify the object. @return The COSBase object associated with the key.
45 Returns the text line matrix from the current graphics state.
46 Sets the text line matrix using the graphics state. @param value The new text line matrix to set.
47 Returns the current text matrix from the graphics state.
48 Transforms the width based on the current transformation matrix. @param width The width to transform. @return The transformed width.
49 Returns the non-stroking color from the graphics state.
50 Sets the non-stroking color using the provided PDColor. @param color The PDColor to set as the non-stroking color.
51 Returns the color space from the graphics state.
52 Executes a sequence of instructions within the given execution context.
53 Gets an integer at the given index, returns defaultValue if not found.
54 Gets the revision number at the specified index. @param index index of the revision number to retrieve @return the revision number at the given index
55 Writes a COSBoolean object to the output stream, followed by a space. @param output Output stream to write to @param cosBoolean COSBoolean object to write
56 Creates a deep copy of the Matrix object. Returns a new Matrix with a cloned single array.
57 Constructs a PDRectlinearMeasureDictionary from a COSDictionary.
58 Constructs a PDTerminalField with given parameters. @param acroForm The PDF acroform. @param field The COS dictionary representing the field. @param parent The parent non-terminal field.
59 Constructs a PDNonTerminalField with parent and field. @param acroForm The parent PDAcroForm. @param field The COSDictionary representing the field. @param parent The parent PDNonTerminalField.
60 Notifies listeners if the entry has changed between old/new.
61 Returns the number of key-value mappings in this map.
62 Writes a string to the output stream, encoding as US-ASCII.
63 Creates a translation matrix with the given x and y offsets.
64 Returns the number of objects in this collection.
65 Retrieves an object from the list at the specified index. @param index Index of the object to retrieve. @return The object at the given index.
66 Creates and returns a PDFieldTree representing this form's fields.
67 Gets name at index, returns default if index is out of bounds.
68 Finds the index of the object in the COS list. @param object COSBase object to find. Returns -1 if not found.
69 Retrieves a list of filters from COS data. Returns an empty list if no filters are found.
70 Creates a scale matrix with specified x and y scaling factors.
71 Retrieves filters from the stream as a list of COSName objects.
72 Retrieves file filters as a list of strings. Returns empty list if no filters are present.
73 Scales the vector by a factor. @param sxy Scaling factor. @return New vector with scaled components.
74 Transforms a vector using a predefined matrix. @param vector The vector to transform. @return The transformed vector.
75 Creates a rotation matrix with specified angle and translation. @param theta Rotation angle in radians. @param tx Translation along x-axis. @param ty Translation along y-axis. @return Rotation matrix.
76 Evaluates the function using exponential interpolation. @param input Input array containing x value for exponent. @return Float array of evaluated function values.
77 Sets the text matrix to the provided matrix. @param value The new text matrix to set.
78 Compares this entry with another based on referenced keys. Returns -1, 0, or 1 based on key comparison.
79 Returns the number of recipients in the dictionary.
80 Initializes a Type7ShadingPaint with a shading and matrix.
81 Scales the single array by sx and sy. @param sx scaling factor for x coordinates @param sy scaling factor for y coordinates
82 Multiplies two matrices. @param other The matrix to multiply by. @return The resulting matrix.
83 Creates a SecurityHandler for the given ProtectionPolicy. @param policy The ProtectionPolicy to create a handler for. @return SecurityHandler instance or null if no handler exists.
84 Creates a SecurityHandler for the given filter name. @param name Filter name; returns null if no handler exists.
85 Sets stroking color if provided color has components. @param color PDColor object, null if no color is needed. @return True if color was set, false otherwise.
86 Sets the non-stroking color if the provided color is valid. @param color The color to set; null or invalid color returns false. @return True if the color was set, false otherwise.
87 Translates the single transformation matrix by tx and ty. @param tx Translation amount on the x-axis. @param ty Translation amount on the y-axis.
88 Finds a valid font name, trying alternatives and Unicode names. @param name The name to search for. @return Font name or ".notdef" if not found.
89 Initializes the CMYK color profile and flags. Throws IOException if profile loading fails.
90 Applies a mask to an image, handling scaling and alpha blending. @param image The image to apply the mask to. @param mask The mask image.
91 Initializes a CubicBezierCurve with control points and level. @param ctrlPnts Control points for the curve. @param l The level of the curve.
92 Checks if a point is contained within the polygon. @param p the point to check @return true if the point is contained, false otherwise
93 Calculates color at a point based on the specified degree. @param p Point at which to calculate the color. @return float[] Color at the given point.
94 Intersects the current path with the provided path. @param path The GeneralPath to intersect with.
95 Draws a tiling pattern using provided parameters, restoring state after.
96 Intersects the current path with the given area. @param area The Area object to intersect with.
97 Sets the graphics clip to the current clipping path or an empty rectangle.
98 Returns name or ".notdef" if not found in font. Tries unicode name if original name is not found.
99 Inserts a diacritic character at the given position. @param i index to insert diacritic @param diacritic the diacritic to insert
100 Converts a code to a glyph ID, handling various encodings. @param code The code to convert. @return The corresponding glyph ID.
101 Creates a GlyphList, loading data from input stream. @param input Input stream containing glyph data. @param numberOfEntries Initial capacity for hashmaps.
102 Initializes a line with two points and two colors. @param p0 Start point of the line. @param p1 End point of the line. @param c0 Color at the start point. @param c1 Color at the end point.
103 Normalizes a word, handling specific Unicode ranges and forms.
104 Initializes a SoftMask with paint, mask, bbox, backdrop color, and transfer function.
105 Removes a backdrop from a group image. @param backdrop Backdrop image to remove. @param offsetX X offset for backdrop. @param offsetY Y offset for backdrop.
106 Constructs a GlyphList, copying from another and loading from input. @param glyphList Source GlyphList to copy from. @param input Input stream to load additional glyph data.
107 Concatenates the input matrix with the 'single' array. Updates 'single' with the result of the multiplication.
108 Parses an XML document from an input stream. @param is Input stream containing the XML document. @return Parsed Document object. @throws IOException if an I/O error occurs.
109 Writes a COSInteger object to the output stream, followed by a space. @param output The output stream to write to. @param cosInteger The COSInteger object to write.
110 Returns the horizontal scaling factor from the text matrix.
111 Returns the vertical scaling factor from the text matrix.
112 Creates a raw OutputStream for writing data. Returns FilterOutputStream; throws IOException.
113 Creates a COSWriter with an output stream and compression parameters.
114 Initializes a COSWriter with an output stream and input data.
115 Converts byte array to String, handling UTF-16 or PDFDocEncoding.
116 Creates a COSString. @param text The string to encode. @param forceHex Whether to force hex encoding.
117 Returns a COSInteger for the given value, caching within range. @param val The integer value. @return A COSInteger object.
118 Writes the FDF document to the output stream. @param doc The FDF document to write. @throws IOException if an I/O error occurs.
119 Checks if the font is a Standard 14 font. Returns true if it's not embedded and name matches.
120 Initializes LayerUtility with a PDF document and a PDFCloneUtility. @param targetDoc The PDF document to operate on.
121 Gets the recipient string at the specified index. @param i index of the recipient string @return COSString object at the given index
122 Gets the direction value. Returns 0 if not found.
123 Returns a sorted set of metadata keys.
124 Retrieves a list of attribute names from the COS object. Returns a List<String> of attribute names.
125 Copies specified trailer dictionary keys to the stream. Filters keys: INFO, ROOT, ENCRYPT, ID, PREV.
126 Constructs a COSDictionary, copying contents from another dictionary.
127 Checks if a COSDictionary represents info data. Returns true if it contains info-related keys.
128 Checks if the dictionary contains width information.
129 Checks if the dictionary contains the MISSING_WIDTH key.
130 Checks if the dictionary contains the XFA key. @return True if XFA key exists, false otherwise.
131 Returns a string representation of this COSFloat object.
132 Writes formatted string to the output stream as a PDF. @param output Output stream to write the PDF data to.
133 Writes a COS array to the output stream. @param output Output stream to write to. @param cosArray COS array to write.
134 Creates a new COSIncrement object using the updateInfo. @return A new COSIncrement instance.
135 Constructs a DefaultResourceCache with caching enabled.
136 Reads up to {@code len} bytes from this stream into {@code data}. @param data buffer to read into, offset is the starting position @param offset offset into data @param len maximum number of bytes to read @return number of bytes read
137 Reads object numbers from source. @return Map of object numbers, or null on error.
138 Parses all objects from the PDF source. @return Map of COSObjectKey to COSBase representing parsed objects. @throws IOException if an I/O error occurs during parsing.
139 Creates a PDPageFitWidthDestination object from a COS array. @param arr The COS array containing destination parameters.
140 Constructs a PDPageFitRectangleDestination from a COS array.
141 Calculates a final key by combining encryption key, object/gen numbers, and digests. @param objectNumber Object number to incorporate. @param genNumber Generation number to incorporate.
142 Creates a PDPageFitHeightDestination object from a COS array.
143 Creates a PDPageFitDestination object from a COS array. @param arr The COS array containing the destination parameters.
144 Creates an AppearanceContentStream from an AppearanceStream. @param appearance The source AppearanceStream. @param outputStream Output stream for writing content.
145 Parses a float string, handling PDFBox-specific formatting issues. @param aFloat The float string to parse. @throws IOException if parsing fails.
146 Creates a content stream for a page, using a provided appearance. @param doc The document. @param appearance The appearance stream. @param outputStream The output stream.
147 Transforms a point using the current graphics state. @param x x-coordinate of the point @param y y-coordinate of the point @return Transformed Point2D.Float object
148 Creates a paint context, applying pattern scaling. @param cm ColorModel, device/user bounds, transform, hints @return PaintContext object
149 Parses a COS object from the source at the given object number. @param objectNumber The object number to parse. @return The parsed COSBase object or null if not found.
150 Creates a PDFStreamParser from the given byte array. @param bytes The byte array representing the PDF stream.
151 Creates a PDFStreamParser from a PDContentStream. @param pdContentstream The content stream to parse.
152 Creates a Type1Encoding from a FontBox encoding. @param encoding FontBox encoding to convert @return Type1Encoding populated from the given encoding
153 Initializes MacOSRomanEncoding by iterating through the encoding table.
154 Constructs a PDPageXYZDestination from a COSArray. @param arr The COSArray containing destination data.
155 Retrieves a COSBase object by firstKey, or secondKey if firstKey is null.
156 Reads the next byte from the decoded data. Returns -1 if end of file is reached.
157 Reads up to 'length' bytes from the input stream into 'data'. @param data buffer to read into, offset start index, length num bytes @return Number of bytes actually read, or -1 if EOF.
158 Reads an image from an input stream and sets the image. @param stream Input stream containing the image data. @throws IOException if an I/O error occurs.
159 Encodes input data using a code table, writing to the output stream. @param rawData Input stream containing data to encode. @param encoded Output stream to write encoded data. @param parameters COSDictionary containing encoding parameters. @throws IOException if an I/O error occurs.
160 Selects the best data row to write based on compression estimates. @return byte[] representing the chosen data row.
161 Returns RenderState for given COSName, or null if null.
162 Returns the BaseState for the given COSName. @param state COSName representing the state; null defaults to ON.
163 Initializes a Type6ShadingPaint with a shading and matrix.
164 Constructs a PDSoftMask with a COSDictionary. @param dictionary The COSDictionary containing mask data.
165 Initializes a Type4ShadingPaint with a shading and matrix.
166 Adds a text position to the content. @param text The text position to add.
167 Adds a marked content object to the document's contents. @param markedContent The content to add.
168 Sets the print permission. Only applies if not in read-only mode.
169 Sets whether modifications are allowed. Only applies if not read-only.
170 Sets the content extraction permission. @param allowExtraction True to allow extraction, false otherwise.
171 Sets the permission to modify annotations if not in read-only mode.
172 Adds an XObject to the document contents. @param xobject The XObject to add.
173 Sets the permission to fill in the form if not read-only. @param allowFillingInForm True to allow filling, false otherwise.
174 Retrieves the highest XRef object number from the object pool.
175 Applies Gsub rules, encodes glyph IDs, and writes to output. @param gsubWorker Gsub worker for applying transforms @param out Output stream to write encoded glyph IDs @param font Font object for encoding @param word Word to process @return List of glyph IDs after Gsub transforms
176 Constructs a PDDocument with a COSDocument, source, and permission.
177 Constructs a FDFDocument from a COSDocument and source. @param doc The COSDocument. @param source The RandomAccessRead source.
178 Returns a string representation of this FunctionType2 object.
179 Sets the extract for accessibility permission, if not read-only.
180 Sets the faithful print permission if not in read-only mode. @param canPrintFaithful flag to enable/disable faithful printing
181 Returns a standard Adobe Glyph List.
182 Creates a PDColor with given components, pattern name, and color space.
183 Sets the ability to assemble a document, if not in read-only mode. @param allowAssembly True to allow assembly, false otherwise.
184 Checks if the print permission bit is enabled.
185 Checks if modification permission is enabled. Returns true if MODIFICATION_BIT is set, false otherwise.
186 Checks if content extraction is permitted. Returns true if the extraction bit is set.
187 Checks if the permission to modify annotations is enabled.
188 Checks if the user has permission to fill in the form.
189 Checks if accessibility extraction is permitted. Returns true if the extraction permission bit is set.
190 Checks if the user has permission to assemble a document.
191 Checks if the faithful print permission bit is enabled.
192 Sets the key, validates length, and mixes it with the salt.
193 Checks if a codepoint is prohibited based on various conditions. @param codepoint The integer representing a Unicode codepoint. @return True if the codepoint is prohibited, false otherwise.
194 Computes the version number based on key length and policy.
195 Converts a code point to a CID value using the parent's CMap. @param code The code point to convert. @return The corresponding CID value.
196 Writes a byte to the output stream after XORing with salt. @param aByte the byte to write @param output the output stream to write to
197 Writes an indirect object reference to the output stream. @param output Output stream to write to @param indirectReference Reference object to write
198 Checks if compression is enabled based on configuration. @return True if compression is enabled, false otherwise.
199 Checks if the object needs to be updated based on its state. @return True if the object needs updating, false otherwise.
200 Checks if this COSInteger is equal to another COSInteger. @param o The object to compare to. @return True if equal, false otherwise.
201 Creates a COSObjectKey with given number, generation, and index. @param num Object number. @param gen Generation number. @param index Stream index.
202 Checks if updates are currently being accepted. Returns true if originDocumentState accepts updates.
203 Writes a byte to the buffer, transforms, and writes to the output.
204 Flushes the internal buffer to the output stream.
205 Calculates and returns the direction based on the text matrix. @return Direction in degrees (0, 90, 180, or 270).
206 Decodes a predictor row based on the predictor type. @param predictor predictor type @param colors color count @param bitsPerComponent bits per component
207 Sets the bounding box for the PDF object. @param bbox The PDRectangle object representing the bbox.
208 Decodes a hexadecimal string into a byte array. Returns null if decoding fails.
209 Closes resources, ensuring proper error handling and logging.
210 Closes the document and associated I/O streams, logging exceptions.
211 Converts a Java Boolean to a COSBoolean. @param value Java Boolean to convert @return COSBoolean representation of the input value
212 Creates a new PDMarkedContent object. @param tag The tag for the marked content. @param properties Dictionary of properties.
213 Constructs a Type5ShadingPaint with the given shading and matrix.
214 Returns the type name, which is "Pattern".
215 Returns the type name as a COSName.SHADING.
216 Returns the default value as a string, or "" if not a COSName.
217 Sets the value to "Off", effectively unchecking a state.
218 Adds an XReferenceEntry to the list of XRef entries. @param entry The XReferenceEntry to add.
219 Constructs a PDXObject with a stream and subtype. @param stream The underlying stream object. @param subtype The subtype of the object.
220 Finds the startxref offset by reading and parsing the trailer. @return Offset of the startxref marker. @throws IOException if trailer parsing fails.
221 Reads stream content until "endstream" is found. Returns the length of the filtered content.
222 Checks if the next character is a space or return.
223 Adds an XReferenceEntry if its key's number isn't already present.
224 Returns the numeric value of the first column. Uses getType() to get the value.
225 Returns the value of the third column. Delegates to the referenced key's generation.
226 Returns the Xref table from the Xref trailer resolver.
227 Returns a string representation of the FreeReference object.
228 Returns the value of the third column. Delegates to the referenced key's generation.
229 Returns a string representation of the object.
230 Returns the value of the second column. Retrieves the number from the parent key.
231 Returns the third column value, which is the object stream index.
232 Returns a string representation of this ObjectStreamEntry.
233 Writes a byte array to the output stream. @param b The byte array to write. @param off Offset from where to start writing. @param len Number of bytes to write.
234 Writes a byte to the output stream. Increments the position.
235 Writes an end-of-line character if not already on a new line.
236 Returns the value of the second column as a long. It's equivalent to the byte offset.
237 Returns the COS object, either from functionStream or functionDictionary.
238 Finds offsets of XRef streams using a breadth-first search. @return List of Long representing offsets of XRef streams.
239 Finds the last EOF marker in the source, handling potential errors. @return Position of the last EOF marker, or Long.MAX_VALUE if none.
240 Returns the COS object associated with this stream.
241 Returns the metadata stream from the COS object. Returns a COSStream object.
242 Sets the metadata for the stream. @param metadata The COSStream object to set as metadata.
243 Checks if this annotation is equal to another PDAnnotation. Compares the underlying COSDictionaries for equality.
244 Finds offsets of XRef tables in the PDF source. @return List of Long offsets to XRef tables.
245 Checks if the next character is a digit. @throws IOException if an I/O error occurs.
246 Adds an XRef entry to the trailer's table if it doesn't exist. @param objKey Key of the object. @param offset Offset of the object.
247 Checks if the next character is a space. @return True if the next character is a space, false otherwise.
248 Skips a linebreak character (CR, LF, or CRLF) from the source.
249 Checks if end of string is reached, returns 0 if so. @param bracesParameter Current braces count. @throws IOException if an I/O error occurs.
250 Checks if the given character is an end-of-line character.
251 Reads a string of digits from the source. @return StringBuilder containing the number string. @throws IOException if the number exceeds MAX_LENGTH_LONG.
252 Checks if the next character is whitespace. @throws IOException if an I/O error occurs.
253 Parses the startXref value. Returns the startXref as a long, or -1 if not present.
254 Returns the COS dictionary associated with this object.
255 Initializes a COSBoolean object with the given boolean value.
256 Initializes a COSName object with the given name. @param aName The name for the COSName object.
257 Private constructor to prevent instantiation of COSNull.
258 Creates a COSString with given bytes. @param bytes The byte array representing the string. @param forceHex Whether to force hex representation.
259 Initializes a new COSDictionary object with an update state.
260 Constructs a COSObject with a base COSBase object. @param object The base COSBase object for this COSObject.
261 Constructs a COSObject with a base object and parser. @param object The base COSBase object. @param parser The parser for the COS object.
262 Constructs a COSObject with a key and parser. @param key COSObjectKey identifying the object @param parser ICOSParser for parsing the object
263 Creates a FreeXReference object. @param key COSObjectKey - the key of the free object @param nextFreeObject Next free object identifier.
264 Constructs an ObjectStreamXReference with given parameters. @param objectStreamIndex Stream index @param key COSObjectKey @param object COSBase object @param parentKey COSObjectKey parent
265 Default constructor, initializes with default settings.
266 Creates a PDTypedDictionaryWrapper from a COSDictionary. @param dictionary The COSDictionary to wrap.
267 Constructs a PDAttributeObject from a COSDictionary. @param dictionary The COSDictionary containing attribute data.
268 Creates a PDShadingType2 object from a COSDictionary. @param shadingDictionary The COSDictionary containing shading data.
269 Constructs a PDUserProperty with a COSDictionary and user attribute.
270 Constructs a PDOutlineNode using the provided COSDictionary.
271 Constructs a FDFAnnotationLink from a COSDictionary.
272 Constructs a FDFAnnotationPolygon from a COSDictionary.
273 Constructs a FDFAnnotationPolyline from a COSDictionary.
274 Constructs a FDFAnnotationSound object from a COSDictionary.
275 Constructs a FDFAnnotationSquare from a COSDictionary.
276 Constructs a FDFAnnotationStamp with the given COSDictionary.
277 Constructs a FDFAnnotationText object from a COSDictionary.
278 Constructs a FDFAnnotationTextMarkup object from a COSDictionary.
279 Constructs a ShadingType1 object from a COSDictionary.
280 Constructs a FDFAnnotationLine object from a COSDictionary.
281 Constructs a PDTilingPattern with a dictionary and resource cache.
282 Returns the group attributes. Lazily initializes if null.
283 Creates a Composite instance based on blendMode and alpha. @param blendMode BlendMode to use. @param constantAlpha Alpha value between 0 and 1.
284 Extracts and creates a PDPanoseClassification from bytes.
285 Constructs a PDShadingPattern from a COSDictionary.
286 Constructs a FDFAnnotationInk object from a COSDictionary.
287 Constructs a FDFAnnotationFreeText object from a COSDictionary.
288 Constructs a FDFAnnotationFileAttachment from a COSDictionary.
289 Creates a PDTransition object from a COSDictionary. @param dictionary The COSDictionary containing transition data.
290 Creates a PDDestinationNameTreeNode from a COSDictionary.
291 Constructs a PDEmbeddedFilesNameTreeNode from a COSDictionary.
292 Constructs a PDJavascriptNameTreeNode from a COSDictionary.
293 Constructs a PDStructureElementNameTreeNode from a COSDictionary.
294 Creates a child node with the given COSDictionary. @param dic The COSDictionary for the new node. @return A new PDNumberTreeNode instance.
295 Constructs a PDMetadata object from a COSStream.
296 Constructs a PDObjectStream from a COSStream. @param str The COSStream to use for initialization.
297 Constructs a PDEmbeddedFile from a COSStream object.
298 Initializes the PDFunction with a COSBase object. Handles COSStream and COSDictionary types.
299 Creates a PDXObject from a COSStream and subtype. @param stream The COSStream containing the object data. @param subtype The subtype of the XObject.
300 Constructs a PDStructureElement from a COSDictionary. @param dic The COSDictionary to use for initialization.
301 Creates a PDStructureTreeRoot object from a COSDictionary. @param dic The COSDictionary containing the structure tree data.
302 Private constructor to prevent direct instantiation of SecurityHandler.
303 Constructs a FDFAnnotationCaret with the given COSDictionary.
304 Constructs a FDF annotation circle from a COSDictionary.
305 Constructs DecodeOptions with specified rectangle dimensions. @param x x-coordinate of rectangle. @param y y-coordinate of rectangle. @param width rectangle width. @param height rectangle height.
306 Returns the visually ordered Unicode string, reversing if needed.
307 Converts a byte to its hexadecimal byte array representation.
308 Converts a byte array to its hexadecimal string representation. @param bytes The byte array to convert. @return Hexadecimal byte array.
309 Writes a byte as two hex characters to the output stream. @param b The byte to write. @param output The output stream to write to.
310 Formats a float value to an ASCII byte array with maxFractionDigits. @param value float value to format @param maxFractionDigits max fraction digits @param asciiBuffer buffer to store formatted value @return offset in asciiBuffer, or -1 if formatting fails.
311 Constructs an AxialShadingPaint with a shading type and matrix.
312 Initializes a RadialShadingPaint with a shading and matrix.
313 Retrieves a value from the trie based on the provided byte array. @param bytes byte array representing the key @return Value associated with the key, or null if not found
314 Returns the Unicode representation of the object.
315 Converts a byte array to a hexadecimal string representation.
316 Converts a byte to its hexadecimal string representation.
317 Writes the article start tag to the output stream. @param isLTR Flag indicating right-to-left text direction. @throws IOException if an I/O error occurs.
318 Gets the width based on rotation. @param rotation Rotation angle in degrees. @return Width value as a float.
319 Writes the article end tag to the output stream.
320 Calculates the Y coordinate of the lower-left corner based on rotation. @param rotation Rotation angle in degrees. @return Y coordinate.
321 Writes a line separator to the output stream.
322 Calculates X rotation based on given rotation value. @param rotation Rotation angle in degrees. @return X coordinate for given rotation.
323 Writes the word separator character to the output stream.
324 Writes the start of a paragraph to the output stream. Handles paragraph ending if already in a paragraph.
325 Writes the HTML page start tag to the output stream.
326 Writes the end tag of the page to the output stream.
327 Sets the x and y coordinates for the sign designer. @param x The x-coordinate. @param y The y-coordinate. @return The current PDVisibleSignDesigner instance.
328 Checks if the character is a diacritic mark. Returns true if it's a non-spacing mark/modifier.
329 Checks if the provided node is a single node with no siblings.
330 Initializes a Type1ShadingPaint with a shading and matrix.
331 Writes Unicode characters to the output stream. @param text TextPosition object containing Unicode characters. @throws IOException if an I/O error occurs.
332 Returns the height of the template, same as the page height.
333 Constructs a COSDocument using a memory-only stream cache. @param parser The parser used to create the COSDocument.
334 Checks if the given point (x, y) is within the bounds. @param x x-coordinate of the point @param y y-coordinate of the point @return True if the point is within bounds, false otherwise.
335 Constructs a PDSignatureField with an Acrobat form, field, and parent.
336 Returns a string representation of the object's contents.
337 Generates a unique partial name by incrementing "Signature".
338 Constructs a PDButton object. @param acroForm The PDF acroform. @param field The COSDictionary representing the field. @param parent The parent non-terminal field.
339 Constructs a PDVariableText object. @param acroForm The parent AcroForm. @param field The COSDictionary representing the field. @param parent The parent NonTerminalField.
340 Creates a PDSoftMask object from a COSBase dictionary. @param dictionary COSBase object containing mask data @return A PDSoftMask object
341 Creates a ShadingType5 object from a COSDictionary. @param shadingDictionary The shading dictionary.
342 Constructs a PDShadingType4 object from a COSDictionary.
343 Creates a Type 3 shading with the given dictionary. @param shadingDictionary The COSDictionary for the shading.
344 Constructs a PDTilingPattern with a COSDictionary. @param dictionary The COSDictionary containing pattern data.
345 Creates an FDFAnnotationUnderline object from a COSDictionary.
346 Creates a FDF annotation strikeout from a COSDictionary.
347 Creates a FDF annotation squiggly line from a COSDictionary.
348 Creates a FDF annotation highlight from a COSDictionary.
349 Constructs a StandardSecurityHandler with a protection policy. @param standardProtectionPolicy The protection policy to use.
350 Constructs a PublicKeySecurityHandler with a protection policy. @param publicKeyProtectionPolicy The policy for public key protection.
351 Default constructor for the StandardSecurityHandler class.
352 Default constructor for the PublicKeySecurityHandler class.
353 Creates a PDFormXObject from a COSStream and ResourceCache.
354 Creates a PDFormXObject from a COSStream. @param stream The COSStream containing form data.
355 Calculates height by subtracting lower left Y from upper right Y.
356 Creates a GeneralPath representing the rectangle's shape. Returns a GeneralPath object.
357 Retrieves the font, using cache or creating a new one. @return FontBoxFont object or null if not found.
358 Saves font information to a disk cache file. Handles potential IO/security exceptions.
359 Sets the font provider and initializes font info. @param fontProvider The FontProvider to set.
360 Initializes a shaded triangle with given points and colors. @param p Array of triangle points. @param c Array of colors for the triangle.
361 Loads a GlyphList from a resource file. @param filename name of the glyphlist file @param numberOfEntries number of glyph entries @return GlyphList object
362 Constructs a COSString object from a String. @param text The string to be wrapped in the COSString.
363 Retrieves the default appearance string from inheritable attributes. Returns null if the attribute is not a COSString.
364 Retrieves export values from inheritable attribute. Returns a list of strings, empty if no values exist.
365 Extracts string items from COSBase, supporting string or array input. @param items COSBase object containing items. @param pairIdx Index to extract from array (0 or 1). @return List of extracted strings.
366 Gets the named destination as a String. Returns null if namedDestination is neither COSString nor COSName.
367 Returns the file path as a string.
368 Encrypts/decrypts data using AES-256. @param data Input stream. @param output Output stream. @param decrypt Decryption flag.
369 Encrypts or decrypts data using AES with a given key and IV. @param finalKey encryption key @param data input stream @param output output stream @param decrypt decrypt flag
370 Processes the CharSequence as a String token. Delegates to the String token processing method.
371 Concatenates two matrices by multiplying b with a.
372 Translates the vector by its x and y components. @param vector The vector to be translated.
373 Translates the text matrix by the given x and y values. @param tx x-coordinate translation @param ty y-coordinate translation
374 Rotates the matrix by a given angle. @param theta Rotation angle in radians.
375 Encrypts user password using RC4 with owner password and revision. @param ownerPassword Owner's password for encryption. @param userPassword User's password to be encrypted.
376 Computes an encrypted password based on revision and parameters. @param password Password bytes @return Encrypted password bytes
377 Reads an image from the given path and prepares it for display. @param path Path to the image file. @throws IOException if an I/O error occurs.
378 Constructs a PDVisibleSignDesigner from an image stream. @param imageStream Input stream for the visible signature image.
379 Retrieves a map of GID to code. Populates if empty. @return Map of GID (Integer) to code (Integer).
380 Creates a PS XObject from a COSStream. @param stream The COSStream containing PS data.
381 Checks if the collection is empty. @return True if the collection is empty, false otherwise.
382 Writes the given text and then a newline character. @param text The text to write. @throws IOException If an I/O error occurs.
383 Writes an integer operand to the output stream, formatted.
384 Writes a float operand to the output stream, followed by a space. @param real The float value to write. @throws IOException if writing fails.
385 Determines the suffix based on the stream's filters. Returns null if no matching filter is found.
386 Creates a PDImageXObject with a stream and resources. @param stream The image stream. @param resources The image resources.
387 Creates an OutputStream with specified filters. @param filters COSBase object representing filters. @return OutputStream for writing data.
388 Gets the name at the specified index. @param index Index of the name to retrieve. @return The name at the given index.
389 Gets an integer at the specified index. @param index the index of the integer to retrieve @return the integer at the given index
390 Returns a string representation of the rectangle's coordinates.
391 Transforms the shape using the given matrix. @param matrix Transformation matrix to apply. @return GeneralPath representing the transformed shape.
392 Gets string at index, returns defaultValue if not a COSString.
393 Creates a COSWriter with the given output stream. @param outputStream The stream to write COS data to.
394 Returns the COSBase representation of the degrees value.
395 Appends a child element with the given MCID. @param mcid The MCID of the child element to append.
396 Parses a string into a COSNumber (Integer or Float). @param number String representation of a number @return COSNumber object or throws IOException if invalid.
397 Returns the COS increment object from the update state.
398 Writes a COSFloat to the output stream, followed by a space. @param output Output stream to write to @param cosFloat COSFloat object to write
399 Ends the text clip by intersecting the clipping path. Resets state and clears text clippings for performance.
400 Updates the graphics clip to match the current clipping paths.
401 Calculates the width of the rectangle. Returns the difference between x coordinates.
402 Constructs a PDFunctionType0 with the given COSBase object.
403 Retrieves FontMetrics for the given font name. @param fontName Font name to look up; returns null if not found.
404 Writes a portion of byte array to OutputStream. @param data byte array to write @param offset starting offset in the array @param len number of bytes to write @param output target OutputStream
405 Writes all bytes from data to the specified OutputStream. @param data byte array to write @param output output stream to write to @throws IOException if an I/O error occurs
406 Checks if any of Revision3 permissions are set. Returns true if any permission is granted.
407 Checks if the current user has all owner permissions. Returns true if all permission checks pass, false otherwise.
408 Returns the X-directed adjusted value based on the current direction.
409 Detects file type based on initial bytes. @param inputStream BufferedInputStream to read from. @return FileType enum representing detected type.
410 Writes byte array as hexadecimal to an output stream. @param bytes byte array to write @param output output stream to write to @throws IOException if an I/O error occurs
411 Writes the name object to the output stream, escaping invalid chars. @param output Output stream to write the name object to.
412 Writes a CMS signature to the PDF. @param cmsSignature CMS signature as byte array. @throws IOException if signature is too large or an error occurs.
413 Converts the byte array to a hexadecimal string representation.
414 Converts a Calendar object to an ISO 8601 formatted string. @param cal Calendar object to format. @return ISO 8601 formatted string.
415 Formats a Calendar object into a string representation. @param cal The Calendar object to format. Returns null if null.
416 Writes the end of a paragraph to the output. Writes paragraph start if not already started.
417 Starts article processing, using default settings.
418 Returns the width adjusted for direction. Uses the current direction to calculate width.
419 Returns the width of the object, accounting for rotation.
420 Calculates the adjusted Y direction based on rotation. Returns adjusted value; uses page dimensions and rotation.
421 Constructs a TextPosition object with the given parameters.
422 Skips whitespace and comments from the input source.
423 Reads a line of text from the source, throwing IOException on EOF.
424 Skips a line break character (CR, LF, or CRLF). @return True if a line break was skipped, false otherwise.
425 Skips whitespace characters and optional line break. Reads and discards whitespace from the input source.
426 Creates a PDFormXObject with the given stream. @param stream The stream containing form data.
427 Finds the nearest xref offset from tables/streams. @param xrefOffset The offset to search for. @return The nearest offset found, or -1 if none found.
428 Closes the stream, flushes data, and releases resources.
429 Updates the 'updated' flag if updates are currently accepted.
430 Constructs a COSObjectKey with num, gen, and default ref. @param num The number of the COS object. @param gen The generation of the COS object.
431 Checks if a COSBase object needs updating. @param base The COSBase object to check. @return True if update is needed, false otherwise.
432 Closes all open overlays and documents, releasing resources.
433 Parses the PDF header using a default version. @throws IOException if an I/O error occurs during parsing.
434 Parses the FDF header. Returns true on success, false otherwise.
435 Constructs a PDDocument with a COSDocument and RandomAccessRead. @param doc The COSDocument to use. @param source Source for reading data.
436 Creates a new PDF document using provided resources. @return A PDDocument object. @throws IOException if an I/O error occurs.
437 Creates a PDFunctionType3 object from a COSBase. @param functionStream The COSBase representing the function stream.
438 Initializes a PDWindowsLaunchParams object. Creates a COSDictionary to store launch parameters.
439 Creates a new PDTargetDirectory with an empty COSDictionary.
440 Initializes the URI dictionary with a new COSDictionary.
441 Initializes a PDEncryption object by creating a COSDictionary.
442 Initializes a new PDBorderEffectDictionary with a COSDictionary.
443 Initializes a new PDCryptFilterDictionary with a COSDictionary.
444 Initializes a new instance of the PDBorderStyleDictionary. Creates a COSDictionary to store border style properties.
445 Initializes a new PDPropBuild object with a COSDictionary.
446 Initializes a new PDBoxStyle object with an empty COSDictionary.
447 Default constructor. Initializes the internal dictionary.
448 Constructs a PDMarkInfo object, initializing the dictionary.
449 Initializes a PDPropBuildDataDict with a COSDictionary. Sets the dictionary to use direct objects.
450 Constructs a PDSeedValueMDP with an empty, direct COSDictionary.
451 Initializes a PDSeedValueTimeStamp with an empty COSDictionary.
452 Constructs a PDField with an AcroForm and default dictionary. @param acroForm The parent AcroForm object.
453 Constructs a new PDViewportDictionary, initializing its COSDictionary.
454 Initializes a PDViewerPreferences object. Creates a new COSDictionary to store preferences.
455 Initializes the PDPageAdditionalActions with a new COSDictionary.
456 Constructs a PDFormFieldAdditionalActions, initializing actions.
457 Initializes an empty PDDocumentCatalogAdditionalActions. Creates a COSDictionary to store additional actions.
458 Initializes the annotation's additional actions with a COSDictionary.
459 Constructs a FDFJavaScript object, initializing its dictionary.
460 Constructs a new FDFIconFit object, initializing the 'fit' dictionary.
461 Constructs a new FDFField object, initializing the field.
462 Constructs a new FDFDictionary, initializing the FDF dictionary.
463 Creates a default DecodeResult with an empty COSDictionary. Returns the newly created DecodeResult object.
464 Initializes a new FDF catalog with an empty COSDictionary.
465 Constructs a new FDFNamedPageReference object. Initializes the internal reference dictionary.
466 Constructs a new FDFPage object, initializing the page dictionary.
467 Creates a PDDefaultAttributeObject from a COSDictionary.
468 Initializes a new FDFPageInfo object. Creates a new COSDictionary to store page information.
469 Constructs a new FDFTemplate object, initializing the template.
470 Constructs a PDDeviceNAttributes object, initializing the dictionary.
471 Constructs a PDDeviceNProcess object, initializing the dictionary.
472 Default constructor. Initializes the shading dictionary.
473 Initializes a COSStream with a RandomAccessStreamCache. @param streamCache Cache for accessing random access streams.
474 Constructs a new COSArray with an empty ArrayList and isFixed=true.
475 Initializes the PDAdditionalActions object. Creates a COSDictionary to store additional actions.
476 Creates an unmodifiable COSDictionary from another COSDictionary. @param dict The COSDictionary to copy.
477 Constructs a PDUserAttributeObject from a COSDictionary.
478 Constructs a COSObject with a base object and key. @param object The base COSBase object. @param objectKey The key for the COSObject.
479 Constructs a PDStandardAttributeObject from a COSDictionary.
480 Default constructor. Initializes the node with a new COSDictionary.
481 Constructs a new PDDictionaryWrapper with an empty COSDictionary.
482 Default constructor, initializes with a new COSDictionary.
483 Retrieves the metadata object. Returns null if not a COSStream.
484 Retrieves metadata from the PDF document. @return PDMetadata object or null if not present.
485 Creates a PDOutlineItem from a COSDictionary. @param dic The COSDictionary containing outline data.
486 Initializes a new PDDocumentInformation object. Creates a new COSDictionary to store document information.
487 Initializes a PDResources object with a COSDictionary and caches.
488 Creates a COSString from a byte array. @param bytes The byte array representing the string.
489 Retrieves a COSName by its string representation. Creates and caches if not found, using weak references.
490 Initializes the PDF stream engine by adding various operators.
491 Gets the extends stream from the COS object. @return PDObjectStream or null if not present.
492 Checks if the object contains the given key name. @param name The key name to check. @return True if the key exists, false otherwise.
493 Retrieves a PDF object by its key. @param key The key of the object to retrieve. @return The COSBase object associated with the key.
494 Parses a COS name from the input stream. @return A COSName object representing the parsed name. @throws IOException if an I/O error occurs.
495 Initializes a PDColor object from a COS array and color space. @param array COS array containing color components/pattern name. @param colorSpace The color space associated with the color.
496 Gets a filter by name. @param filterName The name of the filter. @return The filter object.
497 Creates a thumbnail image from a COSStream. @param cosStream COSStream containing image data. @return PDImageXObject representing the thumbnail.
498 Writes a byte array to an OutputStream, as ASCII or hex. @param bytes byte array to write @param forceHex force hex encoding, regardless of ASCII chars @param output output stream to write to
499 Initializes the PDF marked content extractor with the given encoding.
500 Returns an input stream for data to be signed. Throws IllegalStateException if PDF isn't prepared.
501 Starts text mode, writing BEGIN_TEXT operator. Throws exception if nested calls are attempted.
502 Merges a diacritic character into the existing text position. @param diacritic The diacritic character to merge.
503 Checks if this TextPosition overlaps with the given TextPosition. @param tp2 The TextPosition to check for overlap. @return True if overlaps, false otherwise.
504 Checks if this TextPosition completely contains another. @param tp2 The TextPosition to check for containment. @return True if this TextPosition contains tp2, false otherwise.
505 Writes a paragraph separator by ending and starting a paragraph.
506 Writes the affine transform matrix to the output stream. @param transform AffineTransform object to write.
507 Gets the soft mask for the image. @return PDImageXObject representing the soft mask, or null.
508 Constructs a PDFTextStripper with default operators.
509 Writes a COS name to the output stream, followed by a space. @param name The COS name to write. @throws IOException If an I/O error occurs.
510 Retrieves the image mask, or null if it's a color key mask.
511 Writes a COS name to the output stream, followed by a space. @param output Output stream to write to. @param cosName COS name to write.
512 Creates a PDRectangle from a BoundingBox. @param box BoundingBox containing rectangle coordinates.
513 Creates an output stream for a given filter. @param filter COSName representing the filter to apply @return OutputStream for writing data with the filter
514 Initializes a PDPushButton with given form, field, and parent.
515 Constructs a PDCheckBox object from an AcroForm field. @param acroForm The parent AcroForm. @param field The COSDictionary representing the field. @param parent The parent non-terminal field.
516 Creates an output stream. @throws IOException if an I/O error occurs
517 Constructs a PDRadioButton with given form, field, and parent.
518 Constructs a PChoice object, initializing with given parameters.
519 Constructs a PDTextField with the given form, field, and parent.
520 Saves the current graphics state onto the graphics stack.
521 Gets the transformed bounding box of an appearance stream. @param appearanceStream The appearance stream to transform. @return The transformed Rectangle2D bounding box.
522 Clips the graphics to the provided rectangle. @param rectangle The rectangle to clip to.
523 Returns the value at index 2 in the underlying array.
524 Returns the value at index 3 of the internal array.
525 Returns the value at index 4 in the array.
526 Returns the integer value at index 5 of the array.
527 Returns the value at index 2 of the internal array.
528 Returns the value at index 3 of the internal array.
529 Checks if the array's second element name equals TYPE_BOUNDED.
530 Checks if the array's second element name equals TYPE_BOUNDED.
531 Constructs a COSDocument with a default memory-only stream cache.
532 Checks if the array's second element name equals TYPE_BOUNDED.
533 Saves the current graphics stack and pushes a clone onto it. @return The saved graphics stack.
534 Returns the value at index 2 of the internal array.
535 Adds a Type 1 font to the font info list, handling exceptions. @param pfbFile PFB file to process
536 Returns an unmodifiable COSDictionary based on this one.
537 Constructs a COSStream with a stream cache and read view. @param streamCache Stream cache. @param randomAccessReadView Read view for stream data.
538 Constructs a COSStream object with a null input stream.
539 Creates a new COSStream object and adds it to the stream list. @return The newly created COSStream object.
540 Ends the text mode, writing the END_TEXT operator. Throws exception if beginText() was not called first.
541 Returns the last DecodeResult or a default one if empty.
542 Creates a PDRectangle with specified coordinates and dimensions. @param x x-coordinate, @param y y-coordinate, @param width width, @param height height
543 Initializes a COSArrayList with a parent dictionary and key.
544 Initializes a new COSArrayList with an empty COSArray and ArrayList.
545 Parses a hex string into a COSString. @param hex hex string to parse @return COSString representation of the hex string
546 Default constructor. Initializes the internal COS array.
547 Writes the document to the given output stream. @param output The output stream to write to. @throws IOException if an I/O error occurs.
548 Retrieves the resources dictionary. Returns null if not found.
549 Adds a TrueType font to the font info list, handling various cases. @param fontHeaders Font headers object containing font information. @param file The font file object. @param hash Hash value of the font file.
550 Processes a TrueType collection file, adding fonts or logging errors. @param ttcFile The TrueType collection file to process.
551 Constructs a PDTransparencyGroup from a COSStream and ResourceCache.
552 Constructs a PDAppearanceStream from a COSStream. @param stream The COSStream to use for initialization.
553 Constructs a PDTableAttributeObject from a COSDictionary.
554 Constructs a PDPrintFieldAttributeObject from a COSDictionary.
555 Constructs a PDListAttributeObject from a COSDictionary.
556 Constructs a PDLayoutAttributeObject from a COSDictionary.
557 Constructs a PDTerminalField, passing the acroForm to the superclass.
558 Default constructor. Calls the superclass constructor.
559 Default constructor for the PDJavascriptNameTreeNode class.
560 Default constructor for PDEmbeddedFilesNameTreeNode.
561 Default constructor for the PDDestinationNameTreeNode class.
562 Default constructor for a PDOutlineNode.
563 Constructs a PDUserProperty with the given user attribute object.
564 Default constructor for the PDAttributeObject class.
565 Constructs a PDNonTerminalField, passing the acroForm.
566 Sets the text leading value and writes it to the output. @param leading The leading value to set. @throws IOException if an I/O error occurs.
567 Sets the text rendering mode. @param rm The RenderingMode to set. @throws IOException if an I/O error occurs.
568 Sets the horizontal scaling factor. @param scale The scaling factor to apply. @throws IOException if an I/O error occurs.
569 Sets the word spacing value. @param spacing The spacing value to set. @throws IOException if an I/O error occurs.
570 Sets character spacing. @param spacing The spacing value to set. @throws IOException If an I/O error occurs.
571 Writes the END_MARKED_CONTENT operator.
572 Sets the miter limit. @param miterLimit The miter limit value. Throws exception if <= 0.
573 Sets the line dash pattern with the given pattern and phase. @param pattern float array representing the dash pattern @param phase float representing the phase offset
574 Sets the line cap style. @param lineCapStyle Line cap style value (0-2). @throws IllegalArgumentException if value is out of range.
575 Sets the line join style. @param lineJoinStyle Line join style (0-2). Throws IllegalArgumentException if invalid.
576 Sets the line width by writing the value and operator. @param lineWidth The line width to set. @throws IOException If an I/O error occurs.
577 Sets the text rise value and writes it to the output. @param rise The text rise value to set.
578 Writes CLIP_EVEN_ODD operator and ENDPATH operator. Throws exception if called within a text block.
579 Closes the current subpath. Throws exception if in text mode.
580 Writes the CLOSE_FILL_EVEN_ODD_AND_STROKE operator. Throws exception if called within a text block.
581 Writes the CLOSE_FILL_NON_ZERO_AND_STROKE operator. Throws exception if called within a text block.
582 Writes the FILL_EVEN_ODD_AND_STROKE operator. Throws exception if called in text mode.
583 Writes the FILL_NON_ZERO_AND_STROKE operator. Throws exception if called within a text block.
584 Writes the FILL_EVEN_ODD operator. Throws exception in text mode.
585 Writes the FILL_NON_ZERO operator. Throws exception in text mode.
586 Writes the CLOSE_AND_STROKE operator. Throws exception in text mode.
587 Writes a stroke path operator, throws exception in text mode.
588 Draws a line to the specified coordinates. @param x The x-coordinate of the line's endpoint. @param y The y-coordinate of the line's endpoint.
589 Writes a newline operator. Throws exception if not in text mode.
590 Moves the cursor to the specified coordinates. @param x The x-coordinate. @param y The y-coordinate.
591 Converts a COSString to a Calendar object. @param text COSString to convert; null input returns null. @return Calendar object or null if input is null.
592 Creates a PDMarkedContent instance based on the tag. @param tag tag to identify the content type @param properties properties for the content @return PDMarkedContent instance
593 Retrieves user password based on revision. @param ownerPassword owner's password, revision, length @return Password bytes or empty array for specific revisions.
594 Constructs a TensorPatch with given control points and color data.
595 Returns the FontProvider instance, creating one if needed.
596 Extracts shaded triangles from a coordinate color grid. @param patchCC 2D array of CoordinateColorPair objects @return List of ShadedTriangle objects
597 Constructs a CoonsPatch with given points and color data. @param points Control points for the patch. @param color Color data for the patch.
598 Draws a cubic Bezier curve to (x3, y3) from (x1, y1). @param x1, y1 Control point 1. x3, y3 Destination point.
599 Clips the current subpath to the even-odd rule. Throws exception if called within a text block.
600 Performs a BF search for objects, handling potential PDF truncations.
601 Reads a string of specified length from the source. @param length The maximum length of the string to read. @return The string read from the source.
602 Reads an integer from the input source. Throws IOException if not a valid integer.
603 Reads a long value from the input source. Throws IOException if parsing fails.
604 Calculates the fixed offset for an object's xref table/stream. @param objectOffset Offset of the object to search for. @return Fixed offset or 0 if not found.
605 Constructs a PDDocument from a COSDocument. Uses default parameters if no other are provided.
606 Initializes graphics state with clipping path from the given rectangle. @param page The rectangle defining the initial clipping path.
607 Returns the current access permission. Lazily initializes if null.
608 Computes the revision number based on version and permissions.
609 Encrypts data using RC4 algorithm. @param finalKey encryption key @param input data to encrypt @param output output stream for encrypted data
610 Copies data from an InputStream to an OutputStream. @param data Source InputStream. @param output Destination OutputStream.
611 Calls saslPrep with the 'true' flag. Delegates to saslPrep for query preparation.
612 Calls saslPrep with 'stored' flag set to false.
613 Writes a CID CMap to the given output stream. @param out Output stream to write the CMap to. @throws IOException if an I/O error occurs.
614 Sets the named destination. Null if dest is null. @param dest The destination string. @throws IOException if COSString creation fails.
615 Initializes a PDNamedDestination with the provided destination string. @param dest The named destination string.
616 Sets the file name for the object. @param fileName The name of the file.
617 Restores the graphics state, throwing exception in text mode.
618 Default constructor. Initializes the file specification with an empty string.
619 Retrieves the value of the attribute, handling indexing or returning as is.
620 Retrieves a string at the specified index. @param index The index of the string to retrieve.
621 Saves the current graphics state by pushing it onto stacks. Throws exception if in text mode. Writes a SAVE operator.
622 Adds a newline at a specified text offset. @param tx X offset. @param ty Y offset.
623 Reads a string from the source, skipping spaces if specified. @param expectedString String to read @param skipSpaces Whether to skip leading/trailing spaces @throws IOException if the expected string is not found
624 Retrieves a COSObjectKey, using a cache for performance. @param num object number @param gen object generation @return COSObjectKey object
625 Reads a string from the source, skipping spaces. Returns the string or null if an error occurs.
626 Sets the stroking color using CMYK values. @param c, m, y, k CMYK color components (0.0-1.0) @throws IllegalArgumentException if values are outside 0..1
627 Sets the stroking color gray value. @param g Gray value (0.0-1.0); throws IllegalArgumentException if out of range.
628 Sets the non-stroking color using RGB values. @param r Red value (0..1) @param g Green value (0..1) @param b Blue value (0..1)
629 Sets the non-stroking CMYK color. @param c,m,y,k CMYK color values (0.0 to 1.0) @throws IllegalArgumentException if values are out of range
630 Sets the non-stroking gray color. @param g Gray value (0.0-1.0). Throws IllegalArgumentException if out of range.
631 Adds a rectangle to the image. @param x, y rectangle coordinates, width, height @throws IOException if called in text mode
632 Updates the object's state. Calls the overloaded method with true.
633 Sets a flag indicating whether the data needs updating.
634 Draws a cubic Bezier curve to (x3, y3) using (x1, y1) & (x2, y2). Throws exception if in text mode.
635 Draws a quadratic Bezier curve to (x3, y3) from current point. @param x2 x-coordinate of the control point. @param y2 y-coordinate of the control point. @param x3 x-coordinate of the end point. @param y3 y-coordinate of the end point.
636 Parses an Xref table, extracting object information. @param startByteOffset offset of the Xref table @return true if parsing was successful
637 Parses xref entries, resolving references using the provided resolver.
638 Finds offsets of object streams using breadth-first search. @return Map of object stream offsets and corresponding keys. @throws IOException if an I/O error occurs during the search.
639 Constructs a PDTransparencyGroup from a given stream.
640 Returns the value at index 2 of the internal array.
641 Sets the stroking color using RGB values. @param r Red component (0.0-1.0) @param g Green component (0.0-1.0) @param b Blue component (0.0-1.0)
642 Removes the specified object. @param o The object to remove. @return True if the object was removed, false otherwise.
643 Parses a COSHexString from the source. @return Parsed COSString or null if parsing fails. @throws IOException if an I/O error occurs.
644 Default constructor, initializes rectangle with zero dimensions.
645 Constructs a PDRectangle with specified width and height. @param width The width of the rectangle. @param height The height of the rectangle.
646 Creates and returns a PDRectangle object from bounding box values.
647 Calculates the difference rectangle based on annotations. Returns a PDRectangle representing the difference.
648 Sets the object at the given index to a COSInteger. @param index Index of the object to set. @param intVal Integer value for the COSInteger.
649 Adjusts rectangle dimensions based on provided differences. @param rectangle The rectangle to adjust. @param differences Array of 4 floats representing adjustments. @return A new PDRectangle with adjusted dimensions.
650 Applies differences to a rectangle, adjusting its position/size. @param rectangle The rectangle to modify. @param differences Array of 4 floats: [dx, dy, dw, dh] @return A new PDRectangle with the applied differences.
651 Applies padding to a PDRectangle. @param box The rectangle to pad. @param padding Padding value to apply. @return A new PDRectangle with applied padding.
652 Creates a PDF XRefStream using the provided COSDocument. @param cosDocument The document to create the stream from.
653 Creates a PDObjectStream from a PDDocument. @param document The PDDocument to create the stream from. @return A new PDObjectStream object.
654 Creates a new PDStream associated with the given document.
655 Creates a padded rectangle based on the input rectangle. @param rectangle The base rectangle to pad. @param padding The padding amount to apply. @return A new PDRectangle with added padding.
656 Default constructor. Disables bead separation.
657 Default constructor. Initializes the PDF marked content extractor.
658 Reads the generation number from the input stream. Throws IOException if invalid (negative or > threshold).
659 Reads and validates an object number. @throws IOException if the number is invalid.
660 Encrypts data using RC4 algorithm. @param finalKey Encryption key. @param input Input stream. @param output Output stream.
661 Processes a text position, potentially suppressing duplicates. @param text The text position to process.
662 Processes a TextPosition, potentially suppressing duplicates.
663 Starts a marked content sequence with the given tag. @param tag The tag for the marked content sequence.
664 Starts a marked content sequence with the given tag and mcid. @param tag COSName identifying the marked content @param mcid Integer representing the MCID
665 Sets a marked content point with the given tag. @param tag COSName representing the marked content tag.
666 Writes a COSString to an OutputStream. @param string COSString to write @param output Output stream to write to @throws IOException if an I/O error occurs
667 Writes a byte array to an OutputStream. @param bytes The byte array to write. @param output The OutputStream to write to.
668 Initializes the PDF graphics stream engine with the given page. @param page The PDF page to associate with this engine.
669 Creates a new PDStream using the provided COSDocument. @param document The COSDocument to use for stream creation.
670 Creates a PDStream from an input stream, applying specified filters.
671 Creates a COSStream from an InputStream. @param document PDDocument to add stream to. @param rawInput Input stream to create stream from. @return COSStream object.
672 Removes an item from the items map and updates the state. @param key The key of the item to remove.
673 Clears all items and updates the state.
674 Removes and returns the object at the specified index. @param i index of the object to remove @return Removed COSBase object, or null if index is out of bounds
675 Clears the object list and updates the state.
676 Writes byte data to a PDF appearance stream. @param data The byte array to write. @param appearanceStream The stream to write to.
677 Creates an AppearanceContentStream with a given stream. @param appearance The appearance stream. @param compress Whether to compress the stream.
678 Sets the transformation matrix for text rendering. @param matrix The Matrix object defining the transformation. @throws IOException If an I/O error occurs.
679 Transforms the matrix, throwing an exception in text mode. Writes the affine transform and concatenates the operator.
680 Updates updateState if origin states differ. @param updateState The COSUpdateState to potentially update.
681 Sets the base object to COSNull, updates state, and clears parser.
682 Encodes input stream to output stream using parameters. Delegates to the overloaded method with an unmodifiable dict.
683 Default constructor for the PDDefaultAttributeObject class.
684 Initializes the PDUserAttributeObject with the OWNER_USER_PROPERTIES owner.
685 Default constructor for the PDStandardAttributeObject class.
686 Default constructor for a PDOutlineItem, calls superclass constructor.
687 Constructs a PDVariableText object, initializing with an AcroForm.
688 Constructs a PDExportFormatAttributeObject from a COSDictionary.
689 Returns the appearance stream for this entry. Throws exception if not an appearance stream.
690 Adds a TrueType font file. Handles OTF/TTF formats; logs errors.
691 Constructs a PDShadingType6 object from a COSDictionary.
692 Constructs a PDShadingType7 object from a COSDictionary.
693 Constructs a PDComboBox object. @param acroForm The acroForm. @param field The field. @param parent The parent field.
694 Constructs a PDListBox object. @param acroForm The AcroForm object. @param field The COSDictionary representing the field. @param parent The parent PDNonTerminalField.
695 Constructs a COSParser with a key store and alias. @param source Input stream, password, keystore, and alias.
696 Creates an output stream. @return An OutputStream object. @throws IOException if an I/O error occurs.
697 Sets the origin document state if not already set. @param originDocumentState The origin document state to set. @param dereferencing Flag indicating if dereferencing is active.
698 Saves data to the specified file. @param fileName File to save data to. @throws IOException if an I/O error occurs.
699 Checks user password based on encryption revision. @param password Password to verify. @return True if password matches, false otherwise. @throws IOException if revision is unknown.
700 Finds a FontBoxFont by format and PostScript name, trying variations. @param format Font format (e.g., embedded, subset) @param postScriptName PostScript font name to search for @return FontBoxFont object or null if not found
701 Converts a COSString to a Calendar object. @param text COSString to convert; returns null if null.
702 Parses a COSDictionary value, handling object references. Returns a COSBase object or COSNull.NULL on error.
703 Computes an encrypted key based on revision and input parameters. @param password Password used for encryption.
704 Retrieves offsets for COS objects found during a search. @return Map of COS object keys to their offsets.
705 Constructs a PDAppearanceContentStream from an appearance stream.
706 Writes a page of text to the PDF document. Handles sorting, spacing, and line breaks.
707 Finds a FontBox font by postscript name, tries PFB, TTF, OTF. @param postScriptName Font's postscript name. @return FontBoxFont or null if not found.
708 Checks user password based on revision. @param password Password to verify. @return True if password matches, false otherwise.
709 Checks if the provided password matches the owner's password. @param ownerPassword Owner's password to verify.
710 Constructs a PDF parser with a key store and alias. @param source Input stream for PDF data. @param decryptionPassword Password for decryption. @param keyStore Key store for encryption. @param alias Key alias.
711 Parses a CharSequence into an InstructionSequence. Uses a builder to construct the sequence.
712 Sets the origin document state. @param originDocumentState The state to set.
713 Removes the specified key. @param key The key to remove. @return The value associated with the removed key.
714 Creates a PDFormContentStream from a PDFormXObject. @param form The form XObject to create the stream from.
715 Clears the map and actuals list, effectively emptying the data.
716 Constructs a PDPrintFieldAttributeObject, setting the owner.
717 Initializes the PDListAttributeObject with the OWNER_LIST owner.
718 Constructs a PDLayoutAttributeObject, setting its owner to OWNER_LAYOUT.
719 Constructs a COSParser with a RandomAccessRead source. @param source Input stream for parsing COS data.
720 Creates a PDPageContentStream with a provided appearance stream. @param doc The document. @param appearance The appearance stream.
721 Sets line width, avoiding redundant commands for default (1). @param lineWidth The desired line width. @throws IOException if an I/O error occurs.
722 Draws a paperclip shape using the provided content stream.
723 Draws a circle on the PDF content stream. @param cs Content stream to draw on. @param x Circle's x coordinate. @param y Circle's y coordinate. @param r Circle's radius.
724 Draws a circle on the content stream at (x, y) with radius r.
725 Draws a diamond shape on the content stream. @param cs Content stream to draw on. @param x X-coordinate of the diamond's center. @param y Y-coordinate of the diamond's center. @param r Radius of the diamond.
726 Draws a shape based on line width, stroke, and fill flags.
727 Creates a PDImageXObject from an image stream. @param document PDDocument, stream, filter, width, height, bits, colorSpace
728 Draws an arrow on the content stream. @param cs Content stream to draw on. @param x x-coordinate of the arrow's base. @param y y-coordinate of the arrow's base. @param len Length of the arrow.
729 Removes the element at the given index. @param index index of the element to remove @return the removed element
730 Initializes the PDTableAttributeObject, setting its owner to OWNER_TABLE.
731 Constructs a PDStream with filters cast to COSArray. @param doc The parent document. @param input Input stream for the stream data. @param filters Filters applied to the stream.
732 Returns the bounding box rectangle. Returns the rectangle object.
733 Creates a new immutable rectangle with specified width and height.
734 Parses a COS string, handling escaped characters and nesting. @return COSString object representing the parsed string @throws IOException if parsing fails
735 Sets the page number at index 0 in the array. @param pageNumber The page number to set.
736 Removes the specified object from the list. @param o object to remove @return true if removed, false otherwise
737 Sets the value at index 2 of the array to the given high value.
738 Constructs a PageDrawer with provided parameters. @param parameters PageDrawerParameters object containing settings
739 Writes text to the output stream, using the current font. @param text The text to write. @throws IOException if an I/O error occurs.
740 Writes a COS string to the output stream, followed by a space. @param output The output stream to write to. @param cosString The COS string to write.
741 Constructs a Metadata object for the given document. Sets the type and subtype COS names.
742 Encrypts or decrypts data using RC4 or AES based on parameters. @param decrypt True for decryption, false for encryption
743 Creates a PDEmbeddedFile object associated with a PDDocument. Sets the type to EMBEDDED_FILE in the COS object.
744 Saves data to a file. @param fileName The name of the file to save to. @throws IOException If an I/O error occurs.
745 Recursively collects update information from a COSArray. Returns true if any child demands a parent update.
746 Constructs a PDStream with a COSBase filter. @param doc The document. @param input The input stream. @param filter The filter for the stream.
747 Constructs a PDStream with a document and input stream. @param doc The parent document. @param input The input stream for the stream data.
748 Validates and updates xref offsets, falling back to brute force if needed.
749 Creates a PDImageXObject with a new PDStream. @param document The document this image belongs to.
750 Constructs a PDXObject with a document and subtype. @param document The document this object belongs to. @param subtype The subtype of the XObject.
751 Creates a Metadata object, initializing its COS attributes. @param doc The parent PDDocument. @param str Input stream for metadata data.
752 Draws a line style based on the given style string. @param style line style string
753 Checks if the provided password matches the owner's password. @param password Password to check (converted to bytes)
754 Constructs a PDFormXObject associated with the given document.
755 Dereferences the COS object, avoiding recursion. @return The dereferenced COSBase object or null.
756 Updates the object's state based on a child object. @param child The child object to use for updating.
757 Sets the trailer dictionary and updates its origin document state.
758 Recursively collects COSBase objects, avoiding duplicates. Returns false if the base is already contained.
759 Writes pages based on region data. Iterates through regions.
760 Creates a FDF parser with the given input source. @param source RandomAccessRead object for parsing
761 Creates a PageDrawer instance with provided parameters. @param parameters PageDrawerParameters object @return A new PageDrawer object.
762 Displays text, adds a space, and logs the SHOW_TEXT operator. @param text The text to display.
763 Writes text and operands to output, adjusting positioning. @param textWithPositioningArray Array of Strings and Floats. @throws IOException if an I/O error occurs.
764 Creates an embedded file object from a document and input stream. @param doc The parent document. @param str Input stream for the embedded file data.
765 Creates an embedded file object from a document, input stream, and filter.
766 Writes a COS base object to the output stream. Delegates to writeObject for actual writing.
767 Constructs a PDFParser with a source and optional password. @param source Reader for PDF data; @param decryptionPassword decryption password
768 Encrypts the data within a COSStream. @param stream COSStream to encrypt @param objNum Object number for encryption @param genNum Generation number for encryption
769 Decrypts a COSString using the provided object and generation numbers. Returns the decrypted COSString or the original if decryption fails.
770 Initializes the font provider, caches fonts, and scans the system.
771 Creates a PDImageXObject from byte array, width, height, bits, color space.
772 Encrypts a COSString and returns a new COSString object. @param string COSString to encrypt @param objNum Object number for encryption @param genNum Generation number for encryption @return Encrypted COSString
773 Decrypts a COSStream based on its filter and metadata type. @param stream COSStream to decrypt. @param objNum Object number of the stream. @param genNum Generation number of the stream.
774 Constructs a PDExportFormatAttributeObject with the given owner. @param owner The owner of the attribute object.
775 Retrieves or generates a COSObjectKey for a given COSBase object. @param obj The COSBase object to get the key for. @return The COSObjectKey associated with the object.
776 Checks if a COSBase value has a reference to its parent. Returns true if self-reference found, false otherwise.
777 Checks if the map contains the specified value or wrapped COS object.
778 Accepts a visitor to process the COS object or COSNull. @param visitor The visitor object to process the object. @throws IOException if an I/O error occurs during processing.
779 Closes all COS streams and caches, re-throwing the first exception.
780 Retrieves the linearized dictionary from the XRef table. Returns null if not found.
781 Finds the COSName associated with the given value. @param value The value to search for. @return The COSName or null if not found.
782 Finds the index of an object in the COS object list. @param object COSBase object to search for. @return Index of the object, or -1 if not found.
783 Retrieves a dictionary object by key, unwrapping COSObjects. @param key the key of the dictionary object @return The COSBase object or null if not found/null.
784 Gets the length from a COSBase object, returning a COSNumber. Returns null if length is COSNull. Throws IOException on error.
785 Recursively collects updated COS entries based on update state. Checks exclusion, containment, and update status for inclusion.
786 Creates a new PDTransparencyGroup associated with the document.
787 Creates a new PDAppearanceStream instance associated with a document.
788 Creates a PDImageXObject from a BufferedImage. @param document PDDocument to add image to. @param image BufferedImage to convert. @param quality JPEG quality (0.0-1.0). @param dpi Dots per inch. @return PDImageXObject representing the image.
789 Constructs a PDFParser with a source and default password. @param source RandomAccessRead source for PDF data.
790 Recursively collects a COS object and its updates. Returns false if object is already processed.
791 Creates a NormalXReference with offset, key, and COS object. @param byteOffset Byte offset of the object. @param key Key of the object. @param object COSBase object.
792 Retrieves a COS object from the objects list at the given index. @param index index of the object to retrieve @return COSBase object or null if it's a COSNull
793 Returns a set of COS objects. Initializes if not already done.
794 Adds a COSBase object to the list, wrapping if needed. @param object The COSBase object to add.
795 Adds an object to the list at the specified index. @param i index to insert at @param object COSBase object to add
796 Sets the object at the given index, updating the state. @param index index of the object to set @param object COSBase object to set at the index
797 Sets the value for a given key in the item dictionary. @param key The key for the item. @param value The value to associate with the key.
798 Removes the specified object. Returns true if removed. @param o The COSBase object to remove.
799 Updates the object with the provided COS array. @param children COSArray containing child objects to update.
800 Adds key-object pair to prepared lists if both are non-null. @param key COSObjectKey to add @param object COSBase object to add
801 Checks if the object pool contains the given COSBase object.
802 Retrieves a COSObjectKey based on the provided COSBase object.
803 Returns a list of colorant names from the array.
804 Returns the alternate color space, creating it if necessary.
805 Retrieves BlendMode from COSBase, returns NORMAL if not found. @param cosBlendMode COSBase representing the blend mode. @return BlendMode object.
806 Gets the float value associated with a key, or default if absent.
807 Retrieves a PDGamma object from the array at the given index. @param index index of the PDGamma object in the array @return PDGamma object or null if the index is invalid.
808 Returns the maximum value from the range array as a float.
809 Returns the minimum value from the range array as a float.
810 Converts COS numbers to a list of Integers, null otherwise.
811 Sets a float value for a given key in the dictionary. Removes if value is null, otherwise sets a COSFloat.
812 Initializes a new PDExtendedGraphicsState with a COSDictionary.
813 Sets the border of the COS object using the provided array. @param borderArray COSArray representing the border style.
814 Sets the rectangle object in the dictionary. @param rectangle The PDRectangle object to set.
815 Constructs a PDAnnotation from a COSDictionary. @param dict The COSDictionary containing annotation data.
816 Constructs a new PDAnnotation object. Initializes the annotation's dictionary with type 'ANNOT'.
817 Sets the relationship type. Valid values are "P" or "C". @param relationship COSName representing the relationship type.
818 Sets the 'B' item in the action object with the provided COSBase.
819 Sets the 'D' item in the action with the provided COSBase. @param d The COSBase object to set as the 'D' item.
820 Sets the form's fields to the provided COS array. @param array COSArray containing field data.
821 Sets the sound stream for the action. @param sound The COSStream representing the sound.
822 Sets the form's fields to the provided COS array. @param array COSArray containing the form field data.
823 Sets the 'H' property of the action item to the given boolean value.
824 Sets the 'T' action item to the provided COSBase object.
825 Sets the TR2 item in the dictionary with the given COSBase.
826 Sets the transfer object within the dictionary. @param transfer The COSBase object representing the transfer.
827 Gets the page number from the array. Returns -1 if empty.
828 Retrieves the first page from the array. Returns a PDPage object or null if the array is empty.
829 Sets the blend mode for the PDF object. @param bm The BlendMode to set.
830 Returns the colorant name from the array.
831 Converts COS numbers to a list of Float objects. Returns null for non-COSNumber elements.
832 Sets the rich text value in the COS object. Null value removes the RV item.
833 Sets the decode values and updates the COS object. @param decodeValues The COSArray containing decode values.
834 Sets the transformation matrix for the COS object. @param transform AffineTransform object containing matrix values.
835 Sets the visibility policy for the dictionary. @param visibilityPolicy COSName representing the visibility policy.
836 Adds all objects from the given COSArray to the internal list. @param objectList COSArray containing objects to add.
837 Sets the bounding box of the PDF object. @param bbox The PDRectangle representing the bounding box.
838 Adds a first intermediate curl segment using arc segments. @param angleCur Current angle, r radius, alpha angle, center coords.
839 Generates an array of points forming an intermediate curl template. @param angleCur The angle for the curl. @param r The radius of the curl. @return Array of Point2D.Double objects.
840 Initializes the dictionary with the OCMD type.
841 Creates a PDImageXObject from a BufferedImage with specified quality. @param document The document to add the image to. @param image The BufferedImage to use. @param quality Image quality (0.0-1.0). @return The created PDImageXObject.
842 Converts the COS array elements to a float array. Returns an array of floats, using 0.0 if not a COSNumber.
843 Sets the background COS array and updates the dictionary. @param newBackground The new background COS array.
844 Sets the color space for this object. @param colorSpace The color space to set.
845 Sets the coordinates and updates the COS object. @param newCoords The new coordinates to set.
846 Sets the domain of the COS object. @param newDomain The new domain to set.
847 Sets the extend array and updates the COS object. @param newExtend The new extend array to set.
848 Sets the domain of the COS object. @param newDomain The new domain to set.
849 Sets the transformation matrix for the COS object. @param transform AffineTransform object containing the matrix.
850 Sets the default style string or removes it if null. @param defaultStyleString The default style string to set.
851 Sets the bounding box (bBox) of the object. If null, removes it from the dictionary; otherwise, sets it.
852 Sets the function array for the COS object. @param newFunctions The new function array to set.
853 Sets the origin of the coordinate system. @param coordSystemOrigin Array representing the origin coordinates.
854 Initializes a PDThread object with a COSDictionary and type.
855 Sets the transition direction. @param direction The transition direction to set.
856 Sets the duration of the COS object to the given duration. @param duration The duration value to set.
857 Sets the fly scale value within the COS object. @param scale The scale value to set.
858 Sets the opacity of the fly area to the specified boolean value.
859 Sets the rectangular differences (margins) in the COS object. @param differenceLeft Left margin value. @param differenceTop Top margin value. @param differenceRight Right margin value. @param differenceBottom Bottom margin value.
860 Sets the callout data for the COS object. @param callout Array of floats representing callout data.
861 Sets the ink list to the COS object. Null list removes it. @param inkList 2D float array representing the ink list.
862 Sets the line data for the PDF object. @param l An array of floats representing the line coordinates.
863 Gets the OpenMode for new windows, based on COS object. Returns OpenMode.USER_PREFERENCE if no value is found.
864 Gets the 'T' object from the action dictionary. Returns a COSBase object (Dictionary, String, or Array).
865 Gets the OpenMode for new windows based on COS object. Returns OpenMode.USER_PREFERENCE if no value is found.
866 Gets the OpenMode for new windows based on COS object. Returns OpenMode.USER_PREFERENCE if no value is found.
867 Retrieves a named destination from the dictionary. @return PDNamedDestination object or null if not found.
868 Retrieves the contents as a byte array. Returns empty array if null.
869 Retrieves the XFA resource. Returns null if not present.
870 Gets an inheritable attribute value by key. Returns value from dict, parent, or acroForm.
871 Returns the backdrop color COS array, lazily initialized.
872 Retrieves the value associated with the 'V' key. Returns a COSBase object representing the value.
873 Returns the default value from the COS object.
874 Closes the visual signature and PDF source, releasing resources.
875 Retrieves the key for a given COSBase object from the pool. @param object The COSBase object to find the key for.
876 Checks if the object pool contains the given COSBase object. @param object The COSBase object to check for. @return True if the object is in the pool, false otherwise.
877 Creates a list of COSWriterObjectStream objects for writing. Returns a list of streams, each containing object data.
878 Retrieves a COSName from the dictionary, or defaultValue if not found.
879 Adds a COSBase object to the key pool, assigning a key if needed. @param key The key for the object. @param object The COSBase object to add. @return The assigned COSObjectKey, or null if object already present.
880 Gets the name as a String from a COS object. @param key COSName key to retrieve the name from. @return String representation of the name or null.
881 Retrieves a string value associated with the given COS key. @param key The COSName key to look up. @return The string value or null if not found.
882 Converts a COSDictionary to a Map<String, Object>. @param map The COSDictionary to convert. @return A Map<String, Object> or null if map is null.
883 Returns the value of the COS object as a string. Returns "" if the value is null.
884 Retrieves the string value of the option object.
885 Retrieves the TR2 object from the dictionary. Returns null if it's not a COSArray of size 4.
886 Gets the float value associated with the given key. @param key COSName representing the key to retrieve @return Float value or null if not found.
887 Returns an iterator of content streams from the page.
888 Checks if the page content is not empty. Returns true if content exists, false otherwise.
889 Retrieves class names from COS object. Returns a Revisions object containing class names.
890 Retrieves the value associated with the key "K" from the COS object.
891 Retrieves the value associated with the "V" key. Returns a COSBase object representing the value.
892 Checks if metadata encryption is enabled. Returns true by default.
893 Retrieves the owner encryption key as a byte array. Returns null if the key is not found in the dictionary.
894 Retrieves the user encryption key from the dictionary. @return byte[] encryption key or null if not found.
895 Retrieves the permissions byte array from the dictionary. @return Permissions byte array or null if not found.
896 Gets the page number from the annotation dictionary. Returns Integer representing the page or null if not found.
897 Retrieves the COS value from the field. Returns COSBase or throws IOException for unknown types.
898 Retrieves the transfer object from the dictionary. Returns null if it's not a COSArray of size 4.
899 Gets the field flags from the field dictionary. @return Integer representing field flags, or null if not present.
900 Gets the clear flags value from the field dictionary. @return Integer representing clear flags, or null if absent.
901 Retrieves the widget field flags from the dictionary. @return Integer flag value or null if not found.
902 Gets the set widget field flags from the field dictionary. @return Integer representing the flags, or null if not present.
903 Gets the clear widget field flags from the field dictionary. @return Integer representing flags, or null if not present.
904 Returns the default width. Reads from dict or defaults to 1000.
905 Retrieves the color space from the dictionary. @return PDColorSpace object or null if not present.
906 Retrieves the color space from resources, creating if needed. @param resources PDResources object @return The color space.
907 Creates a PDOptionalContentGroup from a COSDictionary. @param dict The COSDictionary containing the OCG definition.
908 Creates a PDOptionalContentMembershipDictionary from a COSDictionary. @param dict The COSDictionary to initialize from.
909 Gets the overprint mode. Returns null if not found.
910 Retrieves the soft mask associated with this object. Returns null if no soft mask is present.
911 Gets the set flags from the field's dictionary. @return Integer representing the set flags, or null.
912 Returns the default appearance string from the option object.
913 Gets a list of strings for the given COS name. Returns empty list if value is not COSString or COSArray.
914 Constructs a PDTextField associated with a PDAcroForm. Sets the field type to text.
915 Updates the document's highest XRef object number based on imported page.
916 Constructs a PDSeedValueCertificate with default settings.
917 Sets the timestamp value in the dictionary. @param timestamp The timestamp value to set.
918 Sets the MPD (Metadata Protection Dictionary) to the dictionary. @param mdp The PDSeedValueMDP object to set.
919 Initializes a PDSignature object with a dictionary and type.
920 Sets the filter for the dictionary. @param filter The filter to set.
921 Initializes a PDSeedValue object with a COSDictionary.
922 Sets the dash style for the COS object. @param dashArray The dash style array to set.
923 Initializes a new PDAppearanceDictionary with a base dictionary.
924 Sets the quad points array within the COS object. @param quadPoints Array of floats representing quad points.
925 Sets the rectangular differences (margins) in the COS object. @param differenceLeft Left margin value. @param differenceTop Top margin value. @param differenceRight Right margin value. @param differenceBottom Bottom margin value.
926 Sets the parent annotation markup for this object. @param annot The parent annotation markup object.
927 Sets the vertices of the COS object with the given points. @param points Array of float values representing vertices.
928 Sets the vertices of the object using the provided float array.
929 Sets the rich contents for the PDF object. @param rc The rich content string to set.
930 Sets the quad points for the COS object. @param quadPoints Array of float values representing quad points.
931 Sets the type of the COS object. @param type The COSName representing the type.
932 Sets the filter for the dictionary. @param filter The filter to set.
933 Sets the subfilter for the dictionary. @param subfilter The COSName representing the subfilter.
934 Constructs a PDSignatureField from a PDAcroForm. Initializes signature properties and locks the first widget.
935 Gets a dictionary object by key. @param key The key of the dictionary object. @return The COSBase object associated with the key.
936 Creates a PDDestination object from a COSBase. @param base COSBase object to create the destination from. @return PDDestination object or null if base is null. @throws IOException if conversion fails.
937 Returns a string representation of the COSDictionary. Handles potential IOExceptions, returning an error message.
938 Retrieves a COSArray object associated with the given key. @param key The key to search for in the dictionary. @return The COSArray object, or null if not found.
939 Retrieves a COSStream object associated with the given key. @param key The key to look up. @return The COSStream object, or null if not found.
940 Retrieves a COSDictionary associated with the given key. @param key The key to search for. @return The COSDictionary or null if not found.
941 Retrieves a COSName object from the dictionary by key. @param key The COSName key to search for. @return The COSName object or null if not found.
942 Gets a dictionary object by the first or second key. @param firstKey First key to search for. @param secondKey Second key to try if the first fails. @return COSBase object or null if not found.
943 Initializes a Matrix from a COSArray. @param array COSArray containing matrix elements.
944 Gets the zoom level from the array. Returns -1 if not a number.
945 Sets the default value of the COS object. @param value The COSBase value to set as default.
946 Sets the value of the COS object. @param object The COSBase object to set as the value.
947 Constructs a PDChoice object from a PDAcroForm. Sets the field type to choice.
948 Constructs a PDButton from a PDAcroForm. Sets the field type to "BTN" in the COS object.
949 Constructs a PDAcroForm, initializing its document and fields.
950 Sets the text color of the PDF object. @param textColor The PDColor object representing the color.
951 Sets the contents of the dictionary with a COSString. @param bytes The byte array representing the string contents.
952 Sets the byte range for the dictionary. @param range An array of 4 integers representing the byte range.
953 Gets the long value associated with a key, or default if absent. @param key COSName to look up @param defaultValue Default value if key is not found @return Long value or default value.
954 Writes a COS object to the output stream with associated key. @param key COSObjectKey identifying the object @param obj COSBase object to write
955 Sets the rectangular differences (margins) in the COS object. @param differenceLeft Left margin value. @param differenceTop Top margin value. @param differenceRight Right margin value. @param differenceBottom Bottom margin value.
956 Initializes a PDTransparencyGroupAttributes object. Creates a COSDictionary and sets the 'S' item to 'TRANSPARENCY'.
957 Sets an integer value for the given key in the document. @param key COSName representing the key @param value Integer value to set
958 Sets a string value for the given key in the COS object. @param key COSName representing the key. @param value String value to be set.
959 Sets the COS name for a key with the given string value. @param key The key to set. @param value The string value to convert to a COS name.
960 Sets an item in the dictionary, using the key's PDF name. @param key The key for the item. @param value The value to set for the key.
961 Sets a boolean value for the given key in the document. @param key COSName representing the key @param value boolean value to set
962 Sets a boolean value for the given key in the PDF document. @param key The key for the boolean value. @param value The boolean value to set.
963 Sets the item in the dictionary, handling null values. @param key COSName key for the item @param value COSObjectable value to set
964 Sets the Z coordinate value. @param z The Z coordinate to set.
965 Sets the Y coordinate value. @param y The Y coordinate to set.
966 Sets the value of the first element to the given float.
967 Sets the alternate color space for the PDF object. @param colorSpace The color space to set, or null to clear.
968 Sets the colorant name in the array. @param name The colorant name to set.
969 Sets the base color space. @param base The PDColorSpace object to set.
970 Sets the value of the 'b' field to the given float value.
971 Sets the value of the 'g' parameter as a COSFloat.
972 Sets the red color component (R) to the specified float value.
973 Sets the alternate color space and updates the array. @param cs The alternate color space to set.
974 Sets device attributes to the array. Removes if null. @param attributes The device attributes to set.
975 Sets the font size within the font setting. @param size The desired font size as a float.
976 Sets the default appearance string in the option object. @param da The default appearance string to set.
977 Sets the COS item to the specified long value. @param key COS name of the item to set. @param value The long value to set.
978 Sets the value of the first option to the given string. @param opt The string value to set for the option.
979 Sets the float value for the given key in the COS object. @param key COS name representing the key. @param value float value to be set.
980 Sets the encryption dictionary in the trailer. @param encDictionary The COSDictionary containing encryption data.
981 Clears the dictionary, removing all items and notifying parent.
982 Constructs a new, empty PDPageTree. Initializes internal structures.
983 Sets the crop box for the page. Null value removes it. @param cropBox The PDRectangle representing the crop box.
984 Initializes a PDDocumentCatalog with the given document. @param doc The document to associate with this catalog.
985 Sets the document information and updates the PDF trailer. @param info The document information object to set.
986 Parses the next token from the input source. Returns COS object or null if end of stream.
987 Updates parent entry and structure type for entries in array. @param kArray COSArray to update. @param newParent New parent dictionary. @param newStructureType New structure type (optional).
988 Sets the document ID in the PDF trailer. @param id The COSArray representing the document ID.
989 Creates a COSStream object with data from a stream. @param dictionary COS dictionary for stream metadata @param startPosition Start position of the stream data @param streamLength Length of the stream data @return COSStream object
990 Decrypts elements within a COS array. @param array COS array to decrypt. @param objNum Object number for decryption. @param genNum Generation number for decryption.
991 Sets the colour at the given index in the array. @param index index of the colour to set @param colour the colour to set, or null for COSNull
992 Sets the Y coordinate of the rectangle's upper-right corner. @param value The new Y coordinate value.
993 Initializes a PDFontSetting with a COSArray and default values.
994 Constructs a new FDFOptionElement with an initialized COSArray.
995 Initializes a new PDRange object with default values.
996 Creates and populates a COSStream object representing the stream. @return The created COSStream object. @throws IOException if an I/O error occurs.
997 Sets the array of floats. Clears existing content and adds new floats.
998 Resizes the list to the specified size, adding objects if needed. @param size The target size of the list. @param object The object to add if resizing.
999 Adds a COSObjectable object to the container. Delegates to add(COSBase) after retrieving COSObject.
1000 Returns an iterator for the objects contained within this object.
1001 Retrieves a calendar object from the dictionary by key. @param key COSName representing the key to retrieve @return Calendar object or null if not a COSString.
1002 Creates a COS array from the components, adding pattern name if present. @return COSArray representing the components and pattern name.
1003 Initializes a PDDeviceN object with a COSArray and null values.
1004 Initializes a PDGamma object with default values for gamma.
1005 Sets the x-coordinate of the upper-right corner of the rectangle.
1006 Sets the Y coordinate of the lower-left corner of the rectangle.
1007 Sets the x-coordinate of the lower-left corner. @param value The new x-coordinate value.
1008 Sets the maximum value for the range array. @param max The maximum float value to set.
1009 Sets the minimum value for the range. @param min The minimum value to set.
1010 Sets the string at the given index. @param index Index of the string to set. @param string String to set, or null to clear.
1011 Sets the name at the given index using a PDF name object. @param index Index of the name to set. @param name The name to be set.
1012 Sets an integer value at the specified index in the COS object. @param index The index where the integer will be set. @param value The integer value to set.
1013 Sets the COS object at the given index. @param index index of the object to set @param object COSObjectable object to set, or null
1014 Writes a PDF object reference to the standard output stream. @param obj The COSBase object to write the reference for.
1015 Creates a PDImageXObject from a byte array. @param document The document to associate with the image. @param byteArray The byte array containing the image data. @return PDImageXObject created from the byte array.
1016 Sets the transformation matrix for the COS object. @param transform AffineTransform object representing the matrix.
1017 Creates a PDTristimulus object from a float array (up to 3 values).
1018 Initializes a PDTristimulus with zero values for tristimulus.
1019 Initializes a PDSeparation object with a predefined COSArray.
1020 Initializes a PDPattern object with provided resources. @param resources PDResources object containing pattern data
1021 Creates and returns a default range array for PDF processing.
1022 Initializes an Indexed color space with default values.
1023 Gets the alternate color space. Creates default if null. @return PDColorSpace object representing the alternate color space.
1024 Creates a COSArray from a subset of the 'single' array. @return COSArray containing float values from 'single'.
1025 Wraps a PDF page's content in save/restore graphics state. Handles both stream and array content types.
1026 Creates a COSDictionary containing an array of labels and values. @return COSDictionary with the created array.
1027 Sets the widget field flags. @param f Integer representing the flags to set.
1028 Sets the clear field flags on the field object. @param ff Integer representing the clear field flags.
1029 Sets the 'Set FF' item in the field with the provided Integer. @param ff Integer value to set; null to clear.
1030 Sets the field flags. @param ff Integer representing field flags; null to clear.
1031 Sets the value of the field to the provided COSBase object.
1032 Sets the value of the field, handling List, String, and COSObjectable types. @param value The value to set; throws IOException for unknown types.
1033 Sets the differences COSStream within the FDF object.
1034 Sets the ID of the FDF object. @param id The COSArray representing the ID.
1035 Sets the coordinates for the annotation. @param coords Array of float coordinates.
1036 Sets the interior color of the annotation. @param color The color to set; null for no color.
1037 Sets the interior color of the annotation. @param color The color to set; null for no color.
1038 Sets the vertices data for the annotation. @param vertices Array of float values representing vertices.
1039 Sets the interior color of the annotation. @param color The Color object representing the new color.
1040 Sets the vertices for the annotation. @param vertices An array of vertex coordinates.
1041 Sets the interior color of the annotation. @param color The color to set; null for no color.
1042 Sets the line data for annotation. @param line Array of floats representing the line coordinates.
1043 Sets the 'SET_F' item in the field with the given flag value.
1044 Sets the clear widget field flags. @param ff Integer representing the flags to set.
1045 Sets the rich text content of the field. @param rv COSStream representing the rich text data.
1046 Sets the matrix value in the dictionary from a Matrix object.
1047 Sets the gamma value in the dictionary. @param gamma The PDGamma object to set.
1048 Sets the gamma value in the dictionary. @param value the gamma value to set
1049 Sets the character set for the dictionary. @param charSet The character set string to set.
1050 Sets the font bounding box in the dictionary. @param rect The PDRectangle object representing the bbox.
1051 Sets the font stretch value in the dictionary. @param fontStretch String representing the font stretch.
1052 Sets the font family for the dictionary. @param fontFamily The font family string to set.
1053 Sets the font name in the dictionary. @param fontName The name of the font.
1054 Retrieves a list of options from the COS object.
1055 Initializes a PDFontDescriptor with a font description dictionary.
1056 Initializes a PDF font object with default properties.
1057 Sets the "After" item in the dictionary with the given string.
1058 Sets the "Before" item in the dictionary. @param before The value to set for the "Before" item.
1059 Retrieves display values from the COS dictionary. Uses COSName.OPT to get and FieldUtils to process.
1060 Sets the callout data for the annotation. @param callout float array representing the callout data
1061 Sets the rich text value for the field. @param rv The rich text COSString to set.
1062 Sets the filter for a PDF dictionary item. @param filter The filter string to set.
1063 Sets the owner key for the dictionary. @param o The owner key as a byte array. @throws IOException if an I/O error occurs.
1064 Removes an attribute object from the COS structure. Sets structure element to null after removal.
1065 Sets the cryptographic filter method. @param cfm The COSName representing the filter method.
1066 Sets the line dash pattern from a COSArray. @param dashArray COSArray representing the dash pattern.
1067 Sets the interior color of the annotation. @param color The color to set; null for no color.
1068 Sets the range values for the COS object. @param rangeValues The COSArray representing the range values.
1069 Sets the user key in the dictionary as a COSString. @param u The user key as a byte array. @throws IOException if an I/O error occurs.
1070 Sets the 'k' item in the COS object. @param k The COSBase value to set for 'k'.
1071 Removes a kid object from the COS object's kids list. @param object The COSBase object to remove. @return True if the object was removed, false otherwise.
1072 Sets the domain values for the COS object. @param domainValues The COSArray representing the domain values.
1073 Inserts a COSBase object before a reference object in a COS array.
1074 Sets the encode values and updates the COS object. @param encodeValues The COSArray containing encode values.
1075 Sets the decode values and updates the COS object. @param decodeValues COSArray containing decode parameters.
1076 Appends a COSBase object as a child to the COS object's "K" entry.
1077 Creates a new complex file specification with type FILESPEC.
1078 Sets the owner encryption key in the dictionary. @param oe The owner encryption key as a byte array. @throws IOException if an I/O error occurs.
1079 Removes a class name from the COS object. @param className The name of the class to remove.
1080 Sets the user encryption key in the dictionary. @param ue The user encryption key as a byte array. @throws IOException if an I/O error occurs.
1081 Sets the recipients for the PDF dictionary. @param recipients Byte array of recipients. @throws IOException if an I/O error occurs.
1082 Sets the rich contents for the annotation. @param rc The rich content string to set.
1083 Sets the stream filter name in the dictionary. @param streamFilterName The COSName representing the filter.
1084 Sets the color of the annotation using the provided Color object.
1085 Sets the name of the string filter in the dictionary. @param stringFilterName The COSName representing the filter.
1086 Sets the permissions for the item using the provided byte array.
1087 Creates a ComplexFileSpecification. @param dict COSDictionary to use, or creates a new one.
1088 Removes V45 filters from the dictionary.
1089 Creates a new FDF annotation with type ANNOT.
1090 Grows the array to the specified size. @param size The new size of the array.
1091 Constructs a PDPattern with given resources and color space.
1092 Sets the X formatting dictionaries to the COS object. @param changeXs array of PDNumberFormatDictionary objects
1093 Sets the areas to be stored in the COS object. @param areas array of PDNumberFormatDictionary objects
1094 Sets the distances array in the COS object. @param distances Array of PDNumberFormatDictionary objects.
1095 Creates a clone of a COSBase object. @param src Source COSBase to clone. @return Cloned COSBase object.
1096 Sets the angles for the number format dictionary. @param angles Array of PDNumberFormatDictionary objects.
1097 Retrieves the text color as a PDColor object. Creates a default color if none is present.
1098 Sets the line slopes for the PDF number format dictionary. @param lineSloaps Array of PDNumberFormatDictionary objects.
1099 Sets the Y number format dictionary array to the COS object. @param changeYs Array of PDNumberFormatDictionary objects.
1100 Sets the range for a component, extending the array if needed. @param range The range object containing min/max values. @param n The index for setting the range values.
1101 Sets the interior color of the PDF object. @param ic The PDColor object representing the color.
1102 Parses color or four-color COS array. @param name COS dictionary key. Returns PDGamma/PDFourColours or null.
1103 Sets the first page in the array to the given page. @param page The page to set.
1104 Sets the tint transform function and updates the array. @param tint The PDFunction to set as the tint transform.
1105 Sets the tint transform function and updates the array. @param tint The PDFunction to set as the tint transform.
1106 Sets the font for the PDF document. @param font The PDFont object to set.
1107 Creates a PDImageXObject from an input stream. @param document The document to associate with the image. @param stream Input stream containing image data. @return PDImageXObject created from the stream.
1108 Retrieves the bounding range of the PDF object. Returns a PDRange object representing the range.
1109 Gets the range for the PDF object. Returns a PDRange object based on the dictionary's RANGE array.
1110 Sets the text color of the PDF object. @param textColor The PDColor object representing the color.
1111 Sets the background color of the PDF page. @param c The PDColor object representing the background color.
1112 Sets the border color of the PDF object. @param c The PDColor object representing the color.
1113 Sets the interior color of the PDF object. @param ic The PDColor object representing the color.
1114 Sets the interior color of the PDF object. @param ic The PDColor object representing the color.
1115 Sets the interior color of the PDF object. @param ic The PDColor object representing the color.
1116 Sets the color of the object using the provided PDColor.
1117 Sets the color for the guideline. @param color The PDColor object representing the color.
1118 Sets the line dash pattern. @param dashPattern The PDLineDashPattern object to set.
1119 Builds and sets glyph widths in the CID font dictionary. Populates widths based on glyph advances from the table.
1120 Returns a PDRange object for the given component index. @param n component index; returns default range if invalid.
1121 Constructs a PDICCBased object from a PDDocument. Initializes the ICC-based color array and stream.
1122 Retrieves colorants from resources, creating them if needed. @param resources PDResources object for resource access @return Map of colorant names to PDSeparation objects.
1123 Retrieves a date object by its key. @param key The key representing the date. @return A Calendar object representing the date.
1124 Parses the PDF trailer and root object, checks pages. Sets document as decrypted and marks initial parsing done.
1125 Sets the value of the COS object and notifies listeners. @param value The new value to set.
1126 Returns the guideline color as a PDColor object. Uses default black if color is not already defined.
1127 Gets the ending style of the line's endpoint. Returns LE_NONE if the endpoint style is not defined.
1128 Sets the horizontal offset for the caption. @param offset The offset value to set.
1129 Sets the vertical offset for the caption. @param offset The vertical offset value.
1130 Sets the crypt filter dictionary for the document. @param cryptFilterName Filter name. @param cryptFilterDictionary Filter dictionary object.
1131 Adds an OID (object identifier) to the dictionary's OID array. @param oid byte array representing the OID.
1132 Adds an issuer to the dictionary's issuer array. @param issuer byte array representing the issuer.
1133 Sets the OS value in the dictionary. Null value removes it. @param os The OS string to set, or null to remove.
1134 Adds a key usage extension to the COS array, validating characters. @param keyUsageExtension The key usage extension string (0, 1, X).
1135 Sets the vertical offset for the annotation's caption. @param offset The vertical offset value.
1136 Sets the horizontal offset for the annotation's caption. @param offset The horizontal offset value.
1137 Adds a subject to the dictionary's subject array. @param subject byte array representing the subject.
1138 Returns the document information. Lazily initializes if null.
1139 Retrieves the black point tristimulus values. Returns a PDTristimulus object; uses default if null.
1140 Retrieves a list of PDThread objects from the document's threads array.
1141 Retrieves the whitepoint value. Returns default if not present.
1142 Gets date from COS name, using default if not found. @param key COS name to search for the date. @param defaultValue Default Calendar value if not found. @return Calendar object representing the date.
1143 Retrieves the creation date from the info object. @return Calendar object representing the creation date.
1144 Returns the modification date from the document info. @return Calendar object representing the modification date.
1145 Gets the creation date from the annotation. @return Calendar object representing creation date
1146 Returns the creation date of the COS object as a Calendar.
1147 Retrieves the sign date from the dictionary. @return Calendar object representing the sign date.
1148 Writes an operator token to the output stream. @param op The operator to write. @throws IOException If an I/O error occurs.
1149 Adds a user property to the COS array. @param userProperty The property to add.
1150 Retrieves child COSDictionaries from a given node. Returns a list of COSDictionaries or an empty list.
1151 Retrieves the gamma array. Creates a default if missing. @return PDGamma object representing the gamma array.
1152 Sets the upper limit within the COS array. @param upper The upper limit value to set, or null to clear.
1153 Returns the additional actions for the page. Creates a new COSDictionary if one doesn't exist.
1154 Initializes the dictionary with names from the catalog. Creates if catalog's names dictionary is null.
1155 Adds an output intent to the PDF root array. @param outputIntent The output intent to add.
1156 Returns the additional actions catalog. Creates a new catalog if one doesn't exist.
1157 Sets the lower limit in the COS array. @param lower The lower limit value to set.
1158 Sets the rectangle object for annotation. @param rectangle The PDRectangle object to set.
1159 Sets the endpoint style for the annotation line. @param style The style string (e.g., "round", "square").
1160 Sets the mapping name in the dictionary. @param mappingName The name of the mapping.
1161 Sets the alternate field name in the dictionary. @param alternateFieldName The alternate field name to set.
1162 Sets the partial name. Throws exception if name contains a period.
1163 Sets the default string value for the COS object. @param value The string value to set as the default.
1164 Sets the default appearance value in the dictionary. @param daValue The default appearance string value.
1165 Sets the title of the PDF document. @param title The title to set.
1166 Sets the contact information in the dictionary. @param contactInfo The contact information to set.
1167 Sets the reason string in the dictionary. @param reason The reason string to set.
1168 Sets the location value in the dictionary. @param location The location string to set.
1169 Sets the name of the dictionary. @param name The name to set.
1170 Sets the URL value in the dictionary. @param url The URL string to set.
1171 Sets the URL value in the dictionary. @param url The URL string to set.
1172 Sets the date value in the dictionary. @param date The date string to set.
1173 Sets the value of the COS object to the given string. @param value The string value to set. @throws IOException if an I/O error occurs.
1174 Sets the alternate caption for the COS object. @param caption The alternate caption string to set.
1175 Sets the normal caption of the COS object. @param caption The caption string to set.
1176 Sets the state model string on the COS object. @param stateModel The state model string to set.
1177 Sets the state of the COS object. @param state The new state value to set.
1178 Sets the subject of the PDF document. @param subj The subject string to set.
1179 Sets the title of the COS object. @param t The title string to set.
1180 Sets the default style string for the COS object. @param defaultStyleString The default style string to set.
1181 Sets the default appearance string for the COS object. @param daValue The default appearance string to set.
1182 Sets the annotation name. @param nm The name to set for the annotation.
1183 Sets the modified date of the COS object. @param m The modified date string to set.
1184 Sets the contents of the dictionary. @param value The string value to set as contents.
1185 Sets the 'P' parameter in the 'params' object. @param param The string value to set as the parameter.
1186 Sets the operation parameter in the COS object. @param op The operation string to set.
1187 Sets the directory path. @param dir The directory string to set.
1188 Sets the rollover caption for the COS object. @param caption The caption string to set.
1189 Sets the value of the COS object to the given string. @param value The string value to set. @throws IOException if an I/O error occurs.
1190 Sets the default value for the COS object. @param value The string value to set as default.
1191 Sets the default appearance string for the annotation. @param daValue The default appearance string to set.
1192 Sets the flags value and stores it in the dictionary. @param flags The flags value to set.
1193 Sets the clear widget field flags. @param ff The flag value to set.
1194 Sets the field flags for a widget. @param ff The flag value to set.
1195 Sets the flags for the widget field. @param f The flag value to set.
1196 Sets the clear field flags on the COS object. @param ff The clear field flags to set.
1197 Sets the field flags for the COS object. @param ff The flags to set.
1198 Sets the field flags for the COS object. @param ff The field flags to set.
1199 Sets the rotation value for the annotation. @param rotation The rotation angle in degrees.
1200 Sets the justification type. @param justification Justification string ("centered", "right").
1201 Sets the page number in the annotation. @param page The page number to set.
1202 Sets the permissions for the PDF dictionary. @param permissions Integer value representing the permissions.
1203 Sets the revision number for the dictionary. @param revision The revision number to set.
1204 Sets the length value in the dictionary. @param length The length value to set.
1205 Sets the version number in the dictionary. @param version The version number to set.
1206 Sets the length value in the crypt filter dictionary. @param length The length value to set.
1207 Sets the next key for the parent tree. @param parentTreeNextkey The next key value to set.
1208 Sets the revision number. @param revisionNumber The revision number to set (must be > -1).
1209 Sets the MCID value in the COS object. @param mcid The MCID value to set.
1210 Sets the bits per sample in the COS object. @param bps The number of bits per sample.
1211 Sets the start value. Throws exception if start is not positive.
1212 Constructs a PDPageTree from a COSDictionary, handling invalid PDF structures. @param root The COSDictionary representing the page tree root. @param document The parent PDDocument.
1213 Sets the rotation value for the page. @param rotation The rotation angle in degrees.
1214 Sets the number of structural parents for the page. @param structParents The number of structural parents.
1215 Sets an integer value in an embedded dictionary. @param embeddedDictionary Dictionary to embed in. @param key Key for the integer value. @param value Integer value to set.
1216 Sets an integer value for a given key in the COS. @param key The key for the integer value.
1217 Sets the scale ratio of the COS object. @param scaleRatio The scale ratio string to set.
1218 Sets the filename. @param file The filename to set.
1219 Sets the widths for glyphs in the font dictionary. Uses glyph list and font encoding to determine widths.
1220 Sets the annotation name in the dictionary. @param name The name of the annotation.
1221 Sets the URI value for the action. @param uri The URI string to set.
1222 Sets the file description. @param description The description to set.
1223 Sets the file associated with this object. @param file The file path to set.
1224 Sets the Unicode file name for the PDF document. @param file The Unicode file name string.
1225 Sets the prefix value. Null value removes the prefix.
1226 Sets the producer value in the info object. @param producer The producer string to set.
1227 Sets the creator of the object. @param creator The creator's name to set.
1228 Sets the keywords for the info object. @param keywords The keywords to set.
1229 Sets the subject of the info object. @param subject The subject string to set.
1230 Sets the author of the document. @param author The author's name as a string.
1231 Sets the title of the info object. @param title The title to set.
1232 Sets the language string for the root COS object. @param language The language string to set.
1233 Sets a string value for a key within an embedded dictionary. @param embedded The embedded object. @param key The key for the string value. @param value The string value to set.
1234 Sets a string value for a given key. Delegates to the PDF name version of the method.
1235 Sets the ID of the COS object. @param id The ID string to set.
1236 Sets a date value for a given key. @param key COS name representing the key. @param date Calendar object representing the date.
1237 Sets the motion for the transition using the provided motion object.
1238 Sets the dimension name for the transition. @param dimension The PDTransitionDimension object.
1239 Creates a transition object with the given style. @param style The transition style to apply.
1240 Sets the name of the COS object. @param name The new name to set.
1241 Initializes a new PDNumberFormatDictionary. Sets the dictionary type to TYPE.
1242 Sets the subtype of the COS object. @param subtype The subtype string to set.
1243 Sets the title of the PDF object. @param title The title string to set.
1244 Sets the language for the COS object. @param language The language string to set.
1245 Sets the alternate description for the COS object. @param alternateDescription The alternate description string.
1246 Sets the 'P' string value in the action object. @param p The string value to set.
1247 Sets the 'O' string value in the action object. @param o The string value to set.
1248 Sets the value of the 'D' entry in the action dictionary. @param d The string value to set for the 'D' entry.
1249 Sets the 'F' string value in the action object. @param f The string value to set.
1250 Sets the action string for the COSName.JS property. @param sAction The action string to set.
1251 Initializes a PDOptionalContentProperties object. Creates a COSDictionary and sets initial properties.
1252 Sets the name of the dictionary. @param name The name to set for the dictionary.
1253 Sets the name of the COS object. @param name The new name to set.
1254 Sets the partial field name using the provided string value.
1255 Sets the target string value within the FDF object. @param target The target string to be set.
1256 Sets the status of the PDF document. @param status The new status string to set.
1257 Sets the state model string in the annotation. @param stateModel The state model string to set.
1258 Sets the state of the annotation. @param state The state string to set.
1259 Sets the caption style for the annotation. @param captionStyle The caption style string to set.
1260 Sets the default style for the annotation. @param style The default style string to set.
1261 Sets the default appearance string for the annotation. @param appearance The default appearance string to set.
1262 Sets the symbol for the annotation. "P" for paragraph, else "None".
1263 Sets the subject of the annotation. @param subject The subject string to set.
1264 Sets the title of the annotation. @param title The title string to set.
1265 Sets the contents of the annotation. @param contents The string content to set.
1266 Sets the name of the annotation. @param name The name to set for the annotation.
1267 Sets the 'M' (modification date) string in the annotation. @param date The date string to set.
1268 Sets the actual text value for the COS object. @param actualText The text string to set.
1269 Sets the expanded form string for the COS object. @param expandedForm The string to set as the expanded form.
1270 Sets the filename for the dictionary. @param filename The name of the file.
1271 Initializes a new PDMeasureDictionary with a COSDictionary.
1272 Default constructor for the FDFAnnotationTextMarkup class.
1273 Constructs a FDFAnnotationText object, setting its subtype.
1274 Initializes the FDF annotation stamp with a subtype.
1275 Constructs a FDFAnnotationSquare object, initializing its subtype.
1276 Constructs a FDFAnnotationSound object, initializing its subtype.
1277 Constructs a FDFAnnotationPolyline object, initializing its subtype.
1278 Constructs a FDFAnnotationPolygon object, initializing its subtype.
1279 Initializes the FDFAnnotationLink with a subtype name.
1280 Constructs a FDFAnnotationLine object, setting its subtype.
1281 Initializes a new FDFAnnotationInk object. Sets the annotation subtype to SUBTYPE.
1282 Initializes a FDFAnnotationFreeText object. Sets the annotation subtype to SUBTYPE.
1283 Constructs a FDF annotation circle. Initializes the annotation subtype.
1284 Constructs a new FDFAnnotationCaret object. Initializes the annotation subtype.
1285 Removes a COSObjectable kid object. Returns true on success.
1286 Inserts a COSObjectable before a reference object. @param newKid The object to insert. @param refKid The reference object.
1287 Appends a COSObjectable as a child object. Handles null input; delegates to appendKid.
1288 Creates a PDFileSpecification from a COSBase object. @param base COSBase object representing file specification @return PDFileSpecification object or null if base is null @throws IOException if the base object type is unknown
1289 Returns the document catalog. Creates one if it doesn't exist.
1290 Constructs a PDDocument with a default memory stream cache.
1291 Retrieves the width value from the PDF stream. @throws IOException if an error occurs during parsing.
1292 Extracts the bounding box of a glyph from a PDF stream. Returns a PDRectangle or null if not found.
1293 Parses tokens into a list. @return List of parsed objects, or empty list if none found.
1294 Merges the contents of base COS object into target COS object. @param base Base COS object to merge from. @param target Target COS object to merge into.
1295 Constructs a FDFAnnotationFileAttachment object. Initializes the subtype name for the annotation.
1296 Builds and sets vertical metrics for the CID font dictionary.
1297 Default constructor for the PDSimpleFont class.
1298 Draws an ellipse defined by its bounding rectangle coordinates. @param left, bottom, right, top Ellipse bounding box coordinates.
1299 Draws a corner curl segment using arc segments. @param anglePrev, angleCur, radius, cx, cy, alpha, alphaPrev
1300 Creates a PDF image object from a BufferedImage. @param document PDF document @param image BufferedImage to convert @return PDF image object
1301 Retrieves the border array, ensuring it has at least 3 elements. If null, creates a default border array.
1302 Constructs a PDListBox object, initializing with a PDAcroForm.
1303 Creates a PDComboBox instance associated with a PDAcroForm. @param acroForm The form to associate with this combo box.
1304 Constructs a PDCheckBox object, initializing it with a PDAcroForm.
1305 Sets the rectangle differences using a single float value. Uses the provided difference for all four sides.
1306 Sets all rect differences to the given value. @param difference The value to set for all differences.
1307 Sets all rect differences to the given value. @param difference The value to set for all rect differences.
1308 Constructs a PDAnnotationWidget from a COSDictionary. Sets the subtype name in the COS object.
1309 Creates a PDAnnotationUnknown object from a COSDictionary.
1310 Creates a PDAnnotationPopup object from a COSDictionary. @param field The COSDictionary representing the popup.
1311 Creates a PDAnnotationMarkup object from a COSDictionary.
1312 Creates a PDAnnotationLink object from a COSDictionary. @param field The COSDictionary containing annotation link data.
1313 Initializes the annotation widget, setting its subtype.
1314 Initializes the annotation popup, setting its subtype.
1315 Default constructor for the PDAnnotationMarkup class.
1316 Constructs a new PDAnnotationLink, setting the subtype.
1317 Sets the non-stroking alpha value. @param alpha The alpha value to set.
1318 Sets the constant stroking alpha value. @param alpha The alpha value to set (0.0-1.0).
1319 Sets the smoothness tolerance value. @param smoothness The desired smoothness tolerance.
1320 Sets the flatness tolerance value. @param flatness The flatness tolerance to set.
1321 Sets the miter limit value. @param miterLimit The miter limit to set.
1322 Sets the line width for the PDF content. @param width The line width to set.
1323 Parses a COS stream from a dictionary. @param dic COSDictionary containing stream information. @return COSStream object or null on error.
1324 Sets the CYX value in the COS object. @param cyx The CYX value to set.
1325 Sets the width of the PDF object. Rounds to int if possible, otherwise sets as float.
1326 Sets the top index in the COS object. @param topIndex The top index to set, or null to remove.
1327 Sets the field flags in the dictionary. @param flags The flags to set.
1328 Sets the Q value in the dictionary. @param q The Q value to set.
1329 Sets the open count in the COS object. @param openCount The new open count value.
1330 Sets the 'FT' (timestamp required) flag in the dictionary. @param flag True if timestamp is required, false otherwise.
1331 Sets the 'P' integer value in the dictionary. @param p The integer value to set (must be between 0 and 3).
1332 Sets the rotation value for the COS object. @param rotation The rotation value to set.
1333 Sets the 'Q' integer value in the COS object. @param q The integer value to set.
1334 Sets the parent structure ID. @param structParent The ID of the parent structure.
1335 Sets the annotation flags for the COS object. @param flags Integer representing the flags to set.
1336 Sets the annotation index in the dictionary. If negative, removes the annotation. Otherwise, sets the index.
1337 Sets the page number in the dictionary. If negative, removes the page number entry.
1338 Sets the flags value for the action. @param flags The integer value to set as flags.
1339 Sets the maximum length value in the COS object. @param maxLen The maximum length to set.
1340 Sets the flags value for the action. @param flags The flags value to set.
1341 Sets the line join style. @param style The line join style to set.
1342 Sets the line cap style. @param style The line cap style to set.
1343 Sets the number of bits per coordinate. @param bitsPerCoordinate The number of bits per coordinate.
1344 Sets the bits per color component. @param bitsPerComponent The number of bits per component.
1345 Sets the number of vertices per row in the COS object. @param verticesPerRow The number of vertices per row.
1346 Sets the number of bits used per flag. @param bitsPerFlag The number of bits per flag.
1347 Sets the shading type in the dictionary. @param shadingType The integer value of the shading type.
1348 Sets the tiling type for the COS object. @param tilingType The tiling type to set.
1349 Sets the paint type for the COS object. @param paintType The integer representing the paint type.
1350 Sets the pattern type in the dictionary. @param patternType The integer representing the pattern type.
1351 Sets the paint type for the pattern. @param paintType The integer representing the paint type.
1352 Sets the overprint mode. Null value removes the entry. @param overprintMode The overprint mode to set.
1353 Sets the 'Q' integer value within the COS object. @param q The integer value to set.
1354 Sets a long value for the given key, using PDF name conversion. @param key The key for the long value. @param value The long value to set.
1355 Writes the document trailer to the output, updates trailer data.
1356 Sets the constant opacity value for the COS object. @param ca The constant opacity value to set.
1357 Sets the leader line offset length in the COS object. @param leaderLineOffsetLength The offset length to set.
1358 Sets the length of the leader line extension. @param leaderLineExtensionLength Extension length in floats.
1359 Sets the length of the leader line. @param leaderLineLength The desired length of the leader line.
1360 Sets the volume level. @param volume Volume level between -1.0 and 1.0.
1361 Sets the Y step value in the COS object. @param yStep The Y step value to set.
1362 Sets the X step value within the COS object. @param xStep The X step value to set.
1363 Sets the missing width value in the dictionary. @param missingWidth The missing width to set.
1364 Sets the maximum width value. @param maxWidth The maximum width to set.
1365 Sets the average width. @param averageWidth The average width to set.
1366 Sets the stem height value in the DIC. @param stemH The stem height to set.
1367 Sets the stem V value in the DIC. @param stemV The stem V value to set.
1368 Sets the x-height value and stores it in the dictionary. @param xHeight The x-height value to set.
1369 Sets the cap height value. @param capHeight The cap height to set.
1370 Sets the leading value for the dictionary. @param leading The leading value to set.
1371 Sets the descent value in the DIC. @param descent The descent value to set.
1372 Sets the ascent value for the current font. @param ascent The ascent value to set.
1373 Sets the italic angle. @param angle The italic angle in degrees.
1374 Sets the font weight. @param fontWeight The font weight value to set.
1375 Sets the leader offset value in the annotation. @param leaderOffset The leader offset value to set.
1376 Sets the leader extend value in the annotation. @param leaderExtend The leader extend float value.
1377 Sets the leader line length in the annotation. @param leaderLength The length of the leader line.
1378 Sets the opacity value for the annotation. @param opacity Opacity value (0.0 - 1.0)
1379 Sets the width of the guideline. @param width The width to set for the guideline.
1380 Sets the user unit value. Throws exception if value is not positive.
1381 Sets a float value for a given key. Delegates to the named version using COSName.
1382 Sets the minimum revision number in the dictionary. @param revision The minimum revision value to set.
1383 Sets the revision number for the dictionary. @param revision The revision number to set.
1384 Sets the 'V' float value in the dictionary. @param minimumRequiredCapability The float value to set.
1385 Sets the line ending style for the annotation. @param style The style to set, or null for default.
1386 Creates a document outline from a COSDictionary. @param dic The COSDictionary containing outline information.
1387 Sets the URL type for the dictionary. @param urlType The URL type to set.
1388 Sets the Windows launch parameters for the action. @param win The PDWindowsLaunchParams object to set.
1389 Sets the file specification for the PDF object. @param fs The PDFileSpecification to set.
1390 Sets the file specification for the action. @param fs The file specification to set.
1391 Sets the destination for this action. @param d The destination object to set.
1392 Sets the target directory for the PDF document. @param targetDirectory The target directory object to set.
1393 Sets the file specification for the PDF object. @param fs The file specification to set.
1394 Sets the destination for the action. @param d The destination object to set.
1395 Sets the font setting for the PDF document. @param fs The PDFontSetting object to set.
1396 Sets the function to be used and updates the COS object. @param newFunction The new PDFunction to set.
1397 Sets the resources for the PDF object. @param resources The PDResources object to set.
1398 Sets the shading object for the PDF page. @param shadingResources The shading object to set.
1399 Sets the extended graphics state. @param extendedGraphicsState The state to set.
1400 Sets the file specification for the action. @param fs The PDFileSpecification to set.
1401 Sets the black point in the dictionary. @param blackpoint The black point tristimulus value.
1402 Sets the CID set data within the dictionary. @param stream The PDStream object containing CID set data.
1403 Sets the font file 3 stream in the dictionary. @param stream The PDStream object to set.
1404 Sets the font file 2 to the dictionary. @param ttfStream The font file stream to set.
1405 Sets the font file for the PDF object. @param type1Stream The font file stream to set.
1406 Sets the template reference. @param tRef The FDFNamedPageReference to set.
1407 Sets the page info within the PDF page object. @param info The FDFPageInfo object to set.
1408 Sets the file specification for the PDF document. @param fs The file specification object to set.
1409 Sets the fractional space to allocate for an item. @param space The PDRange object representing the space.
1410 Sets the additional actions (AA) field in the PDF object. @param aa The PDAdditionalActions object to set.
1411 Sets the action to be performed on the PDF field. @param a The action to set.
1412 Sets the icon fit property of the field. @param fit The FDFIconFit object to set.
1413 Sets the appearance stream reference for the field. @param ref The FDFNamedPageReference to set.
1414 Sets the white point for the document. @param whitepoint The white point value to set. @throws IllegalArgumentException if whitepoint is null.
1415 Sets the file specification for the action. @param fs The file specification to set.
1416 Sets the file specification for the action. @param fs The file specification to set.
1417 Sets the 'F' action in the actions map. @param action The PDAction object to set.
1418 Sets the rectangle difference (RD) item in the COS object. @param rd The PDRectangle representing the rectangle difference.
1419 Sets the border effect dictionary for the COS object. @param be The PDBorderEffectDictionary to set.
1420 Sets the file specification for the PDF object. @param file The PDFileSpecification to set.
1421 Sets the page for the PDF document. @param page The PDPage object to set.
1422 Sets the optional content property list. @param oc The PDPropertyList object to set.
1423 Sets the appearance dictionary for the PDF form. @param appearance The appearance dictionary to set.
1424 Sets the named destination. Null value removes the destination.
1425 Sets the target directory to be associated with the PDF object. @param targetDirectory The target directory object to set.
1426 Sets the 'C' action in the actions map. @param c The PDAction to set.
1427 Sets the 'O' action in the actions map. @param o The action to set.
1428 Sets the 'C' action in the actions map. @param c The PDAction to set.
1429 Sets the 'V' action in the actions list. @param v The PDAction to set.
1430 Sets the 'F' action in the actions map. @param f The action to set.
1431 Sets the 'k' action in the actions map. @param k The PDAction to set for the 'k' key.
1432 Sets the DP action for the current item. @param dp The PDAction object to set.
1433 Sets the WP action. @param wp The WP action to set.
1434 Sets the DS (PDAction) item in the actions map.
1435 Sets the WS (Worksheet) action for the PDF action list. @param ws The PDAction object representing the WS action.
1436 Sets the WC (word count) action in the actions map. @param wc The PDAction representing the word count.
1437 Sets the PI action. @param pi The PI action to set.
1438 Sets the PV action. @param pv The action to set for the PV.
1439 Sets the PC (PDAction) associated with the actions object.
1440 Sets the PO (PDAction) associated with the actions object.
1441 Sets the BL action to the specified PDAction. @param bl The PDAction to set.
1442 Sets the FO action for the PDF document. @param fo The PDAction object to set.
1443 Sets the 'U' action in the actions map. @param u The action to set.
1444 Sets the 'D' action in the actions map. @param d The PDAction to set.
1445 Sets the X action for the PDF action list. @param x The PDAction to set as the X action.
1446 Sets the 'E' action in the actions map. @param e The PDAction to set.
1447 Sets the appearance dictionary for the field. @param ap The appearance dictionary to set.
1448 Sets the action to be performed on the document. @param action The PDAction object to set.
1449 Sets the catalog for the PDF document. @param cat The FDFCatalog to set as the document catalog.
1450 Sets the file specification for the FDF object. @param fs The file specification to set.
1451 Sets the root of the structure tree. @param treeRoot The structure tree root to set.
1452 Sets the URI for the root element. @param uri The URI dictionary to set.
1453 Sets the mark information for the PDF document. @param markInfo The PDMarkInfo object to set.
1454 Sets the names dictionary for the root object. @param names The names dictionary to set.
1455 Sets the additional actions for the document catalog. @param actions The PDDocumentCatalogAdditionalActions object.
1456 Sets the open action for the PDF root object. @param action The destination or action to set.
1457 Sets the metadata for the PDF document. @param meta The metadata object to set.
1458 Sets the document outline to the root COS object. @param outlines The document outline to set.
1459 Sets viewer preferences in the document. @param prefs The PDViewerPreferences object to set.
1460 Sets the AcroForm for the root object and clears the cache.
1461 Sets an item with the given key. Uses PDF name conversion. @param key The key of the item to set. @param value The value to associate with the key.
1462 Decrypts a COSBase object (string, stream, dictionary, array). @param obj The object to decrypt. @return The decrypted COSBase object.
1463 Sets the end color using the provided PDGamma color object.
1464 Sets the page labels for the PDF document. @param labels The PDPageLabels object to set.
1465 Sets the start color using the provided PDGamma color object.
1466 Sets the before colour using the provided PDGamma object.
1467 Creates a new PDRectangle with dimensions matching the component. @return A new PDRectangle object.
1468 Sets the lower limit string in the COS array. Creates array if it doesn't exist.
1469 Sets the upper limit string in the COS array. @param upper The upper limit string to set.
1470 Sets the endpoint style for the line annotation. @param style The style string (e.g., LE_NONE, LE_ROUND).
1471 Sets the line ending style. @param style The line ending style, or null for default.
1472 Sets the endpoint style for the annotation line. @param style The style string, or null for default.
1473 Sets the line ending style. @param style The style string, or null for default.
1474 Sets the endpoint style for the annotation line. @param style The style string, or null for default.
1475 Sets the line ending style for the annotation. @param style The style string, or null for default.
1476 Sets the after colour using the setColourByIndex method.
1477 Sets the destination names and clears the catalog's Dests. @param dests The PDDestinationNameTreeNode to set.
1478 Sets the embedded files name tree node in the dictionary. @param ef The PDEmbeddedFilesNameTreeNode to set.
1479 Sets the JavaScript object associated with the name dictionary. @param js The JavaScript object to set.
1480 Sets the signature for the catalog. @param sig The PDSignature object to set.
1481 Sets the FDF dictionary for the catalog. @param fdf The FDF dictionary to set.
1482 Sets the fringe rectangle for the annotation. @param fringe The PDRectangle representing the fringe.
1483 Sets the fringe rectangle for the annotation. @param fringe The PDRectangle representing the fringe.
1484 Sets the fringe rectangle for the annotation. @param fringe The PDRectangle representing the fringe.
1485 Sets the fringe rectangle for the annotation. @param fringe The PDRectangle representing the fringe.
1486 Sets the border effect dictionary for the annotation. @param be The PDBorderEffectDictionary to set.
1487 Sets the border style of the annotation. @param bs The PDBorderStyleDictionary object to set.
1488 Sets the parent tree of the current PDF number tree node. @param parentTree The parent tree node to set.
1489 Sets the page for the PDF document. @param page The PDPage object to set.
1490 Sets the parent node for this structure node. @param structureNode The parent PDStructureNode.
1491 Sets the page for the PDF document. @param page The PDPage object to set.
1492 Sets the referenced object within the current COS object. @param xobject The object to be referenced.
1493 Sets the referenced object for the annotation. @param annotation The annotation object to reference.
1494 Sets the page for the PDF document. @param page The PDPage object to set.
1495 Adds a COS object to the specified resource dictionary. @param kind resource kind (e.g., Images, Fonts) @param name object name within the resource @param object COSObjectable object to add
1496 Sets the transition and duration for the page. @param transition The transition object. @param duration Transition duration in seconds.
1497 Sets the transition object for the page. @param transition The transition to set.
1498 Sets the page's additional actions. @param actions The PDPageAdditionalActions to set.
1499 Sets the metadata for the page. @param meta The metadata object to set.
1500 Sets the contents of the page to the provided stream. @param contents The PDStream object to set as contents.
1501 Sets the art box for the page. Null value removes it. @param artBox The PDRectangle representing the art box.
1502 Sets the trim box for the page. Null value removes the trim box. @param trimBox The rectangle representing the trim box.
1503 Sets the bleed box for the page. Null value removes it. @param bleedBox The PDRectangle representing the bleed box.
1504 Sets the media box for the page. @param mediaBox The PDRectangle representing the media box.
1505 Sets page resources. Null value removes the resources.
1506 Creates a new PDF page with the specified media box. @param mediaBox The rectangle defining the page's dimensions.
1507 Sets the JavaScript object for the FDF document. @param js The FDFJavaScript object to set.
1508 Initializes the document outline object. Sets the object type to "Outlines".
1509 Sets the border style of the PDF element. @param bs The border style dictionary to set.
1510 Sets the previous URI for the action. @param pa The PDActionURI object to set.
1511 Constructs a PDTypedDictionaryWrapper with the given type. @param type The type of the dictionary.
1512 Sets the style. If null, removes the style attribute.
1513 Sets the 'trapped' value. Throws IllegalArgumentException for invalid input.
1514 Sets the version of the root COS object. @param version The version string to set.
1515 Sets the page layout for the root object. @param layout The PageLayout object to set.
1516 Sets the page mode of the root object. @param mode The PageMode to set.
1517 Sets the name with the given key to the specified value. Delegates to the PDFName version for processing.
1518 Sets an array of floats to the COS object under the given name. @param name name of the item to set @param values array of float values
1519 Sets a COS array with given names to the COS object. @param name name of the array @param values array of strings to be added to the COS array
1520 Sets an array of strings to the COS object with the given name. @param name The name of the item to set. @param values The array of string values.
1521 Sets whether to display the document title. @param value boolean indicating display preference
1522 Sets whether the center window is visible. @param value boolean indicating visibility
1523 Sets the fit window preference to the given boolean value.
1524 Sets the owner of the COS object. @param owner The new owner's name.
1525 Sets whether to hide the window UI. @param value boolean indicating whether to hide UI
1526 Sets whether to hide the toolbar. @param value True to hide, false to show.
1527 Sets the needAppearances flag in the dictionary. @param value Boolean value to set for needAppearances.
1528 Sets the trusted mode for the dictionary. @param trustedMode The boolean value for trusted mode.
1529 Sets whether to suppress warnings about embedding fonts. @param noEmbedFontWarning Flag to suppress font embedding warnings.
1530 Sets the pre-release flag in the dictionary. @param preRelease The boolean value for the pre-release flag.
1531 Sets the "Open" flag on the COS object to the specified value.
1532 Sets the caption flag in the COS object. @param cap The boolean value for the caption.
1533 Sets the mix flag in the action. @param mix The boolean value for the mix flag.
1534 Sets the repeat flag for the action. @param repeat The boolean value for the repeat flag.
1535 Sets the synchronous flag for the action. @param synchronous The boolean value for synchronous mode.
1536 Sets the open mode for a COS object. Null removes the setting. @param value The OpenMode enum value to set.
1537 Sets the open mode for a COS object. Null removes the setting. @param value The OpenMode enum value to set.
1538 Sets the open mode for a COS object. Null removes the setting.
1539 Sets whether to hide the menubar. @param value boolean indicating whether to hide the menubar
1540 Constructs a PDMarkedContentReference with a new COSDictionary.
1541 Constructs a new PDObjectReference with a COSDictionary.
1542 Sets the structure type of the COS object. @param structureType The structure type to set.
1543 Sets the name of the dictionary. @param name The new name to set.
1544 Sets the subtype of the COS object. @param subtype The subtype string to set.
1545 Initializes an ExternalDataDictionary with type "ExData".
1546 Sets the style of the COS object. @param s The style string to set.
1547 Sets the highlighting mode. Valid values are 'N', 'I', 'O', 'P', 'T'. @param highlightingMode The highlighting mode string.
1548 Sets the name of the COS object. @param name The new name to set.
1549 Sets the name of the COS object. @param name The new name to set.
1550 Sets the IT name on the COS object. @param it The IT name to set.
1551 Sets the reply type for the COS object. @param rt The reply type string to set.
1552 Sets the highlight mode for the COS object. @param mode The highlight mode string to set.
1553 Sets the caption positioning. @param captionPositioning The positioning string to set.
1554 Sets the line ending style for the PDF document. @param style The line ending style to set (e.g., "LF", "CR", "CRLF").
1555 Sets the attachment name using the provided name. @param name The new name for the attachment.
1556 Sets the appearance state of the COS object. @param as The appearance state string to set.
1557 Sets the subtype of the COS object. @param subType The subtype string to set.
1558 Sets the sub-type name of the action. @param s The sub-type string to set.
1559 Sets the type of the action. @param type The type string to set.
1560 Initializes a new PDAbstractPattern with a dictionary.
1561 Sets the scale type for the fit object. @param scale The scale type to set.
1562 Sets the scaling option for the fit object. @param option The scaling option to set.
1563 Sets the encoding name for the FDF object. @param encoding The encoding string to set.
1564 Sets the version of the catalog. @param version The version string to set.
1565 Sets the icon name for the annotation. @param icon The name of the icon to set.
1566 Sets the line ending style for the annotation. @param style The line ending style to set (e.g., "LF", "CRLF")
1567 Sets the intent name for the annotation. @param intent The intent name to set.
1568 Sets the subfilter name in the dictionary. @param subfilter The subfilter string to set.
1569 Sets the guideline style for the dictionary. @param style The style string to set.
1570 Constructs a PDStructureNode with the given type. @param type The type of the structure node.
1571 Sets the text knockout flag in the dictionary. @param tk boolean value representing the knockout flag
1572 Sets the destination for the PDF object. @param dest The destination object to set.
1573 Sets the alpha source flag in the dictionary. @param alpha boolean value indicating alpha source.
1574 Sets the non-stroking overprint control flag. @param op The boolean value for the overprint control.
1575 Sets the structure element within the COS object. @param structureElement The structure element to set.
1576 Sets the action to be performed on the PDF object. @param action The PDAction object to set.
1577 Sets the destination for the PDF object. @param dest The destination object to set.
1578 Sets the next sibling outline node. @param outlineNode The next sibling outline node.
1579 Sets the previous sibling of the current outline node. @param outlineNode The previous sibling outline node.
1580 Sets the property build item in the dictionary. @param propBuild The property build object to set.
1581 Sets the seed value certificate in the dictionary. @param certificate The certificate to set.
1582 Sets the application PDPropBuildDataDict in the dictionary. @param app The PDPropBuildDataDict representing the application.
1583 Sets the public security build data in the dictionary. @param pubSec The PDPropBuildDataDict to set.
1584 Sets the filter for the PDPropBuildDataDict. @param filter The filter to set.
1585 Sets the down appearance stream in the dictionary. @param ap The appearance stream to set.
1586 Sets the down appearance entry in the dictionary. @param entry The PDAppearanceEntry to set.
1587 Sets the rollover appearance stream in the dictionary. @param ap The PDAppearanceStream object to set.
1588 Sets the rollover appearance for a PDF appearance entry. @param entry The PDAppearanceEntry to set as rollover.
1589 Sets the normal appearance for a PDF appearance entry. @param entry The appearance entry to set as normal.
1590 Sets the parent of a field. Throws exception if sharing dictionary.
1591 Sets the border style of the PDF object. @param bs BorderStyleDictionary object to set.
1592 Sets the additional actions for the annotation. @param actions The PDAnnotationAdditionalActions object to set.
1593 Sets the action to be performed on the PDF object. @param action The PDAction object to set.
1594 Sets the appearance characteristics dictionary in the COS object.
1595 Sets the rectangle difference (RD) item in the COS object. @param rd The PDRectangle representing the rectangle difference.
1596 Sets the border effect dictionary for the COS object. @param be The PDBorderEffectDictionary to set.
1597 Sets the border effect dictionary for the COS object. @param be The PDBorderEffectDictionary to set.
1598 Sets the border style of the PDF object. @param bs The PDBorderStyleDictionary to set.
1599 Sets the external data dictionary to the COS object. @param externalData The external data dictionary to set.
1600 Sets the "In-Reply-To" annotation. @param irt The annotation to set.
1601 Sets the popup annotation. @param popup The popup annotation to set.
1602 Sets the normal appearance stream in the appearance dictionary. @param ap The PDAppearanceStream representing the normal appearance.
1603 Sets the first child of the outline node. @param outlineNode The child outline node to set.
1604 Sets the last child outline node. @param outlineNode The outline node to set as the last child.
1605 Sets the default resources in the dictionary. @param dr The PDResources object to set as default.
1606 Sets the overprint control flag in the dictionary. @param op The overprint control flag (true/false).
1607 Sets the anti-aliasing flag in the dictionary. @param antiAlias boolean value for anti-aliasing.
1608 Sets the rename flag in the template. @param value The boolean value for the rename flag.
1609 Sets the scale-to-fit boolean value in the PDF annotation. @param value The boolean value to set for scale-to-fit.
1610 Sets the 'cap' (capitalization) attribute of the annotation. @param cap The boolean value for capitalization.
1611 Sets whether to encrypt metadata in the COS object. @param encryptMetaData Flag to enable/disable metadata encryption
1612 Sets the volatility flag for the file system object. @param fileIsVolatile boolean indicating file volatility
1613 Sets the "FD" boolean value within the COS object. @param fd The boolean value to set.
1614 Sets the "Open" boolean value in the COS object. @param open The boolean value to set.
1615 Sets whether to track mouse position on the map. @param value boolean indicating tracking status
1616 Sets the "Suspects" boolean value in the dictionary to false.
1617 Sets the "UserProperties" boolean value in the dictionary.
1618 Sets the "Marked" boolean value in the dictionary. @param value The boolean value to set.
1619 Sets the rectangle associated with the bead. @param rect The PDRectangle object to set.
1620 Sets the page for the current bead. @param page The PDF page to set.
1621 Sets the previous bead for the current bead. @param previous The previous PDThreadBead object.
1622 Sets the next bead in the thread sequence. @param next The next PDThreadBead object.
1623 Sets the thread object associated with the bead. @param thread The PDThread object to set.
1624 Sets the thread information within the document. @param info The PDDocumentInformation object to set.
1625 Sets the measure dictionary for the PDF object. @param measure The PDMeasureDictionary to set.
1626 Sets the bounding box of the COS object. @param rectangle The PDRectangle representing the bounding box.
1627 Sets the form field's additional actions. @param actions The additional actions to set.
1628 Sets the seed value for the PDF object. @param sv The PDSeedValue object to set.
1629 Sets the default value for the signature. @param value The default value to set.
1630 Sets the value of the PDSignature. @param value The PDSignature to set. @throws IOException if an I/O error occurs.
1631 Sets the XFA resource for the document dictionary. @param xfa The XFA resource to set.
1632 Sets the automatic stroke adjustment flag in the dictionary. @param sa The boolean value for automatic stroke adjustment.
1633 Gets the endpoint ending style from the annotation. Returns the style name or PDAnnotationLine.LE_NONE if null.
1634 Returns the type of the COS object as a String.
1635 Gets the upper limit from the COS array. Returns Integer value or null if not found.
1636 Gets the lower limit from the COS array. Returns Integer value or null if not found.
1637 Returns the range values as a COSArray, or retrieves it if null.
1638 Returns the domain values as a COSArray. Lazily initializes if null.
1639 Returns the size array. Lazily initializes if null.
1640 Returns the decode values, using range values if decode is null.
1641 Returns the array of functions associated with this object. Lazily initializes if not already present.
1642 Returns the bounds array, or fetches it if null. @return COSArray containing the bounds, or null.
1643 Returns the default value as a list of strings.
1644 Returns the value of this object as a list of strings.
1645 Returns the encode COSArray, lazily initialized if null.
1646 Retrieves the role map from the COS dictionary. Returns an empty map if no role map is found.
1647 Returns the scale ratio from the COS object. Retrieves the value associated with the COSName.R.
1648 Returns the default style string from the COS object.
1649 Retrieves the mapping name from the dictionary. @return The mapping name as a String.
1650 Gets the alternate field name from the dictionary. Returns a String value from the dictionary using COSName.TU.
1651 Retrieves the partial name from the dictionary. Returns a String value associated with the COSName "T".
1652 Returns the state model string from the COS object.
1653 Returns the normal caption from the COS object. Returns a String value.
1654 Returns the rollover caption from the COS object.
1655 Returns the alternate caption from the COS object.
1656 Retrieves the date string from the dictionary. @return Date string stored in the dictionary.
1657 Retrieves the operating system name from the dictionary. Returns OS name from array or string, if available.
1658 Extracts number indices from a COS array. @return Map of integer indices to COSObjectable values.
1659 Extracts Subject DN entries from COS array as list of maps. @return List of maps representing Subject DN or null if absent.
1660 Retrieves the URL string from the dictionary. @return The URL as a String, or null if not present.
1661 Returns the name from the dictionary. @return The name as a String.
1662 Retrieves the location string from the dictionary. @return The location string, or null if not present.
1663 Retrieves the reason string from the dictionary. @return The reason string, or null if not present.
1664 Retrieves contact information from the dictionary. @return Contact info string or null if not present.
1665 Retrieves the title from the COS object as a String.
1666 Retrieves the URL from the dictionary. @return The URL as a String, or null if not present.
1667 Returns the state of the COS object as a string.
1668 Retrieves child nodes. Returns an empty list if none exist.
1669 Returns a list of child nodes. @return List of child PDNameTreeNodes or null if none.
1670 Retrieves additional actions for the form field. Returns null if no actions are present.
1671 Retrieves the signature value from the COS dictionary. @return A PDSignature object or null if no signature exists.
1672 Returns the default signature value, or null if not present.
1673 Creates and returns a PDSeedValue object from the COS dictionary. Returns null if the dictionary is null.
1674 Returns the measure dictionary. Returns null if not present.
1675 Retrieves document information from the thread. @return PDDocumentInformation object or null if not found.
1676 Retrieves the first PDThreadBead from the thread. Returns null if no bead is found.
1677 Creates and returns a PDThread object from the COSDictionary. Returns null if the dictionary is null.
1678 Returns the next PDThreadBead. Creates a new bead from COS data.
1679 Returns the previous bead. Creates a new PDThreadBead from the previous COSDictionary.
1680 Returns the page associated with this document. Returns null if the page dictionary is not found.
1681 Retrieves the metadata object. Returns null if no metadata exists.
1682 Retrieves the metadata of the page. @return PDMetadata object or null if no metadata exists.
1683 Retrieves the differences stream from the FDF object. Returns a COSStream object representing the differences.
1684 Returns the font file as a PDStream, or null if not present.
1685 Returns the font file 2 as a PDStream, or null if not present.
1686 Retrieves the Font File 3 stream. @return PDStream object or null if not found.
1687 Extracts viewport dictionaries from the page's VP array. @return List of PDViewportDictionary objects or null if empty.
1688 Retrieves a list of PDThreadBead objects from the page. Returns a COSArrayList containing the extracted beads.
1689 Retrieves a list of output intents from the document. @return List of PDOutputIntent objects.
1690 Creates a PDAttributeObject based on the provided COSDictionary. @param dictionary The COSDictionary to create the object from. @return A PDAttributeObject subclass or PDDefaultAttributeObject.
1691 Retrieves the document ID as a COSArray from the trailer.
1692 Retrieves names from a COS array. Returns null if array is absent.
1693 Retrieves the alternate icon as a PDFormXObject. Returns null if no icon is found.
1694 Retrieves the normal icon as a PDFormXObject. Returns null if the icon stream is not found.
1695 Returns a list of exportable option values. Delegates to the getOptions() method.
1696 Returns the sound stream associated with the action. Returns a COSStream object.
1697 Returns the CID set stream, or null if not present.
1698 Retrieves the rollover icon as a PDFormXObject. Returns null if the icon is not present.
1699 Returns default resources from the document dictionary. Returns null if no default resources are found.
1700 Returns the document subject. Retrieves the subject string from the COS object.
1701 Returns the default style string from the COS object.
1702 Returns the name from the annotation. @return String representation of the name.
1703 Returns the date string from the annotation.
1704 Gets the expanded form from properties, or null if properties are null.
1705 Returns the alternate description from properties, or null.
1706 Returns the actual text string from properties, or null.
1707 Returns the formatted value from the COS object.
1708 Returns the actual text content of the COS object.
1709 Returns the expanded form string from the COS object.
1710 Gets the alternate description from the COS object. Returns a String value or null if not present.
1711 Gets the language of the COS object as a String.
1712 Returns the title of the PDF document. Returns the string value associated with the "T" key.
1713 Returns the element identifier as a string. Fetches the identifier from the COS object.
1714 Returns the file description. @return File description string, or null if not set.
1715 Gets the file's UNIX timestamp string. @return UNIX timestamp as a String.
1716 Retrieves the MAC address from the file system. @return MAC address as a String, or null if not found.
1717 Retrieves the DOS file attribute string. @return DOS file attribute string.
1718 Returns the file name as a string from the file system.
1719 Returns the field type as a String from the COS object.
1720 Returns the name of the COS object as a String.
1721 Retrieves the duplex setting as a string from preferences.
1722 Gets string value by key, using PDF name conversion. @param key The key to retrieve the string value for.
1723 Gets string value for a key, using default if null. @param key COSName key to retrieve @param defaultValue Default value if key is not found @return String value for the key or default value
1724 Returns the language string from the root COS object.
1725 Retrieves the contents string from the annotation. @return The contents string, or null if not present.
1726 Returns the title from the info object. @return The title string, or null if not present.
1727 Retrieves the subject from the PDF info dictionary. @return The subject as a String, or null if not present.
1728 Retrieves the keywords associated with the info object. @return String containing the keywords, or null if absent.
1729 Returns the creator of the object as a string.
1730 Returns the producer string from the COS info.
1731 Returns the prefix value from the root configuration.
1732 Returns the file Unicode string from the PDF's file system.
1733 Retrieves the author string from the COS info. @return The author string, or null if not present.
1734 Retrieves the title from a COS object as a String.
1735 Returns the subject string from the annotation.
1736 Returns the rotation value from the annotation. @return String representing the rotation value.
1737 Returns the default appearance string from the COS object.
1738 Returns the annotation name from the COS object.
1739 Returns the modified date as a string from the COS object.
1740 Retrieves the contents string from the dictionary. @return The contents string, or null if not present.
1741 Retrieves the value of the 'P' parameter as a string.
1742 Gets the directory path from the parameters. @return The directory string or null if not present.
1743 Returns the filename from the parameters. @return The filename as a String.
1744 Retrieves the annotation name from the dictionary. @return Annotation name as a String.
1745 Returns the filename associated with the PDF dictionary. @return The filename as a String.
1746 Retrieves the URI from the action dictionary. Returns null if not found.
1747 Retrieves the value of property "P" as a string.
1748 Returns the value of the 'O' property as a String.
1749 Returns the value of the 'D' property as a string.
1750 Retrieves the value of the 'F' property as a string.
1751 Retrieves an array of group names from the COS array. Returns an empty array if no group names are found.
1752 Returns the name from the dictionary. @return The name as a String.
1753 Returns the default appearance string from the annotation.
1754 Returns the default style as a string from the annotation.
1755 Returns the caption style as a string from the annotation.
1756 Returns the state string from the annotation.
1757 Returns the state model string from the annotation.
1758 Returns the status string from the PDF dictionary.
1759 Returns the symbol string from the annotation.
1760 Retrieves the target string from the PDF dictionary. @return The target string, or null if not present.
1761 Retrieves the name from the referenced COS object. @return The name as a String.
1762 Returns the font family name from the dictionary.
1763 Returns the character set from the dictionary. @return The character set string, or null if not present.
1764 Returns the partial field name as a String.
1765 Checks if the COS object has children. Returns true if FIRST dictionary exists, false otherwise.
1766 Retrieves a PDStructureElement from the COS dictionary. Returns null if the dictionary is null.
1767 Returns the string filter name, or IDENTITY if null.
1768 Converts a character code to a Unicode string using a CMap. @param code character code to convert @return Unicode string or null if conversion is not possible
1769 Returns the subType COS name. Lazily initializes if null.
1770 Retrieves the relationship COS name from the dictionary.
1771 Returns the appearance state COS name.
1772 Checks if the document is encrypted. Returns true if encryption exists, false otherwise.
1773 Returns the encryption dictionary from the trailer. Returns null if no encryption dictionary exists.
1774 Parses the document's root object from the trailer dictionary. Throws IOException if the root object is missing.
1775 Retrieves the cached AcroForm, applying fixups if needed. @param acroFormFixup Fixup object to apply, if not already applied. @return PDAcroForm object or null if not found.
1776 Retrieves viewer preferences from the document. @return PDViewerPreferences object or null if not found.
1777 Retrieves the names dictionary from the document. Returns a PDDocumentNameDictionary or null if absent.
1778 Retrieves the destination dictionary. Returns null if not present.
1779 Retrieves mark information from the document's COSDictionary. Returns PDMarkInfo object or null if not found.
1780 Retrieves the URI dictionary from the root object. @return PDURIDictionary object or null if not present.
1781 Retrieves the structure tree root from the document's root dictionary. @return PDStructureTreeRoot object or null if not found.
1782 Gets optional content properties from the root dictionary. Returns null if OCProperties dictionary is not found.
1783 Retrieves the destination names dictionary. @return PDDestinationNameTreeNode or null if not found.
1784 Removes a key usage extension from the key usage array. @param keyUsageExtension The key usage extension to remove.
1785 Removes a subject from the dictionary's subject array. @param subject The subject to remove as a byte array.
1786 Removes a user property from the COS array. @param userProperty The property to remove.
1787 Returns the page associated with this document. Returns a PDPage object or null if the page is null.
1788 Retrieves the page associated with this object. @return PDPage object or null if not found.
1789 Returns the page associated with this document. Returns null if no page is found.
1790 Returns the stream filter name, or IDENTITY if null.
1791 Retrieves a COS object by kind and name from the resources. @param kind COS name of the dictionary. @param name COS name of the object within the dictionary.
1792 Retrieves a COSObject by kind and name from the resources. @param kind COSName of the dictionary. @param name COSName of the object to retrieve. @return COSObject or null if not found/incorrect type.
1793 Retrieves the transition dictionary for the page. @return PDTransition object or null if no transition exists.
1794 Retrieves the JavaScript dictionary. Returns a PDJavascriptNameTreeNode or null if not found.
1795 Retrieves the embedded files node from the name dictionary. Returns null if the dictionary is empty.
1796 Returns COS names associated with a given kind. @param kind The kind of resource to retrieve names for. @return A set of COS names or an empty set if not found.
1797 Removes an issuer from the issuer array in the dictionary. @param issuer byte array representing the issuer to remove.
1798 Returns the cryptographic filter method name. Uses the 'CFM' key from the cryptFilterDictionary.
1799 Checks if a COSDictionary is a catalog. Checks for "type=Catalog" or presence of "FDF" key.
1800 Parses a COSDictionary from the input source. @param isDirect if the dictionary is direct @return COSDictionary object
1801 Creates a PDRectangle from a COSArray, clamping values to prevent errors.
1802 Creates a line dash pattern from a COS array and phase. @param array Array of floats defining the dash pattern. @param phase Initial phase value for the dash pattern.
1803 Returns a string representation of the PDRange object.
1804 Evaluates the function with given input, executes instructions, and returns the resulting float array.
1805 Reads a patch from the input stream, handling free or implicit edges. @param input ImageInputStream to read from, range and transform info. @return Patch object or null if EOF is reached.
1806 Reads a vertex from the input stream, applying transformations. @param input ImageInputStream to read from @return Vertex object with transformed coordinates and color.
1807 Returns the "before" color value. Delegates to getColourByIndex(0).
1808 Returns the "after" colour PDGamma object. Delegates to getColourByIndex(1).
1809 Returns the start color (index 2) of the gamma curve. @return PDGamma object representing the start color.
1810 Returns the end color of the gradient. Uses getColourByIndex(3) to retrieve the color.
1811 Gets the blend mode from the dictionary. Returns BlendMode object.
1812 Returns the color space, creating it if it doesn't exist. @return The color space associated with this object.
1813 Checks if a COSDictionary node is a page tree node. Returns true if the type is PAGES or contains KIDS.
1814 Retrieves filter names from the parameters dictionary. Returns a list of filter names or an empty list if none.
1815 Gets an integer value from a COS object, defaulting to defaultValue.
1816 Gets a boolean value from the dictionary, or defaultValue if not found.
1817 Retrieves a COSDictionary object given two keys. @param firstKey First key for dictionary lookup. @param secondKey Second key for dictionary lookup. @return COSDictionary or null if not found.
1818 Creates a Matrix from a COSArray. Returns an empty Matrix if invalid.
1819 Removes an OID from the dictionary's OID array. @param oid The OID to remove as a byte array.
1820 Retrieves the upper limit from the COS array. Returns the string at index 1 or null if array is null.
1821 Returns the page associated with this document. Returns null if the page dictionary is not found.
1822 Retrieves the border effect dictionary. Returns a PDBorderEffectDictionary or null if absent.
1823 Retrieves the border style dictionary. @return BorderStyleDictionary or null if not present.
1824 Returns the previous URI, or null if it doesn't exist.
1825 Retrieves the external data dictionary. Returns a PDExternalDataDictionary or null if not present.
1826 Retrieves the border style dictionary. @return A PDBorderStyleDictionary or null if not present.
1827 Retrieves the border effect dictionary. @return PDBorderEffectDictionary or null if not present.
1828 Retrieves the border effect dictionary. Returns a PDBorderEffectDictionary or null if not present.
1829 Gets appearance characteristics dictionary. Returns null if absent.
1830 Retrieves additional actions for the annotation. Returns PDAnnotationAdditionalActions or null if no actions exist.
1831 Gets the border style dictionary. @return BorderStyleDictionary or null if not present.
1832 Retrieves the normal appearance entry. Returns a PDAppearanceEntry or null if not found.
1833 Retrieves the filter dictionary. Returns null if no filter exists.
1834 Retrieves the public section data dictionary. @return PDPropBuildDataDict object or null if not present.
1835 Retrieves the application data dictionary. @return PDPropBuildDataDict object or null if not present.
1836 Retrieves the property build object from the dictionary. @return PDPropBuild object or null if not present.
1837 Gets the time stamp from the COSDictionary. Returns a PDSeedValueTimeStamp object or null.
1838 Retrieves the seed value certificate from the dictionary. Returns a PDSeedValueCertificate or null if not found.
1839 Retrieves a COSBase object from the given path. @param objPath Path to the COSBase object. @return The COSBase object at the specified path.
1840 Retrieves the value of a PDF attribute. @param attrName Name of the attribute to retrieve. @return COSBase object representing the attribute value.
1841 Retrieves attribute value; returns default if not found. @param attrName Attribute name to retrieve. @param defaultValue Value if attribute is missing.
1842 Retrieves the appearance dictionary. @return PDAppearanceDictionary or null if not present.
1843 Checks if a specified key exists in the COS object's dictionary. @param name The name of the key to check. @return True if the key exists, false otherwise.
1844 Gets name or array of names, or default if not found. @param name Name to retrieve. @param defaultValue Default value if name is not found. @return String or String[] representing the name(s).
1845 Retrieves a number or name from COS object, or default if not found. @param name COS object key. @param defaultValue Value if key is not found. @return Float value, name, or default value.
1846 Gets a number or array of numbers from COS object. @param name COS object key. @param defaultValue Default value if not found. @return Number, float array, or default value.
1847 Retrieves a PDGamma object by name from the COS array. @param name Name of the COS array to retrieve. @return PDGamma object or null if not found.
1848 Creates a unique key within a COSDictionary. @param kind The kind of dictionary. @param prefix Prefix for the new key. @return A unique COSName object.
1849 Retrieves the MDP (Metadata for PDF) dictionary. @return PDSeedValueMDP object or null if not found.
1850 Extracts string array from COS object by name. @param name COS object key. Returns null if not a COSArray.
1851 Gets the target directory. Returns null if not present.
1852 Creates and returns PDWindowsLaunchParams from COSDictionary. @return PDWindowsLaunchParams object or null if COSDictionary is null.
1853 Gets the target directory. Returns a PDTargetDirectory object or null if not found.
1854 Retrieves a PDDestination object by name. @param name Destination name to retrieve. @return PDDestination object or null if not found.
1855 Retrieves the destination object. Returns a PDDestination object from the COS dictionary.
1856 Gets the destination object. Returns a PDDestination object from the COS dictionary.
1857 Retrieves the destination object. Returns a PDDestination object from the COS dictionary.
1858 Retrieves the destination object. Returns a PDDestination object from the COS dictionary.
1859 Gets the JavaScript dictionary from the FDF. Returns a FDFJavaScript object or null if absent.
1860 Retrieves the signature from the catalog's COSDictionary. @return A PDSignature object or null if no signature exists.
1861 Gets the border style dictionary. Returns null if not found.
1862 Retrieves a CryptFilterDictionary by name. @param cryptFilterName Name of the filter dictionary. @return CryptFilterDictionary or null if not found.
1863 Extracts class map from COS dictionary, returns a Map.
1864 Retrieves the parent tree as a PDNumberTreeNode, or null.
1865 Creates and returns a PDNameTreeNode for the ID tree, or null.
1866 Gets the lower limit from the COS array. Returns the string at index 0 or null if array is null.
1867 Gets the border effect dictionary. @return PDBorderEffectDictionary or null if not present.
1868 Gets the subfilter name from the dictionary. Returns the name as a String.
1869 Retrieves the appearance dictionary. Returns null if not present.
1870 Creates a PDXObject based on the COSBase and resources. @param base The COSBase object to create from. @param resources The resources to use. @return A PDXObject or null if base is null.
1871 Retrieves resources from the COSDictionary. Returns PDResources object or null if not present.
1872 Returns the extended graphics state, or creates it if null.
1873 Gets the render state based on the destination. @param destination RenderDestination (PRINT, VIEW, EXPORT) @return RenderState or null if not found.
1874 Retrieves the process dictionary as a PDDeviceNProcess object. Returns null if the process dictionary is not found.
1875 Returns the character processing dictionary. Lazily initializes if null.
1876 Returns the resources associated with this PDF dictionary. Creates and caches resources if not already present.
1877 Gets the appearance stream reference from the field. @return FDFNamedPageReference or null if not found.
1878 Retrieves the Panose font descriptor. @return PDPanose object or null if not present.
1879 Gets the template reference. Returns null if template is null.
1880 Retrieves page info from the page's COSDictionary. @return FDFPageInfo object or null if no info exists.
1881 Retrieves additional actions from the field's AA dictionary. Returns a PDAdditionalActions object or null if no dictionary.
1882 Gets the icon fit object from the field's IF dictionary. @return FDFIconFit object or null if dictionary is missing.
1883 Extracts appearance streams from the sub-dictionary. Returns a map of COSName to PDAppearanceStream.
1884 Retrieves PDCIDSystemInfo from the dictionary, or null if absent.
1885 Retrieves the filter name from the dictionary. @return Filter name as a String, or null if not present.
1886 Retrieves the title from the annotation. @return The title as a String, or null if not present.
1887 Retrieves the filter name from the dictionary. @return Filter name as a String, or null if not present.
1888 Gets a long value by key, using default if not found. @param key The key to retrieve. @param defaultValue Default value if key is not present.
1889 Gets a long value associated with the given key. @param key The COSName key to look up. @return The long value, or -1L if not found.
1890 Gets a long value associated with the given key. @param key The key to look up. @return The long value or default if not found.
1891 Returns the visibility policy from the dictionary.
1892 Gets the origin of the coordinate system as a float array. Returns null if the origin is not defined.
1893 Retrieves line slopes from COS array. @return Array of PDNumberFormatDictionary or null if empty.
1894 Retrieves number format dictionaries from COS array. @return Array of PDNumberFormatDictionary objects or null.
1895 Retrieves number format areas from the COS array. @return Array of PDNumberFormatDictionary objects, or null.
1896 Retrieves an array of PDNumberFormatDictionary objects from COS array. @return Array of PDNumberFormatDictionary or null if not found.
1897 Retrieves number format dictionaries for the 'Y' array. @return Array of PDNumberFormatDictionary objects or null.
1898 Retrieves number format dictionaries from COS array 'X'. @return Array of PDNumberFormatDictionary or null if absent.
1899 Returns a list of selected option indices from a COS array. Returns empty list if the array is null.
1900 Retrieves a list of calculated fields in the order specified. Returns empty list if no calculation order is defined.
1901 Retrieves byte range as an integer array. Returns empty array if byte range is not present.
1902 Retrieves a list of byte arrays representing OID values. Returns null if OID array is not found in the dictionary.
1903 Retrieves the issuer as a list of byte arrays. Returns null if the issuer is not present.
1904 Retrieves the key usage extensions as a list of strings. Returns null if no key usage is defined.
1905 Retrieves the subject as a list of byte arrays. Returns null if the subject is not present.
1906 Retrieves legal attestations as a list of strings. Returns an empty list if no attestations are present.
1907 Retrieves a list of reasons as COS name strings. Returns empty list if no reasons are present.
1908 Sets the startXref position and resolves the Xref trailer. @param startxrefBytePosValue The byte position of the Xref.
1909 Gets the float value associated with the given COS name. @param key COS name to look up; returns default if not found.
1910 Returns the Y step value from the COS object, defaults to 0.
1911 Returns the X step value as a float, defaults to 0.
1912 Returns the gamma value from the dictionary, defaults to 1.0f.
1913 Returns the missing width value from the dictionary, defaults to 0.
1914 Returns the maximum width value from the dictionary. @return The maximum width as a float, defaults to 0.
1915 Returns the average width. Uses COSName.AVG_WIDTH, defaults to 0 if not found.
1916 Returns the stem height from the dictionary, defaults to 0.
1917 Returns the stem V value from the dictionary. @return The stem V value as a float.
1918 Returns the x-height value, handling potential negative values.
1919 Returns the cap height. Corrects negative values observed in some fonts.
1920 Returns the leading value from the dictionary, defaults to 0.
1921 Returns the descent value, defaulting to 0 if not found.
1922 Returns the ascent value from the dictionary, or 0 if not found.
1923 Returns the italic angle as a float, defaults to 0.
1924 Returns the font weight value, defaults to 0 if not found.
1925 Returns the opacity value from the annotation. @return Float representing the opacity.
1926 Gets the width value from the dictionary. @return Width as a float, defaults to 1 if not found.
1927 Gets the user unit from the page, defaults to 1.0f if invalid.
1928 Gets a float value by key, using defaultValue if not found.
1929 Gets the float value associated with the given key. @param key The key to look up. @return The float value or the default if not found.
1930 Returns a list of digest methods from the dictionary. Returns an empty list if no digest methods are found.
1931 Retrieves sub-filter names from the dictionary. Returns an empty list if no sub-filter is present.
1932 Retrieves an array of quad points from the COS object. Returns null if no quad points are found.
1933 Returns the background COS array, lazily initialized. Returns null if no background is defined.
1934 Extracts component names from the dictionary's COMPONENTS array. @return List of component names, or an empty list if not found.
1935 Retrieves the interior color from the annotation. @return Color object representing the interior color, null if absent.
1936 Returns the transformation matrix as a float array. Returns identity matrix if not found in dictionary.
1937 Returns the widths as a list of floats. Returns an empty list if widths are not present.
1938 Retrieves a list of FDF fields from the template. @return List of FDFField objects or null if no fields exist.
1939 Retrieves a list of FDF templates from the page. @return List of FDFTemplate objects or null if none exist.
1940 Retrieves options from a COS array. Returns null if no options exist.
1941 Retrieves a list of child FDF fields. @return List of FDFField objects or null if none exist.
1942 Retrieves a list of FDF pages from the FDF document. @return List of FDFPage objects or null if no pages exist.
1943 Retrieves a list of FDF fields from the FDF document. @return List of FDFField objects or null if no fields exist.
1944 Returns the ID array from the FDF document.
1945 Retrieves the interior color from the annotation. @return Color object representing the interior color, or null.
1946 Retrieves the coordinates from the annotation as a float array. Returns null if no coordinates are found.
1947 Returns the domain COS array, lazily initialized if null.
1948 Returns the extend COS array, lazily initialized if null.
1949 Returns the domain COS array, lazily initialized if null.
1950 Returns the coordinates array. Lazily initializes if null.
1951 Returns an array of floats representing page margins. Returns an empty array if margins are not found.
1952 Returns an array of vertices as floats, or null if none exist.
1953 Returns the endpoint style from a COS array. Returns PDAnnotationLine.LE_NONE if not found.
1954 Gets the start point ending style from the COS array. Returns PDAnnotationLine.LE_NONE if array is invalid.
1955 Extracts path data from a COS array. @return A float[][] representing the path, or null if not found.
1956 Returns the vertices as a float array, or null if none exist.
1957 Returns an array of floats representing quad points, or null.
1958 Gets the vertical offset from the CO array. Returns 0.f if the array is null.
1959 Gets the horizontal offset of the caption. Returns 0.f if the offset is not available.
1960 Returns the volume value, clamping it between 1 and -1.
1961 Gets the endpoint ending style from the COS array. Returns LE_NONE if the array is invalid.
1962 Retrieves the URL type from the dictionary. @return URL type as a String.
1963 Retrieves the ink list as a 2D float array. Returns an empty array if not found.
1964 Returns an array of floats representing the callout data. Returns null if callout data is not present.
1965 Returns an array of floats representing page margins. Returns an empty array if margins are not present.
1966 Returns an array of floats representing differences in margins. Returns an empty array if margin data is not available.
1967 Returns the fields array from the action object.
1968 Returns the fields array from the action object.
1969 Retrieves the font setting. Returns null if no font is defined.
1970 Returns the decode values COS array. Lazily initializes if null.
1971 Gets the start point ending style from the COS array. Returns LE_NONE if the array is invalid or empty.
1972 Returns the leader line length from the COS object. Returns 0 if the value is not found.
1973 Extracts line coordinates from a COS array. @return float[] line coordinates or null if absent.
1974 Gets the leader line offset length from the COS object. Returns 0 if the value is not found.
1975 Returns the version string from the catalog.
1976 Returns the intent name as a String from the annotation.
1977 Creates an FDF annotation based on the subtype in the dictionary. @param fdfDic COSDictionary containing annotation information. @return An FDFAnnotation object or null if type is unsupported.
1978 Retrieves the sub-filter name from the dictionary.
1979 Retrieves the filter name from the dictionary. Returns the filter name as a String.
1980 Returns the subtype name as a String. Retrieves the value associated with the SUBTYPE property.
1981 Returns the type as a String from the properties.
1982 Returns the language as a String, or null if not set.
1983 Gets the name of the COS object as a String.
1984 Creates a PDStructureNode based on the provided COSDictionary. @param node The COSDictionary defining the node type. @return A PDStructureNode or throws IllegalArgumentException.
1985 Returns the structure type as a String from the COS object.
1986 Returns the owner of the COS object as a string.
1987 Returns the type of the COS object as a String.
1988 Returns the style as a string from the root object.
1989 Retrieves the "Trapped" information as a string.
1990 Gets the version string from the root object. @return Version string, or null if not present.
1991 Retrieves the page layout from the root COS object. Returns PageLayout.SINGLE_PAGE if layout is invalid.
1992 Retrieves the page mode. Returns PageMode.USE_NONE if null or invalid.
1993 Checks if a given offset points to a valid XRef stream. @param startXRefOffset Offset to check; returns true if valid.
1994 Returns the document encoding, defaulting to "PDFDocEncoding".
1995 Gets name as string, using default if null. @param key COSName to retrieve. @param defaultValue Default value if key is null. @return String value of the name or default.
1996 Returns the scale option, defaulting to SCALE_OPTION_ALWAYS if null.
1997 Returns the base font name from the dictionary.
1998 Gets the name as a string from the dictionary.
1999 Returns the subtype name from the COS object.
2000 Returns the leader line extension length from the COS object.
2001 Retrieves the intent of the COS object as a string.
2002 Gets the caption positioning string from the COS object.
2003 Returns the subtype name from the COS object.
2004 Creates a PDAction based on the provided COSDictionary. @param action The COSDictionary representing the action. @return A PDAction object or null if action is invalid.
2005 Returns the sub-type name as a String.
2006 Returns the type as a String from the action.
2007 Checks if the dictionary is an NChannel dictionary. Returns true if the subtype is "NChannel", false otherwise.
2008 Returns the base font name from the dictionary.
2009 Returns the base font name from the dictionary.
2010 Returns the base font name from the dictionary.
2011 Returns the base font name from the dictionary.
2012 Returns the font stretch value from the dictionary.
2013 Returns the font name from the dictionary.
2014 Returns the subtype name as a String from the dictionary.
2015 Returns the type name as a string from the dictionary.
2016 Returns the scale type, defaulting to proportional if null.
2017 Gets name as string, delegates to PDFName version. @param key The key to get the name for.
2018 Returns the line ending style as a String.
2019 Checks if the given edge is attached to this object. @param edge The edge to check. @return True if attached, false otherwise.
2020 Gets the horizontal offset of the caption. Returns 0.0 if the array is null.
2021 Gets the vertical offset of the caption. Returns 0.f if the array is null.
2022 Writes a COSBase object to the output stream. Adds object to writtenObjects and writes its key.
2023 Returns the vertices of the annotation as a float array. Returns null if vertices are not present.
2024 Retrieves the interior color from the annotation. Returns a Color object or null if no color is defined.
2025 Returns the vertices as a float array, or null if none exist.
2026 Returns the non-stroking alpha constant. Retrieves the value from COS using COSName.CA_NS.
2027 Returns the stroking alpha constant from the PDF object.
2028 Returns the smoothness tolerance value. Uses COSName.SM to retrieve the float value.
2029 Returns the flatness tolerance value. Uses COSName.FL to fetch the value.
2030 Retrieves the interior color from the annotation. Returns Color object or null if no color is defined.
2031 Returns the miter limit value. Uses COSName.ML to retrieve the value.
2032 Creates a PDPropertyList based on the provided COSDictionary. @param dict The COSDictionary to use for creation. @return A PDPropertyList or subclass based on the dictionary type.
2033 Returns the color space. Overloads getColorSpace(null).
2034 Retrieves a list of user properties associated with the owner. @return List of PDUserProperty objects.
2035 Extracts text regions from a PDF page. Populates regionCharacterList and regionText with extracted data.
2036 Returns the fly scale value from the COS object. Returns 1.0 if the value is not present.
2037 Returns the duration value as a float. Uses COSName.D as the key, defaults to 1.
2038 Returns the width of the object. Returns 0 if COSName.
2039 Returns the constant opacity value from the COS object.
2040 Returns the line width as a Float. Uses COSName.LW to retrieve the value.
2041 Writes a COSBase object to the output stream, handling references. @param output Output stream to write to @param object COSBase object to write @param topLevel True if writing top-level object
2042 Gets the endpoint style from the annotation's LE array. Returns LE_NONE if the array is null.
2043 Retrieves a list of ink arrays from the annotation. @return List of float arrays or null if inklist is missing.
2044 Retrieves the color from the annotation's COS array. @return Color object or null if no color data is available.
2045 Retrieves the interior color from the annotation. @return Color object representing the interior color, null if absent.
2046 Retrieves the line data from the annotation. @return Float array representing the line or null.
2047 Returns an array of floats from the CL COS array, or null.
2048 Returns the start point ending style from the annotation. Returns LE_NONE if the array is null.
2049 Adds an XObject to the document's XObject dictionary. @param name XObject name @param xobject The XObject to add
2050 Sets the units value in the COS object. @param units The units string to set.
2051 Sets the fractional display type. Accepts "D", "F", "R", "T", or null.
2052 Returns the bounding box of the PDF object. @return PDRectangle object representing the bounding box, or null.
2053 Gets the rectangle from the annotation. @return PDRectangle object or null if not present.
2054 Extracts the fringe rectangle from the annotation. @return PDRectangle object or null if not present.
2055 Extracts the fringe rectangle from the annotation. @return PDRectangle object representing the fringe, or null.
2056 Retrieves the fringe rectangle from the annotation. Returns a PDRectangle or null if not present.
2057 Extracts the fringe rectangle from the annotation. @return PDRectangle object representing the fringe, or null.
2058 Gets the font bounding box from the dictionary. @return PDRectangle object representing the bounding box.
2059 Gets the font bounding box. @return PDRectangle object or null if not found.
2060 Gets the bounding box of the COS object. @return PDRectangle object or null if no bounding box exists.
2061 Returns shading names from the document. Uses the getNames method with COSName.SHADING.
2062 Returns the bounding box of the PDF object as a PDRectangle. Returns null if the bounding box is not found.
2063 Adds a pattern to the pattern dictionary. @param name Pattern name. @param pattern Pattern object to add.
2064 Gets the bounding box of the COS object. Returns a PDRectangle or null if bounding box is missing.
2065 Constructs a new FDFDocument object, initializing its components.
2066 Resolves the bounding box for a PDF annotation widget. @param fieldWidget The annotation widget. @param appearanceStream The appearance stream. @return The bounding rectangle.
2067 Sets the bounding box of the PDF object. @param bbox The PDRectangle representing the new bounding box.
2068 Sets the color value by name. @param name color name @param value the color value (PDGamma)
2069 Determines the image suffix based on filters. Returns "png" if no match.
2070 Sets the value for a four-color object by name. @param name Name of the object. @param value The new PDFourColours value.
2071 Constructs a PDPage with default LETTER page size.
2072 Retrieves the FDF dictionary. Creates one if it doesn't exist. @return FDFDictionary object.
2073 Adds an object to the specified resource dictionary with a new key. @param kind Resource kind (e.g., Images, Fonts) @param prefix Prefix for the new key @param object Object to add @return The new key assigned to the object.
2074 Puts a font into the PDF object using the FONT key. @param name Font name @param font The font object to be added
2075 Sets the color space for the object. Delegates to the color space property.
2076 Sets the extended graphics state associated with a COS name.
2077 Adds a shading object to the document with a given name.
2078 Adds properties to the document with a given name. @param name the name for the properties @param properties the properties to add
2079 Returns the bounding box rectangle. Creates it if it's null, from the dictionary.
2080 Gets the bounding box of the COS object. @return PDRectangle object or null if bounding box is missing.
2081 Gets the rectangle difference from the COS object. @return PDRectangle object or null if RD array is missing.
2082 Retrieves a PDColorSpace by name, caching if possible. @param name COSName of the color space @param wasDefault True if the color space was default @return PDColorSpace object
2083 Sets the embedded file for Unicode encoding. @param file The PDEmbeddedFile object to set.
2084 Sets the embedded file. Creates EF dictionary if it's null.
2085 Retrieves the matrix object. Returns a Matrix object from the COS dictionary.
2086 Checks if a COS object has a color space. @param name COS name to check. @return True if color space exists, false otherwise.
2087 Retrieves an extended graphics state by name, caching if possible. @param name COSName identifying the extended graphics state. @return PDExtendedGraphicsState object or null if not found.
2088 Checks if a COSName represents an image XObject. @param name COSName to check; returns true if it is.
2089 Returns a list of font names defined in the PDF.
2090 Returns a list of XObject names. Uses the getNames method with COSName.XOBJECT.
2091 Returns a list of color space names. Uses getNames with the COLORSPACE key.
2092 Retrieves an inheritable attribute from a COSDictionary. @param node Dictionary to search. @param key Attribute key. Returns value or null if not found.
2093 Gets a boolean value associated with the given key. @param key COSName of the boolean value @param defaultValue Default value if key not found @return Boolean value or default if key is absent
2094 Gets an integer value from a COS object. @param firstKey First key to search. @param secondKey Second key to search.
2095 Retrieves a PDRectangle from the dictionary's RECT array. @return PDRectangle object or null if invalid.
2096 Retrieves a matrix object. Returns a Matrix object from the COS dictionary.
2097 Returns the AcroForm object for the document. Delegates to a helper method for form retrieval.
2098 Calculates the difference rectangle from the COS object. Returns a PDRectangle or null if the RD array is missing.
2099 Gets an integer value associated with the given key. @param key COSName representing the key @param defaultValue Default value if key not found @return Integer value or defaultValue if not present
2100 Retrieves a rectangle from the bead's COS array. @return A PDRectangle object or null if no rectangle exists.
2101 Sets the line dash pattern using the provided array and phase.
2102 Retrieves the line dash pattern from the dictionary. @return PDLineDashPattern object or null if not found.
2103 Creates a stencil image from a PDImage with specified paint. @param pdImage Source image for stencil. @param paint Paint to use for the stencil. @return Buffered image representing the stencil.
2104 Returns a Matrix object from the COS object's dictionary.
2105 Retrieves COS objects of specified types. @param type1 The first COSName type. @param type2 The second COSName type. @return List of COSObjects matching the types.
2106 Creates a PDInlineImage object from parameters, data, and resources. Decodes image data based on specified filters.
2107 Converts an integer code to its Unicode representation. Uses the default glyph list if one isn't provided.
2108 Checks if the document is encrypted. @return True if encrypted, false otherwise.
2109 Parses the FDF document. @return Parsed FDFDocument object. @throws IOException if parsing fails.
2110 Constructs a new PDThreadBead object, initializing its properties.
2111 Sets the application version in the dictionary. @param applicationVersion The version string to set.
2112 Initializes the PDRectlinearMeasureDictionary with a subtype.
2113 Retrieves an Optional Content Group by name. @param name Group name to search for. @return PDOptionalContentGroup or null if not found.
2114 Retrieves a collection of Optional Content Groups. Returns a Collection<PDOptionalContentGroup> objects.
2115 Returns a list of pattern names. Uses getNames with COSName.PATTERN as the key.
2116 Sets the modified date of the COS object to the given Calendar. @param c Calendar object representing the modified date.
2117 Sets the creation date of the COS object. @param creationDate The Calendar object representing the date.
2118 Sets the signing date in the dictionary. @param cal Calendar object representing the signing date.
2119 Adds key usage flags to the key usage string. Flags represent different cryptographic operations.
2120 Returns the parent node, or null if no parent exists.
2121 Retrieves the document outline. Returns null if no outline exists.
2122 Constructs a new PDAction object, initializing its COSDictionary.
2123 Initializes a shading pattern object. Sets the pattern type to shading pattern.
2124 Constructs a PDStructureTreeRoot object, initializing its type.
2125 Creates a PDStructureElement with a type and parent node. @param structureType The type of the structure element. @param parent The parent PDStructureNode.
2126 Sets a custom metadata value for a specified field. @param fieldName Name of the metadata field. @param fieldValue Value to set for the field.
2127 Creates a PDPageLabels object associated with a document. Initializes the labels map with a default range.
2128 Sets the formatted value and notifies listeners. @param formattedValue The new formatted value to set.
2129 Sets the string value for a given key in the COS object. @param name Key for the string value. @param value New string value to set.
2130 Sets the name of the COS object, notifying listeners. @param name The new name to set.
2131 Parses a PDF document. @param lenient lenient parsing flag; throws IOException if false. @return PDDocument object representing the parsed document.
2132 Sets the modification date of the document. @param date The Calendar object representing the date.
2133 Sets the creation date of the info object. @param date The Calendar object representing the date.
2134 Sets the creation date of the annotation. @param date The Calendar object representing the date.
2135 Sets the date value for a given key within an embedded dictionary. @param embedded The embedded COSName. @param key The key for the date value. @param date The Calendar date to set.
2136 Sets the "Base" string value within the COS object. @param base The string value to set.
2137 Constructs a PDTransition object with the default transition style.
2138 Sets the standard cryptographic filter dictionary. @param cryptFilterDictionary The dictionary to set.
2139 Sets the default crypt filter dictionary. Sets direct flag and associates with the default COS name.
2140 Sets the date for a given key using PDF name conversion. @param key The key for the date. @param date The Calendar object representing the date.
2141 Sets the style name for the COS object. @param s The style name to set.
2142 Sets the name associated with the action. @param name The name to set for the action.
2143 Sets the 'top' value in the array. Sets to null if y is -1.
2144 Initializes the destination array with the TYPE constant.
2145 Sets the 'top' value in the array. Null if y is -1, otherwise sets to y.
2146 Sets whether to fit the bounding box. If true, sets array element 1 to TYPE_BOUNDED.
2147 Initializes the destination array with a size of 5 and sets its name.
2148 Sets the value at index 2 of the array. If x is -1, sets to null; otherwise, sets the integer value.
2149 Sets the top value in the array. Sets to null if y is -1.
2150 Sets the zoom level. Sets array element to null or COSFloat.
2151 Sets the value at index 4 of the array. Null if x is -1.
2152 Decrypts dictionary entries recursively. @param dictionary Dictionary to decrypt. @param objNum Object number for decryption. @param genNum Generation number for decryption.
2153 Retrieves decode parameters from the PDF structure. @return List of decode parameters, may be empty.
2154 Retrieves the FDF catalog from the document. Creates a new catalog if one doesn't exist. @return The FDF catalog object.
2155 Sets the range for a component using the provided PDRange object.
2156 Sets the B range of the PDRange object. @param range The PDRange object to set.
2157 Retrieves decode parameters, trying /DP if /DecodeParms is absent.
2158 Sets the bottom coordinate. If y is -1, sets to null; otherwise, sets the int at index 3.
2159 Sets the value at index 2 of the array to x or null.
2160 Initializes a PDPageFitRectangleDestination object. Sets the array size to 6 and names element 1 as TYPE.
2161 Sets the rendering intent. @param ri The rendering intent string to set.
2162 Sets the name value in the COS object and notifies changes. @param name The name of the property to set. @param value The new value for the property.
2163 Appends a bead to the thread bead chain. @param append The bead to append to the chain.
2164 Sets the first bead and associates it with the thread. @param bead The PDThreadBead to set as the first bead.
2165 Inserts a new sibling after the current outline item. @param newSibling The item to insert as a sibling.
2166 Inserts a new sibling outline item before the current item. @param newSibling The outline item to insert.
2167 Returns the appearance dictionary, creating it if null.
2168 Constructs a PDTilingPattern object, initializing its properties.
2169 Gets the fractional space to allocate, or defaults to 0.5. @return PDRange object representing the allocated space.
2170 Initializes a PDPageFitDestination object. Sets the array size to 2 and name to TYPE.
2171 Sets whether to fit the bounding box. If true, sets array name to TYPE_BOUNDED, else to TYPE.
2172 Initializes a PDPageFitHeightDestination object. Sets the array size to 3 and sets name of element 1 to TYPE.
2173 Sets the left child value in the array. Sets array[2] to x or null if x is -1.
2174 Sets whether to fit the bounding box. If true, sets array name to TYPE_BOUNDED, else to TYPE.
2175 Returns the names associated with the extended graphics state.
2176 Returns a list of property names. Uses getNames(COSName.PROPERTIES) internally.
2177 Returns the standard cryptographic filter dictionary. Delegates to the internal method for retrieval.
2178 Gets string value from COS dictionary, or default if not found. @param embedded COS name of dictionary @param key COS name of key @param defaultValue Default value if key is not present
2179 Retrieves a string value by key, returns defaultValue if not found.
2180 Retrieves the "U" string value from the COS object.
2181 Retrieves the version string from the configuration dictionary.
2182 Retrieves the "Base" string value from the COS object.
2183 Retrieves a string value by name from the COS object. @param name The name of the string to retrieve. @return The string value, or null if not found.
2184 Retrieves the value of a custom metadata field. @param fieldName Name of the metadata field to retrieve. @return The value of the specified field, or null if not found.
2185 Retrieves a string value associated with the given property key. @param propertyKey Key for the property string value. @return String value or null if key doesn't exist.
2186 Returns the action associated with this PDF object.
2187 Creates and returns a PDAction object from the COS dictionary. Returns null if the dictionary is null.
2188 Creates and returns a PDAction object from the COS dictionary. Returns null if the dictionary is null.
2189 Retrieves the "C" action from the actions dictionary. Returns a PDAction object or null if not found.
2190 Retrieves the action associated with the "O" key. Returns a PDAction object or null if not found.
2191 Retrieves the 'C' action from the actions dictionary. Returns a PDAction object or null if not found.
2192 Returns the operation name, defaulting to OPERATION_OPEN.
2193 Retrieves the "V" action from the actions dictionary. Returns a PDAction object or null if not found.
2194 Returns the default appearance string from the dictionary. Returns an empty string if not found.
2195 Gets the 'On' value from the annotation widget's appearance. Returns "" if no 'On' value is found.
2196 Retrieves the normal appearance stream from the appearance dictionary. Returns null if no normal appearance is defined.
2197 Initializes a DictionaryEncoding with base encoding and differences. @param baseEncoding The base encoding COS name. @param differences COSArray representing differences to apply.
2198 Extracts a byte range from a PDF file and returns its contents. @param pdfFile The PDF file as a byte array. @return Extracted byte array.
2199 Extracts content from an InputStream based on byte range. @param pdfFile Input stream containing PDF data. @return Byte array of extracted content.
2200 Returns the background color. Uses getColor(COSName.BG) to retrieve the color.
2201 Returns the border color of the PDF form field. Uses getColor(COSName.BC) to retrieve the color.
2202 Returns the color using the default color type (C). @return The color object.
2203 Returns the fully qualified name, combining parent and partial names.
2204 Checks if a group with the given name exists. @param groupName The name of the group to check. @return True if the group exists, false otherwise.
2205 Retrieves the filename, trying multiple sources if needed.
2206 Retrieves the "F" action from the actions dictionary. Returns a PDAction object or null if not found.
2207 Gets the "K" action from the actions dictionary. Returns a PDAction object or null if not found.
2208 Retrieves the DP action from the actions dictionary. Returns the action or null if not found.
2209 Retrieves the line dash pattern. Creates a default if none exists.
2210 Checks if FontInfo matches CIDSystemInfo based on registry/ordering.
2211 Retrieves a list of FDF annotations from the FDF document. @return List of FDFAnnotation objects, or null if none exist.
2212 Returns the security handler. @throws IOException if no security handler is configured.
2213 Initializes the encryption handler with a COSDictionary. @param dictionary COSDictionary containing encryption details.
2214 Creates an object from a COSBase, returns null if creation fails.
2215 Gets the parent structure node. Returns null if parent is absent.
2216 Checks if the object is empty (only owner present).
2217 Checks if the attributes are N-channel. Returns true if attributes exist and are N-channel.
2218 Gets the open action. Returns PDDestination or PDAction, or null.
2219 Returns the action associated with the field. Uses PDActionFactory to create the action object.
2220 Retrieves the WP action from the actions dictionary. Returns a PDAction object or null if not found.
2221 Retrieves the DS action from the actions dictionary. Returns a PDAction object or null if not found.
2222 Retrieves the WS action from the actions dictionary. Returns the action or null if not found.
2223 Retrieves the WC action from the actions dictionary. Returns a PDAction object or null if not found.
2224 Retrieves the PI action from the actions dictionary. Returns the action or null if not found.
2225 Retrieves the PV action from the actions dictionary. Returns a PDAction object or null if not found.
2226 Retrieves the PC action from the actions dictionary. Returns a PDAction object or null if not found.
2227 Returns the transparency group, or creates it if null. @return PDTransparencyGroup object, or null if not present.
2228 Retrieves the PO action from the actions dictionary. Returns the action or null if not found.
2229 Retrieves the "FO" action from the action dictionary. Returns a PDAction object or null if not found.
2230 Retrieves the "U" action from the actions dictionary. Returns a PDAction object or null if no such action exists.
2231 Gets the "D" action from the actions dictionary. Returns a PDAction object or null if not found.
2232 Gets the 'X' action from the actions dictionary. Returns a PDAction object or null if not found.
2233 Retrieves the "E" action from the actions dictionary. Returns a PDAction object or null if not found.
2234 Retrieves the 'F' action from the COSDictionary. Creates and returns a PDAction object.
2235 Extracts JavaScript actions from the document's COS array. @return Map of action names to PDActionJavaScript objects.
2236 Retrieves the "BL" action from the actions dictionary. Returns a PDAction object or null if not found.
2237 Checks/calculates XRef offset; returns offset or -1 if invalid.
2238 Finds a named destination page. @param namedDest Named destination object to search for. @return PDPageDestination object or null if not found.
2239 Retrieves the line dash pattern. Creates a default if missing. @return PDLineDashPattern object representing the line dash pattern.
2240 Initializes the RubberStamp annotation with a subtype.
2241 Constructs a PDAnnotationPolyline, setting the subtype.
2242 Constructs a PDAnnotationPolygon, setting its subtype.
2243 Writes prepared objects to a COS stream, creating a compressed stream. @param stream COSStream to write to @return Updated COSStream
2244 Writes a COSDictionary to the output stream. @param output The output stream to write to. @param cosDictionary The COSDictionary to write.
2245 Constructs a new line annotation. Sets subtype and initial line data.
2246 Initializes the annotation ink object. Sets the subtype COS name to SUB_TYPE.
2247 Constructs a new attachment file. Sets the subtype COS name to the default value.
2248 Constructs a new FDFAnnotationUnderline object. Initializes the annotation subtype.
2249 Constructs a FDFAnnotationStrikeOut object, initializing subtype.
2250 Constructs a FDFAnnotationSquiggly object. Initializes the annotation subtype.
2251 Constructs a FDFAnnotationHighlight object, initializing subtype.
2252 Removes a child element and detaches it from its parent. @param structureElement The element to remove. @return True if the element was removed, false otherwise.
2253 Constructs a PDAnnotationSquareCircle with the given subtype. @param subType The subtype of the annotation.
2254 Creates a text markup annotation with the given subtype. @param subType The subtype of the annotation.
2255 Retrieves a list of annotation widgets. Returns an empty list if none exist.
2256 Creates and returns a PDAnnotationPopup object. Returns null if no popup dictionary exists.
2257 Creates a text markup annotation from a COSDictionary. @param field The COSDictionary containing annotation data.
2258 Creates a PDAnnotationText object from a COSDictionary.
2259 Constructs a PDAnnotationSquareCircle from a COSDictionary.
2260 Creates a PDAnnotationSound object from a COSDictionary. @param field The COSDictionary containing annotation sound data.
2261 Creates a RubberStamp annotation from a COSDictionary. @param field The COSDictionary representing the annotation.
2262 Creates a PDAnnotationPolyline object from a COSDictionary.
2263 Creates a PDAnnotationPolygon from a COSDictionary. @param dict The COSDictionary containing annotation data.
2264 Creates a line annotation from a COSDictionary. @param field The COSDictionary containing annotation data.
2265 Creates a PDAnnotationInk object from a COSDictionary.
2266 Creates a free text annotation using the provided COSDictionary.
2267 Creates a file attachment annotation from a COSDictionary. @param field The COSDictionary representing the attachment.
2268 Creates a PDAnnotationCaret object from a COSDictionary.
2269 Initializes the annotation text object. Sets the subtype name to SUB_TYPE.
2270 Inserts a new element before a reference element. @param newKid The element to insert. @param refKid The reference element.
2271 Appends a kid element, sets its parent to this element. @param structureElement The element to append as a kid.
2272 Retrieves the file specification. Returns a PDFileSpecification object.
2273 Creates a PDImageXObject from a BufferedImage. Supports only 1-bit grayscale images.
2274 Constructs a PDPageTree with a root dictionary and no parent. @param root The root COSDictionary for the page tree.
2275 Returns the page tree of the PDF document. Creates a new PDPageTree object.
2276 Validates the page tree dictionary and dereferencing. Throws IOException if the page tree root is not a dictionary.
2277 Retrieves the encode array, creating it if null. Uses size values to initialize if no encode exists.
2278 Constructs a PDFunctionType2 with a COSBase object. Initializes c0, c1 arrays and exponent from the COS object.
2279 Retrieves the attributes associated with this structure element. @return Revisions object containing PDAttributeObject instances.
2280 Retrieves a value by name, searching names and kids. @param name The name to search for. @return The value associated with the name, or null.
2281 Searches for a trailer dictionary using a brute-force approach.
2282 Searches for root and info dictionaries within the PDF document. Updates the trailer dictionary with found objects. Returns true if root found.
2283 Sets the value of a PDF attribute. @param attrName Attribute name. @param attrValue The new attribute value.
2284 Retrieves the file specification from the action dictionary. Returns a PDFileSpecification object.
2285 Retrieves the file specification from the action dictionary. Returns a PDFileSpecification object.
2286 Retrieves the file specification from the action dictionary. Returns a PDFileSpecification object.
2287 Retrieves the file specification. Returns a PDFileSpecification object.
2288 Retrieves the file specification from the action dictionary. Returns a PDFileSpecification object.
2289 Retrieves the file specification. Returns a PDFileSpecification object.
2290 Retrieves the file specification from the PDF dictionary. @return PDF file specification object. @throws IOException if an I/O error occurs.
2291 Constructs a PDPatternContentStream from a PDTilingPattern. @param pattern The tiling pattern to use.
2292 Retrieves embedded FDF specifications. @return List of PDFileSpecification objects or null. @throws IOException if an I/O error occurs.
2293 Retrieves the file specification from the stream. @return PDFileSpecification object representing the file. @throws IOException if an I/O error occurs.
2294 Returns the document version. Uses catalog version if >= 1.4.
2295 Sets the conversion factor for the COS object. @param conversionFactor The conversion factor to set.
2296 Sets the intensity value. @param i The intensity value to set.
2297 Sets the float value for a given key in the COS object. @param name Key for the float value. @param value The float value to set.
2298 Retrieves the file specification from the FDF document. @return PDFileSpecification object representing the file.
2299 Retrieves the print scaling preference. @return Print scaling value as a string.
2300 Retrieves the print area as a string from preferences. Uses BOUNDARY.CropBox as default if not found.
2301 Sets the MAC creator in the COSDictionary. @param macCreator The creator string to set.
2302 Creates a RandomAccessRead view based on filters or raw input. @return RandomAccessRead view. @throws IOException if an I/O error occurs.
2303 Gets the minimum revision number from the dictionary. Returns a long value representing the minimum revision.
2304 Retrieves the revision number from the dictionary. @return Revision number as a long value.
2305 Retrieves the next action(s) in a sequence. @return List of PDAction objects or null if none.
2306 Reads and returns the byte array of filtered PDF content. @param pdfFile The PDF file as a byte array. @return Filtered byte array of the PDF content.
2307 Sets the MAC/RES_FORK embedded string in the COSDictionary. @param macResFork The string value to set.
2308 Creates a color space from a COS array. @param rgb COS array representing the color space.
2309 Gets the decode range for a parameter. @param paramNum Parameter number to get decode range for. @return PDRange object or null if invalid parameter.
2310 Initializes a ShadingContext with shading data, color model, transform, and matrix.
2311 Reads and returns the byte array from the provided PDF input stream.
2312 Returns the default cryptographic filter dictionary. Delegates to getCryptFilterDictionary with DEFAULT_CRYPT_FILTER.
2313 Sets the MAC subtype within the COS dictionary. @param macSubtype The subtype string to set.
2314 Gets a float value by name from the COS object. @param name Name of the float value to retrieve. @return The float value associated with the name.
2315 Retrieves the base state from the COS dictionary. Returns a BaseState enum value.
2316 Adds a content group and adds it to the "Order" array. @param ocg The content group to add.
2317 Initializes encoding with font encoding and applies differences. @param fontEncoding The COSDictionary containing font encoding data.
2318 Gets a float value by name from COS object, using default if missing.
2319 Sets the "O" string value in the COS object. Value must be null, LABEL_PREFIX_TO_VALUE, or LABEL_SUFFIX_TO_VALUE.
2320 Returns the CYX value from the COS object as a float.
2321 Returns the leader offset value from the annotation.
2322 Returns the leader extend value from the annotation. @return float value representing the leader extend.
2323 Returns the leader line length from the annotation. @return The leader line length as a float.
2324 Returns the conversion factor from the COS object.
2325 Sets the prefix string for labels on the COS object. @param labelPrefixString The prefix string to set.
2326 Parses a base COS object from the input stream. Returns a COSBase object or null if end of stream.
2327 Returns the value of the 'V' property as a float.
2328 Enables/disables a content group. Returns true if found. @param group The group to enable/disable. @param enable True to enable, false to disable.
2329 Sets the decimal separator for the PDF document. @param decimalSeparator The decimal separator string.
2330 Creates a PDRange object using range values and a given size. @param n The size of the range. @return A PDRange object.
2331 Clips input values to ranges defined in rangesArray, or returns input.
2332 Returns the number of input parameters. Caches the value for efficiency.
2333 Creates a PDRange object using domain values and input size n.
2334 Calculates a sample index based on the input vector. @param vector Input vector of integers. @return Calculated sample index.
2335 Gets the PDRange for a parameter from decode values. @param paramNum Parameter number to get the range for. @return PDRange object or null if not found.
2336 Returns the number of output parameters. Uses cached value or calculates from rangeValues.
2337 Creates a PDRange object using the encode array and parameter n.
2338 Checks if the "Top" element is attached. Delegates to the isAttached method.
2339 Checks if the element is attached to the bottom. Delegates to the isAttached method.
2340 Checks if the element is attached to the "Left" side.
2341 Checks if the element is attached to the "Right" side.
2342 Initializes a PDCIDFont with a dictionary and parent font.
2343 Sets the thousands separator string in the COS object. @param thousandsSeparator The separator string to set.
2344 Retrieves a value by index from numbers or recursively from kids. @param index The index of the value to retrieve. @return The value at the given index, or null if not found.
2345 Retrieves a PDType3CharProc by character code. @param code Character code to retrieve. @return PDType3CharProc object or null if not found.
2346 Gets the rollover appearance entry. Returns a new entry or normal appearance if null.
2347 Gets the down appearance entry. Returns a new PDAppearanceEntry or the normal appearance.
2348 Returns the last child outline item. Uses internal method to retrieve the item.
2349 Returns the signature value.
2350 Initializes the DictionaryEncoding with base encoding. @param fontEncoding The font's dictionary. @param isNonSymbolic Indicates if the font is non-symbolic. @param builtIn The font's built-in encoding.
2351 Creates a FDFField from an XML element. @param fieldXML XML element representing the field. @throws IOException if an I/O error occurs.
2352 Returns the first child outline item. Uses COSName.FIRST to retrieve the child.
2353 Sets an integer value for a given key in the COS dictionary. @param name Key for the integer value @param value Integer value to set
2354 Creates a new Optional Content Group with the given name.
2355 Sets the denominator value in the COS object. @param denominator The denominator value to set.
2356 Gets the attachment name from the COS object.
2357 Retrieves the icon name as a String from the annotation.
2358 Retrieves the guideline style name from the dictionary.
2359 Gets name as string, using COSName conversion. @param key The key to look up. @param defaultValue Value if key is not found.
2360 Retrieves properties by name, using cache if available. @param name COSName identifying the properties @return PDPropertyList object or null if not found
2361 Gets the embedded date from a COSDictionary, or default if null. @param embedded The COSName of the embedded object. @param key The key for the date. @param defaultValue Default Calendar value if not found.
2362 Retrieves optional content as a PDPropertyList, or null.
2363 Gets a date value by key, using default if not found. @param key The key to look up the date by. @param defaultValue Default Calendar value if key is missing. @return A Calendar object representing the date.
2364 Returns the name as a string, using the "N" key.
2365 Sets the integer value for a given key in the COS object. @param name Key for the integer value. @param value The integer value to set.
2366 Retrieves the rendering intent from the configuration dictionary. @return RenderingIntent object or null if not found.
2367 Retrieves the print clip name from preferences. Returns a String, defaulting to BOUNDARY.CropBox.toString().
2368 Sets the "SS" string value in the COS object. @param labelSuffixString The string to set as the suffix.
2369 Retrieves the name from the COS object, using the provided name.
2370 Retrieves optional content as a PDPropertyList or null.
2371 Gets optional content as a PDPropertyList, or null if absent.
2372 Returns the highlight mode as a String. Uses COSName.H, defaults to HIGHLIGHT_MODE_INVERT.
2373 Gets the line ending style from the COS object.
2374 Returns the name of the COS object as a String.
2375 Returns the intensity value as a float. Retrieves the value from the COS object.
2376 Computes the font height based on bounding box and descriptor. @param font The PDFont object to analyze. @return The computed font height as a float.
2377 Retrieves the view clip setting as a String.
2378 Returns the view area as a string, using a default if missing.
2379 Gets the reading direction from preferences. Returns "L2R" if not found.
2380 Gets the non-fullscreen page mode from preferences. Returns the value or a default if not found.
2381 Gets the motion name from the COS object.
2382 Returns the dimension string from the COS object.
2383 Returns the reply type as a string.
2384 Returns the transition style as a String.
2385 Returns the type of the COS object. Returns "ExData" if the type is not set.
2386 Creates a default position vector based on the given CID. @param cid Identifier for calculating vector position. @return A Vector object representing the default position.
2387 Gets the style string from the COS object.
2388 Gets the highlighting mode from the COS object. Returns the name as a String, defaulting to "I".
2389 Gets the name from the COS object. Returns the name as a String.
2390 Retrieves a list of PDPropertyLists from the OCGs dictionary. Returns an empty list if no OCGs are found.
2391 Adjusts length1 based on 'exec' marker position in bytes. Returns adjusted length1 or original if invalid.
2392 Returns the decimal separator from the COS object, defaulting to ".".
2393 Parses a COS array from the input source. @return COSArray object representing the parsed array. @throws IOException if an I/O error occurs.
2394 Sets the value to the on-value.
2395 Checks if the current value is equal to the "on" value.
2396 Retrieves a set of "on" values from widgets and export values. Returns an empty set if no values are found.
2397 Adds font resources from a widget's appearance stream to AcroForm.
2398 Retrieves the normal appearance stream from an annotation. @param annotation The annotation to get the appearance from. @return The appearance stream, or null if it doesn't exist.
2399 Initializes the parser with a COSStream. @param stream The COSStream to parse. @throws IOException if an I/O error occurs.
2400 Parses a PDF document. @return Parsed PDDocument object. @throws IOException If an I/O error occurs.
2401 Adjusts length2, ensuring it's within valid bounds. @param length2 The length to validate. @return Validated length, or max length if invalid.
2402 Gets embedded string by key, using default encoding. @param embedded COS object containing the string. @param key Key to retrieve the string by.
2403 Finds the index of a page within the document. @param page The PDPage to search for. @return The index of the page, or -1 if not found.
2404 Gets the label position to value string from the COS object.
2405 Gets the label suffix string from the COS object. Returns the value of the "SS" attribute or a space if null.
2406 Gets the PDRange for a parameter from encode values. @param paramNum Parameter number to retrieve. @return PDRange object or null if not found.
2407 Recursively finds a COSDictionary by page number. @param pageNum target page number @param node current node @param encountered pages encountered so far @return COSDictionary or null if not found
2408 Gets the label prefix string from the COS object. Returns the string value associated with the "PS" key.
2409 Returns the thousands separator string from the COS object. Defaults to "," if not found.
2410 Loads an FDF document from an input stream. @param input Input stream containing the FDF data. @return FDFDocument object representing the loaded FDF.
2411 Loads an FDF document from a file. @param file The file containing the FDF document. @return FDFDocument object or null if an error occurs.
2412 Finds font matches based on descriptor and CID system info. @param fontDescriptor PDFontDescriptor object @param cidSystemInfo PDCIDSystemInfo object, optional filter @return PriorityQueue of FontMatch objects
2413 Encodes the image data for PNG format. @return Encoded PDImageXObject or null on error. @throws IOException if an I/O error occurs
2414 Constructs a PDAnnotationHighlight object, initializing subtype.
2415 Sets the version to the specified value, preventing downgrades. Updates document/catalog version based on document version.
2416 Creates a new PDF document, copying settings from the source. @return A new PDDocument object. @throws IOException if an I/O error occurs.
2417 Returns the pages in the PDF document. Delegates to the document catalog.
2418 Constructs a PDAnnotationSquiggly object, initializing its subtype.
2419 Sets the enabled state of a group by name. @param groupName Name of the group to modify. @param enable True to enable, false to disable. @return True if the group was found and enabled/disabled.
2420 Default constructor. Sets the subtype to SUB_TYPE constant.
2421 Constructs a PDActionThread, setting its subtype to SUB_TYPE.
2422 Initializes the form by setting its subtype to SUB_TYPE.
2423 Initializes a PDActionSound object, setting its subtype.
2424 Adds a child to this outline item, updating parent/sibling links.
2425 Adds a child outline item as the first child. Sets parent/sibling links accordingly.
2426 Checks if a content group is enabled based on COS dictionaries. @param group The content group to check. @return True if enabled, false if disabled, otherwise default.
2427 Constructs a strikeout annotation. Calls the superclass constructor with SUB_TYPE.
2428 Constructs a PDAnnotationUnderline object, extending PDAnnotation.
2429 Creates a PDAnnotationCircle object from a COSDictionary. @param field The COSDictionary containing annotation data.
2430 Draws a cloudy rectangle or polygon based on dimensions. @param left, bottom, right, top Rectangle coordinates. @param isEllipse Whether to draw as ellipse or rectangle.
2431 Creates a cloudy polygon from a 2D float array path. @param path Array of points, supports only point segments. @throws IOException if an I/O error occurs.
2432 Creates an underline annotation from a COSDictionary. @param dict The COSDictionary containing annotation data.
2433 Creates a strikeout annotation from a COSDictionary. @param dict The COSDictionary containing annotation data.
2434 Creates a squiggly annotation from a COSDictionary. @param dict The COSDictionary containing annotation data.
2435 Creates a highlight annotation from a COSDictionary. @param dict The COSDictionary containing annotation data.
2436 Constructs a PDLab object from a COSArray. @param lab The COSArray representing the lab data.
2437 Constructs a PDCalRGB object from a COSArray. @param rgb COSArray representing RGB color values.
2438 Constructs a PDCalGray object from a COSArray. @param array The COSArray containing the PDF data.
2439 Constructs a PDLab object, extending PDF object with LAB type.
2440 Constructs a PDCalRGB object, initializing with COSName.CALRGB.
2441 Constructs a PDCalGray object, initializing with COSName.CALGRAY.
2442 Creates a square annotation from a COSDictionary. @param field The COSDictionary representing the annotation.
2443 Constructs a PDActionResetForm, setting its subtype.
2444 Initializes the PDActionRemoteGoTo with a predefined subtype.
2445 Initializes a PDActionNamed object, setting its subtype.
2446 Initializes a PDActionMovie object, setting its subtype.
2447 Adds a shading object to the document. @param shading The shading object to add. @return COSName representing the added shading.
2448 Sets the value at the specified index. @param index The index of the value to set. @throws IllegalArgumentException if index is out of bounds.
2449 Adds an extended graphics state. @param extGState The extended graphics state object. @return COSName object representing the added state.
2450 Adds a color space to the document. @param colorSpace The color space object to add. @return The added color space name.
2451 Adds a font to the PDF dictionary. @param font The font object to add. @return The COSName representing the added font.
2452 Sets the line dash pattern based on border style or array. @param lineWidth line width @param bs border style dictionary @param border border array
2453 Sets the destination of the PDF page. @param page The PDF page to set as the destination.
2454 Reads the font encoding and determines if it's a predefined CMap.
2455 Adds a pattern to the COS object. @param pattern The pattern to add. @return The COS name representing the added pattern.
2456 Adds a property list to the COS object. @param properties The property list to add. @return COSName object representing the added property.
2457 Adds a form XObject to the document's resources. @param form The form XObject to add. @return The COS name of the added form.
2458 Initializes the PDActionLaunch object, setting its subtype.
2459 Initializes the PDActionJavaScript object. Sets the subtype to a predefined constant.
2460 Initializes the PDActionImportData object. Sets the subtype to SUB_TYPE constant.
2461 Initializes a PDActionHide object, setting its subtype.
2462 Initializes a PDActionGoTo object by setting its subtype.
2463 Initializes the embedded GoTo action by setting its subtype.
2464 Creates a PDPageLabels object from a document and dictionary. @param document The document to associate labels with. @param dict COSDictionary containing page label information.
2465 Gets the normal appearance entry, creating it if it's missing. Returns the PDAppearanceEntry object.
2466 Retrieves the rollover appearance entry. Creates if it's missing.
2467 Gets the embedded date for the given COS name. @param embedded COS name of the embedded object @param key COS name of the key @return Calendar object representing the date.
2468 Retrieves the down appearance entry from the appearance dictionary. Creates a new entry if it's a subdictionary.
2469 Adds an XObject with a given prefix. @param xobject The XObject to add. @param prefix Prefix for the XObject name. @return COSName of the added XObject.
2470 Adds an image to the document's resources. @param image The image to add. @return COSName representing the image resource.
2471 Returns the fractional display string from the COS object.
2472 Returns the start value from the root, defaulting to 1.
2473 Returns the count value from the root object. @return The count value, defaults to 0 if not found.
2474 Checks if a bit is set in the integer value of a COS field. @param field COS field to check. @param bitFlag Bit flag to check for.
2475 Gets an integer value associated with the given key. @param key The key to retrieve the integer value for. @param defaultValue Returns defaultValue if key not found.
2476 Gets an integer value associated with the given COS name. @param key The COS name to look up.
2477 Gets an integer value associated with the given key. @param key The key to retrieve the integer value for.
2478 Gets an integer from an embedded dictionary, returns default if null. @param embeddedDictionary The dictionary containing the embedded dictionary. @param key The key for the integer value. @param defaultValue The default value if the key is not found.
2479 Returns the order value from the COS object, defaults to 1.
2480 Checks if the window should be centered. @return True if centered, false otherwise.
2481 Checks if window fitting is enabled based on preferences. @return True if fit window is enabled, false otherwise.
2482 Checks if the menubar should be hidden based on preferences. @return True if menubar is hidden, false otherwise.
2483 Checks if the toolbar should be hidden based on preferences. @return True if toolbar is hidden, false otherwise.
2484 Checks if the fly area is opaque. Returns true if opaque, false otherwise.
2485 Returns whether appearances are needed, defaulting to false.
2486 Checks if trusted mode is enabled. Returns true if enabled, false otherwise.
2487 Checks if document title display is enabled in preferences. @return True if enabled, false otherwise.
2488 Checks if non-e-font warnings are disabled. Returns true if disabled, false otherwise.
2489 Gets the revision number from the COS object. Returns 0 if the revision number is not found.
2490 Returns the version number from the dictionary. Returns 0 if the version is not found.
2491 Returns the annotation index from the dictionary, -1 if not found.
2492 Returns the flags value. Uses COSName.FLAGS, defaults to 0 if not found.
2493 Returns the flags value. Returns 0 if not found.
2494 Returns the bits per coordinate, caching the value. Returns -1 if not found in COS object.
2495 Returns the bits per color component. Returns -1 if not initialized.
2496 Gets the number of vertices per row from a COS object. Returns -1 if the value is not found.
2497 Gets the bits per flag from the COS object, -1 if not found.
2498 Creates a PDShading object based on the shading type in dict. @param shadingDictionary COSDictionary containing shading info. @return PDShading object or throws IOException on error.
2499 Returns the length of the crypt filter dictionary. Returns 40 if not found.
2500 Returns the tiling type from the COS object, defaulting to 0.
2501 Creates a PDAbstractPattern based on the provided dictionary. @param dictionary COSDictionary containing pattern definition @param resourceCache Resource cache for pattern resources @return PDAbstractPattern instance
2502 Returns the flags value, caching it for subsequent calls.
2503 Returns the justification value from the annotation.
2504 Gets the permission flags from the COS dictionary. @return Integer representing the permission flags.
2505 Returns the revision number from the dictionary. Uses DEFAULT_VERSION if revision is not found.
2506 Gets the length value from the dictionary. Returns the integer value or 40 if not found.
2507 Returns the paint type from the COS object, defaults to 0.
2508 Gets annotation flags from the COS object. Returns integer value; defaults to 0 if not present.
2509 Checks if the document is a pre-release version. Returns true if pre-release, false otherwise.
2510 Checks if the COS object has a caption. Returns true if present, false otherwise.
2511 Creates a BufferedImage from a PDImage, region, subsampling, and color key. @param pdImage The PDF image. @param region The region to extract. @return A BufferedImage or throws IOException.
2512 Retrieves the raw raster data from a PDF image. @param pdImage PDF image object @return WritableRaster containing image data @throws IOException if image is empty or invalid.
2513 Gets the stencil image for the image with the given paint. @param paint The paint to use for the stencil. @return The stencil image.
2514 Calculates the anchor rectangle for a tiling pattern. @param pattern The tiling pattern to process. @return Rectangle2D representing the anchor rectangle.
2515 Creates a BufferedImage from a tiling pattern. @param drawer Drawer for rendering. @return BufferedImage containing the rendered pattern.
2516 Parses an appearance XML element and builds a COSDictionary. @param appearanceXML XML element representing the appearance. @return COSDictionary representing the parsed appearance.
2517 Returns the 'Open' flag from the COS object, defaulting to false.
2518 Retrieves the resources associated with the page. Returns PDResources object, caches if available.
2519 Gets the page rotation angle. Returns 0 if no rotation is set.
2520 Returns the mix value from the action object. @return True if mix is enabled, false otherwise.
2521 Returns the repeat flag from the action object. Returns false if the flag is not set.
2522 Returns whether the action is synchronous. Uses COSName.SYNCHRONOUS, defaults to false.
2523 Returns the value of the 'H' flag as a boolean. Defaults to true if 'H' is not present.
2524 Returns the text knockout flag from the dictionary. Defaults to true if the flag is not present.
2525 Checks if the alpha source flag is enabled. Returns true if enabled, false otherwise.
2526 Returns true if automatic stroke adjustment is enabled.
2527 Returns the overprint control value from the dictionary.
2528 Returns the media box rectangle, or U.S. Letter if not found. @return PDRectangle representing the media box.
2529 Returns whether anti-aliasing is enabled. Returns true if enabled, false otherwise.
2530 Checks if the COS object is isolated. Returns true if isolated, false otherwise.
2531 Checks if the template should be renamed. Returns true if the "RENAME" property is true, otherwise false.
2532 Checks if the annotation should scale to fit. @return True if scaling is enabled, false otherwise.
2533 Returns the caption as a boolean value. Defaults to false.
2534 Checks if metadata encryption is enabled. Returns true by default based on standard.
2535 Checks if the object is hidden. Returns true if hidden, false otherwise.
2536 Checks if the file system object is volatile. Returns true if volatile, false otherwise.
2537 Gets a boolean value by key, using default if not found. @param key The key to retrieve the boolean value for. @param defaultValue The default boolean value if key is absent. @return The boolean value associated with the key.
2538 Checks if the COS object represents a knockout. Returns true if K flag is set, false otherwise.
2539 Returns the value of the 'Q' integer parameter. Defaults to 0 if not found in COS object.
2540 Checks if window UI should be hidden based on preferences. @return True if hidden, false otherwise.
2541 Checks if a timestamp is required based on dictionary value.
2542 Sets a bit flag in a COS field's integer value. @param field COS field to modify @param bitFlag Bit flag to set/unset @param value If true, sets the flag; otherwise, unsets it.
2543 Creates a PDF object stream parser. @param stream COSStream to parse, @param document COSDocument context
2544 Initializes a PDCIDFontType0 font from a COSDictionary and parent. @param fontDictionary Font dictionary. @param parent Parent PDType0Font.
2545 Creates a PDCIDFontType2 font from a dictionary and parent. @param fontDictionary Font dictionary. @param parent Parent font. @param trueTypeFont TrueType font, or null to auto-detect.
2546 Reads a CMap from a COSBase object (Name or Stream). @param base COSBase object containing the CMap data. @throws IOException if the base object is not a Name or Stream.
2547 Gets the rotation value from the COS object. Returns 0 if the value is not found.
2548 Writes the document body, including root, info, and encrypt dicts. @param doc The COSDocument to write. @throws IOException if an I/O error occurs.
2549 Gets the name as a String, using default if name is null. @param name Name to retrieve. @param defaultValue Default value if name is null.
2550 Retrieves the style name from the COS object. Returns the style as a String, defaults to STYLE_SOLID.
2551 Retrieves the root of the structure tree. Returns PDStructureTreeRoot or null if not found.
2552 Retrieves a list of kid objects from the COS structure.
2553 Returns the encryption object, creating it if needed.
2554 Prepares decryption by initializing security handler and materials. Throws IOException on failure.
2555 Initializes Type1ShadingContext with provided parameters. @param shading Type1 shading object @param colorModel ColorModel @param xform AffineTransform @param matrix Matrix
2556 Gets the page number from the dictionary. Returns -1 if the page number is not found.
2557 Gets a color space by name. @param name The name of the color space. @return The color space object.
2558 Returns the top index from the COS object, defaults to 0.
2559 Returns a list of COS objects of the specified type. @param type COSName representing the object type to retrieve.
2560 Retrieves an embedded file using the UF dictionary. @return PDEmbeddedFile object or null if not a COSStream.
2561 Retrieves the embedded file (MAC) as a PDEmbeddedFile. @return PDEmbeddedFile object or null if not found.
2562 Retrieves the embedded file's DOS dictionary. @return PDEmbeddedFile object or null if not a stream.
2563 Removes page resources from the cache, excluding inherited resources.
2564 Retrieves the embedded file from the EF dictionary. @return PDEmbeddedFile object or null if not a stream.
2565 Gets the open count from a COS object, defaults to 0.
2566 Gets the embedded file from the dictionary using UNIX key. @return PDEmbeddedFile object or null if not found.
2567 Returns the Q value from the dictionary, defaults to 0.
2568 Initializes an AxialShadingContext with shading data and transforms.
2569 Creates a TriangleBasedShadingContext with given parameters. @param shading The shading to use. @param cm The color model. @param xform The affine transform. @param matrix The matrix.
2570 Creates a RadialShadingContext with specified parameters. @param shading The PDShadingType3 object.
2571 Sets the subfilter required flag on the COS object. @param flag The boolean value indicating if subfilter is required.
2572 Sets the locked contents flag on the COS object. @param lockedContents The flag value to set.
2573 Sets the "no view" toggle flag on the COS object. @param toggleNoView The value of the toggle flag (true/false).
2574 Prepares a PDF document for encryption using AES. @param doc The PDF document to be encrypted. @throws IOException if an I/O error occurs during encryption.
2575 Sets the flag indicating whether contents are locked. @param lockedContents True to lock, false to unlock.
2576 Sets whether legal attestation is required. @param flag True to require legal attestation, false otherwise.
2577 Sets the invisible flag of the COS object. @param invisible boolean value indicating invisibility
2578 Sets the hidden flag of the COS object. @param hidden The value to set the hidden flag to.
2579 Sets the printed flag on the COS object. @param printed The new value for the printed flag.
2580 Sets the no-zoom flag in the COS object. @param noZoom boolean value to set the flag to.
2581 Sets the filter required flag on the COS object. @param flag True to enable filtering, false otherwise.
2582 Sets whether a reason is required. @param flag True to require a reason, false otherwise.
2583 Sets the no-rotate flag on the COS object. @param noRotate boolean value for no-rotate setting
2584 Sets the "no view" flag on the COS object. @param noView True to set the flag, false to clear it.
2585 Sets the 'V' required flag on the COS object. @param flag The boolean value for the 'V' flag.
2586 Sets whether digest method is required for the COS object. @param flag True to require digest method, false otherwise.
2587 Sets the read-only flag on the COS object. @param readOnly The new read-only flag value.
2588 Sets the locked status of the COS object. @param locked The new locked status (true/false).
2589 Draws a PDInlineImage at specified coordinates with given dimensions. @param inlineImage Inline image to draw. @param x X coordinate. @param y Y coordinate. @param width Image width. @param height Image height.
2590 Sets the current font and size. @param font The PDF font to set. @param fontSize The font size.
2591 Sets whether to require adding revision information. @param flag boolean value to set the flag to
2592 Draws a cloudy ellipse using specified bounds. @param leftOrig Left bound of the ellipse. @param bottomOrig Bottom bound of the ellipse. @param rightOrig Right bound of the ellipse. @param topOrig Top bound of the ellipse.
2593 Creates a cloudy rectangle based on the provided rectangle. @param rd The rectangle to base the cloudy effect on. @throws IOException if an I/O error occurs.
2594 Sets whether the issuer is required. @param flag True to require issuer, false otherwise.
2595 Sets whether the subject field is required. @param flag true to require subject, false otherwise.
2596 Creates a PDAnnotation based on the provided COSBase object. @param base COSBase object representing the annotation. @throws IOException if the annotation type is unknown.
2597 Sets optional content properties and updates PDF version if needed. @param ocProperties Optional content properties to set.
2598 Writes the document header, including version and comments. @param doc The COSDocument to write the header for.
2599 Creates a new document if needed based on page split.
2600 Initializes a PDF renderer with the given document. @param document The PDF document to render.
2601 Constructs a PDFPrintable with provided parameters. @param document The PDF document. @param scaling Scaling factor for the document.
2602 Updates destinations in a document, fixing page references.
2603 Checks if an optional content group is enabled. @param group The optional content group to check. @return True if group is enabled or OCProperties is null.
2604 Creates a PDActionJavaScript object with the given JavaScript. @param js The JavaScript code to execute.
2605 Retrieves page labels from the document's COSDictionary. Returns PDPageLabels object or null if not present.
2606 Draws a PDF form object. Throws exception if called within a text block.
2607 Draws an image with the given matrix transform. @param image The image to draw. @param matrix The transformation matrix.
2608 Draws an image at specified coordinates with given dimensions. @param image The image to draw. @param x X coordinate. @param y Y coordinate. @param width Image width. @param height Image height.
2609 Adds marked content point with properties to the PDF. @param tag COSName tag for the marked content. @param propertyList Property list for the content.
2610 Begins marked content with tag and property list. Writes operator and handles simplified notation for MCID.
2611 Adds a shading to resources and applies the SHADING_FILL operator. @param shading The PDShading object to be added. @throws IOException If an I/O error occurs.
2612 Sets graphics state parameters. @param state The graphics state to set. @throws IOException if an I/O error occurs.
2613 Checks if a group is enabled. @param groupName The name of the group to check. @return True if the group is enabled, false otherwise.
2614 Increments the revision number by one.
2615 Sets the append-only flag for the dictionary. @param appendOnly True to enable append-only mode.
2616 Sets the sort flag on the COS object. @param sort The boolean value to set as the sort flag.
2617 Sets the multi-select flag on the COS object. @param multiSelect The boolean value for multi-select.
2618 Sets the do not spell check flag on the COS object. @param doNotSpellCheck flag indicating whether to disable spell check
2619 Sets the commit flag on selection change. @param commitOnSelChange Flag to set for commit on selection.
2620 Sets the combo flag on the COS object. @param combo The value to set the combo flag to.
2621 Sets the edit flag on the COS object. @param edit The boolean value for the edit flag.
2622 Sets the read-only flag for the dictionary. @param readonly True to make the dictionary read-only.
2623 Sets the required flag for the dictionary. @param required The boolean value to set as the required flag.
2624 Sets the "no export" flag in the dictionary. @param noExport True to disable exporting, false otherwise.
2625 Sets the flag indicating whether signatures exist. @param signaturesExist boolean value for signature existence
2626 Constructs a PushButton field, initializing its COS flag. @param acroForm The parent AcroForm object.
2627 Constructs a PDRadioButton with the given acroForm. Sets the radio button flag in the COS object.
2628 Sets the radiosInUnison flag in the COS object. @param radiosInUnison The value to set for radiosInUnison.
2629 Sets the multiline flag for the COS object. @param multiline True to enable multiline, false otherwise.
2630 Sets the password flag in the COS object. @param password The boolean value for the password flag.
2631 Sets the file select flag on the COS object. @param fileSelect The boolean value for file selection.
2632 Sets the do not spell check flag on the COS object. @param doNotSpellCheck boolean value for spell check setting
2633 Sets the do-not-scroll flag on the COS object. @param doNotScroll The value of the do-not-scroll flag.
2634 Sets the COMB flag in the COS object to the specified value.
2635 Sets the rich text flag on the COS object. @param richText The value of the rich text flag.
2636 Creates a PDImageXObject from a RandomAccessRead, extracting TIFF data. @param document PDDocument to associate with the image. @param reader RandomAccessRead object containing TIFF data. @param number Image number to extract. @return PDImageXObject or null if extraction fails.
2637 Sets the bold flag for the PDF content. @param bold True to set bold, false otherwise.
2638 Sets whether the subject distinguished name is required. @param flag True to require, false otherwise.
2639 Sets the "toggle no view" flag using the provided boolean value.
2640 Sets the locked flag on the annotation. @param locked The new value for the locked flag.
2641 Returns the number of pages in the document.
2642 Sets the "no view" flag in the annotation. @param noView True to set the flag, false otherwise.
2643 Sets the no-rotate flag in the annotation. @param noRotate boolean value for no-rotate setting
2644 Sets the OID required flag in the dictionary. @param flag True if OID is required, false otherwise.
2645 Sets the no-zoom flag in the annotation. @param noZoom True to disable zoom, false otherwise.
2646 Sets the hidden flag on the annotation. @param hidden The value to set the hidden flag to.
2647 Sets the invisible flag on the annotation. @param invisible If true, annotation is invisible.
2648 Retrieves a page from the document at the specified index. @param index the index of the page to retrieve @return PDPage object representing the page
2649 Sets the italic flag in the COS object. @param italic boolean value to set for italic.
2650 Sets whether a URL is required. @param flag True if URL is required, false otherwise.
2651 Sets the key usage flag in the dictionary. @param flag The boolean value for key usage requirement.
2652 Adds a new child outline item as the first child. @param newChild The outline item to add.
2653 Adds a child outline item to the end of the list. @param newChild The outline item to add.
2654 Parses an object stream and returns the previous object offset. @param objByteOffset Offset of the object. @param isStandalone Whether the stream is standalone. @return Previous object offset.
2655 Sets the "printed" flag on the annotation. @param printed The new value for the printed flag.
2656 Sets the read-only flag on the annotation. @param readOnly True to set read-only, false otherwise.
2657 Checks if the COS object has the no-zoom flag set. @return True if no-zoom flag is set, false otherwise.
2658 Retrieves the line join style from the dictionary. @return int representing the line join style.
2659 Constructs a GouraudShadingContext with given parameters. @param shading The shading object. @param colorModel The color model. @param xform The affine transform. @param matrix The matrix.
2660 Creates a COS input stream using default decode options. @return COSInputStream object @throws IOException if an I/O error occurs
2661 Parses an object from an object stream, returning a COSBase. @param objstmObjNr Object stream number. @param key COSObjectKey for the object. @return COSBase object or null if not found.
2662 Returns an InputStream for the contents, or an empty stream.
2663 Constructs a PDCIDFontType2 with a parent font, using default encoding. @param fontDictionary Font dictionary. @param parent Parent font.
2664 Checks if the COS object has the "no view" flag set. Returns true if set, false otherwise.
2665 Creates and returns a PDCIDFontType2 object. Uses existing cidFont, parent, and ttf objects.
2666 Checks if the object is hidden. Returns true if the hidden flag is set, false otherwise.
2667 Checks if the object is invisible based on its flag. @return True if invisible, false otherwise.
2668 Checks if the contents are locked based on a flag.
2669 Checks if the PDF object should not be rotated. @return True if no rotation is required, false otherwise.
2670 Retrieves a PDXObject by name, using cache if available. @param name XObject name @return PDXObject or null if not found
2671 Paints a tiling pattern onto the page using the provided parameters.
2672 Checks if the node is open based on the open count. @return True if open count is greater than 0, false otherwise.
2673 Checks if the COS object is read-only. Returns true if the 'F' flag is set to FLAG_READ_ONLY.
2674 Creates a PDF field based on the field type. @param form The form object. @param field The field dictionary. @param parent The parent field. @return A PDF field object or null if unknown type.
2675 Checks if the "no view" toggle flag is enabled. Returns true if enabled, false otherwise.
2676 Checks if the object is locked. Returns true if the 'locked' flag is set, false otherwise.
2677 Checks if the object is read-only based on annotation flag.
2678 Returns the line cap style from the dictionary. @return An integer representing the line cap style.
2679 Checks if the annotation flag indicates no rotation. @return True if no rotation is specified, false otherwise.
2680 Returns the parent structure ID from the COS object.
2681 Returns the value of the 'P' property from the dictionary.
2682 Checks if no-zoom flag is set in the annotation. Returns true if set, false otherwise.
2683 Returns the maximum length value from the COS object.
2684 Gets an integer value by name from COS object, returns default if not found.
2685 Checks if the object is invisible based on its annotation flag.
2686 Checks if the object is hidden. Returns true if the hidden flag is set, false otherwise.
2687 Gets a CIDFontMapping based on baseFont, descriptor, and CID info.
2688 Gets the MAC ResFork string from the COS dictionary. Returns null if the dictionary or string is not found.
2689 Gets the MAC creator from the COS parameters. Returns null if parameters are not found.
2690 Gets the MAC subtype from the COSDictionary. Returns null if the dictionary or subtype is missing.
2691 Translates a character code to a glyph ID, handling embedded/non-embedded fonts. @param code The character code to translate. @return Glyph ID or 0 if not found.
2692 Gets the glyph name for a given Unicode code point. @param code The Unicode code point. @return Glyph name or ".notdef" if not found.
2693 Checks if the document's print flag is set. Returns true if printed, false otherwise.
2694 Applies protection policy using a security handler. @param policy The protection policy to apply. @throws IOException If no security handler is available.
2695 Adds a COSBase object to the object pool, managing its key. @param key object key @param base COSBase object to add @return The original COSBase object.
2696 Retrieves the role map from the structure tree root. Returns an empty map if the root is null.
2697 Returns the MCID value from properties, -1 if properties are null.
2698 Returns the next key of the parent tree. Retrieves the value from the COS object.
2699 Returns the MCID value from the COS object as an integer.
2700 Gets an RGB BufferedImage from a PDImage with a color key. @param pdImage The PDF image. @param colorKey Color key for image conversion.
2701 Retrieves resources, prioritizing stream resources. @param contentStream Stream containing potential resources. @return PDResources object, initially parent resources.
2702 Checks if the annotation has the "no view" flag set. Returns true if set, false otherwise.
2703 Calculates an AffineTransform to center an overlay on a page. @param page The page to calculate transform for. @param overlayMediaBox Overlay rectangle dimensions. @return AffineTransform object.
2704 Validates if the given value is a valid option. @param value The value to check against allowed options.
2705 Returns the rotated media box of a page. Rotates if page rotation is 90 or 270 degrees. @param page The page to get the media box from. @return The rotated PDRectangle.
2706 Checks if the element is marked. Returns true if "Marked" is true in the dictionary, false otherwise.
2707 Checks if user properties are enabled in the dictionary. Returns true if enabled, false otherwise.
2708 Checks if a suspect exists in the dictionary. @return True if "Suspects" exists and is true, false otherwise.
2709 Returns the "Open" boolean value from the COS object, defaults to false.
2710 Checks if the document field "FD" is true. Returns true if "FD" is true, false otherwise.
2711 Returns the non-stroking overprint control from the dictionary.
2712 Gets an integer from an embedded dictionary by key. @param embeddedDictionary The dictionary to search. @param key The key to retrieve the integer for.
2713 Returns the denominator value from the COS object.
2714 Wraps an OutputStream with a PredictorOutputStream if predictor > 1. @param out The original OutputStream. @param decodeParams COS dictionary with predictor parameters. @return Wrapped OutputStream or original if no predictor.
2715 Returns the number of structural parents. Retrieves the value from the 'page' object.
2716 Returns the number of bits per sample from the COS object.
2717 Checks if mouse position tracking is enabled. Returns true if "IsMap" is true in the action, false otherwise.
2718 Gets an opaque image from a region with specified subsampling. @param region The region to extract. @param subsampling Subsampling factor. @return BufferedImage object.
2719 Writes the document, handling encryption and ID generation. @param doc The PDDocument to write. @param signInterface Signature interface.
2720 Checks if a flag is required in the dictionary. Returns true if the flag is set, false otherwise.
2721 Checks if the PDF has the no-export flag set. @return True if the no-export flag is set, false otherwise.
2722 Checks if radios are in unison, using a COS flag.
2723 Checks if the COS object is multiline. Returns true if the FF flag is set to FLAG_MULTILINE.
2724 Checks if the COS object has a password flag set. @return True if password flag is set, false otherwise.
2725 Checks if the COS object's file select flag is set.
2726 Checks if spell checking is disabled for a COS object. @return True if spell check is disabled, false otherwise.
2727 Checks if scrolling should be disabled based on COS flags. @return True if scrolling is disabled, false otherwise.
2728 Checks if the COS object is a COMB object. Returns true if the FF flag is set to FLAG_COMB.
2729 Checks if the COS object represents rich text. Returns true if the FF flag is set to FLAG_RICH_TEXT.
2730 Prepares decryption by extracting recipient information. @param encryption Encryption object containing decryption details. @param documentIDArray COSArray representing document IDs. @param decryptionMaterial Decryption material for decryption.
2731 Retrieves the owner key as bytes. Returns null if not found.
2732 Checks if the no-view toggle flag is enabled. Returns true if enabled, false otherwise.
2733 Creates a displacement vector based on the given code. @param code code used to calculate displacement @return A Vector representing the displacement.
2734 Checks if the dictionary is read-only. Returns true if the FF flag is set to FLAG_READ_ONLY.
2735 Checks if the COS object's FF flag is set to FLAG_SORT.
2736 Checks if the COS object has the "edit" flag set.
2737 Checks if a subfilter is required based on the COS object.
2738 Checks if filtering is required based on a flag. Returns true if the filter flag is set, false otherwise.
2739 Processes stream operators from a content stream. Handles operator parsing and color operator processing.
2740 Checks if the PDF object is flagged as printed. @return True if printed flag is set, false otherwise.
2741 Adds a page to the document's root, updating parent counts. @param page The PDPage object to add.
2742 Removes a COSDictionary node from its parent's kids array. Updates ancestor counts after removal.
2743 Calculates the width of a string encoded as bytes. @param text String to calculate width for. @return The calculated width as a float.
2744 Checks if spell checking is disabled for this object.
2745 Sets the hidden state. @param hidden The new hidden state (true/false).
2746 Checks if a commit is triggered on selection change.
2747 Clips a rectangle to the media box, ensuring it stays within bounds. @param box The rectangle to clip. @return Clipped PDRectangle.
2748 Checks if the COS object represents a combo. Returns true if the FF flag is set to FLAG_COMBO.
2749 Checks if the document's contents are locked. Returns true if locked, false otherwise.
2750 Adds an attribute object to the COS array associated with key 'A'.
2751 Checks if multi-select is enabled. Returns true if the FF flag is set on the COS object.
2752 Checks if the COS object represents a radio button. Returns true if the FF flag is set to FLAG_RADIO.
2753 Retrieves the user key as a byte array. Returns null if the user key is not found.
2754 Retrieves a pattern by name, using cache if available. @param name COSName representing the pattern's name. @return PDAbstractPattern object or null if not found.
2755 Checks if the 'V' flag is set on the COS object. Returns true if set, false otherwise.
2756 Checks if a reason is required based on the COS object.
2757 Checks if legal attestation is required based on COS flag.
2758 Checks if adding revision info is required based on COS flag.
2759 Checks if the subject field is required based on dictionary flags.
2760 Adds a class name to the COS array associated with key 'C'. Updates revision number.
2761 Checks if the issuer flag is set in the dictionary. Returns true if set, false otherwise.
2762 Checks if the OID flag is required in the dictionary. @return True if OID flag is required, false otherwise.
2763 Checks if digest method is required based on COS flag.
2764 Checks if key usage flag is required in the dictionary. Returns true if required, false otherwise.
2765 Checks if a URL is required based on the dictionary flag.
2766 Checks if the PDF content is italic. Returns true if italic flag is set, false otherwise.
2767 Loads an FDF document from the specified file. @param filename Path to the FDF file. @return FDFDocument object.
2768 Checks if the PDF object is bold. Returns true if bold flag is set, false otherwise.
2769 Checks if signature existence flag is set in the dictionary. Returns true if the flag is set, false otherwise.
2770 Checks if the COS object is locked. Returns true if locked, false otherwise.
2771 Checks if the dictionary is append-only. Returns true if the flag is set, false otherwise.
2772 Retrieves a PDShading object by name, caching if available. @param name Shading name; used to fetch shading. @return PDShading object or null if not found.
2773 Checks if the Subject DN flag is required in the dictionary. Returns true if required, false otherwise.
2774 Updates the COS array with a new revision number. @param attributeObject The attribute object to check.
2775 Returns the shading object, creating it if it doesn't exist. @return PDShading object or null if shading is not defined.
2776 Checks if the COS object represents a push button. Returns true if the FF flag is set to FLAG_PUSHBUTTON.
2777 Creates a PDFPageable object. @param document The PDF document. @param orientation Page orientation.
2778 Loads a PDF document from a RandomAccessRead. @param randomAccessRead Source for PDF data. @param password Password for decryption, if any. @return PDDocument object representing the PDF.
2779 Adds a page to the document and updates the highest imported object number. @param page The page to add.
2780 Loads a PDF document from a RandomAccessRead, optionally with a password.
2781 Loads a PDF document from a RandomAccessRead. @param randomAccessRead Input stream for PDF data. @return A PDDocument object representing the PDF.
2782 Loads a PDF document from byte array with optional password & keystore. @param input PDF data, password, keystore, alias. @return PDDocument object.
2783 Initializes the PageExtractor with a PDF document. @param sourceDocument The PDF document to extract pages from.
2784 Sets the visual signature from a file. @param file The file containing the visual signature. @throws IOException if an I/O error occurs.
2785 Parses a COSBase object dynamically, fetching or parsing as needed. @param objKey COSObjectKey identifying the object @return COSBase object or null if not found.
2786 Sets the fixed pitch flag. @param flag True to enable fixed pitch, false otherwise.
2787 Sets the Serif flag. @param flag The value to set the Serif flag to (true/false).
2788 Sets the symbolic flag. @param flag The value to set the symbolic flag to.
2789 Sets the script execution flag. @param flag True to enable, false to disable.
2790 Sets the non-symbolic flag. @param flag True to set the flag, false to clear it.
2791 Sets the italic flag. @param flag True to set italic, false to unset it.
2792 Creates an FDFAnnotation from an XML element. @param element XML element representing the annotation. @throws IOException if required attributes are missing.
2793 Creates a PDImageXObject from a file. @param document PDDocument object @param file File to read image from @param number image number @return PDImageXObject
2794 Creates a PDImageXObject from a byte array. @param document The document. @param byteArray Image data as bytes. @param number Image number. @return PDImageXObject created from the byte array.
2795 Sets the force bold flag. @param flag True to force bold, false otherwise.
2796 Sets the small-cap flag. @param flag The boolean value to set the flag to.
2797 Sets the ALL_CAP flag. @param flag The value to set the flag to (true/false).
2798 Parses Xref tables and resolves references, updating document state. @param document The COSDocument to update. @param startXRefOffset Starting offset for Xref parsing.
2799 Initializes visual signature from an input stream. @param is Input stream containing signature data. @throws IOException if an I/O error occurs.
2800 Updates the open count of the parent node by a delta. @param delta The amount to add to the parent's open count.
2801 Sets the non-stroking color, writing corresponding PDF operators.
2802 Sets the stroking color, writing operators to the PDF stream. @param color The PDColor object representing the color. @throws IOException if an I/O error occurs.
2803 Retrieves a page from the document at the specified index. @param pageIndex Index of the page to retrieve (0-based). @return The PDPage object at the given index.
2804 Retrieves the page number from an array. Returns -1 if empty.
2805 Prepares the document's encryption dictionary for encryption. Sets version, revision, permissions, and passwords.
2806 Draws an inline image at the specified coordinates. @param inlineImage The image to draw. @param x The x coordinate. @param y The y coordinate.
2807 Sets the value. Updates via option or direct value update. @param value The value to set. @throws IOException if an I/O error occurs.
2808 Gets the crop box of the page, or the media box if none is defined.
2809 Inserts a generated combined appearance into the content stream. @param contents Stream to add appearance to.
2810 Recursively adds COS objects to the object pool. Handles streams, dictionaries, arrays, and nested objects.
2811 Returns the standard structure type, mapping if necessary.
2812 Creates a PDCIDFont based on the provided dictionary and parent.
2813 Collects patches from a COS stream, decoding and processing them. @param xform AffineTransform for coordinate transformations. @param matrix Matrix for coordinate transformations. @param controlPoints Control points for patch processing. @return List of Patch objects extracted from the stream.
2814 Creates an input stream from the underlying COS stream. @return COSInputStream object for reading COS data. @throws IOException if an I/O error occurs.
2815 Converts the stream to a string. Returns an empty string if an IO error occurs.
2816 Creates a cloudy ellipse based on the provided rectangle. @param rd The rectangle defining the ellipse's bounds.
2817 Notifies the structure element about a change. Calls attributeChanged on the structure element.
2818 Saves the document incrementally to the given output stream. @param output Output stream to save the incremental changes to. @throws IOException if an I/O error occurs.
2819 Writes a PDF document to an output stream. @param doc The PDF document to write. @throws IOException if an I/O error occurs.
2820 Sets the default value of the COS object. @param value The default value to set.
2821 Retrieves the parent annotation markup. Returns null if the parent annotation is not a PDAnnotationMarkup.
2822 Retrieves the "In-Reply-To" annotation. @return PDAnnotation object or null if not present.
2823 Retrieves the referenced COS object, potentially an XObject or annotation. Returns null if the object cannot be determined.
2824 Retrieves annotations from a page, filtered by the given criteria. @param annotationFilter Filter to apply to annotations @return List of matching PDAnnotation objects
2825 Imports optional content properties from source document to target.
2826 Constructs a PDFPrintable with a default PDFRenderer. @param document The PDF document. @param scaling Scaling factor.
2827 Decodes an image from an input stream to an output stream. @param encoded Input stream containing the encoded image. @param decoded Output stream to write the decoded image.
2828 Fetches and constructs a CMap UCS2 based on font properties.
2829 Appends a marked content kid to the parent. @param markedContent The PDMarkedContent object to append.
2830 Removes the node at the given index. @param index index of the node to remove
2831 Decodes data from an input stream to an output stream. @param encoded Input stream with encoded data. @param decoded Output stream for decoded data. @param parameters COSDictionary containing decode parameters. @param index Index of the stream. @return DecodeResult object containing parameters.
2832 Returns an opaque image. @throws IOException if an I/O error occurs
2833 Calls the overloaded constructor with null parameters. @param drawer PageDrawer instance @param pattern PDTilingPattern instance @param xform AffineTransform for tiling
2834 Checks if a field is a comb field (single-line, not password/file).
2835 Processes a tiling pattern, applying transformations and clipping. @param tilingPattern The tiling pattern to process.
2836 Checks if the "all caps" flag is enabled. Returns true if enabled, false otherwise.
2837 Checks if the italic flag is set. Returns true if italic is enabled, false otherwise.
2838 Checks if the non-symbolic flag is set. Returns true if the flag is on, false otherwise.
2839 Checks if the script flag is set. Returns true if the flag is on, false otherwise.
2840 Checks if the symbolic flag is set. Returns true if set, false otherwise.
2841 Checks if the serif flag is enabled. Returns true if serif is enabled, false otherwise.
2842 Retrieves a pattern by color. @param color The color for which to retrieve the pattern. @return The pattern object. @throws IOException if pattern is not found.
2843 Creates a PDField instance from a COSDictionary. @param form The PDF form. @param field The field dictionary. @param parent The parent non-terminal field.
2844 Inserts a new page after a specified previous page in a PDF. @param newPage The page to insert. @param prevPage The page after which to insert.
2845 Processes a PDF content stream, handling resources and transformations.
2846 Checks if the "small cap" flag is enabled. Uses isFlagBitOn to determine flag status.
2847 Removes a page from the document. @param page The page to remove.
2848 Inserts a new page before an existing page in the document. @param newPage The page to insert. @param nextPage The page before which to insert.
2849 Processes an annotation's appearance stream, adjusting its matrix. @param annotation The annotation to process. @param appearance The appearance stream to process.
2850 Processes a Type 3 stream, applying transformations and operators. @param charProc The character processor for the stream. @param textRenderingMatrix Transformation matrix for text rendering.
2851 Processes a transparency group, handling resources and transformations. @param group The transparency group to process. @throws IOException if an I/O error occurs.
2852 Prepares decryption by setting up filters and keys. @param encryption PDF encryption object @param documentIDArray Array of document IDs @param decryptionMaterial Decryption material to use
2853 Checks if the fixed-pitch flag is enabled. Returns true if enabled, false otherwise.
2854 Returns the width of the space character for the font. Uses various methods to determine the width, defaulting to 250f. @return float width of the space character
2855 Checks if the force bold flag is enabled. Returns true if enabled, false otherwise.
2856 Creates a FDF annotation stamp from an Element. Parses appearance XML from the element, if available.
2857 Creates a FDF annotation square from an Element. Sets subtype and parses interior color, initializes fringe.
2858 Constructs a FDFAnnotationFreeText object from an Element. Parses attributes like justification, appearance, and rotation.
2859 Parses ink gestures from an Element, storing them in inklist.
2860 Creates a FDFAnnotationLine from an Element, parsing attributes.
2861 Creates a FDF annotation link from an Element. Parses URI from element for action.
2862 Creates a FDF annotation polygon from an XML element. Parses interior color if present; sets subtype.
2863 Creates a FDF annotation polyline from a PDF element.
2864 Retrieves all annotations. @return A list of all annotations.
2865 Imports a page as a form XObject, copying resources and transforming it. @param sourceDoc Source PDF document. @param page The page to import. @return A PDFormXObject representing the imported page.
2866 Constructs a PDFPrintable with default pageable. @param document PDDocument, Scaling, showPageBorder, dpi
2867 Creates a FDF annotation sound from a PDF element. @param element The PDF element to create the sound from. @throws IOException if an I/O error occurs.
2868 Starts a marked content sequence, handling hidden OCGs. @param tag COSName tag for the sequence. @param properties Dictionary with sequence properties.
2869 Displays a PDF form, skipping if hidden. Restores linePath if rendered.
2870 Sets the non-stroking color, writing operators and operands. @param color The PDColor to set. @throws IOException if an I/O error occurs.
2871 Finds the destination page in a PDF document. @param doc The PDF document to search. @return The destination page or null if not found.
2872 Calculates page dimensions based on the given page number. @param document The PDF document. @param page The page number to calculate dimensions for.
2873 Imports a page from another PDF page into the current document. @param page The page to import. @return The imported page.
2874 Creates a PDF template by adding a page to a new document. @param page The page to add to the template.
2875 Creates a PDFPageable from a PDDocument with default settings.
2876 Constructs a PDFPageable with default settings. @param document The PDF document. @param orientation Page orientation (portrait/landscape).
2877 Constructs a PDFPageable with default page count mode. @param document The PDF document. @param orientation Page orientation. @param showPageBorder Whether to show page border.
2878 Constructs a PDFPageable with default fit width. @param document The PDF document. @param orientation Page orientation. @param showPageBorder Whether to show page border. @param dpi Resolution in dots per inch.
2879 Loads a PDF document from a byte array. @param input PDF data as bytes @param password Password for the PDF, if any @return Loaded PDF document
2880 Loads a PDF document from a file. @param file The file containing the PDF. @param password Password for the PDF, if any. @return A PDDocument object.
2881 Loads a PDF document from a file, using optional password, keystore, and alias.
2882 Constructs a FDF annotation file attachment from a PDF element.
2883 Sets the stroking color, writing necessary operators to the stream. @param color The PDColor to set. @throws IOException if an I/O error occurs.
2884 Retrieves the trailer dictionary from the PDF document. Rebuilds if necessary based on lenient mode and errors. @return COSDictionary trailer object.
2885 Creates a FDFAnnotationTextMarkup from an Element. Parses coords attribute, throws IOException if invalid.
2886 Constructs a FDFAnnotationText object from an Element. Initializes subtype, icon, and state/stateModel attributes.
2887 Sets the visual signature using properties. @param visSignatureProperties Properties for the visual signature. @throws IOException If an I/O error occurs.
2888 Creates a FDF annotation circle from an Element. Parses interior color if present; initializes fringe.
2889 Removes a page from the document's page list. @param page The page to remove.
2890 Creates a PDImageXObject from a file. @param document The document to associate with the image. @param file The file containing the image. @return The created PDImageXObject.
2891 Gets string value from COSBase, returns "" if null/unsupported.
2892 Recursively finds a child field matching the given name. @param name Field names to match, @param nameIndex current index @return PDField object or null if not found.
2893 Retrieves a list of PDF form fields. Returns an empty list if no fields are present.
2894 Creates a Paint object from a PDColor, handling various color spaces. @param color The PDColor to create a Paint from. @return A Paint object or a transparent color if an error occurs.
2895 Determines the fallback font name based on descriptor flags. @param fontDescriptor Font descriptor object to analyze. @return String representing the fallback font name.
2896 Returns the symbolic flag from the font descriptor, or null.
2897 Extracts lines of text from content, respecting font, size, and width. @param font PDFont object @param fontSize font size @param width maximum line width @return List of Line objects representing extracted lines
2898 Retrieves the value of a field. Returns String, List, or null. Throws IOException if value type is unknown.
2899 Displays a glyph based on provided parameters. @param textMatrix Text rendering matrix. @param font PDF font object. @param code Character code. @param displacement Displacement vector.
2900 Saves the document to an output stream with optional compression. @param output Output stream to save to. @param compressParameters Compression parameters to use. @throws IOException if an I/O error occurs.
2901 Notifies listeners if the COSBase value has changed. @param oldBase The previous COSBase value. @param newBase The new COSBase value.
2902 Initializes the page with given parameters. @param page The PDF page to initialize.
2903 Gets the bleed box of the page. Returns crop box if bleed box is null.
2904 Gets the trim box of the page. Returns crop box if trim box is null.
2905 Gets the art box rectangle. Returns crop box if art box is null.
2906 Gets the rotated crop box of a page. @param page the page to get the crop box from @return PDRectangle representing the rotated crop box
2907 Writes a COSDocument to a PDF file. @param doc The COSDocument to write. @throws IOException if an I/O error occurs.
2908 Retrieves rich text content from a PDF field. Returns null if no rich text is found.
2909 Gets the "Before" value from the dictionary. Returns string representation or null if not found.
2910 Gets the value of the "After" entry, as a String or null.
2911 Creates a FDFAnnotationCaret from an Element. @param element The Element to create the caret from. @throws IOException if an I/O error occurs.
2912 Loads the ICC profile from the input stream. Falls back if error.
2913 Initializes a COSWriterCompressionPool with a document and parameters. @param document PDDocument to compress @param parameters Compression parameters, or default if null
2914 Sets the string value of the COS object. @param value The string value to set. @throws IOException if an I/O error occurs.
2915 Creates a Type 5 shading context with given parameters. @param shading Shading object, color model, transform, matrix, bounds
2916 Creates a Type 4 shading context with given parameters. @param shading The Type4 shading object.
2917 Creates a PatchMeshesShadingContext. @param shading Shading type, color model, transform, matrix.
2918 Retrieves the samples array. Creates it if it's null. @return int[][] samples array containing the sample values.
2919 Converts the object to a byte array using an input stream. @throws IOException if an I/O error occurs during the process.
2920 Creates a LayoutPage object from a PDPage. @param page The PDPage to create the LayoutPage from. @return A LayoutPage object.
2921 Returns string from COSBase, or empty string if neither string nor stream.
2922 Retrieves rich content from COS object. Returns string or null.
2923 Retrieves the action string from the action dictionary. Returns null if no action is found or not a string/stream.
2924 Processes a transparency group. @param form The transparency group to process.
2925 Retrieves child fields. Returns an empty list if none exist.
2926 Displays a Type 3 glyph using the provided parameters. @param textRenderingMatrix Matrix for rendering. @param font The Type 3 font. @param code Glyph code. @param displacement Vector displacement.
2927 Creates a PDFontDescriptor from FontMetrics. @param metrics FontMetrics object containing font information. @return PDFontDescriptor object.
2928 Creates a PDFontDescriptor from a Type1Font. @param type1 The Type1Font to build the descriptor from. @return PDFontDescriptor object.
2929 Retrieves labels for each page in the document. @return String array of labels, one for each page.
2930 Returns a map of labels to page indices. Uses computeLabels to populate the map.
2931 Removes a page at the specified index. @param pageNumber The index of the page to remove.
2932 Displays a PDF form. @param form The PDF form to display. @throws IOException If an I/O error occurs.
2933 Creates a PDFontDescriptor from a TrueTypeFont. Extracts font properties from TTF tables. @param ttf The TrueTypeFont object to process. @return A PDFontDescriptor object. @throws IOException if essential tables are missing.
2934 Gets the normal appearance as a content stream. @param compress Whether to compress the stream. @return PDAppearanceContentStream object.
2935 Creates a PDImageXObject from a byte array. @param document The document to associate with the image. @param byteArray The byte array containing the image data. @return A PDImageXObject.
2936 Processes a tiling pattern with provided color and color space. Delegates to overloaded method with matrix parameter.
2937 Creates a content stream on a page, overwriting existing content. @param document The document to add the content to. @param sourcePage The page to write content on.
2938 Processes an annotation by extracting and handling its appearance. @param annotation The annotation to process. @throws IOException If an I/O error occurs during processing.
2939 Processes a transparency group, setting up graphics state for soft masking.
2940 Initializes appearance content based on characteristics. Writes to stream, handles background, border, and dividers.
2941 Constructs a FDFAnnotationStrikeOut from a PDF element. @param element The PDF element to initialize from.
2942 Creates an FDFAnnotationUnderline object from an Element. @param element The Element to create the object from.
2943 Writes content to the appearance stream, using provided font size.
2944 Initializes the PDICCBased object with an ICC profile array. @param iccArray COSArray containing the ICC profile data. @throws IOException if an I/O error occurs.
2945 Processes a PDF page, extracting and handling its contents. @param page The PDF page to process. @throws IOException if an I/O error occurs.
2946 Processes a child content stream for a page. Throws exception if a page is already being processed.
2947 Creates a PDVisibleSignDesigner with a document, image, and page.
2948 Constructs a PDVisibleSignDesigner with a document, image stream, and page.
2949 Constructs a PDFPrintable with default rasterization setting. @param document The PDF document to print. @param scaling The scaling factor. @param showPageBorder Whether to show the page border.
2950 Loads a PDF document from a byte array. @param input byte array containing PDF data @return PDDocument object representing the PDF
2951 Constructs a Type7ShadingContext with specified parameters. @param shading The shading object.
2952 Creates a Type6 shading context with specified parameters. @param shading Shading object; colorModel, xform, matrix, bounds
2953 Appends a form as a new layer to the target page. @param form The form to append. @return The newly created optional content group.
2954 Retrieves the byte representation of the XFA object. Returns an empty array if no bytes are found.
2955 Recursively interpolates samples based on coordinates and step. @param coord Coordinate array, step Incrementing index
2956 Parses a PDF function stream and builds instruction sequence. @param functionStream COSBase object representing the function stream.
2957 Writes XML representation of the field to the given Writer. @param output Writer to write XML to. @throws IOException if an I/O error occurs.
2958 Retrieves rich content from the dictionary object. Returns the content as a String.
2959 Checks if the XFA form is dynamic. Returns true if XFA is present and has no fields.
2960 Retrieves a FontBoxFont based on baseFont/descriptor. Returns a FontMapping, using fallback if needed.
2961 Retrieves a TrueTypeFont mapping, falling back to a default if needed. @param baseFont base font name @param fontDescriptor font descriptor @return FontMapping object
2962 Determines if the font is symbolic based on various conditions. Returns true if symbolic, false if not, null if unknown.
2963 Reads and sets the font encoding based on dictionary values. Handles different encoding types and provides fallbacks.
2964 Calculates appropriate font size based on font and content rect. @param font PDFont object @param contentRect PDRectangle defining content area @return Font size as float
2965 Formats text content paragraphs based on wrapping and alignment.
2966 Creates a FDF squiggly annotation from a PDF element. @param element The PDF element to initialize from.
2967 Returns the rich text value from the inheritable attribute.
2968 Creates a FDF annotation highlight from a COS element. @param element The COS element representing the annotation.
2969 Loads a PDF document from a file. @param file The file containing the PDF document. @return A PDDocument object representing the PDF.
2970 Saves data to a file, optionally compressing it. @param file The file to save to. @param compressParameters Compression parameters. @throws IOException if an I/O error occurs.
2971 Gets the PageFormat for the specified page index. @param pageIndex index of the page @return PageFormat object representing the page format
2972 Processes annotations on the imported page, cloning and fixing references.
2973 Loads a PDF document from a file, using the given password. @param file The file to load. @param password Password for the PDF document. @return A PDDocument object.
2974 Saves data to the provided output stream. @param output Output stream to save data to.
2975 Returns the normal appearance as a content stream. Overloads the method for cleaner code.
2976 Opens the node, incrementing the node count if it's closed.
2977 Closes the node if it's currently open, decrementing the count.
2978 Gets a layout page from a PDF document. @param doc The PDF document. @return A LayoutPage object.
2979 Displays a glyph based on font type. @param matrix Transformation matrix. @param font PDFont object. @param code Glyph code. @param displacement Vector displacement.
2980 Clones the structure tree from the source to the destination document.
2981 Adjusts struct parent entries for page and its annotations. @param page The page to update. @param structParentOffset Offset to add to struct parent values.
2982 Writes compressed body objects to the document. Handles object streams and encryption setup.
2983 Imports a page from a document as a form XObject. @param sourceDoc Source document. @param pageNumber Page number to import. @return Form XObject representing the page.
2984 Exports the document fields to an FDF document. @return FDFDocument containing the exported fields. @throws IOException if an I/O error occurs.
2985 Embeds a Type1 font into a PDF document using a PFB stream. @param doc The PDF document. @param dict The font dictionary. @param pfbStream PFB stream for the font. @param encoding Font encoding.
2986 Embeds a TrueType font into a PDF document, optionally as a subset. @param document PDF document to embed into @param dict COS dictionary for the font @param ttf TrueType font to embed @param embedSubset Whether to embed a subset of the font @throws IOException if embedding is not permitted or unsupported
2987 Performs R-interpolation. Delegates to rinterpol with default input array.
2988 Extracts matte data from a soft mask. @param softMask The soft mask image. @return Float array representing matte data, or null if none.
2989 Processes a PDF page, setting rotation and cropbox. Sets translation matrix based on cropbox position.
2990 Parses document bytes to a Document object. @return Document object representing the parsed document. @throws IOException if an I/O error occurs during parsing.
2991 Creates a PDType1Font object from a PFB input stream. @param doc The document. @param pfbIn PFB input stream. @param encoding Font encoding.
2992 Constructs a PDVisibleSignDesigner with image and document source. @param documentSource Source for document page size. @param image Visible signature image. @param page Page number.
2993 Creates a PDFunction based on the provided COSBase object. @param function COSBase representing the function. @throws IOException if the function type is unknown.
2994 Checks if the font is symbolic, caching the result. @return True if symbolic, false if definitively not, else true.
2995 Checks if the PDF form is dynamic XFA. @param acroForm The PDF form object. @return True if dynamic, false otherwise.
2996 Parses an FDF XML element to populate the dictionary. @param fdfXML The root XML element representing the FDF.
2997 Creates a PDImageXObject from a BufferedImage, using predictor encoding or fallback. @param document The document to add the image to. @param image The BufferedImage to create the image from.
2998 Imports a page into the destination document, handling resources and annotations.
2999 Creates a PDTrueTypeFontEmbedder, embedding a TrueType font. @param document The document to embed in. @param dict The COS dictionary. @param ttf The TrueType font. @param encoding The font encoding.
3000 Embeds a Type 2 font within a PDF document. @param document PDF document, dictionary, font, embed flag, parent font, vertical flag @throws IOException if an I/O error occurs
3001 Initializes a PDFont with a COSDictionary. @param fontDictionary The COSDictionary containing font data.
3002 Constructs a PDFPrintable with default page interaction. @param document The PDF document to print. @param scaling The scaling factor for the document.
3003 Creates a PDICCBased color space from an ICC array and resources. @param iccArray ICC array @param resources Resources object @return PDICCBased color space
3004 Draws a page onto the provided Graphics2D context. @param g Graphics2D object to draw on. @param pageSize Rectangle representing the page size.
3005 Builds a PDF with signature properties. @param properties Signer properties for PDF creation. @return InputStream containing the generated PDF. @throws IOException if an I/O error occurs.
3006 Saves data to a file. @param file The file to save to. @throws IOException If an I/O error occurs.
3007 Saves data to a file with specified compression parameters. @param fileName File name to save to. @param compressParameters Compression settings.
3008 Inserts generated appearance data into the stream. @param widget The annotation widget. @param appearanceStream Appearance stream. @param output Output stream to write to.
3009 Imports a FDF field value and flags into the current field. @param fdfField The FDF field to import from.
3010 Writes the FDF data to the specified XML writer. @param output XML writer to write the FDF data to @throws IOException if an I/O error occurs
3011 Constructs a PDVisibleSignDesigner with image and document source. @param documentSource RandomAccessRead for document @param imageStream Input stream for the visible signature image @param page Page number (1-based)
3012 Draws an image at specified coordinates. @param image The image to draw. @param x X coordinate. @param y Y coordinate.
3013 Initializes the iterator with fields from the given form. @param form The PDAcroForm to iterate over.
3014 Loads a PDF document from a file. @param file The file containing the PDF document. @return A PDDocument object representing the PDF.
3015 Constructs a FDFCatalog from an Element. @param element The Element to create the catalog from.
3016 Creates a PDTrueTypeFont from a TrueTypeFont and encoding. @param closeTTF Closes the TTF data source if true.
3017 Creates a PDType0Font from a TrueTypeFont, embedding or closing it. @param embedSubset Whether to embed a subset of the font.
3018 Creates a PDType0Font from a COSDictionary. @param fontDictionary COSDictionary containing font data @throws IOException if font data is missing or invalid
3019 Initializes a PDSimpleFont with a COSDictionary. @param fontDictionary COSDictionary containing font data
3020 Creates a PDType1Font from a PFB input stream. @param doc The document this font belongs to. @param pfbIn Input stream containing the PFB data.
3021 Creates a PDVisibleSignDesigner with filename, image stream, and page.
3022 Constructs a PDVisibleSignDesigner with a filename, image, and page.
3023 Renders a PDF page as a BufferedImage. @param pageIndex page index @param scale rendering scale @param imageType desired BufferedImage type @param destination rendering destination @return BufferedImage representation of the page
3024 Processes pages within a specified range. Iterates through pages, processing those between start/end pages.
3025 Renders a PDF page to graphics at specified scale and destination. @param pageIndex Index of the page to render.
3026 Initializes a PDFPrintable with default scaling. @param document The PDF document to print.
3027 Returns an iterator to iterate over the fields in the form.
3028 Saves data to a file. @param fileName The name of the file to save to. @throws IOException If an I/O error occurs.
3029 Builds a visible signature using PDFTemplateCreator. Uses PDVisibleSigBuilder to create the signature.
3030 Creates a PDImageXObject from a file based on its content. @param file The file to create the image from. @param doc The document to add the image to. @return PDImageXObject object. @throws IOException if file reading fails.
3031 Creates a PDImageXObject from a file based on its extension. @param file The image file. @param doc The document to add the image to. @throws IOException If an I/O error occurs.
3032 Returns the tint transform function. Creates if null.
3033 Creates a PDDeviceN object from a COS array and resources.
3034 Creates a PDSeparation object from a COSArray and resources. @param separation COSArray containing separation data @param resources PDResources for color space creation
3035 Processes a page, conditionally performing actions based on page number.
3036 Retrieves the PDFunction object, creating it if necessary. @return PDFunction object or null if no function is defined.
3037 Retrieves the transfer function. Creates if null. @return PDFunction object representing the transfer function.
3038 Evaluates a PDF function based on input, selecting a child function. @param input Input value for evaluation. @return Float array representing the evaluation result.
3039 Writes the FDF data to an XML writer. @param output XML writer to write to. @throws IOException if writing fails.
3040 Retrieves an image from the sampled image reader. @param region Region to extract, null for full image. @param subsampling Subsampling value for image extraction. @return BufferedImage object representing the extracted image.
3041 Creates a PDIndexed object. @param indexedArray Indexed array from PDF. @param resources PDF resources.
3042 Evaluates the function using linear interpolation. @param input Input array of floats to be processed. @return Array of floats representing the evaluated output values.
3043 Retrieves the array of PDFunction objects. @return PDFunction[] array of functions or null if none. @throws IOException if the function element is invalid.
3044 Returns the default PDF font (Helvetica). Lazily initializes if not already set.
3045 Creates a PDType0Font from a TrueTypeFont, embedding a subset if specified. @param doc PDDocument to associate with the font. @param ttf TrueTypeFont to use. @param embedSubset Whether to embed a subset of the font.
3046 Creates a TrueType font from a COSDictionary, parsing or mapping. @param fontDictionary Font dictionary from the PDF. @throws IOException if an I/O error occurs during parsing.
3047 Creates a PDType1CFont from a COSDictionary, parsing embedded fonts. @param fontDictionary Font dictionary containing font information. @throws IOException if there's an I/O error reading the font.
3048 Creates a Type1 font from a font dictionary. @param fontDictionary Font dictionary containing font data. @throws IOException if an I/O error occurs while reading the font.
3049 Creates a PDType3Font object from a COSDictionary. @param fontDictionary Font dictionary. @param resourceCache Resource cache.
3050 Loads a PDType0Font from a RandomAccessRead. @param doc PDDocument, read, embedSubset, vertical flags @return PDType0Font object
3051 Creates a PDType0Font from a TrueTypeFont. @param doc PDDocument to associate with the font @param ttf TrueTypeFont to use @param embedSubset Whether to embed a font subset @return PDType0Font object
3052 Creates a PDTrueTypeFont instance. @param doc PDDocument, the document. @param ttf TrueTypeFont, the font. @param encoding Encoding, the font encoding. @return PDTrueTypeFont object.
3053 Loads a TrueType font from a RandomAccessRead. @param doc PDDocument, encoding Encoding, read stream @return PDTrueTypeFont object
3054 Creates an FDF document from a Document object. @param doc The Document object to create from. @throws IOException if the document root is not 'xfdf'.
3055 Creates a PDImageXObject from an image file. @param imagePath Path to the image file. @param doc The document to associate with the image. @return PDImageXObject created from the file.
3056 Renders a page to graphics, using default destination if none provided. @param pageIndex Page index to render. @param graphics Graphics context to draw to. @param scaleX X scale factor. @param scaleY Y scale factor.
3057 Renders an image from a page. @param pageIndex Page index to render. @param scale Render scale. @param imageType Image type. @return BufferedImage object.
3058 Retrieves a list of signature fields from the form. Returns a list of PDSignatureField objects.
3059 Refreshes the appearances of terminal fields in the field tree.
3060 Writes XML data to the provided Writer. @param output Writer to write the XML data to. @throws IOException if an I/O error occurs.
3061 Splits a PDDocument into multiple PDDocuments. @param document The document to split. @return List of PDDocuments created by the split.
3062 Constructs a PDIndexed object from a COSArray. @param indexedArray The COSArray containing index information.
3063 Evaluates functions with input, clamps values to [0, 1]. @param input input array for function evaluation @return float array of evaluated function values
3064 Gets the image. Delegates to getImage(String, int). @return BufferedImage object representing the image.
3065 Processes each page in the provided page tree, extracting content. @param pages The PDPageTree containing pages to process.
3066 Creates a PDColorSpace based on the provided COSBase. @param colorSpace COSBase representing the color space.
3067 Retrieves a PDF field by its fully qualified name. @param fullyQualifiedName Field's unique identifier. @return The PDF field or null if not found.
3068 Enables/disables field caching. If enabled, populates fieldCache.
3069 Returns an iterator to traverse the fields in the document.
3070 Renders an image for a given page and scale. @param pageIndex The page index to render. @param scale The rendering scale. @return A BufferedImage representing the rendered image.
3071 Renders an image with specified DPI. @param pageIndex Page index to render. @param dpi Dots per inch for rendering. @return Rendered BufferedImage.
3072 Renders an image with specified DPI. @param pageIndex Page index to render. @param dpi DPI value. @param imageType Image type. @return Rendered BufferedImage.
3073 Renders a page to graphics at the specified index and scale. @param pageIndex Index of the page to render. @param graphics Graphics context to draw on. @param scale Scaling factor for the page.
3074 Extracts a PDDocument based on start/end page numbers. Returns an empty document if page range is invalid.
3075 Writes XFDF data to the provided Writer, closing it afterward.
3076 Displays text encoded in a byte array, applying font and text state parameters. @param string byte array containing the text to display
3077 Loads a TrueType font from a file. @param doc The document. @param file The file to load. @param encoding The encoding to use. @return A PDTrueTypeFont object.
3078 Constructs a PDMMType1Font from a COSDictionary. @param fontDictionary The COSDictionary representing the font.
3079 Loads a TrueType font from an input stream. @param doc The document. @param input Input stream. @param encoding Encoding. @return PDTrueTypeFont object.
3080 Loads a PDType0Font from a file. @param doc The document to load into. @param file The file to load from. @return The loaded PDType0Font.
3081 Loads an XFDF document from an input stream. @param input Input stream containing the XFDF data. @return FDFDocument object representing the loaded document.
3082 Loads a PDType0Font from an input stream. @param doc The document. @param input Input stream to load from. @param embedSubset Whether to embed a subset. @return The loaded PDType0Font.
3083 Loads a vertical font from a file. @param doc The document. @param file The file to load from. @return The loaded font.
3084 Loads a vertical font from an input stream. @param doc The document. @param input Input stream for the font data. @return The loaded PDType0Font object.
3085 Loads a vertical PDType0Font from an input stream. @param input Input stream containing the font data. @param embedSubset Whether to embed a subset of the font. @return The loaded PDType0Font.
3086 Constructs a PDType3Font with a COSDictionary. @param fontDictionary The COSDictionary for the font. @throws IOException If an I/O error occurs.
3087 Adds a signature to the document. @param sigObject Signature object to add. @param signatureInterface Signature interface implementation. @param options Signature options.
3088 Writes document content to the specified output stream. @param doc The document to write. @param outputStream The output stream to write to.
3089 Retrieves a list of signature dictionaries from signature fields. @return List of PDSignature objects.
3090 Imports fields from an FDF document into the current document. @param fdf The FDFDocument containing the fields to import.
3091 Evaluates a function with a single float input. @param inputValue The input value to evaluate. @return Float array containing the result.
3092 Draws a transparency group onto the provided Graphics2D object. @param form The transparency group to draw. @param graphics The Graphics2D context to draw on.
3093 Returns a paint with a soft mask applied. Uses the non-stroking color and graphics state.
3094 Evaluates a shading function and converts the result to RGB. @param values Input values for the shading function. @return RGB value derived from the evaluated function.
3095 Renders an image for a given page index. @param pageIndex Index of the page to render. @return BufferedImage representing the rendered page.
3096 Loads a PDType0Font from an input stream. @param doc The document. @param input Input stream containing font data. @return The loaded PDType0Font.
3097 Creates a PDFont object based on the provided dictionary. @param dictionary Font dictionary @param resourceCache Resource cache @return PDFont object
3098 Loads an XFDF document from the specified file. @param filename Path to the XFDF file. @return FDFDocument object.
3099 Displays a byte array as text, using the showText method. @param string Byte array to display. @throws IOException If an I/O error occurs.
3100 Loads an XFDF document from the given file. @param file The file containing the XFDF document. @return The loaded FDFDocument object.
3101 Delegates to overloaded method with default quality. @param pageIndex Index of the page to render. @param graphics Graphics context to draw on.
3102 Displays text strings from a COS array, applying text adjustments. @param array COSArray containing text strings or TJ values.
3103 Adds a signature, delegating to a more detailed method. @param sigObject The signature object to add. @param options Signature options.
3104 Returns the last signature dictionary from the list. Returns null if the list is empty.
3105 Saves incremental data to output stream for external signing. @param output OutputStream to write the incremental data to. @return SigningSupport object for subsequent signing operations.
3106 Extracts text from a PDF document. @param doc The PDF document to extract text from. @return The extracted text as a String.
3107 Adds a signature using default options. @param sigObject The signature object to add. @param signatureInterface Signature interface implementation.
3108 Saves XFDF data to a file. @param fileName File to save XFDF data to. @throws IOException if an I/O error occurs.
3109 Draws a glyph to the PDF graphics context, applying transformations. @param path Glyph path, font, code, displacement, and transform.
3110 Adds a signature using default options. @param sigObject The signature object to add. @throws IOException if an I/O error occurs.
3111 Creates a PDFont from a COSDictionary. @param dictionary COSDictionary containing font information @return PDFont object
3112 Retrieves a PDFont instance by name, caching if possible. @param name Font name (COSName) @return PDFont object or null if not found.
3113 Fills and strokes the path, preserving the original linePath.
3114 Saves XFDF data to a file. @param fileName The name of the file to save to.
3115 Flattens the form, merging fields into a single PDF. Does nothing for dynamic XFA forms.
3116 Copies needed resources (font) to the appearance stream. @param appearanceStream The stream to add resources to.
3117 Appends source PDF document to the destination PDF document. Handles metadata, structure tree, and other merging tasks.
3118 Converts PNG image data to a PDImageXObject. @param doc PDDocument to add the image to. @param imageData PNG image data as bytes. @return PDImageXObject or null if conversion fails.
3119 Retrieves the font object from the font setting. @return PDFont object or null if no font is found.
3120 Updates annotation appearance stream by modifying content. Copies resources, modifies BMC/EMC, and writes to stream.
3121 Creates a PDImageXObject from a byte array, supporting various image types. @param document The document to add the image to. @param byteArray Image data as a byte array. @param name Image name. @param customFactory Custom image factory, if available. @return PDImageXObject created from the image data. @throws IOException If an I/O error occurs.
3122 Copies graphics state properties into the provided GraphicsState. @param gs the GraphicsState to copy properties to @throws IOException if an I/O error occurs
3123 Parses appearance string operators from byte array. Parses operators and arguments from a PDF stream.
3124 Creates a PDImageXObject from a byte array. @param document The document to add the image to. @param byteArray Image data as bytes. @param name Image name. @return PDImageXObject object.
3125 Initializes appearance and resources. Requires /DA and /DR entries; processes appearance string.
3126 Retrieves the default appearance string. @return PDDefaultAppearanceString object. @throws IOException if an I/O error occurs.
3127 Sets the appearance value for a PDF field, handling multiline formatting. @param apValue The appearance value to set.
3128 Initializes the helper with a PDF variable text field. @param field The PDF variable text field. @throws IOException if default appearance string processing fails.
