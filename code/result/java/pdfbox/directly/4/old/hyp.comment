1 Private constructor to prevent direct instantiation of OperatorName.
2 Initializes the OperatorProcessor with a PDFStreamEngine context. @param context The PDFStreamEngine instance.
3 Default constructor for COSBase class. Provides no initialization.
4 Initializes the COSUpdateState with the provided update info. @param updateInfo The COSUpdateInfo object to initialize with.
5 Default constructor. Intentionally left empty.
6 Initializes DecodeOptions with a specified source region. @param sourceRegion The region to decode.
7 Initializes DecodeOptions with the given subsampling factor. @param subsampling Subsampling factor for X and Y dimensions.
8 Default constructor for the Filter class.
9 Initializes a PageExtractor with document, start, and end pages.
10 Constructs an AbstractXReference with the given type. @param type The type of the XReference.
11 Initializes a ContentStreamWriter with the given output stream. @param out The output stream to write to.
12 Constructs a DefaultResourceCacheCreateImpl. @param enableStableCache Whether to enable stable cache.
13 Initializes a document catalog with a document and root dictionary.
14 Initializes PDDocumentInformation with a COSDictionary. @param dic The COSDictionary containing document information.
15 Initializes the destination dictionary. @param dict The COSDictionary to use as the destination.
16 Initializes a PDDocumentNameDictionary with a catalog and names.
17 Constructs a PDPage with the given COSDictionary. @param pageDictionary The dictionary representing the page.
18 Constructs a PDPage with a dictionary and resource cache. @param pageDictionary The COSDictionary for the page. @param resourceCache Resource cache for accessing resources.
19 Constructs a PDDictionaryWrapper with the given COSDictionary.
20 Constructs a PDNameTreeNode from a COSDictionary. @param dict The COSDictionary representing the node.
21 Creates a PDPageLabelRange from a COSDictionary. @param dict The COSDictionary containing label range data.
22 Initializes a PDRange with the given COSArray representing the range.
23 Initializes a PDRange with a COSArray and an index. @param range The COSArray representing the range. @param index The starting index of the range.
24 Initializes a PDStream object with the given COSStream. @param str The COSStream to be wrapped.
25 Initializes a PDMarkInfo object with the provided COSDictionary.
26 Creates a MarkedContentReference with the given COSDictionary. @param dictionary The COSDictionary for the reference.
27 Constructs a PDObjectReference with the given COSDictionary. @param theDictionary The COSDictionary for the reference.
28 Constructs a PDStructureNode with the given COSDictionary. @param dictionary The COSDictionary for this node.
29 Default constructor for the Revisions class.
30 Initializes PDPropertyList with a given COSDictionary. @param dict The COSDictionary to use for initialization.
31 Initializes a PDBoxStyle with the provided COSDictionary. @param dic The COSDictionary for the style.
32 Initializes AccessPermission with default permissions.
33 Initializes an AccessPermission with the given permissions. @param permissions Integer representing the access permissions.
34 Initializes the PDCryptFilterDictionary with a COSDictionary. @param d The COSDictionary to use for initialization.
35 Initializes an RC4Cipher object. Creates a salt array for encryption.
36 Constructs a FDFAnnotation with the given COSDictionary. @param a The COSDictionary representing the annotation.
37 Initializes a FDFCatalog with the provided COSDictionary. @param cat The COSDictionary representing the catalog.
38 Initializes a FDFDictionary with a given COSDictionary. @param fdfDictionary The COSDictionary to use for initialization.
39 Constructs a FDFField object from a COSDictionary. @param f The COSDictionary representing the field.
40 Initializes the FDFIconFit with the provided COSDictionary. @param f The COSDictionary to use for initialization.
41 Initializes FDFJavaScript with a COSDictionary. @param javaScript The COSDictionary containing JavaScript.
42 Constructs a FDFNamedPageReference with the given COSDictionary. @param r The COSDictionary representing the named page reference.
43 Constructs an FDFOptionElement with the given COSArray. @param o The COSArray representing the option element.
44 Initializes a FDFPage with the provided COSDictionary. @param p The COSDictionary representing the page.
45 Initializes a FDFPageInfo object with the provided COSDictionary.
46 Initializes a FDFTemplate with the provided COSDictionary. @param t The COSDictionary representing the template.
47 Initializes a PDFontDescriptor with the provided COSDictionary. @param desc The COSDictionary containing font descriptor information.
48 Initializes a PDFontSetting with the provided font setting array. @param fs The COSArray representing the font setting.
49 Constructs a PDLineDashPattern with an empty dash pattern array.
50 Constructs a PDColor with a pattern name and color space. @param patternName Pattern name associated with the color. @param colorSpace Color space for the color.
51 Initializes a PDDeviceNAttributes with the given COSDictionary. @param attributes The COSDictionary containing device attributes.
52 Initializes a PDDeviceNProcess with the provided attributes. @param attributes COSDictionary containing device attributes
53 Initializes a PDGamma object with the given COSArray. @param array The COSArray containing gamma values.
54 Initializes a PDTristimulus object with the given COS array. @param array COS array containing tristimulus values.
55 Initializes a PDTransparencyGroupAttributes with a COSDictionary.
56 Initializes the PDOptionalContentProperties with a COSDictionary. @param props The COSDictionary containing properties.
57 Initializes the pattern with the provided dictionary. @param dictionary The COS dictionary for the pattern.
58 Initializes a PDShading object with the provided dictionary. @param shadingDictionary The COSDictionary for shading.
59 Initializes a PDExtendedGraphicsState with a dictionary and cache.
60 Creates a PDSoftMask with a dictionary and resource cache. @param dictionary COSDictionary for the soft mask. @param resourceCache Resource cache to use.
61 Constructs a Paragraph object with the given text content. @param text The text content of the paragraph.
62 Initializes a Word object with the given text content. @param text The text content of the word.
63 Initializes a PDAction with the provided COSDictionary. @param a The COSDictionary containing action data.
64 Private constructor to prevent instantiation of utility class.
65 Initializes the AdditionalActions object with a COSDictionary. @param a The COSDictionary containing additional actions.
66 Initializes the annotation actions with the provided COSDictionary. @param a The COSDictionary containing the actions.
67 Initializes the catalog actions with the provided COSDictionary. @param a The COSDictionary containing the actions.
68 Initializes the additional actions for a PDF form field. @param a The COSDictionary containing the actions.
69 Initializes the PDPageAdditionalActions with a COSDictionary. @param a The COSDictionary containing the actions.
70 Initializes a PDTargetDirectory with the given COSDictionary.
71 Initializes the URI dictionary with the provided COSDictionary.
72 Initializes Windows launch parameters from a COSDictionary. @param p The COSDictionary containing launch parameters.
73 Initializes a PDAppearanceCharacteristicsDictionary with a COSDictionary. @param dict The COSDictionary to use for initialization.
74 Constructs a PDAppearanceDictionary with the given COSDictionary.
75 Constructs a PDAppearanceEntry using the provided COSDictionary.
76 Initializes the PDBorderEffectDictionary with a COSDictionary. @param dict The COSDictionary to use for initialization.
77 Initializes the PDBorderStyleDictionary with a COSDictionary. @param dict The COSDictionary to use for initialization.
78 Initializes the ExternalDataDictionary with a COSDictionary. @param dictionary The COSDictionary to use for initialization.
79 Initializes a CloudyBorder object with given parameters. @param stream Content stream, intensity, line width, rectangle.
80 Initializes a PDPropBuild with a COSDictionary. @param dict The COSDictionary to use for initialization.
81 Initializes the PDPropBuildDataDict with a COSDictionary. @param dict The COSDictionary to initialize with.
82 Creates a PDSeedValue from a COSDictionary. Sets the dictionary as direct.
83 Constructs a PDSeedValueCertificate from a COSDictionary. @param dict The COSDictionary containing certificate data.
84 Constructs a PDSeedValueMDP with the given COSDictionary. @param dict The COSDictionary to use.
85 Initializes a PDSeedValueTimeStamp with a given COSDictionary. @param dict The COSDictionary to use for initialization.
86 Constructs a PDSignature object from a COSDictionary. @param dict The COSDictionary containing signature data.
87 Default constructor. Initializes pageNo to 0.
88 Creates a PDFTemplateCreator with a provided PDFTemplateBuilder. @param templateBuilder The builder used to create the PDF template.
89 Private constructor to prevent instantiation of the FieldUtils class.
90 Constructs a PDField object. @param acroForm The parent AcroForm. @param field The field dictionary. @param parent The parent field.
91 Initializes a PDXFAResource with the provided XFA base object. @param xfaBase The COSBase representing the XFA base.
92 Initializes PDMeasureDictionary with the given COSDictionary.
93 Initializes the PDNumberFormatDictionary with a COSDictionary. @param dictionary The COSDictionary to use for initialization.
94 Initializes a PDViewportDictionary with the given COSDictionary.
95 Initializes a PDThread object with the provided COSDictionary. @param t The COSDictionary representing the thread.
96 Initializes a PDThreadBead with the provided COSDictionary. @param b The COSDictionary representing the thread bead.
97 Initializes the PDViewerPreferences with a COSDictionary. @param dic The COSDictionary containing viewer preferences.
98 Initializes a PageDrawerParameters object with rendering details. @param renderer PDF renderer, page, subsampling, destination, hints, threshold
99 Default constructor. Initializes textPosition to null.
100 Initializes a 3x3 matrix with identity values.
101 Initializes the Matrix with data from the provided float array. @param src The float array to initialize the matrix with.
102 Initializes a 3x3 matrix with provided values. @param a, b, c, d, e, f matrix elements.
103 Private constructor to prevent instantiation of XMLUtil class.
104 Private constructor to prevent direct instantiation of PDFStreamEngine.
105 Adds an operator processor to the operators map. @param op The operator processor to add.
106 Sets the terminator character. Must be 118-126, excluding 'z'.
107 Sets the split length. @param split The number of pages to split at. @throws IllegalArgumentException if split is not positive.
108 Sets the start page. @param start The start page number. Must be greater than 0.
109 Sets the end page. @param end The end page number. Throws exception if <= 0.
110 Sets the lenient parsing flag. Throws exception if parsing is done.
111 Initializes CompressParameters with the given object stream size. @param objectStreamSize The size of the object stream.
112 Sets the blend mode. @param blendMode The blend mode to set; cannot be null.
113 Constructs a PDFieldTree with the given AcroForm. @param acroForm The root AcroForm for the field tree.
114 Returns the length of the stream. Throws exception if writing.
115 Default constructor. Initializes an empty list of PDF sources.
116 Initializes the COSWriterObjectStream with a compression pool. @param compressionPool Compression pool for object stream.
117 Initializes the textClippings list to store text clipping data.
118 Adds a source file to the list of sources. @param source The file to add. @throws FileNotFoundException if the file does not exist.
119 Adds a RandomAccessRead source to the list of sources.
120 Adds a name to the list of instructions. @param name The name to add.
121 Adds an instruction sequence as a child. @param child The instruction sequence to add.
122 Adds a recipient to the list of recipients. @param recipient The PublicKeyRecipient to add.
123 Adds a region with its associated rectangle to the data structures. @param regionName Name of the region. @param rect Rectangle defining the region's area.
124 Sets the trailer of the current Xref object. @param trailer The COSDictionary representing the trailer.
125 Retrieves a COS object from the key pool. @param key The key identifying the COS object. @return The COSBase object associated with the key.
126 Retrieves an operator by name. @param operatorName Name of the operator to retrieve. @return The Operator object or null if not found.
127 Resolves a Unicode sequence to a name. @param unicodeSequence Unicode sequence to resolve. @return Name associated with the sequence or ".notdef".
128 Returns the top GraphicsState from the graphics stack.
129 Restores the previous graphics state from the stack.
130 Returns the current size of the graphics stack.
131 Transforms a point using the provided transformation matrix. @param x x-coordinate of the point @param y y-coordinate of the point @return Transformed Point2D.Float object
132 Decrements the level by 1; logs error if level becomes negative.
133 Adds an integer to the instructions list. @param value The integer to add.
134 Checks if the COSStream is closed. Throws IOException if closed.
135 Throws an IOException indicating reset functionality is unsupported.
136 Throws an IOException indicating that reset functionality is unsupported.
137 Retrieves the encryption object for the document. @throws IOException if the document hasn't been parsed.
138 Retrieves the access permission. @throws IOException if the document hasn't been parsed.
139 Constructs an InvalidPasswordException with the given error message.
140 Initializes an Operator with the given operator string. @param aOperator The operator string; must not start with '/'.
141 Returns a string representation of this PDF operator.
142 Returns a string representation of this COSArray.
143 Returns a string representation of the COSObject, including its key.
144 Retrieves a filter by name. @param filterName COS filter name. @return Filter object or throws IOException if invalid.
145 Adds a real number to the list of instructions. @param value The real number to add.
146 Sets the width of the visible sign. @param width The desired width in pixels. @return This PDVisibleSignDesigner object.
147 Sets the height of the visible sign designer. @param height The desired height in pixels. @return The current PDVisibleSignDesigner instance.
148 Calculates the distance between two Point2D objects. @param ps starting point @param pe ending point @return distance between the points
149 Calculates the signed distance along a line segment. @param p Point to evaluate. @param p1 Start point. @param p2 End point.
150 Creates a new PDMarkedContent object. @param tag The tag for the marked content. @param properties Dictionary of properties.
151 Returns the type name, which is "Pattern".
152 Returns the type name as a COSName.SHADING.
153 Returns the default value as a string, or "" if not a COSName.
154 Sets the value to "Off", effectively unchecking a state.
155 Checks if the white point (wpX, wpY, wpZ) is (1, 1, 1).
156 Calculates a color table based on shading type and domain. @return int[] color map, indexed by factor.
157 Calculates a color table based on shading type and domain. @return int[] Color table representing the shading.
158 Creates and returns a code table (list of byte arrays).
159 Retrieves the object at the specified index. @param index Index of the object to retrieve. @return The COSBase object at the given index.
160 Retrieves the element at the specified index. @param index the index of the element to retrieve
161 Returns the number of elements in this collection.
162 Returns the number of elements in this collection.
163 Returns the number of recipients. @return The size of the recipients collection.
164 Checks if the collection is empty. @return True if empty, false otherwise.
165 Checks if the underlying collection is empty. @return True if empty, false otherwise.
166 Removes a recipient from the list. @param recipient Recipient to remove. @return True if removed, false otherwise.
167 Returns an iterator for the objects within this collection.
168 Returns an iterator for the list. Delegates to the underlying list's iterator.
169 Returns an iterator for the list of PublicKeyRecipient objects.
170 Converts the objects to a list. @return A list of COSBase objects.
171 Converts COS objects to a list of their names as strings.
172 Converts COS objects to a list of strings. @return List of strings extracted from COS objects.
173 Converts a Java Boolean to a COSBoolean. @param value Java Boolean to convert @return COSBoolean representation of the input value
174 Returns a string representation of the value.
175 Writes a boolean value to the output stream as bytes. @param output Output stream to write the boolean value to.
176 Writes null bytes to the provided output stream. @param output The OutputStream to write to. @throws IOException if an I/O error occurs.
177 Writes the given byte array to the output stream. @param data byte array to write @throws IOException if an I/O error occurs
178 Returns a set of map entries for the underlying data.
179 Checks if a new entry differs from the old one. @param oldEntry The previous entry. @param newEntry The updated entry. @return True if the entries are different.
180 Returns the number of items in the collection.
181 Retrieves a COSBase object associated with the given key. @param key The key to look up in the items map. @return The COSBase object or null if not found.
182 Returns a set view of the keys in this dictionary.
183 Returns a collection of all values in the map.
184 Adds all items from the given dictionary to the items map. @param dict The COSDictionary whose items to add.
185 Checks if this COS object contains the given key. @param name The COS name to check for. @return True if the key exists, false otherwise.
186 Splits a string into tokens based on spaces. Uses a regex to handle various space characters.
187 Parses the string argument as a signed decimal integer. @param token The string to parse. @return The integer value of the string.
188 Returns a string representation of the function type.
189 Sets the encryption key length. @param l Key length (must be 40, 128, or 256) @throws IllegalArgumentException if l is invalid
190 Sets the start page value. Throws exception if value <= 0.
191 Sets the end page value. Throws exception if value is invalid.
192 Initializes a BruteForceParser with a COSDocument and COSParser.
193 Initializes the XrefTrailerObj with XRefType.TABLE.
194 Default constructor for XrefTrailerObj. Initializes xrefType to TABLE.
195 Initializes PDResources with a COSDictionary. @param resourceDictionary The COSDictionary containing resources.
196 Initializes a PDResources object with a dictionary and cache. @param resourceDictionary COSDictionary for resources @param resourceCache ResourceCache for caching resources
197 Initializes the operators map with various operator constants.
198 Constructs a PDAcroForm with the given document and form dictionary.
199 Returns the number of trailers. Returns the size of the bytePosToXrefMap.
200 Retrieves a COSObject from the object pool using the provided key. @param key The key used to identify the COSObject. @return The COSObject or null if the key is null.
201 Parses a string token into a float value. @param token The string to parse. @return The float value represented by the token.
202 Coerces a float value, handling infinities and near-zero values.
203 Calculates and returns the direction based on the text matrix. @return Direction in degrees (0, 90, 180, or 270).
204 Checks if this COSFloat is equal to another COSFloat. @param o the object to compare to @return true if equal, false otherwise
205 Generates a hash code based on the 'value' float.
206 Formats the value as a string, handling scientific notation. @return Formatted string representation of the value.
207 Writes a "null" value to the output stream, followed by a space.
208 Initializes a COSIncrement with the provided update origin. @param incrementOrigin The COSUpdateInfo representing the origin.
209 Initializes PDFCloneUtility with a destination PDDocument. @param dest The destination PDDocument for cloning.
210 Constructs a DefaultResourceCache. @param enableStableCache if true, enables stable cache functionality.
211 Checks if the object needs to be updated based on its state. @return True if the object needs updating, false otherwise.
212 Checks if the collection contains the given COS base object.
213 Checks if a COSBase object is excluded. @param base The COSBase object to check. @return True if excluded, false otherwise.
214 Adds a COSBase object to the list of objects. @param object The COSBase object to add, can be null.
215 Adds a COS object to the list of processed objects. @param base The COS object to add, can be null.
216 Adds a TrueTypeFont to the list of fonts to be closed. @param ttf The TrueTypeFont instance to register.
217 Constructs an ASCII85InputStream, initializing internal state. @param is The input stream to decode from.
218 Creates a CCITTFaxDecoderStream with specified parameters. @param stream Input stream for fax data. @param columns Columns in the fax image.
219 Checks if this COSInteger is equal to another COSInteger. @param o The object to compare to. @return True if equal, false otherwise.
220 Returns a string representation of this COSInt object.
221 Writes the value as an ISO-8859-1 encoded string to the output stream.
222 Retrieves the value associated with the given key. @param key the key to retrieve the value for @return the value associated with the key, or null if absent
223 Retrieves the mapped font name from the ALIASES map. @param fontName The font name to map. @return The mapped font name or null if not found.
224 Returns a list of export values matching the current field value.
225 Checks if the name is empty. @return True if name is empty, false otherwise.
226 Adds a comment to the output stream. Throws IllegalArgumentException if comment contains newline.
227 Writes a newline character to the output stream.
228 Converts a string to a char array representing its UTF-16BE hex values.
229 Dereferences the COS object, avoiding recursion. @return The dereferenced COSBase object or null.
230 Creates a COSObjectKey with given number, generation, and index. @param num Object number. @param gen Generation number. @param index Stream index.
231 Generates a hash code based on the numberAndGeneration value.
232 Returns the scaling factor X, considering rotation. Returns single[0] if no rotation.
233 Returns the Y scaling factor. Returns single[4] if single[3] is 0.
234 Constructs an ASCII85OutputStream, initializing internal state. @param out The OutputStream to write the encoded data to.
235 Constructs a COSStandardOutputStream with the given OutputStream.
236 Constructs a COSStandardOutputStream with given OutputStream and position.
237 Returns a copy of the internal byte array. @return A new byte array containing the same elements.
238 Writes the existing PDF and incremental update to output.
239 Converts byte array to ASCII string. Uses US-ASCII charset.
240 Checks if updates are currently being accepted. Returns true if originDocumentState accepts updates.
241 Converts a byte array to a String, handling special characters.
242 Reads the next operator from the input source. Returns the operator string; throws IOException on error.
243 Converts a string to a byte array using a custom mapping. @param text The string to convert. @return A byte array representing the string.
244 Checks if the map contains the given character. @param character The character to check for. @return True if the map contains the character, false otherwise.
245 Checks if the map contains a key. @param key the key to check @return true if the key exists, false otherwise
246 Checks if the ALIASES map contains the given font name.
247 Returns an unmodifiable map of code to name mappings.
248 Returns an unmodifiable map of name to code.
249 Throws an UnsupportedOperationException. Indicates operation not supported.
250 Reads a byte from the stream. Returns -1 if EOF.
251 Closes the input stream, releasing resources.
252 Writes a byte to the buffer, transforms, and writes to the output.
253 Flushes the internal buffer to the output stream.
254 Truncates or pads the password to match ENCRYPT_PADDING length.
255 Closes the output stream and warns if endText() was not called.
256 Imports XMP metadata into the document. @param xmp XMP data as a byte array. @throws IOException if an I/O error occurs.
257 Checks if the given page number is a split point. @param pageNumber The page number to check. @return True if it's a split point, false otherwise.
258 Throws an exception as source region modification is unsupported.
259 Throws an exception, as subsamplingX is not modifiable.
260 Throws an exception as subsampling Y is not modifiable.
261 Throws an exception as subsampling offset is not settable.
262 Throws an exception as subsampling offset is not settable.
263 Throws an UnsupportedOperationException as JPX encoding is not implemented.
264 Sets the upper-right Y coordinate. Throws UnsupportedOperationException.
265 Sets the upper-right X coordinate. Throws UnsupportedOperationException.
266 Sets the lower-left Y coordinate. Throws UnsupportedOperationException.
267 Sets the lower-left X coordinate. Throws UnsupportedOperationException.
268 Returns signature text. Currently throws an UnsupportedOperationException.
269 Creates a signature text designer. @param signatureText The text to be used for the signature. @return PDVisibleSignDesigner object.
270 Throws an exception; String values are not supported. Use setValue(PDSignature value) instead.
271 Gets the compression level, using system property or default. Returns a value between -1 and Deflater.BEST_COMPRESSION.
272 Checks if the collection contains the specified element. @param o element to check for @return true if the element is present, false otherwise
273 Creates a FlateFilterDecoderStream from an input stream. @param inputStream The input stream to decode. @throws IOException If an I/O error occurs.
274 Closes the inflater and calls the superclass's close method.
275 Sets the image and updates related dimensions. @param image The BufferedImage to set.
276 Decodes a predictor row based on the predictor type. @param predictor predictor type @param colors color count @param bitsPerComponent bits per component
277 Checks if the key pool contains the given key. @param key The COSObjectKey to check for. @return True if the key exists, false otherwise.
278 Checks if this set contains the specified element. @param name element whose presence in this set is to be tested. @return true if this set contains the specified element.
279 Checks if the map contains a key with the given code. @param code The code to check for. @return True if the code exists as a key, false otherwise.
280 Escapes XML special characters in the input string. @param input The string to be escaped. @return The escaped XML string.
281 Sets the bounding box for the PDF object. @param bbox The PDRectangle object representing the bbox.
282 Decodes a hexadecimal string into a byte array. Returns null if decoding fails.
283 Closes resources, ensuring proper error handling and logging.
284 Closes the document and associated I/O streams, logging exceptions.
285 Returns the COS object, either from functionStream or functionDictionary.
286 Constructs a PDXObject with a stream and subtype. @param stream The underlying stream object. @param subtype The subtype of the object.
287 Returns the COS object associated with this stream.
288 Returns the metadata stream from the COS object. Returns a COSStream object.
289 Sets the metadata for the stream. @param metadata The COSStream object to set as metadata.
290 Checks if this annotation is equal to another PDAnnotation. Compares the underlying COSDictionaries for equality.
291 Returns a set view of the map's keys.
292 Returns a collection of the values in this map.
293 Initializes the BaseParser with a RandomAccessRead source. @param pdfSource The RandomAccessRead object for PDF data.
294 Checks if the next character is a digit. @throws IOException if an I/O error occurs.
295 Adds an XRef entry to the trailer's table if it doesn't exist. @param objKey Key of the object. @param offset Offset of the object.
296 Adds a code-name pair to the mappings and inverts the mapping. @param code The code to associate with the name. @param name The name associated with the code.
297 Checks if the next character is a space. @return True if the next character is a space, false otherwise.
298 Skips a linebreak character (CR, LF, or CRLF) from the source.
299 Checks if end of string is reached, returns 0 if so. @param bracesParameter Current braces count. @throws IOException if an I/O error occurs.
300 Checks if the given character is an end-of-line character.
301 Reads a string of digits from the source. @return StringBuilder containing the number string. @throws IOException if the number exceeds MAX_LENGTH_LONG.
302 Decodes a byte buffer to a string, using UTF-8 or an alternative charset.
303 Reads a character from the source and verifies it matches expectedChar. @param ec The expected character. @throws IOException if the character does not match.
304 Checks if the next character is whitespace. @throws IOException if an I/O error occurs.
305 Parses the startXref value. Returns the startXref as a long, or -1 if not present.
306 Finds the last EOF marker in the source, handling potential errors. @return Position of the last EOF marker, or Long.MAX_VALUE if none.
307 Finds offsets of XRef tables in the PDF source. @return List of Long offsets to XRef tables.
308 Returns the number of color components. Caches the value; returns cached value if available.
309 Finds offsets of XRef streams using a breadth-first search. @return List of Long representing offsets of XRef streams.
310 Returns the Xref table from the Xref trailer resolver.
311 Finds the startxref offset by reading and parsing the trailer. @return Offset of the startxref marker. @throws IOException if trailer parsing fails.
312 Reads stream content until "endstream" is found. Returns the length of the filtered content.
313 Default constructor. Initializes Unicode writer mode to 0.
314 Associates a label range with a starting page. @param startPage The starting page number. @param item The PDPageLabelRange to associate.
315 Adds a text entry to the CID to Unicode mapping. @param cid CID value (0-65535) @param text Unicode text to associate with the CID
316 Checks if the stream contains no binary data after "EI". Returns true if no binary data is found, false otherwise.
317 Checks if the next character is a space or return.
318 Adds an XReferenceEntry if its key's number isn't already present.
319 Calculates the maximum width needed for each column in bytes. @return An array representing the maximum width for each column.
320 Initializes the COSObjectPool with a maximum XRef object number. @param highestXRefObjectNumber The highest XRef object number.
321 Gets the first trailer dictionary from the byte position map. Returns null if the map is empty.
322 Retrieves the last trailer dictionary from the byte position map. Returns null if the map is empty.
323 Gets object numbers contained within a given object. @param objstmObjNr The object number to search within. @return Set of contained object numbers, or null if empty.
324 Returns the numeric value of the first column. Uses getType() to get the value.
325 Returns the value of the third column. Delegates to the referenced key's generation.
326 Returns a string representation of the FreeReference object.
327 Returns the value of the second column as a long. It's equivalent to the byte offset.
328 Returns the value of the third column. Delegates to the referenced key's generation.
329 Returns a string representation of the object.
330 Returns the value of the second column. Retrieves the number from the parent key.
331 Returns the third column value, which is the object stream index.
332 Returns a string representation of this ObjectStreamEntry.
333 Writes a byte array to the output stream. @param b The byte array to write. @param off Offset from where to start writing. @param len Number of bytes to write.
334 Writes a byte to the output stream. Increments the position.
335 Writes an end-of-line character if not already on a new line.
336 Checks if compression is enabled based on configuration. @return True if compression is enabled, false otherwise.
337 Adds an XReferenceEntry to the list of XRef entries. @param entry The XReferenceEntry to add.
338 Writes an indirect object reference to the output stream. @param output Output stream to write to @param indirectReference Reference object to write
339 Returns an MD5 MessageDigest instance. Throws RuntimeException if MD5 algorithm is unavailable.
340 Gets a SHA-1 MessageDigest instance. @return SHA-1 MessageDigest object. @throws RuntimeException if SHA-1 is unavailable.
341 Returns a SHA-256 MessageDigest instance. Throws RuntimeException if algorithm is unavailable.
342 Retrieves the highest XRef object number from the object pool.
343 Returns a read-only list of prepared keys.
344 Updates reverse mapping: removes old, adds new name for code. @param code Integer code to map @param name String new name for the code
345 Removes a region and its area from the data structures. @param regionName Name of the region to remove.
346 Sets the maximum number of fraction digits for formatting. @param fractionDigitsNumber The maximum fraction digits.
347 Initializes a PDAbstractContentStream with document, stream, and resources.
348 Gets the vertical displacement Y value for a given code. @param code The code to look up. @return The vertical displacement Y value.
349 Returns standardValue if not null, otherwise returns defaultValue.
350 Zooms the design by a given percentage. @param percent Zoom percentage (e.g., 10 for 10%) @return The current PDVisibleSignDesigner instance.
351 Returns the width of the image. @return The image width as a float.
352 Returns the image height. @return The height of the image as a float.
353 Adjusts the sign designer's position and transform based on rotation.
354 Creates an AffineTransform using values from the 'single' array.
355 Encodes a string into a byte array using a custom encoding. @param text The string to encode. @return The encoded byte array.
356 Retrieves the name of a Unicode code point. @param codePoint The Unicode code point to look up. @return The name of the code point, or ".notdef" if not found.
357 Applies Gsub rules, encodes glyph IDs, and writes to output. @param gsubWorker Gsub worker for applying transforms @param out Output stream to write encoded glyph IDs @param font Font object for encoding @param word Word to process @return List of glyph IDs after Gsub transforms
358 Constructs a PDDocument with a COSDocument, source, and permission.
359 Constructs a FDFDocument from a COSDocument and source. @param doc The COSDocument. @param source The RandomAccessRead source.
360 Returns an array representing the elements in this collection.
361 Returns the index of the first occurrence of the object. @param o object to search for @return index of the object or -1 if not found
362 Checks if this object is equal to another object based on 'actual'.
363 Returns the hash code, delegating to the wrapped object.
364 Returns the last index of the specified element in the list.
365 Returns a list iterator for the list. Delegates to the underlying list's iterator.
366 Returns a list iterator over the list from the specified index.
367 Returns a view of the list from fromIndex (inclusive) to toIndex (exclusive).
368 Checks if the map contains the specified value. @param value value to search for @return true if found, false otherwise
369 Returns an unmodifiable set view of the map's entries.
370 Returns a set of aliases. Returns an unmodifiable set.
371 Returns a string representation of the object, based on actuals.
372 Converts a COSBase object to a PDObject using reflection. @param base The COSBase object to convert. @throws IOException If object creation fails.
373 Generates a letter label string based on the input number.
374 Returns the number of page range labels.
375 Retrieves a label range for the specified page. @param startPage The starting page number (1-based). @return The PDPageLabelRange object for the page.
376 Returns a navigable set of page indices based on labels.
377 Returns a copy of the dash array. @return float[] A clone of the internal dash array.
378 Creates a PDColor instance with given components and color space. @param components Color components (e.g., RGB values). @param colorSpace The color space for the color.
379 Returns an array of color components. Returns a clone or a copy based on color space.
380 Initializes a CoordinateColorPair with a point and color array. @param p The coordinate point. @param c The color values (as an array).
381 Returns a string representation of this FunctionType2 object.
382 Calculates and returns the boundary coordinates of the corners. @return An array containing the boundary coordinates [minX, maxX, minY, maxY].
383 Pops the top element from the stack and returns it as a Number.
384 Pops the integer value from the stack. @return The integer value popped from the stack.
385 Pops the top element from the stack and returns it as a float.
386 Adds a boolean value to the instructions list. @param value The boolean value to add.
387 Constructs an ExecutionContext with the given set of operators. @param operatorSet The set of operators for execution.
388 Returns a list of Pattern objects for list item expressions. Lazily initializes the list if it's null.
389 Converts an object array to a comma-separated string.
390 Converts a float array to a comma-separated string. @param array The float array to convert. @return A string representation of the array.
391 Adds a text position to the content. @param text The text position to add.
392 Adds a marked content object to the document's contents. @param markedContent The content to add.
393 Adds an XObject to the document contents. @param xobject The XObject to add.
394 Sets the print permission. Only applies if not in read-only mode.
395 Sets whether modifications are allowed. Only applies if not read-only.
396 Sets the content extraction permission. @param allowExtraction True to allow extraction, false otherwise.
397 Sets the permission to modify annotations if not in read-only mode.
398 Sets the permission to fill in the form if not read-only. @param allowFillingInForm True to allow filling, false otherwise.
399 Sets the extract for accessibility permission, if not read-only.
400 Sets the ability to assemble a document, if not in read-only mode. @param allowAssembly True to allow assembly, false otherwise.
401 Sets the faithful print permission if not in read-only mode. @param canPrintFaithful flag to enable/disable faithful printing
402 Checks if the print permission bit is enabled.
403 Checks if modification permission is enabled. Returns true if MODIFICATION_BIT is set, false otherwise.
404 Checks if content extraction is permitted. Returns true if the extraction bit is set.
405 Checks if the permission to modify annotations is enabled.
406 Checks if the user has permission to fill in the form.
407 Checks if accessibility extraction is permitted. Returns true if the extraction permission bit is set.
408 Checks if the user has permission to assemble a document.
409 Checks if the faithful print permission bit is enabled.
410 Retrieves the private key from the keystore. @throws KeyStoreException if key is not found or recoverable.
411 Returns a SecureRandom instance, using custom if available.
412 Sets the key, validates length, and mixes it with the salt.
413 Writes a byte to the output stream after XORing with salt. @param aByte the byte to write @param output the output stream to write to
414 Combines diacritic characters or normalizes the string. Uses DIACRITICS map or normalizes using NFKC form.
415 Checks if a codepoint is prohibited based on various conditions. @param codepoint The integer representing a Unicode codepoint. @return True if the codepoint is prohibited, false otherwise.
416 Computes the version number based on key length and policy.
417 Returns the singleton BouncyCastle provider instance. Creates it if it doesn't already exist.
418 Extracts text content from a given XML element node.
419 Writes a string to the output stream. @param text The string to write. @throws IOException if an I/O error occurs.
420 Retrieves a predefined CMap by name. @param cMapName Name of the CMap to retrieve. @return The CMap object or a new one if not cached.
421 Parses a CMap from a RandomAccessRead object. @param randomAccessRead Input stream to parse from. @return Parsed CMap object or null if input is null.
422 Returns a set containing the PostScript name and its hyphen-free version. @param postScriptName The original PostScript name. @return A set of PostScript names.
423 Calculates a set of points along a line from (x0, y0) to (x1, y1).
424 Calculates the number of unique points in the array. @param p array of Point2D objects @return the number of unique points
425 Adds a font to the cache, associating it with FontInfo. @param info FontInfo object @param font FontBoxFont object
426 Retrieves a FontBoxFont from the cache, or null if not found. @param info FontInfo object used as cache key. @return FontBoxFont or null.
427 Adds a substitute string for a given match. @param match String to be replaced. @param replace String to use as a substitute.
428 Retrieves FontInfo by PostScript name and format. @param format FontFormat to match @param postScriptName PostScript font name @return FontInfo object or null if not found
429 Retrieves substitutes for a given postscript name. @param postScriptName The postscript name to look up. @return List of substitutes or an empty list if not found.
430 Gets the name associated with the given code. @param code code to look up; returns ".notdef" if not found.
431 Gets Type2 CharString for CID. @param cid CID value. Returns Type2 CharString or null.
432 Converts a code point to a CID value using the parent's CMap. @param code The code point to convert. @return The corresponding CID value.
433 Converts color components to an RGB integer value. @return RGB integer representing the color.
434 Calculates a color component value with backdrop removal. @param groupRGB Group RGB value. @param backdropRGB Backdrop RGB value. @param shift Shift value. @param alphaFactor Alpha factor for blending. @return Calculated color component value.
435 Returns a copy of the data array from the specified range.
436 Returns a standard Adobe Glyph List.
437 Extracts relevant cmap subtables from the TTF cmap table.
438 Checks if embedding is permitted based on TrueType font restrictions. Returns true if embedding is allowed, false otherwise.
439 Checks if subsetting is permitted for the given TrueType font. Returns true if subsetting is allowed, false otherwise.
440 Converts a name to its Unicode character representation. @param name Name to convert; may be null. @return Unicode character string or null if not found.
441 Creates a PDColor with given components, pattern name, and color space.
442 Creates a BufferedImage from a WritableRaster and ColorSpace.
443 Converts a WritableRaster to an RGB BufferedImage using ColorConvertOp. @param raster The raster to convert. @param colorSpace The color space of the raster. @return An RGB BufferedImage.
444 Checks if the ICC profile describes an sRGB color space. @param profile The ICC profile to check. @return True if sRGB, false otherwise.
445 Returns the color space type based on ICC profile or alternate color space.
446 Initializes the predictor encoder with document and image data. Sets up internal buffers and parameters based on image properties.
447 Scales an image to the specified width and height. @param image The image to scale. @param width The new width. @param height The new height. @param type The image type. @param interpolate Whether to interpolate. @return Scaled BufferedImage.
448 Returns the COS dictionary associated with this object.
449 Copies the input color array to the cornerColor field. @param color 2D float array representing colors.
450 Returns the current clipping path, caching if only one exists.
451 Constructs a TextAttribute with the given name. @param name The name of the text attribute.
452 Generates a hash code based on the dictionary field.
453 Returns an AffineTransform representing a translation. Translates by (-bboxMinX, -bboxMinY).
454 Calculates polygon parameters: number of curls (n), angle (alpha), dx. @param advInterm Intermediate curl length. @param array Parameter array to store results. @return Number of intermediate curls (n).
455 Flattens an ellipse into an array of points. @param left, bottom, right, top Ellipse boundary coordinates. @return Array of Point2D.Double representing the flattened ellipse.
456 Checks if a path is rectangular, containing only lines and moves.
457 Returns the height of the template, same as the page height.
458 Sets the x and y coordinates for the sign designer. @param x The x-coordinate. @param y The y-coordinate. @return The current PDVisibleSignDesigner instance.
459 Transforms the designer using the given affine transform. @param affineTransform The transformation to apply. @return The transformed designer (this).
460 Checks if the provided node is a single node with no siblings.
461 Returns an Iterable of child outline items.
462 Adds rendering hints to the graphics context.
463 Adjusts the clip path based on the graphics transform. Returns the adjusted path or the original if no adjustment needed.
464 Calculates subsampling factor based on image size and transform. @param pdImage Image object @param at Affine transform @return Subsampling factor.
465 Rounds a double up to the nearest integer. @param num the double to round @return the rounded integer value
466 Calculates X rotation based on given rotation value. @param rotation Rotation angle in degrees. @return X coordinate for given rotation.
467 Calculates the Y coordinate of the lower-left corner based on rotation. @param rotation Rotation angle in degrees. @return Y coordinate.
468 Gets the width based on rotation. @param rotation Rotation angle in degrees. @return Width value as a float.
469 Writes Unicode characters to the output stream. @param text TextPosition object containing Unicode characters. @throws IOException if an I/O error occurs.
470 Returns the Unicode representation of the object.
471 Retrieves text content for a specified region. @param regionName Name of the region to fetch text from. @return Text content of the region, or null if not found.
472 Writes the article start tag to the output stream. @param isLTR Flag indicating right-to-left text direction. @throws IOException if an I/O error occurs.
473 Writes the article end tag to the output stream.
474 Writes a line separator to the output stream.
475 Writes the word separator character to the output stream.
476 Writes the start of a paragraph to the output stream. Handles paragraph ending if already in a paragraph.
477 Writes the HTML page start tag to the output stream.
478 Writes the end tag of the page to the output stream.
479 Handles bidirectional text directionality for a given word. @param word The input string to process for directionality. @return The processed string with mirrored characters.
480 Parses a Bidi file from the input stream, populating MIRRORING_CHAR_MAP.
481 Returns the visually ordered Unicode string, reversing if needed.
482 Processes a text position, checking if it's within a region. If so, calls superclass method.
483 Checks if the character is a diacritic mark. Returns true if it's a non-spacing mark/modifier.
484 Updates the TimeZone ID based on its raw offset.
485 Converts a byte to its hexadecimal string representation.
486 Converts a byte array to a hexadecimal string representation.
487 Converts a byte to its hexadecimal byte array representation.
488 Converts a byte array to its hexadecimal string representation. @param bytes The byte array to convert. @return Hexadecimal byte array.
489 Writes a byte as two hex characters to the output stream. @param b The byte to write. @param output The output stream to write to.
490 Decodes a Base64 encoded string. @param base64Value The Base64 encoded string to decode. @return Decoded byte array.
491 Initializes the Matrix with values from an AffineTransform. @param at The AffineTransform to use for initialization.
492 Transforms a point using a predefined matrix. @param point The Point2D object to transform.
493 Formats a float value to an ASCII byte array with maxFractionDigits. @param value float value to format @param maxFractionDigits max fraction digits @param asciiBuffer buffer to store formatted value @return offset in asciiBuffer, or -1 if formatting fails.
494 Reads PDFBox version from properties file. @return PDFBox version string or null if error.
495 Parses an XML document from an input stream. @param is Input stream containing the XML document. @param nsAware Whether to parse with namespace awareness. @return Document object representing the parsed XML.
496 Retrieves a value from the trie based on the provided byte array. @param bytes byte array representing the key @return Value associated with the key, or null if not found
497 Initializes a COSBoolean object with the given boolean value.
498 Initializes a COSName object with the given name. @param aName The name for the COSName object.
499 Private constructor to prevent instantiation of COSNull.
500 Creates a COSString with given bytes. @param bytes The byte array representing the string. @param forceHex Whether to force hex representation.
501 Initializes a new COSDictionary object with an update state.
502 Constructs a COSObject with a base COSBase object. @param object The base COSBase object for this COSObject.
503 Constructs a COSObject with a base object and parser. @param object The base COSBase object. @param parser The parser for the COS object.
504 Constructs a COSObject with a key and parser. @param key COSObjectKey identifying the object @param parser ICOSParser for parsing the object
505 Constructs DecodeOptions with specified rectangle dimensions. @param x x-coordinate of rectangle. @param y y-coordinate of rectangle. @param width rectangle width. @param height rectangle height.
506 Creates a FreeXReference object. @param key COSObjectKey - the key of the free object @param nextFreeObject Next free object identifier.
507 Constructs an ObjectStreamXReference with given parameters. @param objectStreamIndex Stream index @param key COSObjectKey @param object COSBase object @param parentKey COSObjectKey parent
508 Default constructor, initializes with default settings.
509 Creates a PDTypedDictionaryWrapper from a COSDictionary. @param dictionary The COSDictionary to wrap.
510 Constructs a PDAttributeObject from a COSDictionary. @param dictionary The COSDictionary containing attribute data.
511 Constructs a PDUserProperty with a COSDictionary and user attribute.
512 Constructs a PDOutlineNode using the provided COSDictionary.
513 Creates a PDTransition object from a COSDictionary. @param dictionary The COSDictionary containing transition data.
514 Creates a PDDestinationNameTreeNode from a COSDictionary.
515 Constructs a PDEmbeddedFilesNameTreeNode from a COSDictionary.
516 Constructs a PDJavascriptNameTreeNode from a COSDictionary.
517 Constructs a PDStructureElementNameTreeNode from a COSDictionary.
518 Creates a child node with the given COSDictionary. @param dic The COSDictionary for the new node. @return A new PDNumberTreeNode instance.
519 Constructs a PDMetadata object from a COSStream.
520 Constructs a PDObjectStream from a COSStream. @param str The COSStream to use for initialization.
521 Constructs a PDEmbeddedFile from a COSStream object.
522 Initializes the PDFunction with a COSBase object. Handles COSStream and COSDictionary types.
523 Creates a PDXObject from a COSStream and subtype. @param stream The COSStream containing the object data. @param subtype The subtype of the XObject.
524 Creates a PDSimpleFileSpecification with the given file name. @param fileName The name of the file.
525 Constructs a PDStructureElement from a COSDictionary. @param dic The COSDictionary to use for initialization.
526 Creates a PDStructureTreeRoot object from a COSDictionary. @param dic The COSDictionary containing the structure tree data.
527 Initializes a StandardDecryptionMaterial with the provided password. @param pwd The password to use for decryption.
528 Default constructor for PublicKeyProtectionPolicy.
529 Constructs a StandardProtectionPolicy with passwords and permissions. @param ownerPassword Owner's password. @param userPassword User's password. @param permissions Access permissions for the policy.
530 Private constructor to prevent direct instantiation of SecurityHandler.
531 Constructs a FDFAnnotationCaret with the given COSDictionary.
532 Constructs a FDF annotation circle from a COSDictionary.
533 Constructs a FDFAnnotationFileAttachment from a COSDictionary.
534 Constructs a FDFAnnotationFreeText object from a COSDictionary.
535 Constructs a FDFAnnotationInk object from a COSDictionary.
536 Constructs a FDFAnnotationLine object from a COSDictionary.
537 Constructs a FDFAnnotationLink from a COSDictionary.
538 Constructs a FDFAnnotationPolygon from a COSDictionary.
539 Constructs a FDFAnnotationPolyline from a COSDictionary.
540 Constructs a FDFAnnotationSound object from a COSDictionary.
541 Constructs a FDFAnnotationSquare from a COSDictionary.
542 Constructs a FDFAnnotationStamp with the given COSDictionary.
543 Constructs a FDFAnnotationText object from a COSDictionary.
544 Constructs a FDFAnnotationTextMarkup object from a COSDictionary.
545 Extracts and creates a PDPanoseClassification from bytes.
546 Creates a Composite instance based on blendMode and alpha. @param blendMode BlendMode to use. @param constantAlpha Alpha value between 0 and 1.
547 Returns the group attributes. Lazily initializes if null.
548 Constructs a PDShadingPattern from a COSDictionary.
549 Constructs a PDTilingPattern with a dictionary and resource cache.
550 Constructs a ShadingType1 object from a COSDictionary.
551 Creates a PDShadingType2 object from a COSDictionary. @param shadingDictionary The COSDictionary containing shading data.
552 Constructs an AxialShadingPaint with a shading type and matrix.
553 Initializes a RadialShadingPaint with a shading and matrix.
554 Initializes a Type1ShadingPaint with a shading and matrix.
555 Initializes a Type4ShadingPaint with a shading and matrix.
556 Constructs a Type5ShadingPaint with the given shading and matrix.
557 Initializes a Type6ShadingPaint with a shading and matrix.
558 Initializes a Type7ShadingPaint with a shading and matrix.
559 Constructs a PDExtendedGraphicsState with a COSDictionary. @param dictionary The COSDictionary to initialize from.
560 Constructs a PDSoftMask with a COSDictionary. @param dictionary The COSDictionary containing mask data.
561 Creates a PlainText object from a string. @param textValue The text to be parsed into paragraphs.
562 Constructs a PDActionEmbeddedGoTo object from a COSDictionary.
563 Constructs a PDActionGoTo object from a COSDictionary.
564 Constructs a PDActionHide object from a COSDictionary.
565 Constructs a PDActionImportData object from a COSDictionary.
566 Constructs a PDActionJavaScript object from a COSDictionary.
567 Constructs a PDActionLaunch object from a COSDictionary.
568 Creates a PDActionMovie object from a COSDictionary. @param a The COSDictionary containing movie data.
569 Constructs a PDActionNamed object from a COSDictionary.
570 Constructs a PDActionRemoteGoTo object from a COSDictionary.
571 Constructs a PDActionResetForm from a COSDictionary. @param a The COSDictionary containing form data.
572 Constructs a PDActionSound object from a COSDictionary.
573 Constructs a PDActionSubmitForm with the given COSDictionary.
574 Constructs a PDActionThread with the given COSDictionary.
575 Constructs a PDActionURI object from a COSDictionary.
576 Initializes a PDVisibleSigBuilder with a new PDFTemplateStructure.
577 Initializes a PDNamedDestination with the provided destination string. @param dest COSString representing the named destination.
578 Constructs a NamedDestination with the given destination name. @param dest The COSName representing the destination.
579 Default constructor. Performs no action.
580 Initializes a PDPageDestination with the provided COS array. @param arr The COS array containing destination data.
581 Constructs a PDNonTerminalField with parent and field. @param acroForm The parent PDAcroForm. @param field The COSDictionary representing the field. @param parent The parent PDNonTerminalField.
582 Constructs a PDTerminalField with given parameters. @param acroForm The PDF acroform. @param field The COS dictionary representing the field. @param parent The parent non-terminal field.
583 Constructs a PDRectlinearMeasureDictionary from a COSDictionary.
584 Creates a deep copy of the Matrix object. Returns a new Matrix with a cloned single array.
585 Creates a scale matrix with specified x and y scaling factors.
586 Creates a translation matrix with the given x and y offsets.
587 Creates a rotation matrix with specified angle and translation. @param theta Rotation angle in radians. @param tx Translation along x-axis. @param ty Translation along y-axis. @return Rotation matrix.
588 Transforms a vector using a predefined matrix. @param vector The vector to transform. @return The transformed vector.
589 Scales the vector by a factor. @param sxy Scaling factor. @return New vector with scaled components.
590 Initializes the MacExpertEncoding with data from the table.
591 Initializes MacRomanEncoding by iterating through the encoding table.
592 Initializes standard encodings from the predefined table.
593 Initializes the symbol encoding table from SYMBOL_ENCODING_TABLE.
594 Default constructor for the Type1Encoding class.
595 Initializes encoding with character metrics from FontMetrics.
596 Initializes WinAnsiEncoding with entries from table and fills gaps.
597 Initializes the Zapf Dingbats encoding table from a predefined table.
598 Creates and returns a PDFieldTree representing this form's fields.
599 Retrieves an object from the list at the specified index. @param index Index of the object to retrieve. @return The object at the given index.
600 Returns the number of objects in this collection.
601 Gets the revision number at the specified index. @param index index of the revision number to retrieve @return the revision number at the given index
602 Parses PNG chunks from image data and returns a state object. @param imageData byte array containing PNG image data @return PNGConverterState object or null if parsing fails
603 Returns the Encoding instance for the given COS name. @param name COS name to match for encoding. @return Encoding instance or null if not found.
604 Creates a PDSoftMask from a COSBase dictionary. @param dictionary COSBase object representing the mask @param resourceCache Resource cache for mask creation @return PDSoftMask object or null if invalid input
605 Returns the index of the first visible widget, or -1 if none.
606 Adds a source file. @param source Path to the source file to add. @throws FileNotFoundException if the file does not exist.
607 Parses the PDF trailer dictionary from the input stream. Resolves the trailer and sets it in the xref trailer resolver.
608 Retrieves a COS object from the object pool. @param key The key used to identify the object. @return The COSBase object associated with the key.
609 Executes a sequence of instructions within the given execution context.
610 Returns the text line matrix from the current graphics state.
611 Sets the text line matrix using the graphics state. @param value The new text line matrix to set.
612 Returns the current text matrix from the graphics state.
613 Sets the text matrix to the provided matrix. @param value The new text matrix to set.
614 Transforms the width based on the current transformation matrix. @param width The width to transform. @return The transformed width.
615 Returns the non-stroking color from the graphics state.
616 Sets the non-stroking color using the provided PDColor. @param color The PDColor to set as the non-stroking color.
617 Returns the color space from the graphics state.
618 Returns the current stroking color from the graphics state.
619 Sets the stroking color using the provided PDColor object.
620 Returns the stroking color space from the graphics state.
621 Creates an InputStream for reading data from the stream. Returns a RandomAccessInputStream or throws IOException.
622 Finds an ImageReader for the given format name. @param formatName image format name @param errorCause error cause if reader is missing @throws MissingImageReaderException if no reader is found
623 Finds an ImageReader that can read raster data for the given format. @param formatName image format name @param errorCause error cause string @throws MissingImageReaderException if no suitable reader is found
624 Retrieves an Operator object based on the provided operator string.
625 Returns a string representation of this COSArrayList.
626 Checks if an edge is approximately a line segment. Uses control points to evaluate edge equation values.
627 Returns the X coordinate of the lower-left corner of the rectangle.
628 Returns the y-coordinate of the lower-left corner of the rectangle.
629 Returns the x-coordinate of the rectangle's upper-right corner.
630 Returns the Y coordinate of the rectangle's upper-right corner.
631 Returns the font size from the font setting. Returns a float representing the font size.
632 Returns the red color component as a float.
633 Returns the G value as a float from the values list.
634 Returns the value of the 'b' parameter as a float.
635 Returns the X coordinate as a float from the values list.
636 Returns the Y coordinate as a float.
637 Returns the Z coordinate as a float.
638 Gets an integer at the given index, returns defaultValue if not found.
639 Gets name at index, returns default if index is out of bounds.
640 Finds the index of the object in the COS list. @param object COSBase object to find. Returns -1 if not found.
641 Retrieves a list of filters from COS data. Returns an empty list if no filters are found.
642 Evaluates the function using exponential interpolation. @param input Input array containing x value for exponent. @return Float array of evaluated function values.
643 Retrieves filters from the stream as a list of COSName objects.
644 Retrieves file filters as a list of strings. Returns empty list if no filters are present.
645 Writes a COSBoolean object to the output stream, followed by a space. @param output Output stream to write to @param cosBoolean COSBoolean object to write
646 Writes a string to the output stream, encoding as US-ASCII.
647 Notifies listeners if the entry has changed between old/new.
648 Returns the number of key-value mappings in this map.
649 Retrieves a COSObject associated with the given key. @param key The COSName key to look up. @return The COSObject or null if not found.
650 Retrieves a COSBase object by firstKey, or secondKey if firstKey is null.
651 Returns the number of recipients in the dictionary.
652 Gets the recipient string at the specified index. @param i index of the recipient string @return COSString object at the given index
653 Gets the direction value. Returns 0 if not found.
654 Returns a sorted set of metadata keys.
655 Retrieves a list of attribute names from the COS object. Returns a List<String> of attribute names.
656 Copies specified trailer dictionary keys to the stream. Filters keys: INFO, ROOT, ENCRYPT, ID, PREV.
657 Constructs a COSDictionary, copying contents from another dictionary.
658 Checks if a COSDictionary represents info data. Returns true if it contains info-related keys.
659 Checks if the dictionary contains width information.
660 Checks if the dictionary contains the MISSING_WIDTH key.
661 Checks if the dictionary contains the XFA key. @return True if XFA key exists, false otherwise.
662 Initializes the XrefParser with a COSParser. @param cosParser The COSParser to use for parsing.
663 Returns a string representation of this COSFloat object.
664 Writes formatted string to the output stream as a PDF. @param output Output stream to write the PDF data to.
665 Writes a COS array to the output stream. @param output Output stream to write to. @param cosArray COS array to write.
666 Creates a new COSIncrement object using the updateInfo. @return A new COSIncrement instance.
667 Initializes LayerUtility with a PDF document and a PDFCloneUtility. @param targetDoc The PDF document to operate on.
668 Constructs a DefaultResourceCache with caching enabled.
669 Checks if a COSBase object needs updating. @param base The COSBase object to check. @return True if update is needed, false otherwise.
670 Writes the FDF document to the output stream. @param doc The FDF document to write. @throws IOException if an I/O error occurs.
671 Writes a COSInteger object to the output stream, followed by a space. @param output The output stream to write to. @param cosInteger The COSInteger object to write.
672 Retrieves a COS object from the objects list at the given index. @param index index of the object to retrieve @return COSBase object or null if it's a COSNull
673 Finds the index of an object in the COS object list. @param object COSBase object to search for. @return Index of the object, or -1 if not found.
674 Checks if the map contains the specified value or wrapped COS object.
675 Finds the COSName associated with the given value. @param value The value to search for. @return The COSName or null if not found.
676 Retrieves a dictionary object by key, unwrapping COSObjects. @param key the key of the dictionary object @return The COSBase object or null if not found/null.
677 Retrieves the linearized dictionary from the XRef table. Returns null if not found.
678 Closes all COS streams and caches, re-throwing the first exception.
679 Accepts a visitor to process the COS object or COSNull. @param visitor The visitor object to process the object. @throws IOException if an I/O error occurs during processing.
680 Checks if a COSBase value has a reference to its parent. Returns true if self-reference found, false otherwise.
681 Gets the length from a COSBase object, returning a COSNumber. Returns null if length is COSNull. Throws IOException on error.
682 Creates a NormalXReference with offset, key, and COS object. @param byteOffset Byte offset of the object. @param key Key of the object. @param object COSBase object.
683 Retrieves a COSObjectKey based on the provided COSBase object.
684 Checks if the object pool contains the given COSBase object.
685 Adds key-object pair to prepared lists if both are non-null. @param key COSObjectKey to add @param object COSBase object to add
686 Constructs a COSObjectKey with num, gen, and default ref. @param num The number of the COS object. @param gen The generation of the COS object.
687 Compares this entry with another based on referenced keys. Returns -1, 0, or 1 based on key comparison.
688 Returns the horizontal scaling factor from the text matrix.
689 Returns the vertical scaling factor from the text matrix.
690 Creates a raw OutputStream for writing data. Returns FilterOutputStream; throws IOException.
691 Creates a COSWriter with an output stream and compression parameters.
692 Initializes a COSWriter with an output stream and input data.
693 Updates the 'updated' flag if updates are currently accepted.
694 Converts byte array to String, handling UTF-16 or PDFDocEncoding.
695 Creates a COSString. @param text The string to encode. @param forceHex Whether to force hex encoding.
696 Checks if the font is a Standard 14 font. Returns true if it's not embedded and name matches.
697 Reads up to {@code len} bytes from this stream into {@code data}. @param data buffer to read into, offset is the starting position @param offset offset into data @param len maximum number of bytes to read @return number of bytes read
698 Closes the stream, flushes data, and releases resources.
699 Reads the next byte from the decoded data. Returns -1 if end of file is reached.
700 Reads up to 'length' bytes from the input stream into 'data'. @param data buffer to read into, offset start index, length num bytes @return Number of bytes actually read, or -1 if EOF.
701 Reads an image from an input stream and sets the image. @param stream Input stream containing the image data. @throws IOException if an I/O error occurs.
702 Encodes input data using a code table, writing to the output stream. @param rawData Input stream containing data to encode. @param encoded Output stream to write encoded data. @param parameters COSDictionary containing encoding parameters. @throws IOException if an I/O error occurs.
703 Selects the best data row to write based on compression estimates. @return byte[] representing the chosen data row.
704 Returns RenderState for given COSName, or null if null.
705 Returns the BaseState for the given COSName. @param state COSName representing the state; null defaults to ON.
706 Closes all open overlays and documents, releasing resources.
707 Creates a PDFormXObject with the given stream. @param stream The stream containing form data.
708 Creates a PDFStreamParser from a PDContentStream. @param pdContentstream The content stream to parse.
709 Creates a PDFStreamParser from the given byte array. @param bytes The byte array representing the PDF stream.
710 Parses a COS object from the source at the given object number. @param objectNumber The object number to parse. @return The parsed COSBase object or null if not found.
711 Reads object numbers from source. @return Map of object numbers, or null on error.
712 Skips whitespace characters and optional line break. Reads and discards whitespace from the input source.
713 Skips a line break character (CR, LF, or CRLF). @return True if a line break was skipped, false otherwise.
714 Reads a line of text from the source, throwing IOException on EOF.
715 Skips whitespace and comments from the input source.
716 Finds the nearest xref offset from tables/streams. @param xrefOffset The offset to search for. @return The nearest offset found, or -1 if none found.
717 Parses the PDF header using a default version. @throws IOException if an I/O error occurs during parsing.
718 Parses the FDF header. Returns true on success, false otherwise.
719 Parses all objects from the PDF source. @return Map of COSObjectKey to COSBase representing parsed objects. @throws IOException if an I/O error occurs during parsing.
720 Calculates a final key by combining encryption key, object/gen numbers, and digests. @param objectNumber Object number to incorporate. @param genNumber Generation number to incorporate.
721 Creates an AppearanceContentStream from an AppearanceStream. @param appearance The source AppearanceStream. @param outputStream Output stream for writing content.
722 Creates a content stream for a page, using a provided appearance. @param doc The document. @param appearance The appearance stream. @param outputStream The output stream.
723 Transforms a point using the current graphics state. @param x x-coordinate of the point @param y y-coordinate of the point @return Transformed Point2D.Float object
724 Creates a paint context, applying pattern scaling. @param cm ColorModel, device/user bounds, transform, hints @return PaintContext object
725 Concatenates the input matrix with the 'single' array. Updates 'single' with the result of the multiplication.
726 Translates the single transformation matrix by tx and ty. @param tx Translation amount on the x-axis. @param ty Translation amount on the y-axis.
727 Scales the single array by sx and sy. @param sx scaling factor for x coordinates @param sy scaling factor for y coordinates
728 Multiplies two matrices. @param other The matrix to multiply by. @return The resulting matrix.
729 Creates a new PDF document using provided resources. @return A PDDocument object. @throws IOException if an I/O error occurs.
730 Constructs a PDDocument with a COSDocument and RandomAccessRead. @param doc The COSDocument to use. @param source Source for reading data.
731 Creates a SecurityHandler for the given ProtectionPolicy. @param policy The ProtectionPolicy to create a handler for. @return SecurityHandler instance or null if no handler exists.
732 Creates a SecurityHandler for the given filter name. @param name Filter name; returns null if no handler exists.
733 Sets stroking color if provided color has components. @param color PDColor object, null if no color is needed. @return True if color was set, false otherwise.
734 Sets the non-stroking color if the provided color is valid. @param color The color to set; null or invalid color returns false. @return True if the color was set, false otherwise.
735 Checks if the current user has all owner permissions. Returns true if all permission checks pass, false otherwise.
736 Checks if any of Revision3 permissions are set. Returns true if any permission is granted.
737 Writes all bytes from data to the specified OutputStream. @param data byte array to write @param output output stream to write to @throws IOException if an I/O error occurs
738 Writes a portion of byte array to OutputStream. @param data byte array to write @param offset starting offset in the array @param len number of bytes to write @param output target OutputStream
739 Inserts a diacritic character at the given position. @param i index to insert diacritic @param diacritic the diacritic to insert
740 Initializes a line with two points and two colors. @param p0 Start point of the line. @param p1 End point of the line. @param c0 Color at the start point. @param c1 Color at the end point.
741 Initializes a SoftMask with paint, mask, bbox, backdrop color, and transfer function.
742 Removes a backdrop from a group image. @param backdrop Backdrop image to remove. @param offsetX X offset for backdrop. @param offsetY Y offset for backdrop.
743 Retrieves FontMetrics for the given font name. @param fontName Font name to look up; returns null if not found.
744 Creates a GlyphList, loading data from input stream. @param input Input stream containing glyph data. @param numberOfEntries Initial capacity for hashmaps.
745 Constructs a GlyphList, copying from another and loading from input. @param glyphList Source GlyphList to copy from. @param input Input stream to load additional glyph data.
746 Converts a code to a glyph ID, handling various encodings. @param code The code to convert. @return The corresponding glyph ID.
747 Returns name or ".notdef" if not found in font. Tries unicode name if original name is not found.
748 Finds a valid font name, trying alternatives and Unicode names. @param name The name to search for. @return Font name or ".notdef" if not found.
749 Constructs a PDJPXColorSpace from a ColorSpace object. @param colorSpace The ColorSpace to use.
750 Initializes the CMYK color profile and flags. Throws IOException if profile loading fails.
751 Applies a mask to an image, handling scaling and alpha blending. @param image The image to apply the mask to. @param mask The mask image.
752 Initializes a CubicBezierCurve with control points and level. @param ctrlPnts Control points for the curve. @param l The level of the curve.
753 Checks if a point is contained within the polygon. @param p the point to check @return true if the point is contained, false otherwise
754 Calculates color at a point based on the specified degree. @param p Point at which to calculate the color. @return float[] Color at the given point.
755 Intersects the current path with the provided path. @param path The GeneralPath to intersect with.
756 Intersects the current path with the given area. @param area The Area object to intersect with.
757 Sets the graphics clip to the current clipping path or an empty rectangle.
758 Draws a tiling pattern using provided parameters, restoring state after.
759 Returns the X-directed adjusted value based on the current direction.
760 Constructs a TextPosition object with the given parameters.
761 Calculates the adjusted Y direction based on rotation. Returns adjusted value; uses page dimensions and rotation.
762 Returns the width of the object, accounting for rotation.
763 Returns the width adjusted for direction. Uses the current direction to calculate width.
764 Starts article processing, using default settings.
765 Writes the end of a paragraph to the output. Writes paragraph start if not already started.
766 Normalizes a word, handling specific Unicode ranges and forms.
767 Formats a Calendar object into a string representation. @param cal The Calendar object to format. Returns null if null.
768 Converts a Calendar object to an ISO 8601 formatted string. @param cal Calendar object to format. @return ISO 8601 formatted string.
769 Converts the byte array to a hexadecimal string representation.
770 Writes a CMS signature to the PDF. @param cmsSignature CMS signature as byte array. @throws IOException if signature is too large or an error occurs.
771 Writes the name object to the output stream, escaping invalid chars. @param output Output stream to write the name object to.
772 Writes byte array as hexadecimal to an output stream. @param bytes byte array to write @param output output stream to write to @throws IOException if an I/O error occurs
773 Parses an XML document from an input stream. @param is Input stream containing the XML document. @return Parsed Document object. @throws IOException if an I/O error occurs.
774 Detects file type based on initial bytes. @param inputStream BufferedInputStream to read from. @return FileType enum representing detected type.
775 Initializes the PDF stream engine by adding various operators.
776 Retrieves a COSName by its string representation. Creates and caches if not found, using weak references.
777 Initializes a COSFloat object with the given float value. @param aFloat The float value to be stored.
778 Initializes a COSFloat with a float value and string representation.
779 Parses a float string, handling PDFBox-specific formatting issues. @param aFloat The float string to parse. @throws IOException if parsing fails.
780 Constructs a COSInteger with the given value and validity. @param val The integer value. @param valid Indicates if the value is valid.
781 Creates a COSString from a byte array. @param bytes The byte array representing the string.
782 Constructs a new COSArray with an empty ArrayList and isFixed=true.
783 Initializes a COSStream with a RandomAccessStreamCache. @param streamCache Cache for accessing random access streams.
784 Creates an unmodifiable COSDictionary from another COSDictionary. @param dict The COSDictionary to copy.
785 Creates a default DecodeResult with an empty COSDictionary. Returns the newly created DecodeResult object.
786 Initializes a new PDDocumentInformation object. Creates a new COSDictionary to store document information.
787 Initializes a PDResources object with a COSDictionary and caches.
788 Constructs a new PDDictionaryWrapper with an empty COSDictionary.
789 Default constructor. Initializes the node with a new COSDictionary.
790 Default constructor, initializes with a new COSDictionary.
791 Constructs a PDMarkInfo object, initializing the dictionary.
792 Default constructor. Initializes the internal dictionary.
793 Initializes a new PDBoxStyle object with an empty COSDictionary.
794 Initializes a new PDCryptFilterDictionary with a COSDictionary.
795 Initializes a PDEncryption object by creating a COSDictionary.
796 Initializes a new FDF catalog with an empty COSDictionary.
797 Constructs a new FDFDictionary, initializing the FDF dictionary.
798 Constructs a new FDFField object, initializing the field.
799 Constructs a new FDFIconFit object, initializing the 'fit' dictionary.
800 Constructs a FDFJavaScript object, initializing its dictionary.
801 Constructs a new FDFNamedPageReference object. Initializes the internal reference dictionary.
802 Constructs a new FDFPage object, initializing the page dictionary.
803 Initializes a new FDFPageInfo object. Creates a new COSDictionary to store page information.
804 Constructs a new FDFTemplate object, initializing the template.
805 Constructs a PDDeviceNAttributes object, initializing the dictionary.
806 Constructs a PDDeviceNProcess object, initializing the dictionary.
807 Default constructor. Initializes the shading dictionary.
808 Initializes the PDAdditionalActions object. Creates a COSDictionary to store additional actions.
809 Initializes the annotation's additional actions with a COSDictionary.
810 Initializes an empty PDDocumentCatalogAdditionalActions. Creates a COSDictionary to store additional actions.
811 Constructs a PDFormFieldAdditionalActions, initializing actions.
812 Initializes the PDPageAdditionalActions with a new COSDictionary.
813 Creates a new PDTargetDirectory with an empty COSDictionary.
814 Initializes the URI dictionary with a new COSDictionary.
815 Initializes a PDWindowsLaunchParams object. Creates a COSDictionary to store launch parameters.
816 Initializes a new PDBorderEffectDictionary with a COSDictionary.
817 Initializes a new instance of the PDBorderStyleDictionary. Creates a COSDictionary to store border style properties.
818 Initializes a new PDPropBuild object with a COSDictionary.
819 Initializes a PDPropBuildDataDict with a COSDictionary. Sets the dictionary to use direct objects.
820 Constructs a PDSeedValueMDP with an empty, direct COSDictionary.
821 Initializes a PDSeedValueTimeStamp with an empty COSDictionary.
822 Constructs a PDField with an AcroForm and default dictionary. @param acroForm The parent AcroForm object.
823 Constructs a new PDViewportDictionary, initializing its COSDictionary.
824 Initializes a PDViewerPreferences object. Creates a new COSDictionary to store preferences.
825 Constructs a COSObject with a base object and key. @param object The base COSBase object. @param objectKey The key for the COSObject.
826 Creates a PDDefaultAttributeObject from a COSDictionary.
827 Constructs a PDUserAttributeObject from a COSDictionary.
828 Constructs a PDStandardAttributeObject from a COSDictionary.
829 Creates a PDOutlineItem from a COSDictionary. @param dic The COSDictionary containing outline data.
830 Retrieves the metadata object. Returns null if not a COSStream.
831 Retrieves metadata from the PDF document. @return PDMetadata object or null if not present.
832 Gets the extends stream from the COS object. @return PDObjectStream or null if not present.
833 Constructs a PDFunctionType0 with the given COSBase object.
834 Creates a PDFunctionType3 object from a COSBase. @param functionStream The COSBase representing the function stream.
835 Creates a PS XObject from a COSStream. @param stream The COSStream containing PS data.
836 Creates a PDFormXObject from a COSStream. @param stream The COSStream containing form data.
837 Creates a PDFormXObject from a COSStream and ResourceCache.
838 Default constructor for the PublicKeySecurityHandler class.
839 Default constructor for the StandardSecurityHandler class.
840 Constructs a PublicKeySecurityHandler with a protection policy. @param publicKeyProtectionPolicy The policy for public key protection.
841 Constructs a StandardSecurityHandler with a protection policy. @param standardProtectionPolicy The protection policy to use.
842 Creates a FDF annotation highlight from a COSDictionary.
843 Creates a FDF annotation squiggly line from a COSDictionary.
844 Creates a FDF annotation strikeout from a COSDictionary.
845 Creates an FDFAnnotationUnderline object from a COSDictionary.
846 Constructs a PDTilingPattern with a COSDictionary. @param dictionary The COSDictionary containing pattern data.
847 Creates a Type 3 shading with the given dictionary. @param shadingDictionary The COSDictionary for the shading.
848 Constructs a PDShadingType4 object from a COSDictionary.
849 Creates a ShadingType5 object from a COSDictionary. @param shadingDictionary The shading dictionary.
850 Creates a PDPageFitDestination object from a COS array. @param arr The COS array containing the destination parameters.
851 Creates a PDPageFitHeightDestination object from a COS array.
852 Constructs a PDPageFitRectangleDestination from a COS array.
853 Creates a PDPageFitWidthDestination object from a COS array. @param arr The COS array containing destination parameters.
854 Constructs a PDPageXYZDestination from a COSArray. @param arr The COSArray containing destination data.
855 Constructs a PDButton object. @param acroForm The PDF acroform. @param field The COSDictionary representing the field. @param parent The parent non-terminal field.
856 Constructs a PDSignatureField with an Acrobat form, field, and parent.
857 Constructs a PDVariableText object. @param acroForm The parent AcroForm. @param field The COSDictionary representing the field. @param parent The parent NonTerminalField.
858 Initializes MacOSRomanEncoding by iterating through the encoding table.
859 Creates a Type1Encoding from a FontBox encoding. @param encoding FontBox encoding to convert @return Type1Encoding populated from the given encoding
860 Generates a unique partial name by incrementing "Signature".
861 Returns a string representation of the object's contents.
862 Creates a PDSoftMask object from a COSBase dictionary. @param dictionary COSBase object containing mask data @return A PDSoftMask object
863 Constructs a COSDocument using a memory-only stream cache. @param parser The parser used to create the COSDocument.
864 Creates a PDMarkedContent instance based on the tag. @param tag tag to identify the content type @param properties properties for the content @return PDMarkedContent instance
865 Calculates the width of the rectangle. Returns the difference between x coordinates.
866 Checks if the given point (x, y) is within the bounds. @param x x-coordinate of the point @param y y-coordinate of the point @return True if the point is within bounds, false otherwise.
867 Calculates height by subtracting lower left Y from upper right Y.
868 Transforms the shape using the given matrix. @param matrix Transformation matrix to apply. @return GeneralPath representing the transformed shape.
869 Creates a GeneralPath representing the rectangle's shape. Returns a GeneralPath object.
870 Returns a string representation of the rectangle's coordinates.
871 Gets an integer at the specified index. @param index the index of the integer to retrieve @return the integer at the given index
872 Gets the name at the specified index. @param index Index of the name to retrieve. @return The name at the given index.
873 Creates an OutputStream with specified filters. @param filters COSBase object representing filters. @return OutputStream for writing data.
874 Creates a PDImageXObject with a stream and resources. @param stream The image stream. @param resources The image resources.
875 Determines the suffix based on the stream's filters. Returns null if no matching filter is found.
876 Writes a float operand to the output stream, followed by a space. @param real The float value to write. @throws IOException if writing fails.
877 Writes an integer operand to the output stream, formatted.
878 Writes the given text and then a newline character. @param text The text to write. @throws IOException If an I/O error occurs.
879 Checks if the collection is empty. @return True if the collection is empty, false otherwise.
880 Writes a COSFloat to the output stream, followed by a space. @param output Output stream to write to @param cosFloat COSFloat object to write
881 Returns the COS increment object from the update state.
882 Converts the COS array elements to a float array. Returns an array of floats, using 0.0 if not a COSNumber.
883 Converts COS numbers to a list of Float objects. Returns null for non-COSNumber elements.
884 Converts COS numbers to a list of Integers, null otherwise.
885 Returns the minimum value from the range array as a float.
886 Returns the maximum value from the range array as a float.
887 Retrieves a PDGamma object from the array at the given index. @param index index of the PDGamma object in the array @return PDGamma object or null if the index is invalid.
888 Retrieves BlendMode from COSBase, returns NORMAL if not found. @param cosBlendMode COSBase representing the blend mode. @return BlendMode object.
889 Returns a list of colorant names from the array.
890 Returns the alternate color space, creating it if necessary.
891 Returns the colorant name from the array.
892 Retrieves the first page from the array. Returns a PDPage object or null if the array is empty.
893 Gets the page number from the array. Returns -1 if empty.
894 Gets the zoom level from the array. Returns -1 if not a number.
895 Initializes a Matrix from a COSArray. @param array COSArray containing matrix elements.
896 Gets a dictionary object by the first or second key. @param firstKey First key to search for. @param secondKey Second key to try if the first fails. @return COSBase object or null if not found.
897 Retrieves a COSName object from the dictionary by key. @param key The COSName key to search for. @return The COSName object or null if not found.
898 Retrieves a COSDictionary associated with the given key. @param key The key to search for. @return The COSDictionary or null if not found.
899 Retrieves a COSStream object associated with the given key. @param key The key to look up. @return The COSStream object, or null if not found.
900 Retrieves a COSArray object associated with the given key. @param key The key to search for in the dictionary. @return The COSArray object, or null if not found.
901 Retrieves a COSName from the dictionary, or defaultValue if not found.
902 Gets the long value associated with a key, or default if absent. @param key COSName to look up @param defaultValue Default value if key is not found @return Long value or default value.
903 Gets the float value associated with a key, or default if absent.
904 Returns an iterator of content streams from the page.
905 Checks if the page content is not empty. Returns true if content exists, false otherwise.
906 Retrieves class names from COS object. Returns a Revisions object containing class names.
907 Retrieves the value associated with the key "K" from the COS object.
908 Retrieves the value associated with the "V" key. Returns a COSBase object representing the value.
909 Checks if metadata encryption is enabled. Returns true by default.
910 Retrieves the owner encryption key as a byte array. Returns null if the key is not found in the dictionary.
911 Retrieves the user encryption key from the dictionary. @return byte[] encryption key or null if not found.
912 Retrieves the permissions byte array from the dictionary. @return Permissions byte array or null if not found.
913 Gets the page number from the annotation dictionary. Returns Integer representing the page or null if not found.
914 Retrieves the COS value from the field. Returns COSBase or throws IOException for unknown types.
915 Gets the field flags from the field dictionary. @return Integer representing field flags, or null if not present.
916 Gets the set flags from the field's dictionary. @return Integer representing the set flags, or null.
917 Gets the clear flags value from the field dictionary. @return Integer representing clear flags, or null if absent.
918 Retrieves the widget field flags from the dictionary. @return Integer flag value or null if not found.
919 Gets the set widget field flags from the field dictionary. @return Integer representing the flags, or null if not present.
920 Gets the clear widget field flags from the field dictionary. @return Integer representing flags, or null if not present.
921 Returns the default width. Reads from dict or defaults to 1000.
922 Retrieves the color space from the dictionary. @return PDColorSpace object or null if not present.
923 Retrieves the color space from resources, creating if needed. @param resources PDResources object @return The color space.
924 Creates a PDOptionalContentGroup from a COSDictionary. @param dict The COSDictionary containing the OCG definition.
925 Creates a PDOptionalContentMembershipDictionary from a COSDictionary. @param dict The COSDictionary to initialize from.
926 Gets the overprint mode. Returns null if not found.
927 Retrieves the soft mask associated with this object. Returns null if no soft mask is present.
928 Gets the float value associated with the given key. @param key COSName representing the key to retrieve @return Float value or null if not found.
929 Retrieves the transfer object from the dictionary. Returns null if it's not a COSArray of size 4.
930 Retrieves the TR2 object from the dictionary. Returns null if it's not a COSArray of size 4.
931 Returns the backdrop color COS array, lazily initialized.
932 Gets the OpenMode for new windows, based on COS object. Returns OpenMode.USER_PREFERENCE if no value is found.
933 Gets the 'T' object from the action dictionary. Returns a COSBase object (Dictionary, String, or Array).
934 Gets the OpenMode for new windows based on COS object. Returns OpenMode.USER_PREFERENCE if no value is found.
935 Gets the OpenMode for new windows based on COS object. Returns OpenMode.USER_PREFERENCE if no value is found.
936 Retrieves a named destination from the dictionary. @return PDNamedDestination object or null if not found.
937 Retrieves the contents as a byte array. Returns empty array if null.
938 Retrieves the XFA resource. Returns null if not present.
939 Gets an inheritable attribute value by key. Returns value from dict, parent, or acroForm.
940 Retrieves the value associated with the 'V' key. Returns a COSBase object representing the value.
941 Returns the value of the COS object as a string. Returns "" if the value is null.
942 Returns the default value from the COS object.
943 Closes the visual signature and PDF source, releasing resources.
944 Clones a COSBase object for use in a new document. @param base The COSBase object to clone. @return Cloned COSBase object or the original if already cloned.
945 Writes a COS object to the output stream with associated key. @param key COSObjectKey identifying the object @param obj COSBase object to write
946 Retrieves the key for a given COSBase object from the pool. @param object The COSBase object to find the key for.
947 Checks if the object pool contains the given COSBase object. @param object The COSBase object to check for. @return True if the object is in the pool, false otherwise.
948 Creates a list of COSWriterObjectStream objects for writing. Returns a list of streams, each containing object data.
949 Retrieves a COSObjectKey, using a cache for performance. @param num object number @param gen object generation @return COSObjectKey object
950 Performs a BF search for objects, handling potential PDF truncations.
951 Finds offsets of object streams using breadth-first search. @return Map of object stream offsets and corresponding keys. @throws IOException if an I/O error occurs during the search.
952 Parses xref entries, resolving references using the provided resolver.
953 Parses an Xref table, extracting object information. @param startByteOffset offset of the Xref table @return true if parsing was successful
954 Retrieves or generates a COSObjectKey for a given COSBase object. @param obj The COSBase object to get the key for. @return The COSObjectKey associated with the object.
955 Adds a COSBase object to the key pool, assigning a key if needed. @param key The key for the object. @param object The COSBase object to add. @return The assigned COSObjectKey, or null if object already present.
956 Creates a COSWriter with the given output stream. @param outputStream The stream to write COS data to.
957 Sets a flag indicating whether the data needs updating.
958 Updates the object's state. Calls the overloaded method with true.
959 Gets string at index, returns defaultValue if not a COSString.
960 Gets the name as a String from a COS object. @param key COSName key to retrieve the name from. @return String representation of the name or null.
961 Retrieves a string value associated with the given COS key. @param key The COSName key to look up. @return The string value or null if not found.
962 Converts a COSDictionary to a Map<String, Object>. @param map The COSDictionary to convert. @return A Map<String, Object> or null if map is null.
963 Returns the file path as a string.
964 Retrieves the string value of the option object.
965 Returns the default appearance string from the option object.
966 Gets the named destination as a String. Returns null if namedDestination is neither COSString nor COSName.
967 Extracts string items from COSBase, supporting string or array input. @param items COSBase object containing items. @param pairIdx Index to extract from array (0 or 1). @return List of extracted strings.
968 Retrieves export values from inheritable attribute. Returns a list of strings, empty if no values exist.
969 Gets a list of strings for the given COS name. Returns empty list if value is not COSString or COSArray.
970 Retrieves the default appearance string from inheritable attributes. Returns null if the attribute is not a COSString.
971 Constructs a COSString object from a String. @param text The string to be wrapped in the COSString.
972 Constructs a PDVisibleSignDesigner from an image stream. @param imageStream Input stream for the visible signature image.
973 Reads an image from the given path and prepares it for display. @param path Path to the image file. @throws IOException if an I/O error occurs.
974 Constructs a PDTransparencyGroup from a given stream.
975 Parses a COSDictionary from the input source. @param isDirect if the dictionary is direct @return COSDictionary object
976 Reads a string from the source, skipping spaces. Returns the string or null if an error occurs.
977 Reads a string from the source, skipping spaces if specified. @param expectedString String to read @param skipSpaces Whether to skip leading/trailing spaces @throws IOException if the expected string is not found
978 Reads a string of specified length from the source. @param length The maximum length of the string to read. @return The string read from the source.
979 Reads an integer from the input source. Throws IOException if not a valid integer.
980 Reads a long value from the input source. Throws IOException if parsing fails.
981 Calculates the fixed offset for an object's xref table/stream. @param objectOffset Offset of the object to search for. @return Fixed offset or 0 if not found.
982 Computes an encrypted password based on revision and parameters. @param password Password bytes @return Encrypted password bytes
983 Encrypts user password using RC4 with owner password and revision. @param ownerPassword Owner's password for encryption. @param userPassword User's password to be encrypted.
984 Rotates the matrix by a given angle. @param theta Rotation angle in radians.
985 Translates the text matrix by the given x and y values. @param tx x-coordinate translation @param ty y-coordinate translation
986 Translates the vector by its x and y components. @param vector The vector to be translated.
987 Concatenates two matrices by multiplying b with a.
988 Constructs a PDDocument from a COSDocument. Uses default parameters if no other are provided.
989 Processes the CharSequence as a String token. Delegates to the String token processing method.
990 Returns the current access permission. Lazily initializes if null.
991 Computes the revision number based on version and permissions.
992 Encrypts or decrypts data using AES with a given key and IV. @param finalKey encryption key @param data input stream @param output output stream @param decrypt decrypt flag
993 Encrypts/decrypts data using AES-256. @param data Input stream. @param output Output stream. @param decrypt Decryption flag.
994 Encrypts data using RC4 algorithm. @param finalKey encryption key @param input data to encrypt @param output output stream for encrypted data
995 Copies data from an InputStream to an OutputStream. @param data Source InputStream. @param output Destination OutputStream.
996 Calls saslPrep with the 'true' flag. Delegates to saslPrep for query preparation.
997 Calls saslPrep with 'stored' flag set to false.
998 Retrieves the font, using cache or creating a new one. @return FontBoxFont object or null if not found.
999 Saves font information to a disk cache file. Handles potential IO/security exceptions.
1000 Sets the font provider and initializes font info. @param fontProvider The FontProvider to set.
1001 Initializes a shaded triangle with given points and colors. @param p Array of triangle points. @param c Array of colors for the triangle.
1002 Writes a CID CMap to the given output stream. @param out Output stream to write the CMap to. @throws IOException if an I/O error occurs.
1003 Loads a GlyphList from a resource file. @param filename name of the glyphlist file @param numberOfEntries number of glyph entries @return GlyphList object
1004 Retrieves a map of GID to code. Populates if empty. @return Map of GID (Integer) to code (Integer).
1005 Initializes the PDICCBased object with an ICC profile array. @param iccArray COSArray containing the ICC profile data. @throws IOException if an I/O error occurs.
1006 Ends the text clip by intersecting the clipping path. Resets state and clears text clippings for performance.
1007 Updates the graphics clip to match the current clipping paths.
1008 Returns an input stream for data to be signed. Throws IllegalStateException if PDF isn't prepared.
1009 Merges a diacritic character into the existing text position. @param diacritic The diacritic character to merge.
1010 Checks if this TextPosition overlaps with the given TextPosition. @param tp2 The TextPosition to check for overlap. @return True if overlaps, false otherwise.
1011 Checks if this TextPosition completely contains another. @param tp2 The TextPosition to check for containment. @return True if this TextPosition contains tp2, false otherwise.
1012 Writes a paragraph separator by ending and starting a paragraph.
1013 Writes a COS name to the output stream, followed by a space. @param output Output stream to write to. @param cosName COS name to write.
1014 Writes a COS name to the output stream, followed by a space. @param name The COS name to write. @throws IOException If an I/O error occurs.
1015 Writes a byte array to an OutputStream, as ASCII or hex. @param bytes byte array to write @param forceHex force hex encoding, regardless of ASCII chars @param output output stream to write to
1016 Initializes the PDF marked content extractor with the given encoding.
1017 Constructs a PDFTextStripper with default operators.
1018 Gets a dictionary object by key. @param key The key of the dictionary object. @return The COSBase object associated with the key.
1019 Retrieves a PDF object by its key. @param key The key of the object to retrieve. @return The COSBase object associated with the key.
1020 Checks if the object contains the given key name. @param name The key name to check. @return True if the key exists, false otherwise.
1021 Gets a filter by name. @param filterName The name of the filter. @return The filter object.
1022 Parses a COS name from the input stream. @return A COSName object representing the parsed name. @throws IOException if an I/O error occurs.
1023 Initializes a PDColor object from a COS array and color space. @param array COS array containing color components/pattern name. @param colorSpace The color space associated with the color.
1024 Returns a COSInteger for the given value, caching within range. @param val The integer value. @return A COSInteger object.
1025 Parses a hex string into a COSString. @param hex hex string to parse @return COSString representation of the hex string
1026 Initializes a new COSArrayList with an empty COSArray and ArrayList.
1027 Initializes a COSArrayList with a parent dictionary and key.
1028 Default constructor. Initializes the internal COS array.
1029 Creates a PDRectangle with specified coordinates and dimensions. @param x x-coordinate, @param y y-coordinate, @param width width, @param height height
1030 Creates a PDRectangle from a BoundingBox. @param box BoundingBox containing rectangle coordinates.
1031 Creates a new COSStream object and adds it to the stream list. @return The newly created COSStream object.
1032 Constructs a COSStream object with a null input stream.
1033 Constructs a COSStream with a stream cache and read view. @param streamCache Stream cache. @param randomAccessReadView Read view for stream data.
1034 Returns an unmodifiable COSDictionary based on this one.
1035 Returns the last DecodeResult or a default one if empty.
1036 Retrieves the resources dictionary. Returns null if not found.
1037 Default constructor for the PDAttributeObject class.
1038 Constructs a PDUserProperty with the given user attribute object.
1039 Default constructor for a PDOutlineNode.
1040 Default constructor for the PDDestinationNameTreeNode class.
1041 Default constructor for PDEmbeddedFilesNameTreeNode.
1042 Default constructor for the PDJavascriptNameTreeNode class.
1043 Default constructor. Calls the superclass constructor.
1044 Constructs a PDNonTerminalField, passing the acroForm.
1045 Constructs a PDTerminalField, passing the acroForm to the superclass.
1046 Constructs a PDLayoutAttributeObject from a COSDictionary.
1047 Constructs a PDListAttributeObject from a COSDictionary.
1048 Constructs a PDPrintFieldAttributeObject from a COSDictionary.
1049 Constructs a PDTableAttributeObject from a COSDictionary.
1050 Constructs a PDAppearanceStream from a COSStream. @param stream The COSStream to use for initialization.
1051 Constructs a PDTransparencyGroup from a COSStream and ResourceCache.
1052 Processes a TrueType collection file, adding fonts or logging errors. @param ttcFile The TrueType collection file to process.
1053 Adds a TrueType font to the font info list, handling various cases. @param fontHeaders Font headers object containing font information. @param file The font file object. @param hash Hash value of the font file.
1054 Adds a Type 1 font to the font info list, handling exceptions. @param pfbFile PFB file to process
1055 Creates a PDDestination object from a COSBase. @param base COSBase object to create the destination from. @return PDDestination object or null if base is null. @throws IOException if conversion fails.
1056 Constructs a PDCheckBox object from an AcroForm field. @param acroForm The parent AcroForm. @param field The COSDictionary representing the field. @param parent The parent non-terminal field.
1057 Initializes a PDPushButton with given form, field, and parent.
1058 Constructs a PDRadioButton with given form, field, and parent.
1059 Constructs a PChoice object, initializing with given parameters.
1060 Constructs a PDTextField with the given form, field, and parent.
1061 Saves the current graphics state onto the graphics stack.
1062 Saves the current graphics stack and pushes a clone onto it. @return The saved graphics stack.
1063 Constructs a COSDocument with a default memory-only stream cache.
1064 Returns a string representation of the COSDictionary. Handles potential IOExceptions, returning an error message.
1065 Clips the graphics to the provided rectangle. @param rectangle The rectangle to clip to.
1066 Gets the transformed bounding box of an appearance stream. @param appearanceStream The appearance stream to transform. @return The transformed Rectangle2D bounding box.
1067 Initializes graphics state with clipping path from the given rectangle. @param page The rectangle defining the initial clipping path.
1068 Returns the value at index 2 of the internal array.
1069 Returns the value at index 2 in the underlying array.
1070 Returns the value at index 3 of the internal array.
1071 Returns the value at index 4 in the array.
1072 Returns the integer value at index 5 of the array.
1073 Returns the value at index 2 of the internal array.
1074 Returns the value at index 2 of the internal array.
1075 Returns the value at index 3 of the internal array.
1076 Checks if the array's second element name equals TYPE_BOUNDED.
1077 Checks if the array's second element name equals TYPE_BOUNDED.
1078 Checks if the array's second element name equals TYPE_BOUNDED.
1079 Creates an output stream. @throws IOException if an I/O error occurs
1080 Creates an output stream for a given filter. @param filter COSName representing the filter to apply @return OutputStream for writing data with the filter
1081 Creates a thumbnail image from a COSStream. @param cosStream COSStream containing image data. @return PDImageXObject representing the thumbnail.
1082 Retrieves the image mask, or null if it's a color key mask.
1083 Gets the soft mask for the image. @return PDImageXObject representing the soft mask, or null.
1084 Writes the affine transform matrix to the output stream. @param transform AffineTransform object to write.
1085 Starts text mode, writing BEGIN_TEXT operator. Throws exception if nested calls are attempted.
1086 Ends the text mode, writing the END_TEXT operator. Throws exception if beginText() was not called first.
1087 Sets the text leading value and writes it to the output. @param leading The leading value to set. @throws IOException if an I/O error occurs.
1088 Writes a newline operator. Throws exception if not in text mode.
1089 Adds a newline at a specified text offset. @param tx X offset. @param ty Y offset.
1090 Saves the current graphics state by pushing it onto stacks. Throws exception if in text mode. Writes a SAVE operator.
1091 Restores the graphics state, throwing exception in text mode.
1092 Sets the stroking color using RGB values. @param r Red component (0.0-1.0) @param g Green component (0.0-1.0) @param b Blue component (0.0-1.0)
1093 Sets the stroking color using CMYK values. @param c, m, y, k CMYK color components (0.0-1.0) @throws IllegalArgumentException if values are outside 0..1
1094 Sets the stroking color gray value. @param g Gray value (0.0-1.0); throws IllegalArgumentException if out of range.
1095 Sets the non-stroking color using RGB values. @param r Red value (0..1) @param g Green value (0..1) @param b Blue value (0..1)
1096 Sets the non-stroking CMYK color. @param c,m,y,k CMYK color values (0.0 to 1.0) @throws IllegalArgumentException if values are out of range
1097 Sets the non-stroking gray color. @param g Gray value (0.0-1.0). Throws IllegalArgumentException if out of range.
1098 Adds a rectangle to the image. @param x, y rectangle coordinates, width, height @throws IOException if called in text mode
1099 Draws a cubic Bezier curve to (x3, y3) using (x1, y1) & (x2, y2). Throws exception if in text mode.
1100 Draws a quadratic Bezier curve to (x3, y3) from current point. @param x2 x-coordinate of the control point. @param y2 y-coordinate of the control point. @param x3 x-coordinate of the end point. @param y3 y-coordinate of the end point.
1101 Draws a cubic Bezier curve to (x3, y3) from (x1, y1). @param x1, y1 Control point 1. x3, y3 Destination point.
1102 Moves the cursor to the specified coordinates. @param x The x-coordinate. @param y The y-coordinate.
1103 Draws a line to the specified coordinates. @param x The x-coordinate of the line's endpoint. @param y The y-coordinate of the line's endpoint.
1104 Writes a stroke path operator, throws exception in text mode.
1105 Writes the CLOSE_AND_STROKE operator. Throws exception in text mode.
1106 Writes the FILL_NON_ZERO operator. Throws exception in text mode.
1107 Writes the FILL_EVEN_ODD operator. Throws exception in text mode.
1108 Writes the FILL_NON_ZERO_AND_STROKE operator. Throws exception if called within a text block.
1109 Writes the FILL_EVEN_ODD_AND_STROKE operator. Throws exception if called in text mode.
1110 Writes the CLOSE_FILL_NON_ZERO_AND_STROKE operator. Throws exception if called within a text block.
1111 Writes the CLOSE_FILL_EVEN_ODD_AND_STROKE operator. Throws exception if called within a text block.
1112 Closes the current subpath. Throws exception if in text mode.
1113 Clips the current subpath to the even-odd rule. Throws exception if called within a text block.
1114 Writes CLIP_EVEN_ODD operator and ENDPATH operator. Throws exception if called within a text block.
1115 Sets the line width by writing the value and operator. @param lineWidth The line width to set. @throws IOException If an I/O error occurs.
1116 Sets the line join style. @param lineJoinStyle Line join style (0-2). Throws IllegalArgumentException if invalid.
1117 Sets the line cap style. @param lineCapStyle Line cap style value (0-2). @throws IllegalArgumentException if value is out of range.
1118 Sets the line dash pattern with the given pattern and phase. @param pattern float array representing the dash pattern @param phase float representing the phase offset
1119 Sets the miter limit. @param miterLimit The miter limit value. Throws exception if <= 0.
1120 Writes the END_MARKED_CONTENT operator.
1121 Sets character spacing. @param spacing The spacing value to set. @throws IOException If an I/O error occurs.
1122 Sets the word spacing value. @param spacing The spacing value to set. @throws IOException if an I/O error occurs.
1123 Sets the horizontal scaling factor. @param scale The scaling factor to apply. @throws IOException if an I/O error occurs.
1124 Sets the text rendering mode. @param rm The RenderingMode to set. @throws IOException if an I/O error occurs.
1125 Sets the text rise value and writes it to the output. @param rise The text rise value to set.
1126 Creates a PDRectangle from a COSArray, clamping values to prevent errors.
1127 Creates a line dash pattern from a COS array and phase. @param array Array of floats defining the dash pattern. @param phase Initial phase value for the dash pattern.
1128 Returns a string representation of the PDRange object.
1129 Evaluates the function with given input, executes instructions, and returns the resulting float array.
1130 Reads a patch from the input stream, handling free or implicit edges. @param input ImageInputStream to read from, range and transform info. @return Patch object or null if EOF is reached.
1131 Reads a vertex from the input stream, applying transformations. @param input ImageInputStream to read from @return Vertex object with transformed coordinates and color.
1132 Returns the "before" color value. Delegates to getColourByIndex(0).
1133 Returns the "after" colour PDGamma object. Delegates to getColourByIndex(1).
1134 Returns the start color (index 2) of the gamma curve. @return PDGamma object representing the start color.
1135 Returns the end color of the gradient. Uses getColourByIndex(3) to retrieve the color.
1136 Gets the blend mode from the dictionary. Returns BlendMode object.
1137 Creates a Matrix from a COSArray. Returns an empty Matrix if invalid.
1138 Updates the document's highest XRef object number based on imported page.
1139 Retrieves a COSDictionary object given two keys. @param firstKey First key for dictionary lookup. @param secondKey Second key for dictionary lookup. @return COSDictionary or null if not found.
1140 Gets a boolean value from the dictionary, or defaultValue if not found.
1141 Gets an integer value from a COS object, defaulting to defaultValue.
1142 Retrieves filter names from the parameters dictionary. Returns a list of filter names or an empty list if none.
1143 Returns the color space, creating it if it doesn't exist. @return The color space associated with this object.
1144 Checks if a COSDictionary is a catalog. Checks for "type=Catalog" or presence of "FDF" key.
1145 Checks if a COSDictionary node is a page tree node. Returns true if the type is PAGES or contains KIDS.
1146 Returns the cryptographic filter method name. Uses the 'CFM' key from the cryptFilterDictionary.
1147 Returns the stream filter name, or IDENTITY if null.
1148 Returns the string filter name, or IDENTITY if null.
1149 Decrypts dictionary entries recursively. @param dictionary Dictionary to decrypt. @param objNum Object number for decryption. @param genNum Generation number for decryption.
1150 Converts a character code to a Unicode string using a CMap. @param code character code to convert @return Unicode string or null if conversion is not possible
1151 Returns the subType COS name. Lazily initializes if null.
1152 Retrieves the relationship COS name from the dictionary.
1153 Returns the appearance state COS name.
1154 Checks if the document is encrypted. Returns true if encryption exists, false otherwise.
1155 Returns the encryption dictionary from the trailer. Returns null if no encryption dictionary exists.
1156 Parses the document's root object from the trailer dictionary. Throws IOException if the root object is missing.
1157 Retrieves the cached AcroForm, applying fixups if needed. @param acroFormFixup Fixup object to apply, if not already applied. @return PDAcroForm object or null if not found.
1158 Retrieves viewer preferences from the document. @return PDViewerPreferences object or null if not found.
1159 Retrieves the names dictionary from the document. Returns a PDDocumentNameDictionary or null if absent.
1160 Retrieves the destination dictionary. Returns null if not present.
1161 Retrieves mark information from the document's COSDictionary. Returns PDMarkInfo object or null if not found.
1162 Retrieves the URI dictionary from the root object. @return PDURIDictionary object or null if not present.
1163 Retrieves the structure tree root from the document's root dictionary. @return PDStructureTreeRoot object or null if not found.
1164 Gets optional content properties from the root dictionary. Returns null if OCProperties dictionary is not found.
1165 Retrieves the destination names dictionary. @return PDDestinationNameTreeNode or null if not found.
1166 Retrieves the embedded files node from the name dictionary. Returns null if the dictionary is empty.
1167 Retrieves the JavaScript dictionary. Returns a PDJavascriptNameTreeNode or null if not found.
1168 Retrieves the transition dictionary for the page. @return PDTransition object or null if no transition exists.
1169 Retrieves a COSObject by kind and name from the resources. @param kind COSName of the dictionary. @param name COSName of the object to retrieve. @return COSObject or null if not found/incorrect type.
1170 Retrieves a COS object by kind and name from the resources. @param kind COS name of the dictionary. @param name COS name of the object within the dictionary.
1171 Returns COS names associated with a given kind. @param kind The kind of resource to retrieve names for. @return A set of COS names or an empty set if not found.
1172 Returns the page associated with this document. Returns null if no page is found.
1173 Retrieves the page associated with this object. @return PDPage object or null if not found.
1174 Returns the page associated with this document. Returns a PDPage object or null if the page is null.
1175 Creates and returns a PDNameTreeNode for the ID tree, or null.
1176 Retrieves the parent tree as a PDNumberTreeNode, or null.
1177 Extracts class map from COS dictionary, returns a Map.
1178 Retrieves a CryptFilterDictionary by name. @param cryptFilterName Name of the filter dictionary. @return CryptFilterDictionary or null if not found.
1179 Gets the border style dictionary. Returns null if not found.
1180 Gets the border effect dictionary. @return PDBorderEffectDictionary or null if not present.
1181 Retrieves the signature from the catalog's COSDictionary. @return A PDSignature object or null if no signature exists.
1182 Gets the JavaScript dictionary from the FDF. Returns a FDFJavaScript object or null if absent.
1183 Retrieves the appearance dictionary. Returns null if not present.
1184 Gets the appearance stream reference from the field. @return FDFNamedPageReference or null if not found.
1185 Gets the icon fit object from the field's IF dictionary. @return FDFIconFit object or null if dictionary is missing.
1186 Retrieves additional actions from the field's AA dictionary. Returns a PDAdditionalActions object or null if no dictionary.
1187 Retrieves page info from the page's COSDictionary. @return FDFPageInfo object or null if no info exists.
1188 Gets the template reference. Returns null if template is null.
1189 Retrieves PDCIDSystemInfo from the dictionary, or null if absent.
1190 Retrieves the Panose font descriptor. @return PDPanose object or null if not present.
1191 Returns the resources associated with this PDF dictionary. Creates and caches resources if not already present.
1192 Returns the character processing dictionary. Lazily initializes if null.
1193 Retrieves the process dictionary as a PDDeviceNProcess object. Returns null if the process dictionary is not found.
1194 Gets the render state based on the destination. @param destination RenderDestination (PRINT, VIEW, EXPORT) @return RenderState or null if not found.
1195 Returns the extended graphics state, or creates it if null.
1196 Retrieves resources from the COSDictionary. Returns PDResources object or null if not present.
1197 Gets the target directory. Returns a PDTargetDirectory object or null if not found.
1198 Creates and returns PDWindowsLaunchParams from COSDictionary. @return PDWindowsLaunchParams object or null if COSDictionary is null.
1199 Gets the target directory. Returns null if not present.
1200 Retrieves the appearance dictionary. @return PDAppearanceDictionary or null if not present.
1201 Returns the page associated with this document. Returns null if the page dictionary is not found.
1202 Retrieves the border effect dictionary. Returns a PDBorderEffectDictionary or null if absent.
1203 Retrieves the border style dictionary. @return BorderStyleDictionary or null if not present.
1204 Returns the previous URI, or null if it doesn't exist.
1205 Retrieves the external data dictionary. Returns a PDExternalDataDictionary or null if not present.
1206 Retrieves the border style dictionary. @return A PDBorderStyleDictionary or null if not present.
1207 Retrieves the border effect dictionary. @return PDBorderEffectDictionary or null if not present.
1208 Retrieves the border effect dictionary. Returns a PDBorderEffectDictionary or null if not present.
1209 Gets appearance characteristics dictionary. Returns null if absent.
1210 Retrieves additional actions for the annotation. Returns PDAnnotationAdditionalActions or null if no actions exist.
1211 Gets the border style dictionary. @return BorderStyleDictionary or null if not present.
1212 Retrieves the normal appearance entry. Returns a PDAppearanceEntry or null if not found.
1213 Retrieves the filter dictionary. Returns null if no filter exists.
1214 Retrieves the public section data dictionary. @return PDPropBuildDataDict object or null if not present.
1215 Retrieves the application data dictionary. @return PDPropBuildDataDict object or null if not present.
1216 Retrieves the MDP (Metadata for PDF) dictionary. @return PDSeedValueMDP object or null if not found.
1217 Retrieves the seed value certificate from the dictionary. Returns a PDSeedValueCertificate or null if not found.
1218 Gets the time stamp from the COSDictionary. Returns a PDSeedValueTimeStamp object or null.
1219 Retrieves the property build object from the dictionary. @return PDPropBuild object or null if not present.
1220 Retrieves a PDStructureElement from the COS dictionary. Returns null if the dictionary is null.
1221 Checks if the COS object has children. Returns true if FIRST dictionary exists, false otherwise.
1222 Returns default resources from the document dictionary. Returns null if no default resources are found.
1223 Retrieves additional actions for the form field. Returns null if no actions are present.
1224 Retrieves the signature value from the COS dictionary. @return A PDSignature object or null if no signature exists.
1225 Returns the default signature value, or null if not present.
1226 Creates and returns a PDSeedValue object from the COS dictionary. Returns null if the dictionary is null.
1227 Returns the measure dictionary. Returns null if not present.
1228 Retrieves document information from the thread. @return PDDocumentInformation object or null if not found.
1229 Retrieves the first PDThreadBead from the thread. Returns null if no bead is found.
1230 Creates and returns a PDThread object from the COSDictionary. Returns null if the dictionary is null.
1231 Returns the next PDThreadBead. Creates a new bead from COS data.
1232 Returns the previous bead. Creates a new PDThreadBead from the previous COSDictionary.
1233 Returns the page associated with this document. Returns null if the page dictionary is not found.
1234 Retrieves the metadata object. Returns null if no metadata exists.
1235 Retrieves the metadata of the page. @return PDMetadata object or null if no metadata exists.
1236 Retrieves the differences stream from the FDF object. Returns a COSStream object representing the differences.
1237 Returns the font file as a PDStream, or null if not present.
1238 Returns the font file 2 as a PDStream, or null if not present.
1239 Retrieves the Font File 3 stream. @return PDStream object or null if not found.
1240 Returns the CID set stream, or null if not present.
1241 Returns the sound stream associated with the action. Returns a COSStream object.
1242 Retrieves the normal icon as a PDFormXObject. Returns null if the icon stream is not found.
1243 Retrieves the rollover icon as a PDFormXObject. Returns null if the icon is not present.
1244 Retrieves the alternate icon as a PDFormXObject. Returns null if no icon is found.
1245 Retrieves the document ID as a COSArray from the trailer.
1246 Retrieves a list of output intents from the document. @return List of PDOutputIntent objects.
1247 Retrieves a list of PDThreadBead objects from the page. Returns a COSArrayList containing the extracted beads.
1248 Extracts viewport dictionaries from the page's VP array. @return List of PDViewportDictionary objects or null if empty.
1249 Returns a list of child nodes. @return List of child PDNameTreeNodes or null if none.
1250 Retrieves names from a COS array. Returns null if array is absent.
1251 Retrieves child nodes. Returns an empty list if none exist.
1252 Extracts number indices from a COS array. @return Map of integer indices to COSObjectable values.
1253 Gets the upper limit from the COS array. Returns Integer value or null if not found.
1254 Gets the lower limit from the COS array. Returns Integer value or null if not found.
1255 Returns the range values as a COSArray, or retrieves it if null.
1256 Returns the domain values as a COSArray. Lazily initializes if null.
1257 Returns the size array. Lazily initializes if null.
1258 Returns the decode values, using range values if decode is null.
1259 Returns the array of functions associated with this object. Lazily initializes if not already present.
1260 Returns the bounds array, or fetches it if null. @return COSArray containing the bounds, or null.
1261 Returns the encode COSArray, lazily initialized if null.
1262 Retrieves a list of user properties associated with the owner. @return List of PDUserProperty objects.
1263 Checks if the given edge is attached to this object. @param edge The edge to check. @return True if attached, false otherwise.
1264 Retrieves the color from the annotation's COS array. @return Color object or null if no color data is available.
1265 Retrieves the interior color from the annotation. @return Color object representing the interior color, null if absent.
1266 Returns an array of floats from the CL COS array, or null.
1267 Retrieves a list of ink arrays from the annotation. @return List of float arrays or null if inklist is missing.
1268 Retrieves the line data from the annotation. @return Float array representing the line or null.
1269 Returns the start point ending style from the annotation. Returns LE_NONE if the array is null.
1270 Gets the endpoint style from the annotation's LE array. Returns LE_NONE if the array is null.
1271 Retrieves the interior color from the annotation. Returns Color object or null if no color is defined.
1272 Gets the horizontal offset of the caption. Returns 0.0 if the array is null.
1273 Gets the vertical offset of the caption. Returns 0.f if the array is null.
1274 Returns the vertices of the annotation as a float array. Returns null if vertices are not present.
1275 Retrieves the interior color from the annotation. Returns a Color object or null if no color is defined.
1276 Returns the vertices as a float array, or null if none exist.
1277 Gets the ending style of the line's endpoint. Returns LE_NONE if the endpoint style is not defined.
1278 Gets the endpoint ending style from the annotation. Returns the style name or PDAnnotationLine.LE_NONE if null.
1279 Retrieves the interior color from the annotation. @return Color object representing the interior color, or null.
1280 Retrieves the interior color from the annotation. @return Color object representing the interior color, null if absent.
1281 Retrieves the coordinates from the annotation as a float array. Returns null if no coordinates are found.
1282 Returns the ID array from the FDF document.
1283 Retrieves a list of FDF fields from the FDF document. @return List of FDFField objects or null if no fields exist.
1284 Retrieves a list of FDF pages from the FDF document. @return List of FDFPage objects or null if no pages exist.
1285 Retrieves a list of child FDF fields. @return List of FDFField objects or null if none exist.
1286 Retrieves options from a COS array. Returns null if no options exist.
1287 Retrieves a list of FDF templates from the page. @return List of FDFTemplate objects or null if none exist.
1288 Retrieves a list of FDF fields from the template. @return List of FDFField objects or null if no fields exist.
1289 Returns the widths as a list of floats. Returns an empty list if widths are not present.
1290 Returns the transformation matrix as a float array. Returns identity matrix if not found in dictionary.
1291 Extracts component names from the dictionary's COMPONENTS array. @return List of component names, or an empty list if not found.
1292 Returns the background COS array, lazily initialized. Returns null if no background is defined.
1293 Returns the domain COS array, lazily initialized if null.
1294 Returns the extend COS array, lazily initialized if null.
1295 Returns the domain COS array, lazily initialized if null.
1296 Returns the coordinates array. Lazily initializes if null.
1297 Returns the decode values COS array. Lazily initializes if null.
1298 Retrieves the font setting. Returns null if no font is defined.
1299 Returns the fields array from the action object.
1300 Returns the fields array from the action object.
1301 Returns an array of floats representing differences in margins. Returns an empty array if margin data is not available.
1302 Returns an array of floats representing page margins. Returns an empty array if margins are not present.
1303 Returns an array of floats representing the callout data. Returns null if callout data is not present.
1304 Retrieves the ink list as a 2D float array. Returns an empty array if not found.
1305 Extracts line coordinates from a COS array. @return float[] line coordinates or null if absent.
1306 Gets the start point ending style from the COS array. Returns LE_NONE if the array is invalid or empty.
1307 Gets the endpoint ending style from the COS array. Returns LE_NONE if the array is invalid.
1308 Gets the horizontal offset of the caption. Returns 0.f if the offset is not available.
1309 Gets the vertical offset from the CO array. Returns 0.f if the array is null.
1310 Returns an array of floats representing quad points, or null.
1311 Returns the vertices as a float array, or null if none exist.
1312 Extracts path data from a COS array. @return A float[][] representing the path, or null if not found.
1313 Gets the start point ending style from the COS array. Returns PDAnnotationLine.LE_NONE if array is invalid.
1314 Returns the endpoint style from a COS array. Returns PDAnnotationLine.LE_NONE if not found.
1315 Returns an array of vertices as floats, or null if none exist.
1316 Returns an array of floats representing page margins. Returns an empty array if margins are not found.
1317 Retrieves an array of quad points from the COS object. Returns null if no quad points are found.
1318 Retrieves sub-filter names from the dictionary. Returns an empty list if no sub-filter is present.
1319 Returns a list of digest methods from the dictionary. Returns an empty list if no digest methods are found.
1320 Retrieves a list of reasons as COS name strings. Returns empty list if no reasons are present.
1321 Retrieves legal attestations as a list of strings. Returns an empty list if no attestations are present.
1322 Retrieves the subject as a list of byte arrays. Returns null if the subject is not present.
1323 Retrieves the key usage extensions as a list of strings. Returns null if no key usage is defined.
1324 Retrieves the issuer as a list of byte arrays. Returns null if the issuer is not present.
1325 Retrieves a list of byte arrays representing OID values. Returns null if OID array is not found in the dictionary.
1326 Retrieves byte range as an integer array. Returns empty array if byte range is not present.
1327 Retrieves a list of calculated fields in the order specified. Returns empty list if no calculation order is defined.
1328 Returns a list of selected option indices from a COS array. Returns empty list if the array is null.
1329 Retrieves number format dictionaries from COS array 'X'. @return Array of PDNumberFormatDictionary or null if absent.
1330 Retrieves number format dictionaries for the 'Y' array. @return Array of PDNumberFormatDictionary objects or null.
1331 Retrieves an array of PDNumberFormatDictionary objects from COS array. @return Array of PDNumberFormatDictionary or null if not found.
1332 Retrieves number format areas from the COS array. @return Array of PDNumberFormatDictionary objects, or null.
1333 Retrieves number format dictionaries from COS array. @return Array of PDNumberFormatDictionary objects or null.
1334 Retrieves line slopes from COS array. @return Array of PDNumberFormatDictionary or null if empty.
1335 Gets the origin of the coordinate system as a float array. Returns null if the origin is not defined.
1336 Returns the visibility policy from the dictionary.
1337 Gets a long value associated with the given key. @param key The key to look up. @return The long value or default if not found.
1338 Gets a long value associated with the given key. @param key The COSName key to look up. @return The long value, or -1L if not found.
1339 Gets a long value by key, using default if not found. @param key The key to retrieve. @param defaultValue Default value if key is not present.
1340 Sets the startXref position and resolves the Xref trailer. @param startxrefBytePosValue The byte position of the Xref.
1341 Gets the float value associated with the given key. @param key The key to look up. @return The float value or the default if not found.
1342 Gets the float value associated with the given COS name. @param key COS name to look up; returns default if not found.
1343 Gets a float value by key, using defaultValue if not found.
1344 Gets the user unit from the page, defaults to 1.0f if invalid.
1345 Gets the width value from the dictionary. @return Width as a float, defaults to 1 if not found.
1346 Returns the opacity value from the annotation. @return Float representing the opacity.
1347 Returns the font weight value, defaults to 0 if not found.
1348 Returns the italic angle as a float, defaults to 0.
1349 Returns the ascent value from the dictionary, or 0 if not found.
1350 Returns the descent value, defaulting to 0 if not found.
1351 Returns the leading value from the dictionary, defaults to 0.
1352 Returns the cap height. Corrects negative values observed in some fonts.
1353 Returns the x-height value, handling potential negative values.
1354 Returns the stem V value from the dictionary. @return The stem V value as a float.
1355 Returns the stem height from the dictionary, defaults to 0.
1356 Returns the average width. Uses COSName.AVG_WIDTH, defaults to 0 if not found.
1357 Returns the maximum width value from the dictionary. @return The maximum width as a float, defaults to 0.
1358 Returns the missing width value from the dictionary, defaults to 0.
1359 Returns the gamma value from the dictionary, defaults to 1.0f.
1360 Returns the X step value as a float, defaults to 0.
1361 Returns the Y step value from the COS object, defaults to 0.
1362 Returns the volume value, clamping it between 1 and -1.
1363 Returns the leader line length from the COS object. Returns 0 if the value is not found.
1364 Returns the leader line extension length from the COS object.
1365 Gets the leader line offset length from the COS object. Returns 0 if the value is not found.
1366 Returns the constant opacity value from the COS object.
1367 Returns the width of the object. Returns 0 if COSName.
1368 Returns the duration value as a float. Uses COSName.D as the key, defaults to 1.
1369 Returns the fly scale value from the COS object. Returns 1.0 if the value is not present.
1370 Extracts text regions from a PDF page. Populates regionCharacterList and regionText with extracted data.
1371 Returns the color space. Overloads getColorSpace(null).
1372 Creates a PDPropertyList based on the provided COSDictionary. @param dict The COSDictionary to use for creation. @return A PDPropertyList or subclass based on the dictionary type.
1373 Returns the line width as a Float. Uses COSName.LW to retrieve the value.
1374 Returns the miter limit value. Uses COSName.ML to retrieve the value.
1375 Returns the flatness tolerance value. Uses COSName.FL to fetch the value.
1376 Returns the smoothness tolerance value. Uses COSName.SM to retrieve the float value.
1377 Returns the stroking alpha constant from the PDF object.
1378 Returns the non-stroking alpha constant. Retrieves the value from COS using COSName.CA_NS.
1379 Retrieves offsets for COS objects found during a search. @return Map of COS object keys to their offsets.
1380 Writes a COSBase object to the output stream. Adds object to writtenObjects and writes its key.
1381 Writes a PDF object reference to the standard output stream. @param obj The COSBase object to write the reference for.
1382 Writes the document to the given output stream. @param output The output stream to write to. @throws IOException if an I/O error occurs.
1383 Clears the object list and updates the state.
1384 Removes and returns the object at the specified index. @param i index of the object to remove @return Removed COSBase object, or null if index is out of bounds
1385 Removes the specified object. @param o The object to remove. @return True if the object was removed, false otherwise.
1386 Clears all items and updates the state.
1387 Removes an item from the items map and updates the state. @param key The key of the item to remove.
1388 Updates updateState if origin states differ. @param updateState The COSUpdateState to potentially update.
1389 Sets the base object to COSNull, updates state, and clears parser.
1390 Sets the origin document state if not already set. @param originDocumentState The origin document state to set. @param dereferencing Flag indicating if dereferencing is active.
1391 Retrieves a string at the specified index. @param index The index of the string to retrieve.
1392 Gets name as string, delegates to PDFName version. @param key The key to get the name for.
1393 Gets name as string, using default if null. @param key COSName to retrieve. @param defaultValue Default value if key is null. @return String value of the name or default.
1394 Checks if a given offset points to a valid XRef stream. @param startXRefOffset Offset to check; returns true if valid.
1395 Retrieves the page mode. Returns PageMode.USE_NONE if null or invalid.
1396 Retrieves the page layout from the root COS object. Returns PageLayout.SINGLE_PAGE if layout is invalid.
1397 Gets the version string from the root object. @return Version string, or null if not present.
1398 Retrieves the "Trapped" information as a string.
1399 Returns the style as a string from the root object.
1400 Returns the type of the COS object as a String.
1401 Returns the owner of the COS object as a string.
1402 Returns the structure type as a String from the COS object.
1403 Creates a PDStructureNode based on the provided COSDictionary. @param node The COSDictionary defining the node type. @return A PDStructureNode or throws IllegalArgumentException.
1404 Returns the type of the COS object as a String.
1405 Gets the name of the COS object as a String.
1406 Returns the language as a String, or null if not set.
1407 Returns the type as a String from the properties.
1408 Returns the subtype name as a String. Retrieves the value associated with the SUBTYPE property.
1409 Retrieves the filter name from the dictionary. Returns the filter name as a String.
1410 Retrieves the sub-filter name from the dictionary.
1411 Creates an FDF annotation based on the subtype in the dictionary. @param fdfDic COSDictionary containing annotation information. @return An FDFAnnotation object or null if type is unsupported.
1412 Returns the intent name as a String from the annotation.
1413 Returns the line ending style as a String.
1414 Returns the version string from the catalog.
1415 Returns the document encoding, defaulting to "PDFDocEncoding".
1416 Returns the scale option, defaulting to SCALE_OPTION_ALWAYS if null.
1417 Returns the scale type, defaulting to proportional if null.
1418 Returns the base font name from the dictionary.
1419 Returns the type name as a string from the dictionary.
1420 Returns the subtype name as a String from the dictionary.
1421 Returns the font name from the dictionary.
1422 Returns the font stretch value from the dictionary.
1423 Returns the base font name from the dictionary.
1424 Returns the base font name from the dictionary.
1425 Returns the base font name from the dictionary.
1426 Returns the base font name from the dictionary.
1427 Checks if the dictionary is an NChannel dictionary. Returns true if the subtype is "NChannel", false otherwise.
1428 Returns the type as a String from the action.
1429 Returns the sub-type name as a String.
1430 Creates a PDAction based on the provided COSDictionary. @param action The COSDictionary representing the action. @return A PDAction object or null if action is invalid.
1431 Returns the subtype name from the COS object.
1432 Gets the caption positioning string from the COS object.
1433 Retrieves the intent of the COS object as a string.
1434 Returns the subtype name from the COS object.
1435 Gets the name as a string from the dictionary.
1436 Retrieves the filter name from the dictionary. @return Filter name as a String, or null if not present.
1437 Retrieves the URL type from the dictionary. @return URL type as a String.
1438 Retrieves the filter name from the dictionary. @return Filter name as a String, or null if not present.
1439 Gets the subfilter name from the dictionary. Returns the name as a String.
1440 Returns the field type as a String from the COS object.
1441 Returns the name of the COS object as a String.
1442 Retrieves the duplex setting as a string from preferences.
1443 Gets string value by key, using PDF name conversion. @param key The key to retrieve the string value for.
1444 Gets string value for a key, using default if null. @param key COSName key to retrieve @param defaultValue Default value if key is not found @return String value for the key or default value
1445 Returns the language string from the root COS object.
1446 Returns the title from the info object. @return The title string, or null if not present.
1447 Retrieves the author string from the COS info. @return The author string, or null if not present.
1448 Retrieves the subject from the PDF info dictionary. @return The subject as a String, or null if not present.
1449 Retrieves the keywords associated with the info object. @return String containing the keywords, or null if absent.
1450 Returns the creator of the object as a string.
1451 Returns the producer string from the COS info.
1452 Returns the prefix value from the root configuration.
1453 Returns the file Unicode string from the PDF's file system.
1454 Returns the file name as a string from the file system.
1455 Retrieves the DOS file attribute string. @return DOS file attribute string.
1456 Retrieves the MAC address from the file system. @return MAC address as a String, or null if not found.
1457 Gets the file's UNIX timestamp string. @return UNIX timestamp as a String.
1458 Returns the file description. @return File description string, or null if not set.
1459 Returns the element identifier as a string. Fetches the identifier from the COS object.
1460 Returns the title of the PDF document. Returns the string value associated with the "T" key.
1461 Gets the language of the COS object as a String.
1462 Gets the alternate description from the COS object. Returns a String value or null if not present.
1463 Returns the expanded form string from the COS object.
1464 Returns the actual text content of the COS object.
1465 Returns the formatted value from the COS object.
1466 Returns the actual text string from properties, or null.
1467 Returns the alternate description from properties, or null.
1468 Gets the expanded form from properties, or null if properties are null.
1469 Returns the date string from the annotation.
1470 Returns the name from the annotation. @return String representation of the name.
1471 Retrieves the contents string from the annotation. @return The contents string, or null if not present.
1472 Retrieves the title from the annotation. @return The title as a String, or null if not present.
1473 Returns the subject string from the annotation.
1474 Returns the symbol string from the annotation.
1475 Returns the rotation value from the annotation. @return String representing the rotation value.
1476 Returns the default appearance string from the annotation.
1477 Returns the default style as a string from the annotation.
1478 Returns the caption style as a string from the annotation.
1479 Returns the state string from the annotation.
1480 Returns the state model string from the annotation.
1481 Returns the status string from the PDF dictionary.
1482 Retrieves the target string from the PDF dictionary. @return The target string, or null if not present.
1483 Returns the partial field name as a String.
1484 Retrieves the name from the referenced COS object. @return The name as a String.
1485 Returns the font family name from the dictionary.
1486 Returns the character set from the dictionary. @return The character set string, or null if not present.
1487 Returns the name from the dictionary. @return The name as a String.
1488 Retrieves an array of group names from the COS array. Returns an empty array if no group names are found.
1489 Retrieves the value of the 'F' property as a string.
1490 Returns the value of the 'D' property as a string.
1491 Returns the value of the 'O' property as a String.
1492 Retrieves the value of property "P" as a string.
1493 Retrieves the URI from the action dictionary. Returns null if not found.
1494 Returns the filename associated with the PDF dictionary. @return The filename as a String.
1495 Retrieves the annotation name from the dictionary. @return Annotation name as a String.
1496 Returns the filename from the parameters. @return The filename as a String.
1497 Gets the directory path from the parameters. @return The directory string or null if not present.
1498 Retrieves the value of the 'P' parameter as a string.
1499 Retrieves the contents string from the dictionary. @return The contents string, or null if not present.
1500 Returns the modified date as a string from the COS object.
1501 Returns the annotation name from the COS object.
1502 Returns the default appearance string from the COS object.
1503 Returns the default style string from the COS object.
1504 Retrieves the title from a COS object as a String.
1505 Returns the document subject. Retrieves the subject string from the COS object.
1506 Returns the state of the COS object as a string.
1507 Returns the state model string from the COS object.
1508 Returns the normal caption from the COS object. Returns a String value.
1509 Returns the rollover caption from the COS object.
1510 Returns the alternate caption from the COS object.
1511 Retrieves the date string from the dictionary. @return Date string stored in the dictionary.
1512 Retrieves the operating system name from the dictionary. Returns OS name from array or string, if available.
1513 Extracts Subject DN entries from COS array as list of maps. @return List of maps representing Subject DN or null if absent.
1514 Retrieves the URL from the dictionary. @return The URL as a String, or null if not present.
1515 Retrieves the URL string from the dictionary. @return The URL as a String, or null if not present.
1516 Returns the name from the dictionary. @return The name as a String.
1517 Retrieves the location string from the dictionary. @return The location string, or null if not present.
1518 Retrieves the reason string from the dictionary. @return The reason string, or null if not present.
1519 Retrieves contact information from the dictionary. @return Contact info string or null if not present.
1520 Retrieves the title from the COS object as a String.
1521 Retrieves the partial name from the dictionary. Returns a String value associated with the COSName "T".
1522 Gets the alternate field name from the dictionary. Returns a String value from the dictionary using COSName.TU.
1523 Retrieves the mapping name from the dictionary. @return The mapping name as a String.
1524 Returns the default style string from the COS object.
1525 Returns the scale ratio from the COS object. Retrieves the value associated with the COSName.R.
1526 Retrieves the role map from the COS dictionary. Returns an empty map if no role map is found.
1527 Retrieves a list of options from the COS object.
1528 Retrieves display values from the COS dictionary. Uses COSName.OPT to get and FieldUtils to process.
1529 Retrieves the value of the attribute, handling indexing or returning as is.
1530 Returns the value of this object as a list of strings.
1531 Returns the default value as a list of strings.
1532 Default constructor. Initializes the file specification with an empty string.
1533 Sets the file name for the object. @param fileName The name of the file.
1534 Initializes a PDNamedDestination with the provided destination string. @param dest The named destination string.
1535 Sets the named destination. Null if dest is null. @param dest The destination string. @throws IOException if COSString creation fails.
1536 Reads the generation number from the input stream. Throws IOException if invalid (negative or > threshold).
1537 Reads and validates an object number. @throws IOException if the number is invalid.
1538 Retrieves user password based on revision. @param ownerPassword owner's password, revision, length @return Password bytes or empty array for specific revisions.
1539 Constructs a TensorPatch with given control points and color data.
1540 Encrypts data using RC4 algorithm. @param finalKey Encryption key. @param input Input stream. @param output Output stream.
1541 Returns the FontProvider instance, creating one if needed.
1542 Extracts shaded triangles from a coordinate color grid. @param patchCC 2D array of CoordinateColorPair objects @return List of ShadedTriangle objects
1543 Creates a PDICCBased color space from an ICC array and resources. @param iccArray ICC array @param resources Resources object @return PDICCBased color space
1544 Constructs a CoonsPatch with given points and color data. @param points Control points for the patch. @param color Color data for the patch.
1545 Processes a text position, potentially suppressing duplicates. @param text The text position to process.
1546 Processes a TextPosition, potentially suppressing duplicates.
1547 Converts a COSString to a Calendar object. @param text COSString to convert; null input returns null. @return Calendar object or null if input is null.
1548 Starts a marked content sequence with the given tag. @param tag The tag for the marked content sequence.
1549 Starts a marked content sequence with the given tag and mcid. @param tag COSName identifying the marked content @param mcid Integer representing the MCID
1550 Sets a marked content point with the given tag. @param tag COSName representing the marked content tag.
1551 Writes a COSString to an OutputStream. @param string COSString to write @param output Output stream to write to @throws IOException if an I/O error occurs
1552 Writes a byte array to an OutputStream. @param bytes The byte array to write. @param output The OutputStream to write to.
1553 Initializes the PDF graphics stream engine with the given page. @param page The PDF page to associate with this engine.
1554 Default constructor. Initializes the PDF marked content extractor.
1555 Default constructor. Disables bead separation.
1556 Retrieves a COSBase object from the given path. @param objPath Path to the COSBase object. @return The COSBase object at the specified path.
1557 Retrieves the value of a PDF attribute. @param attrName Name of the attribute to retrieve. @return COSBase object representing the attribute value.
1558 Retrieves attribute value; returns default if not found. @param attrName Attribute name to retrieve. @param defaultValue Value if attribute is missing.
1559 Checks if a specified key exists in the COS object's dictionary. @param name The name of the key to check. @return True if the key exists, false otherwise.
1560 Extracts string array from COS object by name. @param name COS object key. Returns null if not a COSArray.
1561 Gets name or array of names, or default if not found. @param name Name to retrieve. @param defaultValue Default value if name is not found. @return String or String[] representing the name(s).
1562 Retrieves a number or name from COS object, or default if not found. @param name COS object key. @param defaultValue Value if key is not found. @return Float value, name, or default value.
1563 Gets a number or array of numbers from COS object. @param name COS object key. @param defaultValue Default value if not found. @return Number, float array, or default value.
1564 Retrieves a PDGamma object by name from the COS array. @param name Name of the COS array to retrieve. @return PDGamma object or null if not found.
1565 Creates a unique key within a COSDictionary. @param kind The kind of dictionary. @param prefix Prefix for the new key. @return A unique COSName object.
1566 Sets the object at the given index to a COSInteger. @param index Index of the object to set. @param intVal Integer value for the COSInteger.
1567 Parses a string into a COSNumber (Integer or Float). @param number String representation of a number @return COSNumber object or throws IOException if invalid.
1568 Appends a child element with the given MCID. @param mcid The MCID of the child element to append.
1569 Returns the COSBase representation of the degrees value.
1570 Parses a COSHexString from the source. @return Parsed COSString or null if parsing fails. @throws IOException if an I/O error occurs.
1571 Default constructor, initializes rectangle with zero dimensions.
1572 Constructs a PDRectangle with specified width and height. @param width The width of the rectangle. @param height The height of the rectangle.
1573 Creates and returns a PDRectangle object from bounding box values.
1574 Calculates the difference rectangle based on annotations. Returns a PDRectangle representing the difference.
1575 Creates a padded rectangle based on the input rectangle. @param rectangle The base rectangle to pad. @param padding The padding amount to apply. @return A new PDRectangle with added padding.
1576 Adjusts rectangle dimensions based on provided differences. @param rectangle The rectangle to adjust. @param differences Array of 4 floats representing adjustments. @return A new PDRectangle with adjusted dimensions.
1577 Applies differences to a rectangle, adjusting its position/size. @param rectangle The rectangle to modify. @param differences Array of 4 floats: [dx, dy, dw, dh] @return A new PDRectangle with the applied differences.
1578 Applies padding to a PDRectangle. @param box The rectangle to pad. @param padding Padding value to apply. @return A new PDRectangle with applied padding.
1579 Creates a PDF XRefStream using the provided COSDocument. @param cosDocument The document to create the stream from.
1580 Creates a PDObjectStream from a PDDocument. @param document The PDDocument to create the stream from. @return A new PDObjectStream object.
1581 Creates a new PDStream associated with the given document.
1582 Creates a new PDStream using the provided COSDocument. @param document The COSDocument to use for stream creation.
1583 Creates a PDStream from an input stream, applying specified filters.
1584 Creates a COSStream from an InputStream. @param document PDDocument to add stream to. @param rawInput Input stream to create stream from. @return COSStream object.
1585 Encodes input stream to output stream using parameters. Delegates to the overloaded method with an unmodifiable dict.
1586 Default constructor for the PDDefaultAttributeObject class.
1587 Initializes the PDUserAttributeObject with the OWNER_USER_PROPERTIES owner.
1588 Default constructor for the PDStandardAttributeObject class.
1589 Default constructor for a PDOutlineItem, calls superclass constructor.
1590 Constructs a PDVariableText object, initializing with an AcroForm.
1591 Constructs a PDExportFormatAttributeObject from a COSDictionary.
1592 Returns the appearance stream for this entry. Throws exception if not an appearance stream.
1593 Extracts appearance streams from the sub-dictionary. Returns a map of COSName to PDAppearanceStream.
1594 Creates a PDXObject based on the COSBase and resources. @param base The COSBase object to create from. @param resources The resources to use. @return A PDXObject or null if base is null.
1595 Adds a TrueType font file. Handles OTF/TTF formats; logs errors.
1596 Constructs a PDShadingType6 object from a COSDictionary.
1597 Constructs a PDShadingType7 object from a COSDictionary.
1598 Retrieves a PDDestination object by name. @param name Destination name to retrieve. @return PDDestination object or null if not found.
1599 Retrieves the destination object. Returns a PDDestination object from the COS dictionary.
1600 Gets the destination object. Returns a PDDestination object from the COS dictionary.
1601 Retrieves the destination object. Returns a PDDestination object from the COS dictionary.
1602 Retrieves the destination object. Returns a PDDestination object from the COS dictionary.
1603 Constructs a PDComboBox object. @param acroForm The acroForm. @param field The field. @param parent The parent field.
1604 Constructs a PDListBox object. @param acroForm The AcroForm object. @param field The COSDictionary representing the field. @param parent The parent PDNonTerminalField.
1605 Constructs a COSParser with a key store and alias. @param source Input stream, password, keystore, and alias.
1606 Creates an output stream. @return An OutputStream object. @throws IOException if an I/O error occurs.
1607 Writes byte data to a PDF appearance stream. @param data The byte array to write. @param appearanceStream The stream to write to.
1608 Creates an AppearanceContentStream with a given stream. @param appearance The appearance stream. @param compress Whether to compress the stream.
1609 Sets the transformation matrix for text rendering. @param matrix The Matrix object defining the transformation. @throws IOException If an I/O error occurs.
1610 Transforms the matrix, throwing an exception in text mode. Writes the affine transform and concatenates the operator.
1611 Returns the bounding box of the PDF object. @return PDRectangle object representing the bounding box, or null.
1612 Returns the bounding box of the PDF object as a PDRectangle. Returns null if the bounding box is not found.
1613 Gets the rectangle from the annotation. @return PDRectangle object or null if not present.
1614 Extracts the fringe rectangle from the annotation. @return PDRectangle object or null if not present.
1615 Extracts the fringe rectangle from the annotation. @return PDRectangle object representing the fringe, or null.
1616 Retrieves the fringe rectangle from the annotation. Returns a PDRectangle or null if not present.
1617 Extracts the fringe rectangle from the annotation. @return PDRectangle object representing the fringe, or null.
1618 Gets the font bounding box from the dictionary. @return PDRectangle object representing the bounding box.
1619 Gets the font bounding box. @return PDRectangle object or null if not found.
1620 Gets the bounding box of the COS object. @return PDRectangle object or null if no bounding box exists.
1621 Gets the bounding box of the COS object. Returns a PDRectangle or null if bounding box is missing.
1622 Returns the bounding box rectangle. Creates it if it's null, from the dictionary.
1623 Retrieves a PDRectangle from the dictionary's RECT array. @return PDRectangle object or null if invalid.
1624 Gets the rectangle difference from the COS object. @return PDRectangle object or null if RD array is missing.
1625 Calculates the difference rectangle from the COS object. Returns a PDRectangle or null if the RD array is missing.
1626 Gets the bounding box of the COS object. @return PDRectangle object or null if bounding box is missing.
1627 Retrieves a rectangle from the bead's COS array. @return A PDRectangle object or null if no rectangle exists.
1628 Sets the line dash pattern using the provided array and phase.
1629 Retrieves the line dash pattern from the dictionary. @return PDLineDashPattern object or null if not found.
1630 Creates a stencil image from a PDImage with specified paint. @param pdImage Source image for stencil. @param paint Paint to use for the stencil. @return Buffered image representing the stencil.
1631 Returns a Matrix object from the COS object's dictionary.
1632 Retrieves a matrix object. Returns a Matrix object from the COS dictionary.
1633 Retrieves the matrix object. Returns a Matrix object from the COS dictionary.
1634 Retrieves an inheritable attribute from a COSDictionary. @param node Dictionary to search. @param key Attribute key. Returns value or null if not found.
1635 Gets a boolean value associated with the given key. @param key COSName of the boolean value @param defaultValue Default value if key not found @return Boolean value or default if key is absent
1636 Gets an integer value associated with the given key. @param key COSName representing the key @param defaultValue Default value if key not found @return Integer value or defaultValue if not present
1637 Gets an integer value from a COS object. @param firstKey First key to search. @param secondKey Second key to search.
1638 Creates a PDInlineImage object from parameters, data, and resources. Decodes image data based on specified filters.
1639 Determines the image suffix based on filters. Returns "png" if no match.
1640 Retrieves COS objects of specified types. @param type1 The first COSName type. @param type2 The second COSName type. @return List of COSObjects matching the types.
1641 Converts an integer code to its Unicode representation. Uses the default glyph list if one isn't provided.
1642 Checks if the document is encrypted. @return True if encrypted, false otherwise.
1643 Parses the FDF document. @return Parsed FDFDocument object. @throws IOException if parsing fails.
1644 Returns the AcroForm object for the document. Delegates to a helper method for form retrieval.
1645 Retrieves a PDColorSpace by name, caching if possible. @param name COSName of the color space @param wasDefault True if the color space was default @return PDColorSpace object
1646 Checks if a COS object has a color space. @param name COS name to check. @return True if color space exists, false otherwise.
1647 Retrieves an extended graphics state by name, caching if possible. @param name COSName identifying the extended graphics state. @return PDExtendedGraphicsState object or null if not found.
1648 Checks if a COSName represents an image XObject. @param name COSName to check; returns true if it is.
1649 Returns a list of color space names. Uses getNames with the COLORSPACE key.
1650 Returns a list of XObject names. Uses the getNames method with COSName.XOBJECT.
1651 Returns a list of font names defined in the PDF.
1652 Returns a list of property names. Uses getNames(COSName.PROPERTIES) internally.
1653 Returns shading names from the document. Uses the getNames method with COSName.SHADING.
1654 Returns a list of pattern names. Uses getNames with COSName.PATTERN as the key.
1655 Returns the names associated with the extended graphics state.
1656 Returns the standard cryptographic filter dictionary. Delegates to the internal method for retrieval.
1657 Returns the default cryptographic filter dictionary. Delegates to getCryptFilterDictionary with DEFAULT_CRYPT_FILTER.
1658 Retrieves a PDType3CharProc by character code. @param code Character code to retrieve. @return PDType3CharProc object or null if not found.
1659 Gets the rollover appearance entry. Returns a new entry or normal appearance if null.
1660 Gets the down appearance entry. Returns a new PDAppearanceEntry or the normal appearance.
1661 Returns the first child outline item. Uses COSName.FIRST to retrieve the child.
1662 Returns the last child outline item. Uses internal method to retrieve the item.
1663 Returns the signature value.
1664 Retrieves a value by index from numbers or recursively from kids. @param index The index of the value to retrieve. @return The value at the given index, or null if not found.
1665 Returns the number of output parameters. Uses cached value or calculates from rangeValues.
1666 Creates a PDRange object using range values and a given size. @param n The size of the range. @return A PDRange object.
1667 Clips input values to ranges defined in rangesArray, or returns input.
1668 Returns the number of input parameters. Caches the value for efficiency.
1669 Creates a PDRange object using domain values and input size n.
1670 Calculates a sample index based on the input vector. @param vector Input vector of integers. @return Calculated sample index.
1671 Gets the PDRange for a parameter from decode values. @param paramNum Parameter number to get the range for. @return PDRange object or null if not found.
1672 Creates a PDRange object using the encode array and parameter n.
1673 Checks if the "Top" element is attached. Delegates to the isAttached method.
1674 Checks if the element is attached to the bottom. Delegates to the isAttached method.
1675 Checks if the element is attached to the "Left" side.
1676 Checks if the element is attached to the "Right" side.
1677 Initializes a PDCIDFont with a dictionary and parent font.
1678 Initializes encoding with font encoding and applies differences. @param fontEncoding The COSDictionary containing font encoding data.
1679 Initializes the DictionaryEncoding with base encoding. @param fontEncoding The font's dictionary. @param isNonSymbolic Indicates if the font is non-symbolic. @param builtIn The font's built-in encoding.
1680 Initializes a ShadingContext with shading data, color model, transform, and matrix.
1681 Gets the decode range for a parameter. @param paramNum Parameter number to get decode range for. @return PDRange object or null if invalid parameter.
1682 Reads and returns the byte array from the provided PDF input stream.
1683 Reads and returns the byte array of filtered PDF content. @param pdfFile The PDF file as a byte array. @return Filtered byte array of the PDF content.
1684 Retrieves the revision number from the dictionary. @return Revision number as a long value.
1685 Gets the minimum revision number from the dictionary. Returns a long value representing the minimum revision.
1686 Creates a RandomAccessRead view based on filters or raw input. @return RandomAccessRead view. @throws IOException if an I/O error occurs.
1687 Gets a float value by name from the COS object. @param name Name of the float value to retrieve. @return The float value associated with the name.
1688 Returns the conversion factor from the COS object.
1689 Returns the leader line length from the annotation. @return The leader line length as a float.
1690 Returns the leader extend value from the annotation. @return float value representing the leader extend.
1691 Returns the leader offset value from the annotation.
1692 Returns the value of the 'V' property as a float.
1693 Returns the CYX value from the COS object as a float.
1694 Gets a float value by name from COS object, using default if missing.
1695 Returns the intensity value as a float. Retrieves the value from the COS object.
1696 Computes the font height based on bounding box and descriptor. @param font The PDFont object to analyze. @return The computed font height as a float.
1697 Creates a default position vector based on the given CID. @param cid Identifier for calculating vector position. @return A Vector object representing the default position.
1698 Retrieves properties by name, using cache if available. @param name COSName identifying the properties @return PDPropertyList object or null if not found
1699 Gets optional content as a PDPropertyList, or null if absent.
1700 Retrieves optional content as a PDPropertyList, or null.
1701 Retrieves a list of PDPropertyLists from the OCGs dictionary. Returns an empty list if no OCGs are found.
1702 Retrieves optional content as a PDPropertyList or null.
1703 Validates and updates xref offsets, falling back to brute force if needed.
1704 Saves data to the specified file. @param fileName File to save data to. @throws IOException if an I/O error occurs.
1705 Removes the specified object from the list. @param o object to remove @return true if removed, false otherwise
1706 Removes the element at the given index. @param index index of the element to remove @return the removed element
1707 Removes the specified object. Returns true if removed. @param o The COSBase object to remove.
1708 Removes a user property from the COS array. @param userProperty The property to remove.
1709 Removes a subject from the dictionary's subject array. @param subject The subject to remove as a byte array.
1710 Removes a key usage extension from the key usage array. @param keyUsageExtension The key usage extension to remove.
1711 Removes an issuer from the issuer array in the dictionary. @param issuer byte array representing the issuer to remove.
1712 Removes an OID from the dictionary's OID array. @param oid The OID to remove as a byte array.
1713 Clears the map and actuals list, effectively emptying the data.
1714 Removes the specified key. @param key The key to remove. @return The value associated with the removed key.
1715 Recursively collects updated COS entries based on update state. Checks exclusion, containment, and update status for inclusion.
1716 Recursively collects a COS object and its updates. Returns false if object is already processed.
1717 Sets the origin document state. @param originDocumentState The state to set.
1718 Retrieves the upper limit from the COS array. Returns the string at index 1 or null if array is null.
1719 Gets the lower limit from the COS array. Returns the string at index 0 or null if array is null.
1720 Retrieves the name from the COS object, using the provided name.
1721 Retrieves the rendering intent from the configuration dictionary. @return RenderingIntent object or null if not found.
1722 Returns the name as a string, using the "N" key.
1723 Gets name as string, using COSName conversion. @param key The key to look up. @param defaultValue Value if key is not found.
1724 Retrieves the guideline style name from the dictionary.
1725 Retrieves the icon name as a String from the annotation.
1726 Gets the attachment name from the COS object.
1727 Gets the line ending style from the COS object.
1728 Returns the highlight mode as a String. Uses COSName.H, defaults to HIGHLIGHT_MODE_INVERT.
1729 Returns the reply type as a string.
1730 Returns the name of the COS object as a String.
1731 Gets the name from the COS object. Returns the name as a String.
1732 Gets the highlighting mode from the COS object. Returns the name as a String, defaulting to "I".
1733 Gets the style string from the COS object.
1734 Returns the type of the COS object. Returns "ExData" if the type is not set.
1735 Returns the transition style as a String.
1736 Returns the dimension string from the COS object.
1737 Gets the motion name from the COS object.
1738 Gets the non-fullscreen page mode from preferences. Returns the value or a default if not found.
1739 Gets the reading direction from preferences. Returns "L2R" if not found.
1740 Returns the view area as a string, using a default if missing.
1741 Retrieves the view clip setting as a String.
1742 Retrieves the print area as a string from preferences. Uses BOUNDARY.CropBox as default if not found.
1743 Retrieves the print clip name from preferences. Returns a String, defaulting to BOUNDARY.CropBox.toString().
1744 Retrieves the print scaling preference. @return Print scaling value as a string.
1745 Checks/calculates XRef offset; returns offset or -1 if invalid.
1746 Checks if the object is empty (only owner present).
1747 Gets the parent structure node. Returns null if parent is absent.
1748 Creates an object from a COSBase, returns null if creation fails.
1749 Initializes the encryption handler with a COSDictionary. @param dictionary COSDictionary containing encryption details.
1750 Returns the security handler. @throws IOException if no security handler is configured.
1751 Retrieves a list of FDF annotations from the FDF document. @return List of FDFAnnotation objects, or null if none exist.
1752 Checks if FontInfo matches CIDSystemInfo based on registry/ordering.
1753 Checks if the attributes are N-channel. Returns true if attributes exist and are N-channel.
1754 Gets the open action. Returns PDDestination or PDAction, or null.
1755 Returns the action associated with the field. Uses PDActionFactory to create the action object.
1756 Extracts JavaScript actions from the document's COS array. @return Map of action names to PDActionJavaScript objects.
1757 Retrieves the 'F' action from the COSDictionary. Creates and returns a PDAction object.
1758 Retrieves the "E" action from the actions dictionary. Returns a PDAction object or null if not found.
1759 Gets the 'X' action from the actions dictionary. Returns a PDAction object or null if not found.
1760 Gets the "D" action from the actions dictionary. Returns a PDAction object or null if not found.
1761 Retrieves the "U" action from the actions dictionary. Returns a PDAction object or null if no such action exists.
1762 Retrieves the "FO" action from the action dictionary. Returns a PDAction object or null if not found.
1763 Retrieves the "BL" action from the actions dictionary. Returns a PDAction object or null if not found.
1764 Retrieves the PO action from the actions dictionary. Returns the action or null if not found.
1765 Retrieves the PC action from the actions dictionary. Returns a PDAction object or null if not found.
1766 Retrieves the PV action from the actions dictionary. Returns a PDAction object or null if not found.
1767 Retrieves the PI action from the actions dictionary. Returns the action or null if not found.
1768 Retrieves the WC action from the actions dictionary. Returns a PDAction object or null if not found.
1769 Retrieves the WS action from the actions dictionary. Returns the action or null if not found.
1770 Retrieves the DS action from the actions dictionary. Returns a PDAction object or null if not found.
1771 Retrieves the WP action from the actions dictionary. Returns a PDAction object or null if not found.
1772 Retrieves the DP action from the actions dictionary. Returns the action or null if not found.
1773 Gets the "K" action from the actions dictionary. Returns a PDAction object or null if not found.
1774 Retrieves the "F" action from the actions dictionary. Returns a PDAction object or null if not found.
1775 Retrieves the "V" action from the actions dictionary. Returns a PDAction object or null if not found.
1776 Retrieves the 'C' action from the actions dictionary. Returns a PDAction object or null if not found.
1777 Retrieves the action associated with the "O" key. Returns a PDAction object or null if not found.
1778 Retrieves the "C" action from the actions dictionary. Returns a PDAction object or null if not found.
1779 Creates and returns a PDAction object from the COS dictionary. Returns null if the dictionary is null.
1780 Creates and returns a PDAction object from the COS dictionary. Returns null if the dictionary is null.
1781 Returns the action associated with this PDF object.
1782 Retrieves a string value associated with the given property key. @param propertyKey Key for the property string value. @return String value or null if key doesn't exist.
1783 Retrieves the value of a custom metadata field. @param fieldName Name of the metadata field to retrieve. @return The value of the specified field, or null if not found.
1784 Retrieves a string value by name from the COS object. @param name The name of the string to retrieve. @return The string value, or null if not found.
1785 Retrieves the "Base" string value from the COS object.
1786 Retrieves the version string from the configuration dictionary.
1787 Retrieves the "U" string value from the COS object.
1788 Retrieves a string value by key, returns defaultValue if not found.
1789 Gets string value from COS dictionary, or default if not found. @param embedded COS name of dictionary @param key COS name of key @param defaultValue Default value if key is not present
1790 Returns the operation name, defaulting to OPERATION_OPEN.
1791 Returns the default appearance string from the dictionary. Returns an empty string if not found.
1792 Retrieves the filename, trying multiple sources if needed.
1793 Checks if a group with the given name exists. @param groupName The name of the group to check. @return True if the group exists, false otherwise.
1794 Returns the fully qualified name, combining parent and partial names.
1795 Returns a list of exportable option values. Delegates to the getOptions() method.
1796 Encrypts or decrypts data using RC4 or AES based on parameters. @param decrypt True for decryption, false for encryption
1797 Computes an encrypted key based on revision and input parameters. @param password Password used for encryption.
1798 Checks user password based on encryption revision. @param password Password to verify. @return True if password matches, false otherwise. @throws IOException if revision is unknown.
1799 Finds a FontBoxFont by format and PostScript name, trying variations. @param format Font format (e.g., embedded, subset) @param postScriptName PostScript font name to search for @return FontBoxFont object or null if not found
1800 Converts a COSString to a Calendar object. @param text COSString to convert; returns null if null.
1801 Writes a COS string to the output stream, followed by a space. @param output The output stream to write to. @param cosString The COS string to write.
1802 Writes text to the output stream, using the current font. @param text The text to write. @throws IOException if an I/O error occurs.
1803 Constructs a PageDrawer with provided parameters. @param parameters PageDrawerParameters object containing settings
1804 Returns the color using the default color type (C). @return The color object.
1805 Returns the border color of the PDF form field. Uses getColor(COSName.BC) to retrieve the color.
1806 Returns the background color. Uses getColor(COSName.BG) to retrieve the color.
1807 Sets the value at index 2 of the array to the given high value.
1808 Sets the page number at index 0 in the array. @param pageNumber The page number to set.
1809 Parses a COS string, handling escaped characters and nesting. @return COSString object representing the parsed string @throws IOException if parsing fails
1810 Extracts content from an InputStream based on byte range. @param pdfFile Input stream containing PDF data. @return Byte array of extracted content.
1811 Extracts a byte range from a PDF file and returns its contents. @param pdfFile The PDF file as a byte array. @return Extracted byte array.
1812 Creates a new immutable rectangle with specified width and height.
1813 Returns the bounding box rectangle. Returns the rectangle object.
1814 Constructs a Metadata object for the given document. Sets the type and subtype COS names.
1815 Creates a PDEmbeddedFile object associated with a PDDocument. Sets the type to EMBEDDED_FILE in the COS object.
1816 Constructs a PDXObject with a document and subtype. @param document The document this object belongs to. @param subtype The subtype of the XObject.
1817 Creates a PDImageXObject with a new PDStream. @param document The document this image belongs to.
1818 Constructs a PDStream with a document and input stream. @param doc The parent document. @param input The input stream for the stream data.
1819 Constructs a PDStream with a COSBase filter. @param doc The document. @param input The input stream. @param filter The filter for the stream.
1820 Constructs a PDStream with filters cast to COSArray. @param doc The parent document. @param input Input stream for the stream data. @param filters Filters applied to the stream.
1821 Creates a PDImageXObject from an image stream. @param document PDDocument, stream, filter, width, height, bits, colorSpace
1822 Constructs a PDLayoutAttributeObject, setting its owner to OWNER_LAYOUT.
1823 Initializes the PDListAttributeObject with the OWNER_LIST owner.
1824 Constructs a PDPrintFieldAttributeObject, setting the owner.
1825 Initializes the PDTableAttributeObject, setting its owner to OWNER_TABLE.
1826 Creates a PDAttributeObject based on the provided COSDictionary. @param dictionary The COSDictionary to create the object from. @return A PDAttributeObject subclass or PDDefaultAttributeObject.
1827 Retrieves the normal appearance stream from the appearance dictionary. Returns null if no normal appearance is defined.
1828 Gets the 'On' value from the annotation widget's appearance. Returns "" if no 'On' value is found.
1829 Returns the transparency group, or creates it if null. @return PDTransparencyGroup object, or null if not present.
1830 Finds a named destination page. @param namedDest Named destination object to search for. @return PDPageDestination object or null if not found.
1831 Constructs a COSParser with a RandomAccessRead source. @param source Input stream for parsing COS data.
1832 Constructs a PDF parser with a key store and alias. @param source Input stream for PDF data. @param decryptionPassword Password for decryption. @param keyStore Key store for encryption. @param alias Key alias.
1833 Constructs a PDAppearanceContentStream from an appearance stream.
1834 Creates a PDFormContentStream from a PDFormXObject. @param form The form XObject to create the stream from.
1835 Creates a PDPageContentStream with a provided appearance stream. @param doc The document. @param appearance The appearance stream.
1836 Constructs a PDPatternContentStream from a PDTilingPattern. @param pattern The tiling pattern to use.
1837 Draws an arrow on the content stream. @param cs Content stream to draw on. @param x x-coordinate of the arrow's base. @param y y-coordinate of the arrow's base. @param len Length of the arrow.
1838 Draws a shape based on line width, stroke, and fill flags.
1839 Draws a diamond shape on the content stream. @param cs Content stream to draw on. @param x X-coordinate of the diamond's center. @param y Y-coordinate of the diamond's center. @param r Radius of the diamond.
1840 Draws a circle on the content stream at (x, y) with radius r.
1841 Draws a circle on the PDF content stream. @param cs Content stream to draw on. @param x Circle's x coordinate. @param y Circle's y coordinate. @param r Circle's radius.
1842 Draws a paperclip shape using the provided content stream.
1843 Sets line width, avoiding redundant commands for default (1). @param lineWidth The desired line width. @throws IOException if an I/O error occurs.
1844 Creates a BufferedImage from a tiling pattern. @param drawer Drawer for rendering. @return BufferedImage containing the rendered pattern.
1845 Calculates the anchor rectangle for a tiling pattern. @param pattern The tiling pattern to process. @return Rectangle2D representing the anchor rectangle.
1846 Gets the stencil image for the image with the given paint. @param paint The paint to use for the stencil. @return The stencil image.
1847 Retrieves the raw raster data from a PDF image. @param pdImage PDF image object @return WritableRaster containing image data @throws IOException if image is empty or invalid.
1848 Creates a BufferedImage from a PDImage, region, subsampling, and color key. @param pdImage The PDF image. @param region The region to extract. @return A BufferedImage or throws IOException.
1849 Retrieves the resources associated with the page. Returns PDResources object, caches if available.
1850 Returns the media box rectangle, or U.S. Letter if not found. @return PDRectangle representing the media box.
1851 Gets the page rotation angle. Returns 0 if no rotation is set.
1852 Gets a boolean value by key, using default if not found. @param key The key to retrieve the boolean value for. @param defaultValue The default boolean value if key is absent. @return The boolean value associated with the key.
1853 Checks if the file system object is volatile. Returns true if volatile, false otherwise.
1854 Checks if the object is hidden. Returns true if hidden, false otherwise.
1855 Checks if metadata encryption is enabled. Returns true by default based on standard.
1856 Returns the caption as a boolean value. Defaults to false.
1857 Checks if the annotation should scale to fit. @return True if scaling is enabled, false otherwise.
1858 Checks if the template should be renamed. Returns true if the "RENAME" property is true, otherwise false.
1859 Checks if the COS object is isolated. Returns true if isolated, false otherwise.
1860 Checks if the COS object represents a knockout. Returns true if K flag is set, false otherwise.
1861 Returns whether anti-aliasing is enabled. Returns true if enabled, false otherwise.
1862 Returns the overprint control value from the dictionary.
1863 Returns true if automatic stroke adjustment is enabled.
1864 Checks if the alpha source flag is enabled. Returns true if enabled, false otherwise.
1865 Returns the text knockout flag from the dictionary. Defaults to true if the flag is not present.
1866 Returns the value of the 'H' flag as a boolean. Defaults to true if 'H' is not present.
1867 Returns whether the action is synchronous. Uses COSName.SYNCHRONOUS, defaults to false.
1868 Returns the repeat flag from the action object. Returns false if the flag is not set.
1869 Returns the mix value from the action object. @return True if mix is enabled, false otherwise.
1870 Checks if the COS object has a caption. Returns true if present, false otherwise.
1871 Returns the 'Open' flag from the COS object, defaulting to false.
1872 Checks if the document is a pre-release version. Returns true if pre-release, false otherwise.
1873 Checks if non-e-font warnings are disabled. Returns true if disabled, false otherwise.
1874 Checks if trusted mode is enabled. Returns true if enabled, false otherwise.
1875 Returns whether appearances are needed, defaulting to false.
1876 Checks if the fly area is opaque. Returns true if opaque, false otherwise.
1877 Checks if the toolbar should be hidden based on preferences. @return True if toolbar is hidden, false otherwise.
1878 Checks if the menubar should be hidden based on preferences. @return True if menubar is hidden, false otherwise.
1879 Checks if window UI should be hidden based on preferences. @return True if hidden, false otherwise.
1880 Checks if window fitting is enabled based on preferences. @return True if fit window is enabled, false otherwise.
1881 Checks if the window should be centered. @return True if centered, false otherwise.
1882 Checks if document title display is enabled in preferences. @return True if enabled, false otherwise.
1883 Gets an integer from an embedded dictionary, returns default if null. @param embeddedDictionary The dictionary containing the embedded dictionary. @param key The key for the integer value. @param defaultValue The default value if the key is not found.
1884 Gets an integer value associated with the given key. @param key The key to retrieve the integer value for.
1885 Gets an integer value associated with the given COS name. @param key The COS name to look up.
1886 Gets an integer value associated with the given key. @param key The key to retrieve the integer value for. @param defaultValue Returns defaultValue if key not found.
1887 Checks if a bit is set in the integer value of a COS field. @param field COS field to check. @param bitFlag Bit flag to check for.
1888 Returns the count value from the root object. @return The count value, defaults to 0 if not found.
1889 Returns the start value from the root, defaulting to 1.
1890 Returns the order value from the COS object, defaults to 1.
1891 Gets the revision number from the COS object. Returns 0 if the revision number is not found.
1892 Returns the length of the crypt filter dictionary. Returns 40 if not found.
1893 Returns the version number from the dictionary. Returns 0 if the version is not found.
1894 Gets the length value from the dictionary. Returns the integer value or 40 if not found.
1895 Returns the revision number from the dictionary. Uses DEFAULT_VERSION if revision is not found.
1896 Gets the permission flags from the COS dictionary. @return Integer representing the permission flags.
1897 Returns the justification value from the annotation.
1898 Returns the flags value, caching it for subsequent calls.
1899 Creates a PDAbstractPattern based on the provided dictionary. @param dictionary COSDictionary containing pattern definition @param resourceCache Resource cache for pattern resources @return PDAbstractPattern instance
1900 Returns the paint type from the COS object, defaults to 0.
1901 Returns the tiling type from the COS object, defaulting to 0.
1902 Creates a PDShading object based on the shading type in dict. @param shadingDictionary COSDictionary containing shading info. @return PDShading object or throws IOException on error.
1903 Gets the bits per flag from the COS object, -1 if not found.
1904 Gets the number of vertices per row from a COS object. Returns -1 if the value is not found.
1905 Returns the bits per color component. Returns -1 if not initialized.
1906 Returns the bits per coordinate, caching the value. Returns -1 if not found in COS object.
1907 Returns the flags value. Returns 0 if not found.
1908 Returns the flags value. Uses COSName.FLAGS, defaults to 0 if not found.
1909 Gets the page number from the dictionary. Returns -1 if the page number is not found.
1910 Returns the annotation index from the dictionary, -1 if not found.
1911 Gets annotation flags from the COS object. Returns integer value; defaults to 0 if not present.
1912 Returns the value of the 'Q' integer parameter. Defaults to 0 if not found in COS object.
1913 Gets the rotation value from the COS object. Returns 0 if the value is not found.
1914 Checks if a timestamp is required based on dictionary value.
1915 Gets the open count from a COS object, defaults to 0.
1916 Returns the Q value from the dictionary, defaults to 0.
1917 Returns the top index from the COS object, defaults to 0.
1918 Returns a list of COS objects of the specified type. @param type COSName representing the object type to retrieve.
1919 Removes page resources from the cache, excluding inherited resources.
1920 Gets a color space by name. @param name The name of the color space. @return The color space object.
1921 Retrieves the embedded file from the EF dictionary. @return PDEmbeddedFile object or null if not a stream.
1922 Retrieves the embedded file's DOS dictionary. @return PDEmbeddedFile object or null if not a stream.
1923 Retrieves the embedded file (MAC) as a PDEmbeddedFile. @return PDEmbeddedFile object or null if not found.
1924 Gets the embedded file from the dictionary using UNIX key. @return PDEmbeddedFile object or null if not found.
1925 Retrieves an embedded file using the UF dictionary. @return PDEmbeddedFile object or null if not a COSStream.
1926 Initializes an AxialShadingContext with shading data and transforms.
1927 Creates a RadialShadingContext with specified parameters. @param shading The PDShadingType3 object.
1928 Creates a TriangleBasedShadingContext with given parameters. @param shading The shading to use. @param cm The color model. @param xform The affine transform. @param matrix The matrix.
1929 Initializes Type1ShadingContext with provided parameters. @param shading Type1 shading object @param colorModel ColorModel @param xform AffineTransform @param matrix Matrix
1930 Creates a PDF object stream parser. @param stream COSStream to parse, @param document COSDocument context
1931 Initializes a PDCIDFontType0 font from a COSDictionary and parent. @param fontDictionary Font dictionary. @param parent Parent PDType0Font.
1932 Creates a PDCIDFontType2 font from a dictionary and parent. @param fontDictionary Font dictionary. @param parent Parent font. @param trueTypeFont TrueType font, or null to auto-detect.
1933 Reads a CMap from a COSBase object (Name or Stream). @param base COSBase object containing the CMap data. @throws IOException if the base object is not a Name or Stream.
1934 Writes the document body, including root, info, and encrypt dicts. @param doc The COSDocument to write. @throws IOException if an I/O error occurs.
1935 Saves data to a file. @param fileName The name of the file to save to. @throws IOException If an I/O error occurs.
1936 Recursively collects COSBase objects, avoiding duplicates. Returns false if the base is already contained.
1937 Sets the trailer dictionary and updates its origin document state.
1938 Updates the object's state based on a child object. @param child The child object to use for updating.
1939 Retrieves a value by name, searching names and kids. @param name The name to search for. @return The value associated with the name, or null.
1940 Gets the name as a String, using default if name is null. @param name Name to retrieve. @param defaultValue Default value if name is null.
1941 Retrieves the style name from the COS object. Returns the style as a String, defaults to STYLE_SOLID.
1942 Retrieves the root of the structure tree. Returns PDStructureTreeRoot or null if not found.
1943 Retrieves a list of kid objects from the COS structure.
1944 Returns the encryption object, creating it if needed.
1945 Prepares decryption by initializing security handler and materials. Throws IOException on failure.
1946 Reads the font encoding and determines if it's a predefined CMap.
1947 Adjusts length1 based on 'exec' marker position in bytes. Returns adjusted length1 or original if invalid.
1948 Adjusts length2, ensuring it's within valid bounds. @param length2 The length to validate. @return Validated length, or max length if invalid.
1949 Returns the fractional display string from the COS object.
1950 Returns the thousands separator string from the COS object. Defaults to "," if not found.
1951 Returns the decimal separator from the COS object, defaulting to ".".
1952 Gets the label prefix string from the COS object. Returns the string value associated with the "PS" key.
1953 Gets the label suffix string from the COS object. Returns the value of the "SS" attribute or a space if null.
1954 Gets the label position to value string from the COS object.
1955 Gets embedded string by key, using default encoding. @param embedded COS object containing the string. @param key Key to retrieve the string by.
1956 Finds font matches based on descriptor and CID system info. @param fontDescriptor PDFontDescriptor object @param cidSystemInfo PDCIDSystemInfo object, optional filter @return PriorityQueue of FontMatch objects
1957 Checks if the provided password matches the owner's password. @param ownerPassword Owner's password to verify.
1958 Parses a CharSequence into an InstructionSequence. Uses a builder to construct the sequence.
1959 Decrypts a COSStream based on its filter and metadata type. @param stream COSStream to decrypt. @param objNum Object number of the stream. @param genNum Generation number of the stream.
1960 Encrypts the data within a COSStream. @param stream COSStream to encrypt @param objNum Object number for encryption @param genNum Generation number for encryption
1961 Decrypts a COSString using the provided object and generation numbers. Returns the decrypted COSString or the original if decryption fails.
1962 Encrypts a COSString and returns a new COSString object. @param string COSString to encrypt @param objNum Object number for encryption @param genNum Generation number for encryption @return Encrypted COSString
1963 Checks user password based on revision. @param password Password to verify. @return True if password matches, false otherwise.
1964 Finds a FontBox font by postscript name, tries PFB, TTF, OTF. @param postScriptName Font's postscript name. @return FontBoxFont or null if not found.
1965 Writes a page of text to the PDF document. Handles sorting, spacing, and line breaks.
1966 Retrieves a calendar object from the dictionary by key. @param key COSName representing the key to retrieve @return Calendar object or null if not a COSString.
1967 Writes a COS base object to the output stream. Delegates to writeObject for actual writing.
1968 Writes a COSBase object to the output stream, handling references. @param output Output stream to write to @param object COSBase object to write @param topLevel True if writing top-level object
1969 Writes text and operands to output, adjusting positioning. @param textWithPositioningArray Array of Strings and Floats. @throws IOException if an I/O error occurs.
1970 Displays text, adds a space, and logs the SHOW_TEXT operator. @param text The text to display.
1971 Creates a PageDrawer instance with provided parameters. @param parameters PageDrawerParameters object @return A new PageDrawer object.
1972 Constructs a PDFormXObject associated with the given document.
1973 Creates a Metadata object, initializing its COS attributes. @param doc The parent PDDocument. @param str Input stream for metadata data.
1974 Creates an embedded file object from a document and input stream. @param doc The parent document. @param str Input stream for the embedded file data.
1975 Creates an embedded file object from a document, input stream, and filter.
1976 Creates a PDImageXObject from byte array, width, height, bits, color space.
1977 Constructs a PDExportFormatAttributeObject with the given owner. @param owner The owner of the attribute object.
1978 Retrieves the attributes associated with this structure element. @return Revisions object containing PDAttributeObject instances.
1979 Retrieves the normal appearance stream from an annotation. @param annotation The annotation to get the appearance from. @return The appearance stream, or null if it doesn't exist.
1980 Adds font resources from a widget's appearance stream to AcroForm.
1981 Retrieves a set of "on" values from widgets and export values. Returns an empty set if no values are found.
1982 Checks if the current value is equal to the "on" value.
1983 Sets the value to the on-value.
1984 Initializes the font provider, caches fonts, and scans the system.
1985 Creates a FDF parser with the given input source. @param source RandomAccessRead object for parsing
1986 Constructs a PDFParser with a source and optional password. @param source Reader for PDF data; @param decryptionPassword decryption password
1987 Draws a line style based on the given style string. @param style line style string
1988 Paints a tiling pattern onto the page using the provided parameters.
1989 Gets an opaque image from a region with specified subsampling. @param region The region to extract. @param subsampling Subsampling factor. @return BufferedImage object.
1990 Gets an RGB BufferedImage from a PDImage with a color key. @param pdImage The PDF image. @param colorKey Color key for image conversion.
1991 Retrieves resources, prioritizing stream resources. @param contentStream Stream containing potential resources. @return PDResources object, initially parent resources.
1992 Calculates an AffineTransform to center an overlay on a page. @param page The page to calculate transform for. @param overlayMediaBox Overlay rectangle dimensions. @return AffineTransform object.
1993 Returns the rotated media box of a page. Rotates if page rotation is 90 or 270 degrees. @param page The page to get the media box from. @return The rotated PDRectangle.
1994 Checks if the element is marked. Returns true if "Marked" is true in the dictionary, false otherwise.
1995 Checks if user properties are enabled in the dictionary. Returns true if enabled, false otherwise.
1996 Checks if a suspect exists in the dictionary. @return True if "Suspects" exists and is true, false otherwise.
1997 Checks if mouse position tracking is enabled. Returns true if "IsMap" is true in the action, false otherwise.
1998 Returns the "Open" boolean value from the COS object, defaults to false.
1999 Checks if the document field "FD" is true. Returns true if "FD" is true, false otherwise.
2000 Returns the non-stroking overprint control from the dictionary.
2001 Gets an integer from an embedded dictionary by key. @param embeddedDictionary The dictionary to search. @param key The key to retrieve the integer for.
2002 Returns the denominator value from the COS object.
2003 Wraps an OutputStream with a PredictorOutputStream if predictor > 1. @param out The original OutputStream. @param decodeParams COS dictionary with predictor parameters. @return Wrapped OutputStream or original if no predictor.
2004 Returns the number of structural parents. Retrieves the value from the 'page' object.
2005 Returns the number of bits per sample from the COS object.
2006 Returns the MCID value from the COS object as an integer.
2007 Returns the next key of the parent tree. Retrieves the value from the COS object.
2008 Returns the MCID value from properties, -1 if properties are null.
2009 Returns the line cap style from the dictionary. @return An integer representing the line cap style.
2010 Retrieves the line join style from the dictionary. @return int representing the line join style.
2011 Returns the parent structure ID from the COS object.
2012 Returns the value of the 'P' property from the dictionary.
2013 Returns the maximum length value from the COS object.
2014 Gets an integer value by name from COS object, returns default if not found.
2015 Checks if the object is invisible based on its annotation flag.
2016 Checks if the object is hidden. Returns true if the hidden flag is set, false otherwise.
2017 Checks if the document's print flag is set. Returns true if printed, false otherwise.
2018 Checks if no-zoom flag is set in the annotation. Returns true if set, false otherwise.
2019 Checks if the annotation flag indicates no rotation. @return True if no rotation is specified, false otherwise.
2020 Checks if the annotation has the "no view" flag set. Returns true if set, false otherwise.
2021 Checks if the object is read-only based on annotation flag.
2022 Checks if the object is locked. Returns true if the 'locked' flag is set, false otherwise.
2023 Checks if the "no view" toggle flag is enabled. Returns true if enabled, false otherwise.
2024 Checks if the contents are locked based on a flag.
2025 Checks if the object is invisible based on its flag. @return True if invisible, false otherwise.
2026 Checks if the object is hidden. Returns true if the hidden flag is set, false otherwise.
2027 Checks if the PDF object is flagged as printed. @return True if printed flag is set, false otherwise.
2028 Checks if the COS object has the no-zoom flag set. @return True if no-zoom flag is set, false otherwise.
2029 Checks if the PDF object should not be rotated. @return True if no rotation is required, false otherwise.
2030 Checks if the COS object has the "no view" flag set. Returns true if set, false otherwise.
2031 Checks if the COS object is read-only. Returns true if the 'F' flag is set to FLAG_READ_ONLY.
2032 Checks if the COS object is locked. Returns true if locked, false otherwise.
2033 Checks if the no-view toggle flag is enabled. Returns true if enabled, false otherwise.
2034 Checks if the document's contents are locked. Returns true if locked, false otherwise.
2035 Checks if filtering is required based on a flag. Returns true if the filter flag is set, false otherwise.
2036 Checks if a subfilter is required based on the COS object.
2037 Checks if digest method is required based on COS flag.
2038 Checks if the 'V' flag is set on the COS object. Returns true if set, false otherwise.
2039 Checks if a reason is required based on the COS object.
2040 Checks if legal attestation is required based on COS flag.
2041 Checks if adding revision info is required based on COS flag.
2042 Checks if the subject field is required based on dictionary flags.
2043 Checks if the issuer flag is set in the dictionary. Returns true if set, false otherwise.
2044 Checks if the OID flag is required in the dictionary. @return True if OID flag is required, false otherwise.
2045 Checks if the Subject DN flag is required in the dictionary. Returns true if required, false otherwise.
2046 Checks if key usage flag is required in the dictionary. Returns true if required, false otherwise.
2047 Checks if a URL is required based on the dictionary flag.
2048 Checks if the PDF content is italic. Returns true if italic flag is set, false otherwise.
2049 Checks if the PDF object is bold. Returns true if bold flag is set, false otherwise.
2050 Checks if signature existence flag is set in the dictionary. Returns true if the flag is set, false otherwise.
2051 Checks if the dictionary is append-only. Returns true if the flag is set, false otherwise.
2052 Checks if the COS object represents a push button. Returns true if the FF flag is set to FLAG_PUSHBUTTON.
2053 Checks if the COS object represents a radio button. Returns true if the FF flag is set to FLAG_RADIO.
2054 Checks if the COS object's FF flag is set to FLAG_SORT.
2055 Checks if multi-select is enabled. Returns true if the FF flag is set on the COS object.
2056 Checks if spell checking is disabled for this object.
2057 Checks if a commit is triggered on selection change.
2058 Checks if the COS object represents a combo. Returns true if the FF flag is set to FLAG_COMBO.
2059 Checks if the COS object has the "edit" flag set.
2060 Checks if the dictionary is read-only. Returns true if the FF flag is set to FLAG_READ_ONLY.
2061 Checks if a flag is required in the dictionary. Returns true if the flag is set, false otherwise.
2062 Checks if the PDF has the no-export flag set. @return True if the no-export flag is set, false otherwise.
2063 Checks if radios are in unison, using a COS flag.
2064 Checks if the COS object is multiline. Returns true if the FF flag is set to FLAG_MULTILINE.
2065 Checks if the COS object has a password flag set. @return True if password flag is set, false otherwise.
2066 Checks if the COS object's file select flag is set.
2067 Checks if spell checking is disabled for a COS object. @return True if spell check is disabled, false otherwise.
2068 Checks if scrolling should be disabled based on COS flags. @return True if scrolling is disabled, false otherwise.
2069 Checks if the COS object is a COMB object. Returns true if the FF flag is set to FLAG_COMB.
2070 Checks if the COS object represents rich text. Returns true if the FF flag is set to FLAG_RICH_TEXT.
2071 Prepares decryption by extracting recipient information. @param encryption Encryption object containing decryption details. @param documentIDArray COSArray representing document IDs. @param decryptionMaterial Decryption material for decryption.
2072 Retrieves the owner key as bytes. Returns null if not found.
2073 Retrieves the user key as a byte array. Returns null if the user key is not found.
2074 Creates a displacement vector based on the given code. @param code code used to calculate displacement @return A Vector representing the displacement.
2075 Calculates the width of a string encoded as bytes. @param text String to calculate width for. @return The calculated width as a float.
2076 Retrieves a pattern by name, using cache if available. @param name COSName representing the pattern's name. @return PDAbstractPattern object or null if not found.
2077 Retrieves a PDShading object by name, caching if available. @param name Shading name; used to fetch shading. @return PDShading object or null if not found.
2078 Returns the shading object, creating it if it doesn't exist. @return PDShading object or null if shading is not defined.
2079 Checks if the node is open based on the open count. @return True if open count is greater than 0, false otherwise.
2080 Creates a PDF field based on the field type. @param form The form object. @param field The field dictionary. @param parent The parent field. @return A PDF field object or null if unknown type.
2081 Retrieves a PDXObject by name, using cache if available. @param name XObject name @return PDXObject or null if not found
2082 Constructs a GouraudShadingContext with given parameters. @param shading The shading object. @param colorModel The color model. @param xform The affine transform. @param matrix The matrix.
2083 Creates a COS input stream using default decode options. @return COSInputStream object @throws IOException if an I/O error occurs
2084 Parses an object from an object stream, returning a COSBase. @param objstmObjNr Object stream number. @param key COSObjectKey for the object. @return COSBase object or null if not found.
2085 Returns an InputStream for the contents, or an empty stream.
2086 Constructs a PDCIDFontType2 with a parent font, using default encoding. @param fontDictionary Font dictionary. @param parent Parent font.
2087 Creates and returns a PDCIDFontType2 object. Uses existing cidFont, parent, and ttf objects.
2088 Recursively collects update information from a COSArray. Returns true if any child demands a parent update.
2089 Returns a set of COS objects. Initializes if not already done.
2090 Adds a COSBase object to the list, wrapping if needed. @param object The COSBase object to add.
2091 Adds an object to the list at the specified index. @param i index to insert at @param object COSBase object to add
2092 Sets the object at the given index, updating the state. @param index index of the object to set @param object COSBase object to set at the index
2093 Sets the value for a given key in the item dictionary. @param key The key for the item. @param value The value to associate with the key.
2094 Updates the object with the provided COS array. @param children COSArray containing child objects to update.
2095 Retrieves the role map from the structure tree root. Returns an empty map if the root is null.
2096 Adds a COSBase object to the object pool, managing its key. @param key object key @param base COSBase object to add @return The original COSBase object.
2097 Applies protection policy using a security handler. @param policy The protection policy to apply. @throws IOException If no security handler is available.
2098 Gets the glyph name for a given Unicode code point. @param code The Unicode code point. @return Glyph name or ".notdef" if not found.
2099 Translates a character code to a glyph ID, handling embedded/non-embedded fonts. @param code The character code to translate. @return Glyph ID or 0 if not found.
2100 Gets the MAC subtype from the COSDictionary. Returns null if the dictionary or subtype is missing.
2101 Gets the MAC creator from the COS parameters. Returns null if parameters are not found.
2102 Gets the MAC ResFork string from the COS dictionary. Returns null if the dictionary or string is not found.
2103 Gets a CIDFontMapping based on baseFont, descriptor, and CID info.
2104 Checks if the provided password matches the owner's password. @param password Password to check (converted to bytes)
2105 Writes pages based on region data. Iterates through regions.
2106 Retrieves a date object by its key. @param key The key representing the date. @return A Calendar object representing the date.
2107 Gets date from COS name, using default if not found. @param key COS name to search for the date. @param defaultValue Default Calendar value if not found. @return Calendar object representing the date.
2108 Retrieves the creation date from the info object. @return Calendar object representing the creation date.
2109 Returns the modification date from the document info. @return Calendar object representing the modification date.
2110 Gets the creation date from the annotation. @return Calendar object representing creation date
2111 Returns the creation date of the COS object as a Calendar.
2112 Retrieves the sign date from the dictionary. @return Calendar object representing the sign date.
2113 Writes an operator token to the output stream. @param op The operator to write. @throws IOException If an I/O error occurs.
2114 Writes prepared objects to a COS stream, creating a compressed stream. @param stream COSStream to write to @return Updated COSStream
2115 Writes a COSDictionary to the output stream. @param output The output stream to write to. @param cosDictionary The COSDictionary to write.
2116 Creates a new PDTransparencyGroup associated with the document.
2117 Creates a new PDAppearanceStream instance associated with a document.
2118 Creates a PDImageXObject from a BufferedImage. @param document PDDocument to add image to. @param image BufferedImage to convert. @param quality JPEG quality (0.0-1.0). @param dpi Dots per inch. @return PDImageXObject representing the image.
2119 Validates if the given value is a valid option. @param value The value to check against allowed options.
2120 Loads an FDF document from a file. @param file The file containing the FDF document. @return FDFDocument object or null if an error occurs.
2121 Loads an FDF document from an input stream. @param input Input stream containing the FDF data. @return FDFDocument object representing the loaded FDF.
2122 Constructs a PDFParser with a source and default password. @param source RandomAccessRead source for PDF data.
2123 Calls the overloaded constructor with null parameters. @param drawer PageDrawer instance @param pattern PDTilingPattern instance @param xform AffineTransform for tiling
2124 Returns an opaque image. @throws IOException if an I/O error occurs
2125 Decodes data from an input stream to an output stream. @param encoded Input stream with encoded data. @param decoded Output stream for decoded data. @param parameters COSDictionary containing decode parameters. @param index Index of the stream. @return DecodeResult object containing parameters.
2126 Appends a marked content kid to the parent. @param markedContent The PDMarkedContent object to append.
2127 Fetches and constructs a CMap UCS2 based on font properties.
2128 Checks if a field is a comb field (single-line, not password/file).
2129 Prepares decryption by setting up filters and keys. @param encryption PDF encryption object @param documentIDArray Array of document IDs @param decryptionMaterial Decryption material to use
2130 Returns the width of the space character for the font. Uses various methods to determine the width, defaulting to 250f. @return float width of the space character
2131 Checks if the fixed-pitch flag is enabled. Returns true if enabled, false otherwise.
2132 Checks if the serif flag is enabled. Returns true if serif is enabled, false otherwise.
2133 Checks if the symbolic flag is set. Returns true if set, false otherwise.
2134 Checks if the script flag is set. Returns true if the flag is on, false otherwise.
2135 Checks if the non-symbolic flag is set. Returns true if the flag is on, false otherwise.
2136 Checks if the italic flag is set. Returns true if italic is enabled, false otherwise.
2137 Checks if the "all caps" flag is enabled. Returns true if enabled, false otherwise.
2138 Checks if the "small cap" flag is enabled. Uses isFlagBitOn to determine flag status.
2139 Checks if the force bold flag is enabled. Returns true if enabled, false otherwise.
2140 Retrieves a pattern by color. @param color The color for which to retrieve the pattern. @return The pattern object. @throws IOException if pattern is not found.
2141 Creates a PDField instance from a COSDictionary. @param form The PDF form. @param field The field dictionary. @param parent The parent non-terminal field.
2142 Converts the stream to a string. Returns an empty string if an IO error occurs.
2143 Creates an input stream from the underlying COS stream. @return COSInputStream object for reading COS data. @throws IOException if an I/O error occurs.
2144 Collects patches from a COS stream, decoding and processing them. @param xform AffineTransform for coordinate transformations. @param matrix Matrix for coordinate transformations. @param controlPoints Control points for patch processing. @return List of Patch objects extracted from the stream.
2145 Creates a PDCIDFont based on the provided dictionary and parent.
2146 Returns an iterator for the objects contained within this object.
2147 Adds a COSObjectable object to the container. Delegates to add(COSBase) after retrieving COSObject.
2148 Resizes the list to the specified size, adding objects if needed. @param size The target size of the list. @param object The object to add if resizing.
2149 Sets the array of floats. Clears existing content and adds new floats.
2150 Parses a COS array from the input source. @return COSArray object representing the parsed array. @throws IOException if an I/O error occurs.
2151 Creates and populates a COSStream object representing the stream. @return The created COSStream object. @throws IOException if an I/O error occurs.
2152 Initializes a new PDRange object with default values.
2153 Retrieves the encode array, creating it if null. Uses size values to initialize if no encode exists.
2154 Constructs a PDFunctionType2 with a COSBase object. Initializes c0, c1 arrays and exponent from the COS object.
2155 Constructs a new FDFOptionElement with an initialized COSArray.
2156 Initializes a PDFontSetting with a COSArray and default values.
2157 Retrieves the whitepoint value. Returns default if not present.
2158 Retrieves the black point tristimulus values. Returns a PDTristimulus object; uses default if null.
2159 Creates a COS array from the components, adding pattern name if present. @return COSArray representing the components and pattern name.
2160 Initializes a PDDeviceN object with a COSArray and null values.
2161 Initializes a PDGamma object with default values for gamma.
2162 Gets the alternate color space. Creates default if null. @return PDColorSpace object representing the alternate color space.
2163 Initializes an Indexed color space with default values.
2164 Creates and returns a default range array for PDF processing.
2165 Initializes a PDPattern object with provided resources. @param resources PDResources object containing pattern data
2166 Initializes a PDSeparation object with a predefined COSArray.
2167 Initializes a PDTristimulus with zero values for tristimulus.
2168 Creates a PDTristimulus object from a float array (up to 3 values).
2169 Sets the transformation matrix for the COS object. @param transform AffineTransform object representing the matrix.
2170 Creates a PDImageXObject from a byte array. @param document The document to associate with the image. @param byteArray The byte array containing the image data. @return PDImageXObject created from the byte array.
2171 Creates a COSArray from a subset of the 'single' array. @return COSArray containing float values from 'single'.
2172 Sets the COS object at the given index. @param index index of the object to set @param object COSObjectable object to set, or null
2173 Sets an integer value at the specified index in the COS object. @param index The index where the integer will be set. @param value The integer value to set.
2174 Sets the name at the given index using a PDF name object. @param index Index of the name to set. @param name The name to be set.
2175 Sets the string at the given index. @param index Index of the string to set. @param string String to set, or null to clear.
2176 Sets the minimum value for the range. @param min The minimum value to set.
2177 Sets the maximum value for the range array. @param max The maximum float value to set.
2178 Sets the x-coordinate of the lower-left corner. @param value The new x-coordinate value.
2179 Sets the Y coordinate of the lower-left corner of the rectangle.
2180 Sets the x-coordinate of the upper-right corner of the rectangle.
2181 Sets the Y coordinate of the rectangle's upper-right corner. @param value The new Y coordinate value.
2182 Sets the colour at the given index in the array. @param index index of the colour to set @param colour the colour to set, or null for COSNull
2183 Decrypts elements within a COS array. @param array COS array to decrypt. @param objNum Object number for decryption. @param genNum Generation number for decryption.
2184 Sets the value of the first option to the given string. @param opt The string value to set for the option.
2185 Sets the default appearance string in the option object. @param da The default appearance string to set.
2186 Sets the font size within the font setting. @param size The desired font size as a float.
2187 Sets device attributes to the array. Removes if null. @param attributes The device attributes to set.
2188 Sets the alternate color space and updates the array. @param cs The alternate color space to set.
2189 Sets the red color component (R) to the specified float value.
2190 Sets the value of the 'g' parameter as a COSFloat.
2191 Sets the value of the 'b' field to the given float value.
2192 Sets the range for a component, extending the array if needed. @param range The range object containing min/max values. @param n The index for setting the range values.
2193 Sets the base color space. @param base The PDColorSpace object to set.
2194 Sets the colorant name in the array. @param name The colorant name to set.
2195 Sets the alternate color space for the PDF object. @param colorSpace The color space to set, or null to clear.
2196 Sets the value of the first element to the given float.
2197 Sets the Y coordinate value. @param y The Y coordinate to set.
2198 Sets the Z coordinate value. @param z The Z coordinate to set.
2199 Sets the item in the dictionary, handling null values. @param key COSName key for the item @param value COSObjectable value to set
2200 Sets a boolean value for the given key in the PDF document. @param key The key for the boolean value. @param value The boolean value to set.
2201 Sets a boolean value for the given key in the document. @param key COSName representing the key @param value boolean value to set
2202 Sets an item in the dictionary, using the key's PDF name. @param key The key for the item. @param value The value to set for the key.
2203 Sets the COS name for a key with the given string value. @param key The key to set. @param value The string value to convert to a COS name.
2204 Sets a string value for the given key in the COS object. @param key COSName representing the key. @param value String value to be set.
2205 Sets an integer value for the given key in the document. @param key COSName representing the key @param value Integer value to set
2206 Sets the COS item to the specified long value. @param key COS name of the item to set. @param value The long value to set.
2207 Sets the float value for the given key in the COS object. @param key COS name representing the key. @param value float value to be set.
2208 Creates a COSStream object with data from a stream. @param dictionary COS dictionary for stream metadata @param startPosition Start position of the stream data @param streamLength Length of the stream data @return COSStream object
2209 Sets the encryption dictionary in the trailer. @param encDictionary The COSDictionary containing encryption data.
2210 Sets the document ID in the PDF trailer. @param id The COSArray representing the document ID.
2211 Wraps a PDF page's content in save/restore graphics state. Handles both stream and array content types.
2212 Updates parent entry and structure type for entries in array. @param kArray COSArray to update. @param newParent New parent dictionary. @param newStructureType New structure type (optional).
2213 Searches for a trailer dictionary using a brute-force approach.
2214 Searches for root and info dictionaries within the PDF document. Updates the trailer dictionary with found objects. Returns true if root found.
2215 Parses the PDF trailer and root object, checks pages. Sets document as decrypted and marks initial parsing done.
2216 Parses the next token from the input source. Returns COS object or null if end of stream.
2217 Writes the document, handling encryption and ID generation. @param doc The PDDocument to write. @param signInterface Signature interface.
2218 Returns the document information. Lazily initializes if null.
2219 Sets the document information and updates the PDF trailer. @param info The document information object to set.
2220 Initializes a PDDocumentCatalog with the given document. @param doc The document to associate with this catalog.
2221 Retrieves a list of PDThread objects from the document's threads array.
2222 Returns the additional actions catalog. Creates a new catalog if one doesn't exist.
2223 Adds an output intent to the PDF root array. @param outputIntent The output intent to add.
2224 Initializes the dictionary with names from the catalog. Creates if catalog's names dictionary is null.
2225 Sets the crop box for the page. Null value removes it. @param cropBox The PDRectangle representing the crop box.
2226 Returns the additional actions for the page. Creates a new COSDictionary if one doesn't exist.
2227 Constructs a new, empty PDPageTree. Initializes internal structures.
2228 Retrieves child COSDictionaries from a given node. Returns a list of COSDictionaries or an empty list.
2229 Clears the dictionary, removing all items and notifying parent.
2230 Creates a COSDictionary containing an array of labels and values. @return COSDictionary with the created array.
2231 Creates a new complex file specification with type FILESPEC.
2232 Creates a ComplexFileSpecification. @param dict COSDictionary to use, or creates a new one.
2233 Sets the range values for the COS object. @param rangeValues The COSArray representing the range values.
2234 Sets the domain values for the COS object. @param domainValues The COSArray representing the domain values.
2235 Sets the encode values and updates the COS object. @param encodeValues The COSArray containing encode values.
2236 Sets the decode values and updates the COS object. @param decodeValues COSArray containing decode parameters.
2237 Sets the value of a PDF attribute. @param attrName Attribute name. @param attrValue The new attribute value.
2238 Removes an attribute object from the COS structure. Sets structure element to null after removal.
2239 Updates the COS array with a new revision number. @param attributeObject The attribute object to check.
2240 Adds a class name to the COS array associated with key 'C'. Updates revision number.
2241 Removes a class name from the COS object. @param className The name of the class to remove.
2242 Appends a COSBase object as a child to the COS object's "K" entry.
2243 Inserts a COSBase object before a reference object in a COS array.
2244 Removes a kid object from the COS object's kids list. @param object The COSBase object to remove. @return True if the object was removed, false otherwise.
2245 Sets the 'k' item in the COS object. @param k The COSBase value to set for 'k'.
2246 Sets the value of the COS object and notifies listeners. @param value The new value to set.
2247 Returns the guideline color as a PDColor object. Uses default black if color is not already defined.
2248 Retrieves the line dash pattern. Creates a default if missing. @return PDLineDashPattern object representing the line dash pattern.
2249 Sets the line dash pattern from a COSArray. @param dashArray COSArray representing the dash pattern.
2250 Sets the cryptographic filter method. @param cfm The COSName representing the filter method.
2251 Sets the filter for a PDF dictionary item. @param filter The filter string to set.
2252 Sets the owner key for the dictionary. @param o The owner key as a byte array. @throws IOException if an I/O error occurs.
2253 Sets the user key in the dictionary as a COSString. @param u The user key as a byte array. @throws IOException if an I/O error occurs.
2254 Sets the owner encryption key in the dictionary. @param oe The owner encryption key as a byte array. @throws IOException if an I/O error occurs.
2255 Sets the user encryption key in the dictionary. @param ue The user encryption key as a byte array. @throws IOException if an I/O error occurs.
2256 Sets the recipients for the PDF dictionary. @param recipients Byte array of recipients. @throws IOException if an I/O error occurs.
2257 Sets the crypt filter dictionary for the document. @param cryptFilterName Filter name. @param cryptFilterDictionary Filter dictionary object.
2258 Sets the stream filter name in the dictionary. @param streamFilterName The COSName representing the filter.
2259 Sets the name of the string filter in the dictionary. @param stringFilterName The COSName representing the filter.
2260 Sets the permissions for the item using the provided byte array.
2261 Removes V45 filters from the dictionary.
2262 Creates a new FDF annotation with type ANNOT.
2263 Sets the color of the annotation using the provided Color object.
2264 Sets the rich contents for the annotation. @param rc The rich content string to set.
2265 Sets the interior color of the annotation. @param color The color to set; null for no color.
2266 Sets the callout data for the annotation. @param callout float array representing the callout data
2267 Sets the line data for annotation. @param line Array of floats representing the line coordinates.
2268 Sets the interior color of the annotation. @param color The color to set; null for no color.
2269 Sets the horizontal offset for the annotation's caption. @param offset The horizontal offset value.
2270 Sets the vertical offset for the annotation's caption. @param offset The vertical offset value.
2271 Sets the vertices for the annotation. @param vertices An array of vertex coordinates.
2272 Sets the interior color of the annotation. @param color The Color object representing the new color.
2273 Sets the vertices data for the annotation. @param vertices Array of float values representing vertices.
2274 Sets the interior color of the annotation. @param color The color to set; null for no color.
2275 Sets the interior color of the annotation. @param color The color to set; null for no color.
2276 Sets the coordinates for the annotation. @param coords Array of float coordinates.
2277 Sets the ID of the FDF object. @param id The COSArray representing the ID.
2278 Sets the differences COSStream within the FDF object.
2279 Sets the value of the field, handling List, String, and COSObjectable types. @param value The value to set; throws IOException for unknown types.
2280 Sets the value of the field to the provided COSBase object.
2281 Sets the field flags. @param ff Integer representing field flags; null to clear.
2282 Sets the 'Set FF' item in the field with the provided Integer. @param ff Integer value to set; null to clear.
2283 Sets the clear field flags on the field object. @param ff Integer representing the clear field flags.
2284 Sets the widget field flags. @param f Integer representing the flags to set.
2285 Sets the 'SET_F' item in the field with the given flag value.
2286 Sets the clear widget field flags. @param ff Integer representing the flags to set.
2287 Sets the rich text value for the field. @param rv The rich text COSString to set.
2288 Sets the rich text content of the field. @param rv COSStream representing the rich text data.
2289 Sets the "Before" item in the dictionary. @param before The value to set for the "Before" item.
2290 Sets the "After" item in the dictionary with the given string.
2291 Initializes a PDF font object with default properties.
2292 Initializes a PDFontDescriptor with a font description dictionary.
2293 Sets the font name in the dictionary. @param fontName The name of the font.
2294 Sets the font family for the dictionary. @param fontFamily The font family string to set.
2295 Sets the font stretch value in the dictionary. @param fontStretch String representing the font stretch.
2296 Sets the font bounding box in the dictionary. @param rect The PDRectangle object representing the bbox.
2297 Sets the character set for the dictionary. @param charSet The character set string to set.
2298 Initializes a DictionaryEncoding with base encoding and differences. @param baseEncoding The base encoding COS name. @param differences COSArray representing differences to apply.
2299 Sets the gamma value in the dictionary. @param value the gamma value to set
2300 Retrieves the gamma array. Creates a default if missing. @return PDGamma object representing the gamma array.
2301 Sets the gamma value in the dictionary. @param gamma The PDGamma object to set.
2302 Sets the matrix value in the dictionary from a Matrix object.
2303 Retrieves colorants from resources, creating them if needed. @param resources PDResources object for resource access @return Map of colorant names to PDSeparation objects.
2304 Initializes a PDTransparencyGroupAttributes object. Creates a COSDictionary and sets the 'S' item to 'TRANSPARENCY'.
2305 Initializes the dictionary with the OCMD type.
2306 Sets the visibility policy for the dictionary. @param visibilityPolicy COSName representing the visibility policy.
2307 Sets the transformation matrix for the COS object. @param transform AffineTransform object containing matrix values.
2308 Sets the bounding box of the PDF object. @param bbox The PDRectangle representing the bounding box.
2309 Sets the background COS array and updates the dictionary. @param newBackground The new background COS array.
2310 Sets the bounding box (bBox) of the object. If null, removes it from the dictionary; otherwise, sets it.
2311 Sets the color space for this object. @param colorSpace The color space to set.
2312 Sets the function array for the COS object. @param newFunctions The new function array to set.
2313 Sets the transformation matrix for the COS object. @param transform AffineTransform object containing the matrix.
2314 Sets the domain of the COS object. @param newDomain The new domain to set.
2315 Sets the extend array and updates the COS object. @param newExtend The new extend array to set.
2316 Sets the domain of the COS object. @param newDomain The new domain to set.
2317 Sets the coordinates and updates the COS object. @param newCoords The new coordinates to set.
2318 Sets the decode values and updates the COS object. @param decodeValues The COSArray containing decode values.
2319 Initializes a new PDExtendedGraphicsState with a COSDictionary.
2320 Sets the blend mode for the PDF object. @param bm The BlendMode to set.
2321 Sets a float value for a given key in the dictionary. Removes if value is null, otherwise sets a COSFloat.
2322 Sets the transfer object within the dictionary. @param transfer The COSBase object representing the transfer.
2323 Sets the TR2 item in the dictionary with the given COSBase.
2324 Sets the 'T' action item to the provided COSBase object.
2325 Sets the 'H' property of the action item to the given boolean value.
2326 Sets the form's fields to the provided COS array. @param array COSArray containing the form field data.
2327 Sets the sound stream for the action. @param sound The COSStream representing the sound.
2328 Sets the form's fields to the provided COS array. @param array COSArray containing field data.
2329 Sets the 'D' item in the action with the provided COSBase. @param d The COSBase object to set as the 'D' item.
2330 Sets the 'B' item in the action object with the provided COSBase.
2331 Sets the relationship type. Valid values are "P" or "C". @param relationship COSName representing the relationship type.
2332 Constructs a new PDAnnotation object. Initializes the annotation's dictionary with type 'ANNOT'.
2333 Constructs a PDAnnotation from a COSDictionary. @param dict The COSDictionary containing annotation data.
2334 Sets the rectangle object in the dictionary. @param rectangle The PDRectangle object to set.
2335 Sets the border of the COS object using the provided array. @param borderArray COSArray representing the border style.
2336 Sets the rectangular differences (margins) in the COS object. @param differenceLeft Left margin value. @param differenceTop Top margin value. @param differenceRight Right margin value. @param differenceBottom Bottom margin value.
2337 Sets the rectangular differences (margins) in the COS object. @param differenceLeft Left margin value. @param differenceTop Top margin value. @param differenceRight Right margin value. @param differenceBottom Bottom margin value.
2338 Sets the callout data for the COS object. @param callout Array of floats representing callout data.
2339 Sets the ink list to the COS object. Null list removes it. @param inkList 2D float array representing the ink list.
2340 Sets the line data for the PDF object. @param l An array of floats representing the line coordinates.
2341 Sets the horizontal offset for the caption. @param offset The offset value to set.
2342 Sets the vertical offset for the caption. @param offset The vertical offset value.
2343 Sets the quad points for the COS object. @param quadPoints Array of float values representing quad points.
2344 Sets the rich contents for the PDF object. @param rc The rich content string to set.
2345 Sets the vertices of the object using the provided float array.
2346 Sets the vertices of the COS object with the given points. @param points Array of float values representing vertices.
2347 Sets the parent annotation markup for this object. @param annot The parent annotation markup object.
2348 Sets the rectangular differences (margins) in the COS object. @param differenceLeft Left margin value. @param differenceTop Top margin value. @param differenceRight Right margin value. @param differenceBottom Bottom margin value.
2349 Sets the quad points array within the COS object. @param quadPoints Array of floats representing quad points.
2350 Initializes a new PDAppearanceDictionary with a base dictionary.
2351 Sets the dash style for the COS object. @param dashArray The dash style array to set.
2352 Retrieves the line dash pattern. Creates a default if none exists.
2353 Sets the OS value in the dictionary. Null value removes it. @param os The OS string to set, or null to remove.
2354 Initializes a PDSeedValue object with a COSDictionary.
2355 Sets the filter for the dictionary. @param filter The filter to set.
2356 Sets the MPD (Metadata Protection Dictionary) to the dictionary. @param mdp The PDSeedValueMDP object to set.
2357 Sets the timestamp value in the dictionary. @param timestamp The timestamp value to set.
2358 Constructs a PDSeedValueCertificate with default settings.
2359 Adds a subject to the dictionary's subject array. @param subject byte array representing the subject.
2360 Adds a key usage extension to the COS array, validating characters. @param keyUsageExtension The key usage extension string (0, 1, X).
2361 Adds an issuer to the dictionary's issuer array. @param issuer byte array representing the issuer.
2362 Adds an OID (object identifier) to the dictionary's OID array. @param oid byte array representing the OID.
2363 Initializes a PDSignature object with a dictionary and type.
2364 Sets the type of the COS object. @param type The COSName representing the type.
2365 Sets the filter for the dictionary. @param filter The filter to set.
2366 Sets the subfilter for the dictionary. @param subfilter The COSName representing the subfilter.
2367 Sets the byte range for the dictionary. @param range An array of 4 integers representing the byte range.
2368 Sets the contents of the dictionary with a COSString. @param bytes The byte array representing the string contents.
2369 Sets the text color of the PDF object. @param textColor The PDColor object representing the color.
2370 Constructs a PDAcroForm, initializing its document and fields.
2371 Constructs a PDButton from a PDAcroForm. Sets the field type to "BTN" in the COS object.
2372 Constructs a PDChoice object from a PDAcroForm. Sets the field type to choice.
2373 Sets the value of the COS object. @param object The COSBase object to set as the value.
2374 Sets the default value of the COS object. @param value The COSBase value to set as default.
2375 Constructs a PDSignatureField from a PDAcroForm. Initializes signature properties and locks the first widget.
2376 Constructs a PDTextField associated with a PDAcroForm. Sets the field type to text.
2377 Sets the default style string or removes it if null. @param defaultStyleString The default style string to set.
2378 Sets the rich text value in the COS object. Null value removes the RV item.
2379 Sets the origin of the coordinate system. @param coordSystemOrigin Array representing the origin coordinates.
2380 Initializes a PDThread object with a COSDictionary and type.
2381 Sets the transition direction. @param direction The transition direction to set.
2382 Sets the duration of the COS object to the given duration. @param duration The duration value to set.
2383 Sets the fly scale value within the COS object. @param scale The scale value to set.
2384 Sets the opacity of the fly area to the specified boolean value.
2385 Adds all objects from the given COSArray to the internal list. @param objectList COSArray containing objects to add.
2386 Returns the standard structure type, mapping if necessary.
2387 Recursively adds COS objects to the object pool. Handles streams, dictionaries, arrays, and nested objects.
2388 Gets a date value by key, using default if not found. @param key The key to look up the date by. @param defaultValue Default Calendar value if key is missing. @return A Calendar object representing the date.
2389 Gets the embedded date from a COSDictionary, or default if null. @param embedded The COSName of the embedded object. @param key The key for the date. @param defaultValue Default Calendar value if not found.
2390 Inserts a generated combined appearance into the content stream. @param contents Stream to add appearance to.
2391 Creates a PDImageXObject from a BufferedImage with specified quality. @param document The document to add the image to. @param image The BufferedImage to use. @param quality Image quality (0.0-1.0). @return The created PDImageXObject.
2392 Loads an FDF document from the specified file. @param filename Path to the FDF file. @return FDFDocument object.
2393 Adds a first intermediate curl segment using arc segments. @param angleCur Current angle, r radius, alpha angle, center coords.
2394 Generates an array of points forming an intermediate curl template. @param angleCur The angle for the curl. @param r The radius of the curl. @return Array of Point2D.Double objects.
2395 Displays a glyph based on provided parameters. @param textMatrix Text rendering matrix. @param font PDF font object. @param code Character code. @param displacement Displacement vector.
2396 Extracts lines of text from content, respecting font, size, and width. @param font PDFont object @param fontSize font size @param width maximum line width @return List of Line objects representing extracted lines
2397 Returns the symbolic flag from the font descriptor, or null.
2398 Determines the fallback font name based on descriptor flags. @param fontDescriptor Font descriptor object to analyze. @return String representing the fallback font name.
2399 Creates a Paint object from a PDColor, handling various color spaces. @param color The PDColor to create a Paint from. @return A Paint object or a transparent color if an error occurs.
2400 Retrieves a list of PDF form fields. Returns an empty list if no fields are present.
2401 Recursively finds a child field matching the given name. @param name Field names to match, @param nameIndex current index @return PDField object or null if not found.
2402 Retrieves child fields. Returns an empty list if none exist.
2403 Gets string value from COSBase, returns "" if null/unsupported.
2404 Retrieves the value of a field. Returns String, List, or null. Throws IOException if value type is unknown.
2405 Retrieves rich text content from a PDF field. Returns null if no rich text is found.
2406 Gets the "Before" value from the dictionary. Returns string representation or null if not found.
2407 Gets the value of the "After" entry, as a String or null.
2408 Retrieves the action string from the action dictionary. Returns null if no action is found or not a string/stream.
2409 Retrieves rich content from COS object. Returns string or null.
2410 Returns string from COSBase, or empty string if neither string nor stream.
2411 Creates a LayoutPage object from a PDPage. @param page The PDPage to create the LayoutPage from. @return A LayoutPage object.
2412 Converts the object to a byte array using an input stream. @throws IOException if an I/O error occurs during the process.
2413 Retrieves the samples array. Creates it if it's null. @return int[][] samples array containing the sample values.
2414 Creates a PatchMeshesShadingContext. @param shading Shading type, color model, transform, matrix.
2415 Creates a Type 4 shading context with given parameters. @param shading The Type4 shading object.
2416 Creates a Type 5 shading context with given parameters. @param shading Shading object, color model, transform, matrix, bounds
2417 Adds an attribute object to the COS array associated with key 'A'.
2418 Adds a user property to the COS array. @param userProperty The property to add.
2419 Constructs a PDICCBased object from a PDDocument. Initializes the ICC-based color array and stream.
2420 Constructs a PDPattern with given resources and color space.
2421 Sets the X formatting dictionaries to the COS object. @param changeXs array of PDNumberFormatDictionary objects
2422 Sets the Y number format dictionary array to the COS object. @param changeYs Array of PDNumberFormatDictionary objects.
2423 Sets the distances array in the COS object. @param distances Array of PDNumberFormatDictionary objects.
2424 Sets the areas to be stored in the COS object. @param areas array of PDNumberFormatDictionary objects
2425 Sets the angles for the number format dictionary. @param angles Array of PDNumberFormatDictionary objects.
2426 Sets the line slopes for the PDF number format dictionary. @param lineSloaps Array of PDNumberFormatDictionary objects.
2427 Grows the array to the specified size. @param size The new size of the array.
2428 Retrieves the text color as a PDColor object. Creates a default color if none is present.
2429 Creates a clone of a COSBase object. @param src Source COSBase to clone. @return Cloned COSBase object.
2430 Parses a base COS object from the input stream. Returns a COSBase object or null if end of stream.
2431 Initializes the parser with a COSStream. @param stream The COSStream to parse. @throws IOException if an I/O error occurs.
2432 Retrieves the next action(s) in a sequence. @return List of PDAction objects or null if none.
2433 Returns a PDRange object for the given component index. @param n component index; returns default range if invalid.
2434 Gets the PDRange for a parameter from encode values. @param paramNum Parameter number to retrieve. @return PDRange object or null if not found.
2435 Parses color or four-color COS array. @param name COS dictionary key. Returns PDGamma/PDFourColours or null.
2436 Builds and sets glyph widths in the CID font dictionary. Populates widths based on glyph advances from the table.
2437 Sets the line dash pattern. @param dashPattern The PDLineDashPattern object to set.
2438 Creates a color space from a COS array. @param rgb COS array representing the color space.
2439 Sets the color for the guideline. @param color The PDColor object representing the color.
2440 Sets the color of the object using the provided PDColor.
2441 Sets the interior color of the PDF object. @param ic The PDColor object representing the color.
2442 Sets the interior color of the PDF object. @param ic The PDColor object representing the color.
2443 Sets the interior color of the PDF object. @param ic The PDColor object representing the color.
2444 Sets the interior color of the PDF object. @param ic The PDColor object representing the color.
2445 Sets the border color of the PDF object. @param c The PDColor object representing the color.
2446 Sets the background color of the PDF page. @param c The PDColor object representing the background color.
2447 Sets the text color of the PDF object. @param textColor The PDColor object representing the color.
2448 Gets the range for the PDF object. Returns a PDRange object based on the dictionary's RANGE array.
2449 Retrieves the bounding range of the PDF object. Returns a PDRange object representing the range.
2450 Creates a PDImageXObject from an input stream. @param document The document to associate with the image. @param stream Input stream containing image data. @return PDImageXObject created from the stream.
2451 Sets the font for the PDF document. @param font The PDFont object to set.
2452 Sets the tint transform function and updates the array. @param tint The PDFunction to set as the tint transform.
2453 Sets the tint transform function and updates the array. @param tint The PDFunction to set as the tint transform.
2454 Sets the first page in the array to the given page. @param page The page to set.
2455 Sets the upper limit within the COS array. @param upper The upper limit value to set, or null to clear.
2456 Sets the lower limit in the COS array. @param lower The lower limit value to set.
2457 Sets the line ending style for the annotation. @param style The style to set, or null for default.
2458 Sets the endpoint style for the annotation line. @param style The style string (e.g., "round", "square").
2459 Sets the line ending style for the annotation. @param style The style string, or null for default.
2460 Sets the endpoint style for the annotation line. @param style The style string, or null for default.
2461 Sets the line ending style. @param style The style string, or null for default.
2462 Sets the endpoint style for the annotation line. @param style The style string, or null for default.
2463 Sets the line ending style. @param style The line ending style, or null for default.
2464 Sets the endpoint style for the line annotation. @param style The style string (e.g., LE_NONE, LE_ROUND).
2465 Sets the upper limit string in the COS array. @param upper The upper limit string to set.
2466 Sets the lower limit string in the COS array. Creates array if it doesn't exist.
2467 Clips a rectangle to the media box, ensuring it stays within bounds. @param box The rectangle to clip. @return Clipped PDRectangle.
2468 Creates a new PDRectangle with dimensions matching the component. @return A new PDRectangle object.
2469 Sets the before colour using the provided PDGamma object.
2470 Sets the after colour using the setColourByIndex method.
2471 Sets the start color using the provided PDGamma color object.
2472 Sets the end color using the provided PDGamma color object.
2473 Decrypts a COSBase object (string, stream, dictionary, array). @param obj The object to decrypt. @return The decrypted COSBase object.
2474 Sets an item with the given key. Uses PDF name conversion. @param key The key of the item to set. @param value The value to associate with the key.
2475 Sets the AcroForm for the root object and clears the cache.
2476 Sets viewer preferences in the document. @param prefs The PDViewerPreferences object to set.
2477 Sets the document outline to the root COS object. @param outlines The document outline to set.
2478 Sets the metadata for the PDF document. @param meta The metadata object to set.
2479 Sets the open action for the PDF root object. @param action The destination or action to set.
2480 Sets the additional actions for the document catalog. @param actions The PDDocumentCatalogAdditionalActions object.
2481 Sets the names dictionary for the root object. @param names The names dictionary to set.
2482 Sets the mark information for the PDF document. @param markInfo The PDMarkInfo object to set.
2483 Sets the URI for the root element. @param uri The URI dictionary to set.
2484 Sets the root of the structure tree. @param treeRoot The structure tree root to set.
2485 Sets the page labels for the PDF document. @param labels The PDPageLabels object to set.
2486 Sets the destination names and clears the catalog's Dests. @param dests The PDDestinationNameTreeNode to set.
2487 Sets the embedded files name tree node in the dictionary. @param ef The PDEmbeddedFilesNameTreeNode to set.
2488 Sets the JavaScript object associated with the name dictionary. @param js The JavaScript object to set.
2489 Creates a new PDF page with the specified media box. @param mediaBox The rectangle defining the page's dimensions.
2490 Sets page resources. Null value removes the resources.
2491 Sets the media box for the page. @param mediaBox The PDRectangle representing the media box.
2492 Sets the bleed box for the page. Null value removes it. @param bleedBox The PDRectangle representing the bleed box.
2493 Sets the trim box for the page. Null value removes the trim box. @param trimBox The rectangle representing the trim box.
2494 Sets the art box for the page. Null value removes it. @param artBox The PDRectangle representing the art box.
2495 Sets the contents of the page to the provided stream. @param contents The PDStream object to set as contents.
2496 Sets the metadata for the page. @param meta The metadata object to set.
2497 Sets the page's additional actions. @param actions The PDPageAdditionalActions to set.
2498 Sets the transition object for the page. @param transition The transition to set.
2499 Sets the transition and duration for the page. @param transition The transition object. @param duration Transition duration in seconds.
2500 Adds a COS object to the specified resource dictionary. @param kind resource kind (e.g., Images, Fonts) @param name object name within the resource @param object COSObjectable object to add
2501 Sets the embedded file. Creates EF dictionary if it's null.
2502 Sets the embedded file for Unicode encoding. @param file The PDEmbeddedFile object to set.
2503 Sets the page for the PDF document. @param page The PDPage object to set.
2504 Sets the referenced object for the annotation. @param annotation The annotation object to reference.
2505 Sets the referenced object within the current COS object. @param xobject The object to be referenced.
2506 Sets the page for the PDF document. @param page The PDPage object to set.
2507 Sets the parent node for this structure node. @param structureNode The parent PDStructureNode.
2508 Sets the page for the PDF document. @param page The PDPage object to set.
2509 Sets the parent tree of the current PDF number tree node. @param parentTree The parent tree node to set.
2510 Sets the rectangle object for annotation. @param rectangle The PDRectangle object to set.
2511 Sets the border style of the annotation. @param bs The PDBorderStyleDictionary object to set.
2512 Sets the border effect dictionary for the annotation. @param be The PDBorderEffectDictionary to set.
2513 Sets the fringe rectangle for the annotation. @param fringe The PDRectangle representing the fringe.
2514 Sets the fringe rectangle for the annotation. @param fringe The PDRectangle representing the fringe.
2515 Sets the fringe rectangle for the annotation. @param fringe The PDRectangle representing the fringe.
2516 Sets the fringe rectangle for the annotation. @param fringe The PDRectangle representing the fringe.
2517 Sets the FDF dictionary for the catalog. @param fdf The FDF dictionary to set.
2518 Sets the signature for the catalog. @param sig The PDSignature object to set.
2519 Sets the file specification for the FDF object. @param fs The file specification to set.
2520 Sets the JavaScript object for the FDF document. @param js The FDFJavaScript object to set.
2521 Sets the catalog for the PDF document. @param cat The FDFCatalog to set as the document catalog.
2522 Sets the appearance dictionary for the field. @param ap The appearance dictionary to set.
2523 Sets the appearance stream reference for the field. @param ref The FDFNamedPageReference to set.
2524 Sets the icon fit property of the field. @param fit The FDFIconFit object to set.
2525 Sets the action to be performed on the PDF field. @param a The action to set.
2526 Sets the additional actions (AA) field in the PDF object. @param aa The PDAdditionalActions object to set.
2527 Sets the fractional space to allocate for an item. @param space The PDRange object representing the space.
2528 Sets the file specification for the PDF document. @param fs The file specification object to set.
2529 Sets the page info within the PDF page object. @param info The FDFPageInfo object to set.
2530 Sets the template reference. @param tRef The FDFNamedPageReference to set.
2531 Sets the font file for the PDF object. @param type1Stream The font file stream to set.
2532 Sets the font file 2 to the dictionary. @param ttfStream The font file stream to set.
2533 Sets the font file 3 stream in the dictionary. @param stream The PDStream object to set.
2534 Sets the CID set data within the dictionary. @param stream The PDStream object containing CID set data.
2535 Sets the white point for the document. @param whitepoint The white point value to set. @throws IllegalArgumentException if whitepoint is null.
2536 Sets the black point in the dictionary. @param blackpoint The black point tristimulus value.
2537 Sets the extended graphics state. @param extendedGraphicsState The state to set.
2538 Sets the shading object for the PDF page. @param shadingResources The shading object to set.
2539 Sets the resources for the PDF object. @param resources The PDResources object to set.
2540 Sets the function to be used and updates the COS object. @param newFunction The new PDFunction to set.
2541 Sets the font setting for the PDF document. @param fs The PDFontSetting object to set.
2542 Sets the destination for the action. @param d The destination object to set.
2543 Sets the file specification for the PDF object. @param fs The file specification to set.
2544 Sets the target directory for the PDF document. @param targetDirectory The target directory object to set.
2545 Sets the destination for this action. @param d The destination object to set.
2546 Sets the file specification for the action. @param fs The file specification to set.
2547 Sets the file specification for the PDF object. @param fs The PDFileSpecification to set.
2548 Sets the Windows launch parameters for the action. @param win The PDWindowsLaunchParams object to set.
2549 Sets the file specification for the action. @param fs The PDFileSpecification to set.
2550 Sets the file specification for the action. @param fs The file specification to set.
2551 Sets the file specification for the action. @param fs The file specification to set.
2552 Sets the 'F' action in the actions map. @param action The PDAction object to set.
2553 Sets the 'E' action in the actions map. @param e The PDAction to set.
2554 Sets the X action for the PDF action list. @param x The PDAction to set as the X action.
2555 Sets the 'D' action in the actions map. @param d The PDAction to set.
2556 Sets the 'U' action in the actions map. @param u The action to set.
2557 Sets the FO action for the PDF document. @param fo The PDAction object to set.
2558 Sets the BL action to the specified PDAction. @param bl The PDAction to set.
2559 Sets the PO (PDAction) associated with the actions object.
2560 Sets the PC (PDAction) associated with the actions object.
2561 Sets the PV action. @param pv The action to set for the PV.
2562 Sets the PI action. @param pi The PI action to set.
2563 Sets the WC (word count) action in the actions map. @param wc The PDAction representing the word count.
2564 Sets the WS (Worksheet) action for the PDF action list. @param ws The PDAction object representing the WS action.
2565 Sets the DS (PDAction) item in the actions map.
2566 Sets the WP action. @param wp The WP action to set.
2567 Sets the DP action for the current item. @param dp The PDAction object to set.
2568 Sets the 'k' action in the actions map. @param k The PDAction to set for the 'k' key.
2569 Sets the 'F' action in the actions map. @param f The action to set.
2570 Sets the 'V' action in the actions list. @param v The PDAction to set.
2571 Sets the 'C' action in the actions map. @param c The PDAction to set.
2572 Sets the 'O' action in the actions map. @param o The action to set.
2573 Sets the 'C' action in the actions map. @param c The PDAction to set.
2574 Sets the target directory to be associated with the PDF object. @param targetDirectory The target directory object to set.
2575 Sets the named destination. Null value removes the destination.
2576 Sets the appearance dictionary for the PDF form. @param appearance The appearance dictionary to set.
2577 Sets the optional content property list. @param oc The PDPropertyList object to set.
2578 Sets the page for the PDF document. @param page The PDPage object to set.
2579 Sets the file specification for the PDF object. @param file The PDFileSpecification to set.
2580 Sets the border effect dictionary for the COS object. @param be The PDBorderEffectDictionary to set.
2581 Sets the rectangle difference (RD) item in the COS object. @param rd The PDRectangle representing the rectangle difference.
2582 Sets the action to be performed on the document. @param action The PDAction object to set.
2583 Sets the border style of the PDF element. @param bs The border style dictionary to set.
2584 Sets the destination for the PDF object. @param dest The destination object to set.
2585 Sets the previous URI for the action. @param pa The PDActionURI object to set.
2586 Sets the popup annotation. @param popup The popup annotation to set.
2587 Sets the "In-Reply-To" annotation. @param irt The annotation to set.
2588 Sets the external data dictionary to the COS object. @param externalData The external data dictionary to set.
2589 Sets the border style of the PDF object. @param bs The PDBorderStyleDictionary to set.
2590 Sets the border effect dictionary for the COS object. @param be The PDBorderEffectDictionary to set.
2591 Sets the border effect dictionary for the COS object. @param be The PDBorderEffectDictionary to set.
2592 Sets the rectangle difference (RD) item in the COS object. @param rd The PDRectangle representing the rectangle difference.
2593 Sets the appearance characteristics dictionary in the COS object.
2594 Sets the action to be performed on the PDF object. @param action The PDAction object to set.
2595 Sets the additional actions for the annotation. @param actions The PDAnnotationAdditionalActions object to set.
2596 Sets the border style of the PDF object. @param bs BorderStyleDictionary object to set.
2597 Sets the parent of a field. Throws exception if sharing dictionary.
2598 Sets the normal appearance for a PDF appearance entry. @param entry The appearance entry to set as normal.
2599 Sets the normal appearance stream in the appearance dictionary. @param ap The PDAppearanceStream representing the normal appearance.
2600 Sets the rollover appearance for a PDF appearance entry. @param entry The PDAppearanceEntry to set as rollover.
2601 Sets the rollover appearance stream in the dictionary. @param ap The PDAppearanceStream object to set.
2602 Sets the down appearance entry in the dictionary. @param entry The PDAppearanceEntry to set.
2603 Sets the down appearance stream in the dictionary. @param ap The appearance stream to set.
2604 Sets the filter for the PDPropBuildDataDict. @param filter The filter to set.
2605 Sets the public security build data in the dictionary. @param pubSec The PDPropBuildDataDict to set.
2606 Sets the application PDPropBuildDataDict in the dictionary. @param app The PDPropBuildDataDict representing the application.
2607 Sets the seed value certificate in the dictionary. @param certificate The certificate to set.
2608 Sets the property build item in the dictionary. @param propBuild The property build object to set.
2609 Sets the previous sibling of the current outline node. @param outlineNode The previous sibling outline node.
2610 Sets the next sibling outline node. @param outlineNode The next sibling outline node.
2611 Sets the destination for the PDF object. @param dest The destination object to set.
2612 Sets the action to be performed on the PDF object. @param action The PDAction object to set.
2613 Sets the structure element within the COS object. @param structureElement The structure element to set.
2614 Sets the first child of the outline node. @param outlineNode The child outline node to set.
2615 Sets the last child outline node. @param outlineNode The outline node to set as the last child.
2616 Sets the default resources in the dictionary. @param dr The PDResources object to set as default.
2617 Sets the XFA resource for the document dictionary. @param xfa The XFA resource to set.
2618 Sets the value of the PDSignature. @param value The PDSignature to set. @throws IOException if an I/O error occurs.
2619 Sets the default value for the signature. @param value The default value to set.
2620 Sets the seed value for the PDF object. @param sv The PDSeedValue object to set.
2621 Sets the form field's additional actions. @param actions The additional actions to set.
2622 Sets the bounding box of the COS object. @param rectangle The PDRectangle representing the bounding box.
2623 Sets the measure dictionary for the PDF object. @param measure The PDMeasureDictionary to set.
2624 Sets the thread information within the document. @param info The PDDocumentInformation object to set.
2625 Sets the thread object associated with the bead. @param thread The PDThread object to set.
2626 Sets the next bead in the thread sequence. @param next The next PDThreadBead object.
2627 Sets the previous bead for the current bead. @param previous The previous PDThreadBead object.
2628 Sets the page for the current bead. @param page The PDF page to set.
2629 Sets the rectangle associated with the bead. @param rect The PDRectangle object to set.
2630 Sets the "Marked" boolean value in the dictionary. @param value The boolean value to set.
2631 Sets the "UserProperties" boolean value in the dictionary.
2632 Sets the "Suspects" boolean value in the dictionary to false.
2633 Sets whether to track mouse position on the map. @param value boolean indicating tracking status
2634 Sets the "Open" boolean value in the COS object. @param open The boolean value to set.
2635 Sets the "FD" boolean value within the COS object. @param fd The boolean value to set.
2636 Sets the volatility flag for the file system object. @param fileIsVolatile boolean indicating file volatility
2637 Sets the hidden state. @param hidden The new hidden state (true/false).
2638 Sets whether to encrypt metadata in the COS object. @param encryptMetaData Flag to enable/disable metadata encryption
2639 Sets the 'cap' (capitalization) attribute of the annotation. @param cap The boolean value for capitalization.
2640 Sets the scale-to-fit boolean value in the PDF annotation. @param value The boolean value to set for scale-to-fit.
2641 Sets the rename flag in the template. @param value The boolean value for the rename flag.
2642 Sets the anti-aliasing flag in the dictionary. @param antiAlias boolean value for anti-aliasing.
2643 Sets the overprint control flag in the dictionary. @param op The overprint control flag (true/false).
2644 Sets the non-stroking overprint control flag. @param op The boolean value for the overprint control.
2645 Sets the automatic stroke adjustment flag in the dictionary. @param sa The boolean value for automatic stroke adjustment.
2646 Sets the alpha source flag in the dictionary. @param alpha boolean value indicating alpha source.
2647 Sets the text knockout flag in the dictionary. @param tk boolean value representing the knockout flag
2648 Sets the open mode for a COS object. Null removes the setting.
2649 Sets the open mode for a COS object. Null removes the setting. @param value The OpenMode enum value to set.
2650 Sets the open mode for a COS object. Null removes the setting. @param value The OpenMode enum value to set.
2651 Sets the synchronous flag for the action. @param synchronous The boolean value for synchronous mode.
2652 Sets the repeat flag for the action. @param repeat The boolean value for the repeat flag.
2653 Sets the mix flag in the action. @param mix The boolean value for the mix flag.
2654 Sets the caption flag in the COS object. @param cap The boolean value for the caption.
2655 Sets the "Open" flag on the COS object to the specified value.
2656 Sets the pre-release flag in the dictionary. @param preRelease The boolean value for the pre-release flag.
2657 Sets whether to suppress warnings about embedding fonts. @param noEmbedFontWarning Flag to suppress font embedding warnings.
2658 Sets the trusted mode for the dictionary. @param trustedMode The boolean value for trusted mode.
2659 Sets the needAppearances flag in the dictionary. @param value Boolean value to set for needAppearances.
2660 Sets whether to hide the toolbar. @param value True to hide, false to show.
2661 Sets whether to hide the menubar. @param value boolean indicating whether to hide the menubar
2662 Sets whether to hide the window UI. @param value boolean indicating whether to hide UI
2663 Sets the fit window preference to the given boolean value.
2664 Sets whether the center window is visible. @param value boolean indicating visibility
2665 Sets whether to display the document title. @param value boolean indicating display preference
2666 Sets an array of strings to the COS object with the given name. @param name The name of the item to set. @param values The array of string values.
2667 Sets a COS array with given names to the COS object. @param name name of the array @param values array of strings to be added to the COS array
2668 Sets an array of floats to the COS object under the given name. @param name name of the item to set @param values array of float values
2669 Parses an appearance XML element and builds a COSDictionary. @param appearanceXML XML element representing the appearance. @return COSDictionary representing the parsed appearance.
2670 Sets the name with the given key to the specified value. Delegates to the PDFName version for processing.
2671 Sets the page mode of the root object. @param mode The PageMode to set.
2672 Sets the page layout for the root object. @param layout The PageLayout object to set.
2673 Sets the version of the root COS object. @param version The version string to set.
2674 Sets the 'trapped' value. Throws IllegalArgumentException for invalid input.
2675 Sets the style. If null, removes the style attribute.
2676 Constructs a PDTypedDictionaryWrapper with the given type. @param type The type of the dictionary.
2677 Sets the owner of the COS object. @param owner The new owner's name.
2678 Constructs a PDMarkedContentReference with a new COSDictionary.
2679 Constructs a new PDObjectReference with a COSDictionary.
2680 Sets the structure type of the COS object. @param structureType The structure type to set.
2681 Constructs a PDStructureNode with the given type. @param type The type of the structure node.
2682 Sets the name of the COS object, notifying listeners. @param name The new name to set.
2683 Sets the guideline style for the dictionary. @param style The style string to set.
2684 Sets the subfilter name in the dictionary. @param subfilter The subfilter string to set.
2685 Sets the intent name for the annotation. @param intent The intent name to set.
2686 Sets the line ending style for the annotation. @param style The line ending style to set (e.g., "LF", "CRLF")
2687 Sets the icon name for the annotation. @param icon The name of the icon to set.
2688 Sets the version of the catalog. @param version The version string to set.
2689 Sets the encoding name for the FDF object. @param encoding The encoding string to set.
2690 Sets the scaling option for the fit object. @param option The scaling option to set.
2691 Sets the scale type for the fit object. @param scale The scale type to set.
2692 Initializes a new PDAbstractPattern with a dictionary.
2693 Sets the type of the action. @param type The type string to set.
2694 Sets the sub-type name of the action. @param s The sub-type string to set.
2695 Sets the subtype of the COS object. @param subType The subtype string to set.
2696 Sets the appearance state of the COS object. @param as The appearance state string to set.
2697 Sets the attachment name using the provided name. @param name The new name for the attachment.
2698 Sets the line ending style for the PDF document. @param style The line ending style to set (e.g., "LF", "CR", "CRLF").
2699 Sets the caption positioning. @param captionPositioning The positioning string to set.
2700 Sets the highlight mode for the COS object. @param mode The highlight mode string to set.
2701 Sets the reply type for the COS object. @param rt The reply type string to set.
2702 Sets the IT name on the COS object. @param it The IT name to set.
2703 Sets the name of the COS object. @param name The new name to set.
2704 Sets the name of the COS object. @param name The new name to set.
2705 Sets the highlighting mode. Valid values are 'N', 'I', 'O', 'P', 'T'. @param highlightingMode The highlighting mode string.
2706 Sets the style of the COS object. @param s The style string to set.
2707 Initializes an ExternalDataDictionary with type "ExData".
2708 Sets the subtype of the COS object. @param subtype The subtype string to set.
2709 Sets the name of the dictionary. @param name The new name to set.
2710 Sets the URL type for the dictionary. @param urlType The URL type to set.
2711 Initializes the document outline object. Sets the object type to "Outlines".
2712 Creates a document outline from a COSDictionary. @param dic The COSDictionary containing outline information.
2713 Sets the default value of the COS object. @param value The default value to set.
2714 Initializes a new PDMeasureDictionary with a COSDictionary.
2715 Sets the subtype of the COS object. @param subtype The subtype string to set.
2716 Initializes a new PDNumberFormatDictionary. Sets the dictionary type to TYPE.
2717 Sets the name of the COS object. @param name The new name to set.
2718 Creates a transition object with the given style. @param style The transition style to apply.
2719 Sets the dimension name for the transition. @param dimension The PDTransitionDimension object.
2720 Sets the motion for the transition using the provided motion object.
2721 Sets a date value for a given key. @param key COS name representing the key. @param date Calendar object representing the date.
2722 Sets a string value for a given key. Delegates to the PDF name version of the method.
2723 Sets a string value for a key within an embedded dictionary. @param embedded The embedded object. @param key The key for the string value. @param value The string value to set.
2724 Sets the language string for the root COS object. @param language The language string to set.
2725 Sets the title of the info object. @param title The title to set.
2726 Sets the author of the document. @param author The author's name as a string.
2727 Sets the subject of the info object. @param subject The subject string to set.
2728 Sets the keywords for the info object. @param keywords The keywords to set.
2729 Sets the creator of the object. @param creator The creator's name to set.
2730 Sets the producer value in the info object. @param producer The producer string to set.
2731 Sets the prefix value. Null value removes the prefix.
2732 Sets the Unicode file name for the PDF document. @param file The Unicode file name string.
2733 Sets the file associated with this object. @param file The file path to set.
2734 Sets the file description. @param description The description to set.
2735 Sets the ID of the COS object. @param id The ID string to set.
2736 Sets the title of the PDF object. @param title The title string to set.
2737 Sets the language for the COS object. @param language The language string to set.
2738 Sets the alternate description for the COS object. @param alternateDescription The alternate description string.
2739 Sets the expanded form string for the COS object. @param expandedForm The string to set as the expanded form.
2740 Sets the actual text value for the COS object. @param actualText The text string to set.
2741 Sets the formatted value and notifies listeners. @param formattedValue The new formatted value to set.
2742 Sets the 'M' (modification date) string in the annotation. @param date The date string to set.
2743 Sets the name of the annotation. @param name The name to set for the annotation.
2744 Sets the contents of the annotation. @param contents The string content to set.
2745 Sets the title of the annotation. @param title The title string to set.
2746 Sets the subject of the annotation. @param subject The subject string to set.
2747 Sets the symbol for the annotation. "P" for paragraph, else "None".
2748 Sets the default appearance string for the annotation. @param appearance The default appearance string to set.
2749 Sets the default style for the annotation. @param style The default style string to set.
2750 Sets the caption style for the annotation. @param captionStyle The caption style string to set.
2751 Sets the state of the annotation. @param state The state string to set.
2752 Sets the state model string in the annotation. @param stateModel The state model string to set.
2753 Sets the status of the PDF document. @param status The new status string to set.
2754 Sets the target string value within the FDF object. @param target The target string to be set.
2755 Sets the partial field name using the provided string value.
2756 Sets the name of the COS object. @param name The new name to set.
2757 Sets the name of the dictionary. @param name The name to set for the dictionary.
2758 Initializes a PDOptionalContentProperties object. Creates a COSDictionary and sets initial properties.
2759 Sets the action string for the COSName.JS property. @param sAction The action string to set.
2760 Sets the 'F' string value in the action object. @param f The string value to set.
2761 Sets the value of the 'D' entry in the action dictionary. @param d The string value to set for the 'D' entry.
2762 Sets the 'O' string value in the action object. @param o The string value to set.
2763 Sets the 'P' string value in the action object. @param p The string value to set.
2764 Sets the URI value for the action. @param uri The URI string to set.
2765 Sets the filename for the dictionary. @param filename The name of the file.
2766 Sets the annotation name in the dictionary. @param name The name of the annotation.
2767 Sets the filename. @param file The filename to set.
2768 Sets the directory path. @param dir The directory string to set.
2769 Sets the operation parameter in the COS object. @param op The operation string to set.
2770 Sets the 'P' parameter in the 'params' object. @param param The string value to set as the parameter.
2771 Sets the contents of the dictionary. @param value The string value to set as contents.
2772 Sets the modified date of the COS object. @param m The modified date string to set.
2773 Sets the annotation name. @param nm The name to set for the annotation.
2774 Sets the default appearance string for the COS object. @param daValue The default appearance string to set.
2775 Sets the default style string for the COS object. @param defaultStyleString The default style string to set.
2776 Sets the title of the COS object. @param t The title string to set.
2777 Sets the subject of the PDF document. @param subj The subject string to set.
2778 Sets the state of the COS object. @param state The new state value to set.
2779 Sets the state model string on the COS object. @param stateModel The state model string to set.
2780 Sets the normal caption of the COS object. @param caption The caption string to set.
2781 Sets the rollover caption for the COS object. @param caption The caption string to set.
2782 Sets the alternate caption for the COS object. @param caption The alternate caption string to set.
2783 Sets the date value in the dictionary. @param date The date string to set.
2784 Sets the URL value in the dictionary. @param url The URL string to set.
2785 Sets the URL value in the dictionary. @param url The URL string to set.
2786 Sets the name of the dictionary. @param name The name to set.
2787 Sets the location value in the dictionary. @param location The location string to set.
2788 Sets the reason string in the dictionary. @param reason The reason string to set.
2789 Sets the contact information in the dictionary. @param contactInfo The contact information to set.
2790 Sets the title of the PDF document. @param title The title to set.
2791 Sets the default appearance value in the dictionary. @param daValue The default appearance string value.
2792 Sets the default string value for the COS object. @param value The string value to set as the default.
2793 Sets the partial name. Throws exception if name contains a period.
2794 Sets the alternate field name in the dictionary. @param alternateFieldName The alternate field name to set.
2795 Sets the mapping name in the dictionary. @param mappingName The name of the mapping.
2796 Sets the value of the COS object to the given string. @param value The string value to set. @throws IOException if an I/O error occurs.
2797 Sets the value of the COS object to the given string. @param value The string value to set. @throws IOException if an I/O error occurs.
2798 Sets the default value for the COS object. @param value The string value to set as default.
2799 Sets the default appearance string for the annotation. @param daValue The default appearance string to set.
2800 Sets the scale ratio of the COS object. @param scaleRatio The scale ratio string to set.
2801 Sets an integer value for a given key in the COS. @param key The key for the integer value.
2802 Sets an integer value in an embedded dictionary. @param embeddedDictionary Dictionary to embed in. @param key Key for the integer value. @param value Integer value to set.
2803 Sets a bit flag in a COS field's integer value. @param field COS field to modify @param bitFlag Bit flag to set/unset @param value If true, sets the flag; otherwise, unsets it.
2804 Sets the number of structural parents for the page. @param structParents The number of structural parents.
2805 Sets the rotation value for the page. @param rotation The rotation angle in degrees.
2806 Constructs a PDPageTree from a COSDictionary, handling invalid PDF structures. @param root The COSDictionary representing the page tree root. @param document The parent PDDocument.
2807 Removes a COSDictionary node from its parent's kids array. Updates ancestor counts after removal.
2808 Adds a page to the document's root, updating parent counts. @param page The PDPage object to add.
2809 Sets the start value. Throws exception if start is not positive.
2810 Sets the bits per sample in the COS object. @param bps The number of bits per sample.
2811 Sets the MCID value in the COS object. @param mcid The MCID value to set.
2812 Sets the revision number. @param revisionNumber The revision number to set (must be > -1).
2813 Sets the next key for the parent tree. @param parentTreeNextkey The next key value to set.
2814 Sets the length value in the crypt filter dictionary. @param length The length value to set.
2815 Sets the version number in the dictionary. @param version The version number to set.
2816 Sets the length value in the dictionary. @param length The length value to set.
2817 Sets the revision number for the dictionary. @param revision The revision number to set.
2818 Sets the permissions for the PDF dictionary. @param permissions Integer value representing the permissions.
2819 Sets the page number in the annotation. @param page The page number to set.
2820 Sets the justification type. @param justification Justification string ("centered", "right").
2821 Sets the rotation value for the annotation. @param rotation The rotation angle in degrees.
2822 Sets the field flags for the COS object. @param ff The field flags to set.
2823 Sets the field flags for the COS object. @param ff The flags to set.
2824 Sets the clear field flags on the COS object. @param ff The clear field flags to set.
2825 Sets the flags for the widget field. @param f The flag value to set.
2826 Sets the field flags for a widget. @param ff The flag value to set.
2827 Sets the clear widget field flags. @param ff The flag value to set.
2828 Sets the flags value and stores it in the dictionary. @param flags The flags value to set.
2829 Sets the widths for glyphs in the font dictionary. Uses glyph list and font encoding to determine widths.
2830 Sets the paint type for the pattern. @param paintType The integer representing the paint type.
2831 Sets the pattern type in the dictionary. @param patternType The integer representing the pattern type.
2832 Sets the paint type for the COS object. @param paintType The integer representing the paint type.
2833 Sets the tiling type for the COS object. @param tilingType The tiling type to set.
2834 Sets the shading type in the dictionary. @param shadingType The integer value of the shading type.
2835 Sets the number of bits used per flag. @param bitsPerFlag The number of bits per flag.
2836 Sets the number of vertices per row in the COS object. @param verticesPerRow The number of vertices per row.
2837 Sets the bits per color component. @param bitsPerComponent The number of bits per component.
2838 Sets the number of bits per coordinate. @param bitsPerCoordinate The number of bits per coordinate.
2839 Sets the line cap style. @param style The line cap style to set.
2840 Sets the line join style. @param style The line join style to set.
2841 Sets the overprint mode. Null value removes the entry. @param overprintMode The overprint mode to set.
2842 Sets the flags value for the action. @param flags The flags value to set.
2843 Sets the flags value for the action. @param flags The integer value to set as flags.
2844 Sets the page number in the dictionary. If negative, removes the page number entry.
2845 Sets the annotation index in the dictionary. If negative, removes the annotation. Otherwise, sets the index.
2846 Sets the annotation flags for the COS object. @param flags Integer representing the flags to set.
2847 Sets the parent structure ID. @param structParent The ID of the parent structure.
2848 Sets the 'Q' integer value in the COS object. @param q The integer value to set.
2849 Sets the rotation value for the COS object. @param rotation The rotation value to set.
2850 Sets the 'P' integer value in the dictionary. @param p The integer value to set (must be between 0 and 3).
2851 Sets the 'FT' (timestamp required) flag in the dictionary. @param flag True if timestamp is required, false otherwise.
2852 Sets the open count in the COS object. @param openCount The new open count value.
2853 Sets the Q value in the dictionary. @param q The Q value to set.
2854 Sets the field flags in the dictionary. @param flags The flags to set.
2855 Sets the top index in the COS object. @param topIndex The top index to set, or null to remove.
2856 Sets the maximum length value in the COS object. @param maxLen The maximum length to set.
2857 Sets the 'Q' integer value within the COS object. @param q The integer value to set.
2858 Sets a long value for the given key, using PDF name conversion. @param key The key for the long value. @param value The long value to set.
2859 Writes the document trailer to the output, updates trailer data.
2860 Sets the revision number for the dictionary. @param revision The revision number to set.
2861 Sets the minimum revision number in the dictionary. @param revision The minimum revision value to set.
2862 Sets a float value for a given key. Delegates to the named version using COSName.
2863 Sets the user unit value. Throws exception if value is not positive.
2864 Sets the width of the guideline. @param width The width to set for the guideline.
2865 Sets the opacity value for the annotation. @param opacity Opacity value (0.0 - 1.0)
2866 Sets the leader line length in the annotation. @param leaderLength The length of the leader line.
2867 Sets the leader extend value in the annotation. @param leaderExtend The leader extend float value.
2868 Sets the leader offset value in the annotation. @param leaderOffset The leader offset value to set.
2869 Sets the font weight. @param fontWeight The font weight value to set.
2870 Sets the italic angle. @param angle The italic angle in degrees.
2871 Sets the ascent value for the current font. @param ascent The ascent value to set.
2872 Sets the descent value in the DIC. @param descent The descent value to set.
2873 Sets the leading value for the dictionary. @param leading The leading value to set.
2874 Sets the cap height value. @param capHeight The cap height to set.
2875 Sets the x-height value and stores it in the dictionary. @param xHeight The x-height value to set.
2876 Sets the stem V value in the DIC. @param stemV The stem V value to set.
2877 Sets the stem height value in the DIC. @param stemH The stem height to set.
2878 Sets the average width. @param averageWidth The average width to set.
2879 Sets the maximum width value. @param maxWidth The maximum width to set.
2880 Sets the missing width value in the dictionary. @param missingWidth The missing width to set.
2881 Sets the X step value within the COS object. @param xStep The X step value to set.
2882 Sets the Y step value in the COS object. @param yStep The Y step value to set.
2883 Sets the volume level. @param volume Volume level between -1.0 and 1.0.
2884 Sets the length of the leader line. @param leaderLineLength The desired length of the leader line.
2885 Sets the length of the leader line extension. @param leaderLineExtensionLength Extension length in floats.
2886 Sets the leader line offset length in the COS object. @param leaderLineOffsetLength The offset length to set.
2887 Sets the constant opacity value for the COS object. @param ca The constant opacity value to set.
2888 Sets the width of the PDF object. Rounds to int if possible, otherwise sets as float.
2889 Sets the 'V' float value in the dictionary. @param minimumRequiredCapability The float value to set.
2890 Sets the CYX value in the COS object. @param cyx The CYX value to set.
2891 Parses a COS stream from a dictionary. @param dic COSDictionary containing stream information. @return COSStream object or null on error.
2892 Merges the contents of base COS object into target COS object. @param base Base COS object to merge from. @param target Target COS object to merge into.
2893 Parses a PDF document. @param lenient lenient parsing flag; throws IOException if false. @return PDDocument object representing the parsed document.
2894 Processes stream operators from a content stream. Handles operator parsing and color operator processing.
2895 Parses tokens into a list. @return List of parsed objects, or empty list if none found.
2896 Extracts the bounding box of a glyph from a PDF stream. Returns a PDRectangle or null if not found.
2897 Retrieves the width value from the PDF stream. @throws IOException if an error occurs during parsing.
2898 Writes a PDF document to an output stream. @param doc The PDF document to write. @throws IOException if an I/O error occurs.
2899 Saves the document incrementally to the given output stream. @param output Output stream to save the incremental changes to. @throws IOException if an I/O error occurs.
2900 Constructs a PDDocument with a default memory stream cache.
2901 Returns the document catalog. Creates one if it doesn't exist.
2902 Recursively finds a COSDictionary by page number. @param pageNum target page number @param node current node @param encountered pages encountered so far @return COSDictionary or null if not found
2903 Creates a PDFileSpecification from a COSBase object. @param base COSBase object representing file specification @return PDFileSpecification object or null if base is null @throws IOException if the base object type is unknown
2904 Notifies the structure element about a change. Calls attributeChanged on the structure element.
2905 Appends a COSObjectable as a child object. Handles null input; delegates to appendKid.
2906 Inserts a COSObjectable before a reference object. @param newKid The object to insert. @param refKid The reference object.
2907 Removes a COSObjectable kid object. Returns true on success.
2908 Sets the standard cryptographic filter dictionary. @param cryptFilterDictionary The dictionary to set.
2909 Sets the default crypt filter dictionary. Sets direct flag and associates with the default COS name.
2910 Constructs a new FDFAnnotationCaret object. Initializes the annotation subtype.
2911 Constructs a FDF annotation circle. Initializes the annotation subtype.
2912 Constructs a FDFAnnotationFileAttachment object. Initializes the subtype name for the annotation.
2913 Initializes a FDFAnnotationFreeText object. Sets the annotation subtype to SUBTYPE.
2914 Initializes a new FDFAnnotationInk object. Sets the annotation subtype to SUBTYPE.
2915 Constructs a FDFAnnotationLine object, setting its subtype.
2916 Initializes the FDFAnnotationLink with a subtype name.
2917 Constructs a FDFAnnotationPolygon object, initializing its subtype.
2918 Constructs a FDFAnnotationPolyline object, initializing its subtype.
2919 Constructs a FDFAnnotationSound object, initializing its subtype.
2920 Constructs a FDFAnnotationSquare object, initializing its subtype.
2921 Initializes the FDF annotation stamp with a subtype.
2922 Constructs a FDFAnnotationText object, setting its subtype.
2923 Default constructor for the FDFAnnotationTextMarkup class.
2924 Builds and sets vertical metrics for the CID font dictionary.
2925 Default constructor for the PDSimpleFont class.
2926 Retrieves an Optional Content Group by name. @param name Group name to search for. @return PDOptionalContentGroup or null if not found.
2927 Retrieves a collection of Optional Content Groups. Returns a Collection<PDOptionalContentGroup> objects.
2928 Sets the line width for the PDF content. @param width The line width to set.
2929 Sets the miter limit value. @param miterLimit The miter limit to set.
2930 Sets the flatness tolerance value. @param flatness The flatness tolerance to set.
2931 Sets the smoothness tolerance value. @param smoothness The desired smoothness tolerance.
2932 Sets the constant stroking alpha value. @param alpha The alpha value to set (0.0-1.0).
2933 Sets the non-stroking alpha value. @param alpha The alpha value to set.
2934 Constructs a new PDAnnotationLink, setting the subtype.
2935 Default constructor for the PDAnnotationMarkup class.
2936 Initializes the annotation popup, setting its subtype.
2937 Initializes the annotation widget, setting its subtype.
2938 Creates a PDAnnotationLink object from a COSDictionary. @param field The COSDictionary containing annotation link data.
2939 Creates a PDAnnotationMarkup object from a COSDictionary.
2940 Creates a PDAnnotationPopup object from a COSDictionary. @param field The COSDictionary representing the popup.
2941 Creates a PDAnnotationUnknown object from a COSDictionary.
2942 Constructs a PDAnnotationWidget from a COSDictionary. Sets the subtype name in the COS object.
2943 Sets all rect differences to the given value. @param difference The value to set for all rect differences.
2944 Sets all rect differences to the given value. @param difference The value to set for all differences.
2945 Sets the rectangle differences using a single float value. Uses the provided difference for all four sides.
2946 Sets the line dash pattern based on border style or array. @param lineWidth line width @param bs border style dictionary @param border border array
2947 Adds key usage flags to the key usage string. Flags represent different cryptographic operations.
2948 Constructs a PDCheckBox object, initializing it with a PDAcroForm.
2949 Creates a PDComboBox instance associated with a PDAcroForm. @param acroForm The form to associate with this combo box.
2950 Constructs a PDListBox object, initializing with a PDAcroForm.
2951 Sets the string value of the COS object. @param value The string value to set. @throws IOException if an I/O error occurs.
2952 Retrieves the border array, ensuring it has at least 3 elements. If null, creates a default border array.
2953 Initializes a COSWriterCompressionPool with a document and parameters. @param document PDDocument to compress @param parameters Compression parameters, or default if null
2954 Gets the embedded date for the given COS name. @param embedded COS name of the embedded object @param key COS name of the key @return Calendar object representing the date.
2955 Creates a PDF image object from a BufferedImage. @param document PDF document @param image BufferedImage to convert @return PDF image object
2956 Draws a corner curl segment using arc segments. @param anglePrev, angleCur, radius, cx, cy, alpha, alphaPrev
2957 Draws an ellipse defined by its bounding rectangle coordinates. @param left, bottom, right, top Ellipse bounding box coordinates.
2958 Formats text content paragraphs based on wrapping and alignment.
2959 Calculates appropriate font size based on font and content rect. @param font PDFont object @param contentRect PDRectangle defining content area @return Font size as float
2960 Reads and sets the font encoding based on dictionary values. Handles different encoding types and provides fallbacks.
2961 Determines if the font is symbolic based on various conditions. Returns true if symbolic, false if not, null if unknown.
2962 Retrieves a TrueTypeFont mapping, falling back to a default if needed. @param baseFont base font name @param fontDescriptor font descriptor @return FontMapping object
2963 Retrieves a FontBoxFont based on baseFont/descriptor. Returns a FontMapping, using fallback if needed.
2964 Checks if the XFA form is dynamic. Returns true if XFA is present and has no fields.
2965 Retrieves rich content from the dictionary object. Returns the content as a String.
2966 Writes XML representation of the field to the given Writer. @param output Writer to write XML to. @throws IOException if an I/O error occurs.
2967 Returns the rich text value from the inheritable attribute.
2968 Parses a PDF function stream and builds instruction sequence. @param functionStream COSBase object representing the function stream.
2969 Recursively interpolates samples based on coordinates and step. @param coord Coordinate array, step Incrementing index
2970 Creates a Type6 shading context with specified parameters. @param shading Shading object; colorModel, xform, matrix, bounds
2971 Constructs a Type7ShadingContext with specified parameters. @param shading The shading object.
2972 Retrieves the byte representation of the XFA object. Returns an empty array if no bytes are found.
2973 Initializes a PDPageFitDestination object. Sets the array size to 2 and name to TYPE.
2974 Sets whether to fit the bounding box. If true, sets array name to TYPE_BOUNDED, else to TYPE.
2975 Initializes a PDPageFitHeightDestination object. Sets the array size to 3 and sets name of element 1 to TYPE.
2976 Sets the left child value in the array. Sets array[2] to x or null if x is -1.
2977 Sets whether to fit the bounding box. If true, sets array name to TYPE_BOUNDED, else to TYPE.
2978 Initializes a PDPageFitRectangleDestination object. Sets the array size to 6 and names element 1 as TYPE.
2979 Sets the value at index 2 of the array to x or null.
2980 Sets the bottom coordinate. If y is -1, sets to null; otherwise, sets the int at index 3.
2981 Sets the value at index 4 of the array. Null if x is -1.
2982 Sets the 'top' value in the array. Sets to null if y is -1.
2983 Initializes the destination array with the TYPE constant.
2984 Sets the 'top' value in the array. Null if y is -1, otherwise sets to y.
2985 Sets whether to fit the bounding box. If true, sets array element 1 to TYPE_BOUNDED.
2986 Initializes the destination array with a size of 5 and sets its name.
2987 Sets the value at index 2 of the array. If x is -1, sets to null; otherwise, sets the integer value.
2988 Sets the top value in the array. Sets to null if y is -1.
2989 Sets the zoom level. Sets array element to null or COSFloat.
2990 Parses a COSDictionary value, handling object references. Returns a COSBase object or COSNull.NULL on error.
2991 Retrieves decode parameters, trying /DP if /DecodeParms is absent.
2992 Retrieves decode parameters from the PDF structure. @return List of decode parameters, may be empty.
2993 Constructs a PDCalGray object, initializing with COSName.CALGRAY.
2994 Constructs a PDCalRGB object, initializing with COSName.CALRGB.
2995 Constructs a PDLab object, extending PDF object with LAB type.
2996 Constructs a PDCalGray object from a COSArray. @param array The COSArray containing the PDF data.
2997 Constructs a PDCalRGB object from a COSArray. @param rgb COSArray representing RGB color values.
2998 Constructs a PDLab object from a COSArray. @param lab The COSArray representing the lab data.
2999 Loads the ICC profile from the input stream. Falls back if error.
3000 Sets the range for a component using the provided PDRange object.
3001 Sets the B range of the PDRange object. @param range The PDRange object to set.
3002 Gets the crop box of the page, or the media box if none is defined.
3003 Resolves the bounding box for a PDF annotation widget. @param fieldWidget The annotation widget. @param appearanceStream The appearance stream. @return The bounding rectangle.
3004 Sets the bounding box of the PDF object. @param bbox The PDRectangle representing the new bounding box.
3005 Sets the color value by name. @param name color name @param value the color value (PDGamma)
3006 Sets the value for a four-color object by name. @param name Name of the object. @param value The new PDFourColours value.
3007 Constructs a PDPage with default LETTER page size.
3008 Adds an object to the specified resource dictionary with a new key. @param kind Resource kind (e.g., Images, Fonts) @param prefix Prefix for the new key @param object Object to add @return The new key assigned to the object.
3009 Puts a font into the PDF object using the FONT key. @param name Font name @param font The font object to be added
3010 Sets the color space for the object. Delegates to the color space property.
3011 Sets the extended graphics state associated with a COS name.
3012 Adds a shading object to the document with a given name.
3013 Adds a pattern to the pattern dictionary. @param name Pattern name. @param pattern Pattern object to add.
3014 Adds properties to the document with a given name. @param name the name for the properties @param properties the properties to add
3015 Adds an XObject to the document's XObject dictionary. @param name XObject name @param xobject The XObject to add
3016 Retrieves the FDF dictionary. Creates one if it doesn't exist. @return FDFDictionary object.
3017 Constructs a new FDFDocument object, initializing its components.
3018 Retrieves the FDF catalog from the document. Creates a new catalog if one doesn't exist. @return The FDF catalog object.
3019 Gets the fractional space to allocate, or defaults to 0.5. @return PDRange object representing the allocated space.
3020 Constructs a PDTilingPattern object, initializing its properties.
3021 Returns the appearance dictionary, creating it if null.
3022 Inserts a new sibling outline item before the current item. @param newSibling The outline item to insert.
3023 Inserts a new sibling after the current outline item. @param newSibling The item to insert as a sibling.
3024 Adds a child to this outline item, updating parent/sibling links.
3025 Adds a child outline item as the first child. Sets parent/sibling links accordingly.
3026 Sets the first bead and associates it with the thread. @param bead The PDThreadBead to set as the first bead.
3027 Constructs a new PDThreadBead object, initializing its properties.
3028 Appends a bead to the thread bead chain. @param append The bead to append to the chain.
3029 Sets the name value in the COS object and notifies changes. @param name The name of the property to set. @param value The new value for the property.
3030 Sets the rendering intent. @param ri The rendering intent string to set.
3031 Sets the name associated with the action. @param name The name to set for the action.
3032 Sets the style name for the COS object. @param s The style name to set.
3033 Creates a PDPageLabels object associated with a document. Initializes the labels map with a default range.
3034 Creates a PDStructureElement with a type and parent node. @param structureType The type of the structure element. @param parent The parent PDStructureNode.
3035 Constructs a PDStructureTreeRoot object, initializing its type.
3036 Initializes a shading pattern object. Sets the pattern type to shading pattern.
3037 Constructs a new PDAction object, initializing its COSDictionary.
3038 Retrieves the document outline. Returns null if no outline exists.
3039 Returns the parent node, or null if no parent exists.
3040 Sets the value at the specified index. @param index The index of the value to set. @throws IllegalArgumentException if index is out of bounds.
3041 Initializes the PDRectlinearMeasureDictionary with a subtype.
3042 Constructs a PDTransition object with the default transition style.
3043 Sets the date for a given key using PDF name conversion. @param key The key for the date. @param date The Calendar object representing the date.
3044 Sets the date value for a given key within an embedded dictionary. @param embedded The embedded COSName. @param key The key for the date value. @param date The Calendar date to set.
3045 Sets the creation date of the info object. @param date The Calendar object representing the date.
3046 Sets the modification date of the document. @param date The Calendar object representing the date.
3047 Sets the creation date of the annotation. @param date The Calendar object representing the date.
3048 Sets the modified date of the COS object to the given Calendar. @param c Calendar object representing the modified date.
3049 Sets the creation date of the COS object. @param creationDate The Calendar object representing the date.
3050 Sets the signing date in the dictionary. @param cal Calendar object representing the signing date.
3051 Sets a custom metadata value for a specified field. @param fieldName Name of the metadata field. @param fieldValue Value to set for the field.
3052 Sets the string value for a given key in the COS object. @param name Key for the string value. @param value New string value to set.
3053 Sets the "Base" string value within the COS object. @param base The string value to set.
3054 Sets the application version in the dictionary. @param applicationVersion The version string to set.
3055 Sets the units value in the COS object. @param units The units string to set.
3056 Sets the fractional display type. Accepts "D", "F", "R", "T", or null.
3057 Sets the thousands separator string in the COS object. @param thousandsSeparator The separator string to set.
3058 Sets the decimal separator for the PDF document. @param decimalSeparator The decimal separator string.
3059 Sets the prefix string for labels on the COS object. @param labelPrefixString The prefix string to set.
3060 Sets the "SS" string value in the COS object. @param labelSuffixString The string to set as the suffix.
3061 Sets the "O" string value in the COS object. Value must be null, LABEL_PREFIX_TO_VALUE, or LABEL_SUFFIX_TO_VALUE.
3062 Sets the MAC subtype within the COS dictionary. @param macSubtype The subtype string to set.
3063 Sets the MAC creator in the COSDictionary. @param macCreator The creator string to set.
3064 Sets the MAC/RES_FORK embedded string in the COSDictionary. @param macResFork The string value to set.
3065 Creates a FDFField from an XML element. @param fieldXML XML element representing the field. @throws IOException if an I/O error occurs.
3066 Creates a new Optional Content Group with the given name.
3067 Adds a content group and adds it to the "Order" array. @param ocg The content group to add.
3068 Retrieves the base state from the COS dictionary. Returns a BaseState enum value.
3069 Enables/disables a content group. Returns true if found. @param group The group to enable/disable. @param enable True to enable, false to disable.
3070 Sets an integer value for a given key in the COS dictionary. @param name Key for the integer value @param value Integer value to set
3071 Sets the integer value for a given key in the COS object. @param name Key for the integer value. @param value The integer value to set.
3072 Sets the denominator value in the COS object. @param denominator The denominator value to set.
3073 Sets the invisible flag on the annotation. @param invisible If true, annotation is invisible.
3074 Sets the hidden flag on the annotation. @param hidden The value to set the hidden flag to.
3075 Sets the "printed" flag on the annotation. @param printed The new value for the printed flag.
3076 Sets the no-zoom flag in the annotation. @param noZoom True to disable zoom, false otherwise.
3077 Sets the no-rotate flag in the annotation. @param noRotate boolean value for no-rotate setting
3078 Sets the "no view" flag in the annotation. @param noView True to set the flag, false otherwise.
3079 Sets the read-only flag on the annotation. @param readOnly True to set read-only, false otherwise.
3080 Sets the locked flag on the annotation. @param locked The new value for the locked flag.
3081 Sets the "toggle no view" flag using the provided boolean value.
3082 Sets the flag indicating whether contents are locked. @param lockedContents True to lock, false to unlock.
3083 Sets the invisible flag of the COS object. @param invisible boolean value indicating invisibility
3084 Sets the hidden flag of the COS object. @param hidden The value to set the hidden flag to.
3085 Sets the printed flag on the COS object. @param printed The new value for the printed flag.
3086 Sets the no-zoom flag in the COS object. @param noZoom boolean value to set the flag to.
3087 Sets the no-rotate flag on the COS object. @param noRotate boolean value for no-rotate setting
3088 Sets the "no view" flag on the COS object. @param noView True to set the flag, false to clear it.
3089 Sets the read-only flag on the COS object. @param readOnly The new read-only flag value.
3090 Sets the locked status of the COS object. @param locked The new locked status (true/false).
3091 Sets the "no view" toggle flag on the COS object. @param toggleNoView The value of the toggle flag (true/false).
3092 Sets the locked contents flag on the COS object. @param lockedContents The flag value to set.
3093 Sets the filter required flag on the COS object. @param flag True to enable filtering, false otherwise.
3094 Sets the subfilter required flag on the COS object. @param flag The boolean value indicating if subfilter is required.
3095 Sets whether digest method is required for the COS object. @param flag True to require digest method, false otherwise.
3096 Sets the 'V' required flag on the COS object. @param flag The boolean value for the 'V' flag.
3097 Sets whether a reason is required. @param flag True to require a reason, false otherwise.
3098 Sets whether legal attestation is required. @param flag True to require legal attestation, false otherwise.
3099 Sets whether to require adding revision information. @param flag boolean value to set the flag to
3100 Sets whether the subject field is required. @param flag true to require subject, false otherwise.
3101 Sets whether the issuer is required. @param flag True to require issuer, false otherwise.
3102 Sets the OID required flag in the dictionary. @param flag True if OID is required, false otherwise.
3103 Sets whether the subject distinguished name is required. @param flag True to require, false otherwise.
3104 Sets the key usage flag in the dictionary. @param flag The boolean value for key usage requirement.
3105 Sets whether a URL is required. @param flag True if URL is required, false otherwise.
3106 Sets the italic flag in the COS object. @param italic boolean value to set for italic.
3107 Sets the bold flag for the PDF content. @param bold True to set bold, false otherwise.
3108 Sets the flag indicating whether signatures exist. @param signaturesExist boolean value for signature existence
3109 Sets the append-only flag for the dictionary. @param appendOnly True to enable append-only mode.
3110 Sets the sort flag on the COS object. @param sort The boolean value to set as the sort flag.
3111 Sets the multi-select flag on the COS object. @param multiSelect The boolean value for multi-select.
3112 Sets the do not spell check flag on the COS object. @param doNotSpellCheck flag indicating whether to disable spell check
3113 Sets the commit flag on selection change. @param commitOnSelChange Flag to set for commit on selection.
3114 Sets the combo flag on the COS object. @param combo The value to set the combo flag to.
3115 Sets the edit flag on the COS object. @param edit The boolean value for the edit flag.
3116 Sets the read-only flag for the dictionary. @param readonly True to make the dictionary read-only.
3117 Sets the required flag for the dictionary. @param required The boolean value to set as the required flag.
3118 Sets the "no export" flag in the dictionary. @param noExport True to disable exporting, false otherwise.
3119 Constructs a PushButton field, initializing its COS flag. @param acroForm The parent AcroForm object.
3120 Constructs a PDRadioButton with the given acroForm. Sets the radio button flag in the COS object.
3121 Sets the radiosInUnison flag in the COS object. @param radiosInUnison The value to set for radiosInUnison.
3122 Sets the multiline flag for the COS object. @param multiline True to enable multiline, false otherwise.
3123 Sets the password flag in the COS object. @param password The boolean value for the password flag.
3124 Sets the file select flag on the COS object. @param fileSelect The boolean value for file selection.
3125 Sets the do not spell check flag on the COS object. @param doNotSpellCheck boolean value for spell check setting
3126 Sets the do-not-scroll flag on the COS object. @param doNotScroll The value of the do-not-scroll flag.
3127 Sets the COMB flag in the COS object to the specified value.
3128 Sets the rich text flag on the COS object. @param richText The value of the rich text flag.
3129 Decodes an image from an input stream to an output stream. @param encoded Input stream containing the encoded image. @param decoded Output stream to write the decoded image.
3130 Validates the page tree dictionary and dereferencing. Throws IOException if the page tree root is not a dictionary.
3131 Returns the page tree of the PDF document. Creates a new PDPageTree object.
3132 Constructs a PDPageTree with a root dictionary and no parent. @param root The root COSDictionary for the page tree.
3133 Removes a page from the document. @param page The page to remove.
3134 Inserts a new page before an existing page in the document. @param newPage The page to insert. @param nextPage The page before which to insert.
3135 Inserts a new page after a specified previous page in a PDF. @param newPage The page to insert. @param prevPage The page after which to insert.
3136 Increments the revision number by one.
3137 Creates a PDImageXObject from a BufferedImage. Supports only 1-bit grayscale images.
3138 Creates a PDImageXObject from a RandomAccessRead, extracting TIFF data. @param document PDDocument to associate with the image. @param reader RandomAccessRead object containing TIFF data. @param number Image number to extract. @return PDImageXObject or null if extraction fails.
3139 Sets the float value for a given key in the COS object. @param name Key for the float value. @param value The float value to set.
3140 Sets the intensity value. @param i The intensity value to set.
3141 Sets the conversion factor for the COS object. @param conversionFactor The conversion factor to set.
3142 Parses an object stream and returns the previous object offset. @param objByteOffset Offset of the object. @param isStandalone Whether the stream is standalone. @return Previous object offset.
3143 Parses a PDF document. @return Parsed PDDocument object. @throws IOException If an I/O error occurs.
3144 Processes a transparency group, handling resources and transformations. @param group The transparency group to process. @throws IOException if an I/O error occurs.
3145 Processes a Type 3 stream, applying transformations and operators. @param charProc The character processor for the stream. @param textRenderingMatrix Transformation matrix for text rendering.
3146 Processes an annotation's appearance stream, adjusting its matrix. @param annotation The annotation to process. @param appearance The appearance stream to process.
3147 Processes a tiling pattern, applying transformations and clipping. @param tilingPattern The tiling pattern to process.
3148 Processes a PDF content stream, handling resources and transformations.
3149 Writes a COSDocument to a PDF file. @param doc The COSDocument to write. @throws IOException if an I/O error occurs.
3150 Saves the document to an output stream with optional compression. @param output Output stream to save to. @param compressParameters Compression parameters to use. @throws IOException if an I/O error occurs.
3151 Returns the document version. Uses catalog version if >= 1.4.
3152 Retrieves a page from the document at the specified index. @param index the index of the page to retrieve @return PDPage object representing the page
3153 Removes the node at the given index. @param index index of the node to remove
3154 Finds the index of a page within the document. @param page The PDPage to search for. @return The index of the page, or -1 if not found.
3155 Retrieves the file specification from the stream. @return PDFileSpecification object representing the file. @throws IOException if an I/O error occurs.
3156 Retrieves the file specification from the FDF document. @return PDFileSpecification object representing the file.
3157 Retrieves embedded FDF specifications. @return List of PDFileSpecification objects or null. @throws IOException if an I/O error occurs.
3158 Retrieves the file specification from the PDF dictionary. @return PDF file specification object. @throws IOException if an I/O error occurs.
3159 Retrieves the file specification. Returns a PDFileSpecification object.
3160 Retrieves the file specification from the action dictionary. Returns a PDFileSpecification object.
3161 Retrieves the file specification. Returns a PDFileSpecification object.
3162 Retrieves the file specification from the action dictionary. Returns a PDFileSpecification object.
3163 Retrieves the file specification from the action dictionary. Returns a PDFileSpecification object.
3164 Retrieves the file specification from the action dictionary. Returns a PDFileSpecification object.
3165 Retrieves the file specification. Returns a PDFileSpecification object.
3166 Notifies listeners if the COSBase value has changed. @param oldBase The previous COSBase value. @param newBase The new COSBase value.
3167 Appends a kid element, sets its parent to this element. @param structureElement The element to append as a kid.
3168 Inserts a new element before a reference element. @param newKid The element to insert. @param refKid The reference element.
3169 Removes a child element and detaches it from its parent. @param structureElement The element to remove. @return True if the element was removed, false otherwise.
3170 Constructs a FDFAnnotationHighlight object, initializing subtype.
3171 Constructs a FDFAnnotationSquiggly object. Initializes the annotation subtype.
3172 Constructs a FDFAnnotationStrikeOut object, initializing subtype.
3173 Constructs a new FDFAnnotationUnderline object. Initializes the annotation subtype.
3174 Constructs a new attachment file. Sets the subtype COS name to the default value.
3175 Initializes the annotation ink object. Sets the subtype COS name to SUB_TYPE.
3176 Constructs a new line annotation. Sets subtype and initial line data.
3177 Constructs a PDAnnotationPolygon, setting its subtype.
3178 Constructs a PDAnnotationPolyline, setting the subtype.
3179 Initializes the RubberStamp annotation with a subtype.
3180 Constructs a PDAnnotationSquareCircle with the given subtype. @param subType The subtype of the annotation.
3181 Initializes the annotation text object. Sets the subtype name to SUB_TYPE.
3182 Creates a text markup annotation with the given subtype. @param subType The subtype of the annotation.
3183 Creates a PDAnnotationCaret object from a COSDictionary.
3184 Creates a file attachment annotation from a COSDictionary. @param field The COSDictionary representing the attachment.
3185 Creates a free text annotation using the provided COSDictionary.
3186 Creates a PDAnnotationInk object from a COSDictionary.
3187 Creates a line annotation from a COSDictionary. @param field The COSDictionary containing annotation data.
3188 Creates a PDAnnotationPolygon from a COSDictionary. @param dict The COSDictionary containing annotation data.
3189 Creates a PDAnnotationPolyline object from a COSDictionary.
3190 Creates a RubberStamp annotation from a COSDictionary. @param field The COSDictionary representing the annotation.
3191 Creates a PDAnnotationSound object from a COSDictionary. @param field The COSDictionary containing annotation sound data.
3192 Constructs a PDAnnotationSquareCircle from a COSDictionary.
3193 Creates a PDAnnotationText object from a COSDictionary.
3194 Creates a text markup annotation from a COSDictionary. @param field The COSDictionary containing annotation data.
3195 Creates and returns a PDAnnotationPopup object. Returns null if no popup dictionary exists.
3196 Retrieves a list of annotation widgets. Returns an empty list if none exist.
3197 Writes compressed body objects to the document. Handles object streams and encryption setup.
3198 Checks if the font is symbolic, caching the result. @return True if symbolic, false if definitively not, else true.
3199 Checks if the PDF form is dynamic XFA. @param acroForm The PDF form object. @return True if dynamic, false otherwise.
3200 Initializes the iterator with fields from the given form. @param form The PDAcroForm to iterate over.
3201 Creates a PDFunction based on the provided COSBase object. @param function COSBase representing the function. @throws IOException if the function type is unknown.
3202 Performs R-interpolation. Delegates to rinterpol with default input array.
3203 Extracts matte data from a soft mask. @param softMask The soft mask image. @return Float array representing matte data, or null if none.
3204 Parses document bytes to a Document object. @return Document object representing the parsed document. @throws IOException if an I/O error occurs during parsing.
3205 Encodes the image data for PNG format. @return Encoded PDImageXObject or null on error. @throws IOException if an I/O error occurs
3206 Sets the destination of the PDF page. @param page The PDF page to set as the destination.
3207 Initializes the page with given parameters. @param page The PDF page to initialize.
3208 Gets the bleed box of the page. Returns crop box if bleed box is null.
3209 Gets the trim box of the page. Returns crop box if trim box is null.
3210 Gets the art box rectangle. Returns crop box if art box is null.
3211 Gets the rotated crop box of a page. @param page the page to get the crop box from @return PDRectangle representing the rotated crop box
3212 Adds a font to the PDF dictionary. @param font The font object to add. @return The COSName representing the added font.
3213 Adds a color space to the document. @param colorSpace The color space object to add. @return The added color space name.
3214 Adds an extended graphics state. @param extGState The extended graphics state object. @return COSName object representing the added state.
3215 Adds a shading object to the document. @param shading The shading object to add. @return COSName representing the added shading.
3216 Adds a pattern to the COS object. @param pattern The pattern to add. @return The COS name representing the added pattern.
3217 Adds a property list to the COS object. @param properties The property list to add. @return COSName object representing the added property.
3218 Adds an image to the document's resources. @param image The image to add. @return COSName representing the image resource.
3219 Adds a form XObject to the document's resources. @param form The form XObject to add. @return The COS name of the added form.
3220 Adds an XObject with a given prefix. @param xobject The XObject to add. @param prefix Prefix for the XObject name. @return COSName of the added XObject.
3221 Exports the document fields to an FDF document. @return FDFDocument containing the exported fields. @throws IOException if an I/O error occurs.
3222 Retrieves the down appearance entry from the appearance dictionary. Creates a new entry if it's a subdictionary.
3223 Retrieves the rollover appearance entry. Creates if it's missing.
3224 Gets the normal appearance entry, creating it if it's missing. Returns the PDAppearanceEntry object.
3225 Adds a child outline item to the end of the list. @param newChild The outline item to add.
3226 Adds a new child outline item as the first child. @param newChild The outline item to add.
3227 Creates a PDPageLabels object from a document and dictionary. @param document The document to associate labels with. @param dict COSDictionary containing page label information.
3228 Initializes the embedded GoTo action by setting its subtype.
3229 Initializes a PDActionGoTo object by setting its subtype.
3230 Initializes a PDActionHide object, setting its subtype.
3231 Initializes the PDActionImportData object. Sets the subtype to SUB_TYPE constant.
3232 Initializes the PDActionJavaScript object. Sets the subtype to a predefined constant.
3233 Initializes the PDActionLaunch object, setting its subtype.
3234 Initializes a PDActionMovie object, setting its subtype.
3235 Initializes a PDActionNamed object, setting its subtype.
3236 Initializes the PDActionRemoteGoTo with a predefined subtype.
3237 Constructs a PDActionResetForm, setting its subtype.
3238 Initializes a PDActionSound object, setting its subtype.
3239 Initializes the form by setting its subtype to SUB_TYPE.
3240 Constructs a PDActionThread, setting its subtype to SUB_TYPE.
3241 Default constructor. Sets the subtype to SUB_TYPE constant.
3242 Updates the open count of the parent node by a delta. @param delta The amount to add to the parent's open count.
3243 Sets the value. Updates via option or direct value update. @param value The value to set. @throws IOException if an I/O error occurs.
3244 Checks if a content group is enabled based on COS dictionaries. @param group The content group to check. @return True if enabled, false if disabled, otherwise default.
3245 Sets the enabled state of a group by name. @param groupName Name of the group to modify. @param enable True to enable, false to disable. @return True if the group was found and enabled/disabled.
3246 Returns the pages in the PDF document. Delegates to the document catalog.
3247 Returns the number of pages in the document.
3248 Sets the fixed pitch flag. @param flag True to enable fixed pitch, false otherwise.
3249 Sets the Serif flag. @param flag The value to set the Serif flag to (true/false).
3250 Sets the symbolic flag. @param flag The value to set the symbolic flag to.
3251 Sets the script execution flag. @param flag True to enable, false to disable.
3252 Sets the non-symbolic flag. @param flag True to set the flag, false to clear it.
3253 Sets the italic flag. @param flag True to set italic, false to unset it.
3254 Sets the ALL_CAP flag. @param flag The value to set the flag to (true/false).
3255 Sets the small-cap flag. @param flag The boolean value to set the flag to.
3256 Sets the force bold flag. @param flag True to force bold, false otherwise.
3257 Creates a PDImageXObject from a byte array. @param document The document. @param byteArray Image data as bytes. @param number Image number. @return PDImageXObject created from the byte array.
3258 Creates a PDImageXObject from a file. @param document PDDocument object @param file File to read image from @param number image number @return PDImageXObject
3259 Creates an FDFAnnotation from an XML element. @param element XML element representing the annotation. @throws IOException if required attributes are missing.
3260 Parses a COSBase object dynamically, fetching or parsing as needed. @param objKey COSObjectKey identifying the object @return COSBase object or null if not found.
3261 Parses Xref tables and resolves references, updating document state. @param document The COSDocument to update. @param startXRefOffset Starting offset for Xref parsing.
3262 Processes a transparency group. @param form The transparency group to process.
3263 Processes a transparency group, setting up graphics state for soft masking.
3264 Displays a Type 3 glyph using the provided parameters. @param textRenderingMatrix Matrix for rendering. @param font The Type 3 font. @param code Glyph code. @param displacement Vector displacement.
3265 Processes an annotation by extracting and handling its appearance. @param annotation The annotation to process. @throws IOException If an I/O error occurs during processing.
3266 Processes a tiling pattern with provided color and color space. Delegates to overloaded method with matrix parameter.
3267 Displays a PDF form. @param form The PDF form to display. @throws IOException If an I/O error occurs.
3268 Saves data to the provided output stream. @param output Output stream to save data to.
3269 Saves data to a file, optionally compressing it. @param file The file to save to. @param compressParameters Compression parameters. @throws IOException if an I/O error occurs.
3270 Creates a new PDF document, copying settings from the source. @return A new PDDocument object. @throws IOException if an I/O error occurs.
3271 Sets the version to the specified value, preventing downgrades. Updates document/catalog version based on document version.
3272 Returns an iterator for the pages in this document.
3273 Retrieves a page from the document at the specified index. @param pageIndex Index of the page to retrieve (0-based). @return The PDPage object at the given index.
3274 Writes the FDF data to the specified XML writer. @param output XML writer to write the FDF data to @throws IOException if an I/O error occurs
3275 Prepares a PDF document for encryption using AES. @param doc The PDF document to be encrypted. @throws IOException if an I/O error occurs during encryption.
3276 Constructs a PDAnnotationHighlight object, initializing subtype.
3277 Constructs a PDAnnotationSquiggly object, initializing its subtype.
3278 Constructs a strikeout annotation. Calls the superclass constructor with SUB_TYPE.
3279 Constructs a PDAnnotationUnderline object, extending PDAnnotation.
3280 Creates a PDAnnotationCircle object from a COSDictionary. @param field The COSDictionary containing annotation data.
3281 Creates a square annotation from a COSDictionary. @param field The COSDictionary representing the annotation.
3282 Creates a highlight annotation from a COSDictionary. @param dict The COSDictionary containing annotation data.
3283 Creates a squiggly annotation from a COSDictionary. @param dict The COSDictionary containing annotation data.
3284 Creates a strikeout annotation from a COSDictionary. @param dict The COSDictionary containing annotation data.
3285 Creates an underline annotation from a COSDictionary. @param dict The COSDictionary containing annotation data.
3286 Imports a FDF field value and flags into the current field. @param fdfField The FDF field to import from.
3287 Draws a PDInlineImage at specified coordinates with given dimensions. @param inlineImage Inline image to draw. @param x X coordinate. @param y Y coordinate. @param width Image width. @param height Image height.
3288 Creates a cloudy polygon from a 2D float array path. @param path Array of points, supports only point segments. @throws IOException if an I/O error occurs.
3289 Draws a cloudy rectangle or polygon based on dimensions. @param left, bottom, right, top Rectangle coordinates. @param isEllipse Whether to draw as ellipse or rectangle.
3290 Returns an iterator to iterate over the fields in the form.
3291 Evaluates a PDF function based on input, selecting a child function. @param input Input value for evaluation. @return Float array representing the evaluation result.
3292 Creates a PDDeviceN object from a COS array and resources.
3293 Returns the tint transform function. Creates if null.
3294 Creates a PDSeparation object from a COSArray and resources. @param separation COSArray containing separation data @param resources PDResources for color space creation
3295 Retrieves the PDFunction object, creating it if necessary. @return PDFunction object or null if no function is defined.
3296 Retrieves the array of PDFunction objects. @return PDFunction[] array of functions or null if none. @throws IOException if the function element is invalid.
3297 Retrieves the transfer function. Creates if null. @return PDFunction object representing the transfer function.
3298 Creates a PDIndexed object. @param indexedArray Indexed array from PDF. @param resources PDF resources.
3299 Evaluates the function using linear interpolation. @param input Input array of floats to be processed. @return Array of floats representing the evaluated output values.
3300 Retrieves an image from the sampled image reader. @param region Region to extract, null for full image. @param subsampling Subsampling value for image extraction. @return BufferedImage object representing the extracted image.
3301 Creates a PDImageXObject from a BufferedImage, using predictor encoding or fallback. @param document The document to add the image to. @param image The BufferedImage to create the image from.
3302 Processes a PDF page, extracting and handling its contents. @param page The PDF page to process. @throws IOException if an I/O error occurs.
3303 Processes a child content stream for a page. Throws exception if a page is already being processed.
3304 Creates a content stream on a page, overwriting existing content. @param document The document to add the content to. @param sourcePage The page to write content on.
3305 Sets the current font and size. @param font The PDF font to set. @param fontSize The font size.
3306 Sets graphics state parameters. @param state The graphics state to set. @throws IOException if an I/O error occurs.
3307 Adds a shading to resources and applies the SHADING_FILL operator. @param shading The PDShading object to be added. @throws IOException If an I/O error occurs.
3308 Begins marked content with tag and property list. Writes operator and handles simplified notation for MCID.
3309 Adds marked content point with properties to the PDF. @param tag COSName tag for the marked content. @param propertyList Property list for the content.
3310 Draws an image at specified coordinates with given dimensions. @param image The image to draw. @param x X coordinate. @param y Y coordinate. @param width Image width. @param height Image height.
3311 Draws an image with the given matrix transform. @param image The image to draw. @param matrix The transformation matrix.
3312 Draws a PDF form object. Throws exception if called within a text block.
3313 Gets the normal appearance as a content stream. @param compress Whether to compress the stream. @return PDAppearanceContentStream object.
3314 Retrieves page labels from the document's COSDictionary. Returns PDPageLabels object or null if not present.
3315 Creates a PDActionJavaScript object with the given JavaScript. @param js The JavaScript code to execute.
3316 Checks if a group is enabled. @param groupName The name of the group to check. @return True if the group is enabled, false otherwise.
3317 Checks if an optional content group is enabled. @param group The optional content group to check. @return True if group is enabled or OCProperties is null.
3318 Updates destinations in a document, fixing page references.
3319 Adds a page to the document and updates the highest imported object number. @param page The page to add.
3320 Removes a page from the document's page list. @param page The page to remove.
3321 Removes a page at the specified index. @param pageNumber The index of the page to remove.
3322 Constructs a PDFPrintable with provided parameters. @param document The PDF document. @param scaling Scaling factor for the document.
3323 Initializes a PDF renderer with the given document. @param document The PDF document to render.
3324 Initializes the PageExtractor with a PDF document. @param sourceDocument The PDF document to extract pages from.
3325 Returns a map of labels to page indices. Uses computeLabels to populate the map.
3326 Retrieves labels for each page in the document. @return String array of labels, one for each page.
3327 Creates a PDFPageable object. @param document The PDF document. @param orientation Page orientation.
3328 Creates a PDFontDescriptor from a Type1Font. @param type1 The Type1Font to build the descriptor from. @return PDFontDescriptor object.
3329 Creates a PDFontDescriptor from FontMetrics. @param metrics FontMetrics object containing font information. @return PDFontDescriptor object.
3330 Creates a PDFontDescriptor from a TrueTypeFont. Extracts font properties from TTF tables. @param ttf The TrueTypeFont object to process. @return A PDFontDescriptor object. @throws IOException if essential tables are missing.
3331 Creates a PDImageXObject from a byte array. @param document The document to associate with the image. @param byteArray The byte array containing the image data. @return A PDImageXObject.
3332 Creates a PDImageXObject from a file. @param document The document to associate with the image. @param file The file containing the image. @return The created PDImageXObject.
3333 Creates a FDFAnnotationCaret from an Element. @param element The Element to create the caret from. @throws IOException if an I/O error occurs.
3334 Creates a FDF annotation circle from an Element. Parses interior color if present; initializes fringe.
3335 Constructs a FDF annotation file attachment from a PDF element.
3336 Constructs a FDFAnnotationFreeText object from an Element. Parses attributes like justification, appearance, and rotation.
3337 Parses ink gestures from an Element, storing them in inklist.
3338 Creates a FDFAnnotationLine from an Element, parsing attributes.
3339 Creates a FDF annotation link from an Element. Parses URI from element for action.
3340 Creates a FDF annotation polygon from an XML element. Parses interior color if present; sets subtype.
3341 Creates a FDF annotation polyline from a PDF element.
3342 Creates a FDF annotation sound from a PDF element. @param element The PDF element to create the sound from. @throws IOException if an I/O error occurs.
3343 Creates a FDF annotation square from an Element. Sets subtype and parses interior color, initializes fringe.
3344 Creates a FDF annotation stamp from an Element. Parses appearance XML from the element, if available.
3345 Constructs a FDFAnnotationText object from an Element. Initializes subtype, icon, and state/stateModel attributes.
3346 Creates a FDFAnnotationTextMarkup from an Element. Parses coords attribute, throws IOException if invalid.
3347 Retrieves the trailer dictionary from the PDF document. Rebuilds if necessary based on lenient mode and errors. @return COSDictionary trailer object.
3348 Loads a PDF document from byte array with optional password & keystore. @param input PDF data, password, keystore, alias. @return PDDocument object.
3349 Loads a PDF document from a RandomAccessRead. @param randomAccessRead Input stream for PDF data. @return A PDDocument object representing the PDF.
3350 Loads a PDF document from a RandomAccessRead, optionally with a password.
3351 Loads a PDF document from a RandomAccessRead. @param randomAccessRead Source for PDF data. @param password Password for decryption, if any. @return PDDocument object representing the PDF.
3352 Sets the visual signature from a file. @param file The file containing the visual signature. @throws IOException if an I/O error occurs.
3353 Initializes visual signature from an input stream. @param is Input stream containing signature data. @throws IOException if an I/O error occurs.
3354 Displays a glyph based on font type. @param matrix Transformation matrix. @param font PDFont object. @param code Glyph code. @param displacement Vector displacement.
3355 Builds a PDF with signature properties. @param properties Signer properties for PDF creation. @return InputStream containing the generated PDF. @throws IOException if an I/O error occurs.
3356 Saves data to a file. @param file The file to save to. @throws IOException If an I/O error occurs.
3357 Saves data to a file with specified compression parameters. @param fileName File name to save to. @param compressParameters Compression settings.
3358 Creates a new document if needed based on page split.
3359 Writes the document header, including version and comments. @param doc The COSDocument to write the header for.
3360 Sets optional content properties and updates PDF version if needed. @param ocProperties Optional content properties to set.
3361 Gets a layout page from a PDF document. @param doc The PDF document. @return A LayoutPage object.
3362 Calculates page dimensions based on the given page number. @param document The PDF document. @param page The page number to calculate dimensions for.
3363 Finds the destination page in a PDF document. @param doc The PDF document to search. @return The destination page or null if not found.
3364 Gets the PageFormat for the specified page index. @param pageIndex index of the page @return PageFormat object representing the page format
3365 Retrieves the page number from an array. Returns -1 if empty.
3366 Writes the FDF data to an XML writer. @param output XML writer to write to. @throws IOException if writing fails.
3367 Prepares the document's encryption dictionary for encryption. Sets version, revision, permissions, and passwords.
3368 Creates a PDAnnotation based on the provided COSBase object. @param base COSBase object representing the annotation. @throws IOException if the annotation type is unknown.
3369 Draws an inline image at the specified coordinates. @param inlineImage The image to draw. @param x The x coordinate. @param y The y coordinate.
3370 Creates a cloudy rectangle based on the provided rectangle. @param rd The rectangle to base the cloudy effect on. @throws IOException if an I/O error occurs.
3371 Draws a cloudy ellipse using specified bounds. @param leftOrig Left bound of the ellipse. @param bottomOrig Bottom bound of the ellipse. @param rightOrig Right bound of the ellipse. @param topOrig Top bound of the ellipse.
3372 Retrieves a list of signature fields from the form. Returns a list of PDSignatureField objects.
3373 Refreshes the appearances of terminal fields in the field tree.
3374 Returns an iterator to traverse the fields in the document.
3375 Enables/disables field caching. If enabled, populates fieldCache.
3376 Retrieves a PDF field by its fully qualified name. @param fullyQualifiedName Field's unique identifier. @return The PDF field or null if not found.
3377 Creates a PDColorSpace based on the provided COSBase. @param colorSpace COSBase representing the color space.
3378 Evaluates functions with input, clamps values to [0, 1]. @param input input array for function evaluation @return float array of evaluated function values
3379 Constructs a PDIndexed object from a COSArray. @param indexedArray The COSArray containing index information.
3380 Gets the image. Delegates to getImage(String, int). @return BufferedImage object representing the image.
3381 Processes a PDF page, setting rotation and cropbox. Sets translation matrix based on cropbox position.
3382 Sets the stroking color, writing operators to the PDF stream. @param color The PDColor object representing the color. @throws IOException if an I/O error occurs.
3383 Sets the non-stroking color, writing corresponding PDF operators.
3384 Draws an image at specified coordinates. @param image The image to draw. @param x X coordinate. @param y Y coordinate.
3385 Returns the normal appearance as a content stream. Overloads the method for cleaner code.
3386 Opens the node, incrementing the node count if it's closed.
3387 Closes the node if it's currently open, decrementing the count.
3388 Imports a page from another PDF page into the current document. @param page The page to import. @return The imported page.
3389 Creates a PDF template by adding a page to a new document. @param page The page to add to the template.
3390 Constructs a PDFPrintable with a default PDFRenderer. @param document The PDF document. @param scaling Scaling factor.
3391 Creates a PDFPageable from a PDDocument with default settings.
3392 Constructs a PDFPageable with default settings. @param document The PDF document. @param orientation Page orientation (portrait/landscape).
3393 Constructs a PDFPageable with default page count mode. @param document The PDF document. @param orientation Page orientation. @param showPageBorder Whether to show page border.
3394 Constructs a PDFPageable with default fit width. @param document The PDF document. @param orientation Page orientation. @param showPageBorder Whether to show page border. @param dpi Resolution in dots per inch.
3395 Embeds a Type1 font into a PDF document using a PFB stream. @param doc The PDF document. @param dict The font dictionary. @param pfbStream PFB stream for the font. @param encoding Font encoding.
3396 Embeds a TrueType font into a PDF document, optionally as a subset. @param document PDF document to embed into @param dict COS dictionary for the font @param ttf TrueType font to embed @param embedSubset Whether to embed a subset of the font @throws IOException if embedding is not permitted or unsupported
3397 Creates a PDImageXObject from a file based on its extension. @param file The image file. @param doc The document to add the image to. @throws IOException If an I/O error occurs.
3398 Creates a PDImageXObject from a file based on its content. @param file The file to create the image from. @param doc The document to add the image to. @return PDImageXObject object. @throws IOException if file reading fails.
3399 Creates a FDF annotation highlight from a COS element. @param element The COS element representing the annotation.
3400 Creates a FDF squiggly annotation from a PDF element. @param element The PDF element to initialize from.
3401 Constructs a FDFAnnotationStrikeOut from a PDF element. @param element The PDF element to initialize from.
3402 Creates an FDFAnnotationUnderline object from an Element. @param element The Element to create the object from.
3403 Loads a PDF document from a byte array. @param input PDF data as bytes @param password Password for the PDF, if any @return Loaded PDF document
3404 Loads a PDF document from a file. @param file The file containing the PDF. @param password Password for the PDF, if any. @return A PDDocument object.
3405 Loads a PDF document from a file, using optional password, keystore, and alias.
3406 Sets the visual signature using properties. @param visSignatureProperties Properties for the visual signature. @throws IOException If an I/O error occurs.
3407 Builds a visible signature using PDFTemplateCreator. Uses PDVisibleSigBuilder to create the signature.
3408 Saves data to a file. @param fileName The name of the file to save to. @throws IOException If an I/O error occurs.
3409 Imports optional content properties from source document to target.
3410 Constructs a PDVisibleSignDesigner with a document, image stream, and page.
3411 Creates a PDVisibleSignDesigner with a document, image, and page.
3412 Writes XML data to the provided Writer. @param output Writer to write the XML data to. @throws IOException if an I/O error occurs.
3413 Retrieves annotations from a page, filtered by the given criteria. @param annotationFilter Filter to apply to annotations @return List of matching PDAnnotation objects
3414 Retrieves the referenced COS object, potentially an XObject or annotation. Returns null if the object cannot be determined.
3415 Retrieves the "In-Reply-To" annotation. @return PDAnnotation object or null if not present.
3416 Retrieves the parent annotation markup. Returns null if the parent annotation is not a PDAnnotationMarkup.
3417 Creates a cloudy ellipse based on the provided rectangle. @param rd The rectangle defining the ellipse's bounds.
3418 Retrieves a list of signature dictionaries from signature fields. @return List of PDSignature objects.
3419 Imports fields from an FDF document into the current document. @param fdf The FDFDocument containing the fields to import.
3420 Evaluates a function with a single float input. @param inputValue The input value to evaluate. @return Float array containing the result.
3421 Evaluates a shading function and converts the result to RGB. @param values Input values for the shading function. @return RGB value derived from the evaluated function.
3422 Returns a paint with a soft mask applied. Uses the non-stroking color and graphics state.
3423 Processes a page, conditionally performing actions based on page number.
3424 Sets the stroking color, writing necessary operators to the stream. @param color The PDColor to set. @throws IOException if an I/O error occurs.
3425 Sets the non-stroking color, writing operators and operands. @param color The PDColor to set. @throws IOException if an I/O error occurs.
3426 Appends a form as a new layer to the target page. @param form The form to append. @return The newly created optional content group.
3427 Displays a PDF form, skipping if hidden. Restores linePath if rendered.
3428 Draws a transparency group onto the provided Graphics2D object. @param form The transparency group to draw. @param graphics The Graphics2D context to draw on.
3429 Starts a marked content sequence, handling hidden OCGs. @param tag COSName tag for the sequence. @param properties Dictionary with sequence properties.
3430 Constructs a PDFPrintable with default pageable. @param document PDDocument, Scaling, showPageBorder, dpi
3431 Creates a PDType1Font object from a PFB input stream. @param doc The document. @param pfbIn PFB input stream. @param encoding Font encoding.
3432 Initializes a PDFont with a COSDictionary. @param fontDictionary The COSDictionary containing font data.
3433 Embeds a Type 2 font within a PDF document. @param document PDF document, dictionary, font, embed flag, parent font, vertical flag @throws IOException if an I/O error occurs
3434 Creates a PDTrueTypeFontEmbedder, embedding a TrueType font. @param document The document to embed in. @param dict The COS dictionary. @param ttf The TrueType font. @param encoding The font encoding.
3435 Creates a PDImageXObject from an image file. @param imagePath Path to the image file. @param doc The document to associate with the image. @return PDImageXObject created from the file.
3436 Parses an FDF XML element to populate the dictionary. @param fdfXML The root XML element representing the FDF.
3437 Loads a PDF document from a byte array. @param input byte array containing PDF data @return PDDocument object representing the PDF
3438 Loads a PDF document from a file, using the given password. @param file The file to load. @param password Password for the PDF document. @return A PDDocument object.
3439 Loads a PDF document from a file. @param file The file containing the PDF document. @return A PDDocument object representing the PDF.
3440 Imports a page as a form XObject, copying resources and transforming it. @param sourceDoc Source PDF document. @param page The page to import. @return A PDFormXObject representing the imported page.
3441 Constructs a PDVisibleSignDesigner with image and document source. @param documentSource RandomAccessRead for document @param imageStream Input stream for the visible signature image @param page Page number (1-based)
3442 Constructs a PDVisibleSignDesigner with image and document source. @param documentSource Source for document page size. @param image Visible signature image. @param page Page number.
3443 Writes XFDF data to the provided Writer, closing it afterward.
3444 Retrieves all annotations. @return A list of all annotations.
3445 Returns the last signature dictionary from the list. Returns null if the list is empty.
3446 Saves incremental data to output stream for external signing. @param output OutputStream to write the incremental data to. @return SigningSupport object for subsequent signing operations.
3447 Draws a glyph to the PDF graphics context, applying transformations. @param path Glyph path, font, code, displacement, and transform.
3448 Processes each page in the provided page tree, extracting content. @param pages The PDPageTree containing pages to process.
3449 Initializes appearance content based on characteristics. Writes to stream, handles background, border, and dividers.
3450 Writes content to the appearance stream, using provided font size.
3451 Constructs a PDFPrintable with default rasterization setting. @param document The PDF document to print. @param scaling The scaling factor. @param showPageBorder Whether to show the page border.
3452 Creates a PDType1Font from a PFB input stream. @param doc The document this font belongs to. @param pfbIn Input stream containing the PFB data.
3453 Initializes a PDSimpleFont with a COSDictionary. @param fontDictionary COSDictionary containing font data
3454 Creates a PDType0Font from a COSDictionary. @param fontDictionary COSDictionary containing font data @throws IOException if font data is missing or invalid
3455 Creates a PDType0Font from a TrueTypeFont, embedding or closing it. @param embedSubset Whether to embed a subset of the font.
3456 Creates a PDTrueTypeFont from a TrueTypeFont and encoding. @param closeTTF Closes the TTF data source if true.
3457 Constructs a FDFCatalog from an Element. @param element The Element to create the catalog from.
3458 Loads a PDF document from a file. @param file The file containing the PDF document. @return A PDDocument object representing the PDF.
3459 Imports a page from a document as a form XObject. @param sourceDoc Source document. @param pageNumber Page number to import. @return Form XObject representing the page.
3460 Saves XFDF data to a file. @param fileName File to save XFDF data to. @throws IOException if an I/O error occurs.
3461 Adjusts struct parent entries for page and its annotations. @param page The page to update. @param structParentOffset Offset to add to struct parent values.
3462 Clones the structure tree from the source to the destination document.
3463 Processes annotations on the imported page, cloning and fixing references.
3464 Adds a signature to the document. @param sigObject Signature object to add. @param signatureInterface Signature interface implementation. @param options Signature options.
3465 Fills and strokes the path, preserving the original linePath.
3466 Writes document content to the specified output stream. @param doc The document to write. @param outputStream The output stream to write to.
3467 Inserts generated appearance data into the stream. @param widget The annotation widget. @param appearanceStream Appearance stream. @param output Output stream to write to.
3468 Draws a page onto the provided Graphics2D context. @param g Graphics2D object to draw on. @param pageSize Rectangle representing the page size.
3469 Constructs a PDFPrintable with default page interaction. @param document The PDF document to print. @param scaling The scaling factor for the document.
3470 Returns the default PDF font (Helvetica). Lazily initializes if not already set.
3471 Creates a TrueType font from a COSDictionary, parsing or mapping. @param fontDictionary Font dictionary from the PDF. @throws IOException if an I/O error occurs during parsing.
3472 Creates a PDType1CFont from a COSDictionary, parsing embedded fonts. @param fontDictionary Font dictionary containing font information. @throws IOException if there's an I/O error reading the font.
3473 Creates a Type1 font from a font dictionary. @param fontDictionary Font dictionary containing font data. @throws IOException if an I/O error occurs while reading the font.
3474 Creates a PDType3Font object from a COSDictionary. @param fontDictionary Font dictionary. @param resourceCache Resource cache.
3475 Loads a PDType0Font from a RandomAccessRead. @param doc PDDocument, read, embedSubset, vertical flags @return PDType0Font object
3476 Creates a PDType0Font from a TrueTypeFont, embedding a subset if specified. @param doc PDDocument to associate with the font. @param ttf TrueTypeFont to use. @param embedSubset Whether to embed a subset of the font.
3477 Creates a PDType0Font from a TrueTypeFont. @param doc PDDocument to associate with the font @param ttf TrueTypeFont to use @param embedSubset Whether to embed a font subset @return PDType0Font object
3478 Creates a PDTrueTypeFont instance. @param doc PDDocument, the document. @param ttf TrueTypeFont, the font. @param encoding Encoding, the font encoding. @return PDTrueTypeFont object.
3479 Loads a TrueType font from a RandomAccessRead. @param doc PDDocument, encoding Encoding, read stream @return PDTrueTypeFont object
3480 Creates an FDF document from a Document object. @param doc The Document object to create from. @throws IOException if the document root is not 'xfdf'.
3481 Creates a PDVisibleSignDesigner with filename, image stream, and page.
3482 Constructs a PDVisibleSignDesigner with a filename, image, and page.
3483 Saves XFDF data to a file. @param fileName The name of the file to save to.
3484 Imports a page into the destination document, handling resources and annotations.
3485 Adds a signature, delegating to a more detailed method. @param sigObject The signature object to add. @param options Signature options.
3486 Adds a signature using default options. @param sigObject The signature object to add. @param signatureInterface Signature interface implementation.
3487 Appends source PDF document to the destination PDF document. Handles metadata, structure tree, and other merging tasks.
3488 Converts PNG image data to a PDImageXObject. @param doc PDDocument to add the image to. @param imageData PNG image data as bytes. @return PDImageXObject or null if conversion fails.
3489 Extracts text from a PDF document. @param doc The PDF document to extract text from. @return The extracted text as a String.
3490 Renders a PDF page as a BufferedImage. @param pageIndex page index @param scale rendering scale @param imageType desired BufferedImage type @param destination rendering destination @return BufferedImage representation of the page
3491 Renders a PDF page to graphics at specified scale and destination. @param pageIndex Index of the page to render.
3492 Initializes a PDFPrintable with default scaling. @param document The PDF document to print.
3493 Displays text encoded in a byte array, applying font and text state parameters. @param string byte array containing the text to display
3494 Constructs a PDMMType1Font from a COSDictionary. @param fontDictionary The COSDictionary representing the font.
3495 Constructs a PDType3Font with a COSDictionary. @param fontDictionary The COSDictionary for the font. @throws IOException If an I/O error occurs.
3496 Loads a PDType0Font from a file. @param doc The document to load into. @param file The file to load from. @return The loaded PDType0Font.
3497 Loads a PDType0Font from an input stream. @param doc The document. @param input Input stream to load from. @param embedSubset Whether to embed a subset. @return The loaded PDType0Font.
3498 Loads a vertical font from a file. @param doc The document. @param file The file to load from. @return The loaded font.
3499 Loads a vertical font from an input stream. @param doc The document. @param input Input stream for the font data. @return The loaded PDType0Font object.
3500 Loads a vertical PDType0Font from an input stream. @param input Input stream containing the font data. @param embedSubset Whether to embed a subset of the font. @return The loaded PDType0Font.
3501 Loads a TrueType font from a file. @param doc The document. @param file The file to load. @param encoding The encoding to use. @return A PDTrueTypeFont object.
3502 Loads a TrueType font from an input stream. @param doc The document. @param input Input stream. @param encoding Encoding. @return PDTrueTypeFont object.
3503 Loads an XFDF document from an input stream. @param input Input stream containing the XFDF data. @return FDFDocument object representing the loaded document.
3504 Processes pages within a specified range. Iterates through pages, processing those between start/end pages.
3505 Adds a signature using default options. @param sigObject The signature object to add. @throws IOException if an I/O error occurs.
3506 Flattens the form, merging fields into a single PDF. Does nothing for dynamic XFA forms.
3507 Creates a PDImageXObject from a byte array, supporting various image types. @param document The document to add the image to. @param byteArray Image data as a byte array. @param name Image name. @param customFactory Custom image factory, if available. @return PDImageXObject created from the image data. @throws IOException If an I/O error occurs.
3508 Renders an image from a page. @param pageIndex Page index to render. @param scale Render scale. @param imageType Image type. @return BufferedImage object.
3509 Renders a page to graphics, using default destination if none provided. @param pageIndex Page index to render. @param graphics Graphics context to draw to. @param scaleX X scale factor. @param scaleY Y scale factor.
3510 Displays a byte array as text, using the showText method. @param string Byte array to display. @throws IOException If an I/O error occurs.
3511 Displays text strings from a COS array, applying text adjustments. @param array COSArray containing text strings or TJ values.
3512 Creates a PDFont object based on the provided dictionary. @param dictionary Font dictionary @param resourceCache Resource cache @return PDFont object
3513 Loads a PDType0Font from an input stream. @param doc The document. @param input Input stream containing font data. @return The loaded PDType0Font.
3514 Loads an XFDF document from the specified file. @param filename Path to the XFDF file. @return FDFDocument object.
3515 Loads an XFDF document from the given file. @param file The file containing the XFDF document. @return The loaded FDFDocument object.
3516 Splits a PDDocument into multiple PDDocuments. @param document The document to split. @return List of PDDocuments created by the split.
3517 Creates a PDImageXObject from a byte array. @param document The document to add the image to. @param byteArray Image data as bytes. @param name Image name. @return PDImageXObject object.
3518 Renders an image for a given page and scale. @param pageIndex The page index to render. @param scale The rendering scale. @return A BufferedImage representing the rendered image.
3519 Renders an image with specified DPI. @param pageIndex Page index to render. @param dpi Dots per inch for rendering. @return Rendered BufferedImage.
3520 Renders an image with specified DPI. @param pageIndex Page index to render. @param dpi DPI value. @param imageType Image type. @return Rendered BufferedImage.
3521 Renders a page to graphics at the specified index and scale. @param pageIndex Index of the page to render. @param graphics Graphics context to draw on. @param scale Scaling factor for the page.
3522 Retrieves a PDFont instance by name, caching if possible. @param name Font name (COSName) @return PDFont object or null if not found.
3523 Creates a PDFont from a COSDictionary. @param dictionary COSDictionary containing font information @return PDFont object
3524 Extracts a PDDocument based on start/end page numbers. Returns an empty document if page range is invalid.
3525 Renders an image for a given page index. @param pageIndex Index of the page to render. @return BufferedImage representing the rendered page.
3526 Delegates to overloaded method with default quality. @param pageIndex Index of the page to render. @param graphics Graphics context to draw on.
3527 Copies needed resources (font) to the appearance stream. @param appearanceStream The stream to add resources to.
3528 Retrieves the font object from the font setting. @return PDFont object or null if no font is found.
3529 Updates annotation appearance stream by modifying content. Copies resources, modifies BMC/EMC, and writes to stream.
3530 Copies graphics state properties into the provided GraphicsState. @param gs the GraphicsState to copy properties to @throws IOException if an I/O error occurs
3531 Parses appearance string operators from byte array. Parses operators and arguments from a PDF stream.
3532 Initializes appearance and resources. Requires /DA and /DR entries; processes appearance string.
3533 Retrieves the default appearance string. @return PDDefaultAppearanceString object. @throws IOException if an I/O error occurs.
3534 Sets the appearance value for a PDF field, handling multiline formatting. @param apValue The appearance value to set.
3535 Initializes the helper with a PDF variable text field. @param field The PDF variable text field. @throws IOException if default appearance string processing fails.
