1 Private constructor for OperatorName class.
2 Initializes OperatorProcessor with a PDFStreamEngine. @param context PDFStreamEngine instance to be used
3 Default constructor for COSBase class.
4 Constructs a new COSUpdateState with the given update information. @param updateInfo The update information to be used.
5 Default constructor for DecodeOptions. Initializes with default settings.
6 Initializes DecodeOptions with a specified source region. @param sourceRegion rectangle defining the region to decode
7 Initializes DecodeOptions with uniform subsampling. @param subsampling value for both X and Y dimensions
8 Default constructor for Filter class.
9 Initializes a PageExtractor with a document and page range. @param sourceDocument the PDF document to extract pages from @param startPage the starting page index (inclusive) @param endPage the ending page index (exclusive)
10 Initializes an XReference with a specified type. @param type the type of XReference
11 Initializes ContentStreamWriter with an OutputStream. @param out OutputStream to write content to
12 Initializes the cache with stable cache option. @param enableStableCache flag to enable or disable stable caching
13 Initializes a new PDDocumentCatalog. @param doc The parent PDDocument @param rootDictionary The root dictionary of the catalog
14 Constructs a document information object from a dictionary. @param dic COSDictionary containing document metadata
15 Initializes a new instance with a given COS dictionary. @param dict COSDictionary containing name destinations
16 Initializes a new instance of PDDocumentNameDictionary. @param cat The document catalog. @param names The dictionary containing names.
17 Constructs a PDPage from a COSDictionary. @param pageDictionary dictionary representing the page
18 Initializes a new instance of PDPage. @param pageDictionary PDF dictionary representing the page @param resourceCache cache for resources used in the page
19 Initializes a new PDDictionaryWrapper with the given COSDictionary. @param dictionary the underlying COSDictionary to wrap
20 Constructs a PDNameTreeNode from a dictionary. @param dict the COSDictionary to use as the node's data
21 Initializes a PDPageLabelRange with a COSDictionary. @param dict dictionary containing page label information
22 Constructs a PDRange from a COSArray. @param range array representing the range
23 Initializes a PDRange with a given COSArray and index. @param range the COSArray representing the range @param index the starting index within the array
24 Initializes a PDStream with a given COSStream. @param str COSStream to be used by this PDStream
25 Initializes a new instance of PDMarkInfo with a given dictionary. @param dic the COSDictionary to be used
26 Initializes a new PDMarkedContentReference with the given COSDictionary. @param dictionary the COSDictionary to be used
27 Constructs a PDObjectReference from a COSDictionary. @param theDictionary The underlying COSDictionary to reference.
28 Initializes PDStructureNode with a COSDictionary. @param dictionary the underlying COSDictionary object
29 Constructs a new instance of Revisions.
30 Initializes PDPropertyList with a COSDictionary. @param dict the dictionary to be used
31 Initializes a new PDBoxStyle with a given COSDictionary. @param dic the COSDictionary to use for initialization
32 Initializes an AccessPermission with default permissions.
33 Constructs an AccessPermission with specified integer permissions. @param permissions bitwise representation of access permissions
34 Initializes a new PDCryptFilterDictionary with a given COSDictionary. @param d the COSDictionary to use as the filter dictionary
35 Initializes an RC4Cipher with a 256-element salt array.
36 Constructs an FDF annotation from a COS dictionary. @param a COS dictionary representing the annotation
37 Constructs an FDFCatalog with the given dictionary. @param cat COSDictionary representing the catalog
38 Constructs an FDFDictionary from a COSDictionary. @param fdfDictionary the underlying COSDictionary to use
39 Initializes an FDFField with a COSDictionary. @param f COSDictionary representing the field data
40 Initializes FDFIconFit with a COSDictionary. @param f dictionary containing icon fit settings
41 Initializes a new FDFJavaScript object. @param javaScript COSDictionary containing JavaScript data
42 Constructs an FDFNamedPageReference with a given COSDictionary. @param r the COSDictionary representing the reference
43 Constructs an FDFOptionElement with a given COSArray. @param o COSArray representing the option data
44 Initializes a new FDFPage with a given dictionary. @param p COSDictionary representing the page data
45 Constructs a FDFPageInfo with a given COSDictionary. @param p COSDictionary containing page information
46 Initializes FDFTemplate with a COSDictionary. @param t the COSDictionary to be used as the template
47 Initializes a new PDFontDescriptor with the given dictionary. @param desc COSDictionary containing font descriptor information
48 Initializes PDFontSetting with a COSArray. @param fs COSArray containing font settings
49 Initializes an empty line dash pattern. @param none @return none
50 Initializes a PDColor with a pattern name and color space. @param patternName the name of the pattern @param colorSpace the color space for the color
51 Initializes PDDeviceNAttributes with a COSDictionary. @param attributes the COSDictionary containing device attributes
52 Initializes a PDDeviceNProcess with given attributes. @param attributes COSDictionary containing process attributes
53 Constructs a PDGamma with values from a COSArray. @param array COSArray containing gamma values
54 Constructs a PDTristimulus from a COSArray. @param array the COSArray containing tristimulus values
55 Initializes a PDTransparencyGroupAttributes with a given COSDictionary. @param dic the COSDictionary to initialize with
56 Initializes properties from a COS dictionary. @param props COS dictionary containing properties
57 Initializes a new pattern with a given COSDictionary. @param dictionary the COSDictionary representing the pattern
58 Initializes a PDShading with a given COSDictionary. @param shadingDictionary the COSDictionary representing the shading
59 Initializes PDExtendedGraphicsState with a dictionary and resource cache. @param dictionary COSDictionary containing graphics state settings @param resourceCache ResourceCache for managing resources
60 Initializes a PDSoftMask with given dictionary and resource cache. @param dictionary PDF dictionary containing mask properties @param resourceCache cache for resources used in masking
61 Constructs a new paragraph with specified text content. @param text the content of the paragraph
62 Initializes a new Word instance with given text content. @param text the word's text
63 Constructs a PDAction with a COSDictionary. @param a COSDictionary representing the action
64 Private constructor to prevent instantiation of utility class.
65 Initializes PDAdditionalActions with a dictionary. @param a COSDictionary containing action definitions
66 Initializes additional actions from a dictionary. @param a COSDictionary containing action data
67 Initializes a new instance with the given dictionary. @param a the COSDictionary containing action data
68 Initializes additional form field actions. @param a dictionary containing action data
69 Initializes PDPageAdditionalActions with a dictionary. @param a COSDictionary containing page actions
70 Constructs a PDTargetDirectory from a COSDictionary. @param dictionary COSDictionary containing target directory information
71 Initializes PDURIDictionary with a COSDictionary. @param dictionary the underlying COSDictionary to use
72 Initializes PDWindowsLaunchParams with a COSDictionary. @param p dictionary containing parameters
73 Constructs a PDAppearanceCharacteristicsDictionary from a COSDictionary. @param dict the underlying COSDictionary to use
74 Initializes a new instance of PDAppearanceDictionary with a given COSDictionary. @param dictionary the underlying COSDictionary to use
75 Constructs a PDAppearanceEntry with a given COSDictionary. @param entry dictionary representing appearance properties
76 Initializes border effect dictionary. @param dict COSDictionary containing border effects
77 Initializes border style with given COSDictionary. @param dict COSDictionary containing border style data
78 Initializes a new PDExternalDataDictionary with the given COSDictionary. @param dictionary the COSDictionary to initialize with
79 Initializes a new CloudyBorder with specified parameters. @param stream the appearance content stream for rendering @param intensity the intensity level of the border effect @param lineWidth the width of the border line @param rect the rectangle defining the border area
80 Initializes a PDPropBuild with a COSDictionary. @param dict the COSDictionary to be used
81 Constructs a PDPropBuildDataDict from a COSDictionary. @param dict the underlying COSDictionary for this data structure
82 Initializes a PDSeedValue with a given COSDictionary. @param dict the COSDictionary to be used
83 Initializes a PDSeedValueCertificate with a given COSDictionary. @param dict the COSDictionary to initialize with
84 Initializes a new PDSeedValueMDP with a given COSDictionary. @param dict the COSDictionary to be used
85 Initializes PDSeedValueTimeStamp with a COSDictionary. @param dict the COSDictionary to be used
86 Initializes a PDSignature with a COSDictionary. @param dict the COSDictionary to use for initialization
87 Initializes a new instance of SignatureOptions with default page number.
88 Initializes a new PDFTemplateCreator with a given builder. @param templateBuilder builder used to create PDF templates
89 Private constructor to prevent instantiation of utility class.
90 Constructs a PDField with specified parameters. @param acroForm the form containing the field @param field the COSDictionary representing the field @param parent the parent non-terminal field
91 Initializes PDXFAResource with a COSBase object. @param xfaBase underlying XFA base resource
92 Initializes a new PDMeasureDictionary with the given COSDictionary. @param dictionary the underlying COSDictionary to use
93 Constructs a PDNumberFormatDictionary with a given COSDictionary. @param dictionary the underlying COSDictionary to use
94 Initializes a PDViewportDictionary with a given COSDictionary. @param dictionary the COSDictionary to use as the viewport dictionary
95 Constructs a PDThread from a COSDictionary. @param t COSDictionary representing the thread
96 Constructs a PDThreadBead from a COSDictionary. @param b dictionary representing the thread bead
97 Initializes PDViewerPreferences with a COSDictionary. @param dic dictionary containing viewer preferences
98 Initializes PageDrawerParameters for PDF rendering. @param renderer PDFRenderer instance @param page PDPage to be rendered @param subsamplingAllowed flag for image subsampling @param destination RenderDestination object @param renderingHints RenderingHints for rendering @param imageDownscalingOptimizationThreshold threshold for image downscaling optimization
99 Initializes a new LineItem with no text position.
100 Initializes a 3x3 identity transformation matrix.
101 Initializes a Matrix with a source float array. @param src input float array representing matrix elements
102 Constructs a 3x3 transformation matrix. @param a, b, c, d, e, f coefficients for the matrix
103 Private constructor to prevent instantiation of utility class.
104 Constructor for PDFStreamEngine. Initializes the engine.
105 Adds an operator to the processor map. @param op OperatorProcessor instance to be added
106 Sets the terminator character. @param term the terminator character to set @throws IllegalArgumentException if term is not between 118 and 126 (excluding 'z')
107 Sets the number of pages to split at. @param split number of pages, must be greater than zero
108 Sets the starting page number. @param start starting page index (must be greater than zero)
109 Sets the end page number. @param end the page number to set as the end page @throws IllegalArgumentException if end is less than or equal to zero
110 Sets parser leniency. @param lenient true for lenient parsing, false otherwise @throws IllegalArgumentException if called after initial parse
111 Initializes compress parameters. @param objectStreamSize size of the object stream, must be non-negative
112 Sets the blending mode for rendering. @param blendMode the BlendMode to apply, cannot be null
113 Initializes a PDFieldTree with an acroForm. @param acroForm the root PDAcroForm object, must not be null
114 Returns the length of the stream. @throws IllegalStateException if there's an open OutputStream @return length of the stream as a long
115 Initializes a new instance of PDFMergerUtility. Sets up an empty list to hold source PDFs.
116 Initializes a COSWriterObjectStream with a specified compression pool. @param compressionPool pool used for object stream compression
117 Initializes text clipping buffer. Resets textClippings to store new clipping areas.
118 Adds a source file to the list. @param source File object representing the source to be added @throws FileNotFoundException if the specified file does not exist
119 Adds a source to the list of sources. @param source RandomAccessRead object representing the source to be added
120 Adds a name to the instructions list. @param name the name to be added
121 Adds an instruction sequence to the list. @param child the InstructionSequence to be added
122 Adds a recipient to the list. @param recipient PublicKeyRecipient object to be added
123 Adds a new region with its name and area. @param regionName unique name of the region @param rect bounding rectangle defining the region's area
124 Sets the PDF trailer dictionary. @param trailer the trailer dictionary to set
125 Retrieves an object from the pool by its key. @param key unique identifier for the object @return COSBase object or null if not found
126 Retrieves an Operator by name. @param operatorName unique name of the operator @return Operator object or null if not found
127 Converts Unicode sequence to its corresponding character name. @param unicodeSequence the Unicode sequence as a string @return the character name or ".notdef" if not found
128 Retrieves the current graphics state from the stack. @return PDGraphicsState object representing the top of the stack
129 Restores the previous graphics state from the stack.
130 Returns the size of the graphics stack. @return number of elements in the graphics stack
131 Transforms a point using a 3x3 transformation matrix. @param x the x-coordinate of the point @param y the y-coordinate of the point @return transformed Point2D.Float object
132 Decreases the level by one. Logs an error if the level becomes negative.
133 Adds an integer to the instructions list. @param value integer value to be added
134 Checks if the stream is closed and throws IOException if it is.
135 Throws an exception indicating that reset operation is unsupported. @throws IOException always thrown with message "Reset is not supported"
136 Throws an exception as the reset operation is unsupported. @throws IOException indicating that reset is not supported
137 Retrieves the encryption details of the parsed PDF document. @return PDEncryption object containing encryption information @throws IOException if the document is not parsed yet
138 Retrieves the access permission for the parsed document. @return AccessPermission object @throws IOException if the document is not parsed yet
139 Constructs an InvalidPasswordException with a specified detail message. @param message the detail message of the exception
140 Initializes an Operator. @param aOperator the operator string to be set @throws IllegalArgumentException if the operator starts with "/"
141 Returns string representation of PDFOperator. @return formatted operator string
142 Returns string representation of COSArray. @return formatted string including array contents
143 Returns string representation of COSObject. @return String in format "COSObject{key}"
144 Retrieves a filter by name. @param filterName the name of the filter to retrieve @return the Filter object associated with the given name @throws IOException if the filter is not found
145 Adds a real number to the instructions list. @param value the floating-point number to add
146 Sets the image width for the visible signature. @param width the desired width of the image @return PDVisibleSignDesigner instance for method chaining
147 Sets the image height. @param height new height value for the image @return reference to this PDVisibleSignDesigner instance
148 Calculates the Euclidean distance between two points. @param ps starting point @param pe ending point @return distance as a double
149 Calculates the value of the edge equation for a point. @param p the point to evaluate @param p1 first endpoint of the edge @param p2 second endpoint of the edge @return result of the edge equation
150 Initializes a new PDMarkedContent instance. @param tag the content tag name @param properties dictionary of content properties
151 Returns the type name for patterns. @return "Pattern" as the type name
152 Returns the type of shading. @return The string representation of the shading type
153 Retrieves the default value of an attribute. @return String representation of the default value or empty string if none
154 Sets the value to "Off" and throws an IOException.
155 Checks if the white point is at (1, 1, 1). @return true if wpX, wpY, and wpZ are all 1, false otherwise
156 Calculates color table for shading. @return int array of RGB colors @throws IOException if evaluation fails
157 Generates a color table for gradient shading. @return int array of RGB colors @throws IOException if an I/O error occurs during evaluation
158 Creates an initial code table. @return List of byte arrays representing the code table
159 Retrieves an element from the list at the specified index. @param index position of the element to retrieve @return COSBase object at the given index
160 Retrieves element at specified index. @param index position of the element to retrieve @return element at the given index
161 Returns the number of elements in the collection. @return the size of the collection
162 Returns the number of elements in the collection. @return size of the collection
163 Returns the number of recipients. @return count of recipients
164 Checks if the collection is empty. @return true if no elements present, false otherwise
165 Checks if the collection is empty. @return true if no elements present, false otherwise
166 Removes a recipient from the list. @param recipient the PublicKeyRecipient to be removed @return true if the recipient was successfully removed, false otherwise
167 Returns an iterator over the COSBase objects. @return Iterator of COSBase objects
168 Returns an iterator over the elements in this collection. @return Iterator object for traversing the elements
169 Returns an iterator over the list of public key recipients. @return Iterator<PublicKeyRecipient> object for iterating through recipients
170 Converts internal objects list to an ArrayList. @return ArrayList containing COSBase objects
171 Converts COS objects to name strings. @return List of COS name strings
172 Converts COSString objects in list to strings. @return List of string values from COSString objects
173 Converts Boolean to COSBoolean. @param value Boolean object to convert @return COSBoolean representation of the input
174 Returns string representation of the value. @return the string representation of the value
175 Writes boolean value as PDF to output stream. @param output destination stream for writing PDF @throws IOException if an I/O error occurs
176 Writes null bytes to the specified output stream. @param output destination stream for writing null bytes @throws IOException if an I/O error occurs during writing
177 Writes byte array to output stream. @param data byte array to be written @throws IOException if an I/O error occurs
178 Returns a set of entries in the PDF dictionary. @return Set of COSName-COSBase entries representing key-value pairs
179 Checks if an entry has changed. @param oldEntry the original entry value @param newEntry the updated entry value @return true if the entries are different, false otherwise
180 Returns the number of items in the collection. @return Size of the collection as an integer
181 Retrieves item by key from the collection. @param key unique identifier for the item @return COSBase object or null if not found
182 Returns the set of keys from the underlying map. @return Set of COSName representing the keys
183 Returns the values of all entries in the collection. @return A collection containing all COSBase values
184 Adds all entries from another dictionary to this one. @param dict source dictionary whose entries are to be added
185 Checks if the map contains a mapping for the specified key. @param name the key to check @return true if the map contains the key, false otherwise
186 Splits input string into tokens based on spaces. @param s input string to be tokenized @return array of tokens split by spaces
187 Converts string to integer. @param token string representation of an integer @return parsed integer value
188 Returns string representation of FunctionType. @return concatenated string with function type
189 Sets the encryption key length. @param l key length in bits, must be 40, 128, or 256
190 Sets the starting page number. @param startPageValue 1-based page index
191 Sets the end page value. @param endPageValue 1-based end page number
192 Initializes a new BruteForceParser. @param cosDocument the COSDocument to parse @param cosParser the COSParser used for parsing @throws IOException if an I/O error occurs
193 Initializes a new XrefTrailerObj with default XRef type.
194 Manages cross-reference and trailer objects for PDF parsing.
195 Initializes PDResources with a given COSDictionary. @param resourceDictionary the dictionary containing resource data @throws IllegalArgumentException if resourceDictionary is null
196 Initializes PDResources with a dictionary and cache. @param resourceDictionary the COSDictionary containing resources @param resourceCache the ResourceCache for caching resources
197 Initializes operator map with supported operations.
198 Initializes a new PDF AcroForm. @param doc PDDocument containing the form @param form COSDictionary representing the form data
199 Returns the count of trailers. @return Number of trailer entries in the map
200 Retrieves an object from the pool by key. @param key unique identifier for the object @return COSObject if found, otherwise null
201 Parses a string to a floating-point number. @param token the string representation of the number @return the parsed float value @throws NumberFormatException if the string is not a valid float
202 Coerces a float value to handle special cases. @param floatValue input float value @return adjusted float value handling infinities and subnormal numbers
203 Determines text direction based on transformation matrix. @return Direction in degrees (0, 90, 180, 270)
204 Checks equality with another COSFloat object. @param o the object to compare @return true if equal, false otherwise
205 Returns hash code for the float value. @param value the float value to hash @return integer hash code of the float value
206 Formats numeric value as string, avoiding scientific notation. @return formatted numeric string
207 Writes "null" followed by a space to the given OutputStream. @param output the stream to write to @throws IOException if an I/O error occurs
208 Constructs a COSIncrement with an update origin. @param incrementOrigin the source of the increment information
209 Initializes a new instance of PDFCloneUtility. @param dest destination PDDocument to clone content into
210 Initializes the resource cache. @param enableStableCache flag to enable or disable stable caching
211 Checks if the update state indicates an update is needed. @return true if updated, false otherwise
212 Checks if the collection contains a given COSBase object. @param base the COSBase object to check @return true if the object is contained, false otherwise
213 Checks if the given COSBase object is in the exclusion list. @param base the COSBase object to check @return true if excluded, false otherwise
214 Adds a COSBase object to the list. @param object the COSBase object to add
215 Adds a processed COSObject to the list. @param base the COSObject to be added
216 Registers a TrueTypeFont for automatic closing. @param ttf TrueTypeFont object to be registered
217 Initializes an ASCII85 input stream. @param is the underlying input stream
218 Initializes CCITTFaxDecoderStream with given parameters. @param stream input data stream @param columns number of columns in the image @param type compression type (CCITT) @param options decoding options bitmask @param byteAligned if true, aligns bytes for decoding
219 Checks equality with another object. @param o object to compare @return true if objects are equal, false otherwise
220 Returns string representation of COSInt. @return formatted string including integer value
221 Writes a string value to an OutputStream as PDF. @param output the OutputStream to write to @throws IOException if an I/O error occurs
222 Retrieves value by key. @param key unique identifier for the value @return associated value or null if not found
223 Retrieves mapped font name. @param fontName original font name @return mapped FontName or null if not found
224 Retrieves selected export values based on field value. @return List of selected export values
225 Checks if the name is empty. @return true if name is empty, false otherwise
226 Adds a comment to the output stream. @param comment the comment to add, must not contain newlines @throws IOException if an I/O error occurs
227 Writes a newline character to the output stream. @throws IOException if an I/O error occurs
228 Converts a string to its UTF-16BE hexadecimal representation. @param text input string @return char array containing hexadecimal values
229 Retrieves the COSBase object. @return COSBase object or null if not found
230 Constructs a COSObjectKey with specified object and generation numbers. @param num the object number (must be non-negative) @param gen the generation number (must be non-negative) @param index the stream index
231 Generates hash code based on numberAndGeneration. @return hash code of the long value
232 Calculates X scaling factor considering rotation. @return Effective X scaling factor
233 Calculates Y scaling factor. @return vertical scaling factor based on array values
234 Initializes ASCII85OutputStream. @param out underlying output stream
235 Initializes a new COSStandardOutputStream. @param out underlying output stream
236 Initializes a new COSStandardOutputStream. @param out underlying output stream @param position initial position in the stream
237 Returns a copy of the internal byte array. @return A new byte array containing the same data as the internal array
238 Writes an incremental update to a PDF. @throws IOException if I/O error occurs
239 Converts byte array to ASCII string. @return ASCII representation of bytes
240 Checks if the document is accepting updates. @return true if updates are accepted, false otherwise
241 Converts byte array to string using a code-to-unicode mapping. @param bytes input byte array @return resulting string or '?' for unrecognized codes
242 Reads the next operator from the input source. @return The operator as a string, or an empty string if none is found. @throws IOException if an I/O error occurs
243 Converts a string to a byte array using a Unicode mapping. @param text the input string to convert @return byte array representing the string
244 Checks if the specified character is contained in the mapping. @param character the character to check @return true if character exists in the map, false otherwise
245 Checks if the map contains the specified key. @param key the key to check @return true if the map contains the key, false otherwise
246 Checks if a font name exists in the aliases map. @param fontName the name of the font to check @return true if the font name is found, false otherwise
247 Returns an unmodifiable map of code to name. @return Map with integer codes as keys and corresponding names as values
248 Returns an unmodifiable map of names to codes. @return Map with names as keys and codes as values
249 Throws UnsupportedOperationException as this operation is not supported.
250 Reads a byte from an Ascii85 encoded stream. @return the next byte or -1 if end of stream is reached @throws IOException if an I/O error occurs
251 Closes the resource and releases associated objects. Sets ASCII, EOF flag, and buffer to null.
252 Writes a byte to the output stream and processes it for ASCII85 encoding. @param b the byte to write @throws IOException if an I/O error occurs
253 Flushes ASCII85 encoded data to output. Handles padding, transformation, and line breaks.
254 Truncates or pads the input password to a fixed length. @param password input byte array representing the password @return byte array of fixed length with password data
255 Closes the output stream. Checks if text mode was ended; logs a warning if not. @throws IOException if an I/O error occurs while closing
256 Writes XMP metadata to an output stream. @param xmp byte array containing XMP metadata @throws IOException if I/O error occurs during write operation
257 Checks if page number should trigger a split. @param pageNumber current page index @return true if split condition is met, false otherwise
258 Throws an exception as modification is unsupported. @param sourceRegion the region to set (ignored)
259 Throws an exception as modification is not supported.
260 Throws an exception as modifications are not supported. @param ssY subsampling value to be set (not used)
261 Throws an exception as this instance is immutable. @param ssOffsetX subsampling offset value (unused)
262 Throws an exception as modification is unsupported. @param ssOffsetY subsampling offset value to be set
263 Throws an exception as JPX encoding is not implemented.
264 Throws exception as the class is immutable. @param value Y coordinate to be set (ignored)
265 Throws exception as the class is immutable. @param value upper right X coordinate to be set
266 Throws UnsupportedOperationException as the class is immutable.
267 Throws an exception as this is an immutable class. @param value the value to be set (ignored)
268 Placeholder for retrieving signature text. @return String containing the signature text @throws UnsupportedOperationException if the method is not implemented
269 Sets the signature text. @param signatureText the text to be used for signing @return this PDVisibleSignDesigner instance
270 Throws an exception as signature fields do not support setting values as strings. Use setValue(PDSignature value) instead.
271 Retrieves the compression level for Deflater. @return Compression level between -1 and 9, defaulting to DEFAULT_COMPRESSION if invalid
272 Checks if the collection contains the specified element. @param o the element to check @return true if the collection contains the element, false otherwise
273 Initializes a FlateFilterDecoderStream with an InputStream. Skips the first two bytes of the zlib header. @param inputStream source stream containing compressed data @throws IOException if an I/O error occurs
274 Closes the inflater and releases resources. @throws IOException if an I/O error occurs while closing
275 Sets the image and updates dimensions. @param image BufferedImage to be set
276 Decodes a predictor row for PNG image data. @param predictor prediction algorithm identifier @param colors number of color components per pixel @param bitsPerComponent bits per color component @param columns number of columns in the image @param actline current active line to decode @param lastline previous line used for prediction
277 Checks if the pool contains a specific COSObjectKey. @param key the COSObjectKey to check for @return true if the key is present, false otherwise
278 Checks if the map contains the specified key. @param name the key to check @return true if the key is present, false otherwise
279 Checks if the map contains a key with the specified code. @param code the key to search for in the map @return true if the key is present, false otherwise
280 Escapes XML special characters in input string. @param input original string to escape @return escaped string safe for XML use
281 Sets the bounding box for a PDF object. @param bbox PDRectangle representing the bounding box or null to remove it
282 Decodes a hexadecimal string to a byte array. @param s hexadecimal string input @return decoded byte array or empty if invalid characters found
283 Closes all resources and releases IO resources.
284 Closes the document and associated streams. Logs exceptions during closure.
285 Returns the COS object associated with the function. @return COSDictionary representing the function's COS object
286 Initializes a PDXObject with a given stream and subtype. @param stream PDF stream containing the object data @param subtype type of the XObject
287 Retrieves the underlying COSStream. @return COSStream object
288 Retrieves metadata from the PDF document. @return COSStream containing metadata or null if not present
289 Sets metadata to the COSStream. @param metadata the metadata to be set
290 Compares this annotation with another for equality. @param o the object to compare with @return true if both annotations are equal, false otherwise
291 Returns a set of keys from the underlying map. @return Set containing all keys present in the map
292 Returns a collection of all values in the map. @return Collection containing all values
293 Initializes a new instance of BaseParser with a PDF source. @param pdfSource RandomAccessRead object representing the PDF content
294 Checks if the next character in source is a digit. @return true if the next character is a digit, false otherwise @throws IOException if an I/O error occurs
295 Adds an XRef entry for a given object key and offset. @param objKey the COSObjectKey to add @param offset the file offset of the object
296 Adds a mapping from code to name and vice versa. @param code unique identifier @param name associated with the code
297 Checks if the next character in the source is a space. @return true if the next character is a space, false otherwise @throws IOException if an I/O error occurs while reading from the source
298 Determines if a line break should be skipped. @param linebreak the character code of the line break @return true if the line break is skipped, false otherwise
299 Checks for end of string indicators in PDF content. @param bracesParameter current brace count @return updated brace count or 0 if end indicator found @throws IOException on read error
300 Checks if character is end-of-line. @param c character to check @return true if character is line feed or carriage return, false otherwise
301 Reads a numeric string from the input source. @return StringBuilder containing the numeric string or empty if no digits found @throws IOException if an I/O error occurs or number exceeds MAX_LENGTH_LONG
302 Decodes a ByteArrayOutputStream to a String. @param buffer the byte array output stream to decode @return the decoded string or an alternative charset if UTF-8 fails
303 Reads and checks expected character from input. @param ec expected character to read @throws IOException if read character does not match expected
304 Checks if the next character in the source is whitespace. @return true if the next character is whitespace, false otherwise @throws IOException if an I/O error occurs while reading from the source
305 Parses startxref from PDF. @return byte offset of the first object or -1 if not found
306 Searches for the last EOF marker in the PDF file. @return Position of the last EOF marker or Long.MAX_VALUE if not found @throws IOException if an I/O error occurs
307 Searches for XRef tables in a PDF. @return List of offsets where XRef tables are found @throws IOException if an I/O error occurs
308 Retrieves the number of color components. @return number of color components, or -1 if not initialized @throws IOException if an I/O error occurs
309 Searches for XRef streams in a PDF file. @return List of offsets for XRef streams or empty list if none found
310 Retrieves the cross-reference table. @return Map of COSObjectKey to Long representing object offsets
311 Reads the startxref offset from a PDF file. @return The offset of the startxref in the file. @throws IOException If an I/O error occurs or required markers are missing.
312 Reads from stream until "endstream" or "endobj" is found. @param out stream to filter content @return length of filtered content @throws IOException if an I/O error occurs
313 Initializes a new instance of ToUnicodeWriter with mode set to 0.
314 Sets a page label range starting from a given page. @param startPage the first page number for the label (must be non-negative) @param item the PDPageLabelRange to apply from startPage onwards
315 Adds a Unicode mapping for a CID. @param cid character identifier (must be 0-65535) @param text corresponding Unicode text (cannot be null or empty)
316 Checks if there is no binary data after an 'EI' marker. @return true if no binary data, false otherwise @throws IOException if reading fails
317 Checks if the next character in the source is a space or return. @return true if next character is space or return, false otherwise @throws IOException if an I/O error occurs
318 Adds an XReferenceEntry to the stream data. @param entry the entry to add
319 Calculates the maximum width in bytes for each of three columns. @return int array with widths for first, second, and third columns
320 Initializes object pool with the highest XRef object number. @param highestXRefObjectNumber maximum XRef object number for the pool
321 Retrieves the first trailer from the map. @return COSDictionary of the first trailer or null if empty
322 Retrieves the last trailer from the byte position map. @return COSDictionary representing the last trailer or null if empty
323 Retrieves object numbers contained in a stream. @param objstmObjNr object stream number @return set of contained object numbers or null if trailer is unresolved
324 Returns the numeric value of the column type. @return long representing the numeric value of the column type
325 Retrieves the generation value from the referenced key. @return the generation value as a long
326 Returns a string representation of the FreeReference. @return formatted String with key, nextFreeObject, and type information
327 Returns the byte offset value. @return long representing the byte offset
328 Returns the generation value of the referenced key. @return long representing the generation value
329 Returns a string representation of the reference. @return String describing the reference type and details
330 Retrieves the value from the second column. @return numeric value of the parent key
331 Returns the value of the third column. @return long value representing the third column index
332 Returns string representation of ObjectStreamEntry. @return formatted String with key, type, index, and parent details
333 Writes bytes to the output stream. @param b byte array containing data to write @param off offset within the byte array @param len number of bytes to write @throws IOException if an I/O error occurs
334 Writes a single byte to output stream. @param b byte to be written @throws IOException if an I/O error occurs
335 Writes an end-of-line character if not already on a new line.
336 Checks if compression is enabled. @return true if compression parameters are set and enabled, false otherwise
337 Adds an XReferenceEntry to the list of cross-reference entries. @param entry the XReferenceEntry to be added
338 Writes object reference to the given OutputStream. @param output the OutputStream to write to @param indirectReference the COSObjectKey representing the object reference @throws IOException if an I/O error occurs during writing
339 Returns an MD5 MessageDigest instance. @return MessageDigest object for MD5 hashing
340 Returns a SHA-1 MessageDigest instance. @return SHA-1 MessageDigest object
341 Returns a SHA-256 MessageDigest instance. @return MessageDigest object for SHA-256 hashing
342 Retrieves the highest cross-reference object number. @return The highest XRef object number from the pool.
343 Returns an unmodifiable list of prepared COS object keys. @return List of COSObjectKey objects
344 Updates mapping for a code with a new name. Removes existing reverse mapping if necessary. @param code unique identifier for the mapping @param name new name associated with the code
345 Removes a region by name. @param regionName name of the region to be removed
346 Sets the maximum number of fractional digits in the decimal format. @param fractionDigitsNumber the maximum number of fractional digits
347 Initializes a content stream for a PDF document. @param document the PDDocument to write to @param outputStream the OutputStream to send the data to @param resources the PDResources for the content stream
348 Retrieves the Y component of the vertical displacement vector. @param code identifier for the vertical displacement @return Y component as a float, defaulting to dw2[1] if not found
349 Returns the standard value or default if it's null. @param standardValue the value to check @param defaultValue the fallback value @return the non-null value
350 Zooms the image by a specified percentage. @param percent zoom factor as a percentage @return PDVisibleSignDesigner instance with updated dimensions
351 Returns the width of the image. @return width in pixels
352 Returns the height of the image. @return height in pixels
353 Adjusts the sign designer for rotation. @return PDVisibleSignDesigner instance with adjusted parameters
354 Creates an AffineTransform from a 9-element array. @return AffineTransform object initialized with scaling and translation values
355 Encodes a string into a byte array using custom encoding. @param text the input string to encode @return byte array representing the encoded string @throws IOException if an I/O error occurs during encoding
356 Converts a Unicode code point to its corresponding name. @param codePoint the Unicode code point @return the name of the character or ".notdef" if not found
357 Applies GSUB rules to a word, converting it to glyph IDs and writing to output. @param gsubWorker worker for applying GSUB transformations @param out output stream to write encoded glyphs @param font font containing cmap lookup @param word input string to process @return list of glyph IDs after applying GSUB rules
358 Constructs a new PDF document. @param doc the COSDocument representing the PDF structure @param source the RandomAccessRead source of the PDF data @param permission the AccessPermission for accessing the document
359 Initializes an FDFDocument with a COSDocument and source. @param doc the underlying COSDocument @param source the source of data for the FDF document
360 Converts the list to an array. @return An array containing all elements in this list.
361 Returns the index of the specified element in this list. @param o the element to search for @return the index of the element or -1 if not found
362 Compares this object with another for equality. @param o the object to compare with @return true if equal, false otherwise
363 Returns the hash code of the actual object. @return hash code value of the actual object
364 Returns the last index of the specified element. @param o element to search for @return the last index or -1 if not found
365 Returns a list iterator over the elements in this collection. @return a ListIterator over the elements in this collection
366 Returns a list iterator over the elements in this list. @param index starting index for iteration @return ListIterator starting from the specified index
367 Returns a sublist of elements from fromIndex (inclusive) to toIndex (exclusive). @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive) @return List containing the specified range of elements
368 Checks if the map contains the specified value. @param value the value to check @return true if the value is present, false otherwise
369 Returns an unmodifiable set of entries from the actual map. @return Unmodifiable set of entries
370 Returns an unmodifiable set of alias names. @return Set of alias names
371 Returns string representation of actual values. @return String from actuals object
372 Converts a COSBase object to a COSObjectable. @param base the COSBase object to convert @return a COSObjectable instance created from the COSBase object @throws IOException if conversion fails
373 Generates a letter label based on the given number. @param num input number to convert to letters @return String representation of the letter(s)
374 Returns the count of page ranges. @return Number of page range labels
375 Retrieves page label range starting from a given page. @param startPage index of the starting page @return PDPageLabelRange object or null if not found
376 Returns sorted page indices. @return NavigableSet of Integer representing page indices
377 Returns a copy of the dash array. @return cloned float array representing dashes
378 Initializes a PDColor with components and colorspace. @param components array of color components @param colorSpace the colorspace to use
379 Returns a copy of the color components. @return float array of color components
380 Initializes a new CoordinateColorPair. @param p 2D point representing the coordinate @param c array of floats representing the color
381 Returns a string representation of FunctionType2. @return formatted string with C0, C1, and N values
382 Calculates the bounding box coordinates. @return int array with [minX, maxX, minY, maxY]
383 Removes and returns the top number from the stack. @return The top Number object or null if the stack is empty
384 Removes and returns the top integer from the stack. @return The integer value at the top of the stack
385 Removes and returns the top float value from the stack. @return the float value at the top of the stack
386 Adds a boolean value to the instructions list. @param value boolean value to be added
387 Initializes an ExecutionContext with a given set of operators. @param operatorSet the set of operators to be used in the context
388 Returns compiled patterns for list item expressions. @return List of compiled regex patterns
389 Converts an array to a string representation. @param array the array to convert @return a string with array elements separated by commas, enclosed in square brackets
390 Converts float array to string representation. @param array input float array @return comma-separated string with elements enclosed in brackets
391 Adds a TextPosition to the contents. @param text TextPosition object to be added
392 Adds marked content to the document. @param markedContent the content to be added
393 Adds an XObject to the contents list. @param xobject the XObject to be added
394 Sets printing permission. @param allowPrinting flag to enable or disable printing
395 Sets modification permission. @param allowModifications flag to enable or disable modifications
396 Sets content extraction permission. @param allowExtraction flag to enable or disable extraction
397 Sets permission to modify annotations. @param allowAnnotationModification flag indicating modification permission
398 Sets permission to fill in form. @param allowFillingInForm flag indicating if filling in the form is allowed
399 Sets permission to extract content for accessibility. @param allowExtraction flag indicating extraction permission
400 Sets permission to assemble documents. @param allowAssembly true to allow, false to disallow
401 Sets permission to print faithfully. @param canPrintFaithful flag indicating print permission
402 Checks if print permission is enabled. @return true if print permission is granted, false otherwise
403 Checks if modification permission is granted. @return true if modification is allowed, false otherwise
404 Checks if content extraction permission is enabled. @return true if extraction is allowed, false otherwise
405 Checks if annotations can be modified. @return true if modification permission is enabled, false otherwise
406 Checks if permission to fill in form is granted. @return true if permission is enabled, false otherwise
407 Checks if the extract for accessibility permission is enabled. @return true if permission is granted, false otherwise
408 Checks if document assembly permission is granted. @return true if permission is enabled, false otherwise
409 Checks if the user has permission to print faithfully. @return true if permission is granted, false otherwise
410 Retrieves a private key from the keystore. @return PrivateKey object if found, otherwise throws KeyStoreException @throws KeyStoreException if issues occur accessing or recovering the key
411 Returns a SecureRandom instance. @return customSecureRandom if set, otherwise a new SecureRandom instance
412 Sets the encryption key. @param key byte array representing the key (1 to 32 bytes)
413 Writes a byte to the output stream after applying XOR encryption. @param aByte the byte to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
414 Combines diacritic characters in a string. @param str input string with potential diacritic marks @return normalized string with combined diacritics
415 Checks if a Unicode code point is prohibited. @param codepoint Unicode code point to check @return true if the code point is prohibited, false otherwise
416 Computes version number based on key length and policy. @return computed version number
417 Returns the singleton instance of BouncyCastleProvider. @return Provider instance
418 Extracts text content from an XML node. @param node the XML element to process @return concatenated text content of the node's children
419 Writes a string to the output stream. @param text the string to be written @throws IOException if an I/O error occurs
420 Retrieves a predefined CMap by name. @param cMapName name of the CMap to retrieve @return CMap object or null if not found
421 Parses a CMap from the given input. @param randomAccessRead source of the data to parse @return CMap object or null if parsing fails
422 Generates a set of PostScript names. @param postScriptName original PostScript name @return set containing the original and hyphen-free names
423 Calculates all points on a line between two coordinates. @param x0, y0 starting point coordinates @param x1, y1 ending point coordinates @return Set of Points representing the line
424 Calculates unique points from an array. @param p array of Point2D objects @return number of unique points rounded to nearest thousandth
425 Adds font to cache. @param info font information @param font font object
426 Retrieves font from cache by info. @param info font information @return FontBoxFont object or null if not found
427 Adds a substitution pair. @param match the string to match (case-insensitive) @param replace the string to replace with
428 Retrieves font information by format and PostScript name. @param format the font format (e.g., TrueType, OpenType) @param postScriptName the PostScript name of the font @return FontInfo object if found, otherwise null
429 Retrieves substitutes for a given postscript name. @param postScriptName the original postscript name @return list of substitute names or empty list if none found
430 Retrieves the name associated with a given code. @param code unique identifier for the name @return corresponding name or ".notdef" if not found
431 Retrieves Type 2 char string for CID. @param cid character identifier @return Type2CharString object or null if not found @throws IOException if an I/O error occurs
432 Converts character code to CID. @param code character code to convert @return CID corresponding to the character code
433 Converts color components to RGB integer. @return packed RGB value or throws IOException
434 Adjusts color intensity based on backdrop and alpha factor. @param groupRGB base color value @param backdropRGB backdrop color value @param shift bit shift for color channel extraction @param alphaFactor blending factor @return adjusted color intensity clamped between 0 and 255
435 Returns a subset of data from the byte array. @return byte array containing the specified range of data
436 Retrieves the Adobe glyph list. @return GlyphList object containing Adobe glyphs
437 Extracts and initializes cmap tables for different platforms. Initializes cmapWinUnicode, cmapWinSymbol, and cmapMacRoman based on platform and encoding.
438 Checks if font embedding is permitted. @param ttf TrueTypeFont object to check @return true if embedding is allowed, false otherwise
439 Checks if subsetting is permitted for a TrueTypeFont. @param ttf the TrueTypeFont to check @return true if subsetting is allowed, false otherwise
440 Converts a string to its corresponding Unicode representation. @param name the input string to convert @return Unicode character or null if conversion fails
441 Initializes a PDColor with components, pattern name, and color space. @param components color components array @param patternName name of the pattern @param colorSpace associated color space
442 Converts WritableRaster to BufferedImage. @param raster pixel data for the image @param awtColorSpace color space for the image @return BufferedImage created from raster and color space
443 Converts a WritableRaster to an RGB BufferedImage using the specified ColorSpace. @param raster source image data @param colorSpace desired color space for conversion @return RGB BufferedImage
444 Checks if the ICC profile is sRGB. @param profile ICC_Profile object to check @return true if profile is sRGB, false otherwise
445 Returns the type of color space. @return Color space type or -1 if unknown
446 Initializes a PredictorEncoder with a document and image. @param document PDF document to encode @param image BufferedImage to be encoded
447 Scales an image to a specified size. @param image the original BufferedImage @param width new width of the image @param height new height of the image @param type image type (e.g., TYPE_INT_ARGB) @param interpolate true for smooth scaling, false for nearest neighbor @return scaled BufferedImage
448 Retrieves the underlying COS dictionary. @return COSDictionary instance
449 Sets corner colors. @param color 2D array of colors for corners
450 Returns the current clipping path as a single Area. @return Combined Area object representing all clipping paths or cached result
451 Constructs a TextAttribute with the specified name. @param name unique identifier for the text attribute
452 Generates hash code based on dictionary content. @return hash code of the dictionary
453 Returns an affine transform matrix for translation. @return AffineTransform object translating by -bboxMinX and -bboxMinY
454 Computes parameters for a polygon segment. @param advInterm length of intermediate curls @param advCorner length of corner curls @param k curvature factor @param r radius of curvature @param length total length of the polygon segment @param array output: angle and fitting error per half curl @return number of intermediate curls or -1 if length is zero
455 Converts ellipse boundary to a flattened array of points. @param left x-coordinate of the left edge @param bottom y-coordinate of the bottom edge @param right x-coordinate of the right edge @param top y-coordinate of the top edge @return Array of Point2D.Double representing the ellipse's boundary
456 Checks if the given path is rectangular. @param path GeneralPath object representing a shape @return true if the path forms a rectangle, false otherwise
457 Returns the height of the template. @return page height as a float
458 Sets sign coordinates. @param x horizontal position @param y vertical position @return PDVisibleSignDesigner instance
459 Applies an affine transformation to the sign designer. @param affineTransform the transformation to apply @return the transformed PDVisibleSignDesigner instance
460 Ensures a node has no siblings. @param node the PDOutlineItem to check
461 Returns an iterator over child outline items. @return Iterable of PDOutlineItem objects
462 Applies rendering hints to graphics. @param renderingHints configuration for rendering quality
463 Adjusts clip path based on graphics transform. @param linePath original path to adjust @return adjusted path or original if no changes needed
464 Calculates subsampling factor for an image based on transformation and dimensions. @param pdImage the PDF image object @param at the affine transform applied to the image @return calculated subsampling factor, clamped between 1 and 8
465 Rounds a double up to the nearest integer. @param num number to round @return rounded integer value
466 Calculates X-axis rotation based on given angle. @param rotation angle of rotation in degrees @return calculated X-axis translation
467 Calculates the y-coordinate of the lower-left corner after rotation. @param rotation angle in degrees (0, 90, 180, 270) @return y-coordinate based on rotation
468 Calculates the width of a rotated element. @param rotation angle of rotation in degrees @return absolute width based on rotation
469 Writes characters from TextPosition to output. @param text TextPosition containing Unicode characters @throws IOException if an I/O error occurs
470 Returns the Unicode representation of the object. @return Unicode string
471 Retrieves text associated with a region. @param regionName name of the region @return text string for the specified region or empty if not found
472 Starts article output. @param isLTR true if text direction is left-to-right @throws IOException if an I/O error occurs
473 Writes article end tag to output. @throws IOException if an I/O error occurs
474 Writes a line separator to the output stream. @throws IOException if an I/O error occurs
475 Writes word separator to output. @throws IOException if an I/O error occurs
476 Starts a new paragraph. Ends current paragraph if one is open. @throws IOException if an I/O error occurs
477 Writes the start of a page to the output. @throws IOException if an I/O error occurs
478 Writes the end of the page to the output. @throws IOException if an I/O error occurs
479 Handles text direction and mirroring for a given word. @param word input string to process @return processed string with correct direction and mirrored characters
480 Parses a BIDI file and populates the MIRRORING_CHAR_MAP. @param inputStream input stream containing BIDI data @throws IOException if an I/O error occurs
481 Checks and reverses Unicode string if it contains RTL characters. @return Reversed string if RTL characters are present, otherwise original string
482 Processes text position within defined regions. @param text TextPosition object to process
483 Checks if a character is a diacritic. @return true if the character is a diacritic, false otherwise
484 Updates the TimeZone ID based on its raw offset. @param tz TimeZone object to update
485 Converts byte to hex string. @param b input byte @return two-character hex representation of the byte
486 Converts byte array to hexadecimal string. @param bytes input byte array @return hexadecimal representation of the byte array
487 Converts a single byte to its hexadecimal byte representation. @param b input byte @return byte array containing high and low nibble as hex bytes
488 Converts byte array to ASCII representation. @param bytes input byte array @return ASCII byte array representing input bytes in hexadecimal format
489 Writes a byte as two hexadecimal characters to the output stream. @param b byte to be written @param output OutputStream to write to @throws IOException if an I/O error occurs
490 Decodes a Base64 encoded string. @param base64Value Base64 encoded string with optional spaces @return Decoded byte array or empty if input is invalid
491 Initializes a Matrix from an AffineTransform. @param at the AffineTransform to convert
492 Transforms a 2D point using a transformation matrix. @param point the Point2D object to be transformed
493 Formats a float value into an ASCII buffer. @param value the float to format @param maxFractionDigits maximum number of fraction digits @param asciiBuffer buffer to store formatted result @return length of formatted string or -1 if formatting fails
494 Retrieves the PDFBox version. @return Version string or null if not found
495 Parses XML input stream into a Document. @param is input stream containing XML data @param nsAware true to enable namespace awareness @return parsed Document object @throws IOException if parsing fails
496 Searches for a value by byte array key in a trie. @param bytes the byte array representing the key @return the associated value or null if not found
497 Constructs a COSBoolean with the specified boolean value. @param aValue the boolean value to set
498 Constructs a COSName with the given name. @param aName the name of the COSName
499 Private constructor to restrict instantiation.
500 Constructs a COSString from byte array. @param bytes input byte array @param forceHex true to force hexadecimal representation
501 Initializes a new COSDictionary with an update state.
502 Initializes a COSObject with a given base object. @param object the COSBase object to encapsulate
503 Initializes a COSObject with a base object and parser. @param object the underlying COSBase object @param parser the ICOSParser instance
504 Initializes a COSObject with a given key and parser. @param key unique identifier for the COSObject @param parser used to parse the object
505 Initializes DecodeOptions with specified rectangle dimensions. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height
506 Initializes a free XReference. @param key object key for the XReference @param nextFreeObject reference to the next free object
507 Initializes an ObjectStreamXReference. @param objectStreamIndex index in the object stream @param key unique identifier for the COSObject @param object underlying COSBase object @param parentKey key of the parent COSObject
508 Constructs a new instance with caching enabled.
509 Initializes a new instance with the given COSDictionary. @param dictionary the underlying COSDictionary to wrap
510 Initializes a PDAttributeObject with a given COSDictionary. @param dictionary the COSDictionary to initialize with
511 Initializes a new PDUserProperty with given dictionary and attribute object. @param dictionary COSDictionary containing user properties @param userAttributeObject PDUserAttributeObject associated with the user
512 Constructs a PDOutlineNode from a COSDictionary. @param dict dictionary representing the outline node
513 Constructs a PDTransition from a COSDictionary. @param dictionary underlying COSDictionary
514 Constructs a PDDestinationNameTreeNode from a dictionary. @param dic dictionary containing node data
515 Constructs a PDEmbeddedFilesNameTreeNode from a dictionary. @param dic the COSDictionary to initialize with
516 Constructs a PDJavascriptNameTreeNode from a dictionary. @param dic COSDictionary containing node data
517 Constructs a PDStructureElementNameTreeNode from a dictionary. @param dic COSDictionary representing the node's data
518 Creates a child node with the given dictionary. @param dic dictionary to initialize the node @return PDNumberTreeNode instance initialized with the dictionary and valueType
519 Constructs a PDMetadata object from a COSStream. @param str the COSStream to initialize the metadata with
520 Constructs a PDObjectStream from a COSStream. @param str COS stream to be wrapped
521 Constructs a PDEmbeddedFile from a COSStream. @param str COS stream containing embedded file data
522 Initializes a PDFunction with a given COSBase. @param function the COSBase object representing the function
523 Initializes a PDXObject with a given stream and subtype. @param stream the underlying COSStream @param subtype the subtype of the XObject
524 Initializes a new instance with a specified file name. @param fileName the name of the file as a COSString
525 Constructs a PDStructureElement from a COSDictionary. @param dic dictionary representing the structure element
526 Constructs a PDStructureTreeRoot from a COSDictionary. @param dic dictionary representing the structure tree root
527 Initializes decryption material with a password. @param pwd encryption password
528 Default constructor for PublicKeyProtectionPolicy.
529 Constructs a new StandardProtectionPolicy. @param ownerPassword password for owner access @param userPassword password for user access @param permissions access permissions settings
530 Constructor for SecurityHandler.
531 Constructs an FDF annotation caret from a COS dictionary. @param a COS dictionary representing the annotation
532 Constructs a FDF annotation circle from a COS dictionary. @param a COS dictionary containing annotation properties
533 Constructs an FDFAnnotationFileAttachment from a COSDictionary. @param a dictionary representing the annotation
534 Constructs a FDFAnnotationFreeText from a COSDictionary. @param a dictionary representing the annotation
535 Constructs an FDF annotation ink from a COS dictionary. @param a COS dictionary representing the annotation
536 Constructs an FDF annotation line from a COS dictionary. @param a COS dictionary representing the annotation
537 Constructs an FDFAnnotationLink from a COSDictionary. @param a dictionary representing the annotation link
538 Constructs a polygon annotation from a COS dictionary. @param a dictionary containing annotation properties
539 Constructs a new FDFAnnotationPolyline from a COSDictionary. @param a dictionary containing annotation properties
540 Constructs an FDF annotation sound. @param a COSDictionary containing sound properties
541 Constructs a square annotation from a COS dictionary. @param a COS dictionary representing the annotation
542 Constructs a stamp annotation from a COS dictionary. @param a the COS dictionary representing the annotation
543 Constructs an FDFAnnotationText from a COSDictionary. @param a dictionary containing annotation properties
544 Constructs a text markup annotation from a COS dictionary. @param a COS dictionary representing the annotation
545 Retrieves Panose classification from byte array. @return PDPanoseClassification object containing font classification data
546 Creates a Composite instance based on blend mode and alpha. @param blendMode blending mode to apply @param constantAlpha opacity level (0-1) @return Composite object for rendering
547 Retrieves the transparency group attributes. @return PDTransparencyGroupAttributes object or null if not found
548 Creates a new PDShadingPattern from a COSDictionary. @param resourceDictionary dictionary containing shading pattern details
549 Constructs a PDTilingPattern from a COSDictionary and a ResourceCache. @param dictionary PDF dictionary containing tiling pattern information @param resourceCache cache for resources used in the pattern
550 Constructs a PDShadingType1 from a COSDictionary. @param shadingDictionary dictionary containing shading details
551 Constructs a PDShadingType2 from a COSDictionary. @param shadingDictionary PDF dictionary containing shading details
552 Constructs an axial shading paint. @param shadingType2 the shading type @param matrix transformation matrix for the shading
553 Constructs a RadialShadingPaint object. @param shading PDShadingType3 instance representing radial shading @param matrix transformation matrix for the shading
554 Constructs a Type1ShadingPaint. @param shading PDShadingType1 object representing the shading @param matrix transformation matrix for the paint
555 Constructs a Type4ShadingPaint. @param shading PDShadingType4 object representing the shading @param matrix transformation matrix for the shading
556 Constructs a Type5ShadingPaint. @param shading PDShadingType5 object representing the shading @param matrix transformation matrix for the shading
557 Constructs a new Type6ShadingPaint. @param shading PDShadingType6 object representing the shading pattern @param matrix transformation matrix for the shading
558 Constructs a Type7ShadingPaint object. @param shading PDShadingType7 instance representing the shading @param matrix transformation matrix for the shading
559 Constructs a PDExtendedGraphicsState from a COSDictionary. @param dictionary the graphics state dictionary
560 Constructs a PDSoftMask from a COSDictionary. @param dictionary the COSDictionary containing mask information
561 Constructs a PlainText object from a given text value. @param textValue the input text to be processed
562 Constructs a PDActionEmbeddedGoTo from a COS dictionary. @param a the COS dictionary
563 Constructs a PDActionGoTo from a dictionary. @param a the COS dictionary representing the action
564 Constructs a PDActionHide from a COSDictionary. @param a dictionary representing the action
565 Constructs a PDActionImportData instance. @param a COSDictionary containing action data
566 Constructs a PDActionJavaScript from an existing dictionary. @param a COSDictionary representing the action
567 Constructs a PDActionLaunch from a dictionary. @param a the COS dictionary representing the action
568 Constructs a PDActionMovie from a COSDictionary. @param a dictionary containing movie action details
569 Constructs a PDActionNamed from a COSDictionary. @param a dictionary representing the action
570 Creates a new PDActionRemoteGoTo from a dictionary. @param a COSDictionary containing action properties
571 Constructs a PDActionResetForm from a COSDictionary. @param a dictionary representing the action
572 Constructs a PDActionSound from a COSDictionary. @param a COSDictionary representing the sound action
573 Constructs a PDActionSubmitForm from a COSDictionary. @param a dictionary containing action attributes
574 Constructs a PDActionThread from a COSDictionary. @param a dictionary containing action data
575 Constructs a PDActionURI from a COSDictionary. @param a dictionary representing the URI action
576 Initializes a PDVisibleSigBuilder with a new PDF structure.
577 Constructs a named destination with a given string. @param dest the name of the destination as a COSString
578 Constructs a named destination with the specified name. @param dest the name of the destination
579 Constructs an empty named destination.
580 Initializes a new PDPageDestination from a COSArray. @param arr the underlying COSArray representing the destination
581 Constructs a non-terminal PDF form field. @param acroForm parent AcroForm containing the field @param field dictionary representing the field @param parent parent non-terminal field
582 Constructs a PDTerminalField. @param acroForm the form containing this field @param field the dictionary representing this field @param parent the parent field if any
583 Initializes a new instance of PDRectlinearMeasureDictionary. @param dictionary underlying COSDictionary
584 Creates a deep copy of the matrix. @return A new Matrix object with cloned data
585 Creates a scaling matrix. @param x scale factor on X-axis @param y scale factor on Y-axis @return Matrix object representing the scaling transformation
586 Creates a translation matrix. @param x horizontal translation @param y vertical translation @return Matrix representing the translation
587 Creates a rotation matrix with translation. @param theta angle of rotation in radians @param tx horizontal translation @param ty vertical translation @return Rotation matrix with translation applied
588 Transforms a 2D vector using a given transformation matrix. @param vector the input vector to be transformed @return the transformed vector
589 Scales vector by a factor. @param sxy scaling factor for both x and y components @return new Vector with scaled components
590 Initializes the MacExpertEncoding by adding entries from a table.
591 Initializes MacRomanEncoding with entries from a table.
592 Initializes the standard encoding by populating a map.
593 Initializes symbol encoding by populating internal map.
594 Constructs a new instance of Type1Encoding.
595 Initializes encoding with character metrics. @param fontMetrics FontMetrics object containing character data
596 Initializes WinAnsiEncoding with standard and default mappings.
597 Initializes the ZapfDingbats encoding by populating character mappings.
598 Returns a field tree for the document. @return PDFieldTree object representing the document's fields
599 Retrieves an object by index. @param index position of the object in the list @return object at the specified index or throws IndexOutOfBoundsException if invalid
600 Returns the number of objects in the collection. @return size of the object collection
601 Retrieves the revision number at the specified index. @param index position of the revision number in the list @return revision number at the given index
602 Parses PNG chunks from image data. @param imageData byte array containing PNG data @return PNGConverterState object or null if parsing fails
603 Returns an Encoding instance based on the provided COSName. @param name the encoding type as a COSName @return Encoding object or null if not recognized
604 Creates a PDSoftMask from a given COSBase. @param dictionary the COSBase dictionary or name @param resourceCache the ResourceCache instance @return PDSoftMask object or null if invalid
605 Returns the index of the first selected annotation widget. @return Index of the selected widget or -1 if none is selected
606 Adds a file source to the system. @param source path to the file @throws FileNotFoundException if the file is not found
607 Parses the PDF trailer and updates the XRef resolver. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs
608 Retrieves an object from the pool by its key. @param key unique identifier of the object @return COSBase object or null if not found
609 Executes a sequence of instructions within the given context. @param context execution environment containing operators and stack
610 Retrieves the current text line matrix. @return Matrix representing the current text line transformation
611 Sets the text line matrix in graphics state. @param value new text line matrix to apply
612 Retrieves the current text matrix. @return Text matrix representing transformation applied to text
613 Sets the text matrix in the graphics state. @param value the new text matrix to apply
614 Transforms width based on current transformation matrix. @param width original width value @return transformed width accounting for scaling and shearing
615 Retrieves the non-stroking color from graphics state. @return PDColor object representing the current non-stroking color
616 Sets the non-stroking color in the graphics context. @param color PDColor object representing the new color
617 Retrieves the non-stroking color space from the graphics state. @return PDColorSpace object representing the current non-stroking color space
618 Retrieves the stroking color from the graphics state. @return PDColor object representing the current stroking color
619 Sets the stroking color in the graphics state. @param color PDColor object to set as the stroking color
620 Retrieves the current stroking color space from the graphics state. @return PDColorSpace object representing the stroking color space
621 Creates a raw input stream for reading. @throws IOException if I/O error occurs or no data has been written
622 Finds an image reader for the specified format. @param formatName name of the image format @param errorCause reason for failure to find a reader @return ImageReader instance if found, throws MissingImageReaderException otherwise
623 Finds an ImageReader capable of reading raster images for a given format. @param formatName the name of the image format @param errorCause additional information about the error @return an ImageReader that can read rasters @throws MissingImageReaderException if no suitable reader is found
624 Retrieves or creates an Operator instance based on the given name. @param operator operator name as a String @return Operator object corresponding to the name
625 Returns string representation of COSArrayList. @return formatted string including internal array details
626 Checks if an edge is a line based on control points. @param ctl array of control points @return true if edge is a line, false otherwise
627 Retrieves the x-coordinate of the lower-left corner. @return float value representing the x-coordinate
628 Retrieves the y-coordinate of the lower-left corner. @return y-coordinate value as a float
629 Retrieves the X-coordinate of the upper-right corner. @return float value representing the X-coordinate
630 Retrieves the y-coordinate of the upper-right corner. @return y-coordinate as a float
631 Retrieves font size from font settings. @return font size as a float value
632 Retrieves the first value as a float. @return The float value of the first element in values list.
633 Retrieves the second value as a float. @return float value of the second item in values list
634 Returns the third value as a float. @return float representation of the third value
635 Returns the X coordinate value. @return float representing the X coordinate
636 Retrieves the Y coordinate value. @return Y coordinate as a float
637 Retrieves the Z coordinate value. @return Z coordinate as a float
638 Retrieves an integer from the list at the specified index. @param index position of the element to retrieve @param defaultValue value to return if element is not a COSNumber or out of bounds @return integer value of the element or default value
639 Retrieves name from list by index. @param index position in the list @param defaultValue default value if index is out of bounds or not a COSName @return name as String or defaultValue
640 Finds the index of a given COSBase object. @param object the COSBase object to search for @return index of the object or -1 if not found
641 Retrieves a list of filters. @return List of Filter objects @throws IOException if an invalid type is found in the filter array
642 Evaluates input using exponential interpolation. @param input array of floats, first element used for exponentiation @return interpolated float array clipped to range
643 Retrieves a list of filters from the stream. @return List of COSName filters or empty list if none found
644 Retrieves file filters from a PDF stream. @return List of filter names or empty list if none found
645 Writes a COSBoolean to the output stream. @param output target OutputStream for writing @param cosBoolean COSBoolean object to write @throws IOException if an I/O error occurs
646 Writes text to output stream in ASCII encoding. @param text string to be written @throws IOException if an I/O error occurs
647 Notifies of user property change if entries differ. @param oldEntry previous entry value @param newEntry current entry value
648 Returns the number of key-value mappings in this map. @return the number of entries in the map
649 Retrieves a COSObject by key. @param key the key to look up @return COSObject if found, otherwise null
650 Retrieves item by two keys. @param firstKey primary key to search @param secondKey secondary key if first not found @return COSBase object or null if both keys are invalid
651 Returns the number of recipients in the dictionary. @return size of the recipients array
652 Retrieves recipient string at specified index. @param i index of the recipient in the recipients list @return COSString representing the recipient or null if index is out of bounds
653 Retrieves the direction property. @return COSBase object representing direction or COSInteger.ZERO if not set
654 Retrieves metadata keys from a PDF document. @return Sorted set of metadata keys
655 Retrieves attribute names from COS object. @return List of attribute names excluding 'O'
656 Adds trailer info to the stream. @param trailerDict dictionary containing trailer information
657 Creates a new COSDictionary by copying entries from another dictionary. @param dict The source dictionary to copy entries from
658 Checks if a dictionary contains document info keys. @param dictionary PDF COSDictionary to check @return true if dictionary contains document info keys, false otherwise
659 Checks if dictionary contains width keys. @return true if WIDTHS or MISSING_WIDTH is present
660 Checks if the dictionary contains a missing width attribute. @return true if missing width is present, false otherwise
661 Checks if the PDF document contains XFA. @return true if XFA is present, false otherwise
662 Initializes XrefParser with a COSParser. @param cosParser the parser to be used for parsing
663 Returns string representation of COSFloat. @return formatted string with float value
664 Writes formatted string to PDF. @param output stream to write PDF content @throws IOException if writing fails
665 Writes a COSArray to the output stream. @param output the OutputStream to write to @param cosArray the COSArray to be written @throws IOException if an I/O error occurs
666 Creates and returns a new COSIncrement instance. @param updateInfo information used for incrementing @return COSIncrement object initialized with updateInfo
667 Initializes LayerUtility with a target document. @param targetDoc the PDDocument to manipulate
668 Constructs a new DefaultResourceCache with default settings. @param enableCaching whether to enable caching functionality
669 Checks if a COSBase object needs to be updated. @param base the COSBase object to check @return true if it needs update, false otherwise
670 Writes FDF document to output. @param doc FDFDocument to write @throws IOException if I/O error occurs
671 Writes a COSInteger to an OutputStream. @param output the OutputStream to write to @param cosInteger the COSInteger to write @throws IOException if an I/O error occurs
672 Retrieves object at specified index, resolving COSObject references. @param index position of the object in the list @return resolved COSBase object or null if it's a COSNull
673 Finds the index of a given object in the list. @param object the COSBase object to search for @return index of the object or -1 if not found
674 Checks if the map contains a specified value or its wrapped object. @param value the value to search for @return true if the value is found, false otherwise
675 Retrieves the key associated with a given value in the map. @param value the value to search for @return COSName key or null if not found
676 Retrieves an object from the dictionary by key. @param key the key for the desired object @return the COSBase object or null if not found or is COSNull
677 Retrieves the linearized dictionary from the PDF. @return COSDictionary object or null if not found
678 Closes all open streams and resources. Throws the first encountered IOException.
679 Accepts a visitor to process the PDF object. @param visitor ICOSVisitor instance for processing @throws IOException if an I/O error occurs during processing
680 Checks if the given value directly references its parent. @param parent the parent COSBase object @param value the COSBase object to check for self-reference @return true if there is a self-reference, false otherwise
681 Retrieves the length as a COSNumber from a given base object. @param lengthBaseObj the base object containing or referencing the length @return the COSNumber representing the length, or null if not found @throws IOException if there's an error processing the object
682 Constructs a NormalXReference. @param byteOffset offset in the file @param key unique object key @param object associated COSBase object
683 Retrieves the key for a given COSBase object. @param object the COSBase object to find the key for @return COSObjectKey associated with the object, or null if not found
684 Checks if the pool contains the specified COSBase object. @param object the COSBase object to check @return true if the object is in the pool, false otherwise
685 Prepares a stream object for processing. @param key unique identifier for the object @param object the COSBase object to be processed
686 Constructs a COSObjectKey with specified number and generation. @param num object number @param gen object generation
687 Compares this entry with another based on referenced key. @param xReferenceEntry the other XReferenceEntry to compare @return negative if less, positive if greater, zero if equal
688 Retrieves the horizontal scaling factor. @return The X-axis scaling factor as a float.
689 Retrieves the vertical scaling factor. @return Y-axis scaling factor as a float
690 Creates a raw output stream for writing. Throws IllegalStateException if already writing or closed. Updates LENGTH field upon closing the stream.
691 Initializes COSWriter with output stream and compression parameters. @param outputStream destination for writing data @param compressParameters configuration for data compression
692 Initializes a COSWriter with output and input streams. @param outputStream destination for writing data @param inputData source of input data @throws IOException if an I/O error occurs
693 Updates the status of a component. @param updated boolean indicating whether the component is updated
694 Converts byte array to string using UTF-16BE or PDFDocEncoding. @return String representation of bytes
695 Constructs a COSString from text with optional hexadecimal encoding. @param text the input string to encode @param forceHex if true, forces hexadecimal encoding regardless of content
696 Checks if the font is part of the Adobe Standard 14 fonts. @return true if it's a Standard 14 font, false otherwise
697 Reads bytes from the input stream into a buffer. @param data byte array to store read data @param offset starting index in the data array @param len number of bytes to read @return actual number of bytes read or -1 if end of stream @throws IOException if an I/O error occurs
698 Closes the stream, flushing any buffered output.
699 Reads the next byte from the input stream. @return the next byte as an integer, or -1 if end of stream is reached @throws IOException if an I/O error occurs
700 Reads data from the input stream into a byte array. @param data destination buffer @param offset start position in the buffer @param length maximum number of bytes to read @return number of bytes actually read, or -1 if end of stream is reached @throws IOException if an I/O error occurs
701 Reads an image from the input stream and sets it. @param stream InputStream containing image data @throws IOException if reading fails
702 Encodes input stream data using LZW compression. @param rawData the raw input data stream to encode @param encoded the output stream for encoded data @param parameters encoding parameters (not used)
703 Selects the best data row for writing based on compression estimates. @return byte array of the selected row with highest compression estimate
704 Converts COSName to corresponding RenderState. @param state COSName representing the render state @return RenderState object or null if state is null
705 Converts COSName to corresponding BaseState. @param state COSName representing the state @return BaseState object or ON if state is null
706 Closes all resources and documents. Ensures all overlays and open documents are properly closed and cleared.
707 Constructs a PDFormXObject from a given stream. @param stream PDF stream containing form data
708 Initializes a PDF stream parser. @param pdContentstream content stream to parse @throws IOException if an I/O error occurs
709 Initializes a PDF stream parser with byte array. @param bytes PDF content as a byte array
710 Parses a PDF object by number. @param objectNumber the object's identifier @return COSBase object or null if not found @throws IOException on I/O errors
711 Reads object numbers from a source. @return Map of object IDs to their counts @throws IOException if an I/O error occurs
712 Skips leading whitespaces and line breaks in the input source. @throws IOException if an I/O error occurs
713 Skips a line break character in the input. @return true if a line break is skipped, false otherwise
714 Reads a line from the input source. @return the read line as String, or throws IOException on EOF
715 Skips whitespace and comments in the input source. @throws IOException if an I/O error occurs
716 Searches for the nearest cross-reference offset. @param xrefOffset target offset to search for @return nearest offset found, or -1 if none found
717 Parses the PDF header. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs
718 Parses FDF header. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs
719 Parses all objects from a PDF source. @return Map of COSObjectKey to COSBase representing parsed objects @throws IOException if an I/O error occurs during parsing
720 Calculates the final encryption key. @param objectNumber PDF object number @param genNumber generation number @return derived encryption key bytes
721 Initializes a new PD Appearances content stream. @param appearance PDF appearance stream @param outputStream output stream to write to
722 Constructs a content stream for an appearance stream. @param doc PDF document containing the appearance @param appearance appearance stream to write to @param outputStream output stream for the content
723 Transforms a point using the current transformation matrix. @param x original x-coordinate @param y original y-coordinate @return transformed Point2D.Float object
724 Creates a PaintContext with applied pattern transformation. @param cm ColorModel for the context @param deviceBounds device space bounding box @param userBounds user space bounding box @param xform current AffineTransform @param hints rendering hints @return PaintContext with pattern applied
725 Concatenates this matrix with another. @param matrix the other Matrix to concatenate
726 Applies translation to a 3x3 transformation matrix. @param tx horizontal translation factor @param ty vertical translation factor
727 Scales the matrix by given factors. @param sx scale factor for x-axis @param sy scale factor for y-axis
728 Multiplies this matrix by another. @param other the matrix to multiply with @return a new Matrix representing the product
729 Creates a PDF document. @return new PDDocument instance @throws IOException if there is an error creating the document
730 Constructs a PDDocument from a COSDocument and source. @param doc COSDocument to use @param source RandomAccessRead source of the document
731 Creates a SecurityHandler for a given ProtectionPolicy. @param policy the ProtectionPolicy to handle @return SecurityHandler instance or null if no handler is found
732 Creates a new SecurityHandler for a given filter name. @param name the name of the security filter @return SecurityHandler instance or null if not found
733 Sets stroking color on demand. @param color PDColor object to be set @return true if color is successfully set, false otherwise
734 Sets non-stroking color on demand. @param color PDColor object to be set @return true if color is successfully set, false otherwise @throws IOException if an I/O error occurs
735 Checks if the user has all owner permissions. @return true if all owner permissions are granted, false otherwise
736 Checks if any revision 3 permissions are set. @return true if any permission is granted, false otherwise
737 Writes byte array to output stream. @param data byte array to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
738 Writes a portion of a byte array to an OutputStream. @param data the source byte array @param offset starting index in the byte array @param len number of bytes to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
739 Inserts a diacritic at a specified position in the text. @param i index where to insert the diacritic @param diacritic TextPosition object representing the diacritic
740 Initializes a Line object with two points and their colors. @param p0 starting Point of the line @param p1 ending Point of the line @param c0 color array for point0 @param c1 color array for point1
741 Initializes a SoftMask with specified parameters. @param paint the painting object @param mask the alpha mask image @param bboxDevice the device bounding box @param backdropColor the background color @param transferFunction the color transfer function
742 Removes a backdrop from an image by adjusting pixel colors. @param backdrop the backdrop image to remove @param offsetX horizontal offset of backdrop relative to groupImage @param offsetY vertical offset of backdrop relative to groupImage
743 Retrieves FontMetrics for a given font name. @param fontName the name of the font @return FontMetrics object or null if not found
744 Initializes glyph list from input stream. @param input InputStream containing glyph data @param numberOfEntries Expected number of entries in the list @throws IOException if an I/O error occurs
745 Creates a GlyphList by copying from another GlyphList and loading additional data from an InputStream. @param glyphList existing GlyphList to copy mappings from @param input stream containing additional glyph data @throws IOException if there is an error reading the input stream
746 Converts a character code to a glyph ID. @param code character encoding code @return glyph ID or 0 if not found @throws IOException if an I/O error occurs
747 Retrieves the font representation of a given name. @param name the original character name @return the font name or ".notdef" if not found @throws IOException if an I/O error occurs
748 Retrieves the font name for a given character. @param name character to find in font @return font name or ".notdef" if not found @throws IOException if an I/O error occurs
749 Initializes a PDJPXColorSpace with the given AWT ColorSpace. @param colorSpace AWT ColorSpace to be used
750 Initializes CMYK color conversion settings. @throws IOException if default CMYK profile cannot be loaded
751 Applies a mask to an image. @param image source image @param mask mask image @param interpolateMask true for smooth scaling @param isSoft true if soft mask effect is applied @param matte color adjustment array @return masked image
752 Initializes a cubic Bezier curve with given control points. @param ctrlPnts array of 4 control points defining the curve @param l recursion level for curve approximation
753 Checks if a point is within a polygon. @param p Point to check @return true if point is inside or on the boundary of the polygon, false otherwise
754 Calculates color at a given point using different interpolation methods. @param p the Point2D where color is calculated @return float array representing the color components
755 Intersects current clipping path with another. @param path the path to intersect with
756 Intersects the current clipping path with another area. @param area the area to intersect with the clipping path
757 Transfers the current clipping path to a Graphics2D object. @param graphics the Graphics2D object to apply the clipping path to
758 Draws a tiling pattern using the provided parameters. @param g Graphics2D context for drawing @param pattern PDTilingPattern to be drawn @param colorSpace PDColorSpace used for coloring @param color PDColor for the pattern @param patternMatrix Matrix defining the transformation of the pattern @throws IOException if an I/O error occurs during processing
759 Returns adjusted X direction based on rotation. @return Adjusted X direction value
760 Initializes a TextPosition object with text metrics and font details. @param pageRotation rotation of the page in degrees @param pageWidth width of the page @param pageHeight height of the page @param textMatrix transformation matrix for text positioning @param endX ending X coordinate of the text @param endY ending Y coordinate of the text @param maxHeight maximum height of the text @param individualWidth width of an individual character @param spaceWidth width of a space character @param unicode Unicode string representation of the text @param charCodes array of character codes @param font PDFont object representing the font @param fontSize size of the font @param fontSizeInPt font size in points
761 Adjusts Y direction based on page orientation. @return adjusted Y coordinate
762 Returns the width of an object considering its rotation. @param rotation angle in degrees @return width adjusted for rotation
763 Returns adjusted width based on direction. @return Adjusted width value
764 Starts an article with default settings. @throws IOException if an I/O error occurs
765 Writes the end of a paragraph. Ensures a paragraph start is written if not already in one. Sets `inParagraph` to false after writing.
766 Normalizes a word by handling specific Unicode ranges and font issues. @param word the input string to normalize @return normalized string with corrections for certain Unicode characters
767 Converts Calendar to formatted date string. @param cal Calendar object to convert @return Formatted date string or null if calendar is null
768 Converts Calendar to ISO 8601 formatted string. @param cal Calendar instance to convert @return ISO 8601 formatted date-time string
769 Converts byte array to hexadecimal string. @return Hexadecimal representation of bytes
770 Writes CMS signature to PDF. @param cmsSignature byte array of the CMS signature @throws IOException if writing fails or space is insufficient
771 Writes the name as a PDF object to the given output stream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
772 Writes byte array as hex to output stream. @param bytes array of bytes to convert and write @param output the OutputStream to write to @throws IOException if an I/O error occurs
773 Parses an InputStream into a Document. @param is input stream containing XML data @return parsed Document object @throws IOException if an I/O error occurs
774 Detects file type from input stream. @param inputStream stream containing file data @return FileType object or null if undetectable @throws IOException if stream does not support mark/reset or ends prematurely
775 Initializes LegacyPDFStreamEngine with various PDF operators.
776 Retrieves or creates a PDF COSName from the given string. @param aName the name string to convert to COSName @return the corresponding COSName object
777 Constructs a COSFloat with the given float value. @param aFloat the float value to be stored
778 Constructs a COSFloat with numeric and string representations. @param aFloat numeric value of the float @param valueString string representation of the float
779 Constructs a COSFloat from a string. @param aFloat string representation of the float @throws IOException if parsing fails
780 Constructs a COSInteger with a specified value and validity. @param val the integer value @param valid indicates if the value is valid
781 Constructs a COSString from byte array. @param bytes byte array to be wrapped
782 Constructs a new empty COSArray.
783 Initializes a COSStream with a given cache. @param streamCache cache to store stream data
784 Creates an unmodifiable dictionary from a given COSDictionary. @param dict the COSDictionary to wrap
785 Creates a default DecodeResult with an empty COSDictionary. @return DecodeResult instance initialized with a new COSDictionary
786 Initializes a new PDDocumentInformation with an empty COSDictionary.
787 Initializes PDResources with a new COSDictionary and caches.
788 Initializes a new instance of PDDictionaryWrapper with an empty dictionary.
789 Initializes a new PDNameTreeNode with an empty dictionary.
790 Constructs a new PDPageLabelRange with an empty dictionary. Initializes page label range using default settings.
791 Initializes a new PDMarkInfo with an empty COSDictionary.
792 Initializes a new PDPropertyList with an empty dictionary.
793 Initializes a new PDBoxStyle with an empty COSDictionary.
794 Initializes a new PDCryptFilterDictionary with an empty COSDictionary.
795 Initializes a new instance of PDEncryption with an empty dictionary.
796 Initializes a new FDFCatalog with an empty COSDictionary.
797 Initializes a new FDFDictionary with an empty COSDictionary.
798 Initializes a new FDFField with an empty COSDictionary.
799 Initializes a new FDFIconFit object with an empty COSDictionary.
800 Initializes a new instance of FDFJavaScript. Sets up an empty COSDictionary for internal use.
801 Constructs a new FDFNamedPageReference with an empty dictionary.
802 Initializes a new FDFPage with an empty COSDictionary.
803 Initializes a new FDFPageInfo with an empty COSDictionary.
804 Initializes a new FDFTemplate with an empty dictionary.
805 Initializes a new PDDeviceNAttributes with an empty dictionary.
806 Initializes a new PDDeviceNProcess with an empty dictionary.
807 Initializes a new PDShading instance with an empty dictionary.
808 Initializes a new instance of PDAdditionalActions with an empty COSDictionary.
809 Initializes a new instance of PDAnnotationAdditionalActions with an empty dictionary.
810 Initializes a new instance of PDDocumentCatalogAdditionalActions. Sets up an empty COSDictionary for storing actions.
811 Initializes a new instance of PDFormFieldAdditionalActions. Sets up an empty COSDictionary for storing field actions.
812 Initializes a new instance of PDPageAdditionalActions. Sets up an empty dictionary for storing page actions.
813 Initializes a new PDTargetDirectory with an empty dictionary.
814 Initializes a new PDURIDictionary with an empty COSDictionary.
815 Initializes a new instance of PDWindowsLaunchParams with an empty dictionary.
816 Initializes a new PDBorderEffectDictionary with an empty COSDictionary.
817 Initializes a new PDBorderStyleDictionary with an empty COSDictionary.
818 Initializes a new PDPropBuild with a direct COSDictionary.
819 Initializes a new PDPropBuildDataDict with a direct COSDictionary.
820 Initializes a new PDSeedValueMDP with a direct COSDictionary.
821 Initializes a new PDSeedValueTimeStamp with an empty dictionary.
822 Constructs a PDField with an empty dictionary. @param acroForm parent form containing the field
823 Initializes a new PDViewportDictionary. Creates and assigns a new COSDictionary to viewportDictionary.
824 Initializes a new instance of PDViewerPreferences with an empty dictionary.
825 Initializes a COSObject with a given base object and key. @param object the underlying COSBase object @param objectKey the unique identifier for the COSObject
826 Constructs a PDDefaultAttributeObject from a COSDictionary. @param dictionary the COSDictionary to initialize with
827 Constructs a PDUserAttributeObject from a COSDictionary. @param dictionary the COSDictionary containing user attributes
828 Constructs a PDStandardAttributeObject from a COSDictionary. @param dictionary the COSDictionary to initialize with
829 Constructs a PDOutlineItem from a COSDictionary. @param dic dictionary representing the outline item
830 Retrieves metadata from PDF stream. @return PDMetadata object or null if not found
831 Retrieves metadata from the PDF document. @return PDMetadata object or null if no metadata is found
832 Retrieves the extends object stream. @return PDObjectStream object or null if not found
833 Constructs a Type 0 PDF function. @param function underlying COS object representing the function
834 Constructs a PDFunctionType3 from a COSBase. @param functionStream the COSBase representing the function stream
835 Constructs a PDPostScriptXObject from a given COSStream. @param stream the COSStream containing PostScript data
836 Constructs a PDFormXObject from a given COSStream. @param stream PDF object stream representing the form
837 Creates a PDFormXObject from a COSStream. @param stream PDF content stream @param cache resource cache for form objects
838 Constructs a new instance of PublicKeySecurityHandler.
839 Constructs a new instance of StandardSecurityHandler.
840 Initializes a new instance of PublicKeySecurityHandler. @param publicKeyProtectionPolicy policy for public key protection
841 Initializes a new instance of StandardSecurityHandler. @param standardProtectionPolicy policy to be applied
842 Constructs a new FDF annotation highlight from a COS dictionary. @param a COS dictionary containing annotation properties
843 Constructs a FDFAnnotationSquiggly from a COSDictionary. @param a dictionary representing the annotation
844 Constructs a strike-out annotation from a COS dictionary. @param a COS dictionary representing the annotation
845 Constructs an underline annotation. @param a COSDictionary containing annotation properties
846 Constructs a PDTilingPattern from a COSDictionary. @param dictionary the COSDictionary containing pattern data
847 Constructs a PDShadingType3 from a COSDictionary. @param shadingDictionary dictionary containing shading details
848 Constructs a PDShadingType4 instance from a COSDictionary. @param shadingDictionary dictionary containing shading details
849 Constructs a PDShadingType5 from a COSDictionary. @param shadingDictionary dictionary containing shading details
850 Initializes a new PDPageFitDestination from a COSArray. @param arr the COSArray representing the destination
851 Constructs a PDPageFitHeightDestination from a COSArray. @param arr array representing the destination
852 Initializes a PDPageFitRectangleDestination with a given COSArray. @param arr COSArray containing destination parameters
853 Creates a PDPageFitWidthDestination from a COSArray. @param arr array representing the destination
854 Constructs a PDPageXYZDestination from a COSArray. @param arr array representing the destination
855 Constructs a PDButton instance. @param acroForm the form containing this button @param field the dictionary representing the button @param parent the parent field of this button
856 Constructs a PDSignatureField. @param acroForm the form containing this field @param field the dictionary representing the field @param parent the parent field, if any
857 Constructs a PDVariableText object. @param acroForm the form containing the field @param field the dictionary representing the field @param parent the parent field of this variable text field
858 Initializes MacOSRomanEncoding with custom entries.
859 Converts FontBox Encoding to Type1Encoding. @param encoding FontBox Encoding object @return Type1Encoding object
860 Generates a unique partial field name by appending incrementing numbers. @return Unique partial field name starting with "Signature"
861 Returns a string representation of the object collection with revisions. @return formatted string of objects and their revision numbers
862 Creates a PDSoftMask from a COSBase dictionary. @param dictionary the COSBase dictionary to use @return a new PDSoftMask instance
863 Constructs a COSDocument using the provided parser. @param parser the ICOSParser instance to use
864 Creates a PDMarkedContent object based on the tag. @param tag COSName representing the type of marked content @param properties COSDictionary containing properties @return PDArtifactMarkedContent if tag is ARTIFACT, otherwise PDMarkedContent
865 Calculates the width of a shape. @return The width as a floating-point number.
866 Checks if a point (x, y) is within the bounds of a rectangle. @param x x-coordinate of the point @param y y-coordinate of the point @return true if the point is inside the rectangle, false otherwise
867 Calculates height by subtracting lower left Y from upper right Y. @return calculated height as float
868 Transforms the bounding box of a shape using a given matrix. @param matrix transformation matrix to apply @return new GeneralPath representing transformed shape
869 Converts rectangle bounds to a GeneralPath. @return GeneralPath representing the rectangle
870 Returns a string representation of the rectangle's corners. @return formatted string with lower-left and upper-right coordinates
871 Retrieves an integer value at the specified index. @param index position of the integer to retrieve @return integer value or -1 if not found
872 Retrieves name at specified index. @param index position in list @return name string or default if not found
873 Creates an output stream for writing data with optional filters. @param filters COSBase object containing filters to apply @return OutputStream for writing data @throws IOException if an I/O error occurs
874 Initializes image from a PDF stream and resources. @param stream PDF stream containing image data @param resources PDF resources for the image
875 Determines file suffix based on stream filters. @return file extension or null if unknown filter
876 Writes a float operand to the output stream. @param real the float value to write @throws IOException if an I/O error occurs
877 Writes an integer operand to the output stream. @param integer the integer value to write @throws IOException if an I/O error occurs
878 Writes text followed by a line break. @param text the string to be written @throws IOException if an I/O error occurs
879 Checks if the collection is empty. @return true if no elements present, false otherwise
880 Writes a COSFloat to the output stream followed by a space. @param output the OutputStream to write to @param cosFloat the COSFloat value to write @throws IOException if an I/O error occurs
881 Converts update state to an increment. @return COSIncrement representing the update state
882 Converts the array to a float array. @return float[] containing float values from COSBase objects
883 Converts list of COSBase objects to List<Float>. @return List of Float values or null for non-COSNumber items
884 Converts COSBase objects to a list of Integers. @return List of Integers or nulls if conversion fails
885 Retrieves the minimum value from a range array. @return minimum value as a float
886 Retrieves the maximum value from a range array. @return the maximum value as a float
887 Retrieves PDGamma by index from array. @param index position in the array @return PDGamma object or null if not found
888 Retrieves a BlendMode instance from a PDF COS object. @param cosBlendMode PDF blend mode object @return corresponding BlendMode or NORMAL if not found
889 Retrieves colorant names from the array. @return List of colorant names as strings
890 Retrieves the alternate color space. @return PDColorSpace object or null if not set @throws IOException if an I/O error occurs
891 Retrieves colorant name from array. @return Colorant name as a string
892 Retrieves the first page from a PDF document. @return PDPage object or null if no pages are present
893 Retrieves the first page number from an array. @return The page number as an integer, or -1 if not found
894 Retrieves the zoom level from a PDF array. @return zoom level as float, or -1 if not found
895 Initializes a Matrix from a COSArray. @param array COSArray containing matrix values
896 Retrieves an object from the dictionary using primary and secondary keys. @param firstKey primary key to search @param secondKey secondary key if primary is not found @return COSBase object or null if neither key exists
897 Retrieves a COSName from the dictionary using a given key. @param key the key to look up in the dictionary @return COSName object if found, otherwise null
898 Retrieves a COSDictionary by key. @param key the dictionary key to search for @return COSDictionary object or null if not found
899 Retrieves a COSStream by key. @param key the dictionary key for the stream @return COSStream object or null if not found
900 Retrieves a COSArray from the dictionary using the specified key. @param key the key to look up in the dictionary @return the COSArray associated with the key, or null if not found or not a COSArray
901 Retrieves a COSName from the dictionary. @param key key to look up in the dictionary @param defaultValue default value to return if key not found or not a COSName @return COSName associated with the key, or default value
902 Retrieves a long value for a given key. @param key the dictionary key @param defaultValue default value if key not found or not a number @return long value associated with the key or default value
903 Retrieves a float value from the dictionary for a given key. @param key the key to look up in the dictionary @param defaultValue the default value to return if the key is not found or not a number @return the float value associated with the key, or the default value if not applicable
904 Returns an iterator of content streams from the page. @return Iterator<PDStream> containing content streams
905 Checks if the page has content. @return true if page contains content, false otherwise
906 Retrieves class names from a PDF object. @return Revisions<String> containing class names and revision numbers
907 Retrieves the COSBase object associated with key 'K'. @return COSBase object or null if not found
908 Retrieves the value associated with the key "V" from the COS object. @return COSBase object representing the value or null if not found
909 Checks if metadata encryption is enabled. @return true if metadata encryption is enabled, false otherwise
910 Retrieves the owner encryption key. @return byte array containing the owner encryption key or null if not found @throws IOException if an I/O error occurs during retrieval
911 Retrieves user encryption key from dictionary. @return byte array containing the encryption key or null if not found @throws IOException if an I/O error occurs
912 Retrieves permissions from a PDF dictionary. @return byte array of permissions or null if not found @throws IOException if an I/O error occurs
913 Retrieves the page number associated with an annotation. @return The page number or null if not set
914 Retrieves the COSValue from a PDF field. @return COSBase object or null if not found @throws IOException if an unknown type is encountered
915 Retrieves field flags from a PDF form. @return integer representing field flags or null if not found
916 Retrieves set field flags from a PDF form field. @return Integer value of the set field flags or null if not found
917 Retrieves clear field flags from a PDF field. @return Integer representing clear field flags or null if not set
918 Retrieves flags for a widget field. @return integer representing field flags or null if not set
919 Retrieves widget field flags. @return Integer representing field flags or null if not set
920 Retrieves clear widget field flags. @return Integer value of clear flags or null if not set
921 Retrieves the default width, initializing it if not set. @return default width value as a float
922 Retrieves the color space from the PDF dictionary. @return PDColorSpace object or null if not found @throws IOException if an I/O error occurs
923 Retrieves the color space from resources. @param resources PDF document resources @return PDColorSpace object or null if not found
924 Initializes a PDOptionalContentGroup from a COSDictionary. @param dict the underlying COSDictionary @throws IllegalArgumentException if the dictionary is not of type 'OCG'
925 Initializes a PDOptionalContentMembershipDictionary from a COSDictionary. @param dict COSDictionary containing optional content membership data @throws IllegalArgumentException if dictionary is not of type 'OCMD'
926 Retrieves the overprint mode. @return Integer representing the overprint mode or null if not set
927 Retrieves soft mask from dictionary. @return PDSoftMask object or null if not found
928 Retrieves float value from dictionary by key. @param key the COSName key to search for @return Float value or null if not found
929 Retrieves the transfer function dictionary. @return COSBase object or null if invalid array size
930 Retrieves the transfer function for color conversion. @return COSBase object or null if invalid array size
931 Retrieves the backdrop color array. @return COSArray representing the backdrop color or null if not set
932 Determines the open mode for a document. @return OpenMode indicating new or same window preference
933 Retrieves the "T" entry from the action dictionary. @return COSBase object representing the "T" entry
934 Determines if the document should open in a new window. @return OpenMode indicating the window behavior
935 Determines the open mode for a document. @return OpenMode indicating new window, same window, or user preference
936 Retrieves named destination from dictionary. @return PDNamedDestination object or null if not found
937 Retrieves the contents as a byte array. @return byte array of contents or empty array if not found
938 Retrieves XFA resource from the dictionary. @return PDXFAResource object or null if not found
939 Retrieves an inheritable attribute from the dictionary or parent. @param key the attribute key to look for @return COSBase object of the attribute, or null if not found
940 Retrieves value from COS dictionary. @return COSBase object associated with key "V"
941 Retrieves field value as string. @return Field value as string or empty if not found
942 Retrieves the default value from the COS object. @return COSBase representing the default value or null if not present
943 Closes resources, releasing any held locks. @throws IOException if an I/O error occurs
944 Clones a COSBase object for a new document. @param base the original COSBase object to clone @return the cloned COSBase object or the original if already cloned @throws IOException if an error occurs during cloning
945 Writes a COS object to the output stream. @param key unique identifier for the COS object @param obj the COSBase object to write @throws IOException if an I/O error occurs
946 Retrieves the key for a given COSBase object. @param object the COSBase object to find the key for @return the COSObjectKey associated with the object
947 Checks if the pool contains the specified COSBase object. @param object the COSBase object to check @return true if the object is in the pool, false otherwise
948 Creates a list of COSWriterObjectStream objects. @return List of COSWriterObjectStream instances
949 Retrieves or creates a COSObjectKey using document's xref table. @param num object number @param gen generation number @return COSObjectKey for the given number and generation
950 Performs a breadth-first search to find objects in the PDF source. @throws IOException if an I/O error occurs during processing
951 Searches for object stream offsets using backward search. @return Map of offsets to COSObjectKey or null if not found
952 Parses XRef trailer using provided resolver. @param resolver object for handling parsed data @throws IOException if an I/O error occurs
953 Parses an XRef table from the PDF source. @param startByteOffset starting byte offset of the XRef table @return true if parsing is successful, false otherwise
954 Retrieves or generates a unique key for a PDF object. @param obj PDF object to process @return COSObjectKey representing the object's key
955 Adds or updates an object in the pool. @param key unique identifier for the object @param object the COSBase object to be stored @return updated or new COSObjectKey, null if not added
956 Constructs a COSWriter with default compression. @param outputStream destination output stream
957 Sets the update state flag. @param flag indicates whether an update is needed
958 Updates the resource with full refresh enabled.
959 Retrieves a string from the list at the specified index. @param index position in the list @param defaultValue value to return if index is out of bounds or object is not a COSString @return string representation of the COSString at index, or default value
960 Retrieves the name as a string from a dictionary object. @param key the key to look up in the dictionary @return the name as a string, or null if not found
961 Retrieves string value associated with a key. @param key the dictionary key @return string value or null if not found
962 Converts a COSDictionary to a COSDictionaryMap with basic types. @param map the input COSDictionary @return COSDictionaryMap containing converted values or null if input is null @throws IOException if an unknown object type is encountered
963 Retrieves the file content. @return The string representation of the file content.
964 Retrieves the first string option. @return The string value of the first option or throws exception if not a COSString.
965 Retrieves default appearance string from options. @return Default appearance string or null if not found
966 Retrieves the string value of a named destination. @return String representation of the named destination or null if not applicable
967 Extracts strings from nested arrays based on index. @param items base item which can be a COSString or COSArray @param pairIdx index to access within sub-arrays (0 or 1) @return list of extracted strings
968 Retrieves export values from PDF attribute. @return List of export strings or empty list if none found
969 Retrieves values associated with a given COSName. @param name the COSName key to look up @return list of string values or empty list if not found
970 Retrieves the default appearance string. @return default appearance as a String or null if not found
971 Constructs a COSString from text. @param text string to be wrapped by COSString
972 Initializes a new instance of PDVisibleSignDesigner with an image stream. @param imageStream input stream containing the visible signature image @throws IOException if there is an issue reading the image stream
973 Sets the signature image from a file. @param path file path of the signature image @return PDVisibleSignDesigner instance @throws IOException if file reading fails
974 Constructs a PDTransparencyGroup from a given stream. @param stream the input stream containing transparency group data
975 Parses a COSDictionary from the input source. @param isDirect indicates if the dictionary should be direct or not @return parsed COSDictionary object @throws IOException if an I/O error occurs during parsing
976 Reads a string from input, skipping spaces. @return the read string @throws IOException if an I/O error occurs
977 Reads and verifies an expected string from the source. @param expectedString characters to match against @param skipSpaces whether to skip spaces before reading @throws IOException if the expected string does not match or an I/O error occurs
978 Reads a string of specified length from the source. @param length maximum number of characters to read @return the read string or an empty string if no valid characters are found @throws IOException if an I/O error occurs
979 Reads and parses the next integer from input. @return parsed integer value @throws IOException if parsing fails or input is invalid
980 Reads and parses a long integer from input. @return parsed long value @throws IOException if parsing fails or unexpected data is encountered
981 Calculates fixed offset for XRef table/stream. @param objectOffset initial offset to search from @return fixed offset or 0 if not found @throws IOException if an I/O error occurs
982 Computes encrypted user password based on given parameters. @param password user's password byte array @param owner document owner byte array @param permissions access permissions integer @param id unique identifier byte array @param encRevision encryption revision integer @param keyLengthInBytes length of encryption key in bytes @param encryptMetadata flag to indicate if metadata should be encrypted @return encrypted password byte array @throws IOException if an I/O error occurs during encryption
983 Computes the owner password for encryption. @param ownerPassword original owner password @param userPassword user password to be encrypted @param encRevision encryption revision level @param length expected length of certain data @return encrypted owner password as byte array @throws IOException if length mismatch or encryption fails
984 Rotates the current transformation by a specified angle. @param theta rotation angle in radians
985 Applies a text adjustment to the current graphics state. @param tx horizontal translation value @param ty vertical translation value
986 Translates an object using coordinates from a Vector. @param vector containing translation X and Y values
987 Concatenates two matrices by multiplying them. @param a first matrix @param b second matrix @return result of multiplying b by a
988 Constructs a new PDDocument from a COSDocument. @param doc the underlying COSDocument to use
989 Processes a character sequence as a token. @param text the input character sequence to process
990 Returns current access permission. Initializes to owner access if not set. @return AccessPermission object
991 Computes the appropriate revision number based on version and permissions. @param version current document version @return computed revision number
992 Encrypts or decrypts data using AES. @param finalKey encryption key @param data input stream containing the data to process @param output output stream for processed data @param decrypt true if decrypting, false if encrypting @throws IOException on I/O errors or security issues
993 Encrypts or decrypts data using AES-256. @param data input stream containing the data to process @param output output stream for the processed data @param decrypt true if decrypting, false if encrypting @throws IOException if an I/O error occurs during processing
994 Encrypts data using RC4 algorithm. @param finalKey encryption key @param input data to encrypt @param output stream for encrypted data
995 Writes data from InputStream to OutputStream. @param data source InputStream @param output destination OutputStream @throws IOException if an I/O error occurs
996 Prepares string for SASL comparison. @param str input string to prepare @return SASL-prepared string
997 Performs SASLprep on a string with storage flag set to false. @param str input string to be processed @return SASLprep-processed string
998 Retrieves or creates a FontBoxFont instance. @return FontBoxFont object from cache or newly created
999 Saves font information to disk cache. Handles exceptions related to file writing and security issues.
1000 Sets the font provider and updates font information. @param fontProvider new FontProvider to be used
1001 Constructs a shaded triangle. @param p array of 3 corner points @param c array of colors for each corner
1002 Writes CMap data to an output stream. @param out OutputStream to write the CMap data to @throws IOException if an I/O error occurs
1003 Loads a glyph list from a specified resource file. @param filename name of the glyph list file @param numberOfEntries number of entries expected in the glyph list @return GlyphList object containing font glyph mappings
1004 Retrieves a map of GIDs to codes. @return Map where key is GID and value is corresponding code @throws IOException if an I/O error occurs
1005 Initializes a PDICCBased color space from an ICC profile. @param iccArray COSArray containing the ICC profile data @throws IOException if there is an error loading the ICC profile
1006 Ends text clipping by applying buffered clips and resetting state.
1007 Sets the current graphics clip. Updates the clip based on the current graphics state.
1008 Returns data to be signed for PDF. @throws IOException if an I/O error occurs
1009 Merges a diacritic into the text position. @param diacritic the diacritic to be merged
1010 Checks if the current TextPosition overlaps with another. @param tp2 the other TextPosition to compare @return true if there is significant overlap, false otherwise
1011 Checks if the current TextPosition completely contains another. @param tp2 the other TextPosition to check @return true if this TextPosition fully encloses tp2, false otherwise
1012 Writes a paragraph separator by ending and starting a new paragraph. @throws IOException if an I/O error occurs
1013 Writes a COSName to an OutputStream followed by a space. @param output the OutputStream to write to @param cosName the COSName object to write @throws IOException if an I/O error occurs
1014 Writes a PDF operand to the output stream. @param name the COSName to be written @throws IOException if an I/O error occurs
1015 Writes a byte array as a string to the given output stream. @param bytes the byte array to write @param forceHex if true, writes in hex format regardless of content @param output the OutputStream to write to @throws IOException if an I/O error occurs
1016 Initializes a PDF marked content extractor with specified encoding. @param encoding character encoding for the PDF document
1017 Initializes PDFTextStripper with default operators.
1018 Retrieves dictionary object by key. @param key dictionary key as String @return COSBase object associated with the key
1019 Retrieves item by key from the document. @param key PDF key as a string @return COSBase object associated with the key
1020 Checks if map contains key by name. @param name key to check @return true if key exists, false otherwise
1021 Retrieves a filter by name. @param filterName name of the filter @return Filter object if found, otherwise throws IOException
1022 Parses a PDF COSName from the input source. @return parsed COSName object @throws IOException if an I/O error occurs or invalid characters are encountered
1023 Constructs a PDColor from a COSArray and a color space. @param array COSArray containing color components and optional pattern name @param colorSpace the color space for the color
1024 Retrieves or creates a COSInteger for the given value. @param val the integer value to represent @return a COSInteger instance
1025 Parses a hexadecimal string to a COSString. @param hex the input hexadecimal string @return COSString representation of the hex data @throws IOException if the hex string is invalid
1026 Initializes a new instance of COSArrayList. Sets up internal COSArray and ArrayList for storage.
1027 Initializes a COSArrayList with a dictionary and key. @param dictionary the parent COSDictionary @param dictionaryKey the key for the array in the dictionary
1028 Initializes a new instance of PDPageDestination. Sets up an empty COSArray for storing destination details.
1029 Initializes a PDRectangle with specified coordinates and dimensions. @param x left edge x-coordinate @param y bottom edge y-coordinate @param width rectangle width @param height rectangle height
1030 Constructs a PDRectangle from a bounding box. @param box BoundingBox defining the rectangle's corners
1031 Creates a new COSStream. @return Created COSStream object
1032 Constructs a new COSStream with default settings.
1033 Initializes a COSStream with a cache and read view. @param streamCache cache for managing streams @param randomAccessReadView read-only access to the stream data @throws IOException if an I/O error occurs
1034 Returns an unmodifiable view of this dictionary. @return UnmodifiableCOSDictionary instance
1035 Returns the last DecodeResult or a default one if none exist. @return DecodeResult object
1036 Retrieves resources from the current object. @return PDResources object or null if not found
1037 Default constructor for PDAttributeObject.
1038 Constructs a new PDUserProperty with the given user attribute object. @param userAttributeObject the user attribute object to be associated with this property
1039 Constructs a new PDOutlineNode instance.
1040 Constructs a new PDDestinationNameTreeNode instance.
1041 Constructs a new instance of PDEmbeddedFilesNameTreeNode.
1042 Constructs a new instance of PDJavascriptNameTreeNode.
1043 Constructs a new PDStructureElementNameTreeNode.
1044 Constructs a PDNonTerminalField with an associated PDAcroForm. @param acroForm the form to which this field belongs
1045 Constructs a new PDTerminalField. @param acroForm parent form containing the field
1046 Constructs a PDLayoutAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary
1047 Constructs a PDListAttributeObject from a COSDictionary. @param dictionary the COSDictionary to initialize with
1048 Constructs a PDPrintFieldAttributeObject from a COSDictionary. @param dictionary the COSDictionary containing print field attributes
1049 Constructs a PDTableAttributeObject from a COSDictionary. @param dictionary the COSDictionary to initialize with
1050 Constructs a PDAppearanceStream from a COSStream. @param stream the underlying COSStream
1051 Constructs a PDTransparencyGroup from a COSStream and ResourceCache. @param stream the COSStream containing transparency group data @param cache the ResourceCache for managing resources
1052 Adds a TrueType collection from a file. @param ttcFile the TrueType collection file to process
1053 Adds TrueType font information to the list. @param fontHeaders Font headers containing metadata @param file Font file being processed @param hash Hash of the font file
1054 Adds a Type 1 font from a PFB file. @param pfbFile the PFB font file to process
1055 Creates a PDDestination from a COSBase object. @param base the COSBase object representing the destination @return a PDDestination object or null if base is null @throws IOException if an error occurs during creation
1056 Constructs a new PDCheckBox. @param acroForm the form containing this checkbox @param field the dictionary representing the checkbox field @param parent the parent field of this checkbox
1057 Initializes a new PDPushButton. @param acroForm the form containing the button @param field the dictionary representing the button @param parent the parent field of the button
1058 Constructs a new PDRadioButton. @param acroForm the form containing this radio button @param field the dictionary representing the radio button @param parent the parent field if any
1059 Initializes a new PDChoice instance. @param acroForm the form containing this field @param field the dictionary representing the choice field @param parent the parent non-terminal field
1060 Constructs a PDTextField. @param acroForm PDF document's form @param field dictionary representing the field @param parent parent non-terminal field
1061 Saves the current graphics state by cloning and pushing it onto the stack.
1062 Saves the current graphics stack and resets it with a clone of the top state. @return The original graphics stack before reset
1063 Constructs a new COSDocument using an in-memory stream cache.
1064 Converts the dictionary to a string representation. @return String representation of the dictionary or an error message if an exception occurs
1065 Clips the current graphics state to a specified rectangle. @param rectangle the bounding rectangle to clip against
1066 Transforms the bounding box of an appearance stream. @param appearanceStream the PDF appearance stream @return transformed bounding box as Rectangle2D
1067 Initializes graphics state with a page rectangle. @param page the page dimensions
1068 Retrieves the integer value at index 2 of the array. @return integer value from array index 2
1069 Retrieves the left value from an array. @return integer value at index 2 of the array
1070 Retrieves the bottom value from an internal array. @return integer value at index 3 of the array
1071 Retrieves the right value from the array. @return integer value at index 4 of the array
1072 Retrieves the top element from the array. @return The integer value at index 5 of the array.
1073 Retrieves the third element from an array. @return the integer value of the third element
1074 Retrieves the integer value at index 2 of the array. @return the integer at index 2
1075 Retrieves the fourth element from the array. @return integer value of the fourth element
1076 Checks if the bounding box fits. @return true if bounding box is fitted, false otherwise
1077 Checks if the bounding box type matches. @return true if the bounding box is of type BOUNDED, false otherwise
1078 Checks if the bounding box fits. @return true if bounding box fits, false otherwise
1079 Creates an output stream. @return OutputStream instance @throws IOException if an I/O error occurs
1080 Creates an output stream with specified filter. @param filter PDF filter name @return OutputStream for writing data @throws IOException if I/O error occurs
1081 Creates a thumbnail image from a COSStream. @param cosStream the input stream containing image data @return PDImageXObject representing the thumbnail
1082 Retrieves the mask image from a PDF object. @return PDImageXObject representing the mask or null if none exists
1083 Retrieves the soft mask image. @return PDImageXObject representing the soft mask or null if none exists
1084 Writes affine transformation matrix to output. @param transform the AffineTransform object to write
1085 Starts text mode. Throws exception if already in text mode.
1086 Ends text mode and writes the end text operator. @throws IOException if an I/O error occurs
1087 Sets text leading. @param leading spacing between lines of text @throws IOException if an I/O error occurs
1088 Writes a newline in text mode. Throws IllegalStateException if not in text mode.
1089 Moves text cursor to a new line at the specified offset. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs
1090 Saves the current graphics state. Throws an exception if called within text mode.
1091 Restores the graphics state. Throws IllegalStateException if called within text mode.
1092 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
1093 Sets the stroking color using CMYK values. @param c cyan component (0.0 to 1.0) @param m magenta component (0.0 to 1.0) @param y yellow component (0.0 to 1.0) @param k black component (0.0 to 1.0) @throws IOException if an I/O error occurs
1094 Sets the stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if writing fails
1095 Sets non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
1096 Sets non-stroking color using CMYK values. @param c cyan component (0.0 to 1.0) @param m magenta component (0.0 to 1.0) @param y yellow component (0.0 to 1.0) @param k black component (0.0 to 1.0) @throws IOException if an I/O error occurs
1097 Sets non-stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
1098 Adds a rectangle to the current graphics context. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs
1099 Draws a cubic Bézier curve. @param x1, y1 control point 1 coordinates @param x2, y2 control point 2 coordinates @param x3, y3 end point coordinates @throws IOException if an I/O error occurs
1100 Draws a cubic Bézier curve. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 third control point's X coordinate @param y3 third control point's Y coordinate @throws IOException if an I/O error occurs
1101 Draws a cubic Bézier curve with one control point. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the end point (also second control point) @param y3 y-coordinate of the end point (also second control point) @throws IOException if an I/O error occurs
1102 Moves the cursor to specified coordinates. @param x horizontal coordinate @param y vertical coordinate @throws IOException if an I/O error occurs
1103 Draws a line to the specified coordinates. @param x destination x-coordinate @param y destination y-coordinate @throws IOException if an I/O error occurs
1104 Applies stroke to the current path. Throws IllegalStateException if called in text mode.
1105 Closes and strokes the current path. Throws IllegalStateException if called in text mode. @throws IOException on I/O errors during operation
1106 Fills current path using non-zero winding rule. Throws exception if called in text mode.
1107 Writes FILL_EVEN_ODD operator to output. Throws exception if called in text mode.
1108 Renders filled and stroked path. Throws exception if called in text mode.
1109 Fills and strokes the current path using even-odd rule. Throws exception if called in text mode.
1110 Closes path, fills using non-zero winding rule, and strokes it. Throws exception if called in text mode.
1111 Closes path, fills using even-odd rule, and strokes. Throws exception if called in text mode.
1112 Closes the current path. Throws IllegalStateException if called in text mode.
1113 Clips the current path. Throws an exception if called in text mode.
1114 Clips the current path using even-odd rule. Throws IllegalStateException if called in text mode.
1115 Sets line width in graphics context. @param lineWidth the desired line width @throws IOException if an I/O error occurs
1116 Sets the line join style. @param lineJoinStyle join style identifier (0, 1, or 2) @throws IOException if I/O error occurs
1117 Sets the line cap style. @param lineCapStyle integer representing the line cap style (0-2) @throws IOException if an I/O error occurs
1118 Sets line dash pattern. @param pattern array of dash lengths @param phase starting point of the dash pattern @throws IOException if writing fails
1119 Sets the line miter limit. @param miterLimit the miter limit value, must be greater than 0 @throws IOException if an I/O error occurs
1120 Ends marked content in PDF. @throws IOException if an I/O error occurs
1121 Sets character spacing in PDF document. @param spacing the amount of space between characters @throws IOException if an I/O error occurs
1122 Sets word spacing in a PDF document. @param spacing the amount of space to add between words @throws IOException if an I/O error occurs while writing
1123 Sets horizontal scaling for text. @param scale scaling factor for text width @throws IOException if an I/O error occurs
1124 Sets text rendering mode. @param rm rendering mode to apply @throws IOException if I/O error occurs during writing
1125 Sets text rise in PDF. @param rise amount of text rise @throws IOException if I/O error occurs
1126 Constructs a PDRectangle from a COSArray. @param array COSArray containing rectangle coordinates
1127 Initializes a line dash pattern with an array and phase. Adjusts negative phases according to PDF 2.0 specification. @param array COSArray representing dash lengths @param phase initial dash phase, adjusted if negative
1128 Returns a string representation of the PDRange. @return formatted string with min and max values
1129 Evaluates input through a type 4 function. @param input array of input values @return array of output values after evaluation
1130 Reads and processes patch data from an input stream. @param input Image input stream to read from @param isFree Flag indicating if the patch is free @param implicitEdge Implicit edge points for non-free patches @param implicitCornerColor Implicit corner colors for non-free patches @param maxSrcCoord Maximum source coordinate value @param maxSrcColor Maximum source color value @param rangeX X-axis range @param rangeY Y-axis range @param colRange Color component ranges @param matrix Transformation matrix @param xform Additional affine transformation @param controlPoints Number of control points @return Patch object or null if EOF occurs @throws IOException on I/O error
1131 Reads a vertex from an image stream. @param input the source image input stream @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X coordinate range @param rangeY Y coordinate range @param colRangeTab color component ranges @param matrix transformation matrix @param xform additional affine transform @return Vertex object with position and color components @throws IOException if reading fails or invalid parameters are provided
1132 Retrieves the color before the current one. @return PDGamma object representing the previous color
1133 Retrieves the after-colour from the colour list. @return PDGamma object representing the after-colour
1134 Retrieves the start color. @return PDGamma object representing the start color
1135 Retrieves the end color from a gradient. @return PDGamma representing the end color
1136 Retrieves the blend mode from the dictionary. @return BlendMode object representing the blending mode or null if not set
1137 Creates a Matrix from a COSBase object. @param base the COSBase object to convert @return a new Matrix instance or an empty Matrix if conversion fails
1138 Updates the document's highest XRef object number based on imported page. @param importedPage the page to be processed
1139 Retrieves a COSDictionary from the document using two keys. @param firstKey key to access the initial dictionary level @param secondKey key to access the nested dictionary level @return COSDictionary object or null if not found
1140 Retrieves boolean value from dictionary. @param firstKey primary key in the dictionary @param secondKey secondary key in the dictionary @param defaultValue default boolean value if keys not found @return boolean value associated with keys or default value
1141 Retrieves integer value from dictionary using two keys. @param firstKey primary key for the dictionary @param secondKey secondary key for nested dictionary @param defaultValue default value if keys not found or not an integer @return integer value associated with the keys, or default if not applicable
1142 Retrieves filter names from PDF parameters. @return List of filter names or empty list if none found
1143 Retrieves the color space. @return PDColorSpace object representing the color space @throws IOException if an error occurs while reading the color space
1144 Checks if a dictionary represents a catalog. @param dictionary to check @return true if the dictionary is a catalog, false otherwise
1145 Checks if a dictionary represents a page tree node. @param node the COSDictionary to check @return true if the node is a page tree node, false otherwise
1146 Retrieves the encryption filter method. @return COSName representing the cryptographic filter method
1147 Retrieves stream filter name from dictionary. @return COSName of the stream filter or IDENTITY if not found
1148 Retrieves the string filter name from the dictionary. @return COSName representing the string filter or IDENTITY if not set
1149 Decrypts entries in a PDF dictionary. @param dictionary the dictionary to decrypt @param objNum object number of the dictionary @param genNum generation number of the dictionary @throws IOException if decryption fails
1150 Converts a character code to its Unicode representation. @param code character code to convert @return Unicode string or null if conversion fails
1151 Retrieves the subtype of the current object. @return COSName representing the subtype, or null if not set
1152 Retrieves the relationship type from the dictionary. @return COSName representing the relationship or null if not found
1153 Retrieves the appearance state of the object. @return COSName representing the appearance state or null if not set
1154 Checks if the document is encrypted. @return true if encrypted, false otherwise
1155 Retrieves the encryption dictionary from the PDF trailer. @return COSDictionary containing encryption details or null if not present
1156 Parses the PDF trailer and initializes the root dictionary. @throws IOException if root object is missing or an I/O error occurs
1157 Retrieves and caches the AcroForm from a PDF document. @param acroFormFixup optional fixup to apply to the AcroForm @return cached PDAcroForm object or null if not found
1158 Retrieves viewer preferences from the PDF document. @return PDViewerPreferences object or null if not found
1159 Retrieves the document's name dictionary. @return PDDocumentNameDictionary object or null if not found
1160 Retrieves destination dictionary from the document. @return PDDocumentNameDestinationDictionary or null if not present
1161 Retrieves mark information from the document. @return PDMarkInfo object or null if not available
1162 Retrieves URI dictionary from PDF document. @return PDURIDictionary object or null if not found
1163 Retrieves the structure tree root from the document. @return PDStructureTreeRoot object or null if not found
1164 Retrieves optional content properties. @return PDOptionalContentProperties object or null if not found
1165 Retrieves destination names from the document. @return PDDestinationNameTreeNode or null if not found
1166 Retrieves embedded files node from the document. @return PDEmbeddedFilesNameTreeNode object or null if not present
1167 Retrieves JavaScript node from the document. @return PDJavascriptNameTreeNode object or null if not found
1168 Retrieves the transition effect dictionary. @return PDTransition object or null if no transition is defined
1169 Retrieves an indirect COSObject by name from the specified resource dictionary kind. @param kind type of resource dictionary @param name key for the COSObject in the dictionary @return COSObject if found, otherwise null
1170 Retrieves a dictionary object by type and name. @param kind the type of resource (e.g., COSName.FONT) @param name the specific resource name @return COSBase object or null if not found
1171 Retrieves names of resources by type. @param kind type of resource dictionary @return iterable set of resource names or empty set if none found
1172 Retrieves the page associated with the current object. @return PDPage object or null if not found
1173 Retrieves a page from the document. @return PDPage object or null if not found
1174 Retrieves a page from the PDF document. @return PDPage object or null if not found
1175 Retrieves the ID tree node for structure elements. @return PDNameTreeNode containing structure elements or null if not found
1176 Retrieves the parent tree node. @return PDNumberTreeNode representing the parent tree or null if not found
1177 Retrieves and processes the class map from a PDF object. @return Map containing class names and their corresponding attribute objects or lists of objects.
1178 Retrieves a cryptographic filter dictionary by name. @param cryptFilterName the name of the crypt filter @return PDCryptFilterDictionary object or null if not found
1179 Retrieves the border style dictionary. @return PDBorderStyleDictionary object or null if not found
1180 Retrieves border effect dictionary. @return PDBorderEffectDictionary object or null if not found
1181 Retrieves the signature from the document catalog. @return PDSignature object or null if no signature exists
1182 Retrieves JavaScript associated with an FDF document. @return FDFJavaScript object or null if no JavaScript is present
1183 Retrieves the appearance dictionary of a PDF field. @return PDAppearanceDictionary object or null if not present
1184 Retrieves appearance stream reference for the field. @return FDFNamedPageReference object or null if not found
1185 Retrieves icon fit settings. @return FDFIconFit object or null if not available
1186 Retrieves additional actions dictionary. @return PDAdditionalActions object or null if not found
1187 Retrieves page information from an FDF document. @return FDFPageInfo object or null if no info dictionary exists
1188 Retrieves the template reference from the document. @return FDFNamedPageReference object or null if not found
1189 Retrieves CID system information. @return PDCIDSystemInfo object or null if not found
1190 Retrieves Panose classification from font dictionary. @return PDPanose object or null if not found
1191 Returns the resources dictionary. @return PDResources object or null if not available
1192 Retrieves character procedures. @return COSDictionary containing character procedures or null if not set
1193 Retrieves the DeviceN color process from the dictionary. @return PDDeviceNProcess object or null if not found
1194 Retrieves render state for a given destination. @param destination target rendering destination (PRINT, VIEW) @return RenderState object or null if not found
1195 Retrieves the extended graphics state. @return PDExtendedGraphicsState object or null if not available
1196 Retrieves resources from PDF object. @return PDResources object or null if not found
1197 Retrieves the target directory from the PDF document. @return PDTargetDirectory object or null if not found
1198 Retrieves Windows-specific launch parameters. @return PDWindowsLaunchParams object or null if not available
1199 Retrieves the target directory from a PDF document. @return PDTargetDirectory object or null if not found
1200 Retrieves the appearance dictionary. @return PDAppearanceDictionary object or null if not found
1201 Retrieves a PDF page. @return PDPage object or null if not found
1202 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
1203 Retrieves border style dictionary. @return PDBorderStyleDictionary object or null if not found
1204 Retrieves the previous URI action. @return PDActionURI object or null if not found
1205 Retrieves external data dictionary. @return PDExternalDataDictionary object or null if not found
1206 Retrieves border style dictionary. @return PDBorderStyleDictionary object or null if not found
1207 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
1208 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not present
1209 Retrieves appearance characteristics. @return PDAppearanceCharacteristicsDictionary or null if not available
1210 Retrieves additional actions for annotation. @return PDAnnotationAdditionalActions object or null if none exist
1211 Retrieves border style dictionary. @return PDBorderStyleDictionary or null if not present
1212 Retrieves normal appearance settings. @return PDAppearanceEntry object or null if not found
1213 Retrieves the filter data from a PDF document. @return PDPropBuildDataDict containing filter information or null if not present
1214 Retrieves public security data from the document. @return PDPropBuildDataDict containing public security information or null if not present
1215 Retrieves application properties from the PDF document. @return PDPropBuildDataDict object containing app properties or null if not found
1216 Retrieves MDP seed value from the document. @return PDSeedValueMDP object or null if not present
1217 Retrieves the seed value certificate. @return PDSeedValueCertificate object or null if not found
1218 Retrieves timestamp from the dictionary. @return PDSeedValueTimeStamp object or null if not found
1219 Retrieves property build information. @return PDPropBuild object or null if not found
1220 Retrieves structure element from PDF. @return PDStructureElement object or null if not found
1221 Checks if the PDF object has children. @return true if the object has children, false otherwise
1222 Retrieves default resources from the PDF dictionary. @return PDResources object or null if not found
1223 Retrieves additional actions for a form field. @return PDFormFieldAdditionalActions object or null if not present
1224 Retrieves the signature from the PDF dictionary. @return PDSignature object or null if not found
1225 Retrieves default signature from the COS object. @return PDSignature instance or null if not present
1226 Retrieves seed value from COS dictionary. @return PDSeedValue object or null if not found
1227 Retrieves measure dictionary from PDF. @return PDMeasureDictionary object or null if not present
1228 Retrieves document information from a thread. @return PDDocumentInformation object or null if not found
1229 Retrieves the first bead in the thread. @return PDThreadBead object or null if not found
1230 Retrieves thread information from bead. @return PDThread object or null if not found
1231 Retrieves the next bead in the thread. @return PDThreadBead object representing the next bead
1232 Retrieves the previous bead in the thread. @return PDThreadBead object representing the previous bead
1233 Retrieves a page from the document. @return PDPage object or null if not found
1234 Retrieves metadata from a PDF document. @return PDMetadata object or null if not available
1235 Retrieves metadata from the PDF page. @return PDMetadata object or null if no metadata is present
1236 Retrieves differences stream from FDF document. @return COSStream containing differences or null if not present
1237 Retrieves font file as PDStream. @return PDStream object containing font data or null if not found
1238 Retrieves font file 2 from dictionary. @return PDStream object or null if not found
1239 Retrieves the font file stream. @return PDStream of the font file or null if not found
1240 Retrieves CID set stream from dictionary. @return PDStream object or null if not found
1241 Retrieves the sound stream from the action. @return COSStream containing the sound data or null if not present
1242 Retrieves the normal icon from a PDF form. @return PDFormXObject representing the normal icon, or null if not present
1243 Retrieves rollover icon from PDF form. @return PDFormXObject representing the rollover icon or null if not present
1244 Retrieves alternate icon as a form object. @return PDFormXObject representing the alternate icon or null if not present
1245 Retrieves the document ID from the trailer. @return COSArray containing the document ID or null if not found
1246 Retrieves output intents from the PDF document. @return List of PDOutputIntent objects representing output intents
1247 Retrieves thread beads from a PDF page. @return List of PDThreadBead objects representing thread beads
1248 Retrieves viewport dictionaries from a PDF page. @return List of PDViewportDictionary objects or null if none found
1249 Retrieves child nodes from the current node. @return List of PDNameTreeNode objects representing children
1250 Retrieves a map of names from the PDF node. @throws IOException if an I/O error occurs or unexpected data is found @return unmodifiable map of names to values, or null if no names array exists
1251 Retrieves child nodes of the current node. @return List of PDNumberTreeNode objects representing children or null if none exist
1252 Retrieves a map of page label indices and corresponding COSObjectable values. @return Unmodifiable map of integer indices to COSObjectable or null if array is invalid
1253 Retrieves the upper limit from a COSArray. @return Integer value of the upper limit or null if not found
1254 Retrieves the lower limit from a COSArray. @return Integer value of the lower limit or null if not found
1255 Retrieves or creates the range values array. @return COSArray containing range values, possibly newly created
1256 Retrieves or initializes the domain values. @return COSArray containing domain values, may be empty if not set
1257 Retrieves the size array from the COS object. @return COSArray representing the size or null if not present
1258 Retrieves decode array; uses default range values if not present. @return COSArray containing decode values or null if none available
1259 Retrieves an array of functions. @return COSArray containing function objects or null if not present
1260 Returns the COSArray representing bounds. Initializes from COS object if not already set. @return COSArray of bounds or null if not found
1261 Retrieves the Encode array from the COS object. @return COSArray representing the encode parameter or null if not set
1262 Retrieves user properties of the owner. @return List of PDUserProperty objects representing owner properties
1263 Checks if an edge is attached. @param edge name of the edge to check @return true if edge is attached, false otherwise
1264 Retrieves the color from an annotation. @return Color object or null if not available
1265 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not set
1266 Retrieves callout coordinates from annotation. @return float array of coordinates or null if not available
1267 Retrieves ink data list from annotation. @return List of float arrays representing ink coordinates or null if not found
1268 Retrieves line coordinates from annotation. @return float array of line coordinates or null if not available
1269 Retrieves the start point ending style of the annotation. @return The name of the starting style or LE_NONE if not set
1270 Retrieves the ending style of a line annotation. @return the name of the ending style or LE_NONE if not set
1271 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not set
1272 Retrieves horizontal offset of annotation caption. @return horizontal offset as a float, defaulting to 0 if not set
1273 Retrieves vertical offset of annotation caption. @return vertical offset value or 0 if not set
1274 Retrieves vertices of an annotation. @return array of vertex coordinates or null if not available
1275 Retrieves the interior color of an annotation. @return Color object representing the interior color, or null if not set
1276 Retrieves vertices of an annotation. @return array of vertex coordinates or null if not available
1277 Retrieves the starting point ending style of an annotation. @return The name of the starting point ending style or LE_NONE if not set
1278 Retrieves the endpoint style of a line annotation. @return endpoint style as a string, or LE_NONE if not specified
1279 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not set
1280 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not set
1281 Retrieves annotation coordinates. @return float array of coordinates or null if not available
1282 Retrieves the ID array from the FDF document. @return COSArray containing the ID or null if not present
1283 Retrieves all form fields from an FDF document. @return List of FDFField objects representing the form fields
1284 Retrieves a list of pages from an FDF document. @return List of FDFPage objects or null if no pages exist
1285 Retrieves child fields of the current field. @return List of child FDFField objects or null if no children exist
1286 Retrieves options from a PDF field. @return List of option values or null if no options are present
1287 Retrieves templates from a PDF page. @return List of FDFTemplate objects or null if none exist
1288 Retrieves fields from the template. @return List of FDFField objects or null if no fields exist
1289 Returns the list of character widths. @return List of Float representing character widths or empty list if not available
1290 Retrieves transformation matrix from dictionary. @return 3x3 float array representing the matrix, default if not found
1291 Retrieves a list of component names from the dictionary. @return List of component names as strings
1292 Retrieves the background array from the dictionary. @return COSArray representing the background or null if not set
1293 Retrieves the domain array from the PDF document. @return COSArray representing the domain or null if not set
1294 Retrieves the EXTEND array from the COS object. @return COSArray containing EXTEND data or null if not present
1295 Retrieves the domain array from the COS object. @return COSArray containing domain information or null if not set
1296 Retrieves coordinates array. @return COSArray containing coordinates or null if not found
1297 Retrieves or initializes the DECODE array. @return COSArray containing decode values, may be null
1298 Retrieves font settings from dictionary. @return PDFontSetting object or null if not found
1299 Retrieves fields from the action. @return COSArray containing form fields or null if not present
1300 Retrieves the fields array from the action. @return COSArray containing form fields or null if not present
1301 Retrieves rectangle differences as a float array. @return Array of floats representing rectangle differences or empty array if none
1302 Retrieves rectangle differences as a float array. @return Array of float values representing rectangle differences or empty if none
1303 Retrieves callout coordinates. @return array of floats representing callout coordinates or null if not available
1304 Retrieves ink list from PDF object. @return 2D array of floats representing ink data or empty if none found
1305 Retrieves line coordinates. @return array of floats representing line or null if not found
1306 Retrieves the starting point line ending style. @return Line ending style string or default if not set
1307 Retrieves the endpoint style from a PDF object. @return String representing the endpoint style or default value if not found
1308 Retrieves horizontal offset for caption. @return horizontal offset value or 0 if not set
1309 Retrieves vertical offset of caption. @return vertical offset as a float, default is 0.0f if not set
1310 Retrieves quad points from a PDF annotation. @return Array of quad points or null if not available
1311 Retrieves vertex coordinates. @return array of vertex coordinates or null if not available
1312 Retrieves the path data from a PDF object. @return 2D array of floats representing the path or null if not found
1313 Retrieves the starting point ending style of an annotation. @return String representing the ending style or LE_NONE if not set
1314 Retrieves the endpoint style of a line annotation. @return endpoint style as a string or LE_NONE if not found
1315 Retrieves vertex data from PDF object. @return array of vertices or null if not found
1316 Retrieves rectangle differences. @return array of floats representing rectangle differences or empty array if none
1317 Retrieves quad points from PDF annotation. @return Array of floats representing quad points or null if not found
1318 Retrieves sub-filters from a dictionary. @return list of sub-filter names or an empty list if none are found
1319 Retrieves a list of digest methods. @return List of digest method names or empty list if none found
1320 Retrieves a list of reasons from the dictionary. @return List of reason strings or empty list if none found
1321 Retrieves legal attestation fields from the document. @return List of legal attestation field names or empty list if none found
1322 Retrieves subject data as byte arrays. @return List of byte arrays representing the subject, or null if not present
1323 Retrieves key usage extensions from a dictionary. @return List of key usage strings or null if not found
1324 Retrieves issuer information from a dictionary. @return list of byte arrays representing the issuer or null if not found
1325 Retrieves OID values from a PDF dictionary. @return List of byte arrays representing OIDs, or null if not present
1326 Retrieves byte range from dictionary. @return array of integers representing byte ranges or empty array if not found
1327 Retrieves calculation order of form fields. @return List of PDField objects in calculation order
1328 Retrieves selected options' indices. @return List of selected option indices or empty list if none
1329 Retrieves change X dictionaries. @return Array of PDNumberFormatDictionary or null if not found
1330 Retrieves Y-axis change dictionaries. @return Array of PDNumberFormatDictionary or null if not found
1331 Retrieves number format dictionaries. @return array of PDNumberFormatDictionary or null if not available
1332 Retrieves number format dictionaries. @return Array of PDNumberFormatDictionary objects or null if not found
1333 Retrieves angle format dictionaries. @return array of PDNumberFormatDictionary or null if not found
1334 Retrieves line slope dictionaries. @return Array of PDNumberFormatDictionary objects or null if none found
1335 Retrieves the coordinate system origin. @return array of floats representing the origin or null if not found
1336 Retrieves the visibility policy from the dictionary. @return COSName representing the visibility policy or null if not found
1337 Retrieves a long value by key. @param key the key to look up @return the long value or -1 if not found
1338 Retrieves a long value associated with a given key. @param key the COSName key to look up @return the long value or -1 if not found
1339 Retrieves a long value by key with a default. @param key the key to look up @param defaultValue the default value if key not found @return the long value associated with the key, or default
1340 Sets the startxref byte position and resolves XRef trailers. @param startxrefBytePosValue the byte position of the startxref entry
1341 Retrieves a float value from the PDF dictionary. @param key the key associated with the float value @return the float value or -1 if not found
1342 Retrieves a float value from a COSName key. @param key the key to look up in the dictionary @return the float value associated with the key or -1 if not found
1343 Retrieves a float value from COSDictionary by key. @param key the name of the entry @param defaultValue default value if key not found @return float value associated with the key or default value
1344 Retrieves user unit from PDF page. @return user unit value or default 1.0 if invalid
1345 Retrieves the guideline width from the dictionary. @return the guideline width as a float, defaulting to 1 if not set
1346 Retrieves the opacity value of an annotation. @return opacity level as a float (default is 1.0 if not set)
1347 Retrieves the font weight. @return font weight as a float or 0 if not found
1348 Retrieves the italic angle of the font. @return italic angle as a float value
1349 Retrieves the ascent value from the dictionary. @return the ascent value as a float, defaulting to 0 if not found
1350 Retrieves the descent value. @return descent value as a float, defaulting to 0 if not found
1351 Retrieves leading value from dictionary. @return leading value as float, default is 0 if not set
1352 Retrieves the capital height of the font. @return The capital height value, ensuring non-negative result
1353 Returns the X height of the font. @return The absolute value of the X height or default if not set
1354 Retrieves the vertical stem width. @return vertical stem width as a float, default is 0 if not set
1355 Retrieves stem height value. @return stem height as float, default is 0 if not set
1356 Retrieves average character width from dictionary. @return average width as float or 0 if not found
1357 Retrieves the maximum width value. @return the maximum width as a float, defaulting to 0 if not set
1358 Retrieves the missing width value. @return The missing width as a float, defaulting to 0 if not found.
1359 Retrieves gamma value from dictionary. @return gamma value as float, defaulting to 1.0 if not found
1360 Retrieves the X step value. @return float value of X step or default 0 if not found
1361 Retrieves the y-axis step value. @return y-axis step as a float, default is 0 if not set
1362 Retrieves and clamps the audio volume. @return volume level between -1 and 1, defaulting to 1 if out of range
1363 Retrieves the leader line length from the COS object. @return float value representing the leader line length
1364 Gets leader line extension length. @return float value of leader line extension or default (0)
1365 Retrieves leader line offset length from COS object. @return float value representing the leader line offset length
1366 Retrieves constant opacity value. @return float representing opacity or default value of 1
1367 Retrieves the width value. @return Width as a float, defaulting to 1 if not specified
1368 Retrieves the duration value from the COS object. @return float representing the duration or default value of 1 if not found
1369 Retrieves the fly scale factor. @return float value representing the fly scale
1370 Extracts text regions from a PDF page. @param page the PDPage to extract text from @throws IOException if an I/O error occurs
1371 Retrieves the color space. @throws IOException if an I/O error occurs @return PDColorSpace object representing the color space
1372 Creates a PDPropertyList from a COSDictionary. @param dict the dictionary to create the property list from @return a PDPropertyList object based on the dictionary type
1373 Retrieves line width from PDF item. @return line width as Float or null if not set
1374 Retrieves the miter limit value. @return the miter limit as a Float, or null if not set
1375 Retrieves the flatness tolerance value. @return float value representing flatness tolerance or null if not set
1376 Retrieves the smoothness tolerance value. @return float representing smoothness tolerance or null if not set
1377 Retrieves the stroking alpha constant. @return Float value representing the stroking alpha or null if not set
1378 Retrieves non-stroking alpha constant. @return Float value representing the non-stroking alpha constant
1379 Returns COS object offsets. @return Map of COSObjectKey to offset or null if search not triggered
1380 Writes object to output and tracks it. @param obj object to write @throws IOException if an I/O error occurs
1381 Writes object reference to standard output. @param obj COSBase object to write @throws IOException if writing fails
1382 Saves the current object to an OutputStream. @param output stream where the object will be saved @throws IOException if an I/O error occurs during writing
1383 Clears all objects and updates the state.
1384 Removes and returns an entry from the list at the specified index. @param i index of the entry to remove @return the removed COSBase object or null if out of bounds
1385 Removes an object from the collection. @param o the object to be removed @return true if the object was successfully removed, false otherwise
1386 Clears all items and updates the state.
1387 Removes an item by its COSName key. @param key unique identifier of the item to be removed
1388 Updates state if origins differ. @param updateState current update state
1389 Sets baseObject to NULL and updates parser.
1390 Sets the origin document state and updates recursively. @param originDocumentState new document state to set @param dereferencing flag indicating if dereferencing is needed
1391 Retrieves string at specified index. @param index position of the string to retrieve @return string at given index or default if not found
1392 Retrieves name as string using PDF key. @param key unique identifier for the name @return name in string format or null if not found
1393 Retrieves string value by COSName key; returns default if null. @param key the COSName key to look up @param defaultValue the default value to return if key is not found @return the string value associated with the key or the default value
1394 Checks if the given offset points to a valid XRef stream. @param startXRefOffset starting offset for cross-reference stream @return true if valid XRef stream, false otherwise
1395 Retrieves the page display mode. @return PageMode object, defaulting to USE_NONE if invalid or null
1396 Retrieves the page layout from the root object. @return PageLayout enum or SINGLE_PAGE if invalid or not found
1397 Retrieves the version name from the root. @return version name as a string
1398 Retrieves trapped state information. @return Trapped state as a string or null if not present
1399 Retrieves the style value from the root element. @return The style as a String or null if not found
1400 Retrieves the type of the COS object. @return The type as a string or null if not present.
1401 Retrieves the owner name from the COS object. @return Owner name as a string or null if not present
1402 Retrieves the structure type from the COS object. @return The structure type as a string or null if not found
1403 Creates a PDStructureNode based on the COSDictionary type. @param node dictionary representing a structure element or tree root @return PDStructureTreeRoot if type is "StructTreeRoot", else PDStructureElement @throws IllegalArgumentException if type is invalid
1404 Retrieves the type of the COS object. @return The type as a string or null if not found
1405 Retrieves the name from the COS object. @return The name as a string or null if not found.
1406 Retrieves language property. @return language as string or null if not set
1407 Retrieves the type of the PDF object. @return String representing the type or null if not found
1408 Retrieves the subtype of the current object. @return The subtype as a string or null if not present.
1409 Retrieves the filter name from the dictionary. @return filter name as a string or null if not present
1410 Retrieves the sub-filter name from the dictionary. @return Sub-filter name as a string or null if not found
1411 Creates an FDFAnnotation based on the dictionary subtype. @param fdfDic COSDictionary containing annotation data @return FDFAnnotation object or null if unsupported type
1412 Retrieves the intent of the annotation. @return The intent as a string or null if not set.
1413 Retrieves the line ending style. @return line ending style as a string
1414 Retrieves the version from the catalog. @return version string or null if not present
1415 Retrieves the character encoding. @return Character encoding string, defaults to "PDFDocEncoding" if not specified
1416 Retrieves scale option, defaulting to "Always" if not set. @return Scale option as a string
1417 Retrieves scale type, defaulting to proportional if not specified. @return scale type as string
1418 Retrieves the base font name from the dictionary. @return base font name as a string or null if not found
1419 Retrieves the type name from dictionary. @return Type as string or null if not present
1420 Retrieves the subtype name from the dictionary. @return Subtype as a string or null if not found
1421 Retrieves the font name from the dictionary. @return the font name as a string
1422 Retrieves the font stretch value. @return The font stretch as a string or null if not set
1423 Retrieves the base font name. @return Base font name as a string or null if not found
1424 Retrieves the base font name. @return Base font name as a string or null if not found
1425 Retrieves the base font name from the dictionary. @return the base font name as a string or null if not found
1426 Retrieves the base font name. @return Base font name as a string or null if not found
1427 Checks if the dictionary represents an NChannel. @return true if SUBTYPE is "NChannel", false otherwise
1428 Retrieves the type of the action. @return The type as a string or null if not found.
1429 Retrieves the subtype of an action. @return Subtype as a string or null if not found
1430 Creates a PDAction based on the action type. @param action COSDictionary containing action details @return PDAction object or null if unsupported type
1431 Retrieves the subtype of the PDF object. @return Subtype as a string or null if not set
1432 Retrieves the caption positioning. @return Caption positioning as a string or null if not set
1433 Retrieves the intent of the document. @return The intent as a string or null if not set.
1434 Retrieves the subtype of the COS object. @return The subtype as a string or null if not present.
1435 Retrieves the name from the dictionary. @return The name as a string or null if not found.
1436 Retrieves the filter name from the dictionary. @return Filter name as a string or null if not found
1437 Retrieves the URL type from the dictionary. @return The URL type as a string or null if not found.
1438 Retrieves the filter name from the dictionary. @return the filter name as a string or null if not found
1439 Retrieves the sub-filter name from the dictionary. @return Sub-filter name as a string or null if not found
1440 Returns the field type of the PDF form field. @return Field type as a string or null if not found
1441 Retrieves the name from the COS object. @return Name as a string or null if not present
1442 Retrieves duplex setting from preferences. @return duplex setting as String or null if not set
1443 Retrieves string value by key. @param key unique identifier for the string @return string value associated with the key
1444 Retrieves string value for a given key with a default fallback. @param key the COSName key to look up @param defaultValue the default value to return if key not found @return the string value associated with the key or the default value
1445 Retrieves the language setting from the PDF document. @return Language string or null if not set
1446 Retrieves the title from document information. @return Title string or null if not set
1447 Retrieves the author of the document. @return Author name as a String or null if not set
1448 Retrieves the subject from document information. @return Subject string or null if not set
1449 Retrieves keywords from document metadata. @return String containing keywords or null if none exist
1450 Retrieves the creator of the document. @return Creator string or null if not available
1451 Retrieves the producer information. @return Producer name as a string or null if not available
1452 Retrieves the prefix from the root configuration. @return The prefix string value.
1453 Retrieves file Unicode name. @return Unicode string of the file or null if not found
1454 Retrieves file name from PDF document. @return File name as String
1455 Retrieves DOS file information. @return DOS file string representation
1456 Retrieves the MAC value from the file system. @return MAC string or null if not found
1457 Retrieves the Unix filename. @return Unix filename as a string
1458 Retrieves file description from metadata. @return Description of the file as a String
1459 Retrieves the element identifier. @return Identifier string or null if not found
1460 Retrieves the title from the COS object. @return The title as a string or null if not present
1461 Retrieves the language attribute from the COS object. @return the language as a string or null if not set
1462 Retrieves alternate description from COS object. @return Alternate description string or null if not present
1463 Retrieves the expanded form of the object. @return Expanded form as a string or null if not present
1464 Retrieves the actual text from the COS object. @return The actual text as a String or null if not present
1465 Retrieves formatted value from COSObject. @return Formatted string value or null if not found
1466 Retrieves the actual text from properties. @return Actual text as a String or null if not available
1467 Retrieves alternate description from properties. @return alternate description as String or null if not available
1468 Gets expanded form from properties. @return Expanded form string or null if not available
1469 Retrieves the date from an annotation. @return Date string from the annotation or null if not present
1470 Retrieves the name associated with the annotation. @return The name as a String, or null if not set.
1471 Retrieves the contents of an annotation. @return The string content of the annotation or null if not found.
1472 Retrieves the title from an annotation. @return The title as a string or null if not present
1473 Retrieves the subject of an annotation. @return The subject as a string, or null if not set.
1474 Retrieves the symbol associated with the annotation. @return the symbol as a String
1475 Retrieves rotation angle of the PDF document. @return Rotation angle as a string or null if not set
1476 Retrieves default appearance string. @return Default appearance string from annotation
1477 Retrieves the default style from an annotation. @return default style as a string or null if not set
1478 Retrieves the caption style from annotations. @return The caption style as a string or null if not set.
1479 Retrieves the state value from an annotation. @return The state as a string or null if not present
1480 Retrieves the state model value. @return The state model as a string or null if not found.
1481 Retrieves the status string from the PDF document. @return Status string or null if not found
1482 Retrieves the target value. @return the target string or null if not set
1483 Retrieves the partial field name. @return Partial field name as a String
1484 Retrieves the name from the reference. @return The name as a string
1485 Retrieves the font family name. @return Font family as a string or null if not available
1486 Retrieves the character set string. @return Character set as a String
1487 Retrieves the name from the dictionary. @return The string value of the 'Name' key in the dictionary.
1488 Retrieves group names from a PDF document. @return array of group names or empty array if none found
1489 Retrieves the value of the "F" entry. @return The string value associated with the "F" key in the COS dictionary.
1490 Retrieves the "D" entry as a string from the action dictionary. @return The value of the "D" entry or null if not present.
1491 Retrieves the "O" (owner) string from the action. @return The owner string or null if not present.
1492 Retrieves the value associated with key "P". @return String value of key "P" or null if not found
1493 Retrieves URI from PDF action. @return URI as a string or null if not found
1494 Retrieves the filename from the dictionary. @return the filename as a String
1495 Retrieves the annotation name from the dictionary. @return The annotation name as a string
1496 Retrieves the filename from parameters. @return filename as a String
1497 Retrieves directory path. @return Directory path as a string
1498 Retrieves the execute parameter from PDF dictionary. @return value of the "P" entry in the PDF dictionary or null if not present
1499 Retrieves the contents of a dictionary entry. @return String value of the "CONTENTS" key or null if not present
1500 Retrieves the modified date of the PDF document. @return Modified date as a string or null if not available
1501 Retrieves the annotation name from the COS object. @return the annotation name as a String
1502 Retrieves default appearance string. @return Default appearance string or null if not found
1503 Retrieves default style string from COS object. @return default style string or null if not found
1504 Retrieves the title from the PDF document. @return The title as a string or null if not present.
1505 Retrieves the subject of the document. @return The subject as a string or null if not set
1506 Retrieves the state from the COS object. @return The state as a string or null if not present
1507 Retrieves the state model from the COS object. @return The state model as a string or null if not present.
1508 Retrieves the normal caption from the COS object. @return Normal caption as a string or null if not found
1509 Retrieves the rollover caption. @return The rollover caption string or null if not available.
1510 Retrieves alternate caption from PDF COS object. @return Alternate caption as a string or null if not present
1511 Retrieves the date string from the dictionary. @return Date string or null if not present
1512 Retrieves the operating system information from a PDF document. @return OS name as a String or empty string if not found
1513 Retrieves subject DN information. @return List of maps containing subject DN attributes or null if not found
1514 Retrieves the URL from the dictionary. @return The URL as a string or null if not found.
1515 Retrieves URL from dictionary. @return URL as string or null if not present
1516 Retrieves the name from the dictionary. @return Name as a String
1517 Retrieves location from dictionary. @return location string or null if not present
1518 Retrieves the reason from the dictionary. @return Reason string or null if not present
1519 Retrieves contact information from the dictionary. @return Contact information as a string or null if not available
1520 Retrieves the title from the COS object. @return The title as a string or null if not present
1521 Retrieves partial name from dictionary. @return Partial name as string or null if not found
1522 Retrieves alternate field name from dictionary. @return alternate field name as String
1523 Retrieves the mapping name from the dictionary. @return the mapping name as a string
1524 Retrieves the default style string from the COS object. @return default style string or null if not found
1525 Retrieves the scale ratio from the COS object. @return String representing the scale ratio or null if not found
1526 Retrieves the role map from a PDF document. @return Map containing role mappings or an empty map if not found
1527 Retrieves options from a PDF field. @return List of option strings or empty list if none found
1528 Retrieves display values for options. @return List of option display values
1529 Retrieves a string value based on COSName.V attribute or returns "Off" by default. @return String representation of the value or "Off"
1530 Retrieves value associated with COSName.V. @return List of strings representing the value
1531 Retrieves default value. @return List of default values as strings
1532 Initializes a new PDSimpleFileSpecification with an empty file name.
1533 Sets the file name. @param fileName name of the file to be set
1534 Constructs a named destination with a given string. @param dest name of the destination
1535 Sets a named destination. @param dest the named destination string @throws IOException if an I/O error occurs
1536 Reads and validates generation number. @return validated generation number @throws IOException if number is invalid
1537 Reads and validates an object number. @return the validated object number @throws IOException if the number is invalid
1538 Retrieves user password based on encryption revision. @param ownerPassword owner's password bytes @param owner user identifier bytes @param encRevision PDF encryption revision @param length expected password length @return user password bytes or empty array if unsupported revision @throws IOException if an I/O error occurs
1539 Initializes a TensorPatch with given points and colors. @param tcp array of control points @param color 2D array representing patch colors
1540 Encrypts data using RC4 algorithm. @param finalKey encryption key @param input stream containing data to encrypt @param output stream for encrypted data
1541 Returns the current FontProvider. Initializes with DefaultFontProvider if not already set. @return FontProvider instance
1542 Generates shaded triangles from a grid of coordinate-color pairs. @param patchCC 2D array of CoordinateColorPair objects @return List of ShadedTriangle objects representing the grid
1543 Creates a PDICCBased color space from an ICC array. @param iccArray ICC profile data @param resources PDF resources @return PDICCBased color space instance @throws IOException if there's an issue reading the ICC data
1544 Constructs a CoonsPatch with given points and colors. @param points array of control points defining the patch @param color 2D array representing colors at each point
1545 Processes a TextPosition, handling duplicates and diacritics. @param text TextPosition to process
1546 Processes a text position, handling overlapping and diacritic characters. @param text the TextPosition to process
1547 Converts COSString to Calendar. @param text COSString containing date information @return Calendar object or null if input is null
1548 Begins marked content with a specified tag. @param tag name of the content tag @throws IOException if an I/O error occurs
1549 Begins marked content with a tag and MCID. @param tag the COSName tag for marking content @param mcid non-negative mark identifier
1550 Sets a marked content point in PDF. @param tag COSName representing the tag for marking @throws IOException if an I/O error occurs
1551 Writes a COSString to an OutputStream. @param string the COSString to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
1552 Writes byte array to output stream. @param bytes data to write @param output destination stream @throws IOException if an I/O error occurs
1553 Initializes PDF graphics engine for a given page. @param page the PDPage to operate on
1554 Constructs a PDF marked content extractor.
1555 Initializes PDFTextStripperByArea without separating text by beads. @throws IOException if an I/O error occurs during initialization
1556 Retrieves object from a path in a PDF document. @param objPath path to the object, e.g., "Root/Names/Dests" @return COSBase object or null if not found
1557 Retrieves attribute value by name. @param attrName name of the attribute @return COSBase object representing the attribute value
1558 Retrieves attribute value by name. @param attrName name of the attribute @param defaultValue default value to return if attribute is not found @return COSBase object or default value if not present
1559 Checks if a specified object exists in the COS dictionary. @param name key of the object to check @return true if the object exists, false otherwise
1560 Retrieves an array of strings from a COSArray by name. @param name the key for the COSArray in the dictionary @return array of string names or null if not found
1561 Retrieves the name or array of names from a dictionary object. @param name key to look up in the dictionary @param defaultValue default value if not found @return String or array of Strings, or defaultValue if not applicable
1562 Retrieves a number or name from the dictionary. @param name key to look up in the dictionary @param defaultValue default value if not found @return float value if COSNumber, string value if COSName, or default value
1563 Retrieves a number or array of numbers from the COS dictionary. @param name key for the value in the COS dictionary @param defaultValue default float value if not found @return float or float[] if found, otherwise defaultValue or null
1564 Retrieves color gamma by name. @param name the key for the color gamma in the COS object @return PDGamma object or null if not found
1565 Creates a unique key in the given dictionary. @param kind type of resource dictionary @param prefix base string for the key @return COSName representing the unique key
1566 Sets an integer value at a specified index. @param index position in the list to update @param intVal integer value to set
1567 Parses a string to a COSNumber. @param number the string representation of the number @return COSNumber object representing the parsed number @throws IOException if the input is not a valid number
1568 Appends a kid with specified MCID. @param mcid Media Content Identifier, must be non-negative
1569 Returns the degrees as a COSBase integer. @return COSBase representation of degrees
1570 Parses a hexadecimal string from the source. @return COSString object representing the parsed hex string @throws IOException if input stream is closed or malformed
1571 Constructs a new PDRectangle with zero dimensions.
1572 Constructs a PDRectangle with specified width and height. @param width the width of the rectangle @param height the height of the rectangle
1573 Returns a rectangle defined by bounding box coordinates. @return PDRectangle object representing the bounding box
1574 Calculates the difference rectangle between bounding box and annotation rectangle. @return PDRectangle representing the difference or a default square if annotRect is null
1575 Adds padding to a rectangle. @param rectangle original rectangle @param padding amount of padding to add @return new PDRectangle with added padding
1576 Adjusts rectangle dimensions by specified differences. @param rectangle original PDRectangle to adjust @param differences array of four floats representing adjustments @return new PDRectangle with adjusted dimensions or original if invalid input
1577 Adjusts rectangle dimensions based on given differences. @param rectangle original PDRectangle to modify @param differences array of four floats representing adjustments @return new PDRectangle with applied differences or original if invalid input
1578 Applies padding to a rectangle. @param box original rectangle @param padding amount of padding to add @return new rectangle with applied padding
1579 Creates a PDF XRef stream. @param cosDocument document to create stream in
1580 Creates a new object stream in the given PDF document. @param document the PDF document to add the stream to @return PDObjectStream representing the created object stream
1581 Creates a PDStream from a PDDocument. @param document PDDocument object to create stream from
1582 Creates a PDStream from a COSDocument. @param document the COSDocument to create the stream from
1583 Initializes a PDF stream with the given document, input stream, and filters. @param doc PDF document to associate with the stream @param input source of data for the stream @param filters compression filters to apply @throws IOException if an I/O error occurs
1584 Creates a COSStream from an input stream. @param document PDDocument to create the stream in @param rawInput InputStream containing data for the stream @return COSStream object created from the input @throws IOException if I/O operations fail
1585 Encodes an input stream to an output stream. @param input source data stream @param encoded destination for encoded data @param parameters encoding settings @param index current processing index (unused)
1586 Default constructor for PDDefaultAttributeObject.
1587 Constructs a new PDUserAttributeObject with OWNER_USER_PROPERTIES as the owner.
1588 Default constructor for PDStandardAttributeObject.
1589 Constructs a new PDOutlineItem.
1590 Constructs a PDVariableText object. @param acroForm the PDAcroForm to associate with this variable text field
1591 Constructs a PDExportFormatAttributeObject from a COSDictionary. @param dictionary the COSDictionary to initialize with
1592 Returns the appearance stream for this object. @throws IllegalStateException if the entry is not an appearance stream
1593 Retrieves appearance subdictionary streams. @return Map of COSName to PDAppearanceStream objects @throws IllegalStateException if entry is not a subdictionary
1594 Creates an XObject from a COSBase object. @param base the COSBase object to convert @param resources resource dictionary @return PDXObject instance or throws IOException if unsupported type
1595 Adds a TrueType or OpenType font from a file. @param ttfFile the font file to add
1596 Constructs a PDShadingType6 instance. @param shadingDictionary COSDictionary containing shading details
1597 Constructs a PDShadingType7 from a COSDictionary. @param shadingDictionary dictionary containing shading details
1598 Retrieves a destination by name. @param name the destination name @return PDDestination object or null if not found @throws IOException if an error occurs during retrieval
1599 Retrieves the destination from the PDF object. @return PDDestination object representing the destination @throws IOException if an I/O error occurs during retrieval
1600 Retrieves destination from COS object. @return PDDestination object or null if not found @throws IOException if an I/O error occurs
1601 Retrieves the destination object. @return PDDestination object or null if not found @throws IOException if an I/O error occurs
1602 Retrieves destination from PDF COS object. @return PDDestination object or null if not found @throws IOException if an error occurs during retrieval
1603 Constructs a PDComboBox. @param acroForm PDF form containing the combo box @param field dictionary representing the combo box @param parent parent non-terminal field of the combo box
1604 Constructs a PDListBox from an existing PDF form. @param acroForm The form containing the list box. @param field The dictionary representing the list box field. @param parent The parent field of this list box.
1605 Creates a COSParser with specified parameters. @param source input stream for parsing @param password decryption password @param keyStore key store for encryption @param keyAlias alias of the key in the key store
1606 Creates an output stream. @return OutputStream instance @throws IOException if stream creation fails
1607 Writes byte data to a PDF appearance stream. @param data byte array containing the data to write @param appearanceStream the target PDF appearance stream @throws IOException if an I/O error occurs during writing
1608 Initializes a new PDAppearanceContentStream. @param appearance the appearance stream to write to @param compress true if the output should be compressed @throws IOException if an I/O error occurs
1609 Sets the text matrix for the current graphics state. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs
1610 Applies a transformation to the graphics context. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs during transformation
1611 Retrieves the bounding box of the PDF element. @return PDRectangle representing the bounding box or null if not set
1612 Retrieves the bounding box of the PDF object. @return PDRectangle representing the bounding box or null if not set
1613 Retrieves rectangle bounds of annotation. @return PDRectangle object or null if not found
1614 Retrieves the fringe rectangle of an annotation. @return PDRectangle representing the fringe or null if not set
1615 Retrieves the annotation's fringe rectangle. @return PDRectangle object representing the fringe or null if not set
1616 Retrieves the fringe rectangle from an annotation. @return PDRectangle representing the fringe or null if not set
1617 Retrieves the fringe rectangle from an annotation. @return PDRectangle object representing the fringe or null if not available
1618 Retrieves the font bounding box. @return PDRectangle representing the font's bounding box or null if not available
1619 Retrieves the font bounding box. @return PDRectangle representing the font's bounding box or null if not available
1620 Retrieves the bounding box of the PDF object. @return PDRectangle representing the bounding box or null if not set
1621 Retrieves the bounding box of the PDF object. @return PDRectangle representing the bounding box or null if not set
1622 Returns the bounding box of the content stream. @return PDRectangle representing the bounding box or null if not defined
1623 Retrieves the rectangle from the dictionary. @return PDRectangle object or null if invalid data
1624 Retrieves rectangle difference. @return PDRectangle object or null if not found
1625 Retrieves rectangle difference from PDF object. @return PDRectangle representing the difference or null if not present
1626 Retrieves the bounding box of the PDF object. @return PDRectangle representing the bounding box or null if not available
1627 Retrieves rectangle from bead. @return PDRectangle object or null if not found
1628 Sets the line dash pattern. @param array COSArray representing dash pattern @param phase offset of the pattern
1629 Retrieves line dash pattern from dictionary. @return PDLineDashPattern object or null if not found
1630 Creates a stencil image from a PDF image. @param pdImage source PDF image @param paint fill color for the stencil @return BufferedImage with applied stencil or null on error
1631 Retrieves matrix representation. @return Matrix object from COS dictionary
1632 Retrieves matrix from COS object. @return Matrix object created from dictionary entry
1633 Retrieves a Matrix object from the COSObject's dictionary. @return Matrix object or null if not found
1634 Retrieves inheritable attribute from a PDF dictionary. @param node current dictionary node @param key attribute key to search for @return COSBase value of the attribute or null if not found
1635 Retrieves boolean value from dictionary by key. @param key the COSName key to look up @param defaultValue default boolean value if key not found @return boolean value or default if key is null
1636 Retrieves integer value associated with a COSName key. @param key the COSName key to look up @param defaultValue default integer value if key is not found @return the integer value or default if key is missing
1637 Retrieves integer value by keys. @param firstKey primary key @param secondKey secondary key @return integer value or -1 if not found
1638 Initializes a PDInlineImage with given parameters, data, and resources. @param parameters dictionary containing image parameters @param data raw byte data of the image @param resources associated resources for the image @throws IOException if an error occurs during decoding
1639 Determines file suffix based on image filters. @return appropriate file suffix ("jpg", "tiff", or "png")
1640 Retrieves COS objects by specified types. @param type1 first object type to filter @param type2 second object type to filter @return list of COSObject matching the given types
1641 Converts an integer code to its Unicode string representation. @param code integer representing the Unicode code point @return Unicode string representation of the code point
1642 Checks if the document is encrypted. @return true if the document is encrypted, false otherwise
1643 Parses an FDF file and returns a FDFDocument object. @return FDFDocument representing the parsed FDF data @throws IOException if parsing fails
1644 Retrieves the PDF acroform with default fixups applied. @return PDAcroForm object representing the form in the document
1645 Retrieves a PDColorSpace by name. @param name the COSName of the colorspace @param wasDefault true if used as default colorspace @return PDColorSpace object or null if not found @throws IOException if an error occurs during retrieval
1646 Checks if a color space with the given name exists. @param name the COSName of the color space @return true if the color space exists, false otherwise
1647 Retrieves an extended graphics state by name. @param name the name of the extended graphics state @return PDExtendedGraphicsState object or null if not found
1648 Checks if the given name is an XObject image. @param name PDF object name to check @return true if it's an image XObject, false otherwise
1649 Retrieves color space names. @return Iterable of COSName objects representing color spaces
1650 Retrieves XObject names. @return Iterable of COSName representing XObjects
1651 Retrieves font names. @return Iterable of COSName containing font names
1652 Retrieves property names. @return Iterable of COSName representing property names
1653 Retrieves shading names. @return Iterable of COSName objects representing shading names
1654 Retrieves pattern names. @return Iterable of COSName objects representing pattern names
1655 Retrieves external graphics state names. @return iterable of COSName objects representing ext G states
1656 Retrieves standard crypt filter dictionary. @return PDCryptFilterDictionary instance or null if not found
1657 Retrieves the default cryptographic filter dictionary. @return PDCryptFilterDictionary object representing the default settings
1658 Retrieves character procedure for a given code. @param code character encoding code @return PDType3CharProc object or null if not found
1659 Retrieves rollover appearance entry. @return PDAppearanceEntry for rollover state or normal state if not found
1660 Retrieves the appearance for a down state. @return PDAppearanceEntry object or normal appearance if not found
1661 Retrieves the first child outline item. @return PDOutlineItem representing the first child or null if none exists
1662 Retrieves the last child outline item. @return PDOutlineItem representing the last child or null if none exists
1663 Retrieves the digital signature. @return PDSignature object representing the signature
1664 Retrieves value by index from a tree node. @param index the key to search for @return the associated COSObjectable or null if not found @throws IOException if an I/O error occurs
1665 Returns the number of output parameters. @return Number of output parameters or 0 if none
1666 Retrieves the PDRange for a given output index. @param n index of the output @return PDRange object representing the range
1667 Clips input values to specified ranges. @param inputValues array of input values to be clipped @return array of clipped values
1668 Returns the number of input parameters. @return count of input parameters
1669 Retrieves domain range for input index. @param n index of the domain range @return PDRange object representing the domain
1670 Calculates the sample index for a given vector. @param vector input integer array representing the vector @return calculated sample index as an integer
1671 Retrieves the decode range for a specific parameter. @param paramNum index of the parameter @return PDRange object representing the decode range or null if not available
1672 Retrieves encoding range for a parameter. @param n index of the parameter @return PDRange object representing the encoding range
1673 Checks if the top attachment is present. @return true if top is attached, false otherwise
1674 Checks if the bottom attachment is enabled. @return true if bottom is attached, false otherwise
1675 Checks if the left attachment is active. @return true if left attachment is attached, false otherwise
1676 Checks if the "Right" attachment is present. @return true if "Right" is attached, false otherwise
1677 Initializes a PDCIDFont with a dictionary and parent font. @param fontDictionary the COSDictionary containing font data @param parent the PDType0Font that contains this CID font
1678 Initializes DictionaryEncoding with a given COSDictionary. @param fontEncoding the COSDictionary containing font encoding information
1679 Initializes DictionaryEncoding with given font encoding. @param fontEncoding the COSDictionary containing font encoding information @param isNonSymbolic flag indicating if the font is non-symbolic @param builtIn the built-in Encoding for symbolic fonts
1680 Initializes a ShadingContext with given parameters. @param shading PDShading object representing the shading @param cm ColorModel for rendering @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if an I/O error occurs during initialization
1681 Retrieves the decode range for a specific parameter. @param paramNum index of the parameter @return PDRange object or null if not available
1682 Reads and returns signed content from a PDF file. @param pdfFile InputStream of the PDF file @return byte array containing signed content @throws IOException if an I/O error occurs
1683 Extracts signed content from a PDF file. @param pdfFile byte array of the PDF file @return byte array containing signed content or empty if none found @throws IOException if an I/O error occurs
1684 Retrieves the revision number from the dictionary. @return The revision number as a long value.
1685 Retrieves the minimum revision number. @return minimum revision as a long value
1686 Creates a view for reading with optional filtering. @return RandomAccessRead instance @throws IOException if an I/O error occurs
1687 Retrieves a floating-point number from the COSObject by key. @param name the key of the number to retrieve @return the float value associated with the key, or default if not found
1688 Retrieves conversion factor from COS object. @return float value of conversion factor or default if not found
1689 Retrieves the leader line length. @return Length of the leader line as a float
1690 Retrieves the leader line extension value. @return float representing leader line extension
1691 Retrieves the leader line offset. @return float value representing the leader line offset
1692 Retrieves the 'V' value from the dictionary. @return the float value associated with 'V'
1693 Retrieves the CYX value from the COS object. @return float representing the CYX value
1694 Retrieves a floating-point number from the COS object. @param name key for the number in the COS object @param defaultValue value to return if the key is not found @return float value associated with the key or default value
1695 Retrieves intensity value. @return float representing intensity or 0 if not found
1696 Computes font height for a given PDFont. @param font the PDFont object @return computed font height in text space
1697 Returns default position vector for CID. @param cid content identifier @return Vector with x as half width and y from dw2 array
1698 Retrieves properties for a given name. @param name the key to fetch properties @return PDPropertyList containing properties or null if not found
1699 Retrieves optional content properties. @return PDPropertyList object or null if not present
1700 Retrieves optional content properties. @return PDPropertyList object or null if not found
1701 Retrieves OCGs from the dictionary. @return List of PDPropertyList objects representing OCGs
1702 Retrieves optional content properties. @return PDPropertyList object or null if not present
1703 Validates and corrects XRef offsets using brute force if necessary. @throws IOException if an I/O error occurs during validation or correction
1704 Saves data to a file. @param fileName the File object representing the destination @throws IOException if an I/O error occurs
1705 Removes an object from the list. @param o object to be removed @return true if object is successfully removed, false otherwise
1706 Removes an element at the specified index. @param index position of the element to remove @return removed element @throws UnsupportedOperationException if list is filtered
1707 Removes an object from the list, handling nested COSObjects. @param o the object to remove @return true if the object was successfully removed, false otherwise
1708 Removes a user property from the document. @param userProperty the property to remove
1709 Removes a subject from the document's metadata. @param subject byte array representing the subject to remove
1710 Removes a key usage extension from the dictionary. @param keyUsageExtension the key usage extension to remove
1711 Removes an issuer from the document's issuer list. @param issuer byte array representing the issuer to remove
1712 Removes OID from the dictionary. @param oid byte array representing the OID to be removed
1713 Clears all entries from both maps.
1714 Removes an entry by key from both maps. @param key unique identifier for the entry @return value associated with the removed key, or null if not found
1715 Collects and updates dictionary entries based on their update state. @param dictionary the COSDictionary to process @return true if child entries demand parent update, false otherwise
1716 Collects and processes a COSObject. @param object the COSObject to collect @return true if collection is needed, otherwise false
1717 Sets the origin document state. @param originDocumentState new state to be set
1718 Retrieves the upper limit from a COSArray. @return String representation of the upper limit or null if not found
1719 Retrieves the lower limit from a COSArray. @return String representing the lower limit or null if not found
1720 Retrieves a named string value from the COS object. @param name key of the string to retrieve @return string value associated with the name, or null if not found
1721 Retrieves rendering intent from dictionary. @return RenderingIntent object or null if not found
1722 Returns the name associated with key "N". @return Name string or empty if not found
1723 Retrieves string value by key with default. @param key PDF key as string @param defaultValue fallback value if key not found @return string value or default if missing
1724 Retrieves the guideline style as a string. @return "solid" if the guideline is solid; otherwise, default value
1725 Retrieves the icon name of the annotation. @return The icon name as a string or null if not found.
1726 Retrieves attachment name. @return Name of the attachment as a string
1727 Retrieves line ending style. @return line ending style as string or default if not set
1728 Retrieves the highlight mode. @return Highlight mode as a string or default value if not set
1729 Retrieves the reply type from the COS object. @return Reply type as a string or default value if not found
1730 Retrieves the name from the COS object. @return The name as a string or null if not found
1731 Retrieves the name from the COSObject. @return The name as a String or null if not found.
1732 Retrieves the highlighting mode for the annotation. @return The highlighting mode as a string, default is "I" if not specified.
1733 Retrieves the style of the object. @return String representing the style, defaulting to "Solid"
1734 Retrieves the type of the object. @return The type as a string, defaulting to "ExData" if not specified
1735 Retrieves the style of the transition effect. @return The name of the transition style as a string
1736 Retrieves the dimension value from the COS object. @return the dimension as a string or default if not present
1737 Retrieves motion transition effect. @return motion effect as string or null if not set
1738 Retrieves non-full screen page mode preference. @return page mode as string or default if not set
1739 Retrieves the reading direction preference. @return String representing the reading direction (e.g., "L2R" for left-to-right)
1740 Retrieves the view area setting. @return the current view area as a string
1741 Retrieves view clip setting from preferences. @return view clip as string or default boundary if not set
1742 Retrieves print area setting. @return String representation of print area or default boundary if not set
1743 Retrieves print clip setting. @return String representation of print clip boundary or default crop box if not set
1744 Retrieves print scaling preference. @return current print scaling setting as string, default if not set
1745 Checks and validates XRef offset. @param startXRefOffset initial offset to check @return validated offset or -1 if invalid @throws IOException on I/O errors
1746 Checks if the collection has only one entry, which is the owner. @return true if empty under specified condition, false otherwise
1747 Retrieves the parent structure node. @return PDStructureNode object or null if no parent exists
1748 Creates an object from a given PDF base element. @param kid PDF base element @return created object or null if unsupported type
1749 Initializes PDEncryption with a COSDictionary. @param dictionary PDF encryption dictionary
1750 Retrieves the security handler. @return SecurityHandler object configured with ProtectionPolicy @throws IOException if no security handler is available for the filter
1751 Retrieves annotations from the FDF document. @return List of FDFAnnotation objects or null if none exist @throws IOException if an I/O error occurs
1752 Checks if character set matches between CID system info and font info. @param cidSystemInfo CID system information to compare @param info font information containing character set details @return true if character sets match, false otherwise
1753 Checks if the channel is an N-channel. @return true if attributes are not null and it's an N-channel, false otherwise
1754 Retrieves the open action from a PDF document. @return PDDestinationOrAction object representing the open action, or null if not present @throws IOException if an error occurs while reading the PDF
1755 Retrieves an action from the field's COS dictionary. @return PDAction object created from the "A" entry in the COS dictionary
1756 Retrieves JavaScript actions from document dictionary. @return Map of named JavaScript actions or null if none exist
1757 Retrieves and creates an action from the 'F' entry. @return PDAction object or null if not found
1758 Retrieves the "E" action from the dictionary. @return PDAction object or null if not found
1759 Retrieves action associated with 'X'. @return PDAction object or null if not found
1760 Retrieves action dictionary and creates PDAction. @return PDAction object or null if not found
1761 Retrieves the "U" action from the document's actions. @return PDAction object or null if not found
1762 Retrieves FO action from dictionary. @return PDAction object or null if not found
1763 Retrieves a PDAction object from the "BL" entry. @return PDAction object or null if not found
1764 Retrieves the "Print" action from PDF document. @return PDAction object representing print action or null if not present
1765 Retrieves the PC action from the document. @return PDAction instance or null if not present
1766 Retrieves the action associated with the "PV" key. @return PDAction object or null if not found
1767 Retrieves and creates a PDAction object from the PI dictionary. @return PDAction object or null if the PI dictionary is not found
1768 Retrieves the WC action. @return PDAction object or null if not found
1769 Retrieves a web search action from the document. @return PDAction object representing the web search or null if not found
1770 Retrieves DS action from PDF document. @return PDAction object or null if not found
1771 Retrieves WP action from document. @return PDAction object or null if not found
1772 Retrieves the DP action from the document. @return PDAction object or null if not found
1773 Retrieves action associated with key 'K'. @return PDAction object or null if not found
1774 Retrieves an action associated with key 'F'. @return PDAction object or null if not found
1775 Retrieves action associated with key 'V'. @return PDAction object or null if not found
1776 Retrieves action associated with 'C' key. @return PDAction object or null if not found
1777 Retrieves the O action from the actions dictionary. @return PDAction object or null if not found
1778 Retrieves an action from the dictionary. @return PDAction object or null if not found
1779 Retrieves an action from the PDF object. @return PDAction object or null if no action is found
1780 Retrieves an action from the PDF dictionary. @return PDAction object or null if not found
1781 Retrieves an action associated with the PDF object. @return PDAction instance or null if no action is found
1782 Retrieves string value of a property by key. @param propertyKey unique identifier for the property @return String value of the property or null if not found
1783 Retrieves custom metadata value by field name. @param fieldName the key of the metadata field @return the value associated with the field, or null if not found
1784 Retrieves string value by name from COS object. @param name key for the string value @return string value associated with the key, or null if not found
1785 Retrieves the base string from the COS object. @return The base string value or null if not present
1786 Retrieves version information. @return Version string from dictionary
1787 Retrieves units from COS object. @return units as string or null if not present
1788 Retrieves a string value from a PDF dictionary. @param key the key associated with the desired string value @param defaultValue the default value to return if the key is not found @return the string value or the default value if the key does not exist
1789 Retrieves a string value from an embedded dictionary. @param embedded name of the embedded dictionary @param key name of the key to retrieve the string for @param defaultValue default value if key is not found @return string value or default if not found
1790 Retrieves the operation type from parameters. @return operation type as a string, defaulting to "Open"
1791 Retrieves default appearance string from dictionary. @return default appearance as String or empty if not found
1792 Retrieves a filename using various methods. @return the first non-null filename found, or null if all fail
1793 Checks if a group exists by name. @param groupName the name of the group to check @return true if the group exists, false otherwise
1794 Constructs the fully qualified name by combining with parent's name. @return String representing the fully qualified name
1795 Retrieves export values of options. @return List of option export values
1796 Encrypts or decrypts data using specified algorithms. @param objectNumber unique identifier for the encryption context @param genNumber generation number for key calculation @param data input stream containing data to process @param output output stream for processed data @param decrypt true if decrypting, false if encrypting @throws IOException if an I/O error occurs during processing
1797 Computes encrypted key based on encryption revision. @param password user's password @param o owner entry bytes @param u user entry bytes @param oe owner encryption entry bytes @param ue user encryption entry bytes @param permissions access permissions @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes length of the encryption key in bytes @param encryptMetadata flag to encrypt metadata @param isOwnerPassword true if owner password, false otherwise @return encrypted key as byte array @throws IOException on I/O error during computation
1798 Checks if the given password matches the user or owner permissions. @param password user-provided password to check @param user user identifier @param owner owner identifier @param permissions permission level required @param id unique document identifier @param encRevision encryption revision used @param keyLengthInBytes length of the encryption key in bytes @param encryptMetadata flag indicating if metadata is encrypted @return true if password matches, false otherwise @throws IOException if unknown encryption revision is encountered
1799 Finds a FontBoxFont by format and PostScript name. @param format font format type @param postScriptName unique PostScript name of the font @return FontBoxFont object or null if not found
1800 Converts COSString to Calendar. @param text COSString containing date information @return Calendar object or null if input is null
1801 Writes a COSString to an OutputStream followed by a space. @param output the OutputStream to write to @param cosString the COSString to write
1802 Displays text using the current font and mode. @param text string to be displayed @throws IOException if an I/O error occurs
1803 Initializes a PageDrawer with specified parameters. @param parameters configuration for drawing the page @throws IOException if an I/O error occurs during initialization
1804 Retrieves the color associated with the 'C' key. @return PDColor object or null if not found
1805 Retrieves the border color. @return PDColor representing the border color
1806 Retrieves the background color. @return PDColor representing the background color
1807 Sets the third element of the array to the specified value. @param high the new value for the third element
1808 Sets the page number in the array. @param pageNumber the page number to set
1809 Parses a COS string from the input source. @return COSString object parsed from the source @throws IOException if parsing fails due to invalid format or I/O error
1810 Extracts contents from a PDF file using byte range. @param pdfFile input stream of the PDF file @return byte array containing extracted contents @throws IOException if an I/O error occurs
1811 Extracts contents from a PDF file. @param pdfFile byte array of the PDF file @return extracted contents as byte array @throws IOException if an I/O error occurs
1812 Constructs an immutable rectangle with specified dimensions. @param width the width of the rectangle @param height the height of the rectangle
1813 Retrieves the bounding box rectangle. @return PDRectangle representing the bounding box
1814 Initializes metadata for a PDF document. @param document the PDF document to associate with the metadata
1815 Creates an embedded file in a PDF document. @param document the PDF document to add the embedded file to
1816 Initializes a PDXObject with a document and subtype. @param document the PDF document to associate with @param subtype the XObject subtype
1817 Constructs an image from a PDF document. @param document the source PDF document
1818 Creates a PDStream from an input stream. @param doc parent document @param input source input stream @throws IOException if there's an I/O error
1819 Creates a PDStream with specified document, input stream, and filter. @param doc PDDocument to associate the stream with @param input InputStream containing data for the stream @param filter COSName representing the filter applied to the stream @throws IOException if an I/O error occurs
1820 Constructs a PDStream with specified document, input stream, and filters. @param doc PDDocument to associate the stream with @param input InputStream containing the stream data @param filters COSArray of filters to apply to the stream
1821 Constructs a PDImageXObject from an encoded stream. @param document the PDDocument to associate with this image @param encodedStream the input stream containing encoded image data @param cosFilter the COSBase filter for the image @param width the width of the image in pixels @param height the height of the image in pixels @param bitsPerComponent the number of bits per color component @param initColorSpace the initial PDColorSpace for the image @throws IOException if an I/O error occurs
1822 Initializes a new PDLayoutAttributeObject with OWNER_LAYOUT as owner.
1823 Constructs a new PDListAttributeObject with OWNER_LIST as the owner.
1824 Constructs a new PDPrintFieldAttributeObject with OWNER_PRINT_FIELD as owner.
1825 Constructs a new PDTableAttributeObject and sets its owner to OWNER_TABLE.
1826 Creates a PDAttributeObject based on the dictionary's owner type. @param dictionary COSDictionary containing attribute data @return PDAttributeObject instance or default if unknown type
1827 Retrieves the normal appearance stream. @return PDAppearanceStream object or null if not found
1828 Retrieves the ON value from the first widget's appearance dictionary. @return The ON value as a string, or an empty string if not found.
1829 Retrieves the transparency group. @return PDTransparencyGroup object or null if not found @throws IOException if an I/O error occurs
1830 Finds the page destination for a named destination. @param namedDest named destination to find @return PDPageDestination object or null if not found @throws IOException if an I/O error occurs
1831 Constructs a COSParser with specified source. @param source RandomAccessRead object containing PDF data
1832 Constructs a PDF parser with optional encryption handling. @param source input stream for the PDF file @param decryptionPassword password to decrypt encrypted PDFs @param keyStore key store for certificate-based decryption @param alias alias of the key in the key store
1833 Initializes PDAppearanceContentStream with given appearance and output stream. @param appearance PDF appearance stream to use @throws IOException if an I/O error occurs during initialization
1834 Initializes a new content stream for a PDF form. @param form the form object to write content to @throws IOException if an I/O error occurs
1835 Initializes content stream for an appearance. @param doc PDF document @param appearance appearance stream to write to @throws IOException if I/O error occurs
1836 Initializes content stream for tiling pattern. @param pattern PDTilingPattern object to process @throws IOException if an I/O error occurs
1837 Draws an arrow on a PDF. @param cs content stream for drawing @param x starting x-coordinate @param y starting y-coordinate @param len length of the arrow line
1838 Draws a shape with specified line width and options for stroke and fill. @param lineWidth thickness of the shape's outline @param hasStroke whether to apply a stroke @param hasFill whether to apply a fill @throws IOException if an I/O error occurs during drawing
1839 Draws a diamond shape. @param cs content stream for drawing @param x center x-coordinate @param y center y-coordinate @param r radius of the diamond @throws IOException if an I/O error occurs
1840 Draws a circle on the PDF canvas. @param cs content stream for drawing @param x center x-coordinate @param y center y-coordinate @param r radius of the circle @throws IOException if an I/O error occurs
1841 Draws a circle on the given content stream. @param cs content stream to draw on @param x center x-coordinate @param y center y-coordinate @param r radius of the circle
1842 Draws a paperclip icon using PDF graphics. @param contentStream the stream to draw on @throws IOException if an I/O error occurs
1843 Sets line width on demand, skipping default value. @param lineWidth desired line width @throws IOException if an I/O error occurs
1844 Generates a BufferedImage from a tiling pattern. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param colorSpace PDColorSpace for rendering colors @param color PDColor for rendering the pattern @param xform AffineTransform for scaling and positioning @param anchorRect Rectangle2D defining the area to render @return BufferedImage of the rendered tiling pattern
1845 Calculates the anchor rectangle for a tiling pattern. @param pattern the PD TilingPattern object @return Rectangle2D representing the scaled bounding box @throws IOException if /BBox or other required properties are missing
1846 Retrieves stencil image using specified paint. @param paint the paint to apply to the stencil @return BufferedImage of the stencil with applied paint @throws IOException if an I/O error occurs
1847 Retrieves raw raster data from a PDF image. @param pdImage the PDF image object @return WritableRaster containing pixel data @throws IOException if image is empty or invalid dimensions
1848 Converts a PDF image to a BufferedImage. @param pdImage the PDF image object @param region the region of interest in the image @param subsampling factor for downsampling @param colorKey color mask array (optional) @return BufferedImage representation of the PDF image @throws IOException if image processing fails
1849 Retrieves resources from a PDF page. @return PDResources object containing page resources
1850 Retrieves the media box of the page. @return PDRectangle representing the media box or default U.S. Letter if not found
1851 Retrieves the rotation angle of a PDF page. @return Rotation angle in degrees, multiples of 90, or 0 if not set
1852 Retrieves boolean value for given key. @param key configuration key @param defaultValue default boolean value if key not found @return boolean value associated with key or default value
1853 Checks if the field is volatile. @return true if the field is marked as volatile, false otherwise
1854 Checks if the object is hidden. @return true if hidden, false otherwise
1855 Checks if metadata encryption is enabled. @return true if metadata encryption is enabled, false otherwise
1856 Retrieves the caption status. @return true if caption is enabled, false otherwise
1857 Determines if content should scale to fit annotation. @return true if scaling is enabled, false otherwise
1858 Determines if renaming is enabled. @return true if renaming is enabled, false otherwise
1859 Checks if the PDF document is isolated. @return true if the document is isolated, false otherwise
1860 Checks if the document is a knockout. @return true if the document is a knockout, false otherwise
1861 Retrieves anti-aliasing setting. @return true if anti-aliasing is enabled, false otherwise
1862 Retrieves stroking overprint control setting. @return true if enabled, false otherwise
1863 Retrieves automatic stroke adjustment setting. @return true if enabled, false otherwise
1864 Retrieves the alpha source flag. @return true if alpha source is enabled, false otherwise
1865 Retrieves the text knockout flag. @return true if text knockout is enabled, false otherwise
1866 Retrieves the 'H' action flag. @return true if 'H' is set, false otherwise
1867 Checks if the action is synchronous. @return true if the action is synchronous, false otherwise
1868 Retrieves repeat status from an action. @return true if repeat is enabled, false otherwise
1869 Retrieves the mix flag. @return true if mix is enabled, false otherwise
1870 Checks if the PDF object has a caption. @return true if the PDF object has a caption, false otherwise
1871 Checks if the document is open. @return true if the document is open, false otherwise
1872 Retrieves pre-release status. @return true if pre-release is enabled, false otherwise
1873 Gets non-EFont warning status. @return boolean indicating if warnings are disabled for non-EFonts
1874 Retrieves trusted mode status. @return true if trusted mode is enabled, false otherwise
1875 Checks if appearance streams are needed. @return true if appearances are required, false otherwise
1876 Checks if the fly area is opaque. @return true if the fly area is opaque, false otherwise
1877 Determines if the toolbar is hidden. @return true if toolbar is hidden, false otherwise
1878 Retrieves the preference to hide the menubar. @return true if the menubar should be hidden, false otherwise
1879 Checks if window UI should be hidden. @return true if window UI is hidden, false otherwise
1880 Checks if window fitting is enabled. @return true if window fitting is enabled, false otherwise
1881 Checks if window should be centered. @return true if center window preference is enabled, false otherwise
1882 Retrieves display document title preference. @return true if document title should be displayed, false otherwise
1883 Retrieves an integer value from a dictionary. @param embeddedDictionary the dictionary to search within @param key the key for the integer value @param defaultValue default value if key not found @return the integer value or defaultValue if not present
1884 Retrieves an integer value by key. @param key the key associated with the integer value @return the integer value or -1 if not found
1885 Retrieves an integer value from the dictionary using a specified key. @param key the COSName key to look up in the dictionary @return the integer value associated with the key, or -1 if not found
1886 Retrieves an integer value from a PDF dictionary. @param key the key associated with the integer value @param defaultValue default value to return if the key is not found @return the integer value or the default value if not present
1887 Checks if a specific bit flag is set in a PDF form field. @param field the COSName of the form field to check @param bitFlag the bit flag to verify @return true if the bit flag is set, false otherwise
1888 Retrieves the count value from the root dictionary. @return integer count or 0 if not present
1889 Retrieves the start index from the root. @return the start index as an integer, defaulting to 1 if not found
1890 Retrieves the order value from the COS object. @return the order integer, defaulting to 1 if not set
1891 Retrieves the revision number of the PDF document. @return the revision number as an integer, defaulting to 0 if not specified
1892 Retrieves the length value from the dictionary. @return the length as an integer, defaulting to 40 if not specified
1893 Retrieves the version number from the dictionary. @return version number as an integer, defaulting to 0 if not found
1894 Retrieves the length value from the dictionary. @return the length value, defaulting to 40 if not specified
1895 Retrieves the revision number from the dictionary. @return revision number or default version if not found
1896 Retrieves permissions value from dictionary. @return integer representing permissions or default value 0 if not found
1897 Retrieves justification value from annotation. @return justification as string or empty if none
1898 Retrieves document flags. @return integer value of document flags
1899 Creates a PDAbstractPattern instance based on the dictionary. @param dictionary PDF dictionary containing pattern details @param resourceCache cache for resources used in pattern creation @return PDAbstractPattern object or throws IOException if unknown type
1900 Retrieves the paint type from the COS object. @return integer representing the paint type or 0 if not set
1901 Retrieves tiling type from COS object. @return integer representing tiling type or default value 0
1902 Creates a PDShading object based on the provided dictionary. @param shadingDictionary COSDictionary containing shading details @return PDShading object or throws IOException for unknown types
1903 Retrieves bits per flag. @return integer value of bits per flag or -1 if not found
1904 Retrieves vertices per row. @return number of vertices per row or -1 if not specified
1905 Retrieves the number of bits per color component. @return int value representing bits per component or -1 if not set
1906 Retrieves the number of bits per coordinate. @return int value representing bits per coordinate
1907 Retrieves flags associated with an action. @return integer value of flags or 0 if not set
1908 Retrieves action flags. @return integer value representing action flags
1909 Retrieves page number from dictionary. @return page number or -1 if not found
1910 Retrieves annotation index from dictionary. @return annotation index or -1 if not found
1911 Retrieves annotation flags. @return integer representing annotation flags
1912 Retrieves the integer value of 'Q' from the COS object. @return the integer value of 'Q', defaulting to 0 if not found
1913 Retrieves the rotation value. @return integer representing rotation in degrees
1914 Checks if timestamp is required. @return true if timestamp is required, false otherwise
1915 Retrieves the open count of the COS object. @return The integer value of the open count, defaulting to 0 if not set.
1916 Retrieves the 'Q' value from the dictionary. @return integer value associated with 'Q', default is 0 if not found
1917 Retrieves the top index from the COS object. @return integer value of the top index or 0 if not set
1918 Retrieves COS objects by specified type. @param type PDF object type to filter by @return List of COSObject matching the type
1919 Removes page-specific resources from the cache.
1920 Retrieves color space by name. @param name COSName of the color space @return PDColorSpace object @throws IOException if an error occurs during retrieval
1921 Retrieves an embedded file from the PDF document. @return PDEmbeddedFile object or null if not found
1922 Retrieves embedded file associated with DOS. @return PDEmbeddedFile object or null if not found
1923 Retrieves embedded file for Mac. @return PDEmbeddedFile object or null if not found
1924 Retrieves embedded file for UNIX. @return PDEmbeddedFile object or null if not found
1925 Retrieves embedded file using Unicode key. @return PDEmbeddedFile object or null if not found
1926 Constructs an AxialShadingContext. @param shading PDShadingType2 object @param colorModel Color model for rendering @param xform Transformation matrix @param matrix Additional transformation matrix @param deviceBounds Device bounds rectangle @throws IOException if an I/O error occurs
1927 Constructs a RadialShadingContext. @param shading PDShadingType3 object @param colorModel Color model for shading @param xform XForm transformation matrix @param matrix Matrix defining the shading space to device space @param deviceBounds Device bounds rectangle @throws IOException if an I/O error occurs
1928 Initializes a triangle-based shading context. @param shading PDShading object for shading details @param cm ColorModel for color management @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if an I/O error occurs
1929 Initializes a Type1ShadingContext with specified parameters. @param shading PDShadingType1 object representing the shading @param colorModel ColorModel for rendering @param xform Transformation matrix for device space @param matrix Additional transformation matrix @throws IOException if an I/O error occurs
1930 Initializes a PDFObjectStreamParser with the given COSStream and document. @param stream PDF object stream to parse @param document parent PDF document @throws IOException if required entries are missing or invalid
1931 Constructs a PDCIDFontType0 from a font dictionary and parent font. @param fontDictionary the font dictionary @param parent the parent PDType0Font @throws IOException if an I/O error occurs
1932 Constructs a PDCIDFontType2 font. @param fontDictionary PDF dictionary for the font @param parent PDType0Font parent font @param trueTypeFont TrueTypeFont instance, if available @throws IOException if font cannot be read or parsed
1933 Reads a CMap from a COSBase object. @param base the COSBase object containing the CMap data @return a CMap object @throws IOException if an I/O error occurs or the base is neither a COSName nor a COSStream
1934 Writes the document body, handling encryption if present. @param doc PDF document to process @throws IOException on I/O errors
1935 Saves data to a file. @param fileName name of the file to save to @throws IOException if an I/O error occurs
1936 Collects and processes a COSBase object. @param base the COSBase object to process @return true if collected, false otherwise
1937 Sets the document trailer dictionary. @param newTrailer the new trailer dictionary to be set
1938 Updates the object and sets origin document state for specific child. @param child the child object to be updated
1939 Retrieves value by name from a tree structure. @param name key to search for in the tree @return associated value or null if not found @throws IOException if an I/O error occurs during retrieval
1940 Retrieves a named value as a string from the COS object. @param name key of the value to retrieve @param defaultValue default value if the key is not found @return the string value associated with the key or the default value
1941 Retrieves the style of an element. @return The style as a string, defaulting to "Solid" if not specified.
1942 Retrieves the structure tree root. @return PDStructureTreeRoot object or null if not found
1943 Retrieves child objects from a PDF dictionary. @return List of child objects or empty list if none found
1944 Returns the PDF encryption settings. Initializes encryption if not already set and document is encrypted. @return PDEncryption object or null if document is not encrypted
1945 Prepares the document for decryption. @throws IOException if an I/O error occurs during decryption setup
1946 Reads and processes font encoding. @throws IOException if required CMap is missing or invalid
1947 Repairs the length of the first segment in a byte array. @param bytes the input byte array @param length1 initial length of the first segment @return corrected length of the first segment
1948 Validates and repairs Length2 for byte array. @param bytes input byte array @param length1 first length value @param length2 second length value to validate @return corrected Length2 or recalculated if invalid
1949 Retrieves fractional display setting. @return string representation of fractional display or default value
1950 Retrieves thousands separator from COS object. @return string representing thousands separator or default comma
1951 Retrieves the decimal separator. @return decimal separator string or "." if not specified
1952 Retrieves the label prefix string from the COS object. @return The label prefix string or an empty space if not found.
1953 Retrieves label suffix string from COS object. @return Suffix string or empty space if not found
1954 Retrieves label position to value mapping. @return string representing the mapping or default if not found
1955 Retrieves embedded string value. @param embedded name of the embedded object @param key key to retrieve the string from @return embedded string or null if not found
1956 Generates a priority queue of font matches based on descriptor and CID system info. @param fontDescriptor PDFontDescriptor object containing font details @param cidSystemInfo PDCIDSystemInfo object for character set matching @return PriorityQueue of FontMatch objects sorted by score
1957 Checks if the provided owner password matches for given encryption revision. @param ownerPassword byte array of the owner password to check @param user byte array representing the user data @param owner byte array representing the owner data @param permissions permission level for the document @param id byte array of the document ID @param encRevision encryption revision number @param keyLengthInBytes length of the encryption key in bytes @param encryptMetadata flag indicating if metadata is encrypted @return true if the password matches, false otherwise @throws IOException if an I/O error occurs or unknown encryption revision
1958 Parses a sequence of instructions from given text. @param text source containing instructions @return InstructionSequence object representing parsed instructions
1959 Decrypts a PDF stream. @param stream the COSStream to decrypt @param objNum object number of the stream @param genNum generation number of the stream @throws IOException if an I/O error occurs
1960 Encrypts a PDF stream. @param stream the COSStream to encrypt @param objNum object number of the stream @param genNum generation number of the stream @throws IOException if encryption fails
1961 Decrypts a COSString using encryption details. @param string the encrypted COSString @param objNum object number for decryption context @param genNum generation number for decryption context @return decrypted COSBase object or original if decryption fails
1962 Encrypts a string using specified object number and generation number. @param string the input string to be encrypted @param objNum the object number for encryption context @param genNum the generation number for encryption context @return encrypted COSString @throws IOException if an I/O error occurs during encryption
1963 Checks if the provided password matches the user's encrypted data. @param password user-provided password to validate @param user user data array @param owner owner data array @param permissions user permissions level @param id unique identifier for the encryption key @param encRevision encryption revision number @param keyLengthInBytes length of the encryption key in bytes @param encryptMetadata flag indicating if metadata is encrypted @return true if password matches, false otherwise @throws IOException if an I/O error occurs
1964 Finds FontBoxFont by PostScript name. @param postScriptName the font's PostScript name @return FontBoxFont object or null if not found
1965 Writes a page with formatted text. Handles sorting, spacing, and layout of text positions.
1966 Retrieves a date from the dictionary using a specified key. @param key the key for the date value @return Calendar object representing the date, or null if not found or not a COSString
1967 Writes a token to the output stream. @param base COSBase object to be written @throws IOException if an I/O error occurs
1968 Writes a PDF object to an output stream. @param output the OutputStream to write to @param object the COSBase object to write @param topLevel indicates if the object is at the top level @throws IOException if an I/O error occurs
1969 Writes text with positioning from an array. @param textWithPositioningArray array containing Strings and Floats for text and positioning @throws IOException if writing fails
1970 Displays text and writes an operator. @param text the text to display @throws IOException if I/O error occurs
1971 Creates and configures a PageDrawer. @param parameters configuration for the PageDrawer @return configured PageDrawer instance @throws IOException if an I/O error occurs during setup
1972 Constructs a new PDFormXObject. @param document The PDDocument to associate with this form object.
1973 Initializes metadata from document and input stream. @param doc PDF document @param str input stream containing metadata @throws IOException on I/O error
1974 Constructs a PDEmbeddedFile from an InputStream. @param doc the parent PDDocument @param str the InputStream containing the file data
1975 Constructs a PDEmbeddedFile object. @param doc the document containing the embedded file @param input the InputStream of the file to be embedded @param filter the compression filter for the embedded file @throws IOException if an I/O error occurs
1976 Prepares an image XObject for a PDF document. @param document the target PDF document @param byteArray raw image data @param width image width in pixels @param height image height in pixels @param bitsPerComponent bits per color component @param initColorSpace initial color space @return PDImageXObject ready for insertion into PDF @throws IOException if encoding fails
1977 Constructs a PDExportFormatAttributeObject with the specified owner. @param owner the owner of the export format attribute object
1978 Retrieves attribute revisions from PDF object. @return Revisions containing PDAttributeObjects or empty if none found
1979 Retrieves the normal appearance stream of an annotation. @param annotation the PDF annotation to process @return the normal appearance stream or null if not available
1980 Adds fonts from a widget's appearance stream to the AcroForm resources. @param acroFormResources the AcroForm resources to add fonts to @param annotation the annotation containing the widget
1981 Retrieves all 'on' values from annotations. @return Set of 'on' values or empty set if none found
1982 Checks if the value matches the on value. @return true if values match, false otherwise
1983 Sets value to on-value. Throws IOException if an I/O error occurs.
1984 Initializes font provider with local system fonts. @param cache FontCache for storing font information
1985 Initializes a new FDFParser instance. @param source RandomAccessRead object containing FDF data @throws IOException if an I/O error occurs during initialization
1986 Initializes PDF parser with source and decryption password. @param source input stream for PDF file @param decryptionPassword password to decrypt the PDF if encrypted @throws IOException if an I/O error occurs during initialization
1987 Draws annotation style at specified position. @param style line end style @param cs content stream to draw on @param x x-coordinate of the start point @param y y-coordinate of the start point @param width line width @param hasStroke true if stroke is required @param hasBackground true if background is required @param ending true if drawing at the end of the line @throws IOException if an I/O error occurs
1988 Initializes tiling paint for a given pattern. @param drawer PageDrawer instance @param pattern PDTilingPattern object @param colorSpace PDColorSpace for painting @param color PDColor to use @param xform AffineTransform for additional transformations @throws IOException if an I/O error occurs
1989 Retrieves an opaque image from a specified region with given subsampling. @param region the area of the image to capture @param subsampling factor for reducing image resolution @return BufferedImage object representing the opaque image @throws IOException if an I/O error occurs during image processing
1990 Converts PDImage to RGB BufferedImage. @param pdImage the source image @param colorKey optional color key array @return RGB BufferedImage representation of the input image @throws IOException if an I/O error occurs
1991 Pushes resources from content stream to current context. @param contentStream source of potential resource overrides @return previous resources before push
1992 Calculates transformation for centering an overlay on a page. @param page the PDF page to apply the transformation to @param overlayMediaBox the media box of the overlay content @return AffineTransform for centering the overlay
1993 Returns the rotated media box of a PDF page. @param page the PDF page to process @return PDRectangle representing the rotated media box
1994 Checks if the item is marked. @return true if marked, false otherwise
1995 Checks if user properties are used. @return true if user properties are enabled, false otherwise
1996 Checks if the entity is marked as a suspect. @return true if the entity is a suspect, otherwise false
1997 Determines if mouse position tracking is enabled. @return true if tracking is enabled, false otherwise
1998 Checks if the document is open. @return true if the document is open, false otherwise
1999 Checks if the PDF document has form data. @return true if the document contains form data, false otherwise
2000 Retrieves non-stroking overprint control setting. @return boolean indicating non-stroking overprint status
2001 Retrieves an integer value from a dictionary. @param embeddedDictionary the dictionary to search in @param key the key for the integer value @return the integer value or -1 if not found
2002 Retrieves the denominator value. @return integer representing the denominator
2003 Wraps an OutputStream with a PredictorOutputStream if predictor > 1. @param out the original OutputStream @param decodeParams dictionary containing decoding parameters @return wrapped OutputStream or original if no prediction is needed
2004 Retrieves the structural parents value. @return integer representing structural parents or default value if not set
2005 Retrieves bits per sample from COS object. @return number of bits per sample
2006 Retrieves MCID (Marked Content Identifier) from COS object. @return integer value of MCID or default if not present
2007 Retrieves the next key in the parent tree. @return integer value of the next key or default if not set
2008 Retrieves MCID from properties. @return MCID value or -1 if properties are null
2009 Retrieves the line cap style from the dictionary. @return integer representing the line cap style
2010 Retrieves line join style from dictionary. @return integer representing line join style
2011 Retrieves the structure parent index. @return integer value representing the parent's index
2012 Retrieves the integer value associated with key "P" from the dictionary. @return the integer value or default if not present
2013 Retrieves the maximum length value. @return integer representing the maximum length
2014 Retrieves an integer value by key from a COS object. @param name key of the integer value @param defaultValue default value if key not found @return integer value or default if not present
2015 Checks if the annotation is invisible. @return true if the annotation is invisible, false otherwise
2016 Checks if the annotation is hidden. @return true if hidden, false otherwise
2017 Checks if the document is marked as printed. @return true if printed, false otherwise
2018 Checks if no zoom flag is set. @return true if no zoom is allowed, false otherwise
2019 Checks if rotation is disabled. @return true if no rotate flag is set, false otherwise
2020 Checks if the annotation should not be displayed. @return true if no view flag is set, false otherwise
2021 Checks if the annotation is read-only. @return true if the annotation is read-only, false otherwise
2022 Checks if the annotation is locked. @return true if locked, false otherwise
2023 Checks if the annotation has toggle no view flag set. @return true if toggle no view is enabled, false otherwise
2024 Checks if contents are locked. @return true if contents are locked, false otherwise
2025 Checks if the object is invisible. @return true if invisible, false otherwise
2026 Checks if the object is hidden. @return true if the object is hidden, false otherwise
2027 Checks if the document has been printed. @return true if printed, false otherwise
2028 Checks if zooming is disabled. @return true if no zoom is allowed, false otherwise
2029 Checks if rotation is disabled. @return true if no rotate flag is set, false otherwise
2030 Checks if the document should not be viewed. @return true if no view flag is set, false otherwise
2031 Checks if the document is read-only. @return true if the document is read-only, false otherwise
2032 Checks if the document is locked. @return true if the document is locked, false otherwise
2033 Checks if the "no view" toggle flag is set. @return true if the toggle is active, false otherwise
2034 Checks if contents are locked. @return true if contents are locked, false otherwise
2035 Checks if filtering is required. @return true if filter is needed, false otherwise
2036 Checks if sub-filter is required. @return true if sub-filter is required, false otherwise
2037 Checks if digest method is required. @return true if digest method is required, false otherwise
2038 Checks if field validation is required. @return true if validation is required, false otherwise
2039 Checks if reason is required. @return true if reason is required, false otherwise
2040 Checks if legal attestation is required. @return true if legal attestation is required, false otherwise
2041 Checks if additional revision information is required. @return true if additional revision info is needed, false otherwise
2042 Checks if subject is required. @return true if subject is required, false otherwise
2043 Checks if issuer is required. @return true if issuer is required, false otherwise
2044 Checks if OID (Object Identifier) is required. @return true if OID is required, false otherwise
2045 Checks if subject DN is required. @return true if subject DN is required, false otherwise
2046 Checks if key usage is required. @return true if key usage is mandatory, false otherwise
2047 Checks if URL is required. @return true if URL is required, false otherwise
2048 Checks if the font is italic. @return true if the font is italic, false otherwise
2049 Checks if text is bold. @return true if text is bold, false otherwise
2050 Checks if signatures exist in the document. @return true if signatures exist, false otherwise
2051 Checks if the document is append-only. @return true if the document is append-only, false otherwise
2052 Checks if the form field is a push button. @return true if the field is a push button, false otherwise
2053 Checks if the field is a radio button. @return true if the field is a radio button, false otherwise
2054 Checks if the form field is sorted. @return true if sorted, false otherwise
2055 Checks if field supports multiple selections. @return true if multi-select is enabled, false otherwise
2056 Checks if spell check should be disabled. @return true if spell checking is disabled, false otherwise
2057 Checks if commit on selection change is enabled. @return true if commit is enabled, false otherwise
2058 Checks if the field is a combo box. @return true if it's a combo box, false otherwise
2059 Checks if the field is editable. @return true if the field can be edited, false otherwise
2060 Checks if the field is read-only. @return true if the field is read-only, false otherwise
2061 Checks if the field is required. @return true if the field is marked as required, false otherwise
2062 Checks if the field should not be exported. @return true if no export flag is set, false otherwise
2063 Checks if radio buttons are in unison mode. @return true if radios in unison, false otherwise
2064 Checks if text field allows multiple lines. @return true if multiline, false otherwise
2065 Checks if the field requires a password. @return true if password is required, false otherwise
2066 Checks if file selection is enabled. @return true if file select flag is set, false otherwise
2067 Checks if spell checking is disabled. @return true if spell checking is disabled, false otherwise
2068 Checks if scrolling is disabled. @return true if scrolling is disabled, false otherwise
2069 Checks if the field is in comb mode. @return true if the field is in comb mode, false otherwise
2070 Checks if the field supports rich text. @return true if rich text is enabled, false otherwise
2071 Prepares for decryption using provided encryption and decryption material. @param encryption PDF encryption details @param documentIDArray document ID array @param decryptionMaterial decryption material @throws IOException if preparation fails
2072 Retrieves the owner key from a PDF dictionary. @return byte array containing the owner key or null if not present @throws IOException if an I/O error occurs during retrieval
2073 Retrieves user key from dictionary. @return byte array of user key or null if not found @throws IOException if an I/O error occurs
2074 Calculates displacement vector for given code. @param code identifier for width calculation @return Vector with x-component as width in km, y-component as 0 @throws IOException if width retrieval fails
2075 Calculates the width of a given string. @param text input string to measure @return width of the string in float @throws IOException if an I/O error occurs
2076 Retrieves a pattern by name. @param name the pattern's COSName @return PDAbstractPattern object or null if not found @throws IOException if an I/O error occurs
2077 Retrieves a shading pattern by name. @param name the name of the shading pattern @return PDShading object or null if not found @throws IOException if an I/O error occurs
2078 Retrieves the shading object. @return PDShading object or null if not found @throws IOException if an I/O error occurs
2079 Checks if node is open. @return true if node has open count greater than zero, false otherwise
2080 Creates a PDField based on the given COSDictionary. @param form PDAcroForm containing the field @param field COSDictionary representing the field @param parent PDNonTerminalField parent of the field @return PDField object or null if invalid
2081 Retrieves an XObject by name. @param name the name of the XObject to retrieve @return PDXObject or null if not found @throws IOException if an I/O error occurs
2082 Initializes a GouraudShadingContext. @param shading PDShading object representing the shading @param colorModel ColorModel for rendering colors @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the shading pattern @throws IOException if an I/O error occurs
2083 Creates an input stream with default decode options. @return COSInputStream object @throws IOException if an I/O error occurs
2084 Parses and retrieves an object from a PDF object stream. @param objstmObjNr number of the object stream @param key unique key for the object within the stream @return parsed COSBase object or null if not found @throws IOException if parsing fails
2085 Retrieves the contents as an InputStream. @return InputStream of the contents or empty stream if none available
2086 Constructs a PDCIDFontType2 instance. @param fontDictionary the COS dictionary for the font @param parent the parent PDType0Font @throws IOException if an I/O error occurs
2087 Creates and returns a CID font. @return PDCIDFont object representing the CID font @throws IOException if an I/O error occurs during CID font creation
2088 Recursively collects COSBase entries for document updates. @param array COSArray to process @return true if any entry demands parent update, false otherwise
2089 Returns the set of COSBase objects. Initializes the set if not already done using incrementOrigin. @return Set of COSBase objects
2090 Adds a COSBase object to the collection. @param object the COSBase object to add
2091 Adds an object at a specified index. @param i index position @param object the COSBase object to add
2092 Sets an object at a specified index. @param index position in the list @param object COSBase object to set
2093 Sets an item in the dictionary with a key. @param key COSName key for the item @param value COSBase value to set; null removes the item
2094 Updates items in an array. @param children iterable collection of COSBase objects to update
2095 Retrieves role map from structure tree root. @return Map containing roles or empty map if root is null
2096 Adds a PDF object to the pool, managing keys and streams. @param key unique object identifier @param base PDF object to add @return updated or existing PDF object
2097 Applies a protection policy to the document. @param policy the ProtectionPolicy to apply @throws IOException if no suitable security handler is found
2098 Retrieves glyph name for a given Unicode code. @param code Unicode code point @return Glyph name or ".notdef" if not found
2099 Converts character code to glyph ID. @param code character code @return glyph ID or 0 if not found @throws IOException if an I/O error occurs
2100 Retrieves the MAC subtype from PDF parameters. @return the MAC subtype as a String or null if not found
2101 Retrieves the MAC creator from PDF parameters. @return MAC creator string or null if not found
2102 Retrieves the Mac resource fork from PDF parameters. @return Mac resource fork string or null if not found
2103 Retrieves CIDFontMapping for a given base font and descriptor. @param baseFont name of the base font @param fontDescriptor PDFontDescriptor object describing the font @param cidSystemInfo PDCIDSystemInfo object containing CID system info @return CIDFontMapping object or null if not found
2104 Verifies owner password. @param password user-provided password @param user user data @param owner owner data @param permissions access permissions @param id unique identifier @param encRevision encryption revision @param keyLengthInBytes length of encryption key in bytes @param encryptMetadata flag to encrypt metadata @return true if password is valid, false otherwise
2105 Writes pages for each region. Iterates over regions, sets characters and text, then writes page.
2106 Retrieves date from PDF dictionary using key. @param key PDF key as string @return Calendar object representing the date
2107 Retrieves date from COSName with default. @param key dictionary key for the date @param defaultValue fallback date if not found @return Calendar object or provided default
2108 Retrieves the creation date of the document. @return Calendar object representing the creation date
2109 Retrieves the modification date of the document. @return Calendar representing the modification date
2110 Retrieves the creation date of the annotation. @return Calendar object representing the creation date @throws IOException if an I/O error occurs while accessing the data
2111 Retrieves the creation date of the PDF document. @return Calendar object representing the creation date or null if not set
2112 Retrieves the sign date from the dictionary. @return Calendar object representing the sign date or null if not present
2113 Writes an Operator object to the output stream. @param op the Operator object to be written @throws IOException if an I/O error occurs
2114 Writes prepared objects to a COSStream. @param stream the target COSStream to write to @return the updated COSStream with written objects @throws IOException if an I/O error occurs during writing
2115 Writes a COSDictionary to the given OutputStream. @param output stream to write dictionary to @param cosDictionary dictionary to be written @throws IOException if an I/O error occurs
2116 Initializes a new transparency group within a PDF document. @param document the PDDocument to associate with this group
2117 Constructs a new appearance stream. @param document The PDF document to associate with this appearance stream.
2118 Creates a JPEG image from a BufferedImage. @param document PDDocument to add the image to @param image BufferedImage source @param quality JPEG compression quality (0.0 - 1.0) @param dpi dots per inch for image resolution @return PDImageXObject representing the JPEG image @throws IOException if an I/O error occurs
2119 Validates that the given value is either 'On' or in the set of allowed values. @param value the value to check
2120 Loads an FDF document from a file. @param file the FDF file to load @return the parsed FDFDocument object @throws IOException if an I/O error occurs
2121 Loads an FDF document from the given InputStream. @param input stream containing FDF data @return parsed FDFDocument object @throws IOException if there is a problem reading the input
2122 Constructs a PDFParser with a given source. @param source RandomAccessRead object representing the PDF file @throws IOException if an I/O error occurs
2123 Initializes tiling paint with a pattern and transformation. @param drawer object responsible for drawing operations @param pattern tiling pattern to be used @param xform affine transformation to apply @throws IOException if an I/O error occurs
2124 Retrieves an opaque image with default settings. @return BufferedImage object @throws IOException if an I/O error occurs
2125 Decodes input stream using LZW algorithm. @param encoded input stream containing encoded data @param decoded output stream for decoded data @param parameters decoding parameters @param index parameter set index @return DecodeResult object with updated parameters
2126 Appends a kid to the content list. @param markedContent the content to append
2127 Fetches UCS-2 CMap for composite or CJK fonts. @throws IOException if an I/O error occurs
2128 Determines if the field should be combined. @return true if field is a PDTextField with specific properties, false otherwise
2129 Prepares for PDF decryption using provided encryption details and material. @param encryption PDEncryption object containing document encryption info @param documentIDArray COSArray of document IDs @param decryptionMaterial DecryptionMaterial used for decryption @throws IOException if decryption material is incompatible or other I/O issues occur
2130 Retrieves the space character width of the font. @return Width of space character as float, defaulting to 250 if undetermined
2131 Checks if the font has fixed pitch. @return true if fixed pitch, false otherwise
2132 Checks if the font style is serif. @return true if serif, false otherwise
2133 Checks if the file is symbolic. @return true if the file is symbolic, false otherwise
2134 Checks if the flag indicating script execution is set. @return true if script flag is on, false otherwise
2135 Checks if the flag non-symbolic is set. @return true if non-symbolic flag is on, false otherwise
2136 Checks if the text style is italic. @return true if italic, false otherwise
2137 Checks if the all-caps flag is set. @return true if all-caps flag is on, false otherwise
2138 Checks if the company is classified as small-cap. @return true if small-cap, false otherwise
2139 Checks if force bold flag is set. @return true if force bold is enabled, false otherwise
2140 Retrieves a pattern from resources by color name. @param color PDColor object containing the pattern name @return PDAbstractPattern if found, otherwise throws IOException
2141 Creates a PDField from a dictionary. @param form PDF document's acroform @param field dictionary representing the field @param parent parent non-terminal field @return created PDField object
2142 Converts input stream content to text string. @return String representation of input stream content or empty if error occurs
2143 Creates an input stream from the underlying stream. @return COSInputStream representing the input stream @throws IOException if an I/O error occurs
2144 Collects patches from a PDF shading dictionary. @param xform affine transform for patch coordinates @param matrix transformation matrix for color space @param controlPoints number of control points per patch @return list of Patch objects or empty list if none found
2145 Creates a descendant CID font from a dictionary. @param dictionary PDF COS dictionary containing font info @param parent parent PDType0Font object @return PDCIDFont instance based on font type @throws IOException if invalid font type or dictionary structure
2146 Returns an iterator over COSBase objects. @return Iterator of COSBase elements
2147 Adds a COSObjectable to the collection. @param object the COSObjectable to be added
2148 Grows the list to a specified size by adding an object. @param size desired size of the list @param object object to be added until the desired size is reached
2149 Sets an array of float values. @param value array of floats to be set
2150 Parses a COSArray from the input source. @return Parsed COSArray object @throws IOException if an I/O error occurs
2151 Prepares and returns a COSStream for cross-reference. @throws IOException if an I/O error occurs
2152 Initializes a PDRange with default values. Sets range to [0, 1] and starting index to 0.
2153 Retrieves or creates the encode values array. @return COSArray containing encode values
2154 Initializes a PDFunctionType2 with the given function. @param function the underlying COSBase function
2155 Initializes an FDFOptionElement with default empty strings.
2156 Initializes a new PDFontSetting with default values. Sets up a COSArray with null and a COSFloat of 1.
2157 Retrieves the whitepoint as a tristimulus value. @return PDTristimulus object representing the whitepoint
2158 Retrieves the black point of the color space. @return PDTristimulus object representing the black point
2159 Converts components to a COSArray. @return COSArray containing components, with patternName added if present
2160 Initializes a new PDDeviceN object with default COSArray setup.
2161 Initializes PDGamma with default zero values.
2162 Retrieves the alternate color space. @return PDColorSpace object representing the alternate color space @throws IOException if an error occurs while creating the color space
2163 Initializes a PDIndexed object with RGB color space.
2164 Creates a default range array with specified float values. @return COSArray containing default range values
2165 Constructs a PDPattern with given resources. @param resources PDResources object containing pattern resources
2166 Initializes a PDSeparation with default values.
2167 Initializes a PDTristimulus with zero values.
2168 Initializes a PDTristimulus with float array. @param array containing up to 3 color values
2169 Sets the transformation matrix. @param transform AffineTransform object defining the matrix
2170 Creates an image from a byte array. @param document PDF document to associate the image with @param byteArray image data in byte format @return PDImageXObject created from the byte array @throws IOException if there's an error processing the image data
2171 Converts an array of floats to a COSArray. @return COSArray containing COSFloat elements
2172 Sets an object at a specific index. @param index position in the list @param object to be set at the index
2173 Sets an integer value at the specified index. @param index position in the array @param value integer to be stored
2174 Sets the name at a specified index. @param index position in the list @param name string to be converted and stored
2175 Sets a string value at the specified index. @param index position in the array @param string value to be set; null is allowed
2176 Sets the minimum value of the range. @param min the minimum value to be set
2177 Sets the maximum value in the range array. @param max the maximum value to be set
2178 Sets the lower left X coordinate of the rectangle. @param value the new X coordinate value
2179 Sets the lower-left Y coordinate of a rectangle. @param value the Y coordinate value to set
2180 Sets the upper-right X coordinate of the rectangle. @param value the new X coordinate value
2181 Sets the upper-right Y coordinate of a rectangle. @param value the Y coordinate to be set
2182 Sets color at specified index. @param index position in the array @param colour PDGamma color object or null
2183 Decrypts each element in the given COSArray. @param array COSArray to be decrypted @param objNum object number used in decryption @param genNum generation number used in decryption
2184 Sets an option value. @param opt the option string to be set
2185 Sets default appearance string. @param da default appearance string to be set
2186 Sets the font size. @param size the font size to apply
2187 Sets device attributes. @param attributes device attributes to set
2188 Sets the alternate color space. @param cs the new PDColorSpace to set
2189 Sets the radius value. @param r the radius to be set
2190 Sets the green value. @param g green component as float
2191 Sets the third value to a float. @param b the float value to be set
2192 Sets the range for a specific component in a PDF stream. @param range the PDRange object defining the min and max values @param n the index of the component to set the range for
2193 Sets the base color space. @param base PDColorSpace object to be set as base
2194 Sets the colorant name in the PDF array. @param name the new colorant name
2195 Sets the alternate color space. @param colorSpace the new color space to set
2196 Sets the x-coordinate value. @param x the new x-coordinate value
2197 Sets the Y coordinate. @param y new Y value to be set
2198 Sets the Z value. @param z the new Z coordinate
2199 Sets an item with a given key and value. @param key the key for the item @param value the value to be set, can be null
2200 Sets a boolean value in the PDF document. @param key the key under which to store the boolean value @param value the boolean value to store
2201 Sets a boolean value in the PDF document. @param key the key under which to store the boolean value @param value the boolean value to be stored
2202 Sets an item in the dictionary with a given key and value. @param key string key to identify the item @param value COSBase value to store under the key
2203 Sets a PDF item with the given name and value. @param key the COSName key for the item @param value the string value to be converted to COSName
2204 Sets a string value for a given key in the dictionary. @param key the COSName key to associate with the value @param value the string value to store
2205 Sets an integer value in the dictionary. @param key the key to associate with the value @param value the integer value to store
2206 Sets a long value in the dictionary. @param key the COSName key @param value the long value to set
2207 Sets a float value in the dictionary under a specified key. @param key the key to store the float value under @param value the float value to be stored
2208 Creates a COSStream from a dictionary and stream parameters. @param dictionary source dictionary for stream properties @param startPosition start position in the stream @param streamLength length of the stream @return created COSStream object @throws IOException if an I/O error occurs
2209 Sets the encryption dictionary in the PDF trailer. @param encDictionary the encryption dictionary to be set
2210 Sets the document ID in the trailer. @param id array containing document identifier
2211 Wraps existing page content in a save/restore graphics state pair. @param page PDPage object to modify @throws IOException if an I/O error occurs
2212 Updates parent entry and structure type for each dictionary in the array. @param kArray array of COSBase objects @param newParent new parent dictionary @param newStructureType optional new structure type name
2213 Searches for a PDF trailer using a brute force approach. @param trailer COSDictionary to store found entries @return true if valid trailer is found, false otherwise
2214 Searches for trailer items in the PDF document. @param trailer dictionary to update with found items @return true if a root object is found and set in the trailer
2215 Parses the PDF trailer and initializes the document. @throws IOException if an I/O error occurs or root object is missing
2216 Parses the next token from the source. @return Parsed object or null if end of stream is reached @throws IOException if an I/O error occurs
2217 Writes a PDF document with a signature. @param doc PDDocument to write @param signInterface Signature interface for signing the document @throws IOException if an I/O error occurs
2218 Retrieves or creates document information. @return PDDocumentInformation object containing document metadata
2219 Sets document information. @param info PDDocumentInformation object containing metadata
2220 Initializes a PDF document catalog. @param doc the PDDocument to associate with this catalog
2221 Retrieves threads from a PDF document. @return List of PDThread objects representing threads in the document
2222 Retrieves additional actions from the document catalog. @return PDDocumentCatalogAdditionalActions object
2223 Adds an output intent to the document. @param outputIntent the PDOutputIntent object to add
2224 Initializes a PDDocumentNameDictionary from a document catalog. @param cat the document catalog to extract or create name dictionary from
2225 Sets the crop box for a PDF page. @param cropBox the new crop box dimensions or null to remove it
2226 Retrieves or creates additional actions for the page. @return PDPageAdditionalActions object containing page actions
2227 Initializes a new PDPageTree with an empty page structure. Sets up the root dictionary and initializes necessary items.
2228 Retrieves child dictionaries from a PDF node. @param node parent dictionary node @return list of COSDictionary objects representing children
2229 Clears the dictionary and associated arrays. If a parent dictionary exists, sets its item to null.
2230 Converts label map to COSDictionary. @return COSDictionary representing the labels
2231 Initializes a PDF file specification. Sets up the dictionary with type 'Filespec'.
2232 Initializes a PDComplexFileSpecification from a dictionary. @param dict the COSDictionary to initialize with, or null for default settings
2233 Sets the range values for a PDF annotation. @param rangeValues COSArray containing the range values
2234 Sets the domain values for the COS object. @param domainValues array of domain values to be set
2235 Sets encoding values for the PDF object. @param encodeValues array containing encoding information
2236 Sets the decode values for this object. @param decodeValues array of COSNumbers representing decode parameters
2237 Sets an attribute value by name. @param attrName the name of the attribute to set @param attrValue the new value for the attribute
2238 Removes an attribute from the PDF object. @param attributeObject the attribute to remove
2239 Updates attribute revision number in PDF object. @param attributeObject the attribute to update
2240 Adds a class name to the PDF document. @param className the class name to add
2241 Removes a class name from the PDF object. @param className the name of the class to remove
2242 Appends a child object to the existing kids. @param object the child object to append
2243 Inserts a new kid before a reference kid in the PDF structure. @param newKid the new child to insert @param refKid the reference child before which to insert
2244 Removes a kid from the current object. @param object the kid to be removed @return true if the kid was successfully removed, false otherwise
2245 Sets the K item in the COS object. @param k the value to set for the K item
2246 Sets the value of the COS object. @param value new value to be set
2247 Retrieves or sets the guideline color. @return PDColor object representing the guideline color
2248 Retrieves or creates a line dash pattern from the dictionary. @return PDLineDashPattern object with default values if none exists
2249 Sets the line dash pattern. @param dashArray COSArray representing dash pattern
2250 Sets the cryptographic filter method. @param cfm the COSName representing the filter method
2251 Sets the PDF filter. @param filter filter name as a string
2252 Sets the owner key in the dictionary. @param o byte array representing the owner key @throws IOException if an I/O error occurs
2253 Sets user key in dictionary. @param u byte array representing the user key @throws IOException if an I/O error occurs
2254 Sets the owner encryption key. @param oe byte array representing the encryption key @throws IOException if an I/O error occurs
2255 Sets user encryption key. @param ue encryption key as byte array @throws IOException if an I/O error occurs
2256 Sets encryption recipients. @param recipients array of recipient byte arrays @throws IOException if an I/O error occurs
2257 Sets a cryptographic filter dictionary. @param cryptFilterName name of the cryptographic filter @param cryptFilterDictionary dictionary containing filter settings
2258 Sets the stream filter name in the dictionary. @param streamFilterName the filter name to be set
2259 Sets the string filter name in the dictionary. @param stringFilterName the COSName to use as the string filter
2260 Sets permissions using byte array. @param perms byte array representing permissions @throws IOException if an I/O error occurs
2261 Removes V4 and V5 filters from the dictionary.
2262 Initializes a new FDF annotation. Sets up the base dictionary with type as ANNOT.
2263 Sets the annotation's color. @param c Color object to set; null resets color
2264 Sets rich contents string. @param rc rich content to be set
2265 Sets the interior color of an annotation. @param color Color object representing the new interior color
2266 Sets callout coordinates for an annotation. @param callout float array containing x and y coordinates
2267 Sets the line coordinates. @param line array of float values representing line coordinates
2268 Sets the interior color of an annotation. @param color Color object representing the new interior color
2269 Sets the horizontal offset for annotation caption. @param offset the horizontal offset value
2270 Sets the vertical offset for the annotation caption. @param offset the vertical offset value
2271 Sets the vertices for annotation. @param vertices array of vertex coordinates
2272 Sets the interior color of an annotation. @param color the new interior color, or null to clear it
2273 Sets the vertices for an annotation. @param vertices array of vertex coordinates
2274 Sets the interior color of an annotation. @param color Color object representing the new interior color
2275 Sets the interior color of an annotation. @param color the new interior color or null for no color
2276 Sets annotation coordinates. @param coords array of coordinate points
2277 Sets the ID for the FDF document. @param id COSArray containing the ID data
2278 Sets differences stream in FDF document. @param diff COSStream containing differences data
2279 Sets the field value with type checking. @param value the value to set, can be List<String>, String, or COSObjectable @throws IOException if an unsupported type is provided
2280 Sets the value of a PDF form field. @param value the new value to set
2281 Sets field flags for a PDF form field. @param ff integer representing field flags
2282 Sets field flags. @param ff field flag values
2283 Sets clear field flags for a form field. @param ff flag values to be set
2284 Sets widget field flags. @param f flag values to set
2285 Sets widget field flags. @param ff field flag integer value
2286 Sets clear widget field flags. @param ff flag values to set
2287 Sets rich text value for the field. @param rv rich text string to be set
2288 Sets rich text content for a form field. @param rv COSStream containing rich text data
2289 Sets the "before" attribute in the dictionary. @param before value to be set
2290 Sets the "after" attribute in the dictionary. @param after value to be set
2291 Initializes a new PDFont object with default settings.
2292 Initializes a new font descriptor dictionary. Sets the type to "FontDescriptor".
2293 Sets the font name in the dictionary. @param fontName the name of the font to set
2294 Sets the font family. @param fontFamily name of the font family to set
2295 Sets the font stretch for a PDF document. @param fontStretch the desired font stretch value as a string
2296 Sets the font bounding box. @param rect rectangle defining the bounding box or null to clear it
2297 Sets the character set for encoding. @param charSet character encoding string to be set
2298 Initializes a DictionaryEncoding with a base encoding and differences. @param baseEncoding the base encoding name @param differences array of encoding differences
2299 Sets the gamma value in the dictionary. @param value the gamma value to be set
2300 Retrieves or creates the gamma array. @return PDGamma object representing the gamma values
2301 Sets the gamma value for an image. @param gamma PDGamma object representing the gamma correction
2302 Sets the transformation matrix in a PDF dictionary. @param matrix 3x3 transformation matrix
2303 Retrieves separation colorants from PDF resources. @param resources PDF document resources @return Map of colorant names to PDSeparation objects @throws IOException if an I/O error occurs
2304 Initializes a new PDTransparencyGroupAttributes with a transparency setting.
2305 Initializes a PDF optional content membership dictionary. Sets the type to "OCMD".
2306 Sets the visibility policy for the dictionary. @param visibilityPolicy the policy to be applied
2307 Sets the transformation matrix. @param transform AffineTransform object to apply
2308 Sets the bounding box for a PDF element. @param bbox the new bounding box or null to remove it
2309 Sets the background array in the document. @param newBackground COSArray representing the background
2310 Sets the bounding box for a PDF element. @param newBBox the new bounding box rectangle
2311 Sets the color space for the object. @param colorSpace the color space to be set
2312 Sets the function array. @param newFunctions new COSArray of functions
2313 Sets the transformation matrix. @param transform AffineTransform object to apply
2314 Sets the domain for the COS object. @param newDomain array representing the new domain
2315 Sets the extend array. @param newExtend the new COSArray to set
2316 Sets the domain for the COS object. @param newDomain the new domain to be set
2317 Sets coordinates for the object. @param newCoords array of coordinate values
2318 Sets decoding values for PDF object. @param decodeValues array of decoding parameters
2319 Constructs a new PDExtendedGraphicsState. Initializes with a COSDictionary and sets the type to EXT_G_STATE.
2320 Sets the blend mode for an object. @param bm the BlendMode to apply
2321 Sets a float item in the dictionary. @param key the dictionary key @param value the float value to set or null to remove the key
2322 Sets the transfer attribute in the dictionary. @param transfer COSBase object representing the transfer
2323 Sets the second transfer object in the dictionary. @param transfer2 COSBase object representing the transfer
2324 Sets the action item T. @param t COSBase object to be set as item T
2325 Sets the highlight flag. @param h true to enable highlight, false otherwise
2326 Sets form fields to the action. @param array COSArray containing field definitions
2327 Sets the sound stream for an action. @param sound COSStream representing the sound data
2328 Sets form fields to the specified COSArray. @param array containing field definitions
2329 Sets the D item in the action. @param d the COSBase object to be set as the D item
2330 Sets the base item in the action. @param b COSBase object to be set
2331 Sets the relationship to either 'P' (Parent) or 'C' (Child). @param relationship COSName representing the relationship type @throws IllegalArgumentException if relationship is neither 'P' nor 'C'
2332 Initializes a PDF annotation. Sets up the annotation's dictionary with type 'Annot'.
2333 Initializes an annotation from a PDF dictionary. @param dict the PDF dictionary representing the annotation
2334 Sets the rectangle for this PDF object. @param rectangle PDRectangle to define boundaries
2335 Sets the border array for the PDF object. @param borderArray array defining the border properties
2336 Sets rectangle differences for PDF content. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2337 Sets rectangle differences for PDF annotations. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2338 Sets the callout coordinates. @param callout array of float values representing callout coordinates
2339 Sets the ink list for a PDF annotation. @param inkList 2D float array representing ink paths
2340 Sets line coordinates. @param l array of line coordinate values
2341 Sets the horizontal offset for captions. @param offset the horizontal offset value to set
2342 Sets the vertical offset for captions. @param offset the vertical offset value
2343 Sets quadrilateral points for annotation. @param quadPoints array of 8 floats representing the quad points
2344 Sets rich content string. @param rc rich content to be set
2345 Sets vertices for a shape. @param points array of vertex coordinates
2346 Sets vertices for a shape. @param points array of vertex coordinates
2347 Sets the parent annotation. @param annot the parent annotation to set
2348 Sets rectangle differences for margin adjustments. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2349 Sets quadrilateral annotation points. @param quadPoints array of 8 floats defining the quad points
2350 Initializes a new PDF appearance dictionary with required entries.
2351 Sets the dash style for a PDF line. @param dashArray array defining dash pattern
2352 Retrieves or initializes line dash pattern. @return PDLineDashPattern object representing the dash style
2353 Sets the operating system in the document. @param os name of the operating system
2354 Initializes a PDSeedValue with a COSDictionary.
2355 Sets the compression filter for the PDF object. @param filter COSName representing the filter type
2356 Sets the MDP seed value in the dictionary. @param mdp PDSeedValueMDP object containing MDP settings
2357 Sets the time stamp in the dictionary. @param timestamp PDSeedValueTimeStamp object to be set
2358 Initializes a PDF seed value certificate. Sets up the dictionary with necessary attributes.
2359 Adds a subject to the document's metadata. @param subject byte array representing the subject
2360 Adds a key usage extension. @param keyUsageExtension string containing '0', '1', or 'X' characters
2361 Adds an issuer to the document's issuer list. @param issuer byte array representing the issuer
2362 Adds an OID to the document's dictionary. @param oid byte array representing the OID to add
2363 Initializes a new PDSignature with a type of "Sig".
2364 Sets the type of the PDF dictionary. @param type the COSName representing the type
2365 Sets the filter for the current object. @param filter COSName representing the filter type
2366 Sets the sub-filter name in the dictionary. @param subfilter the name of the sub-filter to be set
2367 Sets byte range for a PDF signature. @param range array of 4 integers defining the byte range
2368 Sets document contents from byte array. @param bytes content data as a byte array
2369 Sets text color in PDF. @param textColor color to apply to text
2370 Initializes a new PDAcroForm with a given document. @param doc the PDF document to associate with this form
2371 Constructs a new PDButton. @param acroForm parent form containing the button
2372 Initializes a new choice field in an Acrobat form. @param acroForm the parent form containing this field
2373 Sets the value of the COS object. @param object the new value to set
2374 Sets default value for a COS object. @param value the default value to be set
2375 Creates a new PDSignatureField. @param acroForm the form to which this field belongs
2376 Creates a new text field in an Acrobat form. @param acroForm the parent form containing this field
2377 Sets the default style string for a PDF object. @param defaultStyleString the style string to set or null to remove it
2378 Sets the rich text value. @param richTextValue the rich text content to set
2379 Sets the coordinate system origin. @param coordSystemOrigin array containing x and y coordinates
2380 Initializes a new PDThread with a COSDictionary. Sets the type to "Thread".
2381 Sets transition direction. @param direction PDTransitionDirection object to set
2382 Sets the duration of an object in seconds. @param duration the duration value to be set
2383 Sets the fly scale for an object. @param scale the scaling factor to apply
2384 Sets the fly area to be opaque or transparent. @param opaque true if the fly area should be opaque, false otherwise
2385 Adds all objects from the given list to this array. @param objectList the list of COSBase objects to add
2386 Retrieves the standard structure type, mapping if necessary. @return Standardized structure type as a String
2387 Adds a PDF structure to the pool. @param current the current COSBase object to process @throws IOException if an I/O error occurs
2388 Retrieves calendar date by key. @param key PDF key for the date @param defaultValue default calendar value if not found @return Calendar object or default value
2389 Retrieves a date from an embedded dictionary. @param embedded name of the embedded dictionary @param key the key for the date value @param defaultValue default Calendar to return if not found @return Calendar object or defaultValue if not present
2390 Inserts formatted text into a PDF appearance stream. @param contents content stream to write text @param appearanceStream appearance stream for the field @param font font to use for rendering text @param fontSize size of the font @throws IOException if an I/O error occurs
2391 Creates an image object from a buffered image. @param document the PDF document to add the image to @param image the source buffered image @param quality the compression quality (0.0 - 1.0) @return PDImageXObject representing the image @throws IOException if there's an error processing the image
2392 Loads an FDF document from a file. @param filename path to the FDF file @return FDFDocument object @throws IOException if file cannot be read
2393 Adds the first intermediate curve segment. @param angleCur current angle @param r radius @param alpha angle adjustment factor @param cx center x-coordinate @param cy center y-coordinate
2394 Generates intermediate curl template points. @param angleCur current angle in degrees @param r radius of the template @return array of Point2D.Double representing the curl template @throws IOException if an I/O error occurs
2395 Processes and displays a glyph at the specified position. @param textRenderingMatrix current text rendering matrix @param font font used for rendering @param code character code to render @param displacement vector displacement for vertical characters @throws IOException if an I/O error occurs
2396 Splits text into lines based on font and width constraints. @param font PDFont to measure text with @param fontSize size of the font @param width maximum line width @return List of Line objects containing formatted words @throws IOException if an I/O error occurs during text processing
2397 Retrieves symbolic flag from font descriptor. @return Boolean value of symbolic flag or null if descriptor is missing
2398 Determines fallback font name based on PDFontDescriptor. @param fontDescriptor font descriptor object @return fallback font name as String
2399 Converts PDColor to Java Paint. @param color PDF color object @return Java Paint object or transparent if unsupported @throws IOException on error
2400 Retrieves fields from a PDF dictionary. @return List of PDField objects representing form fields
2401 Recursively finds a field by name in PDF form. @param name array of field names @param nameIndex current index in the name array @return PDField object or null if not found
2402 Retrieves child fields of a PDF form field. @return List of PDField objects representing child fields
2403 Converts a COSBase object to a string. @param base the COSBase object to convert @return string representation of the COSBase or empty string if unsupported type
2404 Retrieves the value of a PDF form field. @return The field's value as a String, List<String>, or null if not found @throws IOException if an unknown type is encountered
2405 Retrieves rich text from a PDF field. @return Rich text as String or null if not available
2406 Retrieves text content before a specified element. @return String representation of the text or null if not available
2407 Retrieves the "after" value from a dictionary. @return String representation of the "after" value or null if not applicable
2408 Retrieves the action string from a PDF dictionary. @return JavaScript or text content of the action, or null if not applicable
2409 Retrieves rich contents from a PDF object. @return String representation of rich contents or null if not available
2410 Converts a COSBase to its string representation. @param base the COSBase object @return string value of base or empty string if unsupported type
2411 Creates a LayoutPage from a given PDPage. @param page the input PDF page @return a LayoutPage object representing the page content @throws IOException if an I/O error occurs while processing the page
2412 Converts object content to byte array. @return byte array representation of the object @throws IOException if an I/O error occurs
2413 Retrieves and processes image samples from a PDF stream. @return 2D array of processed samples or null if an error occurs
2414 Initializes a PatchMeshesShadingContext for rendering. @param shading PDMeshBasedShadingType instance @param colorModel ColorModel for rendering @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @param controlPoints Number of control points for patch collection @throws IOException if an I/O error occurs during initialization
2415 Initializes Type4ShadingContext with given parameters. @param shading PDShadingType4 object @param cm ColorModel for the context @param xform AffineTransform for color space conversion @param matrix transformation matrix @param deviceBounds bounds of the device @throws IOException if an I/O error occurs
2416 Initializes Type5ShadingContext. @param shading PDShadingType5 instance @param cm ColorModel for rendering @param xform AffineTransform for device space to user space @param matrix transformation matrix @param deviceBounds bounding rectangle in device space @throws IOException if an I/O error occurs
2417 Adds an attribute to the PDF object. @param attributeObject the attribute to add
2418 Adds a user property to the document. @param userProperty the property to add
2419 Initializes a PDICCBased object with a document. @param doc the PDDocument to associate with this ICCBased object
2420 Initializes a PDPattern with specified resources and color space. @param resources PDResources object containing pattern resources @param colorSpace PDColorSpace for the pattern
2421 Sets the change formats. @param changeXs array of number format dictionaries
2422 Sets the Y-axis changes. @param changeYs array of PDNumberFormatDictionary objects
2423 Sets the distances array in the COS object. @param distances array of PDNumberFormatDictionary objects
2424 Sets the areas for number formatting. @param areas array of PDNumberFormatDictionary objects
2425 Sets the angles for a PDF number format. @param angles array of PDNumberFormatDictionary objects representing angles
2426 Sets line slope dictionaries. @param lineSloaps array of PDNumberFormatDictionary objects
2427 Grows the collection to the specified size. @param size target size of the collection
2428 Retrieves the text color from a PDF object. @return PDColor representing the text color
2429 Clones a PDF object. @param src source PDF object to clone @param dstParent parent of the cloned object @param currentPageDict current page dictionary context @return cloned PDF object or original if not an array/dictionary
2430 Parses a COSBase object from the input source. @return parsed COSBase object or null if parsing fails @throws IOException if an I/O error occurs during parsing
2431 Initializes a new PDF XRef stream parser. @param stream the COSStream to parse @throws IOException if an I/O error occurs during initialization
2432 Retrieves the next action(s) in a PDF document. @return List of PDAction objects representing the next actions or null if none found
2433 Retrieves the range for a specific component. @param n index of the component @return PDRange object representing the range
2434 Retrieves the encoding range for a specified parameter. @param paramNum index of the parameter @return PDRange object representing the encoding range or null if not available
2435 Retrieves color or four colors based on name. @param name key for the color array in COSObject @return PDGamma or PDFourColours object, or null if not found
2436 Builds glyph widths for CID font. @param cidFont COSDictionary to store width data @throws IOException if an I/O error occurs
2437 Sets line dash pattern. @param dashPattern line dash pattern to apply
2438 Initializes color space with RGB array. @param rgb COSArray containing RGB values
2439 Sets the guide line color in the PDF document. @param color PDColor object representing the new guide line color
2440 Sets the color of the object. @param c PDColor object representing the color to set
2441 Sets the interior color of the PDF element. @param ic PDColor object representing the new interior color
2442 Sets the interior color of the PDF element. @param ic PDColor object representing the new interior color
2443 Sets the interior color of a PDF element. @param ic PDColor object representing the new interior color
2444 Sets the interior color. @param ic PDColor object representing the new interior color
2445 Sets the border color of a PDF element. @param c PDColor object representing the new border color
2446 Sets the background color. @param c PDColor object representing the new background color
2447 Sets text color in PDF. @param textColor color to apply to text
2448 Retrieves a range from the dictionary. @return PDRange object representing the range
2449 Retrieves the B-range from a PDF dictionary. @return PDRange object representing the B-range or default if not set
2450 Creates an image object from an input stream. @param document PDF document to associate the image with @param stream input stream containing image data @return PDImageXObject created from the stream @throws IOException if an I/O error occurs
2451 Sets the font for text rendering. @param font PDFont object to be used for text
2452 Sets the tint transformation function. @param tint PDFunction representing the tint transform
2453 Sets the tint transformation function. @param tint PDFunction representing the tint transformation
2454 Sets the first page in the document. @param page PDPage object to be set as the first page
2455 Sets the upper limit for a node. @param upper the new upper limit value or null to clear it
2456 Sets the lower limit for a node. @param lower the new lower limit value or null to clear it
2457 Sets the starting style of a line annotation. @param style the starting style string, defaults to LE_NONE if null
2458 Sets the end style of an annotation line. @param style the end style to apply; null defaults to LE_NONE
2459 Sets the starting style of a line annotation. @param style the starting style to set; defaults to LE_NONE if null
2460 Sets the endpoint style for a line annotation. @param style desired endpoint style or null for none
2461 Sets the starting style of a line annotation. @param style the style to apply; null defaults to LE_NONE
2462 Sets the line ending style for annotations. @param style the desired line ending style as a string
2463 Sets the starting style of a line annotation. @param style the starting style to set or null for no style
2464 Sets the ending style of an annotation line. @param style the style to set or null for default
2465 Sets the upper limit in a COSArray. @param upper the upper limit value as a String
2466 Sets the lower limit for a range. @param lower the lower bound value as a string
2467 Clips a rectangle to the media box. @param box rectangle to clip @return clipped rectangle within media bounds
2468 Creates a PDRectangle with dimensions matching the current object's width and height. @return PDRectangle object representing the retranslated rectangle
2469 Sets the before color using PDGamma. @param colour PDGamma color to be set
2470 Sets the after color. @param colour PDGamma color to be set
2471 Sets the start color using PDGamma. @param colour PDGamma object representing the color
2472 Sets the end color using PDGamma. @param colour PDGamma object representing the color
2473 Decrypts a PDF object. @param obj the object to decrypt @param objNum object number in the PDF @param genNum generation number of the object @return decrypted COSBase object
2474 Sets an item in the dictionary using a string key. @param key the string key for the item @param value the COSObjectable value to be stored
2475 Sets the AcroForm in the document. @param acroForm the PDAcroForm to set
2476 Sets viewer preferences in PDF document. @param prefs PDViewerPreferences object containing settings
2477 Sets the document outline. @param outlines PDDocumentOutline object to be set
2478 Sets metadata for the document. @param meta PDMetadata object containing metadata details
2479 Sets the open action for the document. @param action the action to be performed when the document is opened
2480 Sets additional actions for the document. @param actions Additional actions to be set
2481 Sets document names dictionary. @param names dictionary containing document names
2482 Sets PDF mark information. @param markInfo PDMarkInfo object containing mark details
2483 Sets the URI dictionary in the root. @param uri PDURIDictionary to be set
2484 Sets the structure tree root. @param treeRoot PDStructureTreeRoot object to be set
2485 Sets page labels for a PDF document. @param labels PDPageLabels object containing page label settings
2486 Sets destination names tree in the document catalog. @param dests PDDestinationNameTreeNode to be set
2487 Sets embedded files in the document. @param ef node containing embedded files
2488 Sets JavaScript in the document. @param js PDJavascriptNameTreeNode object containing JavaScript
2489 Creates a new PDF page with specified media box. @param mediaBox dimensions and position of the page
2490 Sets the resources for the page. @param resources PDResources object containing resources
2491 Sets the media box for the page. @param mediaBox rectangle defining the page's dimensions
2492 Sets the bleed box for a PDF page. @param bleedBox rectangle defining the bleed area or null to remove it
2493 Sets the trim box for the page. @param trimBox rectangle defining the trim box or null to remove it
2494 Sets the art box for a PDF page. @param artBox rectangle defining the art box boundaries
2495 Sets the content stream for the PDF page. @param contents PDStream containing the page's content
2496 Sets metadata for the PDF document. @param meta PDMetadata object containing metadata details
2497 Sets additional actions for a PDF page. @param actions PDPageAdditionalActions object containing actions
2498 Sets the transition effect for the page. @param transition PDTransition object defining the transition effect
2499 Sets the transition effect and duration for a PDF page. @param transition PDTransition object defining the visual effect @param duration float representing the transition duration in seconds
2500 Adds an item to the resources dictionary. @param kind type of resource dictionary @param name key for the item @param object value to be added
2501 Sets an embedded file. @param file the PDEmbeddedFile to be set
2502 Sets the embedded file with Unicode name. @param file PDEmbeddedFile object to be set
2503 Sets the page in the document. @param page PDPage object to be set
2504 Sets the referenced object for an annotation. @param annotation the PDAnnotation to reference
2505 Sets the referenced object. @param xobject the PDXObject to reference
2506 Sets the current page. @param page PDPage object to be set
2507 Sets the parent structure node. @param structureNode the parent node to set
2508 Sets the PDF page. @param page PDPage object to be set
2509 Sets the parent tree node. @param parentTree PDNumberTreeNode representing the parent tree
2510 Sets the annotation's bounding rectangle. @param rectangle PDRectangle defining the new bounds
2511 Sets the border style of an annotation. @param bs PDBorderStyleDictionary defining the border style
2512 Sets border effect dictionary. @param be PDBorderEffectDictionary to apply
2513 Sets the annotation's fringe rectangle. @param fringe PDRectangle defining the fringe area
2514 Sets the annotation's fringe rectangle. @param fringe PDRectangle defining the fringe area
2515 Sets the annotation's fringe rectangle. @param fringe PDRectangle defining the fringe area
2516 Sets the annotation's fringe rectangle. @param fringe PDRectangle defining the fringe area
2517 Sets the FDF dictionary in the document's catalog. @param fdf the FDFDictionary to be set
2518 Sets the signature in the PDF document. @param sig PDSignature object to be set
2519 Sets the file specification in the FDF. @param fs PDFileSpecification object to be set
2520 Sets JavaScript for FDF document. @param js FDFJavaScript object to be set
2521 Sets the catalog in the PDF document trailer. @param cat FDFCatalog to be set as the root of the document
2522 Sets the appearance dictionary for the field. @param ap PDAppearanceDictionary to be set
2523 Sets the appearance stream reference. @param ref FDFNamedPageReference to be set
2524 Sets the icon fitting strategy. @param fit FDFIconFit object defining how the icon should be fitted
2525 Sets an action for the form field. @param a PDAction to be associated with the field
2526 Sets additional actions for a PDF field. @param aa PDAdditionalActions object containing actions
2527 Sets the fractional space to allocate. @param space PDRange representing the space allocation
2528 Sets the file specification. @param fs PDFileSpecification object representing the file details
2529 Sets page information. @param info FDFPageInfo object containing page details
2530 Sets the template reference. @param tRef FDFNamedPageReference to be set
2531 Sets the font file stream. @param type1Stream PDF stream containing the font data
2532 Sets TrueType font file stream. @param ttfStream PDStream containing TTF font data
2533 Sets the font file 3 for the PDF document. @param stream PDStream containing the font data
2534 Sets the CID set in the dictionary. @param stream PDStream containing CID set data
2535 Sets the white point for color calibration. @param whitepoint tristimulus value representing the white point
2536 Sets the black point for color calibration. @param blackpoint PDTristimulus representing the black point values
2537 Sets extended graphics state. @param extendedGraphicsState the new graphics state to set
2538 Sets the shading resource. @param shadingResources PDShading object to be set
2539 Sets PDF resources. @param resources PDF resource object to be set
2540 Sets a new function and clears the function array. @param newFunction the new PDFunction to set
2541 Sets font setting in dictionary. @param fs PDFontSetting object to be applied
2542 Sets the destination for navigation actions. @param d PDDestination object representing the target destination
2543 Sets the file specification for an annotation. @param fs PDFileSpecification object representing the file
2544 Sets the target directory for PDF actions. @param targetDirectory PDTargetDirectory object representing the target directory
2545 Sets the destination for a PDF action. @param d the destination to set
2546 Sets the file specification for an action. @param fs File specification to be set
2547 Sets file specification in PDF document. @param fs File specification to be set
2548 Sets Windows launch parameters. @param win PDWindowsLaunchParams object containing parameters
2549 Sets the file specification for an action. @param fs PDFileSpecification object representing the file
2550 Sets the file specification for an action. @param fs PDFileSpecification object to be set
2551 Sets the file specification for an action. @param fs the file specification to be set
2552 Sets the F action in the document. @param action the action to be associated with key 'F'
2553 Sets an action associated with key 'E'. @param e PDAction object to be set
2554 Sets action X in PDF document. @param x PDAction to be set
2555 Sets an action associated with the 'D' key. @param d PDAction object to be set
2556 Sets the action associated with key 'U'. @param u PDAction object to be set
2557 Sets the action associated with the FO key. @param fo PDAction object to be set
2558 Sets the action for the BL key. @param bl PDAction object to be set
2559 Sets the Purchase Order action. @param po PDAction object representing the purchase order
2560 Sets the page closure action. @param pc PDAction to be set as the page closure action
2561 Sets the PV action. @param pv PDAction object to be set
2562 Sets the PDAction for the PI key. @param pi the PDAction to be set
2563 Sets the WC action in the PDF document. @param wc PDAction object to be set
2564 Sets the webservice action. @param ws PDAction representing the webservice
2565 Sets the DS action. @param ds PDAction object to be set
2566 Sets the WP action. @param wp PDAction object to be set
2567 Sets the default action. @param dp Default action to be set
2568 Sets the action associated with key 'K'. @param k PDAction to be set
2569 Sets an action to be performed. @param f PDAction to be set
2570 Sets the V action in the PDF document. @param v PDAction object to be set
2571 Sets the action for the 'C' key in the actions dictionary. @param c PDAction to be set
2572 Sets the action associated with key 'O'. @param o PDAction to be set
2573 Sets the action associated with key 'C'. @param c PDAction to be set
2574 Sets the target directory. @param targetDirectory PDTargetDirectory object to be set
2575 Sets a named destination in the document. @param dest PDNamedDestination object to set or null to remove
2576 Sets the appearance dictionary. @param appearance the PDAppearanceDictionary to set
2577 Sets optional content properties. @param oc PDPropertyList object representing optional content
2578 Sets the current page. @param page PDPage object to be set
2579 Sets the file specification. @param file PDFileSpecification object to be set
2580 Sets border effect dictionary. @param be border effect dictionary to apply
2581 Sets the rectangle difference. @param rd PDRectangle representing the rectangle difference
2582 Sets an action for the PDF object. @param action PDAction to be associated with the object
2583 Sets the border style dictionary. @param bs border style dictionary to apply
2584 Sets the destination for this action. @param dest PDDestination object representing the target location
2585 Sets the previous URI action. @param pa PDActionURI object representing the URI action
2586 Sets the popup annotation. @param popup PDAnnotationPopup object to be associated
2587 Sets the annotation in reply to another. @param irt PDAnnotation representing the annotation being replied to
2588 Sets external data dictionary. @param externalData PDExternalDataDictionary to be set
2589 Sets the border style of a PDF annotation. @param bs border style dictionary to apply
2590 Sets the border effect dictionary. @param be border effect dictionary to apply
2591 Sets the border effect for the PDF annotation. @param be PDBorderEffectDictionary specifying the border effect
2592 Sets the rectangle difference. @param rd PDRectangle representing the rectangle difference
2593 Sets appearance characteristics. @param appearanceCharacteristics dictionary containing appearance settings
2594 Sets an action for a PDF object. @param action the PDAction to be set
2595 Sets additional actions for annotation. @param actions PDAnnotationAdditionalActions object to be set
2596 Sets the border style of a PDF annotation. @param bs border style dictionary to apply
2597 Sets the parent field of this terminal field. @param field the parent PDTerminalField object @throws IllegalArgumentException if the field shares a dictionary with its own widget
2598 Sets normal appearance for an entry. @param entry PDAppearanceEntry to be set as normal appearance
2599 Sets the normal appearance stream. @param ap PDAppearanceStream object to be set
2600 Sets rollover appearance for a PDAppearanceDictionary. @param entry PDAppearanceEntry to be set as the rollover appearance
2601 Sets rollover appearance for a button. @param ap PDAppearanceStream object defining the appearance
2602 Sets the down appearance for a PDF annotation. @param entry appearance settings for the annotation
2603 Sets the appearance stream for the down state. @param ap appearance stream to be set
2604 Sets the property build data filter. @param filter PDPropBuildDataDict object to be used as a filter
2605 Sets publication security properties. @param pubSec PDPropBuildDataDict containing security settings
2606 Sets application property in dictionary. @param app PDPropBuildDataDict object representing the application
2607 Sets the seed value certificate. @param certificate PDSeedValueCertificate to be set
2608 Sets the property build in the dictionary. @param propBuild PDPropBuild object to be set
2609 Sets the previous sibling node in an outline. @param outlineNode the new previous sibling node
2610 Sets the next sibling node in the outline. @param outlineNode the next sibling PDOutlineNode
2611 Sets the destination for this action. @param dest PDDestination object representing the target location
2612 Sets an action for this PDF object. @param action the action to be set
2613 Sets the structure element in the COS object. @param structureElement the PDStructureElement to be set
2614 Sets the first child node of an outline. @param outlineNode the new first child node
2615 Sets the last child node in the outline. @param outlineNode the PDOutlineNode to be set as the last child
2616 Sets default resources. @param dr PDResources object to be set as default
2617 Sets XFA resource in the dictionary. @param xfa PDXFAResource object to be set
2618 Sets signature value. @param value PDSignature object to set @throws IOException if an I/O error occurs
2619 Sets default signature value. @param value PDSignature object to be set as default
2620 Sets the seed value for PDF encryption. @param sv PDSeedValue object containing the seed data
2621 Sets additional actions for form field. @param actions PDFormFieldAdditionalActions object containing actions
2622 Sets the bounding box for the PDF object. @param rectangle PDRectangle representing the bounding box coordinates
2623 Sets measurement dictionary. @param measure PDMeasureDictionary object to be set
2624 Sets thread information. @param info document information to be set
2625 Sets the thread associated with this bead. @param thread PDThread object to be associated
2626 Sets the next thread bead in the document. @param next the next PDThreadBead object to link
2627 Sets the previous thread bead. @param previous the previous bead to be set
2628 Sets the current page in the document. @param page the PDPage to set as the current page
2629 Sets the rectangle for a PDF annotation. @param rect PDRectangle defining the bounds of the annotation
2630 Sets the marked status. @param value true if marked, false otherwise
2631 Sets user properties flag. @param userProps true to enable, false to disable
2632 Sets the suspect status. @param suspect true if suspect, false otherwise
2633 Sets whether to track mouse position. @param value true to enable tracking, false otherwise
2634 Sets the "Open" status of the COS object. @param open boolean indicating whether the object is open or closed
2635 Sets the FD flag in the COS object. @param fd boolean value to set the FD flag
2636 Sets the volatile flag for a file. @param fileIsVolatile true if the file is volatile, false otherwise
2637 Sets the hidden status of the object. @param hidden boolean indicating if the object should be hidden
2638 Sets metadata encryption flag. @param encryptMetaData true to enable metadata encryption, false otherwise
2639 Sets caption visibility. @param cap true to show caption, false to hide
2640 Sets whether annotations should scale to fit. @param value true to enable scaling, false otherwise
2641 Sets the rename flag in the template. @param value boolean indicating whether renaming is enabled
2642 Sets anti-aliasing preference. @param antiAlias true to enable anti-aliasing, false otherwise
2643 Sets stroking overprint control. @param op true to enable overprint, false otherwise
2644 Sets non-stroking overprint control. @param op true to enable, false to disable
2645 Sets automatic stroke adjustment. @param sa true to enable, false otherwise
2646 Sets the Alpha Source flag. @param alpha true to enable, false otherwise
2647 Sets the knockout flag in the dictionary. @param tk true to enable knockout, false otherwise
2648 Sets open mode for a document. @param value OpenMode specifying how to open the document
2649 Sets the open mode for a document. @param value the desired open mode (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
2650 Sets open mode for a document. @param value OpenMode specifying how to open the document
2651 Sets the action to be synchronous or asynchronous. @param synchronous true for synchronous, false for asynchronous
2652 Sets the repeat flag for an action. @param repeat true to enable repeating, false otherwise
2653 Sets the mix flag in the action. @param mix boolean value to enable or disable mixing
2654 Sets the caption flag. @param cap boolean value to enable or disable caption
2655 Sets the "Open" flag in the COS object. @param open boolean value to set
2656 Sets the pre-release flag in the dictionary. @param preRelease boolean indicating if it's a pre-release version
2657 Sets whether to suppress non-embedded font warnings. @param noEmbedFontWarning flag to disable warnings
2658 Sets trusted mode status. @param trustedMode true to enable trusted mode, false otherwise
2659 Sets the need appearances flag in the PDF document. @param value true to enable, false otherwise
2660 Sets the toolbar visibility preference. @param value true to hide the toolbar, false to show it
2661 Sets whether to hide the menu bar. @param value true to hide, false to show
2662 Sets the preference to hide window UI. @param value true to hide, false to show
2663 Sets whether to fit window to page. @param value true to fit window, false otherwise
2664 Sets whether to center the window. @param value true to center, false otherwise
2665 Sets whether to display document title. @param value true to display, false otherwise
2666 Sets an array of strings in a COS dictionary. @param name key for the array in the dictionary @param values array of string values to set
2667 Sets an array of names in the COS object. @param name key for the dictionary entry @param values array of string values to be converted to COSName
2668 Sets an array of numbers in a COS dictionary. @param name key for the array in the dictionary @param values float array to be set
2669 Parses stamp annotation appearance XML and constructs a COSDictionary. @param appearanceXML root XML element containing appearance data @return COSDictionary representing the parsed appearance or empty if not handled
2670 Sets the name value in the dictionary. @param key the key as a string @param value the value to set
2671 Sets the page mode of the PDF document. @param mode the desired page mode (e.g., NONE, USE_OUTLINES)
2672 Sets the page layout for a PDF document. @param layout the desired page layout (e.g., single page, double page)
2673 Sets the version of the document. @param version the version string to be set
2674 Sets the trapped status. @param value must be "True", "False", or "Unknown"
2675 Sets or removes the style of a component. @param style the style to apply, or null to remove it
2676 Initializes a new PDTypedDictionaryWrapper with a specified type. @param type the dictionary type as a string
2677 Sets the owner of the document. @param owner The name of the document owner
2678 Initializes a new PDMarkedContentReference with an empty dictionary. Sets the "Type" entry in the dictionary to "MarkedContent".
2679 Initializes a new PDObjectReference with an empty dictionary.
2680 Sets the structure type of the COS object. @param structureType the new structure type to be set
2681 Initializes a PDStructureNode with a specified type. @param type node type identifier
2682 Sets the name of the object and notifies if changed. @param name new name for the object
2683 Sets the guideline style. @param style the guideline style to apply
2684 Sets the sub-filter name. @param subfilter the sub-filter value to be set
2685 Sets the intent of the annotation. @param intent the purpose or type of the annotation
2686 Sets the line ending style. @param style the line ending style to apply
2687 Sets the icon name. @param icon the icon name to be set
2688 Sets the version of the catalog. @param version the version string to be set
2689 Sets the encoding for the FDF document. @param encoding the encoding to be set
2690 Sets scaling option. @param option scaling option to apply
2691 Sets the scaling type. @param scale scaling type as a string
2692 Initializes a new PDAbstractPattern with a pattern dictionary.
2693 Sets the type of the action. @param type the type to set for the action
2694 Sets the subtype of an action. @param s the subtype string to be set
2695 Sets the subtype of the PDF object. @param subType the subtype to be set
2696 Sets the appearance state of the PDF object. @param as the appearance state name
2697 Sets the attachment name. @param name new name for the attachment
2698 Sets the line ending style. @param style the line ending style to apply
2699 Sets the caption positioning. @param captionPositioning the new caption positioning value
2700 Sets the highlight mode for annotations. @param mode the highlight mode to be applied
2701 Sets the reply type of the COS object. @param rt reply type as a string
2702 Sets the intent of the COSObject. @param it the intent string to be set
2703 Sets the name of the COS object. @param name the new name to set
2704 Sets the name of the object. @param name new name to be set
2705 Sets the highlighting mode for a link. @param highlightingMode valid modes: "N", "I", "O", "P", "T"
2706 Sets the style of the COSObject. @param s the new style value to be set
2707 Initializes a new external data dictionary. Sets up the data dictionary with the type "ExData".
2708 Sets the subtype of the PDF object. @param subtype the new subtype value to be set
2709 Sets the name in the dictionary. @param name the name to be set
2710 Sets the URL type in the dictionary. @param urlType the type of URL to be set
2711 Initializes a new PDF document outline. Sets the "Type" entry in the COS object to "Outlines".
2712 Constructs a new outline from the given dictionary. @param dic COSDictionary representing the outline structure
2713 Sets default value for COS object. @param value default value to be set
2714 Initializes a new PDMeasureDictionary with a COSDictionary.
2715 Sets the subtype of the COS object. @param subtype the subtype to be set
2716 Initializes a new instance of PDNumberFormatDictionary. Sets up the number format dictionary with type attribute.
2717 Sets the name of the PDF document. @param name the new name to set
2718 Creates a new PDTransition with the specified style. @param style transition effect style
2719 Sets the transition dimension. @param dimension the PDTransitionDimension to be set
2720 Sets the transition motion. @param motion PDTransitionMotion object representing the motion effect
2721 Sets a date value in the PDF document. @param key the key under which to store the date @param date the Calendar object representing the date
2722 Sets a string value in the PDF document. @param key the key under which to store the value @param value the string value to store
2723 Sets a string value in the embedded dictionary. @param embedded key for the embedded dictionary @param key dictionary key to set the value for @param value string value to be set
2724 Sets the document's language. @param language ISO 639-1 language code
2725 Sets the document's title. @param title new title for the document
2726 Sets the document's author. @param author name of the author to be set
2727 Sets the document's subject. @param subject the subject to be set
2728 Sets document keywords. @param keywords comma-separated list of keywords
2729 Sets the document's creator. @param creator name of the document creator
2730 Sets the document producer. @param producer name of the producer
2731 Sets or removes the prefix. @param prefix new prefix value or null to remove
2732 Sets the Unicode filename. @param file Unicode filename to be set
2733 Sets the file path in the PDF document. @param file path to the file
2734 Sets the file description. @param description description text to be set
2735 Sets the element identifier. @param id unique identifier string
2736 Sets the title of the document. @param title the new title to set
2737 Sets the document's language. @param language ISO 639-1 language code
2738 Sets an alternate description. @param alternateDescription alternative description text
2739 Sets the expanded form of a PDF annotation. @param expandedForm the expanded text to be set
2740 Sets the actual text of a PDF annotation. @param actualText the text to be displayed for the annotation
2741 Sets the formatted value and notifies of changes. @param formattedValue new formatted string value to set
2742 Sets the modification date of an annotation. @param date the new modification date as a string
2743 Sets the name of an annotation. @param name the new name to set
2744 Sets the contents of an annotation. @param contents text to be set in the annotation
2745 Sets the title of an annotation. @param title the new title for the annotation
2746 Sets the document's subject. @param subject the subject to be set
2747 Sets the annotation symbol. @param symbol type of symbol to set
2748 Sets default appearance for annotation. @param appearance string defining the appearance
2749 Sets the default annotation style. @param style the style to be applied
2750 Sets the caption style. @param captionStyle the new caption style as a string
2751 Sets the state of an annotation. @param state new state value to be set
2752 Sets the state model. @param stateModel the state model to set
2753 Sets the document status. @param status new status value to set
2754 Sets the target string for the PDF element. @param target the target URL or identifier
2755 Sets the partial field name. @param partial the partial name to be set
2756 Sets the name attribute in the reference. @param name the new name value to set
2757 Sets the name in the dictionary. @param name the name to be set
2758 Initializes PDOptionalContentProperties with default settings.
2759 Sets the JavaScript action. @param sAction JavaScript code to be executed
2760 Sets the file name. @param f file name to be set
2761 Sets the "D" attribute in the action. @param d value to be set for the "D" attribute
2762 Sets the "O" string in the action. @param o the string value to be set
2763 Sets the value of the "P" entry in the COS dictionary. @param p the new value for the "P" entry
2764 Sets the URI for an action. @param uri the uniform resource identifier to set
2765 Sets the filename in the dictionary. @param filename the name of the file to be set
2766 Sets the annotation's name. @param name the name to be assigned to the annotation
2767 Sets the filename in PDF parameters. @param file name of the file to be set
2768 Sets the directory path. @param dir directory path to be set
2769 Sets the operation type. @param op the operation string to be set
2770 Sets execution parameter. @param param parameter value to be set
2771 Sets the contents of the dictionary. @param value the content string to be set
2772 Sets the modified date of the PDF document. @param m new modified date string
2773 Sets the annotation name. @param nm the new annotation name
2774 Sets default appearance for PDF form fields. @param daValue default appearance string value
2775 Sets the default style string in the COS object. @param defaultStyleString the style string to be set
2776 Sets the title of the popup. @param t the new title string
2777 Sets the subject of a PDF document. @param subj the subject string to be set
2778 Sets the state of the COS object. @param state new state value to be set
2779 Sets the state model. @param stateModel the state model to set
2780 Sets the normal caption text. @param caption the caption string to be set
2781 Sets the rollover caption. @param caption text to display on rollover
2782 Sets an alternate caption. @param caption the new caption to set
2783 Sets the date in the dictionary. @param date string representation of the date to be set
2784 Sets the URL in the dictionary. @param url the URL to be stored
2785 Sets the URL in the dictionary. @param url the URL to be stored
2786 Sets the name in the dictionary. @param name the new name to set
2787 Sets the document's location. @param location the location string to set
2788 Sets the reason for an action. @param reason the reason string to be set
2789 Sets contact information. @param contactInfo new contact info string
2790 Sets the document's title. @param title new title for the document
2791 Sets default appearance for annotations. @param daValue default appearance string value
2792 Sets default value for a COS object. @param value the default value to be set
2793 Sets the partial name for a dictionary entry. @param name partial name to be set @throws IllegalArgumentException if name contains a period
2794 Sets an alternate field name. @param alternateFieldName the alternate field name to set
2795 Sets the mapping name in the dictionary. @param mappingName the name to be mapped
2796 Sets the value for a COS object. @param value the new string value to set @throws IOException if an I/O error occurs during setting the value
2797 Sets the value of the COS object. @param value new value to be set @throws IOException if an I/O error occurs
2798 Sets default value for a field. @param value the default value to be set
2799 Sets default appearance for annotations. @param daValue default appearance string value
2800 Sets the scale ratio for the PDF object. @param scaleRatio string representing the scale ratio to be set
2801 Sets an integer value in a PDF dictionary using a string key. @param key the string key for the value @param value the integer value to be stored
2802 Sets an integer value in a dictionary within the document. @param embeddedDictionary name of the dictionary to modify @param key key under which to store the integer @param value integer value to set
2803 Sets a bit flag for a specified field. @param field the COSName of the field to modify @param bitFlag the bit flag to set or clear @param value true to set the flag, false to clear it
2804 Sets the structure parents attribute. @param structParents integer value representing parent structures
2805 Sets the page rotation. @param rotation degrees to rotate the page (0, 90, 180, or 270)
2806 Constructs a PDPageTree from a COSDictionary. @param root the root dictionary of the page tree @param document the PDDocument containing this page tree @throws IllegalArgumentException if root is null
2807 Removes a node from the PDF document structure. @param node the COSDictionary node to be removed
2808 Adds a page to the document's page tree. @param page PDPage object to be added
2809 Sets the starting index for pagination. @param start positive integer representing the start index
2810 Sets bits per sample. @param bps number of bits per sample
2811 Sets the MCID (Marked Content Identifier) for the COS object. @param mcid unique identifier for marked content
2812 Sets the revision number for the document. @param revisionNumber non-negative integer representing the revision
2813 Sets the next key in the parent tree. @param parentTreeNextkey the value to be set for PARENT_TREE_NEXT_KEY
2814 Sets the length of the cryptographic filter. @param length the new length value to be set
2815 Sets the document version. @param version the new version number
2816 Sets the length of the dictionary. @param length the new length value to be set
2817 Sets the revision number in the dictionary. @param revision the new revision value to set
2818 Sets document permissions. @param permissions bitmask representing permissions
2819 Sets the current page number. @param page the page number to set
2820 Sets text justification. @param justification alignment type: "centered", "right", or default (left)
2821 Sets the rotation of an annotation. @param rotation angle in degrees (0, 90, 180, or 270)
2822 Sets field flags. @param ff integer representing field flags
2823 Sets field flags. @param ff flag values to be set
2824 Sets clear field flags. @param ff flag value to set
2825 Sets widget field flags. @param f flag value to be set
2826 Sets widget field flags. @param ff flag values to be set
2827 Sets flags for clearing widget fields. @param ff flag values to be set
2828 Sets document flags. @param flags integer representing document flags
2829 Sets font widths based on glyph metrics. @param font the font dictionary to update @param glyphList mapping of glyph names to Unicode @throws IOException if an I/O error occurs
2830 Sets the paint type. @param paintType the new paint type to be set
2831 Sets the pattern type. @param patternType the pattern type to be set
2832 Sets the paint type. @param paintType the new paint type to be set
2833 Sets the tiling type. @param tilingType the tiling type to be set
2834 Sets the shading type in the dictionary. @param shadingType the type of shading to apply
2835 Sets the number of bits per flag in the COS object. @param bitsPerFlag the number of bits to be set
2836 Sets the number of vertices per row. @param verticesPerRow the number of vertices to be set
2837 Sets bits per color component. @param bitsPerComponent number of bits for each color component
2838 Sets bits per coordinate. @param bitsPerCoordinate number of bits for each coordinate
2839 Sets the line cap style. @param style line cap style to be applied
2840 Sets line join style in dictionary. @param style join style to be set
2841 Sets the overprint mode. @param overprintMode the new overprint mode or null to remove
2842 Sets action flags. @param flags integer representing action flags
2843 Sets action flags. @param flags integer representing action properties
2844 Sets the page number in a dictionary. @param pageNumber the new page number to set
2845 Sets annotation index; removes annotation if index is negative. @param index annotation index to set
2846 Sets annotation flags. @param flags integer representing annotation flags
2847 Sets the structure parent of the PDF object. @param structParent parent structure index
2848 Sets the Q value in the COS object. @param q the new Q value to be set
2849 Sets the rotation of the PDF page. @param rotation angle in degrees (0, 90, 180, or 270)
2850 Sets the page mode. @param p page mode value (0-3) @throws IllegalArgumentException if p is out of range
2851 Sets whether timestamp is required. @param flag true if timestamp is required, false otherwise
2852 Sets the open count of the PDF document. @param openCount number of times the document has been opened
2853 Sets the Q value in the dictionary. @param q the Q value to be set
2854 Sets field flags in the dictionary. @param flags integer representing field flags
2855 Sets the top index for an object. @param topIndex the new top index value or null to remove it
2856 Sets the maximum length. @param maxLen the new maximum length value
2857 Sets the Q value in the COS object. @param q the value to be set
2858 Sets a long value in the PDF dictionary. @param key the key under which to store the value @param value the long value to store
2859 Writes the PDF document trailer. @param doc the COSDocument to write the trailer for @throws IOException if an I/O error occurs
2860 Sets the document revision number. @param revision the new revision number
2861 Sets the minimum required revision level. @param revision the minimum revision number to be set
2862 Sets a float value in the PDF document. @param key the key associated with the float value @param value the float value to be stored
2863 Sets the user unit for the PDF page. @param userUnit scaling factor for user space coordinates
2864 Sets the guideline width. @param width the new width value
2865 Sets the opacity of an annotation. @param opacity the new opacity value (0.0 to 1.0)
2866 Sets the leader line length. @param leaderLength the desired length of the leader line
2867 Sets the leader extend value. @param leaderExtend the new leader extend value
2868 Sets the leader line offset for annotation. @param leaderOffset the new leader line offset value
2869 Sets the font weight. @param fontWeight numeric value representing the font weight
2870 Sets the italic angle of the font. @param angle the italic angle value to be set
2871 Sets the ascent value in the dictionary. @param ascent the ascent value to be set
2872 Sets the descent value. @param descent font metric value
2873 Sets the leading value for text. @param leading spacing between lines of text
2874 Sets the capital height of the font. @param capHeight the new capital height value
2875 Sets the X height of the font. @param xHeight new X height value
2876 Sets vertical stem width. @param stemV vertical stem width value
2877 Sets stem height for font. @param stemH height of stems in font metrics
2878 Sets the average width of characters. @param averageWidth the average width value to be set
2879 Sets the maximum width. @param maxWidth the new maximum width value
2880 Sets the missing width value in the dictionary. @param missingWidth the width to be set
2881 Sets the X step value. @param xStep the new X step value to set
2882 Sets the Y-axis step value. @param yStep the step size on the Y-axis
2883 Sets the audio volume. @param volume float value between -1.0 and 1.0
2884 Sets the length of the leader line. @param leaderLineLength the desired length of the leader line
2885 Sets the leader line extension length. @param leaderLineExtensionLength the new extension length value
2886 Sets the leader line offset length. @param leaderLineOffsetLength the new offset length for leader lines
2887 Sets constant opacity. @param ca opacity value (0.0 to 1.0)
2888 Sets the width of an element. @param w the width value to set
2889 Sets the minimum required capability. @param minimumRequiredCapability the capability value to set
2890 Sets the CYX value in the COS object. @param cyx the float value to be set
2891 Parses a COSDictionary to create a COSStream. @param dic dictionary containing stream data @return COSStream object @throws IOException if parsing fails or length is invalid
2892 Merges content from one object to another. @param base source object containing data to merge @param target destination object to receive merged data @throws IOException if an I/O error occurs during merging
2893 Parses a PDF or FDF file. @param lenient whether to ignore parsing errors @return PDDocument object representing the parsed document @throws IOException if an I/O error occurs during parsing
2894 Processes PDF stream operators. @param contentStream the PDF content stream to process @throws IOException if an I/O error occurs
2895 Parses input and returns a list of tokens. @return List containing parsed objects or an empty list if no tokens found @throws IOException if an I/O error occurs during parsing
2896 Retrieves the bounding box of a glyph. @return PDRectangle representing the glyph's bounds or null if not found
2897 Parses PDF to get width. @throws IOException if parsing fails @return width as float
2898 Writes PDF document to output. @param doc PDDocument to be written @throws IOException if an I/O error occurs
2899 Saves incremental PDF changes to an output stream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
2900 Constructs a new PDDocument using an in-memory stream cache.
2901 Retrieves the document catalog. @return PDDocumentCatalog object representing the document's catalog
2902 Retrieves a COSDictionary representing a page by its 1-based page number. @param pageNum the 1-based page number to retrieve @param node the current node in the PDF structure tree @param encountered the count of pages already processed @return the COSDictionary for the specified page or throws an exception if not found
2903 Creates a PDFileSpecification from a COSBase object. @param base the underlying COSBase object @return PDFileSpecification or null if base is null @throws IOException if base type is unknown
2904 Notifies attribute change to associated structure element.
2905 Appends a COSObjectable's COSObject to the kids list. @param objectable the COSObjectable to append, ignored if null
2906 Inserts a COSObjectable before another object. @param newKid the object to insert @param refKid reference object to insert before
2907 Removes an objectable from kids list. @param objectable the object to remove @return true if removed, false otherwise
2908 Sets the standard cryptographic filter dictionary. @param cryptFilterDictionary the cryptographic filter to be set
2909 Sets the default cryptographic filter dictionary. @param defaultFilterDictionary the cryptographic filter dictionary to set
2910 Constructs a new FDFAnnotationCaret. Initializes the annotation subtype to "Caret".
2911 Constructs a new circle annotation. Initializes the annotation name to "Circle".
2912 Constructs a new file attachment annotation. Initializes the annotation with the subtype "FileAttachment".
2913 Initializes a new free text annotation.
2914 Initializes an ink annotation.
2915 Constructs a new line annotation. Sets the subtype to "Line".
2916 Initializes a new FDF annotation link. Sets the subtype to "Link".
2917 Constructs a new polygon annotation. Initializes the annotation with subtype "Polygon".
2918 Constructs a new polyline annotation. Initializes the annotation with the subtype "PolyLine".
2919 Constructs a new FDF annotation sound. Initializes the annotation with the subtype "Sound".
2920 Constructs a new square annotation. Initializes the annotation subtype to "Square".
2921 Initializes a new FDFAnnotationStamp with a specific subtype.
2922 Constructs a new text annotation. Initializes the annotation subtype to "Text".
2923 Constructs an instance of FDFAnnotationTextMarkup.
2924 Builds vertical metrics for CID font. @param cidFont CID font dictionary to update @throws IOException if an I/O error occurs
2925 Constructs a new instance of PDSimpleFont.
2926 Retrieves an optional content group by name. @param name the name of the group to find @return PDOptionalContentGroup object or null if not found
2927 Retrieves optional content groups. @return Collection of PDOptionalContentGroup objects
2928 Sets the line width. @param width the desired line width
2929 Sets the miter limit for line joins. @param miterLimit the miter limit value to set
2930 Sets the flatness tolerance for rendering. @param flatness the desired flatness value
2931 Sets the smoothness tolerance. @param smoothness the smoothness value to set
2932 Sets the stroking alpha constant. @param alpha the alpha value to set
2933 Sets non-stroking alpha constant. @param alpha transparency value (0.0 to 1.0)
2934 Creates a new annotation link. Initializes the COS object with the subtype "Link".
2935 Constructs a new PDAnnotationMarkup instance.
2936 Creates a new annotation popup. Sets the subtype to "Popup" in the COS object.
2937 Constructs a new PDF annotation widget. Sets the subtype to "Widget" in the COS object.
2938 Creates a new annotation link from a COS dictionary. @param field COS dictionary containing annotation data
2939 Constructs a new PDAnnotationMarkup from a COSDictionary. @param dict the dictionary containing annotation properties
2940 Constructs a PDAnnotationPopup from a COSDictionary. @param field dictionary representing the popup annotation
2941 Constructs an unknown annotation from a COS dictionary. @param dic dictionary containing annotation data
2942 Creates a new annotation widget for a PDF form field. @param field dictionary representing the form field
2943 Sets uniform differences for all sides of a rectangle. @param difference the same value applied to all four sides
2944 Sets uniform differences for all sides of a rectangle. @param difference the uniform difference value to apply
2945 Sets uniform differences for all sides of a rectangle. @param difference value to be applied uniformly to all four sides
2946 Sets the border line for a PDF object. @param lineWidth width of the border line @param bs border style dictionary @param border COSArray representing the border @throws IOException if an I/O error occurs
2947 Adds key usage by appending specified flags. @param digitalSignature, nonRepudiation, etc. - individual key usage flags
2948 Constructs a PDCheckBox associated with a PDAcroForm. @param acroForm the form to which this checkbox belongs
2949 Creates a combo box within an Acrobat form. @param acroForm the parent Acrobat form
2950 Constructs a PDListBox associated with a PDAcroForm. @param acroForm the form to which this list box belongs
2951 Sets the value of a form field. @param value the new value to set @throws IOException if an I/O error occurs
2952 Retrieves or creates a PDF border array. @return COSArray representing the border, defaulting to [0 0 1] if none exists
2953 Initializes a compression pool for a PDF document. @param document the PDF document to compress @param parameters optional compression parameters @throws IOException if an I/O error occurs
2954 Retrieves an embedded date from a PDF document. @param embedded name of the embedded object @param key key for the date value @return Calendar object representing the date or null if not found
2955 Creates an image object from a BufferedImage. @param document PDF document to add the image to @param image source BufferedImage @return PDImageXObject representing the image @throws IOException if there is an I/O error
2956 Adds corner curl effect to path. @param anglePrev previous angle in radians @param angleCur current angle in radians @param radius curvature radius @param cx center x-coordinate @param cy center y-coordinate @param alpha rotation adjustment in radians @param alphaPrev previous rotation adjustment in radians @param addMoveTo whether to add a move-to command @throws IOException if an I/O error occurs
2957 Draws a basic ellipse using specified bounds. @param left x-coordinate of the left boundary @param bottom y-coordinate of the bottom boundary @param right x-coordinate of the right boundary @param top y-coordinate of the top boundary
2958 Formats text content by wrapping lines and aligning text. Throws IOException if an I/O error occurs during formatting.
2959 Calculates font size for text within a content rectangle. @param font the PDFont to be used @param contentRect the PDRectangle where text will fit @return calculated font size or default if auto-sizing @throws IOException if an I/O error occurs
2960 Reads font encoding from dictionary. Handles COSName and COSDictionary cases, with fallbacks.
2961 Determines if a font is symbolic. @return Boolean indicating if the font is symbolic or null if unsure.
2962 Retrieves TrueType font for given base font and descriptor. @param baseFont base font name @param fontDescriptor PDFontDescriptor object @return FontMapping with TrueTypeFont or fallback font
2963 Retrieves a FontBoxFont by base name or fallback. @param baseFont primary font name @param fontDescriptor font descriptor for fallback @return FontMapping object with found or fallback font
2964 Checks if XFA is dynamic. @return true if XFA exists and no fields are present; false otherwise
2965 Retrieves rich content from annotation. @return rich content as string or empty if not present
2966 Writes XML representation of a field to the given writer. @param output Writer object to write XML to @throws IOException if an I/O error occurs
2967 Retrieves rich text value. @return Rich text string or null if not available
2968 Constructs a PDFunctionType4 from a COSBase stream. @param functionStream the COSBase object containing the function data @throws IOException if an I/O error occurs during parsing
2969 Recursively interpolates samples based on coordinates. @param coord current coordinate array @param step current interpolation step @return interpolated float array of samples
2970 Initializes a Type6ShadingContext. @param shading PDShadingType6 object representing the shading @param colorModel ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the pattern's geometry @param deviceBounds Rectangle specifying the bounds of the device area @throws IOException if an I/O error occurs during initialization
2971 Constructs a Type7ShadingContext. @param shading PDShadingType7 instance @param colorModel Color model for rendering @param xform Transformation matrix @param matrix Additional transformation matrix @param deviceBounds Device bounds rectangle @throws IOException if an I/O error occurs
2972 Retrieves bytes from XFA or COSStream. @return byte array containing data, empty if not applicable @throws IOException on I/O error
2973 Initializes a new PDPageFitDestination with type.
2974 Sets whether to fit bounding box. @param fitBoundingBox flag to enable or disable bounding box fitting
2975 Initializes a new destination to fit page height. Sets up an array with specific type.
2976 Sets the left value in the array. @param x integer value to set; -1 for null
2977 Sets the bounding box fitting option. @param fitBoundingBox flag to enable or disable bounding box fitting
2978 Initializes a new PDPageFitRectangleDestination. Sets up an internal array and names it.
2979 Sets the left value in the array. @param x integer value to set; -1 for null
2980 Sets the bottom position in the array. @param y vertical coordinate or -1 to clear
2981 Sets the right value in the array. @param x value to set, or -1 to clear
2982 Sets the top value in the array. @param y integer value to set or -1 to clear
2983 Constructs a PDPageFitWidthDestination. Initializes an array and sets its second element to TYPE.
2984 Sets the top value in an array. @param y integer value to set or -1 to clear
2985 Sets the bounding box fitting option. @param fitBoundingBox flag to enable or disable bounding box fitting
2986 Initializes a PDPageXYZDestination with default settings.
2987 Sets the left value in the array. @param x value to set; -1 sets to null
2988 Sets the top value in the array. @param y value to set at index 3, or -1 to set null
2989 Sets the zoom level for an array element. @param zoom the zoom factor to apply
2990 Parses a COS dictionary value and returns the corresponding COSBase object. @return Parsed COSBase object or null if invalid
2991 Retrieves decode parameters for a PDF object. @return List of decode parameters or null if not found @throws IOException if an I/O error occurs
2992 Retrieves file decoding parameters. @return list of decode parameters or empty list if none found @throws IOException if an I/O error occurs
2993 Initializes a new instance of PDCalGray.
2994 Constructs a new PDCalRGB color space.
2995 Constructs a new PDLab instance with LAB color space. @param COSName.LAB constant representing LAB color space
2996 Constructs a PDCalGray from a COSArray. @param array COSArray containing gray scale data
2997 Constructs a PDCalRGB with specified RGB array. @param rgb COSArray representing RGB values
2998 Constructs a PDLab from a COSArray. @param lab COSArray representing the lab data
2999 Loads ICC color profile from input stream. Handles sRGB and alternate color space fallbacks.
3000 Sets the range for component 0. @param range PDRange object defining the new range
3001 Sets the B component range. @param range PDRange object defining the new range
3002 Retrieves the crop box of a page. @return PDRectangle representing the crop box or media box if not set
3003 Resolves the bounding box for a form field widget. @param fieldWidget the widget associated with the form field @param appearanceStream the appearance stream of the widget @return the resolved PDRectangle bounding box
3004 Sets the bounding box for the PDF object. @param bbox PDRectangle representing the new bounding box
3005 Sets a color with the given name. @param name key for the color setting @param value PDGamma object representing the color
3006 Sets four colors in the PDF document. @param name key for the color setting @param value PDFourColours object representing the colors
3007 Creates a new PDPage with default LETTER size.
3008 Adds an object to resources. If it exists, returns existing key. @param kind type of resource (e.g., FONT) @param prefix for generating unique key @param object the COSObjectable to add @return COSName of the added or existing object
3009 Associates a font with a given COSName. @param name the COSName to associate the font with @param font the PDFont object to be associated
3010 Associates a color space with a given name. @param name the key for the color space @param colorSpace the color space to associate
3011 Adds an extended graphics state to the map. @param name key for the graphics state @param extGState extended graphics state object
3012 Adds a shading to the dictionary. @param name key for the shading entry @param shading PDShading object to add
3013 Adds a named pattern to the resource dictionary. @param name the key under which to store the pattern @param pattern the PDAbstractPattern object to add
3014 Sets properties for a given COSName. @param name the COSName to set properties for @param properties the PDPropertyList containing the properties
3015 Adds an XObject to the dictionary. @param name key under which to store the XObject @param xobject the XObject to add
3016 Retrieves or creates the FDF dictionary. @return FDFDictionary object
3017 Initializes a new FDFDocument with default settings and structures.
3018 Retrieves or creates the FDF catalog. @return FDFCatalog object representing the document's catalog
3019 Retrieves the fractional space to allocate. @return PDRange object representing the allocation range
3020 Constructs a new tiling pattern. Initializes resources and sets necessary COS object properties.
3021 Retrieves or creates the appearance dictionary for an annotation. @return PDAppearanceDictionary associated with the annotation
3022 Inserts a sibling before the current outline item. @param newSibling the new sibling to insert
3023 Inserts a sibling node after the current outline item. @param newSibling the new sibling to insert
3024 Adds a new child to the outline. @param newChild the new child item to add
3025 Adds a child item to the beginning of the outline. @param newChild the new child item to prepend
3026 Sets the first bead of the thread. @param bead the bead to be set as the first bead
3027 Initializes a new PDThreadBead with default settings.
3028 Appends a bead to the thread. @param append PDThreadBead to be appended
3029 Sets a name-value pair in the COS object. @param name key for the value @param value to be set for the key
3030 Sets rendering intent. @param ri rendering intent string
3031 Sets the name attribute. @param name the new name value to be set
3032 Sets the style of the PDF element. @param s the style string to be applied
3033 Initializes page labels for a PDF document. @param document the PDDocument to apply page labels to
3034 Initializes a new PDStructureElement. @param structureType type of structure element @param parent parent PDStructureNode
3035 Constructs a new PDStructureTreeRoot. Initializes with a specific type.
3036 Initializes a shading pattern. Sets the pattern type to shading.
3037 Initializes a new PDAction with a default COSDictionary.
3038 Retrieves document outline. @return PDDocumentOutline object or null if not available
3039 Retrieves the parent outline node. @return parent PDOutlineNode or null if none exists
3040 Sets value at specified index. @param index position in export values list @throws IOException if an I/O error occurs
3041 Initializes a new PDRectlinearMeasureDictionary with a specific subtype.
3042 Constructs a PDTransition with style R.
3043 Sets a date value in the document. @param key the key associated with the date @param date the Calendar object representing the date
3044 Sets a date value in the embedded dictionary. @param embedded name of the embedded item @param key name of the date field @param date Calendar object to set
3045 Sets the creation date of an object. @param date calendar representing the creation date
3046 Sets the modification date of an information dictionary. @param date the new modification date to set
3047 Sets the creation date of an annotation. @param date Calendar object representing the creation date
3048 Sets the modified date of the COS object. @param c Calendar instance representing the new modification date
3049 Sets the creation date of the PDF document. @param creationDate Calendar object representing the creation date
3050 Sets the signature date in the dictionary. @param cal Calendar object representing the signature date
3051 Sets custom metadata value. @param fieldName name of the metadata field @param fieldValue value to be set for the metadata field
3052 Sets a string value in the COS object. @param name key for the string value @param value string to be set
3053 Sets the base string for the COS object. @param base the base string to be set
3054 Sets the application version in the dictionary. @param applicationVersion the version string to be stored
3055 Sets the measurement units. @param units the new units to be set
3056 Sets the fractional display format. @param fractionalDisplay format type ("D", "F", "R", "T", or null)
3057 Sets the thousands separator for the COS object. @param thousandsSeparator the string to use as thousands separator
3058 Sets the decimal separator in the COS object. @param decimalSeparator the new decimal separator string
3059 Sets the label prefix string. @param labelPrefixString the prefix to be set
3060 Sets the label suffix string in the COS object. @param labelSuffixString the suffix to append to labels
3061 Sets the label position to a specified value. @param labelPositionToValue "S" for suffix, "P" for prefix, or null @throws IllegalArgumentException if value is not "S", "P", or null
3062 Sets the MAC subtype in PDF parameters. @param macSubtype the MAC subtype to set
3063 Sets the Mac creator in PDF document parameters. @param macCreator Mac creator string to set
3064 Sets the Mac resource fork. @param macResFork resource fork string to set
3065 Constructs an FDFField from XML. @param fieldXML XML element representing the field @throws IOException if XML processing fails
3066 Constructs an optional content group with a specified name. @param name the name of the content group
3067 Adds a group to the document's optional content groups. @param ocg the optional content group to add
3068 Retrieves the base state from a dictionary. @return BaseState object representing the base state
3069 Enables or disables a PDF optional content group. @param group the group to enable/disable @param enable true to enable, false to disable @return true if the group was previously enabled/disabled, false otherwise
3070 Sets an integer value in the COS object. @param name key for the dictionary entry @param value integer value to set
3071 Sets an integer value in the COS object. @param name dictionary key @param value integer to set
3072 Sets the denominator value. @param denominator the new denominator to be set
3073 Sets annotation visibility. @param invisible true to make annotation invisible, false otherwise
3074 Sets the annotation's visibility. @param hidden true to hide, false to show
3075 Sets the printed flag of an annotation. @param printed boolean indicating if the document is printed
3076 Sets flag to disable zooming. @param noZoom true to disable zooming, false otherwise
3077 Sets rotation flag for annotation. @param noRotate true to disable rotation, false otherwise
3078 Sets the "no view" flag for an annotation. @param noView true to hide the annotation, false otherwise
3079 Sets the annotation to read-only mode. @param readOnly true to make the annotation read-only, false otherwise
3080 Sets the locked status of an annotation. @param locked true to lock, false to unlock
3081 Sets the toggle for no view. @param toggleNoView flag to enable or disable no view mode
3082 Sets locked contents flag. @param lockedContents true to lock contents, false otherwise
3083 Sets the visibility of the object. @param invisible true to make the object invisible, false otherwise
3084 Sets the visibility of the object. @param hidden true to hide, false to show
3085 Sets the printed flag of the COS object. @param printed boolean indicating if the document is printed
3086 Sets the zoom restriction flag. @param noZoom true to disable zooming, false otherwise
3087 Sets the no rotate flag. @param noRotate true to prevent rotation, false otherwise
3088 Sets the no-view flag in the COS object. @param noView boolean indicating whether to set or clear the no-view flag
3089 Sets the read-only flag of the PDF document. @param readOnly true to make the document read-only, false otherwise
3090 Sets the locked state of the document. @param locked true to lock, false to unlock
3091 Sets the toggle no view flag. @param toggleNoView boolean value to set the flag
3092 Sets the locked contents flag. @param lockedContents true to lock contents, false otherwise
3093 Sets filter requirement flag. @param flag indicates if filtering is required
3094 Sets whether sub-filter is required. @param flag true if sub-filter is required, false otherwise
3095 Sets whether digest method is required. @param flag true if digest method is required, false otherwise
3096 Sets the required flag for form field validation. @param flag true if field is required, false otherwise
3097 Sets whether reason is required. @param flag true if reason is required, false otherwise
3098 Sets legal attestation requirement. @param flag true if attestation is required, false otherwise
3099 Sets whether adding revision information is required. @param flag true if required, false otherwise
3100 Sets whether subject is required. @param flag true if subject is required, false otherwise
3101 Sets whether issuer is required. @param flag true if issuer is required, false otherwise
3102 Sets whether OID is required. @param flag true if OID is required, false otherwise
3103 Sets whether subject DN is required. @param flag true if required, false otherwise
3104 Sets whether key usage is required. @param flag true if key usage is mandatory, false otherwise
3105 Sets whether URL is required. @param flag true if URL is required, false otherwise
3106 Sets the italic style of the text. @param italic true to apply italic style, false otherwise
3107 Sets the font to bold. @param bold true to enable bold, false otherwise
3108 Sets flag indicating if signatures exist. @param signaturesExist true if signatures are present, false otherwise
3109 Sets the append-only flag. @param appendOnly true to enable append-only mode, false otherwise
3110 Sets the sort flag for the COS object. @param sort true to enable sorting, false otherwise
3111 Sets the multi-select flag in the COS object. @param multiSelect true to enable multi-selection, false otherwise
3112 Sets the spell check flag. @param doNotSpellCheck true to disable spell check, false to enable
3113 Sets whether to commit changes on selection. @param commitOnSelChange flag indicating if changes should be committed on selection change
3114 Sets the combo flag in the COS object. @param combo boolean value to enable or disable combo mode
3115 Sets the editable flag of the COS object. @param edit true to make the object editable, false otherwise
3116 Sets the read-only flag of the dictionary. @param readonly true to make the dictionary read-only, false otherwise
3117 Sets the field as required. @param required true if field is required, false otherwise
3118 Sets export flag for dictionary. @param noExport true to prevent export, false otherwise
3119 Creates a push button within an Acrobat form. @param acroForm the parent form containing this button
3120 Initializes a new radio button field. @param acroForm the form containing the radio button
3121 Sets whether radio buttons are in unison. @param radiosInUnison true if radio buttons should be synchronized, false otherwise
3122 Sets the multiline flag for the form field. @param multiline true if the field supports multiple lines, false otherwise
3123 Sets the password flag in the PDF form field. @param password boolean indicating if the field requires a password
3124 Sets the file selection flag. @param fileSelect true to enable file selection, false otherwise
3125 Sets the spell check flag. @param doNotSpellCheck true to disable spell checking, false otherwise
3126 Sets whether to disable scrolling in the PDF form field. @param doNotScroll true to disable scrolling, false otherwise
3127 Sets the 'comb' flag in the COS object. @param comb true to enable comb mode, false otherwise
3128 Sets whether to use rich text. @param richText true if rich text is used, false otherwise
3129 Decodes a JPX encoded image. @param encoded input stream containing encoded data @param decoded output stream for decoded data @param parameters decoding parameters @param index image index (unused) @param options decode options @return DecodeResult with metadata @throws IOException if an I/O error occurs or unsupported data type is encountered
3130 Validates page objects in the PDF document. @param root root dictionary of the PDF document @throws IOException if validation fails or page tree is missing
3131 Retrieves pages from the PDF document. @return PDPageTree containing all pages in the document
3132 Constructs a PDPageTree from a COSDictionary. @param root dictionary representing the page tree
3133 Removes a page from the document. @param page PDPage object to be removed
3134 Inserts a new page before an existing page in a PDF document. @param newPage the page to be inserted @param nextPage the page after which the new page will be inserted
3135 Inserts a new page after a specified previous page in a PDF document. @param newPage the page to be inserted @param prevPage the page after which the new page should be inserted
3136 Increments the revision number by one.
3137 Creates a PDImageXObject from a BufferedImage. @param document PDF document to associate with the image @param image 1-bit black and white BufferedImage @return PDImageXObject representing the image @throws IOException if an I/O error occurs
3138 Creates an image from a TIFF file using random access. @param document PDF document to add the image to @param reader RandomAccessRead for reading the TIFF file @param number page number in the TIFF file @return PDImageXObject created from the TIFF page or null if empty
3139 Sets a float value in the COS object by name. @param name key for the value @param value float value to set
3140 Sets intensity value. @param i new intensity level
3141 Sets the conversion factor. @param conversionFactor the new conversion factor value
3142 Parses a cross-reference object stream. @param objByteOffset byte offset of the object @param isStandalone true if parsing standalone, false otherwise @return previous XRef table offset or 0 if not found @throws IOException on I/O error
3143 Parses document with default settings. @return parsed PDF document @throws IOException if parsing fails
3144 Processes a transparency group in the current page. @param group PDTransparencyGroup to be processed @throws IOException if an I/O error occurs
3145 Processes Type 3 character stream. @param charProc character procedure to process @param textRenderingMatrix transformation matrix for text rendering @throws IOException if an I/O error occurs
3146 Processes annotation appearance by scaling and transforming it. @param annotation the annotation to process @param appearance the appearance stream associated with the annotation @throws IOException if an I/O error occurs
3147 Processes a tiling pattern with given color and matrix. @param tilingPattern the tiling pattern to process @param color the color for non-colored patterns @param colorSpace the color space to apply @param patternMatrix the transformation matrix for the pattern @throws IOException if an I/O error occurs
3148 Processes a PDF content stream, applying transformations and clipping. @param contentStream the PDF content stream to process @throws IOException if an I/O error occurs during processing
3149 Writes a PDF document. @param doc COSDocument to be written @throws IOException if an I/O error occurs
3150 Saves the document to an output stream with specified compression. @param output destination for saving the document @param compressParameters parameters for compression or null for no compression @throws IOException if document is closed or IO error occurs
3151 Returns the highest version number from document and catalog. @return float representing the version number
3152 Retrieves a page from the PDF document. @param index zero-based index of the page @return PDPage object representing the page
3153 Removes an element at the specified index. @param index position of the element to remove
3154 Searches for a page index within a document. @param page the PDPage to search for @return index of the page or -1 if not found
3155 Retrieves file specification from PDF stream. @return PDFileSpecification object representing the file @throws IOException if an I/O error occurs
3156 Retrieves file specification from FDF dictionary. @return PDFileSpecification object representing the file @throws IOException if an I/O error occurs
3157 Retrieves embedded FDF files. @return List of PDFileSpecification objects representing embedded FDFs @throws IOException if an I/O error occurs
3158 Retrieves file specification from reference dictionary. @return PDFileSpecification object @throws IOException if an I/O error occurs
3159 Retrieves file specification from PDF object. @return PDFileSpecification object representing the file @throws IOException if an I/O error occurs
3160 Retrieves file specification from action dictionary. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs
3161 Retrieves file specification from PDF object. @return PDFileSpecification representing the file @throws IOException if an error occurs during retrieval
3162 Retrieves file specification from action dictionary. @return PDFileSpecification object representing the file @throws IOException if an I/O error occurs
3163 Retrieves file specification from action dictionary. @return PDFileSpecification object @throws IOException if an I/O error occurs
3164 Retrieves file specification from action dictionary. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs
3165 Retrieves file specification from PDF object. @return PDFileSpecification object representing the file @throws IOException if an I/O error occurs
3166 Notifies change if values differ. @param oldBase previous base object @param newBase current base object
3167 Appends a kid to the current structure element. @param structureElement the child element to be added
3168 Inserts a new structure element before a reference element. @param newKid the new element to insert @param refKid the reference element before which to insert
3169 Removes a child element from the structure. @param structureElement the child element to remove @return true if removal was successful, false otherwise
3170 Creates a new highlight annotation. Initializes the annotation subtype to "Highlight".
3171 Creates a new squiggly annotation.
3172 Creates a new strike-out annotation.
3173 Creates an underline annotation. Sets the subtype to "Underline".
3174 Initializes a new file attachment annotation. Sets the subtype to "FileAttachment" in the COS object.
3175 Initializes a new PDAnnotationInk object with subtype "Ink".
3176 Initializes a new line annotation. Sets the subtype to "Line" and initializes the line coordinates.
3177 Creates a new polygon annotation. Initializes the COS object with the subtype "Polygon".
3178 Creates a new polyline annotation. Sets the subtype to "PolyLine".
3179 Creates a new rubber stamp annotation. Sets the subtype to "RubberStamp" in the COS object.
3180 Creates a square or circle annotation. @param subType subtype of the annotation ("Square" or "Circle")
3181 Creates a new text annotation.
3182 Constructs a text markup annotation. @param subType specific type of text markup (e.g., highlight, underline)
3183 Constructs a PDAnnotationCaret from a COSDictionary. @param field dictionary containing annotation properties
3184 Constructs a new file attachment annotation. @param field COSDictionary containing annotation properties
3185 Constructs a free text annotation from a dictionary. @param field COSDictionary representing the annotation
3186 Constructs an ink annotation from a COS dictionary. @param dict the COS dictionary containing annotation data
3187 Constructs a new line annotation from a COS dictionary. @param field The COS dictionary representing the annotation
3188 Creates a new polygon annotation from a COS dictionary. @param dict dictionary containing annotation properties
3189 Constructs a PDAnnotationPolyline from a COSDictionary. @param dict dictionary containing annotation properties
3190 Constructs a rubber stamp annotation from a COS dictionary. @param field COS dictionary representing the annotation
3191 Constructs a new sound annotation from a COS dictionary. @param field COS dictionary representing the sound annotation
3192 Initializes a new square or circle annotation from a COS dictionary. @param dict the COS dictionary containing annotation properties
3193 Constructs a text annotation from a COS dictionary. @param field PDF dictionary containing annotation properties
3194 Constructs a text markup annotation from a COS dictionary. @param field COS dictionary representing the annotation
3195 Retrieves the associated popup annotation. @return PDAnnotationPopup object or null if none exists
3196 Retrieves all widget annotations. @return List of PDAnnotationWidget objects
3197 Writes compressed body of a PDF document. Handles encryption and compression of objects. @param document COSDocument to write @throws IOException if an I/O error occurs
3198 Determines if the font is symbolic. @return true if the font is symbolic, false otherwise
3199 Checks if the PDF form is dynamic XFA. @param acroForm the PDF AcroForm to check @return true if the form is dynamic XFA, false otherwise
3200 Initializes iterator with fields from a PDF form. @param form the PDAcroForm containing fields to iterate over
3201 Creates a PDF function from a COSBase object. @param function the base object representing the function @return PDFunction instance or throws IOException for invalid input
3202 Performs recursive interpolation. @return interpolated values as an array of floats
3203 Extracts matte values from soft mask image. @param softMask the PDImageXObject containing the soft mask @return float array of RGB matte values or null if invalid
3204 Parses and returns a PDF document. @return Document object representing the parsed PDF @throws IOException if an I/O error occurs during parsing
3205 Encodes an image into a PDImageXObject. @return PDImageXObject containing encoded image data @throws IOException if encoding fails
3206 Sets the destination page for navigation. @param page the target page to navigate to
3207 Initializes a page for processing. @param page the PDF page to initialize @throws IllegalArgumentException if page is null
3208 Retrieves the bleed box of a PDF page. @return PDRectangle representing the bleed box or crop box if bleed box is not set
3209 Retrieves the trim box of the page, clipping it to the media box if necessary. @return PDRectangle representing the trimmed page area or crop box if trim box is absent
3210 Retrieves the art box of a PDF page, clipping it to the media box if present. @return PDRectangle representing the art box or crop box if art box is not available
3211 Returns the rotated crop box of a PDF page. @param page the PDF page to process @return PDRectangle representing the rotated crop box
3212 Adds a font to the dictionary. @param font PDFont object to be added @return COSName representing the font key
3213 Adds a color space to the dictionary. @param colorSpace the color space to add @return the COSName associated with the added color space
3214 Adds an extended graphics state to the dictionary. @param extGState extended graphics state object @return COSName of the added graphics state
3215 Adds a shading to the document. @param shading PDShading object to be added @return COSName representing the added shading
3216 Adds a pattern to the document. @param pattern PDAbstractPattern object to add @return COSName representing the added pattern
3217 Adds a property list to the COSDictionary. @param properties PDPropertyList object to be added @return COSName key under which the property is stored
3218 Adds an image to the document. @param image PDImageXObject to be added @return COSName of the added image
3219 Adds a PDF form to the resources. @param form PDFormXObject to be added @return COSName of the added form
3220 Adds an XObject with a specified prefix. @param xobject PDXObject to be added @param prefix name prefix for the object @return COSName of the added object
3221 Exports form fields to an FDF document. @return FDFDocument containing exported fields @throws IOException if an I/O error occurs
3222 Retrieves or creates the appearance entry for a button's pressed state. @return PDAppearanceEntry object representing the pressed state appearance
3223 Retrieves or creates the rollover appearance entry for a PDF widget. @return The rollover appearance entry, ensuring it is not a sub-dictionary.
3224 Retrieves or creates the normal appearance entry. @return PDAppearanceEntry object for normal appearance
3225 Adds a child outline item to the end. @param newChild the new outline item to add
3226 Adds a new child item at the beginning of the outline. @param newChild PDOutlineItem to be added
3227 Initializes page labels for a document from a dictionary. @param document the PDF document to apply labels to @param dict the COSDictionary containing label information @throws IOException if an I/O error occurs
3228 Initializes a new instance of PDActionEmbeddedGoTo. Sets the subtype to SUB_TYPE.
3229 Initializes a new PDActionGoTo action.
3230 Constructs a PDActionHide instance with a predefined subtype.
3231 Constructs a new PDActionImportData with a predefined subtype.
3232 Constructs a PDActionJavaScript with a predefined subtype.
3233 Initializes a new PDActionLaunch with a predefined subtype.
3234 Constructs a new PDActionMovie instance. Sets the subtype to SUB_TYPE.
3235 Constructs a PDActionNamed with a predefined subtype. Sets the subtype to SUB_TYPE upon creation.
3236 Constructs a PDActionRemoteGoTo action. Sets the subtype to SUB_TYPE.
3237 Initializes a new PDActionResetForm with a specific subtype.
3238 Constructs a new PDActionSound with a predefined subtype.
3239 Initializes a new PDActionSubmitForm with a specific subtype.
3240 Initializes a new PDActionThread with a specific subtype. @param SUB_TYPE predefined subtype for the action thread
3241 Constructs a PDActionURI with a predefined subtype.
3242 Updates the open count of parent nodes recursively. @param delta amount to adjust the open count by
3243 Sets the value with validation and appropriate update strategy. @param value new value to be set @throws IOException if an I/O error occurs during processing
3244 Checks if a PDF group is enabled. @param group the PDOptionalContentGroup to check @return true if the group is enabled, false otherwise
3245 Enables or disables a group by name. @param groupName the name of the group to modify @param enable true to enable, false to disable @return true if operation successful, false otherwise
3246 Retrieves the pages of the PDF document. @return PDPageTree containing all pages in the document
3247 Returns the number of pages in the document. @return integer count of pages
3248 Sets fixed pitch flag. @param flag true to enable fixed pitch, false otherwise
3249 Sets serif font style. @param flag true to enable serif, false otherwise
3250 Sets symbolic flag. @param flag true to enable, false to disable
3251 Sets script execution flag. @param flag true to enable script, false otherwise
3252 Sets the non-symbolic flag. @param flag true to enable, false to disable
3253 Sets the italic style flag. @param flag true to enable italic, false otherwise
3254 Sets the all capitalization flag. @param flag true to enable all caps, false otherwise
3255 Sets the small cap flag. @param flag true to enable small cap, false otherwise
3256 Sets the force bold flag. @param flag true to enable force bold, false otherwise
3257 Creates an image object from a byte array. @param document PDF document to add the image to @param byteArray image data as bytes @param number image identifier @return PDImageXObject created from the byte array @throws IOException if there is an error processing the byte array
3258 Creates an image object from a file. @param document PDF document to add the image to @param file image file to read @param number image number in the document @return PDImageXObject or throws IOException if file cannot be read
3259 Constructs a FDFAnnotation from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3260 Parses PDF object dynamically from document. @param objKey key of the object to parse @param requireExistingNotCompressedObj flag to check for existing non-compressed objects @return parsed COSBase object or null if not found
3261 Parses XRef tables and trailers in a PDF document. @param document the COSDocument to parse @param startXRefOffset offset of the first xref table @return parsed COSDictionary representing the trailer @throws IOException if parsing fails
3262 Processes and displays a transparency group. @param form PDTransparencyGroup object to be processed @throws IOException if an I/O error occurs during processing
3263 Processes a soft mask for transparency group. @param group the transparency group to process @throws IOException if an I/O error occurs
3264 Renders a Type 3 glyph using the provided matrix and font. @param textRenderingMatrix transformation matrix for rendering @param font PDType3Font containing character procedures @param code character code to render @param displacement vector for additional positioning (unused)
3265 Displays an annotation using its appearance stream. @param annotation the PDF annotation to display @throws IOException if an I/O error occurs
3266 Processes a tiling pattern with specified color and colorspace. @param tilingPattern the tiling pattern to process @param color the color to apply @param colorSpace the colorspace of the color
3267 Displays a form on the current page. @param form the PDF form to display @throws IOException if an I/O error occurs
3268 Saves data to an output stream with default compression. @param output destination OutputStream @throws IOException if an I/O error occurs
3269 Saves data to a file with compression. @param file the target file to save to @param compressParameters parameters for compression @throws IOException if an I/O error occurs
3270 Creates a new PDF document based on the source document. @return A new PDDocument with properties copied from the source document. @throws IOException if an I/O error occurs during document creation.
3271 Sets the document version. @param newVersion the new version to set
3272 Returns an iterator over the pages in the document. @return Iterator<PDPage> object to iterate through pages
3273 Retrieves a page from the document by index. @param pageIndex zero-based index of the page @return PDPage object representing the page
3274 Writes XML representation of the FDF document. @param output Writer to write XML data @throws IOException if an I/O error occurs
3275 Prepares a PDF document for encryption. @param doc the PDDocument to be encrypted @throws IOException if an I/O error occurs
3276 Creates a new PDAnnotationHighlight. Initializes with a specific sub-type.
3277 Constructs a new PDAnnotationSquiggly instance. Initializes with a specific sub-type.
3278 Creates a new strikeout annotation. Initializes with specific subtype.
3279 Creates a new underline annotation.
3280 Constructs a new circle annotation from a COS dictionary. @param field dictionary representing the annotation
3281 Constructs a new square annotation from a COS dictionary. @param field dictionary representing the annotation
3282 Constructs a new highlight annotation from a COS dictionary. @param dict the COS dictionary containing annotation properties
3283 Constructs a PDAnnotationSquiggly from a COSDictionary. @param dict the COS dictionary representing the annotation
3284 Constructs a strikeout annotation from a dictionary. @param dict PDF dictionary containing annotation properties
3285 Constructs an underline annotation from a dictionary. @param dict PDF dictionary representing the annotation
3286 Imports FDF field data into the current field. @param fdfField FDF field to import data from @throws IOException if an error occurs during import
3287 Draws an inline image at specified position and size. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs
3288 Creates a cloudy polygon from a path of points. @param path array of float arrays representing coordinates @throws IOException if an I/O error occurs during processing
3289 Draws a cloudy rectangle or ellipse. @param left x-coordinate of the left side @param bottom y-coordinate of the bottom side @param right x-coordinate of the right side @param top y-coordinate of the top side @param isEllipse true if shape should be an ellipse, false for rectangle @throws IOException if output operation fails
3290 Returns an iterator over form fields. @return Iterator of PDField objects
3291 Evaluates input using a stitching function. @param input single-value input array @return evaluated result as float array @throws IOException if partition not found or other I/O error occurs
3292 Initializes a PDDeviceN object with given device array and resources. @param deviceN COSArray representing the DeviceN color space @param resources PDResources for resource management @throws IOException if an I/O error occurs during initialization
3293 Retrieves or creates a tint transform function. @return PDFunction representing the tint transformation @throws IOException if there's an issue creating the function
3294 Initializes a PDSeparation from a COSArray and resources. @param separation COSArray containing separation details @param resources PDResources for color space creation @throws IOException if tint transform has invalid output parameters
3295 Retrieves the PDF function. @return PDFunction object or null if not found @throws IOException if an I/O error occurs
3296 Retrieves functions array from PDF object. @return PDFunction array representing functions @throws IOException if mandatory /Function element is invalid
3297 Retrieves the transfer function for image processing. @return PDFunction object representing the transfer function, or null if none exists @throws IOException if an error occurs while reading the PDF
3298 Initializes a PDIndexed object with an array and resources. @param indexedArray COSArray containing indexed color data @param resources PDResources for resource management @throws IOException if an I/O error occurs during initialization
3299 Evaluates input values using linear interpolation. @param input array of input values @return array of interpolated output values @throws IOException if decoding fails
3300 Retrieves an image from the PDF document. @param region the area to extract, null for full image @param subsampling factor for reducing image resolution @return BufferedImage object or null if not found @throws IOException if an I/O error occurs
3301 Creates a PDImageXObject from a BufferedImage. @param document PDF document to add the image to @param image source image @return PDImageXObject representation of the image @throws IOException if an I/O error occurs
3302 Processes a given PDF page. @param page the PDPage object to be processed
3303 Processes a child content stream on a given page. @param contentStream the content stream to process @param page the page associated with the content stream @throws IOException if an I/O error occurs
3304 Creates a content stream for a page in a document. @param document the PDF document @param sourcePage the page to write to @throws IOException if there's an I/O error
3305 Sets the font and font size for PDF text. @param font the PDFont object to use @param fontSize the size of the font @throws IOException if an I/O error occurs
3306 Sets graphics state parameters. @param state PDExtendedGraphicsState object to apply @throws IOException if an I/O error occurs while writing
3307 Applies a shading fill to the current graphics state. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs
3308 Begins marked content with a tag and property list. @param tag the COSName representing the tag @param propertyList the PDPropertyList containing properties @throws IOException if an I/O error occurs
3309 Sets a marked content point with properties. @param tag COSName representing the content tag @param propertyList PDPropertyList containing properties @throws IOException if an I/O error occurs
3310 Draws an image at specified coordinates with given dimensions. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs
3311 Draws an image on the PDF page. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if an I/O error occurs
3312 Draws a form on the PDF page. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs
3313 Retrieves normal appearance as content stream. @param compress whether to compress the content stream @return PDAppearanceContentStream object @throws IOException if an I/O error occurs
3314 Retrieves page labels from the document. @return PDPageLabels object or null if not found @throws IOException if an I/O error occurs
3315 Constructs a PDActionJavaScript with given JavaScript. @param js JavaScript code to be executed
3316 Checks if a group is enabled by name. @param groupName the name of the optional content group @return true if the group is enabled, false otherwise
3317 Checks if an optional content group is enabled. @param group the group to check @return true if enabled, false otherwise
3318 Fixes page destinations in a PDF document. @param destinationDocument the PDF document to fix
3319 Adds a new page to the document. @param page PDPage object to be added
3320 Removes a specified page from the document. @param page the PDPage object to be removed
3321 Removes a page from the document by its number. @param pageNumber the index of the page to remove
3322 Initializes a new instance of PDFPrintable. @param document PDDocument to be printed @param scaling scaling type for the document @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch for rendering @param center flag to indicate if pages should be centered @param renderer PDFRenderer used for rendering the document
3323 Initializes a new PDFRenderer with a given PDDocument. @param document The PDDocument to render
3324 Initializes a PageExtractor with a given PDF document. @param sourceDocument the PDF document to extract pages from
3325 Maps page labels to their indices. @return Map of labels to page indices
3326 Retrieves labels for each page index. @return array of labels corresponding to each page
3327 Initializes a PDFPageable with specified settings. @param document PDDocument to be processed @param orientation page orientation (landscape or portrait) @param showPageBorder flag to display page borders @param dpi dots per inch for rendering @param center flag to center content on pages
3328 Builds a PDFontDescriptor from a Type1Font. @param type1 the source Type1Font @return a new PDFontDescriptor with font metrics and properties @throws IOException if an I/O error occurs
3329 Builds a PDFontDescriptor from FontMetrics. @param metrics font metrics data @return PDFontDescriptor object configured with metrics
3330 Creates a PDFontDescriptor from a TrueTypeFont. @param ttf the input TrueTypeFont @return PDFontDescriptor object representing the font @throws IOException if required tables are missing or an error occurs
3331 Creates an image from a byte array. @param document PDF document to add the image to @param byteArray containing image data @return PDImageXObject representing the image @throws IOException if unable to process the byte array
3332 Creates an image object from a file. @param document PDF document to add the image to @param file file containing the image data @return PDImageXObject representing the image @throws IOException if there is an error reading the file
3333 Constructs a FDFAnnotationCaret. @param element XML element to initialize from @throws IOException if an I/O error occurs
3334 Creates a circle annotation from an XML element. @param element XML element containing annotation details @throws IOException if there is an error processing the element
3335 Constructs an FDF annotation for file attachments. @param element XML element representing the annotation @throws IOException if there is an error processing the annotation
3336 Initializes a FDFAnnotationFreeText from an XML element. @param element XML element containing annotation data @throws IOException if an I/O error occurs during initialization
3337 Initializes an FDFAnnotationInk from an XML element. @param element XML element containing annotation data @throws IOException if required elements are missing or parsing fails
3338 Constructs a FDFAnnotationLine from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3339 Constructs an FDFAnnotationLink from an XML element. @param element the XML element representing the annotation @throws IOException if there is an error processing the element
3340 Initializes a polygon annotation from an XML element. @param element the XML element representing the annotation @throws IOException if an I/O error occurs during initialization
3341 Initializes a polyline annotation from an XML element. @param element XML element representing the annotation @throws IOException if there's an issue processing the element
3342 Initializes a sound annotation from an XML element. @param element XML element representing the annotation @throws IOException if there's an issue processing the element
3343 Constructs a square annotation from an XML element. @param element XML element containing annotation data @throws IOException if there is an error processing the element
3344 Initializes a FDFAnnotationStamp from an XML element. @param element XML element containing stamp data @throws IOException if there's an error processing the appearance XML
3345 Constructs an FDFAnnotationText from an XML Element. @param element XML element containing annotation data @throws IOException if there is an error processing the element
3346 Constructs a FDFAnnotationTextMarkup from an XML element. @param element the XML element containing annotation data @throws IOException if required attributes are missing or invalid
3347 Retrieves the PDF document's trailer dictionary. @throws IOException if an I/O error occurs @return COSDictionary representing the trailer or null if rebuilding fails
3348 Loads a PDF document from byte array. @param input PDF content as byte array @param password decryption password (if encrypted) @param keyStore keystore for decryption (optional) @param alias alias in the keystore (optional) @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs
3349 Loads a PDF document from a random access read source. @param randomAccessRead the source of the PDF data @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs during loading
3350 Loads a PDF document from a RandomAccessRead source. @param randomAccessRead the source of the PDF data @param password the password for decrypting the PDF (null if not encrypted) @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs while loading the PDF
3351 Loads a PDF document using specified input parameters. @param randomAccessRead source of the PDF data @param password decryption password for the PDF @param keyStore keystore containing encryption keys @param alias key alias in the keystore @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs during loading
3352 Sets visual signature from file. @param file File containing the visual signature data @throws IOException if an I/O error occurs
3353 Sets visual signature from input stream. @param is input stream containing signature data @throws IOException if an I/O error occurs
3354 Renders a glyph based on the font type. @param textRenderingMatrix matrix for text rendering @param font PDFont to be used @param code character code of the glyph @param displacement vector for glyph positioning @throws IOException if an I/O error occurs
3355 Builds a PDF document with a visible signature. @param properties configuration for the signature design @return InputStream containing the generated PDF @throws IOException if an I/O error occurs during PDF creation
3356 Saves a file with default compression. @param file the file to be saved @throws IOException if an I/O error occurs
3357 Saves data to a file with specified compression parameters. @param fileName path to the file where data will be saved @param compressParameters configuration for compression @throws IOException if an I/O error occurs during saving
3358 Creates a new document if necessary. @throws IOException if an I/O error occurs
3359 Writes header to PDF document. @param doc COSDocument to write header to @throws IOException if I/O error occurs
3360 Sets optional content properties. @param ocProperties the optional content properties to set
3361 Retrieves the first page as a layout page from a PDF document. @param doc PDDocument object containing the PDF @return LayoutPage representation of the first page @throws IOException if an I/O error occurs during processing
3362 Calculates page size and properties for a given PDF document page. @param document the PDF document to process @param page the page number (1-based index)
3363 Finds the destination page in a PDF document. @param doc the PDF document to search within @return PDPage object or null if not found @throws IOException if an I/O error occurs
3364 Retrieves page format for a given index. @param pageIndex index of the page in the document @return PageFormat object representing the page's format
3365 Retrieves the first page number from an array. @return page number or -1 if not found
3366 Writes XML representation of FDF to given Writer. @param output destination Writer for XML data @throws IOException if an I/O error occurs
3367 Prepares a PDF document for encryption. @param document the PDDocument to encrypt @throws IOException if an I/O error occurs
3368 Creates a PDF annotation from a COSBase object. @param base the COSBase object representing the annotation @return a PDAnnotation object or throws IOException if unsupported type
3369 Draws an image at specified coordinates. @param inlineImage the image to draw @param x the x-coordinate of the top-left corner @param y the y-coordinate of the top-left corner @throws IOException if an I/O error occurs
3370 Creates a cloudy rectangle on the PDF. @param rd bounding rectangle for the cloud effect
3371 Draws a cloudy ellipse with specified parameters. @param leftOrig bottom-left x-coordinate of the ellipse @param bottomOrig bottom-left y-coordinate of the ellipse @param rightOrig top-right x-coordinate of the ellipse @param topOrig top-right y-coordinate of the ellipse @throws IOException if an I/O error occurs during drawing
3372 Retrieves all signature fields from the document. @return List of PDSignatureField objects
3373 Refreshes appearances of terminal fields in the PDF document. @throws IOException if an I/O error occurs during processing
3374 Returns an iterator over form fields. @return Iterator of PDField objects
3375 Enables or disables caching of fields. @param cache true to enable caching, false to disable
3376 Retrieves a PDField by its fully qualified name. @param fullyQualifiedName the unique identifier of the field @return PDField object or null if not found
3377 Creates a PDColorSpace from a COSBase object. @param colorSpace the COSBase representing the color space @param resources the PDResources containing color space definitions @param wasDefault flag indicating if this is a default color space @return the created PDColorSpace object @throws IOException if an error occurs during creation
3378 Evaluates input through a series of functions. @param input array of input values @return array of evaluated results, clamped between 0 and 1 @throws IOException if an I/O error occurs during function evaluation
3379 Constructs a PDIndexed with an array and no base dictionary. @param indexedArray COSArray representing indexed values @throws IOException if there is an error in processing the array
3380 Retrieves an image with default settings. @return BufferedImage object or null if not found @throws IOException if an I/O error occurs
3381 Processes a PDF page by setting rotation and handling crop box. @param page the PDPage to process
3382 Sets the stroking color for PDF content. @param color the PDColor object representing the color to set @throws IOException if an I/O error occurs while writing to the output stream
3383 Sets non-stroking color for PDF drawing. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs while writing
3384 Draws an image at specified coordinates. @param image PDImageXObject to be drawn @param x X-coordinate of the top-left corner @param y Y-coordinate of the top-left corner @throws IOException if an I/O error occurs
3385 Retrieves normal appearance content stream. @return PDAppearanceContentStream object @throws IOException if an I/O error occurs
3386 Opens a node if it's not already open.
3387 Closes the node if it is open. Decrements the node count if the node was open.
3388 Imports a PDF page into the current document. @param page PDPage object to import @return Imported PDPage object @throws IOException if an I/O error occurs
3389 Creates a PDF template with the given page. @param page PDPage object to be added as template
3390 Constructs a PDFPrintable with specified settings. @param document PDDocument to be printed @param scaling Scaling method for the printout @param showPageBorder true if page borders should be shown @param dpi DPI setting for printing @param center true if content should be centered
3391 Initializes a new PDFPageable with default settings. @param document the PDDocument to be printed
3392 Constructs a PDFPageable object. @param document PDDocument to be paginated @param orientation page orientation (e.g., PORTRAIT or LANDSCAPE)
3393 Creates a PDFPageable instance with default settings. @param document PDDocument to be processed @param orientation page orientation (e.g., PORTRAIT, LANDSCAPE) @param showPageBorder flag to indicate if page borders should be shown
3394 Initializes a new PDFPageable with default settings. @param document PDDocument to be processed @param orientation page orientation @param showPageBorder flag to display page border @param dpi dots per inch for rendering
3395 Embeds a Type1 font in a PDF document. @param doc PDF document to embed the font into @param dict Dictionary for the font @param pfbStream InputStream for the PFB font file @param encoding Font encoding, optional @throws IOException if there is an I/O error
3396 Embeds a TrueType font into a PDF document. @param document the PDF document to embed the font into @param dict dictionary for font properties @param ttf the TrueType font to embed @param embedSubset whether to embed a subset of the font @throws IOException if embedding fails or is not permitted
3397 Creates an image object from a file using its extension. @param file the input image file @param doc the PDF document to add the image to @return PDImageXObject created from the file @throws IOException if file reading fails or unsupported format
3398 Creates a PDImageXObject from a file by content. @param file the image file to process @param doc the PDDocument to add the image to @return PDImageXObject created from the file @throws IOException if an I/O error occurs or unsupported image type is encountered
3399 Constructs a highlight annotation. @param element PDF element to annotate @throws IOException if an I/O error occurs
3400 Initializes a new FDFAnnotationSquiggly. @param element PDF element to be annotated @throws IOException if an I/O error occurs
3401 Creates a strike-out annotation. @param element PDF element to annotate @throws IOException if an I/O error occurs
3402 Creates an underlined annotation from an XML element. @param element XML element representing the annotation @throws IOException if there is an error processing the element
3403 Loads a PDF document from byte array. @param input PDF file content as byte array @param password document password (null if none) @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs during loading
3404 Loads a PDF document from a file with an optional password. @param file the PDF file to load @param password the password for decrypting the PDF, or null if none @return PDDocument object representing the loaded PDF @throws IOException if an error occurs during loading
3405 Loads a PDF document with optional encryption and keystore. @param file PDF file to load @param password decryption password (null if not encrypted) @param keyStore InputStream of the keystore (null if not needed) @param alias keystore alias (null if not needed) @return PDDocument object @throws IOException if an I/O error occurs
3406 Sets visual signature properties. @param visSignatureProperties object containing signature details @throws IOException if an I/O error occurs
3407 Builds a PDF signature using template creation. @throws IOException if an I/O error occurs during signature building
3408 Saves data to a file. @param fileName name of the file to save to @throws IOException if an I/O error occurs
3409 Imports optional content properties from source document to target document. @param srcDoc source PDF document containing OC properties
3410 Initializes a visible signature designer. @param document PDF document to add the signature @param imageStream input stream of the signature image @param page page number where the signature will be placed @throws IOException if there's an issue with reading the image or document
3411 Initializes a new PDVisibleSignDesigner. @param document PDDocument to add signature to @param image BufferedImage of the signature @param page Page number where the signature will be placed
3412 Writes XFDF XML to the specified Writer. @param output Writer to write XML data @throws IOException if an I/O error occurs
3413 Retrieves annotations from a PDF page filtered by given criteria. @param annotationFilter criteria to filter annotations @return List of PDAnnotation objects matching the filter @throws IOException if an I/O error occurs
3414 Retrieves the referenced COSObjectable from the document. @return COSObjectable instance or null if not found
3415 Retrieves annotation in reply to this one. @return PDAnnotation object or null if none exists @throws IOException if an I/O error occurs
3416 Retrieves the parent markup annotation. @return PDAnnotationMarkup object or null if not found or invalid
3417 Creates a cloudy ellipse within a given rectangle. @param rd bounding rectangle for the ellipse @throws IOException if an I/O error occurs
3418 Retrieves signature dictionaries from the document. @return List of PDSignature objects representing document signatures
3419 Imports FDF fields into the document. @param fdf FDFDocument containing fields to import
3420 Evaluates a function with a single input value. @param inputValue the input to the function @return array of results from the function evaluation @throws IOException if an I/O error occurs during evaluation
3421 Evaluates function on input values and converts to RGB. @param values array of input values for the function @return RGB color value as an integer @throws IOException if there is an error during evaluation or conversion
3422 Retrieves the non-stroking paint with soft mask applied. @return Paint object for non-stroking operations @throws IOException if an I/O error occurs
3423 Processes a PDF page within specified range and bookmark limits. @param page PDPage to be processed
3424 Sets the stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs while writing to the content stream
3425 Sets non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs while writing
3426 Appends a form as a new layer to a target page. @param targetPage the page to which the form is added @param form the form XObject to append @param transform transformation matrix for the form @param layerName name of the new layer @return PDOptionalContentGroup representing the created layer @throws IOException if an I/O error occurs
3427 Displays a form on the PDF page. @param form the PDFormXObject to be displayed
3428 Renders transparency group onto graphics. @param form Transparency group to render @param graphics Graphics2D context for rendering @throws IOException if an I/O error occurs
3429 Begins a marked content sequence with specified tag and properties. @param tag the content tag @param properties additional properties for the content
3430 Constructs a PDFPrintable with specified parameters. @param document PDDocument to be printed @param scaling page scaling option @param showPageBorder flag to show or hide page border @param dpi dots per inch for printing quality
3431 Creates a PDType1Font from a document and input stream. @param doc PDF document to associate with the font @param pfbIn InputStream for the PFB file @param encoding character encoding for the font @throws IOException if an I/O error occurs
3432 Initializes a PDFont with the given dictionary. @param fontDictionary COSDictionary containing font data
3433 Constructs a PDCIDFontType2Embedder. @param document PDF document @param dict font dictionary @param ttf TrueTypeFont object @param embedSubset subset embedding flag @param parent PDType0Font parent font @param vertical vertical text flag @throws IOException if an I/O error occurs
3434 Embeds TrueType font in a PDF document. @param document PDF document to embed font into @param dict font dictionary @param ttf TrueType font object @param encoding character encoding @throws IOException if embedding fails
3435 Creates an image object from file path. @param imagePath path to the image file @param doc PDF document to add the image to @return PDImageXObject created from the file @throws IOException if file cannot be read
3436 Constructs an FDFDictionary from an XML Element. @param fdfXML XML element containing FDF data
3437 Loads a PDF document from byte array. @param input PDF content as byte array @return PDDocument instance @throws IOException if loading fails
3438 Loads a PDF document from a file with a given password. @param file the PDF file to load @param password the password for decrypting the PDF @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs
3439 Loads a PDF document from a file. @param file the PDF file to load @return the loaded PDDocument object @throws IOException if an I/O error occurs
3440 Imports a page from a source document as a form object. @param sourceDoc the source PDF document @param page the page to import @return PDFormXObject representing the imported page
3441 Initializes a new instance of PDVisibleSignDesigner. @param documentSource source PDF document for reading @param imageStream stream containing the signature image @param page page number to apply the signature @throws IOException if an I/O error occurs
3442 Initializes a new PDVisibleSignDesigner with the given document source, image, and page. @param documentSource source of the PDF document @param image image to be used as the signature @param page page number where the signature will be placed @throws IOException if an I/O error occurs
3443 Saves XFDF data to a writer. @param output Writer to save the XFDF data @throws IOException if an I/O error occurs
3444 Retrieves all annotations from the PDF document. @return List of PDAnnotation objects @throws IOException if an I/O error occurs during processing
3445 Retrieves the last signature dictionary. @return PDSignature object or null if no signatures exist
3446 Saves incremental PDF for external signing. @param output stream to write the signed PDF @return ExternalSigningSupport object for further signing steps @throws IOException if an I/O error occurs
3447 Draws a glyph from the given font and path. @param path the shape representing the glyph @param font the font containing the glyph @param code the character code of the glyph @param displacement the horizontal displacement vector @param at the affine transform for scaling @throws IOException if an I/O error occurs
3448 Processes each page in the document, handling bookmarks and extracting text. @param pages PDPageTree containing all pages to be processed @throws IOException if an I/O error occurs during processing
3449 Initializes the appearance content for a widget. @param widget PDAnnotationWidget to be styled @param appearanceCharacteristics visual characteristics of the widget @param appearanceStream stream where the appearance is written @throws IOException if an I/O error occurs
3450 Sets font and color for PDF content. @param contents PDAppearanceContentStream to write to @param zeroFontSize default font size if current is zero
3451 Initializes PDFPrintable with specified parameters. @param document PDDocument to be printed @param scaling scaling strategy for printing @param showPageBorder flag to indicate if page borders should be shown
3452 Constructs a PDType1Font from an input stream. @param doc PDDocument to associate the font with @param pfbIn InputStream containing the PFB data @throws IOException if there is an error reading the input stream
3453 Constructs a PDSimpleFont from a COSDictionary. @param fontDictionary dictionary containing font information
3454 Constructs a PDType0Font from a given COSDictionary. @param fontDictionary the dictionary representing the font @throws IOException if required font data is missing or invalid
3455 Initializes a PDType0Font from TrueType font. @param document PDF document to embed font in @param ttf TrueTypeFont object @param embedSubset whether to subset the font @param closeTTF whether to close the TTF after processing @param vertical whether to enable vertical substitutions @throws IOException if an I/O error occurs
3456 Creates a PDTrueTypeFont instance. @param document PDF document to associate with @param ttf TrueType font to use @param encoding character encoding @param closeTTF whether to close the TTF after processing @throws IOException if an I/O error occurs
3457 Constructs an FDFCatalog from an XML Element. @param element XML element representing the FDF data
3458 Loads a PDF document from a file. @param file the PDF file to load @return the loaded PDDocument object @throws IOException if an I/O error occurs while loading the document
3459 Imports a page from a document as a form. @param sourceDoc the source PDF document @param pageNumber zero-based index of the page to import @return PDFormXObject representing the imported page @throws IOException if an I/O error occurs
3460 Saves XFDF data to a file. @param fileName the file where XFDF data will be saved @throws IOException if an I/O error occurs
3461 Updates structure parent entries for a page. @param page the PDPage to update @param structParentOffset offset to adjust structure parents @throws IOException if an I/O error occurs
3462 Clones the structure tree from a source document to a destination document. @param destinationDocument the document to which the structure tree is cloned @throws IOException if an I/O error occurs during cloning
3463 Processes and clones annotations from a PDF page. @param imported the PDPage to process @throws IOException if an I/O error occurs during processing
3464 Adds a signature to the PDF document. @param sigObject PDSignature object representing the signature @param signatureInterface interface for handling the signature @param options SignatureOptions for configuring the signature process @throws IOException if an I/O error occurs during processing
3465 Fills and strokes the current path. @param windingRule rule for determining the interior of the path @throws IOException if an I/O error occurs
3466 Writes text from a PDF document to an output stream. @param doc PDDocument containing the text @param outputStream Writer for outputting the text @throws IOException if I/O operations fail
3467 Inserts generated appearance for a PDF annotation widget. @param widget the annotation widget to process @param appearanceStream the appearance stream to modify @param output the output stream for writing content @throws IOException if an I/O error occurs
3468 Draws a PDF page with annotations. @param g Graphics2D context for drawing @param pageSize dimensions of the page to draw @throws IOException if an I/O error occurs
3469 Constructs a PDFPrintable with default settings. @param document PDDocument to be printed @param scaling scaling type for printing
3470 Returns the default Helvetica font. @return PDType1Font object representing Helvetica
3471 Initializes a PDTrueTypeFont from a font dictionary. @param fontDictionary the COSDictionary containing font data @throws IOException if an I/O error occurs during font parsing
3472 Initializes a PDType1CFont from a COSDictionary. @param fontDictionary the font dictionary containing font data @throws IOException if an I/O error occurs during font parsing
3473 Constructs a Type1 font from a dictionary. @param fontDictionary PDF dictionary containing font info @throws IOException if font data is unavailable or damaged
3474 Initializes a Type 3 PDF font. @param fontDictionary dictionary containing font data @param resourceCache cache for resources @throws IOException if an I/O error occurs
3475 Loads a Type 0 font from the given document and input stream. @param doc PDF document to associate with the font @param randomAccessRead source of the font data @param embedSubset whether to subset the embedded font @param vertical true if the font is for vertical text @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
3476 Loads a Type 0 font from a TrueType font. @param doc PDF document to associate the font with @param ttf TrueTypeFont object to load @param embedSubset true if only a subset of the font should be embedded @return PDType0Font object representing the loaded font @throws IOException if an error occurs during loading
3477 Loads a vertical TrueType font into a PDF document. @param doc the PDF document to add the font to @param ttf the TrueType font to load @param embedSubset whether to subset the embedded font @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
3478 Loads a true type font into a PDF document. @param doc the PDF document to add the font to @param ttf the TrueTypeFont object to load @param encoding the character encoding for the font @return PDTrueTypeFont object representing the loaded font @throws IOException if an I/O error occurs during loading
3479 Loads a TrueType font from a PDF document. @param doc the PDF document to load the font into @param randomAccessRead source of the TrueType font data @param encoding character encoding for the font @return PDTrueTypeFont object representing the loaded font @throws IOException if an error occurs during loading
3480 Constructs an FDFDocument from a given XML Document. @param doc XML document representing the FDF data @throws IOException if the root element is not 'xfdf'
3481 Initializes a new PDVisibleSignDesigner with an image and file. @param filename path to the PDF file @param imageStream input stream for the signature image @param page page number in the PDF (1-based index) @throws IOException if there is an issue reading the file or stream
3482 Initializes a new instance of PDVisibleSignDesigner. @param filename path to the PDF file @param image BufferedImage to be used as a signature @param page page number where the signature will be placed @throws IOException if there is an issue with file access
3483 Saves XFDF data to a file. @param fileName path where the file will be saved @throws IOException if an I/O error occurs
3484 Processes a PDF page, importing it into the destination document. Handles resource management and annotation processing. @param page PDPage object to be processed @throws IOException if an I/O error occurs during processing
3485 Adds a signature to the document. @param sigObject PDSignature object representing the signature @param options SignatureOptions for additional configuration @throws IOException if an I/O error occurs
3486 Adds a signature to the document. @param sigObject PDSignature object representing the signature @param signatureInterface interface for handling signature operations @throws IOException if an I/O error occurs
3487 Appends pages and content from a source PDF to a destination PDF. @param destination the target PDF document @param source the source PDF document to append @throws IOException if an I/O error occurs
3488 Converts PNG image data to PDImageXObject. @param doc PDDocument to add the image to @param imageData byte array containing PNG image data @return PDImageXObject or null if conversion fails
3489 Extracts text from a PDF document. @param doc PDDocument object representing the PDF @return String containing the extracted text @throws IOException if an I/O error occurs during processing
3490 Renders a PDF page as an image. @param pageIndex index of the page to render @param scale scaling factor for rendering @param imageType type of image to render @param destination where to draw the rendered image @return BufferedImage representing the rendered page @throws IOException if rendering fails
3491 Renders a PDF page to a graphics context. @param pageIndex index of the page to render @param graphics target graphics context for rendering @param scaleX horizontal scaling factor @param scaleY vertical scaling factor @param destination where the rendered content is drawn @throws IOException if an I/O error occurs during rendering
3492 Constructs a PDFPrintable with specified document and scaling. @param document PDDocument to be printed
3493 Renders text from a byte array using current graphics state. @param string byte array containing encoded text @throws IOException if an I/O error occurs
3494 Constructs a PDMMType1Font from a COSDictionary. @param fontDictionary dictionary containing font data @throws IOException if there is an error processing the font data
3495 Constructs a PDType3Font from a COSDictionary. @param fontDictionary the font dictionary to use @throws IOException if an I/O error occurs
3496 Loads a Type 0 font from a PDF document. @param doc the PDF document to load the font into @param file the file containing the font data @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs while loading the font
3497 Loads a Type 0 font from an input stream. @param doc PDF document to associate the font with @param input stream containing the font data @param embedSubset flag indicating whether to subset the font @return PDType0Font object @throws IOException if there is an error reading the input stream
3498 Loads a vertical PDType0Font from a file. @param doc the PDDocument to add the font to @param file the font file @return the loaded PDType0Font @throws IOException if there's an issue reading the file
3499 Loads a vertical PDType0Font from an input stream. @param doc PDDocument to add the font to @param input InputStream containing font data @return PDType0Font object @throws IOException if there's an error reading the input stream
3500 Loads a vertical font from an input stream. @param doc PDF document to associate the font with @param input input stream containing the font data @param embedSubset whether to subset the embedded font @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs
3501 Loads TrueType font from a file. @param doc PDF document to associate the font with @param file file containing the font data @param encoding character encoding for the font @return PDTrueTypeFont object representing the loaded font @throws IOException if an I/O error occurs during loading
3502 Loads TrueType font from an input stream. @param doc PDF document to associate the font with @param input stream containing the font data @param encoding character encoding for the font @return PDTrueTypeFont object @throws IOException if an I/O error occurs
3503 Loads an XFDF document from an input stream. @param input stream containing XFDF data @return FDFDocument object representing the loaded XFDF @throws IOException if an I/O error occurs while reading the input stream
3504 Processes pages within a specified range. @throws IOException if an I/O error occurs
3505 Adds a signature to the document. @param sigObject PDSignature object representing the signature @throws IOException if an I/O error occurs
3506 Flattens all interactive fields in the document. Throws IOException if an I/O error occurs.
3507 Creates PDImageXObject from byte array. @param document PDF document to add the image to @param byteArray image data as byte array @param name image name @param customFactory optional custom factory for specific formats @return PDImageXObject or throws IllegalArgumentException if unsupported
3508 Renders an image of a specified page. @param pageIndex zero-based index of the page to render @param scale factor for scaling the rendered image @param imageType type of image to render (e.g., JPEG, PNG) @return BufferedImage object representing the rendered page @throws IOException if an I/O error occurs during rendering
3509 Renders a page to a graphics context. @param pageIndex index of the page to render @param graphics Graphics2D object for rendering @param scaleX horizontal scaling factor @param scaleY vertical scaling factor @throws IOException if an I/O error occurs
3510 Displays a text string. @param string byte array containing the text to display @throws IOException if an I/O error occurs during display
3511 Processes text strings from a COSArray. @param array containing text and spacing commands
3512 Creates a PDFont from a COSDictionary. @param dictionary font dictionary @param resourceCache resource cache for type 3 fonts @return created PDFont object @throws IOException if an error occurs during font creation
3513 Loads a Type 0 font from an input stream. @param doc PDF document to associate the font with @param input stream containing the font data @return PDType0Font object @throws IOException if an I/O error occurs
3514 Loads an XFDF document from a file. @param filename path to the XFDF file @return FDFDocument object @throws IOException if file cannot be read
3515 Loads an XFDF document from a file. @param file the XFDF file to load @return FDFDocument object representing the loaded document @throws IOException if an I/O error occurs while reading the file
3516 Splits a PDF document into multiple documents. @param document the source PDF document to split @return list of split PDDocument objects
3517 Creates an image from a byte array. @param document PDF document to add the image to @param byteArray image data as bytes @param name image name @return PDImageXObject representing the image @throws IOException if there's an error processing the image
3518 Renders image from page index with specified scale. @param pageIndex zero-based index of the page to render @param scale factor for image resizing @return BufferedImage object representing the rendered image @throws IOException if an I/O error occurs during rendering
3519 Renders an image from a specified page with given DPI. @param pageIndex index of the page to render @param dpi desired dots per inch for rendering @return BufferedImage object representing the rendered image @throws IOException if an I/O error occurs during rendering
3520 Renders an image from a specified page with given DPI. @param pageIndex index of the page to render @param dpi desired dots per inch for rendering @param imageType type of image to render @return rendered BufferedImage @throws IOException if an I/O error occurs during rendering
3521 Renders a page to a graphics context with specified scaling. @param pageIndex index of the page to render @param graphics Graphics2D context for rendering @param scale scaling factor for rendering @throws IOException if an I/O error occurs during rendering
3522 Retrieves a PDFont by name. @param name the COSName of the font @return the PDFont object or null if not found @throws IOException if an error occurs during retrieval
3523 Creates a font from a COSDictionary. @param dictionary font description dictionary @return PDFont object @throws IOException if an I/O error occurs
3524 Extracts a sub-document from the source document. @return PDDocument containing the extracted pages or an empty document if invalid range
3525 Renders an image from the specified page index. @param pageIndex zero-based index of the page to render @return rendered image as a BufferedImage object @throws IOException if an I/O error occurs during rendering
3526 Renders a page to a graphics context. @param pageIndex index of the page to render @param graphics target graphics context @throws IOException if an I/O error occurs during rendering
3527 Copies necessary resources to the given appearance stream. @param appearanceStream target PDAppearanceStream for copying resources @throws IOException if an I/O error occurs
3528 Retrieves the font from a PDF setting. @return PDFont object or null if not found @throws IOException if an error occurs during font creation
3529 Sets the appearance content for a widget. @param widget the annotation widget to modify @param appearanceStream the appearance stream to update @throws IOException if an I/O error occurs
3530 Copies graphics state parameters into a PDGraphicsState object. @param gs the target PDGraphicsState to copy parameters into @throws IOException if an I/O error occurs
3531 Processes appearance stream operators. @param content byte array of the PDF content @throws IOException if parsing fails
3532 Initializes PDDefaultAppearanceString with default appearance and resources. @param defaultAppearance COSString representing the default appearance @param defaultResources PDResources object containing default resources @throws IOException if required entries are missing or invalid
3533 Retrieves the default appearance string. @return PDDefaultAppearanceString object @throws IOException if an I/O error occurs
3534 Sets the appearance value for a PDF field. @param apValue The appearance value to be set. @throws IOException If an I/O error occurs.
3535 Initializes AppearanceGeneratorHelper with a PDVariableText field. Validates and ensures AcroForm resources. Fetches the default appearance string. @param field PDVariableText field to process @throws IOException if processing fails
