1 Constructs a PDExtendedGraphicsState from a COSDictionary. @param dictionary the graphics state dictionary
2 Constructs a PlainText object from a given text value. @param textValue the input text to be processed
3 Constructs a PDActionImportData instance. @param a COSDictionary containing action data
4 Retrieves a COSObject by key. @param key the key to look up @return COSObject if found, otherwise null
5 Constructs a PDActionURI from a COSDictionary. @param a dictionary representing the URI action
6 Constructs a PDActionSubmitForm from a COSDictionary. @param a dictionary containing action attributes
7 Constructs a PDActionSound from a COSDictionary. @param a COSDictionary representing the sound action
8 Constructs a PDActionHide from a COSDictionary. @param a dictionary representing the action
9 Constructs a PDActionMovie from a COSDictionary. @param a dictionary containing movie action details
10 Constructs a PDActionLaunch from a dictionary. @param a the COS dictionary representing the action
11 Constructs a PDActionResetForm from a COSDictionary. @param a dictionary representing the action
12 Creates a new PDActionRemoteGoTo from a dictionary. @param a COSDictionary containing action properties
13 Constructs a PDActionGoTo from a dictionary. @param a the COS dictionary representing the action
14 Constructs a PDActionEmbeddedGoTo from a COS dictionary. @param a the COS dictionary
15 Constructs a PDActionNamed from a COSDictionary. @param a dictionary representing the action
16 Constructs a PDActionThread from a COSDictionary. @param a dictionary containing action data
17 Constructs a PDActionJavaScript from an existing dictionary. @param a COSDictionary representing the action
18 Creates a raw input stream for reading. @throws IOException if I/O error occurs or no data has been written
19 Finds an image reader for the specified format. @param formatName name of the image format @param errorCause reason for failure to find a reader @return ImageReader instance if found, throws MissingImageReaderException otherwise
20 Finds an ImageReader capable of reading raster images for a given format. @param formatName the name of the image format @param errorCause additional information about the error @return an ImageReader that can read rasters @throws MissingImageReaderException if no suitable reader is found
21 Retrieves or creates an Operator instance based on the given name. @param operator operator name as a String @return Operator object corresponding to the name
22 Returns string representation of COSArrayList. @return formatted string including internal array details
23 Checks if an edge is a line based on control points. @param ctl array of control points @return true if edge is a line, false otherwise
24 Retrieves the x-coordinate of the lower-left corner. @return float value representing the x-coordinate
25 Retrieves the y-coordinate of the lower-left corner. @return y-coordinate value as a float
26 Retrieves the X-coordinate of the upper-right corner. @return float value representing the X-coordinate
27 Retrieves the y-coordinate of the upper-right corner. @return y-coordinate as a float
28 Retrieves font size from font settings. @return font size as a float value
29 Retrieves the first value as a float. @return The float value of the first element in values list.
30 Retrieves the second value as a float. @return float value of the second item in values list
31 Returns the third value as a float. @return float representation of the third value
32 Returns the X coordinate value. @return float representing the X coordinate
33 Retrieves the Y coordinate value. @return Y coordinate as a float
34 Retrieves the current stroking color space from the graphics state. @return PDColorSpace object representing the stroking color space
35 Sets the stroking color in the graphics state. @param color PDColor object to set as the stroking color
36 Retrieves the stroking color from the graphics state. @return PDColor object representing the current stroking color
37 Returns an Encoding instance based on the provided COSName. @param name the encoding type as a COSName @return Encoding object or null if not recognized
38 Creates a PDSoftMask from a given COSBase. @param dictionary the COSBase dictionary or name @param resourceCache the ResourceCache instance @return PDSoftMask object or null if invalid
39 Returns the index of the first selected annotation widget. @return Index of the selected widget or -1 if none is selected
40 Parses PNG chunks from image data. @param imageData byte array containing PNG data @return PNGConverterState object or null if parsing fails
41 Adds a file source to the system. @param source path to the file @throws FileNotFoundException if the file is not found
42 Parses the PDF trailer and updates the XRef resolver. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs
43 Retrieves the Z coordinate value. @return Z coordinate as a float
44 Retrieves an object from the pool by its key. @param key unique identifier of the object @return COSBase object or null if not found
45 Retrieves the current text line matrix. @return Matrix representing the current text line transformation
46 Sets the text line matrix in graphics state. @param value new text line matrix to apply
47 Retrieves the current text matrix. @return Text matrix representing transformation applied to text
48 Transforms width based on current transformation matrix. @param width original width value @return transformed width accounting for scaling and shearing
49 Retrieves the non-stroking color from graphics state. @return PDColor object representing the current non-stroking color
50 Sets the non-stroking color in the graphics context. @param color PDColor object representing the new color
51 Retrieves the non-stroking color space from the graphics state. @return PDColorSpace object representing the current non-stroking color space
52 Executes a sequence of instructions within the given context. @param context execution environment containing operators and stack
53 Retrieves an integer from the list at the specified index. @param index position of the element to retrieve @param defaultValue value to return if element is not a COSNumber or out of bounds @return integer value of the element or default value
54 Retrieves the revision number at the specified index. @param index position of the revision number in the list @return revision number at the given index
55 Writes a COSBoolean to the output stream. @param output target OutputStream for writing @param cosBoolean COSBoolean object to write @throws IOException if an I/O error occurs
56 Creates a deep copy of the matrix. @return A new Matrix object with cloned data
57 Initializes a new instance of PDRectlinearMeasureDictionary. @param dictionary underlying COSDictionary
58 Constructs a PDTerminalField. @param acroForm the form containing this field @param field the dictionary representing this field @param parent the parent field if any
59 Constructs a non-terminal PDF form field. @param acroForm parent AcroForm containing the field @param field dictionary representing the field @param parent parent non-terminal field
60 Notifies of user property change if entries differ. @param oldEntry previous entry value @param newEntry current entry value
61 Returns the number of key-value mappings in this map. @return the number of entries in the map
62 Writes text to output stream in ASCII encoding. @param text string to be written @throws IOException if an I/O error occurs
63 Creates a translation matrix. @param x horizontal translation @param y vertical translation @return Matrix representing the translation
64 Returns the number of objects in the collection. @return size of the object collection
65 Retrieves an object by index. @param index position of the object in the list @return object at the specified index or throws IndexOutOfBoundsException if invalid
66 Returns a field tree for the document. @return PDFieldTree object representing the document's fields
67 Retrieves name from list by index. @param index position in the list @param defaultValue default value if index is out of bounds or not a COSName @return name as String or defaultValue
68 Finds the index of a given COSBase object. @param object the COSBase object to search for @return index of the object or -1 if not found
69 Retrieves a list of filters. @return List of Filter objects @throws IOException if an invalid type is found in the filter array
70 Creates a scaling matrix. @param x scale factor on X-axis @param y scale factor on Y-axis @return Matrix object representing the scaling transformation
71 Retrieves a list of filters from the stream. @return List of COSName filters or empty list if none found
72 Retrieves file filters from a PDF stream. @return List of filter names or empty list if none found
73 Scales vector by a factor. @param sxy scaling factor for both x and y components @return new Vector with scaled components
74 Transforms a 2D vector using a given transformation matrix. @param vector the input vector to be transformed @return the transformed vector
75 Creates a rotation matrix with translation. @param theta angle of rotation in radians @param tx horizontal translation @param ty vertical translation @return Rotation matrix with translation applied
76 Evaluates input using exponential interpolation. @param input array of floats, first element used for exponentiation @return interpolated float array clipped to range
77 Sets the text matrix in the graphics state. @param value the new text matrix to apply
78 Compares this entry with another based on referenced key. @param xReferenceEntry the other XReferenceEntry to compare @return negative if less, positive if greater, zero if equal
79 Returns the number of recipients in the dictionary. @return size of the recipients array
80 Constructs a Type7ShadingPaint object. @param shading PDShadingType7 instance representing the shading @param matrix transformation matrix for the shading
81 Scales the matrix by given factors. @param sx scale factor for x-axis @param sy scale factor for y-axis
82 Multiplies this matrix by another. @param other the matrix to multiply with @return a new Matrix representing the product
83 Creates a SecurityHandler for a given ProtectionPolicy. @param policy the ProtectionPolicy to handle @return SecurityHandler instance or null if no handler is found
84 Creates a new SecurityHandler for a given filter name. @param name the name of the security filter @return SecurityHandler instance or null if not found
85 Sets stroking color on demand. @param color PDColor object to be set @return true if color is successfully set, false otherwise
86 Sets non-stroking color on demand. @param color PDColor object to be set @return true if color is successfully set, false otherwise @throws IOException if an I/O error occurs
87 Applies translation to a 3x3 transformation matrix. @param tx horizontal translation factor @param ty vertical translation factor
88 Retrieves the font name for a given character. @param name character to find in font @return font name or ".notdef" if not found @throws IOException if an I/O error occurs
89 Initializes CMYK color conversion settings. @throws IOException if default CMYK profile cannot be loaded
90 Applies a mask to an image. @param image source image @param mask mask image @param interpolateMask true for smooth scaling @param isSoft true if soft mask effect is applied @param matte color adjustment array @return masked image
91 Initializes a cubic Bezier curve with given control points. @param ctrlPnts array of 4 control points defining the curve @param l recursion level for curve approximation
92 Checks if a point is within a polygon. @param p Point to check @return true if point is inside or on the boundary of the polygon, false otherwise
93 Calculates color at a given point using different interpolation methods. @param p the Point2D where color is calculated @return float array representing the color components
94 Intersects current clipping path with another. @param path the path to intersect with
95 Draws a tiling pattern using the provided parameters. @param g Graphics2D context for drawing @param pattern PDTilingPattern to be drawn @param colorSpace PDColorSpace used for coloring @param color PDColor for the pattern @param patternMatrix Matrix defining the transformation of the pattern @throws IOException if an I/O error occurs during processing
96 Intersects the current clipping path with another area. @param area the area to intersect with the clipping path
97 Transfers the current clipping path to a Graphics2D object. @param graphics the Graphics2D object to apply the clipping path to
98 Retrieves the font representation of a given name. @param name the original character name @return the font name or ".notdef" if not found @throws IOException if an I/O error occurs
99 Inserts a diacritic at a specified position in the text. @param i index where to insert the diacritic @param diacritic TextPosition object representing the diacritic
100 Converts a character code to a glyph ID. @param code character encoding code @return glyph ID or 0 if not found @throws IOException if an I/O error occurs
101 Initializes glyph list from input stream. @param input InputStream containing glyph data @param numberOfEntries Expected number of entries in the list @throws IOException if an I/O error occurs
102 Initializes a Line object with two points and their colors. @param p0 starting Point of the line @param p1 ending Point of the line @param c0 color array for point0 @param c1 color array for point1
103 Normalizes a word by handling specific Unicode ranges and font issues. @param word the input string to normalize @return normalized string with corrections for certain Unicode characters
104 Initializes a SoftMask with specified parameters. @param paint the painting object @param mask the alpha mask image @param bboxDevice the device bounding box @param backdropColor the background color @param transferFunction the color transfer function
105 Removes a backdrop from an image by adjusting pixel colors. @param backdrop the backdrop image to remove @param offsetX horizontal offset of backdrop relative to groupImage @param offsetY vertical offset of backdrop relative to groupImage
106 Creates a GlyphList by copying from another GlyphList and loading additional data from an InputStream. @param glyphList existing GlyphList to copy mappings from @param input stream containing additional glyph data @throws IOException if there is an error reading the input stream
107 Concatenates this matrix with another. @param matrix the other Matrix to concatenate
108 Parses an InputStream into a Document. @param is input stream containing XML data @return parsed Document object @throws IOException if an I/O error occurs
109 Writes a COSInteger to an OutputStream. @param output the OutputStream to write to @param cosInteger the COSInteger to write @throws IOException if an I/O error occurs
110 Retrieves the horizontal scaling factor. @return The X-axis scaling factor as a float.
111 Retrieves the vertical scaling factor. @return Y-axis scaling factor as a float
112 Creates a raw output stream for writing. Throws IllegalStateException if already writing or closed. Updates LENGTH field upon closing the stream.
113 Initializes COSWriter with output stream and compression parameters. @param outputStream destination for writing data @param compressParameters configuration for data compression
114 Initializes a COSWriter with output and input streams. @param outputStream destination for writing data @param inputData source of input data @throws IOException if an I/O error occurs
115 Converts byte array to string using UTF-16BE or PDFDocEncoding. @return String representation of bytes
116 Constructs a COSString from text with optional hexadecimal encoding. @param text the input string to encode @param forceHex if true, forces hexadecimal encoding regardless of content
117 Retrieves or creates a COSInteger for the given value. @param val the integer value to represent @return a COSInteger instance
118 Writes FDF document to output. @param doc FDFDocument to write @throws IOException if I/O error occurs
119 Checks if the font is part of the Adobe Standard 14 fonts. @return true if it's a Standard 14 font, false otherwise
120 Initializes LayerUtility with a target document. @param targetDoc the PDDocument to manipulate
121 Retrieves recipient string at specified index. @param i index of the recipient in the recipients list @return COSString representing the recipient or null if index is out of bounds
122 Retrieves the direction property. @return COSBase object representing direction or COSInteger.ZERO if not set
123 Retrieves metadata keys from a PDF document. @return Sorted set of metadata keys
124 Retrieves attribute names from COS object. @return List of attribute names excluding 'O'
125 Adds trailer info to the stream. @param trailerDict dictionary containing trailer information
126 Creates a new COSDictionary by copying entries from another dictionary. @param dict The source dictionary to copy entries from
127 Checks if a dictionary contains document info keys. @param dictionary PDF COSDictionary to check @return true if dictionary contains document info keys, false otherwise
128 Checks if dictionary contains width keys. @return true if WIDTHS or MISSING_WIDTH is present
129 Checks if the dictionary contains a missing width attribute. @return true if missing width is present, false otherwise
130 Checks if the PDF document contains XFA. @return true if XFA is present, false otherwise
131 Returns string representation of COSFloat. @return formatted string with float value
132 Writes formatted string to PDF. @param output stream to write PDF content @throws IOException if writing fails
133 Writes a COSArray to the output stream. @param output the OutputStream to write to @param cosArray the COSArray to be written @throws IOException if an I/O error occurs
134 Creates and returns a new COSIncrement instance. @param updateInfo information used for incrementing @return COSIncrement object initialized with updateInfo
135 Constructs a new DefaultResourceCache with default settings. @param enableCaching whether to enable caching functionality
136 Reads bytes from the input stream into a buffer. @param data byte array to store read data @param offset starting index in the data array @param len number of bytes to read @return actual number of bytes read or -1 if end of stream @throws IOException if an I/O error occurs
137 Reads object numbers from a source. @return Map of object IDs to their counts @throws IOException if an I/O error occurs
138 Parses all objects from a PDF source. @return Map of COSObjectKey to COSBase representing parsed objects @throws IOException if an I/O error occurs during parsing
139 Creates a PDPageFitWidthDestination from a COSArray. @param arr array representing the destination
140 Initializes a PDPageFitRectangleDestination with a given COSArray. @param arr COSArray containing destination parameters
141 Calculates the final encryption key. @param objectNumber PDF object number @param genNumber generation number @return derived encryption key bytes
142 Constructs a PDPageFitHeightDestination from a COSArray. @param arr array representing the destination
143 Initializes a new PDPageFitDestination from a COSArray. @param arr the COSArray representing the destination
144 Initializes a new PD Appearances content stream. @param appearance PDF appearance stream @param outputStream output stream to write to
145 Constructs a COSFloat from a string. @param aFloat string representation of the float @throws IOException if parsing fails
146 Constructs a content stream for an appearance stream. @param doc PDF document containing the appearance @param appearance appearance stream to write to @param outputStream output stream for the content
147 Transforms a point using the current transformation matrix. @param x original x-coordinate @param y original y-coordinate @return transformed Point2D.Float object
148 Creates a PaintContext with applied pattern transformation. @param cm ColorModel for the context @param deviceBounds device space bounding box @param userBounds user space bounding box @param xform current AffineTransform @param hints rendering hints @return PaintContext with pattern applied
149 Parses a PDF object by number. @param objectNumber the object's identifier @return COSBase object or null if not found @throws IOException on I/O errors
150 Initializes a PDF stream parser with byte array. @param bytes PDF content as a byte array
151 Initializes a PDF stream parser. @param pdContentstream content stream to parse @throws IOException if an I/O error occurs
152 Converts FontBox Encoding to Type1Encoding. @param encoding FontBox Encoding object @return Type1Encoding object
153 Initializes MacOSRomanEncoding with custom entries.
154 Constructs a PDPageXYZDestination from a COSArray. @param arr array representing the destination
155 Retrieves item by two keys. @param firstKey primary key to search @param secondKey secondary key if first not found @return COSBase object or null if both keys are invalid
156 Reads the next byte from the input stream. @return the next byte as an integer, or -1 if end of stream is reached @throws IOException if an I/O error occurs
157 Reads data from the input stream into a byte array. @param data destination buffer @param offset start position in the buffer @param length maximum number of bytes to read @return number of bytes actually read, or -1 if end of stream is reached @throws IOException if an I/O error occurs
158 Reads an image from the input stream and sets it. @param stream InputStream containing image data @throws IOException if reading fails
159 Encodes input stream data using LZW compression. @param rawData the raw input data stream to encode @param encoded the output stream for encoded data @param parameters encoding parameters (not used)
160 Selects the best data row for writing based on compression estimates. @return byte array of the selected row with highest compression estimate
161 Converts COSName to corresponding RenderState. @param state COSName representing the render state @return RenderState object or null if state is null
162 Converts COSName to corresponding BaseState. @param state COSName representing the state @return BaseState object or ON if state is null
163 Constructs a new Type6ShadingPaint. @param shading PDShadingType6 object representing the shading pattern @param matrix transformation matrix for the shading
164 Constructs a PDSoftMask from a COSDictionary. @param dictionary the COSDictionary containing mask information
165 Constructs a Type4ShadingPaint. @param shading PDShadingType4 object representing the shading @param matrix transformation matrix for the shading
166 Adds a TextPosition to the contents. @param text TextPosition object to be added
167 Adds marked content to the document. @param markedContent the content to be added
168 Sets printing permission. @param allowPrinting flag to enable or disable printing
169 Sets modification permission. @param allowModifications flag to enable or disable modifications
170 Sets content extraction permission. @param allowExtraction flag to enable or disable extraction
171 Sets permission to modify annotations. @param allowAnnotationModification flag indicating modification permission
172 Adds an XObject to the contents list. @param xobject the XObject to be added
173 Sets permission to fill in form. @param allowFillingInForm flag indicating if filling in the form is allowed
174 Retrieves the highest cross-reference object number. @return The highest XRef object number from the pool.
175 Applies GSUB rules to a word, converting it to glyph IDs and writing to output. @param gsubWorker worker for applying GSUB transformations @param out output stream to write encoded glyphs @param font font containing cmap lookup @param word input string to process @return list of glyph IDs after applying GSUB rules
176 Constructs a new PDF document. @param doc the COSDocument representing the PDF structure @param source the RandomAccessRead source of the PDF data @param permission the AccessPermission for accessing the document
177 Initializes an FDFDocument with a COSDocument and source. @param doc the underlying COSDocument @param source the source of data for the FDF document
178 Returns a string representation of FunctionType2. @return formatted string with C0, C1, and N values
179 Sets permission to extract content for accessibility. @param allowExtraction flag indicating extraction permission
180 Sets permission to print faithfully. @param canPrintFaithful flag indicating print permission
181 Retrieves the Adobe glyph list. @return GlyphList object containing Adobe glyphs
182 Initializes a PDColor with components, pattern name, and color space. @param components color components array @param patternName name of the pattern @param colorSpace associated color space
183 Sets permission to assemble documents. @param allowAssembly true to allow, false to disallow
184 Checks if print permission is enabled. @return true if print permission is granted, false otherwise
185 Checks if modification permission is granted. @return true if modification is allowed, false otherwise
186 Checks if content extraction permission is enabled. @return true if extraction is allowed, false otherwise
187 Checks if annotations can be modified. @return true if modification permission is enabled, false otherwise
188 Checks if permission to fill in form is granted. @return true if permission is enabled, false otherwise
189 Checks if the extract for accessibility permission is enabled. @return true if permission is granted, false otherwise
190 Checks if document assembly permission is granted. @return true if permission is enabled, false otherwise
191 Checks if the user has permission to print faithfully. @return true if permission is granted, false otherwise
192 Sets the encryption key. @param key byte array representing the key (1 to 32 bytes)
193 Checks if a Unicode code point is prohibited. @param codepoint Unicode code point to check @return true if the code point is prohibited, false otherwise
194 Computes version number based on key length and policy. @return computed version number
195 Converts character code to CID. @param code character code to convert @return CID corresponding to the character code
196 Writes a byte to the output stream after applying XOR encryption. @param aByte the byte to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
197 Writes object reference to the given OutputStream. @param output the OutputStream to write to @param indirectReference the COSObjectKey representing the object reference @throws IOException if an I/O error occurs during writing
198 Checks if compression is enabled. @return true if compression parameters are set and enabled, false otherwise
199 Checks if the update state indicates an update is needed. @return true if updated, false otherwise
200 Checks equality with another object. @param o object to compare @return true if objects are equal, false otherwise
201 Constructs a COSObjectKey with specified object and generation numbers. @param num the object number (must be non-negative) @param gen the generation number (must be non-negative) @param index the stream index
202 Checks if the document is accepting updates. @return true if updates are accepted, false otherwise
203 Writes a byte to the output stream and processes it for ASCII85 encoding. @param b the byte to write @throws IOException if an I/O error occurs
204 Flushes ASCII85 encoded data to output. Handles padding, transformation, and line breaks.
205 Determines text direction based on transformation matrix. @return Direction in degrees (0, 90, 180, 270)
206 Decodes a predictor row for PNG image data. @param predictor prediction algorithm identifier @param colors number of color components per pixel @param bitsPerComponent bits per color component @param columns number of columns in the image @param actline current active line to decode @param lastline previous line used for prediction
207 Sets the bounding box for a PDF object. @param bbox PDRectangle representing the bounding box or null to remove it
208 Decodes a hexadecimal string to a byte array. @param s hexadecimal string input @return decoded byte array or empty if invalid characters found
209 Closes all resources and releases IO resources.
210 Closes the document and associated streams. Logs exceptions during closure.
211 Converts Boolean to COSBoolean. @param value Boolean object to convert @return COSBoolean representation of the input
212 Initializes a new PDMarkedContent instance. @param tag the content tag name @param properties dictionary of content properties
213 Constructs a Type5ShadingPaint. @param shading PDShadingType5 object representing the shading @param matrix transformation matrix for the shading
214 Returns the type name for patterns. @return "Pattern" as the type name
215 Returns the type of shading. @return The string representation of the shading type
216 Retrieves the default value of an attribute. @return String representation of the default value or empty string if none
217 Sets the value to "Off" and throws an IOException.
218 Adds an XReferenceEntry to the list of cross-reference entries. @param entry the XReferenceEntry to be added
219 Initializes a PDXObject with a given stream and subtype. @param stream PDF stream containing the object data @param subtype type of the XObject
220 Reads the startxref offset from a PDF file. @return The offset of the startxref in the file. @throws IOException If an I/O error occurs or required markers are missing.
221 Reads from stream until "endstream" or "endobj" is found. @param out stream to filter content @return length of filtered content @throws IOException if an I/O error occurs
222 Checks if the next character in the source is a space or return. @return true if next character is space or return, false otherwise @throws IOException if an I/O error occurs
223 Adds an XReferenceEntry to the stream data. @param entry the entry to add
224 Returns the numeric value of the column type. @return long representing the numeric value of the column type
225 Retrieves the generation value from the referenced key. @return the generation value as a long
226 Retrieves the cross-reference table. @return Map of COSObjectKey to Long representing object offsets
227 Returns a string representation of the FreeReference. @return formatted String with key, nextFreeObject, and type information
228 Returns the generation value of the referenced key. @return long representing the generation value
229 Returns a string representation of the reference. @return String describing the reference type and details
230 Retrieves the value from the second column. @return numeric value of the parent key
231 Returns the value of the third column. @return long value representing the third column index
232 Returns string representation of ObjectStreamEntry. @return formatted String with key, type, index, and parent details
233 Writes bytes to the output stream. @param b byte array containing data to write @param off offset within the byte array @param len number of bytes to write @throws IOException if an I/O error occurs
234 Writes a single byte to output stream. @param b byte to be written @throws IOException if an I/O error occurs
235 Writes an end-of-line character if not already on a new line.
236 Returns the byte offset value. @return long representing the byte offset
237 Returns the COS object associated with the function. @return COSDictionary representing the function's COS object
238 Searches for XRef streams in a PDF file. @return List of offsets for XRef streams or empty list if none found
239 Searches for the last EOF marker in the PDF file. @return Position of the last EOF marker or Long.MAX_VALUE if not found @throws IOException if an I/O error occurs
240 Retrieves the underlying COSStream. @return COSStream object
241 Retrieves metadata from the PDF document. @return COSStream containing metadata or null if not present
242 Sets metadata to the COSStream. @param metadata the metadata to be set
243 Compares this annotation with another for equality. @param o the object to compare with @return true if both annotations are equal, false otherwise
244 Searches for XRef tables in a PDF. @return List of offsets where XRef tables are found @throws IOException if an I/O error occurs
245 Checks if the next character in source is a digit. @return true if the next character is a digit, false otherwise @throws IOException if an I/O error occurs
246 Adds an XRef entry for a given object key and offset. @param objKey the COSObjectKey to add @param offset the file offset of the object
247 Checks if the next character in the source is a space. @return true if the next character is a space, false otherwise @throws IOException if an I/O error occurs while reading from the source
248 Determines if a line break should be skipped. @param linebreak the character code of the line break @return true if the line break is skipped, false otherwise
249 Checks for end of string indicators in PDF content. @param bracesParameter current brace count @return updated brace count or 0 if end indicator found @throws IOException on read error
250 Checks if character is end-of-line. @param c character to check @return true if character is line feed or carriage return, false otherwise
251 Reads a numeric string from the input source. @return StringBuilder containing the numeric string or empty if no digits found @throws IOException if an I/O error occurs or number exceeds MAX_LENGTH_LONG
252 Checks if the next character in the source is whitespace. @return true if the next character is whitespace, false otherwise @throws IOException if an I/O error occurs while reading from the source
253 Parses startxref from PDF. @return byte offset of the first object or -1 if not found
254 Retrieves the underlying COS dictionary. @return COSDictionary instance
255 Constructs a COSBoolean with the specified boolean value. @param aValue the boolean value to set
256 Constructs a COSName with the given name. @param aName the name of the COSName
257 Private constructor to restrict instantiation.
258 Constructs a COSString from byte array. @param bytes input byte array @param forceHex true to force hexadecimal representation
259 Initializes a new COSDictionary with an update state.
260 Initializes a COSObject with a given base object. @param object the COSBase object to encapsulate
261 Initializes a COSObject with a base object and parser. @param object the underlying COSBase object @param parser the ICOSParser instance
262 Initializes a COSObject with a given key and parser. @param key unique identifier for the COSObject @param parser used to parse the object
263 Initializes a free XReference. @param key object key for the XReference @param nextFreeObject reference to the next free object
264 Initializes an ObjectStreamXReference. @param objectStreamIndex index in the object stream @param key unique identifier for the COSObject @param object underlying COSBase object @param parentKey key of the parent COSObject
265 Constructs a new instance with caching enabled.
266 Initializes a new instance with the given COSDictionary. @param dictionary the underlying COSDictionary to wrap
267 Initializes a PDAttributeObject with a given COSDictionary. @param dictionary the COSDictionary to initialize with
268 Constructs a PDShadingType2 from a COSDictionary. @param shadingDictionary PDF dictionary containing shading details
269 Initializes a new PDUserProperty with given dictionary and attribute object. @param dictionary COSDictionary containing user properties @param userAttributeObject PDUserAttributeObject associated with the user
270 Constructs a PDOutlineNode from a COSDictionary. @param dict dictionary representing the outline node
271 Constructs an FDFAnnotationLink from a COSDictionary. @param a dictionary representing the annotation link
272 Constructs a polygon annotation from a COS dictionary. @param a dictionary containing annotation properties
273 Constructs a new FDFAnnotationPolyline from a COSDictionary. @param a dictionary containing annotation properties
274 Constructs an FDF annotation sound. @param a COSDictionary containing sound properties
275 Constructs a square annotation from a COS dictionary. @param a COS dictionary representing the annotation
276 Constructs a stamp annotation from a COS dictionary. @param a the COS dictionary representing the annotation
277 Constructs an FDFAnnotationText from a COSDictionary. @param a dictionary containing annotation properties
278 Constructs a text markup annotation from a COS dictionary. @param a COS dictionary representing the annotation
279 Constructs a PDShadingType1 from a COSDictionary. @param shadingDictionary dictionary containing shading details
280 Constructs an FDF annotation line from a COS dictionary. @param a COS dictionary representing the annotation
281 Constructs a PDTilingPattern from a COSDictionary and a ResourceCache. @param dictionary PDF dictionary containing tiling pattern information @param resourceCache cache for resources used in the pattern
282 Retrieves the transparency group attributes. @return PDTransparencyGroupAttributes object or null if not found
283 Creates a Composite instance based on blend mode and alpha. @param blendMode blending mode to apply @param constantAlpha opacity level (0-1) @return Composite object for rendering
284 Retrieves Panose classification from byte array. @return PDPanoseClassification object containing font classification data
285 Creates a new PDShadingPattern from a COSDictionary. @param resourceDictionary dictionary containing shading pattern details
286 Constructs an FDF annotation ink from a COS dictionary. @param a COS dictionary representing the annotation
287 Constructs a FDFAnnotationFreeText from a COSDictionary. @param a dictionary representing the annotation
288 Constructs an FDFAnnotationFileAttachment from a COSDictionary. @param a dictionary representing the annotation
289 Constructs a PDTransition from a COSDictionary. @param dictionary underlying COSDictionary
290 Constructs a PDDestinationNameTreeNode from a dictionary. @param dic dictionary containing node data
291 Constructs a PDEmbeddedFilesNameTreeNode from a dictionary. @param dic the COSDictionary to initialize with
292 Constructs a PDJavascriptNameTreeNode from a dictionary. @param dic COSDictionary containing node data
293 Constructs a PDStructureElementNameTreeNode from a dictionary. @param dic COSDictionary representing the node's data
294 Creates a child node with the given dictionary. @param dic dictionary to initialize the node @return PDNumberTreeNode instance initialized with the dictionary and valueType
295 Constructs a PDMetadata object from a COSStream. @param str the COSStream to initialize the metadata with
296 Constructs a PDObjectStream from a COSStream. @param str COS stream to be wrapped
297 Constructs a PDEmbeddedFile from a COSStream. @param str COS stream containing embedded file data
298 Initializes a PDFunction with a given COSBase. @param function the COSBase object representing the function
299 Initializes a PDXObject with a given stream and subtype. @param stream the underlying COSStream @param subtype the subtype of the XObject
300 Constructs a PDStructureElement from a COSDictionary. @param dic dictionary representing the structure element
301 Constructs a PDStructureTreeRoot from a COSDictionary. @param dic dictionary representing the structure tree root
302 Constructor for SecurityHandler.
303 Constructs an FDF annotation caret from a COS dictionary. @param a COS dictionary representing the annotation
304 Constructs a FDF annotation circle from a COS dictionary. @param a COS dictionary containing annotation properties
305 Initializes DecodeOptions with specified rectangle dimensions. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height
306 Checks and reverses Unicode string if it contains RTL characters. @return Reversed string if RTL characters are present, otherwise original string
307 Converts a single byte to its hexadecimal byte representation. @param b input byte @return byte array containing high and low nibble as hex bytes
308 Converts byte array to ASCII representation. @param bytes input byte array @return ASCII byte array representing input bytes in hexadecimal format
309 Writes a byte as two hexadecimal characters to the output stream. @param b byte to be written @param output OutputStream to write to @throws IOException if an I/O error occurs
310 Formats a float value into an ASCII buffer. @param value the float to format @param maxFractionDigits maximum number of fraction digits @param asciiBuffer buffer to store formatted result @return length of formatted string or -1 if formatting fails
311 Constructs an axial shading paint. @param shadingType2 the shading type @param matrix transformation matrix for the shading
312 Constructs a RadialShadingPaint object. @param shading PDShadingType3 instance representing radial shading @param matrix transformation matrix for the shading
313 Searches for a value by byte array key in a trie. @param bytes the byte array representing the key @return the associated value or null if not found
314 Returns the Unicode representation of the object. @return Unicode string
315 Converts byte array to hexadecimal string. @param bytes input byte array @return hexadecimal representation of the byte array
316 Converts byte to hex string. @param b input byte @return two-character hex representation of the byte
317 Starts article output. @param isLTR true if text direction is left-to-right @throws IOException if an I/O error occurs
318 Calculates the width of a rotated element. @param rotation angle of rotation in degrees @return absolute width based on rotation
319 Writes article end tag to output. @throws IOException if an I/O error occurs
320 Calculates the y-coordinate of the lower-left corner after rotation. @param rotation angle in degrees (0, 90, 180, 270) @return y-coordinate based on rotation
321 Writes a line separator to the output stream. @throws IOException if an I/O error occurs
322 Calculates X-axis rotation based on given angle. @param rotation angle of rotation in degrees @return calculated X-axis translation
323 Writes word separator to output. @throws IOException if an I/O error occurs
324 Starts a new paragraph. Ends current paragraph if one is open. @throws IOException if an I/O error occurs
325 Writes the start of a page to the output. @throws IOException if an I/O error occurs
326 Writes the end of the page to the output. @throws IOException if an I/O error occurs
327 Sets sign coordinates. @param x horizontal position @param y vertical position @return PDVisibleSignDesigner instance
328 Checks if a character is a diacritic. @return true if the character is a diacritic, false otherwise
329 Ensures a node has no siblings. @param node the PDOutlineItem to check
330 Constructs a Type1ShadingPaint. @param shading PDShadingType1 object representing the shading @param matrix transformation matrix for the paint
331 Writes characters from TextPosition to output. @param text TextPosition containing Unicode characters @throws IOException if an I/O error occurs
332 Returns the height of the template. @return page height as a float
333 Constructs a COSDocument using the provided parser. @param parser the ICOSParser instance to use
334 Checks if a point (x, y) is within the bounds of a rectangle. @param x x-coordinate of the point @param y y-coordinate of the point @return true if the point is inside the rectangle, false otherwise
335 Constructs a PDSignatureField. @param acroForm the form containing this field @param field the dictionary representing the field @param parent the parent field, if any
336 Returns a string representation of the object collection with revisions. @return formatted string of objects and their revision numbers
337 Generates a unique partial field name by appending incrementing numbers. @return Unique partial field name starting with "Signature"
338 Constructs a PDButton instance. @param acroForm the form containing this button @param field the dictionary representing the button @param parent the parent field of this button
339 Constructs a PDVariableText object. @param acroForm the form containing the field @param field the dictionary representing the field @param parent the parent field of this variable text field
340 Creates a PDSoftMask from a COSBase dictionary. @param dictionary the COSBase dictionary to use @return a new PDSoftMask instance
341 Constructs a PDShadingType5 from a COSDictionary. @param shadingDictionary dictionary containing shading details
342 Constructs a PDShadingType4 instance from a COSDictionary. @param shadingDictionary dictionary containing shading details
343 Constructs a PDShadingType3 from a COSDictionary. @param shadingDictionary dictionary containing shading details
344 Constructs a PDTilingPattern from a COSDictionary. @param dictionary the COSDictionary containing pattern data
345 Constructs an underline annotation. @param a COSDictionary containing annotation properties
346 Constructs a strike-out annotation from a COS dictionary. @param a COS dictionary representing the annotation
347 Constructs a FDFAnnotationSquiggly from a COSDictionary. @param a dictionary representing the annotation
348 Constructs a new FDF annotation highlight from a COS dictionary. @param a COS dictionary containing annotation properties
349 Initializes a new instance of StandardSecurityHandler. @param standardProtectionPolicy policy to be applied
350 Initializes a new instance of PublicKeySecurityHandler. @param publicKeyProtectionPolicy policy for public key protection
351 Constructs a new instance of StandardSecurityHandler.
352 Constructs a new instance of PublicKeySecurityHandler.
353 Creates a PDFormXObject from a COSStream. @param stream PDF content stream @param cache resource cache for form objects
354 Constructs a PDFormXObject from a given COSStream. @param stream PDF object stream representing the form
355 Calculates height by subtracting lower left Y from upper right Y. @return calculated height as float
356 Converts rectangle bounds to a GeneralPath. @return GeneralPath representing the rectangle
357 Retrieves or creates a FontBoxFont instance. @return FontBoxFont object from cache or newly created
358 Saves font information to disk cache. Handles exceptions related to file writing and security issues.
359 Sets the font provider and updates font information. @param fontProvider new FontProvider to be used
360 Constructs a shaded triangle. @param p array of 3 corner points @param c array of colors for each corner
361 Loads a glyph list from a specified resource file. @param filename name of the glyph list file @param numberOfEntries number of entries expected in the glyph list @return GlyphList object containing font glyph mappings
362 Constructs a COSString from text. @param text string to be wrapped by COSString
363 Retrieves the default appearance string. @return default appearance as a String or null if not found
364 Retrieves export values from PDF attribute. @return List of export strings or empty list if none found
365 Extracts strings from nested arrays based on index. @param items base item which can be a COSString or COSArray @param pairIdx index to access within sub-arrays (0 or 1) @return list of extracted strings
366 Retrieves the string value of a named destination. @return String representation of the named destination or null if not applicable
367 Retrieves the file content. @return The string representation of the file content.
368 Encrypts or decrypts data using AES-256. @param data input stream containing the data to process @param output output stream for the processed data @param decrypt true if decrypting, false if encrypting @throws IOException if an I/O error occurs during processing
369 Encrypts or decrypts data using AES. @param finalKey encryption key @param data input stream containing the data to process @param output output stream for processed data @param decrypt true if decrypting, false if encrypting @throws IOException on I/O errors or security issues
370 Processes a character sequence as a token. @param text the input character sequence to process
371 Concatenates two matrices by multiplying them. @param a first matrix @param b second matrix @return result of multiplying b by a
372 Translates an object using coordinates from a Vector. @param vector containing translation X and Y values
373 Applies a text adjustment to the current graphics state. @param tx horizontal translation value @param ty vertical translation value
374 Rotates the current transformation by a specified angle. @param theta rotation angle in radians
375 Computes the owner password for encryption. @param ownerPassword original owner password @param userPassword user password to be encrypted @param encRevision encryption revision level @param length expected length of certain data @return encrypted owner password as byte array @throws IOException if length mismatch or encryption fails
376 Computes encrypted user password based on given parameters. @param password user's password byte array @param owner document owner byte array @param permissions access permissions integer @param id unique identifier byte array @param encRevision encryption revision integer @param keyLengthInBytes length of encryption key in bytes @param encryptMetadata flag to indicate if metadata should be encrypted @return encrypted password byte array @throws IOException if an I/O error occurs during encryption
377 Sets the signature image from a file. @param path file path of the signature image @return PDVisibleSignDesigner instance @throws IOException if file reading fails
378 Initializes a new instance of PDVisibleSignDesigner with an image stream. @param imageStream input stream containing the visible signature image @throws IOException if there is an issue reading the image stream
379 Retrieves a map of GIDs to codes. @return Map where key is GID and value is corresponding code @throws IOException if an I/O error occurs
380 Constructs a PDPostScriptXObject from a given COSStream. @param stream the COSStream containing PostScript data
381 Checks if the collection is empty. @return true if no elements present, false otherwise
382 Writes text followed by a line break. @param text the string to be written @throws IOException if an I/O error occurs
383 Writes an integer operand to the output stream. @param integer the integer value to write @throws IOException if an I/O error occurs
384 Writes a float operand to the output stream. @param real the float value to write @throws IOException if an I/O error occurs
385 Determines file suffix based on stream filters. @return file extension or null if unknown filter
386 Initializes image from a PDF stream and resources. @param stream PDF stream containing image data @param resources PDF resources for the image
387 Creates an output stream for writing data with optional filters. @param filters COSBase object containing filters to apply @return OutputStream for writing data @throws IOException if an I/O error occurs
388 Retrieves name at specified index. @param index position in list @return name string or default if not found
389 Retrieves an integer value at the specified index. @param index position of the integer to retrieve @return integer value or -1 if not found
390 Returns a string representation of the rectangle's corners. @return formatted string with lower-left and upper-right coordinates
391 Transforms the bounding box of a shape using a given matrix. @param matrix transformation matrix to apply @return new GeneralPath representing transformed shape
392 Retrieves a string from the list at the specified index. @param index position in the list @param defaultValue value to return if index is out of bounds or object is not a COSString @return string representation of the COSString at index, or default value
393 Constructs a COSWriter with default compression. @param outputStream destination output stream
394 Returns the degrees as a COSBase integer. @return COSBase representation of degrees
395 Appends a kid with specified MCID. @param mcid Media Content Identifier, must be non-negative
396 Parses a string to a COSNumber. @param number the string representation of the number @return COSNumber object representing the parsed number @throws IOException if the input is not a valid number
397 Converts update state to an increment. @return COSIncrement representing the update state
398 Writes a COSFloat to the output stream followed by a space. @param output the OutputStream to write to @param cosFloat the COSFloat value to write @throws IOException if an I/O error occurs
399 Ends text clipping by applying buffered clips and resetting state.
400 Sets the current graphics clip. Updates the clip based on the current graphics state.
401 Calculates the width of a shape. @return The width as a floating-point number.
402 Constructs a Type 0 PDF function. @param function underlying COS object representing the function
403 Retrieves FontMetrics for a given font name. @param fontName the name of the font @return FontMetrics object or null if not found
404 Writes a portion of a byte array to an OutputStream. @param data the source byte array @param offset starting index in the byte array @param len number of bytes to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
405 Writes byte array to output stream. @param data byte array to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
406 Checks if any revision 3 permissions are set. @return true if any permission is granted, false otherwise
407 Checks if the user has all owner permissions. @return true if all owner permissions are granted, false otherwise
408 Returns adjusted X direction based on rotation. @return Adjusted X direction value
409 Detects file type from input stream. @param inputStream stream containing file data @return FileType object or null if undetectable @throws IOException if stream does not support mark/reset or ends prematurely
410 Writes byte array as hex to output stream. @param bytes array of bytes to convert and write @param output the OutputStream to write to @throws IOException if an I/O error occurs
411 Writes the name as a PDF object to the given output stream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
412 Writes CMS signature to PDF. @param cmsSignature byte array of the CMS signature @throws IOException if writing fails or space is insufficient
413 Converts byte array to hexadecimal string. @return Hexadecimal representation of bytes
414 Converts Calendar to ISO 8601 formatted string. @param cal Calendar instance to convert @return ISO 8601 formatted date-time string
415 Converts Calendar to formatted date string. @param cal Calendar object to convert @return Formatted date string or null if calendar is null
416 Writes the end of a paragraph. Ensures a paragraph start is written if not already in one. Sets `inParagraph` to false after writing.
417 Starts an article with default settings. @throws IOException if an I/O error occurs
418 Returns adjusted width based on direction. @return Adjusted width value
419 Returns the width of an object considering its rotation. @param rotation angle in degrees @return width adjusted for rotation
420 Adjusts Y direction based on page orientation. @return adjusted Y coordinate
421 Initializes a TextPosition object with text metrics and font details. @param pageRotation rotation of the page in degrees @param pageWidth width of the page @param pageHeight height of the page @param textMatrix transformation matrix for text positioning @param endX ending X coordinate of the text @param endY ending Y coordinate of the text @param maxHeight maximum height of the text @param individualWidth width of an individual character @param spaceWidth width of a space character @param unicode Unicode string representation of the text @param charCodes array of character codes @param font PDFont object representing the font @param fontSize size of the font @param fontSizeInPt font size in points
422 Skips whitespace and comments in the input source. @throws IOException if an I/O error occurs
423 Reads a line from the input source. @return the read line as String, or throws IOException on EOF
424 Skips a line break character in the input. @return true if a line break is skipped, false otherwise
425 Skips leading whitespaces and line breaks in the input source. @throws IOException if an I/O error occurs
426 Constructs a PDFormXObject from a given stream. @param stream PDF stream containing form data
427 Searches for the nearest cross-reference offset. @param xrefOffset target offset to search for @return nearest offset found, or -1 if none found
428 Closes the stream, flushing any buffered output.
429 Updates the status of a component. @param updated boolean indicating whether the component is updated
430 Constructs a COSObjectKey with specified number and generation. @param num object number @param gen object generation
431 Checks if a COSBase object needs to be updated. @param base the COSBase object to check @return true if it needs update, false otherwise
432 Closes all resources and documents. Ensures all overlays and open documents are properly closed and cleared.
433 Parses the PDF header. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs
434 Parses FDF header. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs
435 Constructs a PDDocument from a COSDocument and source. @param doc COSDocument to use @param source RandomAccessRead source of the document
436 Creates a PDF document. @return new PDDocument instance @throws IOException if there is an error creating the document
437 Constructs a PDFunctionType3 from a COSBase. @param functionStream the COSBase representing the function stream
438 Initializes a new instance of PDWindowsLaunchParams with an empty dictionary.
439 Initializes a new PDTargetDirectory with an empty dictionary.
440 Initializes a new PDURIDictionary with an empty COSDictionary.
441 Initializes a new instance of PDEncryption with an empty dictionary.
442 Initializes a new PDBorderEffectDictionary with an empty COSDictionary.
443 Initializes a new PDCryptFilterDictionary with an empty COSDictionary.
444 Initializes a new PDBorderStyleDictionary with an empty COSDictionary.
445 Initializes a new PDPropBuild with a direct COSDictionary.
446 Initializes a new PDBoxStyle with an empty COSDictionary.
447 Initializes a new PDPropertyList with an empty dictionary.
448 Initializes a new PDMarkInfo with an empty COSDictionary.
449 Initializes a new PDPropBuildDataDict with a direct COSDictionary.
450 Initializes a new PDSeedValueMDP with a direct COSDictionary.
451 Initializes a new PDSeedValueTimeStamp with an empty dictionary.
452 Constructs a PDField with an empty dictionary. @param acroForm parent form containing the field
453 Initializes a new PDViewportDictionary. Creates and assigns a new COSDictionary to viewportDictionary.
454 Initializes a new instance of PDViewerPreferences with an empty dictionary.
455 Initializes a new instance of PDPageAdditionalActions. Sets up an empty dictionary for storing page actions.
456 Initializes a new instance of PDFormFieldAdditionalActions. Sets up an empty COSDictionary for storing field actions.
457 Initializes a new instance of PDDocumentCatalogAdditionalActions. Sets up an empty COSDictionary for storing actions.
458 Initializes a new instance of PDAnnotationAdditionalActions with an empty dictionary.
459 Initializes a new instance of FDFJavaScript. Sets up an empty COSDictionary for internal use.
460 Initializes a new FDFIconFit object with an empty COSDictionary.
461 Initializes a new FDFField with an empty COSDictionary.
462 Initializes a new FDFDictionary with an empty COSDictionary.
463 Creates a default DecodeResult with an empty COSDictionary. @return DecodeResult instance initialized with a new COSDictionary
464 Initializes a new FDFCatalog with an empty COSDictionary.
465 Constructs a new FDFNamedPageReference with an empty dictionary.
466 Initializes a new FDFPage with an empty COSDictionary.
467 Constructs a PDDefaultAttributeObject from a COSDictionary. @param dictionary the COSDictionary to initialize with
468 Initializes a new FDFPageInfo with an empty COSDictionary.
469 Initializes a new FDFTemplate with an empty dictionary.
470 Initializes a new PDDeviceNAttributes with an empty dictionary.
471 Initializes a new PDDeviceNProcess with an empty dictionary.
472 Initializes a new PDShading instance with an empty dictionary.
473 Initializes a COSStream with a given cache. @param streamCache cache to store stream data
474 Constructs a new empty COSArray.
475 Initializes a new instance of PDAdditionalActions with an empty COSDictionary.
476 Creates an unmodifiable dictionary from a given COSDictionary. @param dict the COSDictionary to wrap
477 Constructs a PDUserAttributeObject from a COSDictionary. @param dictionary the COSDictionary containing user attributes
478 Initializes a COSObject with a given base object and key. @param object the underlying COSBase object @param objectKey the unique identifier for the COSObject
479 Constructs a PDStandardAttributeObject from a COSDictionary. @param dictionary the COSDictionary to initialize with
480 Initializes a new PDNameTreeNode with an empty dictionary.
481 Initializes a new instance of PDDictionaryWrapper with an empty dictionary.
482 Constructs a new PDPageLabelRange with an empty dictionary. Initializes page label range using default settings.
483 Retrieves metadata from PDF stream. @return PDMetadata object or null if not found
484 Retrieves metadata from the PDF document. @return PDMetadata object or null if no metadata is found
485 Constructs a PDOutlineItem from a COSDictionary. @param dic dictionary representing the outline item
486 Initializes a new PDDocumentInformation with an empty COSDictionary.
487 Initializes PDResources with a new COSDictionary and caches.
488 Constructs a COSString from byte array. @param bytes byte array to be wrapped
489 Retrieves or creates a PDF COSName from the given string. @param aName the name string to convert to COSName @return the corresponding COSName object
490 Initializes LegacyPDFStreamEngine with various PDF operators.
491 Retrieves the extends object stream. @return PDObjectStream object or null if not found
492 Checks if map contains key by name. @param name key to check @return true if key exists, false otherwise
493 Retrieves item by key from the document. @param key PDF key as a string @return COSBase object associated with the key
494 Parses a PDF COSName from the input source. @return parsed COSName object @throws IOException if an I/O error occurs or invalid characters are encountered
495 Constructs a PDColor from a COSArray and a color space. @param array COSArray containing color components and optional pattern name @param colorSpace the color space for the color
496 Retrieves a filter by name. @param filterName name of the filter @return Filter object if found, otherwise throws IOException
497 Creates a thumbnail image from a COSStream. @param cosStream the input stream containing image data @return PDImageXObject representing the thumbnail
498 Writes a byte array as a string to the given output stream. @param bytes the byte array to write @param forceHex if true, writes in hex format regardless of content @param output the OutputStream to write to @throws IOException if an I/O error occurs
499 Initializes a PDF marked content extractor with specified encoding. @param encoding character encoding for the PDF document
500 Returns data to be signed for PDF. @throws IOException if an I/O error occurs
501 Starts text mode. Throws exception if already in text mode.
502 Merges a diacritic into the text position. @param diacritic the diacritic to be merged
503 Checks if the current TextPosition overlaps with another. @param tp2 the other TextPosition to compare @return true if there is significant overlap, false otherwise
504 Checks if the current TextPosition completely contains another. @param tp2 the other TextPosition to check @return true if this TextPosition fully encloses tp2, false otherwise
505 Writes a paragraph separator by ending and starting a new paragraph. @throws IOException if an I/O error occurs
506 Writes affine transformation matrix to output. @param transform the AffineTransform object to write
507 Retrieves the soft mask image. @return PDImageXObject representing the soft mask or null if none exists
508 Initializes PDFTextStripper with default operators.
509 Writes a PDF operand to the output stream. @param name the COSName to be written @throws IOException if an I/O error occurs
510 Retrieves the mask image from a PDF object. @return PDImageXObject representing the mask or null if none exists
511 Writes a COSName to an OutputStream followed by a space. @param output the OutputStream to write to @param cosName the COSName object to write @throws IOException if an I/O error occurs
512 Constructs a PDRectangle from a bounding box. @param box BoundingBox defining the rectangle's corners
513 Creates an output stream with specified filter. @param filter PDF filter name @return OutputStream for writing data @throws IOException if I/O error occurs
514 Initializes a new PDPushButton. @param acroForm the form containing the button @param field the dictionary representing the button @param parent the parent field of the button
515 Constructs a new PDCheckBox. @param acroForm the form containing this checkbox @param field the dictionary representing the checkbox field @param parent the parent field of this checkbox
516 Creates an output stream. @return OutputStream instance @throws IOException if an I/O error occurs
517 Constructs a new PDRadioButton. @param acroForm the form containing this radio button @param field the dictionary representing the radio button @param parent the parent field if any
518 Initializes a new PDChoice instance. @param acroForm the form containing this field @param field the dictionary representing the choice field @param parent the parent non-terminal field
519 Constructs a PDTextField. @param acroForm PDF document's form @param field dictionary representing the field @param parent parent non-terminal field
520 Saves the current graphics state by cloning and pushing it onto the stack.
521 Transforms the bounding box of an appearance stream. @param appearanceStream the PDF appearance stream @return transformed bounding box as Rectangle2D
522 Clips the current graphics state to a specified rectangle. @param rectangle the bounding rectangle to clip against
523 Retrieves the left value from an array. @return integer value at index 2 of the array
524 Retrieves the bottom value from an internal array. @return integer value at index 3 of the array
525 Retrieves the right value from the array. @return integer value at index 4 of the array
526 Retrieves the top element from the array. @return The integer value at index 5 of the array.
527 Retrieves the integer value at index 2 of the array. @return the integer at index 2
528 Retrieves the fourth element from the array. @return integer value of the fourth element
529 Checks if the bounding box fits. @return true if bounding box is fitted, false otherwise
530 Checks if the bounding box type matches. @return true if the bounding box is of type BOUNDED, false otherwise
531 Constructs a new COSDocument using an in-memory stream cache.
532 Checks if the bounding box fits. @return true if bounding box fits, false otherwise
533 Saves the current graphics stack and resets it with a clone of the top state. @return The original graphics stack before reset
534 Retrieves the third element from an array. @return the integer value of the third element
535 Adds a Type 1 font from a PFB file. @param pfbFile the PFB font file to process
536 Returns an unmodifiable view of this dictionary. @return UnmodifiableCOSDictionary instance
537 Initializes a COSStream with a cache and read view. @param streamCache cache for managing streams @param randomAccessReadView read-only access to the stream data @throws IOException if an I/O error occurs
538 Constructs a new COSStream with default settings.
539 Creates a new COSStream. @return Created COSStream object
540 Ends text mode and writes the end text operator. @throws IOException if an I/O error occurs
541 Returns the last DecodeResult or a default one if none exist. @return DecodeResult object
542 Initializes a PDRectangle with specified coordinates and dimensions. @param x left edge x-coordinate @param y bottom edge y-coordinate @param width rectangle width @param height rectangle height
543 Initializes a COSArrayList with a dictionary and key. @param dictionary the parent COSDictionary @param dictionaryKey the key for the array in the dictionary
544 Initializes a new instance of COSArrayList. Sets up internal COSArray and ArrayList for storage.
545 Parses a hexadecimal string to a COSString. @param hex the input hexadecimal string @return COSString representation of the hex data @throws IOException if the hex string is invalid
546 Initializes a new instance of PDPageDestination. Sets up an empty COSArray for storing destination details.
547 Saves the current object to an OutputStream. @param output stream where the object will be saved @throws IOException if an I/O error occurs during writing
548 Retrieves resources from the current object. @return PDResources object or null if not found
549 Adds TrueType font information to the list. @param fontHeaders Font headers containing metadata @param file Font file being processed @param hash Hash of the font file
550 Adds a TrueType collection from a file. @param ttcFile the TrueType collection file to process
551 Constructs a PDTransparencyGroup from a COSStream and ResourceCache. @param stream the COSStream containing transparency group data @param cache the ResourceCache for managing resources
552 Constructs a PDAppearanceStream from a COSStream. @param stream the underlying COSStream
553 Constructs a PDTableAttributeObject from a COSDictionary. @param dictionary the COSDictionary to initialize with
554 Constructs a PDPrintFieldAttributeObject from a COSDictionary. @param dictionary the COSDictionary containing print field attributes
555 Constructs a PDListAttributeObject from a COSDictionary. @param dictionary the COSDictionary to initialize with
556 Constructs a PDLayoutAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary
557 Constructs a new PDTerminalField. @param acroForm parent form containing the field
558 Constructs a new PDStructureElementNameTreeNode.
559 Constructs a new instance of PDJavascriptNameTreeNode.
560 Constructs a new instance of PDEmbeddedFilesNameTreeNode.
561 Constructs a new PDDestinationNameTreeNode instance.
562 Constructs a new PDOutlineNode instance.
563 Constructs a new PDUserProperty with the given user attribute object. @param userAttributeObject the user attribute object to be associated with this property
564 Default constructor for PDAttributeObject.
565 Constructs a PDNonTerminalField with an associated PDAcroForm. @param acroForm the form to which this field belongs
566 Sets text leading. @param leading spacing between lines of text @throws IOException if an I/O error occurs
567 Sets text rendering mode. @param rm rendering mode to apply @throws IOException if I/O error occurs during writing
568 Sets horizontal scaling for text. @param scale scaling factor for text width @throws IOException if an I/O error occurs
569 Sets word spacing in a PDF document. @param spacing the amount of space to add between words @throws IOException if an I/O error occurs while writing
570 Sets character spacing in PDF document. @param spacing the amount of space between characters @throws IOException if an I/O error occurs
571 Ends marked content in PDF. @throws IOException if an I/O error occurs
572 Sets the line miter limit. @param miterLimit the miter limit value, must be greater than 0 @throws IOException if an I/O error occurs
573 Sets line dash pattern. @param pattern array of dash lengths @param phase starting point of the dash pattern @throws IOException if writing fails
574 Sets the line cap style. @param lineCapStyle integer representing the line cap style (0-2) @throws IOException if an I/O error occurs
575 Sets the line join style. @param lineJoinStyle join style identifier (0, 1, or 2) @throws IOException if I/O error occurs
576 Sets line width in graphics context. @param lineWidth the desired line width @throws IOException if an I/O error occurs
577 Sets text rise in PDF. @param rise amount of text rise @throws IOException if I/O error occurs
578 Clips the current path using even-odd rule. Throws IllegalStateException if called in text mode.
579 Closes the current path. Throws IllegalStateException if called in text mode.
580 Closes path, fills using even-odd rule, and strokes. Throws exception if called in text mode.
581 Closes path, fills using non-zero winding rule, and strokes it. Throws exception if called in text mode.
582 Fills and strokes the current path using even-odd rule. Throws exception if called in text mode.
583 Renders filled and stroked path. Throws exception if called in text mode.
584 Writes FILL_EVEN_ODD operator to output. Throws exception if called in text mode.
585 Fills current path using non-zero winding rule. Throws exception if called in text mode.
586 Closes and strokes the current path. Throws IllegalStateException if called in text mode. @throws IOException on I/O errors during operation
587 Applies stroke to the current path. Throws IllegalStateException if called in text mode.
588 Draws a line to the specified coordinates. @param x destination x-coordinate @param y destination y-coordinate @throws IOException if an I/O error occurs
589 Writes a newline in text mode. Throws IllegalStateException if not in text mode.
590 Moves the cursor to specified coordinates. @param x horizontal coordinate @param y vertical coordinate @throws IOException if an I/O error occurs
591 Converts COSString to Calendar. @param text COSString containing date information @return Calendar object or null if input is null
592 Creates a PDMarkedContent object based on the tag. @param tag COSName representing the type of marked content @param properties COSDictionary containing properties @return PDArtifactMarkedContent if tag is ARTIFACT, otherwise PDMarkedContent
593 Retrieves user password based on encryption revision. @param ownerPassword owner's password bytes @param owner user identifier bytes @param encRevision PDF encryption revision @param length expected password length @return user password bytes or empty array if unsupported revision @throws IOException if an I/O error occurs
594 Initializes a TensorPatch with given points and colors. @param tcp array of control points @param color 2D array representing patch colors
595 Returns the current FontProvider. Initializes with DefaultFontProvider if not already set. @return FontProvider instance
596 Generates shaded triangles from a grid of coordinate-color pairs. @param patchCC 2D array of CoordinateColorPair objects @return List of ShadedTriangle objects representing the grid
597 Constructs a CoonsPatch with given points and colors. @param points array of control points defining the patch @param color 2D array representing colors at each point
598 Draws a cubic Bézier curve with one control point. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the end point (also second control point) @param y3 y-coordinate of the end point (also second control point) @throws IOException if an I/O error occurs
599 Clips the current path. Throws an exception if called in text mode.
600 Performs a breadth-first search to find objects in the PDF source. @throws IOException if an I/O error occurs during processing
601 Reads a string of specified length from the source. @param length maximum number of characters to read @return the read string or an empty string if no valid characters are found @throws IOException if an I/O error occurs
602 Reads and parses the next integer from input. @return parsed integer value @throws IOException if parsing fails or input is invalid
603 Reads and parses a long integer from input. @return parsed long value @throws IOException if parsing fails or unexpected data is encountered
604 Calculates fixed offset for XRef table/stream. @param objectOffset initial offset to search from @return fixed offset or 0 if not found @throws IOException if an I/O error occurs
605 Constructs a new PDDocument from a COSDocument. @param doc the underlying COSDocument to use
606 Initializes graphics state with a page rectangle. @param page the page dimensions
607 Returns current access permission. Initializes to owner access if not set. @return AccessPermission object
608 Computes the appropriate revision number based on version and permissions. @param version current document version @return computed revision number
609 Encrypts data using RC4 algorithm. @param finalKey encryption key @param input data to encrypt @param output stream for encrypted data
610 Writes data from InputStream to OutputStream. @param data source InputStream @param output destination OutputStream @throws IOException if an I/O error occurs
611 Prepares string for SASL comparison. @param str input string to prepare @return SASL-prepared string
612 Performs SASLprep on a string with storage flag set to false. @param str input string to be processed @return SASLprep-processed string
613 Writes CMap data to an output stream. @param out OutputStream to write the CMap data to @throws IOException if an I/O error occurs
614 Sets a named destination. @param dest the named destination string @throws IOException if an I/O error occurs
615 Constructs a named destination with a given string. @param dest name of the destination
616 Sets the file name. @param fileName name of the file to be set
617 Restores the graphics state. Throws IllegalStateException if called within text mode.
618 Initializes a new PDSimpleFileSpecification with an empty file name.
619 Retrieves a string value based on COSName.V attribute or returns "Off" by default. @return String representation of the value or "Off"
620 Retrieves string at specified index. @param index position of the string to retrieve @return string at given index or default if not found
621 Saves the current graphics state. Throws an exception if called within text mode.
622 Moves text cursor to a new line at the specified offset. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs
623 Reads and verifies an expected string from the source. @param expectedString characters to match against @param skipSpaces whether to skip spaces before reading @throws IOException if the expected string does not match or an I/O error occurs
624 Retrieves or creates a COSObjectKey using document's xref table. @param num object number @param gen generation number @return COSObjectKey for the given number and generation
625 Reads a string from input, skipping spaces. @return the read string @throws IOException if an I/O error occurs
626 Sets the stroking color using CMYK values. @param c cyan component (0.0 to 1.0) @param m magenta component (0.0 to 1.0) @param y yellow component (0.0 to 1.0) @param k black component (0.0 to 1.0) @throws IOException if an I/O error occurs
627 Sets the stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if writing fails
628 Sets non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
629 Sets non-stroking color using CMYK values. @param c cyan component (0.0 to 1.0) @param m magenta component (0.0 to 1.0) @param y yellow component (0.0 to 1.0) @param k black component (0.0 to 1.0) @throws IOException if an I/O error occurs
630 Sets non-stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
631 Adds a rectangle to the current graphics context. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs
632 Updates the resource with full refresh enabled.
633 Sets the update state flag. @param flag indicates whether an update is needed
634 Draws a cubic Bézier curve. @param x1, y1 control point 1 coordinates @param x2, y2 control point 2 coordinates @param x3, y3 end point coordinates @throws IOException if an I/O error occurs
635 Draws a cubic Bézier curve. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 third control point's X coordinate @param y3 third control point's Y coordinate @throws IOException if an I/O error occurs
636 Parses an XRef table from the PDF source. @param startByteOffset starting byte offset of the XRef table @return true if parsing is successful, false otherwise
637 Parses XRef trailer using provided resolver. @param resolver object for handling parsed data @throws IOException if an I/O error occurs
638 Searches for object stream offsets using backward search. @return Map of offsets to COSObjectKey or null if not found
639 Constructs a PDTransparencyGroup from a given stream. @param stream the input stream containing transparency group data
640 Retrieves the integer value at index 2 of the array. @return integer value from array index 2
641 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
642 Removes an object from the collection. @param o the object to be removed @return true if the object was successfully removed, false otherwise
643 Parses a hexadecimal string from the source. @return COSString object representing the parsed hex string @throws IOException if input stream is closed or malformed
644 Constructs a new PDRectangle with zero dimensions.
645 Constructs a PDRectangle with specified width and height. @param width the width of the rectangle @param height the height of the rectangle
646 Returns a rectangle defined by bounding box coordinates. @return PDRectangle object representing the bounding box
647 Calculates the difference rectangle between bounding box and annotation rectangle. @return PDRectangle representing the difference or a default square if annotRect is null
648 Sets an integer value at a specified index. @param index position in the list to update @param intVal integer value to set
649 Adjusts rectangle dimensions by specified differences. @param rectangle original PDRectangle to adjust @param differences array of four floats representing adjustments @return new PDRectangle with adjusted dimensions or original if invalid input
650 Adjusts rectangle dimensions based on given differences. @param rectangle original PDRectangle to modify @param differences array of four floats representing adjustments @return new PDRectangle with applied differences or original if invalid input
651 Applies padding to a rectangle. @param box original rectangle @param padding amount of padding to add @return new rectangle with applied padding
652 Creates a PDF XRef stream. @param cosDocument document to create stream in
653 Creates a new object stream in the given PDF document. @param document the PDF document to add the stream to @return PDObjectStream representing the created object stream
654 Creates a PDStream from a PDDocument. @param document PDDocument object to create stream from
655 Adds padding to a rectangle. @param rectangle original rectangle @param padding amount of padding to add @return new PDRectangle with added padding
656 Initializes PDFTextStripperByArea without separating text by beads. @throws IOException if an I/O error occurs during initialization
657 Constructs a PDF marked content extractor.
658 Reads and validates generation number. @return validated generation number @throws IOException if number is invalid
659 Reads and validates an object number. @return the validated object number @throws IOException if the number is invalid
660 Encrypts data using RC4 algorithm. @param finalKey encryption key @param input stream containing data to encrypt @param output stream for encrypted data
661 Processes a TextPosition, handling duplicates and diacritics. @param text TextPosition to process
662 Processes a text position, handling overlapping and diacritic characters. @param text the TextPosition to process
663 Begins marked content with a specified tag. @param tag name of the content tag @throws IOException if an I/O error occurs
664 Begins marked content with a tag and MCID. @param tag the COSName tag for marking content @param mcid non-negative mark identifier
665 Sets a marked content point in PDF. @param tag COSName representing the tag for marking @throws IOException if an I/O error occurs
666 Writes a COSString to an OutputStream. @param string the COSString to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
667 Writes byte array to output stream. @param bytes data to write @param output destination stream @throws IOException if an I/O error occurs
668 Initializes PDF graphics engine for a given page. @param page the PDPage to operate on
669 Creates a PDStream from a COSDocument. @param document the COSDocument to create the stream from
670 Initializes a PDF stream with the given document, input stream, and filters. @param doc PDF document to associate with the stream @param input source of data for the stream @param filters compression filters to apply @throws IOException if an I/O error occurs
671 Creates a COSStream from an input stream. @param document PDDocument to create the stream in @param rawInput InputStream containing data for the stream @return COSStream object created from the input @throws IOException if I/O operations fail
672 Removes an item by its COSName key. @param key unique identifier of the item to be removed
673 Clears all items and updates the state.
674 Removes and returns an entry from the list at the specified index. @param i index of the entry to remove @return the removed COSBase object or null if out of bounds
675 Clears all objects and updates the state.
676 Writes byte data to a PDF appearance stream. @param data byte array containing the data to write @param appearanceStream the target PDF appearance stream @throws IOException if an I/O error occurs during writing
677 Initializes a new PDAppearanceContentStream. @param appearance the appearance stream to write to @param compress true if the output should be compressed @throws IOException if an I/O error occurs
678 Sets the text matrix for the current graphics state. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs
679 Applies a transformation to the graphics context. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs during transformation
680 Updates state if origins differ. @param updateState current update state
681 Sets baseObject to NULL and updates parser.
682 Encodes an input stream to an output stream. @param input source data stream @param encoded destination for encoded data @param parameters encoding settings @param index current processing index (unused)
683 Default constructor for PDDefaultAttributeObject.
684 Constructs a new PDUserAttributeObject with OWNER_USER_PROPERTIES as the owner.
685 Default constructor for PDStandardAttributeObject.
686 Constructs a new PDOutlineItem.
687 Constructs a PDVariableText object. @param acroForm the PDAcroForm to associate with this variable text field
688 Constructs a PDExportFormatAttributeObject from a COSDictionary. @param dictionary the COSDictionary to initialize with
689 Returns the appearance stream for this object. @throws IllegalStateException if the entry is not an appearance stream
690 Adds a TrueType or OpenType font from a file. @param ttfFile the font file to add
691 Constructs a PDShadingType6 instance. @param shadingDictionary COSDictionary containing shading details
692 Constructs a PDShadingType7 from a COSDictionary. @param shadingDictionary dictionary containing shading details
693 Constructs a PDComboBox. @param acroForm PDF form containing the combo box @param field dictionary representing the combo box @param parent parent non-terminal field of the combo box
694 Constructs a PDListBox from an existing PDF form. @param acroForm The form containing the list box. @param field The dictionary representing the list box field. @param parent The parent field of this list box.
695 Creates a COSParser with specified parameters. @param source input stream for parsing @param password decryption password @param keyStore key store for encryption @param keyAlias alias of the key in the key store
696 Creates an output stream. @return OutputStream instance @throws IOException if stream creation fails
697 Sets the origin document state and updates recursively. @param originDocumentState new document state to set @param dereferencing flag indicating if dereferencing is needed
698 Saves data to a file. @param fileName the File object representing the destination @throws IOException if an I/O error occurs
699 Checks if the given password matches the user or owner permissions. @param password user-provided password to check @param user user identifier @param owner owner identifier @param permissions permission level required @param id unique document identifier @param encRevision encryption revision used @param keyLengthInBytes length of the encryption key in bytes @param encryptMetadata flag indicating if metadata is encrypted @return true if password matches, false otherwise @throws IOException if unknown encryption revision is encountered
700 Finds a FontBoxFont by format and PostScript name. @param format font format type @param postScriptName unique PostScript name of the font @return FontBoxFont object or null if not found
701 Converts COSString to Calendar. @param text COSString containing date information @return Calendar object or null if input is null
702 Parses a COS dictionary value and returns the corresponding COSBase object. @return Parsed COSBase object or null if invalid
703 Computes encrypted key based on encryption revision. @param password user's password @param o owner entry bytes @param u user entry bytes @param oe owner encryption entry bytes @param ue user encryption entry bytes @param permissions access permissions @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes length of the encryption key in bytes @param encryptMetadata flag to encrypt metadata @param isOwnerPassword true if owner password, false otherwise @return encrypted key as byte array @throws IOException on I/O error during computation
704 Returns COS object offsets. @return Map of COSObjectKey to offset or null if search not triggered
705 Initializes PDAppearanceContentStream with given appearance and output stream. @param appearance PDF appearance stream to use @throws IOException if an I/O error occurs during initialization
706 Writes a page with formatted text. Handles sorting, spacing, and layout of text positions.
707 Finds FontBoxFont by PostScript name. @param postScriptName the font's PostScript name @return FontBoxFont object or null if not found
708 Checks if the provided password matches the user's encrypted data. @param password user-provided password to validate @param user user data array @param owner owner data array @param permissions user permissions level @param id unique identifier for the encryption key @param encRevision encryption revision number @param keyLengthInBytes length of the encryption key in bytes @param encryptMetadata flag indicating if metadata is encrypted @return true if password matches, false otherwise @throws IOException if an I/O error occurs
709 Checks if the provided owner password matches for given encryption revision. @param ownerPassword byte array of the owner password to check @param user byte array representing the user data @param owner byte array representing the owner data @param permissions permission level for the document @param id byte array of the document ID @param encRevision encryption revision number @param keyLengthInBytes length of the encryption key in bytes @param encryptMetadata flag indicating if metadata is encrypted @return true if the password matches, false otherwise @throws IOException if an I/O error occurs or unknown encryption revision
710 Constructs a PDF parser with optional encryption handling. @param source input stream for the PDF file @param decryptionPassword password to decrypt encrypted PDFs @param keyStore key store for certificate-based decryption @param alias alias of the key in the key store
711 Parses a sequence of instructions from given text. @param text source containing instructions @return InstructionSequence object representing parsed instructions
712 Sets the origin document state. @param originDocumentState new state to be set
713 Removes an entry by key from both maps. @param key unique identifier for the entry @return value associated with the removed key, or null if not found
714 Initializes a new content stream for a PDF form. @param form the form object to write content to @throws IOException if an I/O error occurs
715 Clears all entries from both maps.
716 Constructs a new PDPrintFieldAttributeObject with OWNER_PRINT_FIELD as owner.
717 Constructs a new PDListAttributeObject with OWNER_LIST as the owner.
718 Initializes a new PDLayoutAttributeObject with OWNER_LAYOUT as owner.
719 Constructs a COSParser with specified source. @param source RandomAccessRead object containing PDF data
720 Initializes content stream for an appearance. @param doc PDF document @param appearance appearance stream to write to @throws IOException if I/O error occurs
721 Sets line width on demand, skipping default value. @param lineWidth desired line width @throws IOException if an I/O error occurs
722 Draws a paperclip icon using PDF graphics. @param contentStream the stream to draw on @throws IOException if an I/O error occurs
723 Draws a circle on the given content stream. @param cs content stream to draw on @param x center x-coordinate @param y center y-coordinate @param r radius of the circle
724 Draws a circle on the PDF canvas. @param cs content stream for drawing @param x center x-coordinate @param y center y-coordinate @param r radius of the circle @throws IOException if an I/O error occurs
725 Draws a diamond shape. @param cs content stream for drawing @param x center x-coordinate @param y center y-coordinate @param r radius of the diamond @throws IOException if an I/O error occurs
726 Draws a shape with specified line width and options for stroke and fill. @param lineWidth thickness of the shape's outline @param hasStroke whether to apply a stroke @param hasFill whether to apply a fill @throws IOException if an I/O error occurs during drawing
727 Constructs a PDImageXObject from an encoded stream. @param document the PDDocument to associate with this image @param encodedStream the input stream containing encoded image data @param cosFilter the COSBase filter for the image @param width the width of the image in pixels @param height the height of the image in pixels @param bitsPerComponent the number of bits per color component @param initColorSpace the initial PDColorSpace for the image @throws IOException if an I/O error occurs
728 Draws an arrow on a PDF. @param cs content stream for drawing @param x starting x-coordinate @param y starting y-coordinate @param len length of the arrow line
729 Removes an element at the specified index. @param index position of the element to remove @return removed element @throws UnsupportedOperationException if list is filtered
730 Constructs a new PDTableAttributeObject and sets its owner to OWNER_TABLE.
731 Constructs a PDStream with specified document, input stream, and filters. @param doc PDDocument to associate the stream with @param input InputStream containing the stream data @param filters COSArray of filters to apply to the stream
732 Retrieves the bounding box rectangle. @return PDRectangle representing the bounding box
733 Constructs an immutable rectangle with specified dimensions. @param width the width of the rectangle @param height the height of the rectangle
734 Parses a COS string from the input source. @return COSString object parsed from the source @throws IOException if parsing fails due to invalid format or I/O error
735 Sets the page number in the array. @param pageNumber the page number to set
736 Removes an object from the list. @param o object to be removed @return true if object is successfully removed, false otherwise
737 Sets the third element of the array to the specified value. @param high the new value for the third element
738 Initializes a PageDrawer with specified parameters. @param parameters configuration for drawing the page @throws IOException if an I/O error occurs during initialization
739 Displays text using the current font and mode. @param text string to be displayed @throws IOException if an I/O error occurs
740 Writes a COSString to an OutputStream followed by a space. @param output the OutputStream to write to @param cosString the COSString to write
741 Initializes metadata for a PDF document. @param document the PDF document to associate with the metadata
742 Encrypts or decrypts data using specified algorithms. @param objectNumber unique identifier for the encryption context @param genNumber generation number for key calculation @param data input stream containing data to process @param output output stream for processed data @param decrypt true if decrypting, false if encrypting @throws IOException if an I/O error occurs during processing
743 Creates an embedded file in a PDF document. @param document the PDF document to add the embedded file to
744 Saves data to a file. @param fileName name of the file to save to @throws IOException if an I/O error occurs
745 Recursively collects COSBase entries for document updates. @param array COSArray to process @return true if any entry demands parent update, false otherwise
746 Creates a PDStream with specified document, input stream, and filter. @param doc PDDocument to associate the stream with @param input InputStream containing data for the stream @param filter COSName representing the filter applied to the stream @throws IOException if an I/O error occurs
747 Creates a PDStream from an input stream. @param doc parent document @param input source input stream @throws IOException if there's an I/O error
748 Validates and corrects XRef offsets using brute force if necessary. @throws IOException if an I/O error occurs during validation or correction
749 Constructs an image from a PDF document. @param document the source PDF document
750 Initializes a PDXObject with a document and subtype. @param document the PDF document to associate with @param subtype the XObject subtype
751 Initializes metadata from document and input stream. @param doc PDF document @param str input stream containing metadata @throws IOException on I/O error
752 Draws annotation style at specified position. @param style line end style @param cs content stream to draw on @param x x-coordinate of the start point @param y y-coordinate of the start point @param width line width @param hasStroke true if stroke is required @param hasBackground true if background is required @param ending true if drawing at the end of the line @throws IOException if an I/O error occurs
753 Verifies owner password. @param password user-provided password @param user user data @param owner owner data @param permissions access permissions @param id unique identifier @param encRevision encryption revision @param keyLengthInBytes length of encryption key in bytes @param encryptMetadata flag to encrypt metadata @return true if password is valid, false otherwise
754 Constructs a new PDFormXObject. @param document The PDDocument to associate with this form object.
755 Retrieves the COSBase object. @return COSBase object or null if not found
756 Updates the object and sets origin document state for specific child. @param child the child object to be updated
757 Sets the document trailer dictionary. @param newTrailer the new trailer dictionary to be set
758 Collects and processes a COSBase object. @param base the COSBase object to process @return true if collected, false otherwise
759 Writes pages for each region. Iterates over regions, sets characters and text, then writes page.
760 Initializes a new FDFParser instance. @param source RandomAccessRead object containing FDF data @throws IOException if an I/O error occurs during initialization
761 Creates and configures a PageDrawer. @param parameters configuration for the PageDrawer @return configured PageDrawer instance @throws IOException if an I/O error occurs during setup
762 Displays text and writes an operator. @param text the text to display @throws IOException if I/O error occurs
763 Writes text with positioning from an array. @param textWithPositioningArray array containing Strings and Floats for text and positioning @throws IOException if writing fails
764 Constructs a PDEmbeddedFile from an InputStream. @param doc the parent PDDocument @param str the InputStream containing the file data
765 Constructs a PDEmbeddedFile object. @param doc the document containing the embedded file @param input the InputStream of the file to be embedded @param filter the compression filter for the embedded file @throws IOException if an I/O error occurs
766 Writes a token to the output stream. @param base COSBase object to be written @throws IOException if an I/O error occurs
767 Initializes PDF parser with source and decryption password. @param source input stream for PDF file @param decryptionPassword password to decrypt the PDF if encrypted @throws IOException if an I/O error occurs during initialization
768 Encrypts a PDF stream. @param stream the COSStream to encrypt @param objNum object number of the stream @param genNum generation number of the stream @throws IOException if encryption fails
769 Decrypts a COSString using encryption details. @param string the encrypted COSString @param objNum object number for decryption context @param genNum generation number for decryption context @return decrypted COSBase object or original if decryption fails
770 Initializes font provider with local system fonts. @param cache FontCache for storing font information
771 Prepares an image XObject for a PDF document. @param document the target PDF document @param byteArray raw image data @param width image width in pixels @param height image height in pixels @param bitsPerComponent bits per color component @param initColorSpace initial color space @return PDImageXObject ready for insertion into PDF @throws IOException if encoding fails
772 Encrypts a string using specified object number and generation number. @param string the input string to be encrypted @param objNum the object number for encryption context @param genNum the generation number for encryption context @return encrypted COSString @throws IOException if an I/O error occurs during encryption
773 Decrypts a PDF stream. @param stream the COSStream to decrypt @param objNum object number of the stream @param genNum generation number of the stream @throws IOException if an I/O error occurs
774 Constructs a PDExportFormatAttributeObject with the specified owner. @param owner the owner of the export format attribute object
775 Retrieves or generates a unique key for a PDF object. @param obj PDF object to process @return COSObjectKey representing the object's key
776 Checks if the given value directly references its parent. @param parent the parent COSBase object @param value the COSBase object to check for self-reference @return true if there is a self-reference, false otherwise
777 Checks if the map contains a specified value or its wrapped object. @param value the value to search for @return true if the value is found, false otherwise
778 Accepts a visitor to process the PDF object. @param visitor ICOSVisitor instance for processing @throws IOException if an I/O error occurs during processing
779 Closes all open streams and resources. Throws the first encountered IOException.
780 Retrieves the linearized dictionary from the PDF. @return COSDictionary object or null if not found
781 Retrieves the key associated with a given value in the map. @param value the value to search for @return COSName key or null if not found
782 Finds the index of a given object in the list. @param object the COSBase object to search for @return index of the object or -1 if not found
783 Retrieves an object from the dictionary by key. @param key the key for the desired object @return the COSBase object or null if not found or is COSNull
784 Retrieves the length as a COSNumber from a given base object. @param lengthBaseObj the base object containing or referencing the length @return the COSNumber representing the length, or null if not found @throws IOException if there's an error processing the object
785 Collects and updates dictionary entries based on their update state. @param dictionary the COSDictionary to process @return true if child entries demand parent update, false otherwise
786 Initializes a new transparency group within a PDF document. @param document the PDDocument to associate with this group
787 Constructs a new appearance stream. @param document The PDF document to associate with this appearance stream.
788 Creates a JPEG image from a BufferedImage. @param document PDDocument to add the image to @param image BufferedImage source @param quality JPEG compression quality (0.0 - 1.0) @param dpi dots per inch for image resolution @return PDImageXObject representing the JPEG image @throws IOException if an I/O error occurs
789 Constructs a PDFParser with a given source. @param source RandomAccessRead object representing the PDF file @throws IOException if an I/O error occurs
790 Collects and processes a COSObject. @param object the COSObject to collect @return true if collection is needed, otherwise false
791 Constructs a NormalXReference. @param byteOffset offset in the file @param key unique object key @param object associated COSBase object
792 Retrieves object at specified index, resolving COSObject references. @param index position of the object in the list @return resolved COSBase object or null if it's a COSNull
793 Returns the set of COSBase objects. Initializes the set if not already done using incrementOrigin. @return Set of COSBase objects
794 Adds a COSBase object to the collection. @param object the COSBase object to add
795 Adds an object at a specified index. @param i index position @param object the COSBase object to add
796 Sets an object at a specified index. @param index position in the list @param object COSBase object to set
797 Sets an item in the dictionary with a key. @param key COSName key for the item @param value COSBase value to set; null removes the item
798 Removes an object from the list, handling nested COSObjects. @param o the object to remove @return true if the object was successfully removed, false otherwise
799 Updates items in an array. @param children iterable collection of COSBase objects to update
800 Prepares a stream object for processing. @param key unique identifier for the object @param object the COSBase object to be processed
801 Checks if the pool contains the specified COSBase object. @param object the COSBase object to check @return true if the object is in the pool, false otherwise
802 Retrieves the key for a given COSBase object. @param object the COSBase object to find the key for @return COSObjectKey associated with the object, or null if not found
803 Retrieves colorant names from the array. @return List of colorant names as strings
804 Retrieves the alternate color space. @return PDColorSpace object or null if not set @throws IOException if an I/O error occurs
805 Retrieves a BlendMode instance from a PDF COS object. @param cosBlendMode PDF blend mode object @return corresponding BlendMode or NORMAL if not found
806 Retrieves a float value from the dictionary for a given key. @param key the key to look up in the dictionary @param defaultValue the default value to return if the key is not found or not a number @return the float value associated with the key, or the default value if not applicable
807 Retrieves PDGamma by index from array. @param index position in the array @return PDGamma object or null if not found
808 Retrieves the maximum value from a range array. @return the maximum value as a float
809 Retrieves the minimum value from a range array. @return minimum value as a float
810 Converts COSBase objects to a list of Integers. @return List of Integers or nulls if conversion fails
811 Sets a float item in the dictionary. @param key the dictionary key @param value the float value to set or null to remove the key
812 Constructs a new PDExtendedGraphicsState. Initializes with a COSDictionary and sets the type to EXT_G_STATE.
813 Sets the border array for the PDF object. @param borderArray array defining the border properties
814 Sets the rectangle for this PDF object. @param rectangle PDRectangle to define boundaries
815 Initializes an annotation from a PDF dictionary. @param dict the PDF dictionary representing the annotation
816 Initializes a PDF annotation. Sets up the annotation's dictionary with type 'Annot'.
817 Sets the relationship to either 'P' (Parent) or 'C' (Child). @param relationship COSName representing the relationship type @throws IllegalArgumentException if relationship is neither 'P' nor 'C'
818 Sets the base item in the action. @param b COSBase object to be set
819 Sets the D item in the action. @param d the COSBase object to be set as the D item
820 Sets form fields to the specified COSArray. @param array containing field definitions
821 Sets the sound stream for an action. @param sound COSStream representing the sound data
822 Sets form fields to the action. @param array COSArray containing field definitions
823 Sets the highlight flag. @param h true to enable highlight, false otherwise
824 Sets the action item T. @param t COSBase object to be set as item T
825 Sets the second transfer object in the dictionary. @param transfer2 COSBase object representing the transfer
826 Sets the transfer attribute in the dictionary. @param transfer COSBase object representing the transfer
827 Retrieves the first page number from an array. @return The page number as an integer, or -1 if not found
828 Retrieves the first page from a PDF document. @return PDPage object or null if no pages are present
829 Sets the blend mode for an object. @param bm the BlendMode to apply
830 Retrieves colorant name from array. @return Colorant name as a string
831 Converts list of COSBase objects to List<Float>. @return List of Float values or null for non-COSNumber items
832 Sets the rich text value. @param richTextValue the rich text content to set
833 Sets decoding values for PDF object. @param decodeValues array of decoding parameters
834 Sets the transformation matrix. @param transform AffineTransform object to apply
835 Sets the visibility policy for the dictionary. @param visibilityPolicy the policy to be applied
836 Adds all objects from the given list to this array. @param objectList the list of COSBase objects to add
837 Sets the bounding box for a PDF element. @param bbox the new bounding box or null to remove it
838 Adds the first intermediate curve segment. @param angleCur current angle @param r radius @param alpha angle adjustment factor @param cx center x-coordinate @param cy center y-coordinate
839 Generates intermediate curl template points. @param angleCur current angle in degrees @param r radius of the template @return array of Point2D.Double representing the curl template @throws IOException if an I/O error occurs
840 Initializes a PDF optional content membership dictionary. Sets the type to "OCMD".
841 Creates an image object from a buffered image. @param document the PDF document to add the image to @param image the source buffered image @param quality the compression quality (0.0 - 1.0) @return PDImageXObject representing the image @throws IOException if there's an error processing the image
842 Converts the array to a float array. @return float[] containing float values from COSBase objects
843 Sets the background array in the document. @param newBackground COSArray representing the background
844 Sets the color space for the object. @param colorSpace the color space to be set
845 Sets coordinates for the object. @param newCoords array of coordinate values
846 Sets the domain for the COS object. @param newDomain the new domain to be set
847 Sets the extend array. @param newExtend the new COSArray to set
848 Sets the domain for the COS object. @param newDomain array representing the new domain
849 Sets the transformation matrix. @param transform AffineTransform object to apply
850 Sets the default style string for a PDF object. @param defaultStyleString the style string to set or null to remove it
851 Sets the bounding box for a PDF element. @param newBBox the new bounding box rectangle
852 Sets the function array. @param newFunctions new COSArray of functions
853 Sets the coordinate system origin. @param coordSystemOrigin array containing x and y coordinates
854 Initializes a new PDThread with a COSDictionary. Sets the type to "Thread".
855 Sets transition direction. @param direction PDTransitionDirection object to set
856 Sets the duration of an object in seconds. @param duration the duration value to be set
857 Sets the fly scale for an object. @param scale the scaling factor to apply
858 Sets the fly area to be opaque or transparent. @param opaque true if the fly area should be opaque, false otherwise
859 Sets rectangle differences for PDF annotations. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
860 Sets the callout coordinates. @param callout array of float values representing callout coordinates
861 Sets the ink list for a PDF annotation. @param inkList 2D float array representing ink paths
862 Sets line coordinates. @param l array of line coordinate values
863 Determines the open mode for a document. @return OpenMode indicating new or same window preference
864 Retrieves the "T" entry from the action dictionary. @return COSBase object representing the "T" entry
865 Determines if the document should open in a new window. @return OpenMode indicating the window behavior
866 Determines the open mode for a document. @return OpenMode indicating new window, same window, or user preference
867 Retrieves named destination from dictionary. @return PDNamedDestination object or null if not found
868 Retrieves the contents as a byte array. @return byte array of contents or empty array if not found
869 Retrieves XFA resource from the dictionary. @return PDXFAResource object or null if not found
870 Retrieves an inheritable attribute from the dictionary or parent. @param key the attribute key to look for @return COSBase object of the attribute, or null if not found
871 Retrieves the backdrop color array. @return COSArray representing the backdrop color or null if not set
872 Retrieves value from COS dictionary. @return COSBase object associated with key "V"
873 Retrieves the default value from the COS object. @return COSBase representing the default value or null if not present
874 Closes resources, releasing any held locks. @throws IOException if an I/O error occurs
875 Retrieves the key for a given COSBase object. @param object the COSBase object to find the key for @return the COSObjectKey associated with the object
876 Checks if the pool contains the specified COSBase object. @param object the COSBase object to check @return true if the object is in the pool, false otherwise
877 Creates a list of COSWriterObjectStream objects. @return List of COSWriterObjectStream instances
878 Retrieves a COSName from the dictionary. @param key key to look up in the dictionary @param defaultValue default value to return if key not found or not a COSName @return COSName associated with the key, or default value
879 Adds or updates an object in the pool. @param key unique identifier for the object @param object the COSBase object to be stored @return updated or new COSObjectKey, null if not added
880 Retrieves the name as a string from a dictionary object. @param key the key to look up in the dictionary @return the name as a string, or null if not found
881 Retrieves string value associated with a key. @param key the dictionary key @return string value or null if not found
882 Converts a COSDictionary to a COSDictionaryMap with basic types. @param map the input COSDictionary @return COSDictionaryMap containing converted values or null if input is null @throws IOException if an unknown object type is encountered
883 Retrieves field value as string. @return Field value as string or empty if not found
884 Retrieves the first string option. @return The string value of the first option or throws exception if not a COSString.
885 Retrieves the transfer function for color conversion. @return COSBase object or null if invalid array size
886 Retrieves float value from dictionary by key. @param key the COSName key to search for @return Float value or null if not found
887 Returns an iterator of content streams from the page. @return Iterator<PDStream> containing content streams
888 Checks if the page has content. @return true if page contains content, false otherwise
889 Retrieves class names from a PDF object. @return Revisions<String> containing class names and revision numbers
890 Retrieves the COSBase object associated with key 'K'. @return COSBase object or null if not found
891 Retrieves the value associated with the key "V" from the COS object. @return COSBase object representing the value or null if not found
892 Checks if metadata encryption is enabled. @return true if metadata encryption is enabled, false otherwise
893 Retrieves the owner encryption key. @return byte array containing the owner encryption key or null if not found @throws IOException if an I/O error occurs during retrieval
894 Retrieves user encryption key from dictionary. @return byte array containing the encryption key or null if not found @throws IOException if an I/O error occurs
895 Retrieves permissions from a PDF dictionary. @return byte array of permissions or null if not found @throws IOException if an I/O error occurs
896 Retrieves the page number associated with an annotation. @return The page number or null if not set
897 Retrieves the COSValue from a PDF field. @return COSBase object or null if not found @throws IOException if an unknown type is encountered
898 Retrieves the transfer function dictionary. @return COSBase object or null if invalid array size
899 Retrieves field flags from a PDF form. @return integer representing field flags or null if not found
900 Retrieves clear field flags from a PDF field. @return Integer representing clear field flags or null if not set
901 Retrieves flags for a widget field. @return integer representing field flags or null if not set
902 Retrieves widget field flags. @return Integer representing field flags or null if not set
903 Retrieves clear widget field flags. @return Integer value of clear flags or null if not set
904 Retrieves the default width, initializing it if not set. @return default width value as a float
905 Retrieves the color space from the PDF dictionary. @return PDColorSpace object or null if not found @throws IOException if an I/O error occurs
906 Retrieves the color space from resources. @param resources PDF document resources @return PDColorSpace object or null if not found
907 Initializes a PDOptionalContentGroup from a COSDictionary. @param dict the underlying COSDictionary @throws IllegalArgumentException if the dictionary is not of type 'OCG'
908 Initializes a PDOptionalContentMembershipDictionary from a COSDictionary. @param dict COSDictionary containing optional content membership data @throws IllegalArgumentException if dictionary is not of type 'OCMD'
909 Retrieves the overprint mode. @return Integer representing the overprint mode or null if not set
910 Retrieves soft mask from dictionary. @return PDSoftMask object or null if not found
911 Retrieves set field flags from a PDF form field. @return Integer value of the set field flags or null if not found
912 Retrieves default appearance string from options. @return Default appearance string or null if not found
913 Retrieves values associated with a given COSName. @param name the COSName key to look up @return list of string values or empty list if not found
914 Creates a new text field in an Acrobat form. @param acroForm the parent form containing this field
915 Updates the document's highest XRef object number based on imported page. @param importedPage the page to be processed
916 Initializes a PDF seed value certificate. Sets up the dictionary with necessary attributes.
917 Sets the time stamp in the dictionary. @param timestamp PDSeedValueTimeStamp object to be set
918 Sets the MDP seed value in the dictionary. @param mdp PDSeedValueMDP object containing MDP settings
919 Initializes a new PDSignature with a type of "Sig".
920 Sets the compression filter for the PDF object. @param filter COSName representing the filter type
921 Initializes a PDSeedValue with a COSDictionary.
922 Sets the dash style for a PDF line. @param dashArray array defining dash pattern
923 Initializes a new PDF appearance dictionary with required entries.
924 Sets quadrilateral annotation points. @param quadPoints array of 8 floats defining the quad points
925 Sets rectangle differences for margin adjustments. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
926 Sets the parent annotation. @param annot the parent annotation to set
927 Sets vertices for a shape. @param points array of vertex coordinates
928 Sets vertices for a shape. @param points array of vertex coordinates
929 Sets rich content string. @param rc rich content to be set
930 Sets quadrilateral points for annotation. @param quadPoints array of 8 floats representing the quad points
931 Sets the type of the PDF dictionary. @param type the COSName representing the type
932 Sets the filter for the current object. @param filter COSName representing the filter type
933 Sets the sub-filter name in the dictionary. @param subfilter the name of the sub-filter to be set
934 Creates a new PDSignatureField. @param acroForm the form to which this field belongs
935 Retrieves dictionary object by key. @param key dictionary key as String @return COSBase object associated with the key
936 Creates a PDDestination from a COSBase object. @param base the COSBase object representing the destination @return a PDDestination object or null if base is null @throws IOException if an error occurs during creation
937 Converts the dictionary to a string representation. @return String representation of the dictionary or an error message if an exception occurs
938 Retrieves a COSArray from the dictionary using the specified key. @param key the key to look up in the dictionary @return the COSArray associated with the key, or null if not found or not a COSArray
939 Retrieves a COSStream by key. @param key the dictionary key for the stream @return COSStream object or null if not found
940 Retrieves a COSDictionary by key. @param key the dictionary key to search for @return COSDictionary object or null if not found
941 Retrieves a COSName from the dictionary using a given key. @param key the key to look up in the dictionary @return COSName object if found, otherwise null
942 Retrieves an object from the dictionary using primary and secondary keys. @param firstKey primary key to search @param secondKey secondary key if primary is not found @return COSBase object or null if neither key exists
943 Initializes a Matrix from a COSArray. @param array COSArray containing matrix values
944 Retrieves the zoom level from a PDF array. @return zoom level as float, or -1 if not found
945 Sets default value for a COS object. @param value the default value to be set
946 Sets the value of the COS object. @param object the new value to set
947 Initializes a new choice field in an Acrobat form. @param acroForm the parent form containing this field
948 Constructs a new PDButton. @param acroForm parent form containing the button
949 Initializes a new PDAcroForm with a given document. @param doc the PDF document to associate with this form
950 Sets text color in PDF. @param textColor color to apply to text
951 Sets document contents from byte array. @param bytes content data as a byte array
952 Sets byte range for a PDF signature. @param range array of 4 integers defining the byte range
953 Retrieves a long value for a given key. @param key the dictionary key @param defaultValue default value if key not found or not a number @return long value associated with the key or default value
954 Writes a COS object to the output stream. @param key unique identifier for the COS object @param obj the COSBase object to write @throws IOException if an I/O error occurs
955 Sets rectangle differences for PDF content. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
956 Initializes a new PDTransparencyGroupAttributes with a transparency setting.
957 Sets an integer value in the dictionary. @param key the key to associate with the value @param value the integer value to store
958 Sets a string value for a given key in the dictionary. @param key the COSName key to associate with the value @param value the string value to store
959 Sets a PDF item with the given name and value. @param key the COSName key for the item @param value the string value to be converted to COSName
960 Sets an item in the dictionary with a given key and value. @param key string key to identify the item @param value COSBase value to store under the key
961 Sets a boolean value in the PDF document. @param key the key under which to store the boolean value @param value the boolean value to be stored
962 Sets a boolean value in the PDF document. @param key the key under which to store the boolean value @param value the boolean value to store
963 Sets an item with a given key and value. @param key the key for the item @param value the value to be set, can be null
964 Sets the Z value. @param z the new Z coordinate
965 Sets the Y coordinate. @param y new Y value to be set
966 Sets the x-coordinate value. @param x the new x-coordinate value
967 Sets the alternate color space. @param colorSpace the new color space to set
968 Sets the colorant name in the PDF array. @param name the new colorant name
969 Sets the base color space. @param base PDColorSpace object to be set as base
970 Sets the third value to a float. @param b the float value to be set
971 Sets the green value. @param g green component as float
972 Sets the radius value. @param r the radius to be set
973 Sets the alternate color space. @param cs the new PDColorSpace to set
974 Sets device attributes. @param attributes device attributes to set
975 Sets the font size. @param size the font size to apply
976 Sets default appearance string. @param da default appearance string to be set
977 Sets a long value in the dictionary. @param key the COSName key @param value the long value to set
978 Sets an option value. @param opt the option string to be set
979 Sets a float value in the dictionary under a specified key. @param key the key to store the float value under @param value the float value to be stored
980 Sets the encryption dictionary in the PDF trailer. @param encDictionary the encryption dictionary to be set
981 Clears the dictionary and associated arrays. If a parent dictionary exists, sets its item to null.
982 Initializes a new PDPageTree with an empty page structure. Sets up the root dictionary and initializes necessary items.
983 Sets the crop box for a PDF page. @param cropBox the new crop box dimensions or null to remove it
984 Initializes a PDF document catalog. @param doc the PDDocument to associate with this catalog
985 Sets document information. @param info PDDocumentInformation object containing metadata
986 Parses the next token from the source. @return Parsed object or null if end of stream is reached @throws IOException if an I/O error occurs
987 Updates parent entry and structure type for each dictionary in the array. @param kArray array of COSBase objects @param newParent new parent dictionary @param newStructureType optional new structure type name
988 Sets the document ID in the trailer. @param id array containing document identifier
989 Creates a COSStream from a dictionary and stream parameters. @param dictionary source dictionary for stream properties @param startPosition start position in the stream @param streamLength length of the stream @return created COSStream object @throws IOException if an I/O error occurs
990 Decrypts each element in the given COSArray. @param array COSArray to be decrypted @param objNum object number used in decryption @param genNum generation number used in decryption
991 Sets color at specified index. @param index position in the array @param colour PDGamma color object or null
992 Sets the upper-right Y coordinate of a rectangle. @param value the Y coordinate to be set
993 Initializes a new PDFontSetting with default values. Sets up a COSArray with null and a COSFloat of 1.
994 Initializes an FDFOptionElement with default empty strings.
995 Initializes a PDRange with default values. Sets range to [0, 1] and starting index to 0.
996 Prepares and returns a COSStream for cross-reference. @throws IOException if an I/O error occurs
997 Sets an array of float values. @param value array of floats to be set
998 Grows the list to a specified size by adding an object. @param size desired size of the list @param object object to be added until the desired size is reached
999 Adds a COSObjectable to the collection. @param object the COSObjectable to be added
1000 Returns an iterator over COSBase objects. @return Iterator of COSBase elements
1001 Retrieves a date from the dictionary using a specified key. @param key the key for the date value @return Calendar object representing the date, or null if not found or not a COSString
1002 Converts components to a COSArray. @return COSArray containing components, with patternName added if present
1003 Initializes a new PDDeviceN object with default COSArray setup.
1004 Initializes PDGamma with default zero values.
1005 Sets the upper-right X coordinate of the rectangle. @param value the new X coordinate value
1006 Sets the lower-left Y coordinate of a rectangle. @param value the Y coordinate value to set
1007 Sets the lower left X coordinate of the rectangle. @param value the new X coordinate value
1008 Sets the maximum value in the range array. @param max the maximum value to be set
1009 Sets the minimum value of the range. @param min the minimum value to be set
1010 Sets a string value at the specified index. @param index position in the array @param string value to be set; null is allowed
1011 Sets the name at a specified index. @param index position in the list @param name string to be converted and stored
1012 Sets an integer value at the specified index. @param index position in the array @param value integer to be stored
1013 Sets an object at a specific index. @param index position in the list @param object to be set at the index
1014 Writes object reference to standard output. @param obj COSBase object to write @throws IOException if writing fails
1015 Creates an image from a byte array. @param document PDF document to associate the image with @param byteArray image data in byte format @return PDImageXObject created from the byte array @throws IOException if there's an error processing the image data
1016 Sets the transformation matrix. @param transform AffineTransform object defining the matrix
1017 Initializes a PDTristimulus with float array. @param array containing up to 3 color values
1018 Initializes a PDTristimulus with zero values.
1019 Initializes a PDSeparation with default values.
1020 Constructs a PDPattern with given resources. @param resources PDResources object containing pattern resources
1021 Creates a default range array with specified float values. @return COSArray containing default range values
1022 Initializes a PDIndexed object with RGB color space.
1023 Retrieves the alternate color space. @return PDColorSpace object representing the alternate color space @throws IOException if an error occurs while creating the color space
1024 Converts an array of floats to a COSArray. @return COSArray containing COSFloat elements
1025 Wraps existing page content in a save/restore graphics state pair. @param page PDPage object to modify @throws IOException if an I/O error occurs
1026 Converts label map to COSDictionary. @return COSDictionary representing the labels
1027 Sets widget field flags. @param f flag values to set
1028 Sets clear field flags for a form field. @param ff flag values to be set
1029 Sets field flags. @param ff field flag values
1030 Sets field flags for a PDF form field. @param ff integer representing field flags
1031 Sets the value of a PDF form field. @param value the new value to set
1032 Sets the field value with type checking. @param value the value to set, can be List<String>, String, or COSObjectable @throws IOException if an unsupported type is provided
1033 Sets differences stream in FDF document. @param diff COSStream containing differences data
1034 Sets the ID for the FDF document. @param id COSArray containing the ID data
1035 Sets annotation coordinates. @param coords array of coordinate points
1036 Sets the interior color of an annotation. @param color the new interior color or null for no color
1037 Sets the interior color of an annotation. @param color Color object representing the new interior color
1038 Sets the vertices for an annotation. @param vertices array of vertex coordinates
1039 Sets the interior color of an annotation. @param color the new interior color, or null to clear it
1040 Sets the vertices for annotation. @param vertices array of vertex coordinates
1041 Sets the interior color of an annotation. @param color Color object representing the new interior color
1042 Sets the line coordinates. @param line array of float values representing line coordinates
1043 Sets widget field flags. @param ff field flag integer value
1044 Sets clear widget field flags. @param ff flag values to set
1045 Sets rich text content for a form field. @param rv COSStream containing rich text data
1046 Sets the transformation matrix in a PDF dictionary. @param matrix 3x3 transformation matrix
1047 Sets the gamma value for an image. @param gamma PDGamma object representing the gamma correction
1048 Sets the gamma value in the dictionary. @param value the gamma value to be set
1049 Sets the character set for encoding. @param charSet character encoding string to be set
1050 Sets the font bounding box. @param rect rectangle defining the bounding box or null to clear it
1051 Sets the font stretch for a PDF document. @param fontStretch the desired font stretch value as a string
1052 Sets the font family. @param fontFamily name of the font family to set
1053 Sets the font name in the dictionary. @param fontName the name of the font to set
1054 Retrieves options from a PDF field. @return List of option strings or empty list if none found
1055 Initializes a new font descriptor dictionary. Sets the type to "FontDescriptor".
1056 Initializes a new PDFont object with default settings.
1057 Sets the "after" attribute in the dictionary. @param after value to be set
1058 Sets the "before" attribute in the dictionary. @param before value to be set
1059 Retrieves display values for options. @return List of option display values
1060 Sets callout coordinates for an annotation. @param callout float array containing x and y coordinates
1061 Sets rich text value for the field. @param rv rich text string to be set
1062 Sets the PDF filter. @param filter filter name as a string
1063 Sets the owner key in the dictionary. @param o byte array representing the owner key @throws IOException if an I/O error occurs
1064 Removes an attribute from the PDF object. @param attributeObject the attribute to remove
1065 Sets the cryptographic filter method. @param cfm the COSName representing the filter method
1066 Sets the line dash pattern. @param dashArray COSArray representing dash pattern
1067 Sets the interior color of an annotation. @param color Color object representing the new interior color
1068 Sets the range values for a PDF annotation. @param rangeValues COSArray containing the range values
1069 Sets user key in dictionary. @param u byte array representing the user key @throws IOException if an I/O error occurs
1070 Sets the K item in the COS object. @param k the value to set for the K item
1071 Removes a kid from the current object. @param object the kid to be removed @return true if the kid was successfully removed, false otherwise
1072 Sets the domain values for the COS object. @param domainValues array of domain values to be set
1073 Inserts a new kid before a reference kid in the PDF structure. @param newKid the new child to insert @param refKid the reference child before which to insert
1074 Sets encoding values for the PDF object. @param encodeValues array containing encoding information
1075 Sets the decode values for this object. @param decodeValues array of COSNumbers representing decode parameters
1076 Appends a child object to the existing kids. @param object the child object to append
1077 Initializes a PDF file specification. Sets up the dictionary with type 'Filespec'.
1078 Sets the owner encryption key. @param oe byte array representing the encryption key @throws IOException if an I/O error occurs
1079 Removes a class name from the PDF object. @param className the name of the class to remove
1080 Sets user encryption key. @param ue encryption key as byte array @throws IOException if an I/O error occurs
1081 Sets encryption recipients. @param recipients array of recipient byte arrays @throws IOException if an I/O error occurs
1082 Sets rich contents string. @param rc rich content to be set
1083 Sets the stream filter name in the dictionary. @param streamFilterName the filter name to be set
1084 Sets the annotation's color. @param c Color object to set; null resets color
1085 Sets the string filter name in the dictionary. @param stringFilterName the COSName to use as the string filter
1086 Sets permissions using byte array. @param perms byte array representing permissions @throws IOException if an I/O error occurs
1087 Initializes a PDComplexFileSpecification from a dictionary. @param dict the COSDictionary to initialize with, or null for default settings
1088 Removes V4 and V5 filters from the dictionary.
1089 Initializes a new FDF annotation. Sets up the base dictionary with type as ANNOT.
1090 Grows the collection to the specified size. @param size target size of the collection
1091 Initializes a PDPattern with specified resources and color space. @param resources PDResources object containing pattern resources @param colorSpace PDColorSpace for the pattern
1092 Sets the change formats. @param changeXs array of number format dictionaries
1093 Sets the areas for number formatting. @param areas array of PDNumberFormatDictionary objects
1094 Sets the distances array in the COS object. @param distances array of PDNumberFormatDictionary objects
1095 Clones a PDF object. @param src source PDF object to clone @param dstParent parent of the cloned object @param currentPageDict current page dictionary context @return cloned PDF object or original if not an array/dictionary
1096 Sets the angles for a PDF number format. @param angles array of PDNumberFormatDictionary objects representing angles
1097 Retrieves the text color from a PDF object. @return PDColor representing the text color
1098 Sets line slope dictionaries. @param lineSloaps array of PDNumberFormatDictionary objects
1099 Sets the Y-axis changes. @param changeYs array of PDNumberFormatDictionary objects
1100 Sets the range for a specific component in a PDF stream. @param range the PDRange object defining the min and max values @param n the index of the component to set the range for
1101 Sets the interior color of the PDF element. @param ic PDColor object representing the new interior color
1102 Retrieves color or four colors based on name. @param name key for the color array in COSObject @return PDGamma or PDFourColours object, or null if not found
1103 Sets the first page in the document. @param page PDPage object to be set as the first page
1104 Sets the tint transformation function. @param tint PDFunction representing the tint transformation
1105 Sets the tint transformation function. @param tint PDFunction representing the tint transform
1106 Sets the font for text rendering. @param font PDFont object to be used for text
1107 Creates an image object from an input stream. @param document PDF document to associate the image with @param stream input stream containing image data @return PDImageXObject created from the stream @throws IOException if an I/O error occurs
1108 Retrieves the B-range from a PDF dictionary. @return PDRange object representing the B-range or default if not set
1109 Retrieves a range from the dictionary. @return PDRange object representing the range
1110 Sets text color in PDF. @param textColor color to apply to text
1111 Sets the background color. @param c PDColor object representing the new background color
1112 Sets the border color of a PDF element. @param c PDColor object representing the new border color
1113 Sets the interior color. @param ic PDColor object representing the new interior color
1114 Sets the interior color of a PDF element. @param ic PDColor object representing the new interior color
1115 Sets the interior color of the PDF element. @param ic PDColor object representing the new interior color
1116 Sets the color of the object. @param c PDColor object representing the color to set
1117 Sets the guide line color in the PDF document. @param color PDColor object representing the new guide line color
1118 Sets line dash pattern. @param dashPattern line dash pattern to apply
1119 Builds glyph widths for CID font. @param cidFont COSDictionary to store width data @throws IOException if an I/O error occurs
1120 Retrieves the range for a specific component. @param n index of the component @return PDRange object representing the range
1121 Initializes a PDICCBased object with a document. @param doc the PDDocument to associate with this ICCBased object
1122 Retrieves separation colorants from PDF resources. @param resources PDF document resources @return Map of colorant names to PDSeparation objects @throws IOException if an I/O error occurs
1123 Retrieves date from PDF dictionary using key. @param key PDF key as string @return Calendar object representing the date
1124 Parses the PDF trailer and initializes the document. @throws IOException if an I/O error occurs or root object is missing
1125 Sets the value of the COS object. @param value new value to be set
1126 Retrieves or sets the guideline color. @return PDColor object representing the guideline color
1127 Retrieves the starting point ending style of an annotation. @return The name of the starting point ending style or LE_NONE if not set
1128 Sets the horizontal offset for captions. @param offset the horizontal offset value to set
1129 Sets the vertical offset for captions. @param offset the vertical offset value
1130 Sets a cryptographic filter dictionary. @param cryptFilterName name of the cryptographic filter @param cryptFilterDictionary dictionary containing filter settings
1131 Adds an OID to the document's dictionary. @param oid byte array representing the OID to add
1132 Adds an issuer to the document's issuer list. @param issuer byte array representing the issuer
1133 Sets the operating system in the document. @param os name of the operating system
1134 Adds a key usage extension. @param keyUsageExtension string containing '0', '1', or 'X' characters
1135 Sets the vertical offset for the annotation caption. @param offset the vertical offset value
1136 Sets the horizontal offset for annotation caption. @param offset the horizontal offset value
1137 Adds a subject to the document's metadata. @param subject byte array representing the subject
1138 Retrieves or creates document information. @return PDDocumentInformation object containing document metadata
1139 Retrieves the black point of the color space. @return PDTristimulus object representing the black point
1140 Retrieves threads from a PDF document. @return List of PDThread objects representing threads in the document
1141 Retrieves the whitepoint as a tristimulus value. @return PDTristimulus object representing the whitepoint
1142 Retrieves date from COSName with default. @param key dictionary key for the date @param defaultValue fallback date if not found @return Calendar object or provided default
1143 Retrieves the creation date of the document. @return Calendar object representing the creation date
1144 Retrieves the modification date of the document. @return Calendar representing the modification date
1145 Retrieves the creation date of the annotation. @return Calendar object representing the creation date @throws IOException if an I/O error occurs while accessing the data
1146 Retrieves the creation date of the PDF document. @return Calendar object representing the creation date or null if not set
1147 Retrieves the sign date from the dictionary. @return Calendar object representing the sign date or null if not present
1148 Writes an Operator object to the output stream. @param op the Operator object to be written @throws IOException if an I/O error occurs
1149 Adds a user property to the document. @param userProperty the property to add
1150 Retrieves child dictionaries from a PDF node. @param node parent dictionary node @return list of COSDictionary objects representing children
1151 Retrieves or creates the gamma array. @return PDGamma object representing the gamma values
1152 Sets the upper limit for a node. @param upper the new upper limit value or null to clear it
1153 Retrieves or creates additional actions for the page. @return PDPageAdditionalActions object containing page actions
1154 Initializes a PDDocumentNameDictionary from a document catalog. @param cat the document catalog to extract or create name dictionary from
1155 Adds an output intent to the document. @param outputIntent the PDOutputIntent object to add
1156 Retrieves additional actions from the document catalog. @return PDDocumentCatalogAdditionalActions object
1157 Sets the lower limit for a node. @param lower the new lower limit value or null to clear it
1158 Sets the annotation's bounding rectangle. @param rectangle PDRectangle defining the new bounds
1159 Sets the end style of an annotation line. @param style the end style to apply; null defaults to LE_NONE
1160 Sets the mapping name in the dictionary. @param mappingName the name to be mapped
1161 Sets an alternate field name. @param alternateFieldName the alternate field name to set
1162 Sets the partial name for a dictionary entry. @param name partial name to be set @throws IllegalArgumentException if name contains a period
1163 Sets default value for a COS object. @param value the default value to be set
1164 Sets default appearance for annotations. @param daValue default appearance string value
1165 Sets the document's title. @param title new title for the document
1166 Sets contact information. @param contactInfo new contact info string
1167 Sets the reason for an action. @param reason the reason string to be set
1168 Sets the document's location. @param location the location string to set
1169 Sets the name in the dictionary. @param name the new name to set
1170 Sets the URL in the dictionary. @param url the URL to be stored
1171 Sets the URL in the dictionary. @param url the URL to be stored
1172 Sets the date in the dictionary. @param date string representation of the date to be set
1173 Sets the value for a COS object. @param value the new string value to set @throws IOException if an I/O error occurs during setting the value
1174 Sets an alternate caption. @param caption the new caption to set
1175 Sets the normal caption text. @param caption the caption string to be set
1176 Sets the state model. @param stateModel the state model to set
1177 Sets the state of the COS object. @param state new state value to be set
1178 Sets the subject of a PDF document. @param subj the subject string to be set
1179 Sets the title of the popup. @param t the new title string
1180 Sets the default style string in the COS object. @param defaultStyleString the style string to be set
1181 Sets default appearance for PDF form fields. @param daValue default appearance string value
1182 Sets the annotation name. @param nm the new annotation name
1183 Sets the modified date of the PDF document. @param m new modified date string
1184 Sets the contents of the dictionary. @param value the content string to be set
1185 Sets execution parameter. @param param parameter value to be set
1186 Sets the operation type. @param op the operation string to be set
1187 Sets the directory path. @param dir directory path to be set
1188 Sets the rollover caption. @param caption text to display on rollover
1189 Sets the value of the COS object. @param value new value to be set @throws IOException if an I/O error occurs
1190 Sets default value for a field. @param value the default value to be set
1191 Sets default appearance for annotations. @param daValue default appearance string value
1192 Sets document flags. @param flags integer representing document flags
1193 Sets flags for clearing widget fields. @param ff flag values to be set
1194 Sets widget field flags. @param ff flag values to be set
1195 Sets widget field flags. @param f flag value to be set
1196 Sets clear field flags. @param ff flag value to set
1197 Sets field flags. @param ff flag values to be set
1198 Sets field flags. @param ff integer representing field flags
1199 Sets the rotation of an annotation. @param rotation angle in degrees (0, 90, 180, or 270)
1200 Sets text justification. @param justification alignment type: "centered", "right", or default (left)
1201 Sets the current page number. @param page the page number to set
1202 Sets document permissions. @param permissions bitmask representing permissions
1203 Sets the revision number in the dictionary. @param revision the new revision value to set
1204 Sets the length of the dictionary. @param length the new length value to be set
1205 Sets the document version. @param version the new version number
1206 Sets the length of the cryptographic filter. @param length the new length value to be set
1207 Sets the next key in the parent tree. @param parentTreeNextkey the value to be set for PARENT_TREE_NEXT_KEY
1208 Sets the revision number for the document. @param revisionNumber non-negative integer representing the revision
1209 Sets the MCID (Marked Content Identifier) for the COS object. @param mcid unique identifier for marked content
1210 Sets bits per sample. @param bps number of bits per sample
1211 Sets the starting index for pagination. @param start positive integer representing the start index
1212 Constructs a PDPageTree from a COSDictionary. @param root the root dictionary of the page tree @param document the PDDocument containing this page tree @throws IllegalArgumentException if root is null
1213 Sets the page rotation. @param rotation degrees to rotate the page (0, 90, 180, or 270)
1214 Sets the structure parents attribute. @param structParents integer value representing parent structures
1215 Sets an integer value in a dictionary within the document. @param embeddedDictionary name of the dictionary to modify @param key key under which to store the integer @param value integer value to set
1216 Sets an integer value in a PDF dictionary using a string key. @param key the string key for the value @param value the integer value to be stored
1217 Sets the scale ratio for the PDF object. @param scaleRatio string representing the scale ratio to be set
1218 Sets the filename in PDF parameters. @param file name of the file to be set
1219 Sets font widths based on glyph metrics. @param font the font dictionary to update @param glyphList mapping of glyph names to Unicode @throws IOException if an I/O error occurs
1220 Sets the annotation's name. @param name the name to be assigned to the annotation
1221 Sets the URI for an action. @param uri the uniform resource identifier to set
1222 Sets the file description. @param description description text to be set
1223 Sets the file path in the PDF document. @param file path to the file
1224 Sets the Unicode filename. @param file Unicode filename to be set
1225 Sets or removes the prefix. @param prefix new prefix value or null to remove
1226 Sets the document producer. @param producer name of the producer
1227 Sets the document's creator. @param creator name of the document creator
1228 Sets document keywords. @param keywords comma-separated list of keywords
1229 Sets the document's subject. @param subject the subject to be set
1230 Sets the document's author. @param author name of the author to be set
1231 Sets the document's title. @param title new title for the document
1232 Sets the document's language. @param language ISO 639-1 language code
1233 Sets a string value in the embedded dictionary. @param embedded key for the embedded dictionary @param key dictionary key to set the value for @param value string value to be set
1234 Sets a string value in the PDF document. @param key the key under which to store the value @param value the string value to store
1235 Sets the element identifier. @param id unique identifier string
1236 Sets a date value in the PDF document. @param key the key under which to store the date @param date the Calendar object representing the date
1237 Sets the transition motion. @param motion PDTransitionMotion object representing the motion effect
1238 Sets the transition dimension. @param dimension the PDTransitionDimension to be set
1239 Creates a new PDTransition with the specified style. @param style transition effect style
1240 Sets the name of the PDF document. @param name the new name to set
1241 Initializes a new instance of PDNumberFormatDictionary. Sets up the number format dictionary with type attribute.
1242 Sets the subtype of the COS object. @param subtype the subtype to be set
1243 Sets the title of the document. @param title the new title to set
1244 Sets the document's language. @param language ISO 639-1 language code
1245 Sets an alternate description. @param alternateDescription alternative description text
1246 Sets the value of the "P" entry in the COS dictionary. @param p the new value for the "P" entry
1247 Sets the "O" string in the action. @param o the string value to be set
1248 Sets the "D" attribute in the action. @param d value to be set for the "D" attribute
1249 Sets the file name. @param f file name to be set
1250 Sets the JavaScript action. @param sAction JavaScript code to be executed
1251 Initializes PDOptionalContentProperties with default settings.
1252 Sets the name in the dictionary. @param name the name to be set
1253 Sets the name attribute in the reference. @param name the new name value to set
1254 Sets the partial field name. @param partial the partial name to be set
1255 Sets the target string for the PDF element. @param target the target URL or identifier
1256 Sets the document status. @param status new status value to set
1257 Sets the state model. @param stateModel the state model to set
1258 Sets the state of an annotation. @param state new state value to be set
1259 Sets the caption style. @param captionStyle the new caption style as a string
1260 Sets the default annotation style. @param style the style to be applied
1261 Sets default appearance for annotation. @param appearance string defining the appearance
1262 Sets the annotation symbol. @param symbol type of symbol to set
1263 Sets the document's subject. @param subject the subject to be set
1264 Sets the title of an annotation. @param title the new title for the annotation
1265 Sets the contents of an annotation. @param contents text to be set in the annotation
1266 Sets the name of an annotation. @param name the new name to set
1267 Sets the modification date of an annotation. @param date the new modification date as a string
1268 Sets the actual text of a PDF annotation. @param actualText the text to be displayed for the annotation
1269 Sets the expanded form of a PDF annotation. @param expandedForm the expanded text to be set
1270 Sets the filename in the dictionary. @param filename the name of the file to be set
1271 Initializes a new PDMeasureDictionary with a COSDictionary.
1272 Constructs an instance of FDFAnnotationTextMarkup.
1273 Constructs a new text annotation. Initializes the annotation subtype to "Text".
1274 Initializes a new FDFAnnotationStamp with a specific subtype.
1275 Constructs a new square annotation. Initializes the annotation subtype to "Square".
1276 Constructs a new FDF annotation sound. Initializes the annotation with the subtype "Sound".
1277 Constructs a new polyline annotation. Initializes the annotation with the subtype "PolyLine".
1278 Constructs a new polygon annotation. Initializes the annotation with subtype "Polygon".
1279 Initializes a new FDF annotation link. Sets the subtype to "Link".
1280 Constructs a new line annotation. Sets the subtype to "Line".
1281 Initializes an ink annotation.
1282 Initializes a new free text annotation.
1283 Constructs a new circle annotation. Initializes the annotation name to "Circle".
1284 Constructs a new FDFAnnotationCaret. Initializes the annotation subtype to "Caret".
1285 Removes an objectable from kids list. @param objectable the object to remove @return true if removed, false otherwise
1286 Inserts a COSObjectable before another object. @param newKid the object to insert @param refKid reference object to insert before
1287 Appends a COSObjectable's COSObject to the kids list. @param objectable the COSObjectable to append, ignored if null
1288 Creates a PDFileSpecification from a COSBase object. @param base the underlying COSBase object @return PDFileSpecification or null if base is null @throws IOException if base type is unknown
1289 Retrieves the document catalog. @return PDDocumentCatalog object representing the document's catalog
1290 Constructs a new PDDocument using an in-memory stream cache.
1291 Parses PDF to get width. @throws IOException if parsing fails @return width as float
1292 Retrieves the bounding box of a glyph. @return PDRectangle representing the glyph's bounds or null if not found
1293 Parses input and returns a list of tokens. @return List containing parsed objects or an empty list if no tokens found @throws IOException if an I/O error occurs during parsing
1294 Merges content from one object to another. @param base source object containing data to merge @param target destination object to receive merged data @throws IOException if an I/O error occurs during merging
1295 Constructs a new file attachment annotation. Initializes the annotation with the subtype "FileAttachment".
1296 Builds vertical metrics for CID font. @param cidFont CID font dictionary to update @throws IOException if an I/O error occurs
1297 Constructs a new instance of PDSimpleFont.
1298 Draws a basic ellipse using specified bounds. @param left x-coordinate of the left boundary @param bottom y-coordinate of the bottom boundary @param right x-coordinate of the right boundary @param top y-coordinate of the top boundary
1299 Adds corner curl effect to path. @param anglePrev previous angle in radians @param angleCur current angle in radians @param radius curvature radius @param cx center x-coordinate @param cy center y-coordinate @param alpha rotation adjustment in radians @param alphaPrev previous rotation adjustment in radians @param addMoveTo whether to add a move-to command @throws IOException if an I/O error occurs
1300 Creates an image object from a BufferedImage. @param document PDF document to add the image to @param image source BufferedImage @return PDImageXObject representing the image @throws IOException if there is an I/O error
1301 Retrieves or creates a PDF border array. @return COSArray representing the border, defaulting to [0 0 1] if none exists
1302 Constructs a PDListBox associated with a PDAcroForm. @param acroForm the form to which this list box belongs
1303 Creates a combo box within an Acrobat form. @param acroForm the parent Acrobat form
1304 Constructs a PDCheckBox associated with a PDAcroForm. @param acroForm the form to which this checkbox belongs
1305 Sets uniform differences for all sides of a rectangle. @param difference value to be applied uniformly to all four sides
1306 Sets uniform differences for all sides of a rectangle. @param difference the uniform difference value to apply
1307 Sets uniform differences for all sides of a rectangle. @param difference the same value applied to all four sides
1308 Creates a new annotation widget for a PDF form field. @param field dictionary representing the form field
1309 Constructs an unknown annotation from a COS dictionary. @param dic dictionary containing annotation data
1310 Constructs a PDAnnotationPopup from a COSDictionary. @param field dictionary representing the popup annotation
1311 Constructs a new PDAnnotationMarkup from a COSDictionary. @param dict the dictionary containing annotation properties
1312 Creates a new annotation link from a COS dictionary. @param field COS dictionary containing annotation data
1313 Constructs a new PDF annotation widget. Sets the subtype to "Widget" in the COS object.
1314 Creates a new annotation popup. Sets the subtype to "Popup" in the COS object.
1315 Constructs a new PDAnnotationMarkup instance.
1316 Creates a new annotation link. Initializes the COS object with the subtype "Link".
1317 Sets non-stroking alpha constant. @param alpha transparency value (0.0 to 1.0)
1318 Sets the stroking alpha constant. @param alpha the alpha value to set
1319 Sets the smoothness tolerance. @param smoothness the smoothness value to set
1320 Sets the flatness tolerance for rendering. @param flatness the desired flatness value
1321 Sets the miter limit for line joins. @param miterLimit the miter limit value to set
1322 Sets the line width. @param width the desired line width
1323 Parses a COSDictionary to create a COSStream. @param dic dictionary containing stream data @return COSStream object @throws IOException if parsing fails or length is invalid
1324 Sets the CYX value in the COS object. @param cyx the float value to be set
1325 Sets the width of an element. @param w the width value to set
1326 Sets the top index for an object. @param topIndex the new top index value or null to remove it
1327 Sets field flags in the dictionary. @param flags integer representing field flags
1328 Sets the Q value in the dictionary. @param q the Q value to be set
1329 Sets the open count of the PDF document. @param openCount number of times the document has been opened
1330 Sets whether timestamp is required. @param flag true if timestamp is required, false otherwise
1331 Sets the page mode. @param p page mode value (0-3) @throws IllegalArgumentException if p is out of range
1332 Sets the rotation of the PDF page. @param rotation angle in degrees (0, 90, 180, or 270)
1333 Sets the Q value in the COS object. @param q the new Q value to be set
1334 Sets the structure parent of the PDF object. @param structParent parent structure index
1335 Sets annotation flags. @param flags integer representing annotation flags
1336 Sets annotation index; removes annotation if index is negative. @param index annotation index to set
1337 Sets the page number in a dictionary. @param pageNumber the new page number to set
1338 Sets action flags. @param flags integer representing action properties
1339 Sets the maximum length. @param maxLen the new maximum length value
1340 Sets action flags. @param flags integer representing action flags
1341 Sets line join style in dictionary. @param style join style to be set
1342 Sets the line cap style. @param style line cap style to be applied
1343 Sets bits per coordinate. @param bitsPerCoordinate number of bits for each coordinate
1344 Sets bits per color component. @param bitsPerComponent number of bits for each color component
1345 Sets the number of vertices per row. @param verticesPerRow the number of vertices to be set
1346 Sets the number of bits per flag in the COS object. @param bitsPerFlag the number of bits to be set
1347 Sets the shading type in the dictionary. @param shadingType the type of shading to apply
1348 Sets the tiling type. @param tilingType the tiling type to be set
1349 Sets the paint type. @param paintType the new paint type to be set
1350 Sets the pattern type. @param patternType the pattern type to be set
1351 Sets the paint type. @param paintType the new paint type to be set
1352 Sets the overprint mode. @param overprintMode the new overprint mode or null to remove
1353 Sets the Q value in the COS object. @param q the value to be set
1354 Sets a long value in the PDF dictionary. @param key the key under which to store the value @param value the long value to store
1355 Writes the PDF document trailer. @param doc the COSDocument to write the trailer for @throws IOException if an I/O error occurs
1356 Sets constant opacity. @param ca opacity value (0.0 to 1.0)
1357 Sets the leader line offset length. @param leaderLineOffsetLength the new offset length for leader lines
1358 Sets the leader line extension length. @param leaderLineExtensionLength the new extension length value
1359 Sets the length of the leader line. @param leaderLineLength the desired length of the leader line
1360 Sets the audio volume. @param volume float value between -1.0 and 1.0
1361 Sets the Y-axis step value. @param yStep the step size on the Y-axis
1362 Sets the X step value. @param xStep the new X step value to set
1363 Sets the missing width value in the dictionary. @param missingWidth the width to be set
1364 Sets the maximum width. @param maxWidth the new maximum width value
1365 Sets the average width of characters. @param averageWidth the average width value to be set
1366 Sets stem height for font. @param stemH height of stems in font metrics
1367 Sets vertical stem width. @param stemV vertical stem width value
1368 Sets the X height of the font. @param xHeight new X height value
1369 Sets the capital height of the font. @param capHeight the new capital height value
1370 Sets the leading value for text. @param leading spacing between lines of text
1371 Sets the descent value. @param descent font metric value
1372 Sets the ascent value in the dictionary. @param ascent the ascent value to be set
1373 Sets the italic angle of the font. @param angle the italic angle value to be set
1374 Sets the font weight. @param fontWeight numeric value representing the font weight
1375 Sets the leader line offset for annotation. @param leaderOffset the new leader line offset value
1376 Sets the leader extend value. @param leaderExtend the new leader extend value
1377 Sets the leader line length. @param leaderLength the desired length of the leader line
1378 Sets the opacity of an annotation. @param opacity the new opacity value (0.0 to 1.0)
1379 Sets the guideline width. @param width the new width value
1380 Sets the user unit for the PDF page. @param userUnit scaling factor for user space coordinates
1381 Sets a float value in the PDF document. @param key the key associated with the float value @param value the float value to be stored
1382 Sets the minimum required revision level. @param revision the minimum revision number to be set
1383 Sets the document revision number. @param revision the new revision number
1384 Sets the minimum required capability. @param minimumRequiredCapability the capability value to set
1385 Sets the starting style of a line annotation. @param style the starting style string, defaults to LE_NONE if null
1386 Constructs a new outline from the given dictionary. @param dic COSDictionary representing the outline structure
1387 Sets the URL type in the dictionary. @param urlType the type of URL to be set
1388 Sets Windows launch parameters. @param win PDWindowsLaunchParams object containing parameters
1389 Sets file specification in PDF document. @param fs File specification to be set
1390 Sets the file specification for an action. @param fs File specification to be set
1391 Sets the destination for a PDF action. @param d the destination to set
1392 Sets the target directory for PDF actions. @param targetDirectory PDTargetDirectory object representing the target directory
1393 Sets the file specification for an annotation. @param fs PDFileSpecification object representing the file
1394 Sets the destination for navigation actions. @param d PDDestination object representing the target destination
1395 Sets font setting in dictionary. @param fs PDFontSetting object to be applied
1396 Sets a new function and clears the function array. @param newFunction the new PDFunction to set
1397 Sets PDF resources. @param resources PDF resource object to be set
1398 Sets the shading resource. @param shadingResources PDShading object to be set
1399 Sets extended graphics state. @param extendedGraphicsState the new graphics state to set
1400 Sets the file specification for an action. @param fs PDFileSpecification object representing the file
1401 Sets the black point for color calibration. @param blackpoint PDTristimulus representing the black point values
1402 Sets the CID set in the dictionary. @param stream PDStream containing CID set data
1403 Sets the font file 3 for the PDF document. @param stream PDStream containing the font data
1404 Sets TrueType font file stream. @param ttfStream PDStream containing TTF font data
1405 Sets the font file stream. @param type1Stream PDF stream containing the font data
1406 Sets the template reference. @param tRef FDFNamedPageReference to be set
1407 Sets page information. @param info FDFPageInfo object containing page details
1408 Sets the file specification. @param fs PDFileSpecification object representing the file details
1409 Sets the fractional space to allocate. @param space PDRange representing the space allocation
1410 Sets additional actions for a PDF field. @param aa PDAdditionalActions object containing actions
1411 Sets an action for the form field. @param a PDAction to be associated with the field
1412 Sets the icon fitting strategy. @param fit FDFIconFit object defining how the icon should be fitted
1413 Sets the appearance stream reference. @param ref FDFNamedPageReference to be set
1414 Sets the white point for color calibration. @param whitepoint tristimulus value representing the white point
1415 Sets the file specification for an action. @param fs PDFileSpecification object to be set
1416 Sets the file specification for an action. @param fs the file specification to be set
1417 Sets the F action in the document. @param action the action to be associated with key 'F'
1418 Sets the rectangle difference. @param rd PDRectangle representing the rectangle difference
1419 Sets border effect dictionary. @param be border effect dictionary to apply
1420 Sets the file specification. @param file PDFileSpecification object to be set
1421 Sets the current page. @param page PDPage object to be set
1422 Sets optional content properties. @param oc PDPropertyList object representing optional content
1423 Sets the appearance dictionary. @param appearance the PDAppearanceDictionary to set
1424 Sets a named destination in the document. @param dest PDNamedDestination object to set or null to remove
1425 Sets the target directory. @param targetDirectory PDTargetDirectory object to be set
1426 Sets the action associated with key 'C'. @param c PDAction to be set
1427 Sets the action associated with key 'O'. @param o PDAction to be set
1428 Sets the action for the 'C' key in the actions dictionary. @param c PDAction to be set
1429 Sets the V action in the PDF document. @param v PDAction object to be set
1430 Sets an action to be performed. @param f PDAction to be set
1431 Sets the action associated with key 'K'. @param k PDAction to be set
1432 Sets the default action. @param dp Default action to be set
1433 Sets the WP action. @param wp PDAction object to be set
1434 Sets the DS action. @param ds PDAction object to be set
1435 Sets the webservice action. @param ws PDAction representing the webservice
1436 Sets the WC action in the PDF document. @param wc PDAction object to be set
1437 Sets the PDAction for the PI key. @param pi the PDAction to be set
1438 Sets the PV action. @param pv PDAction object to be set
1439 Sets the page closure action. @param pc PDAction to be set as the page closure action
1440 Sets the Purchase Order action. @param po PDAction object representing the purchase order
1441 Sets the action for the BL key. @param bl PDAction object to be set
1442 Sets the action associated with the FO key. @param fo PDAction object to be set
1443 Sets the action associated with key 'U'. @param u PDAction object to be set
1444 Sets an action associated with the 'D' key. @param d PDAction object to be set
1445 Sets action X in PDF document. @param x PDAction to be set
1446 Sets an action associated with key 'E'. @param e PDAction object to be set
1447 Sets the appearance dictionary for the field. @param ap PDAppearanceDictionary to be set
1448 Sets an action for the PDF object. @param action PDAction to be associated with the object
1449 Sets the catalog in the PDF document trailer. @param cat FDFCatalog to be set as the root of the document
1450 Sets the file specification in the FDF. @param fs PDFileSpecification object to be set
1451 Sets the structure tree root. @param treeRoot PDStructureTreeRoot object to be set
1452 Sets the URI dictionary in the root. @param uri PDURIDictionary to be set
1453 Sets PDF mark information. @param markInfo PDMarkInfo object containing mark details
1454 Sets document names dictionary. @param names dictionary containing document names
1455 Sets additional actions for the document. @param actions Additional actions to be set
1456 Sets the open action for the document. @param action the action to be performed when the document is opened
1457 Sets metadata for the document. @param meta PDMetadata object containing metadata details
1458 Sets the document outline. @param outlines PDDocumentOutline object to be set
1459 Sets viewer preferences in PDF document. @param prefs PDViewerPreferences object containing settings
1460 Sets the AcroForm in the document. @param acroForm the PDAcroForm to set
1461 Sets an item in the dictionary using a string key. @param key the string key for the item @param value the COSObjectable value to be stored
1462 Decrypts a PDF object. @param obj the object to decrypt @param objNum object number in the PDF @param genNum generation number of the object @return decrypted COSBase object
1463 Sets the end color using PDGamma. @param colour PDGamma object representing the color
1464 Sets page labels for a PDF document. @param labels PDPageLabels object containing page label settings
1465 Sets the start color using PDGamma. @param colour PDGamma object representing the color
1466 Sets the before color using PDGamma. @param colour PDGamma color to be set
1467 Creates a PDRectangle with dimensions matching the current object's width and height. @return PDRectangle object representing the retranslated rectangle
1468 Sets the lower limit for a range. @param lower the lower bound value as a string
1469 Sets the upper limit in a COSArray. @param upper the upper limit value as a String
1470 Sets the ending style of an annotation line. @param style the style to set or null for default
1471 Sets the starting style of a line annotation. @param style the starting style to set or null for no style
1472 Sets the line ending style for annotations. @param style the desired line ending style as a string
1473 Sets the starting style of a line annotation. @param style the style to apply; null defaults to LE_NONE
1474 Sets the endpoint style for a line annotation. @param style desired endpoint style or null for none
1475 Sets the starting style of a line annotation. @param style the starting style to set; defaults to LE_NONE if null
1476 Sets the after color. @param colour PDGamma color to be set
1477 Sets destination names tree in the document catalog. @param dests PDDestinationNameTreeNode to be set
1478 Sets embedded files in the document. @param ef node containing embedded files
1479 Sets JavaScript in the document. @param js PDJavascriptNameTreeNode object containing JavaScript
1480 Sets the signature in the PDF document. @param sig PDSignature object to be set
1481 Sets the FDF dictionary in the document's catalog. @param fdf the FDFDictionary to be set
1482 Sets the annotation's fringe rectangle. @param fringe PDRectangle defining the fringe area
1483 Sets the annotation's fringe rectangle. @param fringe PDRectangle defining the fringe area
1484 Sets the annotation's fringe rectangle. @param fringe PDRectangle defining the fringe area
1485 Sets the annotation's fringe rectangle. @param fringe PDRectangle defining the fringe area
1486 Sets border effect dictionary. @param be PDBorderEffectDictionary to apply
1487 Sets the border style of an annotation. @param bs PDBorderStyleDictionary defining the border style
1488 Sets the parent tree node. @param parentTree PDNumberTreeNode representing the parent tree
1489 Sets the PDF page. @param page PDPage object to be set
1490 Sets the parent structure node. @param structureNode the parent node to set
1491 Sets the current page. @param page PDPage object to be set
1492 Sets the referenced object. @param xobject the PDXObject to reference
1493 Sets the referenced object for an annotation. @param annotation the PDAnnotation to reference
1494 Sets the page in the document. @param page PDPage object to be set
1495 Adds an item to the resources dictionary. @param kind type of resource dictionary @param name key for the item @param object value to be added
1496 Sets the transition effect and duration for a PDF page. @param transition PDTransition object defining the visual effect @param duration float representing the transition duration in seconds
1497 Sets the transition effect for the page. @param transition PDTransition object defining the transition effect
1498 Sets additional actions for a PDF page. @param actions PDPageAdditionalActions object containing actions
1499 Sets metadata for the PDF document. @param meta PDMetadata object containing metadata details
1500 Sets the content stream for the PDF page. @param contents PDStream containing the page's content
1501 Sets the art box for a PDF page. @param artBox rectangle defining the art box boundaries
1502 Sets the trim box for the page. @param trimBox rectangle defining the trim box or null to remove it
1503 Sets the bleed box for a PDF page. @param bleedBox rectangle defining the bleed area or null to remove it
1504 Sets the media box for the page. @param mediaBox rectangle defining the page's dimensions
1505 Sets the resources for the page. @param resources PDResources object containing resources
1506 Creates a new PDF page with specified media box. @param mediaBox dimensions and position of the page
1507 Sets JavaScript for FDF document. @param js FDFJavaScript object to be set
1508 Initializes a new PDF document outline. Sets the "Type" entry in the COS object to "Outlines".
1509 Sets the border style dictionary. @param bs border style dictionary to apply
1510 Sets the previous URI action. @param pa PDActionURI object representing the URI action
1511 Initializes a new PDTypedDictionaryWrapper with a specified type. @param type the dictionary type as a string
1512 Sets or removes the style of a component. @param style the style to apply, or null to remove it
1513 Sets the trapped status. @param value must be "True", "False", or "Unknown"
1514 Sets the version of the document. @param version the version string to be set
1515 Sets the page layout for a PDF document. @param layout the desired page layout (e.g., single page, double page)
1516 Sets the page mode of the PDF document. @param mode the desired page mode (e.g., NONE, USE_OUTLINES)
1517 Sets the name value in the dictionary. @param key the key as a string @param value the value to set
1518 Sets an array of numbers in a COS dictionary. @param name key for the array in the dictionary @param values float array to be set
1519 Sets an array of names in the COS object. @param name key for the dictionary entry @param values array of string values to be converted to COSName
1520 Sets an array of strings in a COS dictionary. @param name key for the array in the dictionary @param values array of string values to set
1521 Sets whether to display document title. @param value true to display, false otherwise
1522 Sets whether to center the window. @param value true to center, false otherwise
1523 Sets whether to fit window to page. @param value true to fit window, false otherwise
1524 Sets the owner of the document. @param owner The name of the document owner
1525 Sets the preference to hide window UI. @param value true to hide, false to show
1526 Sets the toolbar visibility preference. @param value true to hide the toolbar, false to show it
1527 Sets the need appearances flag in the PDF document. @param value true to enable, false otherwise
1528 Sets trusted mode status. @param trustedMode true to enable trusted mode, false otherwise
1529 Sets whether to suppress non-embedded font warnings. @param noEmbedFontWarning flag to disable warnings
1530 Sets the pre-release flag in the dictionary. @param preRelease boolean indicating if it's a pre-release version
1531 Sets the "Open" flag in the COS object. @param open boolean value to set
1532 Sets the caption flag. @param cap boolean value to enable or disable caption
1533 Sets the mix flag in the action. @param mix boolean value to enable or disable mixing
1534 Sets the repeat flag for an action. @param repeat true to enable repeating, false otherwise
1535 Sets the action to be synchronous or asynchronous. @param synchronous true for synchronous, false for asynchronous
1536 Sets open mode for a document. @param value OpenMode specifying how to open the document
1537 Sets the open mode for a document. @param value the desired open mode (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
1538 Sets open mode for a document. @param value OpenMode specifying how to open the document
1539 Sets whether to hide the menu bar. @param value true to hide, false to show
1540 Initializes a new PDMarkedContentReference with an empty dictionary. Sets the "Type" entry in the dictionary to "MarkedContent".
1541 Initializes a new PDObjectReference with an empty dictionary.
1542 Sets the structure type of the COS object. @param structureType the new structure type to be set
1543 Sets the name in the dictionary. @param name the name to be set
1544 Sets the subtype of the PDF object. @param subtype the new subtype value to be set
1545 Initializes a new external data dictionary. Sets up the data dictionary with the type "ExData".
1546 Sets the style of the COSObject. @param s the new style value to be set
1547 Sets the highlighting mode for a link. @param highlightingMode valid modes: "N", "I", "O", "P", "T"
1548 Sets the name of the object. @param name new name to be set
1549 Sets the name of the COS object. @param name the new name to set
1550 Sets the intent of the COSObject. @param it the intent string to be set
1551 Sets the reply type of the COS object. @param rt reply type as a string
1552 Sets the highlight mode for annotations. @param mode the highlight mode to be applied
1553 Sets the caption positioning. @param captionPositioning the new caption positioning value
1554 Sets the line ending style. @param style the line ending style to apply
1555 Sets the attachment name. @param name new name for the attachment
1556 Sets the appearance state of the PDF object. @param as the appearance state name
1557 Sets the subtype of the PDF object. @param subType the subtype to be set
1558 Sets the subtype of an action. @param s the subtype string to be set
1559 Sets the type of the action. @param type the type to set for the action
1560 Initializes a new PDAbstractPattern with a pattern dictionary.
1561 Sets the scaling type. @param scale scaling type as a string
1562 Sets scaling option. @param option scaling option to apply
1563 Sets the encoding for the FDF document. @param encoding the encoding to be set
1564 Sets the version of the catalog. @param version the version string to be set
1565 Sets the icon name. @param icon the icon name to be set
1566 Sets the line ending style. @param style the line ending style to apply
1567 Sets the intent of the annotation. @param intent the purpose or type of the annotation
1568 Sets the sub-filter name. @param subfilter the sub-filter value to be set
1569 Sets the guideline style. @param style the guideline style to apply
1570 Initializes a PDStructureNode with a specified type. @param type node type identifier
1571 Sets the knockout flag in the dictionary. @param tk true to enable knockout, false otherwise
1572 Sets the destination for this action. @param dest PDDestination object representing the target location
1573 Sets the Alpha Source flag. @param alpha true to enable, false otherwise
1574 Sets non-stroking overprint control. @param op true to enable, false to disable
1575 Sets the structure element in the COS object. @param structureElement the PDStructureElement to be set
1576 Sets an action for this PDF object. @param action the action to be set
1577 Sets the destination for this action. @param dest PDDestination object representing the target location
1578 Sets the next sibling node in the outline. @param outlineNode the next sibling PDOutlineNode
1579 Sets the previous sibling node in an outline. @param outlineNode the new previous sibling node
1580 Sets the property build in the dictionary. @param propBuild PDPropBuild object to be set
1581 Sets the seed value certificate. @param certificate PDSeedValueCertificate to be set
1582 Sets application property in dictionary. @param app PDPropBuildDataDict object representing the application
1583 Sets publication security properties. @param pubSec PDPropBuildDataDict containing security settings
1584 Sets the property build data filter. @param filter PDPropBuildDataDict object to be used as a filter
1585 Sets the appearance stream for the down state. @param ap appearance stream to be set
1586 Sets the down appearance for a PDF annotation. @param entry appearance settings for the annotation
1587 Sets rollover appearance for a button. @param ap PDAppearanceStream object defining the appearance
1588 Sets rollover appearance for a PDAppearanceDictionary. @param entry PDAppearanceEntry to be set as the rollover appearance
1589 Sets normal appearance for an entry. @param entry PDAppearanceEntry to be set as normal appearance
1590 Sets the parent field of this terminal field. @param field the parent PDTerminalField object @throws IllegalArgumentException if the field shares a dictionary with its own widget
1591 Sets the border style of a PDF annotation. @param bs border style dictionary to apply
1592 Sets additional actions for annotation. @param actions PDAnnotationAdditionalActions object to be set
1593 Sets an action for a PDF object. @param action the PDAction to be set
1594 Sets appearance characteristics. @param appearanceCharacteristics dictionary containing appearance settings
1595 Sets the rectangle difference. @param rd PDRectangle representing the rectangle difference
1596 Sets the border effect for the PDF annotation. @param be PDBorderEffectDictionary specifying the border effect
1597 Sets the border effect dictionary. @param be border effect dictionary to apply
1598 Sets the border style of a PDF annotation. @param bs border style dictionary to apply
1599 Sets external data dictionary. @param externalData PDExternalDataDictionary to be set
1600 Sets the annotation in reply to another. @param irt PDAnnotation representing the annotation being replied to
1601 Sets the popup annotation. @param popup PDAnnotationPopup object to be associated
1602 Sets the normal appearance stream. @param ap PDAppearanceStream object to be set
1603 Sets the first child node of an outline. @param outlineNode the new first child node
1604 Sets the last child node in the outline. @param outlineNode the PDOutlineNode to be set as the last child
1605 Sets default resources. @param dr PDResources object to be set as default
1606 Sets stroking overprint control. @param op true to enable overprint, false otherwise
1607 Sets anti-aliasing preference. @param antiAlias true to enable anti-aliasing, false otherwise
1608 Sets the rename flag in the template. @param value boolean indicating whether renaming is enabled
1609 Sets whether annotations should scale to fit. @param value true to enable scaling, false otherwise
1610 Sets caption visibility. @param cap true to show caption, false to hide
1611 Sets metadata encryption flag. @param encryptMetaData true to enable metadata encryption, false otherwise
1612 Sets the volatile flag for a file. @param fileIsVolatile true if the file is volatile, false otherwise
1613 Sets the FD flag in the COS object. @param fd boolean value to set the FD flag
1614 Sets the "Open" status of the COS object. @param open boolean indicating whether the object is open or closed
1615 Sets whether to track mouse position. @param value true to enable tracking, false otherwise
1616 Sets the suspect status. @param suspect true if suspect, false otherwise
1617 Sets user properties flag. @param userProps true to enable, false to disable
1618 Sets the marked status. @param value true if marked, false otherwise
1619 Sets the rectangle for a PDF annotation. @param rect PDRectangle defining the bounds of the annotation
1620 Sets the current page in the document. @param page the PDPage to set as the current page
1621 Sets the previous thread bead. @param previous the previous bead to be set
1622 Sets the next thread bead in the document. @param next the next PDThreadBead object to link
1623 Sets the thread associated with this bead. @param thread PDThread object to be associated
1624 Sets thread information. @param info document information to be set
1625 Sets measurement dictionary. @param measure PDMeasureDictionary object to be set
1626 Sets the bounding box for the PDF object. @param rectangle PDRectangle representing the bounding box coordinates
1627 Sets additional actions for form field. @param actions PDFormFieldAdditionalActions object containing actions
1628 Sets the seed value for PDF encryption. @param sv PDSeedValue object containing the seed data
1629 Sets default signature value. @param value PDSignature object to be set as default
1630 Sets signature value. @param value PDSignature object to set @throws IOException if an I/O error occurs
1631 Sets XFA resource in the dictionary. @param xfa PDXFAResource object to be set
1632 Sets automatic stroke adjustment. @param sa true to enable, false otherwise
1633 Retrieves the endpoint style of a line annotation. @return endpoint style as a string, or LE_NONE if not specified
1634 Retrieves the type of the COS object. @return The type as a string or null if not found
1635 Retrieves the upper limit from a COSArray. @return Integer value of the upper limit or null if not found
1636 Retrieves the lower limit from a COSArray. @return Integer value of the lower limit or null if not found
1637 Retrieves or creates the range values array. @return COSArray containing range values, possibly newly created
1638 Retrieves or initializes the domain values. @return COSArray containing domain values, may be empty if not set
1639 Retrieves the size array from the COS object. @return COSArray representing the size or null if not present
1640 Retrieves decode array; uses default range values if not present. @return COSArray containing decode values or null if none available
1641 Retrieves an array of functions. @return COSArray containing function objects or null if not present
1642 Returns the COSArray representing bounds. Initializes from COS object if not already set. @return COSArray of bounds or null if not found
1643 Retrieves default value. @return List of default values as strings
1644 Retrieves value associated with COSName.V. @return List of strings representing the value
1645 Retrieves the Encode array from the COS object. @return COSArray representing the encode parameter or null if not set
1646 Retrieves the role map from a PDF document. @return Map containing role mappings or an empty map if not found
1647 Retrieves the scale ratio from the COS object. @return String representing the scale ratio or null if not found
1648 Retrieves the default style string from the COS object. @return default style string or null if not found
1649 Retrieves the mapping name from the dictionary. @return the mapping name as a string
1650 Retrieves alternate field name from dictionary. @return alternate field name as String
1651 Retrieves partial name from dictionary. @return Partial name as string or null if not found
1652 Retrieves the state model from the COS object. @return The state model as a string or null if not present.
1653 Retrieves the normal caption from the COS object. @return Normal caption as a string or null if not found
1654 Retrieves the rollover caption. @return The rollover caption string or null if not available.
1655 Retrieves alternate caption from PDF COS object. @return Alternate caption as a string or null if not present
1656 Retrieves the date string from the dictionary. @return Date string or null if not present
1657 Retrieves the operating system information from a PDF document. @return OS name as a String or empty string if not found
1658 Retrieves a map of page label indices and corresponding COSObjectable values. @return Unmodifiable map of integer indices to COSObjectable or null if array is invalid
1659 Retrieves subject DN information. @return List of maps containing subject DN attributes or null if not found
1660 Retrieves URL from dictionary. @return URL as string or null if not present
1661 Retrieves the name from the dictionary. @return Name as a String
1662 Retrieves location from dictionary. @return location string or null if not present
1663 Retrieves the reason from the dictionary. @return Reason string or null if not present
1664 Retrieves contact information from the dictionary. @return Contact information as a string or null if not available
1665 Retrieves the title from the COS object. @return The title as a string or null if not present
1666 Retrieves the URL from the dictionary. @return The URL as a string or null if not found.
1667 Retrieves the state from the COS object. @return The state as a string or null if not present
1668 Retrieves child nodes of the current node. @return List of PDNumberTreeNode objects representing children or null if none exist
1669 Retrieves child nodes from the current node. @return List of PDNameTreeNode objects representing children
1670 Retrieves additional actions for a form field. @return PDFormFieldAdditionalActions object or null if not present
1671 Retrieves the signature from the PDF dictionary. @return PDSignature object or null if not found
1672 Retrieves default signature from the COS object. @return PDSignature instance or null if not present
1673 Retrieves seed value from COS dictionary. @return PDSeedValue object or null if not found
1674 Retrieves measure dictionary from PDF. @return PDMeasureDictionary object or null if not present
1675 Retrieves document information from a thread. @return PDDocumentInformation object or null if not found
1676 Retrieves the first bead in the thread. @return PDThreadBead object or null if not found
1677 Retrieves thread information from bead. @return PDThread object or null if not found
1678 Retrieves the next bead in the thread. @return PDThreadBead object representing the next bead
1679 Retrieves the previous bead in the thread. @return PDThreadBead object representing the previous bead
1680 Retrieves a page from the document. @return PDPage object or null if not found
1681 Retrieves metadata from a PDF document. @return PDMetadata object or null if not available
1682 Retrieves metadata from the PDF page. @return PDMetadata object or null if no metadata is present
1683 Retrieves differences stream from FDF document. @return COSStream containing differences or null if not present
1684 Retrieves font file as PDStream. @return PDStream object containing font data or null if not found
1685 Retrieves font file 2 from dictionary. @return PDStream object or null if not found
1686 Retrieves the font file stream. @return PDStream of the font file or null if not found
1687 Retrieves viewport dictionaries from a PDF page. @return List of PDViewportDictionary objects or null if none found
1688 Retrieves thread beads from a PDF page. @return List of PDThreadBead objects representing thread beads
1689 Retrieves output intents from the PDF document. @return List of PDOutputIntent objects representing output intents
1690 Creates a PDAttributeObject based on the dictionary's owner type. @param dictionary COSDictionary containing attribute data @return PDAttributeObject instance or default if unknown type
1691 Retrieves the document ID from the trailer. @return COSArray containing the document ID or null if not found
1692 Retrieves a map of names from the PDF node. @throws IOException if an I/O error occurs or unexpected data is found @return unmodifiable map of names to values, or null if no names array exists
1693 Retrieves alternate icon as a form object. @return PDFormXObject representing the alternate icon or null if not present
1694 Retrieves the normal icon from a PDF form. @return PDFormXObject representing the normal icon, or null if not present
1695 Retrieves export values of options. @return List of option export values
1696 Retrieves the sound stream from the action. @return COSStream containing the sound data or null if not present
1697 Retrieves CID set stream from dictionary. @return PDStream object or null if not found
1698 Retrieves rollover icon from PDF form. @return PDFormXObject representing the rollover icon or null if not present
1699 Retrieves default resources from the PDF dictionary. @return PDResources object or null if not found
1700 Retrieves the subject of the document. @return The subject as a string or null if not set
1701 Retrieves default style string from COS object. @return default style string or null if not found
1702 Retrieves the name associated with the annotation. @return The name as a String, or null if not set.
1703 Retrieves the date from an annotation. @return Date string from the annotation or null if not present
1704 Gets expanded form from properties. @return Expanded form string or null if not available
1705 Retrieves alternate description from properties. @return alternate description as String or null if not available
1706 Retrieves the actual text from properties. @return Actual text as a String or null if not available
1707 Retrieves formatted value from COSObject. @return Formatted string value or null if not found
1708 Retrieves the actual text from the COS object. @return The actual text as a String or null if not present
1709 Retrieves the expanded form of the object. @return Expanded form as a string or null if not present
1710 Retrieves alternate description from COS object. @return Alternate description string or null if not present
1711 Retrieves the language attribute from the COS object. @return the language as a string or null if not set
1712 Retrieves the title from the COS object. @return The title as a string or null if not present
1713 Retrieves the element identifier. @return Identifier string or null if not found
1714 Retrieves file description from metadata. @return Description of the file as a String
1715 Retrieves the Unix filename. @return Unix filename as a string
1716 Retrieves the MAC value from the file system. @return MAC string or null if not found
1717 Retrieves DOS file information. @return DOS file string representation
1718 Retrieves file name from PDF document. @return File name as String
1719 Returns the field type of the PDF form field. @return Field type as a string or null if not found
1720 Retrieves the name from the COS object. @return Name as a string or null if not present
1721 Retrieves duplex setting from preferences. @return duplex setting as String or null if not set
1722 Retrieves string value by key. @param key unique identifier for the string @return string value associated with the key
1723 Retrieves string value for a given key with a default fallback. @param key the COSName key to look up @param defaultValue the default value to return if key not found @return the string value associated with the key or the default value
1724 Retrieves the language setting from the PDF document. @return Language string or null if not set
1725 Retrieves the contents of an annotation. @return The string content of the annotation or null if not found.
1726 Retrieves the title from document information. @return Title string or null if not set
1727 Retrieves the subject from document information. @return Subject string or null if not set
1728 Retrieves keywords from document metadata. @return String containing keywords or null if none exist
1729 Retrieves the creator of the document. @return Creator string or null if not available
1730 Retrieves the producer information. @return Producer name as a string or null if not available
1731 Retrieves the prefix from the root configuration. @return The prefix string value.
1732 Retrieves file Unicode name. @return Unicode string of the file or null if not found
1733 Retrieves the author of the document. @return Author name as a String or null if not set
1734 Retrieves the title from the PDF document. @return The title as a string or null if not present.
1735 Retrieves the subject of an annotation. @return The subject as a string, or null if not set.
1736 Retrieves rotation angle of the PDF document. @return Rotation angle as a string or null if not set
1737 Retrieves default appearance string. @return Default appearance string or null if not found
1738 Retrieves the annotation name from the COS object. @return the annotation name as a String
1739 Retrieves the modified date of the PDF document. @return Modified date as a string or null if not available
1740 Retrieves the contents of a dictionary entry. @return String value of the "CONTENTS" key or null if not present
1741 Retrieves the execute parameter from PDF dictionary. @return value of the "P" entry in the PDF dictionary or null if not present
1742 Retrieves directory path. @return Directory path as a string
1743 Retrieves the filename from parameters. @return filename as a String
1744 Retrieves the annotation name from the dictionary. @return The annotation name as a string
1745 Retrieves the filename from the dictionary. @return the filename as a String
1746 Retrieves URI from PDF action. @return URI as a string or null if not found
1747 Retrieves the value associated with key "P". @return String value of key "P" or null if not found
1748 Retrieves the "O" (owner) string from the action. @return The owner string or null if not present.
1749 Retrieves the "D" entry as a string from the action dictionary. @return The value of the "D" entry or null if not present.
1750 Retrieves the value of the "F" entry. @return The string value associated with the "F" key in the COS dictionary.
1751 Retrieves group names from a PDF document. @return array of group names or empty array if none found
1752 Retrieves the name from the dictionary. @return The string value of the 'Name' key in the dictionary.
1753 Retrieves default appearance string. @return Default appearance string from annotation
1754 Retrieves the default style from an annotation. @return default style as a string or null if not set
1755 Retrieves the caption style from annotations. @return The caption style as a string or null if not set.
1756 Retrieves the state value from an annotation. @return The state as a string or null if not present
1757 Retrieves the state model value. @return The state model as a string or null if not found.
1758 Retrieves the status string from the PDF document. @return Status string or null if not found
1759 Retrieves the symbol associated with the annotation. @return the symbol as a String
1760 Retrieves the target value. @return the target string or null if not set
1761 Retrieves the name from the reference. @return The name as a string
1762 Retrieves the font family name. @return Font family as a string or null if not available
1763 Retrieves the character set string. @return Character set as a String
1764 Retrieves the partial field name. @return Partial field name as a String
1765 Checks if the PDF object has children. @return true if the object has children, false otherwise
1766 Retrieves structure element from PDF. @return PDStructureElement object or null if not found
1767 Retrieves the string filter name from the dictionary. @return COSName representing the string filter or IDENTITY if not set
1768 Converts a character code to its Unicode representation. @param code character code to convert @return Unicode string or null if conversion fails
1769 Retrieves the subtype of the current object. @return COSName representing the subtype, or null if not set
1770 Retrieves the relationship type from the dictionary. @return COSName representing the relationship or null if not found
1771 Retrieves the appearance state of the object. @return COSName representing the appearance state or null if not set
1772 Checks if the document is encrypted. @return true if encrypted, false otherwise
1773 Retrieves the encryption dictionary from the PDF trailer. @return COSDictionary containing encryption details or null if not present
1774 Parses the PDF trailer and initializes the root dictionary. @throws IOException if root object is missing or an I/O error occurs
1775 Retrieves and caches the AcroForm from a PDF document. @param acroFormFixup optional fixup to apply to the AcroForm @return cached PDAcroForm object or null if not found
1776 Retrieves viewer preferences from the PDF document. @return PDViewerPreferences object or null if not found
1777 Retrieves the document's name dictionary. @return PDDocumentNameDictionary object or null if not found
1778 Retrieves destination dictionary from the document. @return PDDocumentNameDestinationDictionary or null if not present
1779 Retrieves mark information from the document. @return PDMarkInfo object or null if not available
1780 Retrieves URI dictionary from PDF document. @return PDURIDictionary object or null if not found
1781 Retrieves the structure tree root from the document. @return PDStructureTreeRoot object or null if not found
1782 Retrieves optional content properties. @return PDOptionalContentProperties object or null if not found
1783 Retrieves destination names from the document. @return PDDestinationNameTreeNode or null if not found
1784 Removes a key usage extension from the dictionary. @param keyUsageExtension the key usage extension to remove
1785 Removes a subject from the document's metadata. @param subject byte array representing the subject to remove
1786 Removes a user property from the document. @param userProperty the property to remove
1787 Retrieves a page from the PDF document. @return PDPage object or null if not found
1788 Retrieves a page from the document. @return PDPage object or null if not found
1789 Retrieves the page associated with the current object. @return PDPage object or null if not found
1790 Retrieves stream filter name from dictionary. @return COSName of the stream filter or IDENTITY if not found
1791 Retrieves a dictionary object by type and name. @param kind the type of resource (e.g., COSName.FONT) @param name the specific resource name @return COSBase object or null if not found
1792 Retrieves an indirect COSObject by name from the specified resource dictionary kind. @param kind type of resource dictionary @param name key for the COSObject in the dictionary @return COSObject if found, otherwise null
1793 Retrieves the transition effect dictionary. @return PDTransition object or null if no transition is defined
1794 Retrieves JavaScript node from the document. @return PDJavascriptNameTreeNode object or null if not found
1795 Retrieves embedded files node from the document. @return PDEmbeddedFilesNameTreeNode object or null if not present
1796 Retrieves names of resources by type. @param kind type of resource dictionary @return iterable set of resource names or empty set if none found
1797 Removes an issuer from the document's issuer list. @param issuer byte array representing the issuer to remove
1798 Retrieves the encryption filter method. @return COSName representing the cryptographic filter method
1799 Checks if a dictionary represents a catalog. @param dictionary to check @return true if the dictionary is a catalog, false otherwise
1800 Parses a COSDictionary from the input source. @param isDirect indicates if the dictionary should be direct or not @return parsed COSDictionary object @throws IOException if an I/O error occurs during parsing
1801 Constructs a PDRectangle from a COSArray. @param array COSArray containing rectangle coordinates
1802 Initializes a line dash pattern with an array and phase. Adjusts negative phases according to PDF 2.0 specification. @param array COSArray representing dash lengths @param phase initial dash phase, adjusted if negative
1803 Returns a string representation of the PDRange. @return formatted string with min and max values
1804 Evaluates input through a type 4 function. @param input array of input values @return array of output values after evaluation
1805 Reads and processes patch data from an input stream. @param input Image input stream to read from @param isFree Flag indicating if the patch is free @param implicitEdge Implicit edge points for non-free patches @param implicitCornerColor Implicit corner colors for non-free patches @param maxSrcCoord Maximum source coordinate value @param maxSrcColor Maximum source color value @param rangeX X-axis range @param rangeY Y-axis range @param colRange Color component ranges @param matrix Transformation matrix @param xform Additional affine transformation @param controlPoints Number of control points @return Patch object or null if EOF occurs @throws IOException on I/O error
1806 Reads a vertex from an image stream. @param input the source image input stream @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X coordinate range @param rangeY Y coordinate range @param colRangeTab color component ranges @param matrix transformation matrix @param xform additional affine transform @return Vertex object with position and color components @throws IOException if reading fails or invalid parameters are provided
1807 Retrieves the color before the current one. @return PDGamma object representing the previous color
1808 Retrieves the after-colour from the colour list. @return PDGamma object representing the after-colour
1809 Retrieves the start color. @return PDGamma object representing the start color
1810 Retrieves the end color from a gradient. @return PDGamma representing the end color
1811 Retrieves the blend mode from the dictionary. @return BlendMode object representing the blending mode or null if not set
1812 Retrieves the color space. @return PDColorSpace object representing the color space @throws IOException if an error occurs while reading the color space
1813 Checks if a dictionary represents a page tree node. @param node the COSDictionary to check @return true if the node is a page tree node, false otherwise
1814 Retrieves filter names from PDF parameters. @return List of filter names or empty list if none found
1815 Retrieves integer value from dictionary using two keys. @param firstKey primary key for the dictionary @param secondKey secondary key for nested dictionary @param defaultValue default value if keys not found or not an integer @return integer value associated with the keys, or default if not applicable
1816 Retrieves boolean value from dictionary. @param firstKey primary key in the dictionary @param secondKey secondary key in the dictionary @param defaultValue default boolean value if keys not found @return boolean value associated with keys or default value
1817 Retrieves a COSDictionary from the document using two keys. @param firstKey key to access the initial dictionary level @param secondKey key to access the nested dictionary level @return COSDictionary object or null if not found
1818 Creates a Matrix from a COSBase object. @param base the COSBase object to convert @return a new Matrix instance or an empty Matrix if conversion fails
1819 Removes OID from the dictionary. @param oid byte array representing the OID to be removed
1820 Retrieves the upper limit from a COSArray. @return String representation of the upper limit or null if not found
1821 Retrieves a PDF page. @return PDPage object or null if not found
1822 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
1823 Retrieves border style dictionary. @return PDBorderStyleDictionary object or null if not found
1824 Retrieves the previous URI action. @return PDActionURI object or null if not found
1825 Retrieves external data dictionary. @return PDExternalDataDictionary object or null if not found
1826 Retrieves border style dictionary. @return PDBorderStyleDictionary object or null if not found
1827 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
1828 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not present
1829 Retrieves appearance characteristics. @return PDAppearanceCharacteristicsDictionary or null if not available
1830 Retrieves additional actions for annotation. @return PDAnnotationAdditionalActions object or null if none exist
1831 Retrieves border style dictionary. @return PDBorderStyleDictionary or null if not present
1832 Retrieves normal appearance settings. @return PDAppearanceEntry object or null if not found
1833 Retrieves the filter data from a PDF document. @return PDPropBuildDataDict containing filter information or null if not present
1834 Retrieves public security data from the document. @return PDPropBuildDataDict containing public security information or null if not present
1835 Retrieves application properties from the PDF document. @return PDPropBuildDataDict object containing app properties or null if not found
1836 Retrieves property build information. @return PDPropBuild object or null if not found
1837 Retrieves timestamp from the dictionary. @return PDSeedValueTimeStamp object or null if not found
1838 Retrieves the seed value certificate. @return PDSeedValueCertificate object or null if not found
1839 Retrieves object from a path in a PDF document. @param objPath path to the object, e.g., "Root/Names/Dests" @return COSBase object or null if not found
1840 Retrieves attribute value by name. @param attrName name of the attribute @return COSBase object representing the attribute value
1841 Retrieves attribute value by name. @param attrName name of the attribute @param defaultValue default value to return if attribute is not found @return COSBase object or default value if not present
1842 Retrieves the appearance dictionary. @return PDAppearanceDictionary object or null if not found
1843 Checks if a specified object exists in the COS dictionary. @param name key of the object to check @return true if the object exists, false otherwise
1844 Retrieves the name or array of names from a dictionary object. @param name key to look up in the dictionary @param defaultValue default value if not found @return String or array of Strings, or defaultValue if not applicable
1845 Retrieves a number or name from the dictionary. @param name key to look up in the dictionary @param defaultValue default value if not found @return float value if COSNumber, string value if COSName, or default value
1846 Retrieves a number or array of numbers from the COS dictionary. @param name key for the value in the COS dictionary @param defaultValue default float value if not found @return float or float[] if found, otherwise defaultValue or null
1847 Retrieves color gamma by name. @param name the key for the color gamma in the COS object @return PDGamma object or null if not found
1848 Creates a unique key in the given dictionary. @param kind type of resource dictionary @param prefix base string for the key @return COSName representing the unique key
1849 Retrieves MDP seed value from the document. @return PDSeedValueMDP object or null if not present
1850 Retrieves an array of strings from a COSArray by name. @param name the key for the COSArray in the dictionary @return array of string names or null if not found
1851 Retrieves the target directory from a PDF document. @return PDTargetDirectory object or null if not found
1852 Retrieves Windows-specific launch parameters. @return PDWindowsLaunchParams object or null if not available
1853 Retrieves the target directory from the PDF document. @return PDTargetDirectory object or null if not found
1854 Retrieves a destination by name. @param name the destination name @return PDDestination object or null if not found @throws IOException if an error occurs during retrieval
1855 Retrieves the destination from the PDF object. @return PDDestination object representing the destination @throws IOException if an I/O error occurs during retrieval
1856 Retrieves destination from COS object. @return PDDestination object or null if not found @throws IOException if an I/O error occurs
1857 Retrieves the destination object. @return PDDestination object or null if not found @throws IOException if an I/O error occurs
1858 Retrieves destination from PDF COS object. @return PDDestination object or null if not found @throws IOException if an error occurs during retrieval
1859 Retrieves JavaScript associated with an FDF document. @return FDFJavaScript object or null if no JavaScript is present
1860 Retrieves the signature from the document catalog. @return PDSignature object or null if no signature exists
1861 Retrieves the border style dictionary. @return PDBorderStyleDictionary object or null if not found
1862 Retrieves a cryptographic filter dictionary by name. @param cryptFilterName the name of the crypt filter @return PDCryptFilterDictionary object or null if not found
1863 Retrieves and processes the class map from a PDF object. @return Map containing class names and their corresponding attribute objects or lists of objects.
1864 Retrieves the parent tree node. @return PDNumberTreeNode representing the parent tree or null if not found
1865 Retrieves the ID tree node for structure elements. @return PDNameTreeNode containing structure elements or null if not found
1866 Retrieves the lower limit from a COSArray. @return String representing the lower limit or null if not found
1867 Retrieves border effect dictionary. @return PDBorderEffectDictionary object or null if not found
1868 Retrieves the sub-filter name from the dictionary. @return Sub-filter name as a string or null if not found
1869 Retrieves the appearance dictionary of a PDF field. @return PDAppearanceDictionary object or null if not present
1870 Creates an XObject from a COSBase object. @param base the COSBase object to convert @param resources resource dictionary @return PDXObject instance or throws IOException if unsupported type
1871 Retrieves resources from PDF object. @return PDResources object or null if not found
1872 Retrieves the extended graphics state. @return PDExtendedGraphicsState object or null if not available
1873 Retrieves render state for a given destination. @param destination target rendering destination (PRINT, VIEW) @return RenderState object or null if not found
1874 Retrieves the DeviceN color process from the dictionary. @return PDDeviceNProcess object or null if not found
1875 Retrieves character procedures. @return COSDictionary containing character procedures or null if not set
1876 Returns the resources dictionary. @return PDResources object or null if not available
1877 Retrieves appearance stream reference for the field. @return FDFNamedPageReference object or null if not found
1878 Retrieves Panose classification from font dictionary. @return PDPanose object or null if not found
1879 Retrieves the template reference from the document. @return FDFNamedPageReference object or null if not found
1880 Retrieves page information from an FDF document. @return FDFPageInfo object or null if no info dictionary exists
1881 Retrieves additional actions dictionary. @return PDAdditionalActions object or null if not found
1882 Retrieves icon fit settings. @return FDFIconFit object or null if not available
1883 Retrieves appearance subdictionary streams. @return Map of COSName to PDAppearanceStream objects @throws IllegalStateException if entry is not a subdictionary
1884 Retrieves CID system information. @return PDCIDSystemInfo object or null if not found
1885 Retrieves the filter name from the dictionary. @return the filter name as a string or null if not found
1886 Retrieves the title from an annotation. @return The title as a string or null if not present
1887 Retrieves the filter name from the dictionary. @return Filter name as a string or null if not found
1888 Retrieves a long value by key with a default. @param key the key to look up @param defaultValue the default value if key not found @return the long value associated with the key, or default
1889 Retrieves a long value associated with a given key. @param key the COSName key to look up @return the long value or -1 if not found
1890 Retrieves a long value by key. @param key the key to look up @return the long value or -1 if not found
1891 Retrieves the visibility policy from the dictionary. @return COSName representing the visibility policy or null if not found
1892 Retrieves the coordinate system origin. @return array of floats representing the origin or null if not found
1893 Retrieves line slope dictionaries. @return Array of PDNumberFormatDictionary objects or null if none found
1894 Retrieves angle format dictionaries. @return array of PDNumberFormatDictionary or null if not found
1895 Retrieves number format dictionaries. @return Array of PDNumberFormatDictionary objects or null if not found
1896 Retrieves number format dictionaries. @return array of PDNumberFormatDictionary or null if not available
1897 Retrieves Y-axis change dictionaries. @return Array of PDNumberFormatDictionary or null if not found
1898 Retrieves change X dictionaries. @return Array of PDNumberFormatDictionary or null if not found
1899 Retrieves selected options' indices. @return List of selected option indices or empty list if none
1900 Retrieves calculation order of form fields. @return List of PDField objects in calculation order
1901 Retrieves byte range from dictionary. @return array of integers representing byte ranges or empty array if not found
1902 Retrieves OID values from a PDF dictionary. @return List of byte arrays representing OIDs, or null if not present
1903 Retrieves issuer information from a dictionary. @return list of byte arrays representing the issuer or null if not found
1904 Retrieves key usage extensions from a dictionary. @return List of key usage strings or null if not found
1905 Retrieves subject data as byte arrays. @return List of byte arrays representing the subject, or null if not present
1906 Retrieves legal attestation fields from the document. @return List of legal attestation field names or empty list if none found
1907 Retrieves a list of reasons from the dictionary. @return List of reason strings or empty list if none found
1908 Sets the startxref byte position and resolves XRef trailers. @param startxrefBytePosValue the byte position of the startxref entry
1909 Retrieves a float value from a COSName key. @param key the key to look up in the dictionary @return the float value associated with the key or -1 if not found
1910 Retrieves the y-axis step value. @return y-axis step as a float, default is 0 if not set
1911 Retrieves the X step value. @return float value of X step or default 0 if not found
1912 Retrieves gamma value from dictionary. @return gamma value as float, defaulting to 1.0 if not found
1913 Retrieves the missing width value. @return The missing width as a float, defaulting to 0 if not found.
1914 Retrieves the maximum width value. @return the maximum width as a float, defaulting to 0 if not set
1915 Retrieves average character width from dictionary. @return average width as float or 0 if not found
1916 Retrieves stem height value. @return stem height as float, default is 0 if not set
1917 Retrieves the vertical stem width. @return vertical stem width as a float, default is 0 if not set
1918 Returns the X height of the font. @return The absolute value of the X height or default if not set
1919 Retrieves the capital height of the font. @return The capital height value, ensuring non-negative result
1920 Retrieves leading value from dictionary. @return leading value as float, default is 0 if not set
1921 Retrieves the descent value. @return descent value as a float, defaulting to 0 if not found
1922 Retrieves the ascent value from the dictionary. @return the ascent value as a float, defaulting to 0 if not found
1923 Retrieves the italic angle of the font. @return italic angle as a float value
1924 Retrieves the font weight. @return font weight as a float or 0 if not found
1925 Retrieves the opacity value of an annotation. @return opacity level as a float (default is 1.0 if not set)
1926 Retrieves the guideline width from the dictionary. @return the guideline width as a float, defaulting to 1 if not set
1927 Retrieves user unit from PDF page. @return user unit value or default 1.0 if invalid
1928 Retrieves a float value from COSDictionary by key. @param key the name of the entry @param defaultValue default value if key not found @return float value associated with the key or default value
1929 Retrieves a float value from the PDF dictionary. @param key the key associated with the float value @return the float value or -1 if not found
1930 Retrieves a list of digest methods. @return List of digest method names or empty list if none found
1931 Retrieves sub-filters from a dictionary. @return list of sub-filter names or an empty list if none are found
1932 Retrieves quad points from PDF annotation. @return Array of floats representing quad points or null if not found
1933 Retrieves the background array from the dictionary. @return COSArray representing the background or null if not set
1934 Retrieves a list of component names from the dictionary. @return List of component names as strings
1935 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not set
1936 Retrieves transformation matrix from dictionary. @return 3x3 float array representing the matrix, default if not found
1937 Returns the list of character widths. @return List of Float representing character widths or empty list if not available
1938 Retrieves fields from the template. @return List of FDFField objects or null if no fields exist
1939 Retrieves templates from a PDF page. @return List of FDFTemplate objects or null if none exist
1940 Retrieves options from a PDF field. @return List of option values or null if no options are present
1941 Retrieves child fields of the current field. @return List of child FDFField objects or null if no children exist
1942 Retrieves a list of pages from an FDF document. @return List of FDFPage objects or null if no pages exist
1943 Retrieves all form fields from an FDF document. @return List of FDFField objects representing the form fields
1944 Retrieves the ID array from the FDF document. @return COSArray containing the ID or null if not present
1945 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not set
1946 Retrieves annotation coordinates. @return float array of coordinates or null if not available
1947 Retrieves the domain array from the PDF document. @return COSArray representing the domain or null if not set
1948 Retrieves the EXTEND array from the COS object. @return COSArray containing EXTEND data or null if not present
1949 Retrieves the domain array from the COS object. @return COSArray containing domain information or null if not set
1950 Retrieves coordinates array. @return COSArray containing coordinates or null if not found
1951 Retrieves rectangle differences. @return array of floats representing rectangle differences or empty array if none
1952 Retrieves vertex data from PDF object. @return array of vertices or null if not found
1953 Retrieves the endpoint style of a line annotation. @return endpoint style as a string or LE_NONE if not found
1954 Retrieves the starting point ending style of an annotation. @return String representing the ending style or LE_NONE if not set
1955 Retrieves the path data from a PDF object. @return 2D array of floats representing the path or null if not found
1956 Retrieves vertex coordinates. @return array of vertex coordinates or null if not available
1957 Retrieves quad points from a PDF annotation. @return Array of quad points or null if not available
1958 Retrieves vertical offset of caption. @return vertical offset as a float, default is 0.0f if not set
1959 Retrieves horizontal offset for caption. @return horizontal offset value or 0 if not set
1960 Retrieves and clamps the audio volume. @return volume level between -1 and 1, defaulting to 1 if out of range
1961 Retrieves the endpoint style from a PDF object. @return String representing the endpoint style or default value if not found
1962 Retrieves the URL type from the dictionary. @return The URL type as a string or null if not found.
1963 Retrieves ink list from PDF object. @return 2D array of floats representing ink data or empty if none found
1964 Retrieves callout coordinates. @return array of floats representing callout coordinates or null if not available
1965 Retrieves rectangle differences as a float array. @return Array of float values representing rectangle differences or empty if none
1966 Retrieves rectangle differences as a float array. @return Array of floats representing rectangle differences or empty array if none
1967 Retrieves the fields array from the action. @return COSArray containing form fields or null if not present
1968 Retrieves fields from the action. @return COSArray containing form fields or null if not present
1969 Retrieves font settings from dictionary. @return PDFontSetting object or null if not found
1970 Retrieves or initializes the DECODE array. @return COSArray containing decode values, may be null
1971 Retrieves the starting point line ending style. @return Line ending style string or default if not set
1972 Retrieves the leader line length from the COS object. @return float value representing the leader line length
1973 Retrieves line coordinates. @return array of floats representing line or null if not found
1974 Retrieves leader line offset length from COS object. @return float value representing the leader line offset length
1975 Retrieves the version from the catalog. @return version string or null if not present
1976 Retrieves the intent of the annotation. @return The intent as a string or null if not set.
1977 Creates an FDFAnnotation based on the dictionary subtype. @param fdfDic COSDictionary containing annotation data @return FDFAnnotation object or null if unsupported type
1978 Retrieves the sub-filter name from the dictionary. @return Sub-filter name as a string or null if not found
1979 Retrieves the filter name from the dictionary. @return filter name as a string or null if not present
1980 Retrieves the subtype of the current object. @return The subtype as a string or null if not present.
1981 Retrieves the type of the PDF object. @return String representing the type or null if not found
1982 Retrieves language property. @return language as string or null if not set
1983 Retrieves the name from the COS object. @return The name as a string or null if not found.
1984 Creates a PDStructureNode based on the COSDictionary type. @param node dictionary representing a structure element or tree root @return PDStructureTreeRoot if type is "StructTreeRoot", else PDStructureElement @throws IllegalArgumentException if type is invalid
1985 Retrieves the structure type from the COS object. @return The structure type as a string or null if not found
1986 Retrieves the owner name from the COS object. @return Owner name as a string or null if not present
1987 Retrieves the type of the COS object. @return The type as a string or null if not present.
1988 Retrieves the style value from the root element. @return The style as a String or null if not found
1989 Retrieves trapped state information. @return Trapped state as a string or null if not present
1990 Retrieves the version name from the root. @return version name as a string
1991 Retrieves the page layout from the root object. @return PageLayout enum or SINGLE_PAGE if invalid or not found
1992 Retrieves the page display mode. @return PageMode object, defaulting to USE_NONE if invalid or null
1993 Checks if the given offset points to a valid XRef stream. @param startXRefOffset starting offset for cross-reference stream @return true if valid XRef stream, false otherwise
1994 Retrieves the character encoding. @return Character encoding string, defaults to "PDFDocEncoding" if not specified
1995 Retrieves string value by COSName key; returns default if null. @param key the COSName key to look up @param defaultValue the default value to return if key is not found @return the string value associated with the key or the default value
1996 Retrieves scale option, defaulting to "Always" if not set. @return Scale option as a string
1997 Retrieves the base font name from the dictionary. @return base font name as a string or null if not found
1998 Retrieves the name from the dictionary. @return The name as a string or null if not found.
1999 Retrieves the subtype of the COS object. @return The subtype as a string or null if not present.
2000 Gets leader line extension length. @return float value of leader line extension or default (0)
2001 Retrieves the intent of the document. @return The intent as a string or null if not set.
2002 Retrieves the caption positioning. @return Caption positioning as a string or null if not set
2003 Retrieves the subtype of the PDF object. @return Subtype as a string or null if not set
2004 Creates a PDAction based on the action type. @param action COSDictionary containing action details @return PDAction object or null if unsupported type
2005 Retrieves the subtype of an action. @return Subtype as a string or null if not found
2006 Retrieves the type of the action. @return The type as a string or null if not found.
2007 Checks if the dictionary represents an NChannel. @return true if SUBTYPE is "NChannel", false otherwise
2008 Retrieves the base font name. @return Base font name as a string or null if not found
2009 Retrieves the base font name from the dictionary. @return the base font name as a string or null if not found
2010 Retrieves the base font name. @return Base font name as a string or null if not found
2011 Retrieves the base font name. @return Base font name as a string or null if not found
2012 Retrieves the font stretch value. @return The font stretch as a string or null if not set
2013 Retrieves the font name from the dictionary. @return the font name as a string
2014 Retrieves the subtype name from the dictionary. @return Subtype as a string or null if not found
2015 Retrieves the type name from dictionary. @return Type as string or null if not present
2016 Retrieves scale type, defaulting to proportional if not specified. @return scale type as string
2017 Retrieves name as string using PDF key. @param key unique identifier for the name @return name in string format or null if not found
2018 Retrieves the line ending style. @return line ending style as a string
2019 Checks if an edge is attached. @param edge name of the edge to check @return true if edge is attached, false otherwise
2020 Retrieves horizontal offset of annotation caption. @return horizontal offset as a float, defaulting to 0 if not set
2021 Retrieves vertical offset of annotation caption. @return vertical offset value or 0 if not set
2022 Writes object to output and tracks it. @param obj object to write @throws IOException if an I/O error occurs
2023 Retrieves vertices of an annotation. @return array of vertex coordinates or null if not available
2024 Retrieves the interior color of an annotation. @return Color object representing the interior color, or null if not set
2025 Retrieves vertices of an annotation. @return array of vertex coordinates or null if not available
2026 Retrieves non-stroking alpha constant. @return Float value representing the non-stroking alpha constant
2027 Retrieves the stroking alpha constant. @return Float value representing the stroking alpha or null if not set
2028 Retrieves the smoothness tolerance value. @return float representing smoothness tolerance or null if not set
2029 Retrieves the flatness tolerance value. @return float value representing flatness tolerance or null if not set
2030 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not set
2031 Retrieves the miter limit value. @return the miter limit as a Float, or null if not set
2032 Creates a PDPropertyList from a COSDictionary. @param dict the dictionary to create the property list from @return a PDPropertyList object based on the dictionary type
2033 Retrieves the color space. @throws IOException if an I/O error occurs @return PDColorSpace object representing the color space
2034 Retrieves user properties of the owner. @return List of PDUserProperty objects representing owner properties
2035 Extracts text regions from a PDF page. @param page the PDPage to extract text from @throws IOException if an I/O error occurs
2036 Retrieves the fly scale factor. @return float value representing the fly scale
2037 Retrieves the duration value from the COS object. @return float representing the duration or default value of 1 if not found
2038 Retrieves the width value. @return Width as a float, defaulting to 1 if not specified
2039 Retrieves constant opacity value. @return float representing opacity or default value of 1
2040 Retrieves line width from PDF item. @return line width as Float or null if not set
2041 Writes a PDF object to an output stream. @param output the OutputStream to write to @param object the COSBase object to write @param topLevel indicates if the object is at the top level @throws IOException if an I/O error occurs
2042 Retrieves the ending style of a line annotation. @return the name of the ending style or LE_NONE if not set
2043 Retrieves ink data list from annotation. @return List of float arrays representing ink coordinates or null if not found
2044 Retrieves the color from an annotation. @return Color object or null if not available
2045 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not set
2046 Retrieves line coordinates from annotation. @return float array of line coordinates or null if not available
2047 Retrieves callout coordinates from annotation. @return float array of coordinates or null if not available
2048 Retrieves the start point ending style of the annotation. @return The name of the starting style or LE_NONE if not set
2049 Adds an XObject to the dictionary. @param name key under which to store the XObject @param xobject the XObject to add
2050 Sets the measurement units. @param units the new units to be set
2051 Sets the fractional display format. @param fractionalDisplay format type ("D", "F", "R", "T", or null)
2052 Retrieves the bounding box of the PDF element. @return PDRectangle representing the bounding box or null if not set
2053 Retrieves rectangle bounds of annotation. @return PDRectangle object or null if not found
2054 Retrieves the fringe rectangle of an annotation. @return PDRectangle representing the fringe or null if not set
2055 Retrieves the annotation's fringe rectangle. @return PDRectangle object representing the fringe or null if not set
2056 Retrieves the fringe rectangle from an annotation. @return PDRectangle representing the fringe or null if not set
2057 Retrieves the fringe rectangle from an annotation. @return PDRectangle object representing the fringe or null if not available
2058 Retrieves the font bounding box. @return PDRectangle representing the font's bounding box or null if not available
2059 Retrieves the font bounding box. @return PDRectangle representing the font's bounding box or null if not available
2060 Retrieves the bounding box of the PDF object. @return PDRectangle representing the bounding box or null if not set
2061 Retrieves shading names. @return Iterable of COSName objects representing shading names
2062 Retrieves the bounding box of the PDF object. @return PDRectangle representing the bounding box or null if not set
2063 Adds a named pattern to the resource dictionary. @param name the key under which to store the pattern @param pattern the PDAbstractPattern object to add
2064 Retrieves the bounding box of the PDF object. @return PDRectangle representing the bounding box or null if not set
2065 Initializes a new FDFDocument with default settings and structures.
2066 Resolves the bounding box for a form field widget. @param fieldWidget the widget associated with the form field @param appearanceStream the appearance stream of the widget @return the resolved PDRectangle bounding box
2067 Sets the bounding box for the PDF object. @param bbox PDRectangle representing the new bounding box
2068 Sets a color with the given name. @param name key for the color setting @param value PDGamma object representing the color
2069 Determines file suffix based on image filters. @return appropriate file suffix ("jpg", "tiff", or "png")
2070 Sets four colors in the PDF document. @param name key for the color setting @param value PDFourColours object representing the colors
2071 Creates a new PDPage with default LETTER size.
2072 Retrieves or creates the FDF dictionary. @return FDFDictionary object
2073 Adds an object to resources. If it exists, returns existing key. @param kind type of resource (e.g., FONT) @param prefix for generating unique key @param object the COSObjectable to add @return COSName of the added or existing object
2074 Associates a font with a given COSName. @param name the COSName to associate the font with @param font the PDFont object to be associated
2075 Associates a color space with a given name. @param name the key for the color space @param colorSpace the color space to associate
2076 Adds an extended graphics state to the map. @param name key for the graphics state @param extGState extended graphics state object
2077 Adds a shading to the dictionary. @param name key for the shading entry @param shading PDShading object to add
2078 Sets properties for a given COSName. @param name the COSName to set properties for @param properties the PDPropertyList containing the properties
2079 Returns the bounding box of the content stream. @return PDRectangle representing the bounding box or null if not defined
2080 Retrieves the bounding box of the PDF object. @return PDRectangle representing the bounding box or null if not available
2081 Retrieves rectangle difference. @return PDRectangle object or null if not found
2082 Retrieves a PDColorSpace by name. @param name the COSName of the colorspace @param wasDefault true if used as default colorspace @return PDColorSpace object or null if not found @throws IOException if an error occurs during retrieval
2083 Sets the embedded file with Unicode name. @param file PDEmbeddedFile object to be set
2084 Sets an embedded file. @param file the PDEmbeddedFile to be set
2085 Retrieves a Matrix object from the COSObject's dictionary. @return Matrix object or null if not found
2086 Checks if a color space with the given name exists. @param name the COSName of the color space @return true if the color space exists, false otherwise
2087 Retrieves an extended graphics state by name. @param name the name of the extended graphics state @return PDExtendedGraphicsState object or null if not found
2088 Checks if the given name is an XObject image. @param name PDF object name to check @return true if it's an image XObject, false otherwise
2089 Retrieves font names. @return Iterable of COSName containing font names
2090 Retrieves XObject names. @return Iterable of COSName representing XObjects
2091 Retrieves color space names. @return Iterable of COSName objects representing color spaces
2092 Retrieves inheritable attribute from a PDF dictionary. @param node current dictionary node @param key attribute key to search for @return COSBase value of the attribute or null if not found
2093 Retrieves boolean value from dictionary by key. @param key the COSName key to look up @param defaultValue default boolean value if key not found @return boolean value or default if key is null
2094 Retrieves integer value by keys. @param firstKey primary key @param secondKey secondary key @return integer value or -1 if not found
2095 Retrieves the rectangle from the dictionary. @return PDRectangle object or null if invalid data
2096 Retrieves matrix from COS object. @return Matrix object created from dictionary entry
2097 Retrieves the PDF acroform with default fixups applied. @return PDAcroForm object representing the form in the document
2098 Retrieves rectangle difference from PDF object. @return PDRectangle representing the difference or null if not present
2099 Retrieves integer value associated with a COSName key. @param key the COSName key to look up @param defaultValue default integer value if key is not found @return the integer value or default if key is missing
2100 Retrieves rectangle from bead. @return PDRectangle object or null if not found
2101 Sets the line dash pattern. @param array COSArray representing dash pattern @param phase offset of the pattern
2102 Retrieves line dash pattern from dictionary. @return PDLineDashPattern object or null if not found
2103 Creates a stencil image from a PDF image. @param pdImage source PDF image @param paint fill color for the stencil @return BufferedImage with applied stencil or null on error
2104 Retrieves matrix representation. @return Matrix object from COS dictionary
2105 Retrieves COS objects by specified types. @param type1 first object type to filter @param type2 second object type to filter @return list of COSObject matching the given types
2106 Initializes a PDInlineImage with given parameters, data, and resources. @param parameters dictionary containing image parameters @param data raw byte data of the image @param resources associated resources for the image @throws IOException if an error occurs during decoding
2107 Converts an integer code to its Unicode string representation. @param code integer representing the Unicode code point @return Unicode string representation of the code point
2108 Checks if the document is encrypted. @return true if the document is encrypted, false otherwise
2109 Parses an FDF file and returns a FDFDocument object. @return FDFDocument representing the parsed FDF data @throws IOException if parsing fails
2110 Initializes a new PDThreadBead with default settings.
2111 Sets the application version in the dictionary. @param applicationVersion the version string to be stored
2112 Initializes a new PDRectlinearMeasureDictionary with a specific subtype.
2113 Retrieves an optional content group by name. @param name the name of the group to find @return PDOptionalContentGroup object or null if not found
2114 Retrieves optional content groups. @return Collection of PDOptionalContentGroup objects
2115 Retrieves pattern names. @return Iterable of COSName objects representing pattern names
2116 Sets the modified date of the COS object. @param c Calendar instance representing the new modification date
2117 Sets the creation date of the PDF document. @param creationDate Calendar object representing the creation date
2118 Sets the signature date in the dictionary. @param cal Calendar object representing the signature date
2119 Adds key usage by appending specified flags. @param digitalSignature, nonRepudiation, etc. - individual key usage flags
2120 Retrieves the parent outline node. @return parent PDOutlineNode or null if none exists
2121 Retrieves document outline. @return PDDocumentOutline object or null if not available
2122 Initializes a new PDAction with a default COSDictionary.
2123 Initializes a shading pattern. Sets the pattern type to shading.
2124 Constructs a new PDStructureTreeRoot. Initializes with a specific type.
2125 Initializes a new PDStructureElement. @param structureType type of structure element @param parent parent PDStructureNode
2126 Sets custom metadata value. @param fieldName name of the metadata field @param fieldValue value to be set for the metadata field
2127 Initializes page labels for a PDF document. @param document the PDDocument to apply page labels to
2128 Sets the formatted value and notifies of changes. @param formattedValue new formatted string value to set
2129 Sets a string value in the COS object. @param name key for the string value @param value string to be set
2130 Sets the name of the object and notifies if changed. @param name new name for the object
2131 Parses a PDF or FDF file. @param lenient whether to ignore parsing errors @return PDDocument object representing the parsed document @throws IOException if an I/O error occurs during parsing
2132 Sets the modification date of an information dictionary. @param date the new modification date to set
2133 Sets the creation date of an object. @param date calendar representing the creation date
2134 Sets the creation date of an annotation. @param date Calendar object representing the creation date
2135 Sets a date value in the embedded dictionary. @param embedded name of the embedded item @param key name of the date field @param date Calendar object to set
2136 Sets the base string for the COS object. @param base the base string to be set
2137 Constructs a PDTransition with style R.
2138 Sets the standard cryptographic filter dictionary. @param cryptFilterDictionary the cryptographic filter to be set
2139 Sets the default cryptographic filter dictionary. @param defaultFilterDictionary the cryptographic filter dictionary to set
2140 Sets a date value in the document. @param key the key associated with the date @param date the Calendar object representing the date
2141 Sets the style of the PDF element. @param s the style string to be applied
2142 Sets the name attribute. @param name the new name value to be set
2143 Sets the top value in the array. @param y integer value to set or -1 to clear
2144 Constructs a PDPageFitWidthDestination. Initializes an array and sets its second element to TYPE.
2145 Sets the top value in an array. @param y integer value to set or -1 to clear
2146 Sets the bounding box fitting option. @param fitBoundingBox flag to enable or disable bounding box fitting
2147 Initializes a PDPageXYZDestination with default settings.
2148 Sets the left value in the array. @param x value to set; -1 sets to null
2149 Sets the top value in the array. @param y value to set at index 3, or -1 to set null
2150 Sets the zoom level for an array element. @param zoom the zoom factor to apply
2151 Sets the right value in the array. @param x value to set, or -1 to clear
2152 Decrypts entries in a PDF dictionary. @param dictionary the dictionary to decrypt @param objNum object number of the dictionary @param genNum generation number of the dictionary @throws IOException if decryption fails
2153 Retrieves file decoding parameters. @return list of decode parameters or empty list if none found @throws IOException if an I/O error occurs
2154 Retrieves or creates the FDF catalog. @return FDFCatalog object representing the document's catalog
2155 Sets the range for component 0. @param range PDRange object defining the new range
2156 Sets the B component range. @param range PDRange object defining the new range
2157 Retrieves decode parameters for a PDF object. @return List of decode parameters or null if not found @throws IOException if an I/O error occurs
2158 Sets the bottom position in the array. @param y vertical coordinate or -1 to clear
2159 Sets the left value in the array. @param x integer value to set; -1 for null
2160 Initializes a new PDPageFitRectangleDestination. Sets up an internal array and names it.
2161 Sets rendering intent. @param ri rendering intent string
2162 Sets a name-value pair in the COS object. @param name key for the value @param value to be set for the key
2163 Appends a bead to the thread. @param append PDThreadBead to be appended
2164 Sets the first bead of the thread. @param bead the bead to be set as the first bead
2165 Inserts a sibling node after the current outline item. @param newSibling the new sibling to insert
2166 Inserts a sibling before the current outline item. @param newSibling the new sibling to insert
2167 Retrieves or creates the appearance dictionary for an annotation. @return PDAppearanceDictionary associated with the annotation
2168 Constructs a new tiling pattern. Initializes resources and sets necessary COS object properties.
2169 Retrieves the fractional space to allocate. @return PDRange object representing the allocation range
2170 Initializes a new PDPageFitDestination with type.
2171 Sets whether to fit bounding box. @param fitBoundingBox flag to enable or disable bounding box fitting
2172 Initializes a new destination to fit page height. Sets up an array with specific type.
2173 Sets the left value in the array. @param x integer value to set; -1 for null
2174 Sets the bounding box fitting option. @param fitBoundingBox flag to enable or disable bounding box fitting
2175 Retrieves external graphics state names. @return iterable of COSName objects representing ext G states
2176 Retrieves property names. @return Iterable of COSName representing property names
2177 Retrieves standard crypt filter dictionary. @return PDCryptFilterDictionary instance or null if not found
2178 Retrieves a string value from an embedded dictionary. @param embedded name of the embedded dictionary @param key name of the key to retrieve the string for @param defaultValue default value if key is not found @return string value or default if not found
2179 Retrieves a string value from a PDF dictionary. @param key the key associated with the desired string value @param defaultValue the default value to return if the key is not found @return the string value or the default value if the key does not exist
2180 Retrieves units from COS object. @return units as string or null if not present
2181 Retrieves version information. @return Version string from dictionary
2182 Retrieves the base string from the COS object. @return The base string value or null if not present
2183 Retrieves string value by name from COS object. @param name key for the string value @return string value associated with the key, or null if not found
2184 Retrieves custom metadata value by field name. @param fieldName the key of the metadata field @return the value associated with the field, or null if not found
2185 Retrieves string value of a property by key. @param propertyKey unique identifier for the property @return String value of the property or null if not found
2186 Retrieves an action associated with the PDF object. @return PDAction instance or null if no action is found
2187 Retrieves an action from the PDF dictionary. @return PDAction object or null if not found
2188 Retrieves an action from the PDF object. @return PDAction object or null if no action is found
2189 Retrieves an action from the dictionary. @return PDAction object or null if not found
2190 Retrieves the O action from the actions dictionary. @return PDAction object or null if not found
2191 Retrieves action associated with 'C' key. @return PDAction object or null if not found
2192 Retrieves the operation type from parameters. @return operation type as a string, defaulting to "Open"
2193 Retrieves action associated with key 'V'. @return PDAction object or null if not found
2194 Retrieves default appearance string from dictionary. @return default appearance as String or empty if not found
2195 Retrieves the ON value from the first widget's appearance dictionary. @return The ON value as a string, or an empty string if not found.
2196 Retrieves the normal appearance stream. @return PDAppearanceStream object or null if not found
2197 Initializes a DictionaryEncoding with a base encoding and differences. @param baseEncoding the base encoding name @param differences array of encoding differences
2198 Extracts contents from a PDF file. @param pdfFile byte array of the PDF file @return extracted contents as byte array @throws IOException if an I/O error occurs
2199 Extracts contents from a PDF file using byte range. @param pdfFile input stream of the PDF file @return byte array containing extracted contents @throws IOException if an I/O error occurs
2200 Retrieves the background color. @return PDColor representing the background color
2201 Retrieves the border color. @return PDColor representing the border color
2202 Retrieves the color associated with the 'C' key. @return PDColor object or null if not found
2203 Constructs the fully qualified name by combining with parent's name. @return String representing the fully qualified name
2204 Checks if a group exists by name. @param groupName the name of the group to check @return true if the group exists, false otherwise
2205 Retrieves a filename using various methods. @return the first non-null filename found, or null if all fail
2206 Retrieves an action associated with key 'F'. @return PDAction object or null if not found
2207 Retrieves action associated with key 'K'. @return PDAction object or null if not found
2208 Retrieves the DP action from the document. @return PDAction object or null if not found
2209 Retrieves or initializes line dash pattern. @return PDLineDashPattern object representing the dash style
2210 Checks if character set matches between CID system info and font info. @param cidSystemInfo CID system information to compare @param info font information containing character set details @return true if character sets match, false otherwise
2211 Retrieves annotations from the FDF document. @return List of FDFAnnotation objects or null if none exist @throws IOException if an I/O error occurs
2212 Retrieves the security handler. @return SecurityHandler object configured with ProtectionPolicy @throws IOException if no security handler is available for the filter
2213 Initializes PDEncryption with a COSDictionary. @param dictionary PDF encryption dictionary
2214 Creates an object from a given PDF base element. @param kid PDF base element @return created object or null if unsupported type
2215 Retrieves the parent structure node. @return PDStructureNode object or null if no parent exists
2216 Checks if the collection has only one entry, which is the owner. @return true if empty under specified condition, false otherwise
2217 Checks if the channel is an N-channel. @return true if attributes are not null and it's an N-channel, false otherwise
2218 Retrieves the open action from a PDF document. @return PDDestinationOrAction object representing the open action, or null if not present @throws IOException if an error occurs while reading the PDF
2219 Retrieves an action from the field's COS dictionary. @return PDAction object created from the "A" entry in the COS dictionary
2220 Retrieves WP action from document. @return PDAction object or null if not found
2221 Retrieves DS action from PDF document. @return PDAction object or null if not found
2222 Retrieves a web search action from the document. @return PDAction object representing the web search or null if not found
2223 Retrieves the WC action. @return PDAction object or null if not found
2224 Retrieves and creates a PDAction object from the PI dictionary. @return PDAction object or null if the PI dictionary is not found
2225 Retrieves the action associated with the "PV" key. @return PDAction object or null if not found
2226 Retrieves the PC action from the document. @return PDAction instance or null if not present
2227 Retrieves the transparency group. @return PDTransparencyGroup object or null if not found @throws IOException if an I/O error occurs
2228 Retrieves the "Print" action from PDF document. @return PDAction object representing print action or null if not present
2229 Retrieves FO action from dictionary. @return PDAction object or null if not found
2230 Retrieves the "U" action from the document's actions. @return PDAction object or null if not found
2231 Retrieves action dictionary and creates PDAction. @return PDAction object or null if not found
2232 Retrieves action associated with 'X'. @return PDAction object or null if not found
2233 Retrieves the "E" action from the dictionary. @return PDAction object or null if not found
2234 Retrieves and creates an action from the 'F' entry. @return PDAction object or null if not found
2235 Retrieves JavaScript actions from document dictionary. @return Map of named JavaScript actions or null if none exist
2236 Retrieves a PDAction object from the "BL" entry. @return PDAction object or null if not found
2237 Checks and validates XRef offset. @param startXRefOffset initial offset to check @return validated offset or -1 if invalid @throws IOException on I/O errors
2238 Finds the page destination for a named destination. @param namedDest named destination to find @return PDPageDestination object or null if not found @throws IOException if an I/O error occurs
2239 Retrieves or creates a line dash pattern from the dictionary. @return PDLineDashPattern object with default values if none exists
2240 Creates a new rubber stamp annotation. Sets the subtype to "RubberStamp" in the COS object.
2241 Creates a new polyline annotation. Sets the subtype to "PolyLine".
2242 Creates a new polygon annotation. Initializes the COS object with the subtype "Polygon".
2243 Writes prepared objects to a COSStream. @param stream the target COSStream to write to @return the updated COSStream with written objects @throws IOException if an I/O error occurs during writing
2244 Writes a COSDictionary to the given OutputStream. @param output stream to write dictionary to @param cosDictionary dictionary to be written @throws IOException if an I/O error occurs
2245 Initializes a new line annotation. Sets the subtype to "Line" and initializes the line coordinates.
2246 Initializes a new PDAnnotationInk object with subtype "Ink".
2247 Initializes a new file attachment annotation. Sets the subtype to "FileAttachment" in the COS object.
2248 Creates an underline annotation. Sets the subtype to "Underline".
2249 Creates a new strike-out annotation.
2250 Creates a new squiggly annotation.
2251 Creates a new highlight annotation. Initializes the annotation subtype to "Highlight".
2252 Removes a child element from the structure. @param structureElement the child element to remove @return true if removal was successful, false otherwise
2253 Creates a square or circle annotation. @param subType subtype of the annotation ("Square" or "Circle")
2254 Constructs a text markup annotation. @param subType specific type of text markup (e.g., highlight, underline)
2255 Retrieves all widget annotations. @return List of PDAnnotationWidget objects
2256 Retrieves the associated popup annotation. @return PDAnnotationPopup object or null if none exists
2257 Constructs a text markup annotation from a COS dictionary. @param field COS dictionary representing the annotation
2258 Constructs a text annotation from a COS dictionary. @param field PDF dictionary containing annotation properties
2259 Initializes a new square or circle annotation from a COS dictionary. @param dict the COS dictionary containing annotation properties
2260 Constructs a new sound annotation from a COS dictionary. @param field COS dictionary representing the sound annotation
2261 Constructs a rubber stamp annotation from a COS dictionary. @param field COS dictionary representing the annotation
2262 Constructs a PDAnnotationPolyline from a COSDictionary. @param dict dictionary containing annotation properties
2263 Creates a new polygon annotation from a COS dictionary. @param dict dictionary containing annotation properties
2264 Constructs a new line annotation from a COS dictionary. @param field The COS dictionary representing the annotation
2265 Constructs an ink annotation from a COS dictionary. @param dict the COS dictionary containing annotation data
2266 Constructs a free text annotation from a dictionary. @param field COSDictionary representing the annotation
2267 Constructs a new file attachment annotation. @param field COSDictionary containing annotation properties
2268 Constructs a PDAnnotationCaret from a COSDictionary. @param field dictionary containing annotation properties
2269 Creates a new text annotation.
2270 Inserts a new structure element before a reference element. @param newKid the new element to insert @param refKid the reference element before which to insert
2271 Appends a kid to the current structure element. @param structureElement the child element to be added
2272 Retrieves file specification from PDF object. @return PDFileSpecification object representing the file @throws IOException if an I/O error occurs
2273 Creates a PDImageXObject from a BufferedImage. @param document PDF document to associate with the image @param image 1-bit black and white BufferedImage @return PDImageXObject representing the image @throws IOException if an I/O error occurs
2274 Constructs a PDPageTree from a COSDictionary. @param root dictionary representing the page tree
2275 Retrieves pages from the PDF document. @return PDPageTree containing all pages in the document
2276 Validates page objects in the PDF document. @param root root dictionary of the PDF document @throws IOException if validation fails or page tree is missing
2277 Retrieves or creates the encode values array. @return COSArray containing encode values
2278 Initializes a PDFunctionType2 with the given function. @param function the underlying COSBase function
2279 Retrieves attribute revisions from PDF object. @return Revisions containing PDAttributeObjects or empty if none found
2280 Retrieves value by name from a tree structure. @param name key to search for in the tree @return associated value or null if not found @throws IOException if an I/O error occurs during retrieval
2281 Searches for a PDF trailer using a brute force approach. @param trailer COSDictionary to store found entries @return true if valid trailer is found, false otherwise
2282 Searches for trailer items in the PDF document. @param trailer dictionary to update with found items @return true if a root object is found and set in the trailer
2283 Sets an attribute value by name. @param attrName the name of the attribute to set @param attrValue the new value for the attribute
2284 Retrieves file specification from action dictionary. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs
2285 Retrieves file specification from action dictionary. @return PDFileSpecification object @throws IOException if an I/O error occurs
2286 Retrieves file specification from action dictionary. @return PDFileSpecification object representing the file @throws IOException if an I/O error occurs
2287 Retrieves file specification from PDF object. @return PDFileSpecification representing the file @throws IOException if an error occurs during retrieval
2288 Retrieves file specification from action dictionary. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs
2289 Retrieves file specification from PDF object. @return PDFileSpecification object representing the file @throws IOException if an I/O error occurs
2290 Retrieves file specification from reference dictionary. @return PDFileSpecification object @throws IOException if an I/O error occurs
2291 Initializes content stream for tiling pattern. @param pattern PDTilingPattern object to process @throws IOException if an I/O error occurs
2292 Retrieves embedded FDF files. @return List of PDFileSpecification objects representing embedded FDFs @throws IOException if an I/O error occurs
2293 Retrieves file specification from PDF stream. @return PDFileSpecification object representing the file @throws IOException if an I/O error occurs
2294 Returns the highest version number from document and catalog. @return float representing the version number
2295 Sets the conversion factor. @param conversionFactor the new conversion factor value
2296 Sets intensity value. @param i new intensity level
2297 Sets a float value in the COS object by name. @param name key for the value @param value float value to set
2298 Retrieves file specification from FDF dictionary. @return PDFileSpecification object representing the file @throws IOException if an I/O error occurs
2299 Retrieves print scaling preference. @return current print scaling setting as string, default if not set
2300 Retrieves print area setting. @return String representation of print area or default boundary if not set
2301 Sets the Mac creator in PDF document parameters. @param macCreator Mac creator string to set
2302 Creates a view for reading with optional filtering. @return RandomAccessRead instance @throws IOException if an I/O error occurs
2303 Retrieves the minimum revision number. @return minimum revision as a long value
2304 Retrieves the revision number from the dictionary. @return The revision number as a long value.
2305 Retrieves the next action(s) in a PDF document. @return List of PDAction objects representing the next actions or null if none found
2306 Extracts signed content from a PDF file. @param pdfFile byte array of the PDF file @return byte array containing signed content or empty if none found @throws IOException if an I/O error occurs
2307 Sets the Mac resource fork. @param macResFork resource fork string to set
2308 Initializes color space with RGB array. @param rgb COSArray containing RGB values
2309 Retrieves the decode range for a specific parameter. @param paramNum index of the parameter @return PDRange object or null if not available
2310 Initializes a ShadingContext with given parameters. @param shading PDShading object representing the shading @param cm ColorModel for rendering @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if an I/O error occurs during initialization
2311 Reads and returns signed content from a PDF file. @param pdfFile InputStream of the PDF file @return byte array containing signed content @throws IOException if an I/O error occurs
2312 Retrieves the default cryptographic filter dictionary. @return PDCryptFilterDictionary object representing the default settings
2313 Sets the MAC subtype in PDF parameters. @param macSubtype the MAC subtype to set
2314 Retrieves a floating-point number from the COSObject by key. @param name the key of the number to retrieve @return the float value associated with the key, or default if not found
2315 Retrieves the base state from a dictionary. @return BaseState object representing the base state
2316 Adds a group to the document's optional content groups. @param ocg the optional content group to add
2317 Initializes DictionaryEncoding with a given COSDictionary. @param fontEncoding the COSDictionary containing font encoding information
2318 Retrieves a floating-point number from the COS object. @param name key for the number in the COS object @param defaultValue value to return if the key is not found @return float value associated with the key or default value
2319 Sets the label position to a specified value. @param labelPositionToValue "S" for suffix, "P" for prefix, or null @throws IllegalArgumentException if value is not "S", "P", or null
2320 Retrieves the CYX value from the COS object. @return float representing the CYX value
2321 Retrieves the leader line offset. @return float value representing the leader line offset
2322 Retrieves the leader line extension value. @return float representing leader line extension
2323 Retrieves the leader line length. @return Length of the leader line as a float
2324 Retrieves conversion factor from COS object. @return float value of conversion factor or default if not found
2325 Sets the label prefix string. @param labelPrefixString the prefix to be set
2326 Parses a COSBase object from the input source. @return parsed COSBase object or null if parsing fails @throws IOException if an I/O error occurs during parsing
2327 Retrieves the 'V' value from the dictionary. @return the float value associated with 'V'
2328 Enables or disables a PDF optional content group. @param group the group to enable/disable @param enable true to enable, false to disable @return true if the group was previously enabled/disabled, false otherwise
2329 Sets the decimal separator in the COS object. @param decimalSeparator the new decimal separator string
2330 Retrieves the PDRange for a given output index. @param n index of the output @return PDRange object representing the range
2331 Clips input values to specified ranges. @param inputValues array of input values to be clipped @return array of clipped values
2332 Returns the number of input parameters. @return count of input parameters
2333 Retrieves domain range for input index. @param n index of the domain range @return PDRange object representing the domain
2334 Calculates the sample index for a given vector. @param vector input integer array representing the vector @return calculated sample index as an integer
2335 Retrieves the decode range for a specific parameter. @param paramNum index of the parameter @return PDRange object representing the decode range or null if not available
2336 Returns the number of output parameters. @return Number of output parameters or 0 if none
2337 Retrieves encoding range for a parameter. @param n index of the parameter @return PDRange object representing the encoding range
2338 Checks if the top attachment is present. @return true if top is attached, false otherwise
2339 Checks if the bottom attachment is enabled. @return true if bottom is attached, false otherwise
2340 Checks if the left attachment is active. @return true if left attachment is attached, false otherwise
2341 Checks if the "Right" attachment is present. @return true if "Right" is attached, false otherwise
2342 Initializes a PDCIDFont with a dictionary and parent font. @param fontDictionary the COSDictionary containing font data @param parent the PDType0Font that contains this CID font
2343 Sets the thousands separator for the COS object. @param thousandsSeparator the string to use as thousands separator
2344 Retrieves value by index from a tree node. @param index the key to search for @return the associated COSObjectable or null if not found @throws IOException if an I/O error occurs
2345 Retrieves character procedure for a given code. @param code character encoding code @return PDType3CharProc object or null if not found
2346 Retrieves rollover appearance entry. @return PDAppearanceEntry for rollover state or normal state if not found
2347 Retrieves the appearance for a down state. @return PDAppearanceEntry object or normal appearance if not found
2348 Retrieves the last child outline item. @return PDOutlineItem representing the last child or null if none exists
2349 Retrieves the digital signature. @return PDSignature object representing the signature
2350 Initializes DictionaryEncoding with given font encoding. @param fontEncoding the COSDictionary containing font encoding information @param isNonSymbolic flag indicating if the font is non-symbolic @param builtIn the built-in Encoding for symbolic fonts
2351 Constructs an FDFField from XML. @param fieldXML XML element representing the field @throws IOException if XML processing fails
2352 Retrieves the first child outline item. @return PDOutlineItem representing the first child or null if none exists
2353 Sets an integer value in the COS object. @param name key for the dictionary entry @param value integer value to set
2354 Constructs an optional content group with a specified name. @param name the name of the content group
2355 Sets the denominator value. @param denominator the new denominator to be set
2356 Retrieves attachment name. @return Name of the attachment as a string
2357 Retrieves the icon name of the annotation. @return The icon name as a string or null if not found.
2358 Retrieves the guideline style as a string. @return "solid" if the guideline is solid; otherwise, default value
2359 Retrieves string value by key with default. @param key PDF key as string @param defaultValue fallback value if key not found @return string value or default if missing
2360 Retrieves properties for a given name. @param name the key to fetch properties @return PDPropertyList containing properties or null if not found
2361 Retrieves a date from an embedded dictionary. @param embedded name of the embedded dictionary @param key the key for the date value @param defaultValue default Calendar to return if not found @return Calendar object or defaultValue if not present
2362 Retrieves optional content properties. @return PDPropertyList object or null if not found
2363 Retrieves calendar date by key. @param key PDF key for the date @param defaultValue default calendar value if not found @return Calendar object or default value
2364 Returns the name associated with key "N". @return Name string or empty if not found
2365 Sets an integer value in the COS object. @param name dictionary key @param value integer to set
2366 Retrieves rendering intent from dictionary. @return RenderingIntent object or null if not found
2367 Retrieves print clip setting. @return String representation of print clip boundary or default crop box if not set
2368 Sets the label suffix string in the COS object. @param labelSuffixString the suffix to append to labels
2369 Retrieves a named string value from the COS object. @param name key of the string to retrieve @return string value associated with the name, or null if not found
2370 Retrieves optional content properties. @return PDPropertyList object or null if not present
2371 Retrieves optional content properties. @return PDPropertyList object or null if not present
2372 Retrieves the highlight mode. @return Highlight mode as a string or default value if not set
2373 Retrieves line ending style. @return line ending style as string or default if not set
2374 Retrieves the name from the COS object. @return The name as a string or null if not found
2375 Retrieves intensity value. @return float representing intensity or 0 if not found
2376 Computes font height for a given PDFont. @param font the PDFont object @return computed font height in text space
2377 Retrieves view clip setting from preferences. @return view clip as string or default boundary if not set
2378 Retrieves the view area setting. @return the current view area as a string
2379 Retrieves the reading direction preference. @return String representing the reading direction (e.g., "L2R" for left-to-right)
2380 Retrieves non-full screen page mode preference. @return page mode as string or default if not set
2381 Retrieves motion transition effect. @return motion effect as string or null if not set
2382 Retrieves the dimension value from the COS object. @return the dimension as a string or default if not present
2383 Retrieves the reply type from the COS object. @return Reply type as a string or default value if not found
2384 Retrieves the style of the transition effect. @return The name of the transition style as a string
2385 Retrieves the type of the object. @return The type as a string, defaulting to "ExData" if not specified
2386 Returns default position vector for CID. @param cid content identifier @return Vector with x as half width and y from dw2 array
2387 Retrieves the style of the object. @return String representing the style, defaulting to "Solid"
2388 Retrieves the highlighting mode for the annotation. @return The highlighting mode as a string, default is "I" if not specified.
2389 Retrieves the name from the COSObject. @return The name as a String or null if not found.
2390 Retrieves OCGs from the dictionary. @return List of PDPropertyList objects representing OCGs
2391 Repairs the length of the first segment in a byte array. @param bytes the input byte array @param length1 initial length of the first segment @return corrected length of the first segment
2392 Retrieves the decimal separator. @return decimal separator string or "." if not specified
2393 Parses a COSArray from the input source. @return Parsed COSArray object @throws IOException if an I/O error occurs
2394 Sets value to on-value. Throws IOException if an I/O error occurs.
2395 Checks if the value matches the on value. @return true if values match, false otherwise
2396 Retrieves all 'on' values from annotations. @return Set of 'on' values or empty set if none found
2397 Adds fonts from a widget's appearance stream to the AcroForm resources. @param acroFormResources the AcroForm resources to add fonts to @param annotation the annotation containing the widget
2398 Retrieves the normal appearance stream of an annotation. @param annotation the PDF annotation to process @return the normal appearance stream or null if not available
2399 Initializes a new PDF XRef stream parser. @param stream the COSStream to parse @throws IOException if an I/O error occurs during initialization
2400 Parses document with default settings. @return parsed PDF document @throws IOException if parsing fails
2401 Validates and repairs Length2 for byte array. @param bytes input byte array @param length1 first length value @param length2 second length value to validate @return corrected Length2 or recalculated if invalid
2402 Retrieves embedded string value. @param embedded name of the embedded object @param key key to retrieve the string from @return embedded string or null if not found
2403 Searches for a page index within a document. @param page the PDPage to search for @return index of the page or -1 if not found
2404 Retrieves label position to value mapping. @return string representing the mapping or default if not found
2405 Retrieves label suffix string from COS object. @return Suffix string or empty space if not found
2406 Retrieves the encoding range for a specified parameter. @param paramNum index of the parameter @return PDRange object representing the encoding range or null if not available
2407 Retrieves a COSDictionary representing a page by its 1-based page number. @param pageNum the 1-based page number to retrieve @param node the current node in the PDF structure tree @param encountered the count of pages already processed @return the COSDictionary for the specified page or throws an exception if not found
2408 Retrieves the label prefix string from the COS object. @return The label prefix string or an empty space if not found.
2409 Retrieves thousands separator from COS object. @return string representing thousands separator or default comma
2410 Loads an FDF document from the given InputStream. @param input stream containing FDF data @return parsed FDFDocument object @throws IOException if there is a problem reading the input
2411 Loads an FDF document from a file. @param file the FDF file to load @return the parsed FDFDocument object @throws IOException if an I/O error occurs
2412 Generates a priority queue of font matches based on descriptor and CID system info. @param fontDescriptor PDFontDescriptor object containing font details @param cidSystemInfo PDCIDSystemInfo object for character set matching @return PriorityQueue of FontMatch objects sorted by score
2413 Encodes an image into a PDImageXObject. @return PDImageXObject containing encoded image data @throws IOException if encoding fails
2414 Creates a new PDAnnotationHighlight. Initializes with a specific sub-type.
2415 Sets the document version. @param newVersion the new version to set
2416 Creates a new PDF document based on the source document. @return A new PDDocument with properties copied from the source document. @throws IOException if an I/O error occurs during document creation.
2417 Retrieves the pages of the PDF document. @return PDPageTree containing all pages in the document
2418 Constructs a new PDAnnotationSquiggly instance. Initializes with a specific sub-type.
2419 Enables or disables a group by name. @param groupName the name of the group to modify @param enable true to enable, false to disable @return true if operation successful, false otherwise
2420 Constructs a PDActionURI with a predefined subtype.
2421 Initializes a new PDActionThread with a specific subtype. @param SUB_TYPE predefined subtype for the action thread
2422 Initializes a new PDActionSubmitForm with a specific subtype.
2423 Constructs a new PDActionSound with a predefined subtype.
2424 Adds a new child to the outline. @param newChild the new child item to add
2425 Adds a child item to the beginning of the outline. @param newChild the new child item to prepend
2426 Checks if a PDF group is enabled. @param group the PDOptionalContentGroup to check @return true if the group is enabled, false otherwise
2427 Creates a new strikeout annotation. Initializes with specific subtype.
2428 Creates a new underline annotation.
2429 Constructs a new circle annotation from a COS dictionary. @param field dictionary representing the annotation
2430 Draws a cloudy rectangle or ellipse. @param left x-coordinate of the left side @param bottom y-coordinate of the bottom side @param right x-coordinate of the right side @param top y-coordinate of the top side @param isEllipse true if shape should be an ellipse, false for rectangle @throws IOException if output operation fails
2431 Creates a cloudy polygon from a path of points. @param path array of float arrays representing coordinates @throws IOException if an I/O error occurs during processing
2432 Constructs an underline annotation from a dictionary. @param dict PDF dictionary representing the annotation
2433 Constructs a strikeout annotation from a dictionary. @param dict PDF dictionary containing annotation properties
2434 Constructs a PDAnnotationSquiggly from a COSDictionary. @param dict the COS dictionary representing the annotation
2435 Constructs a new highlight annotation from a COS dictionary. @param dict the COS dictionary containing annotation properties
2436 Constructs a PDLab from a COSArray. @param lab COSArray representing the lab data
2437 Constructs a PDCalRGB with specified RGB array. @param rgb COSArray representing RGB values
2438 Constructs a PDCalGray from a COSArray. @param array COSArray containing gray scale data
2439 Constructs a new PDLab instance with LAB color space. @param COSName.LAB constant representing LAB color space
2440 Constructs a new PDCalRGB color space.
2441 Initializes a new instance of PDCalGray.
2442 Constructs a new square annotation from a COS dictionary. @param field dictionary representing the annotation
2443 Initializes a new PDActionResetForm with a specific subtype.
2444 Constructs a PDActionRemoteGoTo action. Sets the subtype to SUB_TYPE.
2445 Constructs a PDActionNamed with a predefined subtype. Sets the subtype to SUB_TYPE upon creation.
2446 Constructs a new PDActionMovie instance. Sets the subtype to SUB_TYPE.
2447 Adds a shading to the document. @param shading PDShading object to be added @return COSName representing the added shading
2448 Sets value at specified index. @param index position in export values list @throws IOException if an I/O error occurs
2449 Adds an extended graphics state to the dictionary. @param extGState extended graphics state object @return COSName of the added graphics state
2450 Adds a color space to the dictionary. @param colorSpace the color space to add @return the COSName associated with the added color space
2451 Adds a font to the dictionary. @param font PDFont object to be added @return COSName representing the font key
2452 Sets the border line for a PDF object. @param lineWidth width of the border line @param bs border style dictionary @param border COSArray representing the border @throws IOException if an I/O error occurs
2453 Sets the destination page for navigation. @param page the target page to navigate to
2454 Reads and processes font encoding. @throws IOException if required CMap is missing or invalid
2455 Adds a pattern to the document. @param pattern PDAbstractPattern object to add @return COSName representing the added pattern
2456 Adds a property list to the COSDictionary. @param properties PDPropertyList object to be added @return COSName key under which the property is stored
2457 Adds a PDF form to the resources. @param form PDFormXObject to be added @return COSName of the added form
2458 Initializes a new PDActionLaunch with a predefined subtype.
2459 Constructs a PDActionJavaScript with a predefined subtype.
2460 Constructs a new PDActionImportData with a predefined subtype.
2461 Constructs a PDActionHide instance with a predefined subtype.
2462 Initializes a new PDActionGoTo action.
2463 Initializes a new instance of PDActionEmbeddedGoTo. Sets the subtype to SUB_TYPE.
2464 Initializes page labels for a document from a dictionary. @param document the PDF document to apply labels to @param dict the COSDictionary containing label information @throws IOException if an I/O error occurs
2465 Retrieves or creates the normal appearance entry. @return PDAppearanceEntry object for normal appearance
2466 Retrieves or creates the rollover appearance entry for a PDF widget. @return The rollover appearance entry, ensuring it is not a sub-dictionary.
2467 Retrieves an embedded date from a PDF document. @param embedded name of the embedded object @param key key for the date value @return Calendar object representing the date or null if not found
2468 Retrieves or creates the appearance entry for a button's pressed state. @return PDAppearanceEntry object representing the pressed state appearance
2469 Adds an XObject with a specified prefix. @param xobject PDXObject to be added @param prefix name prefix for the object @return COSName of the added object
2470 Adds an image to the document. @param image PDImageXObject to be added @return COSName of the added image
2471 Retrieves fractional display setting. @return string representation of fractional display or default value
2472 Retrieves the start index from the root. @return the start index as an integer, defaulting to 1 if not found
2473 Retrieves the count value from the root dictionary. @return integer count or 0 if not present
2474 Checks if a specific bit flag is set in a PDF form field. @param field the COSName of the form field to check @param bitFlag the bit flag to verify @return true if the bit flag is set, false otherwise
2475 Retrieves an integer value from a PDF dictionary. @param key the key associated with the integer value @param defaultValue default value to return if the key is not found @return the integer value or the default value if not present
2476 Retrieves an integer value from the dictionary using a specified key. @param key the COSName key to look up in the dictionary @return the integer value associated with the key, or -1 if not found
2477 Retrieves an integer value by key. @param key the key associated with the integer value @return the integer value or -1 if not found
2478 Retrieves an integer value from a dictionary. @param embeddedDictionary the dictionary to search within @param key the key for the integer value @param defaultValue default value if key not found @return the integer value or defaultValue if not present
2479 Retrieves the order value from the COS object. @return the order integer, defaulting to 1 if not set
2480 Checks if window should be centered. @return true if center window preference is enabled, false otherwise
2481 Checks if window fitting is enabled. @return true if window fitting is enabled, false otherwise
2482 Retrieves the preference to hide the menubar. @return true if the menubar should be hidden, false otherwise
2483 Determines if the toolbar is hidden. @return true if toolbar is hidden, false otherwise
2484 Checks if the fly area is opaque. @return true if the fly area is opaque, false otherwise
2485 Checks if appearance streams are needed. @return true if appearances are required, false otherwise
2486 Retrieves trusted mode status. @return true if trusted mode is enabled, false otherwise
2487 Retrieves display document title preference. @return true if document title should be displayed, false otherwise
2488 Gets non-EFont warning status. @return boolean indicating if warnings are disabled for non-EFonts
2489 Retrieves the revision number of the PDF document. @return the revision number as an integer, defaulting to 0 if not specified
2490 Retrieves the version number from the dictionary. @return version number as an integer, defaulting to 0 if not found
2491 Retrieves annotation index from dictionary. @return annotation index or -1 if not found
2492 Retrieves action flags. @return integer value representing action flags
2493 Retrieves flags associated with an action. @return integer value of flags or 0 if not set
2494 Retrieves the number of bits per coordinate. @return int value representing bits per coordinate
2495 Retrieves the number of bits per color component. @return int value representing bits per component or -1 if not set
2496 Retrieves vertices per row. @return number of vertices per row or -1 if not specified
2497 Retrieves bits per flag. @return integer value of bits per flag or -1 if not found
2498 Creates a PDShading object based on the provided dictionary. @param shadingDictionary COSDictionary containing shading details @return PDShading object or throws IOException for unknown types
2499 Retrieves the length value from the dictionary. @return the length as an integer, defaulting to 40 if not specified
2500 Retrieves tiling type from COS object. @return integer representing tiling type or default value 0
2501 Creates a PDAbstractPattern instance based on the dictionary. @param dictionary PDF dictionary containing pattern details @param resourceCache cache for resources used in pattern creation @return PDAbstractPattern object or throws IOException if unknown type
2502 Retrieves document flags. @return integer value of document flags
2503 Retrieves justification value from annotation. @return justification as string or empty if none
2504 Retrieves permissions value from dictionary. @return integer representing permissions or default value 0 if not found
2505 Retrieves the revision number from the dictionary. @return revision number or default version if not found
2506 Retrieves the length value from the dictionary. @return the length value, defaulting to 40 if not specified
2507 Retrieves the paint type from the COS object. @return integer representing the paint type or 0 if not set
2508 Retrieves annotation flags. @return integer representing annotation flags
2509 Retrieves pre-release status. @return true if pre-release is enabled, false otherwise
2510 Checks if the PDF object has a caption. @return true if the PDF object has a caption, false otherwise
2511 Converts a PDF image to a BufferedImage. @param pdImage the PDF image object @param region the region of interest in the image @param subsampling factor for downsampling @param colorKey color mask array (optional) @return BufferedImage representation of the PDF image @throws IOException if image processing fails
2512 Retrieves raw raster data from a PDF image. @param pdImage the PDF image object @return WritableRaster containing pixel data @throws IOException if image is empty or invalid dimensions
2513 Retrieves stencil image using specified paint. @param paint the paint to apply to the stencil @return BufferedImage of the stencil with applied paint @throws IOException if an I/O error occurs
2514 Calculates the anchor rectangle for a tiling pattern. @param pattern the PD TilingPattern object @return Rectangle2D representing the scaled bounding box @throws IOException if /BBox or other required properties are missing
2515 Generates a BufferedImage from a tiling pattern. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param colorSpace PDColorSpace for rendering colors @param color PDColor for rendering the pattern @param xform AffineTransform for scaling and positioning @param anchorRect Rectangle2D defining the area to render @return BufferedImage of the rendered tiling pattern
2516 Parses stamp annotation appearance XML and constructs a COSDictionary. @param appearanceXML root XML element containing appearance data @return COSDictionary representing the parsed appearance or empty if not handled
2517 Checks if the document is open. @return true if the document is open, false otherwise
2518 Retrieves resources from a PDF page. @return PDResources object containing page resources
2519 Retrieves the rotation angle of a PDF page. @return Rotation angle in degrees, multiples of 90, or 0 if not set
2520 Retrieves the mix flag. @return true if mix is enabled, false otherwise
2521 Retrieves repeat status from an action. @return true if repeat is enabled, false otherwise
2522 Checks if the action is synchronous. @return true if the action is synchronous, false otherwise
2523 Retrieves the 'H' action flag. @return true if 'H' is set, false otherwise
2524 Retrieves the text knockout flag. @return true if text knockout is enabled, false otherwise
2525 Retrieves the alpha source flag. @return true if alpha source is enabled, false otherwise
2526 Retrieves automatic stroke adjustment setting. @return true if enabled, false otherwise
2527 Retrieves stroking overprint control setting. @return true if enabled, false otherwise
2528 Retrieves the media box of the page. @return PDRectangle representing the media box or default U.S. Letter if not found
2529 Retrieves anti-aliasing setting. @return true if anti-aliasing is enabled, false otherwise
2530 Checks if the PDF document is isolated. @return true if the document is isolated, false otherwise
2531 Determines if renaming is enabled. @return true if renaming is enabled, false otherwise
2532 Determines if content should scale to fit annotation. @return true if scaling is enabled, false otherwise
2533 Retrieves the caption status. @return true if caption is enabled, false otherwise
2534 Checks if metadata encryption is enabled. @return true if metadata encryption is enabled, false otherwise
2535 Checks if the object is hidden. @return true if hidden, false otherwise
2536 Checks if the field is volatile. @return true if the field is marked as volatile, false otherwise
2537 Retrieves boolean value for given key. @param key configuration key @param defaultValue default boolean value if key not found @return boolean value associated with key or default value
2538 Checks if the document is a knockout. @return true if the document is a knockout, false otherwise
2539 Retrieves the integer value of 'Q' from the COS object. @return the integer value of 'Q', defaulting to 0 if not found
2540 Checks if window UI should be hidden. @return true if window UI is hidden, false otherwise
2541 Checks if timestamp is required. @return true if timestamp is required, false otherwise
2542 Sets a bit flag for a specified field. @param field the COSName of the field to modify @param bitFlag the bit flag to set or clear @param value true to set the flag, false to clear it
2543 Initializes a PDFObjectStreamParser with the given COSStream and document. @param stream PDF object stream to parse @param document parent PDF document @throws IOException if required entries are missing or invalid
2544 Constructs a PDCIDFontType0 from a font dictionary and parent font. @param fontDictionary the font dictionary @param parent the parent PDType0Font @throws IOException if an I/O error occurs
2545 Constructs a PDCIDFontType2 font. @param fontDictionary PDF dictionary for the font @param parent PDType0Font parent font @param trueTypeFont TrueTypeFont instance, if available @throws IOException if font cannot be read or parsed
2546 Reads a CMap from a COSBase object. @param base the COSBase object containing the CMap data @return a CMap object @throws IOException if an I/O error occurs or the base is neither a COSName nor a COSStream
2547 Retrieves the rotation value. @return integer representing rotation in degrees
2548 Writes the document body, handling encryption if present. @param doc PDF document to process @throws IOException on I/O errors
2549 Retrieves a named value as a string from the COS object. @param name key of the value to retrieve @param defaultValue default value if the key is not found @return the string value associated with the key or the default value
2550 Retrieves the style of an element. @return The style as a string, defaulting to "Solid" if not specified.
2551 Retrieves the structure tree root. @return PDStructureTreeRoot object or null if not found
2552 Retrieves child objects from a PDF dictionary. @return List of child objects or empty list if none found
2553 Returns the PDF encryption settings. Initializes encryption if not already set and document is encrypted. @return PDEncryption object or null if document is not encrypted
2554 Prepares the document for decryption. @throws IOException if an I/O error occurs during decryption setup
2555 Initializes a Type1ShadingContext with specified parameters. @param shading PDShadingType1 object representing the shading @param colorModel ColorModel for rendering @param xform Transformation matrix for device space @param matrix Additional transformation matrix @throws IOException if an I/O error occurs
2556 Retrieves page number from dictionary. @return page number or -1 if not found
2557 Retrieves color space by name. @param name COSName of the color space @return PDColorSpace object @throws IOException if an error occurs during retrieval
2558 Retrieves the top index from the COS object. @return integer value of the top index or 0 if not set
2559 Retrieves COS objects by specified type. @param type PDF object type to filter by @return List of COSObject matching the type
2560 Retrieves embedded file using Unicode key. @return PDEmbeddedFile object or null if not found
2561 Retrieves embedded file for Mac. @return PDEmbeddedFile object or null if not found
2562 Retrieves embedded file associated with DOS. @return PDEmbeddedFile object or null if not found
2563 Removes page-specific resources from the cache.
2564 Retrieves an embedded file from the PDF document. @return PDEmbeddedFile object or null if not found
2565 Retrieves the open count of the COS object. @return The integer value of the open count, defaulting to 0 if not set.
2566 Retrieves embedded file for UNIX. @return PDEmbeddedFile object or null if not found
2567 Retrieves the 'Q' value from the dictionary. @return integer value associated with 'Q', default is 0 if not found
2568 Constructs an AxialShadingContext. @param shading PDShadingType2 object @param colorModel Color model for rendering @param xform Transformation matrix @param matrix Additional transformation matrix @param deviceBounds Device bounds rectangle @throws IOException if an I/O error occurs
2569 Initializes a triangle-based shading context. @param shading PDShading object for shading details @param cm ColorModel for color management @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if an I/O error occurs
2570 Constructs a RadialShadingContext. @param shading PDShadingType3 object @param colorModel Color model for shading @param xform XForm transformation matrix @param matrix Matrix defining the shading space to device space @param deviceBounds Device bounds rectangle @throws IOException if an I/O error occurs
2571 Sets whether sub-filter is required. @param flag true if sub-filter is required, false otherwise
2572 Sets the locked contents flag. @param lockedContents true to lock contents, false otherwise
2573 Sets the toggle no view flag. @param toggleNoView boolean value to set the flag
2574 Prepares a PDF document for encryption. @param doc the PDDocument to be encrypted @throws IOException if an I/O error occurs
2575 Sets locked contents flag. @param lockedContents true to lock contents, false otherwise
2576 Sets legal attestation requirement. @param flag true if attestation is required, false otherwise
2577 Sets the visibility of the object. @param invisible true to make the object invisible, false otherwise
2578 Sets the visibility of the object. @param hidden true to hide, false to show
2579 Sets the printed flag of the COS object. @param printed boolean indicating if the document is printed
2580 Sets the zoom restriction flag. @param noZoom true to disable zooming, false otherwise
2581 Sets filter requirement flag. @param flag indicates if filtering is required
2582 Sets whether reason is required. @param flag true if reason is required, false otherwise
2583 Sets the no rotate flag. @param noRotate true to prevent rotation, false otherwise
2584 Sets the no-view flag in the COS object. @param noView boolean indicating whether to set or clear the no-view flag
2585 Sets the required flag for form field validation. @param flag true if field is required, false otherwise
2586 Sets whether digest method is required. @param flag true if digest method is required, false otherwise
2587 Sets the read-only flag of the PDF document. @param readOnly true to make the document read-only, false otherwise
2588 Sets the locked state of the document. @param locked true to lock, false to unlock
2589 Draws an inline image at specified position and size. @param inlineImage the image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs
2590 Sets the font and font size for PDF text. @param font the PDFont object to use @param fontSize the size of the font @throws IOException if an I/O error occurs
2591 Sets whether adding revision information is required. @param flag true if required, false otherwise
2592 Draws a cloudy ellipse with specified parameters. @param leftOrig bottom-left x-coordinate of the ellipse @param bottomOrig bottom-left y-coordinate of the ellipse @param rightOrig top-right x-coordinate of the ellipse @param topOrig top-right y-coordinate of the ellipse @throws IOException if an I/O error occurs during drawing
2593 Creates a cloudy rectangle on the PDF. @param rd bounding rectangle for the cloud effect
2594 Sets whether issuer is required. @param flag true if issuer is required, false otherwise
2595 Sets whether subject is required. @param flag true if subject is required, false otherwise
2596 Creates a PDF annotation from a COSBase object. @param base the COSBase object representing the annotation @return a PDAnnotation object or throws IOException if unsupported type
2597 Sets optional content properties. @param ocProperties the optional content properties to set
2598 Writes header to PDF document. @param doc COSDocument to write header to @throws IOException if I/O error occurs
2599 Creates a new document if necessary. @throws IOException if an I/O error occurs
2600 Initializes a new PDFRenderer with a given PDDocument. @param document The PDDocument to render
2601 Initializes a new instance of PDFPrintable. @param document PDDocument to be printed @param scaling scaling type for the document @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch for rendering @param center flag to indicate if pages should be centered @param renderer PDFRenderer used for rendering the document
2602 Fixes page destinations in a PDF document. @param destinationDocument the PDF document to fix
2603 Checks if an optional content group is enabled. @param group the group to check @return true if enabled, false otherwise
2604 Constructs a PDActionJavaScript with given JavaScript. @param js JavaScript code to be executed
2605 Retrieves page labels from the document. @return PDPageLabels object or null if not found @throws IOException if an I/O error occurs
2606 Draws a form on the PDF page. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs
2607 Draws an image on the PDF page. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if an I/O error occurs
2608 Draws an image at specified coordinates with given dimensions. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs
2609 Sets a marked content point with properties. @param tag COSName representing the content tag @param propertyList PDPropertyList containing properties @throws IOException if an I/O error occurs
2610 Begins marked content with a tag and property list. @param tag the COSName representing the tag @param propertyList the PDPropertyList containing properties @throws IOException if an I/O error occurs
2611 Applies a shading fill to the current graphics state. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs
2612 Sets graphics state parameters. @param state PDExtendedGraphicsState object to apply @throws IOException if an I/O error occurs while writing
2613 Checks if a group is enabled by name. @param groupName the name of the optional content group @return true if the group is enabled, false otherwise
2614 Increments the revision number by one.
2615 Sets the append-only flag. @param appendOnly true to enable append-only mode, false otherwise
2616 Sets the sort flag for the COS object. @param sort true to enable sorting, false otherwise
2617 Sets the multi-select flag in the COS object. @param multiSelect true to enable multi-selection, false otherwise
2618 Sets the spell check flag. @param doNotSpellCheck true to disable spell check, false to enable
2619 Sets whether to commit changes on selection. @param commitOnSelChange flag indicating if changes should be committed on selection change
2620 Sets the combo flag in the COS object. @param combo boolean value to enable or disable combo mode
2621 Sets the editable flag of the COS object. @param edit true to make the object editable, false otherwise
2622 Sets the read-only flag of the dictionary. @param readonly true to make the dictionary read-only, false otherwise
2623 Sets the field as required. @param required true if field is required, false otherwise
2624 Sets export flag for dictionary. @param noExport true to prevent export, false otherwise
2625 Sets flag indicating if signatures exist. @param signaturesExist true if signatures are present, false otherwise
2626 Creates a push button within an Acrobat form. @param acroForm the parent form containing this button
2627 Initializes a new radio button field. @param acroForm the form containing the radio button
2628 Sets whether radio buttons are in unison. @param radiosInUnison true if radio buttons should be synchronized, false otherwise
2629 Sets the multiline flag for the form field. @param multiline true if the field supports multiple lines, false otherwise
2630 Sets the password flag in the PDF form field. @param password boolean indicating if the field requires a password
2631 Sets the file selection flag. @param fileSelect true to enable file selection, false otherwise
2632 Sets the spell check flag. @param doNotSpellCheck true to disable spell checking, false otherwise
2633 Sets whether to disable scrolling in the PDF form field. @param doNotScroll true to disable scrolling, false otherwise
2634 Sets the 'comb' flag in the COS object. @param comb true to enable comb mode, false otherwise
2635 Sets whether to use rich text. @param richText true if rich text is used, false otherwise
2636 Creates an image from a TIFF file using random access. @param document PDF document to add the image to @param reader RandomAccessRead for reading the TIFF file @param number page number in the TIFF file @return PDImageXObject created from the TIFF page or null if empty
2637 Sets the font to bold. @param bold true to enable bold, false otherwise
2638 Sets whether subject DN is required. @param flag true if required, false otherwise
2639 Sets the toggle for no view. @param toggleNoView flag to enable or disable no view mode
2640 Sets the locked status of an annotation. @param locked true to lock, false to unlock
2641 Returns the number of pages in the document. @return integer count of pages
2642 Sets the "no view" flag for an annotation. @param noView true to hide the annotation, false otherwise
2643 Sets rotation flag for annotation. @param noRotate true to disable rotation, false otherwise
2644 Sets whether OID is required. @param flag true if OID is required, false otherwise
2645 Sets flag to disable zooming. @param noZoom true to disable zooming, false otherwise
2646 Sets the annotation's visibility. @param hidden true to hide, false to show
2647 Sets annotation visibility. @param invisible true to make annotation invisible, false otherwise
2648 Retrieves a page from the PDF document. @param index zero-based index of the page @return PDPage object representing the page
2649 Sets the italic style of the text. @param italic true to apply italic style, false otherwise
2650 Sets whether URL is required. @param flag true if URL is required, false otherwise
2651 Sets whether key usage is required. @param flag true if key usage is mandatory, false otherwise
2652 Adds a new child item at the beginning of the outline. @param newChild PDOutlineItem to be added
2653 Adds a child outline item to the end. @param newChild the new outline item to add
2654 Parses a cross-reference object stream. @param objByteOffset byte offset of the object @param isStandalone true if parsing standalone, false otherwise @return previous XRef table offset or 0 if not found @throws IOException on I/O error
2655 Sets the printed flag of an annotation. @param printed boolean indicating if the document is printed
2656 Sets the annotation to read-only mode. @param readOnly true to make the annotation read-only, false otherwise
2657 Checks if zooming is disabled. @return true if no zoom is allowed, false otherwise
2658 Retrieves line join style from dictionary. @return integer representing line join style
2659 Initializes a GouraudShadingContext. @param shading PDShading object representing the shading @param colorModel ColorModel for rendering colors @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the shading pattern @throws IOException if an I/O error occurs
2660 Creates an input stream with default decode options. @return COSInputStream object @throws IOException if an I/O error occurs
2661 Parses and retrieves an object from a PDF object stream. @param objstmObjNr number of the object stream @param key unique key for the object within the stream @return parsed COSBase object or null if not found @throws IOException if parsing fails
2662 Retrieves the contents as an InputStream. @return InputStream of the contents or empty stream if none available
2663 Constructs a PDCIDFontType2 instance. @param fontDictionary the COS dictionary for the font @param parent the parent PDType0Font @throws IOException if an I/O error occurs
2664 Checks if the document should not be viewed. @return true if no view flag is set, false otherwise
2665 Creates and returns a CID font. @return PDCIDFont object representing the CID font @throws IOException if an I/O error occurs during CID font creation
2666 Checks if the object is hidden. @return true if the object is hidden, false otherwise
2667 Checks if the object is invisible. @return true if invisible, false otherwise
2668 Checks if contents are locked. @return true if contents are locked, false otherwise
2669 Checks if rotation is disabled. @return true if no rotate flag is set, false otherwise
2670 Retrieves an XObject by name. @param name the name of the XObject to retrieve @return PDXObject or null if not found @throws IOException if an I/O error occurs
2671 Initializes tiling paint for a given pattern. @param drawer PageDrawer instance @param pattern PDTilingPattern object @param colorSpace PDColorSpace for painting @param color PDColor to use @param xform AffineTransform for additional transformations @throws IOException if an I/O error occurs
2672 Checks if node is open. @return true if node has open count greater than zero, false otherwise
2673 Checks if the document is read-only. @return true if the document is read-only, false otherwise
2674 Creates a PDField based on the given COSDictionary. @param form PDAcroForm containing the field @param field COSDictionary representing the field @param parent PDNonTerminalField parent of the field @return PDField object or null if invalid
2675 Checks if the annotation has toggle no view flag set. @return true if toggle no view is enabled, false otherwise
2676 Checks if the annotation is locked. @return true if locked, false otherwise
2677 Checks if the annotation is read-only. @return true if the annotation is read-only, false otherwise
2678 Retrieves the line cap style from the dictionary. @return integer representing the line cap style
2679 Checks if rotation is disabled. @return true if no rotate flag is set, false otherwise
2680 Retrieves the structure parent index. @return integer value representing the parent's index
2681 Retrieves the integer value associated with key "P" from the dictionary. @return the integer value or default if not present
2682 Checks if no zoom flag is set. @return true if no zoom is allowed, false otherwise
2683 Retrieves the maximum length value. @return integer representing the maximum length
2684 Retrieves an integer value by key from a COS object. @param name key of the integer value @param defaultValue default value if key not found @return integer value or default if not present
2685 Checks if the annotation is invisible. @return true if the annotation is invisible, false otherwise
2686 Checks if the annotation is hidden. @return true if hidden, false otherwise
2687 Retrieves CIDFontMapping for a given base font and descriptor. @param baseFont name of the base font @param fontDescriptor PDFontDescriptor object describing the font @param cidSystemInfo PDCIDSystemInfo object containing CID system info @return CIDFontMapping object or null if not found
2688 Retrieves the Mac resource fork from PDF parameters. @return Mac resource fork string or null if not found
2689 Retrieves the MAC creator from PDF parameters. @return MAC creator string or null if not found
2690 Retrieves the MAC subtype from PDF parameters. @return the MAC subtype as a String or null if not found
2691 Converts character code to glyph ID. @param code character code @return glyph ID or 0 if not found @throws IOException if an I/O error occurs
2692 Retrieves glyph name for a given Unicode code. @param code Unicode code point @return Glyph name or ".notdef" if not found
2693 Checks if the document is marked as printed. @return true if printed, false otherwise
2694 Applies a protection policy to the document. @param policy the ProtectionPolicy to apply @throws IOException if no suitable security handler is found
2695 Adds a PDF object to the pool, managing keys and streams. @param key unique object identifier @param base PDF object to add @return updated or existing PDF object
2696 Retrieves role map from structure tree root. @return Map containing roles or empty map if root is null
2697 Retrieves MCID from properties. @return MCID value or -1 if properties are null
2698 Retrieves the next key in the parent tree. @return integer value of the next key or default if not set
2699 Retrieves MCID (Marked Content Identifier) from COS object. @return integer value of MCID or default if not present
2700 Converts PDImage to RGB BufferedImage. @param pdImage the source image @param colorKey optional color key array @return RGB BufferedImage representation of the input image @throws IOException if an I/O error occurs
2701 Pushes resources from content stream to current context. @param contentStream source of potential resource overrides @return previous resources before push
2702 Checks if the annotation should not be displayed. @return true if no view flag is set, false otherwise
2703 Calculates transformation for centering an overlay on a page. @param page the PDF page to apply the transformation to @param overlayMediaBox the media box of the overlay content @return AffineTransform for centering the overlay
2704 Validates that the given value is either 'On' or in the set of allowed values. @param value the value to check
2705 Returns the rotated media box of a PDF page. @param page the PDF page to process @return PDRectangle representing the rotated media box
2706 Checks if the item is marked. @return true if marked, false otherwise
2707 Checks if user properties are used. @return true if user properties are enabled, false otherwise
2708 Checks if the entity is marked as a suspect. @return true if the entity is a suspect, otherwise false
2709 Checks if the document is open. @return true if the document is open, false otherwise
2710 Checks if the PDF document has form data. @return true if the document contains form data, false otherwise
2711 Retrieves non-stroking overprint control setting. @return boolean indicating non-stroking overprint status
2712 Retrieves an integer value from a dictionary. @param embeddedDictionary the dictionary to search in @param key the key for the integer value @return the integer value or -1 if not found
2713 Retrieves the denominator value. @return integer representing the denominator
2714 Wraps an OutputStream with a PredictorOutputStream if predictor > 1. @param out the original OutputStream @param decodeParams dictionary containing decoding parameters @return wrapped OutputStream or original if no prediction is needed
2715 Retrieves the structural parents value. @return integer representing structural parents or default value if not set
2716 Retrieves bits per sample from COS object. @return number of bits per sample
2717 Determines if mouse position tracking is enabled. @return true if tracking is enabled, false otherwise
2718 Retrieves an opaque image from a specified region with given subsampling. @param region the area of the image to capture @param subsampling factor for reducing image resolution @return BufferedImage object representing the opaque image @throws IOException if an I/O error occurs during image processing
2719 Writes a PDF document with a signature. @param doc PDDocument to write @param signInterface Signature interface for signing the document @throws IOException if an I/O error occurs
2720 Checks if the field is required. @return true if the field is marked as required, false otherwise
2721 Checks if the field should not be exported. @return true if no export flag is set, false otherwise
2722 Checks if radio buttons are in unison mode. @return true if radios in unison, false otherwise
2723 Checks if text field allows multiple lines. @return true if multiline, false otherwise
2724 Checks if the field requires a password. @return true if password is required, false otherwise
2725 Checks if file selection is enabled. @return true if file select flag is set, false otherwise
2726 Checks if spell checking is disabled. @return true if spell checking is disabled, false otherwise
2727 Checks if scrolling is disabled. @return true if scrolling is disabled, false otherwise
2728 Checks if the field is in comb mode. @return true if the field is in comb mode, false otherwise
2729 Checks if the field supports rich text. @return true if rich text is enabled, false otherwise
2730 Prepares for decryption using provided encryption and decryption material. @param encryption PDF encryption details @param documentIDArray document ID array @param decryptionMaterial decryption material @throws IOException if preparation fails
2731 Retrieves the owner key from a PDF dictionary. @return byte array containing the owner key or null if not present @throws IOException if an I/O error occurs during retrieval
2732 Checks if the "no view" toggle flag is set. @return true if the toggle is active, false otherwise
2733 Calculates displacement vector for given code. @param code identifier for width calculation @return Vector with x-component as width in km, y-component as 0 @throws IOException if width retrieval fails
2734 Checks if the field is read-only. @return true if the field is read-only, false otherwise
2735 Checks if the form field is sorted. @return true if sorted, false otherwise
2736 Checks if the field is editable. @return true if the field can be edited, false otherwise
2737 Checks if sub-filter is required. @return true if sub-filter is required, false otherwise
2738 Checks if filtering is required. @return true if filter is needed, false otherwise
2739 Processes PDF stream operators. @param contentStream the PDF content stream to process @throws IOException if an I/O error occurs
2740 Checks if the document has been printed. @return true if printed, false otherwise
2741 Adds a page to the document's page tree. @param page PDPage object to be added
2742 Removes a node from the PDF document structure. @param node the COSDictionary node to be removed
2743 Calculates the width of a given string. @param text input string to measure @return width of the string in float @throws IOException if an I/O error occurs
2744 Checks if spell check should be disabled. @return true if spell checking is disabled, false otherwise
2745 Sets the hidden status of the object. @param hidden boolean indicating if the object should be hidden
2746 Checks if commit on selection change is enabled. @return true if commit is enabled, false otherwise
2747 Clips a rectangle to the media box. @param box rectangle to clip @return clipped rectangle within media bounds
2748 Checks if the field is a combo box. @return true if it's a combo box, false otherwise
2749 Checks if contents are locked. @return true if contents are locked, false otherwise
2750 Adds an attribute to the PDF object. @param attributeObject the attribute to add
2751 Checks if field supports multiple selections. @return true if multi-select is enabled, false otherwise
2752 Checks if the field is a radio button. @return true if the field is a radio button, false otherwise
2753 Retrieves user key from dictionary. @return byte array of user key or null if not found @throws IOException if an I/O error occurs
2754 Retrieves a pattern by name. @param name the pattern's COSName @return PDAbstractPattern object or null if not found @throws IOException if an I/O error occurs
2755 Checks if field validation is required. @return true if validation is required, false otherwise
2756 Checks if reason is required. @return true if reason is required, false otherwise
2757 Checks if legal attestation is required. @return true if legal attestation is required, false otherwise
2758 Checks if additional revision information is required. @return true if additional revision info is needed, false otherwise
2759 Checks if subject is required. @return true if subject is required, false otherwise
2760 Adds a class name to the PDF document. @param className the class name to add
2761 Checks if issuer is required. @return true if issuer is required, false otherwise
2762 Checks if OID (Object Identifier) is required. @return true if OID is required, false otherwise
2763 Checks if digest method is required. @return true if digest method is required, false otherwise
2764 Checks if key usage is required. @return true if key usage is mandatory, false otherwise
2765 Checks if URL is required. @return true if URL is required, false otherwise
2766 Checks if the font is italic. @return true if the font is italic, false otherwise
2767 Loads an FDF document from a file. @param filename path to the FDF file @return FDFDocument object @throws IOException if file cannot be read
2768 Checks if text is bold. @return true if text is bold, false otherwise
2769 Checks if signatures exist in the document. @return true if signatures exist, false otherwise
2770 Checks if the document is locked. @return true if the document is locked, false otherwise
2771 Checks if the document is append-only. @return true if the document is append-only, false otherwise
2772 Retrieves a shading pattern by name. @param name the name of the shading pattern @return PDShading object or null if not found @throws IOException if an I/O error occurs
2773 Checks if subject DN is required. @return true if subject DN is required, false otherwise
2774 Updates attribute revision number in PDF object. @param attributeObject the attribute to update
2775 Retrieves the shading object. @return PDShading object or null if not found @throws IOException if an I/O error occurs
2776 Checks if the form field is a push button. @return true if the field is a push button, false otherwise
2777 Initializes a PDFPageable with specified settings. @param document PDDocument to be processed @param orientation page orientation (landscape or portrait) @param showPageBorder flag to display page borders @param dpi dots per inch for rendering @param center flag to center content on pages
2778 Loads a PDF document using specified input parameters. @param randomAccessRead source of the PDF data @param password decryption password for the PDF @param keyStore keystore containing encryption keys @param alias key alias in the keystore @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs during loading
2779 Adds a new page to the document. @param page PDPage object to be added
2780 Loads a PDF document from a RandomAccessRead source. @param randomAccessRead the source of the PDF data @param password the password for decrypting the PDF (null if not encrypted) @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs while loading the PDF
2781 Loads a PDF document from a random access read source. @param randomAccessRead the source of the PDF data @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs during loading
2782 Loads a PDF document from byte array. @param input PDF content as byte array @param password decryption password (if encrypted) @param keyStore keystore for decryption (optional) @param alias alias in the keystore (optional) @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs
2783 Initializes a PageExtractor with a given PDF document. @param sourceDocument the PDF document to extract pages from
2784 Sets visual signature from file. @param file File containing the visual signature data @throws IOException if an I/O error occurs
2785 Parses PDF object dynamically from document. @param objKey key of the object to parse @param requireExistingNotCompressedObj flag to check for existing non-compressed objects @return parsed COSBase object or null if not found
2786 Sets fixed pitch flag. @param flag true to enable fixed pitch, false otherwise
2787 Sets serif font style. @param flag true to enable serif, false otherwise
2788 Sets symbolic flag. @param flag true to enable, false to disable
2789 Sets script execution flag. @param flag true to enable script, false otherwise
2790 Sets the non-symbolic flag. @param flag true to enable, false to disable
2791 Sets the italic style flag. @param flag true to enable italic, false otherwise
2792 Constructs a FDFAnnotation from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
2793 Creates an image object from a file. @param document PDF document to add the image to @param file image file to read @param number image number in the document @return PDImageXObject or throws IOException if file cannot be read
2794 Creates an image object from a byte array. @param document PDF document to add the image to @param byteArray image data as bytes @param number image identifier @return PDImageXObject created from the byte array @throws IOException if there is an error processing the byte array
2795 Sets the force bold flag. @param flag true to enable force bold, false otherwise
2796 Sets the small cap flag. @param flag true to enable small cap, false otherwise
2797 Sets the all capitalization flag. @param flag true to enable all caps, false otherwise
2798 Parses XRef tables and trailers in a PDF document. @param document the COSDocument to parse @param startXRefOffset offset of the first xref table @return parsed COSDictionary representing the trailer @throws IOException if parsing fails
2799 Sets visual signature from input stream. @param is input stream containing signature data @throws IOException if an I/O error occurs
2800 Updates the open count of parent nodes recursively. @param delta amount to adjust the open count by
2801 Sets non-stroking color for PDF drawing. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs while writing
2802 Sets the stroking color for PDF content. @param color the PDColor object representing the color to set @throws IOException if an I/O error occurs while writing to the output stream
2803 Retrieves a page from the document by index. @param pageIndex zero-based index of the page @return PDPage object representing the page
2804 Retrieves the first page number from an array. @return page number or -1 if not found
2805 Prepares a PDF document for encryption. @param document the PDDocument to encrypt @throws IOException if an I/O error occurs
2806 Draws an image at specified coordinates. @param inlineImage the image to draw @param x the x-coordinate of the top-left corner @param y the y-coordinate of the top-left corner @throws IOException if an I/O error occurs
2807 Sets the value with validation and appropriate update strategy. @param value new value to be set @throws IOException if an I/O error occurs during processing
2808 Retrieves the crop box of a page. @return PDRectangle representing the crop box or media box if not set
2809 Inserts formatted text into a PDF appearance stream. @param contents content stream to write text @param appearanceStream appearance stream for the field @param font font to use for rendering text @param fontSize size of the font @throws IOException if an I/O error occurs
2810 Adds a PDF structure to the pool. @param current the current COSBase object to process @throws IOException if an I/O error occurs
2811 Retrieves the standard structure type, mapping if necessary. @return Standardized structure type as a String
2812 Creates a descendant CID font from a dictionary. @param dictionary PDF COS dictionary containing font info @param parent parent PDType0Font object @return PDCIDFont instance based on font type @throws IOException if invalid font type or dictionary structure
2813 Collects patches from a PDF shading dictionary. @param xform affine transform for patch coordinates @param matrix transformation matrix for color space @param controlPoints number of control points per patch @return list of Patch objects or empty list if none found
2814 Creates an input stream from the underlying stream. @return COSInputStream representing the input stream @throws IOException if an I/O error occurs
2815 Converts input stream content to text string. @return String representation of input stream content or empty if error occurs
2816 Creates a cloudy ellipse within a given rectangle. @param rd bounding rectangle for the ellipse @throws IOException if an I/O error occurs
2817 Notifies attribute change to associated structure element.
2818 Saves incremental PDF changes to an output stream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
2819 Writes PDF document to output. @param doc PDDocument to be written @throws IOException if an I/O error occurs
2820 Sets default value for COS object. @param value default value to be set
2821 Retrieves the parent markup annotation. @return PDAnnotationMarkup object or null if not found or invalid
2822 Retrieves annotation in reply to this one. @return PDAnnotation object or null if none exists @throws IOException if an I/O error occurs
2823 Retrieves the referenced COSObjectable from the document. @return COSObjectable instance or null if not found
2824 Retrieves annotations from a PDF page filtered by given criteria. @param annotationFilter criteria to filter annotations @return List of PDAnnotation objects matching the filter @throws IOException if an I/O error occurs
2825 Imports optional content properties from source document to target document. @param srcDoc source PDF document containing OC properties
2826 Constructs a PDFPrintable with specified settings. @param document PDDocument to be printed @param scaling Scaling method for the printout @param showPageBorder true if page borders should be shown @param dpi DPI setting for printing @param center true if content should be centered
2827 Decodes a JPX encoded image. @param encoded input stream containing encoded data @param decoded output stream for decoded data @param parameters decoding parameters @param index image index (unused) @param options decode options @return DecodeResult with metadata @throws IOException if an I/O error occurs or unsupported data type is encountered
2828 Fetches UCS-2 CMap for composite or CJK fonts. @throws IOException if an I/O error occurs
2829 Appends a kid to the content list. @param markedContent the content to append
2830 Removes an element at the specified index. @param index position of the element to remove
2831 Decodes input stream using LZW algorithm. @param encoded input stream containing encoded data @param decoded output stream for decoded data @param parameters decoding parameters @param index parameter set index @return DecodeResult object with updated parameters
2832 Retrieves an opaque image with default settings. @return BufferedImage object @throws IOException if an I/O error occurs
2833 Initializes tiling paint with a pattern and transformation. @param drawer object responsible for drawing operations @param pattern tiling pattern to be used @param xform affine transformation to apply @throws IOException if an I/O error occurs
2834 Determines if the field should be combined. @return true if field is a PDTextField with specific properties, false otherwise
2835 Processes a tiling pattern with given color and matrix. @param tilingPattern the tiling pattern to process @param color the color for non-colored patterns @param colorSpace the color space to apply @param patternMatrix the transformation matrix for the pattern @throws IOException if an I/O error occurs
2836 Checks if the all-caps flag is set. @return true if all-caps flag is on, false otherwise
2837 Checks if the text style is italic. @return true if italic, false otherwise
2838 Checks if the flag non-symbolic is set. @return true if non-symbolic flag is on, false otherwise
2839 Checks if the flag indicating script execution is set. @return true if script flag is on, false otherwise
2840 Checks if the file is symbolic. @return true if the file is symbolic, false otherwise
2841 Checks if the font style is serif. @return true if serif, false otherwise
2842 Retrieves a pattern from resources by color name. @param color PDColor object containing the pattern name @return PDAbstractPattern if found, otherwise throws IOException
2843 Creates a PDField from a dictionary. @param form PDF document's acroform @param field dictionary representing the field @param parent parent non-terminal field @return created PDField object
2844 Inserts a new page after a specified previous page in a PDF document. @param newPage the page to be inserted @param prevPage the page after which the new page should be inserted
2845 Processes a PDF content stream, applying transformations and clipping. @param contentStream the PDF content stream to process @throws IOException if an I/O error occurs during processing
2846 Checks if the company is classified as small-cap. @return true if small-cap, false otherwise
2847 Removes a page from the document. @param page PDPage object to be removed
2848 Inserts a new page before an existing page in a PDF document. @param newPage the page to be inserted @param nextPage the page after which the new page will be inserted
2849 Processes annotation appearance by scaling and transforming it. @param annotation the annotation to process @param appearance the appearance stream associated with the annotation @throws IOException if an I/O error occurs
2850 Processes Type 3 character stream. @param charProc character procedure to process @param textRenderingMatrix transformation matrix for text rendering @throws IOException if an I/O error occurs
2851 Processes a transparency group in the current page. @param group PDTransparencyGroup to be processed @throws IOException if an I/O error occurs
2852 Prepares for PDF decryption using provided encryption details and material. @param encryption PDEncryption object containing document encryption info @param documentIDArray COSArray of document IDs @param decryptionMaterial DecryptionMaterial used for decryption @throws IOException if decryption material is incompatible or other I/O issues occur
2853 Checks if the font has fixed pitch. @return true if fixed pitch, false otherwise
2854 Retrieves the space character width of the font. @return Width of space character as float, defaulting to 250 if undetermined
2855 Checks if force bold flag is set. @return true if force bold is enabled, false otherwise
2856 Initializes a FDFAnnotationStamp from an XML element. @param element XML element containing stamp data @throws IOException if there's an error processing the appearance XML
2857 Constructs a square annotation from an XML element. @param element XML element containing annotation data @throws IOException if there is an error processing the element
2858 Initializes a FDFAnnotationFreeText from an XML element. @param element XML element containing annotation data @throws IOException if an I/O error occurs during initialization
2859 Initializes an FDFAnnotationInk from an XML element. @param element XML element containing annotation data @throws IOException if required elements are missing or parsing fails
2860 Constructs a FDFAnnotationLine from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
2861 Constructs an FDFAnnotationLink from an XML element. @param element the XML element representing the annotation @throws IOException if there is an error processing the element
2862 Initializes a polygon annotation from an XML element. @param element the XML element representing the annotation @throws IOException if an I/O error occurs during initialization
2863 Initializes a polyline annotation from an XML element. @param element XML element representing the annotation @throws IOException if there's an issue processing the element
2864 Retrieves all annotations from the PDF document. @return List of PDAnnotation objects @throws IOException if an I/O error occurs during processing
2865 Imports a page from a source document as a form object. @param sourceDoc the source PDF document @param page the page to import @return PDFormXObject representing the imported page
2866 Constructs a PDFPrintable with specified parameters. @param document PDDocument to be printed @param scaling page scaling option @param showPageBorder flag to show or hide page border @param dpi dots per inch for printing quality
2867 Initializes a sound annotation from an XML element. @param element XML element representing the annotation @throws IOException if there's an issue processing the element
2868 Begins a marked content sequence with specified tag and properties. @param tag the content tag @param properties additional properties for the content
2869 Displays a form on the PDF page. @param form the PDFormXObject to be displayed
2870 Sets non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs while writing
2871 Finds the destination page in a PDF document. @param doc the PDF document to search within @return PDPage object or null if not found @throws IOException if an I/O error occurs
2872 Calculates page size and properties for a given PDF document page. @param document the PDF document to process @param page the page number (1-based index)
2873 Imports a PDF page into the current document. @param page PDPage object to import @return Imported PDPage object @throws IOException if an I/O error occurs
2874 Creates a PDF template with the given page. @param page PDPage object to be added as template
2875 Initializes a new PDFPageable with default settings. @param document the PDDocument to be printed
2876 Constructs a PDFPageable object. @param document PDDocument to be paginated @param orientation page orientation (e.g., PORTRAIT or LANDSCAPE)
2877 Creates a PDFPageable instance with default settings. @param document PDDocument to be processed @param orientation page orientation (e.g., PORTRAIT, LANDSCAPE) @param showPageBorder flag to indicate if page borders should be shown
2878 Initializes a new PDFPageable with default settings. @param document PDDocument to be processed @param orientation page orientation @param showPageBorder flag to display page border @param dpi dots per inch for rendering
2879 Loads a PDF document from byte array. @param input PDF file content as byte array @param password document password (null if none) @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs during loading
2880 Loads a PDF document from a file with an optional password. @param file the PDF file to load @param password the password for decrypting the PDF, or null if none @return PDDocument object representing the loaded PDF @throws IOException if an error occurs during loading
2881 Loads a PDF document with optional encryption and keystore. @param file PDF file to load @param password decryption password (null if not encrypted) @param keyStore InputStream of the keystore (null if not needed) @param alias keystore alias (null if not needed) @return PDDocument object @throws IOException if an I/O error occurs
2882 Constructs an FDF annotation for file attachments. @param element XML element representing the annotation @throws IOException if there is an error processing the annotation
2883 Sets the stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs while writing to the content stream
2884 Retrieves the PDF document's trailer dictionary. @throws IOException if an I/O error occurs @return COSDictionary representing the trailer or null if rebuilding fails
2885 Constructs a FDFAnnotationTextMarkup from an XML element. @param element the XML element containing annotation data @throws IOException if required attributes are missing or invalid
2886 Constructs an FDFAnnotationText from an XML Element. @param element XML element containing annotation data @throws IOException if there is an error processing the element
2887 Sets visual signature properties. @param visSignatureProperties object containing signature details @throws IOException if an I/O error occurs
2888 Creates a circle annotation from an XML element. @param element XML element containing annotation details @throws IOException if there is an error processing the element
2889 Removes a specified page from the document. @param page the PDPage object to be removed
2890 Creates an image object from a file. @param document PDF document to add the image to @param file file containing the image data @return PDImageXObject representing the image @throws IOException if there is an error reading the file
2891 Converts a COSBase object to a string. @param base the COSBase object to convert @return string representation of the COSBase or empty string if unsupported type
2892 Recursively finds a field by name in PDF form. @param name array of field names @param nameIndex current index in the name array @return PDField object or null if not found
2893 Retrieves fields from a PDF dictionary. @return List of PDField objects representing form fields
2894 Converts PDColor to Java Paint. @param color PDF color object @return Java Paint object or transparent if unsupported @throws IOException on error
2895 Determines fallback font name based on PDFontDescriptor. @param fontDescriptor font descriptor object @return fallback font name as String
2896 Retrieves symbolic flag from font descriptor. @return Boolean value of symbolic flag or null if descriptor is missing
2897 Splits text into lines based on font and width constraints. @param font PDFont to measure text with @param fontSize size of the font @param width maximum line width @return List of Line objects containing formatted words @throws IOException if an I/O error occurs during text processing
2898 Retrieves the value of a PDF form field. @return The field's value as a String, List<String>, or null if not found @throws IOException if an unknown type is encountered
2899 Processes and displays a glyph at the specified position. @param textRenderingMatrix current text rendering matrix @param font font used for rendering @param code character code to render @param displacement vector displacement for vertical characters @throws IOException if an I/O error occurs
2900 Saves the document to an output stream with specified compression. @param output destination for saving the document @param compressParameters parameters for compression or null for no compression @throws IOException if document is closed or IO error occurs
2901 Notifies change if values differ. @param oldBase previous base object @param newBase current base object
2902 Initializes a page for processing. @param page the PDF page to initialize @throws IllegalArgumentException if page is null
2903 Retrieves the bleed box of a PDF page. @return PDRectangle representing the bleed box or crop box if bleed box is not set
2904 Retrieves the trim box of the page, clipping it to the media box if necessary. @return PDRectangle representing the trimmed page area or crop box if trim box is absent
2905 Retrieves the art box of a PDF page, clipping it to the media box if present. @return PDRectangle representing the art box or crop box if art box is not available
2906 Returns the rotated crop box of a PDF page. @param page the PDF page to process @return PDRectangle representing the rotated crop box
2907 Writes a PDF document. @param doc COSDocument to be written @throws IOException if an I/O error occurs
2908 Retrieves rich text from a PDF field. @return Rich text as String or null if not available
2909 Retrieves text content before a specified element. @return String representation of the text or null if not available
2910 Retrieves the "after" value from a dictionary. @return String representation of the "after" value or null if not applicable
2911 Constructs a FDFAnnotationCaret. @param element XML element to initialize from @throws IOException if an I/O error occurs
2912 Loads ICC color profile from input stream. Handles sRGB and alternate color space fallbacks.
2913 Initializes a compression pool for a PDF document. @param document the PDF document to compress @param parameters optional compression parameters @throws IOException if an I/O error occurs
2914 Sets the value of a form field. @param value the new value to set @throws IOException if an I/O error occurs
2915 Initializes Type5ShadingContext. @param shading PDShadingType5 instance @param cm ColorModel for rendering @param xform AffineTransform for device space to user space @param matrix transformation matrix @param deviceBounds bounding rectangle in device space @throws IOException if an I/O error occurs
2916 Initializes Type4ShadingContext with given parameters. @param shading PDShadingType4 object @param cm ColorModel for the context @param xform AffineTransform for color space conversion @param matrix transformation matrix @param deviceBounds bounds of the device @throws IOException if an I/O error occurs
2917 Initializes a PatchMeshesShadingContext for rendering. @param shading PDMeshBasedShadingType instance @param colorModel ColorModel for rendering @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @param controlPoints Number of control points for patch collection @throws IOException if an I/O error occurs during initialization
2918 Retrieves and processes image samples from a PDF stream. @return 2D array of processed samples or null if an error occurs
2919 Converts object content to byte array. @return byte array representation of the object @throws IOException if an I/O error occurs
2920 Creates a LayoutPage from a given PDPage. @param page the input PDF page @return a LayoutPage object representing the page content @throws IOException if an I/O error occurs while processing the page
2921 Converts a COSBase to its string representation. @param base the COSBase object @return string value of base or empty string if unsupported type
2922 Retrieves rich contents from a PDF object. @return String representation of rich contents or null if not available
2923 Retrieves the action string from a PDF dictionary. @return JavaScript or text content of the action, or null if not applicable
2924 Processes and displays a transparency group. @param form PDTransparencyGroup object to be processed @throws IOException if an I/O error occurs during processing
2925 Retrieves child fields of a PDF form field. @return List of PDField objects representing child fields
2926 Renders a Type 3 glyph using the provided matrix and font. @param textRenderingMatrix transformation matrix for rendering @param font PDType3Font containing character procedures @param code character code to render @param displacement vector for additional positioning (unused)
2927 Builds a PDFontDescriptor from FontMetrics. @param metrics font metrics data @return PDFontDescriptor object configured with metrics
2928 Builds a PDFontDescriptor from a Type1Font. @param type1 the source Type1Font @return a new PDFontDescriptor with font metrics and properties @throws IOException if an I/O error occurs
2929 Retrieves labels for each page index. @return array of labels corresponding to each page
2930 Maps page labels to their indices. @return Map of labels to page indices
2931 Removes a page from the document by its number. @param pageNumber the index of the page to remove
2932 Displays a form on the current page. @param form the PDF form to display @throws IOException if an I/O error occurs
2933 Creates a PDFontDescriptor from a TrueTypeFont. @param ttf the input TrueTypeFont @return PDFontDescriptor object representing the font @throws IOException if required tables are missing or an error occurs
2934 Retrieves normal appearance as content stream. @param compress whether to compress the content stream @return PDAppearanceContentStream object @throws IOException if an I/O error occurs
2935 Creates an image from a byte array. @param document PDF document to add the image to @param byteArray containing image data @return PDImageXObject representing the image @throws IOException if unable to process the byte array
2936 Processes a tiling pattern with specified color and colorspace. @param tilingPattern the tiling pattern to process @param color the color to apply @param colorSpace the colorspace of the color
2937 Creates a content stream for a page in a document. @param document the PDF document @param sourcePage the page to write to @throws IOException if there's an I/O error
2938 Displays an annotation using its appearance stream. @param annotation the PDF annotation to display @throws IOException if an I/O error occurs
2939 Processes a soft mask for transparency group. @param group the transparency group to process @throws IOException if an I/O error occurs
2940 Initializes the appearance content for a widget. @param widget PDAnnotationWidget to be styled @param appearanceCharacteristics visual characteristics of the widget @param appearanceStream stream where the appearance is written @throws IOException if an I/O error occurs
2941 Creates a strike-out annotation. @param element PDF element to annotate @throws IOException if an I/O error occurs
2942 Creates an underlined annotation from an XML element. @param element XML element representing the annotation @throws IOException if there is an error processing the element
2943 Sets font and color for PDF content. @param contents PDAppearanceContentStream to write to @param zeroFontSize default font size if current is zero
2944 Initializes a PDICCBased color space from an ICC profile. @param iccArray COSArray containing the ICC profile data @throws IOException if there is an error loading the ICC profile
2945 Processes a given PDF page. @param page the PDPage object to be processed
2946 Processes a child content stream on a given page. @param contentStream the content stream to process @param page the page associated with the content stream @throws IOException if an I/O error occurs
2947 Initializes a new PDVisibleSignDesigner. @param document PDDocument to add signature to @param image BufferedImage of the signature @param page Page number where the signature will be placed
2948 Initializes a visible signature designer. @param document PDF document to add the signature @param imageStream input stream of the signature image @param page page number where the signature will be placed @throws IOException if there's an issue with reading the image or document
2949 Initializes PDFPrintable with specified parameters. @param document PDDocument to be printed @param scaling scaling strategy for printing @param showPageBorder flag to indicate if page borders should be shown
2950 Loads a PDF document from byte array. @param input PDF content as byte array @return PDDocument instance @throws IOException if loading fails
2951 Constructs a Type7ShadingContext. @param shading PDShadingType7 instance @param colorModel Color model for rendering @param xform Transformation matrix @param matrix Additional transformation matrix @param deviceBounds Device bounds rectangle @throws IOException if an I/O error occurs
2952 Initializes a Type6ShadingContext. @param shading PDShadingType6 object representing the shading @param colorModel ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the pattern's geometry @param deviceBounds Rectangle specifying the bounds of the device area @throws IOException if an I/O error occurs during initialization
2953 Appends a form as a new layer to a target page. @param targetPage the page to which the form is added @param form the form XObject to append @param transform transformation matrix for the form @param layerName name of the new layer @return PDOptionalContentGroup representing the created layer @throws IOException if an I/O error occurs
2954 Retrieves bytes from XFA or COSStream. @return byte array containing data, empty if not applicable @throws IOException on I/O error
2955 Recursively interpolates samples based on coordinates. @param coord current coordinate array @param step current interpolation step @return interpolated float array of samples
2956 Constructs a PDFunctionType4 from a COSBase stream. @param functionStream the COSBase object containing the function data @throws IOException if an I/O error occurs during parsing
2957 Writes XML representation of a field to the given writer. @param output Writer object to write XML to @throws IOException if an I/O error occurs
2958 Retrieves rich content from annotation. @return rich content as string or empty if not present
2959 Checks if XFA is dynamic. @return true if XFA exists and no fields are present; false otherwise
2960 Retrieves a FontBoxFont by base name or fallback. @param baseFont primary font name @param fontDescriptor font descriptor for fallback @return FontMapping object with found or fallback font
2961 Retrieves TrueType font for given base font and descriptor. @param baseFont base font name @param fontDescriptor PDFontDescriptor object @return FontMapping with TrueTypeFont or fallback font
2962 Determines if a font is symbolic. @return Boolean indicating if the font is symbolic or null if unsure.
2963 Reads font encoding from dictionary. Handles COSName and COSDictionary cases, with fallbacks.
2964 Calculates font size for text within a content rectangle. @param font the PDFont to be used @param contentRect the PDRectangle where text will fit @return calculated font size or default if auto-sizing @throws IOException if an I/O error occurs
2965 Formats text content by wrapping lines and aligning text. Throws IOException if an I/O error occurs during formatting.
2966 Initializes a new FDFAnnotationSquiggly. @param element PDF element to be annotated @throws IOException if an I/O error occurs
2967 Retrieves rich text value. @return Rich text string or null if not available
2968 Constructs a highlight annotation. @param element PDF element to annotate @throws IOException if an I/O error occurs
2969 Loads a PDF document from a file. @param file the PDF file to load @return the loaded PDDocument object @throws IOException if an I/O error occurs
2970 Saves data to a file with compression. @param file the target file to save to @param compressParameters parameters for compression @throws IOException if an I/O error occurs
2971 Retrieves page format for a given index. @param pageIndex index of the page in the document @return PageFormat object representing the page's format
2972 Processes and clones annotations from a PDF page. @param imported the PDPage to process @throws IOException if an I/O error occurs during processing
2973 Loads a PDF document from a file with a given password. @param file the PDF file to load @param password the password for decrypting the PDF @return PDDocument object representing the loaded PDF @throws IOException if an I/O error occurs
2974 Saves data to an output stream with default compression. @param output destination OutputStream @throws IOException if an I/O error occurs
2975 Retrieves normal appearance content stream. @return PDAppearanceContentStream object @throws IOException if an I/O error occurs
2976 Opens a node if it's not already open.
2977 Closes the node if it is open. Decrements the node count if the node was open.
2978 Retrieves the first page as a layout page from a PDF document. @param doc PDDocument object containing the PDF @return LayoutPage representation of the first page @throws IOException if an I/O error occurs during processing
2979 Renders a glyph based on the font type. @param textRenderingMatrix matrix for text rendering @param font PDFont to be used @param code character code of the glyph @param displacement vector for glyph positioning @throws IOException if an I/O error occurs
2980 Clones the structure tree from a source document to a destination document. @param destinationDocument the document to which the structure tree is cloned @throws IOException if an I/O error occurs during cloning
2981 Updates structure parent entries for a page. @param page the PDPage to update @param structParentOffset offset to adjust structure parents @throws IOException if an I/O error occurs
2982 Writes compressed body of a PDF document. Handles encryption and compression of objects. @param document COSDocument to write @throws IOException if an I/O error occurs
2983 Imports a page from a document as a form. @param sourceDoc the source PDF document @param pageNumber zero-based index of the page to import @return PDFormXObject representing the imported page @throws IOException if an I/O error occurs
2984 Exports form fields to an FDF document. @return FDFDocument containing exported fields @throws IOException if an I/O error occurs
2985 Embeds a Type1 font in a PDF document. @param doc PDF document to embed the font into @param dict Dictionary for the font @param pfbStream InputStream for the PFB font file @param encoding Font encoding, optional @throws IOException if there is an I/O error
2986 Embeds a TrueType font into a PDF document. @param document the PDF document to embed the font into @param dict dictionary for font properties @param ttf the TrueType font to embed @param embedSubset whether to embed a subset of the font @throws IOException if embedding fails or is not permitted
2987 Performs recursive interpolation. @return interpolated values as an array of floats
2988 Extracts matte values from soft mask image. @param softMask the PDImageXObject containing the soft mask @return float array of RGB matte values or null if invalid
2989 Processes a PDF page by setting rotation and handling crop box. @param page the PDPage to process
2990 Parses and returns a PDF document. @return Document object representing the parsed PDF @throws IOException if an I/O error occurs during parsing
2991 Creates a PDType1Font from a document and input stream. @param doc PDF document to associate with the font @param pfbIn InputStream for the PFB file @param encoding character encoding for the font @throws IOException if an I/O error occurs
2992 Initializes a new PDVisibleSignDesigner with the given document source, image, and page. @param documentSource source of the PDF document @param image image to be used as the signature @param page page number where the signature will be placed @throws IOException if an I/O error occurs
2993 Creates a PDF function from a COSBase object. @param function the base object representing the function @return PDFunction instance or throws IOException for invalid input
2994 Determines if the font is symbolic. @return true if the font is symbolic, false otherwise
2995 Checks if the PDF form is dynamic XFA. @param acroForm the PDF AcroForm to check @return true if the form is dynamic XFA, false otherwise
2996 Constructs an FDFDictionary from an XML Element. @param fdfXML XML element containing FDF data
2997 Creates a PDImageXObject from a BufferedImage. @param document PDF document to add the image to @param image source image @return PDImageXObject representation of the image @throws IOException if an I/O error occurs
2998 Processes a PDF page, importing it into the destination document. Handles resource management and annotation processing. @param page PDPage object to be processed @throws IOException if an I/O error occurs during processing
2999 Embeds TrueType font in a PDF document. @param document PDF document to embed font into @param dict font dictionary @param ttf TrueType font object @param encoding character encoding @throws IOException if embedding fails
3000 Constructs a PDCIDFontType2Embedder. @param document PDF document @param dict font dictionary @param ttf TrueTypeFont object @param embedSubset subset embedding flag @param parent PDType0Font parent font @param vertical vertical text flag @throws IOException if an I/O error occurs
3001 Initializes a PDFont with the given dictionary. @param fontDictionary COSDictionary containing font data
3002 Constructs a PDFPrintable with default settings. @param document PDDocument to be printed @param scaling scaling type for printing
3003 Creates a PDICCBased color space from an ICC array. @param iccArray ICC profile data @param resources PDF resources @return PDICCBased color space instance @throws IOException if there's an issue reading the ICC data
3004 Draws a PDF page with annotations. @param g Graphics2D context for drawing @param pageSize dimensions of the page to draw @throws IOException if an I/O error occurs
3005 Builds a PDF document with a visible signature. @param properties configuration for the signature design @return InputStream containing the generated PDF @throws IOException if an I/O error occurs during PDF creation
3006 Saves a file with default compression. @param file the file to be saved @throws IOException if an I/O error occurs
3007 Saves data to a file with specified compression parameters. @param fileName path to the file where data will be saved @param compressParameters configuration for compression @throws IOException if an I/O error occurs during saving
3008 Inserts generated appearance for a PDF annotation widget. @param widget the annotation widget to process @param appearanceStream the appearance stream to modify @param output the output stream for writing content @throws IOException if an I/O error occurs
3009 Imports FDF field data into the current field. @param fdfField FDF field to import data from @throws IOException if an error occurs during import
3010 Writes XML representation of the FDF document. @param output Writer to write XML data @throws IOException if an I/O error occurs
3011 Initializes a new instance of PDVisibleSignDesigner. @param documentSource source PDF document for reading @param imageStream stream containing the signature image @param page page number to apply the signature @throws IOException if an I/O error occurs
3012 Draws an image at specified coordinates. @param image PDImageXObject to be drawn @param x X-coordinate of the top-left corner @param y Y-coordinate of the top-left corner @throws IOException if an I/O error occurs
3013 Initializes iterator with fields from a PDF form. @param form the PDAcroForm containing fields to iterate over
3014 Loads a PDF document from a file. @param file the PDF file to load @return the loaded PDDocument object @throws IOException if an I/O error occurs while loading the document
3015 Constructs an FDFCatalog from an XML Element. @param element XML element representing the FDF data
3016 Creates a PDTrueTypeFont instance. @param document PDF document to associate with @param ttf TrueType font to use @param encoding character encoding @param closeTTF whether to close the TTF after processing @throws IOException if an I/O error occurs
3017 Initializes a PDType0Font from TrueType font. @param document PDF document to embed font in @param ttf TrueTypeFont object @param embedSubset whether to subset the font @param closeTTF whether to close the TTF after processing @param vertical whether to enable vertical substitutions @throws IOException if an I/O error occurs
3018 Constructs a PDType0Font from a given COSDictionary. @param fontDictionary the dictionary representing the font @throws IOException if required font data is missing or invalid
3019 Constructs a PDSimpleFont from a COSDictionary. @param fontDictionary dictionary containing font information
3020 Constructs a PDType1Font from an input stream. @param doc PDDocument to associate the font with @param pfbIn InputStream containing the PFB data @throws IOException if there is an error reading the input stream
3021 Initializes a new PDVisibleSignDesigner with an image and file. @param filename path to the PDF file @param imageStream input stream for the signature image @param page page number in the PDF (1-based index) @throws IOException if there is an issue reading the file or stream
3022 Initializes a new instance of PDVisibleSignDesigner. @param filename path to the PDF file @param image BufferedImage to be used as a signature @param page page number where the signature will be placed @throws IOException if there is an issue with file access
3023 Renders a PDF page as an image. @param pageIndex index of the page to render @param scale scaling factor for rendering @param imageType type of image to render @param destination where to draw the rendered image @return BufferedImage representing the rendered page @throws IOException if rendering fails
3024 Processes pages within a specified range. @throws IOException if an I/O error occurs
3025 Renders a PDF page to a graphics context. @param pageIndex index of the page to render @param graphics target graphics context for rendering @param scaleX horizontal scaling factor @param scaleY vertical scaling factor @param destination where the rendered content is drawn @throws IOException if an I/O error occurs during rendering
3026 Constructs a PDFPrintable with specified document and scaling. @param document PDDocument to be printed
3027 Returns an iterator over form fields. @return Iterator of PDField objects
3028 Saves data to a file. @param fileName name of the file to save to @throws IOException if an I/O error occurs
3029 Builds a PDF signature using template creation. @throws IOException if an I/O error occurs during signature building
3030 Creates a PDImageXObject from a file by content. @param file the image file to process @param doc the PDDocument to add the image to @return PDImageXObject created from the file @throws IOException if an I/O error occurs or unsupported image type is encountered
3031 Creates an image object from a file using its extension. @param file the input image file @param doc the PDF document to add the image to @return PDImageXObject created from the file @throws IOException if file reading fails or unsupported format
3032 Retrieves or creates a tint transform function. @return PDFunction representing the tint transformation @throws IOException if there's an issue creating the function
3033 Initializes a PDDeviceN object with given device array and resources. @param deviceN COSArray representing the DeviceN color space @param resources PDResources for resource management @throws IOException if an I/O error occurs during initialization
3034 Initializes a PDSeparation from a COSArray and resources. @param separation COSArray containing separation details @param resources PDResources for color space creation @throws IOException if tint transform has invalid output parameters
3035 Processes a PDF page within specified range and bookmark limits. @param page PDPage to be processed
3036 Retrieves the PDF function. @return PDFunction object or null if not found @throws IOException if an I/O error occurs
3037 Retrieves the transfer function for image processing. @return PDFunction object representing the transfer function, or null if none exists @throws IOException if an error occurs while reading the PDF
3038 Evaluates input using a stitching function. @param input single-value input array @return evaluated result as float array @throws IOException if partition not found or other I/O error occurs
3039 Writes XML representation of FDF to given Writer. @param output destination Writer for XML data @throws IOException if an I/O error occurs
3040 Retrieves an image from the PDF document. @param region the area to extract, null for full image @param subsampling factor for reducing image resolution @return BufferedImage object or null if not found @throws IOException if an I/O error occurs
3041 Initializes a PDIndexed object with an array and resources. @param indexedArray COSArray containing indexed color data @param resources PDResources for resource management @throws IOException if an I/O error occurs during initialization
3042 Evaluates input values using linear interpolation. @param input array of input values @return array of interpolated output values @throws IOException if decoding fails
3043 Retrieves functions array from PDF object. @return PDFunction array representing functions @throws IOException if mandatory /Function element is invalid
3044 Returns the default Helvetica font. @return PDType1Font object representing Helvetica
3045 Loads a Type 0 font from a TrueType font. @param doc PDF document to associate the font with @param ttf TrueTypeFont object to load @param embedSubset true if only a subset of the font should be embedded @return PDType0Font object representing the loaded font @throws IOException if an error occurs during loading
3046 Initializes a PDTrueTypeFont from a font dictionary. @param fontDictionary the COSDictionary containing font data @throws IOException if an I/O error occurs during font parsing
3047 Initializes a PDType1CFont from a COSDictionary. @param fontDictionary the font dictionary containing font data @throws IOException if an I/O error occurs during font parsing
3048 Constructs a Type1 font from a dictionary. @param fontDictionary PDF dictionary containing font info @throws IOException if font data is unavailable or damaged
3049 Initializes a Type 3 PDF font. @param fontDictionary dictionary containing font data @param resourceCache cache for resources @throws IOException if an I/O error occurs
3050 Loads a Type 0 font from the given document and input stream. @param doc PDF document to associate with the font @param randomAccessRead source of the font data @param embedSubset whether to subset the embedded font @param vertical true if the font is for vertical text @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
3051 Loads a vertical TrueType font into a PDF document. @param doc the PDF document to add the font to @param ttf the TrueType font to load @param embedSubset whether to subset the embedded font @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
3052 Loads a true type font into a PDF document. @param doc the PDF document to add the font to @param ttf the TrueTypeFont object to load @param encoding the character encoding for the font @return PDTrueTypeFont object representing the loaded font @throws IOException if an I/O error occurs during loading
3053 Loads a TrueType font from a PDF document. @param doc the PDF document to load the font into @param randomAccessRead source of the TrueType font data @param encoding character encoding for the font @return PDTrueTypeFont object representing the loaded font @throws IOException if an error occurs during loading
3054 Constructs an FDFDocument from a given XML Document. @param doc XML document representing the FDF data @throws IOException if the root element is not 'xfdf'
3055 Creates an image object from file path. @param imagePath path to the image file @param doc PDF document to add the image to @return PDImageXObject created from the file @throws IOException if file cannot be read
3056 Renders a page to a graphics context. @param pageIndex index of the page to render @param graphics Graphics2D object for rendering @param scaleX horizontal scaling factor @param scaleY vertical scaling factor @throws IOException if an I/O error occurs
3057 Renders an image of a specified page. @param pageIndex zero-based index of the page to render @param scale factor for scaling the rendered image @param imageType type of image to render (e.g., JPEG, PNG) @return BufferedImage object representing the rendered page @throws IOException if an I/O error occurs during rendering
3058 Retrieves all signature fields from the document. @return List of PDSignatureField objects
3059 Refreshes appearances of terminal fields in the PDF document. @throws IOException if an I/O error occurs during processing
3060 Writes XFDF XML to the specified Writer. @param output Writer to write XML data @throws IOException if an I/O error occurs
3061 Splits a PDF document into multiple documents. @param document the source PDF document to split @return list of split PDDocument objects
3062 Constructs a PDIndexed with an array and no base dictionary. @param indexedArray COSArray representing indexed values @throws IOException if there is an error in processing the array
3063 Evaluates input through a series of functions. @param input array of input values @return array of evaluated results, clamped between 0 and 1 @throws IOException if an I/O error occurs during function evaluation
3064 Retrieves an image with default settings. @return BufferedImage object or null if not found @throws IOException if an I/O error occurs
3065 Processes each page in the document, handling bookmarks and extracting text. @param pages PDPageTree containing all pages to be processed @throws IOException if an I/O error occurs during processing
3066 Creates a PDColorSpace from a COSBase object. @param colorSpace the COSBase representing the color space @param resources the PDResources containing color space definitions @param wasDefault flag indicating if this is a default color space @return the created PDColorSpace object @throws IOException if an error occurs during creation
3067 Retrieves a PDField by its fully qualified name. @param fullyQualifiedName the unique identifier of the field @return PDField object or null if not found
3068 Enables or disables caching of fields. @param cache true to enable caching, false to disable
3069 Returns an iterator over form fields. @return Iterator of PDField objects
3070 Renders image from page index with specified scale. @param pageIndex zero-based index of the page to render @param scale factor for image resizing @return BufferedImage object representing the rendered image @throws IOException if an I/O error occurs during rendering
3071 Renders an image from a specified page with given DPI. @param pageIndex index of the page to render @param dpi desired dots per inch for rendering @return BufferedImage object representing the rendered image @throws IOException if an I/O error occurs during rendering
3072 Renders an image from a specified page with given DPI. @param pageIndex index of the page to render @param dpi desired dots per inch for rendering @param imageType type of image to render @return rendered BufferedImage @throws IOException if an I/O error occurs during rendering
3073 Renders a page to a graphics context with specified scaling. @param pageIndex index of the page to render @param graphics Graphics2D context for rendering @param scale scaling factor for rendering @throws IOException if an I/O error occurs during rendering
3074 Extracts a sub-document from the source document. @return PDDocument containing the extracted pages or an empty document if invalid range
3075 Saves XFDF data to a writer. @param output Writer to save the XFDF data @throws IOException if an I/O error occurs
3076 Renders text from a byte array using current graphics state. @param string byte array containing encoded text @throws IOException if an I/O error occurs
3077 Loads TrueType font from a file. @param doc PDF document to associate the font with @param file file containing the font data @param encoding character encoding for the font @return PDTrueTypeFont object representing the loaded font @throws IOException if an I/O error occurs during loading
3078 Constructs a PDMMType1Font from a COSDictionary. @param fontDictionary dictionary containing font data @throws IOException if there is an error processing the font data
3079 Loads TrueType font from an input stream. @param doc PDF document to associate the font with @param input stream containing the font data @param encoding character encoding for the font @return PDTrueTypeFont object @throws IOException if an I/O error occurs
3080 Loads a Type 0 font from a PDF document. @param doc the PDF document to load the font into @param file the file containing the font data @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs while loading the font
3081 Loads an XFDF document from an input stream. @param input stream containing XFDF data @return FDFDocument object representing the loaded XFDF @throws IOException if an I/O error occurs while reading the input stream
3082 Loads a Type 0 font from an input stream. @param doc PDF document to associate the font with @param input stream containing the font data @param embedSubset flag indicating whether to subset the font @return PDType0Font object @throws IOException if there is an error reading the input stream
3083 Loads a vertical PDType0Font from a file. @param doc the PDDocument to add the font to @param file the font file @return the loaded PDType0Font @throws IOException if there's an issue reading the file
3084 Loads a vertical PDType0Font from an input stream. @param doc PDDocument to add the font to @param input InputStream containing font data @return PDType0Font object @throws IOException if there's an error reading the input stream
3085 Loads a vertical font from an input stream. @param doc PDF document to associate the font with @param input input stream containing the font data @param embedSubset whether to subset the embedded font @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs
3086 Constructs a PDType3Font from a COSDictionary. @param fontDictionary the font dictionary to use @throws IOException if an I/O error occurs
3087 Adds a signature to the PDF document. @param sigObject PDSignature object representing the signature @param signatureInterface interface for handling the signature @param options SignatureOptions for configuring the signature process @throws IOException if an I/O error occurs during processing
3088 Writes text from a PDF document to an output stream. @param doc PDDocument containing the text @param outputStream Writer for outputting the text @throws IOException if I/O operations fail
3089 Retrieves signature dictionaries from the document. @return List of PDSignature objects representing document signatures
3090 Imports FDF fields into the document. @param fdf FDFDocument containing fields to import
3091 Evaluates a function with a single input value. @param inputValue the input to the function @return array of results from the function evaluation @throws IOException if an I/O error occurs during evaluation
3092 Renders transparency group onto graphics. @param form Transparency group to render @param graphics Graphics2D context for rendering @throws IOException if an I/O error occurs
3093 Retrieves the non-stroking paint with soft mask applied. @return Paint object for non-stroking operations @throws IOException if an I/O error occurs
3094 Evaluates function on input values and converts to RGB. @param values array of input values for the function @return RGB color value as an integer @throws IOException if there is an error during evaluation or conversion
3095 Renders an image from the specified page index. @param pageIndex zero-based index of the page to render @return rendered image as a BufferedImage object @throws IOException if an I/O error occurs during rendering
3096 Loads a Type 0 font from an input stream. @param doc PDF document to associate the font with @param input stream containing the font data @return PDType0Font object @throws IOException if an I/O error occurs
3097 Creates a PDFont from a COSDictionary. @param dictionary font dictionary @param resourceCache resource cache for type 3 fonts @return created PDFont object @throws IOException if an error occurs during font creation
3098 Loads an XFDF document from a file. @param filename path to the XFDF file @return FDFDocument object @throws IOException if file cannot be read
3099 Displays a text string. @param string byte array containing the text to display @throws IOException if an I/O error occurs during display
3100 Loads an XFDF document from a file. @param file the XFDF file to load @return FDFDocument object representing the loaded document @throws IOException if an I/O error occurs while reading the file
3101 Renders a page to a graphics context. @param pageIndex index of the page to render @param graphics target graphics context @throws IOException if an I/O error occurs during rendering
3102 Processes text strings from a COSArray. @param array containing text and spacing commands
3103 Adds a signature to the document. @param sigObject PDSignature object representing the signature @param options SignatureOptions for additional configuration @throws IOException if an I/O error occurs
3104 Retrieves the last signature dictionary. @return PDSignature object or null if no signatures exist
3105 Saves incremental PDF for external signing. @param output stream to write the signed PDF @return ExternalSigningSupport object for further signing steps @throws IOException if an I/O error occurs
3106 Extracts text from a PDF document. @param doc PDDocument object representing the PDF @return String containing the extracted text @throws IOException if an I/O error occurs during processing
3107 Adds a signature to the document. @param sigObject PDSignature object representing the signature @param signatureInterface interface for handling signature operations @throws IOException if an I/O error occurs
3108 Saves XFDF data to a file. @param fileName the file where XFDF data will be saved @throws IOException if an I/O error occurs
3109 Draws a glyph from the given font and path. @param path the shape representing the glyph @param font the font containing the glyph @param code the character code of the glyph @param displacement the horizontal displacement vector @param at the affine transform for scaling @throws IOException if an I/O error occurs
3110 Adds a signature to the document. @param sigObject PDSignature object representing the signature @throws IOException if an I/O error occurs
3111 Creates a font from a COSDictionary. @param dictionary font description dictionary @return PDFont object @throws IOException if an I/O error occurs
3112 Retrieves a PDFont by name. @param name the COSName of the font @return the PDFont object or null if not found @throws IOException if an error occurs during retrieval
3113 Fills and strokes the current path. @param windingRule rule for determining the interior of the path @throws IOException if an I/O error occurs
3114 Saves XFDF data to a file. @param fileName path where the file will be saved @throws IOException if an I/O error occurs
3115 Flattens all interactive fields in the document. Throws IOException if an I/O error occurs.
3116 Copies necessary resources to the given appearance stream. @param appearanceStream target PDAppearanceStream for copying resources @throws IOException if an I/O error occurs
3117 Appends pages and content from a source PDF to a destination PDF. @param destination the target PDF document @param source the source PDF document to append @throws IOException if an I/O error occurs
3118 Converts PNG image data to PDImageXObject. @param doc PDDocument to add the image to @param imageData byte array containing PNG image data @return PDImageXObject or null if conversion fails
3119 Retrieves the font from a PDF setting. @return PDFont object or null if not found @throws IOException if an error occurs during font creation
3120 Sets the appearance content for a widget. @param widget the annotation widget to modify @param appearanceStream the appearance stream to update @throws IOException if an I/O error occurs
3121 Creates PDImageXObject from byte array. @param document PDF document to add the image to @param byteArray image data as byte array @param name image name @param customFactory optional custom factory for specific formats @return PDImageXObject or throws IllegalArgumentException if unsupported
3122 Copies graphics state parameters into a PDGraphicsState object. @param gs the target PDGraphicsState to copy parameters into @throws IOException if an I/O error occurs
3123 Processes appearance stream operators. @param content byte array of the PDF content @throws IOException if parsing fails
3124 Creates an image from a byte array. @param document PDF document to add the image to @param byteArray image data as bytes @param name image name @return PDImageXObject representing the image @throws IOException if there's an error processing the image
3125 Initializes PDDefaultAppearanceString with default appearance and resources. @param defaultAppearance COSString representing the default appearance @param defaultResources PDResources object containing default resources @throws IOException if required entries are missing or invalid
3126 Retrieves the default appearance string. @return PDDefaultAppearanceString object @throws IOException if an I/O error occurs
3127 Sets the appearance value for a PDF field. @param apValue The appearance value to be set. @throws IOException If an I/O error occurs.
3128 Initializes AppearanceGeneratorHelper with a PDVariableText field. Validates and ensures AcroForm resources. Fetches the default appearance string. @param field PDVariableText field to process @throws IOException if processing fails
