1 Initializes an instance of the `OperatorName` class with default values.
2 Initializes an instance of the OperatorProcessor with the provided PDFStreamEngine context. @param context the associated PDFStreamEngine context
3 Default constructor for COSBase instances.
4 Initializes an instance of the COSUpdateState class with provided update information. @param updateInfo COSUpdateInfo object containing update details
5 Initializes an instance of the `DecodeOptions` class with default values.
6 Initializes a DecodeOptions instance with a specified source region. @param sourceRegion rectangle defining the source region
7 Initializes DecodeOptions instance with default subsampling settings. @param subsampling X and Y subsampling factor value
8 Initializes an instance of the class with default values.
9 Initializes a new instance of the PageExtractor class with the specified PDF document and page range. @param sourceDocument the input PDF document @param startPage starting page number (inclusive) @param endPage ending page number (inclusive)
10 Initializes an instance of the XrefParser class with a COSParser. @param cosParser COSParser object for cross-reference data
11 Initializes an instance of the class with the specified reference type. @param type XReferenceType enum value
12 Initializes an instance of the ContentStreamWriter class with the specified output stream. @param out the OutputStream to write content to
13 Initializes an instance of the class with stable cache enabled. @param enableStableCache whether to enable stable caching
14 Initializes an instance of the class with a given PDF document and catalog dictionary. @param doc the PDF document to be managed @param rootDictionary the catalog dictionary of the PDF document
15 Initializes an instance of the class with a given PDF document's metadata. @param dic COSDictionary representing the document's metadata
16 Initializes an instance of the class with a given COSDictionary. @param dict COSDictionary containing named destinations
17 Initializes an instance of the class with a document catalog and name dictionary. @param cat Document catalog @param names Name dictionary within the PDF document
18 Initializes a PDPage instance from a COSDictionary representation. @param pageDictionary dictionary containing page metadata
19 Initializes an instance of the PDPage class with a COSDictionary and ResourceCache. @param pageDictionary dictionary containing page data @param resourceCache cache for shared resources
20 Initializes COSDictionaryMap with a standard map and a COSDictionary. @param actualsMap the standard map to integrate @param dicMap the COSDictionary to store key-value pairs in PDF object format
21 Initializes an instance of PDDictionaryWrapper with the given COSDictionary. @param dictionary PDF dictionary structure to be wrapped
22 Initializes a PDNameTreeNode instance from a COSDictionary object. @param dict COSDictionary containing tree structure and limits
23 Initializes a PDNumberTreeNode instance from a COS dictionary and a target class for the value. @param dict COS dictionary containing tree data @param valueClass Class of the numeric values in the tree
24 Initializes a PDPageLabelRange instance from a COSDictionary object.
25 Initializes a PDRange instance from a COSArray object. @param range COSArray containing range data
26 Initializes a PDRange instance from a COSArray and index position. @param range COSArray containing the numerical range data @param index index within the array where the range starts
27 Initializes PDStream instance from COSStream object.
28 Initializes an instance of the class with a given COSDictionary. @param dic COSDictionary containing marking information
29 Initializes an instance with COSDictionary containing marked content data. @param dictionary COSDictionary object representing marked content reference
30 Initializes an instance of the class with the given COSDictionary. @param theDictionary the PDF document structure to reference
31 Initializes a PDStructureNode instance with a COSDictionary. @param dictionary COSDictionary containing structure node data
32 Initializes an instance of the Revisions class with default values.
33 Initializes a PDPropertyList instance with a COSDictionary object. @param dict the dictionary to associate with the property list
34 Initializes a PDBoxStyle instance from a COSDictionary. @param dic COSDictionary containing styling attributes
35 Initializes an instance with default permissions.
36 Initializes an instance of the class with specified permission bits. @param permissions integer representation of access rights
37 Initializes an instance of the class with a given COSDictionary. @param d COSDictionary containing cryptographic filter parameters
38 Initializes an instance of the RC4Cipher class with default values.
39 Initializes an instance of the class with a COSDictionary annotation. @param a COSDictionary containing annotation data
40 Initializes an instance of FDFCatalog with the provided COSDictionary. @param cat the Form Data Format (FDF) catalog dictionary
41 Initializes an instance of the class with the provided COSDictionary. @param fdfDictionary Forms Data Format (FDF) dictionary to encapsulate
42 Initializes an instance of FDFField with a COSDictionary.
43 Initializes an instance of FDFIconFit with the provided COS dictionary. @param f COS dictionary containing icon fitting configuration
44 Initializes an instance of the class with a COSDictionary containing JavaScript data. @param javaScript COSDictionary object holding JavaScript metadata
45 Initializes an instance of FDFNamedPageReference with COSDictionary. @param r COS dictionary representing the PDF document's Forms Data Format context
46 Initializes an instance of FDFOptionElement from a COSArray object. @param o COSArray containing FDF option data
47 Initializes an instance of the FDFPage class with the given COSDictionary. @param p COSDictionary containing the page's data
48 Initializes an instance of FDFPageInfo with the provided COSDictionary. @param p COSDictionary containing page information
49 Initializes an instance of the FDFTemplate class with a given COSDictionary.
50 Initializes a PDFontDescriptor instance from a given COSDictionary. @param desc font descriptor dictionary
51 Initializes a PDFontSetting instance with the provided font settings. @param fs array of font settings
52 Initializes an instance of the class with default values.
53 Initializes a BlendMode instance with specified blending channel and function. @param name COSName identifier @param blendChannel BlendChannelFunction to apply @param blend BlendFunction to use
54 Initializes a PDColor instance with the given pattern name and color space. @param patternName COSName representing the color's pattern @param colorSpace PDColorSpace associated with the color
55 Initializes PDDeviceNAttributes instance from COSDictionary. @param attributes COSDictionary containing DeviceN attribute data
56 Initializes a PDDeviceNProcess instance with provided color space attributes. @param attributes COSDictionary containing device-dependent color space data
57 Initializes a PDGamma instance from a COSArray color value. @param array COSArray containing RGB color components
58 Initializes PDTristimulus with tristimulus values from COSArray. @param array COSArray containing X, Y, and Z color values
59 Initializes an instance of the class with a given COSDictionary. @param dic transparency group attributes in COSDictionary format
60 Initializes an instance of the class with the given optional content properties dictionary. @param props COSDictionary containing optional content properties
61 Initializes an instance of PDAbstractPattern from a COSDictionary. @param dictionary COSDictionary containing pattern data
62 Initializes an instance of PDShading from a given PDF shading dictionary. @param shadingDictionary COSDictionary containing shading properties
63 Initializes an instance of the class with provided COSDictionary and ResourceCache. @param dictionary extended graphics state properties in PDF format @param resourceCache reference to shared resources
64 Initializes a PDSoftMask instance from a COSDictionary and ResourceCache. @param dictionary dictionary containing soft mask properties @param resourceCache cache for accessing resources
65 Initializes an instance of the class with a COSDictionary representing the PDF action. @param a COSDictionary containing action details
66 Private constructor to prevent instantiation of utility class.
67 Initializes an instance of PDAdditionalActions with a given COSDictionary. @param a COSDictionary containing action data
68 Initializes an instance of `PDAnnotationAdditionalActions` with the provided annotation dictionary. @param a Annotation dictionary to be used for additional actions
69 Initializes an instance of the class with a catalog dictionary. @param a COSDictionary object representing the document catalog
70 Initializes an instance with additional actions from the provided dictionary. @param a COSDictionary containing form field actions
71 Initializes an instance of `PDPageAdditionalActions` with a given COSDictionary. @param a COSDictionary holding additional interactive actions for the PDF page
72 Initializes an instance of PDTargetDirectory with a given COSDictionary. @param dictionary input directory object
73 Initializes an instance of the class with a given COSDictionary. @param dictionary COSDictionary to initialize the URI dictionary with
74 Initializes an instance of PDWindowsLaunchParams with a given COSDictionary. @param p underlying COS dictionary containing launch parameters
75 Initializes an instance of the class with a given COSDictionary. @param dict COSDictionary object containing appearance characteristics
76 Initializes an instance of PDAppearanceDictionary with the given COSDictionary. @param dictionary the appearance attributes to be managed
77 Initializes an instance with the given COSDictionary appearance entry. @param entry COSDictionary object representing the appearance entry
78 Initializes an instance of the class with a given COSDictionary. @param dict COSDictionary containing border effect properties
79 Initializes an instance of PDBorderStyleDictionary with a COSDictionary. @param dict COSDictionary containing border style properties
80 Initializes an instance of the class with the provided COSDictionary object. @param dictionary external data dictionary
81 Initializes a CloudyBorder instance with specified parameters. @param stream PDAppearanceContentStream to render the border @param intensity visual intensity of the border (0.0-1.0) @param lineWidth thickness of the border lines @param rect bounding rectangle for the border shape
82 Initializes an instance of PDPropBuild with a COSDictionary. @param dict input dictionary object
83 Initializes an instance of PDPropBuildDataDict with a given COSDictionary. @param dict input dictionary to manage and manipulate
84 Initializes PDSeedValue instance from COSDictionary. @param dict COSDictionary containing seed value information
85 Initializes a PDSeedValueCertificate instance from a COSDictionary. @param dict input dictionary containing certificate data
86 Initializes an instance of the class with a given COSDictionary. @param dict dictionary containing seed value configuration
87 Initializes an instance of PDSeedValueTimeStamp with a COSDictionary. @param dict COSDictionary containing timestamp data
88 Initializes an instance of the PDSignature class with a given COSDictionary. @param dict underlying COSDictionary structure
89 Initializes an instance of the `SignatureOptions` class with default values.
90 Initializes the PDFTemplateCreator instance with a specified builder. @param templateBuilder PDFTemplateBuilder object used for configuration
91 Prevents instantiation; class intended as a static utility only.
92 Initializes a PDField instance from an AcroForm, COSDictionary, and optional non-terminal parent. @param acroForm the containing AcroForm @param field the underlying COSDictionary @param parent the hierarchical parent field (optional)
93 Initializes an instance of PDXFAResource with XFA base. @param xfaBase COS representation of XFA resource
94 Initializes an instance of the class with a given COSDictionary. @param dictionary measurement dictionary
95 Initializes PDNumberFormatDictionary instance with COSDictionary. @param dictionary COSDictionary containing formatting options
96 Initializes an instance of the class with the provided COSDictionary. @param dictionary COSDictionary containing viewport settings
97 Initializes a PDThread instance from a COSDictionary object. @param t COSDictionary containing thread information
98 Initializes a PDThreadBead instance from a COSDictionary. @param b COSDictionary representing the thread bead data
99 Initializes an instance of `PDViewerPreferences` with viewer preferences from a COSDictionary object. @param dic COSDictionary containing viewer preferences
100 Initializes a PageDrawerParameters instance with specified PDF renderer, page, and rendering settings. @param renderer PDFRenderer object @param page PDPage object @param subsamplingAllowed boolean indicating subsampling permissions @param destination RenderDestination object @param renderingHints RenderingHints object @param imageDownscalingOptimizationThreshold float optimization threshold
101 Initializes a PositionWrapper instance with the given text position.
102 Initializes a Matrix instance with default transformation values.
103 Initializes a Matrix instance from an array of floats. @param src array containing transformation parameters
104 Initializes a Matrix instance with the given transformation parameters. @param a x-scale factor @param b y-translate value @param c x-translate value @param d y-scale factor @param e x-rotate value (in radians) @param f y-rotate value (in radians)
105 Initializes an instance of the class with default values.
106 Initializes an instance of the class with default values.
107 Registers an OperatorProcessor instance with the PDFStreamEngine. @param op OperatorProcessor to be added
108 Sets the ASCII85 terminator character. @param term character to set as terminator (must be 118-126 excluding 'z')
109 Sets the number of pages to split at. @param split minimum number of pages per resulting document
110 Sets the starting page number for PDF splitting. @param start minimum page index (1-based)
111 Sets the end page number for splitting. @param end minimum page index (must be > 0)
112 Enables or disables lenient parsing mode. @param lenient true to enable, false otherwise
113 Initializes CompressParameters instance with specified object stream size. @param objectStreamSize the size of the PDF object stream
114 Initializes PDResources instance with given dictionary, resource cache, and direct font cache. @param resourceDictionary COSDictionary containing PDF document resources @param resourceCache ResourceCache for caching resources @param directFontCache Map of fonts to soft references (for font caching)
115 Sets the blending mode for graphics operations. @param blendMode BlendMode enum value
116 Initializes PDFieldTree instance with PDAcroForm root. @param acroForm non-null PDAcroForm instance
117 Returns the length of the COSStream. @return Length in bytes or -1 if not available
118 Initializes new instance of class with an empty list to store source PDFs.
119 Initializes new instance of COSWriterObjectStream with specified compression pool. @param compressionPool Compression pool for efficient data management
120 Initializes new instance of PublicKeyProtectionPolicy with default values.
121 Begins buffering text clippings as a single clipping area.
122 Adds a PDF source file to be merged. @param source PDF file to include
123 Adds a source PDF document to be merged. @param source RandomAccessRead object representing the source PDF
124 Adds a string instruction to the sequence. @param name the string to be added
125 Adds an instruction sequence as a child to the current sequence. @param child InstructionSequence object to be added
126 Adds a new public key recipient to the collection. @param recipient PublicKeyRecipient object to be added
127 Adds a new text extraction region to the PDFTextStripperByArea. @param regionName unique identifier for the region @param rect spatial bounds of the region (Rectangle2D)
128 Sets the cross-reference trailer for the current PDF document. @param trailer COSDictionary object representing the trailer information
129 Retrieves an object from storage based on its unique key. @param key unique identifier of the object to fetch
130 Retrieves an operator object from storage based on its name. @param operatorName unique identifier of the operator to fetch @return Operator object or null if not found
131 Converts a Unicode sequence to its corresponding glyph name. @param unicodeSequence the input Unicode sequence
132 Handles exceptions raised by PDF operators, logging errors or warnings accordingly. @param operator the operator that raised the exception @param operands operands of the operator's execution context @param exception thrown IOException instance
133 Retrieves and returns the current graphics state. @return The top element in the graphics stack
134 Restores graphics state by popping from the stack. @throws EmptyStackException if stack is empty
135 Returns the number of elements in the graphics stack. @return The size of the graphics stack
136 Applies 2D transformation to point (x, y) using the matrix's parameters. @param x input point's x-coordinate @param y input point's y-coordinate @return transformed point as a Point2D.Float object
137 Decreases the current level and logs an error if it reaches zero or below.
138 Adds an integer to the instruction sequence. @param value integer value to be added
139 Verifies that this COSStream is not already closed. @throws IOException if it has been closed and cannot be read
140 Throws an IOException when attempting to reset the input stream.
141 Disables stream decoding and resets the filter.
142 Retrieves PDF encryption details. @return PDEncryption object or throws IOException if document is not parsed
143 Retrieves PDF file's access permissions. @return AccessPermission object
144 Constructs an instance of the exception with a custom error message. @param message descriptive text about password authentication failure
145 Initializes an instance of the Operator class, enforcing operator string validation. @param aOperator the operator string to initialize
146 Returns human-readable string representation of PDFOperator instance.
147 Returns a string representation of the COSArray object.
148 Returns a string representation of this COSObject instance.
149 Retrieves a specific filter instance by name. @param filterName unique identifier of the filter to fetch @return Filter object or null if not found, throws IOException otherwise
150 Verifies if all elements in the operand list conform to the specified class type. @param operands collection of COSBase objects @param clazz expected class type @return true if all elements match, false otherwise
151 Adds a real number to the instruction sequence. @param value the real number to add
152 Sets the image width of the visible digital signature. @param width new image width
153 Sets the visible digital signature's height. @param height new height value
154 Calculates the distance between two points. @param ps starting point @param pe ending point @return length of line segment between points or NaN if invalid
155 Calculates the edge equation value for a given point and two corners. @param p Point of interest @param p1 First corner point @param p2 Second corner point
156 Initializes a new instance of PDMarkedContent with given tag and properties. @param tag COSName representing the content's tag @param properties COSDictionary containing content properties
157 Retrieves the type of pattern (PATTERN).
158 Retrieves the type of shading.
159 Retrieves the default value of the button. @return String representation of the default value or an empty string if not set
160 Unchecks the checkbox by setting its value to "Off".
161 Refreshes the appearances of specified form fields. @param fields list of PDField objects to refresh
162 Checks if the white point coordinates are (1, 1, 1).
163 Generates color table based on axial shading type and domain. @return int array representing color mapping
164 Calculates the color table for radial shading based on evaluation of a function. @return array of RGB values representing the color mapping
165 Creates the initial LZW code table. @return List of byte arrays representing the code table
166 Adds multiple PDF source files to the merger. @param sourcesList list of RandomAccessRead objects representing PDFs to merge
167 Retrieves an element at the specified index from the collection. @param index unique identifier of the desired element
168 Retrieves an element at specified index from the underlying COS collection. @param index The position of the element to retrieve
169 Returns the number of COSBase objects in this collection. @return total count of elements
170 Returns the number of COS objects in this collection. @return count of elements
171 Returns the total number of public key recipients. @return count of registered recipients
172 Checks whether the COSArray collection is empty.
173 Checks whether the COSArrayList collection is empty. @return true if no elements are present, false otherwise
174 Removes a designated recipient from the collection. @param recipient PublicKeyRecipient object to be removed
175 Returns an iterator over COSBase elements. @return Iterator of COSBase objects
176 Returns an iterator over elements of type E. @return Iterator object
177 Returns an iterator over public key recipients. @return Iterator<PublicKeyRecipient> instance
178 Converts array contents to a list of COSBase objects. @return List of COSBase objects
179 Converts COSBase objects to a list of COS name strings.
180 Converts the collection of COSBase objects to a list of string values.
181 Creates a COSBoolean object from a standard boolean value. @param value Boolean value to be represented as COSBoolean
182 Converts boolean value to string representation. @return "true" or "false" as a human-readable string
183 Writes boolean value to a PDF stream. @param output OutputStream for writing the boolean data
184 Writes null PDF representation to an output stream. @param output OutputStream instance
185 Writes content stream bytes to output stream. @param data byte array containing content stream data
186 Returns a Set view of key-value pairs in this dictionary. @return Set of entries (key-value pairs) in the map
187 Checks if a user property entry has changed. @param oldEntry previous Entry object @param newEntry updated Entry object @return true if the entry has changed, false otherwise
188 Returns the number of key-value pairs in this dictionary.
189 Retrieves item by name from dictionary. @param key unique identifier of item to retrieve
190 Retrieves an unmodifiable set of keys from the internal map. @return Set of COSName objects representing the keys in this dictionary
191 Iterates over dictionary items, executing an action block once per entry. @param action lambda expression to process each dictionary item
192 Returns an array of enum constants. @return collection of COSBase objects representing all possible states
193 Adds all key-value pairs from the specified COSDictionary to this HashMap. @param dict dictionary containing key-value pairs to be added
194 Checks if a specified COSName key exists in the dictionary. @param name The key to search for
195 Tokenizes input string into an array of substrings based on space delimiters. @param s input string to be tokenized
196 Converts string tokens to numerical values. @param token input string containing numeric characters @return int value of the parsed string or 0 on failure
197 Returns string representation of function type.
198 Sets the encryption key length for PDF documents. @param l valid key length: 40, 128, or 256
199 Sets the start page value for PDF processing. @param startPageValue 1-based page number (must be > 0)
200 Sets the last page to extract text from. @param endPageValue 1-based page number
201 Initializes a new instance of the BruteForceParser with a given COS document and parser. @param cosDocument PDF document to parse @param cosParser underlying parser for COS object manipulation
202 Initializes the XrefTrailerObj instance with default configuration.
203 Initializes the PDResources object from a COSDictionary. @param resourceDictionary dictionary containing PDF resources
204 Initializes PDResources object with COSDictionary and ResourceCache. @param resourceDictionary PDF dictionary containing resources @param resourceCache caching mechanism for resources
205 Initializes the Operators instance by storing predefined operator constants.
206 Initializes the PDAcroForm object with the provided PDF document and XFA form dictionary. @param doc the parent PDDocument instance @param form the COSDictionary representing the XFA form data
207 Returns the number of cross-reference tables managed by this resolver. @return count of trailer entries
208 Retrieves an object from the pool using its key. @param key unique identifier for the object @return COSObject instance or null if not found
209 Adds cross-reference table values to the document. @param xrefTableValues map of COSObjectKey to Long values
210 Converts string to floating-point number. @param token input string representation of a float value
211 Coerces a floating-point value into a valid COSFloat representation. @param floatValue input float value
212 Calculates the text orientation (direction) based on the transformation matrix. @return The text orientation in degrees (0-360)
213 Compares this float value with another object for equality. @param o the object to compare with
214 Computes the hash code of this COSFloat object. @return unique integer hash value based on internal float representation
215 Formats the float value as a string, either in simple or scientific notation. @return formatted string representation of the value
216 Writes a null COS object to the output stream.
217 Initializes an instance of COSIncrement with update origin information. @param incrementOrigin COSUpdateInfo object containing update origin details
218 Initializes a clone utility instance with a destination PDDocument.
219 Initializes the DefaultResourceCache instance with caching stability enabled. @param enableStableCache true to enable stable cache, false otherwise
220 Determines if the COS object requires an update based on its current state.
221 Checks if this collection of COSBase objects contains the specified element. @param base the element to search for @return true if contained, false otherwise
222 Checks if the given COSBase object is excluded from this collection. @param base the COSBase object to check @return true if excluded, false otherwise
223 Adds a COSBase object to the collection. @param object COSBase object to include
224 Adds a processed COSObject to the collection. @param base COSBase object to process
225 Clones a COSBase object for use in a new document. @param base the COSBase object to clone @return the cloned COSBase object or null if not found
226 Registers a TrueType font to be closed when the document is finished. @param ttf TrueType font object to register
227 Creates a set of COS dictionaries from the given list of form fields. @param fields list of PDField objects @return Set of COS dictionaries representing field widgets
228 Initializes a new instance with an input stream and associated decode results. @param input the input stream to process @param decodeResults list of decoded results to be managed
229 Initializes a new instance of the class with the given input stream. @param is the input stream containing ASCII85 encoded data
230 Initializes CCITTFaxDecoderStream with input stream, image columns, type, and options. @param stream input stream containing TIFF image data @param columns number of image columns @param type compression type (CCITT Modified Huffman-RLE, T4, or T6) @param options various decoding options @param byteAligned whether to align decoded rows to byte boundaries
231 Retrieves a cached or newly created COSInteger instance for the given value. @param val long integer value within the range [LOW, HIGH] for caching
232 Compares this COSInteger with another object. @param o the object to compare with
233 Returns string representation of integer value. @return formatted COSInteger string (e.g. "COSInt{123}")
234 Writes PDF representation to an output stream. @param output the output stream to write to
235 Retrieves a specific item from storage by key. @param key unique identifier of the item to fetch
236 Retrieves the mapped standard font name from aliases. @param fontName alias of the standard font
237 Maps font name alias to its corresponding base name. @param alias unique font alias @param baseName standard 14 fonts base name
238 Retrieves the selected export values based on user input. @return List of selected String values or a single value if no options are available
239 Checks if the COSName instance is empty. @return true if empty, false otherwise
240 Adds a comment to the content stream. @param comment user-provided text, must not contain newline characters
241 Writes a line break to the output stream.
242 Converts a string to its UTF-16BE hexadecimal representation. @param text input string to convert @return char array containing the hexadecimal representation
243 Retrieves the underlying COSBase object. @return COSBase object or null if not found
244 Constructs COSObjectKey instance with validated number and generation values. @param num PDF object number @param gen PDF object generation @param index stream index
245 Returns a hash code value for this COSObjectKey. The general contract of hashCode() is that whenever it's invoked on the same object, it returns the same value. This value is derived from the numberAndGeneration long value.
246 Retrieves the X-axis scaling factor from a transformation matrix. @return The absolute value of the scaling factor, or the first element if rotation is zero
247 Calculates the Y-axis scaling factor. @return non-negative scaling factor or 0 if invalid
248 Initializes COSOutputStream with specified filters, parameters and cache. @param filters list of output filters @param parameters dictionary of filter parameters @param output target output stream @param streamCache random access stream cache
249 Initializes an instance of the class with specified output stream attributes. @param out target OutputStream for ASCII85 encoding
250 Initializes an instance of the class with specified output stream. @param out OutputStream object
251 Initializes an instance of COSStandardOutputStream with output stream and writing position. @param out OutputStream to write data to @param position initial writing position in bytes
252 Closes the stream and associated resources. @throws IOException if an I/O error occurs
253 Closes the output stream, releasing resources and closing associated streams.
254 Returns a copy of the underlying byte array. @return new byte array containing same elements as original
255 Writes an incremental PDF update to the specified output stream. @throws IOException if I/O error occurs during writing
256 Returns the ASCII representation of the byte array.
257 Checks if the document is currently accepting updates. @return true if updating is allowed, false otherwise
258 Converts byte array to a string using the class's encoding mapping. @param bytes input byte array
259 Reads and parses a PDF operator token.
260 Converts a string into a byte array representation based on the PDFDocEncoding mapping. @param text input string to be encoded @return byte array representation of the input string or null if failed
261 Checks if a character is present in the encoding mapping. @param character the character to search for @return true if found, false otherwise
262 Checks if a key is present in the map. @param key the key to search for @return true if the key exists, false otherwise
263 Checks if a standard font name is present in the alias map. @param fontName the name to search for
264 Returns an unmodifiable map of code-to-name associations. @return Map of font codes to their corresponding names
265 Returns an unmodifiable map of name-to-code associations. @return a read-only Map view of inverted mappings.
266 Prevents modification of the underlying dictionary by throwing an exception.
267 Reads a single byte from the ASCII85 encoded input stream. @throws IOException if an error occurs while reading from the stream
268 Closes the ASCII85InputStream and releases resources. @throws IOException if an I/O error occurs
269 Encodes input byte into ASCII85 format, flushing output when necessary. @param b single byte to be encoded
270 Flushes any buffered output and writes it to the underlying stream. Performs ASCII85 encoding for input data, storing the result in output buffer, and writes data to the specified output stream.
271 Pads or truncates the password to match the encryption padding length. @param password user-provided password
272 Closes the content stream and logs a warning if in text mode.
273 Imports XMP metadata from a byte array into the PDF document. @param xmp the XMP metadata to import
274 Determines if splitting should occur at the specified page number. @param pageNumber target page to evaluate
275 Encodes JPEG2000 image data from input stream to output stream. @param input InputStream containing JPX data @param encoded OutputStream for encoded image data @param parameters COSDictionary of encoding parameters (not used)
276 Adds all entries from another map to this COSDictionaryMap.
277 Prevents modification of upper-right Y coordinate due to immutability.
278 Prevents modification of upper-right X-coordinate.
279 Prevents modification of lower-left Y coordinate.
280 Prevents modification of lower left x-coordinate. @throws UnsupportedOperationException since PDImmutableRectangle is immutable
281 Retrieves digital signature text.
282 Sets the text content of the visible digital signature. @param signatureText text to be displayed in the signature
283 Throws exception when attempting to set string value.
284 Retrieves the current compression level. @return compression level as int value between -1 and BEST_COMPRESSION
285 Checks if this collection contains the specified element. @param o the element to search for
286 Initializes FlateFilterDecoderStream with input stream and skips zlib header. @param inputStream compressed data to decode
287 Terminates the Flate filter decoder stream and releases resources.
288 Initializes an instance of the class with default values.
289 Sets the digital signature's image and updates its dimensions. @param image BufferedImage object containing the signature's image
290 Finds the LZW code for a given pattern in the code table. @param codeTable list of pre-computed codes @param pattern byte array to search for @return code index if found, -1 otherwise
291 Decodes a predictor row based on the specified predictor algorithm. @param predictor prediction algorithm (e.g. PRED TIFF SUB, PRED NONE, etc.) @param colors number of color components @param bitsPerComponent number of bits per component @param columns number of column elements @param actline current row data @param lastline previous row data
292 Checks if a given COS object key exists in the pool. @param key unique COS object identifier @return true if key is present, false otherwise
293 Registers a security handler by name and associated protection policy. @param name unique identifier for the security handler @param securityHandler class implementing SecurityHandler interface @param protectionPolicy class implementing ProtectionPolicy interface
294 Checks if a given font name exists in the encoding mappings. @param name the font name to search for
295 Checks if a font code exists in the encoding mappings. @param code unique font code @return true if code is present, false otherwise
296 Escapes special XML characters in the input string. @param input input string to be processed
297 Sets the bounding box (BBox) for this form XObject. @param bbox PDRectangle object containing the new BBox coordinates
298 Decodes a hexadecimal string into a byte array. @param s input hexadecimal string @return decoded byte array or null if decoding fails
299 Closes the document and associated resources, handling exceptions to maintain method contract.
300 Closes the COSDocument and associated resources. @throws IOException if an I/O error occurs during closure
301 Retrieves the underlying COSDictionary object associated with this PDFunction. @return COSDictionary instance or null if not applicable
302 Initializes a PDXObject instance with the given PDStream and COSName subtype. @param stream underlying PDStream object @param subtype graphical object subtype (e.g. XOBJECT)
303 Returns the underlying COSStream object associated with this PDStream.
304 Retrieves the alternate color space metadata as a COSStream object. @return COSStream containing metadata or null if not found
305 Sets alternate color space metadata. @param metadata COSStream object containing ICC profile data
306 Checks if the given PDAnnotationWidget is a signature annotation. @param annotations list of PDF annotations @param widget the annotation widget to check @return true if the widget is a signature annotation, false otherwise
307 Compares this PDAnnotation object with another for equality. @param o the Object to compare with, must be a PDAnnotation
308 Returns a Set view of keys contained in this COSDictionaryMap. @return Set of unique keys
309 Checks for the existence of a specific signature field. @param fieldIterator iterator over document fields @param signatureField target PDSignatureField to search for @return true if found, false otherwise
310 Returns an unmodifiable Set view of the elements as Array. @return Collection<V> containing PDF object representations
311 Initializes a new instance of the BaseParser class with a PDF source. @param pdfSource RandomAccessRead object representing the PDF file
312 Checks if the next character in the PDF source is a digit. @throws IOException if an I/O error occurs
313 Adds a cross-reference table entry with the specified key and offset. @param objKey unique object key @param offset long value of the entry
314 Adds font encoding mapping by code and name. @param code unique code identifier @param name corresponding name for the code
315 Checks if current PDF source character is whitespace.
316 Skips a line break in the PDF source, handling CR, LF, or CRLF. @param linebreak ASCII value of the character to check @return true if skipped successfully; false otherwise
317 Checks for the end of a string in PDF data. @param bracesParameter current string length @return new string length or 0 if end of string is reached
318 Checks if given character code represents an end-of-line (EOL). @param c ASCII value of the character to check
319 Reads a string representation of a number from the PDF source. @throws IOException if the number exceeds maximum length or reading fails.
320 Decodes the given ByteArrayOutputStream into a string, handling malformed PDFs with alternative character sets. @param buffer ByteArrayOutputStream containing encoded data
321 Reads and verifies the next character from the PDF source matches the expected character. @param ec expected character to match
322 Checks if the next character in the PDF source is whitespace. @throws IOException if an I/O error occurs
323 Parses the start XREF value from the cross-reference table. @return The byte offset of the first object, or -1 if not found
324 Searches for the last EOF marker in the PDF data stream. @return position of the last EOF marker, or Long.MAX_VALUE if not found
325 Searches for cross-reference tables in the PDF data stream. @return List of offsets where xref tables were found
326 Retrieves the number of color components for the current shading type. @return The number of color components, or 1 if unknown
327 Searches for XRef streams in the PDF data stream and returns a list of their offsets.
328 Retrieves cross-reference table from XREF trailer. @return Map of COSObjectKey to long values or null if not initialized
329 Fetches the offset of the startxref marker in a PDF file. @return The position of the startxref marker, or throws an IOException if not found
330 Reads the PDF file until it encounters an "endstream" filter stream. @param out EndstreamFilterStream to write filtered content to @return length of processed data in bytes, or -1 if error occurs
331 Initializes the writer with default values.
332 Sets a label for the specified page range. @param startPage starting page index @param item PDPageLabelRange object to be stored
333 Adds a CID-text mapping to the cache. @param cid character identifier (0 <= CID <= 0xFFFF) @param text corresponding Unicode text representation
334 Checks if the input stream contains binary data after the "EI" token. @throws IOException if an I/O error occurs during reading
335 Checks if next token is whitespace or newline/return. @throws IOException if an I/O error occurs
336 Adds a cross-reference entry to the PDFXRefStream. @param entry XReferenceEntry object containing key and value
337 Computes the maximum byte lengths required to display each column. @return an array of three integers representing the maximum byte lengths
338 Initializes the COSObjectPool instance with the highest cross-reference object number. @param highestXRefObjectNumber maximum value to update internal state
339 Retrieves the first trailer from the cross-reference table. @return COSDictionary object representing the first trailer or null if empty.
340 Retrieves the last trailer from the cross-reference map. @return COSDictionary object representing the last trailer, or null if empty
341 Retrieves object numbers contained in the specified cross-reference table entry. @param objstmObjNr ID of the cross-reference table entry to search @return Set of object numbers referenced by the entry, or null if not found
342 Retrieves the numeric value of this cross-reference type's first column.
343 Retrieves the generation value from the referenced COSObjectKey. @return The third column value in the cross-reference table
344 Returns a string representation of the free object reference, including its key, next free object ID, and cross-reference type.
345 Retrieves the byte offset of the referenced object's second column. @return Byte offset as a long value
346 Retrieves the generation value from the referenced object key. @return The generation number of the referenced object
347 Returns a string representation of this cross-reference entry. @return formatted string with key, type, and byte offset information
348 Retrieves the numerical part of the parent object's key reference. @return extracted numerical value
349 Retrieves the object stream index from `ObjectStreamXReference`. @return Index of associated object stream
350 Returns a string representation of this ObjectStreamEntry, including its key, type (numeric value), object stream index, and parent key.
351 Writes content to the output stream without automatic line breaks. @param b byte array data @param off offset within the array @param len length of data to be written
352 Writes a single byte to the output stream without starting a new line.
353 Writes end-of-line (EOL) sequence only when not on a new line. @throws IOException if writing fails
354 Checks if compression should be applied based on object stream size. @return true if stream size indicates compression should be enabled
355 Adds a cross-reference table entry. @param entry XReferenceEntry object to be added
356 Writes an object reference to the output stream. @param output OutputStream for writing data @param indirectReference COSObjectKey containing object ID and generation
357 Calculates the ranges of x-reference entries. @param xRefEntriesList list of XReferenceEntry objects @return array of Long values representing the calculated ranges
358 Retrieves an MD5 message digest instance.
359 Retrieves an SHA-1 message digest instance. @return SHA-1 MessageDigest object
360 Retrieves a SHA-256 message digest instance. @return SHA-256 MessageDigest object
361 Writes a FDF document to the output stream, handling incremental updates and compression. @param doc FDFDocument object to be written
362 Retrieves the highest cross-reference object number from the pool.
363 Returns an unmodifiable view of prepared COS keys.
364 Overwrites the font encoding mapping for a given code with a new name. @param code unique identifier of the font character @param name new name to be associated with the code
365 Removes a predefined text extraction region by name. @param regionName unique identifier of the region to be deleted
366 Sets maximum decimal places in formatted decimals. @param fractionDigitsNumber desired max fractional digits (1-20)
367 Initializes a new instance of the PDAbstractContentStream class with given parameters. @param document PDDocument object @param outputStream OutputStream to write content stream @param resources PDResources for graphics and color settings
368 Retrieves the vertical displacement vector Y for a given CID. @param code unique font character identifier
369 Returns the non-null floating-point value or the default value. @param standardValue the standard value to use if not null @param defaultValue the fallback value if standardValue is null
370 Adjusts the visible digital signature's size by a specified percentage. @param percent scaling factor (e.g. 150 for 50% increase)
371 Returns the width of the digital signature's image.
372 Retrieves the height of the digital signature's image.
373 Adjusts the visible sign designer's properties for rotation. @return the updated PDVisibleSignDesigner instance
374 Creates a 2D AffineTransform from the transformation matrix. @return AffineTransform object representing the transformation
375 Encodes the input text into a byte array using multi-byte encoding with 1 to 4 bytes per character. @param text string to be encoded @return encoded byte array or throws IOException if failed
376 Converts a Unicode code point to its corresponding glyph name. @param codePoint unique identifier of the character in question @return glyph name or ".notdef" if not found
377 Creates a RenderState instance from the given COSName. @param state COSName containing rendering state value
378 Retrieves the BaseState instance based on a given COSName. @param state COSName object representing optional content state
379 Applies GSUB rules to the input word and writes the transformed glyph IDs to the output stream. @param gsubWorker worker responsible for applying GSUB transforms @param out output stream where transformed glyph IDs will be written @param font type 0 font used for encoding glyph IDs @param word input string to process @return list of transformed glyph IDs
380 Initializes a new PDDocument instance from a COSDocument and PDF data sources. @param doc COSDocument object @param source RandomAccessRead stream for the PDF content @param permission AccessPermission object for security control
381 Initializes an FDFDocument instance with a COSDocument and a data source. @param doc the associated COSDocument @param source the RandomAccessRead data source
382 Converts this COSArrayList to an array. @return Array containing all elements in the original order
383 Converts COSArrayList to an array. @param a target array to store elements in @return Array of elements from the Collection, or null if empty
384 Returns index of first occurrence of specified element in this list, or -1 if it is not present. @param o element to search for
385 Checks if this COSArrayList contains all elements in another collection. @param c the collection to check against
386 Removes all elements from this collection and its associated COSArray. @param c collection of objects to remove
387 Removes all elements from this collection that are also contained in the specified collection. @param c the collection of elements to be removed
388 Compares this COSArrayList object with another based on its properties. @param obj other object to compare with
389 Calculates and returns the hash code of this COSArrayList instance. @return Hash code based on underlying COSArray's hash code
390 Returns index of last occurrence of specified object within list. @param o object to search for @return index of last occurrence or -1 if not found
391 Returns an iterator over the elements in this COSArrayList. @return ListIterator object
392 Returns an iterator over the elements in this COSArrayList at the specified index. @param index index of the desired element
393 Returns a new list containing a portion of this COSArrayList's elements. @param fromIndex starting index (inclusive) of the sublist @param toIndex ending index (exclusive) of the sublist @return List object containing subset of elements or empty list if invalid indices
394 Checks if a specified value is present in the collection. @param value the value to search for
395 Returns an unmodifiable set containing all key-value pairs. @return Set of Map.Entries
396 Retrieves an unmodifiable set of font aliases.
397 Returns a string representation of this COSDictionaryMap object. @return string representation of the underlying actual map
398 Converts a COSBase object to the specified type, as defined by valueType. @param base COSBase object to convert @return converted object or throws IOException if conversion fails
399 Generates a letter label based on the input number. @param num the input number to generate the label from
400 Returns the number of page label ranges.
401 Retrieves page label range by start page index. @param startPage first page of the desired range @return PDPageLabelRange object or null if not found
402 Returns a set of unique page indices.
403 Returns a copy of the dash pattern array. @return cloned array of dash lengths
404 Constructs a PDColor instance with the given components and color space. @param components array of color components @param colorSpace associated color space
405 Retrieves the color components associated with this PDColor instance. @return float array containing color components
406 Initializes a CoordinateColorPair with point and color values. @param p two-dimensional point @param c array of color values
407 Returns a string representation of the FunctionType2 object, including its control points (c0 and c1) and exponent value (N).
408 Retrieves the bounding box coordinates of the shaded triangle. @return An array containing the minimum and maximum X and Y values.
409 Retrieves and returns the top number from the execution stack. @throws EmptyStackException if the stack is empty
410 Pops an integer value from the execution context's object stack. @return Integer value or throws EmptyStackException if stack is empty
411 Pops and returns a real number from the execution context stack. @throws EmptyStackException if stack is empty
412 Adds a boolean value to the instruction sequence. @param value boolean value to be added
413 Initializes an instance of ExecutionContext with a specified set of operators. @param operatorSet collection of available operators
414 Retrieves a list of compiled Patterns for list item expressions. @return List of compiled Patterns or an empty list if not initialized
415 Initializes the Mac Expert character encoding table.
416 Initializes the MacRoman character encoding table.
417 Initializes the standard encoding table by populating it with predefined entries.
418 Initializes the symbol encoding table from a predefined table. @param SYMBOL_ENCODING_TABLE pre-defined table of symbol encodings
419 Initializes the WinAnsiEncoding object by populating it with character codes and names from the WIN_ANSI_ENCODING_TABLE.
420 Initializes the ZapfDingbatsEncoding object with predefined mapping from character codes to names.
421 Converts an array of objects to a comma-delimited string. @param array input object array
422 Converts a float array to a comma-separated string representation. @param array input float array
423 Adds text content to the PDMarkedContent object. @param text TextPosition object representing the text to be added
424 Adds marked content to the PDF document. @param markedContent PDMarkedContent object to be added
425 Adds an XObject to the marked content. @param xobject XObject to be added
426 Enables or disables printing permission. @param allowPrinting true to allow printing, false otherwise
427 Allows or disallows document modification. @param allowModifications true to enable, false to disable modifications
428 Enables or disables content extraction based on user permission. @param allowExtraction true to allow, false to prohibit content extraction
429 Sets permission to modify annotations. @param allowAnnotationModification true to allow, false to deny modification
430 Sets permission to fill in forms based on the provided flag. @param allowFillingInForm true to enable, false to disable form filling
431 Sets permission to extract content for accessibility. @param allowExtraction true to enable extraction for accessibility
432 Sets or clears the permission to assemble PDF documents. @param allowAssembly true to grant, false to revoke assembly permission
433 Sets the faithful printing permission. @param canPrintFaithful true to allow faithful printing, false otherwise
434 Checks if printing permission is granted. @return true if user has print permission, false otherwise
435 Checks if modification permission is granted. @return true if user has modify permission, false otherwise
436 Checks if content extraction is permitted. @return true if extract permission bit is set, false otherwise
437 Checks if user has permission to modify annotations. @return true if MODIFY_ANNOTATIONS_BIT is set, false otherwise
438 Checks if user has permission to fill in forms. @return true if permission bit is set, false otherwise
439 Checks if user has permission to extract content for accessibility. @return true if permitted, false otherwise
440 Determines if document assembly is permitted. @return true if assembly permission bit is set, false otherwise
441 Checks if faithful printing permission is enabled. @return true if enabled, false otherwise
442 Retrieves a private key from the keystore. @throws KeyStoreException if the keystore operation fails
443 Retrieves a secure random number generator, either the custom instance or a default one.
444 Initializes the RC4 cipher with a custom encryption key. @param key input byte array to set as the encryption key
445 Writes a single encrypted byte to the specified output stream. @param aByte plain byte to be encrypted @param output target output stream for writing encrypted data
446 Combines diacritic characters in the input string using Unicode combining forms. @param str input string containing diacritic characters
447 Checks if a given Unicode code point is prohibited for SASL use. @param codepoint the Unicode code point to check @return true if prohibited, false otherwise
448 Computes the encryption version number based on key length and AES preference. @return encryption version integer
449 Returns the singleton instance of the BouncyCastleProvider. @return Provider object for cryptographic operations
450 Retrieves the text value from the given XML element. @param node XML Element instance to extract text value from
451 Writes extracted text to the specified output stream. @param text extracted PDF text
452 Retrieves a predefined CMap by name, caching it for future use. @param cMapName unique identifier of the predefined CMap
453 Parses a CMap from the given RandomAccessRead input. @param randomAccessRead input stream containing CMap data @return parsed CMap object or null if invalid input
454 Retrieves built-in PostScript font names for the given name. @param postScriptName original PostScript font name @return Set of PostScript names (original and hyphen-less variants)
455 Calculates the set of points that make up a line between two given coordinates. @param x0 starting x-coordinate @param y0 starting y-coordinate @param x1 ending x-coordinate @param y1 ending y-coordinate @return Set of Point objects representing the calculated line
456 Calculates the number of unique points in a given array.
457 Stores a font reference in the cache based on FontInfo. @param info unique font identifier @param font FontBoxFont object to be cached
458 Retrieves a font from cache based on provided information. @param info FontInfo object containing font details @return FontBoxFont object if cached, otherwise null
459 Maps standard font name to its corresponding FontName object. @param baseName base font name from the enumeration
460 Adds a font substitute by matching the given PostScript name case-insensitively. @param match PostScript name to match @param replace Font substitute to add for the matched name
461 Retrieves font information by PostScript name and format. @param format FontFormat type @param postScriptName unique PostScript name identifier @return FontInfo object or null if not found
462 Retrieves a list of font substitutes for the given PostScript name. @param postScriptName the PostScript name to search for
463 Retrieves the name associated with a given font encoding code. @param code unique font encoding identifier @return Name string or ".notdef" if not found
464 Prints all available font matches in the queue and returns the top match. @param queue PriorityQueue of FontMatch objects @return The top FontMatch object or null if empty
465 Retrieves type 2 character string for the given CID. @param cid character identifier @return two-character string representation of type code or null if invalid
466 Converts a character code to CID using the Character Map. @param code character code to convert @return CID value or 0 if invalid input
467 Converts color components to RGB integer representation. @return RGB value in the format of 0xRRGGBB
468 Calculates backdrop removal color. @param groupRGB the RGB value of the group @param backdropRGB the RGB value of the backdrop @param shift bit shift factor for color extraction @param alphaFactor blending factor for color calculation @return the calculated backdrop removal color (0-255)
469 Retrieves a specified range of image data from the chunk's byte array. @return An array containing the requested section of image data
470 Retrieves the Adobe Glyph List. @return list of glyphs
471 Extracts the CMap table from the TrueType font, populating relevant subtables. @throws IOException if an I/O error occurs
472 Loads font metrics for a given font name. @param fontName FontName object representing the standard 14 fonts
473 Checks if TrueType font embedding is permitted based on OS-specific settings. @param ttf TrueTypeFont object to evaluate @return true if embedding is allowed, false otherwise
474 Checks if font subsetting is permitted based on TrueTypeFont properties. @param ttf TrueTypeFont object to evaluate
475 Generates a base25 encoded string for the given gidToCid map. @param gidToCid map of glyph IDs to character IDs @return base25 encoded string (6 characters or padded with 'A's)
476 Converts a glyph name to its Unicode representation. @param name the glyph name to convert @return the Unicode string or null if not found
477 Initializes a new instance of Type1Encoding from the given FontMetrics. @param fontMetrics Font metrics containing character information
478 Creates a PDColor instance from the given color components, pattern name, and color space. @param components array of floating-point color values @param patternName COSName representing the color's pattern @param colorSpace associated PDColorSpace object
479 Creates a new PDColorSpace instance from a COSBase representation. @param colorSpace COSBase color space object
480 Converts a WritableRaster to a raw image. @param raster input raster data @param awtColorSpace color space for the output image @return BufferedImage object representing the converted image
481 Converts the given WritableRaster to a BufferedImage in RGB format. @param raster the input raster data @param colorSpace the color space used for conversion @return the converted BufferedImage
482 Checks if the given ICC profile is in sRGB color space. @param profile ICC_Profile object to check @return true if the profile represents an sRGB color space, false otherwise
483 Determines the color space type based on the ICC profile or alternate color space. @return ColorSpaceType enum value (TYPE_GRAY, TYPE_RGB, TYPE_CMYK) or -1 if unknown
484 Creates a PDImageXObject from a BufferedImage and parent PDDocument. @param document the parent PDDocument instance @param image the source BufferedImage object
485 Initializes a PredictorEncoder instance with the given PDF document and image. @param document PDDocument object representing the PDF document @param image BufferedImage object containing the encoded image data
486 Scales an image to the specified dimensions and type. @param image original image object @param width scaled width in pixels @param height scaled height in pixels @param type image type (e.g. BufferedImage.TYPE_BYTE_GRAY) @param interpolate whether to perform interpolation during scaling @return scaled image object or null if failed
487 Returns the underlying COS dictionary representing the inline image.
488 Parses PNG image data and returns a PNGConverterState object. @param imageData the input byte array containing PNG data @return A PNGConverterState object representing the parsed PNG data, or null if parsing fails
489 Combines IDAT chunks into a single InputStream for PDF integration. @param state PNGConverterState object containing IDAT chunks
490 Initializes a new patch with specified color values from corners. @param color 2D array of color values, where each row represents a corner
491 Retrieves the current clipping path as an Area object. If there is a single clipping path, it returns the cached result; otherwise, it calculates the intersected overall bounding box for all clipping paths and combines them into a single area.
492 Initializes PlainText object from a list of string values. @param listValue collection of strings to be converted into Paragraph objects
493 Computes the hash code of this PDAnnotation object based on its dictionary.
494 Computes and returns an affine transformation matrix. @return translation matrix with minX and minY offsets
495 Computes parameters for a polygon segment, including the number of intermediate curls and fitting errors. @param advInterm intermediate curl adjustment @param advCorner corner adjustment @param k cloudiness factor @param r radius @param length current polygon segment length @return array containing alpha angle and dx error, or -1 if length is zero
496 Computes parameters for an ellipse based on two points and curvature advantage. @param pt first point @param ptNext second point @param r radius @param curlAdv curvature advantage @return angle value in radians or 0.0 if invalid input
497 Ensures a polygon's direction is positive by reversing its vertices if necessary. @param points array of vertex coordinates
498 Flattens an ellipse into a list of discrete points. @param left left edge of the ellipse @param bottom bottom edge of the ellipse @param right right edge of the ellipse @param top top edge of the ellipse @return array of Point2D.Double objects representing the flattened ellipse
499 Checks if the given GeneralPath represents a rectangular shape.
500 Retrieves the template height from the current page height. @return Height of the template
501 Sets digital signature's horizontal and vertical positions. @param x new X-coordinate value @param y new vertical axis position
502 Applies an affine transformation to the visible sign designer. @param affineTransform Affine transformation matrix
503 Initializes the destination with an array of page coordinates. @param arr COSArray containing page data
504 Initializes the destination with an array of page coordinates. @param arr COSArray containing page data
505 Initializes the destination with an array of page coordinates. @param arr COSArray containing page data
506 Initializes the destination with an array of page coordinates. @param arr COSArray containing page data
507 Initializes the destination with an array of page coordinates. @param arr COSArray containing page data
508 Verifies that the provided outline item has no siblings. @param node outline item to check
509 Retrieves child outline items of the current node. @return iterable collection of PDOutlineItem objects
510 Sorts form field key-value pairs in ascending order by value.
511 Sorts key-value pairs in ascending order by key.
512 Applies rendering hints to the graphics context. @param renderingHints key-value pairs of rendering properties
513 Adjusts the clip path to ensure it remains within the minimum size threshold. @param linePath The original clip path @return The adjusted clip path or the original if no adjustments are needed
514 Calculates optimal subsampling for a given image and transformation. @param pdImage input PDImage object @param at AffineTransform object @return integer subsampling value
515 Calculates the ceiling value of a given double as an integer. @param num input number
516 Calculates the X-rotation coordinate based on the provided rotation angle. @param rotation angle of rotation (0, 90, 180, or 270 degrees)
517 Calculates the Y-coordinate of the lower left rotation point based on the given rotation angle. @param rotation rotation angle in degrees (0, 90, 180, or 270)
518 Calculates the width of a rotated text element. @param rotation angle in degrees
519 Writes Unicode characters from TextPosition to output stream. @param text TextPosition object containing Unicode characters
520 Returns the Unicode representation of the text element as a string.
521 Retrieves text from a specified region within the PDF document. @param regionName unique identifier of the region to fetch text for
522 Retrieves and writes the article start marker. @throws IOException if an I/O error occurs
523 Marks the end of an article and writes it to the output stream. @throws IOException if writing fails
524 Writes the configured line separator to the output stream.
525 Writes the current word separator character to the output stream.
526 Writes the paragraph end marker to the output stream.
527 Writes the start position of the current page to the output stream.
528 Writes the extracted ending text from the current page.
529 Finds the first matching pattern from a given list. @param string input text to search @param patterns collection of potential matches @return first matching Pattern object or null if none found
530 Handles direction of a given word by processing Bidi information. @param word input string to process @return processed string with correct bidi direction
531 Parses a BIDI file, extracting and processing each line to populate the MIRRORING_CHAR_MAP. @param inputStream input stream containing the BIDI file content
532 Returns the visually ordered Unicode representation of the text element. @return the Unicode string with right-to-left and left-to-right characters ordered correctly
533 Processes a text position within the PDF document. @param text TextPosition object to be processed
534 Checks if the text element is a diacritic. @return true if the text element represents a diacritic, false otherwise
535 Updates the time zone ID based on its raw offset. @param tz Time zone object
536 Converts a single byte to its hexadecimal string representation. @return 2-character hexadecimal string
537 Converts a byte array to a hexadecimal string. @param bytes input byte array @return hexadecimal string representation of the input bytes
538 Extracts and combines high and low nibbles from a single byte into a 2-byte array.
539 Converts a byte array to its ASCII hexadecimal representation. @param bytes input byte array @return ASCII hex encoded byte array (e.g., '00' for each byte)
540 Writes a single hexadecimal byte to the specified output stream. @param b input byte value @param output target output stream
541 Decodes a base64 encoded string into binary data. @param base64Value Base64 encoded input string
542 Merges two sorted segments of an array into a single sorted segment. @param arr the original array @param aux auxiliary storage for merging @param from starting index of first segment @param mid ending index of first segment @param to ending index of second segment @param cmp comparator to determine order
543 Initializes a Matrix instance from an AffineTransform, extracting scale, shear, and translation values. @param at the AffineTransform to initialize from
544 Applies a 2D transformation to the given point using the current matrix. @param point Point object to be transformed
545 Formats a floating-point number into ASCII byte representation. @param value the number to format @param maxFractionDigits maximum number of decimal digits @param asciiBuffer buffer to store formatted bytes @return the final offset in the buffer or -1 if invalid input
546 Retrieves the current version of the PDFBox library from a properties file. @return The library's version as a string, or null if an error occurs.
547 Parses an XML document from the given input stream. @param is input stream containing the XML data @param nsAware true to enable namespace awareness, false otherwise @return A parsed org.w3c.dom.Document object or throws IOException on failure
548 Finds the associated value by traversing the ByteTrie based on the input byte sequence. @param bytes array of bytes to search in the trie @return associated value of type T or null if not found
