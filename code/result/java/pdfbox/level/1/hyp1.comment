1 Private constructor to restrict instantiation. Initializes essential fields and resources.
2 Constructs a new OperatorProcessor instance. @param context PDFStreamEngine associated with the processor
3 Constructs a new instance of COSBase. Initializes essential fields and resources.
4 Constructs a new instance of COSUpdateState. @param updateInfo contains update information for the document
5 Constructs a new instance of DecodeOptions. Initializes essential fields and resources.
6 Constructs DecodeOptions with a specified source region. @param sourceRegion defines the area of the image to decode
7 Constructs new DecodeOptions with uniform subsampling. @param subsampling value for both X and Y axes
8 Constructs a new instance of the Filter class. Initializes essential fields and resources.
9 Constructs a new PageExtractor instance. @param sourceDocument the original PDF document to extract pages from @param startPage the starting page number (inclusive) @param endPage the ending page number (inclusive)
10 Initializes a new instance of XrefParser. @param cosParser the COSParser to use for parsing PDF content
11 Constructs an XReference with a specified type. @param type the reference type to be assigned
12 Constructs a new PDF content writer. @param out destination stream for PDF content
13 Initializes resource cache with stable caching option. @param enableStableCache flag to enable or disable stable caching
14 Constructs a new PDDocumentCatalog. @param doc the PDF document @param rootDictionary the catalog dictionary of the document
15 Constructs a new instance of PDDocumentInformation. Initializes with a provided COSDictionary containing document metadata. @param dic dictionary holding PDF document information
16 Constructs a new instance of PDDocumentNameDestinationDictionary. @param dict COSDictionary containing named destinations
17 Constructs a new instance of PDDocumentNameDictionary. @param cat the document catalog to associate with this dictionary @param names the COSDictionary containing named elements
18 Constructs a new PDPage instance from a COSDictionary. @param pageDictionary PDF dictionary representing the page
19 Constructs a new PDF page instance. @param pageDictionary dictionary representing the page's attributes and content @param resourceCache cache for managing shared resources across pages
20 Initializes a new instance of COSDictionaryMap. @param actualsMap the standard map to be used for key-value storage @param dicMap the COSDictionary associated with PDF object representations
21 Wraps a given COSDictionary. @param dictionary the COSDictionary to wrap
22 Constructs a new instance of PDNameTreeNode. @param dict dictionary representing the node in the PDF document
23 Constructs a new PDNumberTreeNode. @param dict COSDictionary containing node data @param valueClass type of numeric values managed by this node
24 Constructs a new instance of PDPageLabelRange. Initializes with a provided COSDictionary containing page label information. @param dict dictionary holding PDF page label data
25 Constructs a PDRange instance from a COSArray. @param range COSArray containing the range data
26 Constructs a new PDRange instance. @param range COSArray containing range data @param index Starting index in the COSArray for this range
27 Constructs a new PDStream instance from a COSStream. @param str underlying COSStream object
28 Constructs a new instance of PDMarkInfo. @param dic COSDictionary containing marking metadata
29 Constructs a new instance of PDMarkedContentReference. @param dictionary COSDictionary containing marked content information
30 Constructs a new PDObjectReference. @param theDictionary COSDictionary representing the PDF object reference
31 Constructs a new instance of PDStructureNode. @param dictionary COSDictionary representing the structure node
32 Constructs a new instance of the Revisions class. Initializes essential fields and resources for managing document revisions.
33 Constructs a new property list from a COSDictionary. @param dict underlying dictionary containing properties
34 Constructs a new instance of PDBoxStyle. @param dic COSDictionary containing styling attributes for guidelines
35 Constructs a new instance with default permissions. Initializes the `bytes` field to DEFAULT_PERMISSIONS.
36 Constructs an AccessPermission with specified permission bits. @param permissions integer representing permission flags
37 Constructs a new cryptographic filter dictionary. @param d COSDictionary representing the crypt filter parameters
38 Initializes a new RC4Cipher instance. Sets up the salt array with 256 elements.
39 Constructs an FDFAnnotation from a COSDictionary. @param a dictionary representing the annotation data
40 Constructs an FDFCatalog instance. @param cat COSDictionary representing the FDF catalog
41 Constructs a new FDFDictionary from an existing COSDictionary. @param fdfDictionary the underlying COSDictionary to use
42 Constructs a new FDFField instance. @param f COSDictionary representing the form field in FDF document
43 Constructs an FDFIconFit instance with a given COSDictionary. @param f COSDictionary containing icon fitting configuration
44 Constructs an instance of FDFJavaScript. @param javaScript COSDictionary containing JavaScript data
45 Constructs an FDF named page reference from a COS dictionary. @param r COSDictionary representing the named page reference
46 Constructs an FDFOptionElement from a COSArray. @param o the underlying COSArray representing the FDF option
47 Constructs a new FDFPage instance. @param p COSDictionary containing page data
48 Constructs FDFPageInfo with given COSDictionary. @param p COSDictionary containing page information
49 Constructs an FDFTemplate instance with a given COSDictionary. @param t the COSDictionary representing the FDF template
50 Constructs a new PDFontDescriptor instance. @param desc dictionary containing font descriptor information
51 Constructs a new PDFontSetting instance. @param fs COSArray containing font settings
52 Constructs a new instance of PDLineDashPattern. Initializes with an empty dash array and zero phase.
53 Constructs a new BlendMode instance. @param name unique identifier for the blend mode @param blendChannel function defining blending channels @param blend function defining overall blending behavior
54 Constructs a new instance of PDColor with a specified pattern name and color space. @param patternName the name of the pattern associated with the color @param colorSpace the color space in which the color is defined
55 Constructs DeviceN attributes from a COSDictionary. @param attributes dictionary containing color space details
56 Initializes PDDeviceNProcess with given attributes. @param attributes COSDictionary containing color space details
57 Constructs a new PDGamma instance from a COSArray. @param array COSArray containing RGB gamma values
58 Constructs a PDTristimulus from a COSArray. @param array containing tristimulus values X, Y, and Z
59 Constructs a new instance of PDTransparencyGroupAttributes. @param dic COSDictionary containing transparency group attributes
60 Constructs a new instance of PDOptionalContentProperties. Initializes the object with the provided COSDictionary containing optional content properties. @param props COSDictionary holding optional content properties
61 Initializes a new instance of PDAbstractPattern with a given COSDictionary. @param dictionary the COSDictionary containing pattern data
62 Constructs a new PDShading instance from a COSDictionary. @param shadingDictionary the COSDictionary representing the shading properties
63 Constructs a new instance of PDExtendedGraphicsState. @param dictionary COSDictionary containing graphics state properties @param resourceCache ResourceCache for managing resources
64 Constructs a new PDSoftMask instance. @param dictionary PDF dictionary containing mask properties @param resourceCache cache for managing resources
65 Initializes a new PDAction instance with a given COSDictionary. @param a the COSDictionary representing the PDF action
66 Private constructor to prevent instantiation of utility class.
67 Constructs a new instance of PDAdditionalActions. @param a COSDictionary containing action data
68 Constructs a new instance with an existing dictionary. @param a COSDictionary containing annotation actions
69 Constructs an instance with specified actions. @param a dictionary containing document catalog actions
70 Initializes additional actions for a PDF form field. @param a COSDictionary containing action definitions
71 Constructs a new instance of PDPageAdditionalActions. @param a COSDictionary containing page actions
72 Constructs a new PDTargetDirectory from a COSDictionary. @param dictionary the underlying COSDictionary representing the target directory
73 Initializes PDURIDictionary with a given COSDictionary. @param dictionary COSDictionary containing URI action data
74 Constructs PDWindowsLaunchParams with given dictionary. @param p COSDictionary containing launch parameters
75 Constructs appearance characteristics dictionary. @param dict underlying COSDictionary to manage
76 Constructs an appearance dictionary from a COSDictionary. @param dictionary COSDictionary containing appearance attributes
77 Constructs a new appearance entry. @param entry COSDictionary representing the appearance data
78 Initializes a new instance of PDBorderEffectDictionary. @param dict COSDictionary containing border effect properties
79 Constructs a new border style dictionary from an existing COSDictionary. @param dict the underlying COSDictionary containing border properties
80 Constructs a new instance of PDExternalDataDictionary. @param dictionary COSDictionary object representing external data
81 Initializes a new CloudyBorder instance. @param stream content stream for PDF rendering @param intensity visual intensity of the border @param lineWidth width of the border line @param rect bounding rectangle for the border
82 Initializes a new instance of PDPropBuild. @param dict COSDictionary containing digital signature properties
83 Initializes a digital signature properties dictionary. @param dict COSDictionary containing initial property data
84 Initializes a new instance of PDSeedValue with a given COSDictionary. @param dict the COSDictionary containing seed value information
85 Initializes a new instance of PDSeedValueCertificate with a given COSDictionary. @param dict the COSDictionary containing certificate data
86 Initializes a new instance with a given COSDictionary. @param dict the COSDictionary containing signature properties
87 Initializes a new PDSeedValueTimeStamp with a given COSDictionary. @param dict the COSDictionary to manage timestamp information
88 Constructs a new PDSignature instance from a COSDictionary. @param dict the underlying COSDictionary containing signature data
89 Constructs a new instance of the `SignatureOptions` class. Initializes the page number to 0.
90 Constructs a new instance of PDFTemplateCreator with a given builder. @param templateBuilder used to build PDF templates
91 Private constructor to prevent instantiation.
92 Constructs a new PDField instance. @param acroForm the AcroForm containing the field @param field the COSDictionary representing the field data @param parent the parent PDNonTerminalField, if any
93 Initializes a new PDXFAResource instance. @param xfaBase COSBase object representing the XFA resource
94 Constructs a new instance of PDMeasureDictionary. @param dictionary COSDictionary containing measurement data
95 Constructs a new instance of PDNumberFormatDictionary. @param dictionary COSDictionary containing number format settings
96 Constructs a new PDViewportDictionary instance. @param dictionary COSDictionary containing viewport settings
97 Constructs a new instance of PDThread. @param t COSDictionary representing the thread information
98 Initializes a new PDThreadBead with a given dictionary. @param b COSDictionary containing bead data
99 Constructs PDF viewer preferences from given dictionary. @param dic COSDictionary containing preference settings
100 Constructs a new PageDrawerParameters instance. @param renderer PDFRenderer used for page drawing @param page PDPage to be rendered @param subsamplingAllowed flag indicating if subsampling is permitted @param destination RenderDestination where the page will be drawn @param renderingHints additional rendering settings @param imageDownscalingOptimizationThreshold threshold for image downscaling optimization
101 Initializes PositionWrapper with a given TextPosition. @param position text position within the PDF document
102 Constructs a new identity transformation matrix. Initializes the matrix with default values for scaling, rotation, and translation.
103 Constructs a new Matrix instance from an array of floats. @param src array containing matrix elements
104 Constructs a new transformation matrix. @param a, b, c, d, e, f matrix elements for scaling and translation
105 Private constructor to prevent instantiation.
106 Default constructor for PDFStreamEngine.
107 Adds an operator processor to the engine. @param op OperatorProcessor instance to be added
108 Sets the ASCII85 terminator character. @param term the terminator character to set @throws IllegalArgumentException if the character is not within the valid range or equals 'z'
109 Sets the page number at which to split the PDF. @param split the page number (must be greater than 0)
110 Sets the starting page for splitting. @param start the first page to include in the split (must be >= 1)
111 Sets the end page for splitting. @param end the last page number to include in the split
112 Sets the lenient mode for PDF parsing. @param lenient true to enable lenient parsing, false otherwise @throws IllegalArgumentException if called after initial parsing is done
113 Initializes compress parameters with object stream size. @param objectStreamSize size of the PDF object stream
114 Initializes PDResources with given dictionaries and caches. @param resourceDictionary COSDictionary containing PDF resources @param resourceCache ResourceCache for managing cached resources @param directFontCache Map for caching fonts directly
115 Sets the blending mode for rendering. @param blendMode the blending mode to apply, must not be null
116 Constructs a PDFieldTree for a given PDAcroForm. @param acroForm the form instance to manage fields for
117 Returns the length of the stream. Throws IllegalStateException if an OutputStream is still open. @return Length of the stream in bytes
118 Initializes a new instance of PDFMergerUtility. Sets up an empty list to store source PDFs.
119 Initializes a new instance of COSWriterObjectStream. @param compressionPool pool used for managing compressed data
120 Initializes a new instance of the PublicKeyProtectionPolicy class.
121 Initializes text clipping buffer. Begins collecting text clipping areas for a single clipping operation.
122 Adds a PDF source file to the merger. @param source File object representing the PDF to be added @throws FileNotFoundException if the specified file does not exist
123 Adds a PDF source to be merged. @param source RandomAccessRead object representing the PDF document
124 Adds a name to the instruction sequence. @param name the name to be added
125 Adds an InstructionSequence to the list of instructions. @param child the InstructionSequence to be added
126 Adds a public key recipient to the collection. @param recipient PublicKeyRecipient object to be added
127 Adds a new region to the PDF for text extraction. @param regionName unique identifier for the region @param rect bounding rectangle defining the region's area
128 Sets the trailer for the current cross-reference object. @param trailer the COSDictionary representing the PDF trailer
129 Retrieves a COSBase object by its key. @param key unique identifier for the COSBase object @return COSBase object associated with the key or null if not found
130 Retrieves an operator by its name. @param operatorName unique identifier for the operator @return Operator object or null if not found
131 Converts a Unicode sequence to its corresponding glyph name. @param unicodeSequence the Unicode sequence to convert @return the glyph name or ".notdef" if not found
132 Handles exceptions during PDF operator execution. Logs errors for critical issues and warnings for others. @param operator the PDF operator being processed @param operands list of operands associated with the operator @param exception the IOException that occurred @throws IOException if an unrecoverable error occurs
133 Retrieves the current graphics state from the stack. @return PDGraphicsState object representing the top of the stack
134 Restores the previous graphics state from the stack.
135 Returns the size of the graphics stack. @return number of elements in the graphics stack
136 Transforms a 2D point using the matrix. @param x x-coordinate of the point @param y y-coordinate of the point @return Transformed Point2D.Float object
137 Decreases the current level by one. Logs an error if level becomes negative.
138 Adds an integer to the instruction sequence. @param value the integer to be added
139 Checks if the COSStream is closed and throws IOException if it is. @throws IOException if the stream or its enclosing document is closed
140 Throws an exception as resetting is not supported. @throws IOException always when called
141 Throws an exception as resetting is not supported. @throws IOException always thrown to indicate unsupported operation
142 Retrieves encryption details of the parsed PDF document. @return PDEncryption object containing encryption information @throws IOException if the document is not parsed yet
143 Retrieves the access permissions of the parsed PDF document. @throws IOException if the document is not parsed or an I/O error occurs
144 Constructs an InvalidPasswordException with a specific error message. @param message detailed description of the password validation failure
145 Initializes an Operator instance. @param aOperator the operator string to be set @throws IllegalArgumentException if the operator starts with '/'
146 Returns string representation of PDF operator. @return formatted string including operator name
147 Returns a string representation of the COSArray. @return formatted string containing the array's elements
148 Returns a string representation of the COSObject. @return formatted string including the object's key
149 Retrieves a filter by its name. @param filterName the name of the filter to retrieve @return the Filter instance if found @throws IOException if the filter is invalid or not found
150 Checks if all elements in the operands list are instances of the specified class. @param operands list of COSBase objects to check @param clazz class type to match against @return true if all operands are instances of clazz, false otherwise
151 Adds a real number to the instruction sequence. @param value the float value to be added
152 Sets the width of the signature image. @param width the new width value for the signature @return the current PDVisibleSignDesigner instance
153 Sets the image height for the signature. @param height the desired height of the signature image @return the current PDVisibleSignDesigner instance
154 Calculates Euclidean distance between two points. @param ps starting point @param pe ending point @return distance between the two points
155 Calculates the edge equation value for a point relative to two other points. @param p the point to evaluate @param p1 first reference point @param p2 second reference point @return computed edge equation value as a double
156 Initializes a new instance of PDMarkedContent. @param tag COSName representing the content tag @param properties COSDictionary containing content properties
157 Returns the type of the pattern. @return "Pattern" as the type identifier
158 Returns the type of shading. @return The string representation of the shading type
159 Retrieves the default value of the button. @return The default value as a string or an empty string if not set
160 Unchecks the checkbox by setting its value to "Off". @throws IOException if an I/O error occurs while manipulating the PDF
161 Refreshes the appearances of specified form fields. @param fields list of PDField objects to refresh @throws IOException if an I/O error occurs during appearance construction
162 Checks if the current white point is standard. @return true if wpX, wpY, and wpZ are all 1, indicating standard white point
163 Calculates color mapping table for axial shading. @return array of RGB colors based on shading parameters
164 Generates a color table for radial shading. @return array of RGB colors representing the gradient @throws IOException if an I/O error occurs during processing
165 Creates and initializes the LZW code table. @return List containing initial set of byte arrays for encoding
166 Adds a list of PDF source documents to be merged. @param sourcesList collection of RandomAccessRead objects representing PDFs
167 Retrieves a COSBase object at the specified index. @param index position of the object in the array @return COSBase object or null if index is out of bounds
168 Retrieves an element from the list at the specified index. @param index position of the element to retrieve @return the element at the given index
169 Returns the number of elements in the COSArray. @return int representing the size of the array
170 Returns the number of COS objects in the list. @return int representing the size of the COSArrayList
171 Returns the number of public key recipients. @return int count of recipients
172 Checks if the COSArray is empty. @return true if no elements are present, false otherwise
173 Checks if the COSArrayList is empty. @return true if no elements present, false otherwise
174 Removes a public key recipient from the policy. @param recipient the PublicKeyRecipient to be removed @return true if the recipient was successfully removed, false otherwise
175 Returns an iterator over COSBase objects in the array. @return Iterator<COSBase> for traversing elements
176 Returns an iterator over COSArrayList elements. @return Iterator<E> for traversing the list
177 Returns an iterator over the collection of public key recipients. @return Iterator<PublicKeyRecipient> for traversing recipients
178 Converts the internal list of COSBase objects to an ArrayList. @return An ArrayList containing all COSBase elements
179 Converts COSBase objects to a list of COSName strings. @return List of COSName names
180 Converts COSBase objects in the array to a list of strings. @return List of string representations of COSString objects
181 Converts Boolean object to COSBoolean. @param value Boolean object to convert @return COSBoolean.TRUE if value is true, otherwise COSBoolean.FALSE
182 Converts COSBoolean to string representation. @return "true" or "false" based on the boolean value
183 Writes boolean value to PDF output stream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
184 Writes PDF null representation to an output stream. @param output target stream for writing @throws IOException if I/O error occurs
185 Writes byte array to the output stream. @param data bytes to be written @throws IOException if an I/O error occurs
186 Returns a set view of the mappings contained in this dictionary. @return Set of key-value pairs representing the dictionary's entries
187 Checks if a user property entry has changed. @param oldEntry the previous value of the entry @param newEntry the current value of the entry @return true if the entry has changed, false otherwise
188 Returns the number of key-value pairs in the dictionary. @return int size of the dictionary
189 Retrieves an item from the dictionary by its key. @param key unique identifier of the item to retrieve @return COSBase object associated with the key or null if not found
190 Returns a set of all keys in this COSDictionary. @return Set view of the keys contained in this dictionary
191 Iterates over each key-value pair in the dictionary. @param action a non-interfering action to perform on each entry
192 Retrieves all values from the COSDictionary. @return Collection of COSBase objects representing dictionary values
193 Adds all key-value pairs from another COSDictionary to this dictionary. @param dict the source dictionary whose items are to be added
194 Checks if the dictionary contains a mapping for the specified key. @param name key whose presence in the dictionary is to be tested @return true if the dictionary contains a mapping for the specified key, false otherwise
195 Tokenizes a string on spaces, preserving empty tokens. @param s input string to tokenize @return array of tokens including empty ones
196 Parses string token to integer. @param token string representation of an integer @return parsed integer value
197 Returns string representation of function type. @return concatenated string with function type
198 Sets the encryption key length for PDF documents. @param l key length to set (must be 40, 128, or 256)
199 Sets the starting page for text extraction. @param startPageValue 1-based page number to begin extraction @throws IllegalArgumentException if startPageValue is less than 1
200 Sets the ending page for text extraction. @param endPageValue 1-based page number to end extraction at @throws IllegalArgumentException if value is less than or equal to 0
201 Initializes a new instance of BruteForceParser. @param cosDocument the PDF document to parse @param cosParser the parser for the PDF document @throws IOException if an I/O error occurs during initialization
202 Constructs an instance of XrefTrailerObj with default settings. Initializes the cross-reference type to TABLE.
203 Constructs a PDResources instance with a given COSDictionary. @param resourceDictionary the dictionary containing PDF resources @throws IllegalArgumentException if resourceDictionary is null
204 Constructs a PDResources instance with given dictionary and cache. @param resourceDictionary COSDictionary containing PDF resources @param resourceCache ResourceCache for managing cached resources
205 Initializes the Operators class with a set of predefined PDF operators. Each operator is stored in a cache for quick access during processing.
206 Constructs a new PDAcroForm instance. @param doc PDF document containing the form @param form COSDictionary representing the form structure
207 Returns the number of trailers in the PDF document. @return int representing the count of trailers
208 Retrieves or creates a COSObject from the pool. @param key unique identifier for the COSObject @return COSObject associated with the key or null if key is null
209 Adds entries to the cross-reference table. @param xrefTableValues map of object keys to offsets
210 Parses a string token to a floating-point number. @param token the string representation of the real number @return parsed float value
211 Coerces a float value according to PDF specifications. @param floatValue the float value to process @return coerced float value adhering to PDF limits
212 Determines the text direction based on transformation matrix properties. @return Direction in degrees (0, 90, 180, 270)
213 Checks equality with another COSFloat instance. @param o the object to compare @return true if equal, false otherwise
214 Generates hash code based on the float value. Utilizes Float's hashCode method for calculation. @return integer hash code value
215 Formats the float value as a string. Uses plain format if no scientific notation; otherwise, strips trailing zeros. @return formatted string representation of the float value
216 Writes a COS null object to the output stream. @param output target output stream @throws IOException if an I/O error occurs
217 Constructs a new COSIncrement instance. @param incrementOrigin source of update information
218 Initializes a new instance of PDFCloneUtility. @param dest destination PDDocument for cloning operations
219 Initializes a new instance of DefaultResourceCache. @param enableStableCache flag to enable or disable stable caching
220 Determines if the COS object needs an update. @return true if the object state has been updated, false otherwise
221 Checks if the collection contains the specified COSBase object. @param base COSBase object to check for presence @return true if object is in objects or processedObjects, false otherwise
222 Checks if a COSBase object is marked as excluded. @param base the COSBase object to check @return true if the object is excluded, false otherwise
223 Adds a COSBase object to the collection. @param object the COSBase object to be added
224 Adds a processed COSBase object to the collection. @param base the COSBase object to be added
225 Clones a PDF component for use in a new document. @param base the original COSBase object to clone @return cloned TCOSBase object or null if input is null
226 Registers a TrueType font for closing. @param ttf TrueTypeFont object to be managed
227 Creates a set of COS dictionaries from form fields' widgets. @param fields list of PDF form fields @return set containing COS dictionaries of all widget annotations
228 Initializes a new instance of COSInputStream. @param input the original input stream containing PDF data @param decodeResults list of decode results for processing
229 Constructs an ASCII85InputStream from the specified input stream. Initializes decoding state and buffers. @param is the input stream to read encoded data from
230 Initializes CCITTFaxDecoderStream with given parameters. @param stream input stream containing encoded TIFF data @param columns number of columns in the image @param type compression type used @param options additional decoding options @param byteAligned whether to align bytes during decoding
231 Retrieves or creates a COSInteger instance for the given value. @param val the integer value to be represented @return a COSInteger object with the specified value
232 Checks equality with another object. @param o object to compare @return true if equal, false otherwise
233 Returns string representation of COSInteger. @return formatted string with integer value
234 Writes integer value to PDF output stream. @param output the output stream to write to @throws IOException if an I/O error occurs
235 Retrieves value by key from the COSDictionaryMap. @param key unique identifier for the value @return Object containing the retrieved value or null if not found
236 Retrieves the mapped base font name for a given alias. @param fontName alias or name of the font @return corresponding FontName object or null if not found
237 Maps an alias to its corresponding font name. @param alias alternative name for the font @param baseName official font name
238 Retrieves selected export values based on field value. @return List of selected export values or default value if none match
239 Checks if the COSName is empty. @return true if the internal name string is empty, false otherwise
240 Adds a comment to the PDF content stream. @param comment text to be added as a comment @throws IOException if an I/O error occurs while writing to the output stream
241 Writes a newline character to the output stream. @throws IOException if an I/O error occurs
242 Converts a string to its UTF-16BE hexadecimal representation. @param text input string to convert @return char array containing the hexadecimal values
243 Retrieves the underlying COSBase object. Handles dereferencing and logs errors if necessary. @return COSBase object or null if not found
244 Constructs a COSObjectKey with validation. @param num object number (must be non-negative) @param gen generation number (must be non-negative) @param index stream index
245 Generates hash code for the PDF object key. Utilizes the combined number and generation value. @return integer hash code
246 Calculates the X scaling factor from a transformation matrix. @return the absolute value of the X scaling factor
247 Calculates the vertical scaling factor. @return The vertical scaling factor based on matrix elements
248 Initializes a COSOutputStream with specified filters, parameters, and output stream. @param filters list of filters to apply during data processing @param parameters dictionary containing configuration parameters for the stream @param output underlying output stream for writing data @param streamCache cache used for buffering data if filters are present @throws IOException if an I/O error occurs during initialization
249 Initializes ASCII85OutputStream with given output stream. @param out underlying output stream for encoded data
250 Initializes a new instance of COSStandardOutputStream. @param out underlying OutputStream to write data to
251 Initializes a new instance of COSStandardOutputStream. @param out underlying OutputStream to write data to @param position initial writing position in the stream
252 Closes all associated resources to free up system memory and file handles. Ensures proper closure of streamCache, randomAccess, and randomAccessReadView.
253 Closes the output stream and releases resources. Ensures all associated streams are properly closed and released.
254 Returns a copy of the underlying byte array. @return a new byte array containing the same data as the internal array
255 Writes incremental updates to a PDF document. @throws IOException if an I/O error occurs
256 Converts byte array to ASCII string. @return ASCII representation of the byte data
257 Checks if the document is accepting updates. @return true if updates are accepted, false otherwise
258 Converts byte array to string using PDFDocEncoding. @param bytes input byte array @return String representation of the byte array or '?' for unsupported characters
259 Reads an operator from the PDF content stream. Skips spaces and reads characters until a delimiter is encountered. Handles specific cases for Type3 Glyph descriptions. @return String representation of the operator or empty string if none found
260 Converts a string to a byte array using PDFDocEncoding. @param text the input string to convert @return byte array representing the encoded text
261 Checks if a specific character is supported in PDF encoding. @param character the character to check @return true if the character is encodable, false otherwise
262 Checks if the map contains a mapping for the specified PDF key. @param key PDF object key whose presence is tested @return true if this map contains a mapping for the specified key, false otherwise
263 Checks if the specified font name is an alias. @param fontName the font name to check @return true if the font name is an alias, false otherwise
264 Returns an unmodifiable view of the code-to-name mapping. @return map from font codes to names
265 Returns an unmodifiable view of the name-to-code mapping. @return Map containing font names to their corresponding code values
266 Throws UnsupportedOperationException as updates are not allowed.
267 Reads the next byte from ASCII85 encoded input. @return the next byte or -1 if end of stream @throws IOException if an I/O error occurs
268 Closes the ASCII85InputStream and releases resources. Resets internal state and closes the underlying stream.
269 Writes a byte to the ASCII85 encoded output stream. @param b byte to be written @throws IOException if an I/O error occurs
270 Flushes the ASCII85 encoded data to the output stream. Handles any remaining bytes, writes them as 'z' if necessary, and appends the terminator sequence. Ensures proper line breaking. @throws IOException if an I/O error occurs
271 Truncates or pads the password to a fixed length. @param password input password bytes @return byte array of fixed length with password data
272 Closes the PDF content stream, logging a warning if text mode was not ended. @throws IOException if an I/O error occurs during closing
273 Imports XMP metadata into the PDF document. @param xmp byte array containing XMP metadata @throws IOException if an I/O error occurs during import
274 Determines if splitting should occur at a given page. @param pageNumber the current page number to evaluate @return true if the page is a split point, false otherwise
275 Throws exception as JPX encoding is not supported. @param input source InputStream for JPEG2000 data @param encoded OutputStream to write encoded data @param parameters COSDictionary containing encoding parameters
276 Throws an exception as this method is not yet implemented.
277 Throws an exception as this rectangle is immutable.
278 Throws an exception as modification is not allowed.
279 Throws an exception as the rectangle is immutable.
280 Throws UnsupportedOperationException as this class is immutable.
281 Retrieves the text associated with the signature. @return Signature text as a String
282 Sets the text to be displayed within the visible digital signature. @param signatureText the text content for the signature @return the current PDVisibleSignDesigner instance
283 Throws exception as signature fields do not support string values. Use setValue(PDSignature value) for setting digital signatures.
284 Retrieves the compression level for PDF processing. @return an integer representing the compression level, clamped between -1 and Deflater.BEST_COMPRESSION
285 Checks if the collection contains the specified COS object. @param o COS object to be checked @return true if the collection contains the object, false otherwise
286 Initializes the FlateFilterDecoderStream. @param inputStream compressed data stream to decode @throws IOException if an I/O error occurs
287 Closes the FlateFilterDecoderStream and releases resources. Ends the inflation process and closes the underlying stream.
288 Initializes a new instance of PDVisibleSigBuilder. Constructs the PDF structure for visible signatures.
289 Sets the signature image and updates dimensions. @param image the BufferedImage to be used as the signature
290 Finds the code for a given pattern in the code table. @param codeTable list of byte arrays representing the code table @param pattern byte array to find in the code table @return index of the pattern in the code table or -1 if not found
291 Decodes a row of image data using the specified predictor algorithm. @param predictor prediction algorithm identifier @param colors number of color components per pixel @param bitsPerComponent number of bits per color component @param columns number of columns in the image @param actline current line to decode @param lastline previous line for context-based predictors
292 Checks if the COS object pool contains an entry for the given key. @param key unique identifier for the COSBase object @return true if the key exists in the pool, false otherwise
293 Registers a security handler with a given name and protection policy. @param name unique identifier for the security handler @param securityHandler class of the security handler to register @param protectionPolicy associated protection policy class @throws IllegalStateException if the handler name is already registered
294 Checks if a font name exists in the encoding map. @param name the font name to search for @return true if the name is present, false otherwise
295 Checks if a specific font encoding code exists. @param code the encoding code to check @return true if the code is mapped, false otherwise
296 Escapes special XML characters in the input string. @param input original string to be escaped @return escaped XML string
297 Sets the bounding box for the form XObject. @param bbox PDRectangle object defining the bounds or null to remove it
298 Decodes a hexadecimal string to a byte array. @param s the hexadecimal string to decode @return decoded byte array or empty array if decoding fails
299 Closes the PDF document and associated resources. Ensures all IO streams are closed and logs any exceptions.
300 Closes the FDF document and releases resources. @throws IOException if an I/O error occurs during closing
301 Returns the underlying COSDictionary object. Checks if functionStream is not null, then returns its COSObject; otherwise, returns functionDictionary. @return COSDictionary representing the PDF dictionary or stream
302 Initializes a PDXObject with a given PDStream and subtype. @param stream the PDF data stream @param subtype the subtype of the XObject
303 Returns the underlying COSStream object. @return COSStream representing the PDF stream
304 Retrieves metadata stream from PDF ICC profile. @return COSStream containing metadata or null if not found
305 Sets metadata for the ICC profile. @param metadata COSStream containing metadata to be set
306 Checks if a signature annotation exists in the list. @param annotations list of PDF annotations @param widget annotation widget to check for @return true if matching annotation is found, false otherwise
307 Compares this annotation with another for equality. @param o the object to compare @return true if annotations are equal, false otherwise
308 Returns a set of all keys in this COSDictionaryMap. Delegates to the underlying map's keySet method. @return Set view of the keys contained in this map
309 Checks if a given signature field exists in the PDF document. @param fieldIterator iterator over all fields in the document @param signatureField the signature field to check for existence @return true if the signature field is found, false otherwise
310 Returns all PDF object representations stored in the map. @return Collection of COSObject values
311 Initializes the parser with a PDF source. @param pdfSource RandomAccessRead object representing the PDF file
312 Checks if the next character in source is a digit. @return true if the next character is a digit, false otherwise
313 Sets an XRef entry for a given object key and offset. @param objKey unique identifier for the PDF object @param offset byte position of the object in the file
314 Adds a new font encoding mapping. @param code character code @param name character name
315 Checks if the next character in the source is a space. @return true if the next character is an ASCII space, false otherwise
316 Skips a line break in the PDF source. @param linebreak character code of the current line break character @return true if a valid line break is skipped, false otherwise
317 Checks for end of string in PDF parsing. @param bracesParameter current brace count @return updated brace count or 0 if end of string detected @throws IOException on read error
318 Checks if the given character code represents an end-of-line. @param c character code to check @return true if the character is a line feed or carriage return, false otherwise
319 Reads a numeric string from the PDF source. @return StringBuilder containing the numeric string @throws IOException if an I/O error occurs or number exceeds MAX_LENGTH_LONG
320 Decodes a ByteArrayOutputStream to a UTF-8 string. @param buffer the ByteArrayOutputStream containing encoded data @return decoded string or alternative charset if decoding fails
321 Reads and checks the next character from the source. @param ec expected character to read @throws IOException if the read character does not match the expected one
322 Checks if the next character in the source is whitespace. @return true if the next character is whitespace, false otherwise
323 Parses the startxref value from a PDF document. @return the byte offset of the first object in the xref table, or -1 if not found @throws IOException if an I/O error occurs during parsing
324 Searches for the last EOF marker in a PDF file. @return position of the last EOF marker or Long.MAX_VALUE if not found @throws IOException if an I/O error occurs during reading
325 Searches for cross-reference tables in the PDF. @return List of offsets where xref tables are found @throws IOException if an I/O error occurs during reading
326 Retrieves the number of color components. Uses function or color space to determine count. @return number of color components @throws IOException if an I/O error occurs
327 Searches for XRef streams in the PDF and returns their offsets. @return List of Long containing offsets of XRef streams @throws IOException if an I/O error occurs during reading
328 Retrieves the cross-reference table. @return Map of COSObjectKey to object number or null if not resolved
329 Retrieves the startxref offset from a PDF file. @return the offset of the startxref keyword @throws IOException if an I/O error occurs or required markers are missing
330 Reads PDF stream until "endstream" or "endobj" is found. @param out output stream for filtered content @throws IOException if an I/O error occurs @return effective length of the byte sequence
331 Initializes a new instance of the class. Sets the writing mode to 0 by default.
332 Sets a page label range for a specific starting page. @param startPage the starting page index (must be non-negative) @param item the PDPageLabelRange object representing the label settings
333 Adds a CID to Unicode mapping. @param cid character identifier (must be within 0-0xFFFF) @param text corresponding text representation (cannot be null or empty)
334 Checks if there is no binary data following the current position. @return true if no binary data, false otherwise @throws IOException if an I/O error occurs
335 Checks if the next character in the source is whitespace or newline. @return true if the next character is space, tab, or newline; false otherwise @throws IOException if an I/O error occurs while reading from the source
336 Adds a cross-reference entry to the PDF. @param entry XReferenceEntry to add
337 Calculates column widths for cross-reference entries. @return int array representing max bytes needed per column
338 Initializes the COSObjectPool with the given highest cross-reference object number. @param highestXRefObjectNumber the initial highest XRef object number
339 Retrieves the trailer of the first cross-reference entry. @return COSDictionary containing the trailer or null if no entries exist
340 Retrieves the last trailer from the cross-reference map. @return COSDictionary representing the last trailer or null if empty
341 Retrieves object numbers contained in a given object stream. @param objstmObjNr object stream number to check @return set of object numbers or null if trailer is unresolved
342 Retrieves the numeric value of the reference type. @return Long representing the numeric value of the XReference entry
343 Returns the generation number of the referenced object. @return The generation part of the COSObjectKey as a long
344 Generates a string representation of the FreeReference. @return formatted string containing key, nextFreeObject, and numeric value of type
345 Returns the byte offset of the referenced object. @return The byte offset as a long value
346 Returns the generation number of the referenced object. @return Generation number as a long value
347 Returns a string representation of the reference. @return formatted string with reference details
348 Retrieves the object number from the parent key. @return The numeric part of the COSObjectKey representing the parent object's key
349 Returns the index of the object stream. @return Index of the object stream within the PDF
350 Returns a string representation of the ObjectStreamEntry. @return formatted string with key, type, object stream index, and parent key
351 Writes data to the output stream without starting a new line. @param b byte array containing data to write @param off starting offset in the byte array @param len number of bytes to write
352 Writes a single byte to the output stream. Ensures data is written on the same line and updates the position.
353 Writes an end-of-line (EOL) sequence if not already at the start of a new line.
354 Checks if compression is enabled. @return true if compression parameters are set and compression is enabled, false otherwise
355 Adds an XReferenceEntry to the document's cross-reference table. @param entry XReferenceEntry object to be added
356 Writes a PDF object reference to the output stream. @param output target OutputStream for writing @param indirectReference COSObjectKey representing the object reference @throws IOException if an I/O error occurs
357 Generates cross-reference ranges from a list of XReferenceEntry objects. @param xRefEntriesList list of XReferenceEntry objects @return array of Long representing xref ranges
358 Retrieves an instance of the MD5 MessageDigest. @return MD5 MessageDigest object @throws RuntimeException if MD5 algorithm is unavailable
359 Retrieves SHA-1 MessageDigest instance. @return MessageDigest object for SHA-1 algorithm
360 Retrieves SHA-256 message digest instance. @return MessageDigest object for SHA-256 hashing
361 Writes an FDF document to the output stream. @param doc FDFDocument to be written @throws IOException if an I/O error occurs
362 Retrieves the highest cross-reference object number from the pool. @return Long value representing the highest XRef object number
363 Returns an unmodifiable list of prepared COS object keys. @return List of COSObjectKey objects
364 Overwrites existing encoding mappings for a given code and name. @param code font encoding code @param name corresponding character name
365 Removes a specified text extraction region. @param regionName name of the region to be removed
366 Sets maximum fraction digits for decimal formatting. @param fractionDigitsNumber number of fraction digits to allow
367 Initializes a new content stream for a PDF document. @param document the PDDocument to write to @param outputStream the OutputStream where PDF content is written @param resources the PDResources containing resources for the content stream
368 Retrieves the Y component of the vertical displacement vector for a given CID. @param code character identifier code @return Y displacement value or default if not found
369 Returns the standard value if not null; otherwise, returns the default value. @param standardValue the preferred value to use if not null @param defaultValue the fallback value if standardValue is null @return the standard value or default value
370 Adjusts the signature's dimensions by a specified percentage. @param percent the percentage to zoom in or out @return PDVisibleSignDesigner instance for method chaining
371 Retrieves the width of the signature image. @return the width in pixels
372 Returns the height of the signature image. @return height in pixels
373 Adjusts signature position and transformation for page rotation. @return PDVisibleSignDesigner instance with updated properties
374 Creates an AffineTransform from the matrix values. @return AffineTransform object representing the transformation matrix
375 Encodes a string into a byte array using font-specific encoding. @param text the input string to encode @return byte array representation of the encoded string @throws IOException if an I/O error occurs during encoding
376 Converts a Unicode code point to its corresponding glyph name. @param codePoint the Unicode code point @return the glyph name or ".notdef" if not found
377 Retrieves the corresponding RenderState for a given COSName. @param state COSName representing a rendering state @return RenderState object or null if invalid
378 Retrieves BaseState from COSName. @param state COSName instance representing the state @return Corresponding BaseState or ON if null
379 Applies GSUB rules to a word and writes the transformed glyphs to an output stream. @param gsubWorker worker for applying GSUB transformations @param out ByteArrayOutputStream to write encoded glyphs @param font PDType0Font used for glyph encoding @param word input string to process @return list of glyph IDs after GSUB transformation
380 Initializes a new PDDocument instance. @param doc COSDocument representing the PDF content @param source RandomAccessRead for accessing the PDF data @param permission AccessPermission defining user permissions
381 Initializes a new FDFDocument instance. @param doc associated COSDocument object @param source RandomAccessRead for reading FDF data
382 Converts the COSArrayList to an array. @return Object[] containing elements of the list
383 Converts COSArrayList to an array. Delegates to underlying collection's toArray method. @param a target array or null for new array creation @return array containing all elements of the list
384 Returns the index of the first occurrence of the specified element. Delegates to the underlying list's indexOf method. @param o element to search for @return index of the element or -1 if not present
385 Checks if this COSArrayList contains all elements of the specified collection. @param c collection to be checked for containment in this list @return true if this list contains all elements of the specified collection
386 Removes all elements from the collection that match those in the specified collection. @param c collection containing elements to be removed @return true if any elements were removed, false otherwise
387 Retains only elements in this list that are contained in the specified collection. Compares objects by dereferencing indirect COS objects. @param c collection containing elements to be retained @return true if this list changed as a result of the call
388 Checks equality of this COSArrayList with another object. Delegates to the underlying 'actual' list's equals method. @param o the reference object with which to compare @return true if this list is equal to the specified object; false otherwise
389 Generates hash code based on the underlying COS object. @return integer hash code value
390 Returns the last index of the specified element in the list. Delegates to the underlying actual list. @param o the element to search for @return the last index of the element, or -1 if not found
391 Returns a list iterator over the elements in this COSArrayList. @return a ListIterator of the elements in this list
392 Returns a list iterator over the elements in this list starting at the specified index. @param index the index of the first element to be returned from the list iterator (by a call to next) @return ListIterator object for COSArrayList
393 Returns a sublist of this list. @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive) @return List containing elements from fromIndex to toIndex
394 Checks if the map contains a specific value. @param value value to be checked @return true if the value is present, false otherwise
395 Returns an unmodifiable set view of the map's entries. @return Set containing all key-value pairs from the actual map
396 Returns an unmodifiable set of font aliases. @return Set containing all font alias names
397 Returns string representation of the COSDictionaryMap. @return String describing the map's state
398 Converts a COSBase object to a PDNumberTreeNode. @param base the COSBase object to convert @return the converted PDNumberTreeNode object @throws IOException if conversion fails
399 Generates a letter label based on the given number. @param num the numeric value to convert to a letter label @return String representing the letter label
400 Returns the count of page ranges with labels. @return number of labeled page ranges
401 Retrieves page label range starting from a given page. @param startPage index of the starting page @return PDPageLabelRange object or null if not found
402 Returns a sorted set of page indices. @return NavigableSet containing all page indices with labels
403 Returns a copy of the dash pattern array. @return A new float array representing the dash pattern
404 Constructs a PDColor instance. @param components array of color components @param colorSpace associated color space
405 Returns the color components. @return A new array with the color components, adjusted to the color space's requirements
406 Constructs a new CoordinateColorPair. @param p 2D point representing the coordinate @param c array of floats representing the color values
407 Returns a string representation of the FunctionType2. @return String containing C0, C1, and N values
408 Calculates the bounding box for the triangle. @return array containing [minX, maxX, minY, maxY]
409 Removes and returns the top number from the stack. @return the top element as a Number, or throws an exception if empty
410 Pops and returns the top integer from the stack. @return the integer at the top of the stack
411 Pops and converts the top element of the stack to a float. @return float representation of the popped element
412 Adds a boolean value to the instruction sequence. @param value boolean to be added
413 Initializes a new execution context with specified operators. @param operatorSet set of operators to be used in the context
414 Retrieves patterns for list items. Initializes and returns a list of compiled regex patterns for list item extraction. @return List of Pattern objects for list items
415 Initializes the Mac Expert encoding table. Populates the encoding with character codes and names from MAC_EXPERT_ENCODING_TABLE.
416 Initializes the MacRoman character encoding by populating mappings.
417 Initializes the standard encoding table by mapping character codes to names.
418 Initializes symbol encoding from predefined table.
419 Initializes WinAnsiEncoding with character mappings. Populates encoding map from WIN_ANSI_ENCODING_TABLE and sets unused codes to "bullet".
420 Initializes the ZapfDingbatsEncoding with predefined character mappings.
421 Converts an array of objects to a string representation. @param array the array of objects to convert @return a string with elements joined by commas, enclosed in brackets
422 Converts a float array to a string representation. @param array float array to convert @return String with elements separated by commas within brackets
423 Adds a TextPosition to the content list. @param text TextPosition object representing text in PDF
424 Adds a PDMarkedContent object to the collection. @param markedContent the content to be added
425 Adds an XObject to the content elements. @param xobject the graphical object to be added
426 Sets printing permission for PDF. @param allowPrinting true to enable printing, false to disable
427 Sets modification permission for PDF. @param allowModifications true to allow modifications, false otherwise
428 Sets permission to extract content from PDF. @param allowExtraction true to allow, false to deny extraction
429 Enables or disables annotation modification permission. @param allowAnnotationModification true to allow, false to deny
430 Sets the permission to fill in forms within PDF documents. @param allowFillingInForm true to enable form filling, false to disable
431 Sets permission for extracting content for accessibility. @param allowExtraction true to enable extraction, false to disable
432 Sets permission to assemble document. @param allowAssembly true to allow assembly, false to disallow
433 Sets the permission for faithful printing of PDF documents. @param canPrintFaithful true to allow faithful printing, false otherwise
434 Checks if print permission is granted. @return true if printing is allowed, false otherwise
435 Checks if modification permission is granted. @return true if modification is allowed, false otherwise
436 Checks if content extraction permission is granted. @return true if extraction is allowed, false otherwise
437 Checks if annotations can be modified. @return true if modification of annotations is permitted, false otherwise
438 Checks if form filling permission is granted. @return true if form filling is allowed, false otherwise
439 Checks if extracting content for accessibility is permitted. @return true if the permission bit for extraction is enabled, false otherwise
440 Checks if document assembly permission is granted. @return true if assemble permission is enabled, false otherwise
441 Checks if faithful print permission is granted. @return true if faithful print is allowed, false otherwise
442 Retrieves the private key from the keystore. @return Private key associated with the alias or default if one entry exists. @throws KeyStoreException if key retrieval fails due to various issues.
443 Retrieves a secure random instance. @return Custom SecureRandom if set, otherwise a new default instance
444 Sets the encryption key for RC4. @param key byte array containing the encryption key (1-32 bytes)
445 Writes a single byte to the output stream after encrypting it using RC4. @param aByte byte to be encrypted and written @param output destination for encrypted data @throws IOException if an I/O error occurs during writing
446 Combines diacritic characters in a string. @param str input string containing text with diacritics @return normalized string with combined diacritic characters
447 Determines if a Unicode code point is prohibited in SASL. @param codepoint the Unicode code point to check @return true if the code point is prohibited, false otherwise
448 Computes PDF encryption version based on key length and preferences. @return version number for encryption settings
449 Returns the singleton instance of the BouncyCastleProvider. Initializes the provider if not already created.
450 Retrieves and concatenates text values of all child nodes. @param node the XML element to process @return concatenated text content of child nodes
451 Writes a string to the output stream. @param text content to be written
452 Retrieves or parses a predefined CMap by name. @param cMapName unique identifier for the CMap @return CMap object or throws IOException on error
453 Parses a CMap from the given input stream. @param randomAccessRead source of the CMap data @return CMap object or null if parsing fails @throws IOException if an I/O error occurs during parsing
454 Generates a set of PostScript names for a given font. @param postScriptName original PostScript name @return set containing the original and hyphen-free names
455 Calculates the set of points that make up a line segment between two given points. @param x0 starting x-coordinate @param y0 starting y-coordinate @param x1 ending x-coordinate @param y1 ending y-coordinate @return Set of Point objects representing the line
456 Calculates the number of unique points in a triangle. @param p array of Point2D representing triangle vertices @return count of distinct points after scaling and rounding
457 Adds or updates a font in the cache. @param info font information key @param font FontBoxFont object to be cached
458 Retrieves a FontBoxFont from the cache based on font information. @param info font configuration details @return cached FontBoxFont or null if not found
459 Maps a font name to its base name. @param baseName FontName object representing the base font
460 Adds a font substitution mapping. @param match original font name to match (case-insensitive) @param replace substitute font name
461 Retrieves font information by format and PostScript name. @param format the desired font format @param postScriptName the font's PostScript name @return FontInfo object if found, otherwise null
462 Retrieves font substitutes for a given PostScript name. @param postScriptName original font name @return list of substitute names or empty list if none found
463 Retrieves the font name associated with a given code. @param code the encoding code to look up @return the corresponding font name or ".notdef" if not found
464 Prints and retrieves the best font match from a priority queue. @param queue priority queue containing FontMatch objects @return the best FontMatch object
465 Retrieves Type 2 char string for a given CID. @param cid character identifier @return Type2CharString object or null if not found
466 Converts character code to CID using the font's CMap. @param code character code to convert @return CID (Character Identifier) for the given code
467 Converts color components to RGB integer. @return RGB value as an integer @throws IOException if conversion fails
468 Adjusts color component for backdrop removal. @param groupRGB RGB value of the group to be rendered @param backdropRGB RGB value of the background @param shift bit shift for the color channel (0, 8, or 16) @param alphaFactor blending factor for transparency @return adjusted color component value clamped between 0 and 255
469 Retrieves a segment of image data. @return byte array containing specified section of image data
470 Retrieves the default Adobe Glyph List. @return GlyphList object representing Adobe's glyph list
471 Extracts and initializes CMAP tables for font encoding. Ensures proper handling of different platform-specific encodings.
472 Loads font metrics from an AFM file. @param fontName the name of the font to load metrics for @throws IOException if the resource is not found or parsing fails
473 Checks if font embedding is permitted. @param ttf TrueTypeFont object to check @return true if embedding is allowed, false otherwise
474 Checks if font subsetting is permitted. @param ttf TrueTypeFont object to evaluate @return true if subsetting is allowed, false otherwise
475 Generates a tag for font embedding based on glyph to CID mapping. @param gidToCid map of glyph IDs to CIDs @return unique 6-character base25 encoded string followed by '+'
476 Converts a glyph name to its corresponding Unicode character. @param name the glyph name @return Unicode string or null if not found
477 Constructs a Type1Encoding instance from given FontMetrics. @param fontMetrics FontMetrics object containing character metrics
478 Constructs a PDColor with specified components, pattern name, and color space. @param components array of color components @param patternName name of the pattern if applicable @param colorSpace color space associated with the color
479 Creates a PDColorSpace instance from a COSBase object. @param colorSpace base object representing the color space @return PDColorSpace object or null if not found
480 Converts a WritableRaster to a BufferedImage using the specified ColorSpace. @param raster the source WritableRaster containing image data @param awtColorSpace the ColorSpace for color conversion @return BufferedImage representing the raw image data
481 Converts a raster to an RGB image using AWT. @param raster source raster data @param colorSpace color space for conversion @return BufferedImage in RGB format
482 Checks if the given ICC profile represents sRGB color space. @param profile ICC_Profile object to check @return true if profile is sRGB; false otherwise
483 Retrieves the color space type based on ICC profile or alternate color space. @return An integer representing the color space type
484 Creates a JPEG image from a BufferedImage with default quality. @param document PDF document to add the image to @param image source BufferedImage object @return PDImageXObject representing the JPEG in the PDF @throws IOException if an I/O error occurs
485 Initializes a PredictorEncoder for a given PDF document and image. @param document PDDocument where the image will be encoded @param image BufferedImage to be encoded
486 Scales an image to the specified dimensions. Uses bicubic interpolation for high quality if not large scale. @param image original BufferedImage to scale @param width new width in pixels @param height new height in pixels @param type image type (e.g., BufferedImage.TYPE_INT_RGB) @param interpolate true to use interpolation @return scaled BufferedImage
487 Returns the COS object containing image parameters. @return COSDictionary with image attributes
488 Parses PNG chunks from image data. @param imageData byte array containing PNG data @return PNGConverterState object or null if parsing fails
489 Combines IDAT chunks into a single input stream. @param state PNG conversion state containing IDAT chunks @return Combined InputStream of all IDAT data
490 Initializes a new Patch instance with specified corner colors. @param color 2D array of float values representing corner colors
491 Retrieves the current clipping path as a single Area object. If multiple paths exist, computes their intersection. @return Area representing the combined clipping path
492 Constructs a PlainText object from a list of strings. @param listValue List of string paragraphs to be converted
493 Generates hash code based on the annotation's dictionary. @return hash value of the COSDictionary
494 Retrieves an affine transformation matrix for translating coordinates. @return AffineTransform instance for translating to the origin based on bounding box minimums.
495 Computes parameters for a polygon segment in a cloudy border. @param advInterm advance distance per intermediate curl @param advCorner advance distance per corner @param k curvature factor @param r radius of the polygon @param length total length of the polygon segment @param array output array to store computed angle and error @return number of intermediate curls or -1 if length is zero
496 Computes parameters for an ellipse. @param pt current point @param ptNext next point @param r radius @param curlAdv curvature advancement @return computed angle or default value
497 Ensures polygon vertices are in counterclockwise order. @param points array of Point2D.Double representing polygon vertices
498 Flattens an ellipse into a series of line segments. @param left x-coordinate of the left boundary @param bottom y-coordinate of the bottom boundary @param right x-coordinate of the right boundary @param top y-coordinate of the top boundary @return array of Point2D.Double representing the flattened ellipse
499 Checks if a GeneralPath represents a rectangle. @param path the path to check @return true if the path forms a rectangle, false otherwise
500 Retrieves the height of the template page. @return template height in points
501 Sets the signature's position on the page. @param x horizontal coordinate @param y vertical coordinate @return current PDVisibleSignDesigner instance for chaining
502 Applies a transformation to the signature. @param affineTransform the affine transform to apply @return this PDVisibleSignDesigner instance for method chaining
503 Constructs a PDPageFitDestination from a COSArray. @param arr the COSArray representing the destination in the PDF document
504 Initializes a PDPageFitHeightDestination with a given COSArray. @param arr the COSArray representing the destination in the PDF document
505 Constructs a rectangle fit destination from a COSArray. @param arr COSArray representing the destination in the PDF document
506 Initializes a PDPageFitWidthDestination with a given COSArray. @param arr the COSArray representing the destination in the PDF document
507 Constructs a PDPageXYZDestination with specified COSArray. @param arr COSArray representing the destination in the PDF document
508 Ensures a node has no siblings. @param node the PDOutlineItem to check @throws IllegalArgumentException if the node has any siblings
509 Returns an iterable of child outline items. @return Iterable of PDOutlineItem objects
510 Sorts list of KeyValue pairs by value. @param pairs List of key-value pairs to sort
511 Sorts key-value pairs by their keys. @param pairs list of KeyValue objects to sort
512 Applies rendering hints to the graphics context.
513 Adjusts the clip path for rendering based on transformation and scaling. @param linePath original path to adjust @return adjusted GeneralPath or original if no changes needed
514 Calculates image subsampling for rendering. @param pdImage PDF image to render @param at affine transformation applied to the image @return integer representing subsampling factor
515 Rounds up the given number to the nearest integer. @param num the number to round up @return the rounded-up integer value
516 Calculates the X rotation based on given rotation angle. @param rotation angle of rotation in degrees @return X translation value adjusted for rotation
517 Calculates the Y-coordinate of the lower-left corner based on rotation. @param rotation angle in degrees (0, 90, 180, 270) @return Y-coordinate after applying rotation
518 Calculates the width of a rotated text element. @param rotation angle of rotation in degrees @return absolute width based on rotation
519 Writes the Unicode representation of a text position to the output stream. @param text TextPosition object containing the text to be written
520 Returns the Unicode representation of the text element. @return Unicode string of the text element
521 Retrieves extracted text from a specified region. @param regionName name of the region to fetch text from @return text content of the region or null if not found
522 Starts article extraction with specified text direction. @param isLTR true if left-to-right, false otherwise
523 Ends the current article by writing its end position to the output.
524 Writes the line separator to the output stream. @throws IOException if an I/O error occurs during writing
525 Writes the word separator to the output stream. @throws IOException if an I/O error occurs
526 Writes the end of a paragraph to the output. Ensures proper paragraph handling and updates state.
527 Writes the start position of the current page to the output stream.
528 Writes the end marker of the current page to the output stream.
529 Matches a string against a list of patterns. @param string the input string to match @param patterns list of compiled regex patterns @return the first matching Pattern or null if no match is found
530 Handles text direction for a given word. @param word input string to process @return processed string with correct text direction
531 Parses a BIDI file to populate the mirroring character map. @param inputStream input stream of the BIDI file @throws IOException if an I/O error occurs
532 Returns the Unicode string with visually ordered characters. Checks directionality and reverses if necessary. @return Visually ordered Unicode string
533 Processes text position and assigns it to the appropriate region. @param text TextPosition object containing text details
534 Checks if the text element is a diacritic. @return true if the text is a diacritic, false otherwise
535 Updates the TimeZone ID based on its offset from UTC. @param tz the TimeZone object to update
536 Converts a byte to its hexadecimal string representation. @param b input byte @return two-character string representing the byte in hexadecimal
537 Converts a byte array to its hexadecimal string representation. @param bytes input byte array @return String containing hexadecimal values of the input bytes
538 Converts a single byte to its two hexadecimal representation bytes. @param b input byte @return array of two bytes representing high and low nibbles in hex
539 Converts a byte array to its hexadecimal ASCII representation. @param bytes input byte array @return byte array containing ASCII characters of the hexadecimal representation
540 Writes a byte as two hexadecimal characters to an output stream. @param b the byte to write @param output destination for the hexadecimal representation @throws IOException if an I/O error occurs
541 Decodes a Base64 encoded string to a byte array. @param base64Value the Base64 encoded input string @return decoded byte array or null if invalid
542 Merges two sorted segments of an array. @param arr input array containing elements to merge @param aux auxiliary array for merging @param from starting index of the first segment @param mid ending index of the first segment and starting index of the second @param to ending index of the second segment @param cmp comparator defining element order
543 Initializes a Matrix from an AffineTransform. @param at the AffineTransform to convert
544 Applies transformation to a 2D point using the matrix. @param point Point2D object to transform
545 Formats a float into ASCII byte representation. @param value the float to format @param maxFractionDigits maximum number of fraction digits @param asciiBuffer buffer to store ASCII bytes @return new offset after formatting or -1 if invalid input
546 Retrieves the PDFBox library version. @return version string or null if unable to load
547 Parses XML from an input stream. @param is input stream containing XML data @param nsAware true for namespace awareness, false otherwise @return Document object representing the parsed XML @throws IOException if parsing fails
548 Searches for a value based on byte sequence. @param bytes input byte array to search @return associated value or default if not found
