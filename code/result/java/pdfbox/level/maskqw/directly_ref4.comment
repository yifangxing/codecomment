1 Creates a corner curl for polygons and ellipses.
2 Draws an ellipse without a cloudy border effect.
3 Default constructor.
4 Set if this page destination should just fit the bounding box. The default is false. @param fitBoundingBox A flag indicating if this should fit the bounding box.
5 Default constructor.
6 Set the left x-coordinate, a value of -1 implies that the current x-coordinate will be used. @param x The left x coordinate.
7 Set if this page destination should just fit the bounding box. The default is false. @param fitBoundingBox A flag indicating if this should fit the bounding box.
8 Default constructor.
9 Set the left x-coordinate, a value of -1 implies that the current x-coordinate will be used. @param x The left x coordinate.
10 Set the bottom y-coordinate, a value of -1 implies that the current y-coordinate will be used. @param y The bottom y coordinate.
11 Set the right x-coordinate, a value of -1 implies that the current x-coordinate will be used. @param x The right x coordinate.
12 Set the top y-coordinate, a value of -1 implies that the current y-coordinate will be used. @param y The top ycoordinate.
13 Default constructor.
14 Set the top y-coordinate, a value of -1 implies that the current y-coordinate will be used. @param y The top ycoordinate.
15 Set if this page destination should just fit the bounding box. The default is false. @param fitBoundingBox A flag indicating if this should fit the bounding box.
16 Default constructor.
17 Set the left x-coordinate, values 0 or -1 imply that the current x-coordinate will be used. @param x The left x coordinate.
18 Set the top y-coordinate, values 0 or -1 imply that the current y-coordinate will be used. @param y The top ycoordinate.
19 Set the zoom value for the page, values 0 or -1 imply that the current zoom will be used. @param zoom The zoom value.
20 This will parse a PDF dictionary value. @return The parsed Dictionary object. @throws IOException If there is an error parsing the dictionary object.
21 Resolve the bounding box. @param fieldWidget the annotation widget. @param appearanceStream the annotations appearance stream. @return the resolved boundingBox.
22 This will decrypt a dictionary. @param dictionary The dictionary to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error creating a new string.
23 Sets the bounding box. @param bbox the bounding box
24 Sets a colour. @param name the attribute name @param value the colour
25 Sets four colours. @param name the attribute name @param value the four colours
26 Creates a new PDPage instance for embedding, with a size of U.S. Letter (8.5 x 11 inches).
27 This will get the FDF dictionary. @return The FDF dictionary.
28 Constructor, creates a new FDF document.
29 This will get the FDF Catalog. This is guaranteed to not return null. @return The documents /Root dictionary
30 This is guaranteed to never return null.<br> To quote the PDF Spec "An array of two numbers between 0.0 and 1.0 indicating the fraction of leftover space to allocate at the left and bottom of the icon. A value of [0.0 0.0] positions the icon at the bottom-left corner of the annotation rectangle; a value of [0.5 0.5] centers it within the rectangle. This entry is used only if the icon is scaled proportionally. Default value: [0.5 0.5]." @return The fractional space to allocate.
31 Builds the CIDSet entry, required by PDF/A. This lists all CIDs in the font, including those that don't have a GID.
32 Creates a new tiling pattern.
33 Insert a single sibling before this node. @param newSibling The item to insert. @throws IllegalArgumentException if the given sibling node is part of a list (i.e. if it has a previous or a next sibling)
34 Insert a single sibling after this node. @param newSibling The item to insert. @throws IllegalArgumentException if the given sibling node is part of a list (i.e. if it has a previous or a next sibling)
35 This will set the first bead in the thread. When this is set it will also set the thread property of the bead object. @param bead The first bead in the thread.
36 Default constructor.
37 Sets the role map. @param roleMap the role map
38 Sets a name value. @param name the attribute name @param value the name value
39 This will set the rendering intent for the graphics state. @param ri The new rendering intent
40 This will set the name of the action to be performed. @param name The name of the action to be performed.
41 This will set the border effect, see the STYLE_* constants for valid values. @param s the border effect to use
42 Creates an empty page label dictionary for the given document. <p> Note that the page label dictionary won't be automatically added to the document; you will still need to do it manually (see {@link org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)}. </p> @param document The document the page label dictionary is created for. @see org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)
43 Constructor with required values. @param structureType The structure type. Constants are available in the {@link StandardStructureTypes} class. @param parent The parent structure node.
44 Default Constructor.
45 Creates a new shading pattern.
46 Default constructor.
47 Get the outline associated with this document or null if it does not exist. @return The document's outline.
48 @return The parent of this node or null if there is no parent.
49 Constructor.
50 creates a new transition with default "replace" style {@link PDTransitionStyle#R}
51 Set the value of a date entry in the dictionary. @param key The key to the date value. @param date The date value.
52 Set the date object. @param embedded The embedded dictionary. @param key The key to the date. @param date The date to set.
53 This will set the creation date of the document. @param date The new creation date for the document.
54 This will set the modification date of the document. @param date The new modification date for the document.
55 Set the creation date. @param date The date the annotation was created.
56 This will set the date and time the annotation was modified. @param c the date and time the annotation was created.
57 This will set the date and time the annotation was created. @param creationDate the date and time the annotation was created.
58 Set the sign date. @param cal the date to be used as sign date
59 Set the custom metadata value. @param fieldName The name of the custom metadata field. @param fieldValue The value to the custom metadata field.
60 Sets a string attribute value. @param name the attribute name @param value the string attribute value
61 This will set the base URI to be used in resolving relative URI references. URI actions within the document may specify URIs in partial form, to be interpreted relative to this base address. If no base URI is specified, such partial URIs will be interpreted relative to the location of the document itself. The use of this entry is parallel to that of the body element &lt;BASE&gt;, as described in the HTML 4.01 Specification. @param base The base URI to be used.
62 A text string indicating the version of the application implementation, as described by the <code>Name</code> attribute in this dictionary. When set by Adobe Acrobat, this entry is in the format: major.minor.micro (for example 7.0.7). <p> NOTE: Version value is specific for build data dictionary when used as the <code>App</code> dictionary in a build properties dictionary. </p> @param applicationVersion the application implementation version
63 This will set the label for the units. @param units the label for the units
64 This will set the value for the manner to display a fractional value. Allowed values are "D", "F", "R", "T" and null. @param fractionalDisplay the manner to display a fractional value
65 This will set the text to be used between orders of thousands in display of numerical values. @param thousandsSeparator thousands separator
66 This will set the text to be used as the decimal point in displaying numerical values. @param decimalSeparator decimal separator
67 This will set the text to be concatenated to the left of the label specified by U. @param labelPrefixString label prefix
68 This will set the text to be concatenated after the label specified by U. @param labelSuffixString label suffix
69 This will set the value indicating the ordering of the label specified by U to the calculated unit value. Possible values are "S", "P" and null. @param labelPositionToValue label position
70 This will create an FDF field from an XFDF XML document. @param fieldXML The XML document that contains the XFDF data. @throws IOException If there is an error reading from the dom.
71 Creates a new optional content group (OCG). @param name the name of the content group
72 Sets an integer. @param name the attribute name @param value the integer
73 Sets an integer number. @param name the attribute name @param value the integer number
74 This will set the precision or denominator of a fractional amount. @param denominator the precision or denominator
75 Creates a new CCITT group 4 (T6) compressed image XObject from a b/w BufferedImage. This compression technique usually results in smaller images than those produced by {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) }. @param document the document to create the image as part of. @param image the image. @return a new image XObject. @throws IOException if there is an error creating the image. @throws IllegalArgumentException if the BufferedImage is not a b/w image.
76 Set the number of bits per component. @param bitsPerComponent the number of bits per component
77 Set the number of bits per component. @param bitsPerComponent the number of bits per component
78 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
79 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
80 Sets a float number. @param name the attribute name @param value the float number
81 This will set the intensity of the applied effect. @param i the intensity of the effect values 0 to 2
82 This will set the conversion factor. @param conversionFactor the conversion factor
83 This will get the file specification for this stream. This is only required for external files. @return The file specification. @throws IOException If there is an error creating the file spec.
84 The source file or target file: the PDF document file that this FDF file was exported from or is intended to be imported into. @return The F entry of the FDF dictionary. @throws IOException If there is an error creating the file spec.
85 This will get the list of embedded FDF entries, or null if the entry is null. This will return a list of PDFileSpecification objects. @return A list of embedded FDF files. @throws IOException If there is an error creating the file spec.
86 This will get the file specification of this reference. An optional parameter. @return The F entry for this dictionary. @throws IOException If there is an error creating the file spec.
87 This will get the file in which the destination is located. @return The F entry of the specific embedded go-to action dictionary. @throws IOException If there is an error creating the file spec.
88 This will get the file in which the destination is located. @return The F entry of the specific Submit-From action dictionary. @throws IOException If there is an error creating the file spec.
89 This will get the application to be launched or the document to be opened or printed. It is required if none of the entries Win, Mac or Unix is present. If this entry is absent and the viewer application does not understand any of the alternative entries it should do nothing. @return The F entry of the specific launch action dictionary. @throws IOException If there is an error creating the file spec.
90 This will get the file in which the destination is located. @return The F entry of the specific remote go-to action dictionary. @throws IOException If there is an error creating the file spec.
91 This will get the file in which the destination is located. @return The F entry of the specific Submit-From action dictionary. @throws IOException If there is an error creating the file spec.
92 This will get the file in which the destination is located. @return The F entry of the specific thread action dictionary. @throws IOException If there is an error creating the file spec.
93 Return the attached file. @return The attached file. @throws IOException If there is an error creating the file spec.
94 Default constructor.
95 Default constructor.
96 Default constructor.
97 Default constructor.
98 Constructor.
99 Constructor.
100 Constructor.
101 Constructor.
102 Constructor.
103 Constructor.
104 Creates a Circle or Square annotation of the specified sub type. @param subType the subtype the annotation represents.
105 Constructor.
106 Creates a TextMarkup annotation of the specified sub type. @param subType the subtype the annotation represents
107 Gets the artifact's bounding box (BBox). @return the artifact's bounding box
108 Gets the bounding box. @return the bounding box.
109 The rectangle associated with this annotation. @return The annotation rectangle.
110 This will retrieve the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. @return the rectangle difference
111 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
112 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
113 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
114 This will get the fonts bounding box. @return The fonts bounding box.
115 This will get the fonts bounding box from its dictionary. @return The fonts bounding box.
116 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the form XObject's bounding box. These boundaries are used to clip the form XObject and to determine its size for caching. @return The BBox of the form.
117 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the pattern's bounding box. @return The BBox of the pattern.
118 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the shading's bounding box. @return the BBox of the form
119 The annotation rectangle, defining the location of the annotation on the page in default user space units. This is usually required and should not return null on valid PDF documents. But where this is a parent form field with children, such as radio button collections then the rectangle will be null. @return The Rect value of this annotation.
120 This will get the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
121 This will get the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
122 This will retrieve the rectangle specifying the location of the viewport. @return the location
123 The rectangle on the page that this bead is part of. @return The part of the page that this bead covers.
124 @param array dash array @param phase dash phase
125 Get the line dash pattern for this box style. This is guaranteed to not return null. The default is [3],0. @return The line dash pattern.
126 This will get the dash pattern. @return null or the D value in the dictionary.
127 This will retrieve the dash style used for drawing the border. @return the dash style of the border
128 Returns an ARGB image filled with the given paint and using the given image as a mask. @param paint the paint to fill the visible portions of the image with @return a masked image filled with the given paint @throws IOException if the image cannot be read @throws IllegalStateException if the image is not a stencil.
129 This will get the optional matrix of an XObjectForm. It maps the form space to user space. @return the form matrix if available, or the identity matrix.
130 Returns the pattern matrix, or the identity matrix is none is available. @return the pattern matrix
131 This will get the optional Matrix of a function based shading. @return the matrix
132 Sets an attribute. @param attrName the attribute name @param attrValue the attribute value
133 Returns the given attribute, inheriting from parent tree nodes if necessary. @param node page object @param key the key to look up @return COS value for the given key
134 This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert it to a primitive boolean. @param key The key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The entry converted to a boolean.
135 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the defaultvalue will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
136 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value -1 will be returned. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @return The integer value.
137 Creates an inline image from the given parameters and data. @param parameters the image parameters @param data the image data @param resources the current resources @throws IOException if the stream cannot be decoded
138 Returns the suffix for this image type, e.g. jpg/png. @return The image suffix.
139 This will get all dictionaries objects by type. @param type1 The first possible type of the object, mandatory. @param type2 The second possible type of the object, usually an abbreviation, optional. @return This will return all objects with the specified type(s).
140 Brute force search for all trailer marker. @param trailer dictionary to be used as trailer dictionary @throws IOException if something went wrong
141 Search for the different parts of the trailer dictionary. @param trailer dictionary to be used as trailer dictionary @return true if the root was found, false if not. @throws IOException if something went wrong
142 Returns all pages in the document, as a page tree. @return PDPageTree providing all pages of the document
143 Constructor for reading. @param root A page tree root.
144 Returns the Unicode character sequence which corresponds to the given character code. @param code character code @param customGlyphList a custom glyph list to use instead of the Adobe Glyph List @return Unicode character(s)
145 Returns the G entry of the soft mask object @return form containing the transparency group @throws IOException if the group could not be read
146 Set the mac subtype. @param macSubtype The mac subtype.
147 Set the mac Creator. @param macCreator The mac Creator.
148 Set the mac ResFork. @param macResFork The mac ResFork.
149 This will tell if this document is encrypted or not. @return true If this document is encrypted.
150 This will parse the stream and populate the FDFDocument object. @return the parsed FDFDocument @throws IOException If there is an error reading from the stream or corrupt data is found.
151 This will parse the stream and populate the PDDocument object. This will close the keystore stream when it is done parsing. @param lenient activate leniency if set to true @return the populated PDDocument @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error reading from the stream or corrupt data is found.
152 Get the documents AcroForm. This will return null if no AcroForm is part of the document. @return The document's AcroForm.
153 Find the page destination from a named destination. @param namedDest the named destination. @return a PDPageDestination object or null if not found. @throws IOException if there is an error creating the PDPageDestination object.
154 Returns the color space resource with the given name, or null if none exists. This method is for PDFBox internal use only, others should use {@link #getColorSpace(COSName)}. @param name Name of the color space resource. @param wasDefault if current color space was used by a default color space. This parameter is to @return a new color space. @throws IOException if something went wrong.
155 Returns true if the given color space name exists in these resources. @param name Name of the color space resource. @return true if the given color space name exists in these resources, otherwise false
156 Returns the extended graphics state resource with the given name, or null if none exists. @param name Name of the graphics state resource. @return the extended graphics state with the given name or null
157 Tells whether the XObject resource with the given name is an image. @param name Name of the XObject resource. @return true if it is an image XObject, false if not.
158 Returns the names of the color space resources, if any. @return an iterable containing all names of available colorspaces
159 Returns the names of the XObject resources, if any. @return an iterable containing all names of available xobjects
160 Returns the names of the font resources, if any. @return an iterable containing all names of available fonts
161 Returns the names of the property list resources, if any. @return an iterable containing all names of available property lists
162 Returns the names of the shading resources, if any. @return an iterable containing all names of available shadings
163 Returns the names of the pattern resources, if any. @return an iterable containing all names of available patterns
164 Returns the names of the extended graphics state resources, if any. @return an iterable containing all names of available extended graphics states
165 Adds the given resource if it does not already exist.
166 Sets the font resource with the given name. @param name the name of the resource @param font the font to be added
167 Sets the color space resource with the given name. @param name the name of the resource @param colorSpace the color space to be added
168 Sets the extended graphics state resource with the given name. @param name the name of the resource @param extGState the extended graphics state to be added
169 Sets the shading resource with the given name. @param name the name of the resource @param shading the shading to be added
170 Sets the pattern resource with the given name. @param name the name of the resource @param pattern the pattern to be added
171 Sets the property list resource with the given name. @param name the name of the resource @param properties the property list to be added
172 Sets the XObject resource with the given name. @param name the name of the resource @param xobject the XObject to be added
173 Set the embedded file for this spec. You should also call {@link #setEmbeddedFileUnicode(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile) setEmbeddedFileUnicode(PDEmbeddedFile)} for cross-platform and cross-language compatibility. @param file The file to be embedded.
174 Set the embedded Unicode file for this spec. If you call this, then do not forget to also call {@link #setEmbeddedFile(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile) setEmbeddedFile(PDEmbeddedFile)} or the attachment will not be visible on some viewers. @param file The Unicode file to be embedded.
175 Returns the standard crypt filter. @return the standard crypt filter if available.
176 Returns the default crypt filter (for public-key security handler). @return the default crypt filter if available.
177 Sets the standard crypt filter. @param cryptFilterDictionary the standard crypt filter to set
178 Sets the default crypt filter (for public-key security handler). @param defaultFilterDictionary the standard crypt filter to set
179 Returns the stream of the glyph for the given character code @param code character code @return the stream to be used to render the glyph
180 Returns the base state for optional content groups. @return the base state
181 Sets the base state for optional content groups. @param state the base state
182 Enables or disables an optional content group. @param group the group object @param enable true to enable, false to disable @return true if the group already had an on or off setting, false otherwise
183 Create a new tiling pattern content stream. @param pattern The tiling pattern stream to write to. @throws IOException If there is an error writing to the form contents.
184 Get the annotations appearance dictionary. <p> This will get the annotations appearance dictionary. If this is not existent an empty appearance dictionary will be created. @return the annotations appearance dictionary
185 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". If there is no rollover appearance then the normal appearance will be returned. Which means that this method will never return null. @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
186 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". If there is no rollover appearance then the normal appearance will be returned. Which means that this method will never return null. @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
187 @return The first child or null if there is no child.
188 @return The last child or null if there is no child.
189 Get the signature dictionary. @return the signature dictionary
190 Append a bead after this bead. This will correctly set the next/previous beads in the linked list. @param append The bead to insert.
191 Returns the appearance stream for this annotation, if any. The annotation state is taken into account, if present. @return the appearance stream
192 Get the value which sets the check box to the On state. <p>The On value should be 'Yes' but other values are possible so we need to look for that. On the other hand the Off value shall always be 'Off'. If not set or not part of the normal appearance keys 'Off' is the default</p> @return the value setting the check box to the On state. If an empty string is returned there is no appearance definition.
193 Check if all entries of the pages dictionary are present. Those which can't be dereferenced are removed. @param root the root dictionary of the pdf @throws java.io.IOException if the page tree root is null
194 The name to retrieve. @param name The name in the tree. @return The value of the name in the tree. @throws IOException If there is a problem creating the destinations.
195 Returns the value corresponding to an index in the number tree. @param index The index in the number tree. @return The value corresponding to the index. @throws IOException If there is a problem creating the values.
196 Set the children of this number tree. @param kids The children of this number tree. These have to be in sorted order. Because of that, it is usually easier to call {@link #setNumbers(Map)} with a map and pass a single element list here.
197 Set the numbers for this node. This method will set the appropriate upper and lower limits based on the keys in the map and take care of the ordering. @param numbers The map of numbers to objects, or <code>null</code> for nothing.
198 This will get the number of output parameters that have a range specified. A range for output parameters is optional so this may return zero for a function that does have output parameters, this will simply return the number that have the range specified. @return The number of output parameters that have a range specified.
199 This will get the range for a certain output parameters. This is will never return null. If it is not present then the range 0 to 0 will be returned. @param n The output parameter number to get the range for. @return The range for this component.
200 Clip the given input values to the ranges. @param inputValues the input values @return the clipped values
201 This will get the number of input parameters that have a domain specified. @return The number of input parameters that have a domain specified.
202 This will get the range for a certain input parameter. This is will never return null. If it is not present then the range 0 to 0 will be returned. @param n The parameter number to get the domain for. @return The domain range for this component.
203 calculate array index (structure described in p.171 PDF spec 1.7) in multiple dimensions. @param vector with coordinates @return index in flat array
204 Returns all encode values as COSArray. @return the encode array.
205 Get the decode for the input parameter. @param paramNum The function parameter number. @return The decode parameter range or null if none is set.
206 Get the encode for the input parameter. @param n The function parameter number. @return The encode parameter range or null if none is set.
207 Is the artifact attached to the top edge? @return <code>true</code> if the artifact is attached to the top edge, <code>false</code> otherwise
208 Is the artifact attached to the bottom edge? @return <code>true</code> if the artifact is attached to the bottom edge, <code>false</code> otherwise
209 Is the artifact attached to the left edge? @return <code>true</code> if the artifact is attached to the left edge, <code>false</code> otherwise
210 Is the artifact attached to the right edge? @return <code>true</code> if the artifact is attached to the right edge, <code>false</code> otherwise
211 Constructor. @param fontDictionary The font dictionary according to the PDF specification.
212 Creates a new DictionaryEncoding for embedding. @param baseEncoding the base encoding of this encoding @param differences the differences of this encoding with regard to the base encoding
213 Creates a new DictionaryEncoding for a Type 3 font from a PDF. @param fontEncoding The Type 3 encoding dictionary.
214 Creates a new DictionaryEncoding from a PDF. @param fontEncoding The encoding dictionary. @param isNonSymbolic True if the font is non-symbolic. False for Type 3 fonts. @param builtIn The font's built-in encoding. Null for Type 3 fonts.
215 Creates a new CalRGB color space using the given COS array. @param rgb the cos array which represents this color space
216 This will set the a range for the "a" component. @param range the new range for the "a" component, or null if defaults (-100..100) are to be set.
217 This will set the "b" range for this color space. @param range the new range for the "b" component, or null if defaults (-100..100) are to be set.
218 Returns the first optional content group of the given name. @param name the group name @return the optional content group or null, if there is no such group
219 Adds an optional content group (OCG). @param ocg the optional content group
220 Returns the collection of all optional content groups. @return the optional content groups
221 Constructor. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws java.io.IOException if there is an error getting the color space or doing background color conversion.
222 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
223 This will retrieve the color used in drawing various elements. As of PDF 1.6 these are : <ul> <li>Background of icon when closed</li> <li>Title bar of popup window</li> <li>Border of a link annotation</li> </ul> @return Color object representing the colour
224 This will retrieve the border color. @return the border color.
225 This will retrieve the background color. @return the background color.
226 works like {@link #addKeyUsage(String)} but enters each character separately @param digitalSignature char that is one of {0, 1, X} @param nonRepudiation char that is one of {0, 1, X} @param keyEncipherment char that is one of {0, 1, X} @param dataEncipherment char that is one of {0, 1, X} @param keyAgreement char that is one of {0, 1, X} @param keyCertSign char that is one of {0, 1, X} @param cRLSign char that is one of {0, 1, X} @param encipherOnly char that is one of {0, 1, X} @param decipherOnly char that is one of {0, 1, X}
227 Will return the embedded signature between the byterange gap. @param pdfFile The signed pdf file as InputStream. It will be closed in this method. @return a byte array containing the signature @throws IOException if the pdfFile can't be read @throws IndexOutOfBoundsException if the byterange array is not long enough
228 Will return the embedded signature between the byterange gap. @param pdfFile The signed pdf file as byte array @return a byte array containing the signature @throws IOException if the pdfFile can't be read @throws IndexOutOfBoundsException if the byterange array is not long enough
229 Return the signed content of the document. This is not a PDF file, nor is it the PDF file before signing, it is the byte sequence made of the input minus the area where the signature bytes will be. See "The ByteRange and signature value" in the document <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5">Digital Signatures in a PDF</a>. @param pdfFile The signed pdf file as InputStream. It will be closed in this method. @return a byte array containing only the signed part of the content @throws IOException if the pdfFile can't be read
230 Return the signed content of the document. This is not a PDF file, nor is it the PDF file before signing, it is the byte sequence made of the input minus the area where the signature bytes will be. See "The ByteRange and signature value" in the document <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5">Digital Signatures in a PDF</a>. @param pdfFile The signed pdf file as byte array @return a byte array containing only the signed part of the content @throws IOException if the pdfFile can't be read
231 Gets a name value. @param name the attribute name @return the name value
232 This will get the rendering intent. @return null or the RI value in the dictionary.
233 This will get the name of the action to be performed. @return The name of the action to be performed.
234 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The name converted to a string.
235 Get the style for the guideline. The default is "S" for solid. @return The guideline style. @see PDBoxStyle#GUIDELINE_STYLE_DASHED @see PDBoxStyle#GUIDELINE_STYLE_SOLID
236 This will retrieve the icon (and hence appearance, AP taking precedence) For this annotation. The default is NOTE. @return The name of this annotation, see the PDAnnotationText.NAME_XXX constants.
237 This is the name used to draw the type of attachment. See the ATTACHMENT_NAME_XXX constants. @return The name that describes the visual cue for the attachment.
238 This will retrieve the line ending style. @return The line ending style, possible values shown in the LE_ constants section, LE_NONE if missing, never null.
239 Set the highlight mode for when the mouse is depressed. See the HIGHLIGHT_MODE_XXX constants. @return The string representation of the highlight mode.
240 This will retrieve the Reply Type (relationship) with the annotation in the IRT entry See the RT_* constants for the available values. @return the relationship.
241 This will retrieve the name (and hence appearance, AP taking precedence) For this annotation. The default is DRAFT. @return The name of this rubber stamp, see the NAME_XXX constants.
242 This will retrieve the name (and hence appearance, AP taking precedence) For this annotation. The default is NOTE. @return The name of this annotation, see the NAME_XXX constants.
243 Returns the highlighting mode. Default value: <code>I</code> <dl> <dt><code>N</code></dt> <dd>(None) No highlighting.</dd> <dt><code>I</code></dt> <dd>(Invert) Invert the contents of the annotation rectangle.</dd> <dt><code>O</code></dt> <dd>(Outline) Invert the annotation's border.</dd> <dt><code>P</code></dt> <dd>(Push) Display the annotation's down appearance, if any. If no down appearance is defined, the contents of the annotation rectangle shall be offset to appear as if it were pushed below the surface of the page</dd> <dt><code>T</code></dt> <dd>(Toggle) Same as <code>P</code> (which is preferred).</dd> </dl> @return the highlighting mode
244 This will retrieve the border style, see the STYLE_* constants for valid values. @return the style of the border
245 returns the type of the external data dictionary. It must be "ExData", if present @return the type of the external data dictionary
246 @return the style for this transition @see PDTransitionStyle#valueOf(String)
247 @return The dimension in which the specified transition effect shall occur or the default {@link PDTransitionDimension#H} if no dimension is found. @see PDTransitionDimension
248 @return The direction of motion for the specified transition effect or the default {@link PDTransitionMotion#I} if no motion is found. @see PDTransitionMotion
249 Get the non full screen page mode preference. @return the non full screen page mode preference.
250 Get the reading direction preference. @return the reading direction preference.
251 Get the ViewArea preference. See BOUNDARY enumeration. @return the ViewArea preference.
252 Get the ViewClip preference. See BOUNDARY enumeration. @return the ViewClip preference.
253 Get the PrintArea preference. See BOUNDARY enumeration. @return the PrintArea preference.
254 Get the PrintClip preference. See BOUNDARY enumeration. @return the PrintClip preference.
255 Get the PrintScaling preference. See PRINT_SCALING enumeration. @return the PrintScaling preference.
256 Check if the cross reference table/stream can be found at the current offset. @param startXRefOffset @return the revised offset @throws IOException
257 Returns the PDF specification version this document conforms to. @return the PDF version (e.g. 1.4f)
258 Returns the attributes together with their revision numbers (A). @return the attributes as a list, never null.
259 Detects whether there are no properties in the attribute object. @return <code>true</code> if the attribute object is empty, <code>false</code> otherwise
260 Returns the parent in the structure hierarchy (P). @return the parent in the structure hierarchy
261 Creates an object for a kid of this structure node. The type of object depends on the type of the kid. It can be <ul> <li>a {@link PDStructureElement},</li> <li>a {@link PDObjectReference},</li> <li>a {@link PDMarkedContentReference},</li> <li>an {@link Integer}</li> </ul> @param kid the kid @return the object
262 Sets the property name. @param name the property name
263 creates a new encryption dictionary from the low level dictionary provided. @param dictionary a COS encryption dictionary
264 Returns the security handler specified in the dictionary's Filter entry. @return a security handler instance @throws IOException if there is no security handler available which matches the Filter
265 This will get the list of FDF Annotations. This will return a list of FDFAnnotation objects or null if the entry is not set. @return A list of FDF annotations. @throws IOException If there is an error creating the annotation list.
266 Returns true if the character set described by CIDSystemInfo is present in the given font. Only applies to Adobe-GB1, Adobe-CNS1, Adobe-Japan1, Adobe-Korea1, as per the PDF spec.
267 Returns true if this color space has the NChannel subtype. @return true if subtype is NChannel
268 Get the Document Open Action for this object. @return The action to perform when the document is opened. @throws IOException If there is an error creating the destination or action.
269 This will get the action that is associated with this field. @return The 'A' entry in the FDF field dictionary.
270 Returns the dictionary's "Doc" entry, that is, a map of key value pairs to be added to the document's JavaScript name tree. @return Map of named "JavaScript" dictionaries.
271 This will get the next action, or sequence of actions, to be performed after this one. The value is either a single action dictionary or an array of action dictionaries to be performed in order. @return The Next action or sequence of actions.
272 Get the F action. @return The F action.
273 This will get an action to be performed when the cursor enters the annotation's active area. @return The E entry of annotation's additional actions dictionary.
274 This will get an action to be performed when the cursor exits the annotation's active area. @return The X entry of annotation's additional actions dictionary.
275 This will get an action to be performed when the mouse button is pressed inside the annotation's active area. The name D stands for "down". @return The d entry of annotation's additional actions dictionary.
276 This will get an action to be performed when the mouse button is released inside the annotation's active area. The name U stands for "up". @return The U entry of annotation's additional actions dictionary.
277 This will get an action to be performed when the annotation receives the input focus. @return The Fo entry of annotation's additional actions dictionary.
278 This will get an action to be performed when the annotation loses the input focus. The name Bl stands for "blurred". @return The Bl entry of annotation's additional actions dictionary.
279 This will get an action to be performed when the page containing the annotation is opened. The action is executed after the O action in the page's additional actions dictionary and the OpenAction entry in the document catalog, if such actions are present. @return The PO entry of annotation's additional actions dictionary.
280 This will get an action to be performed when the page containing the annotation is closed. The action is executed before the C action in the page's additional actions dictionary, if present. @return The PC entry of annotation's additional actions dictionary.
281 This will get an action to be performed when the page containing the annotation becomes visible in the viewer application's user interface. @return The PV entry of annotation's additional actions dictionary.
282 This will get an action to be performed when the page containing the annotation is no longer visible in the viewer application's user interface. @return The PI entry of annotation's additional actions dictionary.
283 This will get a JavaScript action to be performed before closing a document. The name WC stands for "will close". @return The WC entry of document catalog's additional actions dictionary.
284 This will get a JavaScript action to be performed before saving a document. The name WS stands for "will save". @return The WS entry of document catalog's additional actions dictionary.
285 This will get a JavaScript action to be performed after saving a document. The name DS stands for "did save". @return The DS entry of document catalog's additional actions dictionary.
286 This will get a JavaScript action to be performed before printing a document. The name WP stands for "will print". @return The WP entry of document catalog's additional actions dictionary.
287 This will get a JavaScript action to be performed after printing a document. The name DP stands for "did print". @return The DP entry of document catalog's additional actions dictionary.
288 This will get a JavaScript action to be performed when the user types a keystroke into a text field or combo box or modifies the selection in a scrollable list box. This allows the keystroke to be checked for validity and rejected or modified. @return The K entry of form field's additional actions dictionary.
289 This will get a JavaScript action to be performed before the field is formatted to display its current value. This allows the field's value to be modified before formatting. @return The F entry of form field's additional actions dictionary.
290 This will get a JavaScript action to be performed when the field's value is changed. This allows the new value to be checked for validity. The name V stands for "validate". @return The V entry of form field's additional actions dictionary.
291 This will get a JavaScript action to be performed in order to recalculate the value of this field when that of another field changes. The order in which the document's fields are recalculated is defined by the CO entry in the interactive form dictionary. The name C stands for "calculate". @return The C entry of form field's additional actions dictionary.
292 This will get an action to be performed when the page is opened. This action is independent of any that may be defined by the OpenAction entry in the document catalog, and is executed after such an action. @return The O entry of page object's additional actions dictionary.
293 This will get an action to be performed when the page is closed. This action applies to the page being closed, and is executed before any other page opened. @return The C entry of page object's additional actions dictionary.
294 Get the action to be performed when this annotation is to be activated. Either this or the destination entry should be set, but not both. @return The action to be performed when this annotation is activated.
295 Get the action to be performed when this annotation is to be activated. @return The action to be performed when this annotation is activated.
296 Get the action of this node. @return The action of this node.
297 Return the properties String value. <p> Allows to retrieve the low level date for validation purposes. </p> @param propertyKey the dictionaries key @return the properties value
298 This will get the value of a custom metadata information field for the document. This will return null if one is not found. @param fieldName Name of custom metadata field from pdf document. @return String Value of metadata field
299 Gets a string attribute value. @param name the attribute name @return the string attribute value
300 This will get the base URI to be used in resolving relative URI references. URI actions within the document may specify URIs in partial form, to be interpreted relative to this base address. If no base URI is specified, such partial URIs will be interpreted relative to the location of the document itself. The use of this entry is parallel to that of the body element &lt;BASE&gt;, as described in the HTML 4.01 Specification. @return The URI entry of the specific URI dictionary.
301 A text string indicating the version of the application implementation, as described by the <code>/Name</code> attribute in this dictionary. When set by Adobe Acrobat, this entry is in the format: major.minor.micro (for example 7.0.7). @return the application implementation version
302 This will return the label for the units. @return the label for the units
303 This is a convenience method that will get the dictionary object that is expected to be a string. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
304 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param embedded The embedded dictionary. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
305 Get the operation to perform on the file. This method will not return null, OPERATION_OPEN is the default. @return The operation to perform for the file. @see PDWindowsLaunchParams#OPERATION_OPEN @see PDWindowsLaunchParams#OPERATION_PRINT
306 Get the default appearance. @return the DA element of the dictionary object
307 <p>Preferred method for getting the filename. It will determinate the recommended file name.</p> <p>First of all we try to get the unicode filename if it exist. If it doesn't exist we take a look at the DOS, MAC UNIX filenames. If no one exist the required F entry will be returned.</p> @return The preferred file name.
308 Sets the string for the property value. @param formattedValue the string for the property value
309 Indicates whether a particular optional content group is found in the PDF file. @param groupName the group name @return true if the group exists, false otherwise
310 Returns the fully qualified name of the field, which is a concatenation of the names of all the parents fields. @return the name of the field
311 This is a convenience method that will get the dictionary object that is expected to be a date. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a date.
312 This is a convenience method that will get the dictionary object that is expected to be a date. @param embedded The embedded dictionary to get. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a string.
313 The software module revision number, corresponding to the Date attribute. @return the revision of the software module
314 The software module revision number, used to determinate the minimum version of software that is required in order to process this signature. <p> NOTE: this entry is deprecated for PDF v1.7 </p> @return the revision of the software module
315 Creates a new COSInputStream from an encoded input stream. @param filters Filters to be applied. @param parameters Filter parameters. @param in Encoded input stream. @param options decode options for the encoded stream @return Decoded stream. @throws IOException If the stream could not be read.
316 Returns a new RandomAccessRead which reads the decoded stream data. @return RandomAccessRead containing decoded stream data. @throws IOException If the stream could not be read.
317 This will get a stream with some filters applied but not others. This is useful when doing images, ie filters = [flate,dct], we want to remove flate but leave dct @param stopFilters A list of filters to stop decoding at. @return A stream with decoded data. @throws IOException If there is an error processing the stream.
318 Gets a number value. @param name the attribute name @return the number value
319 This will return the conversion factor. @return the conversion factor
320 Constructor. @param function The function.
321 This will retrieve the length of the leader line. @return the length of the leader line
322 This will retrieve the length of the leader line extensions. @return the length of the leader line extensions
323 This will retrieve the length of the leader line offset. @return the length of the leader line offset
324 The minimum required capability of the signature field seed value dictionary parser. A value of 1 specifies that the parser shall be able to recognize all seed value dictionary entries in a PDF 1.5 file. A value of 2 specifies that it shall be able to recognize all seed value dictionary entries specified. @return the minimum required capability of the signature field seed value dictionary parser
325 This will return the CYX factor. @return CYX factor
326 Gets a number value. @param name the attribute name @param defaultValue the default value @return the number value
327 This will retrieve the intensity of the applied effect. @return the intensity value 0 to 2
328 Compute the font height. Override this if you want to use own calculations. @param font the font. @return the font height. @throws IOException if there is an error while getting the font bounding box.
329 This will write out the list of tokens to the stream. @param tokens The tokens to write to the stream. @throws IOException If there is an error writing to the stream.
330 Get the list of decode parameters. Each entry in the list will refer to an entry in the filters list. @return The list of decode parameters. @throws IOException if there is an error retrieving the parameters.
331 Get the list of decode parameters. Each entry in the list will refer to an entry in the filters list. @return The list of decode parameters. @throws IOException if there is an error retrieving the parameters.
332 Appends a structure element kid and sets the parent property (/P) to this. @param structureElement the structure element
333 Inserts a structure element kid before a reference kid. @param newKid the structure element @param refKid the reference kid
334 Removes a structure element kid and if successful also removes the parent property (/P). @param structureElement the structure element @return <code>true</code> if the kid was removed, <code>false</code> otherwise.
335 Returns the default position vector (v). @param cid CID
336 Returns the property list resource with the given name, or null if none exists. @param name Name of the property list resource. @return the property list with the given name or null
337 This will get the optional content group or optional content membership dictionary. @return The optional content group or optional content membership dictionary or null if there is none.
338 This will get the optional content group or optional content membership dictionary. @return The optional content group or optional content membership dictionary or null if there is none.
339 Get a list of optional content groups. @return List of optional content groups, never null.
340 This will get the optional content group or optional content membership dictionary for the annotation. @return The optional content group or optional content membership dictionary or null if there is none.
341 Creates a Caret annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
342 Creates a Link annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
343 Creates a FreeText annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
344 Constructor. @param dict The annotations dictionary.
345 Creates a Line annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
346 Constructor. @param dict The annotations dictionary.
347 Constructor. @param dict The annotations dictionary.
348 Creates a Rubber Stamp annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
349 Creates a sound annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
350 Constructor. @param dict The annotations dictionary.
351 Creates a Text annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
352 Creates a TextMarkup annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
353 This will retrieve the popup annotation used for entering/editing the text for this annotation. @return the popup annotation.
354 Returns the widget annotations associated with this field. @return The list of widget annotations. Be aware that this list is <i>not</i> backed by the actual widget collection of the field, so adding or deleting has no effect on the PDF document until you call {@link #setWidgets(java.util.List) setWidgets()} with the modified list.
355 Deep-clones the given object for inclusion into a different PDF document identified by the destination parameter. Expert use only, don’t use it if you don’t know exactly what you are doing. @param base the initial object as the root of the deep-clone operation @return the cloned instance of the base object @throws IOException if an I/O error occurs
356 Writes all prepared {@link COSObject}s to the given {@link COSStream}. @param stream The stream for the compressed objects. @return The given {@link COSStream} of this object stream. @throws IOException Shall be thrown, if writing the object stream failed.
357 Write the given {@link COSArray} to the given stream. @param output The stream, that shall be written to. @param cosArray The content, that shall be written.
358 Cloudy polygon implementation. @param vertices polygon vertices; first and last point must be equal @param isEllipse specifies if the polygon represents an ellipse
359 Tries to compress the image using a predictor. @return the image or null if it is not possible to encoded the image (e.g. not supported raster format etc.)
360 A convenience method that will create an XYZ destination using only the defaults. @param page The page to refer to.
361 This will decrypt a stream. @param stream The stream to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error getting the stream data.
362 Default constructor.
363 Default constructor.
364 Default Constructor
365 Default constructor.
366 Constructor #1.
367 Default constructor.
368 Default constructor.
369 Default constructor.
370 Default constructor.
371 Default constructor.
372 Default constructor.
373 Default Constructor
374 Default constructor.
375 Default constructor.
376 Constructor.
377 Constructor.
378 Constructor.
379 Constructor.
380 Returns the pattern image in parent stream coordinates.
381 Returns the anchor rectangle, which includes the XStep/YStep and scaling.
382 {@inheritDoc} The returned images are not cached.
383 Extract the raw unconverted raster of the given image @param pdImage The image to get the raw raster data from @return the raw raster of this image @throws IOException
384 Returns the content of the given image as an AWT buffered image with an RGB color space. If a color key mask is provided then an ARGB image is returned instead. This method never returns null. @param pdImage the image to read @param region The region of the source image to get, or null if the entire image is needed. The actual region will be clipped to the dimensions of the source image. @param subsampling The amount of rows and columns to advance for every output pixel, a value of 1 meaning every pixel will be read. It must not be larger than the image width or height. @param colorKey an optional color key mask @return content of this image as an (A)RGB buffered image @throws IOException if the image cannot be read
385 A dictionary containing any resources required by the page.
386 A rectangle, expressed in default user space units, defining the boundaries of the physical medium on which the page is intended to be displayed or printed. @return the media box of the page
387 Returns the rotation angle in degrees by which the page should be rotated clockwise when displayed or printed. Valid values in a PDF must be a multiple of 90. @return The rotation angle in degrees in normalized form (0, 90, 180 or 270) or 0 if invalid or not set at this level.
388 This is a convenience method that will get the dictionary object that is expected to be a cos boolean and convert it to a primitive boolean. @param key The key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The value converted to a boolean.
389 Get if the file is volatile. Default: false @return True if the file is volatile attribute is set.
390 Shall the property be hidden? @return <code>true</code> if the property shall be hidden, <code>false</code> otherwise
391 Will get the EncryptMetaData dictionary info. @return true if EncryptMetaData is explicitly set to false (the default is true)
392 This will retrieve if the contents are shown as a caption or not. @return boolean if the content is shown as a caption.
393 This will tell if the icon should scale to fit the annotation bounds. Default: false @return A flag telling if the icon should scale.
394 A flag telling if the fields imported from the template may be renamed if there are conflicts. @return A flag telling if the fields can be renamed.
395 Returns true if this group is isolated. Isolated groups begin with the fully transparent image, non-isolated begin with the current backdrop. @return true if this group is isolated
396 Returns true if this group is a knockout. A knockout group blends with original backdrop, a non-knockout group blends with the current backdrop. @return true if this group is a knockout
397 This will return the AntiAlias value. @return the AntiAlias value
398 This will get the overprint control. @return The overprint control or null if one has not been set.
399 This will get the automatic stroke adjustment flag. @return The automatic stroke adjustment flag or null if one has not been set.
400 This will get the alpha source flag (“alpha is shape”), that specifies whether the current soft mask and alpha constant shall be interpreted as shape values (true) or opacity values (false). @return The alpha source flag.
401 This will get the text knockout flag. @return The text knockout flag.
402 A flag indicating whether to hide the annotation or show it @return true if annotation is hidden
403 Gets the synchronous flag. It specifyes whether to play the sound synchronously or asynchronously. When true, the reader allows no further user interaction other than canceling the sound until the sound has been completely played. @return Whether to play the sound synchronously (true) or asynchronously (false, also the default).
404 Gets whether to repeat the sound indefinitely. @return Whether to repeat the sound indefinitely (default: false).
405 Gets the flag specifying whether to mix this sound with any other sound already playing. If this flag is false, any previously playing sound shall be stopped before starting this sound; this can be used to stop a repeating sound (see Repeat). @return whether to mix this sound with any other sound already playing (default: false).
406 This will retrieve whether the text specified by the /Contents or /RC entries shall be shown as a caption in the appearance of the line. @return boolean if the contents shall be shown as a caption (default: false).
407 This will retrieve the initial state of the annotation, open Or closed (default closed). @return The initial state, true = open false = closed
408 A flag that can be used by the signature handler or software module to indicate that this signature was created with unrelease software. @return true if the software module or signature handler was a pre release.
409 If there is a LegalPDF dictionary in the catalog of the PDF file and the NonEmbeddedFonts attribute in this dictionary has a non zero value, and the viewing application has a preference set to suppress the display of this warning then the value of this attribute will be set to true. @return true if NonEFontNoWarn is set to true @see #setNonEFontNoWarn(boolean)
410 If true, the application was in trusted mode when signing took place. @return true if the application was in trusted mode while signing. default: false
411 True if the viewing application should construct the appearances of all field widgets. The default value is false. @return the value of NeedAppearances, false if the value isn't set
412 @return true if the area that shall be flown in is rectangular and opaque. Default is false. Only for {@link PDTransitionStyle#Fly}.
413 Get the toolbar preference. @return the toolbar preference.
414 Get the menubar preference. @return the menubar preference.
415 Get the window UI preference. @return the window UI preference.
416 Get the fit window preference. @return the fit window preference.
417 Get the center window preference. @return the center window preference.
418 Get the display doc title preference. @return the display doc title preference.
419 Sets the given boolean value at bitPos in the flags. @param field The COSName of the field to set the value into. @param bitFlag the bit position to set the value in. @param value the value the bit position should have.
420 Get an integer from an embedded dictionary. Useful for 1-1 mappings. @param embeddedDictionary The name of the embedded dictionary. @param key The key in the embedded dictionary. @param defaultValue The value if there is no embedded dictionary or it does not contain the key. @return The value of the embedded integer.
421 This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The integer value.
422 This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The integer value..
423 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
424 Gets the boolean value from the flags at the given bit position. @param field The COSName of the field to get the flag from. @param bitFlag the bitPosition to get the value from. @return true if the number at bitPos is '1'
425 Returns the given COS page using a depth-first search. @param pageNum 1-based page number @param node page tree node to search @param encountered number of pages encountered so far @return COS dictionary of the Page object @throws IllegalStateException if the requested page number isn't found @throws IndexOutOfBoundsException if the requested page number is higher than the page count
426 Returns the number of leaf nodes (page objects) that are descendants of this root within the page tree. @return the number of leaf nodes, 0 if not present
427 Returns the start value for page numbering in this page range. @return a positive integer the start value for numbering.
428 Get the order of interpolation between samples. Valid values are 1 and 3, specifying linear and cubic spline interpolation, respectively. Default is 1. See p.170 in PDF spec 1.7. @return order of interpolation.
429 Returns the revision number (R). @return the revision number
430 This will return the Length entry of the crypt filter dictionary.<br><br> The length in <b>bits</b> for the crypt filter algorithm. This will return a multiple of 8. @return The length in bits for the encryption algorithm
431 This will return the V entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.13. @return The encryption version to use.
432 This will return the Length entry of the encryption dictionary.<br><br> The length in <b>bits</b> for the encryption algorithm. This will return a multiple of 8. @return The length in bits for the encryption algorithm
433 This will return the R entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.14. @return The encryption revision to use.
434 This will get the permissions bit mask. @return The permissions bit mask.
435 This will get the form of quadding (justification) of the annotation text. @return The quadding of the text.
436 This will get the font flags. @return The font flags.
437 Create the correct PD Model pattern based on the COS base pattern. @param dictionary the COS pattern dictionary @param resourceCache the resource cache, may be null, useful for tiling patterns. @return the newly created pattern object @throws IOException If we are unable to create the PDPattern object.
438 This will return the paint type. @return The paint type
439 This will return the tiling type. @return The tiling type
440 Create the correct PD Model shading based on the COS base shading. @param shadingDictionary the COS shading dictionary @return the newly created shading resources object @throws IOException if we are unable to create the PDShading object
441 The bits per flag of this shading. This will return -1 if one has not been set. @return The number of bits per flag.
442 The vertices per row of this shading. This will return -1 if one has not been set. @return the number of vertices per row
443 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
444 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
445 A set of flags specifying various characteristics of the action @return the flags
446 A set of flags specifying various characteristics of the action @return the flags
447 If the value in the /P entry is an integer, this will get the page number (zero-based) in the current document containing the file attachment annotation. @return the zero based page number or -1 if the /P entry value is missing or not a number.
448 If the value in the /A entry is an integer, this will get the index (zero-based) of the annotation in the /Annots array of the page specified by the /P entry. @return the zero based page number or -1 if the /P entry value is missing or not a number.
449 This will get the flags for this field. @return flags The set of flags.
450 This will get the 'quadding' or justification of the text to be displayed. <br> 0 - Left (default)<br> 1 - Centered<br> 2 - Right<br> Please see the QUADDING_CONSTANTS in {@link PDVariableText }. @return The justification of the text strings.
451 This will retrieve the rotation of the annotation widget. It must be a multiple of 90. Default is 0 @return the rotation
452 Indicates if a timestamp is required. @return true if a timestamp is required
453 Get the number of open nodes or a negative number if this node is closed. See PDF Reference 32000-1:2008 table 152 and 153 for more details. This value is updated as you append children and siblings. @return The Count attribute of the outline dictionary.
454 This will get the document-wide default value for the quadding/justification of variable text fields. <p> 0 - Left(default)<br> 1 - Centered<br> 2 - Right<br> See the QUADDING constants of {@link PDVariableText}. @return The justification of the variable text fields.
455 This will get the top index "TI" value. @return the top index, default value 0.
456 This will get all dictionaries objects by type. @param type The type of the object. @return This will return all objects with the specified type.
457 Returns the page tree. @return the page tree
458 This will load a document from a file. @param file The name of the file to load. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
459 This will load a document from an input stream. The stream is loaded to the memory to establish random access to the data. @param input The stream that contains the document. To read the stream {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used @return The document that was loaded. @throws IOException If there is an error reading from the stream.
460 This will parse the stream and populate the PDDocument object. This will close the keystore stream when it is done parsing. Lenient mode is active by default. @return the populated PDDocument @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error reading from the stream or corrupt data is found.
461 Remove all page resources from the cache to avoid relying on the implementation of the Cache. Does make sense after processing a page.
462 Returns the color space resource with the given name, or null if none exists. @param name Name of the color space resource. @return a new color space. @throws IOException if something went wrong.
463 Adds the given font to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param font the font to add @return the name of the resource in the resources dictionary
464 Adds the given color space to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param colorSpace the color space to add @return the name of the resource in the resources dictionary
465 Adds the given extended graphics state to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param extGState the extended graphics state to add @return the name of the resource in the resources dictionary
466 Adds the given shading to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param shading the shading to add @return the name of the resource in the resources dictionary
467 Adds the given pattern to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param pattern the pattern to add @return the name of the resource in the resources dictionary
468 Adds the given property list to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param properties the property list to add @return the name of the resource in the resources dictionary
469 Adds the given image to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param image the image to add @return the name of the resource in the resources dictionary
470 Adds the given form to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param form the form to add @return the name of the resource in the resources dictionary
471 Adds the given XObject to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param xobject the XObject to add @param prefix the prefix to be used when creating the resource name @return the name of the resource in the resources dictionary
472 Get the embedded file. @return The embedded file for this file spec.
473 Get the embedded dos file. @return The embedded dos file for this file spec.
474 Get the embedded Mac file. @return The embedded Mac file for this file spec.
475 Get the embedded Unix file. @return The embedded file for this file spec.
476 Get the embedded unicode file. @return The embedded unicode file for this file spec.
477 Indicates whether an optional content group is enabled. @param group the group object @return true if the group is enabled
478 Enables or disables all optional content groups with the given name. @param groupName the group name @param enable true to enable, false to disable @return true if at least one group with this name already had an on or off setting, false otherwise
479 Get the annotations normal appearance. <p> This will get the annotations normal appearance. If this is not existent an empty appearance entry will be created. @return the appearance entry representing the normal appearance.
480 Get the annotations rollover appearance. <p> This will get the annotations rollover appearance. If this is not existent an empty appearance entry will be created. @return the appearance entry representing the rollover appearance.
481 Get the annotations down appearance. <p> This will get the annotations down appearance. If this is not existent an empty appearance entry will be created. @return the appearance entry representing the down appearance.
482 Set the selected option given its index, and try to update the visual appearance. NOTE: this method is only usable if there are export values and used for radio buttons with FLAG_RADIOS_IN_UNISON not set. @param index index of option to be selected @throws IOException if the value could not be set @throws IllegalArgumentException if the index provided is not a valid index.
483 Prepends the child to the linked list of children. This method only adjust pointers but doesn't take care of the Count key in the parent hierarchy. @param newChild
484 Appends the child to the linked list of children. This method only adjust pointers but doesn't take care of the Count key in the parent hierarchy. @param newChild
485 Search acroform fields for signature field with specific signature dictionary. @param fieldIterator iterator on all fields. @param sigObject signature object (the /V part). @return a signature field if found, or null if none was found.
486 Returns the appearance stream to process for the given annotation. May be used to render a specific appearance such as "hover". @param annotation The current annotation. @return The stream to process.
487 Add font resources from the widget to the AcroForm to make sure embedded fonts are being used and not added by ensureFontResources potentially using a fallback font. @param acroFormResources AcroForm default resources, should not be null. @param annotation annotation, should not be null.
488 Get the values to set individual buttons within a group to the on state. <p>The On value could be an arbitrary string as long as it is within the limitations of a PDF name object. The Off value shall always be 'Off'. If not set or not part of the normal appearance keys 'Off' is the default</p> @return the potential values setting the check box to the On state. If an empty Set is returned there is no appearance definition.
489 This will tell if this radio button is currently checked or not. This is equivalent to calling {@link #getValue()}. @return true If this field is checked.
490 Checks the check box. @throws IOException if the appearance couldn't be generated.
491 Returns the index of the given page, or -1 if it does not exist. @param page The page to search for. @return the zero-based index of the given page, or -1 if the page is not found.
492 Sets the parent to the given node. @param parentNode the node to be set as parent
493 Set the children of this named tree. @param kids The children of this named tree. These have to be in sorted order. Because of that, it is usually easier to call {@link #setNames(Map)} with a map and pass a single element list here.
494 Set the names for this node. This method will set the appropriate upper and lower limits based on the keys in the map and take care of the ordering. @param names map of names to objects, or <code>null</code> for nothing.
495 Creates an page label dictionary for a document using the information in the given COS dictionary. <p> Note that the page label dictionary won't be automatically added to the document; you will still need to do it manually (see {@link org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)}. </p> @param document The document the page label dictionary is created for. @param dict an existing page label dictionary @see org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels) @throws IOException If something goes wrong during the number tree conversion.
496 Get the encode for the input parameter. @param paramNum The function parameter number. @return The encode parameter range or null if none is set.
497 Create a new CalGray color space.
498 Creates a new CalRGB color space.
499 Creates a new Lab color space.
500 Creates a new CalGray color space using the given COS array. @param array the COS array which represents this color space
501 Creates a new CalRGB color space using the given COS array. @param rgb the cos array which represents this color space
502 Creates a new Lab color space from a PDF array. @param lab the color space array
503 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds the bounds of the area to paint, in device units @throws IOException if there is an error getting the color space or doing color conversion.
504 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds the bounds of the area to paint, in device units @throws IOException if there is an error getting the color space or doing color conversion.
505 Constructor. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if there is an error getting the color space or doing background color conversion.
506 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream
507 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
508 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
509 Gets a name value. @param name the attribute name @param defaultValue the default value @return the name value
510 This will retrieve the border effect, see the STYLE_* constants for valid values. @return the effect of the border or {@link #STYLE_SOLID} if none is found.
511 Convenience method for annotations: sets the line with and dash style. @param lineWidth The line width. @param bs The border style, may be null. @param border The border array, must have at least three entries. This is only used if the border style is null. @throws IOException If there is an error writing to the content stream.
512 Create a new document to write the split contents to. @return the newly created PDDocument. @throws IOException If there is an problem creating the new document.
513 Sets the PDF specification version for this document. @param newVersion the new PDF version (e.g. 1.4f)
514 Returns the structure tree root. @return the structure tree root
515 Returns a list of objects for the kids (K). @return a list of objects for the kids, never null.
516 This will get the encryption dictionary for this document. This will still return the parameters if the document was decrypted. As the encryption architecture in PDF documents is pluggable this returns an abstract class, but the only supported subclass at this time is a PDStandardEncryption object. @return The encryption dictionary(most likely a PDStandardEncryption object)
517 Prepare for decryption. @throws InvalidPasswordException If the password is incorrect. @throws IOException if something went wrong
518 Reads the font's Encoding entry, which should be a CMap name/stream.
519 Some Type 1 fonts have an invalid Length1, which causes the binary segment of the font to be truncated, see PDFBOX-2350, PDFBOX-3677. @param bytes Type 1 stream bytes @param length1 Length1 from the Type 1 stream @return repaired Length1 value
520 Some Type 1 fonts have an invalid Length2, see PDFBOX-3475. A negative /Length2 brings an IllegalArgumentException in Arrays.copyOfRange(), a huge value eats up memory because of padding. @param bytes Type 1 stream bytes @param length1 Length1 from the Type 1 stream @param length2 Length2 from the Type 1 stream @return repaired Length2 value
521 This will return the value for the manner to display a fractional value. @return the manner to display a fractional value
522 This will return the text to be used between orders of thousands in display of numerical values. @return thousands separator
523 This will return the text to be used as the decimal point in displaying numerical values. @return decimal separator
524 This will return the text to be concatenated to the left of the label specified by U. @return label prefix
525 This will return the text to be concatenated after the label specified by U. @return label suffix
526 This will return a value indicating the ordering of the label specified by U to the calculated unit value. @return label position
527 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param embedded The embedded dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
528 Returns a list of matching fonts, scored by suitability. Positive scores indicate matches for certain attributes, while negative scores indicate mismatches. Zero scores are neutral. @param fontDescriptor FontDescriptor, always present. @param cidSystemInfo Font's CIDSystemInfo, may be null.
529 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param embedded The embedded dictionary to get. @param key The key to the item in the dictionary. @return The name converted to a string.
530 Creates a new COSInputStream from an encoded input stream. @param filters Filters to be applied. @param parameters Filter parameters. @param in Encoded input stream. @return Decoded stream. @throws IOException If the stream could not be read.
531 Constructor. @param stream The stream to parse. @param document The document for the current parsing. @throws IOException If there is an error initializing the stream.
532 Constructor. @param stream The stream to parse. @throws IOException If there is an error initializing the stream.
533 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @throws IOException if the font could not be read
534 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @param trueTypeFont The true type font used to create the parent font @throws IOException if the font could not be read
535 Reads a CMap given a COS Stream or Name. May return null if a predefined CMap does not exist. @param base COSName or COSStream @return the CMap if present @throws IOException if the CMap could not be read
536 Creates a circle annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
537 Creates a square annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
538 Constructor. @param dict The annotations dictionary.
539 Constructor. @param dict The annotations dictionary.
540 Constructor. @param dict The annotations dictionary.
541 Constructor. @param dict The annotations dictionary.
542 Update the Pg and Obj references to the new (merged) page. @param parentTreeEntry @param objMapping mapping between old and new references
543 This will add all of the dictionaries keys/values to this dictionary, but only if they are not in an exclusion list and if they don't already exist. If a key already exists in this dictionary then nothing is changed. @param src The source dictionary to get the keys/values from. @param dst The destination dictionary to merge the keys/values into. @param exclude Names of keys that shall be skipped.
544 This will write the body of the document. @param doc The document to write the body for. @throws IOException If there is an error writing the data.
545 Creates a cloudy border for a Polygon annotation. @param path polygon path @throws IOException If there is an error writing to the stream.
546 Cloudy rectangle implementation is based on converting the rectangle to a polygon.
547 Constructor. @param js Some javascript code.
548 Creates a new tiling Paint. The parameters color and colorSpace must be null for a colored tiling Paint (because it has its own colors), and non null for an uncolored tiling Paint. @param drawer renderer to render the page @param pattern tiling pattern dictionary @param colorSpace color space for this tiling @param color color for this tiling @param xform device scale transform @throws java.io.IOException if something goes wrong while drawing the pattern
549 Returns an RGB buffered image containing the opaque image stream without any masks applied. If this Image XObject is a mask then the buffered image will contain the raw mask. @param region The region of the source image to get, or null if the entire image is needed. The actual region will be clipped to the dimensions of the source image. @param subsampling The amount of rows and columns to advance for every output pixel, a value of 1 meaning every pixel will be read. It must not be larger than the image width or height. @return the image without any masks applied @throws IOException if the image cannot be read
550 Returns the content of the given image as an AWT buffered image with an RGB color space. If a color key mask is provided then an ARGB image is returned instead. This method never returns null. @param pdImage the image to read @param colorKey an optional color key mask @return content of this image as an RGB buffered image @throws IOException if the image cannot be read
551 Pushes the given stream's resources, returning the previous resources.
552 Calculate the transform to be used when positioning the overlay. The default implementation centers on the destination. Override this method to do your own, e.g. move to a corner, or rotate. @param page The page that will get the overlay. @param overlayMediaBox The overlay media box. @return The affine transform to be used.
553 Clips the given box to the bounds of the media box.
554 This will find the MediaBox with rotation applied, for this page by looking up the hierarchy until it finds them. @return The MediaBox at this level in the hierarchy.
555 Tells if this is a tagged PDF. @return true If this is a tagged PDF.
556 Tells if structure elements use user properties. @return A boolean telling if the structure elements use user properties.
557 Tells if this PDF contain 'suspect' tags. See PDF Reference 1.6 section 10.6 "Logical Structure" for more information about this property. @return true if the suspect flag has been set.
558 This will specify whether to track the mouse position when the URI is resolved. Default value: false. This entry applies only to actions triggered by the user's clicking an annotation; it is ignored for actions associated with outline items or with a document's OpenAction entry. @return A flag specifying whether to track the mouse position when the URI is resolved.
559 This will retrieve the initial state of the annotation, open Or closed (default closed). @return The initial state, true = open false = closed.
560 This will return the value indication if the denominator of the fractional value is reduced/truncated . @return fd
561 Specifies whether the property shall be hidden. @param hidden <code>true</code> if the property shall be hidden, <code>false</code> otherwise
562 This will get the overprint control for non stroking operations. If this value is null then the regular overprint control value will be returned. @return The overprint control or null if one has not been set.
563 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
564 Set the invisible flag. @param invisible The new invisible flag.
565 Set the hidden flag. @param hidden The new hidden flag.
566 Set the printed flag. @param printed The new printed flag.
567 Set the noZoom flag. @param noZoom The new noZoom flag.
568 Set the noRotate flag. @param noRotate The new noRotate flag.
569 Set the noView flag. @param noView The new noView flag.
570 Set the readOnly flag. @param readOnly The new readOnly flag.
571 Set the locked flag. @param locked The new locked flag.
572 Set the toggleNoView flag. @param toggleNoView The new toggleNoView flag.
573 Set the LockedContents flag. @param lockedContents The new LockedContents flag.
574 Set the invisible flag. @param invisible The new invisible flag.
575 Set the hidden flag. @param hidden The new hidden flag.
576 Set the printed flag. @param printed The new printed flag.
577 Set the noZoom flag. @param noZoom The new noZoom flag.
578 Set the noRotate flag. @param noRotate The new noRotate flag.
579 Set the noView flag. @param noView The new noView flag.
580 Set the readOnly flag. @param readOnly The new readOnly flag.
581 Set the locked flag. @param locked The new locked flag.
582 Set the toggleNoView flag. @param toggleNoView The new toggleNoView flag.
583 Set the LockedContents flag. If set, do not allow the contents of the annotation to be modified by the user. This flag does not restrict deletion of the annotation or changes to other annotation properties, such as position and size. @param lockedContents The new LockedContents flag value. @see <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#page=393">PDF 32000-1:2008 12.5.3, Table 165</a> @see #isLockedContents() @see #FLAG_LOCKED_CONTENTS @since PDF 1.7
584 set true if the filter shall be required. @param flag if true, the specified Filter shall be used when signing.
585 set true if the subfilter shall be required. @param flag if true, the first supported SubFilter in the array shall be used when signing.
586 set true if the DigestMethod shall be required. @param flag if true, one digest from the array shall be used.
587 set true if the V entry shall be required. @param flag if true, the V entry shall be used.
588 set true if the Reason shall be required. @param flag if true, the Reason entry shall be used.
589 set true if the LegalAttestation shall be required. @param flag if true, the LegalAttestation entry shall be used.
590 set true if the AddRevInfo shall be required. @param flag if true, the AddRevInfo shall be used.
591 set true if subject shall be required as a constraint on signature. @param flag if true, the specified Subject shall be enforced as a constraint.
592 set true if Issuer shall be required as a constraint on signature. @param flag if true, the specified Issuer shall be enforced as a constraint.
593 set true if OID shall be required as a constraint on signature. @param flag if true, the specified OID shall be enforced as a constraint.
594 set true if subject DN shall be required as a constraint on signature. @param flag if true, the specified Subject DN shall be enforced as a constraint.
595 set true if KeyUsage shall be required as a constraint on signature. @param flag if true, the specified KeyUsage shall be enforced as a constraint.
596 set true if URL shall be required as a constraint on signature. @param flag if true, the specified URL shall be enforced as a constraint.
597 Set the italic property of the text. @param italic The new italic flag.
598 Set the bold property of the text. @param bold The new bold flag.
599 Set the SignaturesExist bit. @param signaturesExist The value for SignaturesExist.
600 Set the AppendOnly bit. @param appendOnly The value for AppendOnly.
601 Set the Sort bit. @see #isSort() @param sort The value for Sort.
602 Set the MultiSelect bit. @param multiSelect The value for MultiSelect.
603 Set the DoNotSpellCheck bit. @param doNotSpellCheck The value for DoNotSpellCheck.
604 Set the CommitOnSelChange bit. @param commitOnSelChange The value for CommitOnSelChange.
605 Set the Combo bit. @param combo The value for Combo.
606 Set the Edit bit. @param edit The value for Edit.
607 sets the field to be read-only. @param readonly The new flag for readonly.
608 sets the flag whether the field is to be required to have a value at the time it is exported by a submit-form action. @param required The new flag for required.
609 sets the field to be not exported. @param noExport The new flag for noExport.
610 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
611 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
612 From the PDF Spec <br> If set, a group of radio buttons within a radio button field that use the same value for the on state will turn on and off in unison; that is if one is checked, they are all checked. If clear, the buttons are mutually exclusive (the same behavior as HTML radio buttons). @param radiosInUnison The new flag for radiosInUnison.
613 Set the multiline bit. @param multiline The value for the multiline.
614 Set the password bit. @param password The value for the password.
615 Set the file select bit. @param fileSelect The value for the fileSelect.
616 Set the doNotSpellCheck bit. @param doNotSpellCheck The value for the doNotSpellCheck.
617 Set the doNotScroll bit. @param doNotScroll The value for the doNotScroll.
618 Set the comb bit. @param comb The value for the comb.
619 Set the richText bit. @param richText The value for the richText.
620 Get an integer from an embedded dictionary. Useful for 1-1 mappings. default:-1 @param embeddedDictionary The name of the embedded dictionary. @param key The key in the embedded dictionary. @return The value of the embedded integer.
621 This will return the precision or denominator of a fractional amount. @return the precision or denominator
622 Wraps and <code>OutputStream</code> in a predictor decoding stream as necessary. If no predictor is specified by the parameters, the original stream is returned as is. @param out The stream to which decoded data should be written @param decodeParams Decode parameters for the stream @return An <code>OutputStream</code> is returned, which will write decoded data into the given stream. If no predictor is specified, the original stream is returned.
623 This will get the key of this Page in the structural parent tree. @return the integer key of the page's entry in the structural parent tree or -1 if there isn't any.
624 Removes the given COS page.
625 Adds the given page to this page tree. @param page The page to add.
626 Get the number of bits that the output value will take up. Valid values are 1,2,4,8,12,16,24,32. @return Number of bits for each output value.
627 Gets the marked content identifier. @return the marked content identifier
628 Returns The next key for the parent tree. This is a number greater than any existing key, and which shall be used for the next entry to be added to the tree. @return The next key for the parent tree
629 Gets the marked-content identifier. @return the marked-content identifier, or -1 if it doesn't exist.
630 Creates a new CCITT Fax compressed image XObject from a TIFF file. @param document the document to create the image as part of. @param reader the random access TIFF file which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject, or null if no such page @throws IOException if there is an error reading the TIFF data.
631 This will get the line cap style. @return null or the LC value of the dictionary.
632 This will get the line join style. @return null or the LJ value in the dictionary.
633 This will get the key of this annotation in the structural parent tree. @return the integer key of the annotation's entry in the structural parent tree or -1 if there isn't any.
634 Return the P value. @return the P value
635 Returns the maximum number of characters of the text field. @return the maximum number of characters, returns -1 if the value isn't present
636 Gets an integer. @param name the attribute name @param defaultValue the default value @return the integer
637 Get the invisible flag. @return The invisible flag.
638 Get the hidden flag. @return The hidden flag.
639 Get the printed flag. @return The printed flag.
640 Get the noZoom flag. @return The noZoom flag.
641 Get the noRotate flag. @return The noRotate flag.
642 Get the noView flag. @return The noView flag.
643 Get the readOnly flag. @return The readOnly flag.
644 Get the locked flag. @return The locked flag.
645 Get the toggleNoView flag. @return The toggleNoView flag.
646 Get the LockedContents flag. @return The LockedContents flag.
647 Get the invisible flag. @return The invisible flag.
648 Get the hidden flag. @return The hidden flag.
649 Get the printed flag. @return The printed flag.
650 Get the noZoom flag. @return The noZoom flag.
651 Get the noRotate flag. @return The noRotate flag.
652 Get the noView flag. @return The noView flag.
653 Get the readOnly flag. @return The readOnly flag.
654 Get the locked flag. @return The locked flag.
655 Get the toggleNoView flag. @return The toggleNoView flag.
656 Get the LockedContents flag. @return The LockedContents flag. @see #setLockedContents(boolean)
657 @return true if the Filter is required
658 @return true if the SubFilter is required
659 @return true if the DigestMethod is required
660 @return true if the V entry is required
661 @return true if the Reason is required
662 @return true if the LegalAttestation is required
663 @return true if the AddRevInfo is required
664 @return true if the Subject is required
665 @return true if the Issuer is required
666 @return true if the OID is required
667 @return true if the Subject DN is required
668 @return true if the KeyUsage is required
669 @return true if the URL is required
670 A flag telling if the text should be italic. @return The italic flag.
671 A flag telling if the text should be bold. @return The bold flag.
672 Determines if SignaturesExist is set. @return true if the document contains at least one signature.
673 Determines if AppendOnly is set. @return true if the document contains signatures that may be invalidated if the file is saved.
674 Determines if push button bit is set. @return true if type of button field is a push button.
675 Determines if radio button bit is set. @return true if type of button field is a radio button.
676 Determines if Sort is set. <p> If set, the field’s option items shall be sorted alphabetically. The sorting has to be done when writing the PDF. PDF Readers are supposed to display the options in the order in which they occur in the Opt array. </p> @return true if the options are sorted.
677 Determines if MultiSelect is set. @return true if multi select is allowed.
678 Determines if DoNotSpellCheck is set. @return true if spell checker is disabled.
679 Determines if CommitOnSelChange is set. @return true if value shall be committed as soon as a selection is made.
680 Determines if Combo is set. @return true if value the choice is a combo box..
681 Determines if Edit is set. @return true if the combo box shall include an editable text box as well as a drop-down list.
682 @return true if the field is readonly
683 @return true if the field is required to have a value at the time it is exported by a submit-form action.
684 @return true if the field is not to be exported.
685 @return true If the flag is set for radios in unison.
686 @return true if the field is multiline
687 @return true if the field is a password field.
688 @return true if the field is a file select field.
689 @return true if the field is not suppose to spell check.
690 @return true if the field is not suppose to scroll.
691 @return true if the field is not suppose to comb the text display.
692 @return true if the field is a rich text field.
693 Returns the page at the given index. @param index zero-based index @return the page at the given index @throws IllegalStateException if the requested index isn't found or doesn't point to a valid page dictionary @throws IndexOutOfBoundsException if the requested index is higher than the page count
694 This will return the total page count of the PDF document. @return The total number of pages in the PDF document.
695 Adds an attribute object. @param attributeObject the attribute object
696 Updates the revision number for the given attribute object. @param attributeObject the attribute object
697 Adds a class name. @param className the class name
698 Increments th revision number.
699 Prepares everything to decrypt the document. @param encryption encryption dictionary, can be retrieved via {@link PDDocument#getEncryption()} @param documentIDArray document id which is returned via {@link org.apache.pdfbox.cos.COSDocument#getDocumentID()} (not used by this handler) @param decryptionMaterial Information used to decrypt the document. @throws IOException If there is an error accessing data. If verbose mode is enabled, the exception message will provide more details why the match wasn't successful.
700 This will get the O entry in the standard encryption dictionary. @return A 32 byte array or null if there is no owner key. @throws IOException If there is an error accessing the data.
701 This will get the U entry in the standard encryption dictionary. @return A 32 byte array or null if there is no user key. @throws IOException If there is an error accessing the data.
702 Returns the displacement vector (w0, w1) in text space, for the given character. For horizontal text only the x component is used, for vertical text only the y component. @param code character code @return displacement vector @throws IOException if the data could not be read
703 Returns the width of the given Unicode string. @param text The text to get the width of. @return The width of the string in 1/1000 units of text space. @throws IOException If there is an error getting the width information. @throws IllegalArgumentException if a character isn't supported by the font.
704 Returns the pattern resource with the given name, or null if none exists. @param name Name of the pattern resource. @return the pattern with the given name or null @throws IOException if something went wrong.
705 Processes the operators of the given content stream. @param contentStream to content stream to parse. @throws IOException if there is an error reading or parsing the content stream.
706 Returns the shading resource with the given name, or null if none exists. @param name Name of the shading resource. @return the shading state with the given name or null @throws IOException if something went wrong.
707 This will get the shading resources for this pattern. @return The shading resources for this pattern. @throws IOException if something went wrong
708 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
709 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
710 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
711 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
712 @return true if this node count is greater than zero, false otherwise.
713 Creates a COSField subclass from the given field. @param form the form that the field is part of @param field the dictionary representing a field element @param parent the parent node of the node to be created @return the corresponding PDField instance
714 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used. @param center true if the content is to be centered on the page (otherwise top-left). @param renderer the document renderer. Useful if {@link PDFRenderer} has been subclassed.
715 Creates a new PDFRenderer. @param document the document to render
716 This will load a document from a file. @param filename The name of the file to load. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
717 Parses a PDF. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
718 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws IOException in case of a file reading or parsing error
719 RG Set the stroking colour space to DeviceRGB and set the colour to use for stroking operations. @param operator The operator that is being executed. @param arguments List @throws IOException If the color space cannot be read.
720 Returns the XObject resource with the given name, or null if none exists. @param name Name of the XObject resource. @return the XObject with the given name or null @throws IOException if something went wrong.
721 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
722 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
723 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
724 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
725 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
726 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
727 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
728 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
729 Indicates whether <em>at least one</em> optional content group with this name is enabled. There may be disabled optional content groups with this name even if this function returns true. @param groupName the group name @return true if at least one group is enabled
730 Indicates whether an optional content group is enabled. @param group the group @return true if the group is enabled
731 Adds the given node to the top of the children list. @param newChild The node to add. @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next sibling)
732 Adds the given node to the bottom of the children list. @param newChild The node to add. @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next sibling)
733 Checks value. @param value Name of radio button to select @throws IllegalArgumentException if the value is not a valid option.
734 Replace the page destinations, if the source and destination pages are in the target document. This must be called after all pages (and its annotations) are processed. @param destinationDocument
735 Returns the page labels descriptor of the document. @return the page labels descriptor of the document. @throws IOException If there is a problem retrieving the page labels.
736 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if something went wrong
737 Helper method for creating new documents at the appropriate pages. @throws IOException If there is an error creating the new document.
738 This will write the header to the PDF document. @param doc The document to get the data from. @throws IOException If there is an error writing to the stream.
739 Sets the optional content properties dictionary. The document version is incremented to 1.5 if lower. @param ocProperties the optional properties dictionary
740 Returns the role map. @return the role map
741 This will write the pdf document. If signature should be created externally, {@link #writeExternalSignature(byte[])} should be invoked to set signature after calling this method. @param doc The document to write. @param signInterface class to be used for signing; {@code null} if external signing would be performed or there will be no signing at all @throws IOException If an error occurs while generating the data. @throws IllegalStateException If the document has an encryption dictionary but no protection policy.
742 Adds the given {@link COSBase} to this pool, using the given {@link COSObjectKey} as it's referencable ID. This method shall determine an appropriate key, for yet unregistered objects, to register them. Depending on the type of object, it shall either be appended as-is or shall be appended to a compressed {@link COSWriterObjectStream}. @param key The {@link COSObjectKey} that shall be used as the {@link COSBase}s ID, if possible. @param base The {@link COSBase}, that shall be registered in this pool.
743 Protects the document with a protection policy. The document content will be really encrypted when it will be saved. This method only marks the document for encryption. It also calls {@link #setAllSecurityToBeRemoved(boolean)} with a false argument if it was set to true previously and logs a warning. <p> Do not use the document after saving, because the structures are encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @see org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy @see org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy @param policy The protection policy. @throws IOException if there isn't any suitable security handler.
744 Prepare the document for encryption. @param doc The document that will be encrypted. @throws IOException If there is an error while encrypting.
745 Returns the name of the glyph with the given character code. This is done by looking up the code in the parent font's ToUnicode map and generating a glyph name from that.
746 Returns the GID for the given character code. @param code character code @return GID @throws IOException if the mapping could not be read
747 Get the mac subtype. @return The mac subtype.
748 Get the mac Creator. @return The mac Creator.
749 Get the mac ResFork. @return The mac ResFork.
750 Finds a CFF CID-Keyed font with the given PostScript name, or a suitable substitute, or null. This method can also map CJK fonts via their CIDSystemInfo (ROS). @param fontDescriptor FontDescriptor @param cidSystemInfo the CID system info, e.g. "Adobe-Japan1", if any.
751 Returns a new InputStream which reads the decoded stream data. @return InputStream containing decoded stream data. @throws IOException If the stream could not be read.
752 Brute force search for all objects streams of a pdf. @param xrefTable the cross reference table of the document @throws IOException if something went wrong
753 Parse the object with the given key from the object stream with the given number. @param objstmObjNr the number of the offset stream @param key the key of the object to be parsed @return the parsed object @throws IOException if something went wrong when parsing the object
754 Parses an xref object stream starting with indirect object id. @return value of PREV item in dictionary or <code>-1</code> if no such item exists
755 Returns the content stream(s) of this page as a single input stream. @return An InputStream, never null. Multiple content streams are concatenated and separated with a newline. An empty stream is returned if the page doesn't have any content stream. @throws IOException If the stream could not be read
756 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @throws IOException if the font could not be read
757 Returns the descendant CIDFont.
758 Create the correct annotation from the base COS object. @param base The COS object that is the annotation. @return The correctly typed annotation object, never null. @throws IOException If the annotation type is unknown.
759 Creates a cloudy border for a rectangular annotation. The rectangle is specified by the <code>RD</code> entry and the <code>Rect</code> entry that was passed in to the constructor. <p> This can be used for Square and FreeText annotations. However, this does not produce the text and the callout line for FreeTexts. @param rd entry <code>RD</code>, or null if the entry does not exist @throws IOException If there is an error writing to the stream.
760 Cloudy ellipse implementation.
761 Creates a new colored tiling Paint, i.e. one that has its own colors. @param drawer renderer to render the page @param pattern tiling pattern dictionary @param xform device scale transform @throws java.io.IOException if something goes wrong while drawing the pattern
762 Returns an RGB buffered image containing the opaque image stream without any masks applied. If this Image XObject is a mask then the buffered image will contain the raw mask. @return the image without any masks applied @throws IOException if the image cannot be read
763 Create a new PDPage content stream. @param document The document the page is part of. @param sourcePage The page to write the contents to. @param appendContent Indicates whether content will be overwritten, appended or prepended. @param compress Tell if the content stream should compress the page contents. @param resetContext Tell if the graphic context should be reset. This is only relevant when the appendContent parameter is set to {@link AppendMode#APPEND}. You should use this when appending to an existing stream, because the existing stream may have changed graphic properties (e.g. scaling, rotation). @throws IOException If there is an error writing to the page contents.
764 A rectangle, expressed in default user space units, defining the visible region of default user space. When the page is displayed or printed, its contents are to be clipped (cropped) to this rectangle. @return the cropbox of the page
765 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
766 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
767 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
768 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
769 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
770 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting data from the element.
771 {@inheritDoc}
772 {@inheritDoc}
773 Removes the page with the given index from the page tree. @param index zero-based page index
774 Removes the given page from the page tree. @param page The page to remove.
775 This will add a page to the document. This is a convenience method, that will add the page to the root of the hierarchy and set the parent of the page to the root. @param page The page to add to the document.
776 Insert a page before another page within a page tree. @param newPage the page to be inserted. @param nextPage the page that is to be after the new page. @throws IllegalArgumentException if one attempts to insert a page that isn't part of a page tree.
777 Insert a page after another page within a page tree. @param newPage the page to be inserted. @param prevPage the page that is to be before the new page. @throws IllegalArgumentException if one attempts to insert a page that isn't part of a page tree.
778 Appends a marked-content sequence kid. @param markedContent the marked-content sequence with the MCID. @throws IllegalArgumentException if the mcid is negative or doesn't exist.
779 Fetches the corresponding UCS2 CMap if the font's CMap is predefined.
780 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file stored in a byte array. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param byteArray the TIFF file in a byte array which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
781 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param file the TIFF file which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
782 This will set the display values - the 'Opt' key. <p> The Opt array specifies the list of options in the choice field either as an array of text strings representing the display value or as an array of a two-element array where the first element is the export value and the second the display value. </p> <p> To set both the export and the display value use {@link #setOptions(List, List)} </p> @param displayValues List containing all possible options.
783 This will set the display and export values - the 'Opt' key. <p> This will set both, the export value and the display value of the choice field. If either one of the parameters is null or an empty list is supplied the options will be removed. </p> <p> An {@link IllegalArgumentException} will be thrown if the number of items in the list differ. </p> @see #setOptions(List) @param exportValues List containing all possible export values. @param displayValues List containing all possible display values.
784 This will set the indices of the selected options - the 'I' key. <p> This method is preferred over {@link #setValue(List)} for choice fields which <ul> <li>do support multiple selections</li> <li>have export values with the same value</li> </ul> <p> Setting the index will set the value too. @param values List containing the indices of all selected options.
785 Determine if the appearance shall provide a comb output. <p> May be set only if the MaxLen entry is present in the text field dictionary and if the Multiline, Password, and FileSelect flags are clear. If set, the field shall be automatically divided into as many equally spaced positions, or combs, as the value of MaxLen, and the text is laid out into those combs. </p> @return the comb state
786 Returns the page at the given 0-based index. <p> This method is too slow to get all the pages from a large PDF document (1000 pages or more). For such documents, use the iterator of {@link PDDocument#getPages()} instead. @param pageIndex the 0-based page index @return the page at the given index.
787 Creates a new instance of PageExtractor @param sourceDocument The document to split.
788 Creates a new PDFPageable with the given page orientation and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer if non-zero, and optionally be centered. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed @param dpi if non-zero then the image will be rasterized at the given DPI @param center true if the content is to be centered on the page (otherwise top-left).
789 Notifies the attribute object change listeners about a change in this attribute object.
790 Prepares everything to decrypt the document. Only if decryption of single objects is needed this should be called. @param encryption encryption dictionary @param documentIDArray document id @param decryptionMaterial Information used to decrypt the document. @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error accessing data.
791 Determines the width of the space character. This is very important for text extraction. @return the width of the space character
792 Generate the appearance for comb fields. @param contents the content stream to write to @param appearanceStream the appearance stream used @param font the font to be used @param fontSize the font size to be used @throws IOException
793 A convenience method that checks the flag bit. @return The flag value.
794 A convenience method that checks the flag bit. @return The flag value.
795 A convenience method that checks the flag bit. @return The flag value.
796 A convenience method that checks the flag bit. @return The flag value.
797 A convenience method that checks the flag bit. @return The flag value.
798 A convenience method that checks the flag bit. @return The flag value.
799 A convenience method that checks the flag bit. @return The flag value.
800 A convenience method that checks the flag bit. @return The flag value.
801 A convenience method that checks the flag bit. @return The flag value.
802 A convenience method that sets the flag bit. @param flag The flag value.
803 A convenience method that sets the flag bit. @param flag The flag value.
804 A convenience method that sets the flag bit. @param flag The flag value.
805 A convenience method that sets the flag bit. @param flag The flag value.
806 A convenience method that sets the flag bit. @param flag The flag value.
807 A convenience method that sets the flag bit. @param flag The flag value.
808 A convenience method that sets the flag bit. @param flag The flag value.
809 A convenience method that sets the flag bit. @param flag The flag value.
810 A convenience method that sets the flag bit. @param flag The flag value.
811 Returns the pattern for the given color. @param color color containing a pattern name @return pattern for the given color @throws java.io.IOException if the pattern name was not found.
812 Processes a transparency group stream. @param group transparency group to be processed @throws IOException if the transparency group cannot be processed
813 Processes a Type 3 character stream. @param charProc Type 3 character procedure @param textRenderingMatrix the Text Rendering Matrix @throws IOException if there is an error reading or parsing the character content stream.
814 Process the given annotation with the specified appearance stream. @param annotation The annotation containing the appearance stream to process. @param appearance The appearance stream to process. @throws IOException If there is an error reading or parsing the appearance content stream.
815 Process the given tiling pattern. Allows the pattern matrix to be overridden for custom rendering. @param tilingPattern the tiling pattern @param color color to use, if this is an uncoloured pattern, otherwise null. @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null. @param patternMatrix the pattern matrix, may be overridden for custom rendering. @throws IOException if there is an error reading or parsing the tiling pattern content stream.
816 Process a content stream. @param contentStream the content stream @throws IOException if there is an exception while processing the stream
817 The count parameter needs to be updated when you add, remove, open or close outline items. @param delta The amount to update by.
818 Creates a COSField subclass from the given COS field. This is for reading fields from PDFs. @param form the form that the field is part of @param field the dictionary representing a field element @param parent the parent node of the node to be created, or null if root. @return a new PDField instance
819 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used. @param center true if the content is to be centered on the page (otherwise top-left).
820 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
821 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws IOException in case of a file reading or parsing error
822 Parses a PDF. Unrestricted main memory will be used for buffering PDF new streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
823 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
824 Parses a PDF. Unrestricted main memory will be used for buffering new/altered PDF streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
825 Parses a PDF. Unrestricted main memory will be used for buffering new/altered PDF streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws IOException In case of a reading or parsing error.
826 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
827 Reads the visual signature from the given file. @param file the file containing the visual signature @throws IOException when something went wrong during parsing
828 Reads the visual signature from the given input stream. @param is the input stream containing the visual signature @throws IOException when something went wrong during parsing
829 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
830 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
831 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
832 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
833 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
834 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
835 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
836 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
837 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
838 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
839 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
840 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
841 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
842 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
843 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
844 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
845 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
846 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
847 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
848 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
849 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
850 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
851 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
852 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
853 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
854 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
855 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
856 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
857 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
858 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
859 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
860 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
861 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
862 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
863 Prepare document for encryption. @param document The document to encrypt. @throws IOException If there is an error accessing data.
864 Sets the default value. @param value Name of option to select @throws IllegalArgumentException if the value is not a valid option.
865 Set the selected option given its name, and try to update the visual appearance. @param value Name of option to select @throws IOException if the value could not be set @throws IllegalArgumentException if the value is not a valid option.
866 Creates a clone of the source. @param src source dictionary or array. @param dstParent for the /P entry; parameter needed because arrays don't keep a parent. @param currentPageDict used to remember whether we have a page parent somewhere or not. Starts with null. @return a clone, or null if source is null or if there is no clone because it belongs to a different page or to no page.
867 Returns the page number for this destination, regardless of whether this is a page number or a reference to a page. @see org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem @return the 0-based page number, or -1 if the destination type is unknown.
868 Imports OCProperties from source document to target document so hidden layers can still be hidden after import. @param srcDoc The source PDF document that contains the /OCProperties to be copied. @throws IOException If an I/O error occurs.
869 Rebuild a font subset.
870 Returns the standard structure type, the actual structure type is mapped to in the role map. @return the standard structure type
871 This will write the pdf document. If signature should be created externally, {@link #writeExternalSignature(byte[])} should be invoked to set signature after calling this method. @param doc The document to write. @throws IOException If an error occurs while generating the data.
872 Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file or a stream, not if the document was created in PDFBox itself. There must be a path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set, starting from the document catalog. For signatures this is taken care by PDFBox itself. <p> Other usages of this method are for experienced users only. You will usually never need it. It is useful only if you are required to keep the current revision and append the changes. A typical use case is changing a signed file without invalidating the signature. <p> If your modification includes annotations, make sure these link back to their page by calling {@link PDAnnotation#setPage(PDPage)}. Although this is optional, not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. (PDFBox already does this for signature widget annotations) <p> Another problem with page-based modifications can occur if the page tree isn't flat: there won't be an closed update path from the catalog to the page. To fix this, add code like this: <pre>{@code COSDictionary parent = page.getCOSObject().getCOSDictionary(COSName.PARENT); while (parent != null) { parent.setNeedToBeUpdated(true); parent = parent.getCOSDictionary(COSName.PARENT); } }</pre> Don't use the input file as target as this will produce a corrupted file. @param output stream to write to. It will be closed when done. It <i><b>must never</b></i> point to the source file or that one will be harmed! @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream.
873 Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file or a stream, not if the document was created in PDFBox itself. This allows to include objects even if there is no path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set so the incremental update gets smaller. Only dictionaries are supported; if you need to update other objects classes, then add their parent dictionary. <p> This method is for experienced users only. You will usually never need it. It is useful only if you are required to keep the current revision and append the changes. A typical use case is changing a signed file without invalidating the signature. To know which objects are getting changed, you need to have some understanding of the PDF specification, and look at the saved file with an editor to verify that you are updating the correct objects. You should also inspect the page and document structures of the file with PDFDebugger. <p> If your modification includes annotations, make sure these link back to their page by calling {@link PDAnnotation#setPage(PDPage)}. Although this is optional, not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. (PDFBox already does this for signature widget annotations) <p> Don't use the input file as target as this will produce a corrupted file. @param output stream to write to. It will be closed when done. It <i><b>must never</b></i> point to the source file or that one will be harmed! @param objectsToWrite objects that <b>must</b> be part of the incremental saving. @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream.
874 Attempts to find yet unregistered streams and dictionaries in the given structure. @param current The object to be added for compressing. @throws IOException Shall be thrown, if compressing the object failed.
875 Returns the contents of the stream as a PDF "text string". @return the PDF string representation of the stream content
876 This will get a stream that can be read from. @return An input stream that can be read from. @throws IOException If an IO error occurs during reading.
877 Create a patch list from a data stream, the returned list contains all the patches contained in the data stream. @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @return the obtained patch list @throws IOException when something went wrong
878 Rebuild the trailer dictionary if startxref can't be found. @param xrefTable the cross reference table of the pdf @return the rebuild trailer dictionary @throws IOException if something went wrong
879 Parse the object for the given object key. @param objKey key of object to be parsed @param requireExistingNotCompressedObj if <code>true</code> the object to be parsed must be defined in xref (comment: null objects may be missing from xref) and it must not be a compressed object within object stream (this is used to circumvent being stuck in a loop in a malicious PDF) @return the parsed object (which is also added to document object) @throws IOException If an IO error occurs.
880 Parses cross reference tables. @param document the corresponding COS document of the pdf. @param startXRefOffset start offset of the first table @return the trailer dictionary @throws IOException if something went wrong
881 Creates a new PDCIDFont instance with the appropriate subclass. @param dictionary descendant font dictionary @return a PDCIDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
882 This will return a list of the annotations for this page. @param annotationFilter the annotation filter provided allowing to filter out specific annotations @return List of the PDAnnotation objects, never null. The returned list is backed by the annotations COSArray, so any adding or deleting in this list will change the document too. @throws IOException If there is an error while creating the annotation list.
883 Gets a higher-level object for the referenced object. Currently this method may return a {@link PDAnnotation}, a {@link PDXObject} or <code>null</code>. @return a higher-level object for the referenced object
884 This will retrieve the annotation to which this one is "In Reply To" the actual relationship is specified by the RT entry. @return the other annotation or null if there is none. @throws IOException if there is an error creating the other annotation.
885 This will retrieve the markup annotation which this popup relates to. @return The parent markup annotation.
886 Update the Pg and Obj references to the new (merged) page.
887 Creates a cloudy border for a Circle annotation. The ellipse is specified by the <code>RD</code> entry and the <code>Rect</code> entry that was passed in to the constructor. @param rd entry <code>RD</code>, or null if the entry does not exist @throws IOException If there is an error writing to the stream.
888 Get the annotations normal appearance content stream. <p> This will get the annotations normal appearance content stream, to 'draw' to. @param compress whether the content stream is to be compressed. Set this to true when creating long content streams. @return the appearance entry representing the normal appearance. @throws IOException
889 Create a new PDPage content stream. This constructor overwrites all existing content streams of this page. @param document The document the page is part of. @param sourcePage The page to write the contents to. @throws IOException If there is an error writing to the page contents.
890 Create a new PDPage content stream. If the appendContent parameter is set to {@link AppendMode#APPEND}, you may want to use {@link #PDPageContentStream(PDDocument, PDPage, PDPageContentStream.AppendMode, boolean, boolean)} instead, with the fifth parameter set to true. @param document The document the page is part of. @param sourcePage The page to write the contents to. @param appendContent Indicates whether content will be overwritten, appended or prepended. @param compress Tell if the content stream should compress the page contents. @throws IOException If there is an error writing to the page contents.
891 Initializes the stream engine for the given page.
892 A rectangle, expressed in default user space units, defining the region to which the contents of the page should be clipped when output in a production environment. The default is the CropBox. @return The BleedBox attribute.
893 A rectangle, expressed in default user space units, defining the intended dimensions of the finished page after trimming. The default is the CropBox. @return The TrimBox attribute.
894 A rectangle, expressed in default user space units, defining the extent of the page's meaningful content (including potential white space) as intended by the page's creator The default is the CropBox. @return The ArtBox attribute.
895 This will find the CropBox with rotation applied, for this page by looking up the hierarchy until it finds them. @return The CropBox at this level in the hierarchy.
896 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
897 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
898 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
899 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
900 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
901 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
902 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
903 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
904 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
905 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
906 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
907 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
908 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
909 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
910 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
911 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
912 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
913 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
914 Remove the page from the document. Do not use this method if other pages link to this one or if your document has a structure tree for accessibility unless you are able to fix these as well. In such cases it is better to use the splitter() class which will do these fixes. @param pageNumber 0 based index to page number.
915 Remove the page from the document. Do not use this method if other pages link to this one or if your document has a structure tree for accessibility unless you are able to fix these as well. In such cases it is better to use the splitter() class which will do these fixes. @param page The page to remove from the document.
916 This will import and copy the contents from another location. Currently the content stream is stored in a scratch file. The scratch file is associated with the document. If you are adding a page to this document from another document and want to copy the contents to this document's scratch file then use this method otherwise just use the {@link #addPage addPage()} method. <p> Unlike {@link #addPage addPage()}, this method creates a new PDPage object. If your page has annotations, and if these link to pages not in the target document, then the target document might become huge. What you need to do is to delete page references of such annotations. See <a href="http://stackoverflow.com/a/35477351/535646">here</a> for how to do this. <p> Inherited (global) resources are ignored because these can contain resources not needed for this page which could bloat your document, see <a href="https://issues.apache.org/jira/browse/PDFBOX-28">PDFBOX-28</a> and related issues. If you need them, call <code>importedPage.setResources(page.getResources());</code> <p> This method should only be used to import a page from a loaded document, not from a generated document because these can contain unfinished parts, e.g. font subsetting information. @param page The page to import. @return The page that was imported. @throws IOException If there is an error copying the page.
917 Creates a PDDocument and adds the page parameter to it and keeps this as a template in the PDF template Structure. @param page the page to be added @throws IOException if the document could not be created
918 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file stored in a byte array. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param byteArray the TIFF file in a byte array which contains a suitable CCITT compressed image @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
919 Creates a new CCITT Fax compressed image XObject from the first image of a TIFF file. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(org.apache.pdfbox.pdmodel.PDDocument, java.awt.image.BufferedImage)} or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param file the TIFF file which contains a suitable CCITT compressed image @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
920 Set the selected value of this field, and try to update the visual appearance. @param value The name of the selected item. @throws IOException if the value could not be set
921 Update the 'I' key based on values set.
922 Each page of document can be different sizes. This method calculates the page size based on the page media box. @param document @param page The 1-based page number for which the page size should be calculated. @throws IllegalArgumentException if the page argument is lower than 0.
923 This method will attempt to find the page in this PDF document that this outline points to. If the outline does not point to anything then this method will return null. If the outline is an action that is not a GoTo action then this method will also return null. @param doc The document to get the page from. @return The page that this outline will go to when activated or null if it does not point to anything. @throws IOException If there is an error when trying to find the page.
924 Creates a new PDFPageable. @param document the document to print
925 Creates a new PDFPageable with the given page orientation. @param document the document to print @param orientation page orientation policy
926 Creates a new PDFPageable with the given page orientation and with optional page borders shown. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed
927 Creates a new PDFPageable with the given page orientation and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer if non-zero. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed @param dpi if non-zero then the image will be rasterized at the given DPI
928 Returns a mapping with computed page labels as keys and corresponding 0-based page indices as values. The returned map will contain at most as much entries as the document has pages. <p> <strong>NOTE:</strong> If the document contains duplicate page labels, the returned map will contain <em>less</em> entries than the document has pages. The page index returned in this case is the <em>highest</em> index among all pages sharing the same label. </p> @return a mapping from labels to 0-based page indices.
929 Returns a mapping with 0-based page indices as keys and corresponding page labels as values as an array. The array will have exactly as much entries as the document has pages. @return an array mapping from 0-based page indices to labels.
930 Notifies the attribute object change listeners if the attribute is changed. @param oldBase old value @param newBase new value
931 Called when a glyph is to be processed. The heuristic calculations here were originally written by Ben Litchfield for PDFStreamEngine.
932 Break the paragraph into individual lines. @param font the font used for rendering the text. @param fontSize the fontSize used for rendering the text. @param width the width of the box holding the content. @return the individual lines. @throws IOException
933 Returns the value of the symbolic flag, allowing for the fact that the result may be indeterminate. @return the value of the isSymbolic flag form the font descriptor
934 Attempts to find a good fallback based on the font descriptor.
935 Returns a PDFontDescriptor for the given PFB. @throws IOException if the font bounding box isn't available
936 Returns a PDFontDescriptor for the given AFM. Used only for Standard 14 fonts. @param metrics AFM
937 Creates a new font descriptor dictionary for the given TTF.
938 Returns an AWT paint for the given PDColor. @param color The color to get a paint for. This can be an actual color or a pattern. @return an AWT paint for the given PDColor @throws IOException if the AWT paint could not be created
939 Shows a transparency group from the content stream. @param form transparency group (form) XObject @throws IOException if the transparency group cannot be processed
940 Processes a soft mask transparency group stream. @param group transparency group used for the soft mask @throws IOException if the transparency group cannot be processed
941 Called when a glyph is to be processed. This method is intended for overriding in subclasses, the default implementation does nothing. @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub> @param font the current font @param code internal PDF character code for the glyph @param displacement the displacement (i.e. advance) of the glyph in text space @throws IOException if the glyph cannot be processed
942 Shows the given annotation. @param annotation An annotation on the current page. @throws IOException If an error occurred reading the annotation
943 Process the given tiling pattern. @param tilingPattern the tiling pattern @param color color to use, if this is an uncoloured pattern, otherwise null. @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null. @throws IOException if there is an error reading or parsing the tiling pattern content stream.
944 Shows a form from the content stream. @param form form XObject @throws IOException if the form cannot be processed
945 This will return all of the documents root fields. A field might have children that are fields (non-terminal field) or does not have children which are fields (terminal fields). The fields within an AcroForm are organized in a tree structure. The documents root fields might either be terminal fields, non-terminal fields or a mixture of both. Non-terminal fields mark branches which contents can be retrieved using {@link PDNonTerminalField#getChildren()}. @return A list of the documents root fields, never null. If there are no fields then this method returns an empty list.
946 This will find one of the child elements. The name array are the components of the name to search down the tree of names. The nameIndex is where to start in that array. This method is called recursively until it finds the end point based on the name array. @param name An array that picks the path to the field. @param nameIndex The index into the array. @return The field at the endpoint or null if none is found.
947 Returns this field's children. These may be either terminal or non-terminal fields. @return the list of child fields. Be aware that this list is <i>not</i> backed by the children of the field, so adding or deleting has no effect on the PDF document until you call {@link #setChildren(java.util.List) setChildren()} with the modified list.
948 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used.
949 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
950 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error
951 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error
952 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error
953 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws IOException in case of a file reading or parsing error
954 Reads the visual signature from the given visual signature properties @param visSignatureProperties the <code>PDVisibleSigProperties</code> object containing the visual signature @throws IOException when something went wrong during parsing
955 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
956 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
957 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
958 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
959 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
960 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
961 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
962 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
963 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
964 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
965 Imports a page from some PDF file as a Form XObject so it can be placed on another page in the target document. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before invoking the Form XObject to make sure that the graphics state is reset. @param sourceDoc the source PDF document that contains the page to be copied @param page the page in the source PDF document to be copied @return a Form XObject containing the original page's content @throws IOException if an I/O error occurs
966 This will write the pdf document. @throws IOException If an error occurs while generating the data. @param doc The document to write.
967 Save the document using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param output The stream to write to. It is recommended to wrap it in a {@link java.io.BufferedOutputStream}, unless it is already buffered. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
968 <p> Constructs an object that can be used to compress the contents of a given {@link PDDocument}. It provides the means to: </p> <ul> <li>Compress the COSStructure of the document, by streaming {@link COSBase}s to compressed {@link COSWriterObjectStream}s</li> </ul> @param document The document, that shall be compressed. @param parameters The configuration of the compression operations, that shall be applied. @throws IOException Shall be thrown if a compression operation failed.
969 Get a text or text stream. Some dictionary entries allow either a text or a text stream. @param base the potential text or text stream @return the text stream
970 This will get the value for the field. The return type will either be: <ul> <li>String: for Checkboxes, Radio Button, Textfields</li> <li>List&lt;String&gt;: for a Choice Field</li> </ul> @return The value of the field. @throws IOException If there is an error getting the value.
971 This will set the rich text that is associated with this field. @return The rich text XHTML stream.
972 This will get the javascript that is executed before the import. @return Some javascript code.
973 This will get the javascript that is executed after the import. @return Some javascript code.
974 @return The Javascript Code.
975 This will retrieve the rich text stream which is displayed in the popup window. @return the rich text stream.
976 Get a text as text stream. Some dictionary entries allow either a text or a text stream. @param base the potential text or text stream @return the text stream
977 Create a LayoutPage object from given PDPage object. @return @throws IOException
978 This will copy the stream into a byte array. @return The byte array of the filteredStream. @throws IOException if an I/O error occurs.
979 Get all sample values of this function. @return an array with all samples.
980 Load the ICC profile, or init alternateColorSpace color space.
981 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @throws IOException if something went wrong
982 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream
983 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if something went wrong
984 Read the trailer information and provide a COSDictionary containing the trailer information. @return a COSDictionary containing the trailer information @throws IOException if something went wrong
985 {@inheritDoc}
986 {@inheritDoc}
987 This will return a list of the annotations for this page. @return List of the PDAnnotation objects, never null. The returned list is backed by the annotations COSArray, so any adding or deleting in this list will change the document too. @throws IOException If there is an error while creating the annotation list.
988 Get the annotations normal appearance content stream. <p> This will get the annotations normal appearance content stream, to 'draw' to. It will be uncompressed. @return the appearance entry representing the normal appearance. @throws IOException
989 Places the given form over the existing content of the indicated page (like an overlay). The form is enveloped in a marked content section to indicate that it's part of an optional content group (OCG), here used as a layer. This optional group is returned and can be enabled and disabled through methods on {@link PDOptionalContentProperties}. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before calling this method to make sure that the graphics state is reset. @param targetPage the target page @param form the form to place @param transform the transformation matrix that controls the placement of your form. You'll need this if your page has a crop box different than the media box, or if these have negative coordinates, or if you want to scale or adjust your form. @param layerName the name for the layer/OCG to produce @return the optional content group that was generated for the form usage @throws IOException if an I/O error occurs
990 This will initialize and process the contents of the stream. @param page the page to process @throws IOException if there is an error accessing the stream
991 Process a child stream of the given page. Cannot be used with {@link #processPage(PDPage)}. @param contentStream the child content stream @param page the page to be used for processing @throws IOException if there is an exception while processing the stream
992 {@inheritDoc} Returns the actual physical size of the pages in the PDF file. May not fit the local printer.
993 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
994 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
995 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
996 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
997 Sets the entry "V" to the given values. Requires {@link #isMultiSelect()} to be true. @param values the list of values @throws IOException if the appearance couldn't be generated.
998 Constructor. @param document Already created PDDocument of your PDF document. @param imageStream Image as a stream. @param page The 1-based page number for which the page size should be calculated. @throws IOException If we can't read, flush, or can't close stream.
999 Constructor. @param document Already created PDDocument of your PDF document. @param image the image to be used for the visible signature @param page The 1-based page number for which the page size should be calculated.
1000 Format the text block. @throws IOException if there is an error writing to the stream.
1001 My "not so great" method for calculating the fontsize. It does not work superb, but it handles ok. @return the calculated font-size @throws IOException If there is an error getting the font information.
1002 Reads the Encoding from the Font dictionary or the embedded or substituted font file. Must be called at the end of any subclass constructors. @throws IOException if the font file could not be read
1003 Internal implementation of isSymbolic, allowing for the fact that the result may be indeterminate. @return true if isSymbolic
1004 Finds a TrueType font with the given PostScript name, or a suitable substitute, or null. @param fontDescriptor FontDescriptor
1005 Finds a font with the given PostScript name, or a suitable substitute, or null. This allows any font to be substituted with a PFB, TTF or OTF. @param fontDescriptor the FontDescriptor of the font to find
1006 This will load a PFB to be embedded into a document. @param doc The PDF document that will hold the embedded font. @param dict The Font dictionary to write to. @param pfbStream The pfb input. @throws IOException If there is an error loading the data.
1007 Constructor for Standard 14.
1008 Creates a new TrueType font for embedding.
1009 Called when a glyph is to be processed. This method is intended for overriding in subclasses, the default implementation does nothing. @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub> @param font the current font @param code internal PDF character code for the glyph @param displacement the displacement (i.e. advance) of the glyph in text space @throws IOException if the glyph cannot be processed
1010 This will set this node to be open when it is shown in the viewer. By default, when a new node is created it will be closed. This will do nothing if the node is already open.
1011 Close this node.
1012 This will export all FDF form data. @return An FDF document used to export the document. @throws IOException If there is an error when exporting the document.
1013 This will tell if the AcroForm is a dynamic XFA form. @return true if the AcroForm is a dynamic XFA form
1014 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed
1015 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
1016 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error @deprecated use {@link Loader#loadPDF(File, String)} instead
1017 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error
1018 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
1019 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
1020 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
1021 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
1022 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
1023 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
1024 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
1025 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
1026 Initialize the content of the appearance stream. Get settings like border style, border width and colors to be used to draw a rectangle and background color around the widget @param widget the field widget @param appearanceCharacteristics the appearance characteristics dictionary from the widget or null @param appearanceStream the appearance stream to be used @throws IOException in case we can't write to the appearance stream
1027 Write font name, font size and color from the /DA string to the given content stream. @param contents The content stream. @param zeroFontSize The calculated font size to use if the /DA string has a size 0 (autosize). Otherwise the size from the /DA string is used.
1028 Imports a page from some PDF file as a Form XObject so it can be placed on another page in the target document. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before invoking the Form XObject to make sure that the graphics state is reset. @param sourceDoc the source PDF document that contains the page to be copied @param pageNumber the 0-based page number of the page to be copied @return a Form XObject containing the original page's content @throws IOException if an I/O error occurs
1029 This will save the document to an output stream. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param output The stream to write to. It is recommended to wrap it in a {@link java.io.BufferedOutputStream}, unless it is already buffered. @throws IOException if the output could not be written
1030 Save the document using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param file The file to save as. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
1031 This will write the compressed body of the document. @param document The document to write the body for. @throws IOException If there is an error writing the data.
1032 This will retrieve the rich text stream which is displayed in the popup window. @return the rich text stream.
1033 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
1034 Get the fields rich text value. @return the rich text value string
1035 Create a LayoutPage object from the first page of the given document. @param doc @return @throws IOException
1036 Constructor. @param functionStream The function stream. @throws IOException if an I/O error occurs while reading the function
1037 Do a linear interpolation if the two coordinates can be known, or call itself recursively twice. @param coord coord partially set coordinate (not set from step upwards); gets fully filled in the last call ("leaf"), where it is used to get the correct sample @param step between 0 (first call) and dimension - 1 @return interpolated result sample
1038 Creates a new ICC color space using the PDF array. @param iccArray the ICC stream object. @throws IOException if there is an error reading the ICC profile or if the parameter is invalid.
1039 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @throws IOException if something went wrong
1040 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @throws IOException if something went wrong
1041 Get the XFA content as byte array. The XFA is either a stream containing the entire XFA resource or an array specifying individual packets that together make up the XFA resource. A packet is a pair of a string and stream. The string contains the name of the XML element and the stream contains the complete text of this XML element. Each packet represents a complete XML element, with the exception of the first and last packet, which specify begin and end tags for the xdp:xdp element. [IS0 32000-1:2008: 12.7.8] @return the XFA content @throws IOException if the XFA content could not be created
1042 Update the StructParents and StructParent values in a PDPage. @param page the new page @param structParentOffset the offset which should be applied
1043 Clone the structure tree from the source to the current destination document. This must be called after all pages are processed. @param destinationDocument @throws IOException
1044 Clone all annotations because of changes possibly made, and because the structure tree is cloned. @param imported @throws IOException
1045 Build a map of page => set of widgets to be flattened @param fields a list of fields to be flattened @param pages the page tree @return @throws IOException
1046 This will initialize and process the contents of the stream. @param page the page to process @throws java.io.IOException if there is an error accessing the stream.
1047 This will create an FDF dictionary from an XFDF XML document. @param fdfXML The XML document that contains the XFDF data.
1048 This will import a fdf field from a fdf document. @param fdfField The fdf field to import. @throws IOException If there is an error importing the data for this field.
1049 Constructor. @param documentSource Original PDF document as RandomAccessRead @param imageStream Image as a stream @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
1050 Constructor. @param documentSource Original PDF document as RandomAccessRead @param image the image to be used for the visible signature @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
1051 Returns true if the font is a symbolic (that is, it does not use the Adobe Standard Roman character set). @return true if the font is a symbolic
1052 Creates a new Type 1 font for embedding. @param doc PDF document to write to @param pfbIn PFB file stream @param encoding encoding to be used for the font @throws IOException if the font could not be read
1053 Constructor for Standard 14.
1054 Constructor. @param fontDictionary Font dictionary.
1055 Creates a new TrueType font embedder for the given TTF as a PDCIDFontType2. @param document parent document @param dict font dictionary @param ttf True Type Font @param parent parent Type 0 font @throws IOException if the TTF could not be read
1056 Creates a new TrueType font embedder for the given TTF as a PDTrueTypeFont. @param document The parent document @param dict Font dictionary @param ttf TrueType font @param encoding The PostScript encoding vector to be used for embedding. @throws IOException if the TTF could not be read
1057 Test for dynamic XFA content. @param acroForm the AcroForm @return true if there is a dynamic XFA form.
1058 Creates a new PDFPrintable with the given page scaling. @param document the document to print @param scaling page scaling policy
1059 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error @deprecated use {@link Loader#loadPDF(File)} instead
1060 Generate and insert text content and clipping around it.
1061 Build a PDF with a visible signature step by step, and return it as a stream. @param properties properties to be used for the creation @return InputStream stream containing the pdf holding the visible signature @throws IOException if the PDF could not be created
1062 Save the document to a file using default compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param file The file to save as. @throws IOException if the output could not be written
1063 Save the document to a file using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param fileName The file to save as. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
1064 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
1065 Create the correct PD Model function based on the COS base function. @param function The COS function dictionary. @return The PDModel Function object, never null. @throws IOException If we are unable to create the PDFunction object.
1066 Calculate the interpolation. @return interpolated result sample
1067 Creates a new ICC color space using the PDF array, optionally using a resource cache. @param iccArray the ICC stream object. @param resources resources to use as cache, or null for no caching. @return an ICC color space. @throws IOException if there is an error reading the ICC profile or if the parameter is invalid.
1068 Creates a new lossless encoded image XObject from a BufferedImage. <p> <u>New for advanced users from 2.0.12 on:</u><br> If you created your image with a non standard ICC colorspace, it will be preserved. (If you load images in java using ImageIO then no need to read this segment) However a new colorspace will be created for each image. So if you create a PDF with several such images, consider replacing the colorspace with a common object to save space. This is done with {@link PDImageXObject#getColorSpace()} and {@link PDImageXObject#setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace) PDImageXObject.setColorSpace()} @param document the document where the image will be created @param image the BufferedImage to embed @return a new image XObject @throws IOException if something goes wrong
1069 Extract the matte color from a softmask. @param softMask @return the matte color. @throws IOException if the color conversion fails.
1070 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
1071 Get the XFA content as W3C document. @see #getBytes() @return the XFA content @throws IOException if something went wrong when reading the XFA content.
1072 Draws the page to the requested context. @param g The graphics context to draw onto. @param pageSize The size of the page to draw. @throws IOException If there is an IO error while drawing the page.
1073 Interface to start processing a new page. @param page The page that is about to get processed. @throws IOException If there is an error creating the new document.
1074 This will initialize and process the contents of the stream. @param page the page to process @throws java.io.IOException if there is an error accessing the stream.
1075 This will process the contents of a page. @param page The page to process. @throws IOException If there is an error processing the page.
1076 This will create an FDF catalog from an XFDF XML document. @param element The XML document that contains the XFDF data.
1077 Creates a new Type 1 font for embedding. @param doc PDF document to write to @param pfbIn PFB file stream @throws IOException if the font could not be read
1078 Creates a Type 1 standard 14 font for embedding. @param baseFont One of the standard 14 PostScript names, e.g. {@link FontName#HELVETICA_BOLD}.
1079 Constructor. @param fontDictionary Font dictionary.
1080 Constructor for reading a Type0 font from a PDF file. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the descendant font is missing.
1081 Private. Creates a new PDType0Font font for embedding. @param document @param ttf @param embedSubset @param closeTTF whether to close the ttf parameter after embedding. Must be true when the ttf parameter was created in the load() method, false when the ttf parameter was passed to the load() method. @param vertical whether to enable vertical substitutions. @throws IOException
1082 Creates a new TrueType font for embedding.
1083 Returns an iterator which walks all fields in the tree, in order.
1084 Creates a new PDFPrintable. @param document the document to print
1085 Constructor. @param filename Path of the PDF file @param imageStream image as a stream @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
1086 Constructor. @param filename Path of the PDF file @param image the image to be used for the visible signature @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
1087 start building of visible signature @throws IOException if the output could not be written
1088 Save the document to a file using default compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param fileName The file to save as. @throws IOException if the output could not be written
1089 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
1090 {@inheritDoc}
1091 Creates a new DeviceN color space from the given COS array. @param deviceN an array containing the color space information @param resources resources, can be null. @throws IOException if the colorspace could not be created
1092 This will get the tint transform function. @return The tint transform function. @throws IOException if there is an error creating the function.
1093 Creates a new Separation color space from a PDF color space array. @param separation an array containing all separation information. @param resources resources, can be null. @throws IOException if the color space or the function could not be created.
1094 This will return the function used to convert the color values. @return the function @throws java.io.IOException if we were not able to create the function.
1095 Provide the function(s) of the shading dictionary as array. @return an array containing the function(s). @throws IOException if we were unable to create a function.
1096 Returns the transfer function. @return the transfer function @throws IOException If we are unable to create the PDFunction object.
1097 Creates a new indexed color space from the given PDF array. @param indexedArray the array containing the indexed parameters @param resources the resources, can be null. Allows to use its cache for the colorspace. @throws IOException if the colorspace could not be created
1098 {@inheritDoc}
1099 Build the base image object from the IDATs and profile information
1100 Create a PDImageXObject from an image file. The file format is determined by the file name suffix. The following suffixes are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromStream}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param file the image file. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
1101 Create a PDImageXObject from an image file. The file format is determined by the file content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromStream}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param file the image file. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
1102 {@inheritDoc}
1103 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
1104 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
1105 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
1106 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
1107 Returns the given page as an RGB or ARGB image at the given scale. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @param imageType the type of image to return @param destination controlling visibility of optional content groups @return the rendered page image @throws IOException if the PDF cannot be read
1108 Renders a given page to an AWT Graphics2D instance. <p> Known problems: <ul> <li>rendering of PDF files with transparencies is not supported on Ubuntu, see <a href="https://issues.apache.org/jira/browse/PDFBOX-4581">PDFBOX-4581</a> and <a href="https://bugs.openjdk.java.net/browse/JDK-6689349">JDK-6689349</a>. Rendering will not abort, but the pages will be rendered incorrectly.</li> <li>Clipping the Graphics2D will not work properly, see <a href="https://issues.apache.org/jira/browse/PDFBOX-4583">PDFBOX-4583</a>.</li> </ul> If you encounter these problems, then you should render into an image by using the {@link #renderImage(int) renderImage} methods. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scaleX the scale to draw the page at for the x-axis, where 1 = 72 DPI @param scaleY the scale to draw the page at for the y-axis, where 1 = 72 DPI @param destination controlling visibility of optional content groups @throws IOException if the PDF cannot be read
1109 Interface method to handle the start of the page processing. @throws IOException If an IO error occurs.
1110 This will process all of the pages and the text that is in them. @param pages The pages object in the document. @throws IOException If there is an error parsing the text.
1111 This will create an FDF document from an XFDF XML document. @param doc The XML document that contains the XFDF data. @throws IOException If there is an error reading from the dom.
1112 Provide standard 14 Helvetica font as default if there isn't any font available. @return the default font
1113 Returns the mapped font for the specified Standard 14 font. The mapped font is cached. @param baseName name of the standard 14 font @return the mapped font
1114 Creates a new TrueType font from a Font dictionary. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the font could not be created
1115 Constructor. @param fontDictionary the corresponding dictionary @throws IOException it something went wrong
1116 Creates a Type 1 font from a Font dictionary in a PDF. @param fontDictionary font dictionary. @throws IOException if there was an error initializing the font. @throws IllegalArgumentException if /FontFile3 was used.
1117 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param resourceCache Resource cache, can be null. @throws IOException if the font could not be created
1118 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param randomAccessRead source of a TrueType font. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @param vertical whether to enable vertical substitutions. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
1119 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param ttf A TrueType font. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
1120 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param ttf A TrueType font. @param embedSubset True if the font will be subset before embedding @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
1121 Loads a TTF to be embedded into a document as a simple font. <p> <b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, InputStream)} instead. </p> @param doc The PDF document that will hold the embedded font. @param ttf A true type font @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
1122 Loads a TTF to be embedded into a document as a simple font. <p> <b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, File)} instead. </p> @param doc The PDF document that will hold the embedded font. @param randomAccessRead the source of the TTF. @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
1123 Retrieve all signature fields from the document. @return a <code>List</code> of <code>PDSignatureField</code>s
1124 Refreshes the appearance streams and appearance dictionaries for the widget annotations of all fields. @throws IOException if the appearance streams could not be refreshed
1125 Returns an iterator which walks all fields in the field tree, in order. @return an iterator which walks all fields in the field tree
1126 This will tell this form to cache the fields into a Map structure for fast access via the getField method. The default is false. You would want this to be false if you were changing the COSDictionary behind the scenes, otherwise setting this to true is acceptable. @param cache A boolean telling if we should cache the fields.
1127 This will get a field by name, possibly using the cache if setCache is true. @param fullyQualifiedName The name of the field to get. @return The field with that name of null if one was not found.
1128 This will add overlays to a document. @param specificPageOverlayMap Optional map of overlay files of which the first page will be used for specific pages of the input document. The page numbers are 1-based. The map must be empty (but not null) if no specific mappings are used. @return The modified input PDF document, which has to be saved and closed by the caller. If the input document was passed by {@link #setInputPDF(PDDocument) setInputPDF(PDDocument)} then it is that object that is returned. @throws IOException if something went wrong. @throws IllegalArgumentException if the input document is missing.
1129 This will add overlays documents to a document. If you created the overlay documents with subsetted fonts, you need to save them first so that the subsetting gets done. @param specificPageOverlayDocumentMap Optional map of overlay documents for specific pages. The page numbers are 1-based. The map must be empty (but not null) if no specific mappings are used. @return The modified input PDF document, which has to be saved and closed by the caller. If the input document was passed by {@link #setInputPDF(PDDocument) setInputPDF(PDDocument)} then it is that object that is returned. @throws IOException if something went wrong
1130 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
1131 Creates a color space given a name or array. Abbreviated device color names are not supported here, please replace them first. This method is for PDFBox internal use only, others should use {@link #create(COSBase, PDResources)}. @param colorSpace the color space COS object @param resources the current resources. @param wasDefault if current color space was used by a default color space. @return a new color space. @throws MissingResourceException if the color space is missing in the resources dictionary @throws IOException if the color space is unknown or cannot be created.
1132 Convert the input values using the functions of the shading dictionary. @param input the input values @return the output values @throws IOException thrown if something went wrong
1133 Creates a new indexed color space from the given PDF array. @param indexedArray the array containing the indexed parameters @throws IOException if the colorspace could not be created
1134 Create a PDImageXObject from an image file, see {@link #createFromFileByExtension(File, PDDocument)} for more details. @param imagePath the image file path. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject, or if the image type is not supported.
1135 {@inheritDoc} The returned images are cached via a SoftReference.
1136 Returns the given page as an RGB or ARGB image at the given scale. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @param imageType the type of image to return @return the rendered page image @throws IOException if the PDF cannot be read
1137 Renders a given page to an AWT Graphics2D instance. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scaleX the scale to draw the page at for the x-axis, where 1 = 72 DPI @param scaleY the scale to draw the page at for the y-axis, where 1 = 72 DPI @throws IOException if the PDF cannot be read
1138 This will take a document and split into several other documents. @param document The document to split. @return A list of all the split documents. These should all be saved before closing any documents, including the source document. Any further operations should be made after reloading them, to avoid problems due to resource sharing. For the same reason, they should not be saved with encryption. @throws IOException If there is an IOError
1139 This will take a PDDocument and write the text of that document to the print writer. @param doc The document to get the data from. @param outputStream The location to put the text. @throws IOException If the doc is in an invalid state.
1140 This will load a document from an input stream. The stream is loaded to the memory to establish random access to the data. @param input The stream that contains the document. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
1141 Process text from the PDF Stream. You should override this method if you want to perform an action when encoded text is being processed. @param string the encoded text @throws IOException if there is an error processing the string
1142 Returns the path for the character with the given name for the specified Standard 14 font. The mapped font is cached. The path may differ in different environments as it depends on the mapped font. @param baseName name of the standard 14 font @param glyphName name of glyph @return the mapped font @throws IOException if the data could not be read
1143 Creates an MMType1Font from a Font dictionary in a PDF. @param fontDictionary font dictionary @throws IOException if the font could not be read
1144 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the font could not be created
1145 Loads a TTF to be embedded and subset into a document as a Type 0 font. If you are loading a font for AcroForm, then use the 3-parameter constructor instead. @param doc The PDF document that will hold the embedded font. @param file A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font file.
1146 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param input An input stream of a TrueType font. It will be closed before returning. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
1147 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param file A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font file.
1148 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param input A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
1149 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param input A TrueType font. @param embedSubset True if the font will be subset before embedding @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
1150 Loads a TTF to be embedded into a document as a simple font. <p><b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, File)} instead.</p> @param doc The PDF document that will hold the embedded font. @param file A TTF file. @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
1151 Loads a TTF to be embedded into a document as a simple font. <p><b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, InputStream)} instead.</p> @param doc The PDF document that will hold the embedded font. @param input A TTF file stream @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
1152 Retrieve all signature dictionaries from the document. @return a <code>List</code> of <code>PDSignatureField</code>s
1153 This will add a signature to the document. If the 0-based page number in the options parameter is smaller than 0 or larger than max, the nearest valid page number will be used (i.e. 0 or max) and no exception will be thrown. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param signatureInterface is an interface whose implementation provides signing capabilities. Can be null if external signing if used. @param options signature options @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
1154 This method will import an entire FDF document into the PDF document that this acroform is part of. @param fdf The FDF document to import. @throws IOException If there is an error doing the import.
1155 This will save the document to an output stream and close the stream. @param output The stream to write to. @throws IOException If there is an error writing the document.
1156 Convert the input value using the functions of the shading dictionary. @param inputValue the input value @return the output values @throws IOException thrown if something went wrong
1157 Convert color to RGB color value, using function if required, then convert from the shading color space to an RGB value, which is encoded into an integer.
1158 Returns the non-stroking AWT Paint. You may need to call this if you override {@link #showGlyph(Matrix, PDFont, int, Vector) showGlyph()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5093">PDFBOX-5093</a> for more. @return The non-stroking AWT Paint. @throws IOException if the non-stroking AWT Paint could not be created
1159 For advanced users, to extract the transparency group into a separate graphics device. @param form the transparency group to be extracted @param graphics the target graphics device @throws IOException if the transparency group could not be extracted
1160 Returns the given page as an RGB image at the given scale. A scale of 1 will render at 72 DPI. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @return the rendered page image @throws IOException if the PDF cannot be read
1161 Returns the given page as an RGB image at the given DPI. @param pageIndex the zero-based index of the page to be converted @param dpi the DPI (dots per inch) to render at @return the rendered page image @throws IOException if the PDF cannot be read
1162 Returns the given page as an RGB image at the given DPI. @param pageIndex the zero-based index of the page to be converted @param dpi the DPI (dots per inch) to render at @param imageType the type of image to return @return the rendered page image @throws IOException if the PDF cannot be read
1163 Renders a given page to an AWT Graphics2D instance. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scale the scaling factor, where 1 = 72 DPI @throws IOException if the PDF cannot be read
1164 This will take a document and extract the desired pages into a new document. Both startPage and endPage are included in the extracted document. If the endPage is greater than the number of pages in the source document, it will go to the end of the document. If startPage is less than 1, it'll start with page 1. If startPage is greater than endPage or greater than the number of pages in the source document, a blank document will be returned. @return The extracted document @throws IOException If there is an IOError
1165 This will return the text of a document. See writeText. <br> NOTE: The document must not be encrypted when coming into this method. <p>IMPORTANT: By default, text extraction is done in the same sequence as the text in the PDF page content stream. PDF is a graphic format, not a text format, and unlike HTML, it has no requirements that text one on page be rendered in a certain order. The order is the one that was determined by the software that created the PDF. To get text sorted from left to right and top to botton, use {@link #setSortByPosition(boolean)}. @param doc The document to get the text from. @return The text of the PDF document. @throws IOException if the doc state is invalid or it is encrypted.
1166 This will load a document from a file. @param filename The name of the file to load. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
1167 This will load a document from a file. @param file The name of the file to load. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
1168 Called when a string of text is to be shown. @param string the encoded text @throws IOException if there was an error showing the text
1169 Called when a string of text with spacing adjustments is to be shown. @param array array of encoded text strings and adjustments @throws IOException if there was an error showing the text
1170 Creates a new PDFont instance with the appropriate subclass. @param dictionary a font dictionary @param resourceCache resource cache, only useful for type 3 fonts, can be null @return a PDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
1171 Loads a TTF to be embedded and subset into a document as a Type 0 font. If you are loading a font for AcroForm, then use the 3-parameter constructor instead. @param doc The PDF document that will hold the embedded font. @param input An input stream of a TrueType font. It will be closed before returning. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
1172 This will return the last signature from the field tree. Note that this may not be the last in time when empty signature fields are created first but signed after other fields. @return the last signature as <code>PDSignatureField</code>.
1173 Save PDF incrementally without closing for external signature creation scenario. The general sequence is: <pre> PDDocument pdDocument = ...; OutputStream outputStream = ...; SignatureOptions signatureOptions = ...; // options to specify fine tuned signature options or null for defaults PDSignature pdSignature = ...; // add signature parameters to be used when creating signature dictionary pdDocument.addSignature(pdSignature, signatureOptions); // prepare PDF for signing and obtain helper class to be used ExternalSigningSupport externalSigningSupport = pdDocument.saveIncrementalForExternalSigning(outputStream); // get data to be signed InputStream dataToBeSigned = externalSigningSupport.getContent(); // invoke signature service byte[] signature = sign(dataToBeSigned); // set resulted CMS signature externalSigningSupport.setSignature(signature); // last step is to close the document pdDocument.close(); </pre> <p> Note that after calling this method, only {@code close()} method may invoked for {@code PDDocument} instance and only AFTER {@link ExternalSigningSupport} instance is used. </p> <p> Don't use the input file as target as this will produce a corrupted file. @param output stream to write the final PDF. It will be closed when the document is closed. It <i><b>must never</b></i> point to the source file or that one will be harmed! @return instance to be used for external signing and setting CMS signature @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream or signature options were not set.
1174 This will flatten the specified form fields. <p> Flattening a form field will take the current appearance and make that part of the pages content stream. All form fields and annotations associated are removed. </p> <p> Invisible and hidden fields will be skipped and will not become part of the page content stream </p> @param fields a list of fields to be flattened @param refreshAppearances if set to true the appearances for the form field widgets will be updated @throws IOException if something went wrong flattening the fields
1175 Add parameters of signature to be created externally. See {@link #saveIncrementalForExternalSigning(OutputStream)} method description on external signature creation scenario details. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param options signature options @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
1176 Add a signature to be created using the instance of given interface. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param signatureInterface is an interface whose implementation provides signing capabilities. Can be null if external signing if used. @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
1177 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
1178 Renders a glyph. @param path the GeneralPath for the glyph @param font the font @param code character code @param displacement the glyph's displacement (advance) @param at the transformation @throws IOException if something went wrong
1179 Build a indexed image
1180 Returns the given page as an RGB image at 72 DPI @param pageIndex the zero-based index of the page to be converted. @return the rendered page image @throws IOException if the PDF cannot be read
1181 Renders a given page to an AWT Graphics2D instance at 72 DPI. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @throws IOException if the PDF cannot be read
1182 Returns the font resource with the given name, or null if none exists. @param name Name of the font resource. @return the font with the given name or null @throws IOException if something went wrong.
1183 Creates a new PDFont instance with the appropriate subclass. @param dictionary a font dictionary @return a PDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
1184 This will flatten all form fields. <p> Flattening a form field will take the current appearance and make that part of the pages content stream. All form fields and annotations associated are removed. </p> <p> Invisible and hidden fields will be skipped and will not become part of the page content stream </p> <p> The appearances for the form fields widgets will <strong>not</strong> be generated </p> @throws IOException if something went wrong flattening the fields
1185 Add parameters of signature to be created externally using default signature options. See {@link #saveIncrementalForExternalSigning(OutputStream)} method description on external signature creation scenario details. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
1186 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
1187 Get the points from the triangles, calculate their color and add point-color mappings.
1188 Fills and then strokes the path. @param windingRule The winding rule this path will use. @throws IOException If there is an IO error while filling the path.
1189 Convert the image using the state. @param doc the document to put the image in @param state the parser state containing the PNG chunks. @return null or the converted image
1190 Process the set font and font size operator. @param operands the font name and size @throws IOException in case there are missing operators or the font is not within the resources
1191 Copies any needed resources from the document’s DR dictionary into the stream’s Resources dictionary. Resources with the same name shall be left intact.
1192 This will get the font for this font setting. @return The font for this setting of null if one was not found. @throws IOException If there is an error getting the font.
1193 append all pages from source to destination. @param destination the document to receive the pages @param source the document originating the new pages @throws IOException If there is an error accessing data from either document.
1194 Try to convert a PNG into a PDImageXObject. If for any reason the PNG can not be converted, null is returned. <p> This usually means the PNG structure is damaged (CRC error, etc.) or it uses some features which can not be mapped to PDF. @param doc the document to put the image in @param imageData the byte data of the PNG @return null or the PDImageXObject built from the png
1195 This is used to handle an operation. @param operator The operation to perform. @param operands The list of arguments. @throws IOException If there is an error processing the operation.
1196 Constructs and sets new contents for given appearance stream.
1197 This will implement the gs operator. @param gs The state to copy this dictionaries values into. @throws IOException If there is an error copying font information.
1198 Merge the list of source documents, saving the result in the destination file. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @throws IOException If there is an error saving the document.
1199 Create a PDImageXObject from an image byte array. This overloaded version allows providing a custom factory to handle specific image formats, such as BMP and GIF, or to act as a fallback strategy when the default converters (e.g., for PNG or TIFF) fail. @param document the document that shall use this PDImageXObject. @param byteArray bytes from an image file. @param name name of image file for exception messages, can be null. @param customFactory optional factory used to handle BMP, GIF, or fallback cases (e.g., for PNG or TIFF). If {@code null}, this method delegates to {@link #createFromByteArray(PDDocument, byte[], String)}. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
1200 Processes the operators of the given content stream. @param content the content to parse. @throws IOException if there is an error reading or parsing the content stream.
1201 Merge the list of source documents, saving the result in the destination file. The source list is not reset after merge. If you want to merge one document at a time, then it's better to use {@link #appendDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDDocument)}. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @param compressParameters defines if compressed object streams are enabled @throws IOException If there is an error saving the document.
1202 Create a PDImageXObject from bytes of an image file. The file format is determined by the file content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromByteArray}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param byteArray bytes from an image file. @param document the document that shall use this PDImageXObject. @param name name of image file for exception messages, can be null. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
1203 Constructor for reading an existing DA string. @param defaultResources DR entry @param defaultAppearance DA entry @throws IOException If the DA could not be parsed
1204 Merge the list of source documents, saving the result in the destination file. The source list is not reset after merge. If you want to merge one document at a time, then it's better to use {@link #appendDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDDocument)}. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @throws IOException If there is an error saving the document.
1205 Get the default appearance. This is an inheritable attribute. The default appearance contains a set of default graphics and text operators to define the field’s text size and color. @return the DA element of the dictionary object
1206 This is the public method for setting the appearance stream. @param apValue the String value which the appearance should represent @throws IOException If there is an error creating the stream.
1207 Constructs a COSAppearance from the given field. @param field the field which you wish to control the appearance of @throws IOException
