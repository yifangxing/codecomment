1 Initializes a new transparency group. @param document the PDDocument to associate with this form object
2 Constructs an appearance stream associated with a PDF document. @param document the PDDocument to link this appearance stream to
3 Creates a JPEG image with an alpha mask from a BufferedImage. @param document PDF document to add the image @param image input BufferedImage to process @param quality JPEG compression quality (0.0f to 1.0f) @param dpi dots per inch for resolution settings @return PDImageXObject representing the JPEG image with alpha mask @throws IOException if an I/O error occurs
4 Initializes PDF parsing without encryption. @param source input stream of the PDF document @throws IOException if an I/O error occurs during initialization
5 Applies mask to a template with offset. @param template array of points defining the shape @param x horizontal offset @param y vertical offset @throws IOException if an I/O error occurs during masking
6 Masks a section of an ellipse with a curve. @param startAng starting angle in radians @param endAng ending angle in radians @param cx center x-coordinate @param cy center y-coordinate @param rx radius along x-axis @param ry radius along y-axis @param out list to store points or null for direct drawing @param addMoveTo flag to add initial move-to command @throws IOException if an I/O error occurs
7 Returns an iterator over managed COSBase objects. Utilizes the collection initialized by m1(). @return Iterator object for COSBase elements
8 Converts a COSObjectable to COSBase and adds it to the collection. @param object the COSObjectable object to process
9 Ensures the COSArray has a specified size and adds an object. @param size desired size of the array @param object COSBase object to add
10 Masks values by adding them as COSFloat objects. @param value array of float values to be masked
11 Parses and returns a COSArray from the PDF source. Handles nested objects and object keys. @return COSArray containing parsed elements @throws IOException if parsing fails
12 Generates a COSStream for cross-reference data. @return the generated COSStream @throws IOException if I/O operations fail
13 Initializes a COSArrayList with an initial object and associated PDFBox structures. @param actualObject the actual object to manage @param item the COSBase item representing the object in the PDF @param dictionary the parent COSDictionary containing this list @param dictionaryKey the key under which this list is stored in the dictionary
14 Converts a list of objects to a COSArray. Handles various types including String, Integer, Float, and COSObjectable. @param cosObjectableList the input list of objects @return COSArray containing converted COSBase objects
15 Initializes a PDRange with default values from 0 to 1.
16 Initializes a new FDFOptionElement with default empty strings. Constructs a COSArray and adds two empty COSStrings to it.
17 Initializes a new PDFontSetting with default font settings. Sets up a COSArray with initial values for font configuration.
18 Converts color components to a COSArray. Adds pattern name if applicable. @return COSArray representing color components and pattern
19 Initializes a PDDeviceN instance for DeviceN color space. Sets up the initial COSArray with "DeviceN" and three null placeholders.
20 Initializes a PDGamma object with zero RGB values. Constructs an empty COSArray and adds three COSFloat.ZERO elements representing R, G, B.
21 Retrieves the PDColorSpace for the mask. Handles alternate color spaces and default mappings. @return PDColorSpace instance or throws IOException if creation fails
22 Initializes a PDIndexed object with default settings. Sets up color space, base type, high value, and null entry.
23 Creates a COSArray representing LAB color component ranges. @return COSArray with min and max values for L, A, B components
24 Initializes a new PDPattern with given resources. @param resources PDF document resources
25 Initializes a new PDSeparation object with default color separation settings. Sets up the internal COSArray with necessary placeholders for color components.
26 Initializes a PDTristimulus with zero tristimulus values.
27 Initializes PDTristimulus with tristimulus values from array. @param array float array containing X, Y, Z values (max 3)
28 Applies a mask with the given transformation to the form XObject. @param transform the AffineTransform object defining the transformation matrix
29 Creates a masked PDImageXObject from a JPEG byte array. @param document PDF document to add the image to @param byteArray JPEG image data @return PDImageXObject with applied mask if necessary @throws IOException if an I/O error occurs during processing
30 Creates a COSArray representing the FUNC_MASK for PDF transformations. @return COSArray containing transformation parameters
31 Updates an element at the specified index with a given COSBase object. Converts COSObjectable to COSBase using its m1() method if not null. @param index position to update the object @param object the COSObjectable object to insert or convert
32 Sets an integer value at specified index. @param index position to update @param value integer value to set
33 Updates an element at a specified index with a COSName object. @param index position to update the object @param name the name string to process
34 Sets a string at the specified index in the array. @param index position to update the string @param string text to be set; if null, sets null at the index
35 Sets the minimum value of the range. @param min the new minimum value for the range
36 Sets the maximum value in the PDRange. @param max the maximum value to set
37 Sets the mask value for the rectangle. @param value the float value to set as the mask
38 Sets mask value in rectangle array. @param value the mask value to be set
39 Sets the mask value at index 2 in the rectangle array. @param value the float value to be set as the mask
40 Sets the mask value for the rectangle. @param value the mask value to apply
41 Sets color at specified index. @param index position to update the color @param colour PDGamma object representing the color
42 Masks elements in a COSArray using object and generation numbers. @param array the COSArray to mask @param objNum object number for masking @param genNum generation number for masking @throws IOException if an I/O error occurs during masking
43 Sets an option value using a COSString. @param opt option value to be set
44 Sets the value of an option element. @param da string value to be set
45 Sets the font size in the PDF document. @param size the desired font size
46 Sets colorant names for DeviceN space. @param names list of colorant identifiers
47 Sets DeviceN attributes and manages internal COSArray. @param attributes PDDeviceNAttributes object containing color space details
48 Sets the mask for the color space. @param cs the alternate color space to set
49 Sets the red component of the color with gamma correction. @param r red value to be set
50 Sets gamma value for mask. @param g gamma correction factor
51 Sets gamma value for blue component. @param b blue gamma value to be set
52 Sets mask and base color space. @param base PDColorSpace to use as base
53 Sets a mask property in the PDF document. @param name the name of the mask to set
54 Sets the mask for a given color space. @param colorSpace the color space to apply the mask to
55 Sets the X tristimulus value. @param x the X component of the color
56 Sets the Y tristimulus value. @param y Y component of the color
57 Sets the Z tristimulus value. @param z the Z value to set
58 Adds or updates a key-value pair in the dictionary. @param key the COSName key to be added or updated @param value the COSObjectable value associated with the key
59 Sets a boolean value in the dictionary under the specified key. @param key the key string for the dictionary entry @param value the boolean value to set
60 Sets a boolean value in the dictionary. @param key the COSName key to be set @param value the boolean value to associate with the key
61 Adds or updates a key-value pair in the dictionary. @param key the name string to be added or updated @param value the COSBase value associated with the key
62 Sets a mask for a given key with string value. @param key the key to set in the dictionary @param value the string value to convert to COSName and set as mask
63 Sets a string value in the dictionary under a specified key. @param key the COSName key for the value @param value the string value to be set
64 Sets an integer value in the dictionary. @param key the COSName key to be updated @param value the integer value to set
65 Sets an integer value in the dictionary. @param key the COSName key to be set @param value the long integer value to associate with the key
66 Sets a float value in the dictionary. @param key the key for the value @param value the float value to be set
67 Creates a COSStream from a given dictionary and stream data. @param dictionary the COSDictionary to store stream reference @param startPosition start position of the stream in the file @param streamLength length of the stream data @return newly created COSStream object @throws IOException if an I/O error occurs during stream creation
68 Sets encryption dictionary in the document's trailer. @param encDictionary encryption settings to be applied
69 Sets the document ID in the trailer dictionary. @param id COSArray containing the document ID
70 Parses the next token from the PDF content stream. Handles various data types including dictionaries, arrays, strings, and numbers. @return parsed object or null if end of source is reached @throws IOException if an I/O error occurs during parsing
71 Initializes a new PDF document with basic structure. @param streamCacheCreateFunction function to create stream cache
72 Sets document information and updates PDF trailer. @param info PDDocumentInformation object containing metadata
73 Initializes a PDF document catalog. @param doc the PDDocument to associate with this catalog
74 Sets the list of threads in the document catalog. @param threads List of PDThread objects representing threads
75 Sets PDF document's output intents. @param outputIntents list of PDOutputIntent objects representing output intents
76 Sets or removes the crop box of the PDF page. @param cropBox PDRectangle representing the new crop box or null to remove it
77 Sets the content streams of the PDF page. @param contents list of PDStream objects representing content streams
78 Sets thread beads on the PDF page. @param beads list of PDThreadBead objects representing interactive elements
79 Sets annotations on the PDF page. @param annotations list of PDAnnotation objects to be added
80 Sets or removes viewport dictionaries on the PDF page. @param viewports list of PDViewportDictionary objects to set
81 Initializes a new PDPageTree with an empty page tree structure. Sets up the root dictionary with required keys and initializes child nodes.
82 Adds an element to the list and updates parent dictionary. @param o object to add @return true if addition is successful
83 Removes entry from dictionary and updates internal structures. @param dictKey key of the entry to remove
84 Replaces an element at the specified index. @param index position of the element to replace @param element new element to set @return old element at the specified index @throws UnsupportedOperationException if replacing in a filtered list
85 Adds or updates an element at a specified index. @param index position in the list @param element object to add or update
86 Adds or updates a PDF-specific key-value pair. @param key the key string to be converted to COSName @param value the COSObjectable value to store @return the updated value
87 Generates a COSDictionary with page label information. Converts page labels to a dictionary format for PDF documents. @return COSBase containing the page labels as a dictionary
88 Initializes a new complex file specification. Sets up the dictionary with type as FILESPEC.
89 Initializes a complex file specification from a dictionary. @param dict the input COSDictionary or null for a new one
90 Sets function's mask and updates dictionary with range values. @param rangeValues array representing the range of valid input values
91 Sets the domain values for the function. @param domainValues array of COSBase representing the domain
92 Sets encoding values and updates dictionary. @param encodeValues array of encoding values
93 Sets the DECODE array and updates dictionary. @param decodeValues array containing decode values
94 Sets or updates the mask key in the structure tree. @param k value to be set for the mask key
95 Updates the class map in the PDF structure tree. @param classMap mapping of class names to attributes or lists of PDAttributeObjects
96 Sets user properties for a PDF document. @param userProperties list of user properties to be set
97 Sets the line dash pattern for guidelines. @param dashArray array defining the dash pattern or null to clear it
98 Sets the encryption filter method. @param cfm COSName representing the encryption filter method
99 Sets the encryption filter. @param filter name of the filter to be set
100 Sets the owner password encryption key. @param o byte array representing the owner password @throws IOException if an I/O error occurs
101 Sets the user password for encryption. @param u byte array representing the user password
102 Sets the owner encryption key. @param oe byte array representing the owner encryption key
103 Sets the user encryption entry. @param ue user encryption bytes @throws IOException if an I/O error occurs
104 Sets encryption recipients for PDF document. @param recipients array of recipient byte arrays @throws IOException if I/O error occurs during processing
105 Sets the stream filter name. @param streamFilterName the name of the stream filter to be set
106 Sets the string filter name in the encryption dictionary. @param stringFilterName the COSName representing the string filter
107 Sets permissions mask for PDF encryption. @param perms byte array representing permissions @throws IOException if an I/O error occurs
108 Resets encryption filters in the PDF document. Sets CF, STM_F, and STR_F to null in the dictionary.
109 Initializes a new FDF annotation. Sets up the base dictionary with type "Annot".
110 Sets the mask color for an annotation. @param c Color object representing the mask color
111 Sets the annotation's resource key. @param rc resource key string to be set
112 Sets the interior color of the annotation circle. @param color Color object representing the desired interior color
113 Sets the callout line coordinates. @param callout array of float values representing callout points
114 Sets the ink list for the annotation. @param inklist List of float arrays representing ink data points
115 Sets the line coordinates for the annotation. @param line array of floats representing the line coordinates
116 Sets the line annotation mask color. @param color Color object representing the mask color
117 Sets polygon vertices. @param vertices array of vertex coordinates
118 Sets the interior color of the polygon annotation. @param color Color object representing the interior color
119 Sets the vertex coordinates of the polyline annotation. @param vertices array of vertex coordinates
120 Sets the interior mask color of the annotation. @param color the Color object representing the mask color
121 Sets the interior color of the annotation. @param color Color object representing the desired interior color
122 Sets annotation quad points. @param coords array of coordinates defining the quad points
123 Sets the document ID in the FDF dictionary. @param id COSArray containing the document ID
124 Sets form fields in the FDF document. @param fields list of FDFField objects to be set
125 Sets the list of FDF pages. @param pages List of FDFPage objects to be set
126 Sets annotations in the FDF document. @param annots list of FDFAnnotation objects to be set
127 Sets the differences stream in the FDF document. @param diff COSStream containing the differences data
128 Sets embedded file specifications in the FDF document. @param embedded list of PDFileSpecification objects to embed
129 Sets child fields for the current FDF field. @param kids list of FDFField objects representing child fields
130 Sets the field mask value. @param value the value to set, can be List<String>, String, or COSObjectable @throws IOException if an error occurs or unknown type is provided
131 Sets the mask value for the field. @param value the COSBase value to be set as the mask
132 Sets the field flags for a form field. @param ff integer representing field flags
133 Sets the field flags for a form field. @param ff integer representing field flags
134 Sets the field flags for a form field. @param ff integer representing field flags
135 Sets the mask value for the form field. @param f the mask value to set
136 Sets the field flag for form masking. @param ff field flags to be set
137 Sets the mask flag for a form field. @param ff integer representing the mask value
138 Sets the default value of the field. @param rv the default value as a COSString
139 Sets the default appearance stream for the field. @param rv COSStream representing the appearance stream
140 Sets JavaScript code to execute before form submission. @param before JavaScript code string
141 Sets the JavaScript action to be executed after form processing. @param after script to execute afterward
142 Sets JavaScript actions in the FDF document. @param map mapping of action names to PDActionJavaScript objects
143 Sets the list of templates for the FDF page. @param templates List of FDFTemplate objects to be set
144 Sets form fields in the FDF template. @param fields list of FDFField objects to be set
145 Sets up character width arrays for CID font embedding. @param cidToGid mapping of CID to GID @throws IOException if an I/O error occurs
146 Constructs a new PDFont instance. Initializes the font dictionary and sets its type to "Font".
147 Initializes a new PDFontDescriptor with a font descriptor dictionary. Sets the "Type" entry to "FontDescriptor".
148 Sets the font name in the PDFontDescriptor. @param fontName the name of the font to set
149 Sets the font family for the PDFontDescriptor. @param fontFamily name of the font family to be set
150 Sets the font stretch attribute. @param fontStretch string representing the font stretch value
151 Sets the font bounding box in the font descriptor. @param rect rectangle defining the font's bounding box
152 Sets the character set for the font descriptor. @param charSet character set string to be set
153 Sets the gamma correction value. @param value the gamma value to be set
154 Sets the gamma values for color transformation. @param gamma PDGamma object containing gamma values
155 Sets the transformation matrix for color space. @param matrix 3x3 transformation matrix to be applied
156 Sets the colorants for a DeviceN color space. @param colorants map of colorant names to PDColorSpace objects
157 Initializes a new transparency group with default settings. Sets up the COSDictionary for managing transparency attributes.
158 Sets mask filters for the image. @param filters list of filter names to apply
159 Initializes a new PDOptionalContentMembershipDictionary. Sets the dictionary type to OCMD, indicating optional content membership.
160 Sets the visibility policy for optional content. @param visibilityPolicy COSName representing the visibility policy
161 Applies a transformation mask to the pattern. @param transform the AffineTransform to apply
162 Sets or removes the bounding box for masking. @param bbox the bounding rectangle or null to remove it
163 Sets the background color for shading. @param newBackground COSArray representing the new background colors
164 Sets the bounding box for the shading. @param newBBox new bounding box rectangle
165 Sets the mask for the shading based on the provided color space. @param colorSpace the color space to be used for masking
166 Updates shading functions and resets internal state. @param newFunctions array of COSBase representing new functions
167 Applies a mask transformation to the shading. @param transform the affine transformation matrix to apply
168 Sets the domain for the shading. @param newDomain array representing the new domain values
169 Sets the extend values for the shading. @param newExtend array of COSBase values representing extend settings
170 Sets the shading domain and updates PDF dictionary. @param newDomain array representing the new domain values
171 Sets mask coordinates and updates dictionary. @param newCoords array of coordinate values
172 Sets decode values for shading. @param decodeValues array of decode values to be set
173 Initializes a new PDExtendedGraphicsState. Sets up the dictionary with the type and initializes the cache to null.
174 Sets the blend mode for the graphics state. @param bm the new blend mode to apply
175 Sets or removes mask property in graphics state. @param key the COSName key for the mask property @param value the Float value to set; null to remove the key
176 Sets the mask transfer function. @param transfer the COSBase object representing the transfer function
177 Sets the mask transfer function. @param transfer2 COSBase object representing the transfer function
178 Sets the sequence of subsequent actions. @param next list of PDAction objects representing next actions
179 Sets the 'T' item in the action dictionary. @param t the COSBase value to be set for the 'T' item
180 Sets the visibility flag for the action. @param h boolean indicating whether to hide elements
181 Masks form fields by setting them in the action. @param array COSArray containing field names to mask
182 Sets the sound stream for the action. @param sound COSStream object representing the audio content
183 Masks specified form fields. @param array COSArray containing field names to be masked
184 Sets or updates the mask dictionary in the action. @param d COSBase object representing the mask data
185 Sets mask value in PDF action. @param b COSBase object representing the mask value
186 Sets the relationship type for the target directory. @param relationship must be either COSName.P or COSName.C @throws IllegalArgumentException if relationship is neither P nor C
187 Initializes a new PDF annotation. Sets up the basic structure with a type of "Annot".
188 Sets the annotation's bounding rectangle. @param rectangle PDRectangle defining new bounds
189 Sets the border style of the annotation. @param borderArray array defining the border appearance
190 Sets rectangle margin differences for caret annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
191 Sets rectangle differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
192 Sets the callout line for the annotation. @param callout array defining the callout line points
193 Sets the ink data for an annotation. @param inkList 2D array representing ink paths
194 Sets line coordinates. @param l array of float values representing line points
195 Sets the quadrilateral points defining the link's bounds. @param quadPoints array of 8 floats representing the quad points
196 Sets the resource content (RC) of the annotation. @param rc the resource content string to be set
197 Sets the vertices of the polygon annotation. @param points array of coordinates defining the polygon's vertices
198 Sets polyline vertices. @param points array of vertex coordinates
199 Sets the parent annotation for a popup. @param annot the markup annotation to associate as parent
200 Sets rectangle differences for annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
201 Sets quad points defining text annotation area. @param quadPoints array of coordinates for the annotation area
202 Initializes a new appearance dictionary for PDF annotations. Sets up the required 'N' (normal) appearance entry with an empty dictionary.
203 Sets the dash pattern for the border style. @param dashArray array representing the dash pattern
204 Initializes a new PDSeedValue instance. Sets up the seed value dictionary with type 'SV'.
205 Sets the digital signature filter. @param filter the COSName representing the filter type
206 Sets the sub-filter for digital signature. @param subfilter list of string identifiers for sub-filters
207 Validates and sets the digest methods for digital signatures. @param digestMethod list of digest method names to be set @throws IllegalArgumentException if any specified digest method is not allowed
208 Sets the list of reasons for masking digital signature attributes. @param reasons list of reason strings
209 Sets MDP settings in the seed value dictionary. @param mdp PDSeedValueMDP object containing MDP configuration
210 Sets timestamp information in the seed value. @param timestamp PDSeedValueTimeStamp object containing timestamp data
211 Sets legal attestations in the digital signature. @param legalAttestation list of legal attestation strings
212 Initializes a new PDSeedValueCertificate with a COSDictionary. Sets the type to SV_CERT and marks it as direct.
213 Sets certificate subject list in COSDictionary. @param subjects list of byte arrays representing subjects
214 Sets the subject distinguished names in the certificate. @param subjectDN list of maps containing key-value pairs for each DN entry
215 Sets key usage extensions in the certificate. @param keyUsageExtensions list of key usage extension strings
216 Sets the issuer list in the certificate. @param issuers list of issuer byte arrays
217 Sets OID values in the certificate dictionary. @param oidByteStrings list of byte arrays representing OIDs
218 Initializes a new digital signature. Sets up the dictionary with type as 'Sig'.
219 Sets the signature type in the dictionary. @param type the COSName representing the signature type
220 Sets the mask filter in the signature's dictionary. @param filter COSName representing the filter type
221 Sets the subfilter type for the digital signature. @param subfilter the COSName representing the subfilter type
222 Sets the byte range mask for a digital signature. @param range array of 4 integers defining the byte range
223 Sets the contents of the digital signature using byte array. @param bytes raw byte data for the signature content
224 Sets the text color for an outline item. @param textColor Color object representing the desired text color
225 Initializes a new PDAcroForm associated with a PDF document. @param doc the PDF document to which this form belongs
226 Sets form fields in the PDF document. @param fields list of PDField objects representing form fields
227 Masks specified form fields by setting their appearance characteristics. @param fields list of PDField objects to be masked
228 Initializes a new PDButton instance. @param acroForm the AcroForm containing this button
229 Sets or removes optional values for the button. @param values list of string values to be set as options
230 Initializes a new PDChoice instance. @param acroForm the AcroForm containing this choice field
231 Sets the child fields for a non-terminal PDF form field. @param children list of child PDField objects
232 Sets the mask value of the non-terminal field. @param object the COSBase object representing the mask value
233 Sets the default value of the field. @param value the default value to be set
234 Constructs a new PDSignatureField instance. @param acroForm the AcroForm containing this field
235 Constructs a new PDTextField instance. @param acroForm the AcroForm containing this field
236 Sets or removes the default style string for text fields. @param defaultStyleString the style string to set or null to remove
237 Sets or removes the rich text value for a PDF variable text field. @param richTextValue the rich text content to set, or null to remove it
238 Sets the coordinate system origin. @param coordSystemOrigin array representing the new origin coordinates
239 Initializes a new PDThread instance. Sets up the thread dictionary with type 'Thread'.
240 Sets the mask direction for the transition. @param direction the direction of the transition
241 Sets the transition duration. @param duration the duration of the transition in seconds
242 Sets mask scale for transition. @param scale the scaling factor for the mask
243 Sets mask opacity. @param opaque true if mask is opaque, false otherwise
244 Adds all elements from a collection to the COSArrayList. @param c collection of COS objects to be added @return true if this list changed as a result of the call @throws UnsupportedOperationException if adding to a filtered List is not permitted
245 Sets the font color for form fields based on operands. @param operands list of COSBase objects representing color data @throws IOException if invalid operands are provided
246 Inserts elements from a collection at a specified index. @param index position where the elements are to be inserted @param c collection containing elements to be added @return true if this list changed as a result of the call
247 Updates PDF objects in the array. @param objectList list of COSBase objects to update
248 Converts COSArray to float array. @return float array of numbers from COSArray or zeros if not a number
249 Converts COSArray to a list of Floats. @return List of Floats representing the numeric values in the array
250 Converts COSArray elements to integers. @return List of Integer objects representing the array elements or null if not a number
251 Updates parent and structure type for dictionaries in the array. @param kArray array of COSBase objects @param newParent new parent dictionary @param newStructureType optional new structure type
252 Retrieves the minimum value of the range. @return minimum value as a float
253 Retrieves maximum value from the specified range. @param startingIndex index of the range to access @return maximum float value of the range
254 Retrieves and initializes a PDGamma object from the array at the specified index. @param index position of the color value in the PDF document @return PDGamma object or null if not applicable
255 Retrieves and decodes the masked value of an FDF option. @return decoded string representation of the masked option
256 Retrieves and decodes the masked string value of an FDF option. @return decoded string or null if not found
257 Converts a COSBase object to a BlendMode. @param cosBlendMode COSBase object representing the blend mode @return corresponding BlendMode or NORMAL if not found
258 Retrieves colorant names as strings. @return List of colorant name strings from COSArray
259 Retrieves or initializes the alternate color space. @return PDColorSpace instance representing the alternate color space @throws IOException if an error occurs during initialization
260 Retrieves and returns the name of the colorant. @return The string representation of the colorant name
261 Converts a COSBase object to a PDDestination. Handles different types of destinations including named and page fit destinations. @param base the COSBase object representing the destination @return PDDestination object or throws IOException if conversion fails
262 Retrieves the target PDF page. @return PDPage object or null if not found
263 Retrieves the target page number from a PDF destination. @return page number or -1 if not found
264 Retrieves the mask value from a PDF destination. @return mask value as float, or -1 if not found
265 Initializes a Matrix from a COSArray. @param array COSArray containing transformation parameters
266 Retrieves or creates a COSName instance and fetches associated value. @param key name string to process @return dereferenced COSBase object or null if not found
267 Retrieves value by primary or secondary key. @param firstKey primary key to search @param secondKey secondary key to search if primary is not found @return COSBase object or null if both keys are missing
268 Retrieves a COSName value for a given key. @param key the key to look up in the dictionary @return COSName object or null if not found
269 Retrieves and returns a COSDictionary associated with the given key. @param key the key whose associated value is to be retrieved @return COSDictionary object or null if not found or not a COSDictionary
270 Retrieves a COSStream object by key. @param key the key to search for in the dictionary @return COSStream object or null if not found or not a COSStream
271 Retrieves and casts a COSArray associated with the specified key. @param key the key to fetch the COSArray for @return COSArray if found and is an instance of COSArray, otherwise null
272 Retrieves a COSName value by key; returns default if not found. @param key the key whose associated COSName is to be retrieved @param defaultValue the default COSName to return if key is not found @return the retrieved COSName or defaultValue
273 Retrieves a string value associated with a key, handling different types. @param key the key to look up in the dictionary @return the decoded string value or null if not found
274 Retrieves and decodes string value by key. @param key the key to look up in the dictionary @return decoded string or null if not found or not a COSString
275 Converts a COSName key to a Calendar object. @param key the COSName key to retrieve and convert @return Calendar instance or null if conversion fails
276 Retrieves a numeric value for a given key with a default. @param key the key to look up in the dictionary @param defaultValue the default value if the key is not found or not a number @return the numeric value associated with the key, or default if not applicable
277 Retrieves a float value associated with a key. @param key the key to look up in the dictionary @param defaultValue default float value if key not found or not a COSNumber @return float value from dictionary or default value
278 Modifies PDF page to include mask operations. @param page PDPage object representing the target page @throws IOException if I/O error occurs during stream manipulation
279 Retrieves content streams from the PDF page. @return Iterator over PDStream objects representing page content
280 Determines if the page has content. @return true if page contains content, false otherwise
281 Converts a COSDictionary to a COSDictionaryMap with standard Java objects. @param map the input COSDictionary to be converted @return COSDictionaryMap containing key-value pairs from the dictionary @throws IOException if an unknown object type is encountered
282 Updates or removes the structure element associated with an attribute. @param attributeObject the attribute object to process
283 Masks and retrieves class names from PDF structure. @return Revisions object containing masked class names and their revision numbers
284 Updates PDF structure by masking elements based on class name. @param className the class name to apply masking
285 Adds or updates the 'K' key with a given COSBase object. Handles existing arrays and null values appropriately.
286 Updates a child reference in the structure node. @param newKid new COSBase representing the updated child @param refKid reference to the old child (COSObjectable or COSBase)
287 Removes a child object from the structure node. @param object the child object to be removed @return true if the object was successfully removed, false otherwise
288 Retrieves the mask value from the dictionary. @return COSBase object representing the mask or null if not found
289 Retrieves the value associated with the "V" key in the user property dictionary. @return COSBase object or null if not found
290 Checks if metadata encryption is enabled. @return true if metadata encryption is enabled, false otherwise
291 Masks the owner encryption key. @return Immutable copy of the masked byte array or null if key is not present @throws IOException if an I/O error occurs during processing
292 Masks the user encryption key. @return Immutable copy of the masked byte array or null if not found
293 Masks and retrieves the permissions associated with a PDF document. @return Immutable byte array of masked permissions or null if none found
294 Retrieves the page number of the annotation. @return page number as Integer or null if not found
295 Retrieves and validates the value of a form field. @return COSBase object representing the field's value, or null if not found @throws IOException if the field value is of an unknown type
296 Retrieves the function mask value for the field. @return Integer representing the function mask or null if not found
297 Retrieves the function mask value for the field. @return Integer representing the function mask or null if not set
298 Retrieves the color fill flag value of the field. @return Integer representing the color fill flag or null if not set
299 Retrieves the function mask value of the field. @return Integer representing the function mask or null if not set
300 Retrieves the field mask value. @return Integer representing the field mask or null if not found
301 Retrieves the color flag value for the field. @return Integer representing the color flag or null if not found
302 Determines the default width for CID font. @return default width value or 1000 if not set
303 Retrieves the color space associated with the device. @return PDColorSpace instance or null if not found @throws IOException if there is an issue creating the color space
304 Retrieves or creates the color space for a mask. @param resources PDF resources for resource management @return PDColorSpace instance for the mask @throws IOException if an error occurs during creation
305 Initializes a PDOptionalContentGroup from a COSDictionary. @param dict the dictionary representing an optional content group @throws IllegalArgumentException if the dictionary does not represent an OCG
306 Initializes a PDOptionalContentMembershipDictionary from a COSDictionary. Validates that the dictionary type matches COSName.OCMD. @param dict the COSDictionary to initialize with @throws IllegalArgumentException if the dictionary is not of type OCMD
307 Retrieves the overprint mode setting from the graphics state dictionary. @return Integer representing the overprint mode, or null if not set
308 Retrieves and creates a soft mask from the graphics state dictionary. @return PDSoftMask object or null if not found
309 Retrieves a float value from the dictionary for a given key. @param key the COSName key to look up in the dictionary @return the Float value associated with the key, or null if not found
310 Retrieves the mask value from the dictionary. @return COSBase object or null if conditions are not met
311 Retrieves the mask value from the dictionary. @return COSBase object or null if conditions are not met
312 Retrieves or initializes the backdrop color for the soft mask. @return COSArray representing the backdrop color, may be null if not set
313 Determines the window mode for opening a PDF destination. @return OpenMode indicating how to open the destination (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
314 Retrieves the 'T' item from the action dictionary. @return COSBase object associated with 'T' or null if not found
315 Determines the open mode for launching a file. @return OpenMode indicating how to open the file (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
316 Determines the window mode for opening a link. @return OpenMode indicating how to open the linked content
317 Retrieves named destination from dictionary. @return PDNamedDestination object or null if not found
318 Initializes a new PDAnnotation instance. @param dict the COSDictionary containing annotation data
319 Masks the signature content bytes. @return Immutable copy of the content bytes or empty array if not applicable
320 Retrieves and initializes XFA resource from the form's dictionary. @return PDXFAResource object or null if not found
321 Retrieves options for choice field. @return List of option strings or empty list if none
322 Retrieves options for a choice field. @return List of option strings or empty list if none found
323 Retrieves and processes the value associated with a given name. @param name key for the value to be retrieved @return List of string representations of the value or an empty list if not applicable
324 Retrieves a COSBase object by key from the field's dictionary or parent. @param key the key to search for in the dictionary @return COSBase object if found, otherwise null
325 Retrieves the mask value from the field dictionary. @return COSBase object representing the mask or null if not found
326 Retrieves the mask value of the field. @return mask value as a string or empty if not set
327 Retrieves default value dictionary object. @return COSBase representing default value or null if not found
328 Converts COSBase object to string representation. @return string representation of the COSBase object or error message if conversion fails
329 Processes and updates indirect objects in a PDF dictionary. @param indirectObjects collection of COSObjectKeys to manage
330 Updates PDF document with imported page's XRef object numbers. @param importedPage the page to import into the document
331 Manages closing resources for visual signatures and PDF source. Ensures proper resource management by closing the visual signature and PDF source.
332 Writes a PDF object to the output stream. @param key unique identifier for the COSBase object @param obj the COSBase object to write
333 Writes a PDF object reference to the output stream. @param obj PDF object to reference
334 Retrieves the COSObjectKey for a given COSBase object from the pool. @param object the COSBase object to find the key for @return COSObjectKey associated with the object or null if not found
335 Assigns a unique COSObjectKey to a COSBase object. @param key proposed or existing COSObjectKey @param object the COSBase object to assign the key to @return the assigned COSObjectKey or null if invalid
336 Checks if a PDF object is managed by the pool. @param object the COSBase object to check @return true if the object is in the pool, false otherwise
337 Generates a list of COSWriterObjectStreams for PDF compression. @return List of COSWriterObjectStream objects
338 Masks and formats a list of lines with specified alignment and spacing. @param lines List<Line> to be formatted @param isFirstParagraph boolean indicating if it's the first paragraph @throws IOException if an I/O error occurs during processing
339 Masks a section of a circle with curves. @param angleCur current angle in radians @param r radius of the circle @param alpha adjustment angle for masking @param cx center x-coordinate @param cy center y-coordinate @throws IOException if an I/O error occurs
340 Masks an ellipse segment with curves. @param angleCur current angle in radians @param r radius of the ellipse @return array of points defining the masked curve @throws IOException if an I/O error occurs
341 Masks a section of an ellipse with curves. @param startAng starting angle in radians @param endAng ending angle in radians @param rx radius along x-axis @param ry radius along y-axis @param cx center x-coordinate @param cy center y-coordinate @param out list to store points or null for direct drawing @param addMoveTo flag to add initial move-to command @throws IOException if an I/O error occurs
342 Constructs a PDICCBased object with an associated PDF document. Initializes the ICC color space array and stream. @param doc the PDDocument to which this ICC color space belongs
343 Initializes a PDPattern with specified resources and color space. @param resources PDF resources associated with the pattern @param colorSpace underlying color space for the pattern
344 Sets the list of optional content groups. @param ocgs list of PDPropertyList objects representing OCGs
345 Updates X-axis number format settings in the PDF document. @param changeXs array of PDNumberFormatDictionary objects representing new formats
346 Updates Y-axis measurement format in the PDF document. @param changeYs array of PDNumberFormatDictionary objects representing new formats
347 Sets distances in the measurement dictionary. @param distances array of PDNumberFormatDictionary objects representing distances
348 Sets measurement areas in the PDF document. @param areas array of PDNumberFormatDictionary representing measurement areas
349 Sets mask angles in the PDF dictionary. @param angles array of PDNumberFormatDictionary objects representing angles
350 Sets line slope masks in the dictionary. @param lineSloaps array of PDNumberFormatDictionary objects representing line slopes
351 Ensures COSArray has specified size and adds null object. @param size desired size of the array
352 Parses and returns a COSBase object from the PDF source. Handles various types including dictionaries, strings, arrays, names, booleans, numbers, and nulls. @return parsed COSBase object or null if parsing fails @throws IOException if an I/O error occurs during parsing
353 Sets decode parameters for the PDF stream. @param decodeParams list of decode parameters
354 Sets decoding parameters for the PDF stream. @param decodeParams list of decoding parameters
355 Sets child nodes for the structure. @param kids list of child objects to be added as children
356 Sets field options from a list of objects. @param options list of option values to set
357 Creates a PDRange object based on the ICC profile. @param n index for the PDRange constructor @return PDRange instance initialized with range data or default if conditions not met
358 Populates CID font with width data. @param cidFont the COSDictionary representing the CID font @throws IOException if an I/O error occurs
359 Sets line dash pattern in graphics state. @param dashPattern the dash pattern to apply
360 Sets the mask color for guidelines. @param color PDColor object representing the mask color
361 Sets mask color for annotation. @param c PDColor object representing the mask color
362 Sets the interior color of the line annotation. @param ic PDColor object representing the interior color
363 Sets interior color for the polygon annotation. @param ic PDColor object representing the new interior color
364 Sets interior color of the polyline annotation. @param ic PDColor object representing the new interior color
365 Sets interior color of annotation. @param ic PDColor object representing the new color
366 Sets border color for annotation. @param c PDColor object representing the border color
367 Sets background color for annotation. @param c PDColor object representing the background color
368 Sets text color mask. @param textColor PDColor object representing text color
369 Creates a masked PDImageXObject from an input JPEG stream. @param document PDF document to add the image to @param stream source of JPEG image data @return PDImageXObject with applied mask if necessary @throws IOException if an I/O error occurs during processing
370 Sets the first font setting to the specified PDFont. @param font PDFont object to be set as the first font setting
371 Sets the tint transformation function. @param tint PDFunction representing the tint transformation
372 Sets the tint transformation function. @param tint PDFunction representing the tint transformation
373 Sets the first element of the array to the given PDF page. @param page PDPage object representing the target page
374 Creates and returns a new PDRectangle with mask values set. @return A PDRectangle instance with updated mask values
375 Sets the first color to the specified PDGamma object. @param colour PDGamma object representing the color
376 Sets a color at index 1. @param colour PDGamma object representing the color
377 Sets color at index 2. @param colour PDGamma object representing the color
378 Sets the specified color at index 3. @param colour PDGamma object representing the color to set
379 Masks or decrypts PDF objects based on type. @param obj PDF object to process @param objNum unique object identifier @param genNum generation number of the object @return processed COSBase object @throws IOException if an I/O error occurs
380 Adds or updates a key-value pair in the dictionary. @param key the name string of the key to be added or updated @param value the COSObjectable value associated with the key
381 Sets or updates the AcroForm in the document catalog. @param acroForm the PDAcroForm object to set
382 Sets viewer preferences in the PDF document. @param prefs PDViewerPreferences object containing viewer settings
383 Sets the document outline. @param outlines PDDocumentOutline object representing the document structure
384 Sets or updates the metadata in the PDF document. @param meta PDMetadata object containing the metadata to be set
385 Sets the open action for the document. @param action the action to be performed when the document opens
386 Sets additional actions for the document catalog. @param actions PDDocumentCatalogAdditionalActions object containing actions to set
387 Sets document name dictionary. @param names PDDocumentNameDictionary containing document names
388 Sets or updates the document's mark information. @param markInfo PDMarkInfo object containing marking properties
389 Sets URI dictionary in document catalog. @param uri PDURIDictionary containing URI information
390 Sets the structure tree root in the document catalog. @param treeRoot PDStructureTreeRoot object representing the structure tree
391 Sets page labels in the PDF document. @param labels PDPageLabels object containing page label configurations
392 Sets the destination names tree in the document. @param dests PDDestinationNameTreeNode containing destinations
393 Sets the embedded files node in the document. @param ef PDEmbeddedFilesNameTreeNode representing embedded files
394 Sets JavaScript names in the document's name dictionary. @param js PDJavascriptNameTreeNode containing JavaScript names
395 Constructs a new PDF page with specified dimensions. @param mediaBox the size and orientation of the page
396 Sets the page's resources. @param resources PDResources object containing page resources
397 Sets the media box for the PDF page. @param mediaBox the new media box dimensions or null to remove it
398 Sets or removes the bleed box for the page. @param bleedBox PDRectangle representing the bleed box or null to remove it
399 Sets or removes the trim box for this PDF page. @param trimBox the new trim box rectangle or null to remove it
400 Sets or removes the art box for this page. @param artBox the new art box rectangle or null to remove it
401 Sets the content stream of the PDF page. @param contents PDStream containing the page's content
402 Sets metadata for the PDF page. @param meta PDMetadata object containing the metadata to be set
403 Sets additional actions for the page. @param actions PDPageAdditionalActions object containing actions to be set
404 Sets the transition effect for the page. @param transition PDTransition object representing the transition effect
405 Sets transition effect and duration for the page. @param transition PDTransition object defining the transition effect @param duration duration of the transition in seconds
406 Sets the associated page for marked content. @param page PDPage object representing the page
407 Sets an annotation in the PDF object reference. @param annotation PDAnnotation to be added or updated
408 Sets an XObject in the PDF dictionary under the OBJ key. @param xobject the XObject to be set
409 Sets the page reference in the PDF object. @param page PDPage to be referenced
410 Masks a structure node by setting its 'P' attribute. @param structureNode the PDStructureNode to be masked
411 Sets the PDF page as an item in the structure. @param page PDPage to be associated with the structure element
412 Masks attributes based on revision numbers. @param attributes list of attribute objects with revisions
413 Sets the ID tree node in the structure dictionary. @param idTree PDNameTreeNode containing structure elements
414 Sets the parent tree node. @param parentTree the PDNumberTreeNode representing the parent structure
415 Sets the annotation's bounding rectangle. @param rectangle PDRectangle defining the annotation's bounds
416 Sets the border style of the annotation. @param bs PDBorderStyleDictionary representing the border style
417 Sets border effect dictionary. @param be PDBorderEffectDictionary object to set as border effect
418 Sets the annotation fringe dimensions. @param fringe PDRectangle representing the new fringe size
419 Sets the rectangle defining the fringe of the annotation. @param fringe PDRectangle object representing the fringe dimensions
420 Sets the rectangle defining the annotation's visual mask. @param fringe PDRectangle representing the mask area
421 Sets the fringe rectangle of the annotation. @param fringe PDRectangle representing the fringe dimensions
422 Sets the FDF dictionary in the catalog. @param fdf the FDFDictionary to be set
423 Masks a digital signature in the FDF catalog. @param sig PDSignature object to be masked
424 Sets file specification in FDF. @param fs PDFileSpecification to be set
425 Sets JavaScript for the FDF document. @param js FDFJavaScript object containing script details
426 Sets the catalog in the FDF document's trailer. @param cat FDFCatalog to be set as the root
427 Sets the appearance dictionary for the field. @param ap PDAppearanceDictionary object representing the appearance settings
428 Sets the appearance reference for a field. @param ref FDFNamedPageReference to set as appearance reference
429 Sets icon fit settings for the form field. @param fit FDFIconFit object defining how the icon should be scaled and positioned
430 Sets an action associated with the field. @param a PDAction object representing the action to be set
431 Sets additional actions for the field. @param aa PDAdditionalActions object containing actions to be set
432 Sets mask fitting configuration. @param space PDRange defining the space allocation
433 Sets file specification for a named page reference. @param fs file specification to be set
434 Sets or updates the page's metadata. @param info FDFPageInfo object containing metadata details
435 Sets the named page reference in the template. @param tRef FDFNamedPageReference object representing the page reference
436 Sets the font file stream in the dictionary. @param type1Stream PDStream containing the font data
437 Sets the TTF stream in the font descriptor. @param ttfStream the TrueType font stream to be set
438 Sets the font file stream for the font descriptor. @param stream PDStream containing the font file data
439 Sets CIDSet in font descriptor. @param stream PDStream containing CIDSet data
440 Sets the white point for the color space. @param whitepoint PDTristimulus representing the new white point
441 Sets the black point for the color space. @param blackpoint PDTristimulus representing the black point coordinates
442 Sets the extended graphics state for masking. @param extendedGraphicsState the graphics state to apply
443 Sets the shading resource and updates the dictionary. @param shadingResources PDShading object representing the shading pattern
444 Sets the resources for masking. @param resources PDResources object containing mask resources
445 Sets a new shading function. @param newFunction the new PDFunction to be set
446 Sets font settings in the graphics state. @param fs PDFontSetting object containing font configuration
447 Sets the destination for a GoToE action. Validates and processes the destination array. @param d PDDestination object representing the target destination
448 Sets file specification for embedded action. @param fs file specification to be set
449 Sets the target directory for an action. @param targetDirectory the destination to be set
450 Sets the destination for a navigation action. Validates and updates the destination if it's a page dictionary. @param d PDDestination object to be set as the destination
451 Sets file specification for an action. @param fs file specification to be set
452 Sets file specification for launch action. @param fs PDFileSpecification object representing the file to be launched
453 Sets Windows-specific launch parameters. @param win PDWindowsLaunchParams object containing window settings
454 Sets the file specification for the remote goto action. @param fs the file specification to be set
455 Sets file specification for form submission. @param fs file specification to be set
456 Sets file specification for an action. @param fs PDFileSpecification object representing the file to be set
457 Sets a mask action in the PDF document. @param action PDAction to be set as the mask action
458 Sets an action for masking events. @param e PDAction representing the mask event action
459 Sets a mask action for PDF annotations. @param x PDAction object representing the mask action
460 Sets the mask action for the annotation. @param d the PDAction to be set as the mask action
461 Sets the action to be performed on user click. @param u PDAction object representing the action
462 Sets an action for mask interaction. @param fo PDAction representing the mask action
463 Sets the mask action for the annotation. @param bl PDAction object representing the mask action
464 Sets an action associated with a mask. @param po PDAction object representing the action to be set
465 Sets an action for mask operations. @param pc PDAction object representing the mask operation
466 Sets a mask action for the annotation. @param pv PDAction object representing the mask action
467 Sets an action for mask interaction. @param pi PDAction object representing the mask action
468 Sets a mask action in the PDF document catalog. @param wc PDAction object representing the mask action
469 Sets a workspace action. @param ws PDAction representing the workspace action
470 Sets the document-specific action for the PDF catalog. @param ds PDAction object representing the document-specific action
471 Sets the WP action in the document catalog. @param wp PDAction object representing the action to be set
472 Sets a mask action in the PDF catalog. @param dp PDAction object representing the mask action
473 Sets the mask action for a form field. @param k PDAction object representing the mask action
474 Sets an action for the 'F' key in the form field's actions dictionary. @param f PDAction to be set for the 'F' key
475 Sets the mask action for the form field. @param v PDAction representing the mask action to be set
476 Sets an additional action associated with a form field. @param c PDAction to be set
477 Sets or updates the mask action for the PDF page. @param o PDAction to be set as the mask action
478 Sets or updates the mask action for the PDF page. @param c PDAction object representing the mask action to be set
479 Sets the target directory in the PDF dictionary. @param targetDirectory PDTargetDirectory object to be set
480 Sets the named destination for the target directory. @param dest PDNamedDestination object or null to remove the entry
481 Sets the appearance dictionary for this annotation. @param appearance PDAppearanceDictionary object representing the annotation's appearance
482 Sets the optional content properties. @param oc PDPropertyList containing optional content settings
483 Sets the annotation's P entry to the specified page. @param page PDPage object representing the target page
484 Sets the file specification for the annotation. @param file PDFileSpecification object representing the attachment file
485 Sets the border effect dictionary of the annotation. @param be the border effect dictionary to apply
486 Sets the rectangle difference for the annotation. @param rd PDRectangle representing the rectangle difference
487 Sets an action for the annotation. @param action PDAction to be associated with the annotation
488 Sets border style for the annotation. @param bs Border style dictionary to be applied
489 Sets the destination for this link annotation. @param dest PDDestination object representing the target location
490 Sets URI action for this annotation. @param pa PDActionURI object representing the URI action
491 Sets the popup annotation for this markup. @param popup the PDAnnotationPopup to associate with this annotation
492 Sets the "IRT" (In Reply To) annotation. @param irt the annotation this one is a reply to
493 Sets external data dictionary. @param externalData the external data to associate with the annotation
494 Sets border style of the annotation. @param bs BorderStyleDictionary object defining the border style
495 Sets border effect dictionary. @param be border effect dictionary to apply
496 Sets border effect dictionary for the annotation. @param be border effect dictionary to apply
497 Sets the rectangle difference for the annotation. @param rd PDRectangle representing the new rectangle difference
498 Sets the mask appearance characteristics. @param appearanceCharacteristics dictionary containing mask properties
499 Sets the mask action for the annotation. @param action the PDAction to be set as the mask action
500 Sets additional actions for the annotation. @param actions PDAnnotationAdditionalActions object containing actions to be set
501 Sets the border style dictionary of the annotation. @param bs the border style dictionary to be set
502 Sets the parent field for an annotation. @param field the terminal field to set as parent @throws IllegalArgumentException if field shares dictionary with its widget
503 Sets the normal appearance of an annotation. @param entry PDAppearanceEntry representing the normal state appearance
504 Sets the normal appearance stream. @param ap appearance stream to set
505 Sets the rollover appearance entry. @param entry the PDAppearanceEntry to set as rollover appearance
506 Sets the rollover appearance stream. @param ap the appearance stream for rollover state
507 Sets the mask appearance entry. @param entry the appearance entry to set
508 Sets the appearance stream for the masked state. @param ap the PDAppearanceStream object representing the appearance
509 Sets the digital signature filter. @param filter PDPropBuildDataDict object containing filter details
510 Sets publication security properties in the PDF. @param pubSec PDPropBuildDataDict containing security settings
511 Sets application-specific data in the digital signature properties. @param app PDPropBuildDataDict containing application data
512 Sets the digital signature certificate in the seed value. @param certificate PDSeedValueCertificate object to be set
513 Sets property build in the signature dictionary. @param propBuild PDPropBuild object containing properties
514 Sets the previous sibling for an outline item. @param outlineNode the node to set as the previous sibling
515 Sets the next sibling for an outline node. @param outlineNode the PDOutlineNode to be linked as the next sibling
516 Sets the destination for this outline item. @param dest PDDestination object representing the target location
517 Sets an action for this outline item. @param action the action to be associated with the outline item
518 Sets a mask for a PDF structure element. @param structureElement the PDStructureElement to be masked
519 Sets the first child of an outline node. @param outlineNode the PDOutlineNode to be set as the first child
520 Masks an outline node by setting it as the last item. @param outlineNode the PDOutlineNode to be masked
521 Sets the resources dictionary for form fields. @param dr PDResources object containing form field resources
522 Sets XFA resource in the form's dictionary. @param xfa the XFA resource to be set
523 Sets the signature value for the field. @param value PDSignature object representing the digital signature @throws IOException if an I/O error occurs during processing
524 Sets the default signature value. @param value PDSignature object representing the default signature
525 Sets the seed value for the signature field. @param sv PDSeedValue object representing the seed value
526 Sets additional actions for the form field. @param actions PDFormFieldAdditionalActions object containing actions to be set
527 Sets the mask for child annotation widgets. @param children list of PDAnnotationWidget objects to be masked
528 Sets the bounding box for the viewport. @param rectangle PDRectangle representing the new bounding box
529 Sets the measurement dictionary in the viewport. @param measure PDMeasureDictionary object containing measurement settings
530 Sets document information to the thread. @param info PDDocumentInformation object containing document details
531 Associates a thread with the current bead. @param thread the PDThread to be associated
532 Sets the next bead in the thread. @param next PDThreadBead representing the subsequent bead
533 Sets the previous bead in the thread. @param previous the preceding PDThreadBead object
534 Associates a page with a thread bead. @param page the PDF page to associate
535 Sets a mask rectangle for the bead. @param rect the bounding box defining the mask area
536 Sets the marked status of the PDF element. @param value boolean indicating if the element is marked
537 Sets the UserProperties flag in the dictionary. @param userProps boolean indicating whether to enable user properties
538 Updates the suspect flag in the PDF marking information. @param suspect new suspect status to set
539 Sets whether the action is a map. @param value true if the action is a map, false otherwise
540 Sets the popup visibility state. @param open true to open the popup, false to close it
541 Sets the FD mask in the number format dictionary. @param fd boolean value to set the FD mask
542 Sets the volatile status of the file. @param fileIsVolatile indicates if the file is volatile
543 Sets metadata encryption status. @param encryptMetaData flag to enable or disable metadata encryption
544 Sets the line end style to be capped or not. @param cap true if the line ends are capped, false otherwise
545 Sets mask fitting option. @param value boolean indicating whether to apply mask
546 Sets renaming flag in FDF template. @param value boolean indicating whether renaming is enabled
547 Sets the anti-aliasing property in the shading dictionary. @param antiAlias flag to enable or disable anti-aliasing
548 Sets the overprint mode. @param op boolean indicating whether to enable or disable overprint
549 Sets the overprint mode in the graphics state. @param op boolean value to enable or disable overprint
550 Sets the soft mask attribute in the graphics state. @param sa soft mask value (true or false)
551 Sets the Alpha Source flag. @param alpha true to enable alpha source, false otherwise
552 Sets the mask flag in the graphics state. @param tk boolean value indicating the mask setting
553 Sets the window behavior for opening linked content. @param value specifies how to open the destination (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
554 Sets the window behavior for launching external content. @param value OpenMode specifying how to open the content
555 Sets the window behavior for remote navigation. @param value OpenMode specifying how to open the linked content
556 Sets whether the sound action is synchronous. @param synchronous true if the sound should play synchronously
557 Sets whether the sound should repeat. @param repeat true to enable repetition, false otherwise
558 Sets whether sound should be mixed with other audio. @param mix true to mix sounds, false otherwise
559 Sets the line end style to be rounded or squared. @param cap true for rounded ends, false for squared ends
560 Sets the visibility of the text annotation. @param open flag indicating if the annotation is visible
561 Sets the pre-release flag in the digital signature properties. @param preRelease boolean indicating if it's a pre-release version
562 Sets whether to suppress warnings for non-embedded fonts. @param noEmbedFontWarning flag to disable embedding font warning
563 Sets the trusted mode flag in the digital signature properties. @param trustedMode boolean indicating if the document is in trusted mode
564 Sets the NEED_APPEARANCES flag in the dictionary. @param value boolean indicating whether appearances are needed
565 Toggles toolbar visibility. @param value true to hide toolbar, false to show
566 Toggles menu bar visibility in PDF viewer preferences. @param value true to hide the menu bar, false to show it
567 Toggles window UI visibility. @param value true to hide, false to show
568 Sets whether to fit PDF window to page. @param value true to fit window, false otherwise
569 Sets center window preference. @param value true to center window on opening
570 Sets whether to display the document title in the viewer. @param value true to display, false otherwise
571 Parses appearance XML to create a COSDictionary. @param appearanceXML XML element defining the appearance @return COSDictionary with parsed data or empty if not applicable @throws IOException if I/O operations fail
572 Sets a mask in the dictionary using a string key and value. @param key the key to set in the dictionary @param value the string value to convert to COSName and set as mask
573 Sets the page mode of the PDF document. @param mode desired PageMode to apply
574 Sets the page layout of the PDF document. @param layout desired page layout configuration
575 Sets the PDF version in the catalog. @param version the version string to set
576 Sets the trapped status of the PDF document. @param value the trapped status ("True", "False", or "Unknown")
577 Sets or removes page label style. @param style the new style to apply or null to remove it
578 Initializes a new PDTypedDictionaryWrapper with a specified type. @param type the type name for the PDF object
579 Sets mask for attribute owner. @param owner the owner of the attribute
580 Initializes a new PDMarkedContentReference with a COSDictionary. Sets the dictionary type to "MarkedContent".
581 Initializes a new PDF object reference. Constructs a COSDictionary and sets its type to "ObjRef".
582 Sets a mask for a given structure type. @param structureType the type of structure to set in the dictionary
583 Sets a mask for class names with revision numbers. @param classNames collection of class names and their revisions
584 Initializes a PDStructureNode with a specified type. @param type the type of structure node to create
585 Sets the guideline style in the PDF document. @param style the style to be applied
586 Sets the encryption subfilter. @param subfilter the encryption subfilter to set
587 Sets the annotation's intent. @param intent purpose of the annotation (e.g., "Widget")
588 Sets the mask for the annotation's style. @param style the style string to be set
589 Sets the mask for the annotation's icon. @param icon the icon name to set as mask
590 Sets the document version in the FDF catalog. @param version the version string to set
591 Sets the encoding mask in the FDF document. @param encoding the encoding type to set
592 Sets mask option for icon fitting. @param option mask configuration string
593 Sets the scaling mask for an icon. @param scale scaling option as string
594 Initializes a new PDF pattern with a type of "Pattern". Sets up the internal dictionary for managing pattern properties.
595 Sets the action type in the COSDictionary. @param type the action type to set
596 Sets a mask for the "S" key in the action dictionary. @param s the string value to set as mask
597 Sets the subtype mask for an annotation. @param subType the subtype to set in the dictionary
598 Sets the annotation appearance state. @param as appearance state string
599 Sets mask for annotation using given name. @param name string value to set as mask
600 Sets the line ending style for the annotation. @param style the line ending style to apply
601 Sets the caption positioning for the line annotation. @param captionPositioning string indicating the position of the caption
602 Sets link annotation mask with specified mode. @param mode the mask mode to apply
603 Sets the 'RT' mask for the annotation with the given string value. @param rt the string value to set as the 'RT' mask
604 Sets an item mask with the given string. @param it the string value for the mask item
605 Sets the name for a rubber stamp annotation. @param name the name to assign to the annotation
606 Sets a mask for a given key with string value in the annotation. @param name the string value to be used as the mask
607 Sets the highlight mode for the annotation. @param highlightingMode valid modes: 'N', 'I', 'O', 'P', 'T' @throws IllegalArgumentException if invalid mode is provided
608 Sets a mask for border style using provided string. @param s the string value to set as mask
609 Initializes an external data dictionary. Sets up a COSDictionary with type "ExData".
610 Sets the subtype mask in the external data dictionary. @param subtype the subtype value to set
611 Sets the digital signature name. @param name the name to set in the dictionary
612 Sets URL type mask in the PDF certificate. @param urlType the URL type to set as mask
613 Initializes a new PDDocumentOutline with type set to "Outlines".
614 Initializes a new PDDocumentOutline from an existing COSDictionary. Sets the outline type in the dictionary. @param dic the PDF dictionary representing the outline structure
615 Initializes a new measurement dictionary. Sets up the initial COSDictionary and type attribute.
616 Sets the subtype mask in the measurement dictionary. @param subtype the subtype to set as mask
617 Initializes a new PDNumberFormatDictionary with default settings. Sets up the initial COSDictionary for managing numerical formatting in PDFs.
618 Sets the viewport name. @param name the name to set for the viewport
619 Initializes a PDTransition with a specified style. @param style transition effect style
620 Sets mask for transition dimension. @param dimension PDTransitionDimension object specifying the transition properties
621 Sets transition mask based on motion. @param motion PDTransitionMotion object defining the motion
622 Sets the non-full screen page mode preference. @param value the new page mode setting
623 Sets the reading direction preference. @param value the desired reading direction
624 Sets the view area preference. @param value boundary setting to apply
625 Sets view clipping preference. @param value boundary setting for view clipping
626 Sets print area mask to specified boundary. @param value BOUNDARY object defining the mask region
627 Sets print clipping preference. @param value boundary value to set for print clipping
628 Sets duplex printing preference. @param value duplex setting to apply
629 Sets print scaling preference. @param value the print scaling option to apply
630 Sets a date value in the dictionary under a specified key. @param key the COSName key for the date @param date the Calendar instance to be converted and set
631 Sets a string value in the dictionary under a specified key. @param key the name string for the key @param value the string value to be set
632 Sets the document's language attribute. @param language the ISO 639-1 code for the language
633 Sets the document's title metadata. @param title the new title for the PDF document
634 Sets the author of the PDF document. @param author the name of the document's author
635 Sets the subject of the PDF document. @param subject the subject string to be set
636 Sets the document's keywords. @param keywords comma-separated list of keywords
637 Sets the document's creator metadata. @param creator name of the document creator
638 Sets the producer of the PDF document. @param producer the name of the producer application
639 Sets or removes the page label prefix. @param prefix the prefix to set; if null, removes the prefix
640 Sets the file name in the PDF specification. @param file the file name to be set
641 Sets the mask file name in the PDF specification. @param file the file name to be set as the mask
642 Sets the description of the file specification. @param description the new description to set
643 Sets an ID for the structure element. @param id unique identifier for the element
644 Sets the title of the structure element. @param title the new title to be set
645 Sets the language attribute of the PDF element. @param language the language code to be set
646 Sets an alternative description for the element. @param alternateDescription the alternative text description
647 Sets the expanded form of an element. @param expandedForm the string representation to set
648 Sets the actual text for an element. @param actualText the string to be set as actual text
649 Sets the mask date of the annotation. @param date the mask date to be set
650 Sets the annotation's name. @param name unique identifier for the annotation
651 Sets the annotation's content text. @param contents the text to be set as annotation content
652 Sets the title of the annotation. @param title the title string to be set
653 Sets the annotation's subject. @param subject the subject string to be set
654 Sets the annotation symbol based on input. @param symbol the input symbol string
655 Sets the appearance string of the annotation. @param appearance the new appearance string
656 Sets the annotation's mask style. @param style the style to be applied as a mask
657 Sets the caption style for the annotation. @param captionStyle the style string to be applied to the caption
658 Sets the annotation's state. @param state the new state value to be set
659 Sets the state model of the annotation. @param stateModel the state model to be set
660 Sets the document status in the FDF dictionary. @param status the new status to be set
661 Sets the target string for the FDF document. @param target the target value to be set in the dictionary
662 Sets the field mask to a specified partial value. @param partial the partial string value to set as the field mask
663 Sets the mask name in the reference. @param name the mask name to be set
664 Sets the mask name for the optional content group. @param name the mask name to be set
665 Initializes a new PDOptionalContentProperties object. Sets up the dictionary with OCGs and default properties.
666 Sets JavaScript action in PDF. @param sAction JavaScript code string to be set
667 Sets the file specification for the launch action. @param f file path or name to be launched
668 Sets the document mask for the launch action. @param d the document mask string to be set
669 Sets the mask value for the PDF action. @param o the mask string to be set
670 Sets the mask parameter for the PDF launch action. @param p the mask value to be set
671 Sets the URI for the PDF action. @param uri the URL to be set as the action's URI
672 Sets the target directory's filename. @param filename name of the file to be set
673 Sets a mask attribute in the dictionary. @param name the value to be set as the mask attribute
674 Sets the filename parameter for file operations. @param file the path to the file
675 Sets the directory parameter in launch parameters. @param dir the directory path to be set
676 Sets operation type in launch parameters. @param op the operation type as a string
677 Sets a parameter related to file operations in a PDF context. @param param value to be set under key COSName.P
678 Sets the contents of the annotation to the specified value. @param value the string content to be set
679 Sets mask value for annotation. @param m mask string to be set
680 Sets the name of the annotation. @param nm unique identifier for the annotation
681 Sets the default appearance string for the annotation. @param daValue the default appearance string value
682 Sets the default style string for free text annotation. @param defaultStyleString the style string to be applied
683 Sets the title of the annotation. @param t the title string to be set
684 Sets the subject of the annotation. @param subj the subject string to be set
685 Sets the annotation's state. @param state the new state value for the annotation
686 Sets the state model for the annotation. @param stateModel the state model to be set
687 Sets the annotation's caption text. @param caption the text to be displayed as the annotation's caption
688 Sets the caption for the annotation mask. @param caption text to be displayed as the mask caption
689 Sets the caption text for an annotation. @param caption the text to be displayed as the annotation caption
690 Sets the digital signature date. @param date the date string to be set
691 Sets the URL attribute in the certificate dictionary. @param url the URL string to be set
692 Sets the URL in the dictionary. @param url the URL to be stored
693 Sets the mask value in the signature dictionary. @param name the mask value to be set
694 Sets the signature location. @param location the location of the signature
695 Sets the signature reason in the digital signature dictionary. @param reason the reason for the signature action
696 Sets contact information in the PDF signature. @param contactInfo the contact information string to be set
697 Sets the title of the outline item. @param title the title string to be set
698 Sets the default appearance string for form fields. @param daValue the string representing the default appearance
699 Sets the default value for the choice field. @param value the default value to be set
700 Sets the field's name, ensuring it doesn't contain a period. @param name the field name to set
701 Sets the alternate field name in the PDF form. @param alternateFieldName the alternative name for the field
702 Sets the field's mask name. @param mappingName the name of the mask to be set
703 Sets the mask value for the field. @param value the mask string to be applied
704 Masks the text field with the given value. @param value the string to mask the field with @throws IOException if an I/O error occurs
705 Sets the default value of the text field. @param value the default string value to be set
706 Sets default appearance for text fields. @param daValue the default appearance string value
707 Sets the scale ratio in the measurement dictionary. @param scaleRatio the scaling factor as a string
708 Sets an integer value in the COSDictionary using a string key. @param key the name string to process @param value the integer value to set
709 Sets the structure parent index for the PDF page. @param structParents index of the structure parent
710 Sets the rotation of the PDF page. @param rotation degrees to rotate the page (0, 90, 180, or 270)
711 Sets the starting page number for the label range. @param start positive integer representing the first page number
712 Sets bits per sample for the function. @param bps number of bits per sample value to set
713 Sets the Marker Context Identifier (MCID) for the marked content reference. @param mcid the MCID value to set
714 Sets the revision number for the PDF structure element. @param revisionNumber non-negative integer representing the revision @throws IllegalArgumentException if revision number is negative
715 Sets the next key in the parent tree. @param parentTreeNextkey the integer value for the next key
716 Sets the mask length in the cryptographic filter. @param length the length of the mask to be set
717 Sets the encryption version in the PDF document. @param version the encryption version to set
718 Sets the encryption length. @param length the encryption key length in bits
719 Sets the PDF encryption revision. @param revision the encryption revision level to set
720 Sets document permissions mask. @param permissions bitmask representing user permissions
721 Sets the annotation's page number. @param page the page index to associate with the annotation
722 Sets the justification for the free text annotation. @param justification alignment type ("centered", "right")
723 Sets the rotation angle of the annotation. @param rotation degrees to rotate the annotation
724 Sets mask flags for the form field. @param ff integer representing mask flags
725 Sets the field flags. @param ff integer value representing the field flags
726 Sets the field flags for this FDFField. @param ff integer representing field flag values to set
727 Sets mask flag for the field. @param f integer value representing the mask flag
728 Sets the mask flags for the field. @param ff integer value representing the mask flags
729 Sets mask flags for the field. @param ff integer value representing mask flags
730 Sets font mask flags. @param flags bitmask representing font attributes
731 Sets up font metrics and widths for embedding. @param font PDFBox dictionary to store font data @param glyphList mapping of glyph names to Unicode strings @throws IOException if an I/O error occurs
732 Sets the paint type for the pattern. @param paintType the type of painting operation to use
733 Sets the pattern type in the dictionary. @param patternType the type of pattern to set
734 Sets the paint type for the tiling pattern. @param paintType the type of painting operation to be used
735 Sets the tiling type for the pattern. @param tilingType the type of tiling to be applied
736 Sets the shading type in the dictionary. @param shadingType the type of shading to apply
737 Sets bits per flag for shading. @param bitsPerFlag number of bits used for flags
738 Sets the number of vertices per row in the shading model. @param verticesPerRow the number of vertices to set for each row
739 Sets mask properties for shading. @param bitsPerComponent number of bits per color component
740 Sets the number of bits per coordinate for shading. @param bitsPerCoordinate the number of bits to set
741 Sets line cap style in graphics state. @param style integer representing line cap style
742 Sets line join style in graphics state. @param style line join style to apply
743 Sets the overprint mode in the graphics state. @param overprintMode the overprint mode to set or null to remove it
744 Sets action flags. @param flags bitmask representing action options
745 Sets action flags for form submission. @param flags bitmask representing various action options
746 Sets or removes the page number in the dictionary. @param pageNumber the page number to set; if negative, removes the key instead
747 Sets or removes mask value based on index. @param index the index to set; if negative, removes mask
748 Sets mask flags for annotation. @param flags bitmask defining visibility and interaction settings
749 Sets the structure parent index of the annotation. @param structParent the structure parent index to set
750 Sets the quadding mode for text annotation. @param q the quadding mode (0 - left, 1 - center, 2 - right)
751 Sets the rotation of the annotation. @param rotation degrees to rotate the annotation
752 Sets the mask value for digital signature configuration. @param p mask value (0-3) @throws IllegalArgumentException if value is outside valid range
753 Sets the mask flag in the dictionary. @param flag true to enable mask, false to disable
754 Updates the count of open outline items. @param openCount number of open items to set
755 Sets the mask value for form field appearance. @param q the mask integer value to set
756 Sets field mask flags. @param flags integer representing mask values
757 Sets or removes the top index for displayed items in the list box. @param topIndex the new top index value or null to remove it
758 Sets the maximum length of the text field. @param maxLen the maximum number of characters allowed
759 Sets the Q attribute of the text field. @param q the value to set for the Q attribute
760 Sets a long value in the COSDictionary using a string key. @param key the string key to be set @param value the long integer value to associate with the key
761 Sets the revision number of the digital signature. @param revision the revision level to set
762 Sets the mask revision in the digital signature properties. @param revision the mask revision value to set
763 Sets a float value in the dictionary using a string key. @param key the name string to process @param value the float value to be set
764 Sets the user unit for the PDF page. @param userUnit positive float representing the user unit scale @throws IllegalArgumentException if userUnit is not positive
765 Sets the guideline width in the PDF style configuration. @param width the width of the guideline
766 Sets the annotation's opacity. @param opacity the opacity value to be set (0.0 - fully transparent, 1.0 - fully opaque)
767 Sets the leader line length of the annotation. @param leaderLength the length of the leader line
768 Sets the leader line extension for the annotation. @param leaderExtend float value representing the leader line extension
769 Sets the leader line offset for the annotation. @param leaderOffset the offset value for the leader line
770 Sets the font weight in the PDF descriptor. @param fontWeight numeric value representing the font weight
771 Sets the italic angle of the font. @param angle the italic angle value to be set
772 Sets the font's ascent value. @param ascent the ascent measurement to be set
773 Sets the font descent value. @param descent the font descent metric
774 Sets the leading (line spacing) for the font. @param leading the line spacing value to be set
775 Sets the font's cap height. @param capHeight the cap height value to be set
776 Sets the X-height of the font. @param xHeight the height of lowercase letters in the font
777 Sets the vertical stem width of the font. @param stemV the vertical stem width value
778 Sets the stem height of the font. @param stemH the height of the stem in PDF units
779 Sets the average width of the font. @param averageWidth the average width value to be set
780 Sets the maximum width of the font. @param maxWidth the maximum width value to be set in the dictionary
781 Sets the missing width in the font descriptor. @param missingWidth the width to be set for missing glyphs
782 Sets the X step for tiling pattern. @param xStep horizontal spacing between pattern tiles
783 Sets the Y step value for tiling pattern. @param yStep vertical spacing between pattern tiles
784 Sets the sound volume. @param volume sound level from -1.0 (min) to 1.0 (max)
785 Sets the leader line length of the annotation. @param leaderLineLength the desired length of the leader line
786 Sets the leader line extension length of the annotation. @param leaderLineExtensionLength the length of the leader line extension
787 Sets the leader line offset length for the annotation. @param leaderLineOffsetLength the length of the leader line offset
788 Sets the constant alpha (CA) value. @param ca float representing the constant alpha value to be set
789 Sets the border width for PDF annotations. @param w the desired width of the border
790 Sets the minimum required capability in the dictionary. @param minimumRequiredCapability the minimum capability value to be set
791 Sets CYX coordinate value in measurement dictionary. @param cyx the CYX coordinate value to be set
792 Parses and creates a COSStream from a dictionary. Handles missing length and lenient parsing mode. @param dic the COSDictionary containing stream data @return newly created COSStream object @throws IOException if an I/O error occurs during parsing
793 Parses PDF content stream into a list of objects. @return List containing parsed objects from the stream or null if end reached @throws IOException if an I/O error occurs during parsing
794 Parses and returns the bounding box rectangle for a Type 3 font character. @return PDRectangle object representing the bounding box or null if not found @throws IOException if an I/O error occurs during parsing
795 Parses and processes PDF operators to extract float values. @return extracted float value from valid operator @throws IOException if parsing fails or unexpected end of stream
796 Constructs a new PDF document with an in-memory stream cache.
797 Creates a PDFileSpecification from a COSBase object. @param base the COSBase object to convert @return PDFileSpecification instance or throws IOException if unsupported type
798 Constructs a new FDFAnnotationCaret. Initializes the annotation with subtype "Caret".
799 Constructs a new circular annotation. Initializes the base dictionary with type "Annot".
800 Initializes a new file attachment annotation. Sets the subtype to "FileAttachment".
801 Initializes a new free text annotation. Sets the subtype to "FreeText".
802 Initializes a new ink annotation. Sets the subtype to "INK".
803 Initializes a new line annotation. Sets the subtype to "Line" in the annotation dictionary.
804 Initializes a new hyperlink annotation. Sets the subtype to "Link".
805 Constructs a new polygon annotation. Initializes the base FDF annotation and sets its subtype to "Poly".
806 Initializes a new polyline annotation. Sets the subtype to "PolyLine".
807 Constructs an empty sound annotation. Initializes base dictionary with subtype "Sound".
808 Constructs a new square annotation. Initializes base dictionary with type "Annot".
809 Initializes a new stamp annotation. Sets the subtype to "Stamp".
810 Initializes a new text annotation. Sets the subtype to "Text".
811 Protected constructor for FDFAnnotationTextMarkup. Initializes a new annotation with base settings.
812 Sets vertical metrics for CID font. @param cidToGid mapping of CID to GID @throws IOException if an I/O error occurs
813 Embeds Type 2 CID font metrics into PDF. @param cidFont the CID font dictionary to update @throws IOException if an I/O error occurs
814 Constructs a new instance of PDSimpleFont. Initializes default state and resources for managing simple fonts.
815 Sets decode values and updates shading properties. @param decodeValues array of decode values for shading
816 Sets decode values and updates shading properties. @param decodeValues array of decode values to be set
817 Sets line width in graphics state. @param width new line width value
818 Sets the miter limit in the graphics state. @param miterLimit the new miter limit value to apply
819 Sets the mask property in graphics state. @param flatness value to set for mask property; null to remove it
820 Sets mask smoothness in graphics state. @param smoothness value to set for mask smoothness
821 Sets the alpha value for mask property. @param alpha the transparency level to set
822 Sets the non-stroking alpha constant. @param alpha the alpha value to set; null to remove the key
823 Initializes a new link annotation. Sets the subtype to "Link".
824 Constructs a new markup annotation for PDF documents.
825 Initializes a new PDF popup annotation. Sets the subtype to "Popup".
826 Initializes a new PDF annotation widget. Sets the subtype to "Widget".
827 Sets uniform rectangle margin differences for caret annotation. @param difference margin difference for all sides
828 Sets equal rectangle differences for all sides. @param difference uniform margin difference for all sides
829 Sets equal rectangle differences for all sides. @param difference uniform margin difference for all sides
830 Constructs a new PDCheckBox instance. @param acroForm the AcroForm containing this checkbox
831 Initializes a new PDComboBox instance. @param acroForm the AcroForm containing this combo box field
832 Initializes a new PDListBox instance. @param acroForm the AcroForm containing this list box field
833 Constructs a PDRectangle from a COSArray. @param array COSArray containing rectangle coordinates
834 Initializes a PDLineDashPattern with a dash array and phase. Adjusts negative phases according to PDF specification. @param array COSArray representing dash lengths @param phase initial phase of the dash pattern
835 Generates a string representation of the PDRange. @return formatted string with range bounds
836 Evaluates input values through a series of PDF function operations. @param input array of input values to process @return processed output values as an array of floats @throws IOException if an I/O error occurs during processing
837 Updates the PDF stream with specified range values. @param range PDRange object containing min and max values @param n index to update in the range array
838 Reads and processes patch data for mesh-based shading. @param input stream to read from @param isFree indicates if the patch is free-form @param implicitEdge predefined edge points @param implicitCornerColor predefined corner colors @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X-axis range @param rangeY Y-axis range @param colRange color component ranges @param matrix transformation matrix @param xform additional affine transform @param controlPoints number of control points @return Patch object or null if EOF encountered
839 Reads and processes vertex data from an image stream. @param input ImageInputStream to read data from @param maxSrcCoord Maximum source coordinate value @param maxSrcColor Maximum source color value @param rangeX X-axis range for scaling coordinates @param rangeY Y-axis range for scaling coordinates @param colRangeTab Array of PDRange for each color component @param matrix Transformation matrix for initial vertex transformation @param xform Additional affine transform to apply @return Vertex object with position and color components @throws IOException if reading fails or invalid parameters are provided
840 Retrieves the first color value from the PDF document. @return PDGamma object representing the first color or null if not applicable
841 Retrieves the second color value from the PDF document. @return PDGamma object representing the second color or null if not applicable
842 Retrieves and initializes the third color value from the PDF document. @return PDGamma object representing the third color or null if not applicable
843 Retrieves the fourth color value as a PDGamma object. @return PDGamma representing the fourth color or null if not applicable
844 Retrieves the blend mode from the graphics state dictionary. @return the blend mode or NORMAL if not found
845 Retrieves destination from embedded file. @return PDDestination object or throws IOException if retrieval fails
846 Retrieves destination from action. @return PDDestination object or null if not found @throws IOException if conversion fails
847 Retrieves and converts the destination associated with the link annotation. @return PDDestination object or null if not found @throws IOException if conversion fails
848 Retrieves and converts the destination of this outline item. @return PDDestination object or null if not found
849 Creates a Matrix from a COSBase object. @param base input COSBase object @return new Matrix or default if conditions not met
850 Traverses and retrieves a nested object in a PDF document. @param objPath path to the desired object using a specific syntax @return COSBase object at the specified path or null if not found
851 Retrieves a named destination from the PDF document. @param name the name of the destination @return PDDestination object or null if not found
852 Retrieves the value of a specified attribute from the underlying dictionary. @param attrName name of the attribute to fetch @return COSBase object representing the attribute's value or null if not found
853 Retrieves attribute value by name with default handling. @param attrName attribute name to fetch @param defaultValue default value to return if attribute is absent @return COSBase object or provided default value if not found
854 Checks if a named attribute exists in the dictionary. @param name attribute key to check @return true if attribute exists, false otherwise
855 Retrieves and converts a COSArray of names to a string array. @param name key for the COSDictionary entry @return array of strings representing COSNames or null if not found
856 Sets a masked attribute with multiple string values. @param name attribute key @param values array of string values to set
857 Retrieves a named attribute, returning its value or default. @param name key of the attribute to fetch @param defaultValue value to return if attribute is not found @return String array or single string value, or default if missing
858 Sets a mask attribute with multiple values. @param name attribute key @param values array of string values to set
859 Retrieves and processes a named attribute from the COSDictionary. @param name key of the attribute to retrieve @param defaultValue default value if attribute is not found or not processable @return processed attribute value or default
860 Retrieves a float value or array of floats by name. @param name attribute name to fetch @param defaultValue default value if not found @return float or float[] if found, otherwise null or default value
861 Sets a mask attribute with float values. @param name the attribute name @param values array of float values for the mask
862 Retrieves and constructs a PDGamma object from the dictionary. @param name key for the COSArray in the dictionary @return PDGamma object or null if not found
863 Retrieves and processes a COSArray based on the specified name. @param name key to fetch the COSArray @return PDGamma or PDFourColours object, or null if conditions are not met
864 Retrieves a COSDictionary by primary or secondary key. @param firstKey primary key to search @param secondKey secondary key to search if primary is not found @return COSDictionary object or null if both keys are missing
865 Determines boolean value by key. @param firstKey primary key to search @param secondKey secondary key to search if primary is not found @param defaultValue default boolean value if keys are missing @return boolean value from dictionary or default if not found
866 Retrieves integer value by keys or returns default. @param firstKey primary key to search @param secondKey secondary key if primary is not found @param defaultValue value to return if no valid number found @return integer value from dictionary or default
867 Retrieves filter names for the inline image. @return List of filter names or empty list if none found
868 Retrieves the color space associated with the shading. @return PDColorSpace instance or throws IOException if creation fails
869 Checks if dictionary represents a catalog or FDF. @param dictionary PDF dictionary to check @return true if dictionary type is catalog or FDF, false otherwise
870 Constructs a PDPageTree from a COSDictionary. @param root the root dictionary of the page tree @param document the PDDocument associated with this page tree Throws IllegalArgumentException if root is null.
871 Checks if a node represents a page tree or contains child nodes. @param node the COSDictionary to check @return true if node is valid and represents a page tree or has children; false otherwise
872 Retrieves the cryptographic filter mask. @return COSName representing the filter mask or null if not found
873 Retrieves or defaults the stream filter name. @return COSName representing the stream filter, defaulting to IDENTITY if null
874 Retrieves or defaults the encryption filter function. @return COSName representing the filter function, defaulting to IDENTITY if not set
875 Converts character code to Unicode string. @param code character code to convert @return Unicode string or null if conversion fails
876 Creates a PDXObject based on the given COSBase and resources. @param base the underlying COSBase object @param resources PDResources for managing graphic resources @return a PDXObject instance or null if base is null @throws IOException if unexpected object type or invalid subtype
877 Retrieves or initializes the subtype of the soft mask. @return COSName representing the subtype, defaulting to 'S' if not set
878 Retrieves the mask value from the dictionary. @return COSName object representing the mask or null if not found
879 Retrieves the mask value for the annotation. @return COSName representing the mask setting or null if not found
880 Sets a string value in a nested dictionary under specified keys. @param embedded the outer key for the dictionary @param key the inner key for the value @param value the string value to be set
881 Sets an integer value in the specified embedded dictionary. @param embeddedDictionary key for the embedded dictionary @param key the key to set the integer value under @param value the integer value to set
882 Checks if the PDF document is encrypted. @return true if encryption dictionary exists in the trailer, false otherwise
883 Retrieves encryption settings from the document's trailer. @return COSDictionary containing encryption details or null if not present
884 Parses the FDF document trailer to retrieve the root dictionary. Throws an exception if the root is missing. Sets a flag indicating initial parsing completion.
885 Parses PDF trailer and initializes document structure. @throws IOException if root object is missing or parsing fails
886 Retrieves or creates the document information dictionary. @return PDDocumentInformation object containing metadata
887 Initializes and returns the PDF document catalog. @return PDDocumentCatalog object representing the document's catalog
888 Applies form fixup and retrieves the PDF document's AcroForm. @param acroFormFixup instance containing form fixup logic @return PDAcroForm object or null if not found
889 Retrieves and returns viewer preferences for the PDF document. @return PDViewerPreferences object or null if not found
890 Retrieves or creates the additional actions dictionary. @return PDDocumentCatalogAdditionalActions object representing the actions
891 Retrieves and initializes the document name dictionary. @return PDDocumentNameDictionary object or null if not found
892 Retrieves named destinations from the document catalog. @return PDDocumentNameDestinationDictionary object or null if not found
893 Retrieves and returns the document's mark info. @return PDMarkInfo object or null if not present
894 Retrieves and returns a PDURIDictionary from the document's catalog. @return PDURIDictionary object or null if not found
895 Retrieves and returns the structure tree root of the PDF document. @return PDStructureTreeRoot object or null if not found
896 Retrieves optional content properties from the document catalog. @return PDOptionalContentProperties object or null if not found
897 Initializes the PDDocumentNameDictionary from a given document catalog. @param cat PDF document catalog
898 Retrieves or creates a destination name tree node for the document. @return PDDestinationNameTreeNode object or null if not found
899 Retrieves the embedded files node from the document. @return PDEmbeddedFilesNameTreeNode object or null if not found
900 Retrieves and returns a PDJavascriptNameTreeNode for JavaScript elements. @return PDJavascriptNameTreeNode object or null if not found
901 Retrieves or creates the additional actions dictionary for the page. @return PDPageAdditionalActions object representing the page's additional actions
902 Retrieves the transition effect of the page. @return PDTransition object or null if no transition is defined
903 Retrieves a COSObject from the resources dictionary. @param kind type of resource dictionary to access @param name key for the specific resource within the dictionary @return COSObject if found, otherwise null
904 Retrieves a resource object from the PDF dictionary. @param kind type of resource (e.g., font, color space) @param name specific resource identifier @return COSBase object representing the resource or null if not found
905 Retrieves resource keys of a specific type. @param kind the type of resource to retrieve @return Iterable of COSName keys or empty set if not found
906 Generates a unique COSName for a resource. @param kind type of resource @param prefix base string for the name @return unique COSName
907 Adds or updates a resource in the PDF document. @param kind type of resource (e.g., font, image) @param name unique identifier for the resource @param object resource object to be added or updated
908 Retrieves the page associated with this marked content reference. @return PDPage object or null if no associated page is found
909 Retrieves and returns the associated PDPage. @return PDPage object or null if not found
910 Retrieves and returns a PDPage object associated with the 'PG' key. @return PDPage object or null if not found
911 Retrieves and constructs the ID tree node for structure elements. @return PDNameTreeNode of PDStructureElement or null if not found
912 Retrieves and initializes the parent tree node. @return PDNumberTreeNode representing the parent tree or null if not found
913 Retrieves and maps class attributes from the PDF structure. @return Map of class names to their corresponding attribute objects or lists
914 Retrieves and initializes a PDCryptFilterDictionary for a given crypt filter name. @param cryptFilterName the name of the crypt filter @return PDCryptFilterDictionary object or null if not found
915 Configures a cryptographic filter for PDF encryption. @param cryptFilterName the name of the cryptographic filter @param cryptFilterDictionary the dictionary containing filter settings
916 Retrieves border style dictionary of an annotation. @return PDBorderStyleDictionary object or null if not found
917 Retrieves and initializes border effect dictionary from annotation. @return PDBorderEffectDictionary or null if not found
918 Retrieves and returns the digital signature from the FDF catalog. @return PDSignature object or null if no signature is found
919 Retrieves JavaScript associated with the FDF document. @return FDFJavaScript object or null if not found
920 Retrieves the appearance dictionary of the field. @return PDAppearanceDictionary object or null if not found
921 Retrieves and returns an FDF named page reference. @return FDFNamedPageReference object or null if not found
922 Retrieves and returns the icon fit settings of the field. @return FDFIconFit object or null if not found
923 Retrieves additional actions associated with the form field. @return PDAdditionalActions object or null if not found
924 Retrieves and returns an FDFPageInfo object containing the page's info dictionary. @return FDFPageInfo object or null if no info dictionary is found
925 Retrieves and returns an FDF named page reference from the template. @return FDFNamedPageReference object or null if not found
926 Retrieves and initializes CID system info from font dictionary. @return PDCIDSystemInfo object or null if not found
927 Retrieves and returns a PDPanose object from the font descriptor. @return PDPanose object or null if not found or invalid data
928 Retrieves or creates font resources. @return PDResources object representing font resources
929 Retrieves or initializes character procedures dictionary. @return COSDictionary containing character procedures
930 Retrieves and initializes separation attributes for a DeviceN color space. @param resources PDF resources for resource management @return Map of separation names to PDSeparation objects @throws IOException if an error occurs during retrieval or initialization
931 Retrieves and initializes the DeviceN process attributes. @return PDDeviceNProcess object or null if not found
932 Determines the rendering state for a given destination. @param destination the target rendering destination (PRINT or VIEW) @return RenderState object representing the current state, or null if not found
933 Retrieves or creates the extended graphics state for the shading pattern. @return PDExtendedGraphicsState object representing the graphics state
934 Retrieves and initializes mask resources. @return PDResources object or null if no resources found
935 Retrieves and constructs a PDTargetDirectory from the PDF. @return PDTargetDirectory object or null if not found
936 Retrieves and initializes Windows-specific launch parameters. @return PDWindowsLaunchParams object or null if not found
937 Retrieves and constructs a PDTargetDirectory from the 'T' key. @return PDTargetDirectory object or null if not found
938 Retrieves the appearance dictionary of the annotation. @return PDAppearanceDictionary object or null if not found
939 Retrieves and initializes a PDPage from the annotation's dictionary. @return PDPage object or null if not found
940 Retrieves and returns the border effect dictionary of the annotation. @return PDBorderEffectDictionary object or null if not found
941 Retrieves and initializes border style dictionary. @return PDBorderStyleDictionary object or null if not found
942 Retrieves and constructs a PDActionURI from the PDF document. @return PDActionURI object or null if not found
943 Retrieves and constructs external data dictionary for annotation. @return PDExternalDataDictionary object or null if not found
944 Retrieves and returns the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
945 Retrieves and initializes a border effect dictionary. @return PDBorderEffectDictionary object or null if not found
946 Retrieves and initializes the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
947 Retrieves appearance characteristics of the annotation. @return PDAppearanceCharacteristicsDictionary object or null if not found
948 Retrieves additional actions associated with the annotation. @return PDAnnotationAdditionalActions object or null if not found
949 Retrieves and returns the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
950 Retrieves normal appearance entry. @return PDAppearanceEntry for normal state or null if not found
951 Retrieves and constructs a PDPropBuildDataDict for the FILTER property. @return PDPropBuildDataDict object or null if FILTER is not found
952 Retrieves and initializes publication security properties. @return PDPropBuildDataDict object containing publication security settings or null if not found
953 Retrieves and constructs a PDPropBuildDataDict for application data. @return PDPropBuildDataDict object or null if not found
954 Retrieves and returns a PDSeedValueMDP instance for digital signature permissions. @return PDSeedValueMDP object or null if not found
955 Retrieves and returns a PDSeedValueCertificate object. @return PDSeedValueCertificate instance or null if not found
956 Retrieves and initializes a timestamp from the dictionary. @return PDSeedValueTimeStamp object or null if not found
957 Retrieves and initializes a PDPropBuild object from the PROP_BUILD key in the dictionary. @return PDPropBuild object or null if not found
958 Retrieves and returns a structure element from the SE key. @return PDStructureElement object or null if not found
959 Checks if the outline node has a "First" child. @return true if "First" child exists, false otherwise
960 Retrieves and initializes resources from the PDF document. @return PDResources object or null if not found
961 Retrieves additional actions associated with a PDF form field. @return PDFormFieldAdditionalActions object or null if none exists
962 Retrieves and returns a PDSignature object from the signature field. @return PDSignature object or null if not found
963 Retrieves and returns a PDSignature object using the default value (DV). @return PDSignature object or null if default value is not found
964 Retrieves and returns a PDSeedValue from the signature field. @return PDSeedValue object or null if not found
965 Retrieves and returns a PDMeasureDictionary for the viewport. @return PDMeasureDictionary object or null if not found
966 Retrieves document information from the PDF thread. @return PDDocumentInformation object or null if not found
967 Retrieves and returns a PDThreadBead instance associated with the 'F' key. @return PDThreadBead object or null if not found
968 Retrieves and returns a PDThread instance associated with the bead. @return PDThread object or null if no associated dictionary found
969 Creates and returns a new PDThreadBead instance. @return PDThreadBead object initialized with data from the bead's COSDictionary
970 Constructs and returns a new PDThreadBead instance. @return PDThreadBead object initialized with data from the "V" key
971 Retrieves and initializes a PDPage from the bead's dictionary. @return PDPage object or null if not found
972 Retrieves PDF metadata. @return PDMetadata object or null if not present
973 Retrieves metadata from the PDF page. @return PDMetadata object or null if no metadata is found
974 Retrieves the COSStream object associated with differences. @return COSStream object or null if not found
975 Retrieves and wraps font file stream. @return PDStream object or null if not found
976 Retrieves font file stream. @return PDStream object for FONT_FILE2 or null if not found
977 Retrieves font file stream. @return PDStream object or null if not found
978 Retrieves and wraps CID set stream from dictionary. @return PDStream object or null if not found
979 Retrieves the sound content stream associated with the action. @return COSStream object containing sound data or null if not found
980 Retrieves the mask form XObject. @return PDFormXObject representing the mask or null if not found
981 Retrieves and returns the mask form XObject. @return PDFormXObject representing the mask or null if not found
982 Retrieves and returns a PDFormXObject representing the mask. @return PDFormXObject or null if not found
983 Retrieves appearance streams by key from the entry. @throws IllegalStateException if entry is not a subdictionary @return Map of COSName to PDAppearanceStream objects
984 Retrieves the ID array from the trailer dictionary. @return COSArray containing document IDs or null if not found
985 Writes PDF document trailer and updates cross-reference table. @param doc the COSDocument to process @throws IOException if I/O error occurs
986 Retrieves or creates the list of threads in a PDF document. @return List of PDThread objects representing threads in the document
987 Retrieves all output intents from the document catalog. @return List of PDOutputIntent objects representing output intents
988 Adds or updates the output intent in the PDF document catalog. @param outputIntent the PDOutputIntent object to be added
989 Retrieves and converts thread beads from the page. @return List of PDThreadBead objects representing thread beads on the page
990 Retrieves viewport dictionaries from the page. @return List of PDViewportDictionary objects or null if none found
991 Recursively retrieves and processes COSDictionary nodes from a PDF page tree. @param node the current node in the page tree @return list of COSDictionary representing processed pages
992 Retrieves child nodes from the current node. @return List of PDNameTreeNode objects representing children or null if none exist
993 Retrieves and converts name-value pairs from the COSArray. @return unmodifiable map of names to values or null if no names array exists @throws IOException if a non-string key is found in the array
994 Retrieves the limit string for the node. @return the limit string or null if not found
995 Sets the upper limit for a name tree node. @param upper the upper bound string to set
996 Retrieves the limit value as a string. @return the limit value or null if not found
997 Sets the lower limit in the limits array of a PDNameTreeNode. @param lower the new lower limit string
998 Retrieves and returns child nodes of the current node. @return List of PDNumberTreeNode representing child nodes or null if none exist
999 Retrieves and processes numeric mappings from a PDF node. @return Unmodifiable map of integer keys to COSObjectable values or null if invalid. @throws IOException if conversion fails
1000 Retrieves the upper limit from the node's limits array. @return Integer representing the upper limit, or null if not found
1001 Updates the upper limit of a COSArray associated with node limits. @param upper new upper limit value or null to remove it
1002 Retrieves the lower limit from the limits array. @return Integer representing the lower limit or null if not found
1003 Sets the lower limit for a node in the PDF tree. @param lower the new lower limit value or null to remove it
1004 Retrieves or initializes function's range. @return COSArray representing the range of function values
1005 Retrieves or initializes the function's domain. @return COSArray representing the domain or null if not set
1006 Retrieves or computes the SIZE array for the function. @return COSArray representing the SIZE property
1007 Retrieves or constructs the DECODE array. @return COSArray representing the DECODE values
1008 Retrieves or initializes the FUNCTIONS array. @return COSArray containing function definitions
1009 Retrieves or initializes the function's bounds. @return COSArray representing the function's bounds
1010 Retrieves or initializes the encoding array. @return COSArray representing the encoding
1011 Retrieves and constructs a list of user properties from the PDF document. @return List of PDUserProperty objects representing user attributes
1012 Adds or updates a user property in the PDF document. @param userProperty the property to add or update
1013 Masks a user property by removing it from the document's properties array. @param userProperty the user property to be masked
1014 Retrieves or creates a PDColor for the guideline mask. @return PDColor object representing the mask color
1015 Checks if the specified edge is attached. @param edge name of the edge to check @return true if the edge is attached, false otherwise
1016 Retrieves the color of the annotation. @return Color object representing the annotation's color or null if not available
1017 Retrieves the interior color of the annotation. @return Color object representing the annotation's interior color or null if not set
1018 Retrieves and converts the mask array from the annotation. @return float array of mask values or null if not found
1019 Retrieves ink data as a list of float arrays. @return List of float arrays representing ink coordinates or null if not found
1020 Retrieves line coordinates from annotation. @return float array of line coordinates or null if not found
1021 Sets line style for annotation. @param style the desired line style or null for default
1022 Retrieves line end style from annotation. @return Line end style as string or default if not found
1023 Sets the line style for the annotation. @param style the desired line style or null to use default
1024 Retrieves line end style. @return line end style as string or default if not found
1025 Retrieves the color of the line annotation. @return Color object representing the annotation's color or null if not set
1026 Sets the caption offset for the line annotation. @param offset the new caption offset value
1027 Retrieves the mask value from line annotation. @return mask value as float or 0 if not found
1028 Sets the caption offset for the line annotation. @param offset the new offset value for the caption
1029 Retrieves the second float value from the CO array of the annotation. @return second float value or 0 if array is null or invalid
1030 Retrieves vertex coordinates of the polygon annotation. @return float array of vertex coordinates or null if not found
1031 Retrieves the interior color of a polygon annotation. @return Color object representing the interior color, or null if not set
1032 Retrieves vertex coordinates of polyline annotation. @return float array of vertex coordinates or null if not found
1033 Sets the line ending style for annotation. @param style the line ending style to apply
1034 Retrieves line ending style of the annotation. @return String representing line ending style or default if not found
1035 Sets the line endpoint style for the annotation. @param style the endpoint style to apply or null for default
1036 Retrieves mask value for annotation. @return Mask string or default if not found
1037 Retrieves the interior color of the polyline annotation. @return Color object representing the interior color or null if not set
1038 Retrieves the interior color of the annotation. @return Color object representing the interior color or null if not set
1039 Retrieves quadrilateral points for text markup annotation. @return float array of quad points or null if not found
1040 Retrieves the ID array from the FDF document. @return COSArray containing the document ID if present, otherwise null
1041 Retrieves and returns a list of form fields from the FDF document. @return List of FDFField objects representing the form fields or null if none exist.
1042 Retrieves and returns a list of FDFPage objects from the FDF document. @return List of FDFPage objects or null if no pages are found
1043 Retrieves and processes child fields of the current field. @return List of FDFField objects representing child fields or null if none exist
1044 Retrieves and processes options for a field. @return List of processed option elements or null if none found
1045 Retrieves and returns a list of FDFTemplates from the page. @return List of FDFTemplate objects or null if no templates are found
1046 Retrieves form fields from the FDF template. @return List of FDFField objects or null if no fields are present
1047 Retrieves or initializes the list of font widths. @return List of Floats representing character widths, empty if none found
1048 Retrieves or creates the white point for the color space. @return PDTristimulus object representing the white point
1049 Retrieves the black point of the color space. @return PDTristimulus object representing the black point
1050 Retrieves or creates a PDGamma instance for gamma correction. @return PDGamma object representing the gamma correction settings
1051 Retrieves the transformation matrix for color masking. @return float array representing the matrix or default identity matrix if not found
1052 Retrieves component names from the device's color space. @return List of component names as strings
1053 Retrieves or creates the LAB color range. @return PDRange object representing the color component ranges
1054 Retrieves or creates the LAB 'a' component range. @return PDRange object representing the 'a' component range
1055 Retrieves or creates the background array for shading. @return COSArray representing the background, or null if not set
1056 Retrieves or initializes the domain array for the shading. @return the COSArray representing the domain, or null if not found
1057 Retrieves or initializes the EXTEND array for shading. @return COSArray representing the EXTEND property, initialized if needed
1058 Retrieves or initializes the domain array. @return COSArray representing the domain
1059 Retrieves or initializes the coordinates array for shading. @return COSArray containing coordinate data
1060 Retrieves or computes the DECODE array for shading. Uses cached value if available; otherwise, fetches from PDF structure. @return COSArray representing DECODE values
1061 Retrieves and initializes PDFontSetting from dictionary. @return PDFontSetting object or null if not found
1062 Retrieves the COSArray of fields to be reset. @return COSArray containing field names or null if not found
1063 Retrieves the COSArray of fields to be masked during form submission. @return COSArray containing field names to mask or null if not found
1064 Retrieves or constructs the border array for an annotation. Ensures the border array has at least three elements. @return COSArray representing the border settings
1065 Retrieves and converts rectangle margins to float array. @return float array of margins or empty array if not found
1066 Retrieves margins for the annotation. @return float array of margins or empty if none found
1067 Retrieves and converts the callout array to a float array. @return float array of callout coordinates or null if not found
1068 Retrieves the ink data as a 2D float array. @return 2D float array representing ink paths or empty if not found
1069 Retrieves line coordinates from annotation. @return array of floats representing line coordinates or null if not available
1070 Sets the line style for the annotation. @param style the desired line style or null to reset
1071 Retrieves mask value for line annotation. @return String representation of mask or default value
1072 Sets the line style for the annotation. @param style the desired line style or null for default
1073 Retrieves mask value for line annotation. @return String representing the mask or default if not found
1074 Sets the offset for the line annotation's leader line. @param offset the distance of the leader line from the endpoint
1075 Retrieves the first float value from a COSArray associated with "CO". @return the first float value or 0.0f if not found
1076 Sets the offset for line annotation's CO property. @param offset the new offset value
1077 Retrieves the second float value from a COSArray associated with key "CO". @return second float value or 0 if not found
1078 Retrieves quad points as a float array. @return float array of quad points or null if not found
1079 Retrieves polygon vertices as float array. @return float array of vertex coordinates or null if not found
1080 Retrieves and converts polygon path to a 2D float array. @return 2D float array representing the polygon's vertices or null if not available
1081 Sets the line ending style for the annotation. @param style the line ending style to set
1082 Retrieves the mask value for the polyline annotation. @return String representing the mask value or default if not found
1083 Sets the line ending style for a polyline annotation. @param style the line ending style to apply
1084 Retrieves the mask value for the polyline annotation. @return String representing the mask value or LE_NONE if not applicable
1085 Retrieves vertex coordinates of the polyline. @return array of floats representing vertex coordinates or null if not found
1086 Retrieves and converts the RD (rectangle difference) array to a float array. @return float array representing rectangle differences or empty if not found
1087 Retrieves quad points defining text annotation area. @return float array of quad points or null if not found
1088 Sets or updates the operating system in digital signature properties. @param os operating system name to set
1089 Retrieves sub-filter names from digital signature. @return List of sub-filter names or empty list if none found
1090 Retrieves digest methods from the digital signature. @return List of string representations of digest methods or empty list if none found
1091 Retrieves reasons for digital signature. @return List of string representations of reasons or empty list if none found
1092 Retrieves legal attestation fields from the dictionary. @return List of string representations of legal attestation fields or empty list if none found
1093 Masks subject byte arrays from the certificate's COSDictionary. @return List of masked byte arrays or null if not found
1094 Adds a subject to the certificate's subject list. @param subject byte array representing the subject to add
1095 Adds a subject to the certificate's subject list. @param subject byte array representing the subject to add
1096 Retrieves key usage extensions from the certificate. @return List of key usage extensions or null if not found
1097 Validates and sets key usage extension in PDF certificate. @param keyUsageExtension string containing allowed characters '0', '1', 'X'
1098 Sets the Key Usage extension in the digital certificate. @param keyUsageExtension the usage extension to be set
1099 Masks issuer byte arrays from PDF certificate. @return List of masked byte arrays or null if no issuer data found
1100 Adds or updates the issuer in the certificate. @param issuer byte array representing the issuer's name
1101 Adds an issuer to the certificate's issuer list. @param issuer byte array representing the issuer name
1102 Masks byte arrays from OID values in the PDF certificate. @return List of masked byte arrays or null if OID is not found
1103 Adds an OID to the certificate's OID list. @param oid byte array representing the OID to add
1104 Adds an OID to the certificate's OID array. @param oid byte array representing the OID to add
1105 Retrieves the Byte Range array from the digital signature. @return int[] representing the Byte Range or an empty array if not found
1106 Retrieves or creates a color array for the mask. @return PDColor object representing the mask color
1107 Retrieves a list of PDField objects based on the COSArray associated with the key "CO". @return List of PDField objects matching the items in the COSArray.
1108 Retrieves and converts choice field options to integers. @return List of Integer objects representing the choice options or an empty list if none found
1109 Retrieves and converts X-axis number format dictionaries. @return array of PDNumberFormatDictionary or null if not found
1110 Retrieves number format dictionaries for the Y-axis. @return array of PDNumberFormatDictionary or null if not found
1111 Retrieves and returns an array of PDNumberFormatDictionary objects. @return array of PDNumberFormatDictionaries or null if not found
1112 Retrieves and initializes number format dictionaries from the PDF document. @return array of PDNumberFormatDictionary objects or null if none found
1113 Retrieves number format dictionaries from the PDF document. @return array of PDNumberFormatDictionary or null if not found
1114 Retrieves and converts number format dictionaries from the PDF document. @return array of PDNumberFormatDictionary objects or null if none found
1115 Retrieves and converts the origin point of rectilinear measurements. @return float array representing the origin coordinates or null if not found
1116 Retrieves the mask value for optional content. @return COSName representing the mask value or default if not found
1117 Retrieves string value by key. @param key the key to look up in the dictionary @return decoded string value or null if not found
1118 Retrieves a string value for a given key, returning default if not found. @param key the key to look up in the dictionary @param defaultValue the value to return if the key is not present @return the decoded string value or the provided default
1119 Checks if a valid XRef stream exists at the specified offset. @param startXRefOffset starting offset for XRef stream check @return true if XRef stream is valid, false otherwise
1120 Retrieves the page mode from the PDF document catalog. @return PageMode enum or USE_NONE if invalid or not found
1121 Retrieves the page layout of a PDF document. @return PageLayout instance or SINGLE_PAGE if invalid or not set
1122 Retrieves the version string from the PDF document's catalog. @return The version string or null if not found
1123 Retrieves trapped status from PDF document information. @return Trapped status as string or null if not found
1124 Retrieves the page label style as a string. @return The style of page labeling or null if not found.
1125 Retrieves the type of the PDF object. @return the type as a string or null if not found
1126 Creates a PDAttributeObject based on the dictionary's owner type. @param dictionary PDF dictionary containing attribute data @return Specific PDAttributeObject subclass or default if unknown
1127 Retrieves a masked string value associated with COSName.O. @return decoded string value or null if not found
1128 Retrieves the mask value as a string. @return decoded string value or null if not found
1129 Creates a PDStructureNode based on the node type. @param node COSDictionary representing the structure node @return PDStructureTreeRoot or PDStructureElement instance @throws IllegalArgumentException if Type is invalid
1130 Retrieves the type of the structure node. @return decoded string value representing the node's type or null if not found
1131 Retrieves and masks the name of the user property. @return masked name as a string or null if not found
1132 Retrieves language attribute of marked content. @return Language string or null if not available
1133 Retrieves the type of the marked content as a string. @return the type of the marked content or null if not found
1134 Retrieves the subtype of the marked content. @return the subtype as a string or null if not found
1135 Retrieves the filter name associated with encryption. @return the filter name as a string or null if not found
1136 Retrieves the sub-filter name associated with PDF encryption settings. @return the sub-filter name as a string or null if not found
1137 Creates an FDFAnnotation based on the subtype in the COSDictionary. @param fdfDic dictionary containing annotation data @return FDFAnnotation object or null if unsupported type
1138 Retrieves the mask value associated with the annotation. @return the mask value as a string or null if not found
1139 Retrieves mask value as string from annotation. @return Mask value or null if not found
1140 Retrieves the version string from the FDF catalog. @return version of the document as a string or null if not found
1141 Retrieves the encoding used in the FDF document. @return the encoding string, defaulting to "PDFDocEncoding" if not specified
1142 Retrieves mask fitting option for icon. @return mask option as string, defaulting to SCALE_OPTION_ALWAYS if not set
1143 Retrieves mask type for icon fitting. @return mask type as string, defaulting to proportional scale if not specified
1144 Retrieves the base font name from the dictionary. @return the base font name as a string or null if not found
1145 Retrieves the font type as a string. @return the font type or null if not found
1146 Retrieves the subtype name of the font as a string. @return the font subtype or null if not found
1147 Retrieves the font name from the dictionary. @return the font name as a string or null if not found
1148 Retrieves font stretch attribute from dictionary. @return string value of font stretch or null if not found
1149 Retrieves the base font name from the font dictionary. @return base font name as a string or null if not found
1150 Retrieves the base font name from the dictionary. @return Base font name as a string or null if not found
1151 Retrieves the base font name from the dictionary. @return base font name as a string or null if not found
1152 Retrieves the base font name from the dictionary. @return the base font name as a string or null if not found
1153 Checks if the DeviceN color space is of type "NChannel". @return true if the subtype is "NChannel", false otherwise
1154 Retrieves the type of PDF action as a string. @return the action type or null if not found
1155 Retrieves the mask value of the action. @return mask string or null if not found
1156 Creates a PDAction based on the action type specified in the COSDictionary. @param action COSDictionary containing action details @return PDAction object or null if type is unsupported
1157 Retrieves the subtype of the annotation. @return Subtype string or null if not found
1158 Retrieves the mask value associated with the annotation. @return The mask value as a string or null if not found.
1159 Retrieves the "IT" property as a string from annotation data. @return The string value of the "IT" property or null if not found.
1160 Retrieves the subtype of the external data dictionary. @return Subtype as a string or null if not found
1161 Retrieves the mask value as a string from the dictionary. @return the mask value or null if not found
1162 Retrieves the filter name used in the digital signature. @return the filter name as a string or null if not found
1163 Retrieves URL type from the certificate's dictionary. @return the URL type as a string or null if not found
1164 Retrieves the filter type used in the signature. @return The filter type as a string or null if not found.
1165 Retrieves the sub-filter of the digital signature. @return the sub-filter as a string or null if not found
1166 Retrieves field type as string. @return field type or null if not found
1167 Retrieves the viewport name as a string. @return the decoded string value of the viewport name or null if not found
1168 Retrieves duplex setting as string from preferences. @return duplex setting or null if not found
1169 Retrieves or creates a COSName instance and fetches its string value. @param key the name string to process @return decoded string from COSName or null if not found
1170 Retrieves string value by key or returns default if not found. @param key the key to look up in the dictionary @param defaultValue value to return if key is not found @return decoded string or provided default value
1171 Retrieves the language setting of the PDF document. @return Language code as a string or null if not set
1172 Retrieves the title from PDF document metadata. @return Title of the document as a string or null if not found
1173 Retrieves the author of the PDF document. @return The author's name or null if not set
1174 Retrieves the subject metadata of a PDF document. @return subject string or null if not found
1175 Retrieves keywords from PDF document metadata. @return Keywords associated with the document or null if not found
1176 Retrieves the creator of the PDF document. @return Creator string or null if not found
1177 Retrieves the producer of the PDF document. @return Producer string or null if not found
1178 Retrieves page label prefix from PDF document. @return prefix string or null if not found
1179 Retrieves the user file specification string. @return decoded string or null if not found
1180 Retrieves the mask value of the file specification. @return Mask string or null if not found
1181 Retrieves DOS mask value from file specification. @return decoded DOS mask string or null if not found
1182 Retrieves and decodes the MAC mask value from file specification. @return decoded MAC mask string or null if not found
1183 Retrieves file system mask for UNIX. @return Mask string or null if not found
1184 Retrieves the description of an embedded file. @return decoded description string or null if not found
1185 Retrieves ID string from element attributes. @return decoded ID string or null if not found
1186 Retrieves title of the PDF structure element. @return decoded title string or null if not found
1187 Retrieves the language attribute of the PDF structure element. @return language string or null if not found
1188 Retrieves alternative text for the PDF element. @return decoded alternative text or null if not found
1189 Retrieves mask value from PDF structure. @return decoded string representing the mask or null if not found
1190 Retrieves actual text associated with the element. @return decoded actual text or null if not found
1191 Retrieves and decodes string value associated with key 'F'. @return decoded string or null if not found or not a COSString
1192 Retrieves actual text from marked content. @return decoded actual text or null if not found
1193 Retrieves alternate text for marked content. @return decoded alternate text or null if not available
1194 Retrieves and decodes the string value associated with COSName.E. @return decoded string or null if not found or not a COSString
1195 Retrieves mask value from annotation. @return mask string or null if not found
1196 Retrieves the name of the annotation. @return decoded string representing the annotation's name or null if not found
1197 Retrieves the contents of the annotation. @return decoded string representing annotation content or null if not found
1198 Retrieves the text associated with the annotation. @return decoded text string or null if not found
1199 Retrieves the subject of the annotation. @return decoded subject string or null if not found
1200 Retrieves the annotation symbol. @return decoded string of the annotation symbol or null if not found
1201 Retrieves rotation angle of the annotation. @return rotation angle as a string or null if not found
1202 Retrieves default appearance string of the annotation. @return Default appearance string or null if not found
1203 Retrieves the mask value of the annotation. @return decoded mask string or null if not found
1204 Retrieves the mask value of the annotation. @return Mask value as a string or null if not found
1205 Retrieves the state of the annotation. @return The current state as a string or null if not found.
1206 Retrieves the state model of the annotation. @return State model as a string or null if not found
1207 Retrieves the status value from FDF document. @return decoded status string or null if not found
1208 Retrieves target string from FDF dictionary. @return decoded target string or null if not found
1209 Retrieves the "T" attribute of the field. @return The string value associated with the "T" key or null if not found.
1210 Retrieves the mask associated with the named page reference. @return decoded mask string or null if not found
1211 Retrieves font family name from dictionary. @return Font family as string or null if not found
1212 Retrieves character set from font descriptor. @return Character set string or null if not found
1213 Retrieves the mask name from the dictionary. @return decoded mask name or null if not found
1214 Retrieves names of optional content groups. @return array of OCG names or empty array if none found
1215 Retrieves the mask value for the PDF launch action. @return the mask value as a string or null if not found
1216 Retrieves and decodes a string value associated with key D. @return decoded string or null if not found
1217 Retrieves the mask value from the launch action. @return decoded mask string or null if not found
1218 Retrieves mask value from PDF action. @return mask string or null if not found
1219 Masks and decodes the URI string from a PDF action. @return decoded URI or null if not applicable
1220 Retrieves the mask value from the dictionary. @return decoded string representing the mask or null if not found
1221 Retrieves a masked string value from the dictionary. @return decoded string or null if not found
1222 Retrieves the mask parameter from PDF launch settings. @return decoded mask string or null if not found
1223 Retrieves masked parameter value. @return decoded string from COSDictionary or null if not found
1224 Retrieves masked parameter value. @return decoded string from COSDictionary or null if not found
1225 Retrieves the contents string of the annotation. @return The decoded contents string or null if not found.
1226 Retrieves mask value from annotation dictionary. @return decoded mask string or null if not found
1227 Retrieves the name of the annotation. @return Decoded string representing the annotation's name or null if not found
1228 Retrieves default appearance string for annotation. @return decoded default appearance string or null if not found
1229 Retrieves masked string value from COSDictionary. @return decoded string or null if not found
1230 Retrieves the mask value of the annotation. @return decoded string representing the mask or null if not found
1231 Retrieves the subject of the annotation. @return Subject string or null if not found
1232 Retrieves the state of the annotation. @return decoded state string or null if not found
1233 Retrieves the state model of the annotation. @return State model as a string or null if not found
1234 Retrieves the caption string of an annotation. @return decoded caption string or null if not found
1235 Retrieves the rotation setting of the annotation. @return rotation value as string or null if not found
1236 Retrieves the mask value associated with the annotation. @return decoded mask string or null if not found
1237 Retrieves the date property from the digital signature dictionary. @return Date string or null if not found
1238 Retrieves OS information from PDF properties. @return OS string from dictionary or default value
1239 Retrieves and processes the subject distinguished name (DN) from a digital certificate. @return List of maps containing key-value pairs for each DN entry, or null if not found
1240 Retrieves the URL attribute from the certificate's COSDictionary. @return The URL as a string or null if not found
1241 Retrieves URL from dictionary. @return decoded URL string or null if not found
1242 Retrieves masked content from the signature dictionary. @return decoded string of masked content or null if not found
1243 Retrieves the location information from the digital signature. @return Location string or null if not found
1244 Retrieves the reason for the digital signature. @return Reason string or null if not found
1245 Retrieves contact info from signature dictionary. @return decoded contact information string or null if not found
1246 Retrieves the title of the outline item. @return Title string or null if not found
1247 Retrieves the field's text mask value. @return decoded string or null if not found or not a COSString
1248 Retrieves the fully qualified name of the field. @return The full field name or null if not found
1249 Retrieves the mask value of the field. @return Mask string or null if not found
1250 Retrieves default appearance string from DS attribute. @return decoded default appearance string or null if not found
1251 Retrieves masked value from PDF dictionary. @return decoded string or null if not found
1252 Retrieves or creates a COSName instance and converts it to a Calendar object. @param key the name string to process @return Calendar instance or null if conversion fails
1253 Retrieves a Calendar value for a given COSName key. @param key the COSName key to look up @param defaultValue default Calendar to return if key is not found @return Calendar instance or provided default if null
1254 Retrieves the creation date of the PDF document. @return Calendar object representing the creation date or null if not found
1255 Retrieves the modification date of the PDF document. @return Calendar object representing the modification date or null if not found
1256 Retrieves the creation date of the annotation. @return Calendar object representing the creation date or null if not found @throws IOException if an error occurs while accessing the underlying data
1257 Retrieves the creation date of the annotation. @return Calendar representing the creation date or null if not found
1258 Retrieves the date associated with the signature mask. @return Calendar instance representing the date or null if not available
1259 Retrieves a numeric value for a given key with a default. @param key the name string to process @return the numeric value associated with the key, or -1 if not applicable
1260 Retrieves a numeric value for a given key with a default of -1. @param key the key to look up in the dictionary @return the numeric value associated with the key, or -1 if not applicable
1261 Retrieves a numeric value from the dictionary for a given key. @param key the key to look up in the dictionary @param defaultValue the default value if the key is not found or not a number @return the numeric value associated with the key, or default if not applicable
1262 Decodes input stream using a list of filters. @param encoded InputStream containing encoded data @param filterList List of Filter objects to apply @param parameters COSDictionary with decoding parameters @param options DecodeOptions for additional settings @param results List to store DecodeResult objects @return RandomAccessRead buffer with decoded data @throws IOException if I/O error occurs
1263 Resolves the XRef trailer from a given startxref byte position. @param startxrefBytePosValue starting byte position of the trailer
1264 Retrieves or creates a COSName instance and fetches its float value. @param key the name string to process @return float value from dictionary or default value (-1)
1265 Retrieves a float value associated with a specified key. @param key the key to look up in the dictionary @return float value from dictionary or default value of -1 if not found
1266 Retrieves a float value associated with a given key. @param key the key to look up in the dictionary @param defaultValue default float value if key not found or not a COSNumber @return float value from dictionary or default value
1267 Retrieves the user unit of the PDF page. @return User unit as a float, defaulting to 1.0 if not positive
1268 Retrieves guideline width from PDF dictionary. @return float value representing guideline width or default of 1.0f
1269 Retrieves the opacity of the annotation. @return float value representing opacity (default is 1.0)
1270 Retrieves font weight from dictionary. @return font weight as float or default value if not found
1271 Retrieves the italic angle of the font. @return italic angle as a float value or 0 if not found
1272 Retrieves the ascent value of the font. @return Ascent value as a float or 0 if not found
1273 Retrieves the font descent value. @return float value representing font descent or default of 0
1274 Retrieves the leading value of the font. @return leading value as a float, defaulting to 0 if not found
1275 Retrieves and caches the cap height of the font. @return float value representing the cap height
1276 Retrieves the x-height of the font. @return x-height value as a float
1277 Retrieves stem vertical value from font descriptor. @return stem vertical width as float or 0 if not found
1278 Retrieves stem height value from font descriptor. @return stem height as float or default value if not found
1279 Retrieves the average width of characters in the font. @return average width as a float, defaulting to 0 if not found
1280 Retrieves the maximum width of the font. @return maximum width or 0 if not specified
1281 Retrieves the missing width value from the font descriptor. @return float representing the missing width or 0 if not found
1282 Retrieves gamma value from dictionary. @return gamma correction factor or default of 1.0 if not found
1283 Retrieves the x-step value of the tiling pattern. @return x-step as a float, defaulting to 0 if not found
1284 Retrieves the y-step value for the tiling pattern. @return y-step as a float, defaulting to 0 if not found
1285 Retrieves and clamps the sound volume. @return Clamped volume between -1 and 1
1286 Retrieves the lower-left corner y-coordinate of the line annotation. @return y-coordinate as a float value
1287 Retrieves the lower-left x-coordinate of the line annotation. @return float value representing the x-coordinate or default if not found
1288 Retrieves line length from annotation. @return float value representing line length or default if not found
1289 Retrieves opacity value of the annotation. @return float representing opacity (default is 1)
1290 Retrieves the border width from PDF border style dictionary. @return float value of border width or default 1 if not set
1291 Retrieves the duration of the transition effect. @return duration as a float value or default 1 if not found
1292 Retrieves transition mask value. @return float representing mask setting or default of 1
1293 Handles mask operations in PDF content stream. @param op Operator containing mask instructions @throws IOException if writing fails
1294 Processes text extraction for specified regions on a PDF page. @param page the PDF page to process @throws IOException if an I/O error occurs
1295 Retrieves and converts the role map from a PDF structure tree. @return Map containing role mappings or an empty map if none found
1296 Masks an object by adding it to the structure node. @param objectable object to be masked, must not be null
1297 Updates a child reference in the structure node. @param newKid new child element to insert @param refKid reference to the old child element
1298 Checks if an object is a valid child for the structure node. @param objectable the object to check @return true if the object is a valid child, false otherwise
1299 Masks user property if it has changed. @param value new value for the property
1300 Retrieves or creates the color space for a mask. @return PDColorSpace instance for the mask @throws IOException if an error occurs during creation
1301 Creates a PDPropertyList instance based on the dictionary type. @param dict COSDictionary to be processed @return PDPropertyList or its subclass based on the dictionary's type
1302 Retrieves line width from graphics state. @return Float value representing line width or null if not found
1303 Retrieves mask value from graphics state. @return Float representing mask setting or null if not found
1304 Retrieves the float value associated with the FL key. @return the float value or null if not found
1305 Retrieves the mask value from the graphics state. @return the float value of the mask or null if not found
1306 Retrieves the alpha constant for non-stroking operations. @return Float value representing the alpha constant, or null if not found
1307 Retrieves the non-stroking alpha constant. @return Float value representing the non-stroking alpha constant
1308 Constructs a new PDAnnotationLink instance. @param field COSDictionary containing annotation data
1309 Constructs a new PDAnnotationMarkup instance. @param dict the COSDictionary containing annotation data
1310 Constructs a new PDAnnotationPopup instance. @param field COSDictionary containing annotation data
1311 Initializes an unknown annotation from a COSDictionary. @param dic the COSDictionary containing annotation data
1312 Initializes a new PDAnnotationWidget instance with a given COSDictionary. @param field the COSDictionary containing annotation data
1313 Returns options for choice field with masking applied. @return List of masked option strings or empty list if none
1314 Retrieves values associated with the 'V' key. @return List of string representations of the value or an empty list if not applicable
1315 Retrieves default values for choice fields. @return List of default string values or empty list if none set
1316 Writes and manages PDF objects during document serialization. @param obj the COSBase object to process
1317 Serializes and writes a PDF COSBase object to the output stream. Handles various COS types, including strings, numbers, booleans, names, arrays, and dictionaries. @param output OutputStream for data output @param object COSBase object to serialize @param topLevel true if top-level serialization is required @throws IOException if an I/O error occurs during writing
