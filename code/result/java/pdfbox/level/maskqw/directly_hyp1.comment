1 Private constructor for OperatorName class.
2 Initializes an OperatorProcessor with a given PDFStreamEngine. @param context the PDF processing context
3 Constructs an empty COSBase instance.
4 Constructs a new COSUpdateState with the given update information. @param updateInfo the COSUpdateInfo object containing update details
5 Default constructor for DecodeOptions.
6 Initializes new DecodeOptions with specified source region. @param sourceRegion rectangle defining the area to decode
7 Initializes decode options with uniform subsampling. @param subsampling factor for both X and Y dimensions
8 Constructs a new Filter instance.
9 Initializes a PageExtractor with a document and page range. @param sourceDocument the PDF document to extract pages from @param startPage the starting page index (inclusive) @param endPage the ending page index (exclusive)
10 Initializes XrefParser with a COSParser. @param cosParser the COSParser instance to use
11 Initializes an XReference with a specified type. @param type the XReferenceType to be assigned
12 Initializes a new instance of ContentStreamWriter. @param out the OutputStream to write content to
13 Initializes cache creation with stable cache option. @param enableStableCache flag to enable or disable stable caching
14 Initializes a new PDDocumentCatalog. @param doc the PDDocument associated with this catalog @param rootDictionary the root dictionary of the catalog
15 Initializes document information with a dictionary. @param dic dictionary containing document metadata
16 Initializes a new PDDocumentNameDestinationDictionary with a given COSDictionary. @param dict the underlying COSDictionary to use
17 Initializes a new PDDocumentNameDictionary with a document catalog and a COS dictionary. @param cat the document catalog to associate with this dictionary @param names the COS dictionary containing the names entries
18 Constructs a new PDPage from a COSDictionary. @param pageDictionary dictionary containing page information
19 Initializes a new PDF page. @param pageDictionary dictionary representing the page @param resourceCache cache for resources used in the page
20 Initializes a new COSDictionaryMap with provided maps. @param actualsMap the actual values map @param dicMap the COS dictionary map
21 Initializes a new PDDictionaryWrapper with the given COSDictionary. @param dictionary the underlying COSDictionary to wrap
22 Initializes a PDNameTreeNode with a given dictionary. @param dict The COSDictionary to initialize the node with.
23 Initializes a PDNumberTreeNode with a dictionary and value class. @param dict the COSDictionary representing the node @param valueClass the class of values stored in the node
24 Initializes a PDPageLabelRange with a given dictionary. @param dict COSDictionary containing page label information
25 Constructs a PDRange from a COSArray. @param range array representing the range values
26 Initializes a PDRange with a given COSArray and index. @param range the COSArray containing range data @param index the starting index within the array
27 Initializes a new PDStream with the given COSStream. @param str the underlying COSStream object
28 Initializes PDMarkInfo with a COSDictionary. @param dic the COSDictionary to initialize with
29 Initializes a new instance with a COSDictionary. @param dictionary the COSDictionary to use
30 Initializes a PDObjectReference with a COSDictionary. @param theDictionary the underlying COSDictionary object
31 Initializes a PDStructureNode with a given COSDictionary. @param dictionary the underlying COSDictionary
32 Constructs a new instance of Revisions.
33 Initializes a new instance with the given COS dictionary. @param dict COSDictionary to initialize with
34 Initializes a PDBoxStyle with a given COSDictionary. @param dic COSDictionary representing the box style
35 Initializes an AccessPermission with default permissions.
36 Initializes an AccessPermission with specified permissions. @param permissions integer representing access permissions
37 Initializes a new instance with a given dictionary. @param d COSDictionary containing cryptographic filter settings
38 Initializes the RC4Cipher with a 256-element salt array.
39 Initializes an annotation with a given dictionary. @param a COSDictionary representing the annotation
40 Initializes FDFCatalog with a COSDictionary. @param cat COSDictionary representing the catalog
41 Initializes a new FDFDictionary with the given COSDictionary. @param fdfDictionary the underlying COS dictionary to use
42 Constructs an FDFField from a COSDictionary. @param f COSDictionary representing the field data
43 Constructs an FDFIconFit with a given COSDictionary. @param f dictionary representing icon fit settings
44 Constructs a new FDFJavaScript instance. @param javaScript COSDictionary containing JavaScript data
45 Constructs an FDFNamedPageReference with a COSDictionary. @param r COSDictionary representing the page reference
46 Constructs an FDFOptionElement with a given COSArray. @param o COSArray representing the option element
47 Initializes a new FDFPage with a given COSDictionary. @param p COSDictionary representing the page
48 Constructs a new FDFPageInfo with the given COSDictionary. @param p COSDictionary representing page information
49 Constructs an FDFTemplate with a given COSDictionary. @param t COSDictionary representing the template
50 Initializes a font descriptor with a given dictionary. @param desc COSDictionary containing font descriptor information
51 Initializes a new PDFontSetting with a COSArray. @param fs COSArray representing font settings
52 Initializes an empty line dash pattern. @param none @return none
53 Initializes a new BlendMode with specified parameters. @param name the blend mode name @param blendChannel the channel blending function @param blend the overall blending function
54 Initializes a PDColor with a pattern name and color space. @param patternName the name of the pattern @param colorSpace the color space to use
55 Initializes PDDeviceNAttributes with given COSDictionary. @param attributes the COSDictionary containing device N attributes
56 Constructs a PDDeviceNProcess with given attributes. @param attributes COSDictionary containing process attributes
57 Constructs a PDGamma from a COSArray. @param array the COSArray containing gamma values
58 Initializes PDTristimulus with a COSArray. @param array containing tristimulus values
59 Initializes PDTransparencyGroupAttributes with a COSDictionary. @param dic the COSDictionary to be used
60 Initializes optional content properties from a COS dictionary. @param props COS dictionary containing properties
61 Initializes a pattern with a given COSDictionary. @param dictionary the COSDictionary representing the pattern
62 Constructs a PDShading with the given COSDictionary. @param shadingDictionary the COSDictionary representing the shading
63 Initializes a new instance of PDExtendedGraphicsState. @param dictionary COSDictionary containing graphics state properties @param resourceCache ResourceCache for managing resources
64 Initializes a new PDSoftMask with given dictionary and resource cache. @param dictionary COSDictionary containing mask properties @param resourceCache ResourceCache for managing resources
65 Initializes a PDAction with a COSDictionary. @param a COSDictionary representing the action
66 Private constructor to prevent instantiation of utility class.
67 Initializes PDAdditionalActions with a dictionary. @param a COSDictionary containing action data
68 Initializes additional actions from a dictionary. @param a COSDictionary containing action settings
69 Initializes a new instance with a given dictionary. @param a COSDictionary containing action data
70 Initializes additional form field actions. @param a dictionary containing action details
71 Initializes additional page actions from a dictionary. @param a COSDictionary containing action definitions
72 Initializes a PDTargetDirectory with a given COSDictionary. @param dictionary the COSDictionary to use
73 Initializes a new PDURIDictionary with the given COSDictionary. @param dictionary the underlying COSDictionary to use
74 Initializes PDWindowsLaunchParams with given dictionary. @param p COSDictionary containing parameters
75 Constructs a PDAppearanceCharacteristicsDictionary from a COSDictionary. @param dict the underlying COS dictionary
76 Constructs a PDAppearanceDictionary from a COSDictionary. @param dictionary the underlying COSDictionary to use
77 Constructs a PDAppearanceEntry with a given COSDictionary. @param entry the COSDictionary representing the appearance entry
78 Initializes a border effect dictionary from a COSDictionary. @param dict the COSDictionary representing the border effect
79 Initializes a border style dictionary from a COSDictionary. @param dict the underlying COSDictionary to use
80 Constructs a PDExternalDataDictionary from a COSDictionary. @param dictionary the underlying COSDictionary
81 Initializes a CloudyBorder with specified parameters. @param stream content stream for drawing @param intensity visual intensity of the border @param lineWidth width of the border line @param rect bounding rectangle for the border
82 Initializes a PDPropBuild with a given COSDictionary. @param dict the COSDictionary to be used
83 Initializes PDPropBuildDataDict with a COSDictionary. @param dict the underlying COSDictionary
84 Initializes PDSeedValue with a COSDictionary. @param dict the COSDictionary to initialize with
85 Initializes a new PDSeedValueCertificate with the given COSDictionary. @param dict the COSDictionary to use
86 Initializes a PDSeedValueMDP with a given COSDictionary. @param dict the COSDictionary to initialize with
87 Initializes PDSeedValueTimeStamp with a given COSDictionary. @param dict the COSDictionary to be used
88 Initializes a PDSignature with a given COSDictionary. @param dict the COSDictionary to initialize the signature with
89 Initializes a new instance of SignatureOptions. Sets default page number to 0.
90 Initializes PDFTemplateCreator with a builder. @param templateBuilder PDFTemplateBuilder instance to use
91 Private constructor to prevent instantiation of utility class.
92 Constructs a PDField with specified parameters. @param acroForm the form containing the field @param field the COSDictionary representing the field @param parent the parent non-terminal field
93 Initializes a new PDXFA resource. @param xfaBase the underlying COS base object
94 Initializes a new PDMeasureDictionary with the given COSDictionary. @param dictionary the underlying COSDictionary to use
95 Initializes a new instance with the given COSDictionary. @param dictionary the COSDictionary to use
96 Constructs a PDViewportDictionary with a given COSDictionary. @param dictionary the underlying COSDictionary to use
97 Constructs a PDThread with a given dictionary. @param t COSDictionary representing the thread
98 Constructs a PDThreadBead with a given COSDictionary. @param b the COSDictionary representing the thread bead
99 Initializes PDViewerPreferences with given dictionary. @param dic PDF dictionary containing viewer preferences
100 Initializes PageDrawerParameters for PDF rendering. @param renderer PDFRenderer instance @param page PDPage to be rendered @param subsamplingAllowed flag for allowing image subsampling @param destination RenderDestination for output @param renderingHints RenderingHints for customization @param imageDownscalingOptimizationThreshold threshold for image downscaling optimization
101 Wraps a TextPosition object. @param position TextPosition to be wrapped
102 Initializes a 3x3 identity transformation matrix.
103 Initializes a Matrix with a source array. @param src source float array representing matrix elements
104 Initializes a 3x3 transformation matrix. @param a, b, c, d, e, f matrix elements
105 Private constructor to prevent instantiation of utility class.
106 Constructs a new instance of PDFStreamEngine.
107 Applies mask operation using processor. @param op OperatorProcessor instance containing operation details
108 Sets the terminator character for masking. @param term character code for termination (must be 118-126 excluding 'z')
109 Sets the number of pages for splitting. @param split number of pages, must be greater than zero
110 Sets the starting page number. @param start the starting page index, must be greater than zero
111 Sets the end page. @param end page number, must be greater than zero
112 Sets leniency mode. @param lenient true for lenient parsing, false otherwise @throws IllegalArgumentException if called after initial parse
113 Initializes CompressParameters with object stream size. @param objectStreamSize the size of the object stream, must be non-negative
114 Initializes PDResources with dictionaries and caches. @param resourceDictionary PDF resource dictionary @param resourceCache shared resource cache @param directFontCache cache for direct fonts Throws IllegalArgumentException if any parameter is null
115 Sets the blending mode. @param blendMode the blending mode to apply, must not be null
116 Initializes a PDFieldTree with an AcroForm. @param acroForm the root AcroForm object, cannot be null
117 Returns the length of the COSStream. Throws IllegalStateException if there's an open OutputStream. @return Length of the stream as a long
118 Initializes a new instance of PDFMergerUtility with an empty list of sources.
119 Initializes a COSWriterObjectStream with a given compression pool. @param compressionPool pool used for managing compression resources
120 Constructs a new instance of PublicKeyProtectionPolicy.
121 Initializes text clippings list.
122 Masks a file by calling m1 on it. @param source File to be masked @throws FileNotFoundException if the file is not found
123 Masks data from a given source. @param source RandomAccessRead object containing input data
124 Masks a given name using an internal instruction. @param name the name to be masked
125 Masks an instruction sequence. @param child InstructionSequence to be masked
126 Adds a public key recipient. @param recipient the recipient to add
127 Masks a region with a rectangle. @param regionName name of the region to mask @param rect rectangle defining the mask area
128 Sets the trailer for the current XRef. @param trailer dictionary containing trailer information
129 Retrieves a COSBase object from the pool using a key. @param key unique identifier for the COSBase object @return COSBase object or null if not found
130 Retrieves an operator by name. @param operatorName the name of the operator to find @return Operator object or null if not found
131 Converts Unicode sequence to font glyph name. @param unicodeSequence Unicode character sequence @return Glyph name or ".notdef" if not found
132 Handles exceptions based on operator and operands. Logs specific exceptions; rethrows others.
133 Retrieves the current mask state from the graphics stack. @return PDGraphicsState object representing the mask state
134 Calls m1 on graphicsStack.
135 Returns mask value from graphics stack. @return integer mask value
136 Applies 2D transformation to coordinates. @param x original x-coordinate @param y original y-coordinate @return transformed Point2D.Float
137 Decreases the current level by one. Logs an error if level goes below zero.
138 Masks a value using instruction m1. @param value the integer value to mask
139 Checks if COSStream is open and throws IOException if closed.
140 Throws an exception indicating reset operation is unsupported. @throws IOException with message "Reset is not supported"
141 Throws an exception indicating reset operation is unsupported. @throws IOException always thrown with message "reset is not supported"
142 Retrieves encryption details of the parsed PDF document. @throws IOException if the document is not parsed yet @return PDEncryption object containing encryption information
143 Retrieves access permissions. @throws IOException if document is not parsed @return AccessPermission object
144 Constructs an InvalidPasswordException with a specified detail message. @param message the detail message
145 Initializes an Operator object. @param aOperator the operator string, must not start with '/' @throws IllegalArgumentException if the operator starts with '/'
146 Returns string representation of PDFOperator. @return formatted operator string
147 Returns string representation of COSArray. @return formatted string including array contents
148 Returns string representation of COSObject. @return formatted string with object details
149 Retrieves a filter by name. @param filterName the name of the filter to retrieve @return the Filter object associated with the given name @throws IOException if the filter is not found or invalid
150 Checks if any operand is an instance of given class. @param operands list of COSBase objects @param clazz class to check against @return true if any operand matches the class, false otherwise
151 Masks a float value using instruction m1. @param value the float value to mask
152 Sets the image width and updates formatter rectangle. @param width the new width for the image @return PDVisibleSignDesigner instance with updated settings
153 Sets image height and updates rectangle parameters. @param height desired image height @return this PDVisibleSignDesigner instance
154 Calculates distance between two points. @param ps starting point @param pe ending point @return Euclidean distance
155 Computes the determinant of a 2x2 matrix formed by points. @param p point to evaluate @param p1 first corner point @param p2 second corner point @return determinant value indicating orientation
156 Initializes a PDMarkedContent object. @param tag the content tag name @param properties dictionary containing content properties
157 Returns the mask string for pattern. @return Mask string for pattern
158 Returns the string representation of SHADING. @return String value of SHADING
159 Masks a function by retrieving and converting its name. @return Masked function name or empty string if not applicable
160 Masks functionality by invoking helper method. @throws IOException if an I/O error occurs
161 Masks terminal fields in a list. @param fields list of PDField objects to process
162 Checks if all coordinates (wpX, wpY, wpZ) are zero. @return true if all coordinates are zero, false otherwise
163 Generates an array mapping for shading. @return int array representing the mapping @throws IOException if an I/O error occurs
164 Generates a mask array based on shading calculations. @return int array representing the mask @throws IOException if an I/O error occurs during processing
165 Initializes and returns the code table. @return List of byte arrays representing the code table
166 Masks data from list of RandomAccessRead sources. @param sourcesList list of source objects to process
167 Retrieves an object from the underlying collection. @param index position of the object in the collection @return COSBase object at the specified index
168 Retrieves element at specified index. @param index position of the element to retrieve @return element at the given index
169 Calls m1 method on objects. @return result of objects.m1()
170 Delegates the call to the underlying implementation. @return result from the actual method invocation
171 Returns mask value from recipients. @return integer mask value
172 Delegates to objects.m1(). @return Result of objects.m1()
173 Delegates call to actual.m1(). @return result of actual.m1()
174 Masks public key recipient. @param recipient PublicKeyRecipient to be masked @return true if masking is successful
175 Returns an iterator over COSBase objects. @return Iterator of COSBase elements
176 Returns an iterator over elements of type E. Delegates to the underlying collection's iterator. @return Iterator over elements of type E
177 Returns an iterator over public key recipients. @return Iterator of PublicKeyRecipient objects
178 Returns a list of COSBase objects. @return List containing COSBase objects
179 Masks objects using COSName and collects results. @return List of masked object names
180 Masks strings in a list based on certain criteria. @return List of masked strings
181 Converts Boolean to COSBoolean using helper method. @param value Boolean object to convert @return COSBoolean representation of the input
182 Masks the input value using a specific function. @return masked string representation of the value
183 Writes boolean value as bytes to OutputStream. @param output stream to write to @throws IOException if writing fails
184 Writes NULL_BYTES to the output stream. @param output OutputStream to write to @throws IOException if an I/O error occurs
185 Writes byte array to output stream. @param data byte array to write @throws IOException if writing fails
186 Returns entries of the internal map. @return set of map entries
187 Compares two entries and returns true if they differ. @param oldEntry the original entry to compare @param newEntry the new entry to compare @return true if entries are different, false otherwise
188 Delegates to items' m1 method. @return result of items.m1()
189 Retrieves item by key. @param key unique identifier for the item @return COSBase object associated with the key or null if not found
190 Retrieves a set of COSNames. @return Set containing COSName objects
191 Applies an action to each item. @param action BiConsumer defining the action to apply
192 Returns a collection of COSBase objects. @return Collection of COSBase elements
193 Masks dictionary items. @param dict input COSDictionary to mask
194 Checks if an item with the given name exists. @param name the COSName of the item to check @return true if the item exists, false otherwise
195 Masks spaces in input string. @param s input string to process @return array of strings with masked spaces
196 Converts a string to an integer. @param token string representation of the integer @return integer value or throws NumberFormatException if invalid
197 Returns masked function type string. @return Concatenated string of "FunctionType" and result from m1()
198 Sets the encryption key length. @param l key length in bits; must be 40, 128, or 256
199 Sets the starting page value. @param startPageValue 1-based index for the starting page
200 Sets the end page value. @param endPageValue the last page number, must be greater than 0
201 Initializes a new BruteForceParser with given COSDocument and COSParser. @param cosDocument the COSDocument to parse @param cosParser the COSParser instance @throws IOException if an I/O error occurs during initialization
202 Initializes a new XrefTrailerObj with default settings.
203 Initializes PDResources with a COSDictionary. @param resourceDictionary the dictionary containing resources
204 Initializes PDResources with a dictionary and cache. @param resourceDictionary the COSDictionary containing resources @param resourceCache the ResourceCache for caching purposes
205 Initializes a map with operator names and their corresponding enum values.
206 Initializes a PDAcroForm with a document and a dictionary. @param doc PDDocument containing the form @param form COSDictionary representing the form data
207 Returns mask value from byte position map. @return integer mask value
208 Retrieves or creates a COSObject from the pool. @param key unique identifier for the COSObject @return COSObject instance or null if key is null
209 Updates cross-reference table with provided values. @param xrefTableValues map of object keys to their positions
210 Converts a hexadecimal string to a float. @param token hexadecimal string representation of a float @return float value represented by the hex string
211 Masks float value to prevent overflow and underflow. @param floatValue input floating-point number @return masked float value
212 Determines text direction based on matrix values. @return Direction in degrees (0, 90, 180, 270)
213 Compares object with current float value. @param o object to compare @return true if object is COSFloat with matching float value, false otherwise
214 Calls Float's m1 method with value. @param value input float value @return result of Float.m1(value)
215 Masks the value if it's in scientific notation. @return masked value as String
216 Writes "null" followed by a space to the OutputStream. @param output target OutputStream to write to
217 Constructs a COSIncrement with specified origin. @param incrementOrigin update information for the increment
218 Initializes a new instance of PDFCloneUtility. @param dest destination PDF document to clone into
219 Initializes the resource cache with stable cache option. @param enableStableCache flag to enable or disable stable caching
220 Checks mask condition. @return true if condition met, false otherwise
221 Checks if object is processed or valid. @param base COSBase object to check @return true if object is processed or valid, false otherwise
222 Checks if a COSBase object is excluded. @param base the COSBase object to check @return true if excluded, false otherwise
223 Recursively processes a COSBase object. @param object the COSBase object to process
224 Marks a COSObject as processed. @param base the COSObject to be marked
225 Adds TrueTypeFont to the list of fonts to close. @param ttf TrueTypeFont object to be managed
226 Extracts COS dictionaries from form field widgets. @param fields list of PDF document fields @return set of COS dictionaries representing widget annotations
227 Initializes COSInputStream with input stream and decode results. @param input source input stream @param decodeResults list of decoding results
228 Initializes ASCII85 input stream. @param is underlying input stream
229 Initializes a CCITT Fax Decoder stream. @param stream input stream containing fax data @param columns number of columns in the fax image @param type compression type (CCITT) @param options additional decoding options @param byteAligned flag indicating if data is byte-aligned
230 Returns a COSInteger for the given value within bounds. @param val long integer value to be converted @return COSInteger object representing the value
231 Checks if object is COSInteger with matching m1 value. @param o object to check @return true if conditions are met, false otherwise
232 Returns a string representation of the COSInt with its value. @return formatted string including the class name and value
233 Writes masked value to output stream. @param output destination OutputStream @throws IOException if an I/O error occurs
234 Retrieves value by key from an underlying map. @param key unique identifier for the value @return value associated with the key, or null if not found
235 Retrieves aliased font name. @param fontName original font name @return aliased font name or original if no alias exists
236 Registers an alias for a font name. @param alias the alias to register @param baseName the base font name associated with the alias
237 Masks export values based on certain conditions. @return List of masked export values
238 Delegates to 'm1' method of 'name'. @return result of 'name.m1()'
239 Writes a masked comment to output stream. @param comment text to be written, must not contain newlines @throws IOException if an I/O error occurs
240 Writes a newline character to the output stream. @throws IOException if an I/O error occurs
241 Converts a string to a hexadecimal character array. @param text input string to be converted @return char array representing the hexadecimal values of the input string
242 Constructs a COSObjectKey with given object and generation numbers. @param num object number, must be non-negative @param gen generation number, must be non-negative @param index stream index
243 Calls Long's m1 method with numberAndGeneration. @return result of Long.m1 invocation
244 Computes a value based on array elements. @return computed float value or single[0] if condition fails
245 Masks a value based on conditions. @return masked float value
246 Initializes a COSOutputStream with specified filters and parameters. @param filters list of filters to apply @param parameters dictionary containing stream parameters @param output underlying OutputStream @param streamCache cache for random access streams @throws IOException if an I/O error occurs during initialization
247 Initializes ASCII85OutputStream with given output stream. @param out underlying OutputStream to write data
248 Initializes a new instance of COSStandardOutputStream. @param out underlying OutputStream to write to
249 Initializes a new COSStandardOutputStream. @param out underlying output stream @param position initial position in the stream
250 Closes resources and caches in a controlled manner. @throws IOException if an I/O error occurs during closing
251 Closes and nullifies stream cache and related resources. @throws IOException if an I/O error occurs during closing
252 Masks byte array using XOR operation. @param bytes input byte array to be masked @return masked byte array
253 Masks data from input and writes to output. @throws IOException if an I/O error occurs
254 Converts byte array to ASCII string. @return ASCII string representation of bytes
255 Checks if origin document state is valid and meets condition. @return true if originDocumentState is not null and its m1() returns true, false otherwise
256 Converts byte array to string using a code-to-unicode mapping. @param bytes input byte array @return resulting string after conversion
257 Masks function name by reading characters until a specific pattern is found. @return Masked function name as a String @throws IOException if an I/O error occurs while reading from the source
258 Masks text by converting characters to byte codes. @param text input string to be masked @return byte array representing masked text
259 Checks if a character is masked. @param character the character to check @return true if the character is masked, false otherwise
260 Checks if the map contains the specified key. @param key the key to check @return true if the map contains the key, false otherwise
261 Checks if font name is an alias. @param fontName the font name to check @return true if font name is an alias, false otherwise
262 Returns a mapping of code to name. @return Map where key is code and value is corresponding name
263 Returns an inverted map of string to integer. @return Map with keys and values swapped
264 Placeholder method that throws an UnsupportedOperationException. @param flag boolean parameter (not used)
265 Reads a byte from an Ascii85 encoded stream. @return next byte or -1 if end of stream @throws IOException if invalid data is encountered
266 Resets state and calls superclass method. @throws IOException if an I/O error occurs
267 Processes input byte and updates output. @param b input byte to process @throws IOException if an I/O error occurs
268 Processes and outputs data with line breaks. @throws IOException if an I/O error occurs
269 Pads the input password with encryption padding. @param password byte array of the user's password @return byte array containing the padded password
270 Ends text mode and writes output. Logs a warning if endText() wasn't called. @throws IOException on I/O error
271 Masks data using OutputStream. @param xmp input byte array to be masked
272 Determines if a page number is at a mask boundary. @param pageNumber current page number @return true if page is at a mask boundary, false otherwise
273 Throws exception as JPX encoding is not supported. @param input source InputStream @param encoded destination OutputStream @param parameters encoding parameters
274 Throws UnsupportedOperationException as method is not implemented. @param t map to be processed (not used)
275 Throws an exception as the class is immutable. @param value float value to be masked (unused)
276 Throws an exception as the class is immutable. @param value unused parameter
277 Throws an exception as the class is immutable. @param value the float value to be masked (not used)
278 Throws UnsupportedOperationException as the class is immutable. @param value float value to be masked (not used)
279 Placeholder method that throws an exception indicating it's not implemented.
280 Placeholder for mask creation. @param signatureText text to be masked @return PDVisibleSignDesigner object (not yet implemented)
281 Throws exception as mask operations are unsupported. @param value input string value
282 Retrieves and validates the deflate level for compression. @return Compression level between -1 and Deflater.BEST_COMPRESSION
283 Delegates call to actual.m1. @param o the object to process @return result of actual.m1 invocation
284 Initializes a new FlateFilterDecoderStream. @param inputStream source input stream @throws IOException if an I/O error occurs while reading the zlib header
285 Calls m1 on inflater and then invokes superclass's m2. @throws IOException if an I/O error occurs
286 Initializes PDF structure and logs creation.
287 Sets the image and updates dimensions. @param image BufferedImage to process
288 Searches for a pattern in the code table. @param codeTable list of byte arrays representing codes @param pattern byte array to search for @return index of matching code or -1 if not found
289 Applies PNG filter based on predictor type. @param predictor filter type identifier @param colors number of color channels @param bitsPerComponent bits per color component @param columns number of image columns @param actline current row data to be filtered @param lastline previous row data for filtering
290 Checks if a COSObjectKey is present in the pool. @param key the COSObjectKey to check @return true if key is in the pool, false otherwise
291 Registers a security handler with a protection policy. @param name unique identifier for the security handler @param securityHandler class implementing SecurityHandler interface @param protectionPolicy class implementing ProtectionPolicy interface @throws IllegalStateException if the handler name is already registered
292 Checks if the given name is masked. @param name the name to check @return true if name is masked, false otherwise
293 Checks if a code is masked. @param code the code to check @return true if code is masked, false otherwise
294 Escapes XML special characters in input string. @param input original string to be processed @return escaped string safe for XML use
295 Sets the bounding box for a PDF element. @param bbox rectangle defining the bounds or null to clear it
296 Converts a hexadecimal string to a byte array. @param s input hexadecimal string @return byte array representation of the input string
297 Closes resources and throws an exception if any fail. @throws IOException if closing fails
298 Masks document and FDF source if not already masked. @throws IOException if an I/O error occurs during masking
299 Returns the COSDictionary associated with the function. @return COSDictionary object, either from functionStream or directly
300 Initializes a PDXObject with a given stream and subtype. @param stream the PDStream associated with this object @param subtype the COSName representing the subtype of the XObject
301 Returns the underlying COSStream. @return COSStream object
302 Retrieves metadata stream from document. @return COSStream containing metadata or null if not found
303 Sets metadata in the stream. @param metadata COSStream containing metadata to be set
304 Checks if any annotation matches the given widget. @param annotations list of PDAnnotation objects @param widget PDAnnotationWidget object to match against @return true if a matching annotation is found, false otherwise
305 Checks equality with another annotation. @param o object to compare @return true if equal, false otherwise
306 Returns the set of keys from the underlying collection. @return Set of keys
307 Checks if a signature field matches any in the iterator. @param fieldIterator iterator over PDField objects @param signatureField PDSignatureField to match @return true if a match is found, false otherwise
308 Returns all values from the underlying collection. @return Collection of values
309 Initializes a new instance of BaseParser with a PDF source. @param pdfSource the RandomAccessRead object representing the PDF file
310 Calls m2 with result from source.m1(). @throws IOException if an I/O error occurs @return true if successful, false otherwise
311 Adds an XRef entry for a given object key and offset. @param objKey the COSObjectKey to add @param offset the byte offset of the object in the file
312 Maps code to name and vice versa. @param code unique identifier @param name associated with the code
313 Calls m2 with source's m1 result. @throws IOException if an I/O error occurs
314 Masks a line by checking and processing conditions. @param linebreak the line to be processed @return true if masking is successful, false otherwise
315 Processes input parameter and checks byte sequence. @param bracesParameter input integer parameter @return processed integer or original if conditions not met
316 Checks if character is masked by either function. @param c character to check @return true if masked, false otherwise
317 Reads and masks characters from the source until a condition fails. @throws IOException if number exceeds MAX_LENGTH_LONG or read error occurs @return StringBuilder containing masked characters
318 Masks a buffer's content. @param buffer ByteArrayOutputStream containing data to mask @return masked string representation of the buffer
319 Reads a character and checks it against the expected value. @param ec expected character to match @throws IOException if characters do not match or an I/O error occurs
320 Calls m2 with result from source.m1(). @throws IOException if an I/O error occurs
321 Parses and retrieves the start XRef value from a PDF file. @return the start XRef position or -1 if not found @throws IOException if an I/O error occurs during parsing
322 Finds the last EOF marker in the source. @return The offset of the last EOF marker or Long.MAX_VALUE if not found @throws IOException if an I/O error occurs during processing
323 Searches for XREF table offsets and adds them to a list. @return List of Long containing offsets or empty if none found
324 Determines number of color components. @return int value representing the number of color components @throws IOException if an I/O error occurs during processing
325 Searches for XRef stream offsets and fixes references. @return List of fixed offsets or empty list if none found
326 Retrieves cross-reference trailer information. @return Map of COSObjectKey to Long representing object numbers
327 Reads and processes the file trailer to find the xref offset. @return xref offset within the file @throws IOException if an I/O error occurs or markers are missing
328 Processes input stream to detect endstream or endobj markers. @param out output stream for processed content @return length of processed content @throws IOException if an I/O error occurs
329 Initializes a new instance of ToUnicodeWriter with mode set to 0.
330 Sets a label for a range of pages starting from startPage. @param startPage the starting page index (must be >= 0) @param item the page label range to apply
331 Masks text with CID. @param cid character identifier, must be between 0 and 65535 @param text string to mask, cannot be null or empty
332 Checks for binary data and logs if non-binary content found. @return true if no binary data detected, false otherwise
333 Checks source condition. @throws IOException if I/O error occurs @return true if condition met, false otherwise
334 Masks an XReferenceEntry if already processed. @param entry the XReferenceEntry to process
335 Computes mask values from stream data. @return int array containing computed mask values
336 Initializes object pool with highest XRef object number. @param highestXRefObjectNumber the highest XRef object number to set
337 Retrieves COSDictionary from XRef map. @return COSDictionary object or null if conditions not met
338 Retrieves COSDictionary from XREF map. @return COSDictionary or null if conditions are not met
339 Retrieves object numbers referencing a given object. @param objstmObjNr the object number to check references for @return set of object numbers that reference the given object, or null if trailer is unresolved
340 Returns a masked value. @return long representing the masked result
341 Returns a masked value. @return long representing the masked result from nested methods
342 Generates a string representation of FreeReference. @return formatted string with key, nextFreeObject, and type information
343 Returns the result of calling m1(). @return The value returned by m1()
344 Returns the result of calling m2 on the object returned by m1. @return The result of m1().m2()
345 Returns a string representation of the object. @return formatted string with object details
346 Returns the masked value from nested methods. @return long value obtained by calling m2 on the result of m1()
347 Returns the mask value from function m1. @return long value representing the mask
348 Generates a string representation of the ObjectStreamEntry. @return formatted string with key, type, index, and parent information
349 Writes bytes to output stream. @param b byte array containing data to write @param off starting offset in the byte array @param len number of bytes to write @throws IOException if an I/O error occurs
350 Calls m1 with false and processes m2 on output. @param b integer parameter for processing @throws IOException if an I/O error occurs
351 Masks data based on condition. Throws IOException if an I/O error occurs.
352 Checks if compressParameters is non-null and calls its m1 method. @return true if both conditions are met, false otherwise
353 Masks an XReferenceEntry. @param entry the entry to be masked
354 Writes indirect object reference to OutputStream. @param output stream to write to @param indirectReference COSObjectKey of the object
355 Masks reference entries into ranges. @param xRefEntriesList list of XReferenceEntry objects @return array of Long representing masked ranges
356 Creates and returns an MD5 MessageDigest instance. @return MessageDigest object for MD5 hashing
357 Initializes SHA-1 MessageDigest instance. @return MessageDigest object for SHA-1 algorithm @throws RuntimeException if SHA-1 algorithm is unavailable
358 Creates a SHA-256 MessageDigest instance. @return MessageDigest object for SHA-256 hashing @throws RuntimeException if SHA-256 algorithm is not available
359 Masks FDF document and processes objects for encryption. @param doc FDFDocument to be processed
360 Delegates call to retrieve an object from the pool. @return the retrieved object's identifier
361 Returns a list of prepared COSObject keys. @return List of COSObjectKey objects
362 Updates mapping for a code and its corresponding name. @param code unique identifier @param name associated name for the code
363 Masks specified region by name. @param regionName name of the region to mask
364 Formats decimal with specified number of fraction digits. @param fractionDigitsNumber number of fraction digits to use
365 Initializes a new content stream for PDF document. @param document the PDDocument to write to @param outputStream where the content will be written @param resources resources for the content stream
366 Computes a float value based on an input code. @param code input integer code @return computed float value or default if not found
367 Returns the standard value if not null, otherwise returns the default value. @param standardValue the primary value to check @param defaultValue the fallback value @return the non-null value between standardValue and defaultValue
368 Increases image dimensions by a percentage. @param percent increase in size as a percentage @return PDVisibleSignDesigner instance with updated dimensions
369 Returns the width of the image. @return image width as a float
370 Returns the height of the image. @return image height as a float
371 Rotates and adjusts image position based on rotation angle. @return PDVisibleSignDesigner instance with updated transformations
372 Creates an AffineTransform from an array. @return AffineTransform object constructed from the array elements
373 Encodes a string into a byte array. @param text input string to encode @return encoded byte array @throws IOException if encoding fails
374 Masks Unicode code point to its name. @param codePoint Unicode code point value @return Name of the Unicode character or ".notdef" if unknown
375 Retrieves render state by COSName. @param state COSName representing the state @return RenderState object or null if state is null
376 Retrieves BaseState based on COSName. @param state COSName representing the state @return BaseState corresponding to the input or default ON if null
377 Processes a word to find and write its glyphs. @param gsubWorker worker for applying GSUB rules @param out stream to write the glyphs @param font font containing glyph information @param word input text to process @return list of glyph IDs after GSUB processing
378 Constructs a new PDF document. @param doc underlying COSDocument object @param source RandomAccessRead source of the PDF @param permission AccessPermission for the PDF
379 Initializes a new FDFDocument from a COSDocument and source. @param doc the underlying COSDocument @param source the RandomAccessRead source for the FDF data
380 Delegates call to actual implementation. @return result from actual.m1()
381 Delegates array processing to another method. @param a input array of generic type X @return processed array of generic type X
382 Delegates call to actual.m1. @param o input object @return result of actual.m1
383 Delegates to actual.m1 to check collection. @param c the collection to check @return true if condition met in actual.m1, false otherwise
384 Processes collection items, removing matches from array. @param c collection of COSObjectable items @return true if processing is successful
385 Filters and processes items in collection. @param c collection of COSObjectable items @return result of processing by actual object
386 Delegates call to actual.m1. @param o object to be processed @return result of actual.m1
387 Delegates call to actual.m1(). @return Result of actual.m1()
388 Delegates call to actual.m1. @param o object to be passed @return result of actual.m1
389 Returns a list iterator over the elements in this collection. @return a ListIterator over the elements of this collection
390 Returns a list iterator over the elements in this list starting at the specified position. @param index index of the first element to be returned from the list iterator (by a call to next) @return a ListIterator of the elements in this list starting at the specified position
391 Retrieves elements from index 'fromIndex' to 'toIndex'. @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive) @return list of elements within the specified range
392 Delegates call to actuals.m1. @param value object to be processed @return result of actuals.m1
393 Returns entry set of actuals. @return Set of map entries from actuals
394 Returns a set of masked aliases. @return Set containing masked alias strings
395 Delegates call to actuals' m1 method. @return result from actuals.m1()
396 Creates a COSObjectable from a COSBase. @param base the input COSBase object @return COSObjectable created from the base object @throws IOException if an error occurs during creation
397 Converts a number to a letter mask. @param num input number @return String representation of the letter mask
398 Returns mask value from labels. @return integer mask value
399 Creates a page label range starting from a given page. @param startPage the starting page number @return PDPageLabelRange object representing the page range
400 Returns a navigable set of labels. @return NavigableSet containing label integers from m1()
401 Returns an array of floats from mask operation. @return float array result of m1 method
402 Initializes a PDColor with specified components and colorspace. @param components array of color components @param colorSpace the colorspace to use
403 Applies mask based on color space. @return float array representing masked components
404 Initializes a CoordinateColorPair with a point and a color. @param p the 2D coordinate point @param c the color array (RGB values)
405 Generates a formatted string representing function type. @return String with concatenated values from methods m1, m2, and m3
406 Calculates boundary values from corner coordinates. @return int array containing calculated boundaries
407 Retrieves a number from the stack. @return Number object from the stack
408 Retrieves an integer value from the stack. @return masked integer value from the stack's m1 method
409 Retrieves a masked value from the stack. @return The masked float value from the stack.
410 Masks an instruction with a boolean value. @param value the boolean mask to apply
411 Initializes execution context with given operators. @param operatorSet set of available operators
412 Initializes and returns a list of compiled patterns. @return List of compiled regex patterns
413 Initializes encoding map with MAC expert table entries.
414 Initializes MacRomanEncoding with character mappings.
415 Initializes standard character encodings. Iterates over encoding table and adds entries to the encoding map.
416 Initializes symbol encoding by iterating over a table. Adds each character code and name to the encoding map.
417 Initializes WinAnsiEncoding with standard and default mappings.
418 Initializes the Zapf Dingbats encoding by populating a map.
419 Masks elements of an array. @param array input array of objects @return string representation of masked array
420 Masks float array elements. @param array input float array @return string representation of masked array
421 Masks a given text position. @param text TextPosition to be masked
422 Masks content using specified PDMarkedContent. @param markedContent content to be masked
423 Masks an XObject. @param xobject the XObject to be masked
424 Sets printing permission. @param allowPrinting flag to enable or disable printing
425 Sets modification permissions. @param allowModifications flag to enable or disable modifications
426 Masks extraction based on permission. @param allowExtraction flag to enable or disable extraction
427 Modifies annotation permission based on input. @param allowAnnotationModification flag to enable or disable annotation modification
428 Toggles form filling permission. @param allowFillingInForm flag to enable or disable form filling
429 Masks extraction based on read-only status. @param allowExtraction flag to enable or disable extraction
430 Sets document assembly permission. @param allowAssembly flag to enable or disable assembly
431 Updates print setting for faithful data. @param canPrintFaithful flag to enable or disable printing
432 Checks if PRINT_BIT is masked. @return true if PRINT_BIT is masked, false otherwise
433 Checks if modification bit is set. @return true if modification bit is set, false otherwise
434 Masks a bit using m1 function. @return result of masking operation
435 Checks if annotations can be modified. @return true if annotations are modifiable, false otherwise
436 Checks if form bit is set. @return true if form bit is set, false otherwise
437 Checks if accessibility bit is set. @return true if accessibility bit is enabled, false otherwise
438 Checks document assembly status. @return true if document is assembled, false otherwise
439 Checks if FAITHFUL_PRINT_BIT is set. @return true if bit is set, false otherwise
440 Retrieves a key from the keystore. @return Key object if found, otherwise throws KeyStoreException
441 Returns a SecureRandom instance. @return existing customSecureRandom if set, otherwise a new SecureRandom instance
442 Initializes encryption with a key. @param key byte array of length 1-32 bytes
443 Encrypts a byte using a modified stream cipher. @param aByte the byte to encrypt @param output the OutputStream for encrypted data @throws IOException if an I/O error occurs
444 Masks diacritics in a string; normalizes otherwise. @param str input string to process @return masked or normalized string
445 Checks if a Unicode code point matches any of 10 mask conditions. @param codepoint Unicode code point to check @return true if any condition is met, false otherwise
446 Determines mask value based on key length and policy. @return int representing mask value
447 Returns a singleton instance of the Bouncy Castle provider. @return Provider object initialized with Bouncy Castle
448 Extracts text content from child nodes of a given element. @param node the parent XML element @return concatenated text content of all child nodes
449 Masks and outputs given text. @param text input string to be masked
450 Retrieves or parses a CMap by name. @param cMapName the name of the CMap to fetch or parse @return the CMap object @throws IOException if an error occurs during parsing
451 Parses a CMap from the given RandomAccessRead. @param randomAccessRead source of data to parse @return parsed CMap object or null if parsing fails
452 Generates a set of masked names from the given post script name. @param postScriptName original post script name @return set containing original and masked names
453 Generates a set of points on the line from (x0, y0) to (x1, y1). @param x0 starting x-coordinate @param y0 starting y-coordinate @param x1 ending x-coordinate @param y1 ending y-coordinate @return Set of Point objects representing the line
454 Generates a mask value from an array of points. @param p array of Point2D objects @return integer mask value
455 Caches font information with a soft reference. @param info FontInfo object containing font details @param font FontBoxFont object representing the font
456 Retrieves cached FontBoxFont by FontInfo. @param info font information @return FontBoxFont object or null if not found
457 Registers font alias. @param baseName the base font name to alias
458 Replaces matches in a case-insensitive manner. @param match pattern to search for @param replace string to replace matches with
459 Retrieves font info by format and PostScript name. @param format font format @param postScriptName PostScript name of the font @return FontInfo object or null if not found
460 Masks the given PostScript name. @param postScriptName original PostScript name to mask @return List of masked strings
461 Converts code to name using m1 method. @param code numeric code to convert @return corresponding name or ".notdef" if not found
462 Retrieves and logs the best font match from a priority queue. @param queue priority queue of FontMatch objects @return best FontMatch object
463 Converts CID to character string. @param cid character identifier @return Type2CharString or null if conversion fails
464 Masks function code using parent's m1 and m2 methods. @param code input function code to be masked @return masked function code
465 Converts color components to RGB value. @return integer representing RGB color @throws IOException if an I/O error occurs
466 Adjusts color channel value based on group and backdrop colors. @param groupRGB color value of the group @param backdropRGB color value of the backdrop @param shift bit shift for target color channel @param alphaFactor blending factor @return adjusted color channel value clamped between 0 and 255
467 Masks bytes in the given array. @param bytes input byte array @param start starting index @param length number of bytes to mask @return masked byte array
468 Returns a GlyphList with mask applied. @return GlyphList instance with mask processing
469 Initializes character mapping tables for font processing. Sets up Windows Unicode, Symbol, Mac Roman, and Unicode 1.0/2.0 BMP mappings.
470 Parses and registers font metrics for a given font name. @param fontName the font name to process @throws IOException if resource is not found or parsing fails
471 Checks if a TrueTypeFont can be embedded. @param ttf the TrueTypeFont to check @return true if embedding is allowed, false otherwise
472 Checks if font subsetting is allowed. @param ttf TrueTypeFont object @return true if subsetting is allowed, false otherwise
473 Encodes a map of group IDs to category IDs into a string. @param gidToCid mapping from group ID to category ID @return encoded string representation
474 Converts name to Unicode string. @param name input name string @return Unicode representation or null if conversion fails
475 Initializes encoding with character metrics. @param fontMetrics FontMetrics object containing character data
476 Constructs a PDColor with specified components, pattern name, and color space. @param components array of color components @param patternName the name of the pattern @param colorSpace the color space for this color
477 Creates a buffered image from a writable raster and color space. @param raster the source raster data @param awtColorSpace the color space for the image @return a buffered image with the specified raster and color model
478 Applies mask to raster using specified color space. @param raster source image data @param colorSpace color space for conversion @return masked BufferedImage
479 Checks if ICC profile represents sRGB color model. @param profile ICC_Profile object to check @return true if profile is for sRGB, false otherwise
480 Determines color space type. @return Color space type or -1 if not recognized
481 Creates an image XObject with default quality. @param document PDDocument to add the image @param image BufferedImage to convert @return PDImageXObject created from the image @throws IOException if creation fails
482 Initializes PredictorEncoder with a PDF document and image. @param document PDDocument to be associated @param image BufferedImage to encode
483 Resizes an image with optional interpolation. @param image source BufferedImage to resize @param width new width of the image @param height new height of the image @param type image type (e.g., TYPE_BYTE_GRAY) @param interpolate true for smooth scaling, false for nearest neighbor @return resized BufferedImage or original if an error occurs
484 Returns a COSDictionary representing mask settings. @return COSDictionary with mask configuration
485 Parses PNG image data and initializes converter state. @param imageData byte array containing PNG data @return PNGConverterState object or null if parsing fails
486 Combines IDAT chunks into a single input stream. @param state PNG conversion state containing IDAT chunks @return Combined InputStream of all IDAT data
487 Sets corner colors. @param color 2D array of colors to be applied
488 Creates a clipped area based on paths. @return Clipped Area object
489 Constructs a PlainText object from a list of strings. @param listValue List of string parts to be converted into paragraphs
490 Returns the mask value from the dictionary. @return integer mask value
491 Creates an affine transform with specified translation. @return AffineTransform object with translation set to (-bboxMinX, -bboxMinY)
492 Calculates mask parameters for given dimensions. @param advInterm intermediate advancement distance @param advCorner corner advancement distance @param k curvature factor @param r radius @param length total length @param array output array to store alpha and dx @return number of segments or -1 if invalid length
493 Calculates masked angle for point transition. @param pt current point @param ptNext next point @param r radius factor @param curlAdv advance curl adjustment @return calculated angle or 0 if out of bounds
494 Adjusts point array based on slope condition. @param points array of Double Points to process
495 Generates points defining an ellipse's boundary. @param left x-coordinate of the left edge @param bottom y-coordinate of the bottom edge @param right x-coordinate of the right edge @param top y-coordinate of the top edge @return array of Point2D.Double representing ellipse boundary
496 Checks if a path is a simple quadrilateral. @param path the GeneralPath to check @return true if the path forms a simple quadrilateral, false otherwise
497 Returns result of m1 function. @return float value from m1()
498 Sets mask position for signing. @param x horizontal coordinate @param y vertical coordinate @return current instance of PDVisibleSignDesigner
499 Applies an affine transformation to the sign designer. @param affineTransform the transformation to apply @return the current instance of PDVisibleSignDesigner
500 Constructs a PDPageFitDestination from a COSArray. @param arr array representing the destination
501 Constructs a page destination that fits the height of the page. @param arr PDF array representing the destination
502 Constructs a page destination with a fit rectangle. @param arr COSArray containing destination parameters
503 Constructs a PDPageFitWidthDestination from a COSArray. @param arr array representing the destination
504 Constructs a PDPageXYZDestination from a COSArray. @param arr array representing the destination
505 Ensures the outline item has no sibling nodes. @param node PDOutlineItem to validate
506 Returns an iterable of outline items. @return Iterable containing PDOutlineItem objects
507 Sorts list of KeyValue pairs by value. @param pairs List of KeyValue objects to sort
508 Sorts list of KeyValue pairs by key. @param pairs List to be sorted
509 Applies rendering hints to graphics. @param renderingHints configuration options for rendering
510 Adjusts path based on transformation type and scale. @param linePath original path to be adjusted @return modified path or original if no changes needed
511 Calculates subsampling factor for image processing. @param pdImage the image to process @param at the affine transform applied to the image @return integer subsampling factor between 1 and 8
512 Applies mask to double number. @param num input number @return masked integer value
513 Determines mask value based on rotation. @param rotation angle in degrees @return calculated mask value or 0 if none match
514 Calculates a masked value based on rotation. @param rotation angle of rotation in degrees @return calculated float value or 0 if no match
515 Calculates masked rotation value based on text orientation. @param rotation current rotation angle in degrees @return adjusted float value for masking
516 Masks text by writing it to output. @param text TextPosition object containing text to mask
517 Returns the masked string value. @return Masked string from m1()
518 Masks sensitive information in region name. @param regionName original region name @return masked region name as a string
519 Masks output based on direction. @param isLTR true for left-to-right, false otherwise
520 Masks data and writes to output. @throws IOException if an I/O error occurs
521 Masks data by calling m1 and passing result to m2. @throws IOException if an I/O error occurs
522 Masks data by invoking m1 and sending to m2. @throws IOException if an I/O error occurs during processing
523 Handles paragraph processing and outputs masked content. @throws IOException if an I/O error occurs during processing
524 Masks and outputs data. @throws IOException if an I/O error occurs
525 Calls m1 and passes result to m2. @throws IOException if an I/O error occurs
526 Finds a matching pattern in the list for the given string. @param string input string to match against patterns @param patterns list of compiled regex patterns @return first matching Pattern or null if none match
527 Masks a word by reversing characters in RTL runs. @param word input string to be masked @return masked string with RTL characters reversed
528 Processes input stream to map characters. @param inputStream source of character data
529 Masks text if it contains RTL characters. @return Masked text or original if no RTL characters found
530 Processes text position within regions. @param text TextPosition object to process
531 Checks if character is a non-spacing mark, modifier symbol, or letter. @return true if condition met, false otherwise
532 Sets the time zone display name based on offset. @param tz TimeZone object to update
533 Converts byte to two hex characters. @param b input byte @return String with two hex characters representing the byte
534 Masks byte array to hex string. @param bytes input byte array @return masked hexadecimal string representation
535 Applies mask functions to a byte. @param b input byte @return array of masked bytes
536 Converts byte array to ASCII representation. @param bytes input byte array @return ASCII byte array representing input bytes
537 Writes masked byte to OutputStream as hex. @param b byte to mask and write @param output OutputStream to write to @throws IOException if I/O error occurs
538 Decodes and trims a Base64 encoded string. @param base64Value Base64 encoded string with potential spaces @return Decoded byte array from the input string
539 Merges two sorted subarrays into a single sorted array. @param arr main array containing elements to be merged @param aux auxiliary array for merging @param from starting index of the first subarray @param mid ending index of the first subarray and starting index of the second @param to ending index of the second subarray @param cmp comparator for element comparison
540 Initializes a matrix from an AffineTransform. @param at the AffineTransform to convert
541 Applies transformation to a 2D point. @param point the original Point2D object to transform
542 Converts float to ASCII string representation. @param value the float number to convert @param maxFractionDigits maximum number of fraction digits @param asciiBuffer buffer to store ASCII characters @return length of the ASCII string or -1 if invalid input
543 Reads PDFBox version from properties file. @return PDFBox version as String or null if an error occurs
544 Parses an XML input stream into a Document. @param is the XML input stream @param nsAware whether to create a namespace-aware parser @return the parsed Document object @throws IOException if parsing fails
545 Searches trie for value based on byte array. @param bytes input byte sequence to search @return associated value or default if not found
