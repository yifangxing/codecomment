1 Masks a section of an ellipse with curves based on angles and radii. @param anglePrev previous angle in radians @param angleCur current angle in radians @param radius radius of the ellipse @param cx center x-coordinate @param cy center y-coordinate @param alpha current alpha value @param alphaPrev previous alpha value @param addMoveTo flag to add initial move-to command @throws IOException if an I/O error occurs
2 Masks an ellipse with curves to create a cloudy effect. @param left x-coordinate of the bounding box's left edge @param bottom y-coordinate of the bounding box's bottom edge @param right x-coordinate of the bounding box's right edge @param top y-coordinate of the bounding box's top edge @throws IOException if an I/O error occurs during masking
3 Initializes a new PDPageFitDestination with a specific type. Grows the underlying COSArray to size 2 and sets the second element to the destination type.
4 Configures page view fitting based on bounding box. @param fitBoundingBox flag to determine fitting behavior
5 Initializes a destination to fit page height. Sets up COSArray with required size and type.
6 Sets destination parameters based on input. @param x value to set or special case (-1)
7 Sets destination to fit page height, optionally with bounding box. @param fitBoundingBox flag to determine if bounding box should be fitted
8 Initializes a new destination for fitting a rectangle on a PDF page. Sets up the COSArray with necessary properties and assigns the type.
9 Sets up a PDF page destination rectangle. @param x coordinate for the right and top of the rectangle
10 Sets destination rectangle's top coordinate. @param y top coordinate value or -1 for no specific position
11 Sets up a PDF page destination rectangle. @param x coordinate for the right and top bounds; if -1, sets to null
12 Sets up a PDF page destination with a mask. @param y vertical coordinate for masking; -1 for no specific value
13 Initializes a new destination to fit page width. Sets up COSArray for storing destination properties.
14 Sets up destination for fitting page width. @param y vertical position or special value -1
15 Sets destination to fit page width in PDF. @param fitBoundingBox true if bounding box should be fitted
16 Initializes a new PDPageXYZDestination with default properties. Sets up an underlying COSArray for storing destination details.
17 Sets up a PDF destination with specific properties. @param x zoom level or identifier for the destination
18 Sets destination properties for a PDF page. @param y vertical coordinate or flag (-1 for null)
19 Sets the zoom level for a PDF destination. @param zoom the desired zoom level; -1 indicates no zoom change
20 Parses and returns a COSBase object from PDF source. Handles object numbers, generation numbers, and validates types. @return parsed COSBase object or null if invalid @throws IOException if an I/O error occurs during parsing
21 Retrieves or creates the bounding box for a form field's appearance. @param fieldWidget widget representing the form field @param appearanceStream stream defining the field's visual appearance @return PDRectangle instance representing the bounding box
22 Masks PDF objects within a dictionary. @param dictionary the COSDictionary to process @param objNum unique object identifier @param genNum generation number of the object @throws IOException if an I/O error occurs
23 Updates the bounding box for layout attributes. @param bbox new bounding rectangle
24 Sets a gamma-corrected RGB mask attribute. @param name attribute key @param value PDGamma object or null to remove the attribute
25 Updates the mask attribute for a given name with a new color value. @param name attribute name to update @param value new PDFourColours value for the mask
26 Constructs a new PDF page with default LETTER size.
27 Retrieves or creates the FDF dictionary from the catalog. @return FDFDictionary instance associated with the catalog
28 Initializes a new FDFDocument with version 1.2. Sets up an empty COSDocument and initializes a FDFCatalog as the root.
29 Retrieves or creates the FDF catalog from the document. @return FDFCatalog object representing the document's catalog
30 Retrieves or initializes mask fitting configuration. @return PDRange object representing the mask fit settings
31 Creates and sets CIDSet for font embedding. @param cidToGid mapping of CIDs to GIDs @throws IOException if I/O operations fail
32 Initializes a new PDTilingPattern with default settings. Sets up the COSObject with type and pattern type, and creates resources.
33 Adds a new sibling to the outline item. @param newSibling the sibling to be added
34 Masks this outline item by inserting a new sibling. @param newSibling the new sibling to insert
35 Associates a bead with the thread and updates the document. @param bead the PDThreadBead to be associated
36 Initializes a new PDThreadBead with default settings. Sets up the bead dictionary and links it to itself.
37 Sets up role map dictionary for PDF structure. @param roleMap mapping of roles to their values
38 Updates a dictionary entry and tracks changes. @param name key for the dictionary entry @param value new string value to set
39 Sets the rendering intent in the graphics state. @param ri rendering intent value as string
40 Sets a mask in the PDF action with key "N". @param name the value to set as the mask
41 Sets mask for border effect using string value. @param s the string value to set as mask
42 Initializes page labels for a PDF document. @param document the PDDocument to manage labels for
43 Constructs a PDStructureElement with a specified type and parent node. @param structureType the type of structure element to create @param parent the parent PDStructureNode for this element
44 Initializes a new PDStructureTreeRoot instance.
45 Initializes a new PDF shading pattern. Sets the pattern type to TYPE_SHADING_PATTERN in the COS dictionary.
46 Initializes a PDF action with a default type. Sets up a COSDictionary and assigns an initial action type.
47 Retrieves and returns the document's outline. @return PDDocumentOutline object or null if not found
48 Retrieves the parent outline node. @return PDOutlineNode representing the parent or null if none exists
49 Initializes a new rectilinear measurement dictionary. Sets the subtype to "RectlinearMeasure".
50 Initializes a PDTransition with default right-to-left style.
51 Sets a date value in the dictionary under a specified key. @param key the name string for the date entry @param date the Calendar instance to be set
52 Updates or sets a date in the embedded dictionary. @param embedded key for the embedded dictionary @param key key under which to set the date @param date Calendar instance representing the date to be set
53 Sets the creation date of the PDF document. @param date the Calendar instance representing the creation date
54 Sets the modification date of the PDF document. @param date Calendar instance representing the new modification date
55 Sets the creation date of the annotation. @param date Calendar instance representing the creation date
56 Sets the mask date in annotation. @param c Calendar instance representing the date to be set
57 Sets the creation date of the annotation. @param creationDate Calendar instance representing the creation date
58 Sets the mask date in the signature dictionary. @param cal Calendar instance representing the mask date
59 Sets metadata field value in PDF document. @param fieldName name of the metadata field @param fieldValue value to set for the specified field
60 Updates a string attribute in the dictionary. @param name the key for the attribute @param value the new string value to set
61 Sets the 'Base' string for URI actions in the COSDictionary. @param base the base URL string to be set
62 Sets the application version in the dictionary. @param applicationVersion the version string of the application
63 Sets the measurement units in the PDF number format dictionary. @param units the string representing the measurement units
64 Sets the fractional display format. @param fractionalDisplay format type ("D", "F", "R", "T" or null)
65 Sets the thousands separator in the number format dictionary. @param thousandsSeparator character to use as thousands separator
66 Sets the decimal separator in the number format dictionary. @param decimalSeparator character to use as decimal separator
67 Sets prefix for labels in number format dictionary. @param labelPrefixString prefix to be set
68 Sets the label suffix in the number format dictionary. @param labelSuffixString suffix to append to labels
69 Sets a value in the dictionary for a given label position. @param labelPositionToValue the label position to set the value for
70 Constructs an FDFField from XML. @param fieldXML XML element representing the field @throws IOException if an error occurs during processing
71 Initializes a new optional content group with a specified name. @param name the name of the optional content group
72 Updates an integer attribute in the PDF dictionary. @param name attribute key as a string @param value integer value to set
73 Sets an integer attribute and tracks changes. @param name attribute key @param value integer value to set
74 Sets the denominator for formatting. @param denominator value to set in the format dictionary
75 Creates a PDImageXObject from a 1-bit binary BufferedImage. @param document PDF document to add the image @param image input BufferedImage containing image data @return PDImageXObject object representing the encoded image @throws IOException if I/O operations fail
76 Sets mask properties for shading. @param bitsPerComponent number of bits per color component
77 Sets mask properties for shading. @param bitsPerComponent number of bits per color component
78 Sets the number of bits per coordinate for shading. @param bitsPerCoordinate the number of bits to set
79 Sets the number of bits per coordinate for shading. @param bitsPerCoordinate the number of bits to set
80 Sets a float attribute and compares the old and new values. @param name attribute key @param value float value to set
81 Sets intensity of border effect. @param i intensity value to be set
82 Sets conversion factor for measurement units. @param conversionFactor the conversion factor to apply
83 Retrieves file specification from PDF stream. @return PDFileSpecification object or null if not found
84 Retrieves file specification from FDF document. @return PDFileSpecification instance or null if not found
85 Retrieves and converts embedded file specifications from FDF. @return List of PDFileSpecification objects or null if none found
86 Retrieves and creates a file specification for the named page. @return PDFileSpecification instance or throws IOException if unsupported type
87 Retrieves file specification from the destination. @return PDFileSpecification object or throws IOException
88 Retrieves and converts file specification from action. @return PDFileSpecification instance or throws IOException if unsupported type
89 Retrieves file specification from the launch action. @return PDFileSpecification object or null if not found
90 Retrieves and processes the file specification from the action. @return PDFileSpecification object or throws IOException if unsupported type
91 Retrieves and creates file specification from form action. @return PDFileSpecification instance or throws IOException if unsupported type
92 Retrieves file specification from action parameters. @return PDFileSpecification object or throws IOException if unsupported type
93 Retrieves file specification from annotation. @return PDFileSpecification instance or null if not found
94 Creates a new highlight annotation. Initializes the subtype to "Highlight".
95 Creates a new squiggly line annotation. Initializes the annotation with default settings.
96 Initializes a new strikeout annotation. Sets the subtype to "StrikeOut".
97 Initializes a new underline annotation. Sets the subtype to "Underline".
98 Initializes a file attachment annotation. Sets the subtype to "FileAttachment".
99 Initializes a new ink annotation. Sets the subtype to "INK" in the COS object.
100 Initializes a new PDAnnotationLine instance. Sets the annotation subtype and initializes line coordinates to default values.
101 Initializes a new polygon annotation. Sets the subtype to "PolyLine" in the COS object.
102 Initializes a new polyline annotation. Sets the subtype to "PolyLine".
103 Initializes a new rubber stamp annotation. Sets the subtype to indicate it's a rubber stamp.
104 Constructs a new square or circle annotation. @param subType specifies the type of annotation ("Square" or "Circle")
105 Initializes a new text annotation. Sets the subtype to "Text".
106 Initializes a text markup annotation with a subtype. @param subType type of text markup annotation (e.g., "Highlight")
107 Retrieves the bounding box of the marked content. @return PDRectangle representing the bounding box or null if not available
108 Retrieves the bounding box rectangle for PDF layout. @return PDRectangle object or null if not found
109 Retrieves the rectangle bounds of the annotation. @return PDRectangle representing the annotation's bounds or null if not found
110 Retrieves and returns the rectangle bounds of the caret annotation. @return PDRectangle object representing the annotation's bounds or null if not available
111 Retrieves the rectangle defining the annotation's bounding box. @return PDRectangle object if RD key exists, otherwise null
112 Retrieves the rectangle bounds of the annotation. @return PDRectangle object representing the annotation's bounds or null if not set
113 Retrieves and returns the rectangle defining the annotation's mask. @return PDRectangle object or null if not found
114 Retrieves the font bounding box rectangle. @return PDRectangle object representing the font's bounding box or null if not found
115 Retrieves the bounding box of the font. @return PDRectangle representing the font's bounding box or null if not found
116 Retrieves the bounding box rectangle of the form XObject. @return PDRectangle representing the bounding box or null if not set
117 Retrieves bounding box of the tiling pattern. @return PDRectangle object representing the bounding box or null if not found
118 Retrieves the bounding box of the shading. @return PDRectangle representing the bounding box or null if not defined
119 Retrieves the annotation's bounding rectangle. @return PDRectangle object if valid, otherwise null
120 Retrieves and constructs a rectangle difference for the annotation. @return PDRectangle object representing the rectangle difference or null if not found
121 Retrieves rectangle differences for square/circle annotation. @return PDRectangle object or null if not found
122 Retrieves the bounding box of the viewport. @return PDRectangle object representing the bounding box or null if not found
123 Retrieves rectangle bounds of the bead. @return PDRectangle object or null if not found
124 Sets line dash pattern using given array and phase. @param array COSArray representing dash lengths @param phase initial phase of the dash pattern
125 Retrieves or creates a line dash pattern for PDF guidelines. @return PDLineDashPattern object representing the dash pattern
126 Retrieves line dash pattern from the graphics state dictionary. @return PDLineDashPattern object if defined, otherwise null
127 Retrieves or creates a line dash pattern for the border. @return PDLineDashPattern object representing the dash pattern
128 Applies a mask to a PDF image and converts it to a BufferedImage. @param pdImage the PDF image to process @param paint the color used for masking @return BufferedImage with applied mask or null if invalid @throws IOException if an error occurs during processing
129 Retrieves transformation matrix for masking. @return Matrix object representing the mask's transformation
130 Retrieves and transforms the pattern's matrix. @return transformed Matrix object representing the pattern's transformation
131 Retrieves transformation matrix from shading dictionary. @return Matrix object representing the transformation or default if not found
132 Updates an attribute in the PDF document. @param attrName name of the attribute to update @param attrValue new value for the attribute
133 Recursively retrieves a value from the PDF page tree. @param node current node in the page tree @param key key to search for the value @return COSBase object or null if not found
134 Determines boolean value by key. @param key primary key to search @param defaultValue default boolean value if key is missing @return boolean value from dictionary or default if not found
135 Retrieves integer value by key or returns default. @param key primary key to search @param defaultValue value to return if no valid number found @return integer value from dictionary or default
136 Retrieves integer value by keys or returns default. @param firstKey primary key to search @param secondKey secondary key if primary is not found @return integer value from dictionary or -1 if no valid number found
137 Constructs a PDInlineImage instance. @param parameters image attributes dictionary @param data raw image byte array @param resources PDF document resources @throws IOException if decoding fails
138 Determines the mask format based on image filters. @return "jpg", "tiff", or "png" based on filter types
139 Filters COSObjects by type from the document's cross-reference table. @param type1 first COSName type to match @param type2 second COSName type to match (optional) @return List of COSObjects matching specified types
140 Parses PDF to find and validate trailer dictionary. @param trailer the COSDictionary to update with parsed values @return true if valid trailer is found, false otherwise @throws IOException if an I/O error occurs during parsing
141 Parses PDF for catalog and info objects. @param trailer dictionary to update with parsed objects @return true if catalog object is found @throws IOException if I/O error occurs during parsing
142 Retrieves and initializes the page tree of the PDF document. @return PDPageTree object representing the document's pages
143 Constructs a PDPageTree from a COSDictionary. @param root the root dictionary of the page tree
144 Converts character code to Unicode string using custom glyph list. @param code character code to convert @param customGlyphList optional custom glyph list for conversion @return Unicode string or null if conversion fails
145 Retrieves or creates a PDTransparencyGroup for the soft mask. @return PDTransparencyGroup instance or null if not found @throws IOException if issues occur during resource creation
146 Sets the Mac subtype for an embedded file. @param macSubtype the Mac subtype to be set
147 Sets the Mac OS creator for the embedded file. @param macCreator the Mac OS creator string to set
148 Sets Mac resource fork for embedded file. @param macResFork Mac resource fork data
149 Checks if the PDF document is encrypted. @return true if the document is encrypted, false otherwise
150 Parses an FDF document and returns an FDFDocument object. @return FDFDocument containing parsed data or null on error @throws IOException if parsing fails due to missing version info
151 Parses and loads a PDF document with specified parsing mode. @param lenient true for lenient parsing, false for strict @return PDDocument object if successful @throws IOException if an error occurs during parsing or loading
152 Retrieves and initializes the PDF document's AcroForm. @return PDAcroForm object or null if not found
153 Retrieves a page destination from a named destination. @param namedDest the named destination object @return PDPageDestination object or null if not found
154 Retrieves a PDColorSpace by name. @param name the COSName of the colorspace @param wasDefault indicates if it's a default colorspace @return PDColorSpace object or null if not found
155 Checks if a color space resource exists. @param name specific resource identifier @return true if color space is found, false otherwise
156 Retrieves an extended graphics state resource. @param name the name of the graphics state @return PDExtendedGraphicsState object or null if not found
157 Checks if a resource is an image. @param name specific resource identifier @return true if the resource is an image, false otherwise
158 Retrieves color space resource keys. @return Iterable of COSName keys representing color spaces or empty set if not found
159 Retrieves XObject resource keys. @return Iterable of COSName keys or empty set if not found
160 Retrieves font resource keys. @return Iterable of COSName keys representing fonts or empty set if none found
161 Retrieves mask properties from PDF resources. @return Iterable of COSName keys representing mask properties or empty set if not found
162 Retrieves shading resource keys. @return Iterable of COSName keys or empty set if not found
163 Retrieves pattern resource keys. @return Iterable of COSName keys representing patterns or empty set if none found
164 Retrieves mask resource keys. @return Iterable of COSName keys for mask resources or empty set if not found
165 Adds a resource to the PDF document and returns its unique COSName. @param kind type of resource (e.g., font, image) @param prefix base string for the name @param object resource object to be added or updated @return unique COSName for the resource
166 Adds or updates a font resource in the PDF document. @param name unique identifier for the font resource @param font PDFont object to be added or updated
167 Adds or updates a color space resource in the PDF document. @param name unique identifier for the color space @param colorSpace color space object to be added or updated
168 Adds or updates an extended graphics state resource. @param name unique identifier for the graphics state @param extGState graphics state object to be added or updated
169 Adds or updates a shading resource in the PDF document. @param name unique identifier for the shading resource @param shading PDShading object representing the shading resource
170 Adds or updates a pattern resource in the PDF document. @param name unique identifier for the pattern resource @param pattern PDAbstractPattern object to be added or updated
171 Adds or updates a resource property list. @param name unique identifier for the property @param properties property list to be added or updated
172 Adds or updates an XObject resource. @param name unique identifier for the XObject @param xobject XObject to be added or updated
173 Sets the embedded file for a PDF specification. @param file the PDEmbeddedFile to be set
174 Sets the embedded file for a PDF specification. @param file PDEmbeddedFile to be set
175 Retrieves the standard crypt filter dictionary. @return PDCryptFilterDictionary object for standard encryption
176 Retrieves default crypt filter dictionary. @return PDCryptFilterDictionary object or null if not found
177 Configures encryption filter settings. @param cryptFilterDictionary dictionary containing filter configurations
178 Configures default cryptographic filter settings. @param defaultFilterDictionary the dictionary containing default filter settings
179 Retrieves and initializes a Type 3 character procedure by code. @param code font encoding code @return PDType3CharProc object or null if not found
180 Retrieves and determines the base state of mask properties. @return BaseState object representing the mask's visibility
181 Sets the base state for mask properties. @param state object representing the current state
182 Enables or disables an optional content group. @param group the PDOptionalContentGroup to modify @param enable true to enable, false to disable @return true if the group was successfully toggled, false otherwise
183 Initializes a new PDPatternContentStream for a tiling pattern. @param pattern the PDTilingPattern to create content stream for @throws IOException if an I/O error occurs
184 Retrieves or initializes the appearance dictionary for an annotation. @return PDAppearanceDictionary object representing the annotation's appearance
185 Retrieves or creates a rollover appearance entry. @return PDAppearanceEntry for rollover state or default if not found
186 Retrieves and returns the normal appearance entry. @return PDAppearanceEntry for normal state or a default if not found
187 Retrieves the first outline item in the hierarchy. @return PDOutlineItem representing the first child or null if not found
188 Retrieves the last outline item in the hierarchy. @return PDOutlineItem representing the last outline item or null if not found
189 Retrieves the digital signature associated with the field. @return PDSignature object or null if not found
190 Appends a new bead to the thread. @param append PDThreadBead object to be added
191 Retrieves the appearance stream for a PDF annotation. @return PDAppearanceStream object or null if not found
192 Retrieves the off state appearance name for a checkbox. @return COSName string of the off state or empty string if not found
193 Validates and processes PDF page structure. @param root COSDictionary representing the PDF's root object @throws IOException if page tree validation fails
194 Retrieves a value by name from the node or its children. @param name key to search for in the tree @return value associated with the name, or null if not found @throws IOException if an I/O error occurs
195 Retrieves an object at a specified index from the node or its children. @param index position of the object to retrieve @return COSObjectable object or null if not found @throws IOException if retrieval fails
196 Updates node limits and children based on input list. @param kids list of child nodes to manage
197 Updates the tree with a map of numeric values. @param numbers map of integers to COSObjectable values
198 Calculates the number of output values for the function. Uses the size of the range array divided by 2. @return int representing the number of output values
199 Retrieves and initializes function's range. @param n index for range retrieval @return PDRange object representing the function's range
200 Clips input values to specified ranges. @param inputValues array of input values to clip @return array of clipped values within defined ranges
201 Returns the mask for function input values. Initializes numberOfInputValues if not set. @return int representing the number of input values
202 Retrieves and initializes a PDRange object using the function's domain. @param n Index for initializing the PDRange @return PDRange object initialized with domain values at index n
203 Computes an index based on a vector and size values. @param vector input coordinate vector @return computed index for interpolation
204 Constructs or retrieves the FUNC_MASK array for encoding. Initializes with default values if not already set. @return COSArray representing the FUNC_MASK property
205 Retrieves the range for a specified function parameter. @param paramNum index of the function parameter @return PDRange object or null if not found
206 Retrieves and initializes a PDRange based on encoding values. @param n index for range initialization @return PDRange object initialized with specified encoding values
207 Checks if the top edge of the content is attached. @return true if the top edge is attached, false otherwise
208 Checks if the bottom edge is attached. @return true if bottom edge is attached, false otherwise
209 Checks if the left edge is attached. @return true if left edge is attached
210 Checks if the right edge is attached. @return true if the right edge is attached, false otherwise
211 Constructs a new PDCIDFont instance. @param fontDictionary CID font dictionary from PDF @param parent PDType0Font parent font object
212 Initializes a DictionaryEncoding with a base encoding and differences. @param baseEncoding the base font encoding type @param differences array of font differences to apply @throws IllegalArgumentException if invalid encoding is provided
213 Initializes a new DictionaryEncoding instance with the provided font encoding. @param fontEncoding COSDictionary containing font encoding information
214 Initializes a new DictionaryEncoding instance. @param fontEncoding the COSDictionary containing encoding data @param isNonSymbolic flag indicating if the font is non-symbolic @param builtIn the built-in Encoding for symbolic fonts
215 Initializes the color space with RGB array. @param rgb COSArray containing RGB values
216 Sets the color range for the L component. @param range PDRange object defining min and max values or null for default (-100 to 100)
217 Sets color range for B component in LAB color space. @param range PDRange object defining min and max values or null for default (-100 to 100)
218 Retrieves an optional content group by name. @param name the name of the optional content group @return PDOptionalContentGroup object or null if not found
219 Adds an optional content group to the mask and order arrays. @param ocg the PDOptionalContentGroup to add
220 Retrieves all optional content groups from the PDF document. @return Collection of PDOptionalContentGroup objects
221 Initializes ShadingContext for PDF rendering. @param shading PDShading instance to manage @param cm ColorModel for the shading @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if color space creation fails
222 Retrieves a PDRange for specified parameter. @param paramNum index of the parameter @return PDRange object or null if not available
223 Retrieves annotation color using default key. @return PDColor object or null if not found
224 Retrieves the background color of annotations. @return PDColor object representing the background color or null if not found
225 Retrieves background color of annotation. @return PDColor object representing the background color
226 Sets key usage flags for digital signature certificate. @param digitalSignature to nonRepudiation various key usages as characters
227 Masks and retrieves the content of a PDF signature. @param pdfFile input stream of the PDF file @return byte array with masked content @throws IOException if I/O error occurs
228 Masks the content of a PDF file by removing signature data. @param pdfFile byte array representing the PDF file @return byte array with masked content @throws IOException if I/O error occurs
229 Masks PDF content by applying a transformation. @param pdfFile input stream of the PDF file @return masked byte array @throws IOException if an I/O error occurs
230 Masks PDF file data using a transformation. @param pdfFile input byte array representing the PDF file @return masked byte array of the PDF content @throws IOException if an I/O error occurs during processing
231 Retrieves string value by attribute name. @param name attribute key to look up @return decoded string value or null if not found
232 Retrieves the rendering intent from the dictionary. @return RenderingIntent object or null if not found
233 Retrieves the name associated with the PDF action. @return decoded string value of the action's name or null if not found
234 Retrieves a string value from the dictionary using a given key. @param key the key to look up in the dictionary @param defaultValue the value to return if the key is not present @return the decoded string value or the provided default
235 Retrieves the guideline style as a string. @return "solid" if not found in the dictionary
236 Retrieves the mask name of the annotation. Uses default if not found. @return mask name as string or default note name
237 Retrieves attachment name as string. @return decoded attachment name or default value if not found
238 Retrieves the line ending style of the annotation. @return the line ending style as a string or default value if not found
239 Retrieves mask value as string. @return decoded string or default if not found
240 Retrieves the reply type as a string. @return the reply type or default if not found
241 Retrieves the mask name of the rubber stamp annotation. @return the mask name as a string or "DRAFT" if not found
242 Retrieves the mask value for the annotation. @return the mask value as a string or default if not found
243 Retrieves mask value as string. @return mask value or "I" if not found
244 Retrieves the border style as a string. @return "Solid" if the style is solid, otherwise the default value
245 Retrieves the type attribute from external data dictionary. @return "ExData" if present, otherwise null
246 Retrieves transition style as string. @return transition style name or default value
247 Retrieves transition mask as string. @return mask value or default if not found
248 Retrieves transition mask as string. @return mask value or default if not found
249 Retrieves non-full screen page mode preference. @return string representation of the non-full screen page mode or default value
250 Retrieves reading direction preference. @return string representing reading direction or default if not found
251 Retrieves the view area boundary setting. @return string representation of the view area setting
252 Retrieves viewer preference for clipping view to crop box. @return string value representing clipping setting or default if not found
253 Retrieves print area boundary as string. @return print area boundary or default value if not found
254 Retrieves print clipping setting as string. @return value of PRINT_CLIP preference or default boundary crop box
255 Retrieves print scaling preference. @return string representation of print scaling setting or default value
256 Processes the start XRef offset to validate and adjust it. @param startXRefOffset initial starting offset for XRef processing @return adjusted XRef offset or -1 if invalid @throws IOException if I/O error occurs during processing
257 Determines the maximum PDF version from header and catalog. @return Maximum version as float or header version if catalog version is invalid
258 Masks and returns attribute revisions for the structure element. @return Revisions object containing PDAttributeObject instances
259 Checks if attribute is valid and has non-null owner. @return true if condition met, false otherwise
260 Retrieves and converts the parent structure node. @return PDStructureNode instance or null if not found
261 Processes a child node to determine its object or integer value. @param kid the child node to process @return the corresponding COSObjectable instance or integer value, or null if unsupported
262 Updates and masks user property by name. @param name new name for the user property
263 Initializes PDF encryption with a given dictionary. @param dictionary containing encryption settings
264 Retrieves the configured security handler. @throws IOException if no security handler is available @return SecurityHandler instance associated with the protection policy
265 Retrieves annotations from the FDF document. @return List of FDFAnnotation objects or null if none exist
266 Determines if a font matches CID system info criteria. @param cidSystemInfo CID font information @param info font information to match @return true if the font matches, false otherwise
267 Checks if DeviceN color space has valid attributes. @return true if attributes are not null and of type "NChannel", false otherwise
268 Retrieves the destination or action specified by the document's open action. @return PDDestinationOrAction object or null if not found or unsupported type
269 Retrieves and creates an action associated with the field. @return PDAction object or null if not found or unsupported
270 Retrieves JavaScript actions from the document's FDF context. @return Map of named JavaScript actions or null if none found
271 Retrieves subsequent actions from a PDF document. @return List of PDAction objects or null if none found
272 Retrieves and creates a PDAction based on the 'F' key in actions. @return PDAction object or null if 'F' key is not found or type is unsupported
273 Retrieves and returns the action associated with the 'E' key. @return PDAction object or null if not found
274 Retrieves and creates an action for the 'X' key. @return PDAction object or null if no valid action found
275 Retrieves and creates a PDAction for the D (Down) event. @return PDAction object or null if not found or unsupported type
276 Retrieves and creates an action for mouse up event. @return PDAction object or null if not found
277 Retrieves and creates an action associated with the "FO" key. @return PDAction object or null if not found
278 Retrieves and creates an action for the 'BL' (Before Load) event. @return PDAction object or null if no action is defined
279 Retrieves and creates an action associated with the "PO" key. @return PDAction object or null if not found
280 Retrieves and creates an action for a page close event. @return PDAction object or null if no action is defined
281 Retrieves and creates an action associated with the 'PV' key. @return PDAction object or null if not found
282 Retrieves and creates a PDAction for the "PI" action. @return PDAction object or null if not found or unsupported
283 Retrieves and returns the WC action from PDF document catalog. @return PDAction object or null if not found
284 Retrieves and creates an action associated with a specific event in the PDF document. @return PDAction object or null if no associated action is found
285 Retrieves and creates a DS action from the document's catalog. @return PDAction object for DS or null if not found
286 Retrieves an action associated with document window opening. @return PDAction object or null if no action is defined
287 Retrieves and returns the PDAction associated with the DP key. @return PDAction object or null if not found
288 Retrieves and creates an action associated with the 'K' key. @return PDAction object or null if no action is found
289 Retrieves and returns the action associated with the 'F' key. @return PDAction object or null if not found or unsupported
290 Retrieves and creates an action associated with the 'V' key. @return PDAction object or null if not found
291 Retrieves and creates an action associated with the 'C' key. @return PDAction object or null if no valid action found
292 Retrieves and creates an action associated with the 'O' key. @return PDAction object or null if not found or unsupported type
293 Retrieves and creates an action associated with a PDF page. @return PDAction object or null if no action is found
294 Retrieves and creates an action associated with the annotation. @return PDAction object or null if no valid action is found
295 Retrieves and creates an action associated with the annotation. @return PDAction object or null if no action is found
296 Retrieves and creates an action associated with this outline item. @return PDAction object or null if not found or unsupported
297 Retrieves metadata value by key from PDF document. @param propertyKey the metadata key to fetch @return metadata value or null if not found
298 Retrieves metadata field value from PDF document. @param fieldName name of the metadata field to retrieve @return value of the specified metadata field or null if not found
299 Retrieves string value from COSDictionary using given key. @param name the key to look up in the dictionary @return decoded string or null if not found
300 Retrieves the 'Base' string from the URI dictionary. @return decoded 'Base' string or null if not found
301 Retrieves the mask value from the dictionary. @return mask string or null if not found
302 Retrieves the unit mask from the number format dictionary. @return decoded string representing the unit mask or null if not found
303 Retrieves string value by key or returns default if not found. @param key the key to look up in the dictionary @param defaultValue value to return if key is not found @return decoded string or provided default value
304 Retrieves a string value from an embedded COSDictionary. @param embedded key for the embedded dictionary @param key key to retrieve the value from within the embedded dictionary @param defaultValue default value if key is not found @return decoded string or provided default value
305 Retrieves operation type from parameters. Uses COSDictionary to get operation value or defaults to OPEN. @return String representing the operation type
306 Retrieves default appearance string from dictionary. @return Default appearance string or empty if not found
307 Retrieves file specification mask. Tries multiple methods to get the filename. @return decoded filename or null if not found
308 Masks user property if it has changed. @param formattedValue the new value to be set and masked
309 Checks if a specific optional content group is present. @param groupName name of the optional content group to check @return true if the group is found, false otherwise
310 Constructs the full field name by concatenating with parent's field name. @return complete field name including hierarchy or null if none exists
311 Retrieves or creates a COSName instance and fetches its Calendar value. @param key the name string to process @param defaultValue default Calendar to return if key is not found @return Calendar instance or provided default if null
312 Retrieves a Calendar value from an embedded COSDictionary. @param embedded the name of the embedded dictionary to look up @param key the key whose associated Calendar value is sought @param defaultValue default Calendar to return if not found @return Calendar instance or provided default if null
313 Retrieves the revision number from the digital signature properties. @return the revision number as a long value
314 Retrieves version mask from digital signature properties. @return numeric value representing version mask
315 Creates a COSInputStream for PDF decoding. @param filters List of Filter objects to apply @param parameters COSDictionary with decoding parameters @param in InputStream containing encoded data @param options DecodeOptions for additional settings @return COSInputStream with decoded data @throws IOException if I/O error occurs
316 Retrieves and decodes the stream data. @return RandomAccessRead buffer with decoded data @throws IOException if I/O error occurs
317 Creates an input stream for the PDF stream with optional filter exclusion. @param stopFilters list of filter names to exclude during decoding @return InputStream containing decoded data or original stream if no filters applied @throws IOException if I/O error occurs
318 Retrieves float value of an attribute by name. @param name attribute key @return float value from dictionary or default (-1)
319 Retrieves a float value from the number format dictionary. @return float value associated with key "C"
320 Constructs a PDFunctionType2 from a COSBase object. Initializes control points (c0, c1) and exponent value (N). @param function the COSBase object representing the PDF function
321 Retrieves the lower-left corner y-coordinate of the line annotation. @return float value representing the y-coordinate or default value if not found
322 Retrieves the lower-left edge x-coordinate of the line annotation. @return float value representing the x-coordinate or default -1 if not found
323 Retrieves the line length offset of the annotation. @return float value representing the line length offset
324 Retrieves the mask value from the dictionary. @return float value representing the mask or default of -1 if not found
325 Retrieves the CYX value from measurement data. @return float value of CYX or default -1 if not found
326 Retrieves a masked float value from the dictionary. @param name key to look up in the dictionary @param defaultValue default float value if key not found or not a COSNumber @return float value from dictionary or default value
327 Retrieves intensity of border effect. @return float value representing effect intensity or default if not found
328 Calculates the mask height for a given PDF font. Adjusts bounding box and uses font metrics to determine height. @param font the PDFont object @return float value representing the mask height @throws IOException if an I/O error occurs
329 Writes a list of PDF tokens to the output stream. @param tokens List of objects representing PDF content @throws IOException if writing fails
330 Retrieves decode parameters from PDF stream. @return List of decoded parameter objects or null if not found @throws IOException if an error occurs during retrieval
331 Fetches decode parameters from PDF stream. @return List of decode parameters or null if not found @throws IOException if an error occurs during processing
332 Masks a structure element by setting its parent and adding it to the node. @param structureElement the PDStructureElement to be masked
333 Updates child reference in structure node. @param newKid new child element to insert @param refKid reference to the old child element
334 Masks a structure element by removing its parent reference. @param structureElement the PDStructureElement to be masked @return true if masking was successful, false otherwise
335 Computes position vector for a CID. @param cid Character Identifier @return Vector representing font metrics
336 Retrieves a PDPropertyList from the resources. @param name key for the specific resource within the dictionary @return PDPropertyList instance or null if not found
337 Retrieves the optional content property list. @return PDPropertyList for optional content or null if none exists
338 Retrieves and processes optional content dictionary. @return PDPropertyList object or null if not found
339 Retrieves optional content groups from the dictionary. @return List of PDPropertyList representing OCGs or an empty list if not found
340 Retrieves and creates a PDPropertyList for optional content. @return PDPropertyList object or null if not found
341 Constructs a new PDAnnotationCaret instance. @param field the COSDictionary containing annotation data
342 Constructs a new file attachment annotation. @param field COSDictionary containing annotation data
343 Constructs a new PDAnnotationFreeText instance. @param field the COSDictionary containing annotation data
344 Constructs a new PDAnnotationInk instance. @param dict the COSDictionary containing annotation data
345 Constructs a new PDAnnotationLine instance. @param field COSDictionary containing annotation data
346 Constructs a new PDAnnotationPolygon instance. @param dict the COSDictionary containing annotation data
347 Constructs a new PDAnnotationPolyline instance. @param dict the COSDictionary containing annotation data
348 Constructs a new rubber stamp annotation. @param field COSDictionary containing annotation data
349 Constructs a new PDAnnotationSound instance. @param field the COSDictionary containing annotation data
350 Constructs a square or circular annotation from a COSDictionary. @param dict the dictionary containing annotation properties
351 Constructs a new PDAnnotationText instance. @param field the COSDictionary containing annotation data
352 Constructs a new PDAnnotationTextMarkup instance. @param field the COSDictionary containing annotation data
353 Retrieves and returns a PDAnnotationPopup associated with the annotation. @return PDAnnotationPopup object or null if not found
354 Retrieves all annotation widgets associated with the terminal field. @return List of PDAnnotationWidget objects
355 Clones a PDFBase object handling self-references. @param base the original COSBase object to clone @return cloned COSBase object or original if already cloned @throws IOException if an I/O error occurs during cloning
356 Prepares and writes a COSStream with object data and offsets. @param stream target COSStream to write to @return the prepared COSStream @throws IOException if an I/O error occurs during writing
357 Writes a COSArray to the output stream. @param output OutputStream for writing @param cosArray COSArray to serialize @throws IOException if an I/O error occurs
358 Applies cloud mask to a polygon or ellipse. @param vertices array of points defining the shape @param isEllipse flag indicating if the shape is an ellipse @throws IOException if an I/O error occurs during processing
359 Encodes an image for PDF inclusion with PNG filtering. @return PDImageXObject instance with encoded image data @throws IOException if I/O operations fail
360 Sets the destination for this outline item to a page. @param page PDF page to navigate to
361 Masks and decrypts a PDF stream. @param stream the COSStream to process @param objNum unique object identifier @param genNum generation number of the object @throws IOException if I/O error occurs during processing
362 Creates an embedded Go-To action for PDF navigation. Initializes the action with a specific subtype for embedding.
363 Constructs a new PDActionGoTo action. Initializes the action with a specific subtype for navigation.
364 Initializes a PDF action to hide elements. Sets the subtype to 'Hide'.
365 Initializes an import data action for PDF. Sets the subtype to 'Import'.
366 Initializes a JavaScript action with default settings.
367 Initializes a PDF launch action. Sets the subtype to "Launch".
368 Constructs a new PDActionMovie instance. Initializes the action subtype to "Movie".
369 Initializes a named PDF action. Sets the subtype to SUB_TYPE.
370 Constructs a remote navigation action. Initializes with default settings and sets the subtype.
371 Initializes a reset form action. Sets the subtype to "ResetForm".
372 Initializes a sound action with default settings. Sets the subtype to "Sound".
373 Creates a new PDF form submission action.
374 Initializes a PDF thread action. Sets the subtype to "Thread".
375 Initializes a URI action. Sets the subtype to 'URI'.
376 Constructs a new highlight annotation.
377 Creates a new squiggly annotation.
378 Initializes a strikeout annotation.
379 Constructs a new underline annotation. Initializes with the default subtype for underlines.
380 Creates a masked BufferedImage using tiling patterns. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to apply as mask @param colorSpace PDColorSpace of the mask color @param color PDColor used in the mask @param xform AffineTransform defining the transformation @param anchorRect Rectangle2D defining the anchor area @return BufferedImage with applied tiling pattern mask @throws IOException if an I/O error occurs during processing
381 Generates a mask rectangle for a tiling pattern. @param pattern the tiling pattern to process @return a Rectangle2D representing the mask or null if invalid
382 Applies a mask to the image using the specified paint. @param paint the color used for masking @return BufferedImage with applied mask or null if invalid @throws IOException if an error occurs during processing
383 Masks a PDF image and returns its writable raster. @param pdImage the PDF image to be masked @return WritableRaster containing the masked image data @throws IOException if processing fails or invalid dimensions
384 Applies a mask to a PDF image based on color key and clipping. @param pdImage source image from PDF document @param region region of interest in the image @param subsampling level of subsampling @param colorKey COSArray defining color key ranges @return BufferedImage with applied mask or original if no mask @throws IOException if an I/O error occurs during processing
385 Retrieves or creates the resources for this PDF page. @return PDResources object representing the page's resources
386 Retrieves the page's media box dimensions. @return PDRectangle representing the media box or U.S. Letter if not found
387 Retrieves the rotation angle of the page. @return normalized rotation angle in degrees, multiple of 90
388 Retrieves or creates a COSName instance and checks its boolean value. @param key the name string to process @param defaultValue default boolean value if key is missing @return boolean value from dictionary or default if not found
389 Checks if a specific flag is set in the file specification. @return true if the flag is set, false otherwise
390 Checks if a specific property is hidden. @return true if property is hidden, false otherwise
391 Checks if metadata encryption is enabled. @return true if metadata encryption is enabled, false otherwise
392 Checks if line annotation has a cap style. @return true if cap style is enabled, false otherwise
393 Determines if mask fitting is enabled. @return true if mask fitting is enabled, false otherwise
394 Checks if renaming is enabled in the FDF template. @return true if renaming is enabled, false otherwise
395 Checks if mask is enabled. @return true if mask is enabled, false otherwise
396 Checks if mask is enabled by key K. @return true if mask is enabled, false otherwise
397 Checks if anti-aliasing is enabled. @return true if anti-aliasing is enabled, false otherwise
398 Checks if overprint is enabled. @return true if overprint is enabled, false otherwise
399 Checks if soft mask is applied. @return true if soft mask is enabled, false otherwise
400 Determines if alpha source is ignored. @return true if alpha source is ignored, false otherwise
401 Determines mask status from dictionary. @return boolean value indicating mask status or default true
402 Checks if the 'H' flag is set in the PDF action. @return true if 'H' flag is set, otherwise default to true
403 Checks if sound action is synchronous. @return true if synchronous, false otherwise
404 Determines if sound should repeat. @return true if sound repeats, false otherwise
405 Checks if sound mixing is enabled. @return true if mixing is enabled, false otherwise
406 Determines if line annotation has a cap style. @return true if line has cap style, false otherwise
407 Determines if the annotation is open by default. @return true if open by default, false otherwise
408 Determines if the digital signature is in pre-release mode. @return true if pre-release flag is set, false otherwise
409 Checks if non-EFont warning is masked. @return true if warning is masked, false otherwise
410 Checks if trusted mode is enabled. @return true if trusted mode is enabled, false otherwise
411 Checks if form fields need appearances. @return true if field appearances are needed, false otherwise
412 Determines if mask is enabled. @return true if mask is enabled, false otherwise
413 Determines if toolbar is hidden. @return true if toolbar is hidden, false otherwise
414 Determines if the menu bar is hidden. @return true if menu bar is hidden, false otherwise
415 Determines if window UI is hidden. @return true if window UI is hidden, false otherwise
416 Determines if PDF window should fit to content. @return true if window fits content, false otherwise
417 Determines if the PDF window should be centered. @return true if centering is enabled, false otherwise
418 Determines if document title is displayed. @return true if display doc title preference is enabled, false otherwise
419 Sets or clears a bit flag for a given field. @param field the COSName key to update @param bitFlag the specific bit flag to modify @param value true to set, false to clear the bit flag
420 Retrieves integer value from an embedded dictionary. @param embeddedDictionary name of the embedded dictionary @param key primary key to search within the dictionary @param defaultValue value to return if no valid number found @return integer value from dictionary or default
421 Retrieves integer value by key or returns default. @param key primary key to search @return integer value from dictionary or -1 if not found
422 Retrieves integer value by key or returns default. @param key primary key to search @return integer value from dictionary or -1 if not found
423 Converts string key to COSName and retrieves integer value. @param key key as string @param defaultValue default value if not found @return integer value from dictionary or default
424 Checks if a specific bit flag is set in an integer value retrieved by key. @param field primary key to search for the integer value @param bitFlag bit flag to check within the integer value @return true if the bit flag is set, false otherwise
425 Retrieves a COSDictionary representing the specified page number from the PDF page tree. @param pageNum 1-based page number to retrieve @param node current node in the page tree @param encountered count of pages already processed @return COSDictionary for the specified page or throws exception if not found
426 Retrieves the count of pages in the PDF document. @return integer representing the number of pages or 0 if not found
427 Retrieves start page number with default of 1. @return starting page number or 1 if not set
428 Retrieves function order mask. @return integer value representing function order or default 1
429 Retrieves mask value from PDF element. @return integer mask value or default (0)
430 Retrieves the encryption length from the crypt filter dictionary. @return encryption length or default value of 40 if not specified
431 Retrieves the mask value for encryption. @return mask value or default if not found
432 Retrieves encryption key length. @return default key length or value from dictionary
433 Retrieves the encryption version from the PDF document. @return encryption version number or default if not found
434 Retrieves permission mask from PDF encryption settings. @return integer value representing permissions or default if not found
435 Retrieves justification setting of annotation. @return string representation of justification value
436 Retrieves font flags. @return integer value representing font flags
437 Creates a PDAbstractPattern instance based on the pattern type. @param dictionary COSDictionary containing pattern data @param resourceCache ResourceCache for managing resources @return PDAbstractPattern object or throws IOException if unknown type
438 Retrieves paint type from tiling pattern. @return integer value representing paint type or default (0)
439 Retrieves tiling pattern type. @return integer representing tiling type or default value if not found
440 Creates a PDShading object based on the given dictionary. @param shadingDictionary COSDictionary containing shading properties @return PDShading instance corresponding to the shading type @throws IOException if unknown shading type is encountered
441 Retrieves bits per flag value. @return integer value representing bits per flag or -1 if not found
442 Retrieves vertices per row setting. @return number of vertices per row or -1 if not set
443 Retrieves bits per color component for shading. @return number of bits per color component
444 Calculates the mask for coordinate bits. @return integer value representing the bit mask
445 Retrieves action flags. @return integer value of flags or default if not found
446 Retrieves action flags mask. @return integer value of action flags or default (0)
447 Retrieves mask value for PDF target directory. @return integer mask value or -1 if not found
448 Retrieves mask value from dictionary. @return integer mask value or -1 if not found
449 Retrieves mask value from annotation dictionary. @return integer mask value or 0 if not found
450 Retrieves quadding mode for text annotation. @return integer value representing quadding mode or default (0)
451 Retrieves rotation setting of annotation. @return integer value representing rotation angle or default (0)
452 Checks if a specific flag is set in the dictionary. @return true if flag is set, false otherwise
453 Retrieves count of child outline items. @return integer count or 0 if not found
454 Retrieves the field's quadding mode. @return integer representing the quadding mode or default value if not set
455 Retrieves top index of displayed items in the list box. @return integer value representing the top index or default (0)
456 Retrieves COSObjects by specified type. @param type COSName type to match @return List of COSObjects matching the specified type
457 Retrieves and returns the page tree of the PDF document. @return PDPageTree object representing the document's pages
458 Loads and parses an FDF document from a file. @param file the FDF file to load @return FDFDocument containing parsed data or null on error @throws IOException if an I/O error occurs during loading or parsing
459 Parses an FDF document from an InputStream. @param input the InputStream containing the FDF data @return FDFDocument object or null on error @throws IOException if parsing fails
460 Parses and loads a PDF document in lenient mode. @return PDDocument object if successful @throws IOException if an error occurs during parsing or loading
461 Clears page resources by removing them from cache. @param COSName.RESOURCES key for accessing page resources in the cache
462 Retrieves a PDColorSpace by name. @param name the COSName of the colorspace @return PDColorSpace object or null if not found
463 Adds a font resource to the PDF document. @param font font object to be added @return unique COSName for the font resource
464 Adds a colorspace resource to the PDF document. @param colorSpace colorspace object to be added @return unique COSName for the colorspace resource
465 Adds an extended graphics state to the PDF document. @param extGState extended graphics state object @return unique COSName for the added graphics state
466 Adds a shading resource to the PDF document. @param shading shading object to be added @return unique COSName for the shading resource
467 Adds a pattern resource to the PDF document. @param pattern pattern object to be added @return unique COSName for the pattern resource
468 Adds a property list to the PDF document. @param properties property list to be added @return unique COSName for the resource
469 Adds an image resource to the PDF document. @param image PDImageXObject representing the image to be added @return unique COSName for the added image resource
470 Adds a form resource to the PDF document. @param form PDFormXObject to be added @return unique COSName for the form resource
471 Adds an XObject to the PDF document. @param xobject image or form object to be added @param prefix base string for the name @return unique COSName for the XObject
472 Retrieves the embedded file associated with key 'F'. @return PDEmbeddedFile object or null if not found
473 Retrieves the embedded file associated with DOS. @return PDEmbeddedFile object or null if not found
474 Retrieves and returns the embedded file for macOS. @return PDEmbeddedFile object or null if not found
475 Retrieves the embedded file for UNIX systems. @return PDEmbeddedFile object or null if not found
476 Retrieves the embedded file associated with the UF key. @return PDEmbeddedFile object or null if not found
477 Determines if a given PDOptionalContentGroup is enabled. @param group the optional content group to check @return true if the group is enabled, false otherwise
478 Enables or disables an optional content group by name. @param groupName name of the OCG to modify @param enable true to enable, false to disable @return true if operation successful, false otherwise
479 Retrieves or initializes the normal appearance entry for an annotation. @return PDAppearanceEntry representing the normal state appearance
480 Retrieves or creates a rollover appearance entry for an annotation. @return PDAppearanceEntry for the rollover state
481 Retrieves or initializes the normal appearance entry for an annotation. @return PDAppearanceEntry for normal state or a newly created one if not found
482 Masks button value at specified index. @param index position of the button in the form @throws IOException if an I/O error occurs
483 Masks a new outline item as the first child. @param newChild the new PDOutlineItem to be added
484 Masks a new outline item in the PDF document. @param newChild the PDOutlineItem to be masked
485 Finds a matching PDSignatureField in the document. @param fieldIterator iterator for PDF fields @param sigObject digital signature to match @return PDSignatureField with matching signature or null if not found
486 Retrieves the appearance stream for a PDF annotation. @param annotation PDF annotation object @return PDAppearanceStream object or null if not found
487 Processes font resources from annotation appearance streams. @param acroFormResources PDResources of the AcroForm @param annotation PDF annotation to process
488 Retrieves masked values from button options. @return Set of masked string values or empty set if none found
489 Checks if the checkbox is in its off state. @return true if checkbox is unchecked, false otherwise
490 Masks the checkbox by setting its state to off. @throws IOException if an I/O error occurs
491 Searches for a PDF page in the tree and returns its index. @param page PDPage object representing the document page @return index of the page if found, -1 otherwise
492 Sets parent node and updates limits. @param parentNode the parent node to set
493 Updates node with children and limits. @param kids list of child nodes to process
494 Sets or clears the names and limits for this node. @param names map of name-value pairs to be set
495 Initializes page labels for a PDF document using a dictionary. @param document the PDDocument to apply labels to @param dict the COSDictionary containing label data @throws IOException if an I/O error occurs during initialization
496 Retrieves the range for a specific parameter using FUNC_MASK. @param paramNum index of the parameter @return PDRange object or null if not valid
497 Constructs a new PDCalGray instance. Initializes with the COSName.CALGRAY name.
498 Constructs a PDCalRGB color space with default settings.
499 Initializes a CIE LAB color space.
500 Constructs a PDCalGray object from a COSArray. @param array CosArray representing CALGRAY color space values
501 Constructs a PDCalRGB object from a COSArray. @param rgb array representing RGB color components
502 Initializes the LAB color space with provided array. @param lab COSArray containing LAB values
503 Initializes axial shading context. @param shading PDShadingType2 object defining shading properties @param colorModel Color model for rendering @param xform Transform applied to device coordinates @param matrix Transformation matrix @param deviceBounds Bounds of the device area @throws IOException if an I/O error occurs during processing
504 Initializes a RadialShadingContext for rendering radial gradients. @param shading PDShadingType3 object defining the gradient @param colorModel ColorModel for rendering colors @param xform AffineTransform for device space to user space conversion @param matrix transformation matrix for shading space to device space @param deviceBounds bounding rectangle in device space @throws IOException if an I/O error occurs
505 Initializes a new TriangleBasedShadingContext for PDF rendering. @param shading PDShading instance to manage @param cm ColorModel for the shading @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if color space creation fails
506 Initializes a Type1ShadingContext for PDF rendering. @param shading PDShadingType1 object defining the shading @param colorModel ColorModel for rendering @param xform initial transformation matrix @param matrix additional transformation matrix @throws IOException if an I/O error occurs
507 Retrieves a PDRange for specified parameter. @param paramNum index of the parameter @return PDRange object or null if not available
508 Retrieves a PDRange for specified parameter. @param paramNum index of the parameter @return PDRange object or null if not available
509 Retrieves a string value from the dictionary using a given key. @param name the key to look up in the dictionary @param defaultValue the value to return if the key is not present @return the decoded string value or the provided default
510 Retrieves the mask value for solid style. @return the mask string or default value if key not found
511 Sets line width and dash pattern for PDF appearance. @param lineWidth the desired line width @param bs border style dictionary @param border COSArray representing border properties @throws IOException if an I/O error occurs during processing
512 Creates a new PDF document with metadata and catalog settings from the source document. @return PDDocument representing the newly created PDF @throws IOException if an I/O error occurs during document creation
513 Updates the PDF document version. @param newVersion the new version number to be set
514 Traverses up the structure hierarchy to find the root. @return PDStructureTreeRoot instance or null if not found
515 Retrieves and processes child objects of the structure node. @return List of processed child objects or empty list if none found
516 Retrieves or initializes PDF encryption. @return PDEncryption object for the document
517 Initializes encryption and decryption settings. Handles PDF document encryption by parsing the encryption dictionary and setting up security handlers.
518 Initializes font encoding and CMap. Sets up CMap based on font dictionary encoding. Checks for valid CMap and logs warnings if invalid.
519 Calculates the valid offset for font data. @param bytes font data byte array @param length1 initial length to consider @return adjusted offset for font processing
520 Validates and adjusts length2 for Type 1 font processing. @param bytes byte array containing font data @param length1 initial length parameter @param length2 length to validate and adjust @return valid length2 or adjusted value if invalid
521 Retrieves fractional display format. @return formatted string representing fractional display
522 Retrieves formatted string with key "RT". @return formatted string or "," if key not found
523 Retrieves the number format dictionary and returns its string value. @return formatted string or default separator "."
524 Retrieves PS value from dictionary or returns space if not found. @return PS string or space if key is missing
525 Retrieves formatted string from dictionary. @return decoded string or space if key "SS" not found
526 Retrieves the mask value from the number format dictionary. @return String representing the mask or default value if not found
527 Retrieves a string value from an embedded COSDictionary. @param embedded key for the embedded dictionary @param key key to retrieve the value from within the embedded dictionary @return decoded string or null if key is not found
528 Creates a priority queue of font matches based on descriptor and CID system info. @param fontDescriptor PDFontDescriptor object containing font details @param cidSystemInfo PDCIDSystemInfo object for CID font matching @return PriorityQueue of FontMatch objects sorted by match score
529 Retrieves a Calendar value from an embedded COSDictionary. @param embedded the name of the embedded dictionary to look up @param key the key whose associated Calendar value is sought @return Calendar instance or null if not found
530 Creates a COSInputStream for PDF decoding with default options. @param filters List of Filter objects to apply @param parameters COSDictionary with decoding parameters @param in InputStream containing encoded data @return COSInputStream with decoded data @throws IOException if I/O error occurs
531 Initializes a PDFObjectStreamParser with the given COSStream and document. @param stream PDF object stream to parse @param document parent PDF document @throws IOException if required entries are missing or invalid
532 Initializes a new PDFXrefStreamParser to parse the given COSStream. @param stream COSStream containing xref data @throws IOException if I/O error occurs during initialization
533 Constructs a PDCIDFontType0 instance. @param fontDictionary the COS dictionary for the font @param parent the parent PDType0Font object @throws IOException if an I/O error occurs during font processing
534 Initializes a PDCIDFontType2 instance. @param fontDictionary the COS dictionary for the font @param parent the PDType0Font parent @param trueTypeFont the TrueTypeFont to use @throws IOException if an I/O error occurs
535 Retrieves a CMap based on the provided COSBase. @param base COSName or COSStream containing the CMap data @return CMap object or null if not found @throws IOException if I/O error occurs or input is invalid
536 Constructs a circular annotation from a COSDictionary. @param field dictionary containing annotation properties
537 Constructs a square annotation from a COSDictionary. @param field dictionary containing annotation properties
538 Constructs a new PDAnnotationHighlight instance. @param dict the COSDictionary containing annotation data
539 Constructs a new PDAnnotationSquiggly instance. @param dict the COSDictionary containing annotation data
540 Constructs a new PDAnnotationStrikeout instance. @param dict the COSDictionary containing annotation data
541 Constructs a new PDAnnotationUnderline instance. @param dict the COSDictionary containing annotation data
542 Recursively clones and maps objects in a PDF structure tree. @param cloner utility for cloning PDF objects @param parentTreeEntry current entry in the structure tree @param objMapping mapping of original to cloned objects @throws IOException if an I/O error occurs during cloning
543 Merges entries from source to destination dictionary, excluding specified keys. @param src source COSDictionary containing items to merge @param dst destination COSDictionary where items are added @param cloner utility for cloning PDFBase objects @param exclude set of COSName keys to exclude from merging @throws IOException if I/O error occurs during cloning
544 Processes PDF document objects for writing. @param doc the COSDocument to process @throws IOException if an I/O error occurs during processing
545 Applies a cloud mask to a polygon based on given path coordinates. @param path 2D float array representing the polygon vertices @throws IOException if an I/O error occurs during processing
546 Applies a mask to create a cloudy effect. @param left bounding box left coordinate @param bottom bounding box bottom coordinate @param right bounding box right coordinate @param top bounding box top coordinate @param isEllipse flag indicating if the shape is an ellipse @throws IOException if an I/O error occurs during processing
547 Constructs a JavaScript action with specified code. @param js JavaScript code string to be executed in PDF
548 Initializes TilingPaint with specified parameters. @param drawer PageDrawer for rendering @param pattern PDTilingPattern to apply @param colorSpace PDColorSpace of the mask color @param color PDColor used in the mask @param xform AffineTransform defining the transformation @throws IOException if an I/O error occurs during processing
549 Applies mask to PDF image based on specified region and subsampling. @param region area of interest in the image @param subsampling level of subsampling for processing @return BufferedImage with applied mask or original if no mask @throws IOException if an I/O error occurs during processing
550 Converts PDImage to BufferedImage with optional clipping and subsampling. @param pdImage source image from PDF document @param colorKey COSArray defining color key ranges @return BufferedImage representation of the image with applied mask or original if no mask @throws IOException if an I/O error occurs during processing
551 Determines and sets the resource dictionary for a content stream. @param contentStream PDF content stream to process @return previous resources object
552 Calculates transformation for centering an overlay on a PDF page. @param page the target PDF page @param overlayMediaBox dimensions of the overlay content @return AffineTransform for centering the overlay
553 Masks a rectangle with another by setting the maximum coordinates. @param box the rectangle to mask with @return new PDRectangle with masked coordinates
554 Adjusts the rectangle for page rotation. @param page the PDF page to process @return PDRectangle adjusted for rotation or original if not rotated
555 Checks if the PDF element is marked. @return true if marked, false otherwise
556 Checks if user properties are masked in the PDF. @return true if UserProperties are masked, false otherwise
557 Checks if the document has any suspected elements. @return true if there are suspected elements, false otherwise
558 Checks if the action is a map. @return true if the action is a map, false otherwise
559 Determines if the popup annotation is open. @return true if the popup is open, false otherwise
560 Checks if fractional digits are masked. @return true if FD is set to false, otherwise false
561 Masks or unmasks a user property based on visibility. @param hidden true to mask the property, false to unmask it
562 Checks if non-stroking overprint is enabled. @return true if non-stroking overprint is enabled, false otherwise
563 Draws an inline image at specified coordinates. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during processing
564 Sets the visibility of the annotation. @param invisible true to make the annotation invisible, false otherwise
565 Sets or clears the hidden flag of the annotation. @param hidden true to hide, false to show the annotation
566 Sets the printed flag of the annotation. @param printed true if the annotation is marked as printed
567 Sets or clears the 'No Zoom' flag for an annotation. @param noZoom true to disable zooming, false otherwise
568 Sets or clears the NO_ROTATE flag for the annotation. @param noRotate true to set, false to clear the flag
569 Sets or clears the 'no view' flag for an annotation. @param noView true to hide the annotation, false to show it
570 Sets the read-only flag of the annotation. @param readOnly true to make the annotation read-only, false otherwise
571 Sets or clears the locked flag of the annotation. @param locked true to lock, false to unlock the annotation
572 Toggles the 'no view' flag of the annotation. @param toggleNoView true to enable, false to disable the no view flag
573 Sets or clears the locked contents flag of an annotation. @param lockedContents true to lock, false to unlock the contents
574 Sets visibility of annotation. @param invisible true to make annotation invisible
575 Sets or clears the hidden flag of the annotation. @param hidden true to hide, false to show the annotation
576 Sets the printed flag of the annotation. @param printed true to mark as printed, false otherwise
577 Sets or clears the 'no zoom' flag for an annotation. @param noZoom true to prevent zooming, false otherwise
578 Sets or clears the NO_ROTATE flag. @param noRotate whether to set or clear the flag
579 Sets or clears the 'no view' flag for this annotation. @param noView true to set, false to clear the flag
580 Sets or clears the read-only flag of the annotation. @param readOnly true to set as read-only, false otherwise
581 Sets or clears the locked flag of the annotation. @param locked true to lock, false to unlock the annotation
582 Toggles the "no view" flag of the annotation. @param toggleNoView true to set, false to clear the flag
583 Sets the annotation's contents lock status. @param lockedContents true to lock contents, false to unlock
584 Sets or clears the filter flag in seed value attributes. @param flag true to set, false to clear the filter flag
585 Sets the FF subfilter flag. @param flag value to set the FF subfilter flag
586 Sets or clears the digest method flag. @param flag true to set, false to clear the flag
587 Sets or clears the validation flag in seed value information. @param flag true to set the flag, false to clear it
588 Sets or clears the reason bit flag in seed value information. @param flag true to set, false to clear the reason bit
589 Sets or clears the legal attestation flag. @param flag true to set, false to clear the flag
590 Sets or clears the revision information flag. @param flag true to set, false to clear the flag
591 Sets or clears the subject flag in the certificate. @param flag true to set, false to clear the subject flag
592 Sets or clears the issuer flag in the certificate. @param flag true to set the flag, false to clear it
593 Sets or clears the mask flag in the certificate. @param flag true to set, false to clear the mask flag
594 Masks or unmasks the subject DN field in the certificate. @param flag true to mask, false to unmask
595 Sets or clears the key usage flag in the certificate. @param flag true to set, false to clear the key usage flag
596 Sets or clears the URL flag in the certificate. @param flag true to set, false to clear the URL flag
597 Sets or clears the italic flag for this outline item. @param italic true to set italic, false to clear it
598 Sets or clears the bold flag for this outline item. @param bold true to set bold, false to clear it
599 Sets or clears the signature flag in the form's dictionary. @param signaturesExist true if signatures exist, false otherwise
600 Sets or clears the append-only flag in form settings. @param appendOnly true to set, false to clear the append-only flag
601 Sets or clears the sort flag for choice fields. @param sort true to enable sorting, false to disable
602 Sets or clears the multi-select flag for PDF choice fields. @param multiSelect true to enable multi-selection, false otherwise
603 Sets or clears the spell-check flag for choice fields. @param doNotSpellCheck true to disable spell-check, false to enable it
604 Sets whether changes should be committed upon selection. @param commitOnSelChange true to enable automatic commit on selection change
605 Sets or clears the combo flag for choice fields. @param combo true to enable combo mode, false otherwise
606 Toggles editable state of the combo box. @param edit true to make combo box editable, false otherwise
607 Sets or clears the read-only flag for the field. @param readonly true to make the field read-only, false otherwise
608 Sets or clears the required flag for the field. @param required true to mark the field as required, false otherwise
609 Sets or clears the NO_EXPORT flag for the field. @param noExport true to prevent export, false otherwise
610 Initializes a new PDPushButton instance. @param acroForm the AcroForm containing this button
611 Initializes a new PDRadioButton instance. @param acroForm the AcroForm containing this radio button
612 Sets whether radio buttons are in unison. @param radiosInUnison true if all selected together, false otherwise
613 Sets or clears the multiline flag for the text field. @param multiline true to enable multiline input, false otherwise
614 Sets or clears password protection flag. @param password true to enable, false to disable password protection
615 Enables or disables file selection capability. @param fileSelect true to enable, false to disable
616 Enables or disables spell-checking for the text field. @param doNotSpellCheck true to disable spell-checking, false to enable it
617 Sets the 'Do Not Scroll' flag on the text field. @param doNotScroll true to prevent scrolling, false otherwise
618 Enables or disables comb field mode. @param comb true to enable comb mode, false otherwise
619 Toggles rich text formatting on or off. @param richText true to enable rich text, false to disable
620 Retrieves integer value from an embedded dictionary with default value. @param embeddedDictionary name of the embedded dictionary @param key primary key to search within the dictionary @return integer value from dictionary or -1 if no valid number found
621 Retrieves bitmask value from dictionary. @return integer representing bitmask or -1 if not found
622 Creates a PredictorOutputStream if predictor > 1. @param out underlying output stream for writing data @param decodeParams dictionary containing decoding parameters @return configured OutputStream or original if no prediction needed
623 Retrieves structure parent index of the page. @return integer value representing the structure parent or -1 if not found
624 Adjusts page count by decrementing ancestors' counts. @param node starting COSDictionary node in the hierarchy
625 Updates the page tree by adding a new page and adjusting parent counts. @param page PDPage object to be added
626 Retrieves bits per sample mask. @return integer value representing bits per sample or -1 if not found
627 Returns the Marker Context Identifier (MCID) of the marked content. @return MCID value from the COSDictionary or -1 if not found
628 Retrieves mask value from parent tree. @return integer value representing mask or -1 if not found
629 Retrieves the mask value associated with marked content. @return integer mask value or -1 if not found
630 Creates a PDImageXObject from TIFF data. @param document PDF document to add the image @param reader source of TIFF data @param number of images to process @return PDImageXObject or null if no data @throws IOException if processing fails
631 Retrieves line cap style from graphics state. @return integer value representing line cap style
632 Retrieves line join style from graphics state dictionary. @return integer value representing line join style or -1 if not found
633 Retrieves structure parent index of annotation. @return integer value representing structure parent or -1 if not found
634 Retrieves mask value for signature configuration. @return integer representing mask setting or -1 if not found
635 Retrieves maximum length of text field. @return Maximum allowed characters in the text field
636 Retrieves an integer value from the COSDictionary using a string key. @param name key as string @param defaultValue default value if not found @return integer value from dictionary or default
637 Checks if the annotation is invisible. @return true if the annotation is invisible, false otherwise
638 Checks if the annotation is hidden. @return true if the annotation is hidden, false otherwise
639 Checks if the annotation is printed. @return true if the 'Printed' flag is set, false otherwise
640 Checks if the "No Zoom" flag is set in the annotation's F field. @return true if the "No Zoom" flag is set, false otherwise
641 Checks if the annotation has the no-rotate flag set. @return true if no-rotate is enabled, false otherwise
642 Checks if annotation is not visible. Uses getFlag with COSName.F and FLAG_NO_VIEW. @return true if annotation is not visible, false otherwise
643 Checks if an annotation is read-only. @return true if the annotation is read-only, false otherwise
644 Checks if the annotation is locked. @return true if the annotation is locked, false otherwise
645 Checks if the annotation is set to toggle visibility. @return true if visibility toggling is enabled, false otherwise
646 Checks if the annotation's contents are locked. @return true if contents are locked, false otherwise
647 Checks if annotation is invisible. @return true if annotation is invisible, false otherwise
648 Checks if annotation is hidden. @return true if annotation is hidden, false otherwise
649 Checks if the annotation is printed. @return true if the annotation is marked as printed, false otherwise
650 Checks if the annotation is zoom-independent. @return true if no-zoom flag is set, false otherwise
651 Checks if the annotation has the no-rotate flag set. @return true if no-rotate flag is set, false otherwise
652 Checks if the annotation is not visible. @return true if annotation is not visible, false otherwise
653 Checks if the annotation is read-only. @return true if the annotation is read-only, false otherwise
654 Checks if annotation is locked. @return true if locked, false otherwise
655 Checks if the annotation is set to be non-viewable. @return true if annotation is non-viewable, false otherwise
656 Checks if locked contents flag is set in annotation. @return true if contents are locked, false otherwise
657 Checks if the FILTER flag is set in the seed value. @return true if FILTER flag is set, false otherwise
658 Checks if the subfilter flag is set in the seed value information. @return true if the subfilter flag is set, false otherwise
659 Checks if the digest method flag is set. @return true if the digest method flag is enabled, false otherwise
660 Checks if the validation flag is set in the seed value. @return true if validation flag is set, false otherwise
661 Checks if reason flag is set in seed value. @return true if reason flag is set, false otherwise
662 Checks if legal attestation flag is set. @return true if legal attestation flag is enabled, false otherwise
663 Checks if the add revision info flag is set in seed value attributes. @return true if the flag is set, false otherwise
664 Checks if the subject flag is set in the certificate's FF field. @return true if the subject flag is set, false otherwise
665 Checks if the issuer flag is set in the FF field. @return true if the issuer flag is set, false otherwise
666 Checks if OID flag is set in the certificate. @return true if OID flag is set, false otherwise
667 Checks if the SUBJECT_DN flag is set in the FF field of the certificate. @return true if the flag is set, false otherwise
668 Checks if key usage flag is set in certificate attributes. @return true if key usage is required, false otherwise
669 Checks if URL flag is set in the digital signature certificate. @return true if URL flag is set, false otherwise
670 Checks if the italic flag is set in the outline item. @return true if italic flag is set, false otherwise
671 Checks if the bold flag is set in the outline item. @return true if the bold flag is enabled, false otherwise
672 Checks if signatures exist in the form. @return true if signatures are present, false otherwise
673 Checks if the form is in append-only mode. @return true if append-only flag is set, false otherwise
674 Checks if the button is of push type. @return true if the button is a push button, false otherwise
675 Checks if radio button flag is set. @return true if radio button flag is enabled, false otherwise
676 Checks if the sort flag is set for choice fields. @return true if sort flag is enabled, false otherwise
677 Checks if multi-select is enabled for choice fields. @return true if multi-select flag is set, false otherwise
678 Checks if spell-check is disabled for the choice field. @return true if spell-check is disabled, false otherwise
679 Checks if the commit on selection change flag is set. @return true if the flag is set, false otherwise
680 Checks if combo box flag is set. @return true if combo box flag is enabled, false otherwise
681 Checks if the combo box is editable. @return true if editable flag is set, false otherwise
682 Checks if the field is read-only. @return true if the field is read-only, false otherwise
683 Checks if the field is marked as required. @return true if the field is required, false otherwise
684 Checks if the 'no export' flag is set in the field's flags. @return true if the 'no export' flag is set, false otherwise
685 Checks if radio buttons operate in unison. @return true if radios are in unison, false otherwise
686 Checks if the text field supports multiline input. @return true if multiline is enabled, false otherwise
687 Checks if the text field is password-protected. @return true if password protection is enabled, false otherwise
688 Checks if file selection flag is set. @return true if file select flag is enabled, false otherwise
689 Checks if spell-checking is disabled. @return true if spell-checking is disabled, false otherwise
690 Checks if the text field does not scroll. @return true if the 'do not scroll' flag is set, false otherwise
691 Checks if the text field is configured for comb presentation. @return true if comb flag is set, false otherwise
692 Checks if the text field supports rich text formatting. @return true if rich text is enabled, false otherwise
693 Retrieves and initializes a PDF page by index. @param index 1-based index of the page to retrieve @return PDPage object representing the specified page
694 Retrieves the page count of the PDF document. @return integer representing the number of pages or 0 if not found
695 Updates mask attributes for a PDF structure element. @param attributeObject the attribute object to process
696 Updates mask value in attribute object. @param attributeObject the PDAttributeObject to modify
697 Updates or initializes the mask for a PDF structure element. @param className name of the class to be associated with the mask
698 Increments and sets the revision number of the PDF structure element.
699 Handles decryption of PDF documents using public key cryptography. @param encryption PDEncryption object containing encryption details @param documentIDArray COSArray with document ID information @param decryptionMaterial Decryption material including private key @throws IOException if decryption fails or required data is missing
700 Masks the owner password for PDF encryption. @return masked byte array of the owner password or null if not set
701 Masks the user encryption key based on the PDF version. @return masked user encryption key or null if not available
702 Creates a vector representing character width. @param code character code @return Vector with x component as character width in PDF units @throws IOException if an I/O error occurs
703 Calculates the total width of a string in PDF font. @param text input string to measure @return float representing the total width @throws IOException on I/O error during processing
704 Retrieves a PDAbstractPattern by name. @param name the resource name @return PDAbstractPattern object or throws IOException if not found
705 Processes mask operations in a PDF content stream. @param contentStream PDContentStream object containing PDF data @throws IOException if an I/O error occurs during processing
706 Retrieves a PDShading object by name. @param name the name of the shading resource @return PDShading instance or null if not found @throws IOException if an error occurs during retrieval
707 Retrieves the PDShading object for the current pattern. @return PDShading instance or null if not found @throws IOException if an error occurs during retrieval
708 Retrieves the number of bits per color component. Uses cached value if available; otherwise, fetches from PDF document. @return int representing bits per color component
709 Retrieves the bits per color component for shading. @return number of bits per color component, defaulting to -1 if not set
710 Returns the function mask for coordinate bits. @return integer value representing the bit mask
711 Calculates the function mask for shading. @return integer value representing the function mask
712 Checks if any child outline items are open. @return true if at least one item is open, false otherwise
713 Creates a PDField based on the field type and attributes. @param form the AcroForm containing this field @param field the COSDictionary representing the field attributes @param parent the parent field in the hierarchy, if any @return PDField instance or null if unsupported type
714 Initializes PDFPrintable with document and rendering settings. @param document the PDDocument to print @param scaling the Scaling option for page content @param showPageBorder flag to display page borders @param dpi dots per inch for printing quality @param center flag to center pages during printing @param renderer PDFRenderer instance for rendering pages
715 Initializes PDFRenderer with a specified document. @param document PDDocument object to render
716 Loads and parses an FDF document from a file. @param filename path to the FDF file @return FDFDocument containing parsed data or null on error @throws IOException if an I/O error occurs during loading or parsing
717 Loads and parses a PDF document from a byte array. @param input byte array containing the PDF data @param password decryption password for encrypted documents @param keyStore keystore containing encryption keys @param alias alias for the key in the keystore @param streamCacheCreateFunction function to create stream cache @return PDDocument object if successful @throws IOException if an I/O error occurs during loading or parsing
718 Loads and parses a PDF document from a random access read source. @param randomAccessRead input source for the PDF document @param password decryption password for encrypted documents @param keyStore keystore containing encryption keys @param alias alias for the key in the keystore @param streamCacheCreateFunction function to create stream cache @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
719 Sets stroking color to RGB in PDF content stream. @param operator the operator for setting color @param arguments list of operands (not used)
720 Retrieves and caches a PDF XObject by name. @param name the name of the XObject to retrieve @return PDXObject instance or null if not found @throws IOException if an error occurs during retrieval
721 Applies a mask to the given PDFont with specified size. @param font PDFont object to apply mask @param fontSize size of the font @throws IOException if an I/O error occurs
722 Applies an extended graphics state to the PDF document. @param state PDExtendedGraphicsState object representing the graphics state to apply @throws IOException if writing fails
723 Applies a shading pattern to the PDF content stream. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs during processing
724 Writes mask data to PDF stream. @param tag COSName for the mask @param propertyList PDPropertyList containing mask properties @throws IOException if writing fails
725 Applies a mask to the PDF content stream. @param tag COSName representing the mask @param propertyList PDPropertyList containing mask properties @throws IOException if an I/O error occurs during processing
726 Draws an image within a specified area of the PDF. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width desired width of the image @param height desired height of the image @throws IOException if an I/O error occurs during drawing
727 Draws an image with a specified transformation matrix. @param image PDImageXObject to be drawn @param matrix transformation matrix for the image @throws IOException if an I/O error occurs during drawing
728 Adds a form resource to the PDF and draws it. @param form PDFormXObject to be added @throws IOException if an I/O error occurs during processing
729 Checks if an optional content group by name is enabled. @param groupName the name of the content group to check @return true if the group is enabled, false otherwise
730 Checks if an optional content group is enabled in the PDF. @param group the optional content group to check @return true if the group is enabled or properties are null, false otherwise
731 Masks a new outline item as the first child and updates its properties. @param newChild the new PDOutlineItem to be added
732 Masks a new outline item and updates related properties. @param newChild the PDOutlineItem to be masked and updated
733 Validates button value against allowed options. @param value user input to validate @throws IllegalArgumentException if value is invalid
734 Updates page destinations in the destination document. @param destinationDocument PDF document to update
735 Retrieves and initializes page labels for the PDF document. @return PDPageLabels object or null if no labels are found @throws IOException if an I/O error occurs during retrieval
736 Initializes a new instance of GouraudShadingContext. @param shading PDShading object representing the shading details @param colorModel ColorModel specifying the color space and pixel representation @param xform AffineTransform for device to user coordinate conversion @param matrix Matrix defining the transformation from source to destination coordinates
737 Prepares a new destination document for splitting. @throws IOException if an I/O error occurs during document creation or processing
738 Writes PDF header and performs version checks. @param doc the COSDocument to process @throws IOException if an I/O error occurs
739 Sets optional content properties for the document. @param ocProperties Optional content properties to be set
740 Retrieves role mappings from the PDF structure tree. @return Map containing role mappings or an empty map if not found
741 Prepares the PDF document for writing by setting up security, IDs, and objects. @param doc PDDocument to be written @param signInterface interface for signing the document @throws IOException if an I/O error occurs
742 Handles PDF object compression and key assignment. @param key proposed or existing COSObjectKey @param base the COSBase object to process @return processed COSBase object
743 Applies a protection policy to the PDF document. @param policy the ProtectionPolicy to apply @throws IOException if no suitable security handler is found
744 Configures PDF encryption settings using public key cryptography. @param doc PDDocument to be encrypted @throws IOException if I/O error occurs during encryption
745 Converts character code to glyph name. @param code character code to convert @return glyph name or ".notdef" if not found
746 Maps character code to glyph ID. @param code character code to map @return glyph ID or 0 if not found @throws IOException if an I/O error occurs
747 Retrieves Mac OS subtype of the embedded file. @return subtype string or null if not found
748 Retrieves creator information from Mac OS-specific embedded file parameters. @return Creator string or null if not found
749 Retrieves Mac OS resource fork from embedded file parameters. @return resource fork string or null if not found
750 Maps a base font to a CIDFontMapping based on various criteria. @param baseFont the PostScript name of the base font @param fontDescriptor PDFontDescriptor for the font @param cidSystemInfo PDCIDSystemInfo for CID font matching @return CIDFontMapping object representing the best match or null if not found
751 Creates and returns a decoded input stream for PDF data using default options. @return COSInputStream with decoded data @throws IOException if I/O error occurs
752 Masks and processes PDF object streams. Updates cross-reference table with object offsets. @param xrefTable map of COSObjectKey to offset @throws IOException if I/O error occurs during processing
753 Retrieves a COSBase object from the PDF document. @param objstmObjNr object stream number @param key unique identifier for the COSObject @return COSBase object or null if not found @throws IOException if an I/O error occurs during parsing
754 Parses and processes a cross-reference stream in a PDF. @param objByteOffset byte offset of the object @param isStandalone flag indicating if the xref is standalone @return previous xref table offset or -1 if not found @throws IOException if I/O error occurs during parsing
755 Retrieves the content stream of a PDF page. @return InputStream with page content or empty stream if none found @throws IOException if I/O error occurs
756 Constructs a PDCIDFontType2 instance. @param fontDictionary the COS dictionary for the font @param parent the PDType0Font parent @throws IOException if an I/O error occurs
757 Creates and returns a PDCIDFontType2 instance. @return PDCIDFontType2 object representing the embedded CID font
758 Creates a PDAnnotation object based on the given COSBase. @param base the COSBase to process @return a PDAnnotation instance or throws an exception if unsupported @throws IOException if the base is not a COSDictionary or unknown annotation type
759 Applies a mask to create a cloudy effect on a rectangle. Adjusts dimensions and applies visual effects. @param rd original rectangle or null @throws IOException if an I/O error occurs during processing
760 Applies a mask to create a cloudy border effect. @param leftOrig x-coordinate of the bounding box's left edge @param bottomOrig y-coordinate of the bounding box's bottom edge @param rightOrig x-coordinate of the bounding box's right edge @param topOrig y-coordinate of the bounding box's top edge @throws IOException if an I/O error occurs during masking
761 Initializes TilingPaint with specified parameters. @param drawer PageDrawer for rendering @param pattern PDTilingPattern to apply @param xform AffineTransform defining the transformation @throws IOException if an I/O error occurs during processing
762 Retrieves an opaque image without subsampling. @return BufferedImage of the PDF image with applied mask or original if no mask @throws IOException if an I/O error occurs during processing
763 Initializes a content stream for a PDF page. @param document the PDDocument to which this stream belongs @param sourcePage the PDPage where content will be added or modified @param appendContent mode specifying how to handle existing content @param compress whether to compress the output stream @param resetContext whether to reset graphics context before appending @throws IOException if an I/O error occurs
764 Retrieves and masks the crop box of a PDF page. @return PDRectangle representing the masked crop box or default if not found
765 Draws an inline image at specified coordinates with default dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during processing
766 Draws an inline image in the PDF content stream. @param inlineImage PDInlineImage to draw @param x x-coordinate of top-left corner @param y y-coordinate of top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs
767 Draws an inline image in a PDF form. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during processing
768 Draws an inline image on the PDF page. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during processing
769 Draws an inline image within a pattern context. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during processing
770 This Java method, `FDFAnnotation(Element element)`, is a constructor for the `FDFAnnotation` class. It takes an XML element as input and initializes an annotation object with various properties defined in the element's attributes. Here's a breakdown of what the method does: 1. **Initialization**: The method starts by calling the default constructor (`this()`) to initialize any base class fields or perform initial setup. 2. **Page Attribute**: It retrieves the "page" attribute from the XML element and checks if it is null or empty. If either condition is true, an `IOException` is thrown with a message indicating that the required attribute 'page' is missing. Otherwise, it parses the page number as an integer and sets it using the `setPage()` method. 3. **Color Attribute**: The method looks for the "color" attribute. If found and formatted correctly (a 7-character string starting with '#'), it converts the hexadecimal color value to an integer and creates a `Color` object, which is then set using the `setColor()` method. 4. **Date Attribute**: It retrieves the "date" attribute and sets it using the `setDate()` method. 5. **Flags Attribute**: The method processes the "flags" attribute by splitting its value into tokens (assuming they are comma-separated). For each token, it checks if it corresponds to a known flag (like 'invisible', 'hidden', etc.) and sets the corresponding property using methods like `setInvisible()`, `setHidden()`, etc. 6. **Name Attribute**: It retrieves the "name" attribute and sets it using the `setName()` method. 7. **Rectangle Attribute**: The method looks for the "rect" attribute, which should contain four comma-separated numbers representing the rectangle's coordinates. If the attribute is missing or incorrectly formatted, an `IOException` is thrown. Otherwise, it parses these values into floats and creates a `PDRectangle` object, which is then set using the `setRectangle()` method. 8. **Title Attribute**: It retrieves the "title" attribute and sets it using the `setTitle()` method. 9. **Markup Annotation Attributes**: - **Creation Date**: The method converts the "creationdate" attribute to a calendar object using `DateConverter.toCalendar()` and sets it using `setCreationDate()`. - **Opacity Attribute**: If found, it parses the opacity value as a float and sets it using `setOpacity()`. - **Subject Attribute**: It retrieves the "subject" attribute and sets it using `setSubject()`. 10. **Intent Attribute**: The method checks for both "intent" and "IT" attributes (the latter being non-standard but accepted by Adobe). If either is found, it sets the intent using `setIntent()`. 11. **Contents and Rich Contents**: - It uses XPath to evaluate expressions to retrieve the contents of the annotation. - For standard content, it evaluates the "contents[1]" expression and sets it using `setContents()`. - For rich text content, it evaluates the "contents-richtext[1]" expression. If found, it converts the node to a string and sets both the rich contents and plain text contents using `setRichContents()` and `setContents()` respectively. 12. **Border Style**: - The method creates a new `PDBorderStyleDictionary` object. - It retrieves the "width" attribute and, if found, parses it as a float and sets the border width using `setWidth()`. - If the width is greater than 0, it processes additional style-related attributes like "style", "dashes", and "intensity": - **Style**: Depending on the value of the "style" attribute, it sets the border style to one of several predefined styles (DASHED, BEVELED, INSET, SOLID) or creates a `PDBorderEffectDictionary` for more complex styles like CLOUDY. - **Dashes**: If found, it splits the "dashes" attribute into values and adds them to a `COSArray`, which is then set as the dash pattern using `setDashStyle()`. - Finally, it sets the border style on the annotation using `setBorderStyle()`. This method effectively parses an XML element representing an annotation and initializes the corresponding `FDFAnnotation` object with all relevant properties. It handles various error conditions, such as missing or incorrectly formatted attributes, by throwing exceptions where appropriate.
771 Decodes JPEG 2000 image data and writes to output stream. @param encoded input stream containing encoded image data @param decoded output stream for decoded image data @param parameters decoding parameters @param index index of the decode operation @param options additional decoding options @return DecodeResult object with decoded image and metadata @throws IOException if decoding fails
772 Decompresses LZW-encoded PDF data. @param encoded InputStream of compressed data @param decoded OutputStream for decompressed data @param parameters COSDictionary with decoding parameters @param index index in the filter list @return DecodeResult object containing parameters @throws IOException if an I/O error occurs
773 Removes page at specified index. @param index 0-based index of the page to remove
774 Removes a PDF page from the tree. @param page PDPage object to be removed
775 Adds a new page to the PDF document and updates its XRef object numbers. @param page PDPage object to be added
776 Replaces a page in the PDF document. @param newPage the new page to insert @param nextPage the next page after which the new page will be inserted
777 Inserts a new page after an existing page in the PDF document. @param newPage the new page to be inserted @param prevPage the existing page after which the new page will be inserted @throws IllegalArgumentException if the previous page is not found in its parent's children
778 Processes a marked content element. @param markedContent the PDMarkedContent instance to process @throws IllegalArgumentException if MCID is invalid
779 Handles font mask processing. Determines encoding and CMap names, retrieves UCS2 CMap if needed. @throws IOException if an I/O error occurs
780 Creates a PDImageXObject from a byte array. @param document PDF document to add the image @param byteArray source of image data @param number of images to process @return PDImageXObject or null if no data @throws IOException if processing fails
781 Creates a PDImageXObject from a TIFF file. @param document PDF document to add the image @param file source TIFF file @param number of images to process @return PDImageXObject or null if no data @throws IOException if processing fails
782 Sets or removes display values for choice fields. @param displayValues list of strings to be set as display values
783 Masks choice field options with export and display values. @param exportValues list of actual values for options @param displayValues list of displayed values for options
784 Sets or resets indices for choice field options. @param values list of index integers to set; null or empty resets the indices
785 Determines if a text field should be masked. @return true if the field is a PDTextField with specific characteristics, false otherwise
786 Retrieves a PDF page by index. @param pageIndex 1-based index of the page to retrieve @return PDPage object representing the specified page
787 Initializes a PageExtractor with a PDF document. @param sourceDocument the original PDF document to extract pages from
788 Initializes a new PDFPageable instance. @param document the PDDocument to be paginated and printed @param orientation the page orientation (e.g., portrait, landscape) @param showPageBorder flag to indicate if page borders should be visible @param dpi dots per inch for rendering quality @param center flag to center content on pages
789 Updates mask value if associated attribute object is present.
790 Masks and processes encryption keys for PDF documents. @param encryption PDEncryption object containing encryption details @param documentIDArray array containing document ID data @param decryptionMaterial material used for decryption @throws IOException if operations fail or unknown revision
791 Determines the width of the space character in the PDF font. @return float representing the space width
792 Masks and positions text within a PDF form field appearance. @param contents content stream for drawing appearances @param appearanceStream appearance stream to apply the mask to @param font font used for rendering text @param fontSize size of the font @throws IOException on I/O errors during processing
793 Checks if the font is fixed pitch. @return true if font is fixed pitch, false otherwise
794 Checks if the serif flag is set in the font descriptor. @return true if serif flag is set, false otherwise
795 Checks if the font is symbolic. @return true if the font is symbolic, false otherwise
796 Checks if the script flag is set in the font descriptor. @return true if the script flag is enabled, false otherwise
797 Checks if the font is non-symbolic. @return true if the font is non-symbolic, false otherwise
798 Checks if the italic flag is set in the font descriptor. @return true if the italic flag is set, false otherwise
799 Checks if the 'All Caps' font flag is set. @return true if 'All Caps' flag is enabled, false otherwise
800 Checks if the small caps flag is set in the font descriptor. @return true if small caps are enabled, false otherwise
801 Checks if the FORCE_BOLD flag is set in the font descriptor. @return true if FORCE_BOLD is enabled, false otherwise
802 Sets or clears the fixed pitch font flag. @param flag true to set fixed pitch, false to clear
803 Sets or clears the serif font flag. @param flag true to set serif, false to clear
804 Sets or clears the SYMBOLIC font flag. @param flag true to set, false to clear the flag
805 Sets or clears the script font flag. @param flag true to set, false to clear the script flag
806 Sets or clears the NON_SYMBOLIC font flag. @param flag true to set, false to clear the flag
807 Sets or clears the italic font flag. @param flag true to set italic, false to clear
808 Sets or clears the all-caps font flag. @param flag true to set all-caps, false to clear
809 Sets or clears the small caps font flag. @param flag true to enable, false to disable small caps
810 Sets or clears the force bold flag. @param flag true to set, false to clear the flag
811 Retrieves a PDAbstractPattern by color name. @param color the color to find the pattern for @return PDAbstractPattern object or throws IOException if not found
812 Applies mask to a transparency group. @param group PDTransparencyGroup object representing the mask @throws IOException if an I/O error occurs during processing
813 Handles mask operations for a Type 3 character procedure. @param charProc Type 3 character procedure to process @param textRenderingMatrix current text rendering matrix @throws IOException if an I/O error occurs during processing
814 Applies mask to annotation appearance. @param annotation PDF annotation to process @param appearance associated appearance stream @throws IOException if I/O error occurs
815 Applies mask using tiling pattern and color. @param tilingPattern the tiling pattern to apply @param color the color for masking @param colorSpace the color space of the mask @param patternMatrix transformation matrix for the pattern @throws IOException if an I/O error occurs
816 Applies mask operations to a PDF content stream. @param contentStream PDContentStream object containing PDF data @throws IOException if an I/O error occurs during processing
817 Adjusts open count of outline items recursively. @param delta amount to adjust open count by
818 Creates a PDField instance based on field type and attributes. @param form the AcroForm containing this field @param field the COSDictionary representing the field attributes @param parent the parent field in the hierarchy, if any @return PDField instance or null if unsupported type
819 Initializes a PDFPrintable instance with specified settings. @param document the PDDocument to print @param scaling the Scaling option for page content @param showPageBorder flag to display page borders @param dpi dots per inch for printing quality @param center flag to center pages during printing
820 Loads and parses a PDF document from a byte array. @param input byte array containing the PDF data @param password decryption password for encrypted documents @param keyStore keystore containing encryption keys @param alias alias for the key in the keystore @return PDDocument object if successful @throws IOException if an I/O error occurs during loading or parsing
821 Loads and parses a PDF document from a file. @param file PDF file to load @param password decryption password for encrypted documents @param keyStore keystore containing encryption keys @param alias alias for the key in the keystore @param streamCacheCreateFunction function to create stream cache @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
822 Loads and parses a PDF document from a random access read source. @param randomAccessRead input source for the PDF document @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
823 Loads and parses a PDF document from a random access read source. @param randomAccessRead input source for the PDF document @param streamCacheCreateFunction function to create stream cache @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
824 Loads and parses a PDF document from a random access read source. @param randomAccessRead input source for the PDF document @param password decryption password for encrypted documents @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
825 Loads and parses a PDF document from a random access read source. @param randomAccessRead input source for the PDF document @param password decryption password for encrypted documents @param keyStore keystore containing encryption keys @param alias alias for the key in the keystore @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
826 Loads and parses a PDF document. @param randomAccessRead input source for the PDF document @param password decryption password for encrypted documents @param streamCacheCreateFunction function to create stream cache @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
827 Initializes visual signature settings from a PDF file. @param file PDF file containing the document to be processed @throws IOException if an I/O error occurs during initialization
828 Initializes visual signature handling from an input stream. @param is source input stream of the PDF document @throws IOException if an I/O error occurs during initialization
829 Applies a mask to the given PDFont with specified size. @param font PDFont object to apply mask @param fontSize size of the font @throws IOException if an I/O error occurs
830 Sets the font and size for text rendering. @param font PDFont object to set @param fontSize size of the font @throws IOException if an I/O error occurs
831 Sets the font and size for text rendering. @param font PDFont object to set @param fontSize size of the font @throws IOException if an I/O error occurs
832 Sets the font and size for pattern content. @param font PDFont object to set @param fontSize size of the font @throws IOException if an I/O error occurs
833 Sets stroking color and color space for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during processing
834 Sets non-stroking color and writes mask data for a given PDF color. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
835 Applies an extended graphics state to the PDF document. @param state PDExtendedGraphicsState object representing the graphics state to apply @throws IOException if writing fails
836 Applies a graphics state to the PDF form. @param state PDExtendedGraphicsState object representing the graphics state @throws IOException if writing fails
837 Applies an extended graphics state to the PDF page. @param state PDExtendedGraphicsState object representing the graphics state @throws IOException if writing fails
838 Applies a graphics state to the pattern content stream. @param state PDExtendedGraphicsState object representing the graphics state to apply @throws IOException if writing fails
839 Applies a shading pattern to the PDF content stream. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs or text mode is active
840 Applies a shading pattern to the PDF content stream. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs during processing
841 Applies a shading pattern to the PDF content stream. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs or if called within a text block
842 Applies a shading pattern to the PDF content stream. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs during processing or if called within a text block
843 Begins marked content sequence in PDF stream. @param tag COSName for the mask @param propertyList PDPropertyList containing mask properties @throws IOException if writing fails
844 Begins marked content with specified tag and properties. @param tag COSName for the marked content @param propertyList PDPropertyList containing properties @throws IOException if writing fails
845 Begins marked content with a specified tag and property list. @param tag COSName for the marked content @param propertyList PDPropertyList containing properties @throws IOException if writing fails
846 Begins marked content with specified tag and properties. @param tag COSName for the marked content @param propertyList PDPropertyList containing marked content properties @throws IOException if writing to stream fails
847 Applies a mask to the PDF content stream. @param tag COSName representing the mask @param propertyList PDPropertyList containing mask properties @throws IOException if an I/O error occurs during processing
848 Applies a mask to the PDF content stream. @param tag COSName representing the mask @param propertyList PDPropertyList containing mask properties @throws IOException if an I/O error occurs during processing
849 Applies a mask to the PDF content stream. @param tag COSName representing the mask @param propertyList PDPropertyList containing mask properties @throws IOException if an I/O error occurs during processing
850 Applies a mask to the PDF content stream. @param tag COSName representing the mask @param propertyList PDPropertyList containing mask properties @throws IOException if an I/O error occurs during processing
851 Draws an image on the PDF canvas. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width desired width of the image @param height desired height of the image @throws IOException if an I/O error occurs during drawing
852 Draws an image on the PDF form. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width desired width of the image @param height desired height of the image @throws IOException if drawing fails or text mode is active
853 Draws an image on the PDF page. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width desired width of the image @param height desired height of the image @throws IOException if an I/O error occurs during drawing
854 Draws an image within a specified area of the PDF. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width desired width of the image @param height desired height of the image @throws IOException if an I/O error occurs during drawing or text mode is active
855 Draws an image with a specified transformation matrix, ensuring it's not used in text mode. @param image PDImageXObject to be drawn @param matrix transformation matrix for the image @throws IOException if an I/O error occurs during drawing or if used within text mode
856 Draws an image with a specified transformation matrix. @param image PDImageXObject to be drawn @param matrix transformation matrix for the image @throws IOException if an I/O error occurs during drawing
857 Draws an image on the PDF page with a specified transformation. @param image PDImageXObject to be drawn @param matrix transformation matrix for the image @throws IOException if an I/O error occurs during drawing
858 Draws an image with a specified transformation matrix. @param image PDImageXObject to be drawn @param matrix transformation matrix for the image @throws IOException if an I/O error occurs during drawing or text mode is active
859 Draws a form resource in the PDF content stream. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs or drawForm is called within a text block
860 Draws a PDF form object. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs or drawForm is called within text mode
861 Draws a form on the PDF page. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs during processing
862 Draws a form object in the PDF content stream. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs or text mode is active
863 Applies encryption to a PDF document. @param document PDDocument object to encrypt @throws IOException if security operations fail
864 Sets mask and validates button value. @param value user input to set as mask and validate
865 Masks button value and updates widget states. @param value the string value to mask @throws IOException if an I/O error occurs
866 Clones a PDF element based on its type. @param src source COSBase object to clone @param dstParent parent COSDictionary for the cloned object @param currentPageDict current page dictionary context @return cloned COSBase object or original if unsupported type
867 Retrieves the destination page number or index. @return Page number or -1 if not found
868 Transfers optional content properties from source to target PDF document. @param srcDoc the source PDF document @throws IOException if an I/O error occurs during processing
869 Embeds Type 2 CID font with specified tag and GID to CID mapping. @param ttfSubset input stream of TTF subset data @param tag prefix for the font name @param gidToCid mapping of GIDs to CIDs @throws IOException if I/O operations fail
870 Retrieves and processes the mask value for a PDF element. @return processed mask value as a string or original type if not applicable
871 Writes PDF document without signing. @param doc PDDocument to be written @throws IOException if an I/O error occurs
872 Writes PDF document to output stream. @param output target stream for writing the PDF @throws IOException if an I/O error occurs
873 Writes PDF content to an output stream. @param output target stream for writing the PDF @param objectsToWrite set of COSDictionary objects to write @throws IOException if an I/O error occurs or document is not loaded
874 Compresses and processes PDF objects. @param current the current COSBase object to process @throws IOException if an I/O error occurs
875 Reads and decodes stream content. @return Decoded string from stream or empty if error occurs
876 Retrieves an input stream for PDF data using default decoding options. @return COSInputStream with decoded data from the PDF stream @throws IOException if I/O error occurs during stream processing
877 Reads and processes patch data for mesh-based shading. @param xform affine transform matrix @param matrix transformation matrix @param controlPoints number of control points @return List of Patch objects or empty list if no patches found @throws IOException if I/O error occurs
878 Masks and processes PDF object streams, updating cross-reference table. @param xrefTable map of COSObjectKey to offset @return COSDictionary containing processed trailer information @throws IOException if I/O error occurs during processing
879 Masks and retrieves a PDF object by key. @param objKey unique identifier for the COS object @param requireExistingNotCompressedObj flag to check for existing non-compressed objects @return masked or decrypted COSBase object or null if not found
880 Parses and processes the cross-reference table of a PDF document. @param document the COSDocument to process @param startXRefOffset initial starting offset for XRef processing @return COSDictionary representing the parsed trailer @throws IOException if an I/O error occurs during parsing
881 Creates a PDCIDFont from a COS dictionary. @param dictionary the font dictionary @param parent the PDType0Font parent @return PDCIDFont instance based on the dictionary subtype @throws IOException if the font type is invalid or an I/O error occurs
882 Filters annotations on a PDF page based on given criteria. @param annotationFilter filter to apply to annotations @return list of filtered PDAnnotation objects @throws IOException if an error occurs during processing
883 Retrieves and returns a COSObjectable from the referenced PDF object. @return COSObjectable instance or null if not found or invalid
884 Retrieves and creates a PDAnnotation from the IRT key. @return PDAnnotation object or null if not found @throws IOException if an error occurs during annotation creation
885 Retrieves and returns the parent markup annotation. @return PDAnnotationMarkup object or null if not found or invalid type
886 Recursively processes and clones objects from a number tree. @param cloner utility for cloning PDF objects @param numberTreeAsMap map representation of the number tree @param objMapping mapping of original to cloned objects @throws IOException if an I/O error occurs during processing
887 Applies a mask to create a cloudy border effect within a given rectangle. @param rd original rectangle or null @throws IOException if an I/O error occurs during masking
888 Masks annotation's appearance stream. @param compress flag indicating whether to compress the output stream @return PDAppearanceContentStream for further modifications
889 Initializes a new PDPageContentStream for appending content. @param document the PDDocument to which this stream belongs @param sourcePage the PDPage where content will be added or modified @throws IOException if an I/O error occurs
890 Initializes a content stream for a PDF page. @param document the PDDocument to which this stream belongs @param sourcePage the PDPage where content will be added or modified @param appendContent mode specifying how to handle existing content @param compress whether to compress the output stream @throws IOException if an I/O error occurs
891 Masks the current PDF page. @param page PDF page to be masked @throws IllegalArgumentException if page is null
892 Retrieves and masks the bleed box of a PDF page. @return PDRectangle representing the masked bleed box or default if not found
893 Retrieves and masks the Trim Box of a PDF page. @return PDRectangle representing the masked Trim Box or default if not found
894 Retrieves and masks the art box of a PDF page. @return PDRectangle representing the masked art box or default if not found
895 Masks and returns the crop box of a PDF page, adjusting for rotation. @param page the PDPage object to process @return PDRectangle representing the masked crop box
896 Draws an inline image at specified coordinates using default dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner
897 Draws an inline image at specified coordinates using dimensions from the image. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during processing
898 Draws an inline image at specified coordinates with dimensions from the image. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during processing
899 Draws an inline image at specified coordinates using default dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during processing
900 Constructs a FDFAnnotationCaret from an XML element. Initializes name, fringe, and symbol properties. @param element XML element containing annotation data @throws IOException if parsing fails or invalid data is provided
901 Initializes a circular annotation from an XML element. @param element XML element containing annotation data @throws IOException if 'fringe' attribute is malformed
902 Constructs an FDFAnnotationFileAttachment from an XML element. @param element XML element representing the annotation @throws IOException if required attributes are missing or invalid
903 Initializes a free text annotation from an XML element. @param element XML element containing annotation data @throws IOException if parsing fails or required attributes are missing
904 Initializes an FDFAnnotationInk from an XML element. @param element XML element representing the annotation @throws IOException if required elements are missing or parsing fails
905 Constructs a line annotation from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
906 Constructs a FDFAnnotationLink from an XML element. Parses the element to set up hyperlink actions. @param element XML element representing the annotation @throws IOException if there's an error processing the element
907 Initializes a polygon annotation from an XML element. @param element XML element containing polygon data @throws IOException if vertex parsing fails
908 Initializes a polyline annotation from an XML element. @param element XML element representing the annotation @throws IOException if vertex data is missing or malformed
909 Constructs an FDFAnnotationSound from an XML element. @param element the XML element representing the sound annotation @throws IOException if required attributes are missing or invalid
910 Constructs a square annotation from an XML element. @param element XML element containing annotation data @throws IOException if parsing fails or incorrect number of values
911 Initializes a stamp annotation from an XML element. Parses appearance XML, decodes Base64, and sets it in the annotation. @param element XML element representing the stamp annotation @throws IOException if I/O operations fail or invalid data is encountered
912 Constructs a text annotation from an XML element. @param element XML element representing the annotation @throws IOException if required attributes are missing or invalid
913 Constructs a text markup annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
914 Removes page from PDF document by number. @param pageNumber 1-based index of the page to remove
915 Removes a specified PDF page from the document. @param page PDPage object to be removed
916 Masks and imports a PDF page. @param page the PDPage object to be masked and imported @return new PDPage with masked content or null if issues occur @throws IOException if I/O error occurs during processing
917 Prepares a PDF page for visible digital signature. @param page PDPage object to be prepared @throws IOException if an I/O error occurs
918 Creates a PDImageXObject from a byte array. @param document PDF document to add the image @param byteArray source of image data @return PDImageXObject or null if no data @throws IOException if processing fails
919 Creates a PDImageXObject from a TIFF file. @param document PDF document to add the image @param file source TIFF file @return PDImageXObject or null if no data @throws IOException if processing fails
920 Sets the mask value and resets selected options. @param value the mask string value to set
921 Masks choice field options based on selected values. @param values list of selected option strings @param options list of all available option strings
922 Sets up the signature design environment for a given PDF page. @param document PDDocument containing the pages @param page 1-based index of the target page Validates page number, retrieves page dimensions, and sets initial properties.
923 Retrieves the target PDF page from an outline item's destination. @param doc the PDF document @return PDPage object or null if not found @throws IOException if issues occur during retrieval
924 Initializes a new PDFPageable instance with default settings. @param document the PDDocument to be paginated and printed
925 Constructs a PDFPageable instance with default settings. @param document the PDDocument to be printed @param orientation page orientation (portrait or landscape)
926 Constructs a new PDFPageable instance with default settings. @param document the PDDocument to be paginated and printed @param orientation the page orientation (e.g., portrait, landscape) @param showPageBorder flag to indicate if page borders should be visible
927 Constructs a new PDFPageable instance with centering enabled. @param document the PDDocument to be paginated and printed @param orientation the page orientation (e.g., portrait, landscape) @param showPageBorder flag to indicate if page borders should be visible @param dpi dots per inch for rendering quality
928 Generates a map of page labels to their indices. @return Map with page labels as keys and indices as values
929 Generates an array of page labels for a PDF document. @return String array containing page labels or nulls for unassigned pages
930 Updates mask value if attribute values differ. @param oldBase previous attribute value @param newBase current attribute value
931 Masks and processes a text position for rendering. @param textRenderingMatrix current text transformation matrix @param font PDFont object representing the font @param code character code to process @param displacement vector for text positioning @throws IOException if an I/O error occurs
932 Splits paragraph text into lines based on font and width constraints. @param font PDFont object for text styling @param fontSize size of the font @param width maximum line width @return List of Line objects representing formatted text @throws IOException on I/O error during processing
933 Determines if the font is symbolic by checking its properties. @return true if the font is symbolic, false otherwise; null if m1() is null
934 Determines the font name based on font descriptor properties. @param fontDescriptor PDFontDescriptor object containing font details @return Font name as a string, defaulting to "Times-Roman" if null
935 Creates a PDFontDescriptor for embedding Type 1 fonts. @param type1 the Type 1 font to process @return PDFontDescriptor configured with font metrics and properties
936 Creates a PDFontDescriptor from FontMetrics. @param metrics font metrics data @return configured PDFontDescriptor object
937 Creates a PDFontDescriptor for a TrueType font. @param ttf TrueTypeFont instance @return PDFontDescriptor object representing the font @throws IOException if required tables are missing or invalid
938 Converts PDF color to Java Paint. @param color PDColor object representing the color @return Paint object for rendering or null if invalid @throws IOException if an error occurs during processing
939 Processes mask for transparency group. @param form PDTransparencyGroup object representing the mask @throws IOException if an I/O error occurs during processing
940 Applies mask to a transparency group. @param group PDTransparencyGroup object representing the mask @throws IOException if an I/O error occurs during processing
941 Handles mask operations for a Type 3 character in a PDF. @param textRenderingMatrix current text rendering matrix @param font Type 3 font containing the character procedure @param code font encoding code of the character @param displacement vector for character positioning @throws IOException if an I/O error occurs during processing
942 Applies mask to a PDF annotation's appearance stream. @param annotation PDF annotation to process @throws IOException if I/O error occurs during processing
943 Applies mask using tiling pattern and color. @param tilingPattern the tiling pattern to apply @param color the color for masking @param colorSpace the color space of the mask
944 Applies mask operations to a PDF form object. @param form PDFormXObject to apply mask to @throws IOException if an I/O error occurs during processing
945 Retrieves and converts form fields from a PDF dictionary. @return List of PDField objects representing the form fields
946 Recursively finds a PDField by its hierarchical name. @param name array of field names in hierarchy @param nameIndex current index in the name array @return PDField instance or null if not found
947 Retrieves child fields of the current non-terminal field. @return List of PDField objects representing child fields
948 Constructs a PDFPrintable instance with specified settings. @param document the PDDocument to print @param scaling the Scaling option for page content @param showPageBorder flag to display page borders @param dpi dots per inch for printing quality
949 Loads and parses a PDF document from a byte array. @param input byte array containing the PDF data @param password decryption password for encrypted documents @return PDDocument object if successful @throws IOException if an I/O error occurs during loading or parsing
950 Loads and parses a PDF document from a file. @param file PDF file to load @param streamCacheCreateFunction function to create stream cache @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
951 Loads and parses a PDF document from a file. @param file PDF file to load @param password decryption password for encrypted documents @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
952 Loads and parses a PDF document from a file. @param file PDF file to load @param password decryption password for encrypted documents @param streamCacheCreateFunction function to create stream cache @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
953 Loads and parses a PDF document from a file. @param file PDF file to load @param password decryption password for encrypted documents @param keyStore keystore containing encryption keys @param alias alias for the key in the keystore @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
954 Sets visual signature properties. @param visSignatureProperties object containing signature settings @throws IOException if an I/O error occurs during setting properties
955 Sets stroking color using RGB values. @param color Color object with RGB components @throws IOException if an I/O error occurs during processing
956 Sets the stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during processing
957 Sets stroking color and updates graphic state. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during processing
958 Sets stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during processing
959 Sets stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during processing
960 Converts a Color object to PDColor and sets non-stroking color. @param color Color object containing RGB values (0-255) @throws IOException if an I/O error occurs during writing
961 Sets non-stroking color and handles pattern-specific logic. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
962 Sets non-stroking color for PDF form content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
963 Sets non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
964 Sets non-stroking color for pattern content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
965 Creates a masked form XObject from a page. @param sourceDoc source PDF document @param page target PDF page @return PDFormXObject with applied mask and transformations @throws IOException if an I/O error occurs
966 Writes PDF document using COSDocument. @param doc COSDocument to be written @throws IOException if an I/O error occurs
967 Saves the PDF document to an output stream with specified compression. @param output OutputStream to write the PDF to @param compressParameters parameters for PDF compression settings @throws IOException if the document is closed or I/O error occurs
968 Initializes a COSWriterCompressionPool for the given PDF document. @param document PDDocument to be compressed @param parameters compression parameters; defaults to new CompressParameters if null @throws IOException if an I/O error occurs during initialization
969 Converts COSBase to text string. @param base COSBase object to convert @return Decoded text string or empty if unsupported type
970 Retrieves and processes the value of a field based on its type. @return Processed value or null if no valid type is found @throws IOException if an error occurs during processing
971 Retrieves and decodes the field's value. @return decoded field value as a string or null if not found
972 Retrieves JavaScript code before form submission. @return Decoded JavaScript string or null if not found
973 Retrieves JavaScript code from dictionary or stream. @return decoded JavaScript string or null if not found
974 Retrieves JavaScript action as text. @return JavaScript code as string or null if not applicable
975 Retrieves and decodes the value associated with key "RC". @return Decoded string or null if not found or null
976 Converts COSBase to text string. @param base COSBase object to process @return Decoded text from COSString or COSStream, empty if unsupported type
977 Creates a LayoutPage for applying overlays. @param page PDF page to process @return LayoutPage instance with merged content and resources @throws IOException if I/O error occurs during processing
978 Retrieves and processes PDF data as a byte array. @return processed byte array from PDF stream @throws IOException if I/O error occurs during processing
979 Initializes and returns a 2D array representing sample values. @return int[][] containing interpolated sample values
980 Initializes color space based on ICC profile or alternate settings. Handles exceptions and sets up AWT color space for rendering.
981 Initializes a PatchMeshesShadingContext for PDF mesh-based shading. @param shading PDMeshBasedShadingType instance to manage @param colorModel ColorModel for the shading @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @param controlPoints number of control points @throws IOException if I/O error occurs during patch collection or pixel table creation
982 Initializes Type4ShadingContext with specific parameters. @param shading PDShadingType4 object representing the shading details @param cm ColorModel specifying the color space and pixel representation @param xform AffineTransform for device to user coordinate conversion @param matrix Matrix defining the transformation from source to destination coordinates @param deviceBounds Rectangle defining the rendering area in device space @throws IOException if an I/O error occurs during initialization
983 Initializes a Type5 shading context for PDF rendering. @param shading PDShadingType5 object representing the shading details @param cm ColorModel specifying the color space and pixel representation @param xform AffineTransform for device to user coordinate conversion @param matrix Matrix defining the transformation from source to destination coordinates @param deviceBounds Rectangle defining the bounds of the device area @throws IOException if I/O error occurs during processing
984 Parses and processes PDF cross-reference table, rebuilding if necessary. @return COSDictionary representing the parsed or rebuilt trailer @throws IOException if an I/O error occurs during parsing
985 Renders a PDF form object. @param form the PDFormXObject to render @throws IOException if an I/O error occurs
986 Handles mask rendering based on optional content settings. @param tag COSName representing the mask tag @param properties COSDictionary containing mask properties
987 Retrieves all annotations from the PDF page. @return list of PDAnnotation objects @throws IOException if an error occurs during processing
988 Retrieves the normal appearance stream of an annotation. @return PDAppearanceContentStream for further modifications
989 Creates a new optional content group and applies a form to a PDF page. @param targetPage the page where the form will be applied @param form the form object to apply @param transform the transformation matrix for the form @param layerName name of the new optional content group @return PDOptionalContentGroup representing the created layer
990 Masks a PDF page if it contains content. @param page PDF page to be masked @throws IOException if an I/O error occurs during processing
991 Masks a PDF page and processes its content stream. @param contentStream PDContentStream object containing PDF data @param page PDF page to be masked @throws IOException if an I/O error occurs during processing
992 Retrieves page format for a PDF document. @param pageIndex 1-based index of the page to retrieve @return PageFormat object configured for printing
993 Creates a highlight annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
994 Constructs a squiggly annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
995 Initializes a strikeout annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
996 Constructs an underline annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
997 Masks choice field options based on selected values. @param values list of selected option strings @throws IOException if an I/O error occurs
998 Initializes visible signature design with a PDF document, image stream, and target page. @param document PDDocument containing the pages @param imageStream source of signature image data @param page 1-based index of the target page @throws IOException if an I/O error occurs
999 Initializes visible signature design with specified PDF document, image, and page. @param document PDDocument containing the pages @param image BufferedImage to be used as the signature @param page 1-based index of the target page for signature placement
1000 Masks and formats text content with specified alignment and wrapping. @throws IOException if an I/O error occurs during processing
1001 Determines the appropriate font size for a given PDF form field. @param font the font used in the form field @param contentRect the rectangle defining the field's dimensions @return the calculated font size or default if no calculation is needed @throws IOException on I/O error during font processing
1002 Sets the encoding based on font properties and dictionary. Handles both COSName and COSDictionary encoding types.
1003 Determines if the font is symbolic based on encoding and properties. @return Boolean indicating if the font is symbolic, or null if undetermined
1004 Maps a TrueType font for a given base font and descriptor. @param baseFont base font name @param fontDescriptor PDFontDescriptor object containing font details @return FontMapping with TrueTypeFont or last resort font if not found
1005 Maps a base font to a FontBoxFont, using fallbacks if necessary. @param baseFont the initial font name @param fontDescriptor PDFontDescriptor containing font details @return FontMapping with the resolved FontBoxFont and a boolean indicating if a fallback was used
1006 Embeds a Type 1 font into a PDF document. @param doc the PDDocument to embed the font into @param dict the COSDictionary for font properties @param pfbStream InputStream containing PFB font data @param encoding optional Encoding for the font @throws IOException if an I/O error occurs during embedding
1007 Constructs a PDFont instance for a given base font. Initializes the dictionary and sets up font descriptor and metrics. @param baseFont the base font name to initialize the PDFont with
1008 Initializes TrueTypeEmbedder with font and document details. @param document PDF document to embed the font into @param dict COSDictionary for storing font properties @param ttf TrueTypeFont instance to be embedded @param embedSubset true if subset embedding is required @throws IOException if font embedding is not permitted or fails
1009 Handles mask operations for rendering text glyphs. @param textRenderingMatrix matrix defining text transformation @param font font used for rendering @param code character code to render @param displacement vector for additional positioning @throws IOException if an I/O error occurs
1010 Adjusts open count of outline items based on child state. Checks if any child is open; if not, decrements open count recursively.
1011 Adjusts open count of outline items if any are open.
1012 Creates and populates an FDF document with form fields. @return FDFDocument containing the extracted form data @throws IOException if an I/O error occurs
1013 Checks if XFA key exists and form fields are not empty. @return true if both conditions are met, false otherwise
1014 Constructs a PDFPrintable instance with specified settings. @param document the PDDocument to print @param scaling the Scaling option for page content @param showPageBorder flag to display page borders
1015 Loads and parses a PDF document from a byte array using an empty password. @param input byte array containing the PDF data @return PDDocument object if successful @throws IOException if an I/O error occurs during loading or parsing
1016 Loads and parses a PDF document from a file. @param file PDF file to load @param password decryption password for encrypted documents @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
1017 Loads and parses a PDF document from a file without encryption. @param file PDF file to load @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
1018 Sets the stroking color using a Color object. @param color Color object with RGB components @throws IOException if an I/O error occurs during processing
1019 Sets stroking color using RGB values from the provided Color object. @param color Color object with RGB components @throws IOException if an I/O error occurs during processing
1020 Sets stroking color using RGB values. @param color Color object with RGB components @throws IOException if an I/O error occurs during processing
1021 Sets stroking color for pattern rendering. @param color Color object with RGB components @throws IOException if an I/O error occurs during processing
1022 Converts a Color object to PDColor and sets non-stroking color. @param color Color object containing RGB values (0-255) @throws IOException if an I/O error occurs during writing
1023 Converts a Color object to PDColor and sets non-stroking color. @param color Color object containing RGB values (0-255) @throws IOException if an I/O error occurs during writing
1024 Sets non-stroking color using a Color object. @param color Color object containing RGB values (0-255) @throws IOException if an I/O error occurs during writing
1025 Sets non-stroking color using RGB values from a Color object. @param color Color object containing RGB values (0-255) @throws IOException if an I/O error occurs during writing
1026 Masks and styles PDF form field appearances. @param widget form field widget to process @param appearanceCharacteristics characteristics for appearance @param appearanceStream stream defining the visual appearance @throws IOException if an I/O error occurs during processing
1027 Applies mask and font settings to PDF form field appearance. @param contents content stream for appearance @param zeroFontSize default font size if current is zero @throws IOException if I/O error occurs during operation
1028 Imports a PDF page as a form XObject. @param sourceDoc source PDF document @param pageNumber 1-based index of the page to import @return PDFormXObject representing the imported page @throws IOException if an I/O error occurs
1029 Saves the PDF document to an output stream with default compression. @param output OutputStream to write the PDF to @throws IOException if an I/O error occurs
1030 Saves the PDF document to a specified file with compression. @param file File where the PDF will be saved @param compressParameters Parameters for PDF compression settings @throws IOException if I/O error occurs during saving
1031 Handles PDF compression and encryption. @param document the COSDocument to process @throws IOException if I/O error occurs during processing
1032 Retrieves and processes the annotation's RC (Rich Content) property. @return Processed string representation of the RC property or empty if not found
1033 Writes field data to an output stream in XML format. @param output Writer object to write the XML data @throws IOException if an error occurs during writing
1034 Retrieves the default appearance string for rich text. @return Default appearance string or null if not found
1035 Processes the first page of a PDF document to create an overlay layout. @param doc PDDocument object containing the PDF to process @return LayoutPage instance for the processed page @throws IOException if I/O error occurs during processing
1036 Initializes Function Type 4 from a PDF stream. @param functionStream the COSBase object representing the PDF function stream @throws IOException if I/O error occurs during initialization
1037 Interpolates float values based on given coordinates and step. @param coord coordinate vector for interpolation @param step current step index @return interpolated float array
1038 Initializes a PDICCBased object from an ICC profile array. @param iccArray COSArray containing ICC profile data @throws IOException if an error occurs during initialization
1039 Initializes a Type6ShadingContext for PDF Type 6 shading. @param shading PDShadingType6 instance to manage @param colorModel ColorModel for the shading @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @throws IOException if I/O error occurs during initialization
1040 Initializes a Type7ShadingContext for PDF Type 7 shading. @param shading PDShadingType7 instance to manage @param colorModel ColorModel for the shading @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @throws IOException if I/O error occurs during initialization
1041 Masks data from XFA resources. @return byte array of masked data or empty array if no valid source found @throws IOException if I/O error occurs during processing
1042 Adjusts structure parents and annotations for a PDF page. @param page the PDPage to modify @param structParentOffset offset to apply to structure parent indices @throws IOException if an error occurs during processing
1043 Masks and transfers structure tree from source to destination document. @param destinationDocument the target PDF document for structure transfer @throws IOException if an error occurs during processing
1044 Clones and processes annotations for a given PDF page. @param imported PDPage to process @throws IOException if an error occurs during annotation processing
1045 Maps form fields to their annotations on PDF pages. @param fields list of PDF form fields @param pages PDF page tree @return map of COSDictionary to set of COSDictionary representing widget mappings @throws IOException if an error occurs during processing
1046 Processes a PDF page, setting rotation and size, and adjusts translation matrix. @param page the PDF page to process @throws IOException if an I/O error occurs during processing
1047 Initializes FDFDictionary from XML. @param fdfXML XML element representing FDF data
1048 Applies FDF field data to a PDF form field. @param fdfField the FDF field containing import data @throws IOException if an I/O error occurs during processing
1049 Initializes a PDVisibleSignDesigner with a PDF source, image stream, and target page. @param documentSource source of the PDF document @param imageStream source of the signature image @param page 1-based index of the target page for the signature @throws IOException if an I/O error occurs
1050 Initializes a PDVisibleSignDesigner with a PDF source, signature image, and target page. @param documentSource source of the PDF document @param image BufferedImage to be used as the signature @param page 1-based index of the target page @throws IOException if there's an error processing the document
1051 Determines if the font is symbolic. @return Boolean indicating if the font is symbolic, defaulting to true if undetermined
1052 Constructs a PDType1Font instance. @param doc PDF document containing the font @param pfbIn input stream of the PFB font file @param encoding character encoding for the font Initializes font embedding, sets encoding, and retrieves glyph list & Type 1 font.
1053 Constructs a PDSimpleFont instance. @param baseFont the font name to initialize with
1054 Initializes a PDFont with a given COSDictionary. @param fontDictionary the dictionary containing font data
1055 Constructs a PDCIDFontType2Embedder for embedding Type 2 CID fonts in PDFs. @param document the PDF document to embed the font into @param dict the COSDictionary representing the font @param ttf the TrueTypeFont to be embedded @param embedSubset whether to embed a subset of the font @param parent the parent PDType0Font @param vertical whether the font supports vertical text @throws IOException if an I/O error occurs during font processing
1056 Constructs a PDTrueTypeFontEmbedder for embedding TrueType fonts in PDFs. @param document PDF document to embed the font into @param dict COSDictionary for storing font properties @param ttf TrueTypeFont instance to be embedded @param encoding character encoding for the font @throws IOException if an error occurs during embedding
1057 Checks if the PDF form is valid and has dynamic XFA. @param acroForm the PDF form to check @return true if form is not null and has dynamic XFA, false otherwise
1058 Constructs a PDFPrintable instance without showing page borders. @param document the PDDocument to print @param scaling the Scaling option for page content
1059 Deprecated method to load and parse a PDF document from a file. @param file PDF file to load @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
1060 Generates and applies visual appearance for a form field. Handles masking, font settings, and text formatting.
1061 Builds a PDF with integrated visual signatures. @param properties configuration for the visible signature design @return InputStream of the generated signed PDF @throws IOException if I/O operations fail
1062 Saves PDF document to specified file with default compression. @param file File where the PDF will be saved @throws IOException if I/O error occurs during saving
1063 Saves PDF document to specified file with compression. @param fileName path to save the PDF file @param compressParameters settings for PDF compression @throws IOException if I/O error occurs during saving
1064 Writes FDF document data to a Writer in XML format. @param output Writer object to write the XML data @throws IOException if an error occurs during writing
1065 Creates a PDFunction instance based on the provided COSBase object. @param function the COSBase object representing the PDF function stream @return PDFunction object or throws IOException if invalid function type
1066 Generates interpolated float values using default parameters. @return array of interpolated float values
1067 Creates or retrieves a PDICCBased color space from ICC profile data. @param iccArray COSArray containing ICC profile data @param resources PDF resources for resource management @return PDICCBased object initialized with the provided ICC array @throws IOException if an error occurs during initialization or retrieval
1068 Creates a PDImageXObject for PDF with mask handling. @param document PDDocument to embed the image @param image BufferedImage to process @return PDImageXObject suitable for PDF inclusion @throws IOException if I/O operations fail
1069 Processes the soft mask image to extract and validate its matte component. @param softMask PDImageXObject representing the soft mask @return float array of matte values or null if invalid @throws IOException if an error occurs during processing
1070 Draws an image at specified coordinates with calculated dimensions. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate
1071 Masks XFA resources and returns parsed XML document. @return Document object representing masked XFA data @throws IOException if I/O error occurs during processing
1072 Prepares and renders annotations on a PDF page. @param g Graphics2D context to draw on @param pageSize dimensions of the PDF page @throws IOException if an I/O error occurs during rendering
1073 Masks and processes a PDF page for splitting. @param page the PDPage object to be processed @throws IOException if an I/O error occurs during processing
1074 Prepares the PDF page for processing by setting rotation and size. @param page the PDF page to process @throws IOException if an I/O error occurs during processing
1075 Processes a PDF page for text extraction and formatting. @param page the PDPage object to process @throws IOException if an I/O error occurs during processing
1076 Constructs an FDFCatalog from an XML element. @param element XML element representing FDF data
1077 Constructs a PDType1Font instance with default encoding. @param doc PDF document containing the font @param pfbIn input stream of the PFB font file @throws IOException if an error occurs during initialization
1078 Initializes a PDType1Font with the specified base font. @param baseFont the FontName representing the base font
1079 Constructs a new PDSimpleFont instance from a COSDictionary. @param fontDictionary PDF dictionary representing the font
1080 Initializes a PDType0Font from a font dictionary. Validates and retrieves descendant fonts, setting up encoding and CMap. @param fontDictionary the COSDictionary representing the font @throws IOException if required data is missing or invalid
1081 Initializes a PDType0Font for embedding TrueType fonts in PDFs. @param document PDF document to embed the font into @param ttf TrueTypeFont to be embedded @param embedSubset whether to embed a subset of the font @param closeTTF whether to close the TrueTypeFont after processing @param vertical whether the font supports vertical text @throws IOException if an I/O error occurs during font processing
1082 Constructs a PDTrueTypeFont instance for embedding TrueType fonts in PDFs. @param document PDF document to embed the font into @param ttf TrueTypeFont instance to be embedded @param encoding character encoding for the font @param closeTTF flag indicating if the TTF should be closed after processing @throws IOException if an error occurs during embedding
1083 Returns an iterator over interactive form fields. @return Iterator of PDField objects
1084 Constructs a PDFPrintable instance with default scaling. @param document the PDDocument to print
1085 Initializes a PDVisibleSignDesigner with a PDF file and signature image. @param filename path to the PDF file @param imageStream source of the signature image data @param page 1-based index of the target page @throws IOException if an I/O error occurs during processing
1086 Initializes a new PDVisibleSignDesigner with a specified PDF file, image, and page. Sets the signature image and calculates the page size for rendering. @param filename path to the PDF file @param image BufferedImage to be used as the signature @param page 1-based index of the target page @throws IOException if an error occurs during document loading or processing
1087 Configures and applies a visible signature to a PDF. @throws IOException if I/O operations fail during the process
1088 Saves PDF document to specified file. @param fileName path where the PDF will be saved @throws IOException if I/O error occurs during saving
1089 Writes FDF catalog data to a Writer in XML format. @param output Writer object to write the XML data @throws IOException if an error occurs during writing
1090 Evaluates input through specified functions and returns the result. @param input array of input values @return evaluated result as a float array @throws IOException if an error occurs during function evaluation
1091 Initializes a PDDeviceN instance from a COSArray and resources. @param deviceN COSArray representing DeviceN color space data @param resources PDResources for resource management @throws IOException if there's an issue with creating alternate color space or tint transform
1092 Retrieves or creates the tint transform function. @return PDFunction representing the tint transform @throws IOException if an error occurs during function creation
1093 Initializes a PDSeparation object from a COSArray. @param separation the COSArray representing the separation dictionary @param resources the PDResources for color space lookup @throws IOException if there's an issue with the tint transform or alternate color space
1094 Retrieves the mask function for shading. @return PDFunction object or null if not found
1095 Retrieves and initializes PDFunction instances from the shading dictionary. @return array of PDFunction objects representing the functions for shading @throws IOException if mandatory /Function element is invalid
1096 Retrieves the transfer function for the soft mask. @return PDFunction object representing the transfer function or null if not set
1097 Initializes an indexed color space from a COSArray. @param indexedArray array representing the indexed color space @param resources PDF resources for resource management @throws IOException if an error occurs during initialization
1098 Evaluates input through linear interpolation using function parameters. @param input array of input values @return array of interpolated output values
1099 Converts PNG to PDF-compatible image object. @param document PDF document to add the image to @param state PNG conversion state containing image data @return PDImageXObject for PDF or null if conversion fails
1100 Creates a PDImageXObject with mask handling from a file. @param file source image file @param doc PDF document to add the image to @return PDImageXObject with applied mask if necessary @throws IOException if an I/O error occurs during processing
1101 Creates a PDImageXObject with mask handling from a file. @param file source image file @param doc PDF document to add the image @return PDImageXObject with applied mask if necessary @throws IOException if I/O operations fail or unsupported file type
1102 Masks and processes an image based on region and subsampling. @param region area of interest in the image @param subsampling level of subsampling for processing @return BufferedImage with applied mask or original if no mask @throws IOException if an I/O error occurs during processing
1103 Draws an image at specified coordinates with calculated dimensions. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate
1104 Draws an image on the PDF form at specified coordinates using calculated dimensions. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate
1105 Draws an image at specified coordinates using calculated dimensions. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate
1106 Draws an image at specified coordinates with calculated dimensions. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate
1107 Renders a PDF page as a BufferedImage. @param pageIndex 1-based index of the page to render @param scale scaling factor for rendering @param imageType desired image type @param destination target for rendered image @return BufferedImage representation of the PDF page @throws IOException if an I/O error occurs during rendering
1108 Renders a specified PDF page into a graphics context with scaling. @param pageIndex 1-based index of the page to render @param graphics Graphics2D context for rendering @param scaleX horizontal scaling factor @param scaleY vertical scaling factor @param destination RenderDestination for output @throws IOException if an I/O error occurs during rendering
1109 Masks and processes pages within a specified range. @throws IOException if an I/O error occurs during processing
1110 Processes PDF pages for text extraction, handling bookmarks and content. @param pages PDPageTree representing the document's pages @throws IOException if an I/O error occurs during processing
1111 Constructs an FDFDocument from an XML document. @param doc XML Document object representing the FDF data @throws IOException if the root element is not 'xfdf'
1112 Returns the default Helvetica font. Initializes the font if not already set. @return PDFont object representing Helvetica
1113 Retrieves or creates a FontBoxFont for the given base font name. @param baseName the FontName representing the base font @return FontBoxFont object associated with the base font
1114 Initializes a TrueType font from a PDF dictionary. @param fontDictionary the font dictionary containing font data @throws IOException if an I/O error occurs during initialization
1115 Initializes a Type 1C font from a given dictionary. @param fontDictionary the COSDictionary representing the font @throws IOException if font data cannot be read or parsed
1116 Initializes a PDType1Font from a font dictionary. @param fontDictionary the COSDictionary containing font data @throws IOException if an I/O error occurs during initialization
1117 Initializes a new Type 3 font from a PDF dictionary. @param fontDictionary PDF dictionary representing the font @param resourceCache cache for managing font resources @throws IOException on I/O errors during initialization
1118 Creates a PDType0Font from a font file. @param doc PDF document to embed the font into @param randomAccessRead font file data @param embedSubset whether to embed a subset of the font @param vertical whether the font supports vertical text @return PDType0Font object or throws IOException if an error occurs
1119 Creates a PDType0Font instance for embedding TrueType fonts in PDFs. @param doc PDF document to embed the font into @param ttf TrueTypeFont to be embedded @param embedSubset whether to embed a subset of the font @return PDType0Font object configured with specified parameters @throws IOException if an I/O error occurs during font processing
1120 Creates a PDType0Font for embedding TrueType fonts in PDFs. @param doc PDF document to embed the font into @param ttf TrueTypeFont to be embedded @param embedSubset whether to embed a subset of the font @return PDType0Font object configured for vertical text @throws IOException if an I/O error occurs during font processing
1121 Creates a PDTrueTypeFont instance for embedding in a PDF. @param doc PDF document to embed the font into @param ttf TrueTypeFont instance to be embedded @param encoding character encoding for the font @return PDTrueTypeFont object configured for embedding @throws IOException if an error occurs during embedding
1122 Creates a PDTrueTypeFont instance from a PDF document and font data. @param doc PDF document to embed the font into @param randomAccessRead source of TrueType font data @param encoding character encoding for the font @return PDTrueTypeFont object representing the embedded font @throws IOException if an error occurs during font embedding
1123 Retrieves all signature fields from the PDF document. @return List of PDSignatureField objects
1124 Masks terminal fields in the PDF form. Iterates through all fields, applying masking to terminal fields.
1125 Returns an iterator over form fields. @return Iterator of PDField objects
1126 Initializes or clears a cache of form fields. @param cache true to initialize cache, false to clear it
1127 Retrieves a form field by its fully qualified name. @param fullyQualifiedName unique identifier for the field @return PDField object or null if not found
1128 Applies mask overlays to specified pages in a PDF document. @param specificPageOverlayMap map of page numbers and overlay paths @return modified PDDocument with applied overlays @throws IOException if an error occurs during processing
1129 Applies mask overlays to specific pages in a PDF document. @param specificPageOverlayDocumentMap map of page numbers to overlay documents @return modified PDDocument with applied overlays @throws IOException if an I/O error occurs during processing
1130 Exports FDF document data to XML format. @param output Writer object for writing XML data @throws IOException if an error occurs during writing
1131 Creates a PDColorSpace from a COSBase object. Handles different types of color spaces and resources. @param colorSpace base object representing the color space @param resources PDF resources for resource management @param wasDefault indicates if it's a default colorspace @return PDColorSpace instance or throws IOException if creation fails
1132 Applies mask function to input using shading functions. @param input array of input values for the function @return array of masked output values within [0, 1] @throws IOException if function evaluation fails
1133 Constructs an indexed color space from a COSArray. @param indexedArray array representing the indexed color space @throws IOException if an error occurs during initialization
1134 Creates a PDImageXObject with mask handling from an image file. @param imagePath path to the source image file @param doc PDF document to add the image to @return PDImageXObject with applied mask if necessary @throws IOException if an I/O error occurs during processing
1135 Retrieves and processes the image without any mask or subsampling. @return BufferedImage of the original image @throws IOException if an I/O error occurs during processing
1136 Renders a PDF page as a BufferedImage with specified options. @param pageIndex 1-based index of the page to render @param scale scaling factor for rendering @param imageType desired image type @return BufferedImage representation of the PDF page @throws IOException if an I/O error occurs during rendering
1137 Renders a specified PDF page into a graphics context with scaling. @param pageIndex 1-based index of the page to render @param graphics Graphics2D context for rendering @param scaleX horizontal scaling factor @param scaleY vertical scaling factor @throws IOException if an I/O error occurs during rendering
1138 Splits a PDF document into multiple smaller documents. @param document the source PDF document to split @return List of PDDocument objects representing the split documents
1139 Masks and extracts text from a PDF document. @param doc PDDocument object representing the PDF to process @param outputStream Writer for outputting extracted text @throws IOException if an I/O error occurs during processing
1140 Loads an FDF document from an input stream. @param input XML input stream containing FDF data @return FDFDocument object representing the loaded FDF document @throws IOException if loading fails
1141 Handles masking operations for rendering text strings. @param string byte array containing the text to render @throws IOException if an I/O error occurs during processing
1142 Generates a GeneralPath for the specified glyph in the given font. @param baseName FontName representing the base font @param glyphName name of the glyph to generate path for @return GeneralPath object or empty path if not found
1143 Constructs a PDMMType1Font from a COSDictionary. @param fontDictionary the COSDictionary containing font data @throws IOException if an I/O error occurs during initialization
1144 Constructs a Type 3 font from a PDF dictionary. @param fontDictionary PDF dictionary representing the font @throws IOException on I/O errors during initialization
1145 Loads a Type 0 font from a file into a PDF document. @param doc PDF document to embed the font into @param file font file @return PDType0Font object or throws IOException if an error occurs
1146 Creates a PDType0Font from an input stream. @param doc PDF document to embed the font into @param input font data as input stream @param embedSubset whether to embed a subset of the font @return PDType0Font object or throws IOException if an error occurs
1147 Loads and creates a PDType0Font from a TrueType font file. @param doc PDF document to embed the font into @param file TrueType font file @return PDType0Font object or throws IOException if an error occurs
1148 Creates a PDType0Font from an input stream. @param doc PDF document to embed the font into @param input font file data as input stream @return PDType0Font object or throws IOException if an error occurs
1149 Creates a PDType0Font from an InputStream. @param doc PDF document to embed the font into @param input font file data stream @param embedSubset whether to embed a subset of the font @return PDType0Font object or throws IOException if an error occurs
1150 Creates a PDTrueTypeFont instance from a PDF document and font file. @param doc PDF document to embed the font into @param file source TrueType font file @param encoding character encoding for the font @return PDTrueTypeFont object representing the embedded font @throws IOException if an error occurs during font embedding
1151 Creates a PDTrueTypeFont instance from an input stream. @param doc PDF document to embed the font into @param input source of TrueType font data as InputStream @param encoding character encoding for the font @return PDTrueTypeFont object representing the embedded font @throws IOException if an error occurs during font embedding
1152 Retrieves all digital signatures from the PDF document. @return List of PDSignature objects representing document signatures
1153 Adds a digital signature to the PDF document. @param sigObject the PDSignature object representing the signature @param signatureInterface interface for handling signature operations @param options configuration options for the signature process @throws IOException if an I/O error occurs during signing
1154 Imports form data from an FDF document into the PDF. @param fdf the FDF document containing import data @throws IOException if an I/O error occurs during processing
1155 Exports FDF document data to XML format and closes the writer. @param output Writer object for writing XML data @throws IOException if an error occurs during exporting or closing
1156 Evaluates shading function with a single input value. @param inputValue single input value for the function @return array of masked output values within [0, 1] @throws IOException if function evaluation fails
1157 Applies mask function to input values. @param values input array of float values @return result of mask function evaluation @throws IOException if function evaluation fails
1158 Applies soft mask to current non-stroking color. @return Paint with applied soft mask or original if no mask is valid @throws IOException if issues occur during mask processing
1159 Renders a transparency group onto the specified graphics context. Handles visibility checks, transformations, and soft masks. @param form PDF transparency group to render @param graphics target graphics context for rendering
1160 Renders a PDF page as a BufferedImage. @param pageIndex 1-based index of the page to render @param scale scaling factor for rendering @return BufferedImage representation of the PDF page @throws IOException if an I/O error occurs during rendering
1161 Renders a PDF page as an RGB image at specified DPI. @param pageIndex 1-based index of the page to render @param dpi desired dots per inch for rendering @return BufferedImage representation of the PDF page in RGB format @throws IOException if an I/O error occurs during rendering
1162 Renders a PDF page as a BufferedImage with specified DPI and image type. @param pageIndex 1-based index of the page to render @param dpi desired dots per inch for rendering @param imageType desired image type @return BufferedImage representation of the PDF page @throws IOException if an I/O error occurs during rendering
1163 Renders a specified PDF page to a graphics context with uniform scaling. @param pageIndex 1-based index of the page to render @param graphics Graphics2D context for rendering @param scale uniform scaling factor for both width and height @throws IOException if an I/O error occurs during rendering
1164 Extracts a range of pages from a PDF document. @return PDDocument containing the extracted pages or an empty document if invalid range
1165 Extracts and returns text from a PDF document. @param doc PDDocument object representing the PDF to process @return String containing extracted text @throws IOException if an I/O error occurs during processing
1166 Loads an FDF document from a file. @param filename path to the FDF file @return FDFDocument object representing the loaded FDF document @throws IOException if loading fails
1167 Loads an XFDF document from a file. @param file File containing XFDF data @return FDFDocument object representing the loaded XFDF document @throws IOException if loading fails
1168 Handles masking operations for rendering text strings. @param string byte array containing the text to render @throws IOException if an I/O error occurs during processing
1169 Processes text rendering operations from a PDF array. Handles text positioning, scaling, and font application. @param array COSArray containing text rendering instructions @throws IOException if an I/O error occurs during processing
1170 Creates a PDFont object from a COSDictionary. @param dictionary the input PDFont dictionary @param resourceCache cache for resources @return PDFont instance based on font type and subtype @throws IOException if I/O error occurs or unsupported font type
1171 Creates a PDType0Font from an input stream with font subsetting. @param doc PDF document to embed the font into @param input font data as input stream @return PDType0Font object or throws IOException if an error occurs
1172 Retrieves the last digital signature from the PDF document. @return PDSignature object or null if no signatures are present
1173 Prepares external signing support for a PDF document. @param output stream to write the signed PDF @return ExternalSigningSupport instance for signing operations @throws IOException if an I/O error occurs or document setup fails
1174 Masks specified form fields in a PDF document. @param fields list of PDField objects to be masked @param refreshAppearances flag indicating whether to refresh field appearances @throws IOException if an I/O error occurs during processing
1175 Adds a digital signature to the PDF document. @param sigObject PDSignature object representing the signature @param options configuration options for the signature process @throws IOException if an I/O error occurs during signing
1176 Adds a digital signature to the PDF document with default options. @param sigObject the PDSignature object representing the signature @param signatureInterface interface for handling signature operations @throws IOException if an I/O error occurs during signing
1177 Exports FDF document data to XML format and saves it to a file. @param fileName destination file for the XML output @throws IOException if an error occurs during exporting or file handling
1178 Applies mask to a given path for PDF rendering. @param path the shape to be masked @param font the font used for rendering @param code character code for glyph width calculation @param displacement vector for positioning adjustments @param at affine transformation matrix @throws IOException if issues occur during mask processing
1179 Converts PNG to PDF-compatible image object with transparency handling. @param doc PDF document to add the image @param state conversion state containing image properties @return PDImageXObject instance with processed image data or null if conversion fails @throws IOException if I/O operations fail
1180 Renders a PDF page as a BufferedImage with default scaling. @param pageIndex 1-based index of the page to render @return BufferedImage representation of the PDF page @throws IOException if an I/O error occurs during rendering
1181 Renders a specified PDF page to a graphics context with default scaling. @param pageIndex 1-based index of the page to render @param graphics Graphics2D context for rendering @throws IOException if an I/O error occurs during rendering
1182 Retrieves a PDFont object by name. @param name the COSName of the font resource @return PDFont instance or null if not found @throws IOException if I/O error occurs or unsupported font type
1183 Creates a PDFont object from a COSDictionary. @param dictionary the input PDFont dictionary @return PDFont instance based on font type and subtype @throws IOException if I/O error occurs or unsupported font type
1184 Flattens form fields in a PDF document. @throws IOException if an I/O error occurs during processing
1185 Adds a digital signature to the PDF document with default options. @param sigObject PDSignature object representing the signature @throws IOException if an I/O error occurs during signing
1186 Exports FDF document data to XML format and saves it to a file. @param fileName destination file path for the XML output @throws IOException if an error occurs during exporting or file handling
1187 Applies mask to shaded triangles within device bounds. @param triangleList list of ShadedTriangle objects @param array 2D array representing pixel data @param deviceBounds Rectangle defining rendering area @throws IOException if mask application fails
1188 Applies mask and draws a path with specified winding rule. @param windingRule rule for path operations @throws IOException if an error occurs during processing
1189 Converts PNG to PDF-compatible image object based on IHDR chunk. @param doc PDF document to add the image @param state conversion state containing image properties @return PDImageXObject instance or null if conversion fails @throws IOException if I/O operations fail
1190 Sets mask appearance for form fields. @param operands list of COSBase objects representing font and size @throws IOException if font not found or invalid operand types
1191 Ensures the specified font is available in the appearance stream's resources. @param appearanceStream PDF appearance stream to modify @throws IOException if an I/O error occurs while processing the stream
1192 Retrieves and initializes a PDFont object from the font settings. @return initialized PDFont instance or null if not found @throws IOException if I/O error occurs during font creation
1193 Merges the contents of a source PDF document into a destination PDF document. This method performs a comprehensive merge of various elements from the source document, including pages, metadata, outlines, structure trees, and more, into the destination document. It ensures that all elements are correctly cloned and integrated while maintaining the integrity and functionality of the resulting PDF. @param destination The destination PDF document where content will be merged. @param source The source PDF document from which content will be taken. @throws IOException If an error occurs during the merging process.
1194 Converts PNG image data to a PDF-compatible PDImageXObject. @param doc PDF document to add the image @param imageData byte array containing PNG data @return PDImageXObject instance or null if conversion fails @throws IOException if I/O operations fail
1195 Handles mask appearance operators for form fields. @param operator the PDF operator to process @param operands list of COSBase objects representing color or font data @throws IOException if processing fails
1196 Masks data in the form field's appearance stream. Handles BMC/EMC markers and writes masked content. @param widget PDAnnotationWidget representing the form field @param appearanceStream PDAppearanceStream for output @throws IOException if an I/O error occurs during processing
1197 Applies mask settings from dictionary to graphics state. @param gs PDGraphicsState object to update @throws IOException if I/O error occurs during font creation
1198 Merges multiple PDF documents into a single output file. @param streamCacheCreateFunction function to create stream cache @param compressParameters parameters for PDF compression settings @throws IOException if an error occurs during merging or I/O operations
1199 Creates a PDImageXObject from a byte array. @param document PDF document to add the image @param byteArray source of image data @param name image identifier @param customFactory optional factory for custom image processing @return PDImageXObject instance or null if conversion fails @throws IOException if I/O operations fail
1200 Parses and processes mask appearance operators for form fields. @param content PDF content as byte array @throws IOException if an I/O error occurs during parsing or processing
1201 Merges PDF documents based on the current merge mode. @param streamCacheCreateFunction function to create stream cache @param compressParameters parameters for compression settings @throws IOException if an error occurs during merging or I/O operations
1202 Creates a PDImageXObject from a byte array. @param document PDF document to add the image @param byteArray source of image data @param name image identifier @return PDImageXObject instance or null if conversion fails @throws IOException if I/O operations fail
1203 Initializes PDDefaultAppearanceString with appearance and resources. @param defaultAppearance PDF content as COSString @param defaultResources resources for form fields @throws IOException if an I/O error occurs during processing
1204 Merges PDF documents with default compression. @param streamCacheCreateFunction function to create stream cache @throws IOException if an error occurs during merging or I/O operations
1205 Retrieves and initializes default appearance string for a PDF text field. @return PDDefaultAppearanceString object configured with appearance and resources @throws IOException if an I/O error occurs during processing
1206 Masks and processes form field appearances. @param apValue current appearance value of the field @throws IOException if an I/O error occurs during processing
1207 Initializes the AppearanceGeneratorHelper with a PDVariableText field. Validates font resources and retrieves default appearance string. @param field PDVariableText field to process @throws IOException if an I/O error occurs during processing
