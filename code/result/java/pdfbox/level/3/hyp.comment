1 Initializes the PDFGraphicsStreamEngine with a given page, adding various operators for graphics stream operations.
2 Initializes a PDFMarkedContentExtractor instance with default settings.
3 Initializes PDFTextStripperByArea object with default settings. @throws IOException if initialization fails
4 Retrieves a COSBase object from the dictionary by navigating through a specified path. @param objPath comma-separated string of keys and indices to access the desired object
5 Retrieves a named destination from the dictionary. @param name unique destination identifier @return PDDestination object or null if not found
6 Retrieves attribute value by name. @param attrName unique attribute identifier
7 Retrieves the attribute value for a given name, returning the default value if not present. @param attrName unique attribute identifier @param defaultValue default attribute value to return when absent
8 Checks if a standard attribute is specified. @param name unique attribute identifier @return true if the attribute exists, false otherwise
9 Retrieves an array of string values associated with the given name. @param name unique dictionary identifier @return Array of strings or null if not found.
10 Retrieves the name or array of names associated with a given key. @param name unique dictionary identifier @param defaultValue default value to return if not found @return name as String, or array of names as String[], or default value if not found
11 Retrieves the number or name value for a given dictionary key, or returns the default value if not found. @param name unique dictionary identifier @param defaultValue fallback value to return if not applicable
12 Retrieves a number or array of numbers from the dictionary by name. If not found, returns the default value if specified; otherwise, returns null. @param name unique dictionary identifier @param defaultValue default float value to return if not found (0.0f by default) @return number or array of numbers, or default value if not found
13 Retrieves a color gamma value by name. @param name unique attribute identifier @return PDGamma object or null if not found
14 Creates a unique key by finding the next available slot in the dictionary. @param kind COSName instance representing the type of resource @param prefix initial string prefix for the new key @return COSName object representing the newly created key
15 Parses a hexadecimal string from the PDF source. @throws IOException if parsing fails due to invalid or malformed input
16 Sets PDF file filters from a list of names. @param filters list of filter names
17 Default constructor; initializes rectangle with zero position and dimensions.
18 Initializes a PDRectangle instance with zero position and specified dimensions. @param width rectangle width @param height rectangle height
19 Computes and returns a PDRectangle instance representing the bounding box.
20 Calculates the difference rectangle between the annotation and bounding box.
21 Creates a padded version of the input rectangle. @param rectangle original rectangle @param padding amount to add around each side @return new PDRectangle with added padding
22 Creates a new PDRectangle with the given differences applied to the original. @param rectangle original rectangle @param differences array of 4 floats representing differences in X, Y, width, and height @return updated PDRectangle instance or original if invalid differences provided
23 Applies given differences to the specified PDRectangle, adjusting its position and dimensions. @param rectangle original rectangle @param differences array of 4 float values representing differences in x, y, width, and height @return modified PDRectangle or original if differences are invalid
24 Applies uniform padding to a form field's bounding box. @param box the original bounding box @param padding amount of padding to apply on each side @return updated PDRectangle instance with padded dimensions
25 Initializes the PDFXRefStream instance with a COSDocument. @param cosDocument The document containing cross-reference data
26 Creates a new PDObjectStream instance from the given PDDocument. @param document PDDocument object to extract stream from @return newly created PDObjectStream instance
27 Initializes PDStream instance from PDDocument. @param document PDDocument object containing PDF content
28 Initializes a new instance of PDStream with a COSDocument. @param document COSDocument containing the PDF data
29 Initializes a PDStream instance from a PDDocument, InputStream, and filters. @param doc parent PDDocument object @param input input stream to transfer data from @param filters list of output filters for the created stream
30 Creates a raw output stream for writing PDF content and transfers input from given InputStream. @param document PDDocument object @param rawInput InputStream to be written @return COSStream object representing the created stream
31 Encodes data stream using provided parameters. @param input input data stream @param encoded output encoded stream @param parameters filter settings and dictionary
32 Initializes an instance of the PDDefaultAttributeObject class with default settings.
33 Initializes a new instance of PDUserAttributeObject with default settings.
34 Initializes an instance of the PDStandardAttributeObject class with default settings.
35 Initializes an instance of the PDOutlineItem class with default settings.
36 Initializes a PDField instance from an AcroForm.
37 Initializes a PDLayoutAttributeObject instance from a COSDictionary. @param dictionary PDF dictionary structure to be wrapped
38 Returns the appearance stream associated with this entry. @return PDAppearanceStream object if this entry is a stream, null otherwise
39 Returns the subdictionary as a Map of appearance streams. @return A map of COSName to PDAppearanceStream objects representing the subdictionary.
40 Creates a PDXObject instance from the provided COSBase and resources. @param base COSBase object containing underlying data streams @param resources PDResources instance for resource management @return PDXObject instance or null if base is null @throws IOException if base is not an instance of COSStream or invalid subtype
41 Adds a TrueType font to the list of fonts. @param ttfFile the TrueType font file to add
42 Initializes an instance of PDMeshBasedShadingType from a given PDF mesh-based shading dictionary. @param shadingDictionary COSDictionary containing mesh-based shading properties
43 Initializes an instance of PDMeshBasedShadingType from a given PDF mesh-based shading dictionary. @param shadingDictionary COSDictionary containing mesh-based shading properties
44 Initializes a PDChoice instance from an AcroForm and COSDictionary. @param acroForm the containing AcroForm @param field the underlying COSDictionary
45 Initializes a PDListBox instance from an AcroForm and COSDictionary. @param acroForm the containing AcroForm @param field the underlying COSDictionary
46 Constructs a COSParser instance for lenient parsing with specified parameters. @param source PDF document to be parsed @param password encryption password (or null for no encryption) @param keyStore path to keystore containing encryption keys @param keyAlias alias of encryption key in the keystore
47 Constructs a PDFParser instance with specified parameters for parsing and loading of PDF documents. @param source PDF document to be parsed @param decryptionPassword encryption password (or null for no encryption) @param keyStore path to keystore containing encryption keys @param alias alias of encryption key in the keystore @param streamCacheCreateFunction function to create StreamCache instance
48 Creates an output stream with default filters.
49 Writes binary data to a PDF appearance stream. @param data binary data to be written @param appearanceStream the target PDF appearance stream
50 Initializes a new instance of the PDAppearanceContentStream class with specified appearance and output stream. @param appearance Appearance stream object @param compress whether to enable compression for output stream
51 Sets the text transformation matrix. @param matrix AffineTransform object containing the matrix values
52 Applies an affine transformation to the content stream using a supplied matrix. @param matrix Transformation matrix to apply
53 Begins a text mode operation, initializing graphics state and color settings. @throws IOException if an I/O error occurs
54 Begins a text mode operation, initializing graphics state and color settings. @throws IOException if an I/O error occurs
55 Begins a text mode operation, initializing the graphics state and color settings. @throws IOException if an I/O error occurs
56 Begins a text mode operation, initializing graphics state and color settings.
57 Ends text mode and writes END_TEXT operator.
58 Ends text mode and writes END_TEXT operator.
59 Ends text mode and writes END_TEXT operator.
60 Ends text mode and writes END_TEXT operator.
61 Sets text leading in PDF content stream. @param leading vertical distance between lines
62 Sets text leading in PDF content stream. @param leading vertical distance between lines
63 Sets text leading in PDF content stream. @param leading vertical distance between lines
64 Sets text leading in PDF content stream. @param leading vertical distance between lines
65 Writes a newline operator in text mode. @throws IOException if an I/O error occurs
66 Writes a newline operator in text mode. @throws IOException if an I/O error occurs
67 Writes a newline operator in text mode. @throws IOException if an I/O error occurs
68 Writes a newline operator in text mode. @throws IOException if an I/O error occurs
69 Writes a text newline at specified offset, requiring prior call to beginText(). @param tx x-coordinate of the newline @param ty y-coordinate of the newline @throws IOException on write failure
70 Writes a text newline at specified offset while in text mode. @param tx x-coordinate of the newline @param ty y-coordinate of the newline
71 Writes a text newline at specified offset in text mode. @param tx x-coordinate of the newline @param ty y-coordinate of the newline
72 Writes a text newline at specified offset while in text mode. @param tx x-coordinate of the newline @param ty y-coordinate of the newline
73 Saves the current graphics state.
74 Saves the current graphics state, pushing font and color spaces onto stacks.
75 Saves the current graphics state.
76 Saves the current graphics state, except for text objects.
77 Restores graphics state by popping font and color spaces from stacks. @throws IllegalStateException if called within a text object
78 Restores graphics state by popping font and color stacks. @throws IllegalStateException if called within a text object
79 Restores the graphics state by popping font and color space stacks.
80 Restores graphics state by popping font and color stacks. @throws IllegalStateException if called within a text object
81 Sets the stroking color for graphics with RGB values within 0..1 range. @param r red component value @param g green component value @param b blue component value
82 Sets the stroking color for graphics with RGB values within 0..1 range. @param r red component value @param g green component value @param b blue component value
83 Sets the stroking color for graphics using RGB values within 0..1 range. @param r red component value @param g green component value @param b blue component value
84 Sets the stroking color for graphics with RGB values within 0..1 range. @param r red component value @param g green component value @param b blue component value
85 Sets the stroking color for graphics using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1)
86 Sets the stroking color for graphics using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1)
87 Sets the stroking color for graphics using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1)
88 Sets the stroking color for graphics using CMYK values within 0..1 interval. @param c cyan component, @param m magenta component, @param y yellow component, @param k black component
89 Sets the stroking color for graphics with a specified gray value. @param g grayscale level within range [0, 1] @throws IOException on write failure or IllegalArgumentException if g is outside valid range
90 Sets the stroking color for graphics with a specified gray value. @param g grayscale level within range [0, 1]
91 Sets the stroking color for graphics with a specified gray value. @param g grayscale level within range [0, 1]
92 Sets the stroking color for graphics with a specified gray value. @param g grayscale level within range [0, 1]
93 Sets the non-stroking color for PDF rendering. @param r red color component in range [0, 1] @param g green color component in range [0, 1] @param b blue color component in range [0, 1] @throws IOException on write failure
94 Sets the non-stroking color for PDF rendering. @param r red color component in range [0, 1] @param g green color component in range [0, 1] @param b blue color component in range [0, 1] @throws IOException on write failure
95 Sets non-stroking color for PDF rendering. @param r red color component in range [0, 1] @param g green color component in range [0, 1] @param b blue color component in range [0, 1]
96 Sets the non-stroking color for PDF rendering. @param r red color component in range [0, 1] @param g green color component in range [0, 1] @param b blue color component in range [0, 1] @throws IOException on write failure
97 Sets the non-stroking CMYK color for PDF rendering. @param c, m, y, k color components (0..1)
98 Sets the non-stroking CMYK color for PDF rendering. @param c, m, y, k color components (0..1) @throws IOException on write failure
99 Sets the non-stroking CMYK color for PDF rendering. @param c, m, y, k color components (0..1)
100 Sets the non-stroking CMYK color for PDF rendering. @param c, m, y, k color components (0..1)
101 Sets the non-stroking color for PDF rendering. @param g grayscale value between 0 and 1
102 Sets the non-stroking color for PDF rendering. @param g grayscale value between 0 and 1
103 Sets the non-stroking color for PDF rendering. @param g grayscale value between 0 and 1
104 Sets the non-stroking color for PDF rendering. @param g grayscale value between 0 and 1
105 Adds a rectangular shape to the PDF content stream. @throws IOException if an I/O error occurs
106 Adds a rectangular shape to the PDF content stream. @param x top-left X-coordinate @param y top-left Y-coordinate @param width rectangle width @param height rectangle height
107 Adds a rectangular shape to the PDF content stream. @param x top-left X-coordinate @param y top-left Y-coordinate @param width rectangle width @param height rectangle height
108 Adds a rectangular shape to the PDF content stream. @param x top-left X-coordinate @param y top-left Y-coordinate @param width rectangle width @param height rectangle height
109 Writes a curve-to operator with accompanying coordinates. @param x1, y1 first control point @param x2, y2 second control point @param x3, y3 end point of the curve
110 Writes a curve-to operator with accompanying coordinates. @param x1, y1 first control point @param x2, y2 second control point @param x3, y3 end point of the curve
111 Writes a curve-to operator with accompanying coordinates. @param x1 first control point @param y1 @param x2 second control point @param y2 @param x3 end point of the curve @param y3
112 Writes a curve-to operator with accompanying coordinates. @param x1, y1 first control point @param x2, y2 second control point @param x3, y3 end point of the curve
113 Writes a Bezier curve to the content stream. @param x2, y2, x3, y3 control point coordinates
114 Writes a Bezier curve to the content stream. @param x2, y2, x3, y3 control point coordinates
115 Writes a Bezier curve to the content stream. @param x2, y2, x3, y3 control point coordinates
116 Writes a Bezier curve to the content stream. @param x2, y2, x3, y3 control point coordinates
117 Draws a quadratic Bezier curve with control points and final point. @param x1 first control point's X-coordinate @param y1 first control point's Y-coordinate @param x3 third point (final point) of the curve's X-coordinate @param y3 third point (final point) of the curve's Y-coordinate
118 Draws a quadratic Bezier curve with control points and final point. @param x1 first control point's X-coordinate @param y1 first control point's Y-coordinate @param x3 third point (final point) of the curve's X-coordinate @param y3 third point (final point) of the curve's Y-coordinate
119 Draws a quadratic Bezier curve with control points and final point. @param x1 first control point's X-coordinate @param y1 first control point's Y-coordinate @param x3 third point (final point) of the curve's X-coordinate @param y3 third point (final point) of the curve's Y-coordinate
120 Draws a quadratic Bezier curve with control points and final point. @param x1 first control point's X-coordinate @param y1 first control point's Y-coordinate @param x3 third point (final point) of the curve's X-coordinate @param y3 third point (final point) of the curve's Y-coordinate
121 Moves the current graphics point to specified coordinates. @param x horizontal coordinate @param y vertical coordinate
122 Moves the current graphics point to specified coordinates. @param x horizontal coordinate @param y vertical coordinate
123 Moves the current graphics point to specified coordinates. @param x horizontal coordinate @param y vertical coordinate
124 Moves the current graphics point to specified coordinates. @param x horizontal coordinate @param y vertical coordinate
125 Draws a line to the specified coordinates. @param x horizontal coordinate @param y vertical coordinate
126 Draws a line to the specified coordinates. @param x horizontal coordinate @param y vertical coordinate
127 Draws a line to the specified coordinates. @param x horizontal coordinate @param y vertical coordinate
128 Renders a line to the specified coordinates. @param x horizontal coordinate @param y vertical coordinate
129 Draws the current path as a line. @throws IOException if an I/O error occurs
130 Draws the current path as a line. @throws IOException if an I/O error occurs
131 Draws the current path as a line. @throws IOException if an I/O error occurs
132 Draws the current path as a line.
133 Closes and strokes the content stream, writing the CLOSE_AND_STROKE operator.
134 Closes and strokes the content stream. @throws IOException if an I/O error occurs
135 Closes and strokes the content stream, writing the CLOSE_AND_STROKE operator. @throws IOException if an I/O error occurs
136 Closes and strokes the content stream, writing the CLOSE_AND_STROKE operator. @throws IOException if an I/O error occurs
137 Fills content stream with non-zero shape data. @throws IOException if an I/O error occurs
138 Fills content stream with non-zero shape data. @throws IOException if an I/O error occurs
139 Fills content stream with non-zero shape data. @throws IOException if an I/O error occurs
140 Fills content stream with non-zero shape data.
141 Fills PDF content stream with even/odd operation.
142 Fills PDF content stream with even/odd operation.
143 Fills PDF content stream with even/odd operation. @throws IOException if an I/O error occurs
144 Fills PDF content stream with even/odd operation.
145 Fills and strokes the current graphics state. @throws IOException if an I/O error occurs
146 Fills and strokes the current graphics state. @throws IOException if an I/O error occurs
147 Fills and strokes the current graphics state. @throws IOException if an I/O error occurs
148 Fills and strokes the current graphics state. @throws IOException if an I/O error occurs
149 Fills and strokes even-odd content stream. @throws IOException if an I/O error occurs
150 Fills and strokes even-odd content stream.
151 Fills and strokes even-odd content stream. @throws IOException if an I/O error occurs
152 Fills and strokes even-odd content stream. @throws IOException if an I/O error occurs
153 Closes, fills non-zero areas, and strokes the content stream. @throws IOException if an I/O error occurs
154 Closes, fills non-zero areas, and strokes the content stream.
155 Closes, fills non-zero areas, and strokes the content stream. @throws IOException if an I/O error occurs
156 Closes, fills non-zero areas, and strokes the content stream. @throws IOException if an I/O error occurs
157 Closes fill and stroke even/odd content stream. @throws IOException if an I/O error occurs
158 Closes fill and stroke even/odd content stream. @throws IOException if an I/O error occurs
159 Closes fill and stroke even/odd content stream.
160 Closes fill and stroke even/odd content stream.
161 Closes the current path in the content stream. @throws IOException if an I/O error occurs
162 Closes the current path in the content stream.
163 Closes the current path in the content stream. @throws IOException if an I/O error occurs
164 Closes the current path in the content stream. @throws IOException if an I/O error occurs
165 Clamps the current graphics state to the current clipping path. @throws IOException if an I/O error occurs
166 Clamps the current graphics state to the current clipping path. @throws IOException if an I/O error occurs
167 Clamps the current graphics state to the current clipping path. @throws IOException if an I/O error occurs
168 Clamps the current graphics state to the current clipping path.
169 Clamps the graphics state to even-odd fill mode. @throws IOException if an I/O error occurs
170 Clamps the graphics state to even-odd fill mode.
171 Clamps the graphics state to even-odd fill mode.
172 Clamps the graphics state to even-odd fill mode. @throws IOException if an I/O error occurs
173 Sets the line width in the graphics state. @param lineWidth new line width value
174 Sets the line width in the graphics state. @param lineWidth new line width value
175 Sets the line width in the graphics state. @param lineWidth new line width value
176 Sets line width in graphics state. @param lineWidth new line width value
177 Sets the line join style within a PDF content stream. @param lineJoinStyle integer specifying line join style (0-2)
178 Sets the line join style within a PDF content stream. @param lineJoinStyle integer specifying line join style (0-2)
179 Sets the line join style within a PDF content stream. @param lineJoinStyle integer specifying line join style (0-2)
180 Sets the line join style within a PDF content stream. @param lineJoinStyle integer specifying line join style (0-2)
181 Sets the line cap style for a PDF content stream. @param lineCapStyle integer code (0-2) representing the desired cap style
182 Sets the line cap style for a PDF content stream. @param lineCapStyle integer code (0-2) representing the desired cap style
183 Sets the line cap style for a PDF content stream. @param lineCapStyle integer code (0-2) representing the desired cap style
184 Sets the line cap style for a PDF content stream. @param lineCapStyle integer code (0-2) representing the desired cap style
185 Sets the line dash pattern with specified values and phase. @param pattern array of dash lengths @param phase initial phase value
186 Sets the line dash pattern with specified values and phase. @param pattern array of dash lengths @param phase initial phase value
187 Sets the line dash pattern with specified values and phase. @param pattern array of dash lengths @param phase initial phase value
188 Sets the line dash pattern with specified values and phase. @param pattern array of dash lengths @param phase initial phase value
189 Sets the line join miter limit, throwing an exception if it's <= 0. @param miterLimit new limit value
190 Sets the miter limit for line joins. @param miterLimit new limit value (must be > 0)
191 Sets the miter limit for line joins, throwing an exception if it's <= 0. @param miterLimit the new limit value
192 Sets the miter limit for line joins, throwing an exception if it's <= 0. @param miterLimit the new limit value
193 Ends marked content stream.
194 Ends marked content stream.
195 Ends marked content stream.
196 Ends marked content stream.
197 Sets character spacing in the content stream. @param spacing new spacing value
198 Sets character spacing in the content stream. @param spacing new spacing value
199 Sets character spacing in the content stream. @param spacing new spacing value
200 Sets character spacing in the content stream. @param spacing new spacing value
201 Sets word spacing in content stream. @param spacing word spacing value
202 Sets word spacing in content stream. @param spacing word spacing value
203 Sets word spacing in content stream. @param spacing word spacing value
204 Sets word spacing in content stream. @param spacing word spacing value
205 Sets horizontal scaling factor for text content. @param scale the scaling value
206 Sets horizontal scaling factor for text content. @param scale the scaling value
207 Sets horizontal scaling factor for text content. @param scale the scaling value
208 Sets horizontal scaling factor for text content in pattern context. @param scale the scaling value
209 Sets rendering mode in PDF content stream. @param rm RenderingMode object
210 Sets rendering mode in PDF content stream. @param rm RenderingMode object
211 Sets rendering mode in PDF content stream. @param rm RenderingMode object
212 Sets text rendering mode in PDF content stream. @param rm RenderingMode object
213 Sets text rise value in PDF content stream. @param rise float value of the text rise
214 Sets text rise value in PDF content stream. @param rise float value of the text rise
215 Sets text rise value in PDF content stream. @param rise float value of the text rise
216 Sets text rise value in PDF content stream. @param rise float value of the text rise
217 Retrieves the bounding box of this marked content artifact. @return PDRectangle object representing the bounding box or null if not found
218 Retrieves the bounding box rectangle for this layout attribute. @return PDRectangle object or null if not found
219 Retrieves the rectangle annotation associated with this FDFAnnotation. @return PDRectangle object or null if not found
220 Retrieves the fringe dimensions as a PDRectangle object. @return PDRectangle instance or null if not found
221 Retrieves the fringe rectangle from the underlying annotation. @return PDRectangle object representing the fringe or null if not found
222 Retrieves the fringe rectangle of the annotation. @return PDRectangle object or null if not found
223 Retrieves the fringe rectangle of this annotation square. @return PDRectangle object or null if not found
224 Retrieves the font bounding box from the dictionary. @return PDRectangle object or null if not found
225 Retrieves the font bounding box. @return PDRectangle object or null if not found
226 Retrieves the bounding box of this form XObject. @return PDRectangle object representing the bounding box or null if not set
227 Retrieves the bounding box for this tiling pattern. @return PDRectangle object representing the bounding box or null if not found
228 Retrieves the bounding box of this shading. @return PDRectangle object representing the bounding box or null if not found
229 Retrieves the rectangle annotation from the dictionary. @return PDRectangle object or null if not a valid rectangle array
230 Calculates the rectangle difference for a free text annotation. @return PDRectangle object or null if not found
231 Retrieves the rectangle difference for this annotation. @return PDRectangle object or null if not found
232 Retrieves the bounding box of the viewport. @return PDRectangle object or null if not found
233 Retrieves the rectangle associated with this bead. @return PDRectangle object or null if not found
234 Initializes a line dash pattern with the given array and phase. @param array COSArray containing dash lengths @param phase initial phase value
235 Retrieves the line dash pattern from the dictionary. @return PDLineDashPattern object or null if not found
236 Creates a stencil image from the given PDImage and paint. @param pdImage PDF image object @param paint Paint object to use for masking @return BufferedImage representation of the stencil image or null if creation failed
237 Retrieves the transformation matrix from the PDF object's dictionary. @return Matrix instance or null if not found
238 Retrieves the pattern's matrix from the underlying COSDictionary. @return Matrix instance or null if not found
239 Retrieves and converts the underlying matrix from the PDF dictionary. @return Matrix object representing the shading transformation
240 Retrieves the inheritable attribute associated with a given COSDictionary node and key. @param node the parent dictionary @param key unique attribute identifier @return COSBase object or null if not found
241 Retrieves a boolean value from the dictionary using the specified key. If not found, returns the default value. @param key primary dictionary identifier @param defaultValue default boolean value to return if key is not found @return boolean value or default value if not found
242 Retrieves an integer value from the dictionary using the specified key. Falls back to the default value if not found or yields a non-integer result. @param key primary dictionary identifier @param defaultValue default integer value to return in case of failure @return retrieved integer value or default value
243 Retrieves an integer value from the dictionary using primary and secondary keys. Falls back to default value if either key is not found or yields a non-integer result. @param firstKey primary dictionary identifier @param secondKey secondary dictionary identifier
244 Initializes a new PDInlineImage instance with the specified parameters, data, and resources. @param parameters decoding parameters @param data raw image data @param resources associated resources
245 Returns the image suffix based on the filters. @return Suffix (e.g. "jpg", "tiff") or default to "png"
246 Retrieves a list of COSObject instances matching the specified types. @param type1 primary object type to match @param type2 secondary object type to match (optional) @return List of COSObject instances or empty list if not found
247 Retrieves Unicode representation of a given internal code point. @param code internal code point value @param customGlyphList optional glyph list (not used in this method)
248 Checks if the PDF document is encrypted. @return true if encrypted, false otherwise
249 Performs the parsing of an FDF document, initializing an FDFDocument instance. @throws IOException if errors occur during parsing
250 Retrieves the default AcroForm object from the document catalog. @return PDAcroForm object or null if not found
251 Checks if color space with given name exists. @param name unique color space identifier
252 Retrieves an extended graphics state by name. @param name COSName representing the resource type
253 Verifies whether a given COSName represents an image XObject. @param name unique dictionary identifier @return true if the object is an image XObject, false otherwise
254 Retrieves color space names from the dictionary. @return Set of COSName objects or empty set if not found
255 Retrieves XObject names from the dictionary. @return Set of COSName objects representing XObjects or empty set if not found
256 Retrieves font names from the dictionary. @return Set of COSName objects representing font resources
257 Retrieves property names from the dictionary. @return Set of COSName objects representing property names
258 Retrieves shading names from the dictionary. @return Set of COSName objects representing shading resources
259 Retrieves an unmodifiable set of pattern names from the dictionary. @return Set of COSName objects or empty set if not found
260 Retrieves an unmodifiable set of EXT Graphics State names from the dictionary. @return Set of COSName objects or empty set if not found
261 Retrieves the standard cryptographic filter dictionary.
262 Retrieves the default cryptographic filter dictionary. @return PDCryptFilterDictionary object or null if not found
263 Retrieves the character procedures for a given font encoding code. @param code unique font encoding identifier
264 Retrieves the rollover appearance entry from the underlying COSDictionary. @return PDAppearanceEntry object or null if not found
265 Retrieves the down appearance entry from the underlying COSDictionary. @return PDAppearanceEntry object or normal appearance if not found
266 Retrieves first child outline item. @return PDOutlineItem object or null if not found
267 Retrieves the last child outline item. @return PDOutlineItem object or null if not found
268 Retrieves and returns the signature value as a PDSignature object. @return PDSignature object or null if not found
269 Retrieves the value associated with a given index from this node or its children. The search is performed within the child nodes that fall within the numeric range of the current index. @param index The target index to look up @return The corresponding value object or null if not found
270 Retrieves the number of output parameters for this PDFunction. @return Number of output values or 0 if not set
271 Retrieves output parameter range for a given index. @param n index position
272 Clips input values to specified ranges and returns the clipped results. @param inputValues array of input values to be clipped
273 Retrieves the number of input parameters based on domain values. @return total count of input parameters or -1 if not initialized
274 Retrieves the domain values and returns a PDRange instance for input parameter management. @param n index position within the domain values array
275 Calculates sample index from coordinate vector, using interpolation data. @param vector input coordinate vector
276 Retrieves the decoding range for a given parameter. @param paramNum index of the parameter to fetch @return PDRange object or null if not found or insufficient data
277 Retrieves encoding values for a given parameter index. @param n parameter index
278 Checks if top edge is attached to the marked content artifact. @return true if attached, false otherwise
279 Checks if the bottom edge of the marked content artifact is attached. @return true if attached, false otherwise
280 Checks if left edge is attached. @return true if attached, false otherwise
281 Checks if the right edge of marked content artifact is attached. @return true if attached, false otherwise
282 Initializes a new CIDFont object from the given COS dictionary and type 0 parent font. @param fontDictionary dictionary representing the CID font @param parent the parent type 0 font
283 Initializes a new DictionaryEncoding instance from the given font encoding dictionary. @param fontEncoding COSDictionary object representing font encodings in PDF documents
284 Initializes a DictionaryEncoding instance from the specified font encoding dictionary. @param fontEncoding COSDictionary containing font encoding information @param isNonSymbolic whether the font is non-symbolic (true) or symbolic (false) @param builtIn Encoding object representing the font's built-in encoding, if any
285 Initializes a ShadingContext instance with the provided PDFShading, ColorModel, AffineTransform, and Matrix. @param shading PDFShading object to manage @param cm ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix Matrix for resource management
286 Retrieves a range of decode values for the specified parameter number. @param paramNum index of the parameter
287 Retrieves signed content from a PDF file. @param pdfFile InputStream representing the PDF document @return Byte array representation of the signed content or null if failed
288 Extracts signed content from PDF file. @param pdfFile byte array representation of the PDF document @return signed content as a byte array or null if failed
289 Retrieves the revision number from the dictionary. @return Revision value as a long integer
290 Retrieves the minimum revision value from the dictionary. @return Minimum revision as a long integer
291 Creates a COSInputStream instance with the specified filters, parameters, and input stream. @param filters list of filters to apply @param parameters filter parameters @param in input data stream to be decoded @param options decoding options @return COSInputStream object containing decoded data
292 Creates a view of the stream data with optional filtering. @return decoded data in a RandomAccessRead buffer or view
293 Creates an input stream with specified filters stopped. @param stopFilters list of filter names to skip @return InputStream object containing decoded data
294 Retrieves the numeric value associated with a given dictionary key. @param name unique PDF name string
295 Retrieves conversion factor from COSDictionary. @return Conversion factor as float value
296 Retrieves the leader length of an annotation. @return Leader length value
297 Retrieves the leader extend value from the annotation dictionary. @return Leader extend value as a floating-point number
298 Retrieves leader offset value from annotation dictionary. @return Leader offset as a floating-point number
299 Retrieves the V attribute value from the associated COSDictionary. @return float value of V attribute or NaN if not found
300 Retrieves CYX measurement value from COSDictionary. @return CYX measurement value as a float
301 Retrieves the number value associated with a dictionary key. @param name unique dictionary identifier @param defaultValue default float value to return if key is missing
302 Retrieves border effect intensity from COSDictionary. @return intensity value or default 0 if missing
303 Computes the height of a font. @param font PDFont object @return float height value or throws IOException if an error occurs
304 Retrieves default position vector for CID font. @param cid unique Character Identifier
305 Retrieves a PDPropertyList instance associated with the specified resource. @param name COSName identifying the specific object within the PROPERTIES type
306 Retrieves the Optional Content properties as a PDPropertyList instance. @return PDPropertyList object representing the Optional Content or null if not found
307 Retrieves the optional content dictionary. @return PDPropertyList instance or null if not found
308 Retrieves the Optional Content Groups (OCGs) associated with this PDOptionalContentMembershipDictionary. @return List of PDPropertyList objects representing OCGs, or an empty list if none found
309 Retrieves the underlying PDPropertyList object for Optional Content, if available. @return PDPropertyList object or null if not found
310 Validates cross-reference offsets and replaces them if necessary using brute force search. @throws IOException if an I/O error occurs
311 Saves this FDFDocument to a specified file. @param fileName File object representing the output destination
312 Sets the high value in the color table array. @param high new high value
313 Sets the page number to navigate within the PDF document. @param pageNumber target page number
314 Removes the first occurrence of specified element from this list. @param o element to search for @return true if removed, false otherwise
315 Removes an element at specified index, but only if the list isn't filtered. @param index position of element to be removed @return the removed element or null if not found
316 Removes a specified COSBase object from the collection, searching recursively within nested objects. @param o the element to be removed @return true if removal was successful, false otherwise
317 Removes a specified user property from the collection. @param userProperty the property to be removed
318 Removes a specified digital certificate subject from the collection. @param subject byte data representing the subject to be removed
319 Removes a specified key usage extension from the certificate's KEY_USAGE attribute.
320 Removes the specified issuer from the certificate's ISSUER attribute. @param issuer byte array representing the issuer to remove
321 Removes a specified OID from the certificate's COSArray of OIDs. @param oid unique OID identifier
322 Removes all key-value pairs from this COSDictionaryMap.
323 Removes a dictionary item by its associated PDF name. @param key unique identifier of item to be removed
324 Recursively collects COSBase objects from the provided array, considering their update states and relationships. @param array COSArray to process @return true if any object in the collection demands an update of its parent, false otherwise
325 Collects and processes the provided COSObject, incorporating its update state. @param object COSObject to process
326 Sets the origin document state without dereferencing. @param originDocumentState new origin document state
327 Dereferences the given child object and updates its update state. @param child child object to dereference (must be COSUpdateInfo)
328 Retrieves the upper limit value from the associated COSArray object. @return upper limit string or null if not found
329 Retrieves the lower limit string from the associated COSArray object. @return Lower limit string or null if not found
330 Retrieves the string representation of a COSName instance associated with the given dictionary identifier. @param name unique dictionary identifier
331 Retrieves the rendering intent from the dictionary. @return RenderingIntent enum instance or null if not found
332 Retrieves the string representation of the COSName instance associated with the 'N' dictionary identifier. @return name as a string or null if not found
333 Retrieves string representation of given dictionary key or returns default value if not found. @param key unique dictionary identifier @param defaultValue default string to return when key is missing
334 Retrieves the style of guidelines as a string representation. @return string value representing guideline style or default if not found
335 Retrieves the icon name associated with this text annotation. @return string representation of the icon name or a default value if not found
336 Retrieves attachment name from COS object. Uses getNameAsString to fetch value associated with ATTACHMENT_NAME_PUSH_PIN key
337 Retrieves line ending style as string. @return Line ending style or default value if not found
338 Retrieves the highlight mode as a string. @return Highlight mode ("invert") or default value if not found
339 Retrieves the reply type of an annotation. @return string representation of COSName object for reply type
340 Retrieves the name of this rubber stamp annotation. @return The string representation of the annotation's name or a default value if missing.
341 Retrieves the string representation of the annotation's name. @return name as a string or default value if not found
342 Retrieves highlighting mode as a string. @return "H" if highlighting is enabled, "I" otherwise
343 Retrieves the border style as a string. @return style string (e.g. "solid") or null if not found
344 Retrieves the type of external data dictionary. @return string representation of COSName object or default value if not found
345 Retrieves the style of this transition. @return string representation of transition style
346 Retrieves the dimension of this transition. @return string representation of the transition's dimension
347 Retrieves the motion style of the transition. @return string representation of the transition's motion
348 Retrieves non-full-screen page mode preference. @return string representation of the preference or "UseNone" if not set
349 Retrieves the reading direction preference. @return string representation of DIRECTION (L2R or R2L)
350 Retrieves the string representation of the view area preference. @param key unique dictionary identifier
351 Retrieves the view clip preference. @return string representation of the VIEW_CLIP COSName or default value if missing
352 Retrieves the print area setting from viewer preferences. @return string representation of print area or default value if not found
353 Retrieves print clip settings from viewer preferences. @return string representation of print clip setting or default value if not found
354 Retrieves the print scaling preference. @return string representation of print scaling setting or default value if not found
355 Verifies if the given PDF cross-reference table offset points to a valid XRef stream. @param startXRefOffset unique identifier for the xref table @return true if valid XRef stream found, false otherwise
356 Checks if this attribute object has no data, only containing an owner. @return true if empty, false otherwise
357 Retrieves the parent structure node. @return PDStructureNode object or null if not found
358 Creates an object from the given COSBase, determining its type and representing it as a desired type. @param kid underlying COSBase object
359 Initializes PDEncryption instance with COSDictionary and sets security handler. @param dictionary document's encryption settings
360 Retrieves the configured SecurityHandler instance. @return SecurityHandler object or null if not initialized
361 Retrieves a list of FDFAnnotations from the underlying FDF document. @return List<FDFAnnotation> containing all annotations found in the document or null if not found
362 Checks if the character set matches between the provided CID system info and font info. @param cidSystemInfo unique system identifier @param info Font information object @return true if sets match, false otherwise
363 Checks if the current DeviceN color space has N-channel attributes.
364 Retrieves the open action for a PDF document. @return PDDestination or PDAction object, or null if not found
365 Retrieves the associated action based on the field's COS dictionary. @return PDAction object or null if not found
366 Retrieves a map of JavaScript actions from the PDF document. @return Map of JavaScript actions keyed by name or null if not found
367 Retrieves additional action associated with COSName.F. @return PDAction object or null if not found
368 Retrieves a PDAction instance associated with key 'E'. @return PDAction object or null if not found
369 Retrieves PDAction instance associated with key X. @return PDAction object or null if not found
370 Retrieves a PDAction instance based on the underlying COSDictionary for key "D". @return PDAction object or null if not found
371 Retrieves the action associated with key U. @return PDAction object or null if not found
372 Retrieves FO action definition. @return PDAction object or null if not found
373 Retrieves a PDAction instance for the 'BL' annotation. @return PDAction object or null if not found
374 Retrieves the PDAction instance associated with the 'PO' annotation. @return PDAction object or null if not found
375 Retrieves the PC action definition. @return PDAction object or null if not found
376 Retrieves a PDAction instance associated with the 'PV' annotation. @return PDAction object or null if not found
377 Retrieves the PI action. @return PDAction object or null if not found
378 Retrieves the WC action from the catalog. @return PDAction object or null if not found
379 Retrieves a WS (Web Socket) action from the catalog. @return PDAction object or null if not found
380 Retrieves and creates a PDAction instance for the document's structure. @return PDAction object or null if not found
381 Retrieves the action associated with the 'WP' event. @return PDAction object or null if not found
382 Retrieves the underlying action for the 'DP' key. @return PDAction object or null if not found
383 Retrieves and creates a PDAction instance for the key "K". @return PDAction object or null if not found
384 Retrieves and creates a PDAction instance for the 'F' key. @return PDAction object or null if not found
385 Retrieves a PDAction instance for the 'v' key. @return PDAction object or null if not found
386 Retrieves additional action associated with key 'C'. @return PDAction object or null if not found
387 Retrieves PDAction instance associated with key 'O'. @return PDAction object or null if not found
388 Retrieves a PDAction instance based on the C key from the underlying COSDictionary. @return PDAction object or null if not found
389 Retrieves and creates a PDAction instance based on the underlying COSDictionary object for key A. @return PDAction object or null if not found
390 Retrieves the underlying PDAction instance based on the given annotation key. @return PDAction object or null if not found
391 Retrieves the underlying action instance from the COS dictionary. @return PDAction object or null if not found
392 Retrieves string value associated with a given PDF property. @param propertyKey unique PDF property identifier
393 Retrieves custom metadata string value associated with the given field name. @param fieldName unique PDF field identifier
394 Retrieves string value associated with a given PDF name. @param name unique PDF name identifier
395 Retrieves 'Base' string from underlying COSDictionary object.
396 Retrieves PDF document version from properties dictionary.
397 Retrieves numerical units from internal COSDictionary.
398 Retrieves string value associated with given PDF name. @param key unique dictionary identifier @param defaultValue fallback string to return if key is missing
399 Retrieves the string value associated with a given key from an embedded dictionary. @param embedded unique embedded dictionary identifier @param key unique dictionary identifier within the embedded dictionary @param defaultValue fallback string to return if key is missing
400 Retrieves the operation type from the dictionary. @param COSName.O key identifier @return Operation string (e.g. "open") or default value if not found
401 Retrieves the default appearance string from the form dictionary. @return default appearance value or empty string if not found
402 Retrieves the file name from various sources (Unicode, DOS, MAC, Unix, and default). @return The first non-null file name found, or null if all are missing
403 Checks if an optional content group with the given name exists. @param groupName unique group identifier @return true if found, false otherwise
404 Constructs fully qualified field name by combining partial name and parent name. @return fully qualified field name or null if not found
405 Retrieves export values from choice field options. @return List of string options
406 Parses input text using a SyntaxHandler and Tokenizer. @param input text to tokenize @param handler handler for parsing and interpreting tokens
407 Encrypts or decrypts PDF document data using various algorithms (AES256, AES, RC4). @param objectNumber unique document identifier @param genNumber generation number @param data InputStream containing the data to be encrypted/decrypted @param output OutputStream to write the encrypted/decrypted data @param decrypt true for decryption, false for encryption
408 Computes the encrypted key based on the encryption revision. @param password user-provided password @param o unknown byte array @param u user entry byte array (required) @param oe owner entry encryption byte array (required for owner password) @param ue user entry encryption byte array (required for user password) @param permissions document permissions @param id unique identifier @param encRevision encryption revision number @param keyLengthInBytes result digest length @param encryptMetadata whether to encrypt metadata @param isOwnerPassword true if owner password, false otherwise @return encrypted key or throws IOException on failure
409 Validates user password based on provided parameters and encryption revision. @param password user-provided password @param user expected user password @param owner owner information @param permissions document permissions @param id unique identifier @param encRevision encryption revision number @param keyLengthInBytes result digest length @param encryptMetadata whether to encrypt metadata @return true if passwords match, false otherwise
410 Finds the font matching the specified PostScript name and format. @param format FontFormat type @param postScriptName unique PostScript name identifier @return FontBoxFont object or null if not found
411 Normalizes and formats the addition of words from a PDF document. @param line list of LineItem objects representing text elements @return List<WordWithTextPositions> of formatted words with positions
412 Converts a date string in COSString format to a Calendar object. @param text input date string @return Calendar object if parsing is successful, otherwise null
413 Begins marked content in PDF output stream. @param tag COSName object representing the marked content type
414 Begins marked content in PDF output stream. @param tag COSName object representing the marked content type
415 Begins marked content in PDF output stream. @param tag COSName object representing the marked content type
416 Begins marked content in PDF output stream. @param tag COSName object representing the marked content type
417 Begins marked content sequence with specified COSName tag and MCID. @param tag COSName object representing the marked content type @param mcid unique identifier for the marked content sequence
418 Begins marked content with the specified COSName tag and MCID. @param tag COSName object representing the marked content type @param mcid unique identifier for the marked content sequence
419 Begins marked content sequence with the specified COSName tag and MCID. @param tag COSName object representing the marked content type @param mcid unique identifier for the marked content sequence
420 Begins marked content with the specified COSName tag and MCID. @param tag COSName object representing the marked content type @param mcid unique identifier for the marked content sequence
421 Sets marked content point in PDF output stream. @param tag COSName object representing the operand
422 Sets marked content point in PDF output stream. @param tag COSName object representing the operand
423 Sets marked content point in PDF output stream. @param tag COSName object representing the operand
424 Sets marked content point in PDF output stream. @param tag COSName object representing the operand
425 Writes a COSString to the specified OutputStream. @param output target output stream @param cosString input COSString object
426 Writes a string to the PDF document using the current font and text layout settings. @throws IllegalStateException if beginText() or setFont() have not been called
427 Initializes a PageDrawer instance with specified parameters. @param parameters configuration settings for the page drawing process
428 Finds the named destination page within the PDF document. @param namedDest PDNamedDestination object with unique identifier @return PDPageDestination object or null if not found
429 Retrieves the associated color for the 'C' annotation item.
430 Retrieves the border color of an annotation. @return PDColor object representing the border color
431 Retrieves background color from dictionary. @return PDColor object representing the background color
432 Parses a COS string from the PDF source. This method reads and interprets data from the source while handling whitespace, line breaks, and character encoding. It returns a COSString instance representing the parsed string. @throws IOException if parsing fails due to invalid or malformed input
433 Retrieves the contents of a digital signature within a PDF file. @param pdfFile InputStream representing the PDF document
434 Retrieves the contents of a PDF file based on its digital signature. @param pdfFile byte array representing the PDF document @return hexadecimal byte array representation of filtered and converted data
435 Initializes a PDImmutableRectangle instance with specified dimensions. @param width rectangle width @param height rectangle height
436 Returns the bounding box of the cloudy border. @return PDRectangle instance representing the bounding box
437 Initializes PDMetadata instance from a PDDocument. @param document PDDocument object containing PDF content
438 Initializes PDStream instance from PDDocument and sets embedded file type. @param document PDDocument object containing PDF content
439 Initializes a PDXObject instance with a PDStream and subtype name. @param document PDDocument object containing PDF content @param subtype COSName representing the subtype of this XObject
440 Initializes a PDImageXObject instance from a given PDDocument. @param document underlying PDDocument object
441 Initializes a PDStream instance from a PDDocument and InputStream. @param doc parent PDDocument object @param input input stream to transfer data from
442 Initializes a PDStream instance from a PDDocument and InputStream with specified output filter. @param doc parent PDDocument object @param input input stream to transfer data from @param filter output filter for the created stream
443 Initializes a PDStream instance with specified PDDocument, input stream, and output filters. @param doc parent PDDocument object @param input input stream to transfer data from @param filters list of output filters for the created stream
444 Creates a PDImageXObject from the provided document, encoded stream, and filter. @param document PDDocument object @param encodedStream InputStream containing image data @param cosFilter COSBase instance representing the filter to apply @param width new image width in pixels @param height new image height in pixels @param bitsPerComponent number of bits per component for the image @param initColorSpace initial color space for the image object
445 Initializes the PDLayoutAttributeObject with default layout settings.
446 Initializes a new instance of PDListAttributeObject with default settings.
447 Initializes an instance of PDPrintFieldAttributeObject with default print field settings.
448 Initializes a new instance of PDTableAttributeObject with default settings.
449 Creates a PDAttributeObject instance based on the given COSDictionary. The type of attribute object is determined by the 'O' owner name in the dictionary. @param dictionary COS dictionary structure to be wrapped
450 Retrieves the normal appearance entry from the underlying COSDictionary. @return PDAppearanceStream object or null if not found
451 Retrieves the value for an "on" checkbox state. @return The name of the appearance dictionary entry for the "on" state, or an empty string if not found
452 Retrieves the transparency group associated with this soft mask. @return PDTransparencyGroup object or null if not found
453 Constructs a COSParser instance with lenient parsing mode. @param source PDF document to be parsed
454 Constructs a PDFParser instance with specified parameters for parsing and loading of PDF documents. @param source PDF document to be parsed @param decryptionPassword encryption password (or null for no encryption) @param keyStore path to keystore containing encryption keys @param alias alias of encryption key in the keystore
455 Initializes a new instance of the PDAppearanceContentStream class with default filters. @param appearance Appearance stream object
456 Initializes a new instance of PDFormContentStream with given form XObject. @param form the form XObject to be used for content stream creation
457 Initializes a new instance of the PDPageContentStream class with default output stream. @param doc PDDocument object @param appearance PDAppearanceStream for page content settings
458 Initializes a new instance of the PDPatternContentStream class with given PDTilingPattern parameters. @param pattern tiling pattern object
459 Sets the text transformation matrix in text mode. @param matrix AffineTransform object containing the matrix values
460 Sets the text transformation matrix while in text mode. @param matrix AffineTransform object containing the matrix values
461 Sets the text transformation matrix while in text mode. @param matrix AffineTransform object containing the matrix values
462 Sets the text transformation matrix for text rendering. @param matrix AffineTransform object containing the matrix values
463 Applies a transformation to the content stream using a supplied affine matrix. @param matrix Transformation matrix to apply
464 Applies an affine transformation to the content stream using a supplied matrix. @param matrix Transformation matrix to apply
465 Applies an affine transformation to the content stream using a supplied matrix. @param matrix Transformation matrix to apply
466 Applies an affine transformation to the content stream using a supplied matrix. @param matrix Transformation matrix to apply
467 Draws an arrow on the content stream at specified coordinates. @param cs appearance content stream @param x horizontal coordinate of arrow tip @param y vertical coordinate of arrow tip @param len length of arrow arm
468 Draws a shape with customizable line width and fill/stroke options. @param lineWidth the thickness of the shape's border @param hasStroke whether to draw the shape's outline @param hasFill whether to fill the shape with color
469 Draws a diamond shape at specified coordinates with given radius. @param x horizontal center coordinate @param y vertical center coordinate @param r radius of the diamond
470 Draws a circle with specified radius at given coordinates. @param cs appearance content stream @param x horizontal coordinate of center @param y vertical coordinate of center @param r circle radius
471 Draws a circle with specified radius centered at (x,y) in the content stream. @param cs AppearanceContentStream to draw on @param x horizontal center coordinate @param y vertical center coordinate @param r circle radius
472 Draws a paperclip shape on the PDF content stream.
473 Sets line width on demand, only calling setLineWidth() when necessary. @param lineWidth new line width value
474 Generates an image of the tiling pattern based on the provided parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern object representing the tiling pattern @param colorSpace PDColorSpace object for color space @param color fill color @param xform AffineTransform matrix for transformations @param anchorRect Rectangle2D bounding box for the pattern @return BufferedImage instance of the generated image or null if creation failed
475 Calculates and returns the anchor rectangle for a given tiling pattern. The anchor rectangle is scaled based on the provided transformation matrix. If the calculated size exceeds the maximum allowed edge length, it will be clipped to prevent huge sizes. @param pattern PDTilingPattern object containing the tiling pattern's properties @return Rectangle2D representing the anchor rectangle with scaling applied
476 Retrieves the stencil image using the provided Paint object. @param paint Paint object to use for masking @return BufferedImage representation of the stencil image or null if creation failed
477 Retrieves a raw image raster from the given PDImage object. @param pdImage PDF image object @return WritableRaster representation of the image data @throws IOException if an I/O error occurs during the process
478 Retrieves a BufferedImage representation of the input PDImage, applying specified clipping and color keying. @param pdImage PDF image object @param region rectangle defining the clipping area @param subsampling factor to apply during decoding @param colorKey optional color key mask array @return a BufferedImage representation of the input PDImage or null if failed
479 Retrieves the resources associated with this PDF page. @return PDResources object or null if not initialized
480 Retrieves the page's media box dimensions. @return PDRectangle object representing the page's media box
481 Returns the rotation of this page in degrees. @return Rotation angle, or 0 if undefined
482 Retrieves a boolean value from the dictionary using the specified PDF name. @param key primary dictionary identifier @param defaultValue default boolean value to return if key is not found @return boolean value or default value if not found
483 Checks if file specification is volatile. @return true if volatile, false otherwise
484 Checks if the user property is hidden. @return true if hidden, false otherwise
485 Checks if metadata encryption is enabled. @return true if metadata encryption is enabled, false otherwise
486 Retrieves caption offset status. @return true if caption is enabled, false otherwise
487 Determines if the icon should scale to fit its annotation. @return true if icon scales to fit, false otherwise
488 Checks if renaming is enabled. @return true if renaming is allowed, false otherwise
489 Checks if this transparency group is isolated. @return true if isolated, false otherwise
490 Checks if knockout isolation is enabled. @return true if K key exists and has value of true in the dictionary, false otherwise
491 Retrieves anti-aliasing flag from shading dictionary. @return true if anti-aliasing is enabled, false otherwise
492 Retrieves stroking overprint control from dictionary. @return boolean value indicating enablement of stroking overprint control
493 Retrieves automatic stroke adjustment setting from dictionary. @return true if enabled, false otherwise
494 Retrieves the alpha source flag from the dictionary. @return true if the alpha source is enabled, false otherwise
495 Retrieves the text knockout flag from the dictionary. @return boolean value indicating whether text should be knocked out
496 Retrieves the 'H' flag value from the action dictionary. @return true if hidden, false otherwise
497 Retrieves synchronous flag value. @return true if sound plays synchronously, false otherwise
498 Retrieves the repeat flag value. @return true if sound should be repeated, false otherwise
499 Retrieves whether sound mixing is enabled. @return true if mixing is enabled, false otherwise
500 Checks if line annotation has caption. @return true if caption exists, false otherwise
501 Checks if the annotation is open. @return true if open, false otherwise
502 Retrieves pre-release flag from dictionary. @return true if pre-release, false otherwise
503 Retrieves flag indicating non-E font usage without warning. @return true if enabled, false otherwise
504 Retrieves trusted mode flag from the digital signature properties dictionary. @return true if trusted mode is enabled, false otherwise
505 Retrieves whether form field appearances are needed. @return true if appearances are required, false otherwise
506 Checks if the fly area is opaque. @return true if the fly area has no background, false otherwise
507 Hides or shows the viewer toolbar based on user preference. @return true if toolbar is hidden, false otherwise
508 Hides or shows the menubar based on viewer preferences. @return true if menubar is hidden, false otherwise
509 Hides window UI based on user preference. @return true if hidden, false otherwise
510 Retrieves whether to fit the PDF window to its content. @return true if fitting is enabled, false otherwise
511 Centers the PDF viewer window based on user preferences. @return true if centered, false otherwise
512 Retrieves viewer preference to display document title. @return true if enabled, false otherwise
513 Retrieves an integer value from the embedded dictionary using the specified key. Falls back to the default value if not found or yields a non-integer result. @param embeddedDictionary COSName identifier for the embedded dictionary @param key primary dictionary identifier @param defaultValue default integer value to return in case of failure @return retrieved integer value or default value
514 Retrieves an integer value from the dictionary using the specified key. Falls back to -1 if not found or yields a non-integer result. @param key primary dictionary identifier
515 Retrieves an integer value from the dictionary using the specified key. Falls back to -1 if not found or yields a non-integer result. @param key primary dictionary identifier
516 Retrieves an integer value from the dictionary using the specified key. Falls back to the default value if not found or yields a non-integer result. @param key primary dictionary identifier @param defaultValue default integer value to return in case of failure
517 Retrieves a flag value from the dictionary using the specified key and bit mask. @param field primary dictionary identifier @param bitFlag bitwise flag to check against the retrieved value @return true if the flag is set, false otherwise
518 Retrieves the page count from the page tree's dictionary. @return Page count or default value of 0 if not found
519 Retrieves the starting page number. @return start page number or default value of 1 if not found
520 Retrieves the order value from the COS dictionary. @return order integer value or default (1) if not found
521 Retrieves the PDF document's revision number. @return integer revision number or 0 if not found
522 Retrieves the length of the cryptographic filter dictionary. @return integer value representing the dictionary's length
523 Retrieves encryption version from dictionary. @return integer version or default value (0) if not found
524 Retrieves the length of the PDF document. @return length in bytes or default value if not found
525 Retrieves the document revision from the security settings. @return current document revision or default version if not found
526 Retrieves document permissions. @return integer permission value or default (0) if not found
527 Retrieves justification type of free text annotation. @return justification type as string or empty if not found
528 Retrieves font flags from the dictionary or returns default value. @return integer value representing font flags
529 Creates a PDAbstractPattern instance from the provided COSDictionary, resolving the pattern type and instantiating the corresponding subclass. @param dictionary COSDictionary containing pattern data @param resourceCache ResourceCache for resource retrieval @return PDAbstractPattern instance or throws IOException on failure
530 Retrieves the paint type of the tiling pattern. @return integer value representing the paint type or default (0) if not found
531 Retrieves the tiling type as an integer value. @return Tiling pattern type identifier
532 Creates a PDShading object based on the provided COSDictionary. @param shadingDictionary dictionary containing shading properties @return PDShading instance or throws IOException for unknown shading types
533 Retrieves bits per flag value from COS dictionary. @return Bits per flag integer value or -1 if not found
534 Retrieves the number of vertices per row from the dictionary. @return Vertices count or -1 if not found
535 Retrieves the number of bits per color component from the PDF document. If not found or unknown, returns a default value of -1. @return The number of bits per color component (default -1)
536 Retrieves the number of bits per coordinate. @return The number of bits used to represent each coordinate value
537 Retrieves the action flags from the dictionary. @return integer value representing the action flags
538 Retrieves action flags from the dictionary. @return integer value of flags or default 0 if not found
539 Retrieves the page number associated with this target directory. @return page number or -1 if not found
540 Retrieves annotation index from dictionary. @return annotation index or -1 if not found
541 Retrieves annotation flags from underlying COSDictionary. @return integer value representing annotation flags or default if not found
542 Retrieves Q value from annotation's dictionary. @return retrieved integer value or default (0) if not found
543 Retrieves the rotation setting of the annotation. @return rotation value (0 by default)
544 Checks if timestamp is required in PDF document. @return true if timestamp is mandatory, false otherwise
545 Retrieves the open count from the PDF document. @return current open count or default value (0) if not found
546 Retrieves the Q value from the dictionary. @return retrieved integer value or default value (0)
547 Retrieves the top index of displayed items in the list box. @return top index value or default (0) if not found
548 Retrieves a list of COSObject instances matching the specified type. @param type primary object type to match
549 Removes cached page resources from the dictionary.
550 Retrieves embedded file dictionary object for key 'F' and returns it as a PDEmbeddedFile. @return PDEmbeddedFile object or null if not found
551 Retrieves embedded file dictionary for DOS key. @return PDEmbeddedFile object or null if not found
552 Retrieves embedded file for Mac platform. @return PDEmbeddedFile object or null if not found
553 Retrieves embedded file on Unix system. @return PDEmbeddedFile object or null if not found
554 Retrieves embedded file dictionary object for Unicode key. @return COSBase object or null if not found
555 Finds a PDSignatureField matching the given PDSignature object. @param fieldIterator iterator over PDF fields @param sigObject PDSignature object to search for @return PDSignatureField object or null if not found
556 Initializes AxialShadingContext with specified shading, color model, transform, and device bounds. @param shading PDShadingType2 object representing axial shading type @param colorModel ColorModel object for color management @param xform AffineTransform object for coordinate transformation @param matrix Matrix object for inverse calculation @param deviceBounds Rectangle object defining device space boundaries @throws IOException runtime exception indicating unrecoverable error
557 Initializes RadialShadingContext with specified parameters. @param shading PDShadingType3 object representing radial shading type @param colorModel ColorModel object used for color representation @param xform AffineTransform object for coordinate transformation @param matrix Matrix object containing transformation data @param deviceBounds Rectangle object specifying device bounds @throws IOException if initialization fails
558 Initializes a Triangle-Based Shading Context instance with the provided PDFShading and transforms. @param shading PDFShading object to manage @param cm ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix Matrix for resource management
559 Constructs a Type1ShadingContext object from the given PDF shading and transformation parameters. @param shading PDShadingType1 object representing the PDF shading @param colorModel ColorModel object describing the color model for rendering @param xform AffineTransform object representing the user-space to device-space transformation @param matrix Matrix object representing the current user space to device space transformation
560 Retrieves a range of decode values for the specified parameter number. @param paramNum index of the parameter
561 Retrieves a range of decode values for the specified parameter number. @param paramNum index of the parameter
562 Creates a COSInputStream instance with specified filters and input stream. @param filters list of filters to apply @param parameters filter parameters @param in input data stream to be decoded
563 Initializes a PDFObjectStreamParser instance from a COSStream and COSDocument. @param stream the COSStream to parse @param document the COSDocument associated with the stream
564 Initializes a new instance of the PDCIDFontType0 class from a given COSDictionary and PDType0Font. @param fontDictionary COS dictionary representing the font. @param parent PDType0Font object associated with this CID font. @throws IOException if an error occurs while processing the embedded CFF font.
565 Initializes a PDCIDFontType2 instance with the provided font dictionary, parent font, and TrueType font. If a TrueType font is provided, it is used; otherwise, an attempt is made to retrieve the font from the PDF document. The font's embedded status and damage state are also determined. @param fontDictionary COS dictionary containing font metadata @param parent PDType0Font parent font @param trueTypeFont TrueType font (optional) @throws IOException if an error occurs while reading or parsing the font data
566 Reads a CMap from the given COSBase object. @param base COSBase instance representing a name or stream containing CMap data @return parsed CMap object, or null if invalid input
567 Writes the PDF document body, preserving origin object numbers and handling encryption. @param doc the COSDocument to write
568 Saves this FDFDocument to a specified file. @param fileName file path as string
569 Recursively collects COSBase objects from the provided object, considering their update states and relationships. @param base COSBase to process
570 Sets the trailer dictionary of this COSDocument instance. @param newTrailer updated trailer dictionary
571 Updates the origin document state based on a given child object. @param child COSBase object containing update information
572 Updates the document's state and applies changes to child objects. @param children collection of COSBase objects to update
573 Retrieves the value associated with the specified name from this node or its children. If found, returns the corresponding object; otherwise, returns null. @param name The name to look for @return T Value associated with the name, or null if not found
574 Retrieves string representation of given attribute name or returns default value if not found. @param name unique attribute identifier @param defaultValue default string to return when name is missing
575 Retrieves border effect style from COSDictionary. @return Style string (e.g., solid, dashed) or default "S" if not found
576 Retrieves the root structure tree node. @return PDStructureTreeRoot object or null if not found
577 Retrieves a list of child elements associated with this structure node. @return List of Object instances representing the children, or an empty list if none exist
578 Retrieves the document's encryption settings. @return PDEncryption instance or null if not encrypted
579 Prepares the COSParser instance for decryption by initializing encryption settings and security handler. @throws IOException if an I/O error occurs during key store loading or security handler preparation
580 Fetches and processes the encoding information for this Type 0 font. @throws IOException if missing required CMap or invalid encoding
581 Repairs the length of the first segment in a Type 1 font. @param bytes PDF byte array @param length1 initial length value to be repaired @return corrected length value or offset if repair is not possible
582 Ensures the validity of the Length2 value in a Type 1 font. @param bytes font data @param length1 starting position of the font data @return corrected Length2 value or maximum available length if invalid
583 Retrieves fractional display style from COSDictionary. @return string representation of fractional display setting
584 Retrieves thousands separator from COSDictionary. @return string value of thousands separator ("," by default)
585 Retrieves decimal separator from COSDictionary. @return decimal separator character (.) or default value if missing
586 Retrieves label prefix string from COSDictionary. @return Label prefix string or default space if missing
587 Retrieves label suffix string from COSDictionary.
588 Retrieves label position to value string from COS dictionary.
589 Retrieves string value from embedded dictionary. @param embedded unique embedded dictionary identifier @param key unique dictionary identifier within the embedded dictionary
590 Retrieves a priority queue of FontMatch objects based on the given font descriptor and CID system info. @param fontDescriptor PDFontDescriptor object containing font information @param cidSystemInfo PDCIDSystemInfo object representing the character set @return PriorityQueue<FontMatch> containing matched font information, sorted by score
591 Validates the owner password based on the specified encryption revision. @param ownerPassword owner password byte array @param user user key byte array (null if not used) @param owner owner key byte array @param permissions document permissions @param id unique document identifier @param encRevision encryption revision number @param keyLengthInBytes desired key length @param encryptMetadata whether to encrypt metadata @return true if password is valid, false otherwise
592 Parses input text into an instruction sequence using a SyntaxHandler and Tokenizer. @param text input text to tokenize
593 Decrypts the specified COSStream and its contents. @param stream the COSStream to decrypt @param objNum unique document identifier @param genNum generation number @throws IOException if an I/O error occurs during decryption or encryption.
594 Encrypts the data in a COSStream using various algorithms. @param stream COSStream containing the data to be encrypted @param objNum unique document identifier @param genNum generation number
595 Decrypts a COSString instance using the provided encryption parameters. @param string the encrypted string to decrypt @param objNum unique document identifier @param genNum generation number @return decrypted COSString instance or original string if decryption failed
596 Encrypts a COSString instance using the specified encryption parameters. @param string COSString to be encrypted @param objNum unique document identifier @param genNum generation number
597 Validates user password based on provided parameters and encryption revision. @param password user-provided password @param user expected user password @param owner owner information @param permissions document permissions @param id unique identifier @param encRevision encryption revision number @param keyLengthInBytes result digest length @param encryptMetadata whether to encrypt metadata @return true if passwords match, false otherwise
598 Finds the font matching the specified PostScript name, prioritizing Type1Font, TrueTypeFont, and OpenTypeFont formats. @param postScriptName unique PostScript name identifier
599 Writes the content of a single page to the output stream. This method iterates over the charactersByArticle collection and processes each text list, sorting it if necessary, and then writes the extracted text from the current page.
600 Retrieves a date string from the dictionary and converts it to a Calendar object. @param key unique dictionary identifier @return Calendar object if parsing is successful, otherwise null
601 Writes a COSBase token to the PDF output stream. @param base the COSBase object to be written
602 Serializes and writes a given COSBase object to the output stream. @param output OutputStream for writing data @param object COSBase object to serialize @param topLevel whether this is the top-level object being written
603 Writes text content stream with positioning information to the PDF document. @param textWithPositioningArray array of Float and String values representing text positions
604 Displays user-provided text in the PDF document. @param text string value to be shown
605 Creates a PageDrawer instance with specified parameters and annotation filter. @param parameters configuration settings for the page drawing process @return initialized PageDrawer object
606 Initializes a PDXObject instance with a PDStream and subtype name. @param document PDDocument object containing PDF content
607 Initializes a PDMetadata instance from a PDDocument and InputStream. @param doc parent PDDocument object @param str input stream to transfer data from
608 Initializes a new PDEmbeddedFile instance from a PDDocument and embedded file stream. @param doc parent PDDocument object @param str input stream containing the embedded file data
609 Initializes a PDEmbeddedFile instance from a PDDocument and InputStream. @param doc parent PDDocument object @param input input stream to transfer data from @param filter output filter for the created stream
610 Prepares a PDImageXObject instance from the provided parameters. @param document PDDocument object @param byteArray input image data in byte array form @param width new image width in pixels @param height new image height in pixels @param bitsPerComponent number of bits per component for the image @param initColorSpace initial color space for the image object @return PDImageXObject instance or throws IOException if failed
611 Initializes PDExportFormatAttributeObject with specified owner. @param owner String identifier of attribute object owner
612 Retrieves the revisions of attribute objects associated with this structure element. @return Revisions collection containing PDAttributeObject instances
613 Retrieves appearance stream from annotation. @param annotation PDAnnotation object
614 Adds font resources from a widget annotation to the AcroForm's resources. @param acroFormResources AcroForm's resource manager @param annotation widget annotation containing font information
615 Retrieves a set of all on-values associated with the button. @return Set<String> containing all on-values, or an empty set if none exist
616 Checks if the checkbox is currently checked. @return true if the value matches the "on" state, false otherwise
617 Sets checkbox value to "on" state.
618 Initializes a FileSystemFontProvider instance, scanning the local system for fonts and loading cached font information. @param cache FontCache object to store font data
619 Initializes FDFParser with specified input source. @param source RandomAccessRead object containing FDF document to parse
620 Constructs a PDFParser instance for parsing and loading of PDF documents with specified parameters. @param source PDF document to be parsed @param decryptionPassword encryption password (or null for no encryption)
621 Draws a style of annotation line based on the specified PDAnnotationLine enum value. @param style the type of annotation to draw @param cs appearance content stream @param x horizontal coordinate @param y vertical coordinate @param width line width @param hasStroke whether to draw the line's outline @param hasBackground whether to fill the shape with color @param ending whether the annotation is at the end of a line (true) or not (false)
622 Initializes a new TilingPaint instance with the specified parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern object representing the tiling pattern @param colorSpace PDColorSpace object for color space @param color fill color @param xform AffineTransform matrix for transformations
623 Retrieves an opaque BufferedImage representation of this image within the specified clipping area. @param region rectangle defining the clipping area @param subsampling factor to apply during decoding
624 Retrieves a BufferedImage representation of the input PDImage with optional color keying. @param pdImage PDF image object @param colorKey optional color key mask array
625 Pushes resources for the given content stream, prioritizing stream-specific resources. @param contentStream PDF content stream to fetch resources for @return previous resource stack state (PDResources object)
626 Calculates the affine transformation matrix to position the overlay page within the target PDF page. @param page the target PDF page @param overlayMediaBox the media box of the overlay page
627 Returns the rotated media box of a PDPage, handling 90 and 270 degree rotations. @param page PDPage instance to retrieve media box from
628 Checks if PDF document is marked. @return true if marked, false otherwise
629 Checks if user properties are used. @return true if UserProperties flag is set, false otherwise
630 Checks if the PDF document is suspect. @return true if marked as suspect, false otherwise
631 Determines whether to track mouse position based on 'IsMap' URI attribute.
632 Checks if popup annotation is open. @return true if open, false otherwise
633 Checks if FD (Fixed Decimal) formatting is enabled. @return true if fixed decimal format is active, false otherwise
634 Retrieves non-stroking overprint control from dictionary. @return boolean value indicating enablement of non-stroking overprint control
635 Retrieves an integer value from the embedded dictionary using the specified key. Falls back to -1 if not found or yields a non-integer result. @param embeddedDictionary COSName identifier for the embedded dictionary @param key primary dictionary identifier
636 Retrieves the denominator value from the COSDictionary. @return Denominator integer value
637 Wraps the OutputStream with a PredictorOutputStream if prediction is enabled. @param out OutputStream to wrap @param decodeParams COSDictionary containing image attributes
638 Retrieves the parent structure identifier of this PDPage. @return integer value of STRUCT_PARENTS key in dictionary, or -1 if not found
639 Retrieves bits per sample value from the dictionary. @return integer bits per sample or -1 if not found
640 Retrieves the Marker Context Identifier (MCID) from the marked content reference dictionary. @return MCID integer value or -1 if not found
641 Retrieves the next key from the parent tree. @return next key integer value or -1 if not found
642 Retrieves the Mark Content ID (MCID) from the PDMarkedContent properties dictionary. @return MCID value or -1 if not found
643 Retrieves line cap style from dictionary. @param none @return integer value representing line cap style or -1 if not found
644 Retrieves line join style from the dictionary. @return integer value of line join style or -1 if not found
645 Retrieves the parent structure identifier of this annotation. @return The parent structure ID, or -1 if not found
646 Retrieves the P value from the internal dictionary. @param none
647 Retrieves maximum allowed length from PDF form dictionary. @return Maximum length value or -1 if not found
648 Retrieves an integer value from the dictionary using the specified key. Falls back to the default value if not found or yields a non-integer result. @param name primary dictionary identifier @param defaultValue default integer value to return in case of failure
649 Checks if annotation is invisible.
650 Checks if an annotation is hidden. @return true if hidden, false otherwise
651 Checks if annotation is printed. @return true if printed, false otherwise
652 Checks if no zoom annotation flag is set. @return true if flag is set, false otherwise
653 Checks if rotation is not allowed. @return true if no rotation is enabled, false otherwise
654 Checks if annotation has no view flag set. @return true if flag is set, false otherwise
655 Checks if annotation is read-only. @return true if annotation cannot be modified, false otherwise
656 Checks if annotation is locked. @return true if locked, false otherwise
657 Checks if toggle no view flag is set. @return true if flag is set, false otherwise
658 Checks if locked contents are enabled. @return true if locked contents are enabled, false otherwise
659 Checks if this annotation is invisible. @return true if the annotation's invisible flag is set, false otherwise
660 Checks if annotation is hidden. @return true if hidden, false otherwise
661 Checks if annotation is printed. @return true if printed, false otherwise
662 Checks if no zoom flag is set. @return true if no zoom flag is set, false otherwise
663 Checks if annotation has no rotation flag set. @return true if flag is set, false otherwise
664 Checks if the annotation has no view. @return true if no view flag is set, false otherwise
665 Checks if annotation is read-only. @return true if annotation is read-only, false otherwise
666 Checks if the annotation is locked. @return true if locked, false otherwise
667 Checks if toggle no view flag is set. @return true if flag is set, false otherwise
668 Checks if annotation contents are locked. @return true if contents are locked, false otherwise
669 Checks if filter is required based on signature flags. @return true if filter is needed, false otherwise
670 Determines if a sub-filter is required based on the dictionary flags. @return true if a sub-filter is required, false otherwise
671 Determines if digest method is required based on the PDF signature flags. @return true if digest method is required, false otherwise
672 Checks whether V flag is set in the dictionary. @return true if V flag is present, false otherwise
673 Checks if reason is required in digital signature. @return true if reason is required, false otherwise
674 Checks if legal attestation is required. @return true if legal attestation is required, false otherwise
675 Checks if revision information is required. @return true if required, false otherwise
676 Checks if subject information is required.
677 Checks if issuer flag is set in certificate dictionary. @return true if issuer is required, false otherwise
678 Checks if OID flag is required. @return true if OID flag is set, false otherwise
679 Checks if subject DN is required.
680 Checks if key usage flag is required. @return true if FF bit is set in KEY_USAGE flags, false otherwise
681 Checks if URL flag is set in the certificate dictionary. @return true if URL is required, false otherwise
682 Checks if the outline item's text is italic.
683 Checks if the outline item has bold text formatting. @return true if the item is formatted in bold, false otherwise
684 Checks if signatures exist in the form. @return true if signatures are present, false otherwise
685 Checks if the form has append-only mode enabled. @return true if append-only, false otherwise
686 Checks if this button is a push button. @return true if it's a push button, false otherwise
687 Checks if the button is a radio button. @return true if the button is a radio button, false otherwise
688 Checks whether sorting is enabled. @return true if sorting is enabled, false otherwise
689 Checks if this choice field allows multi-selection. @return true if multi-select enabled, false otherwise
690 Checks if spell-checking should be disabled. @return true if FF flag is set with DO_NOT_SPELL_CHECK bit
691 Checks if changes should be committed upon selection. @return true if commit on selection change is enabled, false otherwise
692 Checks if the choice field is a combo box. @return true if it's a combo box, false otherwise
693 Checks if the combo box is in editable state. @return true if editable, false otherwise
694 Checks if the field is read-only. @return true if the field is read-only, false otherwise
695 Checks if the field is required.
696 Checks if the field has the "No Export" flag set. @return true if the flag is set, false otherwise
697 Checks if radio buttons operate in unison. @return true if radios are in unison, false otherwise
698 Checks if the text field allows multiline input. @return true if multiline input is enabled, false otherwise
699 Checks if the text field is password-protected. @return true if password-protected, false otherwise
700 Checks if file selection is enabled. @return true if file selection is allowed, false otherwise
701 Disables spell-checking in this text field. @return true if spell-checking is disabled, false otherwise
702 Checks if the text field should not scroll. @return true if FF flag is set with DO_NOT_SCROLL bit, false otherwise
703 Checks if the field allows combination of multiple values. @return true if the field supports combination, false otherwise
704 Checks if this text field supports rich text input. @return true if rich text input is enabled, false otherwise
705 Prepares the document for decryption using public key cryptography. @param encryption PDEncryption object representing the encryption settings @param documentIDArray COSArray containing recipient IDs and other metadata @param decryptionMaterial PublicKeyDecryptionMaterial instance providing private key and certificate information @throws IOException if an error occurs during preparation or decryption
706 Retrieves the owner encryption key. @return byte array containing the owner encryption key or null if not found
707 Retrieves the user encryption key from the dictionary. @return byte array representing the user key or null if not found
708 Calculates displacement vector based on character width. @param code Character code to calculate from @return Displacement vector (x, y)
709 Calculates the total width of a given string by encoding it and summing up individual character widths. @param text input string to be measured @return total width as a float; throws IOException if encoding fails
710 Retrieves a PDAbstractPattern instance by name. @param name COSName identifying the specific pattern @return PDAbstractPattern object or throws IOException on failure
711 Retrieves a PDShading object by name from the resources. @param name COSName identifier for the shading resource @return PDShading instance or null if not found
712 Retrieves and initializes the PDF shading object. @return PDShading instance or null if not found
713 Retrieves the number of bits per color component from the PDF document. @return The number of bits per color component (default -1) if not found or unknown
714 Retrieves the number of bits per color component from the PDF document. If not found or unknown, returns a default value of -1. @return The number of bits per color component (default -1)
715 Retrieves the number of bits per coordinate. @return The number of bits used to represent each coordinate value
716 Retrieves the number of bits per coordinate. @return The number of bits used to represent each coordinate value
717 Checks if this outline node has open child nodes. @return true if any children are open, false otherwise
718 Creates a PDField instance based on the provided COSDictionary and AcroForm. @param form containing AcroForm @param field underlying COSDictionary @param parent parent PDNonTerminalField (optional) @return created PDField instance or null if not found or erroneous
719 Retrieves a PDXObject instance from the resources by name. @param name COSName identifying the specific object within the XOBJECT type @return PDXObject instance or null if not found
720 Initializes new instance of GouraudShadingContext with specified parameters. @param shading PDShading object @param colorModel ColorModel object @param xform AffineTransform object @param matrix Matrix object
721 Creates a COSInputStream instance with default decoding options.
722 Parses the object stream object with the given ID. @param objstmObjNr the object stream number @param key the COSObjectKey to parse @return the parsed COSBase object, or null if not found @throws IOException if parsing fails and lenient mode is disabled
723 Retrieves the page contents as an InputStream. @return InputStream object containing the page data or an empty stream if not found
724 Initializes a PDCIDFontType2 instance from a COS dictionary and a PDType0Font parent. @param fontDictionary COS dictionary containing font metadata @param parent PDType0Font parent font @throws IOException if an error occurs while reading or parsing the font data
725 Retrieves the embedded CID font. @return PDCIDFont object representing the embedded font
726 Recursively collects COSBase objects from the provided dictionary, considering their update states and relationships. @param dictionary COSDictionary to process
727 Retrieves the collection of COSBase objects. @return Set of COSBase objects or an empty set if not initialized
728 Adds a COSBase object to the collection, potentially wrapping it in a COSObject. @param object COSBase object to add
729 Adds a COSBase object to the collection at a specified index. @param i the index where the object will be added @param object the COSBase object to add
730 Sets an element at the specified index in the collection. If the provided object is a dictionary or array and not direct, it's wrapped in a COSObject instance; otherwise, the object itself is used. @param index position to set the element @param object COSBase object to be managed
731 Stores an item in the dictionary with the given key and value. If the value is null, removes the corresponding item instead. @param key unique identifier of the item to store @param value data to be stored, or null to remove existing item
732 Adds all elements from the specified collection to this COSArray. @param objectsList Collection containing COSBase objects to be added
733 Adds all elements from the specified collection to this COSArray at index i. @param i index where elements will be added @param objectList collection of COSBase objects to add
734 Updates document state with child objects. @param children collection of COSBase objects to update
735 Retrieves the role map from the underlying COSDictionary. @return A Map of String/Object pairs containing the role mapping or an empty map if not found
736 Adds a COSBase object to the pool, handling indirect objects and ensuring generation 0 objects are appended to object streams. @param key COSObjectKey instance to associate with the object @param base COSBase object to be added to the pool @return the added or existing COSBase object
737 Configures the PDF document's encryption based on the given protection policy. @param policy ProtectionPolicy object defining encryption settings @throws IOException if security handler instantiation fails or other errors occur
738 Retrieves the glyph name from a given Unicode code point. @param code int code point value
739 Converts an internal code point to a glyph ID. @param code internal code point value @return Glyph ID associated with the code point or -1 if not found
740 Retrieves Mac subtype from embedded parameters dictionary. @return Mac subtype string or null if not found
741 Retrieves Mac creator string from embedded file parameters. @return creator string or null if not found
742 Retrieves Mac Resource Fork value from embedded dictionary. @return string value or null if not found
743 Retrieves the best CIDFontMapping for a given base font and character set. @param baseFont PostScript name of the base font @param fontDescriptor PDFontDescriptor object containing font information @param cidSystemInfo PDCIDSystemInfo object representing the character set @return CIDFontMapping object or null if not found
744 Validates the owner password based on the specified encryption revision. @param password owner password string
745 Decrypts a given PDF object using the provided encryption parameters. @param obj the object to decrypt @param objNum unique document identifier @param genNum generation number @return decrypted object or original object if decryption failed
746 Writes page content to the output stream for each defined text region. Processed regions are retrieved from storage and written in sorted order.
747 Retrieves a date string from the dictionary and converts it to a Calendar object. @param key unique dictionary identifier
748 Returns a date string from the dictionary as a Calendar object. If parsing fails, returns the provided default value instead. @param key unique dictionary identifier @param defaultValue fallback Calendar object to return if parsing fails @return Calendar object or the default value if parsing is unsuccessful
749 Retrieves document creation date. @return Calendar object if parsing is successful, otherwise null
750 Retrieves the document modification date. @return Calendar object representing the last modification date
751 Retrieves the creation date of the annotation from the underlying COSDictionary. @return Calendar object representing the creation date or null if not found
752 Retrieves creation date of annotation. @return Calendar object representing creation date or null if not found
753 Retrieves and returns the date of the digital signature. @return Calendar object representing the sign date
754 Writes an Operator token to the PDF output stream. @param op the Operator object to be written
755 Writes a collection of compressible COS objects to the specified stream. @param stream OutputStream for writing data
756 Writes a COSArray object to the output stream. @param output OutputStream for writing data @param cosArray COSArray object containing elements to be written
757 Writes a COSDictionary object to the specified OutputStream. @param output OutputStream for writing data @param cosDictionary COSDictionary object to serialize
758 Writes text content stream with positioning information to the PDF document. @param textWithPositioningArray array of Float and String values representing text positions
759 Writes text content stream with positioning information to the PDF document. @param textWithPositioningArray array of Float and String values representing text positions
760 Writes text content stream with positioning information to the PDF document. @param textWithPositioningArray array of Float and String values representing text positions
761 Writes text content stream with positioning information to the PDF document. @param textWithPositioningArray array of Float and String values representing text positions
762 Displays user-provided text in the PDF document. @param text string value to be shown
763 Displays user-provided text in the PDF document. @param text string value to be shown
764 Displays user-provided text in the PDF document. @param text string value to be shown
765 Displays user-provided text in the PDF document. @param text string value to be shown
766 Initializes a PDTransparencyGroup instance from a PDDocument. @param document PDDocument object containing PDF content
767 Initializes a PDAppearanceStream instance with a given PDDocument. @param document associated PDDocument object
768 Creates a PDImageXObject from the provided image, encoding it into JPEG format. @param document PDDocument object @param image BufferedImage to be encoded @param quality compression quality (0-100) @param dpi dots per inch for metadata @return PDImageXObject object or null on failure
769 Validates an input string as a valid value for this button, checking against known options. @param value the input string to validate
770 Loads and parses an FDF document from a file. @param file File object containing the FDF document @return Parsed FDFDocument object or throws IOException if errors occur during parsing
771 Loads and parses an FDF document from the specified input stream. @param input InputStream containing FDF document to parse @return loaded FDFDocument object or throws IOException on error
772 Constructs a PDFParser instance with default decryption parameters. @param source PDF document to be parsed
773 Outputs the curl template by moving to initial point and drawing Bezier curves between points. @param template array of Point2D.Double objects representing the template @param x horizontal offset for all points in the template @param y vertical offset for all points in the template
774 Generates an arc segment in a PDF document based on specified parameters. @param startAng starting angle of the arc @param endAng ending angle of the arc @param cx x-coordinate of the center point of the arc @param cy y-coordinate of the center point of the arc @param rx radius of the arc in the x-direction @param ry radius of the arc in the y-direction @param out list to store the generated points (optional) @param addMoveTo flag to indicate whether to add a move-to operation at the start of the arc
775 Initializes a new TilingPaint instance with the specified parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern object representing the tiling pattern @param xform AffineTransform matrix for transformations
776 Retrieves an opaque BufferedImage representation of this image.
777 Performs Lempel-Ziv-Welch (LZW) decoding on the given encoded data. @param encoded InputStream containing the compressed data @param decoded OutputStream to write the decompressed data @param parameters COSDictionary containing decoding configuration @param index current dictionary index @return DecodeResult object with decoding parameters
778 Appends a child element to the PDF structure, using its MCID. @param markedContent PDMarkedContent object containing the child element
779 Fetches the Unicode CMap for a Type 0 font, if it exists. This method is called when the font is composite and uses a predefined CMap (excluding Identity-H/V) or whose descendant CIDFont uses the Adobe-GB1, Adobe-CNS1, Adobe-Japan1, or Adobe-Korea1 character collection.
780 Checks if the text field allows combination of multiple values. @return true if the field supports combination, false otherwise
781 Prepares the PDF document for decryption by setting up necessary parameters and computing the encrypted key. @param encryption PDEncryption object containing file encryption key @param documentIDArray COSArray representing the document ID @param decryptionMaterial DecryptionMaterial object containing password and other relevant information @throws IOException if decryption material is not compatible with the document
782 Retrieves the width of a space character in the current PDFont. @return The width of the space character; defaults to 250 if not found
783 Checks if font has fixed pitch. @return true if font has fixed pitch, false otherwise
784 Checks if the font is serif. @return true if serif, false otherwise
785 Checks if the font descriptor is symbolic. @return true if symbolic, false otherwise
786 Checks if script font flag is set. @return true if script font flag is enabled, false otherwise
787 Checks if the font descriptor represents a non-symbolic font. @return true if non-symbolic, false otherwise
788 Checks if font style is italic. @return true if italic, false otherwise
789 Checks if the font is set to all caps.
790 Checks if font has small caps property. @return true if small caps flag bit is set, false otherwise
791 Checks if force bold font flag is set. @return true if flag is set, false otherwise
792 Retrieves a PDAbstractPattern instance associated with the specified PDColor. @param color Color object @return Pattern object or throws IOException on failure to retrieve
793 Creates a PDField instance from a COSDictionary. @param form containing AcroForm @param field underlying COSDictionary @param parent parent PDNonTerminalField (optional) @return created PDField instance or null if not found or erroneous
794 Converts COSStream data to a text string. @return Text representation of the stream's contents, or an empty string if conversion fails
795 Creates a COSInputStream instance with default decoding options.
796 Collects shading patches from a COSStream based on the provided parameters and transformation matrices. @param xform AffineTransform object to apply to points @param matrix 2D transformation matrix to apply to points @param controlPoints number of points in each patch @return List of Patch objects representing the collected patch data, or an empty list if not found
797 Creates a descendant font based on the provided COS dictionary and PDType0Font parent. @param dictionary COS dictionary containing font metadata @param parent PDType0Font parent font @return PDCIDFont instance or throws IOException if font type is invalid
798 Returns an iterator over the collection of COSBase objects. @return Iterator object to traverse the collection
799 Wraps the given object in a COSObject and adds it to the collection. @param object COSObjectable object to be added
800 Resizes the COSArray to accommodate the given size by adding and updating elements as necessary. @param size target capacity @param object COSBase object to add (may be wrapped in a COSObject)
801 Sets a new float array by clearing the existing collection and adding each float value as a COSFloat object. @param value the float values to be represented in the array
802 Returns the cross-reference stream as a COSStream object, including index entry and column widths. @throws IOException if an error occurs during stream creation or writing
803 Initializes COSArrayList instance with given object, item, and dictionary. @param actualObject object to manage in the list @param item initial element to add to the array @param dictionary underlying COSDictionary structure @param dictionaryKey key referencing this COSArrayList instance in the dictionary
804 Converts a list of objects to a COSArray. @param cosObjectableList the list of objects to convert @return the resulting COSArray or null if input is null
805 Initializes an empty numerical range with default bounds [0, 1].
806 Retrieves the encoding values for this Type 0 PDF function. @return COSArray object containing encoded values or null if not found
807 Initializes a PDFunctionType2 object from a given COSBase function. @param function the input PDF function
808 Initializes an empty FDFOptionElement with default options.
809 Initializes a new instance of the PDFontSetting class with default settings.
810 Retrieves the white point coordinates as a PDTristimulus object. If not found in the dictionary, returns a default tristimulus value (1, 1, 1).
811 Retrieves the black point tristimulus values from the dictionary. @return a PDTristimulus object representing the black point values
812 Converts color components and pattern information into a COSArray. @return A COSArray containing the color's components and pattern name
813 Initializes DeviceN color space with default alternate color spaces.
814 Initializes a PDGamma object with default RGB color values (0, 0, 0).
815 Retrieves the alternative color space from the PDF document. If no alternate color space is found, creates a default one based on the number of components in the current graphics context. @return PDColorSpace object representing the alternative color space
816 Initializes a new PDIndexed instance with an empty color space and device RGB.
817 Returns the default component range array.
818 Initializes a new PDPattern instance with the given PDResources. @param resources PDResources object containing color pattern settings
819 Initializes an empty PDSeparation object with a COSArray containing default color separation values.
820 Initializes an empty PDTristimulus object with default tristimulus values (X, Y, Z = 0).
821 Initializes PDTristimulus with tristimulus values from an array. @param array array of 1-3 float values (X, Y, Z) to initialize the color space
822 Sets the transformation matrix of this form XObject. @param transform AffineTransform object to be set
823 Creates a PDImageXObject from a byte array. @param document the parent PDDocument @param byteArray input stream containing the JPEG image data @return PDImageXObject object or throws IOException if an I/O error occurs
824 Converts matrix transformation to a COSArray object. @return 8-element COSArray containing the matrix's values
825 Sets an element at the specified index in the collection. Wraps the provided COSBase object in a COSObject instance if necessary. @param index position to set the element @param object COSBase object to be managed
826 Sets an integer element at the specified index. @param index position to set the element @param value integer value within the range [LOW, HIGH]
827 Sets a PDF name at the specified index in the collection. @param index position to set the element @param name PDF name string
828 Sets a string element at the specified index in the collection. @param index position to set the element @param string input string to be encoded as COSString object
829 Sets the minimum value of this PDRange instance. @param min the minimum value to be represented
830 Sets the maximum value of the range. @param max the new maximum value
831 Sets the x-coordinate of the lower-left corner. @param value float value to be assigned
832 Sets the lower left Y-coordinate of the rectangle. @param value the float value to be assigned
833 Sets the x-coordinate of the upper-right corner. @param value float value to represent the x-coordinate
834 Sets the upper-right y-coordinate of the rectangle. @param value the new y-value (importance: 0.7)
835 Sets a color value at the specified index in the collection. @param index position to set the element @param colour PDGamma object representing the color to be managed
836 Sets an FDF option with the given string value. @param opt the input string to be encoded as an FDF option
837 Sets the default appearance string. @param da the input string to be stored in the FDF option
838 Sets the font size to the specified value. @param size the desired font size
839 Sets colorant names using a list of strings. @param names collection of PDF name strings
840 Sets DeviceN color space attributes. @param attributes PDDeviceNAttributes object to be set
841 Sets the alternate color space for DeviceN color management. @param cs PDColorSpace object to be set
842 Sets the red component of the color value. @param r the red component (0.0 - 1.0)
843 Sets gamma correction value. @param g float value representing gamma correction factor
844 Sets the blue gamma value. @param b blue component of the color
845 Sets a numerical range for the specified component with n elements. @param range the PDRange object containing the minimum and maximum values @param n the number of elements in the range array
846 Sets the base color space with a provided PDColorSpace object. @param base PDColorSpace object to be set as the base
847 Sets the colorant name. @param name string identifier for the colorant
848 Sets the alternate color space for this PDSeparation. @param colorSpace PDColorSpace object to be set
849 Sets the X tristimulus value. @param x float value to be represented
850 Sets Y tristimulus value. @param y Y coordinate (float)
851 Sets the Z tristimulus value. @param z float value to be represented
852 Sets an item in the dictionary with the given key and optional value. If value is null, removes the corresponding item instead. @param key unique identifier of the item to store @param value data to be stored, or null to remove existing item
853 Sets a boolean item in the dictionary with the given key and value. @param key unique identifier of the item to store @param value standard boolean value to be represented as COSBoolean
854 Sets a boolean item in the dictionary with the given key and value. @param key unique identifier of the item to store @param value standard boolean value to be represented as COSBoolean
855 Wraps the item setting logic with string-based keys. @param key unique identifier of the item to store @param value data to be stored
856 Sets a string item in the dictionary with the given key and value. If value is null, removes the corresponding item instead. @param key unique identifier of the item to store @param value data to be stored, or null to remove existing item
857 Sets a string item in the dictionary with the given key and value. @param key unique identifier of the item to store @param value input string to be encoded
858 Sets an integer item in the dictionary with the given key and value. @param key unique identifier of the item to store @param value long integer value within the range [LOW, HIGH]
859 Sets a long integer value in the dictionary. @param key unique identifier for the item @param value long integer value to store
860 Sets a floating-point value in the dictionary with the given key. @param key unique identifier of the item to store @param value float value to be stored
861 Creates a COSStream instance from the provided dictionary and stream parameters. @param dictionary COSDictionary object containing document data @param startPosition starting position of the stream in bytes @param streamLength length of the stream in bytes @return initialized COSStream object or throws IOException on failure
862 Sets the encryption dictionary in the PDF document's trailer. @param encDictionary encryption settings to be stored
863 Sets the document ID within the trailer dictionary. @param id unique identifier of the PDF document
864 Wraps the existing page's content in a save/restore pair (q/Q) to have a controlled environment to add additional content.
865 Updates parent entry for each sub-entry in the given array. @param kArray array of COSBase objects to update @param newParent new parent dictionary to set @param newStructureType optional structure type to set (null if not applicable)
866 Updates page references in the given PDF document by mapping source objects to their corresponding clones. @param cloner utility for cloning PDF objects @param parentTreeEntry dictionary representing the current document structure @param objMapping map of source objects to their cloned counterparts
867 Merges specified PDF document into the given output dictionary, excluding certain keys. @param src source PDF document COSDictionary @param dst output PDF document COSDictionary @param cloner utility for cloning COSBase objects @param exclude set of keys to be excluded from the merge process
868 Searches for the PDF trailer using a brute-force approach. @param trailer COSDictionary representing the trailer to search for @return true if the trailer is found, false otherwise
869 Searches for trailer items in the PDF document. @param trailer COSDictionary representing the trailer @return true if a root object was found, false otherwise
870 Performs the initial parsing of a PDF document. @throws IOException if root object specification is missing in trailer
871 Parses and returns the next token from the content stream. If the token is an operator, it will be returned as a COSOperator instance. If the token is a dictionary, it will be parsed recursively and its contents will be added to the current parser's state. If the token is an array or string, it will be read and returned as a COSBase instance. If the token is a name, it will be returned as a COSName instance. If the token is 'null', 'true', or 'false', it will be returned as a COSNull, COSBoolean.TRUE, or COSBoolean.FALSE instance respectively. If the token is a number, it will be parsed and returned as a COSNumber instance. If the token is an ID operator followed by inline image data, it will be read and stored in the current parser's state. @throws IOException if an I/O error occurs while reading from the content stream
872 Writes the PDF document to a stream, handling incremental updates and encryption. @param doc the PDDocument instance to be written @param signInterface the SignatureInterface instance for signing the document @throws IOException if an I/O error occurs during writing
873 Initializes a PDDocument instance with a given stream cache creation function. @param streamCacheCreateFunction custom function for creating resource caches
874 Retrieves the PDF document's metadata and returns a PDDocumentInformation object. @return PDDocumentInformation object containing document metadata
875 Sets document information from a PDDocumentInformation object. @param info PDDocumentInformation containing metadata to be stored
876 Initializes a PDDocumentCatalog instance for the given PDF document. @param doc the underlying PDF document
877 Retrieves the list of threads from the document catalog. @return List<PDThread> collection of thread objects
878 Sets the list of PDF threads in the document catalog. @param threads collection of PDThread objects to store
879 Retrieves the additional actions dictionary from the PDF catalog. @return PDDocumentCatalogAdditionalActions object or null if not found
880 Adds a PDF output intent to the document's catalog. @param outputIntent PDOutputIntent object containing output intent details
881 Sets the output intents for the PDF document. @param outputIntents list of PDOutputIntent objects to set
882 Initializes a PDDocumentNameDictionary instance from a PDDocumentCatalog. @param cat the document catalog to derive the name dictionary from
883 Sets the crop box of this page to the specified rectangle. @param cropBox rectangle defining the visible area, or null to remove existing crop box
884 Sets the page's content streams. @param contents collection of PDStream objects to initialize the CONTENTS array with
885 Sets thread beads for the PDF page. @param beads list of PDThreadBead objects to initialize the B dictionary with
886 Retrieves the additional interactive actions for this PDF page. @return PDPageAdditionalActions object or creates a new one if not found
887 Sets the list of annotations on this PDF page. @param annotations collection of PDAnnotation objects to be stored
888 Configures the list of viewports for this PDPage. @param viewports collection of viewport dictionaries to set
889 Initializes an empty PDPageTree instance with a structured page tree.
890 Retrieves the child dictionaries (kids) of a given node in the page tree. @param node the parent dictionary @return a list of child COSDictionary objects, or an empty list if malformed PDF
891 Adds an element to the collection, potentially modifying the parent dictionary and converting single items to arrays. @param o the object to be added
892 Clears all COSBase objects from this collection and updates document state.
893 Sets the value of an item at a specified index with respect to filtering. @param index position in the list where the new value will be stored @param element the new value to be assigned (String or COSObjectable)
894 Adds an element at a specified index in the collection. @param index position where the element will be added @param element object to add; if filtered list, throws UnsupportedOperationException
895 Stores a key-value pair in the dictionary and underlying map. @param key unique identifier @param value associated data or COSName instance
896 Retrieves a dictionary representation of the page labels.
897 Initializes an instance of PDComplexFileSpecification with default file specification settings.
898 Initializes a PDComplexFileSpecification instance from a COSDictionary. @param dict COSDictionary object to initialize from, or null to create a new one
899 Sets range values for this PDFunction. @param rangeValues array of range values
900 Sets the domain values for this PDFunction. @param domainValues array of domain values
901 Sets encoding values and updates dictionary with new data. @param encodeValues array of encoding values
902 Sets the decode values and stores them in the dictionary with key "DECODE". @param decodeValues array of decode values to be stored
903 Sets an attribute with the given name and value. @param attrName unique attribute identifier @param attrValue data to be stored
904 Removes a specified attribute from the current PDF document. @param attributeObject the attribute to be removed
905 Updates the attribute list with a new revision number when an attribute changes. @param attributeObject changed attribute object
906 Adds a class name to the PDF document's structure. @param className string value of the class name
907 Removes a specified class name from the PDF document's structure. @param className unique identifier of the class to remove
908 Adds a child element to the existing list of children associated with this structure node. @param object child element to append
909 Inserts a child node before an existing reference node in the structure. @param newKid new child node to insert @param refKid reference node to insert before
910 Removes a specified child COSBase object from the collection of kids. @param object the element to be removed @return true if removal was successful, false otherwise
911 Sets the K attribute in the dictionary. @param k COSBase object to be stored as the K item
912 Populates the CLASS_MAP attribute of the PDF structure tree root with a map of class mappings. @param classMap Map of class names to corresponding objects or lists
913 Sets user properties for the document. @param userProperties list of PDUserProperty objects to be set
914 Sets user-defined property value and notifies of potential change. @param value new property value
915 Retrieves the guideline color from the dictionary. @return PDColor object representing the guideline color
916 Retrieves the line dash pattern from the dictionary or initializes it with a default value. @return PDLineDashPattern object
917 Sets the line dash pattern for guidelines in a PDF document. @param dashArray COSArray object containing dash pattern data
918 Sets the cryptographic filter method in the dictionary. @param cfm encryption method to be stored
919 Sets the PDF filter using the given string. @param filter filter string to be stored
920 Sets the owner encryption key. @param o byte array containing the encryption key
921 Sets user encryption key. @param u byte array representing user key data
922 Sets the owner encryption key. @param oe byte array containing the encryption key
923 Sets the user encryption key. @param ue byte array containing the encryption key
924 Sets the document's recipient list. @param recipients comma-separated byte arrays of recipient names
925 Sets the cryptographic filter dictionary with the given name and value. @param cryptFilterName unique identifier of the filter @param cryptFilterDictionary PDCryptFilterDictionary object to be stored
926 Sets the stream filter name in the encryption settings. @param streamFilterName unique identifier of the stream filter
927 Sets the filter name as a string. @param stringFilterName COSName object for the filter name
928 Sets encryption permissions. @param perms byte array containing permission data
929 Removes V4.5 filters from the document's encryption settings.
930 Initializes an instance of FDFAnnotation with default properties.
931 Sets the annotation's color from a given Color object. @param c Color to set (null for no change)
932 Sets rich contents of an annotation. @param rc rich content string to be associated
933 Sets the interior color of the annotation circle. @param color Color object representing the desired color
934 Sets the callout style of this free text annotation. @param callout array of float values representing the callout style
935 Sets the ink list using the provided array of float arrays. @param inklist list of ink data points
936 Sets the coordinates of the line annotation. @param line array of float values representing the line's coordinates
937 Sets the interior color of the line annotation. @param color Color object representing the new color
938 Sets the horizontal offset for the line annotation's caption. @param offset float value representing the offset
939 Sets the vertical caption offset for a line annotation. @param offset float value representing the caption's vertical position
940 Sets polygon vertex coordinates. @param vertices array of float values representing vertex positions
941 Sets the interior color of this polygon annotation. @param color a Color object to set as the interior color
942 Sets polyline annotation vertex coordinates. @param vertices array of float values representing vertex coordinates
943 Sets the interior color of the polyline annotation. @param color Color object representing the desired color
944 Sets the interior color of this annotation square. @param color Color object representing the desired color
945 Sets text markup annotation coordinates. @param coords array of floating-point values representing the annotation's quadpoints
946 Sets the document ID of this FDF dictionary. @param id unique identifier as a COSArray
947 Sets form fields in the FDF dictionary. @param fields list of FDFField objects to initialize the FIELDS array with
948 Sets the list of FDF pages. @param pages collection of FDF page objects
949 Sets FDF annotations from a list of annotation objects. @param annots collection of FDFAnnotation objects to store
950 Sets FDF differences stream. @param diff COSStream containing document differences
951 Sets a list of embedded FDF specifications in the dictionary. @param embedded collection of PDFileSpecifications to embed
952 Sets the list of child fields. @param kids collection of FDFField objects to be stored
953 Sets the value of a field using a specified object. @param value object representing the value to be set
954 Sets the field's value. @param value new value to be assigned
955 Sets the field flags for this FDFField instance. @param ff optional integer flag value
956 Sets the setFieldFlags attribute of this FDFField object. @param ff integer value for setFieldFlags
957 Sets the clear flags for a form field. @param ff integer value representing the clear flags
958 Sets the flags for a widget field. @param f integer value representing field flags
959 Sets widget field flags using the given integer value. @param ff Integer representation of field flags
960 Sets the clear widget field flags. @param ff integer flags to set
961 Sets rich text value in the dictionary. @param rv Rich text data to be stored
962 Sets rich text content from COSStream. @param rv rich text data to be stored
963 Sets the 'before' JavaScript action in the FDF context. @param before script to be executed before form processing
964 Sets the 'after' JavaScript action in the FDF context. @param after script to be executed after a form event
965 Stores JavaScript actions and associated metadata from the provided map into the FDF document's dictionary. @param map collection of JavaScript actions to be stored
966 Sets page templates. @param templates list of FDFTemplates to initialize the TEMPLATES dictionary with
967 Sets form fields within the FDF template. @param fields collection of FDFFields to initialize the template with
968 Builds a width array for the given CID-to-GID mapping, scaling font metrics by the units per em value and adding it to the PDF document. @param cidToGid TreeMap of CID-to-GID mappings
969 Initializes the PDFont object instance with default font properties.
970 Initializes a new instance of the PDFontDescriptor class. Sets the dictionary type to FONT_DESC.
971 Sets the PDF font name. @param fontName unique font identifier string
972 Sets the font family for a PDF font descriptor. @param fontFamily unique identifier of the font family to set
973 Sets the font stretch attribute in the PDF dictionary. @param fontStretch string representing font stretch value
974 Sets the font bounding box using the provided rectangle. @param rect PDRectangle object containing the bounding box dimensions
975 Sets the character set for the font descriptor. @param charSet unique identifier of the character set to set
976 Constructs a DictionaryEncoding instance with the given base encoding and differences. @param baseEncoding COSName identifier of the base encoding @param differences COSArray containing font encoding differences
977 Sets gamma correction factor. @param value gamma correction value
978 Retrieves the gamma value for this color. @return a PDGamma object representing the gamma values
979 Sets the gamma value for this PDCalRGB object. @param gamma PDGamma object containing gamma values or null to clear
980 Stores a 3x3 transformation matrix in the dictionary. @param matrix the transformation matrix to store
981 Retrieves a map of colorants from the given resources, creating a new dictionary if necessary. @param resources associated PDF resources @return Map of colorants as PDSeparation objects
982 Sets the colorants for a DeviceN color space. @param colorants Map of color spaces (key: name, value: PDColorSpace)
983 Initializes an instance of PDTransparencyGroupAttributes with default transparency settings.
984 Sets image filters using a list of filter names. @param filters list of PDF name strings representing the filters
985 Initializes a new instance of the PDOptionalContentMembershipDictionary class with default values.
986 Sets the visibility policy in the dictionary. @param visibilityPolicy COSName representing the new visibility policy
987 Sets the pattern's transformation matrix. @param transform AffineTransform object to be represented
988 Sets the bounding box of this tiling pattern. @param bbox PDRectangle object or null to clear existing box
989 Sets the shading background to the specified array. @param newBackground COSArray representing the new background
990 Sets the bounding box of this shading to the specified PDRectangle. If null is passed, removes the existing BBOX item from the dictionary. @param newBBox new bounding box properties
991 Sets the color space for this PDShading object. @param colorSpace new color space to be set
992 Sets a shading function for the managed PDF shading. @param newFunctions array of shading functions to apply
993 Sets the transformation matrix from an AffineTransform object. @param transform AffineTransform object containing the matrix values
994 Sets the shading domain to the specified array. @param newDomain COSArray representing the new domain
995 Sets the extension values of a Type 2 shading. @param newExtend array containing extension coordinates
996 Sets the shading domain to a new array. @param newDomain COSArray representing the updated domain
997 Sets shading coordinates to the given array. @param newCoords array of coordinate values
998 Sets decode values and updates dictionary item. @param decodeValues array of decode values to be set
999 Initializes a new instance of the PDExtendedGraphicsState class. @param none
1000 Sets the blend mode to be used when rendering graphics. @param bm BlendMode object containing the new blending properties
1001 Sets or removes a float item from the dictionary. @param key unique identifier of the item to store or remove @param value floating-point value to be stored, or null to remove existing item
1002 Sets the transfer mode in the extended graphics state. @param transfer COSBase object representing the transfer mode
1003 Sets the transfer function for graphics rendering. @param transfer2 COSBase object representing the transfer function
1004 Sets the sequence of subsequent actions in the PDF document. @param next list of PDActions to follow this action
1005 Sets the 'T' item of the action dictionary. @param t COSBase value to be stored in the 'T' item
1006 Sets the 'H' flag to control hiding behavior. @param h true to enable hiding, false otherwise
1007 Sets the form fields from the given COSArray. @param array collection of form field values
1008 Sets the sound content associated with this PDF action. @param sound audio data to be played back
1009 Configures form fields within the PDF document. @param array COSArray containing field specifications
1010 Sets the D parameter of the PDF thread action. @param d data to be stored in the D parameter
1011 Sets the B parameter of this PDF thread action. @param b new value for the B parameter
1012 Sets the target directory's relationship (P or C). @param relationship COSName representing the relationship ("P" or "C")
1013 Initializes a new instance of the PDAnnotation class with default annotation type.
1014 Initializes a PDAnnotation instance from a COSDictionary, validating its annotation type. @param dict the underlying dictionary representation of the annotation
1015 Sets the annotation's rectangular bounds. @param rectangle PDRectangle object defining the bounds
1016 Sets the annotation's border by storing it in the underlying COSDictionary. @param borderArray array of border attributes
1017 Sets rectangle margin differences for the caret annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1018 Sets the differences between the annotation's rectangle and its parent container. @param differenceLeft left margin @param differenceTop top margin @param differenceRight right margin @param differenceBottom bottom margin
1019 Sets the callout settings for the annotation. @param callout array of float values representing the callout settings
1020 Sets the list of ink annotations. @param inkList 2D array of ink paths
1021 Sets line coordinates. @param l array of x and y coordinates
1022 Sets the horizontal offset of the line annotation's caption. @param offset float value representing the horizontal offset
1023 Sets the vertical offset of the line annotation's caption. @param offset the vertical displacement value
1024 Sets the quad points of a link annotation. @param quadPoints array of 4 floats representing x and y coordinates
1025 Sets rich contents of the annotation. @param rc input string to be encoded and stored as RC item
1026 Sets polygon vertices from an array of float values. @param points array of vertex coordinates (x, y) to set
1027 Sets polyline vertices from an array of float values. @param points array of vertex coordinates
1028 Sets the parent markup annotation of this popup. @param annot PDAnnotationMarkup object to be set as parent
1029 Sets rectangle differences for the annotation square circle. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1030 Sets the quad points for text markup annotation. @param quadPoints array of float values defining the marked area
1031 Initializes an instance of PDAppearanceDictionary with a default appearance dictionary containing an 'N' entry.
1032 Sets the dash style of the border. @param dashArray array of dash lengths for customizing the border pattern
1033 Retrieves the line dash style pattern. @return PDLineDashPattern object representing the dash style
1034 Sets the operating system property in the digital signature properties dictionary. If the value is null, removes the corresponding item instead. @param os the name of the operating system to set
1035 Initializes a new instance of the PDSeedValue class with default seed value attributes.
1036 Sets the digital signature filter. @param filter COSName representing the filter to be set
1037 Sets the sub-filter value in the dictionary. @param subfilter list of PDF name strings for the sub-filter
1038 Sets the digital signature digest method. @param digestMethod list of allowed digest names
1039 Sets digital signature reasons from a list of string values. @param reasons collection of string objects representing the reasons
1040 Sets the MDP configuration for this seed value. @param mdp MDPCONFIG object to be stored
1041 Sets the timestamp attribute for digital signature seed value. @param timestamp TimeStamp object to be set
1042 Sets the legal attestation for a digital signature. @param legalAttestation collection of string objects representing the legal attestation
1043 Initializes a new instance of the PDSeedValueCertificate class. Sets default certificate type and makes it direct.
1044 Sets the subject attribute of the certificate with the given list of byte arrays. @param subjects list of byte arrays representing the subject
1045 Adds a subject byte array to the certificate's subject collection. @param subject subject data as a byte array
1046 Sets the SubjectDN attribute of the digital signature certificate. @param subjectDN list of maps containing key-value pairs for each DN component
1047 Sets the key usage extensions in the digital signature certificate. @param keyUsageExtensions list of string values for key usage
1048 Validates and adds key usage extension to the certificate. @param keyUsageExtension string containing allowed characters '0', '1', or 'X'
1049 Sets the issuer attribute of a digital signature certificate. @param issuers list of byte arrays representing issuer names
1050 Adds an issuer to the certificate's ISSUER attribute. @param issuer byte array representing the issuer information
1051 Sets OID attribute in the certificate dictionary. @param oidByteStrings list of byte arrays representing OID values
1052 Adds an OID to the certificate's OID collection. @param oid byte array representing the OID to add
1053 Initializes a new instance of the PDSignature class with default signature type.
1054 Sets the signature type in the COSDictionary. @param type unique identifier of the signature type
1055 Sets the digital signature filter. @param filter COSName representing the filter to be applied
1056 Sets the sub-filter for this digital signature. @param subfilter COSName representing the sub-filter
1057 Sets the byte range of the digital signature. @param range array of 4 integers representing the byte range
1058 Sets digital signature contents from a byte array. @param bytes input byte data
1059 Sets the text color of an outline item. @param textColor the desired color
1060 Initializes a new PDAcroForm instance associated with the given PDF document. @param doc the parent PDDocument instance
1061 Initializes form fields within the PDF document. @param fields list of PDField objects to populate the form
1062 Sets the calculation order of form fields. @param fields list of PDFields to be ordered
1063 Initializes a PDButton instance from an AcroForm. @param acroForm PDAcroForm object to initialize the button from
1064 Sets export values for the button. @param values list of string values to be exported
1065 Initializes a PDChoice instance with default properties. Sets the field type to "choice" and default value to an empty string.
1066 Sets options for choice field. @param displayValues list of string values to be displayed
1067 Sets the options for choice fields based on export and display values. @param exportValues list of export values @param displayValues list of corresponding display values
1068 Sets the selected options index for a choice field. @param values list of indices to be set, or null to clear
1069 Sets the child fields of this non-terminal field. @param children list of child PDField objects
1070 Sets the value of this field and its child fields. @param object COSBase object representing the new value
1071 Sets the default field value. @param value COSBase object representing the default value
1072 Initializes a PDSignatureField instance within the given PDAcroForm, setting up the signature field and its appearance.
1073 Initializes a PDTextField instance from an AcroForm. @param acroForm PDAcroForm object to initialize the text field
1074 Sets the default style string for text fields. @param defaultStyleString the input string to be set, or null to clear
1075 Sets the rich text value of a variable text field in a PDF document. @param richTextValue new rich text content or null to clear existing value
1076 Sets the origin of the coordinate system. @param coordSystemOrigin float array representing the new origin coordinates
1077 Initializes a new instance of the PDThread class. Sets the thread dictionary's type to 'thread' and initializes associated items.
1078 Sets the page transition direction. @param direction PDTransitionDirection object to be stored
1079 Sets the transition duration. @param duration length of time in seconds
1080 Sets the fly-in scale of the transition. @param scale float value representing the scale factor
1081 Sets fly area opacity. @param opaque true to make fly area opaque, false otherwise
1082 Adds all elements from the specified collection to this filtered list. If the list has a parent dictionary and is not empty, updates the dictionary item to an array. @param c Collection containing elements to be added @return true if the addition was successful, false otherwise
1083 Processes the 'set non stroking color' operator by initializing a PDColor instance and setting the default font color. @param operands list of COSBase objects representing color components or pattern name
1084 Adds all elements from specified iterable to this collection at the given position. @param index insertion point @param c Iterable containing elements to be added @return true if addition was successful, false otherwise
1085 Adds all elements from the specified collection to this collection. @param objectList Collection containing elements to be added
1086 Fetches the standard structure type, applying role mapping. @return COSName value or null if not found
1087 Adds a structure to the compression pool, handling indirect objects and object streams. @param current COSBase instance to be added
1088 Decrypts all elements within the provided COSArray using the specified encryption parameters. @param array the PDF object to decrypt @param objNum unique document identifier @param genNum generation number
1089 Retrieves date string from dictionary as a Calendar object. @param key unique PDF name identifier @param defaultValue fallback Calendar to return on parsing failure @return Calendar object or default value if parsing fails
1090 Retrieves the date from a dictionary within an embedded PDF object. @param embedded embedded PDF object @param key unique dictionary identifier @param defaultValue fallback Calendar object to return if parsing fails @return Calendar object or the default value if parsing is unsuccessful
1091 Writes a collection of COSBase objects or Operators to the PDF output stream. @param tokens list of tokens to be written
1092 Processes lines of text and renders them in a structured manner. @param lines list of text lines to process @param isFirstParagraph flag indicating whether this is the first paragraph
1093 Inserts generated combination appearance into the PDF document. @param contents PDAppearanceContentStream object for writing content @param appearanceStream PDAppearanceStream object containing visual appearance @param font PDFont object representing the current font @param fontSize float value of the font size
1094 Loads and parses an FDF document from a file. @param filename path to the FDF file
1095 Adds the first intermediate curl by generating three arc segments with specified parameters. @param angleCur current angle @param r radius of the arcs @param alpha additional angle for the first segment @param cx x-coordinate of the center point @param cy y-coordinate of the center point
1096 Generates intermediate curl template based on specified angle and radius. @param angleCur initial angle of the curl @param r radius of the curl @return Array of Point2D.Double objects representing the generated points
1097 Generates an arc segment in a PDF document based on specified parameters. @param startAng starting angle of the arc @param endAng ending angle of the arc @param cx x-coordinate of the center point of the arc @param cy y-coordinate of the center point of the arc @param rx radius of the arc in the x-direction @param ry radius of the arc in the y-direction @param out list to store the generated points (optional) @param addMoveTo flag to indicate whether to add a move-to operation at the start of the arc
1098 Calculates and renders the glyph at a specific position on a PDF page. This method is responsible for determining the correct display coordinates of the glyph based on the provided matrix, font, code point, and displacement vector. It also takes into account various factors such as character spacing, word spacing, and glyph list mapping to ensure accurate rendering. @param textRenderingMatrix The current text rendering matrix. @param font The PDFont object representing the font of the glyph. @param code The Unicode code point value of the glyph. @param displacement The vector representing the displacement from the origin. @throws IOException If an error occurs during the calculation or rendering process.
1099 Fetches and splits the given PDF document's text content into lines based on specified font characteristics and width constraints. @param font PDFont object representing the font characteristics @param fontSize float value indicating the font size @param width line width constraint @return List of Line objects comprising the split text; throws IOException if encoding fails
1100 Retrieves the symbolic font descriptor flag. @return true if font is symbolic, false otherwise or null if unknown
1101 Returns a fallback font name based on the provided PDFontDescriptor. @param fontDescriptor font descriptor object @return string representation of the fallback font name
1102 Retrieves the Paint object associated with a given PDColor instance. @param color The input PDColor object @return A Paint object representing the visual representation of the color or null if not found @throws IOException If an error occurs during the retrieval process
1103 Retrieves a list of fields from the AcroForm. @return List of PDField objects or an empty list if not found
1104 Finds a child field by its name within the AcroForm structure. @param name array of field names to search @param nameIndex index of the current field name in the array @return PDField instance or null if not found
1105 Retrieves a list of child fields associated with the current non-terminal field. @return List of PDField objects representing the child fields or an empty list if none found
1106 Retrieves a string representation from the given COSBase object, or an empty string if it's null. If the object is a COSString, returns its string value; otherwise, attempts to convert a COSStream to text. @param base COSBase object to extract string from @return String representation of the input object, or an empty string on failure
1107 Retrieves the value associated with this FDFField instance. @return The field's value as an Object, or null if not found
1108 Retrieves rich text value from the field's dictionary. @return String representation of the rich text, or null if not found
1109 Retrieves the value associated with the 'BEFORE' key in the dictionary. @return String representation of the value, or null if not found
1110 Fetches the "after" JavaScript action from the dictionary. @return String representation of the after action, or null if not found
1111 Retrieves the JavaScript action string associated with this PDF interactive element. @return String representation of the action, or null if not found
1112 Retrieves rich contents from the markup annotation's dictionary. @return Rich text string or null if not found
1113 Retrieves string value from COSBase, or text representation of COSStream. @return String value if COSString, else text representation of COSStream
1114 Creates a layout page for the given PDF page, initializing its content stream and resources. @param page the PDF page to create a layout page for @return LayoutPage instance representing the created layout page
1115 Converts stream to byte array. @return byte array representation of the stream
1116 Retrieves an array of interpolated sample values. @return 2D array of integers representing sample indices and output parameter values
1117 Initializes a PatchMeshesShadingContext instance with the provided shading parameters. @param shading PDMeshBasedShadingType object to manage @param colorModel ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix Matrix for resource management @param deviceBounds Rectangle representing device bounds @param controlPoints number of points in each patch
1118 Initializes Type4ShadingContext with specified parameters and device bounds. @param shading PDShadingType4 object @param cm ColorModel object @param xform AffineTransform object for coordinate transformations @param matrix Matrix object representing the triangle's vertices @param deviceBounds Rectangle object defining the device area
1119 Initializes a new Type5ShadingContext instance with specified shading parameters and transformation. @param shading PDShadingType5 object @param xform AffineTransform object for transformations @param matrix Matrix object for calculations @param deviceBounds Rectangle defining the pixel area for shading effects
1120 Adds a new attribute to the PDF document's structure. @param attributeObject PDAttributeObject instance representing the attribute to be added
1121 Adds a new user property to the document. @param userProperty PDUserProperty object to be added
1122 Initializes PDICCBased instance with PDDocument, setting up ICC-based color space. @param doc PDDocument object containing PDF content
1123 Initializes a PDPattern object with given resources and color space. @param resources PDResources instance @param colorSpace PDColorSpace instance representing the underlying color space
1124 Sets the optional content groups (OCGs) from a list of property lists. @param ocgs list of property lists containing OCGs
1125 Sets an array of PDNumberFormatDictionaries as the 'changeX' values. @param changeXs array of dictionaries representing x-coordinate changes
1126 Sets the Y-coordinate changes in the dictionary. @param changeYs array of PDNumberFormatDictionary objects containing Y-coordinate changes
1127 Sets an array of rectilinear distances. @param distances array of PDNumberFormatDictionary objects
1128 Sets the areas in the dictionary. @param areas array of PDNumberFormatDictionary objects representing the areas
1129 Stores an array of rectilinear measurement angles in the dictionary. @param angles array of PDNumberFormatDictionary objects representing angles
1130 Sets the line sloaps in the dictionary. @param lineSloaps array of PDNumberFormatDictionary objects representing line sloaps
1131 Initializes COSArray to target capacity without adding elements. @param size target capacity
1132 Retrieves the text color for this outline item. @return PDColor object representing the text color
1133 Creates a cloned instance of the given COSBase object, handling arrays and dictionaries through specialized cloning methods. @param src Source COSBase object to clone @param dstParent Parent COSBase object for cloning @param currentPageDict Current page dictionary (not used in this method)
1134 Initializes the parser with values from a given COSStream. @param stream input PDF cross-reference stream
1135 Retrieves a list of subsequent actions in the current action sequence. @return List of PDAction objects or null if not found
1136 Sets decoding parameters. @param decodeParams list of decoding parameters
1137 Sets file decoding parameters. @param decodeParams list of decoding parameters to apply
1138 Sets the list of child elements associated with this structure node. @param kids collection of objects representing child nodes
1139 Sets form field options from a list of objects. @param options the list of object options to set
1140 Retrieves the numerical range for a specific color component. @param n index of the component (0-based)
1141 Retrieves encoded values for the specified parameter and creates a PDRange instance if valid. @param paramNum index of the parameter to fetch encoded values for @return PDRange object containing encoded values or null if not found
1142 Retrieves a color or four colors from the dictionary, returning an instance of PDGamma or PDFourColours accordingly. @param name unique dictionary identifier
1143 Processes glyph widths and stores them in the CID font dictionary. @param cidFont COSDictionary instance to store width data
1144 Sets the line dash pattern in the dictionary. @param dashPattern line dash pattern to store
1145 Initializes color space based on CIEXYZ values from the provided COSArray. @param rgb COSArray containing RGB data
1146 Sets the line color for guidelines in a PDF document. @param color color specification
1147 Sets the color of this annotation. @param c PDColor object representing the new color
1148 Sets the interior color of the line annotation. @param ic the new interior color
1149 Sets the interior color of this polygon annotation. @param ic PDColor object representing the new interior color
1150 Sets the interior color of the polyline annotation. @param ic interior color to be applied
1151 Sets the interior color of the annotation. @param ic interior color to be set
1152 Sets the border color of an annotation. @param c Border color to be applied
1153 Sets the background color of interactive PDF annotations. @param c PDColor object representing the desired background color
1154 Sets the text color of this outline item. @param textColor Color object representing the desired color
1155 Retrieves the A-range component array. @return COSArray object containing the numerical range data
1156 Retrieves the B component range from the dictionary or uses default values.
1157 Creates a PDImageXObject from an input stream containing JPEG image data. @param document the parent PDDocument @param stream input stream with JPEG image bytes @return PDImageXObject object or throws IOException on I/O error
1158 Sets the font for the PDF document. @param font the font to be used
1159 Sets the tint transformation function. @param tint PDFunction object defining the tint transform
1160 Sets the tint transformation function. @param tint PDFunction representing the tint transform
1161 Sets the target page of this destination to the specified page. @param page the PDF page object
1162 Sets the upper limit value in the COSArray object associated with the node. @param upper upper limit value to be set (or null to clear existing value)
1163 Sets the lower limit of a numeric value in the tree. @param lower optional lower limit value
1164 Sets the start point and ending style of a line annotation. @param style style string or null to reset
1165 Sets the end point ending style for a line annotation. @param style style string (null to reset to default)
1166 Sets the start point and ending style of a polyline annotation. @param style endpoint style string (e.g. "square", "open") or null to reset
1167 Sets the endpoint style of a polyline annotation. @param style desired style (null for default)
1168 Sets the start point and ending style of a line annotation. @param style PDF name string for the style (null to reset to default)
1169 Sets the end point ending style of the line annotation. @param style style string (e.g. "Square", "Circle", etc.)
1170 Sets the endpoint style for the polyline start point. @param style string representation of the desired style (e.g. "square", "circle") or null to reset
1171 Sets the endpoint ending style for this polyline annotation. @param style desired line end style (e.g. "square", "triangle", etc.) or null to reset
1172 Sets the upper limit for a PDNameTreeNode. @param upper new upper limit value as string
1173 Sets the lower limit for a name-value pair. @param lower new lower limit value
1174 Clips a rectangle to the PDF page's media box. @param box PDRectangle object to be clipped @return Clipped PDRectangle object
1175 Creates a retranslated rectangle with dimensions and coordinates. @return A new PDRectangle object
1176 Sets the color value at index 0. @param colour PDGamma object representing the color to be managed
1177 Sets the color at index 1 in the collection. @param colour PDGamma object representing the color to be managed
1178 Sets the color at index 2 (start color) to the provided PDGamma object.
1179 Sets the end color by updating the color at index 3.
1180 Sets an item in the dictionary with the given key and optional value. @param key unique identifier of the item to store @param value data to be stored, or null to remove existing item
1181 Sets the AcroForm for this document catalog. @param acroForm PDAcroForm object to be set
1182 Sets viewer preferences in the document catalog. @param prefs PDViewerPreferences object to store
1183 Sets the document outline from the given PDDocumentOutline object. @param outlines Document outline structure
1184 Sets metadata in the catalog dictionary. @param meta PDMetadata object to be stored
1185 Sets the open action for this document's catalog. @param action PDDestinationOrAction to be executed when document is opened
1186 Sets additional actions in the document catalog. @param actions PDDocumentCatalogAdditionalActions object
1187 Sets the Names dictionary in the catalog. @param names PDDocumentNameDictionary to be stored
1188 Sets the mark info in the catalog dictionary. @param markInfo PDMarkInfo object containing document mark information
1189 Sets the URI dictionary of the PDF document. @param uri PDURIDictionary object containing URI data
1190 Sets the structure tree root of the catalog dictionary. @param treeRoot PDStructureTreeRoot object representing the root node
1191 Sets page labels in the catalog dictionary. @param labels PDPageLabels object to be stored
1192 Sets destinations within the PDF document. @param dests PDDestinationNameTreeNode object containing destination data
1193 Sets embedded files in the document's name dictionary. @param ef EmbeddedFilesNameTreeNode object containing file data
1194 Sets JavaScript code in the dictionary. @param js JavaScriptCode object to store
1195 Initializes a PDPage instance with the given media box. @param mediaBox rectangle representing the page's dimensions
1196 Sets the resources for this PDPage. @param resources new resources to be set
1197 Sets the media box for this PDPage. @param mediaBox new dimensions and rotation of the page
1198 Sets or removes the bleed box for this PDF page. @param bleedBox new bleed box dimensions (or null to remove)
1199 Sets or removes the Trim Box of this PDF page. @param trimBox new Trim Box dimensions, or null to clear existing
1200 Sets the ART BOX dictionary entry to a specified PDRectangle object or removes it if null. @param artBox PDRectangle object representing the ART BOX dimensions
1201 Sets the content stream of this PDPage. @param contents new content stream to be stored
1202 Sets metadata for this PDF page. @param meta PDMetadata object to be associated with the page
1203 Sets additional actions on this PDF page. @param actions PDPageAdditionalActions object containing action data
1204 Sets the transition for this PDF page. @param transition PDTransition object to be assigned
1205 Sets a page transition with the specified duration. @param transition PDTransition object to set @param duration transition duration in seconds
1206 Adds a resource item to the dictionary with the given key and value. @param kind unique identifier of the resource type @param name unique identifier of the item to store @param object data to be stored
1207 Sets an embedded file with the given PDEmbeddedFile object. @param file embedded file to store
1208 Sets the embedded file with a Unicode representation. @param file PDEmbeddedFile object containing the file data
1209 Sets the associated PDF page for the marked content reference. @param page PDPage object representing the target page
1210 Sets the referenced object to an annotation. @param annotation PDAnnotation instance
1211 Sets the referenced PDF object. @param xobject PDXObject to be referenced
1212 Sets the associated PDPage object in the COSDictionary. @param page the page to be stored
1213 Sets the parent node of the current PDStructureElement. @param structureNode new parent node
1214 Sets the current PDF page. @param page target PDPage object
1215 Sets the attributes of this PDStructureElement instance. @param attributes collection of revisions for attribute objects
1216 Sets the ID tree of the structure tree root. @param idTree logical structure tree node
1217 Sets the parent tree of this root node. @param parentTree new parent tree to be assigned
1218 Sets the annotation's bounding box to the specified PDRectangle. @param rectangle bounds of the annotation
1219 Sets border style annotation in PDF document. @param bs PDBorderStyleDictionary object containing border style properties
1220 Sets border effect dictionary. @param be PDBorderEffectDictionary object to store
1221 Sets the fringe dimensions of the caret annotation. @param fringe PDRectangle object representing the fringe dimensions
1222 Sets the fringe dimensions of the circular annotation. @param fringe PDRectangle object containing fringe dimensions
1223 Sets the fringe rectangle of the annotation. @param fringe PDRectangle object representing the fringe
1224 Sets the fringe dimensions of the annotation. @param fringe PDRectangle object representing fringe dimensions
1225 Sets the FDF dictionary in the catalog. @param fdf the Form Data Format (FDF) dictionary to store
1226 Sets the digital signature in the FDF catalog. @param sig PDSignature object containing the digital signature data
1227 Sets the embedded file specification in the FDF dictionary. @param fs PDFileSpecification object containing file details
1228 Sets JavaScript associated with this FDF document. @param js FDFJavaScript object to be stored
1229 Sets the FDF catalog in the document's root dictionary. @param cat FDFCatalog object to be stored
1230 Sets appearance dictionary for this form field. @param ap PDAppearanceDictionary object to be stored
1231 Sets the appearance stream reference. @param ref FDFNamedPageReference object
1232 Sets icon fitting mode. @param fit icon fitting mode enum value
1233 Sets an action for this form field. @param a PDAction object to be associated with the field
1234 Sets additional actions for this form field. @param aa PDAdditionalActions object containing action settings
1235 Sets fractional space allocation range. @param space PDRange object defining allocated space
1236 Sets the file specification of this named page reference. @param fs PDFileSpecification object to be associated
1237 Sets the page information in the FDF page dictionary. @param info PageInfo object containing metadata
1238 Sets the FDF named page reference template. @param tRef FDFNamedPageReference object
1239 Sets the font file descriptor in the dictionary. @param type1Stream PDF stream containing font file data
1240 Sets font file 2 in PDF document. @param ttfStream stream containing TTF font data
1241 Sets the font file 3 in the PDF document. @param stream PDStream object containing font data
1242 Sets the CID set in the font descriptor dictionary. @param stream PDStream object containing the CID set data
1243 Sets the white point in the color space dictionary and updates the cache. @param whitepoint PDTristimulus object containing XYZ values
1244 Sets the black point in the color space dictionary. @param blackpoint PDTristimulus object for the black point
1245 Sets the extended graphics state. @param extendedGraphicsState Extended graphics state object
1246 Sets the shading pattern resources. @param shadingResources new shading resources to apply
1247 Sets tiling pattern resources. @param resources PDResources object to store
1248 Sets a PD function for the shading. @param newFunction new function to be set
1249 Sets the font setting in the dictionary. @param fs PDFontSetting object to be stored
1250 Sets the destination for this embedded goto action. @param d PDDestination object to set as the destination
1251 Sets file specification in embedded goto action. @param fs File specification object
1252 Sets the target directory for embedded file navigation. @param targetDirectory PDTargetDirectory object specifying the destination
1253 Sets the destination for this PDActionGoTo instance. @param d PDDestination object to store
1254 Configures file specification within PDF interactive action. @param fs PDFileSpecification object to be stored
1255 Sets the file specification for this launch action. @param fs PDFileSpecification object containing file details
1256 Sets Windows launch parameters. @param win PDWindowsLaunchParams object with launch details
1257 Sets the file specification associated with this remote navigation action. @param fs PDF file specification object
1258 Sets the file specification for form submission. @param fs PDFileSpecification object containing file details
1259 Sets file specification associated with this thread. @param fs PDFileSpecification object
1260 Sets an additional interactive action associated with the PDF document. @param action action to be stored
1261 Sets an action definition associated with the 'E' annotation. @param e PDAction object to be stored
1262 Sets an action definition for X-coordinate behavior. @param x PDAction object defining the behavior
1263 Sets the action associated with the 'D' annotation. @param d Action to be stored
1264 Sets the action associated with PDF annotation key 'U'. @param u action to be assigned
1265 Sets the FO action definition. @param fo FO action object
1266 Sets the "BL" action definition in the annotation dictionary. @param bl PDAction object to be stored
1267 Sets the Post-Out (PO) action definition. @param po PO action object
1268 Sets a custom action definition for PDF annotations. @param pc Custom action object
1269 Sets the PV action definition. @param pv action instance to be stored
1270 Sets the PDF annotation's Post-Interactive action. @param pi Post-Interactive action definition
1271 Sets the web capture action. @param wc PDAction object representing the web capture action
1272 Sets the workspace action in the catalog. @param ws the new workspace action to set
1273 Sets the document source action. @param ds PDAction object representing the document source
1274 Sets the "Window Pane" action in the catalog. @param wp WindowPane action object
1275 Sets a document preview action. @param dp PDAction object representing the document preview
1276 Sets key action associated with interactive form field. @param k PDAction object to be linked to key "K"
1277 Sets additional action associated with key F. @param f PDAction object to be stored
1278 Sets the V action in the additional actions dictionary. @param v V action to be stored
1279 Sets an additional action associated with key 'C' in the dictionary. @param c action to be set
1280 Sets an interactive action associated with PDF page 'o'. @param o PDAction object to store
1281 Sets the 'C' action in the dictionary. @param c action to be stored
1282 Sets the target directory within this PDTargetDirectory instance. @param targetDirectory target directory to be stored
1283 Sets or removes the named destination in the target directory. @param dest the destination to set (or null to remove it)
1284 Sets the annotation's appearance. @param appearance PDAppearanceDictionary object defining the appearance settings
1285 Sets optional content for this annotation. @param oc PDPropertyList representing optional content
1286 Sets the associated PDPage object in the COSDictionary. @param page PDPage instance to be stored
1287 Sets the file specification associated with this annotation. @param file PDFileSpecification object containing file details
1288 Sets border effect dictionary for the free text annotation. @param be PDBorderEffectDictionary object containing border settings
1289 Sets rectangle difference for the free text annotation. @param rd PDRectangle object defining the rectangle difference
1290 Sets an interactive link's destination to the given PDAction. @param action the target action for the link
1291 Sets the border style dictionary of the annotation link. @param bs PDBorderStyleDictionary object representing the border style
1292 Sets the destination of an interactive link. @param dest PDDestination object representing the target location
1293 Sets the previous URI of the link annotation. @param pa PDActionURI object containing the new URI value
1294 Sets the popup display for this annotation. @param popup PDAnnotationPopup object to be displayed
1295 Sets the "in reply to" annotation for this markup. @param irt the parent annotation being replied to
1296 Sets external data dictionary for annotation. @param externalData PDExternalDataDictionary object
1297 Sets the border style of the markup annotation. @param bs PDBorderStyleDictionary object defining the border style
1298 Sets the border effect of the polygon annotation. @param be BorderEffectDictionary instance defining the visual properties
1299 Sets the border effect of the annotation. @param be PDBorderEffectDictionary object defining the border effect
1300 Sets rectangle difference of annotation. @param rd PDRectangle object defining new rectangle difference
1301 Sets appearance characteristics dictionary. @param appearanceCharacteristics Appearance characteristics to be stored
1302 Sets the action associated with this annotation widget. @param action PDAction object to be assigned
1303 Sets additional actions for the annotation widget. @param actions PDAnnotationAdditionalActions object to store
1304 Sets the border style of the annotation. @param bs Border style dictionary
1305 Sets the parent PDTerminalField instance. @param field the new parent field
1306 Sets the normal appearance of an interactive annotation. @param entry PDAppearanceEntry object defining the normal appearance
1307 Sets the normal appearance of an interactive annotation. @param ap PDAppearanceStream object defining the normal appearance
1308 Sets rollover appearance for interactive annotation. @param entry PDAppearanceEntry object containing visual representation
1309 Sets rollover appearance of interactive annotation. @param ap PDAppearanceStream representing the visual representation
1310 Sets down appearance entry in the dictionary. @param entry appearance data to be stored
1311 Sets down appearance stream in the dictionary. @param ap PDAppearanceStream object to be stored
1312 Sets the digital signature filter property. @param filter PDPropBuildDataDict object containing filter data
1313 Sets publication security properties from PDPropBuildDataDict. @param pubSec Publication security data
1314 Sets application data in the dictionary. @param app PDPropBuildDataDict object containing application properties
1315 Sets the seed value certificate. @param certificate Seed value certificate object
1316 Sets the build property of this digital signature. @param propBuild build information to be stored
1317 Sets the previous sibling of this PDF outline item. @param outlineNode reference to the sibling node
1318 Sets next sibling of this PDOutlineItem. @param outlineNode next node in the outline structure
1319 Sets the destination of this outline item. @param dest PDDestination object representing the new destination
1320 Sets an action associated with this outline item. @param action Action to be stored
1321 Sets the structure element of this outline item. @param structureElement represents the hierarchical relationship between items
1322 Sets the first child outline node. @param outlineNode child node to be assigned
1323 Sets the last child outline node. @param outlineNode the node to be set as last child
1324 Sets the default resources for the form. @param dr PDResources object containing default resources
1325 Sets the XFA resource in the form's dictionary. @param xfa PDXFAResource object to be stored
1326 Sets the digital signature value. @param value PDSignature object to be assigned
1327 Sets the default signature value. @param value PDSignature object to be set as default
1328 Sets the seed value for this signature field. @param sv SeedValue object to be set
1329 Sets additional form field actions. @param actions PDFormFieldAdditionalActions object to be stored
1330 Sets the annotation widgets and updates their parent reference. @param children list of PDAnnotationWidget objects
1331 Sets the bounding box of the viewport. @param rectangle PDRectangle object representing the new bounding box
1332 Sets the measurement details of the viewport. @param measure PDMeasureDictionary object containing measurement data
1333 Sets thread information in the dictionary. @param info PDDocumentInformation object containing thread details
1334 Sets the threaded content in the bead with given thread. @param thread PDThread object to be associated
1335 Sets the next bead in the thread. @param next The adjacent bead to link
1336 Sets the previous bead in the thread. @param previous reference to the preceding bead
1337 Associates a page with this thread bead. @param page PDPage object to be linked
1338 Sets the rectangle associated with this bead. @param rect PDRectangle object to store
1339 Sets the marked status of PDF marking information. @param value standard boolean value representing whether the document is marked
1340 Sets the User Properties status in the marking info dictionary. @param userProps standard boolean value to indicate user properties
1341 Sets the suspect flag to false.
1342 Sets whether to track mouse position. @param value true to enable tracking, false otherwise
1343 Sets popup visibility state. @param open true to show, false to hide
1344 Sets the fixed decimal format flag in the internal dictionary. @param fd true to enable fixed decimal format, false otherwise
1345 Sets volatility status of embedded file. @param fileIsVolatile true if file is volatile
1346 Sets the visibility of a user property. @param hidden true to hide, false to show
1347 Sets metadata encryption status in the cryptographic filter dictionary. @param encryptMetaData true to enable metadata encryption, false otherwise
1348 Sets whether to display a caption for this line annotation. @param cap true to show caption, false otherwise
1349 Sets scale-to-fit annotation mode. @param value true to enable scale-to-fit, false otherwise
1350 Sets the rename flag in the template dictionary. @param value standard boolean value to enable or disable renaming
1351 Sets anti-aliasing property in PDF shading dictionary. @param antiAlias whether to enable or disable anti-aliasing
1352 Sets stroking overprint control. @param op true to enable overprint, false otherwise
1353 Sets non-stroking overprint control. @param op standard boolean value to enable or disable overprint
1354 Sets automatic stroke adjustment property. @param sa standard boolean value to enable/disable auto-stroke adjustment
1355 Sets the alpha source flag in the PDF document. @param alpha standard boolean value to enable or disable alpha blending
1356 Sets the text knockout flag in the PDF dictionary. @param tk whether to enable or disable text knockout
1357 Sets the window behavior for opening associated content. @param value OpenMode specifying how linked content should be accessed and displayed
1358 Configures whether to open launched content in a new window. @param value OpenMode enumeration value (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
1359 Sets window behavior for linked content. @param value OpenMode enumeration value (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
1360 Sets whether sound playback is synchronous or not. @param synchronous true to play sounds synchronously, false otherwise
1361 Sets the repetition flag for the sound action. @param repeat true to enable repeated playback
1362 Configures sound mixing behavior. @param mix whether to enable or disable sound mixing
1363 Sets or clears the caption associated with this annotation line. @param cap true to set a caption, false to clear it
1364 Sets the "Open" annotation state. @param open boolean indicating whether the annotation is open or closed
1365 Sets the pre-release flag in the properties dictionary. @param preRelease true to indicate a pre-release version
1366 Sets non-embedded font warning flag in the dictionary. @param noEmbedFontWarning whether to suppress warnings for non-embedded fonts
1367 Sets the trusted mode flag in the properties dictionary. @param trustedMode boolean value indicating trusted mode status
1368 Sets whether form fields need to appear in the PDF document. @param value true if field appearances are required, false otherwise
1369 Hides or shows toolbar based on user preference. @param value true to hide, false to show
1370 Sets whether to hide the menubar. @param value true to hide, false otherwise
1371 Configures whether to hide window UI. @param value true to hide, false otherwise
1372 Sets whether to fit the PDF window to its contents. @param value true to enable fitting, false otherwise
1373 Sets viewer preference to center window by default. @param value true to enable, false otherwise
1374 Sets display document title preference. @param value true to show document title, false otherwise
1375 Sets an array of strings in the dictionary with the given name. @param name unique identifier for the item to store @param values array of string values to be stored
1376 Sets an array of PDF names. @param name unique dictionary identifier @param values array of string values to store
1377 Sets an array of numbers as a named attribute. @param name unique identifier for the attribute @param values array of float values to be stored
1378 Sets a string item in the dictionary with the given PDF name and value. If value is null, removes the corresponding item instead. @param key unique identifier of the item to store @param value data to be stored, or null to remove existing item
1379 Sets the page mode of the document catalog. @param mode PageMode instance to set
1380 Sets the page layout of the PDF document. @param layout PageLayout object to be stored in the catalog dictionary
1381 Sets the PDF document's version. @param version the new version value
1382 Sets the "Trapped" attribute in the PDF document information. @param value valid values: 'True', 'False', or 'Unknown'
1383 Sets or removes the page numbering style. @param style new style to apply, or null to reset
1384 Initializes a PDTypedDictionaryWrapper instance with a given type name. @param type the type of the encapsulated PDF content
1385 Sets the owner string in the COS dictionary. @param owner unique identifier of the owner to store
1386 Initializes an instance of PDMarkedContentReference with default values.
1387 Initializes an instance of PDObjectReference with default type.
1388 Sets the structure type of the PDF element. @param structureType new type value
1389 Sets the class names for revisions. @param classNames collection of class names and revision numbers
1390 Initializes a PDStructureNode instance with a given type. @param type unique identifier of the structure node's type
1391 Sets user-defined property name. @param name new property value
1392 Sets the guideline style in the COSDictionary. @param style visual style for guidelines
1393 Sets the document's sub-filter according to the given value. @param subfilter string identifier of the sub-filter
1394 Sets the annotation's intent to the specified string value. @param intent description of the annotation's purpose
1395 Sets line ending style of free text annotation. @param style desired line ending style (e.g., square, round)
1396 Sets the icon of a text annotation in the FDF document. @param icon URL or path to the icon image
1397 Sets the document version in the FDF catalog. @param version new version value to be stored
1398 Sets the encoding of the FDF document. @param encoding encoding scheme (e.g., UTF-8)
1399 Sets the scaling option for icon fitting. @param option selected scaling type
1400 Sets the icon scaling type in FDFIconFit. @param scale string identifier of the scaling type
1401 Initializes an instance of the PDAbstractPattern class. Creates a new COSDictionary and sets its type to PATTERN.
1402 Sets the type of PDAction. @param type new action type
1403 Sets the subtype of this PDAction instance. @param s subtype value
1404 Sets the annotation subtype. @param subType new subtype value
1405 Sets the appearance state of this annotation. @param as new appearance state value
1406 Sets the attachment name in the PDF annotation file. @param name the new attachment name
1407 Sets the line ending style of the free text annotation. @param style desired style (e.g. "square", "round")
1408 Sets the positioning of the annotation's caption. @param captionPositioning desired caption positioning (e.g. "inLine", "below")
1409 Sets the highlight mode for the annotation link. @param mode desired highlighting behavior (e.g., "none", "highlight")
1410 Sets the reply type of this annotation. @param rt unique identifier of the reply type
1411 Sets the intent of this annotation markup. @param it intent string to be stored
1412 Sets the rubber stamp annotation's name. @param name new name to be assigned
1413 Sets a string item in the annotation's dictionary with key NAME and value. If null is passed as value, removes existing item instead. @param name data to be stored, or null to remove existing item
1414 Sets the highlighting mode of the annotation widget. @param highlightingMode one of 'N', 'I', 'O', 'P', or 'T'
1415 Sets the border style of an interactive PDF annotation. @param s new border style value
1416 Initializes an instance of the external data dictionary with default subtype and type attributes.
1417 Sets the subtype attribute of the external data dictionary. @param subtype string value representing the subtype
1418 Sets the digital signature property name in the dictionary. @param name new name value
1419 Sets URL type attribute in certificate dictionary. @param urlType new URL type value
1420 Initializes a new instance of the PDDocumentOutline class. Sets up the outline structure with default settings.
1421 Initializes a new instance of the document outline with the given PDF dictionary structure. @param dic PDF dictionary to be wrapped and initialized
1422 Sets default button value. @param value string representation of the default value
1423 Initializes an instance of the PDMeasureDictionary class. @param none
1424 Sets measurement subtype in dictionary. @param subtype unique identifier of subtype
1425 Initializes an instance of the PDNumberFormatDictionary with default settings.
1426 Sets the viewport's name. @param name unique identifier of the viewport
1427 Initializes a PDTransition instance with the given visual transition style. @param style desired transition style (e.g. "swirl", "fade")
1428 Sets the transition's dimension. @param dimension Dimension properties to be stored
1429 Sets the transition's motion style. @param motion transition movement type
1430 Sets non-full-screen page mode preference. @param value enum value for non-full-screen page mode
1431 Sets the reading direction of PDF documents. @param value desired reading direction (e.g. LEFT_TO_RIGHT or RIGHT_TO_LEFT)
1432 Sets the viewer area boundary. @param value string representation of the boundary
1433 Sets the view clip boundary. @param value string representation of the boundary
1434 Sets the print area boundary. @param value string representation of print area boundary
1435 Sets print clip boundaries. @param value boundary value as string
1436 Sets the duplex printing preference. @param value Duplex printing option (e.g. "Odd", "Even")
1437 Sets print scaling preference. @param value desired print scaling option
1438 Sets a date item in the dictionary with the given key and formatted date value. @param key unique identifier of the item to store @param date input calendar instance to be encoded as string
1439 Sets a string item in the dictionary with the given key and value. @param key unique identifier of the item to store @param value input string to be encoded
1440 Sets an embedded string item in the dictionary with the given key and value. Creates a new COSDictionary instance if it doesn't exist for the provided embedded name. @param embedded unique identifier of the embedded object @param key unique identifier of the item to store @param value input string to be encoded
1441 Sets the document's language. @param language input string representing language code
1442 Sets the PDF document's title. @param title user-provided title string
1443 Sets the document author. @param author input string to be encoded as the author
1444 Sets the document's subject metadata. @param subject input string to be encoded as the document's subject
1445 Sets the keywords metadata in the PDF document. @param keywords input string to be encoded as keywords
1446 Sets the document creator. @param creator input string to be encoded as the creator
1447 Sets the PDF document's producer metadata. @param producer input string representing the document creator
1448 Sets or clears the page label prefix. @param prefix optional prefix string
1449 Sets the Unicode name of a file. @param file input string to be encoded
1450 Sets the file name in the PDF complex file specification. @param file input string to be encoded as the file name
1451 Sets the file description. @param description user-provided file description
1452 Sets the unique identifier of the PDF structure element. @param id input string to be encoded as the element's ID
1453 Sets the document's title. @param title input string to be encoded
1454 Sets the document language. @param language input string representing the language
1455 Sets the alternate description of the PDF structure element. @param alternateDescription input string to be encoded as the alternate description
1456 Sets the expanded form of the PDF structure element. @param expandedForm input string to be encoded
1457 Sets the actual text of a PDF structure element. @param actualText input string to be encoded
1458 Sets a formatted user property value and notifies of potential change. @param formattedValue input string to be encoded as the new value
1459 Sets the annotation's date. @param date input date string to be encoded
1460 Sets the annotation's name. @param name input string to be encoded
1461 Sets annotation content. @param contents input string to be encoded
1462 Sets the annotation's title. @param title input string to be set as the title
1463 Sets the subject of the annotation. @param subject input string to be encoded as the subject
1464 Sets the annotation symbol. @param symbol new symbol to be set (e.g., "paragraph")
1465 Sets the default appearance of the free text annotation. @param appearance input string representing the appearance
1466 Sets the default annotation style. @param style input string to be encoded as the default style
1467 Sets the caption style of the line annotation. @param captionStyle input string to be encoded as the caption style
1468 Sets the annotation's state. @param state new state value
1469 Sets the state model of the annotation. @param stateModel new state model value
1470 Sets the document status in the FDF dictionary. @param status new document status to be encoded
1471 Sets the FDF document's target. @param target unique identifier of the item to store
1472 Sets a partial field name. @param partial string to be encoded as T-item in dictionary
1473 Sets the name of this named page reference. @param name input string to be encoded as the page's name
1474 Sets the optional content group name. @param name input string to be encoded as the group's name
1475 Initializes a new instance of PDOptionalContentProperties with default values. Creates an empty COSDictionary and sets the OCGs item to a new COSArray instance. Also sets the Name item in the dictionary to "Top", which is required for PDF/A-3 compliance.
1476 Sets JavaScript action string associated with PDF interactive elements. @param sAction input JavaScript code to be executed
1477 Sets file specification for launch action. @param f input string to be encoded
1478 Sets the launch directory. @param d path to external file or application
1479 Sets the launch parameter 'o' for the external file or application. @param o input string to be encoded
1480 Sets the launch parameter 'p' in the PDF document. @param p input string to be encoded and stored as a COSName item
1481 Sets the URI action within the PDF document. @param uri external resource URL to be stored
1482 Sets the filename associated with this target directory. @param filename input string to be encoded
1483 Sets the annotation name in the dictionary. @param name input string to be encoded as the annotation name
1484 Sets the filename parameter. @param file input string to be encoded as the filename
1485 Sets the directory path. @param dir input directory path
1486 Sets the operation type. @param op operation string
1487 Sets an execution parameter in the dictionary. @param param input string to be encoded
1488 Sets the contents of the annotation. @param value input string to be encoded as contents
1489 Sets the modified date annotation in the COSDictionary. @param m input string representing the modified date
1490 Sets the annotation name in the COSDictionary. @param nm new annotation name
1491 Sets default appearance of free text annotation. @param daValue input string to be used as default appearance
1492 Sets the default style string for the annotation. @param defaultStyleString input string to be encoded
1493 Sets the title of a popup display. @param t input string to be encoded as the title
1494 Sets the subject of an annotation. @param subj input string to be encoded as subject
1495 Sets the annotation's state. @param state new state of the annotation
1496 Sets the PDF annotation text's state model. @param stateModel input string to be encoded as STATE_MODEL in dictionary
1497 Sets the normal caption for interactive PDF annotations. @param caption user-provided string to be used as caption
1498 Sets the rollover caption of an interactive PDF annotation. @param caption input string to be encoded as the rollover caption
1499 Sets alternate caption for interactive PDF annotation. @param caption user-provided text to be displayed
1500 Sets the digital signature date in the property dictionary. @param date input date string to be encoded
1501 Sets the URL attribute in the COSDictionary. @param url input string to be encoded as the URL value
1502 Sets the URL item in the dictionary. @param url input URL to be stored
1503 Sets the name of the digital signature. @param name input string to be encoded
1504 Sets the location of the digital signature. @param location input string representing the location
1505 Sets the reason for the digital signature. @param reason input string to be encoded as the reason
1506 Sets contact information in the PDSignature dictionary. @param contactInfo input string to be encoded and stored
1507 Sets the title of this PDOutlineItem. @param title input string to be encoded as the item's title
1508 Sets default appearance of form fields. @param daValue input string value for DA property
1509 Sets the default choice value. @param value input string to be encoded as the default value
1510 Sets the partial name of this PDF form field. @param name input string to be encoded
1511 Sets an alternate field name in the PDF form. @param alternateFieldName new field name to store
1512 Sets the mapping name in the dictionary. @param mappingName new value to be encoded
1513 Sets a string item in the COS dictionary with key V and given value. @param value input string to be encoded
1514 Sets the text field's value. @param value input string to be encoded
1515 Sets the default text input value in the PDF form. @param value user-provided string to be stored as default
1516 Sets the default appearance string for this text field. @param daValue the new default appearance value
1517 Sets rectilinear measurement scale ratio. @param scaleRatio input string to be encoded as the scale ratio
1518 Sets an integer item in the dictionary with the given key and value. @param key unique identifier of the item to store @param value long integer value within the range [LOW, HIGH]
1519 Sets an integer item in the embedded dictionary with the given key and value. @param embeddedDictionary unique identifier of the embedded dictionary @param key unique identifier of the item to store @param value long integer value within the range [LOW, HIGH]
1520 Sets a boolean flag in the dictionary with the specified key and value. @param field primary dictionary identifier @param bitFlag integer mask representing the flag to set or clear @param value new boolean state of the flag
1521 Sets the structural parent IDs of this page. @param structParents integer value representing the structural parents
1522 Sets the page's rotation in degrees. @param rotation new rotation value (0-360)
1523 Initializes a PDPageTree instance from a COSDictionary representing the page tree root and a PDDocument. @param root COSDictionary containing the page tree structure @param document associated PDDocument object
1524 Removes a specified page from the page tree and updates ancestor counts. @param node COSDictionary object representing the page to be removed
1525 Adds a new page to the page tree. @param page PDPage object to be added
1526 Sets the starting page number for this PDF document. @param start positive integer page number
1527 Sets bits per sample value. @param bps number of bits per sample for Type 0 PDF function
1528 Sets the Marker Context Identifier (MCID) of the marked content reference. @param mcid unique identifier within the range [LOW, HIGH]
1529 Sets the document's revision number. @param revisionNumber non-negative integer value
1530 Sets the next key in the parent tree. @param parentTreeNextkey unique identifier of the next key
1531 Sets the encryption filter dictionary's length. @param length integer value representing the length of the encrypted data
1532 Sets the encryption version. @param version integer version value
1533 Sets the document length in the encryption settings. @param length document length value
1534 Sets the PDF encryption revision. @param revision integer value representing the encryption revision
1535 Sets PDF document encryption permissions. @param permissions integer value representing permissions and filters
1536 Sets the current annotation's page to the specified value. @param page zero-based page index
1537 Sets the justification of a free text annotation. @param justification one of "left", "centered", or "right"
1538 Sets the rotation of the free text annotation. @param rotation integer value representing the rotation angle
1539 Sets form field flags. @param ff integer value representing field flags
1540 Sets the flags of a Set Field form element. @param ff integer value containing flag settings
1541 Sets clear field flags in the FDF dictionary. @param ff integer value representing clear field flags
1542 Sets widget-specific flags in the FDF field dictionary. @param f integer value containing the flags to be set
1543 Sets flags for a Set widget field. @param ff integer value representing the flags
1544 Sets clear widget flags. @param ff integer value representing clear widget flags
1545 Sets font descriptor flags. @param flags integer value representing font descriptor flags
1546 Calculates and sets the character widths for a given glyph list in the provided PDF font dictionary. @param font PDF font dictionary to store the width information @param glyphList Glyph list containing the necessary font encoding and glyphs @throws IOException if an error occurs during the width calculation process
1547 Sets the paint type in the dictionary. @param paintType integer value representing the paint type
1548 Sets the pattern type in the dictionary. @param patternType integer value representing the pattern type
1549 Sets the tiling pattern's paint type. @param paintType integer value representing the paint type
1550 Sets the tiling type attribute. @param tilingType integer value representing the type of tiling pattern
1551 Sets the shading type in the PDF document. @param shadingType integer identifier of the shading type
1552 Sets the number of flags per bit in the dictionary. @param bitsPerFlag number of flags represented by each bit
1553 Sets the number of triangles per row in the shading model. @param verticesPerRow integer value representing the number of triangles
1554 Sets the number of color components per pixel. @param bitsPerComponent integer value specifying the bit depth for each color component
1555 Sets the number of bits per coordinate for shaded triangles. @param bitsPerCoordinate integer value within range [LOW, HIGH]
1556 Sets the line cap style. @param style integer value representing the desired line cap style
1557 Sets the line join style in the graphics state dictionary. @param style integer value representing the desired line join style
1558 Sets the overprint mode in the extended graphics state dictionary. @param overprintMode optional integer value for overprint mode or null to remove existing key
1559 Sets action flags in the dictionary. @param flags integer value representing action flags
1560 Sets action flags within the PDF form submission process. @param flags integer value representing flags and configuration
1561 Sets the page number in the target directory. @param pageNumber non-negative integer value
1562 Sets an annotation index in the dictionary. @param index integer value within the range [0, HIGH] representing the annotation's position
1563 Sets annotation flags. @param flags bitfield of flags to apply
1564 Sets the parent structure ID of this annotation. @param structParent unique identifier of the parent structure
1565 Sets Q parameter in dictionary. @param q integer value within range [LOW, HIGH]
1566 Sets the annotation rotation in degrees. @param rotation new rotation value
1567 Sets the seed value for signature generation. @param p seed value [0, 3]
1568 Sets timestamp requirement flag in the COSDictionary. @param flag true to require timestamps, false otherwise
1569 Sets the open count of this outline node. @param openCount number of child nodes currently open
1570 Sets the 'Q' item in the dictionary to an integer value. @param q long integer value within the range [LOW, HIGH]
1571 Sets field flags in the AcroForm dictionary. @param flags bitwise flag combination
1572 Sets the top index for displayed items in the list box. @param topIndex integer value representing the top index (null to clear)
1573 Sets maximum length constraint for text field input. @param maxLen integer value representing the maximum allowed characters
1574 Sets the Q attribute of this text field to a specified integer value. @param q integer value within the range [LOW, HIGH]
1575 Sets a long integer value in the dictionary using the given string key. @param key unique identifier for the item @param value long integer value to store
1576 Writes the document trailer, including size and ID information. @param doc COSDocument to write trailer for
1577 Sets the digital signature revision in the properties dictionary. @param revision unique revision identifier as a long integer
1578 Sets the minimum revision number. @param revision long integer value representing the minimum revision
1579 Sets a floating-point value in the dictionary with the given key. @param key unique identifier of the item to store @param value float value to be stored
1580 Sets the user unit for this PDPage. @param userUnit positive float value representing the unit of measurement
1581 Sets the guideline width in the COSDictionary. @param width new width value
1582 Sets annotation opacity. @param opacity float value between 0.0 and 1.0 representing transparency
1583 Sets the length of the leader line. @param leaderLength desired length of the leader line
1584 Sets the leader extension of this line annotation. @param leaderExtend float value representing the leader extension
1585 Sets the leader offset of the line annotation. @param leaderOffset float value representing the leader offset
1586 Sets the font weight in the PDF document dictionary. @param fontWeight numeric value representing font weight
1587 Sets the italic angle of the font descriptor. @param angle floating-point value representing the italic angle
1588 Sets the font's ascension value. @param ascent height of the uppercase letters
1589 Sets font descent value. @param descent font descent in points
1590 Sets the leading (line spacing) of the font. @param leading line spacing in points
1591 Sets the font's cap height. @param capHeight new cap height value
1592 Sets the x-height of a font descriptor. @param xHeight value to be set
1593 Sets the stem vertical value in the font descriptor. @param stemV vertical size of a stem
1594 Sets the font stem height in the PDF dictionary. @param stemH font stem height value
1595 Sets the average font width. @param averageWidth average character width in points
1596 Sets the maximum width of the font descriptor. @param maxWidth maximum width value
1597 Sets the missing width value in the font descriptor. @param missingWidth floating-point width of the missing glyph
1598 Sets the X-coordinate step value in the tiling pattern dictionary. @param xStep float value representing the step size along the X-axis
1599 Sets the vertical step value of the tiling pattern. @param yStep float value for vertical step
1600 Sets the volume of the sound action within a PDF document. @param volume float value between -1 and 1 representing the volume level
1601 Sets the length of the leader line. @param leaderLineLength float value representing the new length
1602 Sets the extension length of the leader line. @param leaderLineExtensionLength float value representing the extension length
1603 Sets the length of the leader line offset. @param leaderLineOffsetLength float value representing the leader line offset length
1604 Sets the constant opacity of the annotation. @param ca float value representing the opacity (0.0 - 1.0)
1605 Sets the border width of an interactive annotation in a PDF document. If the width is an integer, it's stored as such; otherwise, it's stored as a float. @param w new border width value
1606 Sets the V (minimum required capability) seed value. @param minimumRequiredCapability float value to be stored in the dictionary
1607 Sets the CYX value in the dictionary. @param cyx float value to be stored
1608 Parses a COS dictionary to create a COS stream instance. @param dic the input COS dictionary @return initialized COSStream object or throws IOException on failure
1609 Parses a COS dictionary from the PDF source. @param isDirect whether to parse directly or indirectly @return COSDictionary instance representing the parsed dictionary
1610 Performs the initial parsing of a PDF document, creating and configuring a PDDocument instance. @param lenient whether to proceed in strict or lenient mode @return the parsed PDDocument object @throws IOException if any error occurs during parsing or document creation
1611 Processes PDF stream operators from the given content stream. @param contentStream PDContentStream object containing the PDF data to process @throws IOException if an I/O error occurs while reading from the content stream
1612 Parses the PDF content stream and returns a list of extracted tokens.
1613 Retrieves the bounding box of a glyph. @return PDRectangle object representing the bounding box or null if not found
1614 Fetches the width of a Type 3 font character. @throws IOException if an I/O error occurs while parsing
1615 Writes the PDF document to a stream. @param doc the PDDocument instance to be written
1616 Saves the PDF document incrementally to an output stream. @param output OutputStream to write PDF document components
1617 Saves the PDF document to an output stream incrementally. @param output OutputStream to write the PDF document components @param objectsToWrite Set of COSDictionary objects to write
1618 Initializes a PDDocument instance with an in-memory stream cache.
1619 Retrieves the PDF document catalog. @return PDDocumentCatalog object or null if not found
1620 Retrieves a COSDictionary representing a specific page within the page tree. @param pageNum 1-based page number to fetch @param node parent dictionary to search in @return COSDictionary object for the requested page, or null if not found
1621 Creates a PDFileSpecification instance from the provided COSBase object. @param base COSBase object to create file specification from @return PDFileSpecification object or null if base is null
1622 Notifies the structure element of attribute changes. @param PDAttributeObject: attribute object triggering notification
1623 Adds an objectable child element to the existing list of children associated with this structure node. @param objectable child element to append, must not be null
1624 Inserts an object before a reference node in the structure. @param newKid new child node to insert @param refKid reference node to insert before
1625 Removes a specified child COSObjectable from the collection of kids. @param objectable the element to be removed
1626 Sets the standard cryptographic filter dictionary. @param cryptFilterDictionary PDCryptFilterDictionary object to be stored
1627 Sets the default cryptographic filter dictionary. @param defaultFilterDictionary PDCryptFilterDictionary object to be stored as default
1628 Initializes an instance of FDFAnnotation with default properties.
1629 Initializes an instance of FDFAnnotationCircle with default properties.
1630 Initializes an instance of FDFAnnotationFileAttachment with default properties and subtype.
1631 Initializes an instance of FDFAnnotation with default properties. @param SUBTYPE annotation subtype (default: COSName.SUBTYPE)
1632 Initializes an instance of FDFAnnotationInk with default properties. Sets the subtype to COSName.SUBTYPE.
1633 Initializes an instance of FDFAnnotation with default properties. @param SUBTYPE annotation subtype (line)
1634 Initializes an instance of FDFAnnotationLink with default properties.
1635 Initializes a new instance of FDFAnnotationPolygon with default properties.
1636 Initializes an instance of FDFAnnotationPolyline with default properties.
1637 Initializes an instance of FDFAnnotationSound with default properties.
1638 Initializes an instance of FDFAnnotationSquare with default properties.
1639 Initializes an instance of FDFAnnotationStamp with default subtype.
1640 Initializes an instance of FDFAnnotation with default properties.
1641 Initializes an instance of FDFAnnotationTextMarkup with default properties.
1642 Builds vertical metrics for a given CID font. @param cidToGid map of CID to GID mappings @throws IOException if an I/O error occurs
1643 Builds the vertical metrics for a CID font by fetching and processing glyph information. @param cidFont The CID font dictionary to update
1644 Initializes an instance of the PDSimpleFont class with default values.
1645 Retrieves an optional content group by name. @param name unique identifier of the group @return PDOptionalContentGroup object if found, null otherwise
1646 Retrieves and initializes optional content groups as a Collection. @return Collection of initialized PDOptionalContentGroup objects or empty if not found
1647 Sets decode values and updates dictionary item. @param decodeValues array of decode values to be set
1648 Sets decode values and updates dictionary item. @param decodeValues array of decode values to be set
1649 Sets the line width using a floating-point value. @param width new line width in points
1650 Sets the miter limit in the extended graphics state. @param miterLimit floating-point value for the miter limit
1651 Sets the flatness tolerance. @param flatness floating-point value representing the maximum allowable deviation from straight lines in graphics rendering
1652 Sets the smoothness tolerance. @param smoothness floating-point value representing the smoothness tolerance
1653 Sets stroking alpha constant. @param alpha stroking transparency value (0.0 - 1.0)
1654 Sets the non-stroking alpha constant. @param alpha alpha value (0.0 to 1.0) for non-stroking operations
1655 Initializes a new instance of the PDAnnotationLink class with default annotation type. Sets subtype to "SUB_TYPE".
1656 Initializes a new instance of the PDAnnotationMarkup class with default annotation properties.
1657 Initializes a new instance of the PDAnnotationPopup class with default annotation subtype.
1658 Initializes the annotation widget with default subtype.
1659 Initializes a PDAnnotationLink instance from a COSDictionary. @param dict the underlying dictionary representation of the annotation
1660 Initializes a PDAnnotationMarkup instance from a COSDictionary. @param dict the underlying dictionary representation of the annotation
1661 Initializes a PDAnnotationPopup instance from a COSDictionary. @param field underlying dictionary representation of the annotation
1662 Initializes a PDAnnotationUnknown instance from a COSDictionary. @param dic COSDictionary containing annotation data
1663 Initializes a PDAnnotation instance from a COSDictionary. @param field the underlying dictionary representation of the annotation
1664 Sets uniform rectangle margin differences for the caret annotation. @param difference single margin difference value
1665 Sets uniform differences between the annotation's rectangle and its parent container. @param difference single margin value for all sides
1666 Sets uniform rectangle differences for the annotation square circle. @param difference value to apply to all sides
1667 Sets the border line based on the provided parameters. @param lineWidth new line width value @param bs PDBorderStyleDictionary object or null if not applicable @param border COSArray representing the border style @throws IOException if an I/O error occurs
1668 Sets required key usage flags for digital signature certificate. @param digitalSignature allows signing @param nonRepudiation prevents denial of signature @param keyEncipherment encrypts keys @param dataEncipherment encrypts data @param keyAgreement enables key exchange @param keyCertSign enables certification of public keys @param cRLSign enables certification of CRLs @param encipherOnly allows only encryption @param decipherOnly allows only decryption
1669 Initializes a PDCheckBox instance from an AcroForm. @param acroForm PDAcroForm object to initialize the checkbox from
1670 Initializes a PDComboBox instance with default properties and sets its editable state to combo mode.
1671 Initializes a PDListBox instance with default properties from a PDAcroForm.
1672 Sets the selected value in a single-valued choice field. @param value input string to be encoded
1673 Updates selected options index by finding corresponding values in the given list of options and sorting them. @param values list of selected option values @param options list of available option values
1674 Retrieves the annotation's border, ensuring it has at least 3 elements. @return COSArray object representing the border
1675 Initializes the compression pool with a PDDocument and CompressParameters. @param document PDF document to be compressed @param parameters optional compression settings, defaults to empty if null
1676 Retrieves date from dictionary within an embedded PDF object. @param embedded embedded PDF object @param key unique dictionary identifier
