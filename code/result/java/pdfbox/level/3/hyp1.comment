1 Initializes graphics stream engine for a specific PDF page. @param page PDPage to be processed
2 Initializes the PDFMarkedContentExtractor with default settings. Uses null encoding and sets up default operators for handling marked content.
3 Initializes PDFTextStripperByArea with bead separation disabled.
4 Retrieves object from a specified path in the PDF document. @param objPath path to the object, using '.' as separator @return COSBase object or null if not found
5 Retrieves a destination by name from the PDF document. @param name destination name to look up @return PDDestination object or null if not found @throws IOException if an error occurs during retrieval
6 Retrieves the value of a specified attribute from the PDF dictionary. @param attrName name of the attribute to retrieve @return the associated COSBase object or null if not found
7 Retrieves the attribute value for a given name, returning default if absent. @param attrName the name of the attribute to retrieve @param defaultValue the default value to return if attribute is not found @return the COSBase object or default value if null
8 Checks if an attribute with the given name is specified. @param name the attribute name to check @return true if the attribute exists, false otherwise
9 Retrieves an array of strings from the COSDictionary by key. @param name the dictionary key @return array of string values or null if not found
10 Retrieves a named attribute's value as a string or array of strings. @param name the key for the attribute @param defaultValue default value if attribute is not found @return String or String[] of names, or defaultValue if not applicable
11 Retrieves a number or name from the dictionary. @param name key for the attribute to retrieve @param defaultValue default value if attribute not found @return float value of COSNumber or string of COSName, otherwise defaultValue
12 Retrieves a number or an array of numbers from the dictionary. @param name key for the attribute @param defaultValue default value if not found @return float or float[] representing the retrieved numbers, or null if unspecified and no default
13 Retrieves gamma values for a specified color. @param name the color attribute key @return PDGamma object or null if not found
14 Creates a unique key for a resource dictionary. @param kind type of resource dictionary @param prefix base string for the key @return unique COSName key
15 Parses a hexadecimal string from the source and returns it as a COSString. Handles invalid characters by discarding unmatched hex digits. @return COSString object representing the parsed bytes @throws IOException if an I/O error occurs or the closing bracket is missing
16 Sets file filters for the PDF stream. @param filters list of filter names to apply
17 Creates a default PDRectangle with zero dimensions.
18 Constructs a PDRectangle with dimensions at origin. @param width rectangle width @param height rectangle height
19 Creates a PDRectangle based on bounding box coordinates. @return PDRectangle object representing the border's bounds
20 Calculates the difference rectangle between annotation bounds and bounding box. @return PDRectangle representing the difference or a default small rectangle if annotRect is null
21 Creates a padded rectangle by adding specified padding to the original rectangle's sides. @param rectangle original PDRectangle to pad @param padding amount of padding to add on each side @return new PDRectangle with added padding
22 Adjusts a rectangle's position and size based on given differences. @param rectangle original PDRectangle to adjust @param differences array of four floats representing adjustments [left, bottom, right, top] @return new PDRectangle with adjusted dimensions or original if differences are invalid
23 Adjusts a PDRectangle by specified differences. @param rectangle original rectangle to adjust @param differences array containing x and y offset, width and height adjustments @return new PDRectangle with applied differences or original if invalid input
24 Applies padding to a rectangle. @param box original PDRectangle @param padding amount of padding to add @return new PDRectangle with applied padding
25 Initializes a new PDFXRefStream with a COSDocument. @param cosDocument the document to associate with this stream
26 Creates a new PDObjectStream within a PDF document. @param document PDDocument where the stream will be created @return PDObjectStream object initialized with a new COSStream
27 Initializes a new PDF stream associated with a given document. @param document PDDocument to which this stream belongs
28 Initializes a new PDStream with a COSStream from the given document. @param document PDF document to create the stream from
29 Initializes a PDStream with data from an InputStream. @param doc PDDocument to associate the stream with @param input InputStream containing PDF data @param filters COSBase object representing filters to apply @throws IOException if I/O operations fail
30 Creates a raw COSStream from an input stream. @param document PDDocument where the stream will be created @param rawInput InputStream containing the data for the stream @return COSStream with transferred data @throws IOException if I/O operations fail
31 Encodes an input stream using specified parameters. @param input the InputStream to be encoded @param encoded the OutputStream for encoded data @param parameters COSDictionary containing encoding parameters @param index index of the current filter operation (unused in this method) @throws IOException if an I/O error occurs during encoding
32 Default constructor for PDDefaultAttributeObject.
33 Initializes user attribute object with default owner.
34 Default constructor for PDStandardAttributeObject.
35 Constructs a new PDOutlineItem without initializing any children or parent.
36 Constructs a new PDVariableText instance. @param acroForm the AcroForm containing the field
37 Constructs a PDExportFormatAttributeObject from a COSDictionary. @param dictionary the COSDictionary to wrap
38 Retrieves the appearance stream for this entry. @return PDAppearanceStream object if the entry is a stream @throws IllegalStateException if the entry is not an appearance stream
39 Retrieves appearance streams from a sub-dictionary. @return Map of COSName to PDAppearanceStream objects @throws IllegalStateException if the entry is not an appearance subdictionary
40 Creates a PDXObject based on the given COSBase and resources. @param base the underlying COSBase object @param resources PDResources for resource management @return PDXObject instance or throws IOException for invalid types
41 Adds TrueType or OpenType font information to the list. @param ttfFile Font file to be added
42 Constructs a new PDShadingType6 instance from a COSDictionary. @param shadingDictionary the COSDictionary representing Type 6 shading properties
43 Constructs a new PDShadingType7 instance from a COSDictionary. @param shadingDictionary the COSDictionary representing Type 7 shading properties
44 Constructs a new combo box field in a PDF form. @param acroForm the AcroForm containing the field @param field the COSDictionary representing the field data @param parent the parent PDNonTerminalField, if any
45 Constructs a new list box field in a PDF form. @param acroForm the AcroForm containing the field @param field the COSDictionary representing the field data @param parent the parent PDNonTerminalField, if any
46 Initializes PDF parser with source and security details. @param source input stream for the PDF document @param password decryption password, if required @param keyStore keystore containing encryption keys @param keyAlias alias for the key in the keystore @throws IOException on I/O errors during initialization
47 Initializes PDFParser with PDF source and security details. @param source input stream for the PDF document @param decryptionPassword decryption password, if required @param keyStore keystore containing encryption keys @param alias alias for the key in the keystore @param streamCacheCreateFunction function to create stream cache @throws IOException on I/O errors during initialization
48 Creates an output stream for writing data to the PDF stream. @return OutputStream for writing data @throws IOException if an I/O error occurs or stream is already open
49 Writes byte data to a PDF appearance stream. @param data bytes to be written @param appearanceStream target appearance stream @throws IOException if an I/O error occurs
50 Initializes a new content stream for a PDF appearance with optional compression. @param appearance the PDAppearanceStream to write to @param compress whether to apply compression (FLATE_DECODE) @throws IOException if an I/O error occurs or stream is already open
51 Sets the text matrix for transforming text. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs
52 Applies a transformation to the graphics state. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs
53 Starts a text block in the PDF content stream. Throws an exception if already in text mode. @throws IOException if an I/O error occurs
54 Starts a text block in the PDF content stream. Throws an exception if already in text mode. @throws IOException if an I/O error occurs
55 Begins a text block in the PDF content stream. Throws an exception if already in text mode. @throws IOException if an I/O error occurs
56 Begins a text block in the PDF content stream. Throws an exception if already in text mode. @throws IOException if an I/O error occurs
57 Ends text mode and writes the end-of-text operator to the PDF content stream. @throws IllegalStateException if not in text mode @throws IOException if an I/O error occurs
58 Ends text mode and writes the end-of-text operator to the PDF content stream. Must be called after beginText(). @throws IOException if an I/O error occurs or not in text mode
59 Ends text mode and writes the end-of-text operator to the PDF content stream. @throws IOException if an I/O error occurs or text mode was not started
60 Ends text mode and writes the end-of-text operator to the PDF content stream. @throws IOException if an I/O error occurs or if not in text mode
61 Sets the text leading in the PDF content stream. @param leading the distance between lines of text @throws IOException if an I/O error occurs
62 Sets the text leading in the PDF content stream. @param leading the distance between lines of text @throws IOException if an I/O error occurs
63 Sets the text leading in the PDF content stream. @param leading the distance between lines of text @throws IOException if an I/O error occurs
64 Sets the text leading in the PDF content stream. @param leading the distance between lines of text @throws IOException if an I/O error occurs
65 Moves to the next line in text mode. Throws exception if not in text mode. @throws IOException if an I/O error occurs
66 Moves to the next line in text mode. Throws exception if not in text mode. @throws IOException if an I/O error occurs
67 Moves to the next line in text mode. Throws exception if not in text mode. @throws IOException if an I/O error occurs
68 Moves to the next line in text mode. Throws exception if not in text mode. @throws IOException if an I/O error occurs
69 Moves the text cursor to a new position within the current text block. @param tx horizontal offset from the current position @param ty vertical offset from the current position @throws IOException if an I/O error occurs
70 Moves the text cursor to a new position. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs or not in text mode
71 Moves the text cursor to a new position. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs or not in text mode
72 Moves the text cursor to a new position within a text block. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs or if not in text mode
73 Saves the current graphics state. Throws an exception if called within text mode. @throws IOException if an I/O error occurs while writing to the content stream
74 Saves the current graphics state. Throws an exception if called within text mode. @throws IOException if an I/O error occurs while writing to the content stream
75 Saves the current graphics state. Throws an exception if called within text mode. @throws IOException if an I/O error occurs while writing to the content stream
76 Saves the current graphics state. Throws an exception if called within text mode. @throws IOException if an I/O error occurs while writing to the content stream
77 Restores the previous graphics state. Throws IllegalStateException if called within text mode. @throws IOException if an I/O error occurs
78 Restores the graphics state from the stack. Throws IllegalStateException if called within text mode. @throws IOException if an I/O error occurs
79 Restores the graphics state from the stack. Throws IllegalStateException if called within text mode. @throws IOException if an I/O error occurs
80 Restores the graphics state from the stack. Throws IllegalStateException if called within text mode. @throws IOException if an I/O error occurs
81 Sets the stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs or parameters are out of range
82 Sets the stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs or parameters are invalid
83 Sets the stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IllegalArgumentException if parameters are outside 0..1 range @throws IOException if an I/O error occurs
84 Sets the stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 range @throws IOException if an I/O error occurs
85 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
86 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
87 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
88 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
89 Sets the stroking color for grayscale. Validates that the parameter is within 0..1 and throws an exception if not. @param g grayscale value (must be within 0..1) @throws IOException if an I/O error occurs
90 Sets the stroking color for grayscale. @param g grayscale value (must be within 0..1) @throws IOException if an I/O error occurs
91 Sets the stroking color for grayscale. @param g grayscale value (must be within 0..1) @throws IOException if an I/O error occurs
92 Sets the stroking color for grayscale. @param g grayscale value (must be within 0..1) @throws IOException if an I/O error occurs
93 Sets non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs or parameters are out of range
94 Sets non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs or parameters are out of range
95 Sets non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IllegalArgumentException if parameters are outside 0..1 range @throws IOException if an I/O error occurs
96 Sets non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) Validates and writes RGB color to the content stream.
97 Sets the non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if any parameter is outside the 0..1 range @throws IOException if an I/O error occurs while writing to the stream
98 Sets the non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
99 Sets the non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
100 Sets the non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if parameters are outside 0..1 range @throws IOException if an I/O error occurs
101 Sets non-stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IllegalArgumentException if g is outside the range [0, 1] @throws IOException if an I/O error occurs during writing
102 Sets the non-stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
103 Sets non-stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IllegalArgumentException if g is outside the range [0, 1] @throws IOException if an I/O error occurs
104 Sets non-stroking color to grayscale. Validates and writes the color value to the content stream. @param g grayscale value (0.0 to 1.0) @throws IllegalArgumentException if the parameter is outside the valid range @throws IOException if an I/O error occurs
105 Adds a rectangle to the PDF content stream. @param x coordinate of the lower-left corner @param y coordinate of the lower-left corner @param width of the rectangle @param height of the rectangle @throws IOException if an I/O error occurs or if called within a text block
106 Adds a rectangle to the PDF content stream. @param x coordinate of the lower-left corner @param y coordinate of the lower-left corner @param width of the rectangle @param height of the rectangle @throws IOException if an I/O error occurs or if called within text mode
107 Adds a rectangle to the PDF content stream. @param x coordinate of the lower-left corner @param y coordinate of the lower-left corner @param width of the rectangle @param height of the rectangle @throws IOException if an I/O error occurs @throws IllegalStateException if called within a text block
108 Adds a rectangle to the PDF content stream. @param x coordinate of the lower-left corner @param y coordinate of the lower-left corner @param width of the rectangle @param height of the rectangle @throws IOException if an I/O error occurs or if called within a text block
109 Adds a cubic Bézier curve to the PDF content stream. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs or called within text mode
110 Adds a cubic Bézier curve to the PDF content stream. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs or if called within text mode
111 Adds a cubic Bézier curve to the PDF content stream. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs or if called within a text block
112 Adds a cubic Bézier curve to the PDF content stream. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs or if called within a text block
113 Draws a cubic Bézier curve with replicated initial point. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 final point's X coordinate @param y3 final point's Y coordinate @throws IOException if an I/O error occurs or called within a text block
114 Draws a cubic Bézier curve with replicated initial point. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 final point's X coordinate @param y3 final point's Y coordinate @throws IOException if an I/O error occurs or called within a text block
115 Draws a cubic Bézier curve with replicated initial point. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 final point's X coordinate @param y3 final point's Y coordinate @throws IOException if an I/O error occurs or called within a text block
116 Draws a cubic Bézier curve with replicated initial point. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 final point's X coordinate @param y3 final point's Y coordinate @throws IOException if an I/O error occurs or called within a text block
117 Draws a cubic Bézier curve with replicated final control point. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the end point (also second control point) @param y3 y-coordinate of the end point (also second control point) @throws IOException if an I/O error occurs or if called within a text block
118 Draws a cubic Bézier curve with replicated final control point. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the end point (also second control point) @param y3 y-coordinate of the end point (also second control point) @throws IOException if an I/O error occurs or called within a text block
119 Draws a cubic Bézier curve with replicated final control point. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the end point (also second control point) @param y3 y-coordinate of the end point (also second control point) @throws IOException if an I/O error occurs or if called within a text block
120 Draws a cubic Bézier curve with replicated final control point. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the end point (also second control point) @param y3 y-coordinate of the end point (also second control point) @throws IOException if an I/O error occurs or if called within a text block
121 Moves the current point to (x, y) in the PDF content stream. @param x the x-coordinate of the new position @param y the y-coordinate of the new position @throws IOException if an I/O error occurs or if called within a text block
122 Moves the current point to (x, y) in the PDF content stream. @param x the x-coordinate of the new position @param y the y-coordinate of the new position @throws IOException if an I/O error occurs or if called within a text block
123 Moves the current point to (x, y) in the PDF content stream. @param x the x-coordinate of the new position @param y the y-coordinate of the new position @throws IOException if an I/O error occurs or if called within a text block
124 Moves the current point to (x, y) in the PDF content stream. @param x the x-coordinate of the new position @param y the y-coordinate of the new position @throws IOException if an I/O error occurs or if called within a text block
125 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs or method is called within text mode
126 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs or method is called within text mode
127 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs or method is called within text mode
128 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs or method is called within text mode
129 Strokes the current path in the PDF content stream. Throws an exception if called within a text block.
130 Strokes the current path in the PDF content stream. Throws an exception if called within a text block.
131 Strokes the current path in the PDF content stream. Throws an exception if called within a text block.
132 Strokes the current path in the PDF content stream. Throws an exception if called within a text block.
133 Closes and strokes the current path. Throws exception if called within a text block.
134 Closes the current path and strokes it. Throws exception if called within a text block.
135 Closes the current path and strokes it. Throws exception if called within a text block.
136 Closes the current path and strokes it. Throws exception if called within a text block.
137 Fills the current path using non-zero winding rule. Throws exception if called within text mode. @throws IOException if an I/O error occurs
138 Fills the current path using non-zero winding rule. Throws exception if called within text mode. @throws IOException if an I/O error occurs
139 Fills the current path using non-zero winding rule. Throws exception if called within text mode. @throws IOException if an I/O error occurs
140 Fills the current path using non-zero winding rule. Throws exception if called within text mode. @throws IOException if an I/O error occurs
141 Fills the current path using the even-odd winding rule. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
142 Fills the current path using the even-odd winding rule. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
143 Fills the current path using the even-odd winding rule. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
144 Fills the current path using the even-odd winding rule. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
145 Fills and strokes the current path. Throws exception if called within a text block. @throws IOException if an I/O error occurs during operation
146 Fills and strokes the current path. Throws exception if called within a text block. @throws IOException if an I/O error occurs during operation
147 Fills and strokes the current path on the PDF page. Throws exception if called within a text block. @throws IOException if an I/O error occurs during operation
148 Fills and strokes the current path. Throws exception if called within a text block. @throws IOException if an I/O error occurs during operation
149 Fills and strokes the current path using even-odd rule. Throws exception if called within text mode. @throws IOException if an I/O error occurs
150 Fills and strokes the current path using even-odd rule. Throws exception if called within text mode. @throws IOException if an I/O error occurs
151 Fills and strokes the current path using even-odd rule. Throws exception if called within text mode. @throws IOException if an I/O error occurs
152 Fills and strokes the current path using even-odd rule. Throws exception if called within text mode. @throws IOException if an I/O error occurs
153 Closes path, fills and strokes it. Throws exception if called within a text block. @throws IOException if an I/O error occurs
154 Closes the current path, fills it using non-zero winding rule, and strokes it. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during operation
155 Closes path, fills and strokes it. Throws exception if in text mode. @throws IOException if an I/O error occurs
156 Closes the current path, fills it using non-zero winding rule, and strokes it. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
157 Closes the path, fills it using even-odd rule, and strokes it. Throws exception if called within a text block. @throws IOException if an I/O error occurs
158 Closes the path, fills it using even-odd rule, and strokes it. Throws exception if called within a text block. @throws IOException if an I/O error occurs
159 Closes the path, fills it using even-odd rule, and strokes it. Throws exception if called within a text block. @throws IOException if an I/O error occurs
160 Closes the path, fills it using even-odd rule, and strokes it. Throws exception if called within a text block. @throws IOException if an I/O error occurs
161 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
162 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
163 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
164 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
165 Clips the current path to the current clipping path. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs
166 Clips the current path to the clipping area. @throws IOException if an I/O error occurs
167 Clips the current path to the current clipping path. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs
168 Clips the current path to the clipping area. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
169 Clips the current path using even-odd rule. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs
170 Clips the current path using even-odd rule. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs
171 Clips the current path using even-odd rule. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs
172 Clips the current path using even-odd rule. @throws IOException if an I/O error occurs
173 Sets the line width for drawing operations. @param lineWidth the desired width of the line @throws IOException if an I/O error occurs
174 Sets the line width for drawing operations. @param lineWidth the desired width of the line @throws IOException if an I/O error occurs
175 Sets the line width for drawing operations. @param lineWidth the desired width of the line @throws IOException if an I/O error occurs
176 Sets the line width for drawing operations. @param lineWidth the desired width of the line @throws IOException if an I/O error occurs
177 Sets the line join style in the PDF content stream. @param lineJoinStyle integer representing the join style (0, 1, or 2) @throws IOException if an I/O error occurs or invalid value is provided
178 Sets the line join style in the PDF content stream. @param lineJoinStyle integer representing the join style (0, 1, or 2) @throws IOException if an I/O error occurs
179 Sets the line join style in the PDF content stream. @param lineJoinStyle integer representing the join style (0, 1, or 2) @throws IOException if an I/O error occurs
180 Sets the line join style in the PDF content stream. @param lineJoinStyle integer representing the join style (0, 1, or 2) @throws IOException if an I/O error occurs
181 Sets the line cap style in the PDF content stream. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs or invalid line cap style is provided
182 Sets the line cap style in the PDF content stream. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs or invalid line cap style is provided
183 Sets the line cap style in the PDF content stream. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs
184 Sets the line cap style in the PDF content stream. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs
185 Sets the line dash pattern for drawing. @param pattern array of float values representing dash lengths @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs
186 Sets the line dash pattern for drawing. @param pattern array of float values representing dash lengths @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs
187 Sets the line dash pattern for drawing. @param pattern array of float values representing dash lengths @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs
188 Sets the line dash pattern for drawing. @param pattern array of float values representing dash lengths @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs
189 Sets the line miter limit for PDF rendering. @param miterLimit the miter limit value to set @throws IllegalArgumentException if miterLimit is <= 0 @throws IOException if an I/O error occurs
190 Sets the line miter limit for PDF rendering. @param miterLimit the miter limit value to set (must be > 0) @throws IllegalArgumentException if miterLimit is <= 0 @throws IOException if an I/O error occurs
191 Sets the line miter limit for PDF rendering. @param miterLimit the miter limit value to set @throws IllegalArgumentException if miterLimit is <= 0 @throws IOException if an I/O error occurs
192 Sets the line miter limit for PDF rendering. Validates that miterLimit is greater than 0 and writes the operator to the content stream. @param miterLimit the miter limit value to set @throws IllegalArgumentException if miterLimit is <= 0 @throws IOException if an I/O error occurs
193 Ends a marked content section in the PDF. @throws IOException if an I/O error occurs
194 Ends a marked content section in the PDF. @throws IOException if an I/O error occurs
195 Ends a marked content section in the PDF.
196 Ends a marked content section in the PDF. @throws IOException if an I/O error occurs
197 Sets character spacing in the PDF content stream. @param spacing float value representing the space between characters @throws IOException if an I/O error occurs while writing to the stream
198 Sets character spacing in the PDF content stream. @param spacing float value representing the space between characters @throws IOException if an I/O error occurs while writing to the stream
199 Sets character spacing in the PDF content stream. @param spacing float value representing the space between characters @throws IOException if an I/O error occurs while writing to the stream
200 Sets character spacing in the PDF content stream. @param spacing float value representing the space between characters @throws IOException if an I/O error occurs while writing to the stream
201 Sets word spacing in the PDF content stream. @param spacing the word spacing value to apply @throws IOException if an I/O error occurs
202 Sets word spacing in the PDF content stream. @param spacing the word spacing value to apply @throws IOException if an I/O error occurs
203 Sets word spacing in the PDF content stream. @param spacing the word spacing value to apply @throws IOException if an I/O error occurs
204 Sets word spacing in the PDF content stream. @param spacing the word spacing value to apply @throws IOException if an I/O error occurs
205 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if an I/O error occurs
206 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if an I/O error occurs
207 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if an I/O error occurs
208 Sets text horizontal scaling. @param scale scaling factor to apply @throws IOException if an I/O error occurs
209 Sets the text rendering mode. @param rm RenderingMode to apply @throws IOException if an I/O error occurs
210 Sets text rendering mode in PDF form content stream. @param rm RenderingMode to apply @throws IOException if an I/O error occurs
211 Sets the text rendering mode. @param rm RenderingMode to apply @throws IOException if an I/O error occurs
212 Sets the text rendering mode. @param rm RenderingMode to apply @throws IOException if an I/O error occurs
213 Sets text rise in PDF content stream. @param rise value to adjust the position of text above or below the baseline @throws IOException if an I/O error occurs
214 Sets text rise in PDF content stream. @param rise value to adjust the position of text above or below the baseline @throws IOException if an I/O error occurs
215 Sets text rise in PDF content stream. @param rise value to adjust the position of text above or below the baseline @throws IOException if an I/O error occurs
216 Sets text rise in PDF content stream. @param rise value to adjust the position of text above or below the baseline @throws IOException if an I/O error occurs
217 Retrieves the bounding box of the marked content. @return PDRectangle representing the bounding box or null if not found
218 Retrieves the bounding box for the layout attribute. @return PDRectangle object representing the bounding box or null if not found
219 Retrieves the rectangle bounds of the annotation. @return PDRectangle object representing the annotation's bounding box or null if not set
220 Retrieves the fringe rectangle of the annotation. @return PDRectangle object representing the fringe or null if not set
221 Retrieves the fringe rectangle of the annotation. @return PDRectangle representing the fringe or null if not set
222 Retrieves the fringe rectangle of the free text annotation. @return PDRectangle object representing the fringe or null if not set
223 Retrieves the fringe rectangle of the annotation. @return PDRectangle representing the fringe or null if not set
224 Retrieves the font bounding box. @return PDRectangle object representing the font bounding box or null if not found
225 Retrieves the font bounding box. @return PDRectangle object or null if not found
226 Retrieves the bounding box of the form XObject. @return PDRectangle representing the bounding box or null if not set
227 Retrieves the bounding box of the tiling pattern. @return PDRectangle representing the bounding box or null if not found
228 Retrieves the bounding box for the shading. @return PDRectangle representing the bounding box or null if not defined
229 Retrieves the rectangle associated with the annotation. @return PDRectangle object or null if invalid data
230 Retrieves the rectangle difference for the annotation. @return PDRectangle object representing the difference or null if not set
231 Retrieves the rectangle difference of the annotation. @return PDRectangle object representing the difference or null if not set
232 Retrieves the bounding box of the viewport. @return PDRectangle object representing the bounding box or null if not found
233 Retrieves the rectangle associated with the bead. @return PDRectangle object or null if not found
234 Sets the line dash pattern for drawing operations. @param array COSArray containing dash lengths @param phase initial phase of the dash pattern
235 Retrieves the line dash pattern from the graphics state. @return PDLineDashPattern object or null if not defined
236 Generates a stencil image from a PDF image using a specified paint. @param pdImage the PDF image to process @param paint the paint color for masking @return BufferedImage with applied mask or null if error occurs @throws IOException if an I/O error occurs during processing
237 Retrieves the transformation matrix for this form XObject. @return a new Matrix initialized from the COSBase object or an empty Matrix if not found
238 Retrieves the transformation matrix of the pattern. @return Matrix object representing the pattern's transformation
239 Retrieves the transformation matrix for the shading. @return Matrix object representing the transformation matrix or null if not found
240 Retrieves an inheritable attribute from a PDF page node. @param node current COSDictionary representing the page node @param key attribute key to search for @return COSBase value of the attribute or null if not found
241 Retrieves a boolean value from the dictionary using specified keys. @param key primary key to look up @param defaultValue default boolean value if key is missing @return boolean value associated with the key or default if not found
242 Retrieves an integer value for a specified key. @param key primary key to look up @param defaultValue default integer value if key is not found @return integer value from dictionary or default if missing
243 Retrieves an integer value for specified keys. @param firstKey primary key to look up @param secondKey secondary key if the first is not found @return integer value from dictionary or -1 if missing
244 Constructs a PDInlineImage object. @param parameters dictionary containing image parameters @param data raw image data @param resources resource objects for the PDF document @throws IOException if an error occurs during decoding
245 Determines the file suffix based on image filters. @return Suffix like "jpg", "tiff", or "png"
246 Retrieves COS objects of specified types from the document. @param type1 first expected COSName type @param type2 second optional expected COSName type @return List of COSObjects matching the specified types
247 Converts a character code to its Unicode representation using a custom glyph list. @param code character code to convert @param customGlyphList optional custom glyph list for conversion @return Unicode string or null if not found
248 Checks if the PDF document is encrypted. @return true if the document is encrypted, false otherwise
249 Parses an FDF document and returns an FDFDocument object. Handles header validation and initial parsing, ensuring proper closure on exceptions. @return FDFDocument representing parsed data or null if exception occurs @throws IOException if I/O error during parsing
250 Retrieves or creates the AcroForm of the document with default fixes. @return PDAcroForm object or null if not found
251 Checks if a color space resource exists by name. @param name the specific color space name @return true if the color space is found, false otherwise
252 Retrieves an extended graphics state by name. @param name the name of the graphics state @return PDExtendedGraphicsState object or null if not found
253 Checks if a resource is an Image XObject. @param name the specific resource name @return true if the resource is an Image XObject; false otherwise
254 Retrieves color space resource names. @return Iterable of COSName representing color spaces or empty set if none found
255 Retrieves XObject names from resources. @return Iterable of COSName representing XObjects or empty set if not found
256 Retrieves font names from PDF resources. @return Iterable of COSName representing font names or empty set if none found
257 Retrieves property names from PDF resources. @return Iterable of COSName representing property names
258 Retrieves shading resource names. @return Iterable of COSName representing shading resources
259 Retrieves pattern resource names. @return Iterable of COSName representing pattern resources
260 Retrieves external graphics state names. @return Iterable of COSName representing external graphics states
261 Retrieves the standard cryptographic filter dictionary. @return PDCryptFilterDictionary object or null if not found
262 Retrieves the default cryptographic filter dictionary. @return PDCryptFilterDictionary object or null if not found
263 Retrieves a character procedure for a given code. @param code the encoding code to look up @return PDType3CharProc object or null if not found
264 Retrieves the rollover appearance of the annotation. @return PDAppearanceEntry object or normal appearance if not found
265 Retrieves the down appearance of the annotation. @return PDAppearanceEntry object or normal appearance if not found
266 Retrieves the first child outline item. @return PDOutlineItem representing the first child, or null if none exists
267 Retrieves the last child outline item. @return PDOutlineItem object representing the last child or null if not found
268 Retrieves the digital signature from the field. @return PDSignature object or null if not found
269 Retrieves the value at a specified index. @param index position of the value to retrieve @return COSObjectable value or null if not found @throws IOException if an I/O error occurs during retrieval
270 Calculates the number of output parameters. @return int representing the count of output parameters
271 Retrieves the output range for a specified parameter. @param n index of the output parameter @return PDRange object representing the range or null if not found
272 Clips each input value to its corresponding range. @param inputValues array of values to clip @return array of clipped values or original if ranges are not available
273 Retrieves the number of input parameters. @return int representing the count of input parameters
274 Retrieves the domain range for a specific input parameter. @param n index of the input parameter @return PDRange object representing the domain or null if not found
275 Calculates sample index from coordinate vector. @param vector input coordinate vector @return calculated sample index
276 Retrieves the decode range for a specific parameter. @param paramNum index of the parameter @return PDRange object or null if not available
277 Retrieves and initializes a PDRange for a specific parameter. @param n index of the parameter in the Encode array @return PDRange object representing the range for the nth parameter
278 Checks if the top edge of the marked content is attached. @return true if the top edge is attached; false otherwise
279 Checks if the bottom edge of the marked content is attached. @return true if bottom edge is attached; false otherwise
280 Checks if the left edge of the content is attached. @return true if left edge is attached; false otherwise
281 Checks if the right edge of the content is attached. @return true if the right edge is attached; false otherwise
282 Initializes a new instance of PDCIDFont. @param fontDictionary CIDFont dictionary containing font data @param parent PDType0Font parent font object
283 Initializes a new DictionaryEncoding with the given font encoding. @param fontEncoding COSDictionary containing font encoding information
284 Initializes a DictionaryEncoding with given font encoding details. @param fontEncoding COSDictionary representing the font encoding @param isNonSymbolic flag indicating if the font is non-symbolic @param builtIn Encoding instance for symbolic fonts
285 Initializes a new ShadingContext for rendering PDF shading. @param shading PDShading object representing the shading @param cm ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if there's an issue accessing the dictionary or converting colors
286 Retrieves the decode range for a specific parameter. @param paramNum index of the parameter (0-based) @return PDRange object or null if not found
287 Retrieves signed content from a PDF file. @param pdfFile input stream of the PDF document @return byte array containing signed content @throws IOException if an I/O error occurs
288 Extracts signed content from a PDF file. @param pdfFile byte array of the PDF document @return byte array containing the signed content @throws IOException if I/O error occurs during processing
289 Retrieves the revision number of the digital signature. @return the revision number as a long value
290 Retrieves the minimum revision number. @return long value representing the minimum revision or default (-1) if not set
291 Creates a COSInputStream for decoding PDF data. @param filters list of Filter objects to apply @param parameters dictionary of decoding parameters @param in input stream containing encoded data @param options additional decode options @return COSInputStream with decoded data @throws IOException if an I/O error occurs during decoding
292 Creates a view of the stream with applied filters. @return RandomAccessRead object representing the decoded stream data @throws IOException if an I/O error occurs during stream processing
293 Creates an input stream for the PDF stream with optional filter exclusion. @param stopFilters list of filters to skip during decoding @return InputStream with decoded data @throws IOException if I/O error occurs
294 Retrieves a numeric value by its attribute name. @param name the attribute name @return the retrieved float value or -1 if not found
295 Retrieves the conversion factor from the COSDictionary. @return the conversion factor as a float, or -1 if not found
296 Retrieves the leader length of the line annotation. @return the leader length as a float value
297 Retrieves the leader extend value of the line annotation. @return the leader extend value as a float
298 Retrieves the leader offset of the line annotation. @return the leader offset value or -1 if not found
299 Retrieves the V value from the dictionary. @return the retrieved float value or -1 if not found
300 Retrieves the CYX value from the COS dictionary. @return the CYX float value or -1 if not found
301 Retrieves a float value by attribute name. @param name attribute key @param defaultValue default float value if not found @return the retrieved float value or default if not applicable
302 Retrieves the intensity of the border effect. @return intensity value as a float, defaulting to 0 if not found
303 Computes the font height for rendering. Adjusts bounding box and uses cap height or ascent/descent if available. @param font PDFont object to compute height for @return computed font height in text space
304 Calculates default position vector for CID. @param cid Character Identifier for the font @return Vector representing default position
305 Retrieves and caches properties for a given name. @param name key of the resource to retrieve @return PDPropertyList object or null if not found
306 Retrieves the optional content properties of the form XObject. @return PDPropertyList object representing optional content or null if not set
307 Retrieves the optional content properties of the image. @return PDPropertyList object representing optional content or null if not present
308 Retrieves optional content groups (OCGs) from the dictionary. @return List of PDPropertyList objects representing OCGs, or empty list if none found
309 Retrieves the optional content properties of the annotation. @return PDPropertyList object representing optional content or null if not present
310 Validates and corrects cross-reference offsets using brute force if necessary. @throws IOException if an I/O error occurs during validation or parsing
311 Saves FDF document to a file. @param fileName target file for saving the document @throws IOException if an I/O error occurs during saving
312 Sets the high value in the color table. @param high the high value to be set
313 Sets the page number for the destination. @param pageNumber target page number to set in the destination
314 Removes an element from the list if not filtered. @param o element to remove @return true if removed, false if not found or filtered
315 Removes an element at the specified index. Throws UnsupportedOperationException if the list is filtered. @param index position of the element to remove @return the removed element
316 Removes a COSBase object from the array. Handles indirect objects by dereferencing. @param o the COSBase object to remove @return true if the object was successfully removed, false otherwise
317 Removes a user property from the document. @param userProperty the property to remove
318 Removes a subject from the certificate's subject list. @param subject byte array representing the subject to remove
319 Removes a key usage extension from the certificate. @param keyUsageExtension the key usage extension to remove
320 Removes an issuer from the certificate's issuer list. @param issuer byte array representing the issuer to remove
321 Removes an OID from the certificate's OID list. @param oid the byte array representing the OID to remove
322 Clears all entries from both the internal map and the actuals collection.
323 Removes a key-value pair by PDF name. Converts the key to COSName and removes from both dictionary and actuals map. @param key PDF name string of the item to be removed @return value associated with the removed key, or null if not found
324 Recursively collects COSBase objects for document updates. @param array COSArray containing objects to process @return true if any collected object demands parent update, false otherwise
325 Collects and processes COS objects for document updates. @param object the COSObject to process @return false, always returns false after processing
326 Sets the origin document state without dereferencing. @param originDocumentState the new document state to set
327 Dereferences a child object and sets its origin document state. @param child the child object to be dereferenced
328 Retrieves the upper limit from the LIMITS array. @return String representing the upper limit or null if not found
329 Retrieves the lower limit value from the limits array. @return String representing the lower limit or null if not found
330 Retrieves string value by key from PDF dictionary. @param name the key for which to retrieve the value @return the string representation of the value or null if not found
331 Retrieves the rendering intent from the graphics state dictionary. @return RenderingIntent enum or null if not found
332 Retrieves the name associated with the named action. @return the name string or null if not found
333 Retrieves string value for a given key in PDF dictionary. @param key the key to look up @param defaultValue the value to return if key is not present @return the string value or default if not found
334 Retrieves the guideline style as a string. @return the guideline style or "Solid" if not found
335 Retrieves the icon associated with the text annotation. @return the icon name as a string or default note icon if not specified
336 Retrieves the attachment name. @return the attachment name as a string or default value if not found
337 Retrieves the line ending style of the annotation. @return the line ending style as a string or default if not found
338 Retrieves the highlight mode of the link annotation. @return highlight mode as a string or default value if not set
339 Retrieves the reply type of the annotation. Uses default value if not found. @return the reply type or default if not present
340 Retrieves the name of the rubber stamp annotation. @return the name as a string or "Draft" if not specified
341 Gets the name of the annotation. @return The name as a string or default value if not found
342 Retrieves the highlighting mode of the annotation. @return the highlighting mode as a string, default is "I"
343 Retrieves the border style of the annotation. @return the style as a string or "Solid" if not specified
344 Retrieves the type of external data. @return the type as a string, defaulting to "ExData" if not specified
345 Retrieves the transition style as a string. @return the style of the transition or default value if not found
346 Retrieves the dimension of the transition. @return the dimension as a string or default if not found
347 Retrieves the motion style of the transition. @return the motion style as a string or default if not found
348 Retrieves the non-full screen page mode preference. @return the page mode as a string or "UseNone" if not set
349 Retrieves the reading direction preference. @return Reading direction as a string ("L2R" or "R2L"), default is "L2R"
350 Retrieves the view area preference. @return the string representation of the view area or CropBox if not specified
351 Retrieves the view clipping setting. @return the view clip string or default boundary if not found
352 Retrieves the print area setting. @return print area as a string or default boundary if not set
353 Retrieves the print clip setting. @return the print clip value as a string or CropBox if not set
354 Retrieves print scaling preference. Uses default value if not found. @return the print scaling setting as a string
355 Checks if the given XRef offset is valid. @param startXRefOffset starting offset to check @return validated offset or -1 if invalid @throws IOException if an I/O error occurs during processing
356 Checks if the attribute object has only an owner and no other entries. @return true if size is 1 and owner exists, false otherwise
357 Retrieves the parent structure node. @return PDStructureNode object or null if no parent exists
358 Creates an object from a COSBase node. Handles different types of nodes and returns appropriate values. @param kid the COSBase node to process @return created object or null if unsupported type
359 Initializes PDF encryption with settings from a COSDictionary. @param dictionary containing encryption settings
360 Retrieves the security handler for PDF encryption. @return SecurityHandler configured for the document's protection policy @throws IOException if no security handler is available for the current filter
361 Retrieves annotations from the FDF document. @return List of FDFAnnotation objects or null if no annotations exist
362 Determines if character set matches between CIDSystemInfo and FontInfo. @param cidSystemInfo the CIDSystemInfo to compare @param info the FontInfo to compare @return true if character sets match, false otherwise
363 Checks if the DeviceN attributes represent an NChannel color space. @return true if the subtype is "NChannel"; false otherwise
364 Retrieves the open action or destination from the PDF document. @return PDDestinationOrAction object or null if not found @throws IOException if an error occurs during retrieval
365 Retrieves action associated with the field. @return PDAction instance or null if no action is defined
366 Retrieves JavaScript actions from the document. @return Map of named PDActionJavaScript objects or null if none found
367 Retrieves the F action from the PDF document. @return PDAction instance or null if not found
368 Retrieves the "E" (Execute) action from PDF annotations. @return PDAction instance or null if not found
369 Retrieves and creates a PDAction for the 'X' key. @return PDAction instance or null if not found
370 Retrieves and creates a PDAction for the 'D' entry in annotations. @return PDAction instance or null if not found
371 Retrieves the action associated with the 'U' key. @return PDAction instance or null if no action is defined
372 Retrieves and creates an action for the "FO" key. @return PDAction instance or null if not found
373 Retrieves the action associated with a button click. @return PDAction instance or null if not found
374 Retrieves the action associated with a specific key. @return PDAction instance or null if not found
375 Retrieves and creates a PDAction for the 'PC' entry. @return PDAction instance or null if not found
376 Retrieves the action associated with the "PV" key. @return PDAction instance or null if not found
377 Retrieves and creates an action for the "Print" operation. @return PDAction instance or null if not found
378 Retrieves the World Catalog action from PDF document catalog. @return PDAction instance or null if not found
379 Retrieves the workspace action from the document's catalog. @return PDAction instance or null if not found
380 Retrieves the document-specific action. @return PDAction instance or null if not found
381 Retrieves the "WillPrint" action from the PDF document's catalog. @return PDAction instance for the "WillPrint" event or null if not set
382 Retrieves and creates a PDAction for the 'DP' entry in the document catalog. @return PDAction instance or null if not found
383 Retrieves and creates an action associated with the key 'K'. @return PDAction instance or null if no action is found
384 Retrieves and creates action for key 'F'. @return PDAction object or null if not found
385 Retrieves the "V" action from form field actions. @return PDAction instance or null if not found
386 Retrieves and creates an action associated with the 'C' key. @return PDAction instance or null if not found
387 Retrieves the "Open" action associated with the PDF page. @return PDAction instance or null if no "Open" action is defined
388 Retrieves and creates an action for the 'C' key. @return PDAction instance or null if not found
389 Retrieves and creates an action associated with the link annotation. @return PDAction instance or null if no action is defined
390 Retrieves an action associated with the annotation. @return PDAction instance or null if no action is found
391 Retrieves the action associated with this outline item. @return PDAction instance or null if no action is defined
392 Retrieves string value of a PDF property. @param propertyKey key for the property to retrieve @return String value of the property or null if not found
393 Retrieves custom metadata value by field name. @param fieldName the key for which to retrieve the metadata value @return String representation of the metadata value or null if not found
394 Retrieves string value by attribute name. @param name the attribute name @return String representation of the attribute or null if not found
395 Retrieves the 'Base' string from the URI dictionary. @return String value of 'Base' or null if not found
396 Retrieves the version of the digital signature. @return Version string from PDF dictionary or null if not found
397 Retrieves units of measurement from PDF dictionary. @return String representing units or null if not found
398 Retrieves string value by key from PDF dictionary with a default. @param key the key for which to retrieve the value @param defaultValue value returned if key is not found @return String representation of the value or default if null
399 Retrieves a string value from an embedded dictionary. @param embedded key for the embedded dictionary @param key the key for which to retrieve the value @param defaultValue value returned if key or dictionary is not found @return String representation of the value or default if null
400 Retrieves the operation type. @return operation type as string, default is "Open"
401 Retrieves default appearance string for form fields. @return Default appearance settings or empty string if not defined
402 Retrieves the file name using various file systems. @return File name as a string or null if not found
403 Checks if a specific optional content group exists. @param groupName the name of the group to check @return true if the group exists; false otherwise
404 Retrieves the fully qualified name of the field. @return Fully qualified name as a string, including parent names if applicable
405 Retrieves export values for choice field options. @return List of strings representing export values of choices
406 Parses input text using a tokenizer and syntax handler. @param input the CharSequence to be parsed @param handler the SyntaxHandler for processing tokens
407 Encrypts or decrypts PDF object data. @param objectNumber unique object identifier in PDF @param genNumber generation number of the object @param data input stream containing the data to process @param output output stream for the processed data @param decrypt true if decrypting, false if encrypting @throws IOException if an I/O error occurs during processing
408 Computes encrypted key for PDF encryption based on revision. @param password user or owner password bytes @param o original owner key bytes @param u original user key bytes @param oe encrypted owner key bytes @param ue encrypted user key bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision level @param keyLengthInBytes desired length of the resulting key @param encryptMetadata flag indicating if metadata is encrypted @param isOwnerPassword true if processing owner password @return decrypted file key bytes @throws IOException on missing entries or encryption errors
409 Validates user password for PDF encryption based on revision. @param password user password bytes @param user computed user password bytes @param owner owner password bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision @param keyLengthInBytes desired key length @param encryptMetadata flag indicating if metadata is encrypted @return true if passwords match, false otherwise @throws IOException if an I/O error occurs or unknown revision
410 Finds a font by format and PostScript name, handling various naming conventions. @param format the desired font format @param postScriptName the font's PostScript name @return FontBoxFont object or null if not found
411 Normalizes and extracts words from a list of LineItems. @param line List of LineItem objects representing text lines @return List of WordWithTextPositions with normalized words and positions
412 Converts a COSString to a Calendar instance. @param text COSString containing date information @return Calendar object or null if conversion fails
413 Begins a marked content section in the PDF stream. @param tag COSName representing the marked content tag @throws IOException if an I/O error occurs
414 Begins a marked content section in the PDF stream. @param tag COSName representing the marked content tag @throws IOException if an I/O error occurs
415 Begins a marked content section in the PDF stream. @param tag COSName representing the marked content tag @throws IOException if an I/O error occurs
416 Begins a marked content section in the PDF pattern stream. @param tag COSName representing the marked content tag @throws IOException if an I/O error occurs
417 Begins a marked content sequence with a specified tag and identifier. @param tag COSName representing the content category @param mcid unique identifier for the marked content sequence @throws IOException if an I/O error occurs or mcid is negative
418 Begins a marked content sequence with a specified tag and identifier. @param tag COSName representing the content category @param mcid unique identifier for the marked content sequence @throws IOException if an I/O error occurs or mcid is negative
419 Begins a marked content sequence with a specified tag and identifier. @param tag COSName representing the content category @param mcid unique identifier for the marked content sequence @throws IOException if an I/O error occurs or mcid is negative
420 Begins a marked content sequence with a specified tag and identifier. @param tag COSName representing the content category @param mcid unique identifier for the marked content sequence @throws IOException if an I/O error occurs or mcid is negative
421 Sets a marked content point in the PDF stream. @param tag COSName representing the marked content tag @throws IOException if an I/O error occurs
422 Sets a marked content point in the PDF stream. @param tag COSName representing the marked content tag @throws IOException if an I/O error occurs
423 Sets a marked content point in the PDF stream. @param tag COSName representing the marked content tag @throws IOException if an I/O error occurs
424 Sets a marked content point in the PDF stream. @param tag COSName representing the marked content tag @throws IOException if an I/O error occurs
425 Writes a COSString to an OutputStream with trailing space. @param output destination for writing data @param cosString the COSString to write @throws IOException if an I/O error occurs
426 Renders text on the PDF page. @param text string to be displayed @throws IOException if an I/O error occurs
427 Initializes a new PageDrawer instance. @param parameters configuration for page drawing @throws IOException if an I/O error occurs
428 Finds the page destination for a given named destination. @param namedDest the named destination to find @return PDPageDestination object or null if not found @throws IOException if an error occurs during retrieval
429 Retrieves the color associated with annotation type C. @return PDColor object or null if not found
430 Retrieves the border color of the annotation. @return PDColor object representing the border color or null if not found
431 Retrieves the background color of the annotation. @return PDColor object representing the background color or null if not found
432 Parses a COS string from the PDF source. Handles different string formats including hex and octal values. @return COSString object containing parsed data @throws IOException if an I/O error occurs during parsing
433 Retrieves and parses the digital signature contents from a PDF file. @param pdfFile input stream of the PDF document containing the signature @return byte array of parsed signature content @throws IOException if an I/O error occurs during processing
434 Extracts and converts the signed content from a PDF file. @param pdfFile the byte array representing the PDF document @return byte array of the converted signature contents @throws IOException if an I/O error occurs during processing
435 Constructs an immutable rectangle with specified dimensions. @param width rectangle width @param height rectangle height
436 Retrieves the bounding box rectangle of the cloud-like border. @return PDRectangle representing the border's bounding box
437 Initializes a new PDMetadata instance for a given PDF document. @param document the PDDocument to associate with this metadata
438 Constructs a new embedded file associated with a PDF document. @param document the PDF document to which this embedded file belongs
439 Initializes a PDXObject with a specified document and subtype. @param document PDDocument to which this object belongs @param subtype COSName representing the subtype of the XObject
440 Constructs an image object from a PDF document. @param document the PDF document containing the image
441 Initializes a PDStream with data from an InputStream. @param doc PDDocument to associate the stream with @param input InputStream containing PDF data @throws IOException if I/O operations fail
442 Initializes a PDStream with data and a specific filter. @param doc PDDocument to associate the stream with @param input InputStream containing PDF data @param filter COSName representing the filter to apply @throws IOException if I/O operations fail
443 Initializes a PDStream with data from an InputStream and specified filters. @param doc PDDocument to associate the stream with @param input InputStream containing PDF data @param filters COSArray of filters to apply @throws IOException if I/O operations fail
444 Constructs a PDImageXObject from an encoded stream. @param document PDDocument containing the image @param encodedStream InputStream of the encoded image data @param cosFilter COSBase representing the filter applied to the image @param width width of the image in pixels @param height height of the image in pixels @param bitsPerComponent number of bits per color component @param initColorSpace PDColorSpace for the image @throws IOException if I/O operations fail
445 Initializes a new layout attribute object with default settings. Sets the owner to OWNER_LAYOUT by default.
446 Constructs a new PDListAttributeObject with list owner.
447 Constructs a PDPrintFieldAttributeObject with owner set to OWNER_PRINT_FIELD.
448 Initializes a table attribute object with owner set to OWNER_TABLE.
449 Creates a PDAttributeObject based on the owner type in the dictionary. @param dictionary the COSDictionary containing attribute data @return specific PDAttributeObject subclass or default if no match found
450 Retrieves the normal appearance stream of the annotation. @return PDAppearanceStream object or null if not found
451 Retrieves the on value for the checkbox. @return The COSName of the on state or empty string if not found
452 Retrieves the transparency group associated with the soft mask. @return PDTransparencyGroup object or null if not found @throws IOException if an error occurs during retrieval
453 Initializes PDF parser with source. @param source input stream for the PDF document @throws IOException on I/O errors during initialization
454 Initializes a PDFParser with a PDF source and security details. @param source input stream for the PDF document @param decryptionPassword decryption password, if required @param keyStore keystore containing encryption keys @param alias alias for the key in the keystore @throws IOException on I/O errors during initialization
455 Initializes a new content stream for a PDF appearance. @param appearance the PDAppearanceStream to write to @throws IOException if an I/O error occurs
456 Initializes a content stream for manipulating PDF form XObject. @param form the PDFormXObject to write to @throws IOException if an I/O error occurs or stream is already open
457 Initializes a new content stream for an appearance stream. @param doc the PDDocument to write to @param appearance the PDAppearanceStream containing appearance details @throws IOException if an I/O error occurs or stream is already open
458 Initializes a new content stream for a tiling pattern. @param pattern the PDTilingPattern to write to @throws IOException if an I/O error occurs or stream is already open
459 Sets the text matrix for transforming text. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or not in text mode
460 Sets the text matrix for transforming text. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or not in text mode
461 Sets the text matrix for transforming text. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or not in text mode
462 Sets the text matrix for transforming text in PDF. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or not in text mode
463 Applies a transformation to the graphics state. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or text mode is active
464 Applies a transformation to the graphics state. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or text mode is active
465 Applies a transformation to the graphics state. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or text mode is active
466 Applies a transformation to the graphics state. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or text mode is active
467 Draws an arrow on the PDF content stream. @param cs the appearance content stream to draw on @param x the starting x-coordinate of the arrow base @param y the starting y-coordinate of the arrow base @param len the length of the arrow arm @throws IOException if an I/O error occurs during drawing
468 Draws a shape with specified line width and options for stroke and fill. @param lineWidth the thickness of the shape's outline @param hasStroke whether to apply a stroke to the shape @param hasFill whether to fill the shape @throws IOException if an I/O error occurs during drawing
469 Draws a diamond shape on the PDF content stream. @param cs appearance content stream to draw on @param x center x-coordinate of the diamond @param y center y-coordinate of the diamond @param r radius from center to each corner @throws IOException if an I/O error occurs
470 Draws a circle on the PDF content stream. @param cs appearance content stream to draw on @param x center x-coordinate of the circle @param y center y-coordinate of the circle @param r radius of the circle @throws IOException if an I/O error occurs during drawing
471 Draws a circle on the PDF content stream. @param cs appearance content stream to draw on @param x center x-coordinate of the circle @param y center y-coordinate of the circle @param r radius of the circle @throws IOException if an I/O error occurs during drawing
472 Draws a paperclip shape on the PDF content stream. @param contentStream the PDF content stream to draw on @throws IOException if an I/O error occurs
473 Sets line width unless it's effectively 1 (default). @param lineWidth desired line width for drawing operations @throws IOException if an I/O error occurs
474 Generates an image for a tiling pattern. @param drawer the PageDrawer instance @param pattern the PDTilingPattern to render @param colorSpace the color space for rendering @param color the color for rendering @param xform the transformation matrix @param anchorRect the bounding rectangle for the image @return BufferedImage representing the tiling pattern @throws IOException if an I/O error occurs during rendering
475 Calculates the anchor rectangle for a tiling pattern. @param pattern the PDTilingPattern to process @return Rectangle2D representing the scaled anchor rectangle @throws IOException if /BBox is missing or other issues occur
476 Generates a stencil image using the specified paint. @param paint the color for masking @return BufferedImage with applied mask @throws IOException if an I/O error occurs
477 Converts PDImage to a raw WritableRaster. @param pdImage PDF image to process @return WritableRaster representing the image data @throws IOException if image is empty or dimensions are invalid
478 Converts a PDF image to a BufferedImage with optional clipping and subsampling. @param pdImage the PDF image to process @param region clipping rectangle @param subsampling subsampling factor @param colorKey COSArray representing the color key mask @return BufferedImage representation of the PDImage @throws IOException if an I/O error occurs during processing
479 Retrieves the resources of the PDF page. @return PDResources object containing page resources or null if not found
480 Retrieves or constructs the page's media box. Uses inherited attribute if available, otherwise defaults to U.S. Letter. @return PDRectangle representing the page's media box
481 Retrieves the rotation angle of the page. @return rotation angle in degrees, multiples of 90, or 0 if not set
482 Retrieves a boolean value from the dictionary. @param key string key to look up @param defaultValue default boolean value if key is missing @return boolean value associated with the key or default if not found
483 Checks if the file specification is volatile. @return true if the file spec is volatile, false otherwise
484 Checks if the user property is hidden. @return true if hidden, false otherwise
485 Checks if metadata encryption is enabled. @return boolean indicating if metadata encryption is active
486 Determines if caption is displayed. @return true if caption is enabled, false otherwise
487 Determines if icons should scale to fit within annotations. @return true if scaling is enabled, false otherwise
488 Determines if renaming is enabled for the template. @return true if renaming is allowed, false otherwise
489 Checks if the transparency group is isolated. @return true if isolated, false otherwise
490 Checks if knockout mode is enabled. @return true if knockout mode is active, false otherwise
491 Retrieves anti-aliasing setting. @return true if anti-aliasing is enabled, false otherwise
492 Retrieves stroking overprint control setting. @return true if overprint control is enabled for stroking, false otherwise
493 Checks if automatic stroke adjustment is enabled. @return true if automatic stroke adjustment is enabled, false otherwise
494 Retrieves the alpha source flag from the graphics state. @return true if alpha source is active, false otherwise
495 Retrieves the text knockout flag from the dictionary. @return true if text knockout is enabled, false otherwise
496 Retrieves the 'H' flag indicating if elements should be hidden. @return boolean value of 'H' flag or true if not found
497 Determines if sound should play synchronously. @return true if synchronous playback is enabled, false otherwise
498 Determines if the sound should repeat. @return true if the sound repeats, false otherwise
499 Retrieves whether sound should be mixed. @return true if sound is to be mixed, false otherwise
500 Checks if the line annotation has a caption. @return true if caption is present, false otherwise
501 Determines if the text annotation is open. @return true if the annotation is open, false otherwise
502 Retrieves pre-release status from the digital signature properties. @return true if the PDF document is in pre-release mode, false otherwise
503 Retrieves flag indicating if non-EFont warnings are suppressed. @return boolean value of the NON_EFONT_NO_WARN property or default true if missing
504 Retrieves trusted mode status from the digital signature properties. @return true if trusted mode is enabled, false otherwise
505 Determines if form field appearances need to be explicitly defined. @return true if explicit appearances are required, false otherwise
506 Checks if the fly area is opaque. @return true if the fly area is opaque, false otherwise
507 Determines if the toolbar should be hidden. @return true if toolbar is hidden, false otherwise
508 Determines if the menu bar should be hidden. @return true if menu bar is hidden, false otherwise
509 Determines if the window UI should be hidden. @return true if window UI is hidden, false otherwise
510 Determines if the PDF viewer window should automatically resize to fit the document. @return true if fit-to-window is enabled, false otherwise
511 Determines if the PDF viewer window should be centered. @return true if the window is set to center; false otherwise
512 Determines if document title should be displayed. @return true if doc title is enabled, false otherwise
513 Retrieves an integer value from a nested dictionary. @param embeddedDictionary key for the embedded dictionary @param key primary key to look up within the embedded dictionary @param defaultValue default integer value if key is not found @return integer value from the embedded dictionary or default if missing
514 Retrieves an integer value by key from the dictionary. @param key string key to look up @return integer value or -1 if key is not found
515 Retrieves an integer value for a specified key. @param key primary key to look up @return integer value from dictionary or -1 if missing
516 Retrieves an integer value for a specified key. @param key primary key to look up @param defaultValue default integer value if key is not found @return integer value from dictionary or default if missing
517 Checks if a specific flag is set for a given field. @param field the key to look up in the dictionary @param bitFlag the flag to check @return true if the flag is set, false otherwise
518 Retrieves the count of pages in the PDF document. @return integer representing the number of pages
519 Retrieves the starting page number. @return starting page number, default is 1
520 Retrieves the order of the function. @return order value from COS object or default to 1 if not found
521 Retrieves the revision number of the PDF element. @return Revision number or 0 if not specified
522 Retrieves the encryption key length. @return integer value representing key length or default of 40 if not specified
523 Retrieves the encryption version of the PDF. @return integer representing the encryption version or 0 if not specified
524 Retrieves the encryption key length. @return key length or default value of 40 if not set
525 Retrieves the encryption revision of the PDF document. @return integer value representing the revision level or default version if not specified
526 Retrieves encryption permissions. @return integer representing document permissions
527 Retrieves text justification of the annotation. @return string representation of justification value
528 Retrieves font descriptor flags. @return integer representing font flags or default value if not set
529 Creates a PDAbstractPattern instance based on the dictionary. @param dictionary COSDictionary containing pattern data @param resourceCache ResourceCache for managing resources @return PDAbstractPattern object or throws IOException if unknown type
530 Retrieves the paint type of the tiling pattern. @return integer representing the paint type or default value if not set
531 Retrieves the tiling type of the pattern. @return integer value representing the tiling type or default 0 if not found
532 Creates a PDShading object based on the provided dictionary. @param shadingDictionary COSDictionary containing shading properties @return PDShading instance of the appropriate type @throws IOException if an unknown shading type is encountered
533 Retrieves the number of bits per flag. @return integer value representing bits per flag or -1 if not found
534 Retrieves the number of vertices per row in the shading model. @return integer value representing vertices per row or -1 if not specified
535 Retrieves the number of bits per color component. @return integer value representing bits per component
536 Retrieves the number of bits per coordinate. @return the number of bits used for each coordinate
537 Retrieves action flags. @return integer representing action flags
538 Retrieves action flags. @return integer representing action flags or default value if missing
539 Retrieves the page number associated with the target directory. @return page number or -1 if not specified
540 Retrieves the annotation index. @return annotation index or -1 if not found
541 Retrieves annotation flags. @return integer value representing annotation properties
542 Retrieves the quadding mode of the annotation. @return integer value representing quadding mode (0, 1, or 2)
543 Retrieves the rotation angle of the annotation. @return Rotation angle in degrees, defaulting to 0 if not specified
544 Checks if timestamping is required. @return true if timestamp is needed, false otherwise
545 Retrieves the open count of child outline items. @return integer representing the number of open children or 0 if not specified
546 Retrieves the Q value from the form's dictionary. @return integer value representing Q or 0 if not found
547 Retrieves the top index of visible items in the list box. @return integer value representing the top index, defaulting to 0 if not set
548 Retrieves COS objects of specified type from the document. @param type expected COSName type @return List of COSObjects matching the specified type
549 Removes cached page resources. Checks if resource cache is null; if not, removes page-specific resources.
550 Retrieves the embedded file. @return PDEmbeddedFile object or null if not found
551 Retrieves the embedded file for DOS. @return PDEmbeddedFile object or null if not found
552 Retrieves the Mac embedded file. @return PDEmbeddedFile object or null if not found
553 Retrieves the embedded file for Unix systems. @return PDEmbeddedFile object or null if not found
554 Retrieves the embedded file using Unicode key. @return PDEmbeddedFile object or null if not found
555 Finds a PDSignatureField by matching its digital signature with the provided one. @param fieldIterator iterator over PDF fields @param sigObject digital signature to match @return PDSignatureField if found, null otherwise
556 Initializes axial shading context. @param shading PDF shading object @param colorModel color model to use @param xform transformation matrix @param matrix additional transformation matrix @param deviceBounds bounds of the device area @throws IOException if an I/O error occurs
557 Initializes a radial shading context. @param shading PDF shading object @param colorModel color model to use @param xform device space transformation matrix @param matrix user space to device space matrix @param deviceBounds bounds of the device area @throws IOException if an I/O error occurs
558 Initializes a new TriangleBasedShadingContext for rendering PDF shading. @param shading PDShading object representing the shading @param cm ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if there's an issue accessing the dictionary or converting colors
559 Initializes Type1ShadingContext with specified parameters. @param shading PDShadingType1 object representing the shading @param colorModel ColorModel for rendering @param xform AffineTransform for device space to user space conversion @param matrix Matrix defining the shading's coordinate system @throws IOException if an error occurs during initialization
560 Retrieves the decode range for a specific parameter. @param paramNum index of the parameter (0-based) @return PDRange object or null if not found
561 Retrieves the decode range for a specific parameter. @param paramNum index of the parameter (0-based) @return PDRange object or null if not found
562 Creates a COSInputStream with default decode options. @param filters list of Filter objects to apply @param parameters dictionary of decoding parameters @param in input stream containing encoded data @return COSInputStream with decoded data @throws IOException if an I/O error occurs during decoding
563 Initializes a PDFObjectStreamParser with the given COSStream and document. @param stream the COSStream containing the object data @param document the parent COSDocument @throws IOException if required entries are missing or invalid
564 Constructs a PDCIDFontType0 instance. @param fontDictionary PDF dictionary containing font info @param parent PDType0Font parent object @throws IOException if an I/O error occurs during font initialization
565 Initializes a Type 2 CID font. @param fontDictionary PDF dictionary for the font @param parent PDType0Font parent of this font @param trueTypeFont TrueTypeFont object or null if not embedded @throws IOException if an I/O error occurs during initialization
566 Reads a CMap from a COSBase object. @param base COSName or COSStream containing the CMap data @return CMap object parsed from the input @throws IOException if the input is invalid or an error occurs during parsing
567 Writes the body of a PDF document. @param doc the COSDocument to write @throws IOException if an I/O error occurs during writing
568 Saves FDF document to a specified file. @param fileName path to the target file @throws IOException if an I/O error occurs during saving
569 Collects and processes a COSBase object for document updates. @param base the COSBase object to process @return true if any collected object demands parent update, false otherwise
570 Sets the document's trailer dictionary. Updates the origin document state of the trailer's update state. @param newTrailer the new trailer dictionary to set
571 Updates the document state and handles child updates. @param child the child object to update
572 Updates the document state and processes child objects. @param children iterable collection of child objects to process
573 Retrieves the value associated with a given name. @param name key to search for in the tree @return value of type T or null if not found @throws IOException if an I/O error occurs during retrieval
574 Retrieves string value for a given key in PDF dictionary. @param name the key to look up @param defaultValue the value to return if key is not present @return the string value or default if not found
575 Retrieves the border style. @return the style as a string or default solid if not found
576 Retrieves the root of the structure tree. Traverses up the hierarchy to find the top-level structure node. @return PDStructureTreeRoot object or null if not found
577 Retrieves child elements of the current structure node. @return List of child objects or empty list if none found
578 Retrieves the encryption settings of the PDF document. Initializes encryption object if not already done and document is encrypted. @return PDEncryption object or null if document is not encrypted
579 Prepares PDF document for decryption. Sets up encryption and security handler based on document's encryption dictionary. Handles different decryption materials including password and key store.
580 Reads and initializes the font encoding. Handles predefined CMaps and checks for valid CID mappings.
581 Repairs the Length1 value by finding the 'exec' binary offset. @param bytes byte array containing font data @param length1 initial Length1 value to repair @return corrected Length1 value or original if no issues found
582 Repairs Length2 if it's out of bounds. @param bytes font data array @param length1 first length value @param length2 second length value to validate and repair @return corrected Length2 or recalculated value if invalid
583 Retrieves the fractional display setting. @return String representing fractional display or default if not found
584 Retrieves the thousands separator for number formatting. @return String representing the thousands separator, default is ","
585 Retrieves the decimal separator used in number formats. @return String representation of the decimal separator or "." if not specified
586 Retrieves the label prefix string from the COSDictionary. @return String representing the label prefix or a space if not found
587 Retrieves label suffix from number format settings. @return Suffix string or space if not found
588 Retrieves label position to value setting from PDF dictionary. @return String representation of the label position or default suffix if not found
589 Retrieves a string value from an embedded dictionary. @param embedded key for the embedded dictionary @param key the key for which to retrieve the value @return String representation of the value or null if not found
590 Generates a priority queue of font matches based on descriptor and CID info. @param fontDescriptor PDF font descriptor to match against @param cidSystemInfo CID system info for character set matching @return PriorityQueue of FontMatch objects sorted by compatibility score
591 Validates owner password for PDF encryption based on revision. @param ownerPassword owner's password bytes @param user user password bytes @param owner owner password bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision level @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag indicating if metadata is encrypted @return true if passwords match, false otherwise @throws IOException if an I/O error occurs or unknown revision
592 Parses input text into an instruction sequence. @param text the CharSequence to be parsed @return the constructed InstructionSequence object
593 Decrypts a PDF stream. @param stream the COSStream to decrypt @param objNum object number of the stream @param genNum generation number of the stream @throws IOException if an I/O error occurs
594 Encrypts a PDF stream using specified object number and generation number. @param stream the COSStream to be encrypted @param objNum unique object identifier in PDF @param genNum generation number of the object @throws IOException if an I/O error occurs during encryption
595 Decrypts a COSString using specified object and generation numbers. @param string the encrypted COSString to decrypt @param objNum unique object identifier in PDF @param genNum generation number of the object @return decrypted COSBase or original string if decryption fails
596 Encrypts a given COSString. @param string the COSString to encrypt @param objNum unique object identifier in PDF @param genNum generation number of the object @return encrypted COSString @throws IOException if an I/O error occurs during encryption
597 Validates user password for PDF encryption based on revision. @param password user password as string @param user computed user password bytes @param owner owner password bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision @param keyLengthInBytes desired key length @param encryptMetadata flag indicating if metadata is encrypted @return true if passwords match, false otherwise @throws IOException if an I/O error occurs or unknown revision
598 Finds a FontBoxFont by PostScript name for Type1, TrueType, and OpenType formats. @param postScriptName the font's PostScript name @return FontBoxFont object or null if not found
599 Writes the content of a PDF page to an output stream, formatting it into lines and paragraphs. The method processes text positions, sorts them if required, and handles line breaks based on spacing and font changes. Here's a breakdown of the key steps: 1. **Initialization**: - Resets variables for tracking line metrics (maxYForLine, maxHeightForLine, minYTopForLine). - Initializes an iterator for text positions. 2. **Sorting Text Positions**: - If sorting by position is enabled (`getSortByPosition()`), sorts the text positions using a custom comparator. - Handles potential issues with non-transitive comparators by falling back to a merge sort implementation. - Removes contained spaces within adjacent letters. 3. **Processing Text Positions**: - Iterates through each text position, creating a `PositionWrapper` for easier manipulation. - Skips space characters if content stream space glyphs are ignored (`getIgnoreContentStreamSpaceGlyphs()`). - Updates average character width when font or size changes. 4. **Line and Paragraph Formatting**: - Determines whether the current text position is on the same line as the last one. - Handles line breaks by checking vertical overlap (`overlap()`) and horizontal spacing. - Adds a word separator if necessary, based on expected start of the next word. 5. **Writing Lines**: - Normalizes and writes lines to the output stream using `writeLine()`. - Clears the line list for the next set of text positions. 6. **Ending Articles and Pages**: - Ends articles with `endArticle()` after processing all text positions. - Writes the final page end with `writePageEnd()`. This method ensures that text is extracted in a readable format, respecting line breaks and paragraph structure as defined by the PDF content.
600 Retrieves date value from dictionary by key. @param key the key for which to retrieve the date @return Calendar object or null if not found or conversion fails
601 Writes a COSBase object as a token to the PDF output stream. @param base COSBase object to write @throws IOException if an I/O error occurs
602 Writes a COSBase object to the output stream. Handles various COS types and manages compression. @param output target OutputStream for writing @param object COSBase object to write @param topLevel indicates if the object is at the top level @throws IOException if an I/O error occurs
603 Writes text with positioning to the PDF content stream. @param textWithPositioningArray array of Float and String types for text and positions @throws IOException if an I/O error occurs
604 Displays text on the PDF page. @param text string to be displayed @throws IOException if an I/O error occurs
605 Creates a PageDrawer instance with specified parameters and annotation filter. @param parameters configuration for page drawing @return configured PageDrawer object @throws IOException if an I/O error occurs
606 Initializes a PDFormXObject with a specified document. @param document PDDocument to which this form object belongs
607 Initializes PDMetadata for a PDF document. @param doc PDDocument to associate the metadata with @param str InputStream containing metadata data @throws IOException if I/O operations fail
608 Constructs a PDEmbeddedFile from an input stream. @param doc PDF document to associate with the embedded file @param str InputStream containing the embedded file data @throws IOException if I/O operations fail
609 Initializes a PDEmbeddedFile with data from an InputStream. @param doc PDDocument to associate the embedded file with @param input InputStream containing the file data @param filter COSName representing the filter to apply @throws IOException if I/O operations fail
610 Prepares a PDImageXObject for PDF inclusion. @param document PDDocument to contain the image @param byteArray input image data as bytes @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of bits per color component @param initColorSpace PDColorSpace for the image @return PDImageXObject ready for PDF embedding @throws IOException if I/O operations fail
611 Constructs a new export format attribute object. @param owner specifies the owner of the attribute
612 Retrieves and processes attribute objects associated with the structure element. Parses COSArray or COSDictionary to create PDAttributeObject instances. Assigns structure element reference and revision numbers as needed. @return Revisions object containing PDAttributeObjects
613 Retrieves the appearance stream of a PDF annotation. @param annotation the annotation to process @return PDAppearanceStream object representing the normal appearance or null if not found
614 Adds fonts from widget resources to AcroForm. @param acroFormResources the AcroForm's resources @param annotation the annotation containing the widget
615 Retrieves all 'on' values of the button. @return Set of string representations of 'on' values
616 Checks if the checkbox is currently checked. @return true if the checkbox is checked, false otherwise
617 Checks the checkbox by setting its value to the on state. @throws IOException if an I/O error occurs
618 Initializes font provider by scanning local system for fonts and loading cache. @param cache FontCache instance to manage cached font information
619 Initializes FDF parser with specified input source. @param source random access read object for FDF document @throws IOException on I/O errors during initialization
620 Creates a new PDFParser instance with a specified source and decryption password. @param source input stream for the PDF document @param decryptionPassword decryption password for encrypted files @throws IOException on I/O errors during initialization
621 Draws annotation style on PDF content stream. @param style type of annotation style to draw @param cs appearance content stream to draw on @param x starting x-coordinate @param y starting y-coordinate @param width dimensions for shape @param hasStroke whether to apply a stroke @param hasBackground whether to fill the background @param ending direction flag @throws IOException if an I/O error occurs during drawing
622 Initializes tiling paint with specified parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param colorSpace color space for rendering @param color color for rendering @param xform transformation matrix @throws IOException if an I/O error occurs during initialization
623 Retrieves an opaque image from a specified region with subsampling. @param region the area of the image to extract @param subsampling factor for reducing image resolution @return BufferedImage representation of the opaque image @throws IOException if an I/O error occurs during processing
624 Converts a PDF image to a BufferedImage with a specified color key mask. @param pdImage the PDF image to process @param colorKey COSArray representing the color key mask @return BufferedImage representation of the PDImage @throws IOException if an I/O error occurs during processing
625 Pushes and returns the current resources for content stream processing. @param contentStream the content stream to process @return previous resources before updating
626 Calculates transformation for centering overlay on a PDF page. @param page the target PDF page @param overlayMediaBox dimensions of the overlay content @return AffineTransform for positioning overlay
627 Returns the rotated media box of a PDF page. @param page PDPage object representing the PDF page @return PDRectangle with rotated dimensions if needed, otherwise original media box
628 Checks if the current PDF element is marked. @return true if marked, false otherwise
629 Checks if user properties are used. @return true if UserProperties is set to true, false otherwise
630 Checks if the PDF element is marked as suspect. @return true if the element is suspect, false otherwise
631 Determines if mouse position should be tracked. @return true if mouse tracking is enabled, false otherwise
632 Retrieves the open state of the popup annotation. @return true if the popup is open, false otherwise
633 Checks if FD (First Draft) flag is set. @return true if FD flag is enabled, false otherwise
634 Retrieves non-stroking overprint control setting. @return true if overprint control is enabled for non-stroking, false otherwise
635 Retrieves an integer value from a nested dictionary with a default of -1. @param embeddedDictionary key for the embedded dictionary @param key primary key to look up within the embedded dictionary @return integer value from the embedded dictionary or -1 if missing
636 Retrieves the denominator value from the number format settings. @return integer representing the denominator or -1 if not found
637 Wraps an OutputStream with a PredictorOutputStream for PDF image data decoding. @param out underlying output stream for writing processed data @param decodeParams dictionary containing decoding parameters @return wrapped output stream or original if no predictor is needed
638 Retrieves the structure parents index. @return integer value representing structure parents or -1 if missing
639 Retrieves bits per sample value. @return integer representing bits per sample or -1 if missing
640 Retrieves the Marker Context Identifier (MCID) from the marked content reference. @return MCID value or -1 if not found
641 Retrieves the next key in the parent tree. @return integer value representing the next key or -1 if missing
642 Retrieves the marked content identifier (MCID). @return MCID as an integer, or -1 if properties are missing
643 Retrieves the line cap style from the graphics state. @return integer representing the line cap style or -1 if missing
644 Retrieves the line join style. @return integer value representing the line join style from the dictionary
645 Retrieves the structure parent ID of the annotation. @return integer value representing the struct parent or -1 if not set
646 Retrieves the value of P from the digital signature's configuration. @return integer value associated with key COSName.P or -1 if missing
647 Retrieves the maximum length of the text field. @return maximum number of characters allowed or -1 if not set
648 Retrieves an integer value from the COSDictionary using the specified key. @param name primary key to look up in the dictionary @param defaultValue default integer value if key is not found @return integer value from the dictionary or default if missing
649 Checks if the annotation is invisible. @return true if the annotation is invisible, false otherwise
650 Checks if the annotation is hidden. @return true if the annotation is hidden, false otherwise
651 Checks if the annotation is printed. @return true if the annotation is marked as printed, false otherwise
652 Checks if the annotation has no zoom restriction. @return true if no zoom is allowed, false otherwise
653 Checks if the annotation should not be rotated. @return true if no rotate flag is set, false otherwise
654 Checks if the annotation should not be visible. @return true if no view flag is set, false otherwise
655 Determines if the annotation is read-only. @return true if the annotation is read-only, false otherwise
656 Checks if the annotation is locked. @return true if the annotation is locked, false otherwise
657 Checks if the annotation is set to toggle no view. @return true if the toggle no view flag is set, false otherwise
658 Checks if annotation contents are locked. @return true if locked, false otherwise
659 Checks if the annotation is invisible. @return true if the annotation is invisible, false otherwise
660 Checks if annotation is hidden. @return true if annotation is hidden, false otherwise
661 Checks if the annotation is printed. @return true if the annotation is marked as printed, false otherwise
662 Checks if the annotation disables zooming. @return true if no zoom is allowed, false otherwise
663 Checks if annotation should not be rotated. @return true if no rotate flag is set, false otherwise
664 Checks if the annotation should not be displayed. @return true if the annotation is hidden, false otherwise
665 Checks if the annotation is read-only. @return true if read-only flag is set, false otherwise
666 Checks if the annotation is locked. @return true if the annotation is locked, false otherwise
667 Checks if the annotation should not be visible. @return true if the toggle no view flag is set, false otherwise
668 Checks if annotation contents are locked. @return true if contents are locked, false otherwise
669 Checks if filter is required for digital signature. @return true if filter is mandatory, false otherwise
670 Checks if subfilter is required. @return true if subfilter flag is set, false otherwise
671 Checks if digest method is required. @return true if digest method flag is set, false otherwise
672 Checks if the 'V' flag is set for digital signature validation. @return true if 'V' flag is set, false otherwise
673 Checks if reason field is required. @return true if reason field is mandatory, false otherwise
674 Checks if legal attestation is required. @return true if legal attestation flag is set, false otherwise
675 Checks if adding revocation info is required. @return true if revocation info is required, false otherwise
676 Checks if the subject field is required in the certificate. @return true if the subject is required, false otherwise
677 Checks if issuer information is required. @return true if issuer flag is set, false otherwise
678 Checks if OID (Object Identifier) is required. @return true if OID flag is set, false otherwise
679 Checks if subject distinguished name (DN) is required. @return true if subject DN is required, false otherwise
680 Checks if key usage is required for digital signature. @return true if key usage flag is set, false otherwise
681 Checks if URL field is required. @return true if URL flag is set, false otherwise
682 Checks if the text in the outline item is italic. @return true if italic, false otherwise
683 Checks if the outline item's title is bold. @return true if the title is bold, false otherwise
684 Checks if signatures exist in the form. @return true if signatures are present, false otherwise
685 Checks if the form is set to append-only mode. @return true if the append-only flag is set, false otherwise
686 Determines if this button is a push button. @return true if the button is a push button, false otherwise
687 Determines if this button is a radio button. @return true if the button is a radio button, false otherwise
688 Checks if the choice field is sorted. @return true if sort flag is set, false otherwise
689 Checks if the choice field supports multi-selection. @return true if multi-select is enabled, false otherwise
690 Determines if spell-checking is disabled for the choice field. @return true if spell-checking is disabled, false otherwise
691 Checks if changes should be committed upon selection. @return true if commit on selection change is enabled, false otherwise
692 Checks if the choice field is a combo box. @return true if the field is a combo box, false otherwise
693 Checks if the combo box is editable. @return true if editable, false otherwise
694 Checks if the field is read-only. @return true if the field is read-only, false otherwise
695 Checks if the field is required. @return true if the field is marked as required, false otherwise
696 Checks if the field should not be exported. @return true if the no-export flag is set, false otherwise
697 Checks if radio buttons operate in unison. @return true if radios are synchronized, false otherwise
698 Checks if the text field supports multiline input. @return true if multiline is enabled, false otherwise
699 Checks if the text field is password protected. @return true if password protection is enabled, false otherwise
700 Checks if the text field supports file selection. @return true if file select flag is set, false otherwise
701 Checks if spell checking is disabled for this text field. @return true if spell checking is disabled, false otherwise
702 Determines if the text field should not scroll. @return true if scrolling is disabled, false otherwise
703 Checks if the text field uses comb formatting. @return true if comb formatting is enabled, false otherwise
704 Checks if the text field supports rich text formatting. @return true if rich text is enabled, false otherwise
705 Prepares document for decryption using public key. @param encryption PDEncryption object containing encryption details @param documentIDArray COSArray with document ID @param decryptionMaterial DecryptionMaterial for decryption @throws IOException if decryption preparation fails
706 Retrieves the owner encryption key from the PDF document. @return byte array containing the owner key or null if not found @throws IOException if an I/O error occurs during retrieval
707 Retrieves the user key for encryption. @return byte array containing the user key or null if not found @throws IOException if an I/O error occurs
708 Calculates displacement vector for a character by its code. @param code character code @return Vector representing horizontal and vertical displacement in PDF units @throws IOException if an I/O error occurs
709 Calculates the total width of a string in PDF units. @param text input string to measure @return total width of the string @throws IOException if an I/O error occurs during encoding or reading
710 Retrieves a PDAbstractPattern by name. @param name the name of the pattern resource @return PDAbstractPattern object or throws IOException if not found
711 Retrieves a PDShading object by name. @param name the name of the shading resource @return PDShading instance or null if not found @throws IOException if an error occurs during retrieval
712 Retrieves the PDShading object for this pattern. @return PDShading instance or null if not found @throws IOException if an error occurs during creation
713 Retrieves the number of bits per color component. @return integer value representing bits per component
714 Retrieves the number of bits per color component for shading. @return integer value representing bits per component
715 Retrieves the number of bits per coordinate. @return the number of bits used for each coordinate
716 Retrieves the number of bits per coordinate. @return the number of bits used for each coordinate
717 Checks if the node has any open child outline items. @return true if there are open children, false otherwise
718 Creates a PDField based on the field type. @param form the AcroForm containing the field @param field the COSDictionary representing the field data @param parent the parent PDNonTerminalField, if any @return PDField instance or null if invalid field type
719 Retrieves an XObject by name from the resources. @param name the key of the XObject to retrieve @return PDXObject instance or null if not found @throws IOException if an error occurs during retrieval
720 Initializes a new GouraudShadingContext for PDF rendering. @param shading PDShading object defining the shading @param colorModel ColorModel specifying the color space @param xform AffineTransform for device coordinate conversion @param matrix Matrix for additional transformations @throws IOException if an I/O error occurs during initialization
721 Creates a decoded input stream using default decoding options. @return COSInputStream with decoded data @throws IOException if an I/O error occurs during creation or decoding
722 Parses a COSBase object from an object stream. @param objstmObjNr number of the object stream @param key unique identifier for the COSObject @return parsed COSBase object or null if not found @throws IOException if parsing fails
723 Retrieves the contents of the PDF page. @return InputStream representing the page's content or an empty stream if none exists @throws IOException if an I/O error occurs during retrieval
724 Constructs a Type 2 CID font without a TrueType font. @param fontDictionary PDF dictionary for the font @param parent PDType0Font parent of this font @throws IOException if an I/O error occurs during initialization
725 Retrieves the embedded CID font. @return PDCIDFont object representing the Type 2 CID font @throws IOException if an I/O error occurs during retrieval
726 Collects and processes a COSDictionary for document updates. @param dictionary the COSDictionary to process @return true if any collected object demands parent update, false otherwise
727 Returns the set of collected COSBase objects. Initializes collection if not already done. @return Set of COSBase objects
728 Adds a COSBase object to the array. Handles indirect objects by wrapping them in a COSObject. @param object the COSBase object to add
729 Adds a COSBase object at the specified index. Handles wrapping in COSObject if necessary. @param i index to add the object at @param object the COSBase object to add
730 Sets the element at a specific index. @param index position in the array @param object new COSBase object to set
731 Sets an item in the dictionary. @param key unique identifier for the item @param value data to store (COSBase object)
732 Adds all COSBase objects from the provided collection to the array. @param objectsList collection of COSBase objects to add
733 Inserts all elements from the specified collection at the given position. @param i index at which to insert the first element from the collection @param objectList collection of COSBase objects to add
734 Updates document state using an array of child objects. @param children COSArray containing child objects to process
735 Retrieves the role map from the PDF structure. @return Map containing role mappings or an empty map if not found
736 Adds a PDF object to the pool, handling encryption and key management. @param key unique identifier for the COSBase object (optional) @param base COSBase object to add @return actual COSBase used for storage, or null if not added
737 Applies a protection policy to the PDF document. @param policy the ProtectionPolicy object defining security requirements @throws IOException if no suitable security handler is available
738 Retrieves the glyph name for a given character code. @param code character code to find the glyph name for @return glyph name or ".notdef" if not found
739 Converts character code to glyph ID. @param code character code to convert @return glyph ID as an integer @throws IOException if an I/O error occurs
740 Retrieves the Mac subtype attribute of the embedded file. @return String representation of the Mac subtype or null if not found
741 Retrieves the Mac creator of the embedded file. @return String representing the Mac creator or null if not found
742 Retrieves the Mac resource fork from embedded file parameters. @return String representation of the Mac resource fork or null if not found
743 Retrieves a CIDFontMapping for the specified base font and descriptor. @param baseFont the PostScript name of the font @param fontDescriptor PDF font descriptor for matching @param cidSystemInfo CID system info for character set compatibility @return CIDFontMapping object or null if not found
744 Validates owner password for PDF encryption. @param password owner's password as a string @param user user password bytes @param owner owner password bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision level @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag indicating if metadata is encrypted @return true if passwords match, false otherwise @throws IOException if an I/O error occurs or unknown revision
745 Decrypts a PDF object using specified object and generation numbers. @param obj the PDF object to decrypt @param objNum unique object identifier in PDF @param genNum generation number of the object @return decrypted COSBase or original object if not applicable @throws IOException if an I/O error occurs
746 Writes text from defined regions in a PDF page. Iterates over each region, setting up character and output data, then calls superclass method to process the content.
747 Retrieves date value from dictionary by string key. @param key the PDF name string key @return Calendar object or null if not found or conversion fails
748 Retrieves date value from dictionary by key or returns default. @param key the key for which to retrieve the date @param defaultValue value to return if date is not found @return Calendar object or provided default if not found
749 Retrieves the creation date of the PDF document. @return Calendar object representing the creation date or null if not found
750 Retrieves the modification date of the PDF document. @return Calendar object representing the modification date or null if not found
751 Retrieves the creation date of the annotation. @return Calendar object representing the creation date or null if not found @throws IOException if an error occurs while accessing the annotation data
752 Retrieves the creation date of the annotation. @return Calendar object representing the creation date or null if not found
753 Retrieves the signing date of the digital signature. @return Calendar object representing the signing date or null if not found
754 Writes a PDF operator to the output stream. @param op PDF operator to write @throws IOException if an I/O error occurs
755 Writes prepared COSBase objects to a COSStream. @param stream target COSStream for writing @return the updated COSStream @throws IOException if an I/O error occurs
756 Writes a COS array to the output stream. @param output target output stream @param cosArray COSArray object to write @throws IOException if an I/O error occurs
757 Writes a COSDictionary to the output stream. @param output target OutputStream for writing @param cosDictionary COSDictionary object to write @throws IOException if an I/O error occurs
758 Writes text with positioning to the PDF content stream. @param textWithPositioningArray array of Float and String types for text and positions @throws IOException if an I/O error occurs
759 Writes text with positioning to the PDF content stream. @param textWithPositioningArray array of Float and String types for text and positions @throws IOException if an I/O error occurs
760 Writes text with positioning to the PDF content stream. @param textWithPositioningArray array of Float and String types for text and positions @throws IOException if an I/O error occurs
761 Writes text with positioning to the PDF content stream. @param textWithPositioningArray array of Float and String types for text and positions @throws IOException if an I/O error occurs
762 Displays text on the PDF page with a space and show text operator. @param text string to be displayed @throws IOException if an I/O error occurs
763 Displays text on the PDF page and writes a space followed by a show text operator. @param text string to be displayed @throws IOException if an I/O error occurs
764 Displays text on the PDF page and writes a space after it. @param text string to be displayed @throws IOException if an I/O error occurs
765 Displays text on the PDF page and appends a space. @param text string to be displayed @throws IOException if an I/O error occurs
766 Initializes a PDTransparencyGroup with a specified PDF document. @param document PDDocument to which this transparency group belongs
767 Constructs a new PDAppearanceStream. @param document The PDDocument to associate with this appearance stream.
768 Creates a PDImageXObject from a BufferedImage encoded as JPEG. @param document PDF document to add the image to @param image source BufferedImage object @param quality compression quality (0.0 - 1.0) @param dpi dots per inch for image resolution @return PDImageXObject representing the JPEG in the PDF @throws IOException if an I/O error occurs
769 Validates button value against allowed options. @param value user-provided button value to check
770 Loads and parses an FDF document from a file. @param file the FDF file to load @return FDFDocument representing parsed data or null if exception occurs @throws IOException on I/O errors during loading or parsing
771 Loads and parses an FDF document from the given input stream. @param input stream containing FDF data @return FDFDocument object representing parsed FDF or null if error occurs @throws IOException on I/O errors during loading or parsing
772 Constructs a new PDFParser instance. @param source input stream for the PDF document @throws IOException on I/O errors during initialization
773 Outputs a curl template to the PDF at specified coordinates. @param template array of points defining the curl shape @param x x-coordinate offset @param y y-coordinate offset @throws IOException if an I/O error occurs during drawing
774 Computes and adds an arc segment to a list or directly in the PDF. @param startAng starting angle of the arc in radians @param endAng ending angle of the arc in radians @param cx x-coordinate of the center @param cy y-coordinate of the center @param rx radius along the x-axis @param ry radius along the y-axis @param out list to store points or null if adding directly to PDF @param addMoveTo whether to add a move-to command at the start @throws IOException if an I/O error occurs
775 Initializes tiling paint with specified parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param xform transformation matrix @throws IOException if an I/O error occurs during initialization
776 Retrieves an opaque image from the PDF document. @return BufferedImage representation of the opaque image @throws IOException if an I/O error occurs during processing
777 Decodes LZW-encoded data from input stream. @param encoded input stream containing LZW-encoded data @param decoded output stream for decompressed data @param parameters COSDictionary with decoding parameters @param index index of the filter in the filter list @return DecodeResult object with decoding parameters @throws IOException if an I/O error occurs during processing
778 Adds a marked content element as a child. @param markedContent the marked content to append @throws IllegalArgumentException if MCID is invalid
779 Fetches and sets the UCS2 CMap for a font. Handles composite fonts with predefined or descendant CJK CMaps. @throws IOException if an I/O error occurs
780 Determines if the text field should use comb formatting. @return true if conditions for comb formatting are met, false otherwise
781 Prepares the document for decryption using provided encryption details and material. @param encryption PDEncryption object containing encryption settings @param documentIDArray array of document IDs @param decryptionMaterial DecryptionMaterial object with required credentials @throws IOException if decryption preparation fails or materials are incompatible
782 Retrieves the width of a space character in PDF units. Uses cached value if available, otherwise computes from various sources. @return width of the space character as float
783 Determines if the font has fixed pitch. @return true if the font is monospaced, false otherwise
784 Determines if the font has serif style. @return true if serif style is set, false otherwise
785 Determines if the font is symbolic. @return true if the font has the SYMBOLIC flag set, false otherwise
786 Checks if the font has the script flag set. @return true if script flag is set, false otherwise
787 Checks if the font is non-symbolic. @return true if the font is non-symbolic, false otherwise
788 Checks if the font style is italic. @return true if the italic flag is set, false otherwise
789 Checks if the font is set to all capital letters. @return true if all caps flag is set, false otherwise
790 Checks if the font supports small caps. @return true if small cap feature is enabled, false otherwise
791 Checks if the font is forced to be bold. @return true if force bold flag is set, false otherwise
792 Retrieves a PDAbstractPattern by color. @param color the color whose pattern is to be retrieved @return PDAbstractPattern object or throws IOException if not found
793 Creates a PDField instance from a dictionary. @param form the AcroForm containing the field @param field the COSDictionary representing the field data @param parent the parent PDNonTerminalField, if any @return PDField instance or null if invalid field type
794 Converts stream content to text string. @return String representation of the stream or empty if an error occurs
795 Creates an input stream from the PDF stream. @return COSInputStream with decoded data @throws IOException if I/O error occurs during creation or decoding
796 Collects patches from a PDF shading dictionary. @param xform additional affine transform for points @param matrix transformation matrix for points @param controlPoints number of control points in the patch @return List of Patch objects or empty list if no valid patches found @throws IOException if an I/O error occurs during processing
797 Creates a descendant CID font from a COS dictionary. @param dictionary PDF dictionary for the font @param parent PDType0Font parent of this font @return PDCIDFont object or throws IOException if invalid font type
798 Returns an iterator over collected COSBase objects. Utilizes internal collection management for traversal. @return Iterator object for COSBase elements
799 Adds a COSObjectable to the array. Converts the object to COSBase and delegates to add(COSBase). @param object the COSObjectable to add
800 Grows the COSArray to a specified size, filling with a given object. @param size desired array size @param object object to fill array slots with
801 Sets the array with a new list of float values. @param value array of float values to set
802 Prepares and returns the cross-reference stream for a PDF document. @return Completed COSStream object with necessary entries set. @throws IOException if an I/O error occurs during stream creation or data writing.
803 Constructs a COSArrayList with an initial object and associated PDFBox structures. @param actualObject the actual Java object to manage @param item the COSBase item representing the object in PDF structure @param dictionary parent COSDictionary for this list @param dictionaryKey key in the parent dictionary that references this list
804 Converts a list of objects to a COSArray. Handles various types including String, Number, and COSObjectable. @param cosObjectableList the input list of objects @return a COSArray containing converted COSBase objects
805 Initializes a PDRange with default values [0, 1].
806 Retrieves or constructs the encode values for the PDF function. @return COSArray containing encode values or default if not set
807 Initializes a PDFunctionType2 with given function object. @param function COSBase object representing the PDF function
808 Initializes a new FDFOptionElement with default empty strings.
809 Initializes a new PDFontSetting with default font settings. Sets up a COSArray with initial values for font configuration.
810 Retrieves or creates the white point for the color space. @return PDTristimulus object representing the white point
811 Retrieves the black point for the color space. Uses default values if not present in the dictionary. @return PDTristimulus object representing the black point
812 Converts color components and pattern name to a COSArray. @return COSArray containing color components, possibly with a pattern name
813 Initializes a PDDeviceN object for DeviceN color space. Constructs a COSArray and sets up initial placeholders.
814 Initializes a PDGamma object with default RGB values set to zero.
815 Retrieves the alternate color space for the PDF stream. @return PDColorSpace object representing the alternate color space @throws IOException if there is an error processing the color space
816 Initializes an indexed color space for RGB with 256 colors. Constructs a COSArray and sets up default values for indexed color configuration.
817 Creates a default range array for LAB color space. @return COSArray with min and max values for L, A, B components
818 Initializes a new PDPattern with specified resources. @param resources PDF document resources
819 Initializes a new PDSeparation object. Constructs a COSArray with separation details and placeholders.
820 Initializes a PDTristimulus with zero tristimulus values. Sets up the internal COSArray with three COSFloat zeros.
821 Initializes a PDTristimulus with float array. @param array tristimulus values (X, Y, Z)
822 Sets the transformation matrix for the form XObject. @param transform AffineTransform object defining the transformation
823 Creates a PDImageXObject from a byte array. @param document PDF document to add the image @param byteArray JPEG image data as bytes @return PDImageXObject representing the JPEG image @throws IOException if an I/O error occurs during processing
824 Converts the transformation matrix to a COSArray. @return COSArray representing the matrix elements
825 Sets the element at a specific index with a COSObjectable. @param index position in the array @param object new COSObjectable to set
826 Sets an integer value at a specified index. @param index position in the array @param value integer to be stored
827 Sets the PDF name at a specified index. @param index position in the array @param name PDF name string to set
828 Sets a string at the specified index in the array. @param index position in the array @param string string to be set or null
829 Sets the minimum value of the range. @param min the new minimum value to set
830 Sets the maximum value of the range. @param max the maximum value to set
831 Sets the x-coordinate of the lower-left corner. @param value the x-coordinate value
832 Sets the Y coordinate of the lower-left corner. @param value the Y coordinate to set
833 Sets the X coordinate of the upper right corner. @param value the new X coordinate for the upper right corner
834 Sets the upper-right Y coordinate of the rectangle. @param value the new Y coordinate value
835 Sets the color at a specified index using PDGamma. @param index position in the array @param colour PDGamma object representing the color
836 Sets the option value in the FDF document. @param opt the new option string to be set
837 Sets the default appearance string for the FDF option. @param da the appearance string to be set
838 Sets the font size. @param size the desired font size in points
839 Sets colorant names in DeviceN color space. @param names list of colorant names
840 Sets DeviceN color space attributes. @param attributes PDDeviceNAttributes object to set
841 Sets the alternate color space. @param cs PDColorSpace object representing the alternate color space
842 Sets the red component of the color. @param r red value to be set
843 Sets the green component of the color. @param g green value to be set
844 Sets the blue component of the color. @param b blue value to be set
845 Sets the color component range in the PDF stream. @param range PDRange object defining min and max values @param n index of the component to set
846 Sets the base color space. @param base PDColorSpace object to be set as the base color space
847 Sets the colorant name in the array. @param name the new colorant name as a string
848 Sets the alternate color space. @param colorSpace new PDColorSpace object to set
849 Sets the X tristimulus value. @param x new X value
850 Sets the Y tristimulus value. @param y new Y value to set
851 Sets the Z tristimulus value. @param z the Z value to set
852 Sets an item in the dictionary using a key and a COSObjectable value. Converts COSObjectable to COSBase before setting. @param key unique identifier for the item @param value data to store (COSObjectable object)
853 Sets a boolean value in the dictionary. @param key unique identifier for the item @param value boolean value to store
854 Sets a boolean value in the dictionary. @param key unique identifier for the item @param value boolean value to store
855 Sets an item in the dictionary using a string key. @param key unique identifier for the item @param value data to store (COSBase object)
856 Sets a PDF name in the dictionary. @param key unique identifier for the item @param value string representing the PDF name
857 Sets a string value in the dictionary. @param key unique identifier for the item @param value string to be stored
858 Sets an integer value in the dictionary. @param key unique identifier for the item @param value integer value to store
859 Sets a long value in the dictionary. @param key unique identifier for the item @param value long value to be stored
860 Sets a float value in the dictionary. @param key unique identifier for the item @param value float data to store
861 Creates a COSStream from a given dictionary and position. @param dictionary source dictionary containing stream data @param startPosition start position of the stream in the file @param streamLength length of the stream @return initialized COSStream object @throws IOException if an I/O error occurs
862 Sets the encryption dictionary in the document's trailer. @param encDictionary encryption settings to apply
863 Sets the document ID in the PDF trailer. @param id COSArray representing the document ID
864 Wraps existing page content in a save/restore pair to control additional content addition. @param page PDPage object representing the PDF page @throws IOException if an I/O error occurs during stream creation or writing
865 Updates parent and structure type for entries in an array. @param kArray array of COSBase objects @param newParent new parent dictionary to set @param newStructureType optional new structure type to set
866 Updates page references in PDF structure tree. @param cloner utility for cloning PDF components @param parentTreeEntry dictionary containing page and object references @param objMapping mapping of original to cloned objects @throws IOException if an I/O error occurs
867 Merges entries from source dictionary into destination dictionary, excluding specified keys. @param src source PDF dictionary @param dst destination PDF dictionary @param cloner utility for cloning COSBase objects @param exclude set of keys to exclude from merging @throws IOException if an I/O error occurs during the process
868 Searches for a PDF trailer and populates the given COSDictionary with relevant data. @param trailer dictionary to populate with trailer information @return true if trailer is found and populated, false otherwise
869 Searches for and sets trailer items in the given COSDictionary. @param trailer PDF trailer dictionary to update @return true if a root object is found, false otherwise
870 Parses the PDF trailer and checks for required fields. Initializes the document and marks it as decrypted. Throws IOException if root object is missing or invalid.
871 Parses the next token from the PDF content stream. @return parsed object or null if no more tokens @throws IOException if an I/O error occurs during parsing
872 Writes a PDF document with optional signing. @param doc PDDocument to write @param signInterface Signature interface for document signing @throws IOException if an I/O error occurs
873 Initializes a new PDDocument with an empty structure. @param streamCacheCreateFunction function to create stream caches
874 Retrieves or creates the document information. Initializes with trailer's INFO dictionary or creates a new one if missing. @return PDDocumentInformation object representing the document info
875 Sets document information. @param info PDDocumentInformation object containing metadata
876 Initializes the PDF document catalog. @param doc PDDocument instance to be associated with this catalog
877 Retrieves or creates the list of threads in the document. @return List of PDThread objects representing threads
878 Sets the list of threads in the document catalog. @param threads List of PDThread objects representing threads in the PDF
879 Retrieves or creates additional actions for the document catalog. @return PDDocumentCatalogAdditionalActions object representing actions
880 Adds an output intent to the document catalog. @param outputIntent PDOutputIntent object to add
881 Sets the list of output intents in the document catalog. @param outputIntents List of PDOutputIntent objects representing output intents
882 Initializes a PDDocumentNameDictionary for the given document catalog. @param cat the PDF document catalog
883 Sets the crop box of the PDF page. @param cropBox PDRectangle defining the crop area or null to remove it
884 Sets the content streams of the PDF page. @param contents list of PDStream objects representing the page's content
885 Sets thread beads on the PDF page. @param beads list of PDThreadBead objects representing threads
886 Retrieves or creates the additional actions dictionary for the page. @return PDPageAdditionalActions object representing the page's actions
887 Sets annotations on the PDF page. @param annotations list of PDAnnotation objects to be added
888 Sets the viewports for this PDF page. @param viewports list of PDViewportDictionary objects or null to remove existing viewports
889 Initializes a new PDPageTree with an empty page structure. Sets up the root dictionary and initializes essential attributes.
890 Retrieves child nodes from a given PDF dictionary. Handles malformed entries by replacing nulls with empty pages. @param node parent dictionary containing child references @return list of COSDictionary representing child nodes
891 Adds an element to the list and updates parent dictionary. @param o element to add @return true if added successfully
892 Clears all elements and updates the parent dictionary. If a parent dictionary exists, sets its item to null.
893 Replaces an element at a specified index. @param index position of the element to replace @param element new element to set @return the replaced element @throws UnsupportedOperationException if list is filtered
894 Adds an element at the specified index. Throws UnsupportedOperationException if list is filtered. Updates parent dictionary and COSArray accordingly. @param index position to insert the element @param element object to add
895 Stores a key-value pair in both the COSDictionary and the internal map. @param key unique identifier for the value @param value data to be stored (COSObjectable) @return the previous value associated with the key, or null if none
896 Converts page labels to a COS object. @return COSBase object representing page labels
897 Initializes a new complex file specification for PDF. Sets up the dictionary with type as FILESPEC.
898 Initializes a PDComplexFileSpecification with the given dictionary. @param dict existing PDF dictionary or null to create a new one
899 Sets the range values for the function. @param rangeValues array containing minimum and maximum values for each parameter
900 Sets the domain values for the function. @param domainValues COSArray representing the domain range
901 Sets encoding values for the function. @param encodeValues array of COSBase objects representing encoding values
902 Sets the decode values for the function. @param decodeValues array of COSBase objects representing decode parameters
903 Sets an attribute value by name. @param attrName the name of the attribute to set @param attrValue the new attribute value (COSBase object)
904 Removes an attribute from the structure element. @param attributeObject the attribute to remove
905 Updates the revision number for a changed attribute. @param attributeObject the attribute that has been changed
906 Adds a class name to the PDF structure element. @param className the class name to add
907 Removes a class name from the PDF structure. @param className the name of the class to remove
908 Appends a child node to the current structure node. @param object the child node to append (COSBase object)
909 Inserts a new child node before a reference child in the structure. @param newKid the new child node to insert @param refKid the existing child node before which to insert the new node
910 Removes a child node from the current structure node. @param object the child node to remove @return true if successfully removed, false otherwise
911 Sets the K value in the COS dictionary. @param k COSBase object representing the K value
912 Sets the class map for the structure tree. @param classMap mapping of class names to attributes or lists of PDAttributeObjects
913 Sets user properties for the document. @param userProperties list of user properties to be set
914 Sets the value of the user property and notifies of changes. @param value new value for the property (COSBase object)
915 Retrieves or initializes the guideline color. @return PDColor object representing the guideline color
916 Retrieves the line dash pattern for the guideline. Initializes with default pattern if none exists. @return PDLineDashPattern object representing the dash pattern
917 Sets the line dash pattern for guidelines. @param dashArray array defining dash pattern or null to clear it
918 Sets the cryptographic filter method. @param cfm unique identifier for the encryption method
919 Sets the encryption filter. @param filter name of the filter to apply
920 Sets the owner encryption key. @param o byte array representing the owner key @throws IOException if an I/O error occurs
921 Sets the user encryption key. @param u byte array representing the user key @throws IOException if an I/O error occurs
922 Sets the owner encryption key. @param oe byte array representing the encryption key @throws IOException if an I/O error occurs
923 Sets the user encryption key. @param ue byte array representing the user encryption key
924 Sets the encryption recipients. @param recipients array of recipient byte arrays @throws IOException if an I/O error occurs
925 Sets the cryptographic filter dictionary. @param cryptFilterName name of the crypt filter @param cryptFilterDictionary dictionary containing crypt filter settings
926 Sets the stream filter name for encryption. @param streamFilterName unique identifier for the stream filter
927 Sets the name of the string filter. @param stringFilterName COSName representing the string filter
928 Sets encryption permissions. @param perms byte array representing permissions @throws IOException if an I/O error occurs
929 Removes V4.5 encryption filters from the PDF document. Clears CF, STM_F, and STR_F entries in the dictionary.
930 Initializes a new FDF annotation with default properties. Sets up the underlying COSDictionary for storing annotation data.
931 Sets the annotation's color. @param c Color object representing the new color
932 Sets rich contents of the annotation. @param rc rich content string to be stored
933 Sets the interior color of the circle annotation. @param color Color object representing the new interior color
934 Sets the callout line coordinates for the annotation. @param callout array of float values representing the callout points
935 Sets the ink list for the annotation. @param inklist List of float arrays representing ink coordinates
936 Sets the coordinates of the line annotation. @param line array containing start and end points [x1, y1, x2, y2]
937 Sets the interior color of the line annotation. @param color Color object to set as the interior color
938 Sets the horizontal offset for the caption of a line annotation. @param offset the horizontal offset value
939 Sets the vertical offset for the caption of a line annotation. @param offset the vertical offset value
940 Sets polygon vertices. @param vertices array of vertex coordinates
941 Sets the interior color of a polygon annotation. @param color Color object representing the desired interior color
942 Sets the vertex coordinates of the polyline annotation. @param vertices array of float values representing vertex coordinates
943 Sets the interior color of the polyline annotation. @param color Color object representing the new interior color
944 Sets the interior color of the annotation. @param color Color object representing the desired interior color
945 Sets annotation coordinates. @param coords array of coordinate values
946 Sets the document ID in the FDF dictionary. @param id COSArray representing the document ID
947 Sets form fields in the FDF document. @param fields list of FDFField objects representing form fields
948 Sets the list of FDF pages. @param pages List of FDFPage objects representing the document's pages
949 Sets annotations in the FDF document. @param annots list of annotations to be added
950 Sets differences stream in FDF document. @param diff COSStream containing differences data
951 Sets the list of embedded FDF files. @param embedded list of PDFileSpecification objects representing embedded FDFs
952 Sets child fields for the form. @param kids list of FDFField objects representing child fields
953 Sets the value of a form field. @param value object representing the field value (String, List<String>, or COSObjectable) @throws IOException if an unknown type is provided
954 Sets the value of the form field. @param value data to store (COSBase object)
955 Sets field flags for the form field. @param ff integer representing field flags
956 Sets the field flags for a form field. @param ff integer representing the field flags
957 Sets clear field flags for the form field. @param ff integer representing the clear field flags
958 Sets widget field flags. @param f integer representing field flags
959 Sets widget field flags in the FDF field. @param ff integer representing field flags
960 Sets the clear widget field flags. @param ff integer representing field flags
961 Sets rich text value for the field. @param rv rich text value as COSString
962 Sets rich text content for the field. @param rv COSStream containing rich text data
963 Sets JavaScript to execute before form submission. @param before JavaScript code string
964 Sets JavaScript action to execute after form submission. @param after script to run post-submission
965 Sets JavaScript actions from a map to the FDF document. @param map key-value pairs of action names and PDActionJavaScript objects
966 Sets the list of templates for this FDF page. @param templates List of FDFTemplate objects representing page templates
967 Sets form fields in the FDF template. @param fields list of FDFField objects to be added
968 Builds font widths array for CID to GID mapping. @param cidToGid mapping of CIDs to GIDs @throws IOException if an I/O error occurs
969 Constructs a new PDFont instance. Initializes the font dictionary and sets its type to "Font".
970 Initializes a new PDFontDescriptor with a font description dictionary. Sets the "Type" entry to "FontDescriptor".
971 Sets the font name for the PDF descriptor. @param fontName the name of the font to set
972 Sets the font family for the PDF descriptor. @param fontFamily name of the font family to set
973 Sets the font stretch attribute. @param fontStretch the font stretch value as a string
974 Sets the font bounding box for the PDFontDescriptor. @param rect PDRectangle defining the bounding box coordinates
975 Sets the character set for the font. @param charSet character encoding set as a string
976 Initializes a font encoding with a base encoding and differences. @param baseEncoding the base encoding type (COSName) @param differences array of character code differences (COSArray)
977 Sets the gamma correction value. @param value the gamma value to apply
978 Retrieves or creates the gamma values for the color space. @return PDGamma object representing the gamma values
979 Sets the gamma correction for RGB colors. @param gamma PDGamma object representing the gamma values
980 Sets the transformation matrix for color space. @param matrix the new transformation matrix to set
981 Retrieves and initializes separation colorants. @param resources PDF document resources @return Map of colorant names to PDSeparation objects @throws IOException if an I/O error occurs
982 Sets the colorants for the DeviceN color space. @param colorants map of colorant names to PDColorSpace objects
983 Initializes a new instance of PDTransparencyGroupAttributes. Sets up the underlying COSDictionary with transparency settings.
984 Sets image filters. @param filters list of filter names to apply
985 Initializes a new optional content membership dictionary. Sets the type to "OCMD" in the underlying COSDictionary.
986 Sets the visibility policy for optional content. @param visibilityPolicy unique identifier for the policy
987 Sets the transformation matrix for the pattern. @param transform AffineTransform object defining the matrix
988 Sets the bounding box for the tiling pattern. @param bbox PDRectangle representing the new bounding box or null to remove it
989 Sets the background color for the shading. @param newBackground COSArray representing the new background color
990 Sets the bounding box for shading. @param newBBox PDRectangle representing the new bounding box
991 Sets the color space for the shading. @param colorSpace PDColorSpace object to set
992 Sets the shading functions. @param newFunctions array of COSArray containing functions
993 Sets the transformation matrix for the shading. @param transform AffineTransform object defining the matrix
994 Sets the domain for the shading. @param newDomain array representing the domain values
995 Sets the extend values for the shading. @param newExtend COSArray containing the extend values
996 Sets the domain for the shading. @param newDomain COSArray representing the domain values
997 Sets the coordinates for the shading. @param newCoords array of coordinates defining the shading area
998 Sets the decode values for shading. @param decodeValues array containing decode parameters
999 Initializes a new instance of PDExtendedGraphicsState. Sets up the internal dictionary with the type identifier for extended graphics state.
1000 Sets the blend mode for graphics. @param bm BlendMode to apply
1001 Sets or removes a float item in the dictionary. @param key unique identifier for the item @param value float value to set (null to remove)
1002 Sets the transfer function in the graphics state. @param transfer COSBase object representing the transfer function
1003 Sets the TR2 transfer function in the graphics state. @param transfer2 COSBase object representing the transfer function
1004 Sets the sequence of subsequent actions. @param next list of PDAction objects representing next actions
1005 Sets the 'T' item in the action dictionary. @param t COSBase object representing the value for 'T'
1006 Sets the visibility flag 'H' in the PDF action. @param h boolean value indicating whether elements should be hidden
1007 Sets fields to be reset in the PDF form. @param array COSArray containing field names to reset
1008 Sets the sound content for the action. @param sound COSStream containing audio data
1009 Sets the form fields to be submitted. @param array COSArray containing field names
1010 Sets the destination for the action. @param d COSBase object representing the destination
1011 Sets the "B" parameter of the PDF action. @param b COSBase object representing the value to be set
1012 Sets the relationship type for the target directory. @param relationship valid COSName values: P or C @throws IllegalArgumentException if invalid relationship is provided
1013 Initializes a new PDF annotation. Sets up the base dictionary with type 'Annot'.
1014 Initializes a PDAnnotation with the given dictionary. Sets default annotation type if not specified or logs a warning for mismatched types. @param dict COSDictionary containing annotation properties
1015 Sets the annotation's bounding rectangle. @param rectangle PDRectangle defining new bounds
1016 Sets the border style of the annotation. @param borderArray COSArray representing the border settings
1017 Sets rectangle margin differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1018 Sets the rectangle differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1019 Sets the callout line coordinates. @param callout array of floats representing callout points
1020 Sets the ink list for the annotation. @param inkList 2D array representing ink paths
1021 Sets the line coordinates. @param l array of floats representing line points
1022 Sets the horizontal offset for the annotation's caption. @param offset the horizontal offset value
1023 Sets the vertical offset for the caption of a line annotation. @param offset the vertical offset value as a float
1024 Sets the quadrilateral points defining the link's annotation area. @param quadPoints array of floats representing the vertices
1025 Sets rich content text for the annotation. @param rc rich content string to be set
1026 Sets the vertices of the polygon annotation. @param points array of x,y coordinate pairs defining the polygon's vertices
1027 Sets the vertices of the polyline annotation. @param points array of vertex coordinates (x1, y1, x2, y2, ...)
1028 Sets the parent markup annotation. @param annot parent PDAnnotationMarkup object
1029 Sets rectangle differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1030 Sets the quad points defining the text markup area. @param quadPoints array of float values representing the quad points
1031 Initializes a new PDAppearanceDictionary with a required normal appearance entry.
1032 Sets the dash style of the border. @param dashArray array defining the dash pattern
1033 Retrieves or creates the dash pattern for the border. @return PDLineDashPattern object representing the dash style
1034 Sets the operating system information in the PDF properties. @param os operating system name or null to remove OS info
1035 Initializes a new PDSeedValue instance with a default dictionary. Sets the type to 'SV' and marks the dictionary as direct.
1036 Sets the digital signature filter. @param filter COSName representing the filter type
1037 Sets the sub-filter for digital signature. @param subfilter list of sub-filter names
1038 Sets the digest method for digital signatures. @param digestMethod list of allowed digest names @throws IllegalArgumentException if any name is not allowed
1039 Sets the list of signature reasons. @param reasons list of string reasons for signing
1040 Sets the MDP (Manual Digital Signature) property. @param mdp PDSeedValueMDP object containing MDP settings
1041 Sets the timestamp for the digital signature. @param timestamp PDSeedValueTimeStamp object containing timestamp details
1042 Sets the legal attestation strings in the PDF signature. @param legalAttestation list of legal attestation strings
1043 Initializes a new digital signature certificate. Sets up the COSDictionary with necessary attributes.
1044 Sets the subject attribute in the certificate. @param subjects list of byte arrays representing the subject
1045 Adds a subject to the certificate. @param subject byte array representing the subject
1046 Sets the subject distinguished name (DN) for a certificate. @param subjectDN list of maps containing key-value pairs for each DN component
1047 Sets the key usage extensions in the certificate. @param keyUsageExtensions list of key usage extension strings
1048 Adds a key usage extension to the certificate. Validates characters and updates the COSDictionary. @param keyUsageExtension string representing key usage (only '0', '1', 'X' allowed)
1049 Sets the issuer list in the certificate. @param issuers List of byte arrays representing issuer data
1050 Adds an issuer to the certificate's issuer list. @param issuer byte array representing the issuer
1051 Sets the OID (Object Identifier) in the certificate. @param oidByteStrings list of byte arrays representing the OID
1052 Adds an OID to the certificate's OID list. @param oid byte array representing the OID to add
1053 Initializes a new digital signature. Sets up the COSDictionary with type 'Sig'.
1054 Sets the signature type in the COSDictionary. @param type COSName representing the signature type
1055 Sets the filter for the digital signature. @param filter COSName representing the filter type
1056 Sets the subfilter type of the digital signature. @param subfilter COSName representing the subfilter type
1057 Sets the byte range of the signature. @param range array containing four integers defining the byte range
1058 Sets the contents of the digital signature. @param bytes byte array containing the signature content
1059 Sets the text color for the outline item. @param textColor Color object representing the desired text color
1060 Initializes a new PDAcroForm for the given PDF document. @param doc PDF document to manage forms in
1061 Sets form fields in the PDF document. @param fields list of PDField objects representing form fields
1062 Sets the calculation order of form fields. @param fields list of PDField objects representing form fields
1063 Constructs a new PDButton instance. @param acroForm the AcroForm containing the button
1064 Sets export values for the button. @param values list of string values to be exported
1065 Initializes a new PDChoice instance. @param acroForm the AcroForm containing the choice field
1066 Sets the display options for a choice field. @param displayValues list of option strings to be set
1067 Sets options for a choice field. @param exportValues list of export values @param displayValues list of display values
1068 Sets selected options by index for multi-select choice fields. @param values list of indices to select
1069 Sets child fields for the non-terminal field. @param children list of PDField objects representing child fields
1070 Sets the value of the field. @param object new value as a COSBase object
1071 Sets the default value of the field. @param value default value to be set (COSBase object)
1072 Constructs a new PDSignatureField instance. @param acroForm the AcroForm containing the field
1073 Constructs a new PDTextField instance. @param acroForm the AcroForm containing the field
1074 Sets the default style string for the text field. @param defaultStyleString the style string to apply or null to remove it
1075 Sets the rich text value for the PDF variable text field. @param richTextValue the rich text content to set
1076 Sets the coordinate system origin. @param coordSystemOrigin array containing x and y coordinates of the origin
1077 Initializes a new PDThread with a COSDictionary. Sets the type to "Thread".
1078 Sets the transition direction. @param direction PDTransitionDirection object representing the direction
1079 Sets the duration of the transition effect. @param duration length of the transition in seconds
1080 Sets the fly scale for the transition. @param scale the scaling factor for the fly transition effect
1081 Sets whether the fly area is opaque. @param opaque true if the fly area should be opaque, false otherwise
1082 Adds all elements from the specified collection to this list. Throws UnsupportedOperationException if the list is filtered. Updates parent dictionary if present and not empty. Converts added elements to COSBase objects. @param c collection containing elements to be added @return true if this list changed as a result of the call
1083 Processes font color settings for form fields. @param operands list of COSBase objects representing color values @throws IOException if operands are missing or invalid
1084 Adds all elements from a collection to the list at a specified index. @param index position at which to insert the elements @param c collection containing elements to be added @return true if this list changed as a result of the call @throws UnsupportedOperationException if inserting to a filtered list is not permitted
1085 Adds all elements from the specified COSArray to this array. @param objectList COSArray containing elements to be added
1086 Retrieves the standard structure type of a PDF element. @return Standardized structure type as a string
1087 Adds a PDF structure to the pool, handling streams, dictionaries, arrays, and objects. @param current the COSBase object to process @throws IOException if an I/O error occurs during processing
1088 Decrypts all elements in a COSArray. @param array the COSArray to decrypt @param objNum unique object identifier in PDF @param genNum generation number of the object @throws IOException if an I/O error occurs
1089 Retrieves date value from dictionary by key or returns default. @param key the key for which to retrieve the date @param defaultValue value to return if date is not found @return Calendar object or provided default if not found
1090 Retrieves an embedded date from a dictionary. @param embedded the key for the embedded dictionary @param key the key for the date value within the embedded dictionary @param defaultValue default Calendar to return if not found @return Calendar object or provided default if not found
1091 Writes a list of tokens to the PDF output stream. @param tokens list of objects to be written @throws IOException if an I/O error occurs while writing
1092 Processes and formats lines of text with specified alignment and spacing. @param lines list of Line objects to process @param isFirstParagraph flag indicating if the current paragraph is the first @throws IOException if an I/O error occurs during processing
1093 Inserts generated combination appearance for text field. @param contents appearance content stream @param appearanceStream appearance stream @param font PDFont object @param fontSize font size in points @throws IOException if an I/O error occurs
1094 Loads an FDF document from a specified file path. @param filename path to the FDF file @return FDFDocument representing parsed data or null if exception occurs @throws IOException on I/O errors during loading or parsing
1095 Adds the first intermediate curl to the cloud shape. @param angleCur current angle in radians @param r radius of the arc @param alpha additional angle adjustment @param cx x-coordinate of the center @param cy y-coordinate of the center @throws IOException if an I/O error occurs
1096 Generates intermediate curl template points for a cloud-like shape. @param angleCur current angle of curvature @param r radius of the curl @return array of Point2D.Double representing the curl shape @throws IOException if an I/O error occurs during arc segment computation
1097 Generates an arc segment for a PDF border. @param startAng starting angle in radians @param endAng ending angle in radians @param rx radius along the x-axis @param ry radius along the y-axis @param cx center x-coordinate @param cy center y-coordinate @param out list to store points or null if adding directly to PDF @param addMoveTo whether to add a move-to command at the start @throws IOException if an I/O error occurs
1098 Renders a glyph at specified position with given font and displacement. Handles vertical fonts and caches font heights for efficiency. @param textRenderingMatrix current text rendering matrix @param font font used for the glyph @param code character code of the glyph @param displacement vector for glyph positioning @throws IOException if an I/O error occurs
1099 Splits paragraph text into lines based on font and width constraints. @param font PDF font to measure text with @param fontSize size of the font @param width maximum line width in PDF units @return List of Line objects representing formatted text lines
1100 Determines if the font has the SYMBOLIC flag. @return Boolean indicating if the font is symbolic, or null if descriptor is missing
1101 Determines a fallback font name based on PDFontDescriptor properties. @param fontDescriptor descriptor of the font @return fallback font name as a string
1102 Retrieves the Paint object for a given PDColor. Handles different color spaces and patterns. @param color PDColor instance @return Paint object representing the color @throws IOException if an error occurs during pattern creation
1103 Retrieves all fields from the form. @return List of PDField objects representing form fields
1104 Recursively finds a child field by its name hierarchy. @param name array of field names in the hierarchy @param nameIndex current index in the name array @return PDField instance or null if not found
1105 Retrieves child fields of the non-terminal field. @return List of PDField objects representing child fields
1106 Retrieves string value from COSBase, handling COSString and COSStream. @param base the COSBase object to process @return string representation of the base or empty if unsupported type
1107 Retrieves the value of the field. @return the field's value as an Object, or null if not found @throws IOException if an error occurs during retrieval
1108 Retrieves the rich text value of the field. @return Rich text string or null if not found
1109 Retrieves the JavaScript code to execute before a form event. @return String containing the JavaScript code or null if not found
1110 Retrieves the "After" JavaScript action from the FDF dictionary. @return String representation of the "After" action or null if not found
1111 Retrieves JavaScript action as a string. @return JavaScript code or null if not found
1112 Retrieves rich content of the annotation. @return String representation of rich content or null if not found
1113 Retrieves string value from COSBase, handling both COSString and COSStream. @param base COSBase object to extract string from @return String representation or empty string if unsupported type
1114 Creates a LayoutPage for a PDF page. @param page PDPage object to process @return LayoutPage instance with combined content and resources @throws IOException if an I/O error occurs
1115 Converts PDF stream to a byte array. @return byte array containing the stream's data @throws IOException if I/O error occurs during conversion
1116 Retrieves and initializes sample data for interpolation. @return 2D array containing sample values or null if an error occurs
1117 Initializes a PatchMeshesShadingContext for PDF mesh-based shading. @param shading PDMeshBasedShadingType object representing the shading @param colorModel ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @param controlPoints number of control points in each patch @throws IOException if there's an issue accessing the dictionary or converting colors
1118 Initializes a Type4ShadingContext for PDF rendering. @param shading PDShadingType4 object defining the shading @param cm ColorModel specifying the color space @param xform AffineTransform for device coordinate conversion @param matrix Matrix for additional transformations @param deviceBounds Rectangle representing the device area @throws IOException if an I/O error occurs during initialization
1119 Initializes Type5ShadingContext for PDF rendering. @param shading PDShadingType5 object defining the shading @param cm ColorModel specifying the color space @param xform AffineTransform for device coordinate conversion @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the pixel area @throws IOException if an I/O error occurs during initialization
1120 Adds an attribute to the PDF structure element. @param attributeObject the attribute to add
1121 Adds a user property to the document. @param userProperty the PDUserProperty to add
1122 Initializes a new ICC-based color space within a PDF document. @param doc PDDocument to which this color space belongs
1123 Initializes a PDPattern with given resources and color space. @param resources PDF resources for the pattern @param colorSpace underlying color space for the pattern
1124 Sets the list of optional content groups in the dictionary. @param ocgs list of PDPropertyList objects representing OCGs
1125 Sets the X-axis changes using PDNumberFormatDictionary. @param changeXs array of PDNumberFormatDictionary objects representing X-axis changes
1126 Sets the Y-axis changes using a format dictionary array. @param changeYs array of PDNumberFormatDictionary objects representing Y-axis changes
1127 Sets the distances in the dictionary. @param distances array of PDNumberFormatDictionary objects representing distances
1128 Sets the areas in the measurement dictionary. @param areas array of PDNumberFormatDictionary objects representing areas
1129 Sets the angles in the measurement dictionary. @param angles array of PDNumberFormatDictionary objects representing angles
1130 Sets the line slopes in the dictionary. @param lineSloaps array of PDNumberFormatDictionary objects representing line slopes
1131 Grows the COSArray to a specified size. @param size desired array size
1132 Retrieves or creates the text color for this outline item. @return PDColor object representing the text color
1133 Clones a PDF element based on its type. @param src source COSBase object to clone @param dstParent parent of the destination object @param currentPageDict current page dictionary @return cloned COSBase object or original if not array or dictionary
1134 Initializes PDFXrefStreamParser with a COSStream. Parses stream data and sets up parser values. @param stream PDF cross-reference stream @throws IOException if I/O error occurs during initialization
1135 Retrieves the next action associated with this PDF action. @return List of PDAction objects representing subsequent actions or null if none found
1136 Sets the decode parameters for the PDF stream. @param decodeParams list of decode parameters to be set
1137 Sets file decoding parameters. @param decodeParams list of decoding parameters
1138 Sets child nodes (kids) for the structure node. Converts a list of objects to a COSArray and stores it in the dictionary. @param kids list of child nodes to be set
1139 Sets options for the form field. Converts a list of objects to a COSArray and assigns it to the OPT key. @param options list of option values
1140 Retrieves the color component range. @param n index of the color component @return PDRange object representing the range or default if not available
1141 Retrieves the encode range for a specific parameter. @param paramNum parameter index @return PDRange object or null if not applicable
1142 Retrieves color or four-color object by name. @param name attribute key in the dictionary @return PDGamma or PDFourColours object, or null if not found
1143 Builds font widths for CID font embedding. @param cidFont dictionary to store font widths @throws IOException if processing fails
1144 Sets the line dash pattern. @param dashPattern specifies the dash pattern for lines
1145 Initializes the color space with RGB values and sets up white point cache. @param rgb COSArray containing RGB color values
1146 Sets the guide line color. @param color PDColor object representing the new color
1147 Sets the color of the annotation. @param c PDColor object representing the new color
1148 Sets the interior color of the line annotation. @param ic PDColor object representing the new interior color
1149 Sets the interior color of the polygon annotation. @param ic PDColor object representing the new interior color
1150 Sets the interior color of the polyline annotation. @param ic PDColor object representing the new interior color
1151 Sets the interior color of the annotation. @param ic PDColor object representing the new interior color
1152 Sets the border color of an annotation. @param c PDColor object representing the new border color
1153 Sets the background color of the annotation. @param c PDColor object representing the new background color
1154 Sets the text color for the outline item. @param textColor PDColor object representing the new text color
1155 Retrieves the A component range for LAB color space. Uses default range if not specified in dictionary. @return PDRange object representing the A component range
1156 Retrieves the B component range for LAB color space. @return PDRange object representing the B component range
1157 Creates a PDImageXObject from an input stream. @param document PDF document to add the image @param stream input stream containing JPEG data @return PDImageXObject representing the JPEG image @throws IOException if an I/O error occurs during processing
1158 Sets the font for text rendering. @param font PDFont object to apply
1159 Sets the tint transformation function. @param tint PDFunction representing the tint transform
1160 Sets the tint transformation function. @param tint PDFunction representing the tint transform
1161 Sets the target PDF page. @param page PDPage object to navigate to
1162 Sets the upper limit for a PDNumberTreeNode. @param upper the upper limit value or null to clear it
1163 Sets the lower limit for a node. @param lower the lower limit value or null to clear it
1164 Sets the starting style of a line annotation. @param style the starting style to set (or null for none)
1165 Sets the end point style of a line annotation. @param style the style to set; null sets it to none
1166 Sets the starting point ending style for a polyline annotation. @param style the style to set or null for default
1167 Sets the endpoint style for a polyline annotation. @param style the new endpoint style or null for default
1168 Sets the start point ending style of the line annotation. @param style the ending style for the start point (null defaults to LE_NONE)
1169 Sets the ending style of the line annotation's endpoint. @param style the type of ending style to apply
1170 Sets the starting point ending style for the polyline annotation. @param style the style to apply; defaults to LE_NONE if null
1171 Sets the ending style for polyline annotation endpoints. @param style the ending style to apply
1172 Sets the upper limit for a name tree node. @param upper the upper boundary string to set
1173 Sets the lower limit for a name tree node. @param lower the string representing the lower limit
1174 Clips a rectangle to the page's media box. @param box the rectangle to clip @return clipped PDRectangle within media bounds
1175 Creates a retranslated rectangle with the same width and height. @return A new PDRectangle instance with updated upper right coordinates
1176 Sets the color before the current content. @param colour PDGamma object representing the color
1177 Sets the color after the first color in the collection. @param colour PDGamma object representing the new color
1178 Sets the start color using PDGamma. @param colour PDGamma object representing the start color
1179 Sets the end color using PDGamma. @param colour PDGamma object representing the end color
1180 Sets an item in the dictionary using a string key and a COSObjectable value. Converts the string key to a COSName and delegates to the overloaded method. @param key unique identifier for the item as a string @param value data to store (COSObjectable object)
1181 Sets the AcroForm for the PDF document. @param acroForm the AcroForm to set
1182 Sets viewer preferences for the PDF document. @param prefs PDViewerPreferences object containing viewer settings
1183 Sets the document outline. @param outlines PDDocumentOutline object representing the document's outline
1184 Sets the metadata of the PDF document. @param meta PDMetadata object to be set
1185 Sets the open action for the document. @param action the destination or action to perform on opening
1186 Sets additional actions for the document. @param actions PDDocumentCatalogAdditionalActions object containing actions
1187 Sets the document's name dictionary. @param names PDDocumentNameDictionary containing named destinations and actions
1188 Sets the mark info in the document's catalog. @param markInfo PDMarkInfo object containing mark information
1189 Sets the URI dictionary in the document catalog. @param uri PDURIDictionary object containing URI information
1190 Sets the structure tree root of the PDF document. @param treeRoot PDStructureTreeRoot object representing the document's structure
1191 Sets page labels for the document. @param labels PDPageLabels object containing page label configurations
1192 Sets the destinations in the PDF document's name dictionary. @param dests destination tree node to set
1193 Sets the embedded files node in the document. @param ef PDEmbeddedFilesNameTreeNode object representing embedded files
1194 Sets JavaScript for the document. @param js PDJavascriptNameTreeNode representing JavaScript elements
1195 Constructs a new PDF page with specified dimensions. @param mediaBox defines the page's size and orientation
1196 Sets the resources for this PDF page. @param resources PDResources object containing page resources
1197 Sets the media box for the PDF page. @param mediaBox PDRectangle representing the new media box or null to remove it
1198 Sets or removes the bleed box of the PDF page. @param bleedBox PDRectangle representing the bleed box or null to remove it
1199 Sets the trim box of the PDF page. @param trimBox rectangle defining the crop area or null to remove it
1200 Sets the ArtBox for this page. @param artBox PDRectangle representing the new ArtBox or null to remove it
1201 Sets the content stream of the PDF page. @param contents PDStream representing the page's content
1202 Sets metadata for the PDF page. @param meta PDMetadata object containing metadata information
1203 Sets additional actions for the page. @param actions PDPageAdditionalActions object containing actions to be set
1204 Sets the transition effect for the page. @param transition PDTransition object representing the transition effect
1205 Sets the transition effect and duration for the page. @param transition PDTransition object defining the transition effect @param duration duration of the transition in seconds
1206 Adds or updates a resource in the PDF document. @param kind type of resource (e.g., font, color space) @param name unique identifier for the resource @param object data to store (COSObjectable object)
1207 Sets the embedded file in the PDF specification. @param file PDEmbeddedFile to be set
1208 Sets the embedded file with Unicode name. @param file PDEmbeddedFile to be set
1209 Sets the associated page for the marked content reference. @param page PDPage object representing the page to be set
1210 Sets an annotation as the referenced object. @param annotation PDAnnotation to be referenced
1211 Sets the referenced object in the PDF dictionary. @param xobject PDXObject to be referenced
1212 Sets the associated page for this PDF object reference. @param page PDPage to be linked with the current reference
1213 Sets the parent node of this structure element. @param structureNode parent node to be set
1214 Sets the associated PDF page. @param page PDPage object to be set
1215 Sets the attributes for the structure element. @param attributes Revisions object containing PDAttributeObjects
1216 Sets the ID tree node in the COS dictionary. @param idTree PDNameTreeNode representing the structure elements by ID
1217 Sets the parent tree node. @param parentTree PDNumberTreeNode representing the parent structure
1218 Sets the bounding rectangle of the annotation. @param rectangle PDRectangle object defining the annotation's position and size
1219 Sets the border style of the annotation. @param bs PDBorderStyleDictionary object defining the border style
1220 Sets the border effect dictionary for the annotation. @param be PDBorderEffectDictionary object defining the border effect
1221 Sets the fringe dimensions of the caret annotation. @param fringe PDRectangle representing the fringe dimensions
1222 Sets the fringe dimensions of the annotation circle. @param fringe PDRectangle representing the fringe size
1223 Sets the fringe rectangle of the annotation. @param fringe PDRectangle defining the fringe area
1224 Sets the fringe dimensions of the square annotation. @param fringe PDRectangle representing the fringe dimensions
1225 Sets the FDF dictionary in the catalog. @param fdf the FDF dictionary to set
1226 Sets the digital signature in the FDF catalog. @param sig PDSignature object representing the signature to be set
1227 Sets the file specification for the FDF document. @param fs PDFileSpecification object representing the file
1228 Sets JavaScript associated with the FDF document. @param js FDFJavaScript object containing script details
1229 Sets the FDF catalog in the document's trailer. @param cat FDFCatalog to be set as the root of the document
1230 Sets the appearance dictionary for the field. @param ap PDAppearanceDictionary object representing the appearance settings
1231 Sets the appearance stream reference for the field. @param ref FDFNamedPageReference object representing the appearance stream
1232 Sets the icon fit properties for the field. @param fit FDFIconFit object defining how the icon should be scaled and positioned
1233 Sets an action for the form field. @param a PDAction object representing the action to be set
1234 Sets additional actions for the field. @param aa PDAdditionalActions object containing actions
1235 Sets fractional space to allocate for icon. @param space PDRange defining the space allocation
1236 Sets the file specification for this named page reference. @param fs PDFileSpecification object representing the file spec
1237 Sets page information. @param info FDFPageInfo object containing metadata
1238 Sets the template reference. @param tRef FDFNamedPageReference object to be set
1239 Sets the font file stream. @param type1Stream PDF stream containing the font data
1240 Sets the TrueType font file stream. @param ttfStream PDStream containing the TrueType font data
1241 Sets the font file 3 (CID-keyed) stream. @param stream PDStream containing CID-keyed font data
1242 Sets the CIDSet stream in the font descriptor. @param stream PDStream containing CIDSet data
1243 Sets the white point for the color space. @param whitepoint PDTristimulus object representing the white point
1244 Sets the black point for the color space. @param blackpoint PDTristimulus object representing the black point
1245 Sets the extended graphics state for shading. @param extendedGraphicsState the new graphics state to set
1246 Sets the shading pattern resource. @param shadingResources PDShading object representing the shading pattern
1247 Sets the resources for this tiling pattern. @param resources PDResources object containing pattern resources
1248 Sets a new shading function. @param newFunction the PDFunction to use for shading
1249 Sets font settings in the graphics state. @param fs PDFontSetting object containing font configuration
1250 Sets the destination for the embedded goto action. @param d PDDestination object representing the target destination
1251 Sets the file specification for the action. @param fs PDFileSpecification object representing the file to navigate to
1252 Sets the target directory for the action. @param targetDirectory PDTargetDirectory object representing the destination
1253 Sets the destination for navigation within a PDF document. @param d PDDestination representing the target location
1254 Sets the file specification for the PDF action. @param fs PDFileSpecification object representing the file to be imported
1255 Sets the file specification for the launch action. @param fs PDFileSpecification object defining the file to launch
1256 Sets Windows-specific launch parameters. @param win PDWindowsLaunchParams object containing Windows-specific settings
1257 Sets the file specification for the remote navigation action. @param fs PDFileSpecification object representing the target file
1258 Sets the file specification for form submission. @param fs PDFileSpecification object representing the file to submit
1259 Sets the file specification for this action. @param fs PDFileSpecification object representing the file
1260 Sets the F (File) action. @param action PDAction object representing the file action
1261 Sets the "E" (enter) action for the annotation. @param e PDAction object representing the enter action
1262 Sets the X action for this annotation. @param x PDAction object representing the X action
1263 Sets the D action for annotation. @param d PDAction object representing the action to be set
1264 Sets the action to be performed when the annotation is activated. @param u PDAction object representing the action
1265 Sets the 'fo' action for the annotation. @param fo PDAction object representing the 'fo' action
1266 Sets the "BL" action in annotation's actions dictionary. @param bl PDAction object representing the action
1267 Sets the action to be performed on mouse over. @param po PDAction representing the mouse over action
1268 Sets the page closing action. @param pc PDAction representing the action to perform on page close
1269 Sets the action to be performed on mouse pointer entering annotation. @param pv PDAction object representing the action
1270 Sets a print action for the annotation. @param pi PDAction object representing the print action
1271 Sets the action to be triggered on window closing. @param wc PDAction object representing the action
1272 Sets the page opening action. @param ws action to perform on page open (PDAction object)
1273 Sets the document-specific action. @param ds PDAction representing the document-specific action to be set
1274 Sets the action to be performed on document window opening. @param wp PDAction object representing the window open action
1275 Sets the document processing action. @param dp PDAction object representing the document processing action
1276 Sets the K action for the form field. @param k PDAction object representing the K action
1277 Sets the 'F' action in the form field's actions dictionary. @param f PDAction object representing the action to be set
1278 Sets the "V" action for form field validation. @param v PDAction representing the validation action
1279 Sets the action associated with key 'C'. @param c PDAction object to be set
1280 Sets the 'Open' action for the PDF page. @param o PDAction representing the open action to be set
1281 Sets an action to be triggered when the page is closed. @param c PDAction object representing the close action
1282 Sets the target directory in the dictionary. @param targetDirectory PDTargetDirectory object to be stored
1283 Sets or removes a named destination in the dictionary. @param dest PDNamedDestination object to set, null to remove
1284 Sets the appearance dictionary of the annotation. @param appearance PDAppearanceDictionary object representing the annotation's visual appearance
1285 Sets the optional content group associated with this annotation. @param oc PDPropertyList representing the optional content group
1286 Sets the associated PDF page for this annotation. @param page PDPage object to be linked with the annotation
1287 Sets the file specification for this annotation. @param file PDFileSpecification object representing the attachment
1288 Sets the border effect dictionary of this annotation. @param be PDBorderEffectDictionary object representing the border effect
1289 Sets the rectangle difference for the annotation. @param rd PDRectangle representing the difference in dimensions
1290 Sets the action associated with the link annotation. @param action PDAction object representing the link's action
1291 Sets the border style of the link annotation. @param bs PDBorderStyleDictionary object defining the border style
1292 Sets the destination for this link annotation. @param dest PDDestination object representing the target location
1293 Sets the previous URI action for this link annotation. @param pa PDActionURI object representing the action
1294 Sets the popup annotation associated with this markup. @param popup PDAnnotationPopup object to be set
1295 Sets the annotation in reply to another. @param irt the annotation being replied to
1296 Sets the external data dictionary for the annotation. @param externalData PDExternalDataDictionary containing additional annotation data
1297 Sets the border style of the annotation. @param bs PDBorderStyleDictionary object defining the border style
1298 Sets the border effect dictionary of the polygon annotation. @param be PDBorderEffectDictionary object representing the border effect
1299 Sets the border effect dictionary for the annotation. @param be PDBorderEffectDictionary object representing the border effect
1300 Sets the rectangle difference for the annotation. @param rd PDRectangle object representing the rectangle difference
1301 Sets the appearance characteristics of the annotation. @param appearanceCharacteristics dictionary containing appearance settings
1302 Sets the action associated with the annotation. @param action PDAction to be assigned to the annotation
1303 Sets additional actions for the annotation. @param actions PDAnnotationAdditionalActions object containing actions
1304 Sets the border style of the annotation. @param bs PDBorderStyleDictionary object representing the new border style
1305 Sets the parent field of the annotation. @param field parent terminal field Throws IllegalArgumentException if field shares same COS object.
1306 Sets the normal appearance of an annotation. @param entry PDAppearanceEntry object defining the appearance
1307 Sets the normal appearance of the annotation. @param ap PDAppearanceStream object representing the normal state appearance
1308 Sets the rollover appearance for an annotation. @param entry PDAppearanceEntry object representing the rollover appearance
1309 Sets the rollover appearance of the annotation. @param ap PDAppearanceStream representing the rollover appearance
1310 Sets the down appearance of an annotation. @param entry appearance properties for the down state
1311 Sets the down appearance of the annotation. @param ap PDAppearanceStream representing the down appearance state
1312 Sets the digital signature filter in the PDF properties. @param filter PDPropBuildDataDict object representing the filter settings
1313 Sets publication security properties. @param pubSec PDPropBuildDataDict object containing security settings
1314 Sets application-specific properties in the PDF dictionary. @param app PDPropBuildDataDict object containing application data
1315 Sets the seed value certificate. @param certificate PDSeedValueCertificate object to be stored
1316 Sets the property build information in the signature. @param propBuild PDPropBuild object containing property details
1317 Sets the previous sibling of this outline item. @param outlineNode the PDOutlineNode to be set as the previous sibling
1318 Sets the next sibling in the PDF outline. @param outlineNode the PDOutlineNode to be set as the next sibling
1319 Sets the destination for this outline item. @param dest PDDestination object representing the target location in the PDF
1320 Sets an action associated with this outline item. @param action PDAction to be set
1321 Sets the structure element associated with this outline item. @param structureElement the PDStructureElement to associate
1322 Sets the first child node of this outline item. @param outlineNode the PDOutlineNode to be set as the first child
1323 Sets the last child node in the outline. @param outlineNode the PDOutlineNode to be set as the last child
1324 Sets default resources for form fields. @param dr PDResources object containing default resources
1325 Sets the XFA resource for the form. @param xfa PDXFAResource object representing the XFA content
1326 Sets the digital signature value. @param value PDSignature object representing the signature @throws IOException if an error occurs during setting
1327 Sets the default signature value. @param value PDSignature object representing the default signature
1328 Sets the seed value for the signature field. @param sv PDSeedValue object representing the seed value to set
1329 Sets additional actions for the form field. @param actions PDFormFieldAdditionalActions object containing actions
1330 Sets the list of annotation widgets associated with this field. @param children list of PDAnnotationWidget objects to be set as widgets
1331 Sets the bounding box for the viewport. @param rectangle PDRectangle object defining the new bounding box
1332 Sets the measurement dictionary for the viewport. @param measure PDMeasureDictionary containing measurement details
1333 Sets document information to the thread. @param info PDF document information
1334 Associates a thread with the bead. @param thread PDThread object to be associated
1335 Sets the next bead in the thread sequence. @param next the subsequent PDThreadBead object
1336 Sets the previous bead in the thread. @param previous the preceding bead in the sequence
1337 Sets the associated page for this bead. @param page PDPage object to associate with the bead
1338 Sets the rectangle bounds of the bead. @param rect PDRectangle object defining the bounds
1339 Sets the marked status of a PDF element. @param value true if marked, false otherwise
1340 Sets the user properties flag in the PDF marking information. @param userProps boolean indicating if user properties are enabled
1341 Sets the suspect flag in the PDF marking information. @param suspect boolean value indicating if the element is suspected
1342 Sets whether to track mouse position. @param value true to enable tracking, false otherwise
1343 Sets the popup annotation's visibility state. @param open true to show, false to hide the popup
1344 Sets the Fixed Decimal flag in the number format. @param fd boolean value indicating if fixed decimal is enabled
1345 Sets the volatility status of the embedded file. @param fileIsVolatile true if the file is volatile, false otherwise
1346 Sets the visibility of the user property. @param hidden true to hide, false to show
1347 Sets metadata encryption status. @param encryptMetaData flag to enable or disable metadata encryption
1348 Sets whether to show the caption for the line annotation. @param cap true if caption should be shown, false otherwise
1349 Sets whether the icon should scale to fit within its annotation. @param value true to enable scaling, false otherwise
1350 Sets the rename flag in the template. @param value boolean indicating whether renaming is enabled
1351 Sets anti-aliasing property. @param antiAlias flag to enable or disable anti-aliasing
1352 Sets stroking overprint control. @param op true to enable overprint, false otherwise
1353 Sets non-stroking overprint control. @param op boolean value for overprint setting
1354 Enables or disables automatic stroke adjustment. @param sa true to enable, false to disable
1355 Sets the Alpha Source flag in the graphics state. @param alpha boolean value indicating whether to use alpha for source blending
1356 Sets the text knockout flag. @param tk boolean value indicating whether to apply knockout effect
1357 Sets the window behavior for opening linked content. @param value OpenMode specifying how to open the link (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
1358 Sets the open mode for the PDF action. @param value OpenMode specifying how to open the document
1359 Sets the window behavior for opening linked content. @param value OpenMode specifying how to open the link (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
1360 Sets whether the sound should be played synchronously. @param synchronous true if sound playback is synchronized with other actions
1361 Sets whether the sound should repeat. @param repeat true to enable repetition, false otherwise
1362 Sets whether to mix the sound with other audio. @param mix true to mix, false otherwise
1363 Sets whether to display a caption for the line annotation. @param cap true to enable caption, false otherwise
1364 Sets whether the annotation is open. @param open true if annotation should be open, false otherwise
1365 Sets the pre-release status of the digital signature. @param preRelease boolean indicating if it's a pre-release version
1366 Sets flag to suppress non-embedded font warnings. @param noEmbedFontWarning boolean indicating whether to suppress warnings
1367 Sets the trusted mode flag in the PDF signature properties. @param trustedMode boolean indicating if the document is in trusted mode
1368 Sets the needAppearances flag in the form dictionary. @param value boolean indicating whether appearances should be generated
1369 Sets toolbar visibility preference. @param value true to hide toolbar, false to show
1370 Sets whether the menu bar is hidden in the PDF viewer. @param value true to hide the menubar, false to show it
1371 Sets whether to hide window UI elements. @param value true to hide UI, false to show
1372 Sets whether to fit the PDF window to the page. @param value true to fit window, false otherwise
1373 Sets whether to center the PDF window on screen. @param value true to center, false otherwise
1374 Sets whether to display the document title in the viewer. @param value true to display, false otherwise
1375 Sets an array of strings as a dictionary item. @param name key for the dictionary entry @param values array of string values to store
1376 Sets an array of names as a dictionary item. @param name key for the dictionary entry @param values array of name strings to set
1377 Sets an array of numbers as a PDF attribute. @param name the attribute key @param values float array to be set
1378 Sets a PDF name in the dictionary using a string key and value. @param key unique identifier for the item @param value string representing the PDF name
1379 Sets the page mode of the PDF document. @param mode desired page mode (e.g., NONE, USE_OUTLINES)
1380 Sets the page layout of the PDF document. @param layout desired page layout configuration
1381 Sets the PDF document version. @param version string representing the document version
1382 Sets the trapped status of the PDF document. @param value "True", "False", or "Unknown" @throws IllegalArgumentException if value is invalid
1383 Sets the page label style. @param style new style for page labels or null to remove it
1384 Initializes a new typed dictionary wrapper with a specified type. @param type the type name for the PDF object
1385 Sets the owner of the PDF attribute. @param owner string representing the owner's name
1386 Initializes a new PDMarkedContentReference with an empty dictionary. Sets the type of the dictionary to "MarkedContent".
1387 Initializes a new PDF object reference with a COSDictionary. Sets the type to "PDObjectReference".
1388 Sets the structure type of the PDF element. @param structureType type identifier for the structure element
1389 Sets class names with associated revision numbers. @param classNames Revisions object containing class names and their revisions
1390 Initializes a new structure node with a specified type. @param type the type of the structure node
1391 Sets the property name and notifies of changes. @param name new name for the property
1392 Sets the guideline style in the PDF. @param style string representing the guideline style
1393 Sets the sub-filter type for encryption. @param subfilter string representing the sub-filter type
1394 Sets the annotation's intent. @param intent purpose of the annotation
1395 Sets the line ending style of the annotation. @param style string representing the line ending style
1396 Sets the icon for the annotation. @param icon string representing the icon name
1397 Sets the document version in the FDF catalog. @param version string representing the document version
1398 Sets the encoding for the FDF document. @param encoding string representing the character encoding
1399 Sets the scaling option for the icon. @param option scaling configuration as a string
1400 Sets the scaling type for the icon. @param scale scaling configuration as a string
1401 Initializes a new PDF pattern with default settings. Constructs a COSDictionary for pattern properties and sets its type to "Pattern".
1402 Sets the type of the PDF action. @param type the action type to be set
1403 Sets the subtype of the PDF action. @param s subtype string to be set
1404 Sets the subtype of the annotation. @param subType string representing the annotation's subtype
1405 Sets the appearance state of the annotation. @param as string representing the new appearance state
1406 Sets the attachment name. @param name the name of the file attachment
1407 Sets the line ending style of the annotation. @param style string representing the line ending style
1408 Sets the caption positioning for the line annotation. @param captionPositioning string specifying the caption's position
1409 Sets the highlight mode for the link annotation. @param mode string representing the highlight mode
1410 Sets the reply type of the annotation. @param rt string representing the reply type
1411 Sets the intent of the annotation. @param it string representing the annotation's intent
1412 Sets the name of the rubber stamp annotation. @param name string representing the annotation's name
1413 Sets the name of the annotation. @param name new name for the annotation
1414 Sets the highlighting mode of the annotation. @param highlightingMode valid modes: 'N', 'I', 'O', 'P', 'T' @throws IllegalArgumentException if invalid mode is provided
1415 Sets the border style of the annotation. @param s string representing the border style
1416 Initializes a new external data dictionary. Sets up the COSDictionary with type "ExData".
1417 Sets the subtype of the external data dictionary. @param subtype string representing the subtype value
1418 Sets the name property in the PDF dictionary. @param name string representing the new name value
1419 Sets the URL type in the certificate. @param urlType string representing the URL type
1420 Initializes a new PDF document outline. Sets the "Type" attribute to "Outlines".
1421 Initializes a new PDDocumentOutline from an existing COSDictionary. @param dic the COSDictionary to wrap
1422 Sets default button value. Validates and stores the provided value in the PDF dictionary. @param value default value for the button
1423 Initializes a new PDMeasureDictionary with a default COSDictionary. Sets the type attribute to "Measure".
1424 Sets the subtype of the measurement dictionary. @param subtype string representing the subtype to be set
1425 Initializes a new instance of PDNumberFormatDictionary. Sets up the underlying COSDictionary with the type identifier.
1426 Sets the viewport's name. @param name new name for the viewport
1427 Initializes a new PDTransition with the specified style. @param style transition style to be applied
1428 Sets the transition dimension. @param dimension visual dimension of the transition effect
1429 Sets the motion style of the transition. @param motion PDTransitionMotion enum defining the motion type
1430 Sets the non-full screen page mode preference. @param value desired page mode for non-full screen view
1431 Sets the reading direction preference. @param value desired reading direction (e.g., LEFT_TO_RIGHT)
1432 Sets the view area preference for PDF documents. @param value boundary defining the view area
1433 Sets the view clipping preference. @param value boundary type to define the view area
1434 Sets the print area preference. @param value boundary type for printing
1435 Sets the print clip boundary preference. @param value boundary type to define clipping area for printing
1436 Sets the duplex printing preference. @param value duplex setting (e.g., SIMPLEX, DUAL_PAGE_LEFT)
1437 Sets the print scaling preference. @param value desired print scaling option
1438 Sets a date value in the dictionary. @param key unique identifier for the item @param date Calendar instance to convert and store
1439 Sets a string value in the dictionary using a given key. @param key unique identifier for the item @param value string to be stored
1440 Sets a string value in an embedded dictionary. @param embedded key for the embedded dictionary @param key unique identifier within the embedded dictionary @param value string to store
1441 Sets the document's language. @param language ISO 639-1 language code (e.g., "en" for English)
1442 Sets the document's title. @param title new title for the PDF document
1443 Sets the author of the PDF document. @param author name of the document's author
1444 Sets the subject of the PDF document. @param subject new subject string to be set
1445 Sets the keywords of the PDF document. @param keywords comma-separated list of keywords
1446 Sets the creator of the PDF document. @param creator name or identifier of the document creator
1447 Sets the producer of the PDF document. @param producer name of the producer application
1448 Sets or removes the page label prefix. @param prefix the prefix string to set; if null, removes the prefix
1449 Sets the Unicode name of the file. @param file Unicode string representing the file name
1450 Sets the file path in the PDF specification. @param file path to the file
1451 Sets the file description. @param description string describing the file
1452 Sets the unique identifier for the PDF element. @param id string representing the element's ID
1453 Sets the title of the PDF structure element. @param title string to be set as the title
1454 Sets the language attribute of the PDF element. @param language ISO 639-1 language code to be set
1455 Sets the alternate description for the PDF element. @param alternateDescription alternative text describing the element
1456 Sets the expanded form of the element. @param expandedForm string representing the expanded form
1457 Sets the actual text associated with the element. @param actualText the string representing the actual text
1458 Sets the formatted value of the user property. @param formattedValue new formatted string value to set
1459 Sets the annotation's modification date. @param date string representation of the date
1460 Sets the name of the annotation. @param name unique identifier for the annotation
1461 Sets the content of the annotation. @param contents text to be displayed in the annotation
1462 Sets the title of the annotation. @param title string to be set as the annotation's title
1463 Sets the subject of the annotation. @param subject text describing the annotation's topic
1464 Sets the symbol for the caret annotation. @param symbol string representing the desired symbol
1465 Sets default appearance for annotation. @param appearance string defining visual style
1466 Sets the default style of the annotation. @param style string representing the annotation's style
1467 Sets the style of the line annotation's caption. @param captionStyle string representing the caption style
1468 Sets the state of the annotation. @param state new state value to be assigned
1469 Sets the state model of the annotation. @param stateModel string representing the state model to be set
1470 Sets the status of the FDF document. @param status new status value to be set
1471 Sets the target URL or resource for the FDF document. @param target string representing the target destination
1472 Sets the partial name of the form field. @param partial partial field name to be set
1473 Sets the name of the page reference. @param name new name for the page reference
1474 Sets the name of the optional content group. @param name new name for the group
1475 Initializes PDOptionalContentProperties with default settings. Sets up a COSDictionary and configures optional content groups.
1476 Sets JavaScript action string. @param sAction JavaScript code to be executed
1477 Sets the file specification for the launch action. @param f file path or URL to be launched
1478 Sets the destination string for the launch action. @param d destination string to be set
1479 Sets the O parameter for launch action. @param o string representing the file path or application to launch
1480 Sets the file path or URL to be launched. @param p file path or URL as a string
1481 Sets the URI for the PDF action. @param uri the Uniform Resource Identifier to be assigned
1482 Sets the filename associated with the target directory. @param filename name of the file to be set
1483 Sets the annotation name. @param name the name to be assigned to the annotation
1484 Sets the filename for the launch parameters. @param file name of the file to be launched
1485 Sets the directory path. @param dir directory path to be set
1486 Sets the operation type. @param op operation string to be set
1487 Sets the execution parameter. @param param value to be set as execution parameter
1488 Sets the contents of the annotation. @param value text content to be set
1489 Sets the modified date of the annotation. @param m new modification date as a string
1490 Sets the name of the annotation. @param nm unique identifier for the annotation
1491 Sets the default appearance string for the annotation. @param daValue the default appearance settings as a string
1492 Sets the default style string for the annotation. @param defaultStyleString CSS-like style string for appearance customization
1493 Sets the title popup text for the annotation. @param t the title string to display in the popup
1494 Sets the subject of the annotation. @param subj the subject string to be assigned
1495 Sets the state of the text annotation. @param state new state value to be set
1496 Sets the state model of the annotation. @param stateModel string representing the state model
1497 Sets the normal caption for an annotation. @param caption text to be displayed as the normal caption
1498 Sets the rollover caption for an annotation. @param caption text to display on rollover
1499 Sets the alternate caption for the annotation. @param caption the string to be used as the alternate caption
1500 Sets the date of the digital signature. @param date string representing the date to be set
1501 Sets the URL in the certificate's COSDictionary. @param url the URL to be stored
1502 Sets the URL in the timestamp dictionary. @param url the URL to be stored
1503 Sets the name of the digital signature. @param name the name to be set in the signature
1504 Sets the location of the signature. @param location string representing the location where the signature was created
1505 Sets the reason for the digital signature. @param reason description of the signature purpose
1506 Sets the contact information in the digital signature. @param contactInfo string containing contact details
1507 Sets the title of the outline item. @param title string to be set as the item's title
1508 Sets the default appearance of form fields. @param daValue string specifying the default appearance attributes
1509 Sets the default value for the choice field. @param value default option to be selected
1510 Sets the partial name of the field. @param name partial name to be set @throws IllegalArgumentException if name contains a period character
1511 Sets the alternate field name. @param alternateFieldName alternative name for the field
1512 Sets the mapping name for the field. @param mappingName unique identifier for the field mapping
1513 Sets the value of the non-terminal field. @param value new value for the field @throws IOException if an I/O error occurs
1514 Sets the field's value and applies changes. @param value new value for the text field @throws IOException if an error occurs during change application
1515 Sets the default value of the text field. @param value default string to be set
1516 Sets the default appearance string for the text field. @param daValue default appearance string to be set
1517 Sets the scale ratio in the PDF measurement dictionary. @param scaleRatio the scaling factor to apply to measurements
1518 Sets an integer value in the dictionary using a string key. @param key unique identifier for the item @param value integer value to store
1519 Sets an integer in a nested dictionary. @param embeddedDictionary key for the embedded dictionary @param key unique identifier for the item @param value integer value to store
1520 Sets a boolean flag in the dictionary using bitwise operations. @param field key for the flag in the dictionary @param bitFlag specific bit to modify @param value true to set the bit, false to clear it
1521 Sets the structure parents attribute of the page. @param structParents integer value representing structural parent relationships
1522 Sets the rotation angle of the PDF page. @param rotation angle in degrees (0, 90, 180, or 270)
1523 Constructs a PDPageTree from a COSDictionary and PDDocument. Handles cases where the dictionary represents a single page instead of a tree. @param root the root COSDictionary of the page tree @param document the PDDocument to which this page tree belongs
1524 Removes a page node from the PDF page tree. @param node the COSDictionary representing the page to remove
1525 Adds a page to the PDF document. @param page PDPage object to be added
1526 Sets the starting page number for the label range. @param start positive integer representing the start page
1527 Sets the bits per sample for the function. @param bps number of bits per sample value to set
1528 Sets the Marker Context Identifier (MCID) for the marked content. @param mcid unique identifier for the marker context
1529 Sets the revision number for the PDF structure element. @param revisionNumber non-negative integer representing the revision level
1530 Sets the next key in the parent tree. @param parentTreeNextkey integer value for the next key
1531 Sets the encryption key length. @param length bit length of the encryption key
1532 Sets the encryption version. @param version encryption version number to be set
1533 Sets the encryption key length. @param length encryption key length in bits
1534 Sets the encryption revision level. @param revision revision number to apply
1535 Sets the encryption permissions for the PDF document. @param permissions integer representing the permission flags
1536 Sets the page number for the annotation. @param page zero-based index of the PDF page
1537 Sets the justification of the free text annotation. @param justification alignment type ("left", "centered", "right")
1538 Sets the rotation of the annotation. @param rotation degrees to rotate the annotation (0, 90, 180, or 270)
1539 Sets field flags in the FDF document. @param ff integer value representing field flags
1540 Sets field flags for form field. @param ff field flag value to be set
1541 Sets clear field flags. @param ff integer value representing field flags to clear
1542 Sets widget field flags. @param f integer representing field flags
1543 Sets widget field flags. @param ff integer value representing field flags
1544 Sets clear widget field flags. @param ff integer value representing field flags
1545 Sets font descriptor flags. @param flags integer representing font attributes
1546 Sets character widths in PDF font dictionary. @param font COSDictionary representing the font @param glyphList GlyphList for Unicode conversion @throws IOException if an I/O error occurs
1547 Sets the paint type for the pattern. @param paintType integer representing the paint type
1548 Sets the type of the pattern. @param patternType integer representing the pattern type
1549 Sets the paint type of the tiling pattern. @param paintType the new paint type value to set
1550 Sets the tiling type for the pattern. @param tilingType integer representing the tiling type
1551 Sets the shading type in the PDF document. @param shadingType integer representing the shading type
1552 Sets the number of bits per flag. @param bitsPerFlag integer value representing bits per flag setting
1553 Sets the number of vertices per row in the shading. @param verticesPerRow integer value representing the number of vertices
1554 Sets the number of bits per color component. @param bitsPerComponent number of bits for each color component
1555 Sets the number of bits per coordinate for shading. @param bitsPerCoordinate the number of bits to store each coordinate value
1556 Sets the line cap style. @param style integer representing the line cap style
1557 Sets the line join style. @param style integer representing the line join style
1558 Sets the overprint mode for graphics state. @param overprintMode integer value representing the overprint mode; null removes the setting
1559 Sets action flags for form reset. @param flags integer value representing action flags
1560 Sets action flags for form submission. @param flags integer value representing action flags
1561 Sets the page number for the target directory. @param pageNumber page number to set or remove if negative
1562 Sets the annotation index. @param index index value to set; removes annotation if negative
1563 Sets annotation flags. @param flags integer representing annotation properties
1564 Sets the structure parent index of the annotation. @param structParent index of the structure element
1565 Sets the quadding mode for the text annotation. @param q integer value representing the quadding mode (0 - left, 1 - centered, 2 - right)
1566 Sets the rotation angle of an annotation. @param rotation degrees to rotate the annotation (0-360)
1567 Sets the P value for the signature configuration. @param p integer value representing the signature policy (0-3)
1568 Sets whether timestamping is required. @param flag true if timestamping is required, false otherwise
1569 Sets the count of open child nodes. @param openCount number of open children
1570 Sets the quadding mode of text fields. @param q quadding mode (0 = left, 1 = center, 2 = right)
1571 Sets field flags in the PDF form. @param flags integer representing field attributes
1572 Sets the top index of the list box. @param topIndex index to set; null removes the entry
1573 Sets the maximum length of text in the field. @param maxLen maximum number of characters allowed
1574 Sets the Q attribute of the text field. @param q integer value representing the quadding mode (alignment)
1575 Sets a long value in the dictionary by key. @param key string identifier for the item @param value long value to be stored
1576 Writes the PDF trailer to the output stream. @param doc COSDocument instance to write the trailer for
1577 Sets the revision number of the digital signature. @param revision long value representing the revision number
1578 Sets the minimum required revision for digital signatures. @param revision long value representing the minimum revision level
1579 Sets a float value in the dictionary using a string key. Converts the key to a COSName and delegates to setFloat(COSName, float). @param key unique identifier for the item @param value float data to store
1580 Sets the user unit for the PDF page. @param userUnit the scaling factor (must be positive)
1581 Sets the guideline width in the PDF style. @param width the new width value to be set
1582 Sets the opacity of the annotation. @param opacity float value representing transparency level (0.0 - fully transparent, 1.0 - fully opaque)
1583 Sets the leader length of the line annotation. @param leaderLength the length of the leader line
1584 Sets the leader extend property of the line annotation. @param leaderExtend value to set for leader extend
1585 Sets the leader offset of the line annotation. @param leaderOffset distance from the start point to the caption
1586 Sets the font weight attribute. @param fontWeight numeric value representing the font weight
1587 Sets the italic angle of the font. @param angle italic angle value to set
1588 Sets the ascent value of the font. @param ascent height above baseline in points
1589 Sets the font descent value. @param descent font descent measurement
1590 Sets the leading (line spacing) of the font. @param leading line spacing value to be set
1591 Sets the cap height of the font. @param capHeight the cap height value to set
1592 Sets the x-height of the font. @param xHeight the new x-height value to set
1593 Sets vertical stem width of the font. @param stemV width value to be set
1594 Sets the horizontal stem height. @param stemH desired horizontal stem height value
1595 Sets the average width of the font. @param averageWidth the average width value to set
1596 Sets the maximum width of the font. @param maxWidth the maximum width value to be set
1597 Sets the missing width attribute in the font descriptor. @param missingWidth the width to be set for missing glyphs
1598 Sets the x-axis step value for tiling pattern. @param xStep distance between tile repetitions on x-axis
1599 Sets the vertical step for tiling pattern. @param yStep vertical distance between pattern tiles
1600 Sets the sound volume for the PDF action. @param volume float value representing the volume level (-1.0 to 1.0)
1601 Sets the length of the leader line. @param leaderLineLength new length for the leader line
1602 Sets the extension length of the leader line. @param leaderLineExtensionLength float value for leader line extension
1603 Sets the offset length of the leader line. @param leaderLineOffsetLength the desired offset length
1604 Sets constant opacity for the annotation. @param ca opacity value (0.0 to 1.0)
1605 Sets the border width. @param w width value to set
1606 Sets the minimum required capability level. @param minimumRequiredCapability float value representing capability
1607 Sets the CYX value in the measurement dictionary. @param cyx float value representing the CYX attribute
1608 Parses a COSStream from a dictionary. Handles missing lengths and validates stream content. @param dic dictionary containing stream data @return parsed COSStream object @throws IOException if parsing fails
1609 Parses a COSDictionary from the PDF source. @param isDirect flag indicating if the dictionary is direct @return parsed COSDictionary object @throws IOException if an I/O error occurs
1610 Parses a PDF document with specified leniency. @param lenient whether to parse in lenient mode @return PDDocument object representing the parsed PDF @throws IOException if parsing fails
1611 Processes operators from a PDF content stream. @param contentStream PDContentStream object containing the PDF data @throws IOException if an I/O error occurs during processing
1612 Parses the entire PDF content stream into a list of tokens. @return List of parsed objects from the stream or empty if no tokens found @throws IOException if an I/O error occurs during parsing
1613 Retrieves the bounding box of a glyph in a Type 3 font. @return PDRectangle representing the glyph's bounding box or null if not found @throws IOException if an I/O error occurs during parsing
1614 Retrieves the width of a character from PDF operators. @return parsed width as float @throws IOException if parsing fails or invalid data encountered
1615 Writes a PDF document without signing. @param doc PDDocument to write @throws IOException if an I/O error occurs
1616 Saves the PDF document incrementally to an output stream. @param output target stream for writing PDF data @throws IOException if an I/O error occurs during saving
1617 Saves PDF document with incremental updates. @param output target output stream for writing @param objectsToWrite set of COSDictionary objects to update @throws IOException if an I/O error occurs
1618 Creates a new PDDocument with an empty structure. Initializes using a memory-only stream cache by default.
1619 Retrieves the document catalog of the PDF. Initializes if not already present using trailer and root dictionary. @return PDDocumentCatalog instance
1620 Retrieves a COSDictionary representing the PDF page at a given 1-based index. @param pageNum 1-based index of the page to retrieve @param node current node in the page tree @param encountered number of pages already processed @return COSDictionary for the specified page or throws an exception if not found
1621 Creates a PDFileSpecification from a COSBase object. @param base the COSBase object representing the file specification @return PDFileSpecification object or null if base is null @throws IOException if the file specification type is unknown
1622 Notifies the associated structure element of a change. Updates the revision number and tracks changes.
1623 Appends a child node to the current structure node. @param objectable the child node to append (COSObjectable object)
1624 Inserts a new child node before a reference child. @param newKid the new child node to insert @param refKid the existing child node before which to insert
1625 Removes a child node that can be removed. @param objectable the object to remove as a COSObjectable @return true if successfully removed, false otherwise
1626 Sets the standard cryptographic filter dictionary. @param cryptFilterDictionary dictionary containing crypt filter settings
1627 Sets the default cryptographic filter dictionary. @param defaultFilterDictionary the crypt filter settings to apply by default
1628 Initializes a new caret annotation. Sets the subtype to "Caret".
1629 Initializes a new circular annotation. Sets up default properties and subtype in the annotation dictionary.
1630 Constructs a new file attachment annotation. Initializes the annotation with default properties and sets its subtype.
1631 Initializes a new free text annotation. Sets the subtype to "FreeText".
1632 Initializes a new FDF ink annotation. Sets the subtype to "INK".
1633 Initializes a new line annotation with default properties.
1634 Initializes a new hyperlink annotation with subtype.
1635 Initializes a new polygon annotation. Sets the subtype to "PolyGoN" in the annotation dictionary.
1636 Initializes a new polyline annotation with default properties. Sets the subtype to "PolyLine".
1637 Constructs a new sound annotation. Initializes the annotation with default properties and sets its subtype.
1638 Creates a new square annotation. Initializes with default properties and sets subtype to "Square".
1639 Initializes a new stamp annotation. Sets the subtype to "Stamp" in the annotation dictionary.
1640 Initializes a new text annotation with default properties. Sets the subtype to "Text".
1641 Default constructor initializes a new text markup annotation.
1642 Builds vertical metrics for CID font. @param cidToGid mapping of CID to glyph ID @throws IOException if an I/O error occurs
1643 Builds vertical metrics for CID font embedding. @param cidFont PDF dictionary to store vertical data @throws IOException if an I/O error occurs
1644 Default constructor for PDSimpleFont. Initializes a new instance with default settings.
1645 Retrieves an optional content group by name. @param name the name of the OCG to find @return PDOptionalContentGroup object or null if not found
1646 Retrieves all optional content groups in the PDF document. @return Collection of PDOptionalContentGroup objects
1647 Sets the decode values for shading. @param decodeValues array containing decode parameters
1648 Sets the decode values for shading. @param decodeValues array containing decode parameters
1649 Sets the line width for graphics. @param width float value representing the line width
1650 Sets the miter limit for line joins. @param miterLimit float value specifying the miter limit
1651 Sets the flatness tolerance for rendering curves. @param flatness float value representing the flatness tolerance
1652 Sets the smoothness tolerance for rendering. @param smoothness float value representing smoothness level
1653 Sets the stroking alpha constant. @param alpha float value representing the alpha constant for stroking operations
1654 Sets non-stroking alpha constant. @param alpha float value for transparency (0.0 to 1.0)
1655 Initializes a new link annotation in a PDF document. Sets the subtype to 'Link'.
1656 Constructs a new PDF markup annotation. Initializes the base dictionary with type 'Annot'.
1657 Initializes a new popup annotation. Sets the subtype to 'Popup' in the PDF dictionary.
1658 Initializes a new PDF annotation widget. Sets the subtype to 'Widget' in the annotation's dictionary.
1659 Initializes a PDAnnotationLink with the given dictionary. @param field COSDictionary containing link annotation properties
1660 Constructs a PDAnnotationMarkup from a COSDictionary. @param dict dictionary containing annotation properties
1661 Constructs a PDAnnotationPopup from a COSDictionary. @param field COSDictionary containing popup annotation properties
1662 Initializes an unknown PDF annotation. @param dic COSDictionary containing annotation properties
1663 Initializes a PDAnnotationWidget with the given COSDictionary. Sets the subtype to 'Widget' in the annotation dictionary. @param field COSDictionary containing annotation properties
1664 Sets equal margin differences for all sides of the annotation rectangle. @param difference uniform margin difference for all sides
1665 Sets equal rectangle differences for all sides of the annotation. @param difference uniform margin difference for all sides
1666 Sets equal rectangle differences for all sides. @param difference uniform margin difference for all sides
1667 Sets the border line style for a PDF annotation. @param lineWidth desired width of the border line @param bs PDBorderStyleDictionary object defining border style @param border COSArray containing border properties @throws IOException if an I/O error occurs
1668 Constructs and adds a key usage string based on boolean flags. @param digitalSignature, nonRepudiation, etc. - flags indicating key usages
1669 Constructs a new PDCheckBox instance. @param acroForm the AcroForm containing the checkbox
1670 Initializes a new PDComboBox instance. @param acroForm the AcroForm containing the combo box field
1671 Constructs a new PDListBox instance. @param acroForm the AcroForm containing the list box field
1672 Sets the value of a choice field. @param value string to be set as the field's value @throws IOException if an error occurs during setting the value
1673 Updates selected options index for multi-select choice fields. @param values list of option values to select @param options available options in the choice field
1674 Retrieves or creates the border array for an annotation. Ensures the border has at least three elements, defaulting missing values to 0. @return COSArray representing the annotation's border settings
1675 Initializes a COSWriterCompressionPool for the given PDDocument and compression parameters. @param document PDF document to compress @param parameters compression settings, defaults to new CompressParameters if null @throws IOException if an I/O error occurs during initialization
1676 Retrieves an embedded date from the dictionary. @param embedded key for the embedded dictionary @param key key for the date value within the embedded dictionary @return Calendar object or null if not found
