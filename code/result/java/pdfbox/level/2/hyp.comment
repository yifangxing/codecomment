1 Initializes COSBoolean with a standard boolean value. @param aValue true or false value to set
2 Initializes COSName instance from given string representation. @param aName name to be encapsulated
3 Ensures singleton instance of null representation.
4 Creates a COSString instance from a byte array, optionally forcing hexadecimal representation. @param bytes input byte data @param forceHex true to encode in hex format
5 Initializes an instance of the COSDictionary class.
6 Initializes a COSObject instance from a given COSBase object. @param object the underlying COSBase object to be wrapped
7 Initializes a COSObject instance with the given COSBase object and ICOSParser. @param object COSBase object to be managed @param parser ICOSParser instance for parsing purposes
8 Initializes a COSObject instance with the provided key and parser. @param key unique identifier for the object @param parser ICOSParser interface to process the object
9 Initializes a DecodeOptions instance with a specified source region. @param x left edge of the source rectangle @param y top edge of the source rectangle @param width width of the source rectangle @param height height of the source rectangle
10 Initializes a FreeXReference instance with the given object key and next free object identifier. @param key COSObjectKey representing the referenced PDF object @param nextFreeObject unique identifier of the next available free object
11 Constructs an ObjectStreamXReference instance with the specified object stream index, key, object, and parent key. @param objectStreamIndex index of the object stream @param key referenced object key @param object associated PDF object @param parentKey key of the parent object
12 Initializes an instance with stable cache enabled.
13 Initializes an instance of PDDictionaryWrapper with the given COSDictionary. @param dictionary PDF dictionary structure to be wrapped
14 Initializes an instance of PDDictionaryWrapper with the given COSDictionary. @param dictionary PDF dictionary structure to be wrapped
15 Initializes an instance of PDUserProperty with the given COSDictionary and user attribute object. @param dictionary PDF dictionary structure to be wrapped @param userAttributeObject User-defined property object to associate with the dictionary
16 Initializes an instance of PDOutlineNode with the given COSDictionary. @param dict PDF dictionary structure to be wrapped
17 Initializes an instance of PDTransition from a given COSDictionary. @param dictionary PDF dictionary structure to be wrapped
18 Initializes a PDNameTreeNode instance from a COSDictionary object. @param dict COSDictionary containing tree structure and limits
19 Initializes a PDNameTreeNode instance from a COSDictionary object. @param dic COSDictionary containing tree structure and limits
20 Initializes a PDJavascriptNameTreeNode instance from a COSDictionary object. @param dic COSDictionary containing tree structure and limits
21 Initializes a PDStructureElementNameTreeNode instance from a COSDictionary object. @param dic COSDictionary containing tree structure and limits
22 Creates a child node from a given COS dictionary. @param dic COS dictionary containing tree data
23 Initializes PDMetadata instance from given COSStream object. @param str COSStream containing XMP metadata
24 Initializes PDObjectStream instance from COSStream object. @param str COSStream object to initialize from
25 Initializes PDStream instance from COSStream object.
26 Initializes PDFunction instance from a COSBase object. @param function COSBase object representing the mathematical function
27 Initializes PDXObject from COSStream and subtype. @param stream underlying COSStream instance @param subtype object type (e.g. XObject)
28 Initializes a PDStructureNode instance with a COSDictionary. @param dictionary COSDictionary containing structure node data
29 Initializes a PDStructureTreeRoot instance from a COSDictionary. @param dic COSDictionary containing structure tree root data
30 Initializes a new instance of the `SecurityHandler` class.
31 Initializes a new instance of the SecurityHandler class with the specified protection policy. @param protectionPolicy encryption policy object
32 Initializes an instance of FDFAnnotationCaret with COSDictionary annotation data.
33 Initializes an instance of FDFAnnotationCircle from COSDictionary annotation. @param a COSDictionary containing annotation data
34 Initializes an instance of the class with a COSDictionary annotation. @param a COSDictionary containing annotation data
35 Initializes an instance of the class with a COSDictionary annotation. @param a COSDictionary containing annotation data
36 Initializes an instance of FDFAnnotationInk from a COSDictionary annotation. @param a COSDictionary containing ink annotation data
37 Initializes an instance of FDFAnnotationLine with a COSDictionary annotation. @param a COSDictionary containing annotation data
38 Initializes an instance of the class with a COSDictionary annotation. @param a COSDictionary containing annotation data
39 Initializes an instance of FDFAnnotationPolygon with a COSDictionary annotation. @param a COSDictionary containing polygon annotation data
40 Initializes an instance of the class with a COSDictionary annotation. @param a COSDictionary containing annotation data
41 Initializes an instance of FDFAnnotationSound with COSDictionary annotation data. @param a COSDictionary containing sound annotation metadata
42 Initializes an instance of FDFAnnotationSquare from a COSDictionary annotation. @param a COSDictionary containing annotation data
43 Initializes an instance of FDFAnnotationStamp with a COSDictionary annotation. @param a COSDictionary containing annotation data
44 Initializes an instance of the class with a COSDictionary annotation. @param a COSDictionary containing annotation data
45 Initializes an instance of FDFAnnotationTextMarkup with COSDictionary annotation data. @param a COSDictionary containing annotation data
46 Extracts and returns the PANOSE classification data from the internal byte array. @return PDPanoseClassification object containing the extracted font classification information
47 Retrieves a singleton instance of this class with specified blend mode and alpha value. @param blendMode image blending operation to apply @param constantAlpha alpha transparency level for the source image (clamped between 0 and 1)
48 Retrieves the transparency group attributes. @return PDTransparencyGroupAttributes object or null if not found
49 Initializes an instance of PDShadingPattern from a COSDictionary. @param resourceDictionary COSDictionary containing shading pattern data
50 Initializes an instance of PDTilingPattern from a COSDictionary and resource cache. @param dictionary COSDictionary containing pattern data @param resourceCache Resource cache for managing associated resources
51 Initializes an instance of PDShading from a given PDF shading dictionary. @param shadingDictionary COSDictionary containing shading properties
52 Initializes an instance of PDShading from a given PDF shading dictionary. @param shadingDictionary COSDictionary containing shading properties
53 Initializes a ShadingPaint instance with specified axial shading type and transformation. @param shadingType2 axial shading type @param matrix transformation matrix
54 Initializes a RadialShadingPaint instance with radial shading and transformation. @param shading radial shading object @param matrix transformation matrix
55 Initializes a Type1ShadingPaint instance with specified Type 1 shading and transformation. @param shading PDShadingType1 object
56 Initializes a ShadingPaint instance with specified type 4 shading and transformation. @param shading PDShadingType4 object @param matrix transformation matrix
57 Initializes a Type5ShadingPaint instance with specified Type 5 shading and transformation. @param shading Type 5 shading object @param matrix transformation matrix
58 Initializes a Type6ShadingPaint instance with specified type 6 shading and transformation. @param shading PDShadingType6 object @param matrix transformation matrix
59 Initializes a Type7ShadingPaint instance with specified Type 7 shading and transformation. @param shading PDShadingType7 object @param matrix transformation matrix
60 Initializes an instance of PDExtendedGraphicsState with provided COSDictionary. @param dictionary extended graphics state properties in PDF format
61 Initializes a PDSoftMask instance from a COSDictionary. @param dictionary dictionary containing soft mask properties
62 Initializes PlainText object with given text content, splitting into paragraphs. @param textValue raw text input to be processed
63 Initializes an instance of PDActionEmbeddedGoTo with a COSDictionary. @param a COSDictionary containing action details
64 Initializes an instance of the class with a COSDictionary representing the PDF action. @param a COSDictionary containing action details
65 Initializes an instance of the class with a COSDictionary representing the PDF action. @param a COSDictionary containing action details
66 Initializes an instance of the class with a COSDictionary containing action details.
67 Initializes an instance with a COSDictionary representing the PDF action. @param a COSDictionary containing action details
68 Initializes an instance of the class with a COSDictionary representing the PDF action. @param a COSDictionary containing action details
69 Initializes an instance of PDActionMovie with a COSDictionary representing the PDF action. @param a COSDictionary containing action details
70 Initializes an instance of the class with a COSDictionary representing the PDF action. @param a COSDictionary containing action details
71 Initializes a remote navigation action instance with a COSDictionary. @param a COSDictionary containing action details
72 Initializes an instance of PDActionResetForm with a COSDictionary representing the PDF action.
73 Initializes an instance of the class with a COSDictionary representing the PDF action. @param a COSDictionary containing action details
74 Initializes an instance of PDActionSubmitForm with action details from COSDictionary. @param a COSDictionary containing configuration data
75 Initializes an instance of the class with a COSDictionary representing the PDF action. @param a COSDictionary containing action details
76 Initializes an instance of the class with a COSDictionary representing the PDF action. @param a COSDictionary containing action details
77 Creates a list of KeyValues from corresponding key and value lists. @param key unique identifiers @param value associated string values @return List of KeyValue objects
78 Initializes a non-terminal form field from an AcroForm and COSDictionary. @param acroForm the containing AcroForm @param field the underlying COSDictionary @param parent the hierarchical parent field (optional)
79 Initializes a Terminal Field instance from an AcroForm and COSDictionary. @param acroForm the containing AcroForm @param field the underlying COSDictionary
80 Initializes an instance of the class with a given measurement dictionary. @param dictionary COSDictionary containing measurement-related data
81 Creates and returns a deep copy of this matrix instance. @return cloned Matrix object
82 Returns a scale transformation matrix instance. @param x horizontal scaling factor @param y vertical scaling factor
83 Creates a translation matrix instance. @param x horizontal translation value @param y vertical translation value
84 Returns a rotation matrix instance based on the given angle and translation values. @param theta rotation angle in radians @param tx x-translate value @param ty y-translate value @return Matrix object representing the rotation transformation
85 Applies a 2D transformation to the given vector using the current matrix. @param vector input vector to be transformed @return transformed Vector object
86 Scales the vector by a given factor. @param sxy scaling factor
87 Returns the field tree instance associated with this PDAcroForm.
88 Sets the default value associated with this trie. @param defaultValue the default value to be set
89 Retrieves an object at a specified index from the collection of managed objects. @param index zero-based index of the desired object @return Object instance at the given index or null if not found
90 Returns the number of objects managed by revisions.
91 Retrieves revision number at specified index. @param index position of revision in collection @return revision number or -1 if out of bounds
92 Adds an object with its associated revision number to the revisions collection. @param object Object to be added @param revisionNumber Revision number of the object
93 Sets the revision number for a managed object. @param object Object to update @param revisionNumber New revision number
94 Retrieves a specific Encoding instance by name. @param name unique COSName identifier @return corresponding Encoding object or null if not found
95 Creates a PDSoftMask instance from a COSBase dictionary and ResourceCache. @param dictionary COSBase dictionary containing soft mask properties @param resourceCache cache for accessing resources
96 Retrieves the index of the selected radio button. @return The index of the selected widget, or -1 if none are selected
97 Adds a PDF source file to be merged by converting input string to File object.
98 Parses the cross-reference trailer in a PDF document.
99 Retrieves an object from storage based on its unique key. @param key unique identifier of the object to fetch
100 Executes the instruction sequence within a specified execution context. @param context ExecutionContext object to manage operations and stack interactions
101 Initializes a new instance of COSDocument with default values and specified parser. @param streamCacheCreateFunction function to create StreamCache @param ICOSParser parser instance for document parsing
102 Processes a PDF operator by delegating to an OperatorProcessor instance. @param operator the Operator instance @param operands list of operand COSBase objects
103 Retrieves the current transformation matrix for rendering text lines. @return Transformation matrix object
104 Sets the text line transformation matrix. @param value Transformation matrix to apply
105 Retrieves the current text transformation matrix from the graphics state. @return Text transformation matrix
106 Sets the transformation matrix for text rendering. @param value Matrix object defining text position and scale
107 Calculates the transformed width of a graphics element. @param width original width value @return transformed width after applying transformation matrix
108 Retrieves and returns the current non-stroking color from the graphics state.
109 Sets the non-stroking (fill) color. @param color PDColor object representing the fill color
110 Retrieves and returns the non-stroking color space from the graphics state.
111 Retrieves and returns the current stroking color. @return PDColor object representing the current stroke color
112 Sets the stroking color using the provided PDColor object. @param color The color to be applied for stroking operations
113 Retrieves and returns the stroking color space of the current graphics state.
114 Creates a raw input stream for reading from the COSStream. @throws IOException if an error occurs or the stream is closed
115 Creates a raw output stream for writing PDF content. @throws IOException if an I/O error occurs
116 Finds an ImageReader instance for a given format name. @param formatName specific image format name @param errorCause detailed description of the image reader absence issue @return ImageReader object or throws MissingImageReaderException if not found
117 Finds and returns a suitable ImageReader for the specified image format. @param formatName specific image format name @param errorCause detailed description of the image reader absence issue @return ImageReader object or null if not found @throws MissingImageReaderException if no suitable reader is found
118 Retrieves an instance of the Operator class for a given operator string. @param operator unique operator identifier @return Operator object or null if not found
119 Returns a string representation of this COSArrayList object.
120 Checks if an edge is a line based on color-coordinate pairs. @param ctl array of Point2D objects representing corners
121 Retrieves the X-coordinate of the lower left corner of the rectangle.
122 Retrieves the Y-coordinate of the lower left corner.
123 Retrieves the X-coordinate of the upper-right corner. @return x-coordinate value
124 Retrieves the Y-coordinate of the upper-right corner.
125 Retrieves the font size from the PDF document's settings. @return The current font size value
126 Retrieves the red component of the gamma-corrected color.
127 Retrieves gamma value from internal color data.
128 Retrieves the blue component value from the color array. @return Blue color component as a floating-point number
129 Retrieves X tristimulus value.
130 Retrieves Y tristimulus value from color representation. @return Y value as a float
131 Retrieves the Z tristimulus value. @return The Z component of the color values
132 Retrieves an integer value from the collection at specified index, or returns default value if out of bounds or not present. @param index unique identifier for the entity @param defaultValue value to return when entity is not found @return int value or default value
133 Retrieves the name value at a specified index, or returns the default value if out of bounds. @param index collection index @param defaultValue default name to return if index is invalid @return name value or default value
134 Searches for the index of a given COSBase object within this collection. @param object COSBase object to search for @return index of the found object, or -1 if not found
135 Returns the list of filters associated with this COSStream. @return List of Filter objects or empty list if none found
136 Initializes COSArrayList with actual list and associated COSArray. @param actualList list of elements to manage @param cosArray underlying COS structure
137 Evaluates the exponential interpolation function using input data. @param input array of input values
138 Retrieves filter settings from the stream. @return List of COSName objects or empty list if not found
139 Retrieves the list of file filters associated with the current stream. @return List<String> containing filter names or an empty list if not found
140 Writes a boolean value to the PDF stream. @param output OutputStream for writing the boolean data @param cosBoolean COS Boolean object containing the value to be written
141 Writes text content stream to output stream using ASCII encoding. @param text string value to be written
142 Notifies user attribute object of potential change. @param oldEntry previous Entry object @param newEntry updated Entry object
143 Returns the number of key-value pairs in this dictionary.
144 Retrieves COSObject instance associated with the given name. @param key unique identifier of the item to retrieve @return COSObject instance or null if not found
145 Retrieves item by name from dictionary, or alternative key if first not found. @param firstKey primary identifier of item to retrieve @param secondKey secondary identifier for fallback retrieval @return COSBase object or null if not found in either key
146 Retrieves the number of recipients from the document's encryption settings. @return total count of recipient names in the COSArray
147 Retrieves a recipient string at the specified index from the RECIPIENTS array. @param i unique identifier of the desired recipient
148 Retrieves the direction of a page transition. @return COSBase object representing the direction or null if not set
149 Retrieves an unmodifiable set of metadata keys from the internal dictionary. @return Set of COSName objects representing the keys in this dictionary
150 Retrieves an unmodifiable list of attribute names from the internal dictionary. @return List of COSName objects representing the keys in this dictionary
151 Adds trailer information from the given dictionary to the cross-reference stream. @param trailerDict dictionary containing trailer info
152 Initializes this COSDictionary instance with key-value pairs from the provided dictionary. @param dict COSDictionary object containing data to be copied
153 Checks if the given COSDictionary represents an info object. @param dictionary The dictionary to examine
154 Checks if the PDF font dictionary contains WIDTHS or MISSING_WIDTH keys. @param none @return true if either key exists, false otherwise
155 Checks if missing width is specified in font descriptor. @return true if missing width exists, false otherwise
156 Checks if XFA (XML Forms Architecture) form exists in the document. @return true if XFA form is present, false otherwise
157 Sets the current cross-reference trailer object and maps its position to a given byte offset. @param startBytePos unique byte position identifier @param type XRefType enum value indicating trailer type
158 Parses and coerces the input string into a COSFloat representation. @param aFloat input string representing a float value
159 Returns string representation of COSFloat value. @return formatted string in simple or scientific notation
160 Writes PDF representation to output stream. @param output output stream to write to
161 Returns an instance of COSIncrement with update origin information. @return COSIncrement object initialized with update info
162 Initializes a clone utility instance with a destination PDDocument. @param targetDoc the PDDocument to be cloned
163 Initializes DefaultResourceCache instance with caching stability enabled.
164 Determines if the COS object requires an update based on its current state. @param base COSBase object to check for updates
165 Appends a child element to the PDF structure with specified MCID. @param mcid non-negative unique identifier for the child element
166 Retrieves the COSInteger instance representing the transition direction's angle. @return COSInteger object with the angle value
167 Writes a COS integer to the output stream. @param output the output stream to write to @param cosInteger the COS integer object to serialize
168 Adds a user-provided comment to the content stream. @throws IOException if an I/O error occurs
169 Adds a user-provided comment to the content stream. @param comment text comment, must not contain newline characters
170 Adds a user-provided comment to the PDF content stream. @param comment text to be added, must not contain newline characters
171 Adds a user-provided comment to the content stream. @param comment text, must not contain newline characters
172 Retrieves a COSBase object from the array by index. @param index position of the desired object
173 Searches for the index of a given COSBase object within the collection. @param object COSBase object to search for @return index of the object if found, -1 otherwise
174 Collects indirect object keys from this collection and its sub-objects. @param indirectObjects collection to store the found keys
175 Checks for the presence of a specific value within the dictionary. @param value the object to search for @return true if found, false otherwise
176 Retrieves the key associated with a given value, considering both exact and embedded object matches. @param value the target value to search for @return COSName key or null if not found
177 Retrieves the underlying COSBase object for a given dictionary key. @param key unique dictionary identifier @return COSBase object or null if not found
178 Retrieves the linearized dictionary from the cross-reference table. The linearized dictionary is the first one with a positive offset in ascending order. @return COSDictionary object representing the linearized dictionary, or null if not found
179 Closes the COSDocument and its underlying resources, ensuring proper cleanup. @throws IOException if an error occurs during closing
180 Accepts visitor to process this COSObject, delegating to underlying COSBase or COSNull representation. @param visitor IcosVisitor instance to handle object
181 Checks if the provided COSBase value contains a self-reference. @param parent the parent object @param value the COSBase object to check for self-reference @return true if the value has a self-reference, false otherwise
182 Retrieves the length value from a given COSBase object. @param lengthBaseObj COSBase object containing the length information @return COSNumber object representing the length or null if not found
183 Initializes a NormalXReference instance with the specified byte offset, key, and object. @param byteOffset unique byte offset within the PDF document @param key COSObjectKey representing the referenced object's metadata @param object COSBase object being cross-referenced
184 Retrieves the unique COSObjectKey associated with a given COSBase object. @param object the COSBase object to fetch the key for @return COSObjectKey or null if not found
185 Checks if a given COSBase object exists in the pool. @param object the COSBase object to search for @return true if found, false otherwise
186 Prepares the stream object by adding key-object pairs. @param key unique identifier for the object @param object COSBase object to be prepared
187 Constructs COSObjectKey instance with validated number and generation values. @param num PDF object number @param gen PDF object generation
188 Compares this XReference entry with another based on its referenced key. @param xReferenceEntry the other reference entry to compare
189 Retrieves the X-axis scaling factor from the text transformation matrix. @return The absolute value of the scaling factor, or the first element if rotation is zero
190 Retrieves Y-axis scaling factor from the text matrix. @return non-negative scaling factor or 0 if invalid
191 Initializes a new instance of the COSWriter class with specified output stream and compression parameters. @param outputStream OutputStream object to write PDF document components @param compressParameters CompressParameters object for incremental updates and compression
192 Initializes a new instance of COSWriter with output and input data streams. @param outputStream OutputStream to write PDF document components @param inputData RandomAccessRead containing input data for incremental updates
193 Updates the document's state based on whether updates are accepted. @param updated true to reflect changes, false otherwise
194 Converts byte array to a string using the class's encoding mapping. @return String representation of the input bytes, or a string decoded from PDFDocEncoding if BOM is not present
195 Initializes a COSString object from the given text and forceHex flag. @param text the input string to be encoded @param forceHex whether to force hexadecimal encoding
196 Checks if the current font is a standard 14 font. @return true if the font is a standard 14 font, false otherwise
197 Reads an array of bytes from the ASCII85 encoded input stream. @param data byte array to fill with read data @param offset starting index in data array @param len number of bytes to read @return actual number of bytes read, or -1 if end-of-file reached
198 Closes the ASCII85OutputStream and performs final encoding, flushing any buffered data.
199 Closes the content stream and logs a warning if in text mode. @throws IOException if I/O error occurs during closing
200 Closes the content stream, logging a warning if in text mode.
201 Closes the content stream and logs a warning if in text mode. @throws IOException if closing output stream fails
202 Closes the content stream and logs a warning if in text mode. @throws IOException if closing output stream fails
203 Reads the next byte of compressed data from the underlying input stream. @return the read byte or -1 if end-of-file has been reached
204 Reads a specified number of bytes from the decoded data stream into the provided byte array. @param data target byte array to store the read data @param offset starting position in the target array where the read data will be stored @param length maximum number of bytes to read @return actual number of bytes read, or -1 if end-of-file has been reached
205 Reads image data from the specified input stream and sets it as the digital signature's image.
206 Encodes raw data into a compressed LZW format. @param rawData input data to be encoded @param encoded output stream for the compressed data @param parameters COSDictionary containing encoding parameters @throws IOException if an I/O error occurs during encoding
207 Chooses the most compressible image data row to write. @return The chosen byte array or dataRawRowNone if none found
208 Resets the cross-reference table by clearing all cache entries. Iterates over and resets each XrefTrailerObj in the bytePosToXrefMap, then sets curXrefTrailerObj and resolvedXrefTrailer to null.
209 Closes all associated resources, including document handles and overlay pages.
210 Initializes a PDXObject instance with the given PDStream and subtype FORM. @param stream underlying PDStream object
211 Initializes a new instance of the PDFStreamParser class with the given content stream. @param pdContentstream PDContentStream object containing the PDF data to parse
212 Initializes a new instance of the PDFStreamParser class from a byte array. @param bytes PDF data in binary format
213 Parses a single object from the PDF stream by its number. @param objectNumber unique identifier of the object to parse @return COSBase object representing the parsed object, or null if not found
214 Fetches and stores PDF object numbers from the stream. @return A map of object numbers to their offsets or an empty map if not found
215 Initializes built-in encoding mappings from a map of codes to names. @param codeToName mapping of unique font encoding codes to their corresponding names
216 Creates a Type1Encoding instance from the given FontBox Encoding. @param encoding FontBox Encoding object @return populated Type1Encoding object
217 Skips leading white spaces and line breaks in the PDF source.
218 Skips a line break in the PDF source. @return true if skipped successfully; false otherwise
219 Reads and interprets the next line from the PDF source. @throws IOException if end-of-file is reached unexpectedly
220 Skips whitespace characters and comments from the PDF source.
221 Retrieves the number of color components for the current shading type. @return The number of color components, or 1 if unknown
222 Retrieves the number of color components for the current shading type. @return The number of color components, or 1 if unknown
223 Searches for cross-reference tables and streams in the PDF data stream, returning the nearest offset to the given xrefOffset. @param xrefOffset unique table/stream identifier @return Offset of the found cross-reference table or stream, or -1 if not found
224 Parses the PDF document's header and sets the document's version value. @return true if successful, false otherwise
225 Parses FDF (Form Data Format) header and sets document version. @throws IOException if parsing fails
226 Parses all objects within the PDF object stream and returns a map of COSObjectKey to COSBase. @return Map of COSObjectKey to COSBase, or empty map if parsing fails
227 Calculates the final encryption key by combining object and generation numbers with the encryption key. @param objectNumber unique document identifier @param genNumber generation number @return byte array representing the final encryption key
228 Initializes a new instance of the PDAppearanceContentStream class. @param appearance Appearance stream object @param outputStream Output stream to write content stream
229 Initializes a new instance of the PDPageContentStream class. @param doc PDDocument object @param appearance PDAppearanceStream for page content settings @param outputStream OutputStream to write content stream
230 Applies transformation to a point based on the current graphics state. @param x input X coordinate @param y input Y coordinate @return transformed Point2D object
231 Creates a PaintContext instance with the pattern matrix scaled out. @param cm ColorModel @param deviceBounds Rectangle representing device bounds @param userBounds Rectangle2D representing user bounds @param xform AffineTransform object to apply to the pattern @param hints RenderingHints for rendering context @return PaintContext instance with scaled pattern matrix
232 Concatenates transformation matrices. @param matrix Matrix to combine with current transformations
233 Applies a translation transformation to the matrix. @param tx x-coordinate of translation @param ty y-coordinate of translation
234 Scales the matrix by a factor of (sx, sy) in the x and y directions. @param sx scaling factor for the x-axis @param sy scaling factor for the y-axis
235 Combines this matrix with another via multiplication. @param other the second matrix to multiply by
236 Encodes input text for GSUB rules application. @param gsubWorker worker responsible for applying GSUB transforms @param glyphIds collection to add transformed glyph IDs to @param font type 0 font used for encoding glyph IDs @param text input string to process @return encoded byte array representation of the input text
237 Creates a new PDDocument instance from current COSDocument and PDF data sources. @throws IOException if document creation fails
238 Initializes a new PDDocument instance from a COSDocument and PDF data sources. @param doc COSDocument object @param source RandomAccessRead stream for the PDF content
239 Creates a new instance of the security handler associated with the given protection policy. @param policy ProtectionPolicy object @return SecurityHandler<ProtectionPolicy> object or null if instantiation fails
240 Retrieves a security handler for the specified filter name. @param name unique identifier of the filter to fetch @return SecurityHandler object or null if not found
241 Sets stroking color on demand from the given PDColor instance. @param color PDColor object to retrieve color components from
242 Sets non-stroking color on demand from provided PDColor instance. @param color the PDColor instance containing color components
243 Initializes the MacOSRomanEncoding object with Mac OS Roman character encoding table mappings.
244 Checks if the user has owner permission by verifying all access permissions. @return true if all permission bits are set, false otherwise
245 Checks if any revision 3 permission bit is set. @return true if at least one permission bit is enabled, false otherwise
246 Writes encrypted bytes from an array to the specified output stream. @param data plain byte array to be encrypted @param output target output stream for writing encrypted data
247 Writes a specified portion of encrypted data to the given output stream. @param data array of plain bytes to be encrypted @param offset starting index of the data subset @param len number of bytes in the subset @param output target output stream for writing encrypted data
248 Inserts a diacritic character at the specified position in the text element's Unicode representation. @param i position to insert the diacritic (0-based) @param diacritic TextPosition object containing the diacritic character
249 Writes extracted PDF text to output stream. @param text extracted text @param textPositions positions of individual characters in the text
250 Initializes a Line instance with two points and their associated colors. @param p0 starting Point @param p1 ending Point @param c0 color at start of line (float array) @param c1 color at end of line (float array)
251 Initializes a new instance of the SoftMask class with given parameters. @param paint The Paint object for rendering @param mask The BufferedImage for masking @param bboxDevice The device bounding box @param backdropColor The background color (optional) @param transferFunction The color transformation function (optional)
252 Removes the backdrop from the group image by applying a color removal effect. @param backdrop BufferedImage representing the backdrop to be removed @param offsetX horizontal offset of the backdrop @param offsetY vertical offset of the backdrop
253 Retrieves font metrics for a given standard 14 font. @param fontName FontName object representing the font to fetch @return FontMetrics object or null if not found
254 Initializes a new instance of GlyphList with glyph mapping from input stream. @param input InputStream containing the glyph list @param numberOfEntries initial capacity for name and unicode maps
255 Initializes a new instance of GlyphList from an existing instance and input stream. @param glyphList Existing GlyphList to copy data from @param input InputStream containing additional glyph list information
256 Converts a Unicode code point to its associated glyph ID. @param code the Unicode character code point @return Glyph ID (integer) or -1 if not found
257 Retrieves the name of a glyph in the font. If embedded or a valid glyph, returns the original name; otherwise, attempts to find a matching Unicode code point and uses its name if found. @return the glyph name or ".notdef" if not found
258 Retrieves the name associated with a glyph in the font, using various alternatives if the original name is not found. @param name the original glyph name to search for @return the matching glyph name or ".notdef" if not found
259 Initializes the CMYK color space, loading default ICC profile and performing initial color conversion.
260 Applies a mask to the given image. @param image The original image to be masked @param mask The mask image to apply @param interpolateMask Whether to perform interpolation during masking @param isSoft Whether the mask is soft or not @param matte A float array containing the matte values for each color channel @return The masked image
261 Validates the integrity of a PNG image data chunk. @param chunk Chunk object to be checked @return True if the chunk is valid, false otherwise
262 Initializes a CubicBezierCurve instance with given control points and detail level. @param ctrlPnts array of control points defining the curve @param l detail level for generating points along the curve
263 Checks if a point is contained within the shaded triangle. @param p target point to evaluate
264 Calculates the interpolated color at a given point along the shaded triangle. @param p the point for which to calculate the color
265 Updates the clipping path by adding a new GeneralPath, cloning it shallowly.
266 Updates clipping path by adding a new Area. @param area new Area to add
267 Transfers the current clipping path to the specified Graphics2D context. @param graphics target graphics context for clip transfer
268 Draws a tiling pattern onto the graphics context, applying rendering hints and transformations. @param g graphics context @param pattern tiling pattern to draw @param colorSpace color space for the pattern @param color fill color @param patternMatrix transformation matrix for the pattern
269 Calculates the text orientation adjustment based on direction and rotation. @param getDir() The direction of the text
270 Initializes a TextPosition instance with given page rotation, dimensions, and text properties. @param pageRotation the rotation angle of the page (0, 90, 180, or 270 degrees) @param pageWidth and pageHeight the dimensions of the page @param textMatrix the transformation matrix for the text @param endX and endY the coordinates of the text's end point @param maxHeight the maximum height of the text @param individualWidth the width of a single character in the text @param spaceWidth the width of a space between characters @param unicode the Unicode representation of the text @param charCodes an array of character codes for the text @param font the PDFont object representing the text's font @param fontSize and fontSizePt the size of the text in points and pixels respectively
271 Calculates the adjusted Y-direction based on text orientation and rotation. @return The adjusted Y-direction value
272 Calculates text element width based on rotation. @return calculated width value
273 Calculates text orientation adjustment based on direction and rotation. @return Adjustment factor in degrees
274 Starts writing an article marker. @throws IOException if an I/O error occurs
275 Initializes a new paragraph by writing the start marker and updating flags.
276 Retrieves the first matching list item pattern from the current text position. @param pw PositionWrapper object containing current text position
277 Normalizes input word to standardized format based on Unicode Alphabetic and Arabic A&B Presentation forms. @param word input string to be normalized @return normalized data or original data if unchanged
278 Formats a Calendar object as a string with timezone offset. @param cal Calendar instance to format @return formatted string representation of the calendar or null if input is null
279 Formats a Calendar object as an ISO8601 date string. @param cal Calendar instance to format @return formatted date string in ISO8601 format (e.g., "yyyy-MM-dd'T'HHmmssZ")
280 Converts byte array to hexadecimal string representation.
281 Writes an external signature to the PDF document. @param cmsSignature cryptographic message syntax signature
282 Writes the COSName object to a PDF output stream. @param output target output stream
283 Writes an array of hexadecimal bytes to the specified output stream. @param bytes input byte array @param output target output stream
284 Iteratively sorts an array using the merge sort algorithm. @param arr the input array @param cmp comparator to determine order
285 Simplified XML parsing using namespace unawareness. @param is input stream containing the XML data
286 Detects the file type from a BufferedInputStream by reading its content. @param inputStream input stream containing file data @return FileType object or throws IOException if an error occurs
287 Initializes the LegacyPDFStreamEngine with a set of default operators for text rendering.
288 Retrieves a COSName instance associated with the given PDF name. @param aName PDF name string @return COSName object or null if not found
289 Creates a COSString instance from a byte array without forcing hexadecimal representation. @param bytes input byte data
290 Initializes an empty COSArray instance with direct access enabled.
291 Initializes a COSArray instance from an iterable of COSObjectable elements. @param cosObjectables collection of COSObjectable objects to initialize the array with
292 Initializes a COSStream instance with a cache. @param streamCache Random access stream cache
293 Initializes an instance of UnmodifiableCOSDictionary from a COSDictionary. @param dict the underlying dictionary to be wrapped
294 Creates a default DecodeResult with minimal decoding parameters.
295 Initializes an instance of the PDDocumentInformation class.
296 Initializes the PDResources object instance.
297 Converts a standard map to a COSDictionary. @param someMap Map containing key-value pairs
298 Initializes an instance of the PDDictionaryWrapper class with a new COSDictionary object.
299 Initializes an instance of the PDNameTreeNode class with an empty COSDictionary.
300 Initializes a PDNumberTreeNode with a specified numeric value class. @param valueClass the class of numeric values to be managed
301 Initializes a PDPageLabelRange instance with default settings.
302 Initializes a PDMarkInfo instance with an empty COSDictionary.
303 Initializes a new instance of the PDPropertyList class with an empty COSDictionary.
304 Initializes an instance of the PDBoxStyle class with an empty COSDictionary.
305 Initializes an instance of the PDCryptFilterDictionary class.
306 Initializes an instance of PDEncryption with default encryption settings.
307 Initializes an instance of the FDFCatalog class with an empty COSDictionary.
308 Initializes an instance of the FDFDictionary class.
309 Initializes an instance of the FDFField class with an empty COSDictionary.
310 Initializes an instance of FDFIconFit with default configurations.
311 Initializes an instance of FDFJavaScript with a new COSDictionary.
312 Initializes an instance of the FDFNamedPageReference class with a new COSDictionary.
313 Initializes an instance of the FDFPage class with a new COSDictionary.
314 Initializes an instance of FDFPageInfo with default values.
315 Initializes an instance of the FDFTemplate class with an empty COSDictionary.
316 Initializes an instance of PDDeviceNAttributes with default attributes.
317 Initializes an instance of the PDDeviceNProcess class with a new COSDictionary.
318 Initializes a new instance of the PDShading class.
319 Initializes an instance of the PDAdditionalActions class with a new COSDictionary.
320 Initializes an instance of PDAnnotationAdditionalActions.
321 Initializes an instance of the PDDocumentCatalogAdditionalActions class. Creates a new COSDictionary to manage additional actions in the PDF document catalog.
322 Initializes an instance of PDFormFieldAdditionalActions with an empty action dictionary.
323 Initializes an instance of PDPageAdditionalActions with an empty COSDictionary.
324 Initializes an instance of the PDTargetDirectory class.
325 Initializes an instance of the PDURIDictionary class with an empty URI dictionary.
326 Initializes an instance of the PDWindowsLaunchParams class.
327 Initializes an instance of the PDBorderEffectDictionary class.
328 Initializes an instance of the PDBorderStyleDictionary class.
329 Initializes an instance of PDPropBuild with a new COSDictionary.
330 Initializes an instance of the PDPropBuildDataDict class with a new COSDictionary.
331 Initializes an instance of the PDSeedValueMDP class with an empty COSDictionary.
332 Initializes a PDSeedValueTimeStamp instance with a new COSDictionary.
333 Initializes a PDField instance from an AcroForm and a default COSDictionary.
334 Initializes an instance of the PDViewportDictionary class with an empty viewport dictionary.
335 Initializes an instance of the PDViewerPreferences class with default settings.
336 Initializes a COSObject instance with the provided object and key. @param object COSBase object to be managed @param objectKey unique identifier for the object
337 Initializes an instance of PDDictionaryWrapper with the given COSDictionary. @param dictionary PDF dictionary structure to be wrapped
338 Initializes a PDUserAttributeObject instance from a given COSDictionary. @param dictionary PDF dictionary structure to be wrapped.
339 Initializes an instance of PDDictionaryWrapper with the given COSDictionary. @param dictionary PDF dictionary structure to be wrapped
340 Initializes an instance of PDOutlineNode from the given PDF dictionary structure.
341 Retrieves the metadata stream associated with this PDStream. @return PDMetadata object or null if not present
342 Retrieves the image metadata from a COSStream object. @return PDMetadata instance or null if empty
343 Fetches the extends object stream. @return PDObjectStream object or null if not found
344 Initializes PDFunctionType0 instance from a COSBase object. @param function COSBase object representing the mathematical function
345 Initializes PDFunction instance from a COSBase object. @param function COSBase object representing the mathematical function
346 Initializes PostScript XObject from underlying COSStream. @param stream underlying COSStream instance
347 Initializes form XObject from underlying COSStream. @param stream underlying COSStream instance
348 Initializes PDXObject from COSStream and resource cache. @param stream underlying COSStream instance @param cache ResourceCache object for form XObject management
349 Initializes a new instance of the `PublicKeySecurityHandler` class.
350 Initializes a new instance of the StandardSecurityHandler class.
351 Initializes a new instance of the SecurityHandler class with the specified public key protection policy. @param publicKeyProtectionPolicy encryption policy object
352 Initializes a new instance of the SecurityHandler class with the specified protection policy. @param standardProtectionPolicy encryption policy object
353 Initializes an instance of FDFAnnotationHighlight from COSDictionary annotation data. @param a COSDictionary containing highlight annotation data
354 Initializes an instance of FDFAnnotationSquiggly from COSDictionary annotation data. @param a COSDictionary containing squiggly line annotation data
355 Initializes an instance of FDFAnnotationStrikeOut from COSDictionary annotation data. @param a COSDictionary containing strikeout annotation data
356 Initializes an instance of FDFAnnotationUnderline from COSDictionary annotation data. @param a COSDictionary containing underline annotation data
357 Initializes an instance of PDTilingPattern from a COSDictionary. @param dictionary COSDictionary containing pattern data
358 Initializes an instance of PDShadingType3 from a given COSDictionary. @param shadingDictionary COSDictionary containing Type 3 shading properties
359 Initializes an instance of PDShading from a given PDF shading dictionary. @param shadingDictionary COSDictionary containing shading properties
360 Initializes an instance of PDShadingType5 from a given PDF shading dictionary. @param shadingDictionary COSDictionary containing shading properties
361 Initializes a Terminal Field instance from an AcroForm and COSDictionary. @param acroForm the containing AcroForm @param field the underlying COSDictionary
362 Initializes a PDSignatureField instance from an AcroForm and COSDictionary. @param acroForm the containing AcroForm @param field the underlying COSDictionary
363 Initializes a Variable Text instance from an AcroForm and COSDictionary. @param acroForm the containing AcroForm @param field the underlying COSDictionary
364 Generates a unique partial signature field name by appending an integer to "Signature". @return Unique partial signature field name
365 Returns a string representation of the revisions collection in the format "object=<object>, revisionNumber=<revision>". @return String containing object and revision information for all managed objects
366 Creates a PDSoftMask instance from a COSBase dictionary. @param dictionary COSBase dictionary containing soft mask properties
367 Initializes a new instance of COSDocument with default values and specified parser. @param parser parser instance for document parsing
368 Initializes a new instance of COSDocument with default values. @param streamCacheCreateFunction function to create StreamCache
369 Processes a PDF operator with given operands. @param operation unique operator identifier @param arguments list of operand COSBase objects
370 Creates a marked content instance based on the given tag and properties. If the tag is ARTIFACT, returns a PDArtifactMarkedContent object; otherwise, returns a PDMarkedContent object. @param tag COSName representing the content's tag @param properties COSDictionary containing content properties
371 Calculates and returns the width of the rectangle. @return difference between upper-right X-coordinate and lower-left X-coordinate
372 Checks if a point (x, y) lies within the rectangle. @param x float X-coordinate of the point @param y float Y-coordinate of the point @return true if point is within the rectangle, false otherwise
373 Calculates the rectangle's height by subtracting lower-left Y from upper-right Y.
374 Applies 2D transformation to the rectangle's geometry using the provided matrix. @param matrix transformation matrix @return transformed GeneralPath object
375 Converts the rectangle to a GeneralPath object. @return A new GeneralPath representing the rectangle's outline
376 Returns a string representation of the rectangle in the format [x1,y1,x2,y2].
377 Returns an integer value from the collection at specified index. @param index unique identifier for the entity
378 Retrieves the name value at a specified index. @param index collection index
379 Creates an output stream with specified filters and initializes the underlying stream cache. @param filters list of output filters @return OutputStream object or throws IOException if creation fails
380 Initializes a PDImageXObject instance with the given PDStream and resources. @param stream underlying PDStream object @param resources associated PDFResources object
381 Returns the file suffix based on filter settings. @return File suffix (e.g. "png", "jpg", etc.) or null if unknown
382 Writes a floating-point operand to the output stream. @param real the operand value @throws IOException on write failure
383 Formats and writes an operand value as decimal string to output stream. @param integer operand value
384 Writes content stream operator with accompanying line break. @param text string value to be written
385 Checks if this dictionary is empty. @return true if no key-value pairs exist, false otherwise
386 Parses and coerces the input string into a COSNumber representation. @param number input string representing a numeric value @return COSNumber object or null if not found
387 Writes a COS float to the output stream. @param output the output stream @param cosFloat the COS float object
388 Converts update state into a COSIncrement object. @return COSIncrement object initialized with update info
389 Converts the COSArray to a float array. @return float array containing values from COSBase objects
390 Converts the COSArray to a list of Floats, where each Float represents a COSNumber object's value; null otherwise.
391 Converts the COSArray to a list of integers, where each integer represents a COSNumber object's value. If an element is not a COSNumber, it will be null.
392 Retrieves the minimum value of this range. @return Minimum value as a float
393 Retrieves the maximum value of this numerical range. @return maximum value as a float
394 Retrieves a color value by index from the managed collection. @param index position of the desired color in the PDF document
395 Retrieves a BlendMode instance from the BLEND_MODES map or array. @param cosBlendMode COSBase object containing blend mode data
396 Retrieves colorant names from cached COSArray. @return list of colorant names or empty if not found
397 Retrieves the alternate color space. @return PDColorSpace object or null if not initialized
398 Retrieves colorant name from array. @return String representation of the colorant name
399 Creates a PDDestination object from the given COSBase representation. @param base COSBase object containing destination information @return PDDestination object or null if invalid input
400 Retrieves the target page associated with this destination. @return PDPage object or null if not found
401 Retrieves the target page number from the associated array. @return page number or -1 if not found
402 Retrieves the zoom level of the destination page. @return The current zoom factor, or -1 if not set
403 Initializes a Matrix instance from the given COSArray, extracting transformation parameters. @param array COSArray containing the matrix data
404 Collects indirect object keys from this dictionary and its sub-objects. @param indirectObjects collection to store the found keys
405 Retrieves the underlying COSBase object for a given dictionary key, or falls back to an alternate key if the first is not found. @param firstKey primary dictionary identifier @param secondKey secondary dictionary identifier @return COSBase object or null if both keys are not found
406 Retrieves the COSName object associated with a given dictionary key. @param key unique dictionary identifier @return COSName object or null if not found
407 Retrieves the underlying COSDictionary object for a given key. @param key unique dictionary identifier @return COSDictionary object or null if not found
408 Retrieves the underlying COSStream object for a given dictionary key. @param key unique dictionary identifier
409 Retrieves the underlying COSArray object for a given dictionary key. @param key unique dictionary identifier @return COSArray object or null if not found
410 Retrieves the COSName object associated with a given dictionary key, or returns the default value if not found. @param key unique dictionary identifier @param defaultValue fallback COSName value
411 Retrieves a long value from the dictionary, or returns the default value if not found. @param key unique dictionary identifier @param defaultValue fallback value to return if key is missing @return long value associated with the key, or the default value
412 Retrieves the float value associated with a given dictionary key, or returns the default value if not found. @param key unique dictionary identifier @param defaultValue default float value to return if key is missing @return float value or default value
413 Retrieves an iterator over the content streams of this page. @return Iterator over PDStream objects
414 Checks whether the page contains content. @return true if the page has content, false otherwise
415 Retrieves the collection of class names associated with this PDF structure element. @return Revisions object containing class names and revision numbers
416 Retrieves the value of the 'K' dictionary key. @return COSBase object or null if not found
417 Retrieves user-defined property value. @return COSBase object representing property value
418 Checks if metadata encryption is enabled.
419 Retrieves the owner encryption key from the dictionary. @return byte array containing the owner encryption key or null if not found
420 Retrieves the user encryption key from the dictionary. @return byte array representing the user encryption key or null if not found
421 Retrieves the permissions byte array from the PDF document. @return byte array containing permissions or null if not found
422 Retrieves the annotation's page number. @return Integer representing the page number, or null if not found
423 Retrieves the COSBase object associated with the field's 'V' attribute. @return COSBase object or null if unknown type
424 Retrieves the field flags as an Integer.
425 Retrieves the set field flags value. @return Integer representing the set field flags or null if not found
426 Retrieves the clear field flags for a form field. @return Integer representing the clear field flags or null if not found
427 Retrieves the widget's field flags from the FDF document. @return Integer representation of field flags or null if not found
428 Retrieves the set widget field flags. @return Integer value of SET_F dictionary key or null if not found
429 Retrieves the clear widget field flags. @return Integer value of the CLR_F dictionary key or null if not found
430 Retrieves the default width for a CID font, either from the internal cache or by reading it from the font dictionary. @return default width in points
431 Retrieves the device-dependent color space associated with this device. @return PDColorSpace object or null if not found
432 Retrieves the color space for this transparency group. @param resources associated PDF resources @return PDColorSpace object or null if not found
433 Initializes an instance of the PDOptionalContentGroup class from a given COSDictionary. @param dict COSDictionary object representing the optional content group @throws IllegalArgumentException if dictionary is not of type OCG
434 Initializes a PDOptionalContentMembershipDictionary instance from a given COSDictionary. @param dict the underlying COSDictionary object
435 Retrieves the overprint mode as an integer. @return Overprint mode value or null if not set
436 Retrieves the soft mask from the dictionary. @return PDSoftMask object or null if not found
437 Retrieves the float value associated with a given key from the dictionary. @param key unique dictionary identifier @return float value or null if not found
438 Retrieves the transfer graphics state object from the dictionary. @return COSBase object or null if invalid
439 Retrieves the transfer function for graphics rendering. @return COSBase object representing the transfer function or null if invalid
440 Retrieves the backdrop color for this soft mask. @return COSArray object representing the backdrop color or null if not set
441 Determines the open mode for linked content, based on the `NEW_WINDOW` dictionary key. @return OpenMode enum value indicating whether to open in a new window or same window as user preference
442 Retrieves the 'T' item of the action dictionary.
443 Retrieves the open mode for launching external files or applications in a new window. @return OpenMode value (NEW_WINDOW, SAME_WINDOW, USER_PREFERENCE) based on PDF configuration
444 Returns the open mode preference for linked content, based on 'New Window' dictionary key. @return OpenMode enum value indicating new window or same window behavior.
445 Retrieves the named destination associated with this target directory. @return PDNamedDestination object or null if not found
446 Retrieves the contents of a digital signature. @return byte array containing the contents or an empty array if not found
447 Retrieves the XFA resource from the form dictionary. @return PDXFAResource object or null if not found
448 Retrieves an inheritable attribute from the field's dictionary, its parent, or the AcroForm. @param key The name of the attribute to retrieve
449 Retrieves the value of this non-terminal field. @return COSBase object representing the field's value
450 Retrieves the field value as a string. @return Field value or empty string if not found
451 Retrieves the default value from the field's dictionary. @return COSBase object representing the default value or null if not found
452 Closes the COSDocument and underlying resources, ensuring proper cleanup. @throws IOException if an error occurs during closing
453 Writes a COSBase object to the PDF document, accompanied by its key and generation. @param key COSObjectKey representing the object's metadata @param obj COSBase object being written @throws IOException if writing fails
454 Retrieves the unique COSObjectKey associated with a given COSBase object. @param object the COSBase object to fetch the key for
455 Checks if a given COSBase object exists in the pool. @param object the COSBase object to search for
456 Creates a list of compressed object streams for efficient storage.
457 Retrieves a COSObjectKey instance with validated number and generation values. @param num PDF object number @param gen PDF object generation
458 Searches for PDF objects in the data stream. @throws IOException if an I/O error occurs
459 Searches for object stream offsets in the PDF data stream. @return Map of object stream offsets to their corresponding COSObjectKey instances
460 Parses the cross-reference trailer and populates the XrefTrailerResolver with object key and offset information. @param resolver XrefTrailerResolver instance to store parsed data
461 Finds a COSObjectKey instance by reading and validating an object/generation pair from the PDF stream. @param objectKey initial COSObjectKey to compare against @param offset current position in the PDF stream @param xrefOffset map of existing object offsets @return COSObjectKey instance if found, or null on failure
462 Parses the cross-reference table in a PDF document, starting at the specified byte offset. @param startByteOffset unique byte position identifier @return true if parsing is successful, false otherwise
463 Retrieves and updates the associated COSObjectKey instance for a given COSBase object. If the referenced object is not present due to a malformed PDF, creates a new key or uses an existing one if available. @param obj the COSBase object to retrieve the key for @return the updated COSObjectKey instance
464 Associates a COSBase object with a unique COSObjectKey instance in the pool. If the object already exists in the pool with the same key, returns null. Otherwise, generates a new COSObjectKey instance and updates the highest cross-reference object number. @param key COSObjectKey instance to associate with the object @param object COSBase object to be associated with the key @return the generated or existing COSObjectKey instance
465 Initializes a new instance of the COSWriter class with specified output stream and default compression parameters. @param outputStream OutputStream object to write PDF document components
466 Initializes a new instance of COSWriter with output and input data streams, managing PDF components and supporting incremental updates. @param outputStream OutputStream to write PDF document components @param inputData RandomAccessRead containing input data for incremental updates @param objectsToWrite Set of COSDictionary objects to write
467 Notifies COSUpdateInfo to update its state based on provided flag. @param flag true to trigger an update, false otherwise
468 Updates the document's state with accepted changes.
469 Retrieves a string value from the collection at specified index. If not found, returns default value. @param index position of the COSBase object to retrieve @param defaultValue fallback value if object is missing or not a COSString
470 Retrieves the string representation of a given COSName object. @param key unique dictionary identifier
471 Retrieves the string value associated with a given key from the dictionary. @param key unique dictionary identifier @return String representation of the input bytes, or null if not found
472 Converts a COSDictionary to a COSDictionaryMap with basic types mapped to String/Object pairs. @param map the COSDictionary to convert @return COSDictionaryMap containing converted key-value pairs or null if input is null
473 Retrieves the file content as a string. @return File content string
474 Retrieves the value of this FDFOptionElement. @return String representation of the option's value
475 Retrieves default appearance string from FDF option. @return COSBase object's string representation
476 Retrieves the name value of the current named destination. @return String representation of the destination's name, or null if not found
477 Retrieves a list of string items from the provided COSBase object, considering the specified index (0 or 1) for two-element arrays. @param items COSBase object containing key-value pairs @param pairIdx index into two-element arrays (0 or 1) @return List of String objects or an empty list if not applicable
478 Retrieves export values as a list of strings. @return List<String> containing export values, or an empty list if none exist
479 Retrieves the string value associated with a given choice field name. @param name unique choice field identifier
480 Retrieves the default appearance string from the inheritable attributes. @return Default appearance string or null if not found
481 Initializes a COSString object from the given text without force hexadecimal encoding. @param text the input string to be encoded
482 Initializes the object with an image from the specified input stream. @param imageStream InputStream containing digital signature image data
483 Sets the digital signature's image from a file at the specified path. @param path file path containing the signature image
484 Initializes a transparency group with the given PDStream. @param stream underlying PDStream object
485 Reads a string from the PDF source, skipping whitespace and end-of-name markers.
486 Reads and verifies an expected string from the PDF source. @param expectedString char array representing the expected string @param skipSpaces whether to skip whitespace characters before reading
487 Reads a string from the PDF source with a specified length. @param length maximum number of characters to read @return the read string or null if not found
488 Reads and parses an integer value from the PDF source. @throws IOException if parsing fails or invalid input is encountered
489 Reads and parses a string representation of a long integer value from the PDF source. @return long integer value or Long.MIN_VALUE on error
490 Calculates the fixed reference offset for a given PDF object. @param objectOffset unique identifier of the object @return Offset of the found cross-reference table or stream, or 0 if not found
491 Computes the encrypted user password based on provided parameters. @param password user-provided password @param owner owner information @param permissions document permissions @param id unique identifier @param encRevision encryption revision number @param keyLengthInBytes result digest length @param encryptMetadata whether to encrypt metadata @return the encrypted user password as a byte array
492 Computes the owner password encryption based on the provided user and owner passwords. @param ownerPassword byte array of the owner password @param userPassword byte array of the user password @param encRevision encryption revision (3 or 4) @param length desired key length @return encrypted owner password as a byte array
493 Applies rotation transformation based on given angle. @param theta rotation angle in radians
494 Applies a translation adjustment to the text matrix. @param tx x-coordinate of translation @param ty y-coordinate of translation
495 Applies translation transformation to the matrix based on the provided Vector. @param vector input vector containing x and y coordinates
496 Concatenates two matrices by multiplying them. @param a first matrix to multiply @param b second matrix to multiply
497 Initializes a new PDDocument instance from a COSDocument. @param doc COSDocument object
498 Processes a single token from the input stream and adds it to the current instruction sequence. @param text the input CharSequence token
499 Retrieves the current access permission. @return An initialized AccessPermission object
500 Calculates the revision number based on the provided version. @param version The document version to determine the revision for
501 Encrypts or decrypts data using AES algorithm. @param finalKey encryption key @param data InputStream containing data to encrypt/decrypt @param output OutputStream to write encrypted/decrypted data @param decrypt true for decryption, false for encryption
502 Encrypts or decrypts data using AES256 algorithm. @param data InputStream containing the data to be encrypted @param output OutputStream to write the encrypted data @param decrypt true for decryption, false for encryption
503 Encrypts data using RC4 algorithm with a custom key. @param finalKey encryption key as a byte array @param input plain data to be encrypted @param output target output stream for writing encrypted data
504 Writes encrypted data from the given input stream to the specified output stream. @param data InputStream containing plain bytes to be encrypted @param output target OutputStream for writing encrypted data
505 Prepares query string for SASL protocol by allowing unassigned characters. @param str input query string
506 Prepares a stored string for SASL protocol use without allowing unassigned characters. @param str input string to prepare
507 Writes extracted text from a single PDF line to the output stream. @param line list of words with their positions in the line
508 Retrieves a FontBoxFont object from cache or loads it based on the font format. @return FontBoxFont object if cached or loaded successfully, null otherwise
509 Saves the disk cache by writing font information to a file. @throws SecurityException if unable to create writer
510 Loads font information from the disk cache and returns a list of FSFontInfo objects. @param files List of File objects representing font files to be loaded @return List of FSFontInfo objects or null if cache needs to be re-built
511 Sets the font provider and creates a font info mapping. @param fontProvider FontProvider instance providing font information
512 Initializes a ShadedTriangle object with vertices and colors. @param p array of Point2D objects representing the triangle's vertices @param c 2D array of float values representing the triangle's color at each vertex
513 Writes character mappings to the specified output stream. @param out target output stream
514 Loads a glyph list from the specified file. @param filename name of the glyph list file @param numberOfEntries number of entries to load @return loaded GlyphList object
515 Returns a mapping of glyph IDs to Unicode code points. @return Map of GIDs to codes
516 Validates the state of a PNGConverter, ensuring all required chunks are present and valid. @param state current PNGConverterState object @return True if the converter state is valid, false otherwise
517 Closes and cleans up text clipping, releasing any buffered clip.
518 Updates the current clipping paths and transfers them to the graphics context.
519 Returns a stream for signing the PDF document. @throws IOException if an I/O error occurs
520 Merges a diacritic character into the text element at the optimal position. @param diacritic TextPosition object containing the diacritic character
521 Checks if the current text position overlaps with another text position. @param tp2 The other TextPosition object to check for overlap @return True if there is an overlap, false otherwise
522 Checks if the current text position completely contains another. @param tp2 The TextPosition to check against @return True if completely contained, false otherwise
523 Writes paragraph separator to output stream.
524 Checks for paragraph separation based on text positions and line characteristics. @param position current text position @param lastPosition previous text position @param lastLineStartPosition start of the previous line @param maxHeightForLine maximum height allowed for a line
525 Creates a WordWithTextPositions instance with normalized word and positions. @param word input string to be extracted @param wordPositions list of TextPosition objects indicating the locations of the word in the PDF document
526 Writes a COSName object to an output stream. @param output target output stream @param cosName the COSName object to write
527 Writes an operand (COSName) to the PDF output stream. @param name COSName object representing the operand
528 Writes a string to the specified output stream, either in ASCII or hexadecimal format. @param bytes input byte array @param forceHex whether to write in hexadecimal format (default is ASCII) @param output target output stream
529 Sorts the input list in-place using iterative merge sort. @param list List to be sorted @param cmp Comparator to determine order
530 Initializes a PDFMarkedContentExtractor instance with the specified encoding. Adds necessary operators for managing marked content sequences and drawing objects.
531 Initializes a new instance of the PDFTextStripper with default marked content sequences.
532 Retrieves the underlying COSBase object for a given dictionary key. @param key unique dictionary identifier
533 Retrieves item by string key from dictionary. @param key unique identifier of item to retrieve
534 Checks if a specified PDF key exists in the dictionary. @param name The PDF key to search for
535 Retrieves a specific filter instance by name. @param filterName unique identifier of the filter to fetch @return Filter object or null if not found, throws IOException otherwise
536 Parses a COSName component from the PDF source. @throws IOException on parsing errors or I/O issues
537 Initializes a PDColor instance from the provided COSArray and associated color space. @param array COSArray containing color components (optional) and/or pattern name @param colorSpace associated color space
538 Parses a hexadecimal string into a byte array. @param hex input hexadecimal string @return COSString object containing the parsed byte data @throws IOException if parsing fails due to invalid or malformed input
539 Creates a COSArray instance containing the specified integers. @param integer list of integers to be added
540 Creates a COSArray instance from a list of string names. @param strings list of PDF name strings
541 Creates a COSArray instance from a list of string values. @param strings collection of string objects to be added
542 Initializes new instance of COSArrayList with default values.
543 Initializes a new instance of COSArrayList with the given COSDictionary and key. @param dictionary associated COSDictionary object @param dictionaryKey unique identifier for the dictionary in this list
544 Initializes an empty page destination with direct access enabled.
545 Initializes a PDRectangle instance with position and dimensions. @param x horizontal coordinate @param y vertical coordinate @param width rectangle width @param height rectangle height
546 Initializes a PDRectangle instance from a BoundingBox object. @param box bounding box containing rectangle dimensions and coordinates
547 Sets the list of filters for the PDF stream. @param filters collection of filter names
548 Sets alternate color spaces for the PDF document. @param list collection of PDColorSpace objects to set as alternates
549 Creates a new COSStream instance and adds it to the collection for cleanup.
550 Initializes a COSStream instance with no cache.
551 Initializes a COSStream instance with a cache and sets the stream length. @param streamCache Random access stream cache @param randomAccessReadView Stream read view with length information
552 Returns an unmodifiable view of this dictionary.
553 Retrieves the last or default decode result. @return Last decode result if available, otherwise a default instance
554 Retrieves and returns the resources associated with this form XObject. @return PDResources object or empty resources if key exists but has nothing, or null if not found
555 Initializes an instance of the PDAttributeObject class with default settings.
556 Initializes a new instance of the PDUserProperty class with the provided user attribute object. @param userAttributeObject User attribute object to be managed by this property
557 Initializes an instance of the PDOutlineNode class with default settings.
558 Initializes an empty PDDestinationNameTreeNode instance.
559 Initializes an instance of the PDEmbeddedFilesNameTreeNode class with an empty COSDictionary.
560 Initializes an empty JavaScript name tree node in a PDF document.
561 Initializes an instance of the PDStructureElementNameTreeNode class with default properties.
562 Initializes a non-terminal field from an AcroForm.
563 Initializes a PDField instance from an AcroForm.
564 Initializes a PDLayoutAttributeObject instance from a COSDictionary. @param dictionary PDF dictionary structure to be wrapped
565 Initializes an instance of PDDictionaryWrapper from the given COSDictionary. @param dictionary PDF dictionary structure to be wrapped
566 Initializes an instance of PDPrintFieldAttributeObject from the given COSDictionary. @param dictionary PDF dictionary structure to be wrapped
567 Initializes an instance of PDTableAttributeObject with the given COSDictionary. @param dictionary PDF dictionary structure to be wrapped
568 Initializes form XObject from underlying COSStream. @param stream underlying COSStream instance
569 Initializes transparency group from COSStream and resource cache. @param stream underlying COSStream instance @param cache ResourceCache object for form XObject management
570 Processes a TrueType Collection (TTC) file and adds its fonts to the list. @param ttcFile path to the TTC file to process
571 Adds a TrueType font to the list of fonts. @param fontHeaders the font headers containing metadata @param file the font file to add @param hash the unique hash for the font
572 Adds a Type1 font from a PFB file. @param pfbFile the PFB file to add
573 Initializes a PDCheckBox instance from an AcroForm and COSDictionary. @param acroForm the containing AcroForm @param field the underlying COSDictionary
574 Initializes a Push Button instance from an AcroForm and COSDictionary. @param acroForm the containing AcroForm @param field the underlying COSDictionary
575 Initializes a radio button instance from an AcroForm and COSDictionary. @param acroForm the containing AcroForm @param field the underlying COSDictionary
576 Initializes a PDChoice instance from an AcroForm and COSDictionary. @param acroForm the containing AcroForm @param field the underlying COSDictionary
577 Initializes a Variable Text instance from an AcroForm and COSDictionary. @param acroForm the containing AcroForm
578 Saves current graphics state by pushing a cloned copy onto the stack. @param none
579 Saves the current graphics stack and returns it. @return Deque of PDGraphicsState objects representing the saved stack
580 Initializes a new instance of COSDocument with default values.
581 Constructs a COSParser instance with specified parameters. @param source PDF document to be parsed @param password encryption password (or null for no encryption) @param keyStore path to keystore containing encryption keys @param keyAlias alias of encryption key in the keystore @param streamCacheCreateFunction function to create StreamCache instance
582 Returns a string representation of the COSDictionary instance.
583 Updates the clipping path by transforming and intersecting a rectangular region. @param rectangle PDRectangle object to be clipped
584 Calculates the bounding box of a form's appearance stream after transformation. @param appearanceStream PDAppearanceStream object to transform
585 Initializes the graphics state with a clipping path from the given page rectangle. @param page the page rectangle to convert and add as a clipping path
586 Retrieves the left position from the internal collection. @param index unused (always set to 2)
587 Retrieves the left coordinate of the target rectangle. @return Left integer value from the collection
588 Retrieves the bottom coordinate of the targeted rectangle. @return integer value representing the bottom position
589 Retrieves the right coordinate of the rectangle. @return Right boundary value
590 Retrieves the top coordinate of the rectangle destination. @return integer value representing the top position
591 Retrieves the top value from the collection. @return integer value at index 2
592 Retrieves the left coordinate from the array. @return integer value representing the left position
593 Retrieves the top coordinate from the collection. @return integer value representing the top position
594 Checks if the page view is bounded by its bounding box. @return true if the page view has a bounded box, false otherwise
595 Checks if this destination's bounding box fits within a page. @return true if the bounding box is bounded, false otherwise
596 Checks if page content fits within bounded view.
597 Creates an output stream with default filters and initializes the underlying stream cache.
598 Creates an output stream with specified filter. @param filter COSName representing the output filter
599 Creates a thumbnail image from the given COSStream. @param cosStream input stream containing thumbnail data
600 Retrieves the image mask as a PDImageXObject instance. @return PDImageXObject object or null if no mask is found
601 Retrieves the soft mask image from the PDF document. @return A PDImageXObject instance representing the soft mask or null if not found
602 Writes an affine transformation matrix to the content stream. @param transform AffineTransform object containing the matrix values
603 Begins a text mode operation, initializing the graphics state and color settings. @throws IOException if an I/O error occurs
604 Ends text mode and writes END_TEXT operator. @throws IOException if an I/O error occurs
605 Sets text leading in PDF content stream. @param leading vertical distance between lines
606 Writes a newline operator in text mode. @throws IOException if an I/O error occurs
607 Writes a text newline at specified offset. @param tx x-coordinate of the newline @param ty y-coordinate of the newline @throws IOException on write failure
608 Saves the current graphics state.
609 Restores the graphics state by popping color spaces and fonts from stacks. @throws IllegalStateException if called within a text object
610 Sets the stroking color for graphics, with RGB values within 0..1 range. @param r red component value @param g green component value @param b blue component value @throws IOException on write failure
611 Sets the stroking color for graphics using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1)
612 Sets the stroking color for graphics with a specified gray value. @param g grayscale level within range [0, 1] @throws IOException on write failure or IllegalArgumentException if g is outside valid range
613 Sets the non-stroking color for PDF rendering. @param r red color component in range [0, 1] @param g green color component in range [0, 1] @param b blue color component in range [0, 1] @throws IOException on write failure
614 Sets the non-stroking CMYK color for PDF rendering. @param c, m, y, k color components (0..1) @throws IOException on write failure
615 Sets the non-stroking color for PDF rendering. @param g grayscale value between 0 and 1 @throws IOException on write failure or IllegalArgumentException if g is out of range
616 Adds a rectangular shape to the PDF content stream. @param x top-left X-coordinate @param y top-left Y-coordinate @param width rectangle width @param height rectangle height
617 Writes a curve-to operator with accompanying coordinates. @param x1, y1 first control point @param x2, y2 second control point @param x3, y3 end point of the curve
618 Writes a Bezier curve to the content stream. @param x2, y2, x3, y3 control point coordinates
619 Draws a quadratic Bezier curve with control points and final point. @param x1 first control point's X-coordinate @param y1 first control point's Y-coordinate @param x3 third point (final point) of the curve's X-coordinate @param y3 third point (final point) of the curve's Y-coordinate
620 Moves the current graphics point to specified coordinates. @param x horizontal coordinate @param y vertical coordinate
621 Draws a line to the specified coordinates. @param x horizontal coordinate @param y vertical coordinate
622 Draws the current path as a line. @throws IOException if an I/O error occurs
623 Closes and strokes the content stream, writing the CLOSE_AND_STROKE operator. @throws IOException if an I/O error occurs
624 Fills content stream with non-zero shape data. @throws IOException if an I/O error occurs
625 Fills PDF content stream with even/odd operation. @throws IOException if an I/O error occurs
626 Fills and strokes the current graphics state. @throws IOException if an I/O error occurs
627 Fills and strokes even-odd content stream. @throws IOException if an I/O error occurs
628 Closes, fills non-zero areas, and strokes the content stream. @throws IOException if an I/O error occurs
629 Closes fill and stroke even/odd content stream. @throws IOException if an I/O error occurs
630 Closes the current path in the content stream. @throws IOException if an I/O error occurs
631 Clamps the current graphics state to the current clipping path. @throws IOException if an I/O error occurs
632 Clamps the graphics state to even-odd fill mode. @throws IOException if an I/O error occurs
633 Sets the line width in the graphics state. @param lineWidth new line width value
634 Sets the line join style within a PDF content stream. @param lineJoinStyle integer specifying line join style (0-2)
635 Sets the line cap style for a PDF content stream. @param lineCapStyle integer code (0-2) representing the desired cap style
636 Sets the line dash pattern with specified values and phase. @param pattern array of dash lengths @param phase initial phase value
637 Sets the miter limit for line joins, throwing an exception if it's <= 0. @param miterLimit the new limit value
638 Ends marked content stream.
639 Sets character spacing in the content stream. @param spacing the new spacing value
640 Sets word spacing in content stream. @param spacing word spacing value
641 Sets horizontal scaling factor for text content. @param scale the scaling value
642 Sets rendering mode in PDF content stream. @param rm RenderingMode object
643 Sets text rise value in PDF content stream. @param rise float value of the text rise
644 Initializes a PDRectangle instance from a COSArray containing rectangle coordinates. @param array COSArray object containing the rectangle's dimensions and coordinates
645 Initializes a PDLineDashPattern instance with the given array and phase. @param array COSArray containing dash lengths @param phase initial phase value, which may be adjusted according to PDF 2.0 spec
646 Returns a string representation of this numerical range, including its minimum and maximum values. @return Range string in the format "PDRange{min,max}"
647 Evaluates a PDF Function Type 4 by executing instructions and processing input values. @param input array of input values @return array of output values
648 Reads a shading patch from an ImageInputStream. @param input input stream containing the patch data @param isFree true if reading free-form patch, false otherwise @param implicitEdge array of points defining the patch's edges @param implicitCornerColor color values for the patch's corners @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX range of x-coordinates for the patch @param rangeY range of y-coordinates for the patch @param colRange array of ranges for each color component @param matrix 2D transformation matrix to apply to points @param xform AffineTransform object to apply to points @param controlPoints number of points in the patch @return Patch object representing the read patch data, or null on EOF
649 Reads a vertex from the given image input stream, applying transformations and interpolations as necessary. @param input ImageInputStream to read from @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX PDRange for x-coordinate interpolation @param rangeY PDRange for y-coordinate interpolation @param colRangeTab array of PDRange for color component interpolations @param matrix Matrix to apply 2D transformation with @param xform AffineTransform to further transform the point @return Vertex object representing the read vertex data, or null on error
650 Retrieves the color at index 0 from the managed collection. @return PDGamma object representing the first color in the PDF document
651 Retrieves color at index 1 (second color) from managed collection. @return PDGamma object representing second color or null if not found
652 Retrieves the start color by index from the managed collection. @return PDGamma object representing the start color
653 Retrieves the color at index 3 (end color) from the managed collection. @return PDGamma object representing the end color or null if not found
654 Retrieves the blend mode from the extended graphics state dictionary. @return BlendMode instance or null if not found
655 Retrieves the underlying destination dictionary object. @return PDDestination object or null if not found
656 Retrieves the destination associated with this PDActionGoTo instance. @return PDDestination object representing the navigation destination
657 Retrieves the destination COSBase object from the dictionary. @return PDDestination object or null if not found
658 Retrieves the destination of this outline item. @return PDDestination object or null if not found
659 Creates a Matrix instance from the given COSBase object. @param base COSBase containing the matrix data, must be a COSArray
660 Updates the highest XRef object number in the document by fetching and comparing indirect object keys from an imported page. @param importedPage the PDPage containing imported objects to compare
661 Retrieves the underlying COSDictionary object for a given key pair. @param firstKey primary dictionary identifier @param secondKey secondary dictionary identifier @return COSDictionary object or null if not found
662 Retrieves a boolean value from the dictionary using the specified keys. If both keys are not found, returns the default value. @param firstKey primary dictionary identifier @param secondKey secondary dictionary identifier @param defaultValue default boolean value to return if both keys are not found @return boolean value or default value if not found
663 Retrieves an integer value from the dictionary using a primary and secondary key. Falls back to the default value if either key is not found or yields a non-integer result. @param firstKey primary dictionary identifier @param secondKey secondary dictionary identifier @param defaultValue default integer value to return in case of failure @return retrieved integer value or default value
664 Retrieves the list of image filters. @return List of filter names as strings
665 Retrieves the color space from the shading dictionary. @return PDColorSpace object or null if not found
666 Checks if a given COSDictionary represents the PDF catalog. @param dictionary the dictionary to check @return true if it's a catalog, false otherwise
667 Checks if a given COSDictionary represents a page tree node. @param node the dictionary to check @return true if it's a page tree node, false otherwise
668 Retrieves the encryption method from the cryptographic filter dictionary. @return COSName object representing the encryption method
669 Retrieves the stream filter name from the document's dictionary. @return COSName object representing the stream filter or IDENTITY if not found
670 Retrieves the string filter name from the internal dictionary. @return COSName object representing the string filter name or IDENTITY if not found
671 Decrypts a COS dictionary and its contents. @param dictionary the dictionary to decrypt @param objNum object number for decryption @param genNum generation number for decryption
672 Retrieves Unicode representation of a given internal code point. @param code internal code point value @return Unicode character as string or null if not obtainable
673 Retrieves the subtype of this soft mask. @return COSName object representing the subtype, or null if not initialized
674 Retrieves the relationship COSName from the dictionary. @return COSName object representing the relationship
675 Retrieves the appearance state of this annotation. @return COSName object representing the appearance state or null if not found
676 Checks if the PDF document is encrypted. @return true if encrypted, false otherwise
677 Retrieves the encryption dictionary from the trailer. @return COSDictionary object representing document encryption settings
678 Performs the initial parsing of the FDF document. Retrieves the trailer, root dictionary, and sets the 'initialParseDone' flag accordingly.
679 Retrieves the AcroForm object from the document catalog. @param acroFormFixup an optional fixup object to apply to the AcroForm content @return PDAcroForm object or null if not found
680 Retrieves the viewer preferences from the document catalog. @return PDViewerPreferences object or null if not found
681 Retrieves the name dictionary within the PDF document. @return PDDocumentNameDictionary object or null if not found
682 Retrieves the dictionary of named destinations. @return PDDocumentNameDestinationDictionary object or null if not found
683 Retrieves the marking information from the catalog dictionary. @return PDMarkInfo object or null if not found
684 Retrieves the URI dictionary from the document catalog. @return PDURIDictionary object or null if not found
685 Retrieves the structure tree root from the catalog dictionary. @return PDStructureTreeRoot object or null if not found
686 Retrieves the optional content properties dictionary. @return PDOptionalContentProperties object or null if not found
687 Retrieves the Dests entry from the document's name dictionary or catalog. @return PDDestinationNameTreeNode object or null if not found
688 Retrieves the embedded files dictionary. @return PDEmbeddedFilesNameTreeNode object or null if not found
689 Retrieves the JavaScript object from the name dictionary. @return PDJavascriptNameTreeNode instance or null if not found
690 Retrieves the underlying PDTransition object from the page's dictionary. @return PDTransition object or null if not found
691 Retrieves an indirect object from the resources by name and type. @param kind COSName representing the resource type @param name COSName identifying the specific object within that type @return COSObject instance or null if not found or invalid type
692 Retrieves a dictionary object by key. @param kind unique dictionary identifier @param name key to look up @return COSBase object or null if not found
693 Retrieves an unmodifiable set of names from the dictionary matching the specified kind. @param kind COSName object representing the type of resource @return Set of COSName objects or empty set if not found
694 Retrieves the associated page for this marked content reference. @return PDPage object or null if not found
695 Retrieves the associated PDF page from the COSDictionary. @return PDPage object or null if not found
696 Retrieves a PDPage instance from the underlying PDF structure. @return PDPage object or null if not found
697 Retrieves the ID tree structure. @return PDStructureElementNameTreeNode instance or null if not found
698 Retrieves the parent tree of a logical structure tree. @return Parent tree COSDictionary object or null if not found
699 Retrieves and processes the CLASS_MAP dictionary, creating a map of attribute objects. @return Map<String, Object> containing attribute objects or null if not found
700 Retrieves the COSDictionary for a given cryptographic filter name. @param cryptFilterName name of the cryptographic filter @return PDCryptFilterDictionary object or null if not found
701 Retrieves the border style dictionary for an annotation. @return PDBorderStyleDictionary object or null if not found
702 Retrieves the border effect dictionary for an annotation. @return PDBorderEffectDictionary object or null if not found
703 Retrieves the digital signature from the FDFCatalog. @return PDSignature object or null if not found
704 Retrieves the JavaScript associated with the FDF document. @return FDFJavaScript object or null if not found
705 Retrieves the appearance dictionary for a field. @return PDAppearanceDictionary object or null if not found
706 Retrieves the named page reference for appearance stream. @return FDFNamedPageReference object or null if not found
707 Retrieves the icon fitting configuration for a form field. @return FDFIconFit object or null if not found
708 Retrieves additional actions associated with a form field. @return PDAdditionalActions object or null if not found
709 Retrieves the page information as an FDFPageInfo object. @return FDFPageInfo object or null if not found
710 Retrieves the named page reference from the template. @return FDFNamedPageReference object or null if not found
711 Retrieves the CID system info dictionary. @return PDCIDSystemInfo object or null if not found
712 Retrieves the font classification data in PANOSE format. @return PDPanose object or null if not found
713 Retrieves the underlying PDResources object for this Type 3 font. @return PDResources object or null if not initialized
714 Retrieves the character procedures dictionary. @return COSDictionary object containing character procedures or null if not found
715 Retrieves the underlying PDDeviceNProcess instance from the color space attributes. @return PDDeviceNProcess object or null if not found
716 Retrieves the render state associated with a given destination. @param destination unique rendering destination identifier @return RenderState object or null if not found
717 Retrieves the underlying Extended Graphics State object. @return PDExtendedGraphicsState object or null if not found
718 Retrieves the underlying resources for this tiling pattern. @return PDResources object or null if not found
719 Retrieves the underlying COSDictionary object for the target directory. @return COSDictionary object or null if not found
720 Retrieves the Windows launch parameters. @return PDWindowsLaunchParams object or null if not found
721 Retrieves the target directory dictionary for navigation and linking. @return PDTargetDirectory object or null if not found
722 Retrieves the appearance attributes as a PDAppearanceDictionary object. @return PDAppearanceDictionary object or null if not found
723 Retrieves the underlying PDPage object associated with this annotation. @return PDPage object or null if not found
724 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
725 Retrieves the border style dictionary associated with this annotation link. @return PDBorderStyleDictionary object or null if not found
726 Retrieves the previous URI action. @return PDActionURI object or null if not found
727 Retrieves the external data dictionary for this annotation. @return PDExternalDataDictionary object or null if not found
728 Retrieves the border style dictionary. @return PDBorderStyleDictionary object or null if not found
729 Retrieves the border effect properties from the underlying dictionary. @return PDBorderEffectDictionary object or null if not found
730 Retrieves the border effect properties as a PDBorderEffectDictionary object. @return PDBorderEffectDictionary object or null if not found
731 Retrieves appearance characteristics dictionary. @return PDAppearanceCharacteristicsDictionary object or null if not found
732 Retrieves the additional annotation actions. @return PDAnnotationAdditionalActions object or null if not found
733 Retrieves the border style dictionary for this annotation widget. @return Border style properties as a PDBorderStyleDictionary object or null if not found
734 Retrieves the normal appearance entry from the underlying COSDictionary. @return PDAppearanceEntry object or null if not found
735 Retrieves the filter properties from the underlying COSDictionary. @return PDPropBuildDataDict object containing filter data or null if not found
736 Retrieves publication security properties from the underlying COSDictionary. @return PDPropBuildDataDict object representing publication security data or null if not found
737 Retrieves the application data dictionary. @return PDPropBuildDataDict object or null if not found
738 Retrieves the MDP seed value configuration. @return PDSeedValueMDP object or null if not found
739 Retrieves the seed value certificate. @return PDSeedValueCertificate object or null if not found
740 Retrieves the timestamp associated with this seed value. @return PDSeedValueTimeStamp object or null if not found
741 Retrieves the underlying PropBuild COSDictionary object. @return PDPropBuild object or null if not found
742 Retrieves the structure element associated with this outline item. @return PDStructureElement object or null if not found
743 Checks if the outline node has child items.
744 Retrieves default resources for the form. @return PDResources instance or null if not found
745 Retrieves additional actions associated with the form field. @return PDFormFieldAdditionalActions object or null if not found
746 Retrieves the signature value as a PDSignature object. @return PDSignature object or null if not found
747 Retrieves the default signature value from the underlying PDF structure. @return PDSignature object or null if not found
748 Retrieves the seed value associated with this signature field. @return PDSeedValue object or null if not found
749 Retrieves the measure dictionary. @return PDMeasureDictionary object or null if not found
750 Retrieves thread information as a PDDocumentInformation object. @return PDDocumentInformation or null if not found
751 Retrieves the first bead associated with this thread. @return PDThreadBead object or null if not found
752 Retrieves the underlying thread data. @return PDThread object or null if not found
753 Retrieves the next bead in the thread. @return The next PDThreadBead object or null if not found
754 Retrieves the previous bead in the thread. @return PDThreadBead object representing the preceding thread element
755 Retrieves the associated page from the current bead. @return PDPage object or null if not found
756 Retrieves the document metadata from the catalog dictionary. @return PDMetadata object or null if not found
757 Retrieves the PDF document's metadata from the given page. @return PDMetadata object or null if not found
758 Retrieves differences from FDF dictionary. @return underlying COSStream object for DIFFERENCES key
759 Retrieves the font file as a PDStream object. @return PDStream object or null if not found
760 Retrieves font file descriptor from the dictionary. @return COSStream object or null if not found
761 Retrieves font file 3 from the PDF document. @return PDStream object or null if not found
762 Retrieves the CID set from the dictionary. @return a PDStream object representing the CID set, or null if not found
763 Retrieves the sound content associated with this PDF action. @return The underlying COSStream object containing the sound data
764 Retrieves the normal icon form XObject from underlying COS dictionary. @return PDFormXObject object or null if not found
765 Retrieves the rollover icon form XObject. @return PDFormXObject instance or null if not found
766 Retrieves the alternate icon for interactive PDF annotations. @return PDFormXObject object or null if not found
767 Retrieves the document's ID from its trailer dictionary. @return COSArray object containing the document's ID or null if not found
768 Retrieves a list of output intents from the catalog dictionary. @return List of PDOutputIntent objects
769 Retrieves a list of thread beads from the page's COSArray. @return List of PDThreadBead objects or empty list if not found
770 Retrieves the list of viewport dictionaries for this page. @return List of PDViewportDictionary objects or null if not found
771 Retrieves a list of child PDNameTreeNode objects. @return List of PDNameTreeNode objects or null if not found
772 Retrieves a map of name-value pairs from the PDF document's object model. @return Map of names to values, or null if not found
773 Retrieves a list of child nodes from the tree. @return List of PDNumberTreeNode objects or null if empty
774 Retrieves a map of numeric values from the COSArray object associated with the current node. The keys are integer values representing page labels, and the values are corresponding COSObjectable objects. @return Map<Integer, COSObjectable> containing numeric data or null if not found
775 Retrieves the upper limit from the COSArray object. @return Upper limit as an Integer or null if not found
776 Retrieves the lower numeric limit from the COSArray object. @return Lower limit as an Integer or null if not found
777 Retrieves the range values associated with this PDFunction. @return COSArray instance containing range values or null if not set
778 Retrieves the underlying COSArray object containing domain values. @return COSArray instance or null if not found
779 Retrieves the size of the Type 0 PDF function. @return COSArray object containing size information
780 Retrieves the COSArray object containing decoding values. @return COSArray object or null if not found
781 Retrieves the array of Type 3 function data. @return COSArray object containing function data or null if not initialized
782 Retrieves the function bounds from the underlying PDF document. @return COSArray object containing bounds data or null if not found
783 Retrieves the encoding array from the underlying PDF document. @return COSArray object containing encoding data or null if not available
784 Retrieves a list of user properties associated with the owner. @return List of PDUserProperty objects representing user-defined attributes
785 Checks if an edge is attached to the marked content artifact. @param edge edge identifier @return true if attached, false otherwise
786 Retrieves the color of the annotation. @return Color object or null if not found
787 Retrieves the interior color of the circular annotation. @return Color object representing the interior color or null if not set
788 Retrieves callout values from annotation. @return float array containing callout values or null if not found
789 Retrieves the ink list from the annotation's COSArray. @return A List of float arrays containing ink data, or null if not found
790 Retrieves line coordinates as a float array. @return float array containing x and y values or null if not found
791 Retrieves the style of the line annotation's start point. @return String representing the style (e.g. "LE_NONE", etc.) or null if not found
792 Retrieves the end point ending style of a line annotation. @return string representation of the style (e.g. "Diamond", "Square") or LE_NONE if not set
793 Retrieves the interior color of the line annotation. @return Color object representing the interior color or null if not set
794 Retrieves the horizontal offset of the line annotation's caption. @return float value representing the horizontal offset (or 0 if not found)
795 Retrieves caption vertical offset from line annotation's COSArray object. @return float value of the second element in the COSArray, or 0 if not found
796 Retrieves polygon vertices as a float array. @return Vertices as float array or null if not found
797 Retrieves the interior color of this polygon annotation. @return Color object or null if not set
798 Retrieves polyline vertices as a float array. @return Vertices as a float array or null if not found
799 Retrieves the endpoint style of the polyline annotation's start point. @return String representation of the endpoint style
800 Retrieves the endpoint style for a polyline annotation. @return string value representing the end point ending style, or default LE_NONE if not set
801 Retrieves the interior color of the polyline annotation. @return Color object or null if not found
802 Retrieves the interior color of the square annotation. @return Color object representing the interior color or null if not set
803 Retrieves the coordinates for text markup annotations. @return float array containing coordinate values or null if not found
804 Retrieves the document ID from the FDF dictionary. @return COSArray object containing the document ID or null if not found
805 Retrieves a list of form fields from the FDF document. @return List<FDFField> collection of form fields or null if not found
806 Retrieves a list of FDFPages from the underlying FDF dictionary. @return list of FDFPage objects or null if not found
807 Retrieves a list of child fields associated with this field. @return List of FDFField objects or null if not found
808 Retrieves a list of options associated with the field. @return List of option elements or null if not found
809 Retrieves the list of templates associated with this page. @return List of FDFTemplate objects or null if no templates found
810 Retrieves a list of FDF fields from the associated template. @return List of FDFField objects or null if not found
811 Retrieves the list of font widths. @return List<Float> containing individual character widths or empty if not found
812 Retrieves the transformation matrix from the dictionary. @return float array containing matrix values or default matrix if not found
813 Retrieves the component names from the device-dependent color space. @return List of String component names or an empty list if not found
814 Retrieves the underlying COSArray object for the BACKGROUND key in a shading dictionary. @return COSArray object or null if not found
815 Retrieves the shading domain. @return COSArray object representing the shading domain
816 Retrieves the COSArray object representing the shading extend values. @return COSArray object containing extend values or null if not initialized
817 Retrieves the domain shading attributes as a COSArray object. @return COSArray object or null if not initialized
818 Retrieves the coordinates array for this PDShadingType2 object. @return COSArray object containing shading coordinates
819 Retrieves the array of decode values. @return COSArray object containing decode values or null if not initialized
820 Retrieves the font setting from the underlying dictionary. @return PDFontSetting object or null if not found
821 Retrieves form fields associated with the reset action. @return COSArray object containing field data
822 Retrieves the fields configuration associated with form submission. @return COSArray object containing field configurations
823 Retrieves the differences between rectangle margins. @return array of float values or empty array if not found
824 Retrieves the differences in rectangle coordinates for a free text annotation. @return array of float values representing the differences
825 Retrieves the callout settings as a float array. @return float array containing values from COSBase objects or null if not found
826 Retrieves the ink list as a 2D array of floats. @return 2D array containing float arrays for each ink path or empty if not found
827 Retrieves line annotation properties as a float array. @return float array containing values from COSBase objects or null if not found
828 Retrieves the ending style of the line annotation's start point. @return Ending style as a string or default value if not found
829 Retrieves the end point ending style of this line annotation. @return Ending style as a string or default value if not found
830 Retrieves the horizontal offset for a line's caption. @return Horizontal offset value or 0 if not found
831 Retrieves the vertical offset of the line caption. @return vertical offset value or 0 if not found
832 Retrieves the quad points for a link annotation. @return float array containing quad point coordinates or null if not found
833 Retrieves the polygon's vertices as a float array. @return Vertex coordinates or null if not found
834 Retrieves the polygon's vertices as a 2D array of floats. @return Array of vertex coordinates or null if not found
835 Retrieves the endpoint style for the starting point of this polyline. @return endpoint style (e.g. LE_NONE) or default value if not found
836 Retrieves the endpoint ending style for this polyline annotation. @return String value representing the endpoint style or default if not found
837 Retrieves vertex coordinates as a float array. @return float array containing vertex coordinates or null if not found
838 Retrieves the differences between rectangle annotations. @return array of float values representing rectangle differences
839 Retrieves the quad points for a text markup annotation. @return float array containing quad point coordinates or null if not found
840 Retrieves the sub-filter value as a list of strings. @return List of sub-filter values or an empty list if not found
841 Retrieves the list of digest methods associated with a digital signature. @return List of string identifiers or empty list if not found
842 Retrieves a list of reasons from the underlying dictionary. @return List of reason strings or empty list if not found
843 Retrieves the list of legal attestations for the digital signature. @return List of COS name strings or an empty list if not found
844 Retrieves the subject attribute from the digital signature certificate. @return list of byte arrays representing the subject or null if not found
845 Retrieves the list of key usage extensions from the certificate dictionary. @return List of String values or null if not found
846 Retrieves the issuer certificate information as a list of byte arrays. @return List of byte arrays or null if not found
847 Retrieves the OID (Object Identifier) from the certificate's COSDictionary. @return List of byte arrays representing the OID or null if not found
848 Retrieves the byte range as an array of integers. @return int[] containing byte range values or empty array if not found
849 Retrieves the list of PDFields in calculation order from the COSArray object. @return List<PDField> ordered fields or empty list if not found
850 Retrieves the index of selected options from the choice field. @return list of integers representing the indices of selected options
851 Retrieves an array of PDNumberFormatDictionary objects representing the change in X coordinates. @return array of PDNumberFormatDictionary objects or null if not found
852 Retrieves an array of PDNumberFormatDictionary objects representing change Y measurements. @return Array of PDNumberFormatDictionary objects or null if not found
853 Retrieves an array of distance measurement dictionaries. @return PDNumberFormatDictionary[] array or null if not found
854 Retrieves an array of PDNumberFormatDictionary objects representing area measurements. @return Array of PDNumberFormatDictionary objects or null if not found
855 Retrieves an array of angle measurements from the dictionary. @return PDNumberFormatDictionary[] object or null if not found
856 Retrieves an array of line slope dictionaries. @return Array of PDNumberFormatDictionary objects or null if not found
857 Retrieves the origin of the coordinate system. @return float array containing coordinates or null if not found
858 Retrieves the visibility policy COSName.
859 Retrieves a long value from the dictionary by its PDF name. @param key unique PDF name string
860 Retrieves a long value from the dictionary by key. @param key unique COSName identifier
861 Retrieves a long value from the dictionary using the given PDF name. @param key unique dictionary identifier string @param defaultValue fallback value to return if key is missing @return long value associated with the key, or the default value
862 Decodes input stream using provided filters and options. @param encoded input data stream to be decoded @param filterList list of filters to apply @param parameters filter parameters @param options decoding options @param results optional collection of decode results @return RandomAccessRead buffer containing decoded data
863 Sets the startxref position, initializing or updating the XrefTrailerResolver. @param startxrefBytePosValue the byte position of the startxref value
864 Retrieves the float value associated with a given dictionary key. @param key unique PDF name string
865 Retrieves the float value associated with a given dictionary key. @param key unique COSDictionary identifier
866 Retrieves the float value associated with a dictionary key. @param key unique dictionary identifier @param defaultValue default float value to return if key is missing
867 Retrieves the user unit from the page's resources. @return User unit value or default (1.0f) if not found
868 Retrieves the guideline width from the COSDictionary. @return Guideline width as a float value
869 Retrieves annotation opacity. @return float value representing opacity (0-1) or default value if not found
870 Retrieves the font weight value from the dictionary. @return Font weight as a float value
871 Retrieves the italic angle from the font descriptor dictionary. @return italic angle in degrees or 0 if not found
872 Retrieves font ascent value from dictionary. @return font ascent in points or default value (0) if missing
873 Retrieves font descent value from font descriptor dictionary. @return font descent value or default value (0) if not found
874 Retrieves the leading value from the font descriptor dictionary. @return leading value in points or default value if missing
875 Retrieves the cap height of the font descriptor. @return Cap height value or absolute value if initially negative
876 Retrieves the x-height font attribute. @return non-negative float value representing the x-height
877 Retrieves the stem vertical value from the font descriptor dictionary. @return float stem vertical value or default value if not found
878 Retrieves the stem height value from the font descriptor dictionary. @return stem height as a float, or 0 if not found
879 Retrieves average font width from dictionary. @return average width as a float value
880 Retrieves the maximum font width from the dictionary. @return Maximum width value or default value (0) if not found
881 Retrieves missing width value from dictionary. @return float value or default (0) if missing
882 Retrieves the gamma value from the color space dictionary. @return gamma factor or default value (1.0) if not found
883 Retrieves the x-coordinate step value of the tiling pattern. @return x-step value or default (0) if not found
884 Retrieves the Y-step value from the pattern's dictionary. @return The Y-step value or default (0) if not found
885 Retrieves and normalizes the sound volume. @return Volume value between -1 and 1
886 Retrieves the leader line length. @return Leader line length in pixels
887 Retrieves the extension length of the leader line. @return Leader line extension length in points
888 Retrieves the leader line offset length from PDF dictionary. @return Leader line offset length in points
889 Retrieves the constant opacity value. @return Constant opacity as a float value
890 Retrieves the border width from the internal COSDictionary object. @return border width as a float value
891 Retrieves the transition duration in seconds. @return duration as float value
892 Retrieves the fly scale value associated with the SS dictionary key. @return Fly scale value or default (1) if not found
893 Extracts text from specific regions within a PDF document. @param page PDPage object to extract text from
894 Retrieves the color space for this transparency group. @return PDColorSpace object or null if not found
895 Creates a PDPropertyList instance based on the specified COSDictionary type. @param dict the dictionary to associate with the property list
896 Retrieves line width from the extended graphics state. @return Line width as a float value or null if not found
897 Retrieves the miter limit value from the extended graphics state dictionary. @return float miter limit value or null if not found
898 Retrieves the flatness tolerance value from the PDF dictionary. @return float value or null if not found
899 Retrieves smoothness tolerance value from dictionary. @return Float smoothness tolerance value or null if not found
900 Retrieves stroking alpha constant from COSDictionary. @return stroking alpha value as a float or null if not found
901 Retrieves non-stroking alpha constant from dictionary. @return float value or null if not found
902 Parses a COS dictionary value from the PDF source. @throws IOException if an I/O error occurs
903 Retrieves offsets for COS objects found using brute force search. @throws IOException if an I/O error occurs
904 Writes a COSBase object to the PDF document and updates its associated key. @param obj COSBase object being written
905 Writes a reference to the specified COSBase object. @param obj the COSBase object being referenced
906 Saves this FDFDocument to the specified OutputStream. @param output OutputStream object to write the document components
907 Clears all COSBase objects from this collection and updates document state.
908 Removes all elements from this collection and updates the document's state. @param objectsList list of COSBase objects to remove
909 Removes elements from this collection that are also contained in the specified list. @param objectsList the collection of elements to be removed
910 Sets an integer value at a specified index in the array. @param index position to update @param intVal new integer value
911 Removes an element from the collection at specified index. @param i position of element to be removed @return removed COSBase object or null if not found
912 Removes a specified COSBase object from the collection. @param o the element to be removed @return true if removal was successful, false otherwise
913 Clears all key-value pairs from the COSDictionary and updates its state.
914 Removes item with specified COSName key from dictionary. @param key unique identifier of item to be removed
915 Updates the document state when origin changes, based on provided COSUpdateState. @param updateState new update state
916 Sets the COSObject to a null state. @param none
917 Sets the origin document state and updates the update info accordingly. @param originDocumentState new origin document state @param dereferencing true if dereferencing, false otherwise
918 Retrieves a string value from the collection at specified index. If not found, returns null (default is null if no default provided). @param index position of the COSBase object to retrieve
919 Retrieves the string representation of a COSName instance associated with the given dictionary identifier. @param key unique dictionary identifier
920 Retrieves the string representation of a given COSName object or returns a default value if not found. @param key unique dictionary identifier @param defaultValue default string to return when key is missing
921 Checks if the given PDF cross-reference table offset points to a valid XRef stream. @param startXRefOffset unique identifier for the xref table @return true if valid XRef stream found, false otherwise
922 Retrieves the page mode from the catalog dictionary. @return PageMode enum value or USE_NONE if not found
923 Retrieves the page layout from the catalog dictionary. @return PageLayout object or SINGLE_PAGE if not found
924 Retrieves the PDF document version. @return string representation of the VERSION property
925 Retrieves the trapped attribute from document metadata. @return string representation of the trapped value or null if not found
926 Retrieves the page label style. @return string representation of the style dictionary
927 Retrieves the type identifier from the underlying COSDictionary. @return string representation of the COSName object with key TYPE
928 Retrieves attribute owner as string. @return Owner name or null if not found
929 Retrieves the structure type as a string. @return COSName value S or null if not found
930 Creates a PDStructureNode instance based on the provided COSDictionary. @param node COSDictionary containing structure node information
931 Retrieves the type of this structure node from the underlying COS dictionary. @return string representation of the TYPE attribute
932 Retrieves the string representation of the property name. @return Property name as a string
933 Retrieves the language associated with this marked content. @return Language string or null if properties are unknown
934 Retrieves the content type of the marked artifact. @return string representation of the COSName object with key TYPE
935 Retrieves the subtype of the marked content artifact.
936 Retrieves the filter string from the document's encryption settings. @return Filter string or null if not applicable
937 Retrieves the sub-filter string from the encryption settings. @return string representation of the SUB_FILTER security handler
938 Creates an instance of a specific FDFAnnotation based on the provided COSDictionary data. @param fdfDic COSDictionary containing annotation data
939 Retrieves annotation intent. @return string representation of COSName.I
940 Retrieves the line ending style of the free text annotation. @return string representing the line ending style, or null if not applicable
941 Retrieves the document version from the FDF catalog. @return string representation of the version or null if not found
942 Retrieves the encoding of this FDF document. @return encoding scheme (e.g., PDFDocEncoding) or default value if not found
943 Retrieves the scale option for icons, defaulting to "always" if not set. @return scale option string or default value if unset
944 Retrieves the scaling type for icons in FDF format. @return Scaling type as string, or default proportional value if not set
945 Retrieves the base font from the dictionary. @return string representation of the base font or null if not found
946 Retrieves font type as a string. @return Font type (e.g., "TrueType") or null if not found
947 Retrieves font subtype as string. @return Font subtype identifier
948 Retrieves the font name from the PDF document. @return string representation of the font name
949 Retrieves the font stretch value from the font descriptor dictionary. @return string representation of the font stretch
950 Retrieves the base font from the dictionary. @return string representation of the base font
951 Retrieves the base font from the dictionary. @return string representation of the base font
952 Retrieves the base font name from the dictionary. @return string representation of the base font
953 Retrieves the base font name from the dictionary. @return string representation of the base font or null if not found
954 Determines if the current DeviceN color space has N-channel attributes. @return true if 'NChannel' subtype found in dictionary, false otherwise
955 Retrieves the type of PDF action. @return string representation of the action's type
956 Retrieves the subtype of this PDAction instance. @return string representation of COSName object with key 'S' (importance score: 0.3)
957 Creates a PDAction instance based on the given COSDictionary representation. @param action COSDictionary containing action details @return PDAction object or null if not found
958 Retrieves the annotation subtype as a string. @return subtype value or null if not available
959 Retrieves caption positioning as a string. @return Caption position (e.g. CP_INHERIT) or null if not found
960 Retrieves the intent identifier as a string from the internal COS object. @return Intent name (e.g. "IT") or null if not found
961 Retrieves the subtype attribute from the external data dictionary. @return subtype value as a string
962 Retrieves the name property from the dictionary. @return Name string value
963 Retrieves the filter value from the digital signature dictionary. @return string representation of the filter
964 Retrieves the URL type from the certificate's COSDictionary.
965 Retrieves the filter value from the underlying COSDictionary. @return string representation of the filter or null if not found
966 Retrieves the sub-filter value from the underlying COSDictionary. @return string representation of the sub-filter or null if not found
967 Retrieves the field type as a string. @return COSName object representing the field type
968 Retrieves the name of the viewport as a string. @return Name of the viewport
969 Retrieves duplex printing preference. @return String representation of duplex printing setting
970 Retrieves string value associated with a given PDF name. @param key unique PDF name identifier
971 Retrieves the string value associated with a given key from the dictionary. If not found, returns a default value instead of null. @param key unique dictionary identifier @param defaultValue fallback string to return if key is missing
972 Retrieves the language value from the catalog dictionary. @return Language string representation or null if not found
973 Retrieves the document title.
974 Retrieves the author metadata from the PDF document. @return The string value associated with the AUTHOR key, or null if not found
975 Retrieves the subject metadata from the PDF document. @return Subject string value or null if not found
976 Retrieves the keywords associated with this PDF document. @return Keywords string or null if not found
977 Retrieves the creator metadata from the PDF document. @return The string value associated with the CREATOR key, or null if not found
978 Retrieves the producer information from the PDF document metadata. @return the string value associated with the "producer" key, or null if not found
979 Retrieves the page prefix from the dictionary. @return String representation of the page prefix, or null if not found
980 Retrieves the Unicode name of an embedded file. @return String representation of the file's Unicode name, or null if not found
981 Retrieves the file specification string. @return file name or null if not found
982 Retrieves file DOS (Disk Operating System) string. @return DOS string associated with the file, or null if not found
983 Retrieves the file MAC address from the dictionary. @return the file's Media Access Control (MAC) address as a string, or null if not found
984 Retrieves file specification's Unix path. @return String representation of the Unix path or null if not found
985 Retrieves the file description from the file system. @return File description as a string or null if not found
986 Retrieves the ID of the PDF structure element. @return The identifier string, or null if not found
987 Retrieves the title from the PDF document's structure. @return Title string or null if not found
988 Retrieves the language associated with this PDF structure element. @return language string or null if not found
989 Retrieves the alternate description from the PDF structure element. @return String representation of the alternate description, or null if not found
990 Retrieves expanded form from PDF structure element. @return Expanded string representation or null if not found
991 Retrieves the actual text value from the PDF document structure. @return Actual text string or null if not found
992 Retrieves formatted user property value.
993 Retrieves the actual text content from the PDMarkedContent properties. @return Actual text string or null if not found
994 Retrieves alternate description from PDMarkedContent properties. @return String representation of the alternate description, or null if not found
995 Retrieves the expanded form string from the properties dictionary. @return Expanded form string or null if not found
996 Retrieves date value from annotation dictionary. @return Date string representation or null if not found
997 Retrieves the name annotation value from the underlying dictionary. @return The string representation of the input bytes, or null if not found
998 Retrieves annotation contents. @return String representation of the contents or null if not found
999 Retrieves the title annotation value.
1000 Retrieves the subject annotation value. @return String representation of the subject, or null if not found
1001 Retrieves the annotation symbol from the caret annotation.
1002 Retrieves the rotation value of the annotation. @return Rotation string or null if not found
1003 Retrieves the default appearance string from the annotation dictionary. @return Default appearance string or null if not found
1004 Retrieves the default style from the annotation. @return The default style string or null if not found
1005 Retrieves caption style from line annotation. @return string representation of caption style
1006 Retrieves the state of the text annotation. @return String representation of the annotation's state
1007 Retrieves the state model associated with this annotation. @return String representation of the state model or null if not found
1008 Retrieves the status value from the FDF dictionary. @return String representation of the status, or null if not found
1009 Retrieves the target value from the FDF dictionary. @return Target string or null if not found
1010 Retrieves partial field name from dictionary. @return string representation of input bytes
1011 Retrieves the name associated with this named page reference.
1012 Retrieves the font family from the PDF dictionary. @return Font family string or null if not found
1013 Retrieves the character set from the PDF font dictionary. @return Character set string or null if not found
1014 Retrieves the name of this optional content group from its dictionary. @return Name string or null if not found
1015 Retrieves an array of optional content group names. @return String[] containing group names or empty array if not found
1016 Retrieves string value associated with 'F' key from dictionary. @return String representation of input bytes, or null if not found
1017 Retrieves launch parameter D from the dictionary. @return String representation of parameter D or null if not found
1018 Retrieves launch parameters for operating system 'O'. @return String representation of OS-specific launch parameter
1019 Retrieves launch parameter 'P' from dictionary. @return String representation of input bytes, or null if not found
1020 Retrieves the URI associated with this PDActionURI instance. @return string representation of the URI, or null if not found
1021 Retrieves the filename associated with this target directory.
1022 Retrieves the annotation name from the dictionary. @return String representation of the A key in the dictionary, or null if not found
1023 Retrieves the filename from launch parameters. @return Filename string
1024 Retrieves the directory path from the launch parameters. @return Directory path as a string
1025 Retrieves the execute parameter from the dictionary. @return String representation of the input bytes, or null if not found
1026 Retrieves contents from the COSDictionary. @return string representation of contents or null if not found
1027 Retrieves the modified date of this annotation. @return modified date string or null if not found
1028 Retrieves the annotation name from the COSDictionary. @return String representation of the annotation name, or null if not found
1029 Retrieves default appearance string from annotation dictionary. @return DA value as a string or null if not found
1030 Retrieves default style string from annotation dictionary. @return Style string associated with DS key, or null if not found
1031 Retrieves the title of the popup annotation. @return Title string or null if not found
1032 Retrieves the subject of the annotation.
1033 Retrieves the annotation state from the PDF document. @return String representation of the annotation's current state
1034 Retrieves the state model associated with this annotation. @return String representation of the state model, or null if not found
1035 Retrieves the normal caption from the COS dictionary. @return string representation of the normal caption, or null if not found
1036 Retrieves rollover caption from internal dictionary representation.
1037 Retrieves the alternate caption string from the COS dictionary.
1038 Retrieves the date associated with this PDPropBuildDataDict object. @return String representation of the date, or null if not found
1039 Retrieves the operating system value from the dictionary. @return String representation of the input bytes, or null if not found
1040 Retrieves a list of subject distinguished names (DNs) from the PDF document. @return List of maps containing key-value pairs for each DN, or null if not found
1041 Retrieves the URL value from the certificate dictionary. @return URL string or null if not found
1042 Retrieves URL from COSDictionary. @return The stored URL value or null if not found
1043 Retrieves the name associated with the digital signature. @return Name string or null if not found
1044 Retrieves location metadata from the digital signature dictionary. @return location string value or null if not found
1045 Retrieves digital signature reason from the underlying COSDictionary. @return Reason string or null if not found
1046 Retrieves contact information from the underlying COSDictionary. @return String representation of the contact info, or null if not found
1047 Retrieves the title of this outline item.
1048 Retrieves partial field name from AcroForm dictionary. @return partial field name as string, or null if not found
1049 Retrieves alternate field name from dictionary. @return string representation of TU key value or null if not found
1050 Retrieves the mapping name from the internal dictionary. @return String representation of the mapping name
1051 Retrieves default style string from PDF document.
1052 Retrieves the scale ratio from the PDF measurement dictionary. @return Scale ratio value as a string, or null if not found
1053 Retrieves the role map from the underlying COSDictionary. @return A Map of String/Object pairs containing the role mapping or an empty map if not found
1054 Retrieves a list of string options from the choice field's dictionary object.
1055 Retrieves a list of display values for choice options. @return List of String objects representing option values
1056 Retrieves button value, either as a string or an index-based export value. @return String representation of button value or null if not found
1057 Retrieves the list of selected options for the current choice field.
1058 Retrieves default value choice field. @return List of strings representing default values
1059 Initializes an empty PDSimpleFileSpecification object.
1060 Sets the file name using the provided string. @param fileName the user-provided file name
1061 Initializes a named destination with the given name. @param dest unique identifier (name) of the destination
1062 Sets a named destination with the given identifier. @param dest unique identifier for the named destination
1063 Reads and validates the generation number from PDF source. @throws IOException if invalid value exceeds threshold
1064 Reads and interprets a long integer object number from the PDF source. @throws IOException if invalid object number format
1065 Computes user password for encryption revisions 2-4 or returns empty array for revisions 5-6. @param ownerPassword user-provided password @param owner user identifier @param encRevision encryption revision (2, 3, 4, 5, or 6) @param length desired key length @return encrypted user password as a byte array or empty array for revisions 5-6
1066 Initializes a new TensorPatch with specified control points and corner colors. @param tcp 16 control points to reshape into a 4x4 grid @param color 2D array of color values for the corners
1067 Encrypts data using RC4 algorithm with custom key. @param finalKey encryption key @param input InputStream containing plain bytes to be encrypted @param output OutputStream for writing encrypted data
1068 Retrieves the font provider instance, creating a default one if not already set. @return FontProvider object
1069 Generates a list of shaded triangles from the given color-coordinate pairs. @param patchCC 2D array of CoordinateColorPair objects representing color values at specified corners @return List<ShadedTriangle> containing generated triangles or null if empty
1070 Initializes a new Coons patch with specified control points and color values. @param points array of 12 Point2D objects representing control points @param color 2D array of color values, where each row represents a corner
1071 Processes a TextPosition, handling overlapping and diacritic characters. @param text the TextPosition to process
1072 Processes a TextPosition object, handling its Unicode representation and determining whether to show the character based on suppressDuplicateOverlappingText. @param text TextPosition object to be processed
1073 Removes contained spaces from the list of TextPositions. @param textList list of positions to process
1074 Handles line separation and paragraph formatting. @param current current text position @param lastPosition previous text position @param lastLineStartPosition start of the previous line @param maxHeightForLine maximum height allowed for a line @return updated PositionWrapper object
1075 Normalizes and formats the addition of words from a PDF document. @param normalized list to store formatted WordWithTextPositions objects @param lineBuilder StringBuilder for building the current line text @param wordPositions list to store TextPosition objects for each word @param item LineItem object representing the current text element @return updated StringBuilder with the current line text
1076 Converts a date string to a Calendar object. @param text input date string @return Calendar object if parsing is successful, otherwise null
1077 Begins marked content in PDF output stream. @param tag COSName object representing the marked content type
1078 Starts marked content with the specified COSName tag and MCID. @param tag COSName object representing the marked content type @param mcid unique identifier for the marked content sequence
1079 Sets marked content point in PDF output stream. @param tag COSName object representing the operand
1080 Writes a COSString to the specified OutputStream. @param string input COSString object @param output target output stream
1081 Writes a string to the specified output stream in ASCII format. @param bytes input byte array @param output target output stream
