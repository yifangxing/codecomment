1 Constructor. @param aValue The boolean value.
2 Private constructor. This will limit the number of COSName objects that are created. @param aName The name of the COSName object.
3 Constructor.
4 Creates a new PDF string from a byte array. This method can be used to read a string from an existing PDF file, or to create a new byte string. @param bytes The raw bytes of the PDF text string or byte string. @param forceHex forces the hexadecimal presentation of the string if set to true
5 Constructor.
6 Constructor. @param object The object that this encapsulates.
7 Constructor. @param object The object that this encapsulates. @param parser The parser to be used to load the object on demand
8 Constructor. @param key The object number of the encapsulated object. @param parser The parser to be used to load the object on demand
9 Constructs an instance specifying the region of the image that should be decoded. The actual region will be clipped to the dimensions of the image. @param x x-coordinate of the top-left corner of the region to be decoded @param y y-coordinate of the top-left corner of the region to be decoded @param width Width of the region to be decoded @param height Height of the region to be decoded
10 Sets the given {@link COSObjectKey} as a free reference in a PDF's crossreference stream ({@link PDFXRefStream}). @param key The key, that shall be set as the free reference of the document. @param nextFreeObject The object number of the next free object.
11 Prepares a object stream entry reference for the given {@link COSObject} in a PDF's crossreference stream ({@link PDFXRefStream}). @param objectStreamIndex The index of the {@link COSObject} in the containing object stream. @param key The {@link COSObjectKey}, that is represented by this entry. @param object The {@link COSObject}, that is represented by this entry. @param parentKey The {@link COSObjectKey} of the object stream, that is containing the object.
12 Default constructor.
13 Creates a new instance with a given COS dictionary. @param dictionary the dictionary
14 Creates a new attribute object with a given dictionary. @param dictionary the dictionary
15 Creates a user property with a given dictionary. @param dictionary the dictionary @param userAttributeObject the user attribute object
16 @param dict The dictionary storage.
17 creates a new transition for an existing dictionary @param dictionary the dictionary to be used for the new transition
18 Constructor. @param dic The COS dictionary.
19 Constructor. @param dic The COS dictionary.
20 Constructor. @param dic The COS dictionary.
21 Constructor. @param dic The COS dictionary.
22 Create a child node object. @param dic The dictionary for the child node object to refer to. @return The new child node object.
23 Constructor. This will <b>not</b> set up the /Type and /Subtype entries. @param str The stream parameter.
24 Constructor. @param str The stream parameter.
25 {@inheritDoc}
26 Constructor. @param function The function stream.
27 Creates a new XObject from the given stream and subtype. @param stream The stream to read. @param subtype the subtype to be used for this XObject
28 Constructor for an existing structure element. @param dic The existing dictionary.
29 Constructor for an existing structure element. @param dic The existing dictionary.
30 Constructor.
31 Constructor used for encryption. @param protectionPolicy The protection policy.
32 Constructor. @param a An existing FDF Annotation.
33 Constructor. @param a An existing FDF Annotation.
34 Constructor. @param a An existing FDF Annotation.
35 Constructor. @param a An existing FDF Annotation.
36 Constructor. @param a An existing FDF Annotation.
37 Constructor. @param a An existing FDF Annotation.
38 Constructor. @param a An existing FDF Annotation.
39 Constructor. @param a An existing FDF Annotation.
40 Constructor. @param a An existing FDF Annotation.
41 Constructor. @param a An existing FDF Annotation.
42 Constructor. @param a An existing FDF Annotation.
43 Constructor. @param a An existing FDF Annotation.
44 Constructor. @param a An existing FDF Annotation.
45 Constructor. @param a An existing FDF Annotation.
46 Ten bytes for the PANOSE classification number for the font. @see <a href="http://www.monotype.com/services/pan1">http://www.monotype.com/services/pan1</a> @return the PANOSE classification number
47 Creates a blend composite @param blendMode Desired blend mode @param constantAlpha Constant alpha, must be in the inclusive range [0.0...1.0] or it will be clipped. @return a blend composite. @throws IllegalArgumentException if blendMode is null.
48 Returns the transparency group attributes dictionary. @return the transparency group attributes dictionary, never null.
49 Creates a new shading pattern from the given COS dictionary. @param resourceDictionary The COSDictionary for this pattern resource.
50 Creates a new tiling pattern from the given COS dictionary. @param dictionary The COSDictionary for this pattern. @param resourceCache The resource cache, may be null
51 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
52 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
53 Constructor. @param shadingType2 the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
54 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
55 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
56 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
57 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
58 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
59 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
60 Create a graphics state from an existing dictionary. @param dictionary The existing graphics state.
61 Creates a new soft mask. @param dictionary The soft mask dictionary.
62 Construct the text block from a single value. Constructs the text block from a single value splitting into individual {@link Paragraph} when a new line character is encountered. @param textValue the text block string.
63 Constructor. @param a The action dictionary.
64 Constructor. @param a The action dictionary.
65 Constructor @param a the action dictionary
66 Constructor. @param a The action dictionary.
67 Constructor #2. @param a The action dictionary.
68 Constructor. @param a The action dictionary.
69 Constructor. @param a The action dictionary.
70 Constructor. @param a The action dictionary.
71 Constructor. @param a The action dictionary.
72 Constructor. @param a The action dictionary.
73 Constructor. @param a The action dictionary.
74 Constructor @param a the action dictionary
75 Constructor. @param a The action dictionary.
76 Constructor. @param a The action dictionary.
77 Return two related lists as a single list with key value pairs. @param key the key elements @param value the value elements @return a sorted list of KeyValue elements.
78 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node to be created
79 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
80 Constructor. @param dictionary the corresponding dictionary
81 Clones this object. @return cloned matrix as an object.
82 Convenience method to create a scaled instance. Produces the following matrix: x 0 0 0 y 0 0 0 1 @param x The xscale operator. @param y The yscale operator. @return A new matrix with just the x/y scaling
83 Convenience method to create a translating instance. Produces the following matrix: 1 0 0 0 1 0 x y 1 @param x The x translating operator. @param y The y translating operator. @return A new matrix with just the x/y translating.
84 Convenience method to create a rotated instance. @param theta The angle of rotation measured in radians @param tx The x translation. @param ty The y translation. @return A new matrix with the rotation and the x/y translating.
85 Transforms the given vector by this matrix. @param vector 2D vector @return the transformed vector.
86 Returns a new vector scaled by both x and y. @param sxy x and y scale @return a new vector scaled by both x and y
87 Return the field tree representing all form fields @return the field tree representing all form fields
88 Sets the default value to use in {@link ByteTrie#find(byte[])} when no path matches. @param defaultValue
89 Returns the object at the specified position. @param index the position @return the object @throws IndexOutOfBoundsException if the index is out of range
90 Returns the size. @return the size
91 Returns the revision number at the specified position. @param index the position @return the revision number @throws IndexOutOfBoundsException if the index is out of range
92 Adds an object with a specified revision number. @param object the object @param revisionNumber the revision number
93 Sets the revision number of a specified object. @param object the object @param revisionNumber the revision number
94 This will get an encoding by name. May return null. @param name The name of the encoding to get. @return The encoding that matches the name.
95 Creates a new soft mask. @param dictionary SMask @param resourceCache Resource cache, may be null. @return the newly created instance of PDSoftMask
96 This will get the selected index. <p> A RadioButton might have multiple same value options which are not selected jointly if they are not set in unison {@link #isRadiosInUnison()}.</p> <p> The method will return the first selected index or -1 if no option is selected.</p> @return the first selected index or -1.
97 Add a source file to the list of files to merge. @param source Full path and file name of source document. @throws FileNotFoundException If the file doesn't exist
98 This will parse the trailer from the stream and add it to the state. @return false on parsing error @throws IOException If an IO error occurs.
99 Returns the {@link COSBase}, that is registered for the given {@link COSObjectKey} in this compression pool. @param key The {@link COSObjectKey} a {@link COSBase} is registered for in this compression pool. @return The {@link COSBase}, that is registered for the given {@link COSObjectKey} in this compression pool, if such an object is contained.
100 Executes the instruction sequence. @param context the execution context
101 Constructor that will use the provided function to create a stream cache for the storage of the PDF streams. @param streamCacheCreateFunction a function to create an instance of a stream cache @param parser Parser to be used to parse the document on demand
102 This is used to handle an operation. @param operator The operation to perform. @param operands The list of arguments. @throws IOException If there is an error processing the operation.
103 @return Returns the textLineMatrix.
104 @param value The textLineMatrix to set.
105 @return Returns the textMatrix.
106 @param value The textMatrix to set.
107 Transforms a width using the CTM. @param width the width to be transformed @return the transformed width
108 Returns the non-stroking color. @return The non-stroking color.
109 Sets the non-stroking color. @param color The new non-stroking color.
110 Returns the non-stroking color space. @return The non-stroking color space.
111 Returns the stroking color. @return The stroking color.
112 Sets the stroking color. @param color The new stroking color.
113 Returns the stroking color space. @return The stroking color space.
114 Returns a new InputStream which reads the encoded PDF stream data. Experts only! @return InputStream containing raw, encoded PDF stream data. @throws IOException If the stream could not be read.
115 Returns a new OutputStream for writing encoded PDF data. Experts only! @return OutputStream for raw PDF stream data. @throws IOException If the output stream could not be created.
116 Finds a suitable image reader for an image format. @param formatName The image format to search for. @param errorCause The probably cause if something goes wrong. @return The image reader for the format. @throws MissingImageReaderException if no image reader is found.
117 Finds a suitable image raster reader for an image format. @param formatName The image format to search for. @param errorCause The probably cause if something goes wrong. @return The image reader for the format. @throws MissingImageReaderException if no image reader is found.
118 This is used to create/cache operators in the system. @param operator The operator for the system. @return The operator that matches the operator keyword.
119 {@inheritDoc}
120 Whether the for control points are on a line. @param ctl an edge's control points, the size of ctl is 4 @return true when 4 control points are on a line, otherwise false
121 This will get the lower left x coordinate. @return The lower left x.
122 This will get the lower left y coordinate. @return The lower left y.
123 This will get the upper right x coordinate. @return The upper right x .
124 This will get the upper right y coordinate. @return The upper right y.
125 This will get the size of the font. @return The size of the font.
126 Returns the r value of the tristimulus. @return the R value.
127 Returns the g value of the tristimulus. @return the g value
128 Returns the b value of the tristimulus. @return the B value
129 Returns the x value of the tristimulus. @return the X value
130 Returns the y value of the tristimulus. @return the Y value
131 Returns the z value of the tristimulus. @return the Z value
132 Get the value of the array as an integer, return the default if it does not exist. @param index The value of the array. @param defaultValue The value to return if the value is null. @return The value at the index or the defaultValue.
133 Get an entry in the array that is expected to be a COSName. @param index The index into the array. @param defaultValue The value to return if it is null. @return The value at the index or defaultValue if none is found.
134 This will return the index of the entry or -1 if it is not found. @param object The object to search for. @return The index of the object or -1.
135 Returns the list of filters.
136 Create the COSArrayList specifying the List and the backing COSArray. <p>User of this constructor need to ensure that the entries in the List and the backing COSArray are matching i.e. the COSObject of the List entry is included in the COSArray. <p>If the number of entries in the List and the COSArray differ it is assumed that the List has been filtered. In that case the COSArrayList shall only be used for reading purposes and no longer for updating. @param actualList The list of standard java objects @param cosArray The COS array object to sync to.
137 Performs exponential interpolation {@inheritDoc}
138 This will get the list of filters that are associated with this stream. @return A (possibly empty) list of all encoding filters to apply to this stream, never null.
139 This will get the list of filters that are associated with this stream. The list is empty if there are none. @return A list of all encoding filters to apply to this stream.
140 Write the given {@link COSBoolean} to the given stream. @param output The stream, that shall be written to. @param cosBoolean The content, that shall be written.
141 Writes a string to the content stream as ASCII. @param text the text to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
142 Notifies the user attribute object if the user property is changed. @param oldEntry old entry @param newEntry new entry
143 {@inheritDoc}
144 This is a convenience method that will get the dictionary object that is expected to be a COSObject. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSObject.
145 This is a special case of getItem that takes multiple keys, it will handle the situation where multiple keys could get the same value, ie if either CS or ColorSpace is used to get the colorspace. This will get an object from this dictionary. @param firstKey The first key to try. @param secondKey The second key to try. @return The object that matches the key.
146 Returns the number of recipients contained in the Recipients field of the dictionary. @return the number of recipients contained in the Recipients field.
147 returns the COSString contained in the Recipients field at position i. @param i the position in the Recipients field array. @return a COSString object containing information about the recipient number i.
148 @return the direction in which the specified transition effect shall move. It can be either a {@link COSInteger} or {@link COSName#NONE}. Default to {@link COSInteger#ZERO} @see PDTransitionDirection
149 This will get the keys of all metadata information fields for the document. @return all metadata key strings. @since Apache PDFBox 1.3.0
150 Gets the attribute names. @return the attribute names
151 Copy all Trailer Information to this file. @param trailerDict dictionary to be added as trailer info
152 Copy Constructor. This will make a shallow copy of this dictionary. @param dict The dictionary to copy.
153 Tell if the dictionary is an info dictionary. @param dictionary the dictionary to be checked @return true if the given dictionary is an info dictionary
154 Returns true if widths are present in the font descriptor. @return true if widths are present in the font descriptor
155 Returns true if the missing widths entry is present in the font descriptor. @return true if the missing widths entry is present in the font descriptor
156 This will tell if the AcroForm has XFA content. @return true if the AcroForm is an XFA form
157 Signals that a new XRef object (table or stream) starts. @param startBytePos the offset to start at @param type the type of the Xref object
158 Constructor. @param aFloat The primitive float object that this object wraps. @throws IOException If aFloat is not a float.
159 {@inheritDoc}
160 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
161 Uses the managed {@link #updateInfo} as the base object of a new {@link COSIncrement}. @return A {@link COSIncrement} based on the managed {@link #updateInfo}. @see COSUpdateInfo @see COSIncrement
162 Creates a new instance. @param targetDoc the PDF document to modify
163 Default constructor.
164 Convenience method, so that we get false for types that can't be updated. @param base @return
165 Appends a marked-content sequence kid. @param mcid the marked-content id (MCID). @throws IllegalArgumentException if the mcid is negative.
166 @return the value for this direction
167 Write the given {@link COSInteger} to the given stream. @param output The stream, that shall be written to. @param cosInteger The content, that shall be written.
168 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
169 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
170 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
171 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
172 This will get an object from the array. This will dereference the object. If the object is COSNull then null will be returned. @param index The index into the array to get the object. @return The object at the requested index.
173 This will return the index of the entry or -1 if it is not found. This method will also find references to indirect objects. @param object The object to search for. @return The index of the object or -1.
174 Collects all indirect objects numbers within this COSArray and all included dictionaries. It is used to avoid mixed up object numbers when importing an existing page to another pdf. Expert use only. You might run into an endless recursion if choosing a wrong starting point. @param indirectObjects a collection of already found indirect objects.
175 @see java.util.Map#containsValue(java.lang.Object) @param value The value to find in the map. @return true if the map contains this value.
176 Search in the map for the value that matches the parameter and return the first key that maps to that value. @param value The value to search for in the map. @return The key for the value in the map or null if it does not exist.
177 This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param key The key to the object that we are getting. @return The object that matches the key.
178 Get the dictionary containing the linearization information if the pdf is linearized. @return the dictionary containing the linearization information
179 This will close all storage and delete the tmp files. @throws IOException If there is an error close resources.
180 visitor pattern double dispatch method. @param visitor The object to notify when visiting this object. @throws IOException If an error occurs while visiting this object.
181 Check whether an element (of an array or a dictionary) points to its parent. @param parent COSArray or COSDictionary @param value an element
182 Returns length value referred to or defined in given object.
183 Prepares a normal reference for the given {@link COSObject} in a PDF's crossreference stream ({@link PDFXRefStream}). @param byteOffset The byte offset of the {@link COSObject} in the PDF file. @param key The {@link COSObjectKey}, that is represented by this entry. @param object The {@link COSObject}, that is represented by this entry.
184 Returns the {@link COSObjectKey} for a given registered {@link COSBase}. Returns null if such an object is not registered. @param object The {@link COSBase} a {@link COSObjectKey} shall be determined for. @return key The {@link COSObjectKey}, that matches the registered {@link COSBase}, or null if such an object is not registered.
185 Returns true, if the given {@link COSBase} is a registered object of this pool. @param object The {@link COSBase} that shall be checked. @return True, if such a {@link COSBase} is registered in this pool.
186 Prepares the given {@link COSObject} to be written to this object stream, using the given {@link COSObjectKey} as it's ID for indirect references. @param key The {@link COSObjectKey}, that shall be used for indirect references to the {@link COSObject}. @param object The {@link COSObject}, that shall be written to this object stream.
187 Constructor. @param num The object number. @param gen The object generation number.
188 Compares this object with the specified object for order. Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object. @param xReferenceEntry the object to be compared. @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
189 This will get the X scaling factor. This is dependent on the current transformation matrix (set by the "cm" operator), the text matrix (set by the "Tm" operator) and the font size (set by the "Tf" operator). @return The X scaling factor.
190 This will get the Y scaling factor. This is dependent on the current transformation matrix (set by the "cm" operator), the text matrix (set by the "Tm" operator) and the font size (set by the "Tf" operator). @return The Y scaling factor.
191 COSWriter constructor. @param outputStream The output stream to write the PDF. @param compressParameters The configuration for the document's compression.
192 COSWriter constructor for incremental updates. There must be a path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set, starting from the document catalog. For signatures this is taken care by PDFBox itself. @param outputStream output stream where the new PDF data will be written. @param inputData random access read containing source PDF data @throws IOException if something went wrong
193 Sets the {@link #updated} state of the managed {@link #updateInfo} to the given state.<br> This shall only then have an effect, if {@link #isAcceptingUpdates()} returns {@code true}. @param updated The state to set for {@link #updated}. @see #update(boolean) @see #updated @see #isAcceptingUpdates()
194 Returns the content of this string as a PDF <i>text string</i>. @return the PDF string representation of the COSString
195 Creates a new <i>text string</i> from a Java String. @param text The string value of the object. @param forceHex forces the hexadecimal presentation of the string if set to true
196 Returns true if this font is one of the "Standard 14" fonts and receives special handling. @return true if this font is one of the "Standard 14" fonts
197 This will read a chunk of data. @param data The buffer to write data to. @param offset The offset into the data stream. @param len The number of byte to attempt to read. @return The number of bytes actually read. @throws IOException If there is an error reading data from the underlying stream.
198 This will close the stream. @throws IOException If there is an error closing the wrapped stream.
199 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
200 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
201 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
202 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
203 This will read the next byte from the stream. @return The next byte read from the stream. @throws IOException If there is an error reading from the wrapped stream.
204 This will read a chunk of data. @param data The buffer to write data to. @param offset The offset into the data stream. @param length The number of byte to attempt to read. @return The number of bytes actually read. @throws IOException If there is an error reading data from the underlying stream.
205 Read the image stream of the signature and set height and width. @param stream stream of your visible signature image @throws IOException If we can't read, flush, or close stream of image
206 {@inheritDoc}
207 We look which row encoding is the "best" one, ie. has the lowest sum. We don't implement anything fancier to choose the right row encoding. This is just the recommend algorithm in the spec. The get the perfect encoding you would need to do a brute force check how all the different encoded rows compress in the zip stream together. You have would have to check 5*image-height permutations... @return the "best" row encoding of the row encodings
208 Reset all data so that it can be used to rebuild the trailer.
209 Close all input documents which were used for the overlay and opened by this class. @throws IOException if something went wrong
210 Creates a Form XObject for reading. @param stream The XObject stream
211 Constructor. @param pdContentstream The content stream to parse. @throws IOException If there is an error initializing the stream.
212 Constructor. @param bytes the bytes to parse.
213 Search for/parse the object with the given object number. The stream is closed after parsing the object with the given number. @param objectNumber the number of the object to b e parsed @return the parsed object or null if the object with the given number can't be found @throws IOException if there is an error while parsing the stream
214 Read all object numbers from the compressed object stream. The stream is closed after reading the object numbers. @return a map off all object numbers and the corresponding offset within the object stream. @throws IOException if there is an error while parsing the stream
215 Constructor. @param codeToName the given code to name mapping
216 Creates an encoding from the given FontBox encoding. @param encoding FontBox encoding @return the encoding created from the given FontBox encoding
217 Skip the upcoming CRLF or LF which are supposed to follow a stream. Trailing spaces are removed as well. @throws IOException if something went wrong
218 Skip one line break, such as CR, LF or CRLF. @return true if a line break was found and removed. @throws IOException if something went wrong
219 This will read bytes until the first end of line marker occurs. NOTE: The EOL marker may consists of 1 (CR or LF) or 2 (CR and CL) bytes which is an important detail if one wants to unread the line. @return The characters between the current position and the end of the line. @throws IOException If there is an error reading from the stream.
220 This will skip all spaces and comments that are present. @throws IOException If there is an error reading from the stream.
221 The number of color components of this shading. @return number of color components of this shading @throws IOException if the data could not be read
222 The number of color components of this shading. @return number of color components of this shading @throws IOException if the data could not be read
223 Search for the offset of the given xref table/stream among those found by a brute force search. @param xrefOffset the given offset to be searched for @return the offset of the xref entry @throws IOException if something went wrong
224 Parse the header of a pdf. @return true if a PDF header was found @throws IOException if something went wrong
225 Parse the header of a fdf. @return true if a FDF header was found @throws IOException if something went wrong
226 Parse all compressed objects. The stream is closed after parsing. @return a map containing all parsed objects using the object number as key @throws IOException if there is an error while parsing the stream
227 Calculate the key to be used for RC4 and AES-128. @param objectNumber The data object number. @param genNumber The data generation number. @return the calculated key.
228 Create a new appearance stream. @param appearance The appearance stream to add to. @param outputStream The appearances output stream to write to.
229 Create a new appearance stream. Note that this is not actually a "page" content stream. @param doc The document the appearance is part of. @param appearance The appearance stream to add to. @param outputStream The appearances output stream to write to.
230 Transforms a point using the CTM. @param x the x-coordinate of the point to be transformed @param y the y-coordinate of the point to be transformed @return the transformed point
231 Not called in TexturePaint subclasses, which is why we wrap TexturePaint.
232 Concatenates (premultiplies) the given matrix to this matrix. @param matrix The matrix to concatenate.
233 Translates this matrix by the given amount. @param tx x-translation @param ty y-translation
234 Scales this matrix by the given factors. @param sx x-scale @param sy y-scale
235 This method multiplies this Matrix with the specified other Matrix, storing the product in a new instance. It is allowed to have (other == this). @param other the second operand Matrix in the multiplication; required @return the product of the two matrices.
236 Retrieve the encoded glyph IDs for the characters in the specified text, after applying any relevant GSUB rules. The glyph IDs used are also added to the specified glyph ID set. @param gsubWorker The GSUB worker which defines the GSUB transformations to apply. @param glyphIds The set of glyph IDs which is to be populated with the glyph IDs found in the text. @param font The font whose cmap table will be used to map characters to glyph IDs. @param text The text which is being converted from characters to glyph IDs. @return The encoded glyph IDs for the characters in the specified text, after applying any relevant GSUB rules. @throws IOException If there is an error during encoding. @throws IllegalStateException If we cannot find a glyph ID for any characters in the specified text.
237 Create the resulting document. Maybe overwritten if the parser uses another class as document. @return the resulting document @throws IOException if the method is called before parsing the document
238 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source input representing the pdf
239 Returns a new security handler for the given protection policy, or null none is available. @param policy the protection policy for which to create a security handler @return a new SecurityHandler instance, or null if none is available
240 Returns a new security handler for the given Filter name, or null none is available. @param name the Filter name from the PDF encryption dictionary @return a new SecurityHandler instance, or null if none is available
241 Set the stroking color. <p> The command is only emitted if the color is not null and the number of components is &gt; 0. @param color The colorspace to write. @return true if the stroking color was set successfully @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setStrokingColor(PDColor)
242 Set the non stroking color. <p> The command is only emitted if the color is not null and the number of components is &gt; 0. @param color The colorspace to write. @return true if the non stroking color was set successfully @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setNonStrokingColor(PDColor)
243 Constructor.
244 This will tell if the access permission corresponds to owner access permission (no restriction). @return true if the access permission does not restrict the use of the document
245 Indicates if any revision 3 access permission is set or not. @return true if any revision 3 access permission is set
246 This will encrypt and write the data. @param data The data to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
247 This will encrypt and write the data. @param data The data to encrypt. @param offset The offset into the array to start reading data from. @param len The number of bytes to attempt to read. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
248 Inserts the diacritic TextPosition to the str of this TextPosition and updates the widths array to include the extra character width. @param i current character @param diacritic The diacritic TextPosition
249 Write a Java string to the output stream. The default implementation will ignore the <code>textPositions</code> and just calls {@link #writeString(String)}. @param text The text to write to the stream. @param textPositions The TextPositions belonging to the text. @throws IOException If there is an error when writing the text.
250 Constructor of class Line. @param p0 one end of a line @param p1 the other end of the line @param c0 color of point p0 @param c1 color of point p1
251 Creates a new soft mask paint. @param paint underlying paint. @param mask soft mask @param bboxDevice bbox of the soft mask in the underlying Graphics2D device space @param backdropColor the color to be used outside the transparency group’s bounding box; if null, black will be used. @param transferFunction the transfer function, may be null.
252 Computes backdrop removal. The backdrop removal equation is given in section 11.4.4 in the PDF 32000-1:2008 standard. It returns the final color <code>C</code> for each pixel in the group:<br> <code>C = Cn + (Cn - C0) * (alpha0 / alphagn - alpha0)</code><br> where<br> <code>Cn</code> is the group color including backdrop (read from <code>groupImage</code>),<br> <code>C0</code> is the backdrop color,<br> <code>alpha0</code> is the backdrop alpha,<br> <code>alphagn</code> is the group alpha excluding backdrop (read the alpha channel from <code>groupAlphaImage</code>)<br> <p> The alpha of the result is equal to <code>alphagn</code>, i.e., the alpha channel of <code>groupAlphaImage</code>. <p> The <code>backdrop</code> image may be much larger than <code>groupImage</code> if, for example, the current page is used as the backdrop. Only a specific rectangular region of <code>backdrop</code> is used in the backdrop removal: upper-left corner is at <code>(offsetX, offsetY)</code>; width and height are equal to those of <code>groupImage</code>. @param backdrop group backdrop @param offsetX backdrop left X coordinate @param offsetY backdrop upper Y coordinate
253 Returns the metrics for font specified by fontName. Loads the font metrics if not already loaded. @param fontName name of font; either a base name or alias @return the font metrics or null if the name is not one of the known names @throws IllegalArgumentException if no metrics exist for that font.
254 Creates a new GlyphList from a glyph list file. @param numberOfEntries number of expected values used to preallocate the correct amount of memory @param input glyph list in Adobe format @throws IOException if the glyph list could not be read
255 Creates a new GlyphList from multiple glyph list files. @param glyphList an existing glyph list to be copied @param input glyph list in Adobe format @throws IOException if the glyph list could not be read
256 Returns the GID for the given character code. @param code character code @return GID (glyph index) @throws IOException if the data could not be read
257 Maps a PostScript glyph name to the name in the underlying font, for example when using a TTF font we might map "W" to "uni0057".
258 Maps a PostScript glyph name to the name in the underlying font, for example when using a TTF font we might map "W" to "uni0057".
259 Lazy load the ICC profile, because it's slow. @throws IOException if the ICC profile could not be initialized
260 @param image The image to apply the mask to as alpha channel. @param mask A mask image in 8 bit Gray. Even for a stencil mask image due to {@link #getOpaqueImage()} and {@link SampledImageReader}'s {@code from1Bit()} special handling of DeviceGray. @param interpolateMask interpolation flag of the mask image. @param isSoft {@code true} if a soft mask. If not stencil mask, then alpha will be inverted by this method. @param matte an optional RGB matte if a soft mask. @return an ARGB image (can be the altered original image)
261 Check if the chunk is sane, i.e. CRC matches and offsets and lengths in the byte array
262 Constructor of CubicBezierCurve @param ctrlPnts 4 control points [p0, p1, p2, p3] @param l dividing level, if l = 0, one cubic Bezier curve is divided into 2^0 = 1 segments, if l = n, one cubic Bezier curve is divided into 2^n segments
263 Whether a point is contained in this ShadedTriangle. @param p the target point @return false if p is outside of this triangle, otherwise true
264 Calculate the color of a point. @param p the target point @return an array denotes the point's color
265 Modify the current clipping path by intersecting it with the given path. @param path path to intersect with the clipping path
266 Modify the current clipping path by intersecting it with the given path. @param area area to intersect with the clipping path
267 Transfer clip to the destination device. Override this if you want to avoid to do slow intersecting operations but want the destination device to do this (e.g. SVG). You can get the individual clippings via {@link PDGraphicsState#getCurrentClippingPaths()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5258">PDFBOX-5258</a> for sample code. @param graphics graphics device
268 Draws the pattern stream to the requested context. @param g The graphics context to draw onto. @param pattern The tiling pattern to be used. @param colorSpace color space for this tiling. @param color color for this tiling. @param patternMatrix the pattern matrix @throws IOException If there is an IO error while drawing the page.
269 This will get the text direction adjusted x position of the character. This is adjusted based on text direction so that the first character in that direction is in the upper left at 0,0. This method ignores the page rotation but takes the text rotation (see {@link #getDir() getDir()}) and adjusts the coordinates to awt. This is useful when doing text extraction, to compare the glyph positions when imagining these to be horizontal. See also <a href="https://stackoverflow.com/questions/57067372/">this answer by Michael Klink</a> for further details and <a href="https://issues.apache.org/jira/browse/PDFBOX-4597">PDFBOX-4597</a> for a sample file. @return The x coordinate of the text.
270 Constructor. @param pageRotation rotation of the page that the text is located in @param pageWidth width of the page that the text is located in @param pageHeight height of the page that the text is located in @param textMatrix text rendering matrix for start of text (in display units) @param endX x coordinate of the end position @param endY y coordinate of the end position @param maxHeight Maximum height of text (in display units) @param individualWidth The width of the given character/string. (in text units) @param spaceWidth The width of the space character. (in display units) @param unicode The string of Unicode characters to be displayed. @param charCodes An array of the internal PDF character codes for the glyphs in this text. @param font The current font for this text position. @param fontSize The new font size. @param fontSizeInPt The font size in pt units (see {@link #getFontSizeInPt()} for details).
271 This will get the y position of the text, adjusted so that 0,0 is upper left and it is adjusted based on the text direction. This method ignores the page rotation but takes the text rotation and adjusts the coordinates to awt. This is useful when doing text extraction, to compare the glyph positions when imagining these to be horizontal. See also <a href="https://stackoverflow.com/questions/57067372/">this answer by Michael Klink</a> for further details and <a href="https://issues.apache.org/jira/browse/PDFBOX-4597">PDFBOX-4597</a> for a sample file. @return The adjusted y coordinate of the character.
272 This will get the width of the string when page rotation adjusted coordinates are used. @return The width of the text in display units.
273 This will get the width of the string when text direction adjusted coordinates are used. @return The width of the text in display units.
274 Start a new article, which is typically defined as a column on a single page (also referred to as a bead). This assumes that the primary direction of text is left to right. Default implementation is to do nothing. Subclasses may provide additional information. @throws IOException If there is any error writing to the stream.
275 Write something (if defined) at the start of a paragraph. @throws IOException if something went wrong
276 returns the list item Pattern object that matches the text at the specified PositionWrapper or null if the text does not match such a pattern. The list of Patterns tested against is given by the {@link #getListItemPatterns()} method. To add to the list, simply override that method (if sub-classing) or explicitly supply your own list using {@link #setListItemPatterns(List)}. @param pw position @return the matching pattern
277 Normalize certain Unicode characters. For example, convert the single "fi" ligature to "f" and "i". Also normalises Arabic and Hebrew presentation forms. @param word Word to normalize @return Normalized word
278 Converts a Calendar to a string formatted as: D:yyyyMMddHHmmss#hh'mm' where # is Z, +, or -. @param cal The date to convert to a string. May be null. The DST_OFFSET is included when computing the output time zone. @return The date as a String to be used in a PDF document, or null if the cal value is null
279 Converts the date to ISO 8601 string format: yyyy-mm-ddThh:MM:ss#hh:mm (where '#" is '+' or '-'). @param cal The date to convert. Must not be null. The DST_OFFSET is included in the output value. @return The date represented as an ISO 8601 string.
280 This will take this string and create a hex representation of the bytes that make the string. @return A hex string representing the bytes in this string.
281 Write externally created signature of PDF data obtained via {@link #getDataToSign()} method. @param cmsSignature CMS signature byte array @throws IllegalStateException if PDF is not prepared for external signing @throws IOException if source data stream is closed
282 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
283 Writes the given byte array as hex value to the given output stream. @param bytes the byte array to be written @param output the output stream to be written to @throws IOException exception if anything went wrong
284 Sorts the array using iterative (bottom-up) merge sort. @param <T> the class of the objects in the list @param arr the array of objects to be sorted. @param cmp the comparator to determine the order of the list.
285 This will parse an XML stream and create a DOM document. @param is The stream to get the XML from. @return The DOM document. @throws IOException It there is an error creating the dom.
286 Examines the a file's first bytes and estimates the file's type. <p> Requires a {@link BufferedInputStream} in order to mark and reset the stream to the position at which it was provided to this method once completed. <p> Requires the stream to contain at least eight bytes. @param inputStream a buffered input stream of the file to examine. @return the file type. @throws IOException if an IO error occurred or the input stream ended unexpectedly.
287 Constructor.
288 This will get a COSName object with that name. @param aName The name of the object. @return A COSName with the specified name.
289 Creates a new PDF string from a byte array. This method can be used to read a string from an existing PDF file, or to create a new byte string. @param bytes The raw bytes of the PDF text string or byte string.
290 Constructor.
291 Use the given list to initialize the COSArray. @param cosObjectables the initial list of COSObjectables
292 Creates a new stream with an empty dictionary. Data is stored in the given scratch file. @param streamCache Stream cache for writing stream data.
293 {@inheritDoc}
294 Return a default DecodeResult. @return a default instance of DecodeResult
295 Default Constructor.
296 Constructor for embedding.
297 This will take a map&lt;java.lang.String,org.apache.pdfbox.pdmodel.COSObjectable&gt; and convert it into a COSDictionary. @param someMap A map containing COSObjectables @return A proper COSDictionary
298 Default constructor
299 Constructor.
300 Constructor. @param valueClass The PD Model type of object that is the value.
301 Creates a new empty page label range object.
302 Default Constructor.
303 Constructor for subclasses.
304 Default Constructor.
305 creates a new empty crypt filter dictionary.
306 creates a new empty encryption dictionary.
307 Default constructor.
308 Default constructor.
309 Default constructor.
310 Default constructor.
311 Default constructor.
312 Default constructor.
313 Default constructor.
314 Default constructor.
315 Default constructor.
316 Creates a new DeviceN colour space attributes dictionary.
317 Creates a new DeviceN Process Dictionary.
318 Default constructor.
319 Default constructor.
320 Default constructor.
321 Default constructor.
322 Default constructor.
323 Default constructor.
324 Default constructor, creates target directory.
325 Constructor.
326 Default constructor.
327 Constructor.
328 Constructor.
329 Default constructor.
330 Default constructor.
331 Default constructor.
332 Default constructor.
333 Constructor. @param acroForm The form that this field is part of.
334 Constructor.
335 Constructor.
336 Constructor. @param object The object that this encapsulates. @param objectKey The COSObjectKey of the encapsulated object
337 Creates a default attribute object with a given dictionary. @param dictionary the dictionary
338 Constructor @param dictionary the dictionary
339 Creates a new standard attribute object with a given dictionary. @param dictionary the dictionary
340 Constructor for an existing outline item. @param dic The storage dictionary.
341 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object. @throws IllegalStateException if the value of the metadata entry is different from a stream or null
342 Returns the metadata associated with this XObject, or null if there is none. @return the metadata associated with this object.
343 A reference to an object stream, of which the current object stream is considered an extension. @return The object that this stream is an extension.
344 Constructor. @param function The function.
345 Constructor. @param functionStream The function .
346 Creates a PostScript XObject. @param stream The XObject stream
347 Creates a Form XObject for reading. @param stream The XObject stream
348 Creates a Form XObject for reading. @param stream The XObject stream @param cache the cache to be used for the resources
349 Constructor.
350 Constructor.
351 Constructor used for encryption. @param publicKeyProtectionPolicy The protection policy.
352 Constructor used for encryption. @param standardProtectionPolicy The protection policy.
353 Constructor. @param a An existing FDF Annotation.
354 Constructor. @param a An existing FDF Annotation.
355 Constructor. @param a An existing FDF Annotation.
356 Constructor. @param a An existing FDF Annotation.
357 Creates a new tiling pattern from the given COS dictionary. @param dictionary The COSDictionary for this pattern.
358 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
359 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
360 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
361 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
362 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node to be created
363 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
364 Generate a unique name for the signature. @return the signature's unique name
365 {@inheritDoc}
366 Creates a new soft mask. @param dictionary SMask @return the newly created instance of PDSoftMask
367 Constructor. Uses main memory to buffer PDF streams. @param parser Parser to be used to parse the document on demand
368 Constructor that will use the provided function to create a stream cache for the storage of the PDF streams. @param streamCacheCreateFunction a function to create an instance of a stream cache
369 This is used to handle an operation. @param operation The operation to perform. @param arguments The list of arguments. @throws IOException If there is an error processing the operation.
370 Creates a marked-content sequence. @param tag the tag @param properties the properties @return the marked-content sequence
371 This will get the width of this rectangle as calculated by upperRightX - lowerLeftX. @return The width of this rectangle.
372 Method to determine if the x/y point is inside this rectangle. @param x The x-coordinate to test. @param y The y-coordinate to test. @return True if the point is inside this rectangle.
373 This will get the height of this rectangle as calculated by upperRightY - lowerLeftY. @return The height of this rectangle.
374 Returns a path which represents this rectangle having been transformed by the given matrix. Note that the resulting path need not be rectangular. @param matrix the matrix to be used for the transformation @return the transformed rectangle
375 Returns a general path equivalent to this rectangle. This method avoids the problems caused by Rectangle2D not working well with -ve rectangles. @return a general path equivalent to this rectangle
376 This will return a string representation of this rectangle. @return This object as a string.
377 Get the value of the array as an integer. @param index The index into the list. @return The value at that index or -1 if does not exist.
378 Get the value of the array as a string. @param index The index into the array. @return The name converted to a string or null if it does not exist.
379 Returns a new OutputStream for writing stream data, using and the given filters. @param filters COSArray or COSName of filters to be used. @return OutputStream for un-encoded stream data. @throws IOException If the output stream could not be created.
380 Creates an Image XObject with the given stream as its contents and current color spaces. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param stream the XObject stream to read @param resources the current resources
381 This will get the suffix for this image type, e.g. jpg/png. @return The image suffix or null if not available.
382 Writes a real number to the content stream. @param real the real number to be added to the content stream @throws IOException If the underlying stream has a problem being written to. @throws IllegalArgumentException if the parameter is not a finite number
383 Writes an integer number to the content stream. @param integer the integer to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
384 Writes a string to the content stream as ASCII. @param text the text to be added to the content stream followed by a newline @throws IOException If the underlying stream has a problem being written to.
385 {@inheritDoc}
386 This factory method will get the appropriate number object. @param number The string representation of the number. @return A number object, either float or int. @throws IOException If the string is not a number.
387 Write the given {@link COSFloat} to the given stream. @param output The stream, that shall be written to. @param cosFloat The content, that shall be written.
388 Uses this {@link COSUpdateInfo} as the base object of a new {@link COSIncrement}. @return A {@link COSIncrement} based on this {@link COSUpdateInfo}. @see COSIncrement
389 This will take an COSArray of numbers and convert it to a float[]. @return This COSArray as an array of float numbers.
390 This will return a list of float values if the COSArray consists of COSNumbers only. @return the list of float values of the COSArray of COSNumbers
391 This will return a list of int values if the COSArray consists of COSNumbers only. @return the list of int values of the COSArray of COSNumbers
392 This will get the minimum value of the range. @return The min value.
393 This will get the maximum value of the range. @return The max value.
394 Gets the colour by edge index. @param index edge index @return the colour
395 Determines the blend mode from the BM entry in the COS ExtGState. @param cosBlendMode name or array @return blending mode
396 Returns the list of colorants. @return the list of colorants
397 This will get the alternate color space for this separation. @return The alternate color space. @throws IOException If there is an error getting the alternate color space.
398 Returns the colorant name. @return the name of the colorant
399 This will create a new destination depending on the type of COSBase that is passed in. @param base The base level object. @return A new destination. @throws IOException If the base cannot be converted to a Destination.
400 This will get the page for this destination. A page destination can either reference a page (for a local destination) or a page number (when doing a remote destination to another PDF). If this object is referencing by page number then this method will return null and {@link #getPageNumber()} should be used. @return The page for this destination.
401 This will get the page number for this destination. A page destination can either reference a page (for a local destination) or a page number (when doing a remote destination to another PDF). If this object is referencing by page number then this method will return that number, otherwise -1 will be returned. @return The zero-based page number for this destination.
402 Get the zoom value. Return values of 0 or -1 imply that the current zoom will be used. @return The zoom value for the page.
403 Creates a matrix from a 6-element (a b c d e f) COS array. @param array source array, elements must be or extend COSNumber
404 Collects all indirect objects numbers within this dictionary and all included dictionaries. It is used to avoid mixed up object numbers when importing an existing page to another pdf. Expert use only. You might run into an endless recursion if choosing a wrong starting point. @param indirectObjects a collection of already found indirect objects.
405 This is a special case of getDictionaryObject that takes multiple keys, it will handle the situation where multiple keys could get the same value, ie if either CS or ColorSpace is used to get the colorspace. This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param firstKey The first key to try. @param secondKey The second key to try. @return The object that matches the key.
406 This is a convenience method that will get the dictionary object that is expected to be a name. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COS name.
407 This is a convenience method that will get the dictionary object that is expected to be a COSDictionary. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSDictionary.
408 This is a convenience method that will get the dictionary object that is expected to be a COSStream. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSStream.
409 This is a convenience method that will get the dictionary object that is expected to be a COSArray. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSArray.
410 This is a convenience method that will get the dictionary object that is expected to be a name. Default is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The COS name.
411 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
412 This is a convenience method that will get the dictionary object that is expected to be an float. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The float value.
413 Returns the content streams which make up this page. @return content stream iterator
414 Returns true if this page has one or more content streams. @return true if the page has a non empty content stream, otherwise false
415 Returns the class names together with their revision numbers (C). @return the class names as a list, never null.
416 Returns the K entry. This can be a dictionary representing a structure element, or an array of them. To get it as a list of PDStructureElement objects, use {@link #getKids()} instead. @return the K entry.
417 Returns the property value. @return the property value
418 Will get the EncryptMetaData dictionary info. @return true if EncryptMetaData is explicitly set (the default is true)
419 This will get the OE entry in the standard encryption dictionary. @return A 32 byte array or null if there is no owner encryption key. @throws IOException If there is an error accessing the data.
420 This will get the UE entry in the standard encryption dictionary. @return A 32 byte array or null if there is no user encryption key. @throws IOException If there is an error accessing the data.
421 Get the Perms entry in the encryption dictionary. @return A 16 byte array or null if there is no Perms entry. @throws IOException If there is an error accessing the data.
422 This will get the page number or null if it does not exist. @return The page number.
423 Returns the COS value of this field. @return The COS value of the field, maybe <code>null</code>. @throws IOException If there is an error getting the value.
424 This will get the 'Ff' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
425 This will get the 'SetFf' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
426 This will get the 'ClrFf' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
427 This will get the 'F' entry of the FDF field dictionary. If it is not present then this method will return null. @return The widget field flags.
428 This will get the 'SetF' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
429 This will get the 'ClrF' entry of the FDF field dictionary. If it is not present then this method will return null. @return The widget field flags.
430 This will get the default width. The default value for the default width is 1000. @return The default width for the glyphs in this font.
431 Returns the process color space @return the process color space @throws IOException if the color space cannot be read
432 Returns the group color space or null if it isn't defined. @param resources useful for its cache. Can be null. @return the group color space. @throws IOException if the colorspace could not be created
433 Creates a new instance based on a given {@link COSDictionary}. @param dict the dictionary
434 Creates a new instance based on a given {@link COSDictionary}. @param dict the dictionary
435 This will get the overprint control mode. @return The overprint control mode or null if one has not been set.
436 Returns the soft mask stored in the COS dictionary @return the soft mask or null if there isn't any.
437 This will get a float item from the dictionary. @param key The key to the item. @return The value for that item.
438 This will get the transfer function of the /TR dictionary. @return The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function.
439 This will get the transfer function of the /TR2 dictionary. @return The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function, and the name Default denotes the transfer function that was in effect at the start of the page.
440 Returns the backdrop color. @return the backdrop color
441 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
442 The annotation or annotations to be hidden or shown @return The T entry of the specific thread action dictionary.
443 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
444 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
445 If the value in the /P entry is a string, this will get a named destination in the current document that provides the page number of the file attachment annotation. @return a named destination or null if the /P entry value is missing or not a string.
446 Returns the /Contents string as a byte array, i.e. the embedded signature between the byterange gap. @return a byte array containing the signature, or an empty array if there isn't any.
447 Get the XFA resource, the XFA resource is only used for PDF 1.5+ forms. @return The xfa resource or null if it does not exist.
448 Returns the given attribute, inheriting from parent nodes if necessary. @param key the key to look up @return COS value for the given key
449 Returns the COSBase value of the "V" entry. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @return the COSBase value of the "V" entry
450 {@inheritDoc} <p><b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance.
451 Returns the default value of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @return the new default value
452 Closes the visual signature COSDocument, if any. Do not call this before you're saved your signed PDF document, or saving will fail because COSStream objects held both by the COSDocument and by the signed document would no longer be available. @throws IOException if the document could not be closed
453 This will write a COS object for a predefined key. @param key The key of the object to write. @param obj The object to write. @throws IOException if the output cannot be written
454 Returns the {@link COSObjectKey}, that is registered for the given {@link COSBase} in this compression pool. @param object The {@link COSBase} a {@link COSObjectKey} is registered for in this compression pool. @return The {@link COSObjectKey}, that is registered for the given {@link COSBase} in this compression pool, if such an object is contained.
455 Returns true, if the given {@link COSBase} is a registered object of this compression pool. @param object The object, that shall be checked. @return True, if the given {@link COSBase} is a registered object of this compression pool.
456 Creates {@link COSWriterObjectStream}s for all currently registered objects of this pool, that have been marked as fit for being compressed in this manner. Such object streams may be added to a PDF document and shall be declared in a document's {@link PDFXRefStream} accordingly. The objects contained in such a stream must not be added to the document separately. @return The created {@link COSWriterObjectStream}s for all currently registered compressible objects.
457 Returns the object key for the given combination of object and generation number. The object key from the cross reference table/stream will be reused if available. Otherwise a newly created object will be returned. @param num the given object number @param gen the given generation number @return the COS object key
458 Brute force search for every object in the pdf. @throws IOException if something went wrong
459 Search for all offsets of object streams within the given pdf @return a map of all offsets for object streams @throws IOException if something went wrong
460 Parses through the unfiltered stream and populates the xrefTable HashMap. @param resolver resolver to read the xref/trailer information @throws IOException If there is an error while parsing the stream.
461 Check if the given object can be found at the given offset. Returns the provided object key if everything is ok. If the generation number differs it will be fixed and a new object key is returned. @param objectKey the key of object we are looking for @param offset the offset where to look @param xrefOffset a map with with all known xref entries @return returns the found/fixed object key @throws IOException if something went wrong
462 This will parse the xref table from the stream and add it to the state The XrefTable contents are ignored. @param startByteOffset the offset to start at @return false on parsing error @throws IOException If an IO error occurs.
463 This will get the object key for the object. @param obj The object to get the key for. @return The object key for the object.
464 Update the key and object maps. @param key The key, that shall be added. @param object The object, that shall be added. @return The actual key, the object has been added for.
465 COSWriter constructor. @param outputStream The output stream to write the PDF.
466 Constructor for incremental updates with a list of objects to write. This allows to include objects even if there is no path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set so the incremental update gets smaller. Only dictionaries are supported; if you need to update other objects classes, then add their parent dictionary. @param outputStream output stream where the new PDF data will be written. @param inputData random access read containing source PDF data. @param objectsToWrite objects that <b>must</b> be part of the incremental saving. @throws IOException if something went wrong
467 Set the update state of the dictionary for the COSWriter. This indicates whether an object is to be written when there is an incremental save. @param flag the update state.
468 Calls {@link #update(boolean)} with {@code true} as the new update state.<br> This shall only then have an effect, if {@link #isAcceptingUpdates()} returns {@code true}. @see #update(boolean) @see #updated @see #isAcceptingUpdates()
469 Get an entry in the array that is expected to be a COSName. @param index The index into the array. @param defaultValue The value to return if it is null. @return The value at the index or defaultValue if none is found.
470 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
471 This is a convenience method that will get the dictionary object that is expected to be a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
472 This will take a COS dictionary and convert it into COSDictionaryMap. All cos objects will be converted to their primitive form. @param map The COS mappings. @return A standard java map. @throws IOException If there is an error during the conversion.
473 This will get the file name. @return The file name.
474 This will get the string of one of the available options. A required element. @return An available option.
475 This will get the string of default appearance string. A required element. @return A default appearance string.
476 This will get the name of the destination. @return The name of the destination.
477 Return either one of a list which can have two-element arrays entries. <p> Some entries in a dictionary can either be an array of elements or an array of two-element arrays. This method will either return the elements in the array or in case of two-element arrays, the element designated by the pair index </p> <p> An {@link IllegalArgumentException} will be thrown if the items contain two-element arrays and the index is not 0 or 1. </p> @param items the array of elements or two-element arrays @param pairIdx the index into the two-element array @return a List of single elements
478 This will get the (optional) export values. <p>The export values are defined in the field dictionaries /Opt key.</p> <p>The option values are used to define the export values for the field to <ul> <li>hold values in non-Latin writing systems as name objects, which represent the field value, are limited to PDFDocEncoding </li> <li>allow radio buttons having the same export value to be handled independently </li> </ul> @return List containing all possible export values. If there is no /Opt entry an empty list will be returned. @see #getOnValues()
479 Returns the selected values, or an empty List, for the given key.
480 Get the default appearance. This is an inheritable attribute. The default appearance contains a set of default graphics and text operators to define the field’s text size and color. @return the DA element of the dictionary object
481 Creates a new <i>text string</i> from a Java String. @param text The string value of the object.
482 Constructor usable for signing existing signature fields. @param imageStream image as a stream @throws IOException if the new instance of PDVisibleSignDesigner could not be created
483 Set the image for the signature. @param path Path of the image file. @return Visible Signature Configuration Object @throws IOException if the image for the signature could not be set
484 Creates a Transparency Group for reading. @param stream The XObject stream
485 This will read the next string from the stream. @return The string that was read from the stream, never null. @throws IOException If there is an error reading from the stream.
486 Reads given pattern from {@link #source}. Skipping whitespace at start and end if wanted. @param expectedString pattern to be skipped @param skipSpaces if set to true spaces before and after the string will be skipped @throws IOException if pattern could not be read
487 This will read the next string from the stream up to a certain length. @param length The length to stop reading at. @return The string that was read from the stream of length 0 to length. @throws IOException If there is an error reading from the stream.
488 This will read an integer from the stream. @return The integer that was read from the stream. @throws IOException If there is an error reading from the stream.
489 This will read an long from the stream. @return The long that was read from the stream. @throws IOException If there is an error reading from the stream.
490 Try to find a fixed offset for the given xref table/stream. @param objectOffset the given offset where to look at @return the fixed offset @throws IOException if something went wrong
491 This will compute the user password hash. @param password The plain text password. @param owner The owner password hash. @param permissions The document permissions. @param id The document id. @param encRevision The revision of the encryption. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @return The user password. @throws IOException if the password could not be computed
492 Compute the owner entry in the encryption dictionary. @param ownerPassword The plaintext owner password. @param userPassword The plaintext user password. @param encRevision The revision number of the encryption algorithm. @param length The length of the encryption key. @return The o entry of the encryption dictionary. @throws IOException if the owner password could not be computed
493 Rotates this matrix by the given factors. @param theta The angle of rotation measured in radians
494 Applies a text position adjustment from the TJ operator. May be overridden in subclasses. @param tx x-translation @param ty y-translation
495 Translates this matrix by the given vector. @param vector 2D vector
496 Produces a copy of the first matrix, with the second matrix concatenated. @param a The matrix to copy. @param b The matrix to concatenate. @return a copy of the first matrix with the second matrix concatenated
497 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps.
498 {@inheritDoc}
499 Returns the access permissions granted when the document was decrypted. If the document was not decrypted this method returns the access permission for a document owner (ie can do everything). The returned object is in read only mode so that permissions cannot be changed. Methods providing access to content should rely on this object to verify if the current user is allowed to proceed. @return the access permissions for the current user on the document.
500 Computes the revision version of the StandardSecurityHandler to use regarding the version number and the permissions bits set. See PDF Spec 1.6 p98 @param version The version number. @return The computed revision number.
501 Encrypt or decrypt data with AES with key length other than 256 bits. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
502 Encrypt or decrypt data with AES256. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
503 Encrypt or decrypt data with RC4. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param input The data to encrypt. @param output The output to write the encrypted data to. @throws IOException If there is an error reading the data.
504 This will encrypt and write the data. @param data The data to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
505 Return the {@code SASLPrep}-canonicalised version of the given {@code str} for use as a query string. This implements the {@code SASLPrep} algorithm defined in <a href="https://tools.ietf.org/html/rfc4013">RFC 4013</a>. @param str The string to canonicalise. @return The canonicalised string. @throws IllegalArgumentException if the string contained prohibited codepoints, or broke the requirements for bidirectional character handling. @see <a href="https://tools.ietf.org/html/rfc3454#section-7">RFC 3454, Section 7</a> for discussion of what a query string is.
506 Return the {@code SASLPrep}-canonicalised version of the given @code str} for use as a stored string. This implements the {@code SASLPrep} algorithm defined in <a href="https://tools.ietf.org/html/rfc4013">RFC 4013</a>. @param str The string to canonicalise. @return The canonicalised string. @throws IllegalArgumentException if the string contained prohibited codepoints, or broke the requirements for bidirectional character handling. @see <a href="https://tools.ietf.org/html/rfc3454#section-7">RFC 3454, Section 7</a> for discussion of what a stored string is.
507 Write a list of string containing a whole line of a document. @param line a list with the words of the given line @throws IOException if something went wrong
508 {@inheritDoc} <p> The method returns null if there is there was an error opening the font.
509 Saves the font metadata cache to disk.
510 Loads the font metadata cache from disk.
511 Sets the font service provider.
512 Constructor. @param p an array of the 3 vertices of a triangle @param c an array of color corresponding the vertex array p
513 Writes the CMap as ASCII to the given output stream. @param out ASCII output stream @throws IOException if the stream could not be written
514 Loads a glyph list from disk.
515 Inverts the font's code -&gt; GID mapping. Any duplicate (GID -&gt; code) mappings will be lost. @return the GID for the given code @throws IOException if the data could not be read
516 Check if the converter state is sane. @param state the parsed converter state @return true if the state seems plausible
517 End buffering the text clipping path, if any.
518 Sets the clipping path using caching for performance. We track lastClip manually because {@link Graphics2D#getClip()} returns a new object instead of the same one passed to {@link Graphics2D#setClip(java.awt.Shape) setClip()}. You may need to call this if you override {@link #showGlyph(Matrix, PDFont, int, Vector) showGlyph()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5093">PDFBOX-5093</a> for more.
519 Return the stream of PDF data to be signed. Clients should use this method only to create signatures externally. {@link #write(PDDocument)} method should have been called prior. The created signature should be set using {@link #writeExternalSignature(byte[])}. <p> When {@link SignatureInterface} instance is used, COSWriter obtains and writes the signature itself. </p> @return data stream to be signed @throws IllegalStateException if PDF is not prepared for external signing @throws IOException if input data is closed
520 Merge a single character TextPosition into the current object. This is to be used only for cases where we have a diacritic that overlaps an existing TextPosition. In a graphical display, we could overlay them, but for text extraction we need to merge them. Use the contains() method to test if two objects overlap. @param diacritic TextPosition to merge into the current TextPosition.
521 Determine if this TextPosition logically contains another (i.e. they overlap and should be rendered on top of each other). @param tp2 The other TestPosition to compare against @return True if tp2 is contained in the bounding box of this text.
522 Determine if this TextPosition perfectly contains another (i.e. the other TextPosition overlaps 100% with this one and fits entirely inside its bounding box when they are rendered on top of each other). @param tp2 The other TestPosition to compare against @return True if tp2 is contained completely inside the bounding box of this text.
523 writes the paragraph separator string to the output. @throws IOException if something went wrong
524 tests the relationship between the last text position, the current text position and the last text position that followed a line separator to decide if the gap represents a paragraph separation. This should <i>only</i> be called for consecutive text positions that first pass the line separation test. <p> This base implementation tests to see if the lastLineStartPosition is null OR if the current vertical position has dropped below the last text vertical position by at least 2.5 times the current text height OR if the current horizontal position is indented by at least 2 times the current width of a space character. </p> <p> This also attempts to identify text that is indented under a hanging indent. </p> <p> This method sets the isParagraphStart and isHangingIndent flags on the current position object. </p> @param position the current text position. This may have its isParagraphStart or isHangingIndent flags set upon return. @param lastPosition the previous text position (should not be null). @param lastLineStartPosition the last text position that followed a line separator, or null. @param maxHeightForLine max height for text positions since lasLineStartPosition.
525 Used within {@link #normalize(List)} to create a single {@link WordWithTextPositions} entry.
526 Write the given {@link COSName} to the given stream. @param output The stream, that shall be written to. @param cosName The content, that shall be written.
527 Writes a COSName to the content stream. @param name the name to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
528 This will output the given text/byte string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
529 Sorts this list according to the order induced by the specified {@link Comparator}. @param <T> the class of the objects in the list @param list the list to be sorted. @param cmp the comparator to determine the order of the list.
530 Constructor. Will apply encoding-specific conversions to the output text. @param encoding The encoding that the output will be written in.
531 Instantiate a new PDFTextStripper object.
532 This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param key The key to the object that we are getting. @return The object that matches the key.
533 This will do a lookup into the dictionary. @param key The key to the object. @return The item that matches the key.
534 @see java.util.Map#containsKey(Object) @param name The key to find in the map. @return true if the map contains this key.
535 Returns a filter instance given its name as a string. @param filterName the name of the filter to retrieve @return the filter that matches the name @throws IOException if the filter name was invalid
536 This will parse a PDF name from the stream. @return The parsed PDF name. @throws IOException If there is an error reading from the stream.
537 Creates a PDColor containing the given color value. @param array a COS array containing the color value @param colorSpace color space in which the color value is defined
538 This will create a COS string from a string of hex characters. @param hex A hex string. @return A cos string with the hex characters converted to their actual bytes. @throws IOException If there is an error with the hex string.
539 This will take a list of integer objects and return a COSArray of COSInteger objects. @param integer A list of integers @return An array of COSInteger objects
540 This will take a list of string objects and return a COSArray of COSName objects. @param strings A list of strings @return An array of COSName objects
541 This will take a list of string objects and return a COSArray of COSName objects. @param strings A list of strings @return An array of COSName objects
542 Default constructor.
543 This constructor is to be used if the array doesn't exist, but is to be created and added to the parent dictionary as soon as the first element is added to the array. @param dictionary The dictionary that holds the item, and will hold the array if an item is added. @param dictionaryKey The key into the dictionary to set the item.
544 Constructor to create empty page destination.
545 Constructor. @param x the x coordinate of the rectangle @param y the y coordinate of the rectangle @param width The width of the rectangle. @param height The height of the rectangle.
546 Constructor. @param box the bounding box to be used for the rectangle
547 This will set the filters that are part of this stream. @param filters The filters that are part of this stream.
548 Sets the list of alternateColorSpace color spaces. @param list the list of color space objects
549 Creates a new COSStream using the current configuration for scratch files. @return the new COSStream
550 Creates a new stream with an empty dictionary. <p> Try to avoid using this constructor because it creates a new scratch file in memory. Instead, use {@link COSDocument#createCOSStream() document.getDocument().createCOSStream()} which will use the existing scratch file (in memory or in temp file) of the document. </p>
551 Creates a new stream with an empty dictionary. Data is read from the given random accessview. Written data is stored in the given scratch file. @param streamCache Stream cache for writing stream data. @param randomAccessReadView source for the data to be read @throws IOException if the length of the random access view isn't available
552 Returns an unmodifiable view of this dictionary. @return an unmodifiable view of this dictionary
553 Returns the result of the last filter, for use by repair mechanisms. @return the result of the last filter
554 This will get the resources for this Form XObject. This will return null if no resources are available. @return The resources for this Form XObject.
555 Default constructor.
556 Creates a new user property. @param userAttributeObject the user attribute object
557 Default Constructor.
558 Constructor.
559 Constructor.
560 Constructor.
561 Constructor.
562 Constructor. @param acroForm The form that this field is part of.
563 Constructor. @param acroForm The form that this field is part of.
564 Creates a new Layout attribute object with a given dictionary. @param dictionary the dictionary
565 Creates a new List attribute object with a given dictionary. @param dictionary the dictionary
566 Creates a new PrintField attribute object with a given dictionary. @param dictionary the dictionary
567 Creates a new Table attribute object with a given dictionary. @param dictionary the dictionary
568 Creates a Form XObject for reading. @param stream The XObject stream
569 Creates a Transparency Group for reading. @param stream The XObject stream @param cache the cache to be used for the resources
570 Adds a TTC or OTC to the file cache. To reduce memory, the parsed font is not cached.
571 Adds an OTF or TTF font to the file cache. To reduce memory, the parsed font is not cached.
572 Adds a Type 1 font to the file cache. To reduce memory, the parsed font is not cached.
573 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
574 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
575 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
576 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
577 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
578 Pushes the current graphics state to the stack.
579 Saves the entire graphics stack. @return the saved graphics state stack.
580 Constructor. Uses main memory to buffer PDF streams.
581 Constructor for encrypted pdfs. @param source input representing the pdf. @param password password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param keyAlias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of the stream cache @throws IOException if the source data could not be read
582 {@inheritDoc}
583 Transforms the given rectangle using the CTM and then intersects it with the current clipping area.
584 Calculate the transformed appearance box. Apply the Matrix (or an identity transform) to the BBox of the appearance stream @param appearanceStream @return the transformed rectangle
585 Constructor with a given page size to initialize the clipping path. @param page the size of the page
586 Get the left x coordinate. A return value of -1 implies that the current x-coordinate will be used. @return The left x coordinate.
587 Get the left x coordinate. A return value of -1 implies that the current x-coordinate will be used. @return The left x coordinate.
588 Get the bottom y coordinate. A return value of -1 implies that the current y-coordinate will be used. @return The bottom y coordinate.
589 Get the right x coordinate. A return value of -1 implies that the current x-coordinate will be used. @return The right x coordinate.
590 Get the top y coordinate. A return value of -1 implies that the current y-coordinate will be used. @return The top y coordinate.
591 Get the top y coordinate. A return value of -1 implies that the current y-coordinate will be used. @return The top y coordinate.
592 Get the left x coordinate. Return values of 0 or -1 imply that the current x-coordinate will be used. @return The left x coordinate.
593 Get the top y coordinate. Return values of 0 or -1 imply that the current y-coordinate will be used. @return The top y coordinate.
594 A flag indicating if this page destination should just fit bounding box of the PDF. @return true If the destination should fit just the bounding box.
595 A flag indicating if this page destination should just fit bounding box of the PDF. @return true If the destination should fit just the bounding box.
596 A flag indicating if this page destination should just fit bounding box of the PDF. @return true If the destination should fit just the bounding box.
597 Returns a new OutputStream for writing stream data, using the current filters. @return OutputStream for un-encoded stream data. @throws IOException If the output stream could not be created.
598 This will get a stream that can be written to, with the given filter. @param filter the filter to be used. @return An output stream to write data to. @throws IOException If an IO error occurs during writing.
599 Creates a thumbnail Image XObject from the given COSBase and name. @param cosStream the COS stream @return an XObject
600 Returns the Mask Image XObject associated with this image, or null if there is none. @return Mask Image XObject
601 Returns the Soft Mask Image XObject associated with this image, or null if there is none. @return the SMask Image XObject, or null.
602 Writes an AffineTransform to the content stream as an array. @param transform AffineTransfrom to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
603 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
604 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
605 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
606 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
607 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
608 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
609 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
610 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
611 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
612 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
613 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
614 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
615 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
616 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
617 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
618 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
619 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
620 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
621 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
622 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
623 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
624 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
625 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
626 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
627 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
628 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
629 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
630 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
631 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
632 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
633 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
634 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
635 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
636 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
637 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
638 End a marked content sequence. @throws IOException If the content stream could not be written
639 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
640 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
641 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
642 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
643 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
644 Constructor. @param array An array of numbers as specified in the PDF Reference for a rectangle type.
645 Creates a new line dash pattern from a dash array and phase. @param array the dash array @param phase the phase
646 {@inheritDoc}
647 {@inheritDoc}
648 Read a single patch from a data stream, a patch contains information of its coordinates and color parameters. @param input the image source data stream @param isFree whether this is a free patch @param implicitEdge implicit edge when a patch is not free, otherwise it's not used @param implicitCornerColor implicit colors when a patch is not free, otherwise it's not used @param maxSrcCoord the maximum coordinate value calculated from source data @param maxSrcColor the maximum color value calculated from source data @param rangeX range for coordinate x @param rangeY range for coordinate y @param colRange range for color @param matrix the pattern matrix concatenated with that of the parent content stream @param xform transformation for user to device space @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @return a single patch @throws IOException when something went wrong
649 Read a vertex from the bit input stream performs interpolations. @param input bit input stream @param maxSrcCoord max value for source coordinate (2^bits-1) @param maxSrcColor max value for source color (2^bits-1) @param rangeX dest range for X @param rangeY dest range for Y @param colRangeTab dest range array for colors @param matrix the pattern matrix concatenated with that of the parent content stream @param xform the affine transformation @return a new vertex with the flag and the interpolated values @throws IOException if something went wrong
650 Gets the colour for the before edge. @return the colour for the before edge
651 Gets the colour for the after edge. @return the colour for the after edge
652 Gets the colour for the start edge. @return the colour for the start edge
653 Gets the colour for the end edge. @return the colour for the end edge
654 Returns the blending mode stored in the COS dictionary @return the blending mode
655 This will get the destination to jump to. @return The D entry of the specific go-to action dictionary. @throws IOException If there is an error creating the destination.
656 This will get the destination to jump to. @return The D entry of the specific go-to action dictionary. @throws IOException If there is an error creating the destination.
657 Get the destination to be displayed when the annotation is activated. Either this or the action entry should be set, but not both. @return The destination for this annotation. @throws IOException If there is an error creating the destination.
658 Get the page destination of this node. @return The page destination of this node. @throws IOException If there is an error creating the destination.
659 Convenience method to be used when creating a matrix from unverified data. If the parameter is a COSArray with at least six numbers, a Matrix object is created from the first six numbers and returned. If not, then the identity Matrix is returned. @param base a COS object, preferably a COSArray with six numbers. @return a Matrix object.
660 Determine the highest object number from the imported page to avoid mixed up numbers when saving the new pdf. @param importedPage the imported page.
661 This is a convenience method that will get the dictionary object that is expected to be a COSDictionary. Null is returned if the entry does not exist in the dictionary. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @return The COSDictionary.
662 This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert it to a primitive boolean. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The entry converted to a boolean.
663 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
664 Returns A list of filters applied to this stream. @return A (possibly empty) list of filters applied to this stream, never null.
665 This will get the color space or null if none exists. @return the color space for the shading @throws IOException if there is an error getting the color space
666 Tell if the dictionary is a PDF or FDF catalog. @param dictionary the dictionary to be tested @return true if the given dictionary is a root dictionary
667 Returns true if the node is a page tree node (i.e. and intermediate).
668 This will return the crypt filter method. Allowed values are: NONE, V2, AESV2, AESV3 @return the name of the crypt filter method.
669 Returns the name of the filter which is used for de/encrypting streams. Default value is "Identity". @return the name of the filter
670 Returns the name of the filter which is used for de/encrypting strings. Default value is "Identity". @return the name of the filter
671 This will decrypt a dictionary. @param dictionary The dictionary to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error creating a new string.
672 Returns the Unicode character sequence which corresponds to the given character code. @param code character code @return Unicode character(s)
673 Returns the subtype of the soft mask (Alpha, Luminosity) - S entry @return the subtype of the soft mask
674 Get the relationship between the current document and the target (which may be an intermediate target). @return the relationship as a name. Valid values are P (the target is the parent of the current document) and C (the target is a child of the current document). Invalid values or null are also returned.
675 Returns the annotations appearance state, which selects the applicable appearance stream from an appearance subdictionary. @return the annotations appearance state
676 This will tell if this is an encrypted document. @return true If this document is encrypted.
677 This will get the encryption dictionary if the document is encrypted or null if the document is not encrypted. @return The encryption dictionary.
678 The initial parse will first parse only the trailer, the xrefstart and all xref tables to have a pointer (offset) to all the pdf's objects. It can handle linearized pdfs, which will have an xref at the end pointing to an xref at the beginning of the file. Last the root object is parsed. @throws IOException If something went wrong.
679 Get the documents AcroForm. This will return null if no AcroForm is part of the document. Dependent on setting <code>acroFormFixup</code> some fixing/changes will be done to the AcroForm. If you need to ensure that there are no fixes applied call <code>getAcroForm</code> with <code>null</code>. Using <code>getAcroForm(PDDocumentFixup acroFormFixup)</code> might change the original content and subsequent calls with <code>getAcroForm(null)</code> will return the changed content. @param acroFormFixup the fix up action or null @return The document's AcroForm.
680 Get the viewer preferences associated with this document or null if they do not exist. @return The document's viewer preferences.
681 @return The names dictionary for this document or null if none exist.
682 @return The named destinations dictionary for this document or null if none exists.
683 Get info about doc's usage of tagged features. This will return null if there is no information. @return The new mark info.
684 Returns the document-level URI. @return the document level URI if present, otherwise null
685 Get the document's structure tree root, or null if none exists. @return the structure tree root if present, otherwise null
686 Get the optional content properties dictionary associated with this document. @return the optional properties dictionary or null if it is not present
687 Get the destination named tree node. The values in this name tree will be PDPageDestination objects. @return The destination name tree node.
688 Get the embedded files named tree node. The values in this name tree will be PDComplexFileSpecification objects. @return The embedded files name tree node.
689 Get the document level JavaScript name tree. When the document is opened, all the JavaScript actions in it shall be executed, defining JavaScript functions for use by other scripts in the document. @return The document level JavaScript name tree.
690 @return The page transition associated with this page or null if no transition is defined
691 Returns the resource with the given name and kind as an indirect object, or null.
692 Returns the resource with the given name and kind, or null.
693 Returns the resource names of the given kind.
694 Gets the page. @return the page
695 Get the page on which the object shall be rendered. @return the referenced page or null.
696 Returns the page on which some or all of the content items designated by the K entry shall be rendered (Pg). @return the page on which some or all of the content items designated by the K entry shall be rendered
697 Returns the ID tree. @return the ID tree
698 Returns the parent tree.<p> The keys correspond to a single page of the document or to an individual object, e.g. an annotation or an XObject, which have a <b>/StructParent</b> or <b>/StructParents</b> entry.<p> The values of type {@link PDParentTreeValue} are either a dictionary or an array. It's a dictionary for individual objects like an annotation or an XObject, and an array for a page object or a content stream containing marked-content sequences identified by an MCID. @return the parent tree.
699 Sets the ClassMap. @return the ClassMap, never null. The elements are either {@link PDAttributeObject} or lists of it.
700 Returns the crypt filter with the given name. @param cryptFilterName the name of the crypt filter @return the crypt filter with the given name if available
701 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the annotation. @return the border style dictionary.
702 This will retrieve the border style dictionary, describing the effect applied to the border described by the BS entry. @return the border effect dictionary.
703 This will get the signature or null if there is none. @return The signature.
704 This will get the java script entry. @return The java script entry describing javascript commands.
705 This will get the appearance dictionary that specifies the appearance of a pushbutton field. @return The AP entry of this dictionary.
706 This will get named page references. @return The named page references or <code>null</code>.
707 This will get the icon fit that is associated with this field. @return The 'IF' entry.
708 This will get a list of additional actions that will get executed based on events. @return The 'AA' entry in this FDF field dictionary or null.
709 This will get the FDF page info object. @return The Page info.
710 This is the template reference. @return The template reference.
711 Returns the CIDSystemInfo, or null if it is missing (which isn't allowed but could happen). @return the CIDSystemInfo, or null
712 Returns the Panose entry of the Style dictionary, if any. @return A Panose wrapper object.
713 Returns the optional resources of the type3 stream. @return the resources bound to be used when parsing the type3 stream
714 Returns the dictionary containing all streams to be used to render the glyphs. @return the dictionary containing all glyph streams.
715 Returns the DeviceN Process Dictionary, or null if it is missing. @return the DeviceN Process Dictionary, or null if it is missing.
716 @param destination to be rendered @return state or null if undefined
717 This will get the external graphics state for this pattern. @return The extended graphics state for this pattern.
718 This will get the resources for this pattern. This will return null if no resources are available at this level. @return The resources for this pattern.
719 Get the target directory. @return the target directory or null if there is none.
720 This will get a dictionary containing Windows-specific launch parameters. @return The Win entry of of the specific launch action dictionary.
721 Get the target directory. If this entry is absent, the current document is the target file containing the destination. @return the target directory or null if the current document is the target file containing the destination.
722 This will get the appearance dictionary associated with this annotation. This may return null. @return This annotations appearance.
723 This will retrieve the corresponding page of this annotation. See also <a href="https://stackoverflow.com/a/36894982/535646">this answer</a> about what to do if the page isn't available. @return The corresponding page or null if not available.
724 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
725 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
726 This will set the previous URI action, in case it's needed. @return The previous URI.
727 This will return the external data dictionary. @return the external data dictionary
728 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
729 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
730 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
731 Returns the appearance characteristics dictionary. @return the appearance characteristics dictionary
732 Get the additional actions for this field. This will return null if there are no additional actions for this field. As of PDF 1.6 this is only used for Widget Annotations. @return The actions of the field.
733 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
734 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
735 A build data dictionary for the signature handler that was used to create the parent signature. @return the Filter as PDPropBuildFilter object
736 A build data dictionary for the PubSec software module that was used to create the parent signature. @return the PubSec as PDPropBuildPubSec object
737 A build data dictionary for the viewing application software module that was used to create the parent signature. @return the App as PDPropBuildApp object
738 <p>(Optional; PDF 1.6) A dictionary containing a single entry whose key is P and whose value is an integer between 0 and 3. A value of 0 defines the signatures as an author signature. The value 1 through 3 shall be used for certification signatures and correspond to the value of P in a DocMDP transform parameters dictionary.</p> <p>If this MDP key is not present or the MDP dictionary does not contain a P entry, no rules shall be defined regarding the type of signature or its permissions.</p> @return the mdp dictionary as PDSeedValueMDP
739 (Optional) A certificate seed value dictionary containing information about the certificate to be used when signing. @return dictionary
740 <p>(Optional; PDF 1.6) A time stamp dictionary containing two entries. URL which is a ASCII string specifying the URL to a rfc3161 conform timestamp server and Ff to indicate if a timestamp is required or optional.</p> @return the timestamp dictionary as PDSeedValueTimeStamp
741 PDF signature build dictionary. Provides information about the signature handler. @return the pdf signature build dictionary.
742 Get the structure element of this node. @return The structure element of this node.
743 @return true if the node has at least one child
744 This will get the default resources for the AcroForm. @return The default resources or null if there is none.
745 Get the additional actions for this field. This will return null if there are no additional actions for this field. @return The actions of the field.
746 Returns the signature contained in this field. @return A signature dictionary.
747 Returns the default value, if any. @return A signature dictionary.
748 <p>(Optional; PDF 1.5) A seed value dictionary containing information that constrains the properties of a signature that is applied to the field.</p> @return the seed value dictionary as PDSeedValue
749 This will retrieve the measure dictionary. @return the measure dictionary
750 Get info about the thread, or null if there is nothing. @return The thread information.
751 Get the first bead in the thread, or null if it has not been set yet. This is a required field for this object. @return The first bead in the thread.
752 This will get the thread that this bead is part of. This is only required for the first bead in a thread, so other beads 'may' return null. @return The thread that this bead is part of.
753 This will get the next bead. If this bead is the last bead in the list then this will return the first bead. @return The next bead in the list or the first bead if this is the last bead.
754 This will get the previous bead. If this bead is the first bead in the list then this will return the last bead. @return The previous bead in the list or the last bead if this is the first bead.
755 Get the page that this bead is part of. @return The page that this bead is part of.
756 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object.
757 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object.
758 This will get the incremental updates since the PDF was last opened. @return The differences entry of the FDF dictionary.
759 A stream containing a Type 1 font program. @return A stream containing a Type 1 font program.
760 A stream containing a true type font program. @return A stream containing a true type font program.
761 A stream containing a font program that is not true type or type 1. @return A stream containing a font program.
762 Get the CIDSet stream. @return A stream containing a CIDSet.
763 Gets the sound object. @return The sound object defining the sound that shall be played.
764 This will retrieve the normal icon. @return the normal icon.
765 This will retrieve the rollover icon. @return the rollover icon
766 This will retrieve the alternate icon. @return the alternate icon.
767 This will get the document ID. @return The document id.
768 Get the list of OutputIntents defined in the document. @return The list of PDOutputIntent, never null.
769 This will get a list of PDThreadBead objects, which are article threads in the document. This will return an empty list if there are no thread beads. @return A list of article threads on this page, never null. The returned list is backed by the beads COSArray, so any adding or deleting in this list will change the document too.
770 Get the viewports. @return a list of viewports or null if there is no /VP entry.
771 Return the children of this node. This list will contain PDNameTreeNode objects. @return The list of children or null if there are no children.
772 This will return a map of names on this level. The key will be a string, and the value will depend on where this class is being used. @return ordered map of COS objects or <code>null</code> if the dictionary contains no 'Names' entry on this level. @throws IOException If there is an error while creating the sub types. @see #getKids()
773 Return the children of this node. This list will contain PDNumberTreeNode objects. @return The list of children or null if there are no children.
774 This will return a map of numbers on this level. The key will be a java.lang.Integer, the value will depend on where this class is being used. @return A map of COS objects. @throws IOException If there is a problem creating the values.
775 Get the highest value for a key in the number map. @return The highest value for a key in the map or null if missing.
776 Get the lowest value for a key in the number map. @return The lowest value for a key in the map or null if missing.
777 Returns all ranges for the output values as COSArray . Required for type 0 and type 4 functions @return the ranges array.
778 Returns all domains for the input values as COSArray. Required for all function types. @return the domains array.
779 The "Size" entry, which is the number of samples in each input dimension of the sample table. @return A List of java.lang.Integer objects.
780 Returns all decode values as COSArray. @return the decode array.
781 Returns all functions values as COSArray. @return the functions array.
782 Returns all bounds values as COSArray. @return the bounds array.
783 Returns all encode values as COSArray. @return the encode array.
784 Returns the user properties. @return the user properties
785 Is the artifact attached to the given edge? @param edge the edge @return <code>true</code> if the artifact is attached to the given edge, <code>false</code> otherwise
786 Get the annotation color. @return The annotation color, or null if there is none.
787 This will retrieve the interior color of the drawn area. @return object representing the color.
788 This will get the coordinates of the callout line. @return An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, Four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
789 Get the paths making up the freehand "scribble". @see #setInkList(List) @return the List of arrays representing the paths.
790 This will retrieve the start and end coordinates of the line (or leader line if LL entry is set). @return array of floats [x1, y1, x2, y2] line start and end points in default user space.
791 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point.
792 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point.
793 This will retrieve the interior color of the line endings defined in the LE entry. @return object representing the color.
794 This will retrieve the horizontal offset of the caption. @return the horizontal offset of the caption
795 This will retrieve the vertical offset of the caption. @return the vertical offset of the caption
796 This will get the coordinates of the vertices. @return array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
797 This will get interior color of the drawn area. @return object representing the color.
798 This will get the coordinates of the the vertices. @return array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
799 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point.
800 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point.
801 This will retrieve the interior color of the line endings defined in the LE entry. @return object representing the color.
802 This will retrieve the interior color of the drawn area. @return object representing the color.
803 Get the coordinates of individual words or group of words. @see #setCoords(float[]) @return the array of 8 􏰍 n numbers specifying the coordinates of n quadrilaterals.
804 This is the FDF id. @return The FDF ID.
805 This will get the list of FDF Fields. This will return a list of FDFField objects. @return A list of FDF fields.
806 This will get the list of FDF Pages. This will return a list of FDFPage objects. @return A list of FDF pages.
807 This will get the list of kids. This will return a list of FDFField objects. This will return null if the underlying list is null. @return The list of kids.
808 This will return a list of options for a choice field. The values in the list will be 1 of 2 types:<ul> <li><code>String</code> </li> <li>{@link FDFOptionElement}</li> </ul> @return A list of all options.
809 This will get a list of FDFTemplage objects that describe the named pages that serve as templates. @return A list of templates.
810 This will get a list of fields that are part of this template. @return A list of fields.
811 The widths of the characters. This will be null for the standard 14 fonts. @return The widths of the characters.
812 Returns the linear interpretation matrix, which is an array of nine numbers. If the underlying dictionary contains null then the identity matrix will be returned. @return the linear interpretation matrix
813 Returns the names of the color components. @return the names of the color components
814 This will return the background. @return the background
815 This will get the optional Domain values of a function based shading. @return the domain values
816 This will get the optional Extend values for this shading. @return the extend values
817 This will get the optional Domain values for this shading. @return the domain values
818 This will get the Coords values for this shading. @return the coordinate values
819 Returns all decode values as COSArray. @return the decode array
820 This will get the font setting of the graphics state. @return The font setting.
821 An array identifying which fields to include in the submission or which to exclude, depending on the setting of the Include/Exclude flag in the Flags entry @return the array of fields
822 An array identifying which fields to include in the submission or which to exclude, depending on the setting of the Include/Exclude flag in the Flags entry @return the array of fields
823 This will get the margin between the annotations "outer" rectangle defined by /Rect and the boundaries of the underlying caret. @return the differences. If the entry hasn't been set am empty array is returned.
824 This will get the margin between the annotations "outer" rectangle defined by /Rect and the border. @return the differences. If the entry hasn't been set am empty array is returned.
825 This will get the coordinates of the callout line. (PDF 1.6 and higher) Only relevant if the intent is FreeTextCallout. @return An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
826 Get one or more disjoint paths that make this annotation. @return An array of arrays, each representing a stroked path. Each array shall be a series of alternating horizontal and vertical coordinates.
827 This will retrieve the start and end coordinates of the line (or leader line if LL entry is set). @return array of floats [x1, y1, x2, y2] line start and end points in default user space.
828 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point, LE_NONE if missing, never null.
829 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point, LE_NONE if missing, never null.
830 This will retrieve the horizontal offset of the caption. @return the horizontal offset of the caption
831 This will retrieve the vertical offset of the caption. @return the vertical offset of the caption
832 This will retrieve the set of quadpoints which encompass the areas of this annotation which will activate. @return An array of floats representing the quad points.
833 This will retrieve the numbers that shall represent the alternating horizontal and vertical coordinates. @return An array of floats representing the alternating horizontal and vertical coordinates.
834 PDF 2.0: This will retrieve the arrays that shall represent the alternating horizontal and vertical coordinates for path building. @return An array of float arrays, each supplying the operands for a path building operator (m, l or c). The first array should have 2 elements, the others should have 2 or 6 elements.
835 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point, LE_NONE if missing, never null.
836 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point, LE_NONE if missing, never null.
837 This will retrieve the numbers that shall represent the alternating horizontal and vertical coordinates. @return An array of floats representing the alternating horizontal and vertical coordinates.
838 This will get the differences between the annotations "outer" rectangle defined by /Rect and the border. @return the differences. If the entry hasn't been set am empty array is returned.
839 This will retrieve the set of quadpoints which encompass the areas of this annotation. @return An array of floats representing the quad points.
840 If <b>SubFilter</b> is not null and the {@link #isSubFilterRequired()} indicates this entry is a required constraint, then the first matching encodings shall be used when signing; otherwise, signing shall not take place. If {@link #isSubFilterRequired()} indicates that this is an optional constraint, then the first matching encoding shall be used if it is available. If it is not available, a different encoding may be used instead. @return the subfilter that shall be used by the signature handler
841 An array of names indicating acceptable digest algorithms to use when signing. The value shall be one of <b>SHA1</b>, <b>SHA256</b>, <b>SHA384</b>, <b>SHA512</b>, <b>RIPEMD160</b>. The default value is implementation-specific. @return the digest method that shall be used by the signature handler
842 If the Reasons array is provided and {@link #isReasonRequired()} indicates that Reasons is a required constraint, one of the reasons in the array shall be used for the signature dictionary; otherwise signing shall not take place. If the {@link #isReasonRequired()} indicates Reasons is an optional constraint, one of the reasons in the array may be chose or a custom reason can be provided. @return the reasons that should be used by the signature handler
843 (Optional, PDF 1.6) An array of text strings that specifying possible legal attestations. @return the reasons that should be used by the signature handler
844 Returns list of byte arrays that contains DER-encoded X.509v3 certificates @return list of byte arrays containing DER-encoded X.509v3 certificates
845 Returns list of key usages of certificate strings where each string is 9 characters long and each character is one of these values {0, 1, X} 0 for must not set, 1 for must set, X for don't care. each index in the string represents a key usage: <ol> <li>digitalSignature</li> <li>non-Repudiation</li> <li>keyEncipherment</li> <li>dataEncipherment</li> <li>keyAgreement</li> <li>keyCertSign</li> <li>cRLSign</li> <li>encipherOnly</li> <li>decipherOnly</li> </ol> @return list of key usages of certificate strings
846 Returns list of array of bytes of DER-encoded X.509v3 certificates @return list of array of bytes of DER-encoded X.509v3 certificates
847 Returns A list of array of bytes that contain Object Identifiers (OIDs) of the certificate policies that must be present in the signing certificate @return list of array of bytes that contain Object Identifiers of the certificate policies
848 Read out the byterange from the file. @return an integer array with the byterange, or an empty array if there is none.
849 Return the calculation order in which field values should be recalculated when the value of any field changes. (Read about "Trigger Events" in the PDF specification) @return field list. Note these objects may not be identical to PDField objects retrieved from other methods (depending on cache setting). The best strategy is to call {@link #getCOSObject()} to check for identity. The list is not backed by the /CO COSArray in the document.
850 This will get the indices of the selected options - the 'I' key. <p> This is only needed if a choice field allows multiple selections and two different items have the same export value or more than one values is selected. </p> <p>The indices are zero-based</p> @return List containing the indices of all selected options.
851 This will return the changes along the x-axis. @return changes along the x-axis
852 This will return the changes along the y-axis. @return changes along the y-axis
853 This will return the distances. @return distances
854 This will return the areas. @return areas
855 This will return the angles. @return angles
856 This will return the sloaps of a line. @return the sloaps of a line
857 This will return the origin of the coordinate system. @return the origin
858 Get the visibility policy name. Valid names are AllOff, AllOn, AnyOff, AnyOn (default). @return the visibility policy, never null.
859 This is a convenience method that will get the dictionary object that is expected to be an long. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The long value.
860 This is a convenience method that will get the dictionary object that is expected to be an long. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The long value.
861 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
862 Decodes data, with optional DecodeOptions. Not all filters support all options, and so callers should check the options' <code>honored</code> flag to test if they were applied. @param encoded the input stream holding the encoded data @param filterList list of filters to be used for decoding @param parameters the parameters used for decoding @param options additional options for decoding @param results list of optional decoding results for each filter @return the decoded stream data @throws IOException if the stream cannot be decoded @throws IllegalArgumentException if filterList is empty
863 Sets the byte position of the first XRef (has to be called after very last startxref was read). This is used to resolve chain of active XRef/trailer. In case startxref position is not found we output a warning and use all XRef/trailer objects combined in byte position order. Thus for incomplete PDF documents with missing startxref one could call this method with parameter value -1. @param startxrefBytePosValue starting position of the first XRef
864 This is a convenience method that will get the dictionary object that is expected to be an float. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The float value.
865 This is a convenience method that will get the dictionary object that is expected to be an float. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The float value.
866 This is a convenience method that will get the dictionary object that is expected to be a float. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The float value.
867 Get the user unit. This is a positive number that shall give the size of default user space units, in multiples of 1/72 inch, or 1 if it hasn't been set. This is supported by PDF 1.6 and higher. @return the user unit.
868 Get the width of the of the guideline in default user space units. The default is 1. @return The width of the guideline.
869 Get the opacity value. @return The opacity of the annotation.
870 The weight of the font. According to the PDF spec "possible values are 100, 200, 300, 400, 500, 600, 700, 800 or 900" Where a higher number is more weight and appears to be more bold. @return The font weight.
871 This will get the italic angle for the font. @return The italic angle.
872 This will get the ascent for the font. @return The ascent.
873 This will get the descent for the font. @return The descent.
874 This will get the leading for the font. @return The leading.
875 This will get the CapHeight for the font. @return The cap height.
876 This will get the x height for the font. @return The x height.
877 This will get the stemV for the font. @return The stem v value.
878 This will get the stemH for the font. @return The stem h value.
879 This will get the average width for the font. @return The average width value.
880 This will get the max width for the font. @return The max width value.
881 This will get the missing width for the font from the /MissingWidth dictionary entry. @return The missing width value, or 0 if there is no such dictionary entry.
882 This will get the gamma value. If none is present then the default of 1 will be returned. @return The gamma value.
883 This will return the XStep value. @return The XStep value
884 This will return the YStep value. @return The YStep value
885 Sets the volume. @return The volume at which to play the sound, in the range −1.0 to 1.0. Default value: 1.0.
886 This will retrieve the length of the leader line. @return the length of the leader line
887 This will retrieve the length of the leader line extensions. @return the length of the leader line extensions
888 This will retrieve the length of the leader line offset. @return the length of the leader line offset
889 This will retrieve the constant opacity value used when rendering the annotation (excluing any popup). @return the constant opacity value.
890 This will retrieve the border width in points, 0 = no border. @return The width of the border in points.
891 @return The duration in seconds of the transition effect or the default 1 if no duration is found.
892 @return The starting or ending scale at which the changes shall be drawn or the default 1 if no scale is found. Only for {@link PDTransitionStyle#Fly}.
893 Process the page to extract the region text. @param page The page to extract the regions from. @throws IOException If there is an error while extracting text.
894 Returns the group color space or null if it isn't defined. @return the group color space. @throws IOException if the colorspace could not be created
895 Creates a property list from the given dictionary. @param dict COS dictionary @return a new instance of a PDPropertyList using the given dictionary
896 This will get the line width. This will return null if there is no line width @return null or the LW value of the dictionary.
897 This will get the miter limit. @return null or the ML value in the dictionary.
898 This will get the flatness tolerance. @return The flatness tolerance or null if one has not been set.
899 This will get the smothness tolerance. @return The smothness tolerance or null if one has not been set.
900 This will get the stroking alpha constant. @return The stroking alpha constant or null if one has not been set.
901 This will get the non stroking alpha constant. @return The non stroking alpha constant or null if one has not been set.
902 This will parse a PDF dictionary value. @return The parsed Dictionary object. @throws IOException If there is an error parsing the dictionary object.
903 Returns all found objects of a brute force search. @return map containing all found objects of a brute force search @throws IOException if something went wrong
904 This will write a COS object. @param obj The object to write. @throws IOException if the output cannot be written
905 visitFromObjRef method comment. @param obj The object that is being visited. @throws IOException If there is an exception while visiting this object.
906 This will save the document to an output stream. @param output The stream to write to. @throws IOException If there is an error writing the document.
907 This will remove all of the objects in the collection.
908 This will remove all of the objects in the collection. @param objectsList The list of objects to remove from the collection.
909 This will retain all of the objects in the collection. @param objectsList The list of objects to retain from the collection.
910 This will set an object at a specific index. @param index zero based index into array. @param intVal The object to set.
911 This will remove an element from the array. @param i The index of the object to remove. @return The object that was removed.
912 This will remove an element from the array. @param o The object to remove. @return <code>true</code> if the object was removed, <code>false</code> otherwise
913 This will clear all items in the map.
914 This will remove an item for the dictionary. This will do nothing of the object does not exist. @param key The key to the item to remove from the dictionary.
915 Check whether the given {@link COSUpdateState}´s {@link COSDocumentState} differs from the {@link COSIncrement}´s known {@link #incrementOrigin}.<br> Should that be the case, the {@link COSUpdateState} originates from another {@link COSDocument} and must be added to the {@link COSIncrement}, hence call {@link COSUpdateState#update()}. @param updateState The {@link COSUpdateState} that shall be updated, if it's originating from another {@link COSDocument}. @see #incrementOrigin
916 Sets the referenced object to COSNull and removes the initially assigned parser.
917 <p> Links the given {@link COSDocumentState} to the {@link #updated} state of the managed {@link #updateInfo}.<br> </p> <p> This shall also initialize {@link #updated} accordingly and will also set the same {@link COSDocumentState} for all possibly contained substructures. </p> <p> Should {@link #originDocumentState} already have been set, by a prior call to this method, this shall deny to overwrite it. </p> <p> {@link COSDocumentState#isAcceptingUpdates()} shall determine, whether updates to {@link #updateInfo} are allowed. </p> <p> As long as no {@link COSDocumentState} is linked to this {@link COSUpdateState}, it shall not accept updates. </p> <p> Additionally to {@link #setOriginDocumentState(COSDocumentState)}, this shall also deny changing {@link #updated}, should the flag {@code dereferencing} indicate, that this is caused by dereferencing a {@link COSObject}. </p> @param originDocumentState The {@link COSDocumentState} that shall be linked to this {@link COSUpdateState}. @param dereferencing {@code true}, if this update of the {@link COSDocumentState} is caused by dereferencing a {@link COSObject}. @see #originDocumentState @see #updated
918 Get the value of the array as a string. @param index The index into the array. @return The string or null if it does not exist.
919 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
920 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The name converted to a string.
921 Check if the cross reference stream can be found at the current offset. @param startXRefOffset the expected start offset of the XRef stream @return the revised offset @throws IOException if something went wrong
922 Returns the page display mode. @return the PageMode of the document, if not present PageMode.USE_NONE is returned
923 Returns the page layout. @return the PageLayout of the document, if not present PageLayout.SINGLE_PAGE is returned
924 Returns the PDF specification version this document conforms to. @return the PDF version (e.g. "1.4")
925 This will get the trapped value for the document. This will return null if one is not found. @return The trapped value for the document.
926 Returns the numbering style for this page range. @return one of the STYLE_* constants
927 Gets the type. @return the type
928 Returns the owner of the attributes. @return the owner of the attributes
929 Returns the structure type (S). @return the structure type
930 Creates a node in the structure tree. Can be either a structure tree root, or a structure element. @param node the node dictionary @return the structure node
931 Returns the type. @return the type
932 Returns the property name. @return the property name
933 Gets the language (Lang). @return the language
934 Gets the type (Type). @return the type
935 Gets the subtype (Subtype). @return the subtype
936 Get the name of the filter. @return The filter name contained in this encryption dictionary.
937 Get the name of the subfilter. @return The subfilter name contained in this encryption dictionary.
938 Create the correct FDFAnnotation. @param fdfDic The FDF dictionary. @return A newly created FDFAnnotation
939 Get the intent of the annotation. @return The intent of the annotation.
940 This will retrieve the line ending style. @return The ending style for the start point.
941 This will get the version that was specified in the catalog dictionary. @return The FDF version.
942 The encoding to be used for a FDF field. The default is PDFDocEncoding and this method will never return null. @return The encoding value.
943 This will get the scale option. See the SCALE_OPTION_XXX constants. This is guaranteed to never return null. Default: Always @return The scale option.
944 This will get the scale type. See the SCALE_TYPE_XXX constants. This is guaranteed to never return null. Default: Proportional @return The scale type.
945 The PostScript name of the font. @return The postscript name of the font.
946 This will always return "Font" for fonts. @return The type of object that this is.
947 This will get the subtype of font. @return the subtype
948 Get the font name. @return The name of the font.
949 A string representing the preferred font stretch. According to the PDF Spec: The font stretch value; it must be one of the following (ordered from narrowest to widest): UltraCondensed, ExtraCondensed, Condensed, SemiCondensed, Normal, SemiExpanded, Expanded, ExtraExpanded or UltraExpanded. @return The stretch of the font.
950 Returns the PostScript name of the font. @return the PostScript name of the font
951 Returns the PostScript name of the font. @return the PostScript name of the font
952 Returns the PostScript name of the font. @return the PostScript name of the font
953 Returns the PostScript name of the font. @return the PostScript name of the font
954 Returns true if this is an NChannel (PDF 1.6) color space. @return true if this is an NChannel color space.
955 This will get the type of PDF object that the actions dictionary describes. If present must be Action for an action dictionary. @return The Type of PDF object.
956 This will get the type of action that the actions dictionary describes. @return The S entry of actions dictionary.
957 This will create the correct type of action based on the type specified in the dictionary. @param action An action dictionary. @return An action of the correct type.
958 This will retrieve the subtype of the annotation. @return The subtype of this annotation, see the SUB_TYPE_XXX constants.
959 This will retrieve the caption positioning. @return the caption positioning
960 This will retrieve the intent of the annotation The values and meanings are specific to the actual annotation See the IT_* constants for the annotation classes. @return the intent
961 returns the subtype of the external data dictionary. @return the subtype of the external data dictionary
962 The name of the software module that was used to create the signature. @return the name of the software module
963 If <b>Filter</b> is not null and the {@link #isFilterRequired()} indicates this entry is a required constraint, then the signature handler specified by this entry shall be used when signing; otherwise, signing shall not take place. If {@link #isFilterRequired()} indicates that this is an optional constraint, this handler may be used if it is available. If it is not available, a different handler may be used instead. @return the filter that shall be used by the signature handler
964 A name indicating the usage of the URL entry. There are standard uses and there can be implementation-specific use for this URL. The following value specifies a valid standard usage: <ul> <li>Browser, The URL references content that should be displayed in a web browser to allow enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL bit is ignored for this usage.</li> <li>ASSP, The URL references a signature web service that can be used for server-based signing. If the Ff attribute’s URL bit indicates that this is a required constraint, this implies that the credential used when signing must come from this server.</li> </ul> @return string of URL type
965 Returns the filter. @return the filter
966 Returns the subfilter. @return the subfilter
967 {@inheritDoc} <p><b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance.
968 This will retrieve the name of the viewport. @return the name of the viewport
969 Get the Duplex preference. See DUPLEX enumeration. @return the Duplex preference.
970 This is a convenience method that will get the dictionary object that is expected to be a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
971 This is a convenience method that will get the dictionary object that is expected to be a string. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
972 Returns the language for the document, or null. @return the language of the document if present, otherwise null
973 This will get the title of the document. This will return null if no title exists. @return The title of the document.
974 This will get the author of the document. This will return null if no author exists. @return The author of the document.
975 This will get the subject of the document. This will return null if no subject exists. @return The subject of the document.
976 This will get the keywords of the document. This will return null if no keywords exists. @return The keywords of the document.
977 This will get the creator of the document. This will return null if no creator exists. @return The creator of the document.
978 This will get the producer of the document. This will return null if no producer exists. @return The producer of the document.
979 Returns the page label prefix for this page range. @return the page label prefix for this page range, or {@code null} if no prefix has been defined.
980 This will get the unicode file name. @return The file name.
981 This will get the file name. @return The file name.
982 This will get the name representing a Dos file. @return The file name.
983 This will get the name representing a Mac file. @return The file name.
984 This will get the name representing a Unix file. @return The file name.
985 This will get the description. @return The file description.
986 Returns the element identifier (ID). @return the element identifier
987 Returns the title (T). @return the title
988 Returns the language (Lang). @return the language
989 Returns the alternate description (Alt). @return the alternate description
990 Returns the expanded form (E). @return the expanded form
991 Returns the actual text (ActualText). @return the actual text
992 Returns the string for the property value. @return the string for the property value
993 Gets the actual text (ActualText). @return the actual text
994 Gets the alternate description (Alt). @return the alternate description
995 Gets the expanded form (E). @return the expanded form
996 Modification date. @return The date as a string.
997 Get the annotation name. @return The unique name of the annotation.
998 Get the text, or a description, of the annotation. @return The text, or a description, of the annotation.
999 Get the annotation title. @return The title of the annotation.
1000 Get the description of the annotation. @return The subject of the annotation.
1001 This will retrieve the symbol that shall be associated with the caret. @return the symbol
1002 This will get the clockwise rotation in degrees. @return The number of degrees of clockwise rotation.
1003 Get the default appearance string. @return The default appearance of the annotation.
1004 Get the default style string. @return The default style of the annotation.
1005 This will retrieve the caption positioning. @return the caption positioning
1006 This will retrieve the annotation state. @return the annotation state
1007 This will retrieve the annotation state model. @return the annotation state model
1008 This will get the status string to be displayed as the result of an action. @return The status.
1009 This will get the target frame in the browser to open this document. @return The target frame.
1010 This will get the "T" entry in the field dictionary. A partial field name. Where the fully qualified field name is a concatenation of the parent's fully qualified field name and "." as a separator. For example<br> Address.State<br> Address.City<br> @return The partial field name.
1011 This will get the name of the referenced page. A required parameter. @return The name of the referenced page.
1012 A string representing the preferred font family. @return The font family.
1013 This will get the character set for the font. @return The character set value.
1014 Returns the name of the optional content group. @return the name
1015 Lists all optional content group names. @return an array of all names
1016 This will get the file name to be launched or the document to be opened or printed, in standard Windows pathname format. If the name string includes a backslash character (\), the backslash must itself be preceded by a backslash. This value must be a single string; it is not a file specification. @return The F entry of the specific Windows launch parameter dictionary.
1017 This will get the string specifying the default directory in standard DOS syntax. @return The D entry of the specific Windows launch parameter dictionary.
1018 This will get the string specifying the operation to perform: open to open a document print to print a document If the F entry designates an application instead of a document, this entry is ignored and the application is launched. Default value: open. @return The O entry of the specific Windows launch parameter dictionary.
1019 This will get a parameter string to be passed to the application designated by the F entry. This entry should be omitted if F designates a document. @return The P entry of the specific Windows launch parameter dictionary.
1020 This will get the uniform resource identifier to resolve. It should be encoded in 7-bit ASCII, but UTF-8 and UTF-16 are supported too. @return The URI entry of the specific URI action dictionary or null if there isn't any.
1021 Get the name of the file as found in the EmbeddedFiles name tree. This is only to be used if the target is a child of the current document. @return a filename or null if there is none.
1022 If the value in the /A entry is a string, this will get the value of the /NM entry in the annotation dictionary. @return the /NM value of an annotation dictionary or null if the /A entry value is missing or not a string.
1023 The file to launch. @return The executable/document to launch.
1024 The dir to launch from. @return The dir of the executable/document to launch.
1025 A parameter to pass the executable. @return The parameter to pass the executable.
1026 Get the "contents" of the field. @return the value of the contents.
1027 This will retrieve the date and time the annotation was modified. @return the modified date/time (often in date format, but can be an arbitrary string).
1028 This will get the name, a string intended to uniquely identify each annotation within a page. Not to be confused with some annotations Name entry which impact the default image drawn for them. @return The identifying name for the Annotation.
1029 Get the default appearance. @return a string describing the default appearance.
1030 Get the default style string. The default style string defines the default style for rich text fields. @return the DS element of the dictionary object
1031 Retrieve the string used as the title of the popup window shown when open and active (by convention this identifies who added the annotation). @return The title of the popup.
1032 This will retrieve the short description of the subject of the annotation. @return the subject.
1033 This will retrieve the annotation state. @return the annotation state
1034 This will retrieve the annotation state model. @return the annotation state model
1035 This will retrieve the normal caption. @return the normal caption.
1036 This will retrieve the rollover caption. @return the rollover caption.
1037 This will retrieve the alternate caption. @return the alternate caption.
1038 The build date of the software module. This string is normally produced by the compiler that is used to compile the software, for example using the Date and Time preprocessor flags. As such, this not likely to be in PDF Date format. @return the build date of the software module
1039 Indicates the operating system. The string format isn't specified yet. In its PDF Signature Build Dictionary Specifications Adobe differently specifies the value type to store operating system string:<ul> <li>Specification for PDF v1.5 specifies type as string;</li> <li>Specification for PDF v1.7 specifies type as array and provided example for <code>/PropBuild</code> dictionary indicate it as array of names.</li> </ul> This method supports both types to retrieve the value. @return the operating system id or name.
1040 Returns list of maps that contains subject distinguished names like [(cn: John Doe, o: Doe), (cn: John Smith)] both keys are typically of the form 'cn', 'o', 'email', '2.5.4.43'; and values are text strings. @return list maps that contains subject distinguished names
1041 returns String of the URL @return string of the URL
1042 Returns the URL. @return the URL
1043 Returns the name of the person or authority signing the document. According to the PDF specification, this value should be used only when it is not possible to extract the name from the signature. @return the name
1044 Returns the CPU host name or physical location of the signing. @return the location
1045 Returns the reason for the signing, such as (I agree...). @return the reason
1046 Returns the contact info provided by the signer to enable a recipient to contact the signer to verify the signature, e.g. a phone number. @return the contact info
1047 Get the title of this node. @return The title of this node.
1048 Returns the partial name of the field. @return the name of the field
1049 Gets the alternate name of the field ("shall be used in place of the actual field name wherever the field shall be identified in the user interface (such as in error or status messages referring to the field)"). @return the alternate name of the field
1050 Gets the mapping name of the field. The mapping name shall be used when exporting interactive form field data from the document. @return the mapping name of the field
1051 Get the default style string. The default style string defines the default style for rich text fields. @return the DS element of the dictionary object
1052 This will return the scale ration. @return the scale ratio.
1053 Returns the role map. @return the role map
1054 This will get the option values "Opt". <p> For a choice field the options array can either be an array of text strings or an array of a two-element arrays.<br> The method always only returns either the text strings or, in case of two-element arrays, an array of the first element of the two-element arrays </p> <p> Use {@link #getOptionsExportValues()} and {@link #getOptionsDisplayValues()} to get the entries of two-element arrays. </p> @return List containing the export values.
1055 This will get the display values from the options. <p> For options with an array of text strings the display value and export value are the same.<br> For options with an array of two-element arrays the display value is the second entry in the two-element array. </p> @return List containing all the display values.
1056 Returns the selected value. <p>Off is the default value which will also be returned if the value hasn't been set at all. @return A non-null string.
1057 Returns the selected values, or an empty List. This list always contains a single item unless {@link #isMultiSelect()} is true. @return A non-null string.
1058 Returns the default values, or an empty List. This list always contains a single item unless {@link #isMultiSelect()} is true. @return A non-null string.
1059 Constructor.
1060 This will set the file name. @param fileName The name of the file.
1061 Default constructor. @param dest The named destination.
1062 Set the named destination. @param dest The new named destination. @throws IOException If there is an error setting the named destination.
1063 This will read a integer from the Stream and throw an {@link IllegalArgumentException} if the integer value has more than the maximum object revision (i.e. : bigger than {@link #GENERATION_NUMBER_THRESHOLD}) @return the generation number being read. @throws IOException if an I/O error occurs
1064 This will read a long from the Stream and throw an {@link IOException} if the long value is negative or has more than 10 digits (i.e. : bigger than {@link #OBJECT_NUMBER_THRESHOLD}) @return the object number being read. @throws IOException if an I/O error occurs
1065 Get the user password based on the owner password. @param ownerPassword The plaintext owner password. @param owner The o entry of the encryption dictionary. @param encRevision The encryption revision number. @param length The key length. @return The u entry of the encryption dictionary. @throws IOException If there is an error accessing data while generating the user password.
1066 Constructor of a patch for type 7 shading. @param tcp 16 control points @param color 4 corner colors
1067 Encrypt or decrypt data with RC4. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param input The data to encrypt. @param output The output to write the encrypted data to. @throws IOException If there is an error reading the data.
1068 Returns the font service provider. Defaults to using FileSystemFontProvider.
1069 An assistant method to accomplish type 6 and type 7 shading. @param patchCC all the crossing point coordinates and color of a grid @return a ShadedTriangle list which can compose the grid patch
1070 Constructor of a patch for type 6 shading. @param points 12 control points @param color 4 corner colors
1071 This will process a TextPosition object and add the text to the list of characters on a page. It takes care of overlapping text. @param text The text to process.
1072 This will process a TextPosition object and add the text to the list of characters on a page. It takes care of overlapping text. @param text The text to process.
1073 Remove all space characters if contained within the adjacent letters
1074 handles the line separator for a new line given the specified current and previous TextPositions. @param current the current text position @param lastPosition the previous text position @param lastLineStartPosition the last text position that followed a line separator. @param maxHeightForLine max height for positions since lastLineStartPosition @return start position of the last line @throws IOException if something went wrong
1075 Used within {@link #normalize(List)} to handle a {@link TextPosition}. @return The StringBuilder that must be used when calling this method.
1076 Returns the Calendar for a given string containing a date, or {@code null} if it cannot be parsed. The returned value will have 0 for DST_OFFSET. @param text A COS string containing a date. @return The Calendar that the text string represents, or {@code null} if it cannot be parsed.
1077 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1078 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
1079 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
1080 This will output the given byte getString as a PDF object. @param string COSString to be written @param output The stream to write to. @throws IOException If there is an error writing to the stream.
1081 This will output the given text/byte getString as a PDF object. @param bytes byte array representation of a string to be written @param output The stream to write to. @throws IOException If there is an error writing to the stream.
