1 Returns an optional enum constant for the given type, using {@link Enum#valueOf}. If the constant does not exist, {@link Optional#absent} is returned. A common use case is for parsing user input or falling back to a default enum constant. For example, {@code Enums.getIfPresent(Country.class, countryInput).or(Country.DEFAULT);} @since 12.0
2 Returns an {@link Optional} containing the first element in {@code iterable} that satisfies the given predicate, if such an element exists. <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null} is matched in {@code iterable}, a NullPointerException will be thrown. <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()} @since 11.0
3 Returns {@code true} if any element in this fluent iterable satisfies the predicate. <p><b>{@code Stream} equivalent:</b> {@link Stream#anyMatch} (same).
4 Helper method for {@link #precomputedInternal} that doesn't test if the negation is cheaper.
5 Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link RuntimeException}, {@link Error}, {@code declaredType1}, or {@code declaredType2}. @param throwable the Throwable to possibly propagate @param declaredType1 any checked exception type declared by the calling method @param declaredType2 any other checked exception type declared by the calling method @deprecated Use a combination of two calls to {@link #throwIfInstanceOf} and one call to {@link #throwIfUnchecked}, which togther provide the same behavior except that they reject {@code null}.
6 Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code IOException}, {@code RuntimeException} or {@code Error}. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b> Be sure to declare all of the checked exception types your try block can throw when calling an overload of this method so as to avoid losing the original exception type. <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e);} to ensure the compiler knows that it will throw. @return this method does not return; it always throws @throws IOException when the given throwable is an IOException
7 Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code IOException}, {@code RuntimeException}, {@code Error} or a checked exception of the given type. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b> Be sure to declare all of the checked exception types your try block can throw when calling an overload of this method so as to avoid losing the original exception type. <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e, ...);} to ensure the compiler knows that it will throw. @return this method does not return; it always throws @throws IOException when the given throwable is an IOException @throws X when the given throwable is of the declared type X
8 Closes all {@code Closeable} instances that have been added to this {@code Closer}. If an exception was thrown in the try block and passed to one of the {@code exceptionThrown} methods, any exceptions thrown when attempting to close a closeable will be suppressed. Otherwise, the <i>first</i> exception to be thrown from an attempt to close a closeable will be thrown and any additional exceptions that are thrown after that will be suppressed.
9 Creates a thread using {@link #platformThreadFactory}, and sets its name to {@code name} unless changing the name is forbidden by the security manager.
10 Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a key that doesn't satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 14.0
11 Returns a multimap containing the mappings in {@code unfiltered} that satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a key/value pair that doesn't satisfy the predicate, multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. @since 14.0
12 @since 18.0
13 Returns an iterator over the merged contents of all given {@code iterators}, traversing every element of the input iterators. Equivalent entries will not be de-duplicated. <p>Callers must ensure that the source {@code iterators} are in non-descending order as this method does not sort its input. <p>For any equivalent elements across all {@code iterators}, it is undefined which element is returned first. @since 11.0
14 Copies an iterable's elements into an array. @param iterable the iterable to copy @return a newly-allocated array into which all the elements of the iterable have been copied
15 {@inheritDoc} <p>If any entries for the specified {@code key} already exist in the multimap, their values are changed in-place without affecting the iteration order. <p>The returned list is immutable and implements {@link java.util.RandomAccess}.
16 {@inheritDoc} <p>The returned list is immutable and implements {@link java.util.RandomAccess}.
17 Creates a {@code CopyOnWriteArrayList} instance containing the given elements. @param elements the elements that the list should contain, in order @return a new {@code CopyOnWriteArrayList} containing those elements @since 12.0
18 Creates a {@code CopyOnWriteArraySet} instance containing the given elements. @param elements the elements that the set should contain, in order @return a new {@code CopyOnWriteArraySet} containing those elements @since 12.0
19 Searches the specified list for the specified object using the binary search algorithm. The list must be sorted into ascending order according to the specified comparator (as by the {@link Collections#sort(List, Comparator) Collections.sort(List, Comparator)} method), prior to making this call. If it is not sorted, the results are undefined. <p>If there are elements in the list which compare as equal to the key, the choice of {@link KeyPresentBehavior} decides which index is returned. If no elements compare as equal to the key, the choice of {@link KeyAbsentBehavior} decides which index is returned. <p>This method runs in log(n) time on random-access lists, which offer near-constant-time access to each list element. @param list the list to be searched. @param key the value to be searched for. @param comparator the comparator by which the list is ordered. @param presentBehavior the specification for what to do if at least one element of the list compares as equal to the key. @param absentBehavior the specification for what to do if no elements of the list compare as equal to the key. @return the index determined by the {@code KeyPresentBehavior}, if the key is in the list; otherwise the index determined by the {@code KeyAbsentBehavior}.
20 Returns the stripes that correspond to the passed objects, in ascending (as per {@link #getAt(int)}) order. Thus, threads that use the stripes in the order returned by this method are guaranteed to not deadlock each other. <p>It should be noted that using a {@code Striped<L>} with relatively few stripes, and {@code bulkGet(keys)} with a relative large number of keys can cause an excessive number of shared stripes (much like the birthday paradox, where much fewer than anticipated birthdays are needed for a pair of them to match). Please consider carefully the implications of the number of stripes, the intended concurrency level, and the typical number of keys used in a {@code bulkGet(keys)} operation. See <a href="http://www.mathpages.com/home/kmath199.htm">Balls in Bins model</a> for mathematical formulas that can be used to estimate the probability of collisions. @param keys arbitrary non-null keys @return the stripes corresponding to the objects (one per each object, derived by delegating to {@link #get(Object)}; may contain duplicates), in an increasing index order.
21 Returns a string representation of this network.
22 Returns a string representation of this graph.
23 Returns a view of a navigable map whose values are derived from the original navigable map's entries. In contrast to {@link #transformValues}, this method's entry-transformation logic may depend on the key as well as the value. <p>All other properties of the transformed map, such as iteration order, are left intact. For example, the code: {@snippet : NavigableMap<String, Boolean> options = Maps.newTreeMap(); options.put("verbose", false); options.put("sort", true); EntryTransformer<String, Boolean, String> flagPrefixer = new EntryTransformer<String, Boolean, String>() { public String transformEntry(String key, Boolean value) { return value ? key : ("yes" + key); } }; NavigableMap<String, String> transformed = LabsMaps.transformNavigableEntries(options, flagPrefixer); System.out.println(transformed); } ... prints {@code {sort=yessort, verbose=verbose}}. <p>Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. <p>It's acceptable for the underlying map to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed map might contain null values if the transformer sometimes gives a null result. <p>The returned map is not thread-safe or serializable, even if the underlying map is. <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the transformer will be applied many times for bulk operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing. <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the transformed map. @since 13.0
24 Returns a view of a sorted map where each value is transformed by a function. All other properties of the map, such as iteration order, are left intact. For example, the code: {@snippet : SortedMap<String, Integer> map = ImmutableSortedMap.of("a", 4, "b", 9); Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in); SortedMap<String, Double> transformed = Maps.transformValues(map, sqrt); System.out.println(transformed); } ... prints {@code {a=2.0, b=3.0}}. <p>Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. <p>It's acceptable for the underlying map to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed map might contain null values, if the function sometimes gives a null result. <p>The returned map is not thread-safe or serializable, even if the underlying map is. <p>The function is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the function will be applied many times for bulk operations like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing. @since 11.0
25 {@inheritDoc} @throws IllegalArgumentException if the call would result in more than {@link Integer#MAX_VALUE} occurrences of {@code element} in this multiset.
26 {@inheritDoc} @throws IllegalArgumentException if the call would result in more than {@link Integer#MAX_VALUE} occurrences of {@code element} in this multiset.
27 Returns a view of a {@code ListMultimap} where each value is transformed by a function. All other properties of the multimap, such as iteration order, are left intact. For example, the code: {@snippet : ListMultimap<String, Integer> multimap = ImmutableListMultimap.of("a", 4, "a", 16, "b", 9); Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in); ListMultimap<String, Double> transformed = Multimaps.transformValues(map, sqrt); System.out.println(transformed); } ... prints {@code {a=[2.0, 4.0], b=[3.0]}}. <p>Changes in the underlying multimap are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying multimap. <p>It's acceptable for the underlying multimap to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed multimap might contain null values, if the function sometimes gives a null result. <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap is. <p>The function is applied lazily, invoked when needed. This is necessary for the returned multimap to be a view, but it means that the function will be applied many times for bulk operations like {@link Multimap#containsValue} and {@code Multimap.toString()}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned multimap doesn't need to be a view, copy the returned multimap into a new multimap of your choosing. @since 7.0
28 {@inheritDoc} <p>This implementation is highly efficient when {@code elementsToAdd} is itself a {@link Multiset}.
29 A sensible definition of {@link #addAll(Collection)} in terms of {@link #add(Object)} and {@link #add(Object, int)}. If you override either of these methods, you may wish to override {@link #addAll(Collection)} to forward to this implementation. @since 7.0
30 Returns a synchronized (thread-safe) multimap backed by the specified multimap. In order to guarantee serial access, it is critical that <b>all</b> access to the backing multimap is accomplished through the returned multimap. <p>It is imperative that the user manually synchronize on the returned multimap when accessing any of its collection views: {@snippet : Multimap<K, V> multimap = Multimaps.synchronizedMultimap( HashMultimap.<K, V>create()); ... Collection<V> values = multimap.get(key); // Needn't be in synchronized block ... synchronized (multimap) { // Synchronizing on multimap, not values! Iterator<V> i = values.iterator(); // Must be in synchronized block while (i.hasNext()) { foo(i.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>Note that the generated multimap's {@link Multimap#removeAll} and {@link Multimap#replaceValues} methods return collections that aren't synchronized. <p>The returned multimap will be serializable if the specified multimap is serializable. @param multimap the multimap to be wrapped in a synchronized view @return a synchronized view of the specified multimap
31 Returns a synchronized (thread-safe) table backed by the specified table. In order to guarantee serial access, it is critical that <b>all</b> access to the backing table is accomplished through the returned table. <p>It is imperative that the user manually synchronize on the returned table when accessing any of its collection views: {@snippet : Table<R, C, V> table = Tables.synchronizedTable(HashBasedTable.<R, C, V>create()); ... Map<C, V> row = table.row(rowKey); // Needn't be in synchronized block ... synchronized (table) { // Synchronizing on table, not row! Iterator<Entry<C, V>> i = row.entrySet().iterator(); // Must be in synchronized block while (i.hasNext()) { foo(i.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>The returned table will be serializable if the specified table is serializable. @param table the table to be wrapped in a synchronized view @return a synchronized view of the specified table @since 22.0
32 Returns the escaped form of a given literal string. <p>If you are escaping input in arbitrary successive chunks, then it is not generally safe to use this method. If an input string ends with an unmatched high surrogate character, then this method will throw {@link IllegalArgumentException}. You should ensure your input is valid <a href="http://en.wikipedia.org/wiki/UTF-16">UTF-16</a> before calling this method. <p><b>Note:</b> When implementing an escaper it is a good idea to override this method for efficiency by inlining the implementation of {@link #nextEscapeIndex(CharSequence, int, int)} directly. Doing this for {@link com.google.common.net.PercentEscaper} more than doubled the performance for unescaped strings (as measured by {@code CharEscapersBenchmark}). @param string the literal string to be escaped @return the escaped form of {@code string} @throws NullPointerException if {@code string} is null @throws IllegalArgumentException if invalid surrogate characters are encountered
33 Reads all characters from a {@link Readable} object into a new {@link StringBuilder} instance. Does not close the {@code Readable}. @param r the object to read from @return a {@link StringBuilder} containing all the characters @throws IOException if an I/O error occurs
34 Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the primary input fails with the given {@code exceptionType}, from the result provided by the {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so if the primary input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an exception is thrown, this exception is used as the result of the output {@code Future}. <p>Usage example: {@snippet : ListenableFuture<Integer> fetchCounterFuture = ...; // Falling back to a zero counter in case an exception happens when // processing the RPC to fetch counters. ListenableFuture<Integer> faultTolerantFuture = Futures.catching( fetchCounterFuture, FetchException.class, x -> 0, directExecutor()); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the warnings the {@link MoreExecutors#directExecutor} documentation. @param input the primary input {@code Future} @param exceptionType the exception type that triggers use of {@code fallback}. The exception type is matched against the input's exception. "The input's exception" means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a different kind of exception, that exception itself. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding {@code Throwable.class} in particular. @param fallback the {@link Function} to be called if {@code input} fails with the expected exception type. The function's argument is the input's exception. "The input's exception" means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a different kind of exception, that exception itself. @param executor the executor that runs {@code fallback} if {@code input} fails @since 19.0
35 {@inheritDoc} <p>If a cancellation attempt succeeds on a {@code Future} that had previously been {@linkplain #setFuture set asynchronously}, then the cancellation will also be propagated to the delegate {@code Future} that was supplied in the {@code setFuture} call. <p>Rather than override this method to perform additional cancellation work or cleanup, subclasses should override {@link #afterDone}, consulting {@link #isCancelled} and {@link #wasInterrupted} as necessary. This ensures that the work is done even if the future is cancelled without a call to {@code cancel}, such as by calling {@code setFuture(cancelledFuture)}. <p>Beware of completing a future while holding a lock. Its listeners may do slow work or acquire other locks, risking deadlocks.
36 Sets the result of this {@code Future} unless this {@code Future} has already been cancelled or set (including {@linkplain #setFuture set asynchronously}). When a call to this method returns, the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b> the call was accepted (in which case it returns {@code true}). If it returns {@code false}, the {@code Future} may have previously been set asynchronously, in which case its result may not be known yet. That result, though not yet known, cannot be overridden by a call to a {@code set*} method, only by a call to {@link #cancel}. <p>Beware of completing a future while holding a lock. Its listeners may do slow work or acquire other locks, risking deadlocks. @param value the value to be used as the result @return true if the attempt was accepted, completing the {@code Future}
37 Sets the failed result of this {@code Future} unless this {@code Future} has already been cancelled or set (including {@linkplain #setFuture set asynchronously}). When a call to this method returns, the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b> the call was accepted (in which case it returns {@code true}). If it returns {@code false}, the {@code Future} may have previously been set asynchronously, in which case its result may not be known yet. That result, though not yet known, cannot be overridden by a call to a {@code set*} method, only by a call to {@link #cancel}. <p>Beware of completing a future while holding a lock. Its listeners may do slow work or acquire other locks, risking deadlocks. @param throwable the exception to be used as the failed result @return true if the attempt was accepted, completing the {@code Future}
38 Sets the result of this {@code Future} to match the supplied input {@code Future} once the supplied {@code Future} is done, unless this {@code Future} has already been cancelled or set (including "set asynchronously," defined below). <p>If the supplied future is {@linkplain #isDone done} when this method is called and the call is accepted, then this future is guaranteed to have been completed with the supplied future by the time this method returns. If the supplied future is not done and the call is accepted, then the future will be <i>set asynchronously</i>. Note that such a result, though not yet known, cannot be overridden by a call to a {@code set*} method, only by a call to {@link #cancel}. <p>If the call {@code setFuture(delegate)} is accepted and this {@code Future} is later cancelled, cancellation will be propagated to {@code delegate}. Additionally, any call to {@code setFuture} after any cancellation will propagate cancellation to the supplied {@code Future}. <p>Note that, even if the supplied future is cancelled and it causes this future to complete, it will never trigger interruption behavior. In particular, it will not cause this future to invoke the {@link #interruptTask} method, and the {@link #wasInterrupted} method will not return {@code true}. <p>Beware of completing a future while holding a lock. Its listeners may do slow work or acquire other locks, risking deadlocks. @param future the future to delegate to @return true if the attempt was accepted, indicating that the {@code Future} was not previously cancelled or set. @since 19.0
39 Returns a new {@code Future} whose result is derived from the result of the given {@code Future}. If {@code input} fails, the returned {@code Future} fails with the same exception (and the function is not invoked). Example usage: {@snippet : ListenableFuture<QueryResult> queryFuture = ...; ListenableFuture<List<Row>> rowsFuture = transform(queryFuture, QueryResult::getRows, executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the warnings the {@link MoreExecutors#directExecutor} documentation. <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel the input, and if the input is cancelled, the returned {@code Future} will receive a callback in which it will attempt to cancel itself. <p>An example use of this method is to convert a serializable object returned from an RPC into a POJO. @param input The future to transform @param function A Function to transform the results of the provided future to the results of the returned future. @param executor Executor to run the function in. @return A future that holds result of the transformation. @since 9.0 (in 2.0 as {@code compose})
40 Increments by one the value currently associated with {@code key}, and returns the new value.
41 Decrements by one the value currently associated with {@code key}, and returns the new value.
42 Increments by one the value currently associated with {@code key}, and returns the old value.
43 Decrements by one the value currently associated with {@code key}, and returns the old value.
44 Creates an {@code AtomicLongMap} with the same mappings as the specified {@code Map}.
45 Creates a new instance with the specified edge directionality.
46 Creates a new instance with the specified edge directionality.
47 Creates a new instance with the specified edge directionality.
48 @since 13.0
49 @deprecated Provided to satisfy the {@code Function} interface; use {@link #convert} instead.
50 Creates an empty {@code CompactHashMap} instance.
51 Creates a {@code CompactHashMap} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without growth. @param expectedSize the number of elements you expect to add to the returned set @return a new, empty {@code CompactHashMap} with enough capacity to hold {@code expectedSize} elements without resizing @throws IllegalArgumentException if {@code expectedSize} is negative
52 Creates an empty {@code CompactHashSet} instance.
53 Creates a {@code CompactHashSet} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without growth. @param expectedSize the number of elements you expect to add to the returned set @return a new, empty {@code CompactHashSet} with enough capacity to hold {@code expectedSize} elements without resizing @throws IllegalArgumentException if {@code expectedSize} is negative
54 Creates a new {@code ListMultimap} that uses the provided map and factory. It can generate a multimap based on arbitrary {@link Map} and {@link List} classes. Most users should prefer {@link MultimapBuilder}, though a small number of users will need this method to cover map or collection types that {@link MultimapBuilder} does not support. <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code toString} methods for the multimap and its returned views. The multimap's {@code get}, {@code removeAll}, and {@code replaceValues} methods return {@code RandomAccess} lists if the factory does. However, the multimap's {@code get} method returns instances of a different class than does {@code factory.get()}. <p>The multimap is serializable if {@code map}, {@code factory}, the lists generated by {@code factory}, and the multimap contents are all serializable. <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if {@code map} and the instances generated by {@code factory} are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link #synchronizedListMultimap}. <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()} and {@link LinkedListMultimap#create()} won't suffice. <p>Note: the multimap assumes complete ownership over of {@code map} and the lists returned by {@code factory}. Those objects should not be manually updated, they should be empty when provided, and they should not use soft, weak, or phantom references. @param map place to store the mapping from each key to its corresponding values @param factory supplier of new, empty lists that will each hold all values for a given key @throws IllegalArgumentException if {@code map} is not empty
55 Creates a new {@code SetMultimap} that uses the provided map and factory. It can generate a multimap based on arbitrary {@link Map} and {@link Set} classes. Most users should prefer {@link MultimapBuilder}, though a small number of users will need this method to cover map or collection types that {@link MultimapBuilder} does not support. <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code toString} methods for the multimap and its returned views. However, the multimap's {@code get} method returns instances of a different class than {@code factory.get()} does. <p>The multimap is serializable if {@code map}, {@code factory}, the sets generated by {@code factory}, and the multimap contents are all serializable. <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if {@code map} and the instances generated by {@code factory} are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link #synchronizedSetMultimap}. <p>Call this method only when the simpler methods {@link HashMultimap#create()}, {@link LinkedHashMultimap#create()}, {@link TreeMultimap#create()}, and {@link TreeMultimap#create(Comparator, Comparator)} won't suffice. <p>Note: the multimap assumes complete ownership over of {@code map} and the sets returned by {@code factory}. Those objects should not be manually updated and they should not use soft, weak, or phantom references. @param map place to store the mapping from each key to its corresponding values @param factory supplier of new, empty sets that will each hold all values for a given key @throws IllegalArgumentException if {@code map} is not empty
56 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableMultiset#builder}.
57 Returns a converter whose {@code convert} method applies {@code secondConverter} to the result of this converter. Its {@code reverse} method applies the converters in reverse order. <p>The returned converter is serializable if {@code this} converter and {@code secondConverter} are.
58 Appends the string representation of each of {@code parts}, using the previously configured separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.
59 Returns a string containing the string representation of each of {@code parts}, using the previously configured separator between each.
60 Returns a fresh {@link MapMakerInternalMap} as specified by the given {@code builder}.
61 Returns a fresh {@link MapMakerInternalMap} with {@link MapMaker.Dummy} values but otherwise as specified by the given {@code builder}. The returned {@link MapMakerInternalMap} will be optimized to saved memory. Since {@link MapMaker.Dummy} is a singleton, we don't need to store any values at all. Because of this optimization, {@code build.getValueStrength()} must be {@link Strength#STRONG}. <p>This method is intended to only be used by the internal implementation of {@link Interners}, since a map of dummy values is the exact use case there.
62 Returns a fluent iterable that combines several iterables. The returned iterable has an iterator that traverses the elements of each iterable in {@code inputs}. The input iterators are not polled until necessary. <p>The returned iterable's iterator supports {@code remove()} when the corresponding input iterator supports it. <p><b>{@code Stream} equivalent:</b> to concatenate an arbitrary number of streams, use {@code Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}. @throws NullPointerException if any of the provided iterables is {@code null} @since 20.0
63 Returns the element at the specified position in this fluent iterable. <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (but note that this throws different exception types, and throws an exception if {@code null} would be returned). @param position position of the element to return @return the element at the specified position in this fluent iterable @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to the size of this fluent iterable
64 Acquires a single permit from this {@code RateLimiter}, blocking until the request can be granted. Tells the amount of time slept, if any. <p>This method is equivalent to {@code acquire(1)}. @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited @since 16.0 (present in 13.0 with {@code void} return type})
65 Enters this monitor. Blocks at most the given time. @return whether the monitor was entered @since 28.0 (but only since 33.4.0 in the Android flavor)
66 Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the lock, but does not wait for the guard to be satisfied. @return whether the monitor was entered, which guarantees that the guard is now satisfied
67 Constructs a new {@code CacheBuilder} instance with the settings specified in {@code spec}. @since 12.0
68 Returns a new thread-safe interner which retains a strong reference to each instance it has interned, thus preventing these instances from being garbage-collected. If this retention is acceptable, this implementation may perform better than {@link #newWeakInterner}.
69 Returns a new thread-safe interner which retains a weak reference to each instance it has interned, and so does not prevent these instances from being garbage-collected. This most likely does not perform as well as {@link #newStrongInterner}, but is the best alternative when the memory usage of that implementation is unacceptable.
70 {@inheritDoc} @throws IllegalArgumentException if {@code rowKey} is not in {@link #rowKeySet()} or {@code columnKey} is not in {@link #columnKeySet()}.
71 Associates the value {@code null} with the specified keys, assuming both keys are valid. If either key is null or isn't among the keys provided during construction, this method has no effect. <p>This method is equivalent to {@code put(rowKey, columnKey, null)} when both provided keys are valid. @param rowKey row key of mapping to be erased @param columnKey column key of mapping to be erased @return the value previously associated with the keys, or {@code null} if no mapping existed for the keys
72 Returns {@code true} if {@code object} is an {@code ImmutableDoubleArray} containing the same values as this one, in the same order. Values are compared as if by {@link Double#equals}.
73 Returns {@code true} if {@code object} is an {@code ImmutableIntArray} containing the same values as this one, in the same order.
74 Returns {@code true} if {@code object} is an {@code ImmutableLongArray} containing the same values as this one, in the same order.
75 Enum values can override for performance reasons.
76 Returns the index of the first matching BMP character in a character sequence, or {@code -1} if no matching character is present. <p>The default implementation iterates over the sequence in forward order calling {@link #matches} for each character. @param sequence the character sequence to examine from the beginning @return an index, or {@code -1} if no character matches
77 Constructs an iterator across a sequence of the given size whose initial position is 0. That is, the first call to {@link #next()} will return the first element (or throw {@link NoSuchElementException} if {@code size} is zero). @throws IllegalArgumentException if {@code size} is negative
78 Returns the Teredo information embedded in a Teredo address. @param ip {@link Inet6Address} to be examined for embedded Teredo information @return extracted {@code TeredoInfo} @throws IllegalArgumentException if the argument is not a valid IPv6 Teredo address
79 Returns {@code true} if {@code bytes} is a <i>well-formed</i> UTF-8 byte sequence according to Unicode 6.0. Note that this is a stronger criterion than simply whether the bytes can be decoded. For example, some versions of the JDK decoder will accept "non-shortest form" byte sequences, but encoding never reproduces these. Such byte sequences are <i>not</i> considered well-formed. <p>This method returns {@code true} if and only if {@code Arrays.equals(bytes, new String(bytes, UTF_8).getBytes(UTF_8))} does, but is more efficient in both time and space.
80 Encodes the specified byte array, and returns the encoded {@code String}.
81 Attempts to read {@code len} bytes from the stream into the given array starting at {@code off}, with the same behavior as {@link DataInput#readFully(byte[], int, int)}. Does not close the stream. @param in the input stream to read from. @param b the buffer into which the data is read. @param off an int specifying the offset into the data. @param len an int specifying the number of bytes to read. @throws EOFException if this stream reaches the end before reading all the bytes. @throws IOException if an I/O error occurs.
82 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Booleans.asList(array))}, but is likely to be more efficient. @since 23.1
83 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Booleans.asList(array).subList(fromIndex, toIndex), distance)}, but is somewhat faster. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
84 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Bytes.asList(array))}, but is likely to be more efficient. @since 23.1
85 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Bytes.asList(array).subList(fromIndex, toIndex), distance)}, but is somewhat faster. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
86 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. @since 23.1
87 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. @since 23.1
88 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Chars.asList(array))}, but is likely to be more efficient. @since 23.1
89 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Chars.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
90 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. <p>Note that this method uses the total order imposed by {@link Double#compare}, which treats all NaN values as equal and 0.0 as greater than -0.0. @since 23.1
91 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Doubles.asList(array))}, but is likely to be more efficient. @since 23.1
92 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Bytes.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
93 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. <p>Note that this method uses the total order imposed by {@link Float#compare}, which treats all NaN values as equal and 0.0 as greater than -0.0. @since 23.1
94 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Floats.asList(array))}, but is likely to be more efficient. @since 23.1
95 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Floats.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
96 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. @since 23.1
97 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Ints.asList(array))}, but is likely to be more efficient. @since 23.1
98 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Ints.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
99 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. @since 23.1
100 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Longs.asList(array))}, but is likely to be more efficient. @since 23.1
101 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Longs.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
102 Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive in descending order. @since 23.1
103 Reverses the elements of {@code array}. This is equivalent to {@code Collections.reverse(Shorts.asList(array))}, but is likely to be more efficient. @since 23.1
104 Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code toIndex} exclusive. This is equivalent to {@code Collections.rotate(Shorts.asList(array).subList(fromIndex, toIndex), distance)}, but is considerably faster and avoids allocations and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or {@code toIndex > fromIndex} @since 32.0.0
105 Sorts the array, treating its elements as unsigned bytes. @since 23.1
106 Sorts the elements of {@code array} in descending order, interpreting them as unsigned 8-bit integers. @since 23.1
107 Sorts the array, treating its elements as unsigned 32-bit integers. @since 23.1
108 Sorts the elements of {@code array} in descending order, interpreting them as unsigned 32-bit integers. @since 23.1
109 Sorts the array, treating its elements as unsigned 64-bit integers. @since 23.1
110 Sorts the elements of {@code array} in descending order, interpreting them as unsigned 64-bit integers. @since 23.1
111 Returns a splitter that uses the given fixed string as a separator. For example, {@code Splitter.on(", ").split("foo, bar,baz")} returns an iterable containing {@code ["foo", "bar,baz"]}. @param separator the literal, nonempty string to recognize as a separator @return a splitter, with default settings, that recognizes that separator
112 Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries into keys and values using the specified separator. @since 14.0
113 Starts the Finalizer thread. FinalizableReferenceQueue calls this method reflectively. @param finalizableReferenceClass FinalizableReference.class. @param queue a reference queue that the thread will poll. @param frqReference a phantom reference to the FinalizableReferenceQueue, which will be queued either when the FinalizableReferenceQueue is no longer referenced anywhere, or when its close() method is called.
114 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
115 Returns a new {@link Builder}.
116 Returns an unmodifiable view of the specified multiset. Query operations on the returned multiset "read through" to the specified multiset, and attempts to modify the returned multiset result in an {@link UnsupportedOperationException}. <p>The returned multiset will be serializable if the specified multiset is serializable. @param multiset the multiset for which an unmodifiable view is to be generated @return an unmodifiable view of the multiset
117 Creates and returns a new evicting queue that will hold up to {@code maxSize} elements. <p>When {@code maxSize} is zero, elements will be evicted immediately after being added to the queue.
118 Constructor for use by subclasses.
119 Constructor for use by subclasses.
120 Constructor for use by subclasses.
121 Returns an unmodifiable view of the specified set of entries. The {@link Entry#setValue} operation throws an {@link UnsupportedOperationException}, as do any operations that would modify the returned set. @param entrySet the entries for which to return an unmodifiable view @return an unmodifiable view of the entries
122 Returns an unmodifiable view of the specified navigable map. Query operations on the returned map read through to the specified map, and attempts to modify the returned map, whether direct or via its views, result in an {@code UnsupportedOperationException}. <p>The returned navigable map will be serializable if the specified navigable map is serializable. <p>This method's signature will not permit you to convert a {@code NavigableMap<? extends K, V>} to a {@code NavigableMap<K, V>}. If it permitted this, the returned map's {@code comparator()} method might return a {@code Comparator<? extends K>}, which works only on a particular subtype of {@code K}, but promise that it's a {@code Comparator<? super K>}, which must work on any type of {@code K}. @param map the navigable map for which an unmodifiable view is to be returned @return an unmodifiable view of the specified navigable map @since 12.0
123 Returns an unmodifiable view of the specified {@code ListMultimap}. Query operations on the returned multimap "read through" to the specified multimap, and attempts to modify the returned multimap, either directly or through the multimap's views, result in an {@code UnsupportedOperationException}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param delegate the multimap for which an unmodifiable view is to be returned @return an unmodifiable view of the specified multimap
124 Returns an unmodifiable view of the specified {@code SetMultimap}. Query operations on the returned multimap "read through" to the specified multimap, and attempts to modify the returned multimap, either directly or through the multimap's views, result in an {@code UnsupportedOperationException}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param delegate the multimap for which an unmodifiable view is to be returned @return an unmodifiable view of the specified multimap
125 Returns an unmodifiable view of the specified row-sorted table. This method allows modules to provide users with "read-only" access to internal tables. Query operations on the returned table "read through" to the specified table, and attempts to modify the returned table, whether direct or via its collection views, result in an {@code UnsupportedOperationException}. <p>The returned table will be serializable if the specified table is serializable. @param table the row-sorted table for which an unmodifiable view is to be returned @return an unmodifiable view of the specified table @since 11.0
126 Assigns a thread to the given {@link Future} to provide {@link ListenableFuture} functionality. <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the returned future will emulate {@link ListenableFuture#addListener} by taking a thread from an internal, unbounded pool at the first call to {@code addListener} and holding it until the future is {@linkplain Future#isDone() done}. <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code Future} instances to be upgraded to {@code ListenableFuture} after the fact.
127 Registers separate success and failure callbacks to be run when the {@code Future}'s computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the computation is already complete, immediately. <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of callbacks, but any callback added through this method is guaranteed to be called once the computation is complete. <p>Exceptions thrown by a {@code callback} will be propagated up to the executor. Any exception thrown during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and logged. <p>Example: {@snippet : ListenableFuture<QueryResult> future = ...; Executor e = ... addCallback(future, new FutureCallback<QueryResult>() { public void onSuccess(QueryResult result) { storeInCache(result); } public void onFailure(Throwable t) { reportError(t); } }, e); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the warnings the {@link MoreExecutors#directExecutor} documentation. <p>For a more general interface to attach a completion listener to a {@code Future}, see {@link ListenableFuture#addListener addListener}. @param future The future attach the callback to. @param callback The callback to invoke when {@code future} is completed. @param executor The executor to run {@code callback} when the future completes. @since 10.0
128 Creates a new, empty map with the specified strategy, initial capacity and concurrency level.
129 Creates a new, empty multiset, sorted according to the elements' natural order. All elements inserted into the multiset must implement the {@code Comparable} interface. Furthermore, all such elements must be <i>mutually comparable</i>: {@code e1.compareTo(e2)} must not throw a {@code ClassCastException} for any elements {@code e1} and {@code e2} in the multiset. If the user attempts to add an element to the multiset that violates this constraint (for example, the user attempts to add a string element to a set whose elements are integers), the {@code add(Object)} call will throw a {@code ClassCastException}. <p>The type specification is {@code <E extends Comparable>}, instead of the more specific {@code <E extends Comparable<? super E>>}, to support classes defined without generics.
130 Creates a new, empty multiset, sorted according to the specified comparator. All elements inserted into the multiset must be <i>mutually comparable</i> by the specified comparator: {@code comparator.compare(e1, e2)} must not throw a {@code ClassCastException} for any elements {@code e1} and {@code e2} in the multiset. If the user attempts to add an element to the multiset that violates this constraint, the {@code add(Object)} call will throw a {@code ClassCastException}. @param comparator the comparator that will be used to sort this multiset. A null value indicates that the elements' <i>natural ordering</i> should be used.
131 {@inheritDoc} <p>Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a {@link List}, instead of the {@link Collection} specified in the {@link Multimap} interface.
132 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface. <p>Any duplicates in {@code values} will be stored in the multimap once.
133 Removes all values associated with a given key. The returned collection is immutable. <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link Multimap} interface.
134 Creates a new, empty {@code HashMultiset} with the specified expected number of distinct elements. @param distinctElements the expected number of distinct elements @throws IllegalArgumentException if {@code distinctElements} is negative
135 Returns true if {@code network} has at least one cycle. A cycle is defined as a non-empty subset of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges) starting and ending with the same node. <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).
136 Creates a new, empty {@code LinkedHashMultiset} with the specified expected number of distinct elements. @param distinctElements the expected number of distinct elements @throws IllegalArgumentException if {@code distinctElements} is negative
137 Constructs a graph with the properties specified in {@code builder}.
138 Constructs a graph with the properties specified in {@code builder}.
139 {@inheritDoc} <p>Creates an empty {@code HashSet} for a collection of values for one key. @return a new {@code HashSet} containing a collection of values for one key
140 {@inheritDoc} <p>Creates an empty {@code LinkedHashSet} for a collection of values for one key. @return a new {@code LinkedHashSet} containing a collection of values for one key
141 Associates the ({@code rowKey}, {@code columnKey}) pair with {@code value} in the built table. Duplicate key pairs are not allowed and will cause {@link #build} to fail.
142 Associates {@code key} with {@code value} in the built bimap. Duplicate keys or values are not allowed, and will cause {@link #build} to fail.
143 Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed, and will cause {@link #build} to fail.
144 Associates all of {@code map's} keys and values in the built map. Duplicate keys are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key or value in {@code map} is null @throws ClassCastException if any value is not an instance of the type specified by its key
145 Adds the given {@code entry} to the map, making it immutable if necessary. If the same key is put more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last value put for that key. @since 11.0
146 Associates {@code key} with {@code value} in the built map. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause {@link #build} to fail.
147 Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed, and will cause {@link #build} to fail.
148 Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed, and will cause {@link #build} to fail.
149 {@inheritDoc} @since 19.0
150 {@inheritDoc} @since 19.0
151 Returns the elements of a {@code NavigableSet}, {@code unfiltered}, that satisfy a predicate. The returned set is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting set's iterator does not support {@code remove()}, but all other set methods are supported. When given an element that doesn't satisfy the predicate, the set's {@code add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods such as {@code removeAll()} and {@code clear()} are called on the filtered set, only elements that satisfy the filter will be removed from the underlying set. <p>The returned set isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered set's methods, such as {@code size()}, iterate across every element in the underlying set and determine which elements satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and use the copy. <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link Iterables#filter(Iterable, Class)} for related functionality.) @since 14.0
152 Returns a newly-created immutable sorted map, or throws an exception if any two keys are equal. @throws IllegalArgumentException if any two keys are equal according to the comparator (which might be the keys' natural order) @since 31.0
153 Associates the specified range with the specified value. @throws IllegalArgumentException if {@code range} is empty
154 Add the specified range to this builder. Adjacent ranges are permitted and will be merged, but overlapping ranges will cause an exception when {@link #build()} is called. @throws IllegalArgumentException if {@code range} is empty
155 Returns the maximal range {@linkplain #encloses enclosed} by both this range and {@code connectedRange}, if such a range exists. <p>For example, the intersection of {@code [1..5]} and {@code (3..7)} is {@code (3..5]}. The resulting range may be empty; for example, {@code [1..5)} intersected with {@code [5..7)} yields the empty range {@code [5..5)}. <p>The intersection exists if and only if the two ranges are {@linkplain #isConnected connected}. <p>The intersection operation is commutative, associative and idempotent, and its identity element is {@link Range#all}). @throws IllegalArgumentException if {@code isConnected(connectedRange)} is {@code false}
156 Returns the maximal range lying between this range and {@code otherRange}, if such a range exists. The resulting range may be empty if the two ranges are adjacent but non-overlapping. <p>For example, the gap of {@code [1..5]} and {@code (7..10)} is {@code (5..7]}. The resulting range may be empty; for example, the gap between {@code [1..5)} {@code [5..7)} yields the empty range {@code [5..5)}. <p>The gap exists if and only if the two ranges are either disconnected or immediately adjacent (any intersection must be an empty range). <p>The gap operation is commutative. @throws IllegalArgumentException if this range and {@code otherRange} have a nonempty intersection @since 27.0
157 Returns the minimal range that {@linkplain #encloses encloses} both this range and {@code other}. For example, the span of {@code [1..3]} and {@code (5..7)} is {@code [1..7)}. <p><i>If</i> the input ranges are {@linkplain #isConnected connected}, the returned range can also be called their <i>union</i>. If they are not, note that the span might contain values that are not contained in either input range. <p>Like {@link #intersection(Range) intersection}, this operation is commutative, associative and idempotent. Unlike it, it is always well-defined for any two input ranges.
158 Returns the canonical form of this range in the given domain. The canonical form has the following properties: <ul> <li>equivalence: {@code a.canonical().contains(v) == a.contains(v)} for all {@code v} (in other words, {@code ContiguousSet.create(a.canonical(domain), domain).equals( ContiguousSet.create(a, domain))} <li>uniqueness: unless {@code a.isEmpty()}, {@code ContiguousSet.create(a, domain).equals(ContiguousSet.create(b, domain))} implies {@code a.canonical(domain).equals(b.canonical(domain))} <li>idempotence: {@code a.canonical(domain).canonical(domain).equals(a.canonical(domain))} </ul> <p>Furthermore, this method guarantees that the range returned will be one of the following canonical forms: <ul> <li>[start..end) <li>[start..+∞) <li>(-∞..end) (only if type {@code C} is unbounded below) <li>(-∞..+∞) (only if type {@code C} is unbounded below) </ul>
159 Returns a new, empty {@code HashBiMap} with the default initial capacity (16).
160 Constructs a new bimap containing initial values from {@code map}. The bimap is created with an initial capacity sufficient to hold the mappings in the specified map.
161 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
162 Returns an {@code ImmutableClassToInstanceMap} containing a single entry. @since 19.0
163 Returns an immutable set of the values in this map, in the same order they appear in {@link #entrySet}.
164 Returns a reversed view of the specified list. For example, {@code Lists.reverse(Arrays.asList(1, 2, 3))} returns a list containing {@code 3, 2, 1}. The returned list is backed by this list, so changes in the returned list are reflected in this list, and vice-versa. The returned list supports all of the optional list operations supported by this list. <p>The returned list is random-access if the specified list is random access. @since 7.0
165 Returns an immutable list containing the given elements, in order. @throws NullPointerException if {@code elements} contains a null element @since 3.0
166 Views the array as an immutable list. Copies if the specified range does not cover the complete array. Does not check for nulls.
167 Returns an immutable list of the elements between the specified {@code fromIndex}, inclusive, and {@code toIndex}, exclusive. (If {@code fromIndex} and {@code toIndex} are equal, the empty immutable list is returned.) <p><b>Note:</b> in almost all circumstances, the returned {@link ImmutableList} retains a strong reference to {@code this}, which may prevent the original list from being garbage collected. If you want the original list to be eligible for garbage collection, you should create and use a copy of the sub list (e.g., {@code ImmutableList.copyOf(originalList.subList(...))}).
168 Returns an immutable range map mapping a single range to a single value.
169 Returns an immutable range set containing the specified single range. If {@link Range#isEmpty() range.isEmpty()}, this is equivalent to {@link ImmutableRangeSet#of()}.
170 Returns an immutable map containing a single entry.
171 Returns an immutable set containing each of {@code elements}, minus duplicates, in the order each appears first in the source array. @throws NullPointerException if any of {@code elements} is null @since 3.0
172 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
173 Combines two iterators into a single iterator. The returned iterator iterates across the elements in {@code a}, followed by the elements in {@code b}. The source iterators are not polled until necessary. <p>The returned iterator supports {@code remove()} when the corresponding input iterator supports it.
174 Combines three iterators into a single iterator. The returned iterator iterates across the elements in {@code a}, followed by the elements in {@code b}, followed by the elements in {@code c}. The source iterators are not polled until necessary. <p>The returned iterator supports {@code remove()} when the corresponding input iterator supports it.
175 Combines four iterators into a single iterator. The returned iterator iterates across the elements in {@code a}, followed by the elements in {@code b}, followed by the elements in {@code c}, followed by the elements in {@code d}. The source iterators are not polled until necessary. <p>The returned iterator supports {@code remove()} when the corresponding input iterator supports it.
176 Gets an iterator representing an immutable snapshot of all subscribers to the given event at the time this method is called.
177 Returns the value of {@code closingFuture}. @throws ExecutionException if {@code closingFuture} is a failed step @throws CancellationException if the {@code closingFuture}'s future was cancelled @throws IllegalArgumentException if {@code closingFuture} is not one of the futures passed to {@link #whenAllComplete(Iterable)} or {@link #whenAllComplete(Iterable)} @throws IllegalStateException if called outside of a call to {@link CombiningCallable#call(DeferredCloser, Peeker)} or {@link AsyncCombiningCallable#call(DeferredCloser, Peeker)}
178 This method is a convenience for testing. Code should call {@link MapMakerInternalMap#containsValue} directly.
179 A sensible, albeit inefficient, definition of {@link #remove} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #remove} to forward to this implementation. <p>Alternately, you may wish to override {@link #remove} with {@code keySet().remove}, assuming that approach would not lead to an infinite loop. @since 7.0
180 A sensible definition of {@link #clear} in terms of the {@code iterator} method of {@link #entrySet}. In many cases, you may wish to override {@link #clear} to forward to this implementation. @since 7.0
181 A sensible definition of {@link #isEmpty} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #isEmpty} to forward to this implementation. @since 7.0
182 A sensible definition of {@link #hashCode} in terms of the {@code iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #hashCode} to forward to this implementation. @since 7.0
183 Computes the difference between two maps. This difference is an immutable snapshot of the state of the maps at the time this method is called. It will never change, even if the maps change at a later time. <p>Since this method uses {@code HashMap} instances internally, the keys of the supplied maps must be well-behaved with respect to {@link Object#equals} and {@link Object#hashCode}. <p><b>Note:</b>If you only need to know whether two maps have the same mappings, call {@code left.equals(right)} instead of this method. @param left the map to treat as the "left" map for purposes of comparison @param right the map to treat as the "right" map for purposes of comparison @return the difference between the two maps
184 Creates a new EventBus named "default".
185 Crosses an element over to the opposite heap by moving it one level down (or up if there are no elements below it). <p>Returns the new position of the element.
186 Fills the hole at {@code index} by moving in the least of its grandchildren to this position, then recursively filling the new hole created. @return the position of the new hole (where the lowest grandchild moved from, that had no grandchild to replace it)
187 A sensible definition of {@link #contains} in terms of the {@code first()} method of {@link #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #contains} to forward to this implementation. @since 7.0
188 A sensible definition of {@link #remove} in terms of the {@code iterator()} method of {@link #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #remove} to forward to this implementation. @since 7.0
189 A sensible default implementation of {@link #subSet(Object, Object)} in terms of {@link #headSet(Object)} and {@link #tailSet(Object)}. In some situations, you may wish to override {@link #subSet(Object, Object)} to forward to this implementation. @since 7.0
190 {@inheritDoc} <p>This method returns a {@link SortedSet}, instead of the {@code Set} specified in the {@link Table} interface.
191 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap} interface.
192 Creates a {@link BloomFilter} with the expected number of insertions and expected false positive probability. <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified, will result in its saturation, and a sharp deterioration of its false positive probability. <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>} is. <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since {@link #equals} also relies on object identity of funnels. @param funnel the funnel of T's that the constructed {@code BloomFilter} will use @param expectedInsertions the number of expected insertions to the constructed {@code BloomFilter}; must be positive @param fpp the desired false positive probability (must be positive and less than 1.0) @return a {@code BloomFilter} @since 19.0
193 Returns the {@code int} value that is equal to {@code x} rounded with the specified rounding mode, if possible. @throws ArithmeticException if <ul> <li>{@code x} is infinite or NaN <li>{@code x}, after being rounded to a mathematical integer using the specified rounding mode, is either less than {@code Integer.MIN_VALUE} or greater than {@code Integer.MAX_VALUE} <li>{@code x} is not a mathematical integer and {@code mode} is {@link RoundingMode#UNNECESSARY} </ul>
194 Returns the {@code long} value that is equal to {@code x} rounded with the specified rounding mode, if possible. @throws ArithmeticException if <ul> <li>{@code x} is infinite or NaN <li>{@code x}, after being rounded to a mathematical integer using the specified rounding mode, is either less than {@code Long.MIN_VALUE} or greater than {@code Long.MAX_VALUE} <li>{@code x} is not a mathematical integer and {@code mode} is {@link RoundingMode#UNNECESSARY} </ul>
195 Adds each member of {@code elements} as a candidate for the top {@code k} elements. This operation takes amortized linear time in the length of {@code elements}. The iterator is consumed after this operation completes. <p>If all input data to this {@code TopKSelector} is in a single {@code Iterator}, prefer {@link Ordering#leastOf(Iterator, int)}, which provides a simpler API for that use case.
196 Returns a {@code TopKSelector} that collects the lowest {@code k} elements added to it, relative to the natural ordering of the elements, and returns them via {@link #topK} in ascending order. @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}
197 Returns a {@code TopKSelector} that collects the greatest {@code k} elements added to it, relative to the natural ordering of the elements, and returns them via {@link #topK} in descending order. @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}
198 Returns {@code true} if {@code n} is a <a href="http://mathworld.wolfram.com/PrimeNumber.html">prime number</a>: an integer <i>greater than one</i> that cannot be factored into a product of <i>smaller</i> positive integers. Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be factored into smaller positive integers). <p>To test larger numbers, use {@link LongMath#isPrime} or {@link BigInteger#isProbablePrime}. @throws IllegalArgumentException if {@code n} is negative @since 20.0
199 Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and {@code k}, that is, {@code n! / (k! (n - k)!)}. <p><b>Warning:</b> the result can take as much as <i>O(k log n)</i> space. @throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}
200 Returns statistics over a dataset containing the given values. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision)
201 Returns statistics over a dataset containing the given values. The iterator will be completely consumed by this method. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision)
202 Adds the given statistics to the dataset, as if the individual values used to compute the statistics had been added directly.
203 Returns statistics over a dataset containing the given values. The stream will be completely consumed by this method. <p>If you have a {@code Stream<Double>} rather than a {@code DoubleStream}, you should collect the values using {@link #toStats()} instead. @param values a series of values @since 28.2 (but only since 33.4.0 in the Android flavor)
204 Returns statistics over a dataset containing the given values. The stream will be completely consumed by this method. <p>If you have a {@code Stream<Integer>} rather than an {@code IntStream}, you should collect the values using {@link #toStats()} instead. @param values a series of values @since 28.2 (but only since 33.4.0 in the Android flavor)
205 Returns statistics over a dataset containing the given values. The stream will be completely consumed by this method. <p>If you have a {@code Stream<Long>} rather than a {@code LongStream}, you should collect the values using {@link #toStats()} instead. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15)) @since 28.2 (but only since 33.4.0 in the Android flavor)
206 Adds the given values to the dataset. The stream will be completely consumed by this method. @param values a series of values @since 28.2 (but only since 33.4.0 in the Android flavor)
207 Adds the given values to the dataset. The stream will be completely consumed by this method. @param values a series of values @since 28.2 (but only since 33.4.0 in the Android flavor)
208 Adds the given values to the dataset. The stream will be completely consumed by this method. @param values a series of values, which will be converted to {@code double} values (this may cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15)) @since 28.2 (but only since 33.4.0 in the Android flavor)
209 Performs an in-place selection, like {@link #selectInPlace}, to select all the indexes {@code allRequired[i]} for {@code i} in the range [{@code requiredFrom}, {@code requiredTo}]. These indexes must be sorted in the array and must all be in the range [{@code from}, {@code to}].
210 Returns an immutable array containing the given values, in order. <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link Builder#addAll(Iterable)}, with all the performance implications associated with that.
211 Returns an immutable array containing the given values, in order. <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link Builder#addAll(Iterable)}, with all the performance implications associated with that.
212 Returns an immutable array containing the given values, in order. <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link Builder#addAll(Iterable)}, with all the performance implications associated with that.
213 Returns a string representation of the {@code UnsignedLong} value, in base {@code radix}. If {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix {@code 10} is used.
214 Returns a string representation of x, where x is treated as unsigned. <p><b>Java 8+ users:</b> use {@link Long#toUnsignedString(long)} instead.
215 An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService} implementations.
216 Creates the {@link ListenableFuture} which will return the result of running {@code combiner} when all Futures complete. {@code combiner} will run using {@code executor}. <p>If the combiner throws a {@code CancellationException}, the returned future will be cancelled. <p>Canceling this Future will attempt to cancel all the component futures. @since 23.6 @return a future whose result is based on {@code combiner} (or based on the input futures passed to {@code whenAllSucceed}, if that is the method you used to create this {@code FutureCombiner}). Even though the future never produces a value other than {@code null}, you should typically check whether it failed: See <a href="https://errorprone.info/bugpattern/FutureReturnValueIgnored">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.
217 Starts a {@link ClosingFuture} pipeline with a {@link ListenableFuture}. <p>{@code future}'s value will not be closed when the pipeline is done even if {@code V} implements {@link Closeable}. In order to start a pipeline with a value that will be closed when the pipeline is done, use {@link #submit(ClosingCallable, Executor)} instead.
218 A sensible definition of {@link #poll} in terms of {@link #remove}. If you override {@link #remove}, you may wish to override {@link #poll} to forward to this implementation. @since 7.0
219 A sensible definition of {@link #peek} in terms of {@link #element}. If you override {@link #element}, you may wish to override {@link #peek} to forward to this implementation. @since 7.0
220 Enqueues a task to run when the previous task (if any) completes. <p>Cancellation does not propagate from the output future to a callable that has begun to execute, but if the output future is cancelled before {@link Callable#call()} is invoked, {@link Callable#call()} will not be invoked.
221 Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new instance of the given checked exception type. This reduces boilerplate for a common use of {@code Future} in which it is unnecessary to programmatically distinguish between exception types or to extract other information from the exception instance. <p>Exceptions from {@code Future.get} are treated as follows: <ul> <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}. <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the interrupt). <li>Any {@link TimeoutException} is wrapped in an {@code X}. <li>Any {@link CancellationException} is propagated untouched, as is any other {@link RuntimeException} (though {@code get} implementations are discouraged from throwing such exceptions). </ul> <p>The overall principle is to continue to treat every checked exception as a checked exception, every unchecked exception as an unchecked exception, and every error as an error. In addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the new stack trace matches that of the current thread. <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor that accepts zero or more arguments, all of type {@code String} or {@code Throwable} (preferring constructors with at least one {@code String}) and calling the constructor via reflection. If the exception did not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code IllegalArgumentException} is thrown. @throws X if {@code get} throws any checked exception except for an {@code ExecutionException} whose cause is not itself a checked exception @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a {@code RuntimeException} as its cause @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code Error} as its cause @throws CancellationException if {@code get} throws a {@code CancellationException} @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or does not have a suitable constructor @since 19.0 (in 10.0 as {@code get} and with different parameter order)
222 Implementing classes should invoke this method once their service has stopped. It will cause the service to transition from {@link State#STARTING} or {@link State#STOPPING} to {@link State#TERMINATED}. @throws IllegalStateException if the service is not one of {@link State#STOPPING}, {@link State#STARTING}, or {@link State#RUNNING}.
223 Invoke this method to transition the service to the {@link State#FAILED}. The service will <b>not be stopped</b> if it is running. Invoke this method when a service has failed critically or otherwise cannot be started nor stopped.
224 Attempts to start the timer immediately prior to the service being started via {@link Service#startAsync()}.
225 Updates the state with the given service transition. <p>This method performs the main logic of ServiceManager in the following steps. <ol> <li>Update the {@link #servicesByState()} <li>Update the {@link #startupTimers} <li>Based on the new state queue listeners to run <li>Run the listeners (outside of the lock) </ol>
226 Enters this monitor when the guard is satisfied. Blocks indefinitely, but may be interrupted. @throws InterruptedException if interrupted while waiting
227 Waits for the guard to be satisfied. Waits indefinitely, but may be interrupted. May be called only by a thread currently occupying this monitor. @throws InterruptedException if interrupted while waiting
228 Enters this monitor when the guard is satisfied. Blocks indefinitely.
229 Waits for the guard to be satisfied. Waits indefinitely. May be called only by a thread currently occupying this monitor.
230 Enters this monitor when the guard is satisfied. Blocks at most the given time, including both the time to acquire the lock and the time to wait for the guard to be satisfied, and may be interrupted. @return whether the monitor was entered, which guarantees that the guard is now satisfied @throws InterruptedException if interrupted while waiting
231 Enters this monitor when the guard is satisfied. Blocks at most the given time, including both the time to acquire the lock and the time to wait for the guard to be satisfied. @return whether the monitor was entered, which guarantees that the guard is now satisfied
232 Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May be called only by a thread currently occupying this monitor. @return whether the guard is now satisfied @throws InterruptedException if interrupted while waiting
233 Waits for the guard to be satisfied. Waits at most the given time. May be called only by a thread currently occupying this monitor. @return whether the guard is now satisfied
234 Returns a future that delegates to this future but will finish early (via a {@link TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires. If the timeout expires, not only will the output future finish, but also the input future ({@code this}) will be cancelled and interrupted. @param timeout when to time out the future @param unit the time unit of the time parameter @param scheduledExecutor The executor service to enforce the timeout.
235 Returns a future that delegates to another but will finish early (via a {@link TimeoutException} wrapped in an {@link ExecutionException}) if the specified duration expires. <p>The delegate future is interrupted and cancelled if it times out. @param delegate The future to delegate to. @param time when to time out the future @param scheduledExecutor The executor service to enforce the timeout. @since 28.0 (but only since 33.4.0 in the Android flavor)
236 Returns an {@link Optional} containing the first element in this fluent iterable that satisfies the given predicate, if such an element exists. <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null} is matched in this fluent iterable, a {@link NullPointerException} will be thrown. <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()}.
237 This is the actual implementation of {@link #precomputed}, but we bounce calls through a method on {@link Platform} so that we can have different behavior in GWT. <p>This implementation tries to be smart in a number of ways. It recognizes cases where the negation is cheaper to precompute than the matcher itself; it tries to build small hash tables for matchers that only match a few characters, and so on. In the worst-case scenario, it constructs an eight-kilobyte bit array and queries that. In many situations this produces a matcher which is faster to query than the original.
238 Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code IOException}, {@code RuntimeException}, {@code Error} or a checked exception of either of the given types. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b> Be sure to declare all of the checked exception types your try block can throw when calling an overload of this method so as to avoid losing the original exception type. <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e, ...);} to ensure the compiler knows that it will throw. @return this method does not return; it always throws @throws IOException when the given throwable is an IOException @throws X1 when the given throwable is of the declared type X1 @throws X2 when the given throwable is of the declared type X2
239 Writes all the given bytes to this sink. @throws IOException if an I/O occurs while writing to this sink
240 Writes all the bytes from the given {@code InputStream} to this sink. Does not close {@code input}. @return the number of bytes written @throws IOException if an I/O occurs while reading from {@code input} or writing to this sink
241 Returns whether the source has zero bytes. The default implementation first checks {@link #sizeIfKnown}, returning true if it's known to be zero and false if it's known to be non-zero. If the size is not known, it falls back to opening a stream and checking for EOF. <p>Note that, in cases where {@code sizeIfKnown} returns zero, it is <i>possible</i> that bytes are actually available for reading. (For example, some special files may return a size of 0 despite actually having content when read.) This means that a source may return {@code true} from {@code isEmpty()} despite having readable content. @throws IOException if an I/O error occurs @since 15.0
242 Returns the size of this source in bytes, even if doing so requires opening and traversing an entire stream. To avoid a potentially expensive operation, see {@link #sizeIfKnown}. <p>The default implementation calls {@link #sizeIfKnown} and returns the value if present. If absent, it will fall back to a heavyweight operation that will open a stream, read (or {@link InputStream#skip(long) skip}, if possible) to the end of the stream and return the total number of bytes that were read. <p>Note that for some sources that implement {@link #sizeIfKnown} to provide a more efficient implementation, it is <i>possible</i> that this method will return a different number of bytes than would be returned by reading all of the bytes (for example, some special files may return a size of 0 despite actually having content when read). <p>In either case, for mutable sources such as files, a subsequent read may return a different number of bytes if the contents are changed. @throws IOException if an I/O error occurs while reading the size of this source
243 Copies the contents of this byte source to the given {@code OutputStream}. Does not close {@code output}. @return the number of bytes copied @throws IOException if an I/O error occurs while reading from this source or writing to {@code output}
244 Copies the contents of this byte source to the given {@code ByteSink}. @return the number of bytes copied @throws IOException if an I/O error occurs while reading from this source or writing to {@code sink}
245 Reads the full contents of this byte source as a byte array. @throws IOException if an I/O error occurs while reading from this source
246 Reads the contents of this byte source using the given {@code processor} to process bytes as they are read. Stops when all bytes have been read or the consumer returns {@code false}. Returns the result produced by the processor. @throws IOException if an I/O error occurs while reading from this source or if {@code processor} throws an {@code IOException} @since 16.0
247 Checks that the contents of this byte source are equal to the contents of the given byte source. @throws IOException if an I/O error occurs while reading from this source or {@code other}
248 Writes the given character sequence to this sink. @throws IOException if an I/O error while writing to this sink
249 Writes all the text from the given {@link Readable} (such as a {@link Reader}) to this sink. Does not close {@code readable} if it is {@code Closeable}. @return the number of characters written @throws IOException if an I/O error occurs while reading from {@code readable} or writing to this sink
250 Returns the length of this source in chars, even if doing so requires opening and traversing an entire stream. To avoid a potentially expensive operation, see {@link #lengthIfKnown}. <p>The default implementation calls {@link #lengthIfKnown} and returns the value if present. If absent, it will fall back to a heavyweight operation that will open a stream, {@link Reader#skip(long) skip} to the end of the stream, and return the total number of chars that were skipped. <p>Note that for sources that implement {@link #lengthIfKnown} to provide a more efficient implementation, it is <i>possible</i> that this method will return a different number of chars than would be returned by reading all of the chars. <p>In either case, for mutable sources such as files, a subsequent read may return a different number of chars if the contents are changed. @throws IOException if an I/O error occurs while reading the length of this source @since 19.0
251 Appends the contents of this source to the given {@link Appendable} (such as a {@link Writer}). Does not close {@code appendable} if it is {@code Closeable}. @return the number of characters copied @throws IOException if an I/O error occurs while reading from this source or writing to {@code appendable}
252 Copies the contents of this source to the given sink. @return the number of characters copied @throws IOException if an I/O error occurs while reading from this source or writing to {@code sink}
253 Reads the first line of this source as a string. Returns {@code null} if this source is empty. <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code \n}. If the source's content does not end in a line termination sequence, it is treated as if it does. @throws IOException if an I/O error occurs while reading from this source
254 Reads lines of text from this source, processing each line as it is read using the given {@link LineProcessor processor}. Stops when all lines have been processed or the processor returns {@code false} and returns the result produced by the processor. <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code \n}. If the source's content does not end in a line termination sequence, it is treated as if it does. @throws IOException if an I/O error occurs while reading from this source or if {@code processor} throws an {@code IOException} @since 16.0
255 Returns whether the source has zero chars. The default implementation first checks {@link #lengthIfKnown}, returning true if it's known to be zero and false if it's known to be non-zero. If the length is not known, it falls back to opening a stream and checking for EOF. <p>Note that, in cases where {@code lengthIfKnown} returns zero, it is <i>possible</i> that chars are actually available for reading. This means that a source may return {@code true} from {@code isEmpty()} despite having readable content. @throws IOException if an I/O error occurs @since 15.0
256 Expands the table if possible.
257 Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a key that doesn't satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 11.0
258 Returns a multimap containing the mappings in {@code unfiltered} whose values satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a value that doesn't satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose value satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 14.0
259 Returns a multimap containing the mappings in {@code unfiltered} that satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a key/value pair that doesn't satisfy the predicate, multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose keys satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. @since 11.0
260 Overridden column iterator to return columns values in globally sorted order.
261 Returns an immutable bimap containing the given entries. The returned bimap iterates over entries in the same order as the original iterable. @throws IllegalArgumentException if two keys have the same value or two values have the same key @throws NullPointerException if any key, value, or entry is null @since 19.0
262 Returns an immutable map containing the specified entries. The returned map iterates over entries in the same order as the original iterable. @throws NullPointerException if any key, value, or entry is null @throws IllegalArgumentException if two entries have the same key @since 19.0
263 Copies an iterable's elements into an array. @param iterable the iterable to copy @param type the type of the elements @return a newly-allocated array into which all the elements of the iterable have been copied
264 Returns an immutable sorted set containing the given elements sorted by the given {@code Comparator}. When multiple elements are equivalent according to {@code compare()}, only the first one specified is included. This method iterates over {@code elements} at most once. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if {@code comparator} or any of {@code elements} is null
265 Binary searches the list for the specified key, using the specified key function. <p>Equivalent to {@link #binarySearch(List, Object, Comparator, KeyPresentBehavior, KeyAbsentBehavior)} using {@link Lists#transform(List, Function) Lists.transform(list, keyFunction)}.
266 {@inheritDoc} <p>Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a {@link List}, instead of the {@link java.util.Collection} specified in the {@link Multimap} interface.
267 Returns a view of a navigable map where each value is transformed by a function. All other properties of the map, such as iteration order, are left intact. For example, the code: {@snippet : NavigableMap<String, Integer> map = Maps.newTreeMap(); map.put("a", 4); map.put("b", 9); Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in); NavigableMap<String, Double> transformed = Maps.transformNavigableValues(map, sqrt); System.out.println(transformed); } ... prints {@code {a=2.0, b=3.0}}. <p>Changes in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map. <p>It's acceptable for the underlying map to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed map might contain null values, if the function sometimes gives a null result. <p>The returned map is not thread-safe or serializable, even if the underlying map is. <p>The function is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the function will be applied many times for bulk operations like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing. @since 13.0
268 Remove a row key / column key / value mapping, if present.
269 Returns a synchronized (thread-safe) {@code ListMultimap} backed by the specified multimap. <p>You must follow the warnings described in {@link #synchronizedMultimap}. @param multimap the multimap to be wrapped @return a synchronized view of the specified multimap
270 Returns a synchronized (thread-safe) {@code SetMultimap} backed by the specified multimap. <p>You must follow the warnings described in {@link #synchronizedMultimap}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param multimap the multimap to be wrapped @return a synchronized view of the specified multimap
271 Reads all characters from a {@link Readable} object into a {@link String}. Does not close the {@code Readable}. @param r the object to read from @return a string containing all the characters @throws IOException if an I/O error occurs
272 Returns a {@code Future} whose result is taken from this {@code Future} or, if this {@code Future} fails with the given {@code exceptionType}, from the result provided by the {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so if the primary input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an exception is thrown, this exception is used as the result of the output {@code Future}. <p>Usage example: {@snippet : // Falling back to a zero counter in case an exception happens when processing the RPC to fetch // counters. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catching(FetchException.class, x -> 0, directExecutor()); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link #addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #transform}. @param exceptionType the exception type that triggers use of {@code fallback}. The exception type is matched against the input's exception. "The input's exception" means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a different kind of exception, that exception itself. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding {@code Throwable.class} in particular. @param fallback the {@link Function} to be called if the input fails with the expected exception type. The function's argument is the input's exception. "The input's exception" means the cause of the {@link ExecutionException} thrown by {@code this.get()} or, if {@code get()} throws a different kind of exception, that exception itself. @param executor the executor that runs {@code fallback} if the input fails
273 Returns a new {@code Future} whose result is derived from the result of this {@code Future}. If this input {@code Future} fails, the returned {@code Future} fails with the same exception (and the function is not invoked). Example usage: {@snippet : ListenableFuture<List<Row>> rowsFuture = queryFuture.transform(QueryResult::getRows, executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link #addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel the input, and if the input is cancelled, the returned {@code Future} will receive a callback in which it will attempt to cancel itself. <p>An example use of this method is to convert a serializable object returned from an RPC into a POJO. <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenApply} and {@link java.util.concurrent.CompletableFuture#thenApplyAsync}. It can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}. @param function A Function to transform the results of this future to the results of the returned future. @param executor Executor to run the function in. @return A future that holds result of the transformation.
274 Returns a {@link GraphBuilder} for building directed graphs.
275 Returns a {@link GraphBuilder} for building undirected graphs.
276 Returns a {@link GraphBuilder} initialized with all properties queryable from {@code graph}. <p>The "queryable" properties are those that are exposed through the {@link Graph} interface, such as {@link Graph#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)}, are not set in the new builder.
277 Returns a {@link NetworkBuilder} for building directed networks.
278 Returns a {@link NetworkBuilder} for building undirected networks.
279 Returns a {@link NetworkBuilder} initialized with all properties queryable from {@code network}. <p>The "queryable" properties are those that are exposed through the {@link Network} interface, such as {@link Network#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)}, are not set in the new builder.
280 Returns a {@link ValueGraphBuilder} for building directed graphs.
281 Returns a {@link ValueGraphBuilder} for building undirected graphs.
282 Returns a {@link ValueGraphBuilder} initialized with all properties queryable from {@code graph}. <p>The "queryable" properties are those that are exposed through the {@link ValueGraph} interface, such as {@link ValueGraph#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)}, are not set in the new builder.
283 Registers a {@link Listener} to be {@linkplain Executor#execute executed} on the given executor. The listener will not have previous state changes replayed, so it is suggested that listeners are added before any of the managed services are {@linkplain Service#startAsync started}. <p>{@code addListener} guarantees execution ordering across calls to a given listener but not across calls to multiple listeners. Specifically, a given listener will have its callbacks invoked in the same order as the underlying service enters those states. Additionally, at most one of the listener's callbacks will execute at once. However, multiple listeners' callbacks may execute concurrently, and listeners may execute in an order different from the one in which they were registered. <p>RuntimeExceptions thrown by a listener will be caught and logged. Any exception thrown during {@code Executor.execute} (e.g., a {@code RejectedExecutionException}) will be caught and logged. <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener} documentation. @param listener the listener to run when the manager changes state @param executor the executor in which the listeners callback methods will be run.
284 Creates an empty {@code CompactLinkedHashSet} instance.
285 Creates a <i>mutable</i> {@code CompactHashSet} instance containing the elements of the given collection in unspecified order. @param collection the elements that the set should contain @return a new {@code CompactHashSet} containing those elements (minus duplicates)
286 Creates a {@code CompactLinkedHashSet} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures. @param expectedSize the number of elements you expect to add to the returned set @return a new, empty {@code CompactLinkedHashSet} with enough capacity to hold {@code expectedSize} elements without resizing @throws IllegalArgumentException if {@code expectedSize} is negative
287 Creates a new {@code SortedSetMultimap} that uses the provided map and factory. It can generate a multimap based on arbitrary {@link Map} and {@link SortedSet} classes. <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code toString} methods for the multimap and its returned views. However, the multimap's {@code get} method returns instances of a different class than {@code factory.get()} does. <p>The multimap is serializable if {@code map}, {@code factory}, the sets generated by {@code factory}, and the multimap contents are all serializable. <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if {@code map} and the instances generated by {@code factory} are. Concurrent read operations will work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link #synchronizedSortedSetMultimap}. <p>Call this method only when the simpler methods {@link TreeMultimap#create()} and {@link TreeMultimap#create(Comparator, Comparator)} won't suffice. <p>Note: the multimap assumes complete ownership over of {@code map} and the sets returned by {@code factory}. Those objects should not be manually updated and they should not use soft, weak, or phantom references. @param map place to store the mapping from each key to its corresponding values @param factory supplier of new, empty sorted sets that will each hold all values for a given key @throws IllegalArgumentException if {@code map} is not empty
288 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableMultiset}. Elements iterate in order by the <i>first</i> appearance of that element in encounter order. @since 21.0
289 Returns a {@code Collector} that accumulates elements into an {@code ImmutableMultiset} whose elements are the result of applying {@code elementFunction} to the inputs, with counts equal to the result of applying {@code countFunction} to the inputs. <p>If the mapped elements contain duplicates (according to {@link Object#equals}), the first occurrence in encounter order appears in the resulting multiset, with count equal to the sum of the outputs of {@code countFunction.applyAsInt(t)} for each {@code t} mapped to that element. @since 22.0
290 Returns a new builder. The generated builder is equivalent to the builder created by the {@link Builder} constructor.
291 Returns a string containing the string representation of each of {@code parts}, using the previously configured separator between each.
292 Returns a {@link String} containing all of the elements of this fluent iterable joined with {@code joiner}. <p><b>{@code Stream} equivalent:</b> {@code joiner.join(stream.iterator())}, or, if you are not using any optional {@code Joiner} features, {@code stream.collect(Collectors.joining(delimiter)}. @since 18.0
293 Returns the lexically cleaned form of the path name, <i>usually</i> (but not always) equivalent to the original. The following heuristics are used: <ul> <li>empty string becomes . <li>. stays as . <li>fold out ./ <li>fold out ../ when possible <li>collapse multiple slashes <li>delete trailing slashes (unless the path is just "/") </ul> <p>These heuristics do not always match the behavior of the filesystem. In particular, consider the path {@code a/../b}, which {@code simplifyPath} will change to {@code b}. If {@code a} is a symlink to {@code x}, {@code a/../b} may refer to a sibling of {@code x}, rather than the sibling of {@code a} referred to by {@code b}. @since 11.0
294 Parses a trie node and returns the number of characters consumed. @param stack The prefixes that precede the characters represented by this node. Each entry of the stack is in reverse order. @param encoded The serialized trie. @param start An index in the encoded serialized trie to begin reading characters from. @param builder A map builder to which all entries will be added. @return The number of characters consumed from {@code encoded}.
295 Builds a thread-safe map. This method does not alter the state of this {@code MapMaker} instance, so it can be invoked again to create multiple independent maps. <p>The bulk operations {@code putAll}, {@code equals}, and {@code clear} are not guaranteed to be performed atomically on the returned map. Additionally, {@code size} and {@code containsValue} are implemented as bulk read operations, and thus may fail to observe concurrent writes. @return a serializable concurrent map having the requested features
296 Applies {@code function} to each element of this fluent iterable and returns a fluent iterable with the concatenated combination of results. {@code function} returns an Iterable of results. <p>The returned fluent iterable's iterator supports {@code remove()} if this function-returned iterables' iterator does. After a successful {@code remove()} call, the returned fluent iterable no longer contains the corresponding element. <p><b>{@code Stream} equivalent:</b> {@link Stream#flatMap} (using a function that produces streams, not iterables). @since 13.0 (required {@code Function<E, Iterable<T>>} until 14.0)
297 Combines multiple iterables into a single iterable. The returned iterable has an iterator that traverses the elements of each iterable in {@code inputs}. The input iterators are not polled until necessary. <p>The returned iterable's iterator supports {@code remove()} when the corresponding input iterator supports it. <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code Streams.concat(...)}. @throws NullPointerException if any of the provided iterables is null
298 {@inheritDoc} <p>The default {@link AbstractFuture} implementation throws {@code InterruptedException} if the current thread is interrupted during the call, even if the value is already available. @throws CancellationException {@inheritDoc}
299 Adds {@code node} to the graph and returns the associated {@link GraphConnections}. @throws IllegalStateException if {@code node} is already present
300 Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the lock, but does not wait for the guard to be satisfied. @return whether the monitor was entered, which guarantees that the guard is now satisfied @since 28.0 (but only since 33.4.0 in the Android flavor)
301 Enum values can override for performance reasons.
302 Enum values can override for performance reasons.
303 Enum values can override for performance reasons.
304 Converts the specified {@code String str} from this format to the specified {@code format}. A "best effort" approach is taken; if {@code str} does not conform to the assumed format, then the behavior of this method is undefined but we make a reasonable effort at converting anyway.
305 Returns {@code true} if a character sequence contains no matching BMP characters. Equivalent to {@code !matchesAnyOf(sequence)}. <p>The default implementation iterates over the sequence, invoking {@link #matches} for each character, until this returns {@code true} or the end is reached. @param sequence the character sequence to examine, possibly empty @return {@code true} if this matcher matches no characters in the sequence, including when the sequence is empty
306 Returns a string containing all non-matching characters of a character sequence, in order. For example: {@snippet : CharMatcher.is('a').removeFrom("bazaar") } ... returns {@code "bzr"}.
307 Returns a string copy of the input character sequence, with each matching BMP character replaced by a given replacement character. For example: {@snippet : CharMatcher.is('a').replaceFrom("radar", 'o') } ... returns {@code "rodor"}. <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching character, then iterates the remainder of the sequence calling {@link #matches(char)} for each character. @param sequence the character sequence to replace matching characters in @param replacement the character to append to the result string in place of each matching character in {@code sequence} @return the new string
308 Examines the Inet6Address to extract the embedded IPv4 client address if the InetAddress is an IPv6 address of one of the specified address types that contain an embedded IPv4 address. <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial spoofability. With other transition addresses spoofing involves (at least) infection of one's BGP routing table. @param ip {@link Inet6Address} to be examined for embedded IPv4 client address @return {@link Inet4Address} of embedded IPv4 client address @throws IllegalArgumentException if the argument does not have a valid embedded IPv4 address
309 Reads the specified bytes of data from the underlying input stream and updates the hasher with the bytes read.
310 Attempts to read enough bytes from the stream to fill the given byte array, with the same behavior as {@link DataInput#readFully(byte[])}. Does not close the stream. @param in the input stream to read from. @param b the buffer into which the data is read. @throws EOFException if this stream reaches the end before reading all the bytes. @throws IOException if an I/O error occurs.
311 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Booleans.asList(array), distance)}, but is somewhat faster. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
312 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Bytes.asList(array), distance)}, but is somewhat faster. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
313 Sorts the elements of {@code array} in descending order. @since 23.1
314 Sorts the elements of {@code array} in descending order. @since 23.1
315 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Chars.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
316 Sorts the elements of {@code array} in descending order. <p>Note that this method uses the total order imposed by {@link Double#compare}, which treats all NaN values as equal and 0.0 as greater than -0.0. @since 23.1
317 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Bytes.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
318 Sorts the elements of {@code array} in descending order. <p>Note that this method uses the total order imposed by {@link Float#compare}, which treats all NaN values as equal and 0.0 as greater than -0.0. @since 23.1
319 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Floats.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
320 Sorts the elements of {@code array} in descending order. @since 23.1
321 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Ints.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
322 Sorts the elements of {@code array} in descending order. @since 23.1
323 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Longs.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
324 Sorts the elements of {@code array} in descending order. @since 23.1
325 Performs a right rotation of {@code array} of "distance" places, so that the first element is moved to index "distance", and the element at index {@code i} ends up at index {@code (distance + i) mod array.length}. This is equivalent to {@code Collections.rotate(Shorts.asList(array), distance)}, but is considerably faster and avoids allocation and garbage collection. <p>The provided "distance" may be negative, which will rotate left. @since 32.0.0
326 Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries into keys and values using the specified separator. @since 10.0
327 Creates a {@code RateLimiter} with the specified stable throughput, given as "permits per second" (commonly referred to as <i>QPS</i>, queries per second), and a <i>warmup period</i>, during which the {@code RateLimiter} smoothly ramps up its rate, until it reaches its maximum rate at the end of the period (as long as there are enough requests to saturate it). Similarly, if the {@code RateLimiter} is left <i>unused</i> for a duration of {@code warmupPeriod}, it will gradually return to its "cold" state, i.e. it will go through the same warming up process as when it was first created. <p>The returned {@code RateLimiter} is intended for cases where the resource that actually fulfills the requests (e.g., a remote server) needs "warmup" time, rather than being immediately accessed at the stable (maximum) rate. <p>The returned {@code RateLimiter} starts in a "cold" state (i.e. the warmup period will follow), and if it is left unused for long enough, it will return to that state. @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in how many permits become available per second @param warmupPeriod the duration of the period where the {@code RateLimiter} ramps up its rate, before reaching its stable (maximum) rate @param unit the time unit of the warmupPeriod argument @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or {@code warmupPeriod} is negative
328 Returns an unmodifiable view of the specified sorted multiset. Query operations on the returned multiset "read through" to the specified multiset, and attempts to modify the returned multiset result in an {@link UnsupportedOperationException}. <p>The returned multiset will be serializable if the specified multiset is serializable. @param sortedMultiset the sorted multiset for which an unmodifiable view is to be generated @return an unmodifiable view of the multiset @since 11.0
329 Returns an unmodifiable view of the specified navigable set. This method allows modules to provide users with "read-only" access to internal navigable sets. Query operations on the returned set "read through" to the specified set, and attempts to modify the returned set, whether direct or via its collection views, result in an {@code UnsupportedOperationException}. <p>The returned navigable set will be serializable if the specified navigable set is serializable. <p><b>Java 8+ users and later:</b> Prefer {@link Collections#unmodifiableNavigableSet}. @param set the navigable set for which an unmodifiable view is to be returned @return an unmodifiable view of the specified navigable set @since 12.0
330 Returns an unmodifiable view of the specified collection of entries. The {@link Entry#setValue} operation throws an {@link UnsupportedOperationException}. If the specified collection is a {@code Set}, the returned collection is also a {@code Set}. @param entries the entries for which to return an unmodifiable view @return an unmodifiable view of the entries
331 Returns an unmodifiable view of the specified {@code SortedSetMultimap}. Query operations on the returned multimap "read through" to the specified multimap, and attempts to modify the returned multimap, either directly or through the multimap's views, result in an {@code UnsupportedOperationException}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param delegate the multimap for which an unmodifiable view is to be returned @return an unmodifiable view of the specified multimap
332 Starts a {@link ClosingFuture} pipeline with a {@link ListenableFuture}. <p>If {@code future} succeeds, its value will be closed (using {@code closingExecutor)}) when the pipeline is done, even if the pipeline is canceled or fails. <p>Cancelling the pipeline will not cancel {@code future}, so that the pipeline can access its value in order to close it. @param future the future to create the {@code ClosingFuture} from. For discussion of the future's result type {@code C}, see {@link DeferredCloser#eventuallyClose(Object, Executor)}. @param closingExecutor the future's result will be closed on this executor @deprecated Creating {@link Future}s of closeable types is dangerous in general because the underlying value may never be closed if the {@link Future} is canceled after its operation begins. Consider replacing code that creates {@link ListenableFuture}s of closeable types, including those that pass them to this method, with {@link #submit(ClosingCallable, Executor)} in order to ensure that resources do not leak. Or, to start a pipeline with a {@link ListenableFuture} that doesn't create values that should be closed, use {@link ClosingFuture#from}.
333 Registers separate success and failure callbacks to be run when this {@code Future}'s computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the computation is already complete, immediately. <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of callbacks, but any callback added through this method is guaranteed to be called once the computation is complete. <p>Example: {@snippet : future.addCallback( new FutureCallback<QueryResult>() { public void onSuccess(QueryResult result) { storeInCache(result); } public void onFailure(Throwable t) { reportError(t); } }, executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link #addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight callbacks passed to this method. <p>For a more general interface to attach a completion listener, see {@link #addListener}. <p>This method is similar to {@link java.util.concurrent.CompletableFuture#whenComplete} and {@link java.util.concurrent.CompletableFuture#whenCompleteAsync}. It also serves the use case of {@link java.util.concurrent.CompletableFuture#thenAccept} and {@link java.util.concurrent.CompletableFuture#thenAcceptAsync}. @param callback The callback to invoke when this {@code Future} is completed. @param executor The executor to run {@code callback} when the future completes.
334 Returns a new, empty {@code EnumBiMap} using the specified key and value types. @param keyType the key type @param valueType the value type
335 Returns a new, empty {@code EnumHashBiMap} using the specified key type. @param keyType the key type
336 Creates an empty multiset containing the given initial elements, sorted according to the elements' natural order. <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}. <p>The type specification is {@code <E extends Comparable>}, instead of the more specific {@code <E extends Comparable<? super E>>}, to support classes defined without generics.
337 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableSortedMultiset#orderedBy(Comparator)}.
338 Stores a collection of values with the same key, replacing any existing values for that key. The returned collection is immutable. <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link Multimap} interface. <p>Any duplicates in {@code values} will be stored in the multimap once.
339 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap} interface. <p>Any duplicates in {@code values} will be stored in the multimap once.
340 Creates a new {@code HashMultiset} containing the specified elements. <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}. @param elements the elements that the multiset should contain
341 Constructs an empty {@code ArrayListMultimap} with enough capacity to hold the specified numbers of keys and values without resizing. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys(expectedKeys).arrayListValues(expectedValuesPerKey).build()}, which provides more control over the underlying data structure. @param expectedKeys the expected number of distinct keys @param expectedValuesPerKey the expected average number of values per key @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is negative
342 Constructs an empty {@code HashMultimap} with enough capacity to hold the specified numbers of keys and values without rehashing. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys(expectedKeys).hashSetValues(expectedValuesPerKey).build()}, which provides more control over the underlying data structure. @param expectedKeys the expected number of distinct keys @param expectedValuesPerKey the expected average number of values per key @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is negative
343 Constructs a {@code HashMultimap} with the same mappings as the specified multimap. If a key-value mapping appears multiple times in the input multimap, it only appears once in the constructed multimap. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys().hashSetValues().build(multimap)}, which provides more control over the underlying data structure. @param multimap the multimap whose contents are copied to this multimap
344 Constructs an empty {@code LinkedListMultimap} with enough capacity to hold the specified number of keys without rehashing. @param expectedKeys the expected number of distinct keys @throws IllegalArgumentException if {@code expectedKeys} is negative
345 Creates a new {@code LinkedHashMultiset} containing the specified elements. <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}. @param elements the elements that the multiset should contain
346 Creates a new, empty {@code LinkedHashMultimap} with the default initial capacities.
347 Constructs an empty {@code LinkedHashMultimap} with enough capacity to hold the specified numbers of keys and values without rehashing. @param expectedKeys the expected number of distinct keys @param expectedValuesPerKey the expected average number of values per key @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is negative
348 Constructs a mutable graph with the properties specified in {@code builder}.
349 Constructs a mutable graph with the properties specified in {@code builder}.
350 Adds the given {@code cell} to the table, making it immutable if necessary. Duplicate key pairs are not allowed and will cause {@link #build} to fail.
351 Adds the given {@code entry} to the bimap. Duplicate keys or values are not allowed, and will cause {@link #build} to fail. @since 19.0
352 Adds all of the given entries to the built map. If the same key is put more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last value put for that key. @throws NullPointerException if any key, value, or entry is null @since 19.0
353 Adds the given {@code entry} to the map, making it immutable if necessary. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause {@link #build} to fail. @since 11.0
354 Returns a multimap view of the map. @since 14.0
355 Returns a newly-created immutable sorted map. <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method will throw an exception if there are duplicate keys. The {@code build()} method will soon be deprecated. @throws IllegalArgumentException if any two keys are equal according to the comparator (which might be the keys' natural order)
356 Copies all associations from the specified range map into this builder.
357 Add all of the specified ranges to this builder. Adjacent ranges are permitted and will be merged, but overlapping ranges will cause an exception when {@link #build()} is called. @throws IllegalArgumentException if any inserted ranges are empty @since 21.0
358 Returns a list containing the nonempty intersections of {@code range} with the ranges in this range set.
359 Returns a {@code ContiguousSet} containing the same values in the given domain {@linkplain Range#contains contained} by the range. @throws IllegalArgumentException if neither range nor the domain has a lower bound, or if neither has an upper bound @since 13.0
360 Returns the range that spans the given range and entry, if the entry can be coalesced.
361 Returns an {@link ImmutableSortedSet} containing the same values in the given domain {@linkplain RangeSet#contains contained} by this range set. <p><b>Note:</b> {@code a.asSet(d).equals(b.asSet(d))} does not imply {@code a.equals(b)}! For example, {@code a} and {@code b} could be {@code [2..4]} and {@code (1..5)}, or the empty ranges {@code [3..3)} and {@code [4..4)}. <p><b>Warning:</b> Be extremely careful what you do with the {@code asSet} view of a large range set (such as {@code ImmutableRangeSet.of(Range.greaterThan(0))}). Certain operations on such a set can be performed efficiently, but others (such as {@link Set#hashCode} or {@link Collections#frequency}) can cause major performance problems. <p>The returned set's {@link Object#toString} method returns a shorthand form of the set's contents, such as {@code "[1..100]}"}. @throws IllegalArgumentException if neither this range nor the domain has a lower bound, or if neither has an upper bound
362 Returns an immutable map instance containing the given entries. Internally, the returned map will be backed by an {@link EnumMap}. <p>The iteration order of the returned map follows the enum's iteration order, not the order in which the elements appear in the given map. @param map the map to make an immutable copy of @return an immutable map containing those entries @since 14.0
363 {@inheritDoc} <p>The value {@code Map<C, V>} instances in the returned map are {@link ImmutableMap} instances as well.
364 @since 12.0
365 Returns a newly-created {@code ImmutableList} based on the contents of the {@code Builder}.
366 Views the array as an immutable list. Does not check for nulls; does not copy. <p>The array must be internally created.
367 Returns a newly-created {@code ImmutableSortedSet} based on the contents of the {@code Builder} and its comparator.
368 Creates an {@code ImmutableMap} backed by a JDK HashMap. Used when probable hash flooding is detected. This implementation may replace the entries in entryArray with its own entry objects (though they will have the same key/value contents), and will take ownership of entryArray.
369 Returns the index of the leftmost part of the suffix, or -1 if not found. Note that the value defined as a suffix may not produce {@code true} results from {@link #isPublicSuffix()} or {@link #isRegistrySuffix()} if the domain ends with an excluded domain pattern such as {@code "nhs.uk"}. <p>If a {@code desiredType} is specified, this method only finds suffixes of the given type. Otherwise, it finds the first suffix of any type.
370 Returns an immutable set instance containing the given enum elements. Internally, the returned set will be backed by an {@link EnumSet}. <p>The iteration order of the returned set follows the enum's iteration order, not the order in which the elements appear in the given collection. @param elements the elements, all of the same {@code enum} type, that the set should contain @return an immutable set containing those elements, minus duplicates
371 Scope the return type to {@link UnmodifiableIterator} to ensure this is an unmodifiable view. @since 20.0 (present with return type {@link Iterator} since 2.0)
372 Posts an event to all registered subscribers. This method will return successfully after the event has been posted to all subscribers, and regardless of any exceptions thrown by subscribers. <p>If no subscribers have been subscribed for {@code event}'s class, and {@code event} is not already a {@link DeadEvent}, it will be wrapped in a DeadEvent and reposted. @param event event to post.
373 Tries to move {@code toTrickle} from a min to a max level and bubble up there. If it moved before {@code removeIndex} this method returns a pair as described in {@link #removeAt}.
374 Returns the comparator that orders the rows. With natural ordering, {@link Ordering#natural()} is returned. @deprecated Use {@code table.rowKeySet().comparator()} instead.
375 Returns a synchronized (thread-safe) navigable set backed by the specified navigable set. In order to guarantee serial access, it is critical that <b>all</b> access to the backing navigable set is accomplished through the returned navigable set (or its views). <p>It is imperative that the user manually synchronize on the returned sorted set when iterating over it or any of its {@code descendingSet}, {@code subSet}, {@code headSet}, or {@code tailSet} views. {@snippet : NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>()); ... synchronized (set) { // Must be in the synchronized block Iterator<E> it = set.iterator(); while (it.hasNext()) { foo(it.next()); } } } <p>or: {@snippet : NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>()); NavigableSet<E> set2 = set.descendingSet().headSet(foo); ... synchronized (set) { // Note: set, not set2!!! // Must be in the synchronized block Iterator<E> it = set2.descendingIterator(); while (it.hasNext()) { foo(it.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>The returned navigable set will be serializable if the specified navigable set is serializable. <p><b>Java 8+ users and later:</b> Prefer {@link Collections#synchronizedNavigableSet}. @param navigableSet the navigable set to be "wrapped" in a synchronized navigable set. @return a synchronized view of the specified navigable set. @since 13.0
376 Creates a {@link BloomFilter} with the expected number of insertions and expected false positive probability. <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified, will result in its saturation, and a sharp deterioration of its false positive probability. <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>} is. <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since {@link #equals} also relies on object identity of funnels. @param funnel the funnel of T's that the constructed {@code BloomFilter} will use @param expectedInsertions the number of expected insertions to the constructed {@code BloomFilter}; must be positive @param fpp the desired false positive probability (must be positive and less than 1.0) @return a {@code BloomFilter}
377 Creates a {@link BloomFilter} with the expected number of insertions and a default expected false positive probability of 3%. <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified, will result in its saturation, and a sharp deterioration of its false positive probability. <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>} is. <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since {@link #equals} also relies on object identity of funnels. @param funnel the funnel of T's that the constructed {@code BloomFilter} will use @param expectedInsertions the number of expected insertions to the constructed {@code BloomFilter}; must be positive @return a {@code BloomFilter} @since 19.0
378 Returns an estimate for the total number of distinct elements that have been added to this Bloom filter. This approximation is reasonably accurate if it does not exceed the value of {@code expectedInsertions} that was used when constructing the filter. @since 22.0
379 Returns a {@code Collector} that returns the {@code k} smallest (relative to the specified {@code Comparator}) input elements, in ascending order, as an unmodifiable {@code List}. Ties are broken arbitrarily. <p>For example: {@snippet : Stream.of("foo", "quux", "banana", "elephant") .collect(least(2, comparingInt(String::length))) // returns {"foo", "quux"} } <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log k)), as opposed to e.g. {@code Stream.sorted(comparator).limit(k)}, which currently takes O(n log n) time and O(n) space. @throws IllegalArgumentException if {@code k < 0} @since 22.0
380 Returns the {@code k} least elements from the given iterator according to this ordering, in order from least to greatest. If there are fewer than {@code k} elements present, all will be included. <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple elements are equivalent, it is undefined which will come first. <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).collect(Comparators.least(k, thisComparator))} instead. @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending order @throws IllegalArgumentException if {@code k} is negative @since 14.0
381 Adds each member of {@code elements} as a candidate for the top {@code k} elements. This operation takes amortized linear time in the length of {@code elements}. <p>If all input data to this {@code TopKSelector} is in a single {@code Iterable}, prefer {@link Ordering#leastOf(Iterable, int)}, which provides a simpler API for that use case.
382 Returns a string representation of the {@code UnsignedLong} value, in base 10.
383 CycleDetectingLock implementations must call this method before attempting to acquire the lock.
384 Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function to its value. The function can use a {@link DeferredCloser} to capture objects to be closed when the pipeline is done. <p>If this {@code ClosingFuture} fails, the function will not be called, and the derived {@code ClosingFuture} will be equivalent to this one. <p>If the function throws an exception, that exception is used as the result of the derived {@code ClosingFuture}. <p>Example usage: {@snippet : ClosingFuture<List<Row>> rowsFuture = queryFuture.transform((closer, result) -> result.getRows(), executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. <p>After calling this method, you may not call {@link #finishToFuture()}, {@link #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on the original {@code ClosingFuture} instance. @param function transforms the value of this step to the value of the derived step @param executor executor to run the function in @return the derived step @throws IllegalStateException if a {@code ClosingFuture} has already been derived from this one, or if this {@code ClosingFuture} has already been {@linkplain #finishToFuture() finished}
385 Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function that returns a {@code ClosingFuture} to its value. The function can use a {@link DeferredCloser} to capture objects to be closed when the pipeline is done (other than those captured by the returned {@link ClosingFuture}). <p>If this {@code ClosingFuture} succeeds, the derived one will be equivalent to the one returned by the function. <p>If this {@code ClosingFuture} fails, the function will not be called, and the derived {@code ClosingFuture} will be equivalent to this one. <p>If the function throws an exception, that exception is used as the result of the derived {@code ClosingFuture}. But if the exception is thrown after the function creates a {@code ClosingFuture}, then none of the closeable objects in that {@code ClosingFuture} will be closed. <p>Usage guidelines for this method: <ul> <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a {@code ClosingFuture}. If possible, prefer calling {@link #transform(ClosingFunction, Executor)} instead, with a function that returns the next value directly. <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()} for every closeable object this step creates in order to capture it for later closing. <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code ClosingFuture} call {@link #from(ListenableFuture)}. <li>In case this step doesn't create new closeables, you can adapt an API that returns a {@link ListenableFuture} to return a {@code ClosingFuture} by wrapping it with a call to {@link #withoutCloser(AsyncFunction)} </ul> <p>Example usage: {@snippet : // Result.getRowsClosingFuture() returns a ClosingFuture. ClosingFuture<List<Row>> rowsFuture = queryFuture.transformAsync((closer, result) -> result.getRowsClosingFuture(), executor); // Result.writeRowsToOutputStreamFuture() returns a ListenableFuture that resolves to the // number of written rows. openOutputFile() returns a FileOutputStream (which implements // Closeable). ClosingFuture<Integer> rowsFuture2 = queryFuture.transformAsync( (closer, result) -> { FileOutputStream fos = closer.eventuallyClose(openOutputFile(), closingExecutor); return ClosingFuture.from(result.writeRowsToOutputStreamFuture(fos)); }, executor); // Result.getRowsFuture() returns a ListenableFuture (no new closeables are created). ClosingFuture<List<Row>> rowsFuture3 = queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. (Specifically, {@code directExecutor} functions should avoid heavyweight operations inside {@code AsyncClosingFunction.apply}. Any heavyweight operations should occur in other threads responsible for completing the returned {@code ClosingFuture}.) <p>After calling this method, you may not call {@link #finishToFuture()}, {@link #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on the original {@code ClosingFuture} instance. @param function transforms the value of this step to a {@code ClosingFuture} with the value of the derived step @param executor executor to run the function in @return the derived step @throws IllegalStateException if a {@code ClosingFuture} has already been derived from this one, or if this {@code ClosingFuture} has already been {@linkplain #finishToFuture() finished}
386 Returns the result of {@link Future#get()}, converting most exceptions to a new instance of the given checked exception type. This reduces boilerplate for a common use of {@code Future} in which it is unnecessary to programmatically distinguish between exception types or to extract other information from the exception instance. <p>Exceptions from {@code Future.get} are treated as follows: <ul> <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}. <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the interrupt). <li>Any {@link CancellationException} is propagated untouched, as is any other {@link RuntimeException} (though {@code get} implementations are discouraged from throwing such exceptions). </ul> <p>The overall principle is to continue to treat every checked exception as a checked exception, every unchecked exception as an unchecked exception, and every error as an error. In addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the new stack trace matches that of the current thread. <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor that accepts zero or more arguments, all of type {@code String} or {@code Throwable} (preferring constructors with at least one {@code String}, then preferring constructors with at least one {@code Throwable}) and calling the constructor via reflection. If the exception did not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code IllegalArgumentException} is thrown. @throws X if {@code get} throws any checked exception except for an {@code ExecutionException} whose cause is not itself a checked exception @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a {@code RuntimeException} as its cause @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code Error} as its cause @throws CancellationException if {@code get} throws a {@code CancellationException} @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or does not have a suitable constructor @since 19.0 (in 10.0 as {@code get})
387 Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new instance of the given checked exception type. This reduces boilerplate for a common use of {@code Future} in which it is unnecessary to programmatically distinguish between exception types or to extract other information from the exception instance. <p>Exceptions from {@code Future.get} are treated as follows: <ul> <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}. <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the interrupt). <li>Any {@link TimeoutException} is wrapped in an {@code X}. <li>Any {@link CancellationException} is propagated untouched, as is any other {@link RuntimeException} (though {@code get} implementations are discouraged from throwing such exceptions). </ul> <p>The overall principle is to continue to treat every checked exception as a checked exception, every unchecked exception as an unchecked exception, and every error as an error. In addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the new stack trace matches that of the current thread. <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor that accepts zero or more arguments, all of type {@code String} or {@code Throwable} (preferring constructors with at least one {@code String}, then preferring constructors with at least one {@code Throwable}) and calling the constructor via reflection. If the exception did not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code IllegalArgumentException} is thrown. @throws X if {@code get} throws any checked exception except for an {@code ExecutionException} whose cause is not itself a checked exception @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a {@code RuntimeException} as its cause @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code Error} as its cause @throws CancellationException if {@code get} throws a {@code CancellationException} @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or does not have a suitable constructor @since 28.0 (but only since 33.4.0 in the Android flavor)
388 Atomically reschedules this task and assigns the new future to {@link #cancellationDelegate}.
389 Implementing classes should invoke this method once their service has started. It will cause the service to transition from {@link State#STARTING} to {@link State#RUNNING}. @throws IllegalStateException if the service is not {@link State#STARTING}.
390 Initiates service {@linkplain Service#startAsync startup} on all the services being managed. It is only valid to call this method if all of the services are {@linkplain State#NEW new}. @return this @throws IllegalStateException if any of the Services are not {@link State#NEW new} when the method is called.
391 Enters this monitor when the guard is satisfied. Blocks at most the given time, including both the time to acquire the lock and the time to wait for the guard to be satisfied, and may be interrupted. @return whether the monitor was entered, which guarantees that the guard is now satisfied @throws InterruptedException if interrupted while waiting @since 28.0 (but only since 33.4.0 in the Android flavor)
392 Enters this monitor when the guard is satisfied. Blocks at most the given time, including both the time to acquire the lock and the time to wait for the guard to be satisfied. @return whether the monitor was entered, which guarantees that the guard is now satisfied @since 28.0 (but only since 33.4.0 in the Android flavor)
393 Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May be called only by a thread currently occupying this monitor. @return whether the guard is now satisfied @throws InterruptedException if interrupted while waiting @since 28.0 (but only since 33.4.0 in the Android flavor)
394 Waits for the guard to be satisfied. Waits at most the given time. May be called only by a thread currently occupying this monitor. @return whether the guard is now satisfied @since 28.0 (but only since 33.4.0 in the Android flavor)
395 Returns a future that delegates to this future but will finish early (via a {@link TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires. If the timeout expires, not only will the output future finish, but also the input future ({@code this}) will be cancelled and interrupted. @param timeout when to time out the future @param scheduledExecutor The executor service to enforce the timeout. @since 28.0 (but only since 33.4.0 in the Android flavor)
396 Overwrites a file with the contents of a byte array. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)}. @param from the bytes to write @param to the destination file @throws IOException if an I/O error occurs
397 Hashes the contents of this byte source using the given hash function. @throws IOException if an I/O error occurs while reading from this source
398 Copies all bytes from a file to an output stream. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#copy(java.nio.file.Path, OutputStream)}. @param from the source file @param to the output stream @throws IOException if an I/O error occurs
399 Copies all bytes from a URL to an output stream. @param from the URL to read from @param to the output stream @throws IOException if an I/O error occurs
400 Copies all the bytes from one file to another. <p>Copying is not an atomic operation - in the case of an I/O error, power loss, process termination, or other problems, {@code to} may not be a complete copy of {@code from}. If you need to guard against those conditions, you should employ other file-level synchronization. <p><b>Warning:</b> If {@code to} represents an existing file, that file will be overwritten with the contents of {@code from}. If {@code to} and {@code from} refer to the <i>same</i> file, the contents of that file will be deleted. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)}. @param from the source file @param to the destination file @throws IOException if an I/O error occurs @throws IllegalArgumentException if {@code from.equals(to)}
401 Reads all bytes from a file into a byte array. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#readAllBytes}. @param file the file to read from @return a byte array containing all the bytes from file @throws IllegalArgumentException if the file is bigger than the largest possible byte array (2^31 - 1) @throws IOException if an I/O error occurs
402 Reads all bytes from a URL into a byte array. @param url the URL to read from @return a byte array containing all the bytes from the URL @throws IOException if an I/O error occurs
403 Process the bytes of a file. <p>(If this seems too complicated, maybe you're looking for {@link #toByteArray}.) @param file the file to read @param processor the object to which the bytes of the file are passed. @return the result of the byte processor @throws IOException if an I/O error occurs @deprecated Prefer {@code asByteSource(file).read(processor)}.
404 Returns true if the given files exist, are not directories, and contain the same bytes. @throws IOException if an I/O error occurs
405 Returns true if the files located by the given paths exist, are not directories, and contain the same bytes. @throws IOException if an I/O error occurs @since 22.0
406 Writes a character sequence (such as a string) to a file using the given character set. @param from the character sequence to write @param to the destination file @param charset the charset used to encode the output stream; see {@link StandardCharsets} for helpful predefined constants @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSink(to, charset).write(from)}.
407 Appends a character sequence (such as a string) to a file using the given character set. @param from the character sequence to append @param to the destination file @param charset the charset used to encode the output stream; see {@link StandardCharsets} for helpful predefined constants @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSink(to, charset, FileWriteMode.APPEND).write(from)}. This method is scheduled to be removed in October 2019.
408 Copies all characters from a file to an appendable object, using the given character set. @param from the source file @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @param to the appendable object @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSource(from, charset).copyTo(to)}.
409 Reads the first line from a file. The line does not include line-termination characters, but does include other leading and trailing whitespace. @param file the file to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return the first line, or null if the file is empty @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSource(file, charset).readFirstLine()}.
410 Reads all of the lines from a file. The lines do not include line-termination characters, but do include other leading and trailing whitespace. <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code Files.asCharSource(file, charset).readLines()}. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#readAllLines(java.nio.file.Path, Charset)}. @param file the file to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return a mutable {@link List} containing all the lines @throws IOException if an I/O error occurs
411 Streams lines from a {@link File}, stopping when our callback returns false, or we have read all of the lines. @param file the file to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @param callback the {@link LineProcessor} to use to handle the lines @return the output of processing the lines @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSource(file, charset).readLines(callback)}.
412 Streams lines from a URL, stopping when our callback returns false, or we have read all of the lines. @param url the URL to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @param callback the LineProcessor to use to handle the lines @return the output of processing the lines @throws IOException if an I/O error occurs
413 Fully maps a file in to memory as per {@link FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)} using the requested {@link MapMode}. <p>Files are mapped from offset 0 to its length. <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes. @param file the file to map @param mode the mode to use when mapping {@code file} @return a buffer reflecting {@code file} @throws FileNotFoundException if the {@code file} does not exist @throws IOException if an I/O error occurs @see FileChannel#map(MapMode, long, long) @since 2.0
414 Maps a file in to memory as per {@link FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)} using the requested {@link MapMode}. <p>Files are mapped from offset 0 to {@code size}. <p>If the mode is {@link MapMode#READ_WRITE} and the file does not exist, it will be created with the requested {@code size}. Thus this method is useful for creating memory mapped files which do not yet exist. <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes. @param file the file to map @param mode the mode to use when mapping {@code file} @return a buffer reflecting {@code file} @throws IOException if an I/O error occurs @see FileChannel#map(MapMode, long, long) @since 2.0
415 Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}. This is useful if the given service uses daemon threads, and we want to keep the JVM from exiting immediately on shutdown, instead giving these daemon threads a chance to terminate normally. @param service ExecutorService which uses daemon threads @param terminationTimeout how long to wait for the executor to finish before terminating the JVM @param timeUnit unit of time for the time parameter
416 Returns a multimap containing the mappings in {@code unfiltered} whose values satisfy a predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all other methods are supported by the multimap and its views. When adding a value that doesn't satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code replaceValues()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered multimap or its views, only mappings whose value satisfy the filter will be removed from the underlying multimap. <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying multimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the copy. <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 11.0
417 Returns an ordering which tries each given comparator in order until a non-zero result is found, returning that result, and returning zero only if all comparators return zero. The returned ordering is based on the state of the {@code comparators} iterable at the time it was provided to this method. <p>The returned ordering is equivalent to that produced using {@code Ordering.from(comp1).compound(comp2).compound(comp3) . . .}. <p>The returned object is serializable if each of the {@code comparators} is serializable. <p><b>Warning:</b> Supplying an argument with undefined iteration order, such as a {@link HashSet}, will produce non-deterministic results. <p><b>Java 8+ users:</b> Use a chain of calls to {@link Comparator#thenComparing(Comparator)}, or {@code comparatorCollection.stream().reduce(Comparator::thenComparing).get()} (if the collection might be empty, also provide a default comparator as the {@code identity} parameter to {@code reduce}). @param comparators the comparators to try in order
418 Returns an immutable bimap containing the same entries as {@code map}. If {@code map} somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose comparator is not <i>consistent with equals</i>), the results of this method are undefined. <p>The returned {@code BiMap} iterates over entries in the same order as the {@code entrySet} of the original map. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws IllegalArgumentException if two keys have the same value or two values have the same key @throws NullPointerException if any key or value in {@code map} is null
419 Returns an array containing all of the elements from this fluent iterable in iteration order. <p><b>{@code Stream} equivalent:</b> if an object array is acceptable, use {@code stream.toArray()}; if {@code type} is a class literal such as {@code MyType.class}, use {@code stream.toArray(MyType[]::new)}. Otherwise use {@code stream.toArray( len -> (E[]) Array.newInstance(type, len))}. @param type the type of the elements @return a newly-allocated array into which all the elements of this fluent iterable have been copied
420 Copies an iterator's elements into an array. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. @param iterator the iterator to copy @param type the type of the elements @return a newly-allocated array into which all the elements of the iterator have been copied
421 Returns an {@code ImmutableSortedSet} containing all of the elements from this {@code FluentIterable} in the order specified by {@code comparator}, with duplicates (determined by {@code comparator.compare(x, y) == 0}) removed. To produce an {@code ImmutableSortedSet} sorted by its natural ordering, use {@code toSortedSet(Ordering.natural())}. <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSortedSet#toImmutableSortedSet} to {@code stream.collect()}. @param comparator the function by which to sort set elements @throws NullPointerException if any element of this iterable is {@code null} @since 14.0 (since 12.0 as {@code toImmutableSortedSet()}).
422 Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to {@code compareTo()}, only the first one specified is included. To create a copy of a {@code SortedSet} that preserves the comparator, call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once. <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)} returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s}, while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>} containing one element (the given set itself). <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>This method is not type-safe, as it may be called on elements that are not mutually comparable. @throws ClassCastException if the elements are not mutually comparable @throws NullPointerException if any of {@code elements} is null
423 Returns an immutable sorted set containing the given elements sorted by the given {@code Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the first one specified is included. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>This method is safe to use even when {@code elements} is a synchronized or concurrent collection that is currently being modified by another thread. @throws NullPointerException if {@code comparator} or any of {@code elements} is null @since 7.0 (source-compatible since 2.0)
424 {@inheritDoc} <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link Table} interface.
425 Returns the string representation of this media type in the format described in <a href="http://www.ietf.org/rfc/rfc2045.txt">RFC 2045</a>.
426 Returns a synchronized (thread-safe) {@code SortedSetMultimap} backed by the specified multimap. <p>You must follow the warnings described in {@link #synchronizedMultimap}. <p>The returned multimap will be serializable if the specified multimap is serializable. @param multimap the multimap to be wrapped @return a synchronized view of the specified multimap
427 Reads the contents of this source as a string. @throws IOException if an I/O error occurs while reading from this source
428 Creates a {@code CompactLinkedHashMap} instance, with a high enough "initial capacity" that it <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures. @param expectedSize the number of elements you expect to add to the returned set @return a new, empty {@code CompactLinkedHashMap} with enough capacity to hold {@code expectedSize} elements without resizing @throws IllegalArgumentException if {@code expectedSize} is negative
429 Creates a <i>mutable</i> {@code CompactLinkedHashSet} instance containing the elements of the given collection in the order returned by the collection's iterator. @param collection the elements that the set should contain @return a new {@code CompactLinkedHashSet} containing those elements (minus duplicates)
430 Creates an empty {@code TreeMultimap} ordered by the natural ordering of its keys and values.
431 Creates an empty {@code TreeMultimap} instance using explicit comparators. Neither comparator may be null; use {@link Ordering#natural()} to specify natural order. @param keyComparator the comparator that determines the key ordering @param valueComparator the comparator that determines the value ordering
432 Returns {@code true} if a character sequence contains at least one matching BMP character. Equivalent to {@code !matchesNoneOf(sequence)}. <p>The default implementation iterates over the sequence, invoking {@link #matches} for each character, until this returns {@code true} or the end is reached. @param sequence the character sequence to examine, possibly empty @return {@code true} if this matcher matches at least one character in the sequence @since 8.0
433 Returns a string containing all matching BMP characters of a character sequence, in order. For example: {@snippet : CharMatcher.is('a').retainFrom("bazaar") } ... returns {@code "aaa"}.
434 Returns a string copy of the input character sequence, with each matching BMP character replaced by a given replacement sequence. For example: {@snippet : CharMatcher.is('a').replaceFrom("yaha", "oo") } ... returns {@code "yoohoo"}. <p><b>Note:</b> If the replacement is a fixed string with only one character, you are better off calling {@link #replaceFrom(CharSequence, char)} directly. @param sequence the character sequence to replace matching characters in @param replacement the characters to append to the result string in place of each matching character in {@code sequence} @return the new string
435 Coerces an IPv6 address into an IPv4 address. <p>HACK: As long as applications continue to use IPv4 addresses for indexing into tables, accounting, et cetera, it may be necessary to <b>coerce</b> IPv6 addresses into IPv4 addresses. This method does so by hashing 64 bits of the IPv6 address into {@code 224.0.0.0/3} (64 bits into 29 bits): <ul> <li>If the IPv6 address contains an embedded IPv4 address, the function hashes that. <li>Otherwise, it hashes the upper 64 bits of the IPv6 address. </ul> <p>A "coerced" IPv4 address is equivalent to itself. <p>NOTE: This method is failsafe for security purposes: ALL IPv6 addresses (except localhost (::1)) are hashed to avoid the security risk associated with extracting an embedded IPv4 address that might permit elevated privileges. @param ip {@link InetAddress} to "coerce" @return {@link Inet4Address} represented "coerced" address @since 7.0
436 Creates a {@code RateLimiter} with the specified stable throughput, given as "permits per second" (commonly referred to as <i>QPS</i>, queries per second), and a <i>warmup period</i>, during which the {@code RateLimiter} smoothly ramps up its rate, until it reaches its maximum rate at the end of the period (as long as there are enough requests to saturate it). Similarly, if the {@code RateLimiter} is left <i>unused</i> for a duration of {@code warmupPeriod}, it will gradually return to its "cold" state, i.e. it will go through the same warming up process as when it was first created. <p>The returned {@code RateLimiter} is intended for cases where the resource that actually fulfills the requests (e.g., a remote server) needs "warmup" time, rather than being immediately accessed at the stable (maximum) rate. <p>The returned {@code RateLimiter} starts in a "cold" state (i.e. the warmup period will follow), and if it is left unused for long enough, it will return to that state. @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in how many permits become available per second @param warmupPeriod the duration of the period where the {@code RateLimiter} ramps up its rate, before reaching its stable (maximum) rate @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or {@code warmupPeriod} is negative @since 28.0 (but only since 33.4.0 in the Android flavor)
437 {@inheritDoc} <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap} interface.
438 @since 15.0 (previously returned ScheduledFuture)
439 Builds a cache, which either returns an already-loaded value for a given key or atomically computes or retrieves it using the supplied {@code CacheLoader}. If another thread is currently loading the value for this key, simply waits for that thread to finish and returns its loaded value. Note that multiple threads can concurrently load values for distinct keys. <p>This method does not alter the state of this {@code CacheBuilder} instance, so it can be invoked again to create multiple independent caches. @param loader the cache loader used to obtain new values @return a cache having the requested features
440 Builds a cache which does not automatically load values when keys are requested. <p>Consider {@link #build(CacheLoader)} instead, if it is feasible to implement a {@code CacheLoader}. <p>This method does not alter the state of this {@code CacheBuilder} instance, so it can be invoked again to create multiple independent caches. @return a cache having the requested features @since 11.0
441 Returns a builder that creates immutable sorted multisets with an explicit comparator. If the comparator has a more general type than the set being generated, such as creating a {@code SortedMultiset<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor instead. @throws NullPointerException if {@code comparator} is null
442 Returns a builder that creates immutable sorted multisets whose elements are ordered by the reverse of their natural ordering. <p>Note: the type parameter {@code E} extends {@code Comparable<?>} rather than {@code Comparable<? super E>} in order to accommodate users of obsolete javac versions affected by <a href="https://bugs.openjdk.org/browse/JDK-6468354">JDK-6468354</a>.
443 Returns a builder that creates immutable sorted multisets whose elements are ordered by their natural ordering. The sorted multisets use {@link Ordering#natural()} as the comparator. This method provides more type-safety than {@link #builder}, as it can be called only for classes that implement {@link Comparable}. <p>Note: the type parameter {@code E} extends {@code Comparable<?>} rather than {@code Comparable<? super E>} in order to accommodate users of obsolete javac versions affected by <a href="https://bugs.openjdk.org/browse/JDK-6468354">JDK-6468354</a>.
444 Returns a new bimap with the same mappings as the specified map. If the specified map is an {@code EnumBiMap}, the new bimap has the same types as the provided map. Otherwise, the specified map must contain at least one mapping, in order to determine the key and value types. @param map the map whose mappings are to be placed in this map @throws IllegalArgumentException if map is not an {@code EnumBiMap} instance and contains no mappings
445 Constructs a new bimap with the same mappings as the specified map. If the specified map is an {@code EnumHashBiMap} or an {@link EnumBiMap}, the new bimap has the same key type as the input bimap. Otherwise, the specified map must contain at least one mapping, in order to determine the key type. @param map the map whose mappings are to be placed in this map @throws IllegalArgumentException if map is not an {@code EnumBiMap} or an {@code EnumHashBiMap} instance and contains no mappings
446 Stores a collection of values with the same key, replacing any existing values for that key. <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method returns a {@link SortedSet}, instead of the {@link java.util.Collection} specified in the {@link Multimap} interface. <p>Any duplicates in {@code values} will be stored in the multimap once.
447 Returns {@code true} if the second list is a permutation of the first.
448 Creates a new, empty {@code ArrayListMultimap} with the default initial capacities. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys().arrayListValues().build()}, which provides more control over the underlying data structure.
449 Constructs an {@code ArrayListMultimap} with the same mappings as the specified multimap. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys().arrayListValues().build(multimap)}, which provides more control over the underlying data structure. @param multimap the multimap whose contents are copied to this multimap
450 Creates a new, empty {@code HashMultimap} with the default initial capacities. <p>You may also consider the equivalent {@code MultimapBuilder.hashKeys().hashSetValues().build()}, which provides more control over the underlying data structure.
451 Creates a new, empty {@code LinkedListMultimap} with the default initial capacity.
452 Constructs a {@code LinkedListMultimap} with the same mappings as the specified {@code Multimap}. The new multimap has the same {@link Multimap#entries()} iteration order as the input multimap. @param multimap the multimap whose contents are copied to this multimap
453 Constructs a {@code LinkedHashMultimap} with the same mappings as the specified multimap. If a key-value mapping appears multiple times in the input multimap, it only appears once in the constructed multimap. The new multimap has the same {@link Multimap#entries()} iteration order as the input multimap, except for excluding duplicate mappings. @param multimap the multimap whose contents are copied to this multimap
454 Returns an empty {@link MutableNetwork} with the properties of this {@link NetworkBuilder}.
455 Constructs a {@link MutableGraph} with the properties specified in {@code builder}.
456 Returns an empty {@link MutableValueGraph} with the properties of this {@link ValueGraphBuilder}.
457 Associates all of the given table's keys and values in the built table. Duplicate row key column key pairs are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key or value in {@code table} is null
458 Adds all of the given entries to the built bimap. Duplicate keys or values are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key, value, or entry is null @since 19.0
459 Associates all of the given map's keys and values in the built map. If the same key is put more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last value put for that key. @throws NullPointerException if any key or value in {@code map} is null
460 Adds all the given entries to the built map. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key, value, or entry is null @since 19.0
461 Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered map.
462 Add all ranges from the specified range set to this builder. Adjacent ranges are permitted and will be merged, but overlapping ranges will cause an exception when {@link #build()} is called.
463 Returns a view of the intersection of this range set with the given range.
464 Returns a nonempty contiguous set containing all {@code int} values from {@code lower} (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code Range.closed(lower, upper)}.) @throws IllegalArgumentException if {@code lower} is greater than {@code upper} @since 23.0
465 Returns a nonempty contiguous set containing all {@code long} values from {@code lower} (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code Range.closed(lower, upper)}.) @throws IllegalArgumentException if {@code lower} is greater than {@code upper} @since 23.0
466 Returns a contiguous set containing all {@code int} values from {@code lower} (inclusive) to {@code upper} (exclusive). If the endpoints are equal, an empty set is returned. (These are the same values contained in {@code Range.closedOpen(lower, upper)}.) @throws IllegalArgumentException if {@code lower} is greater than {@code upper} @since 23.0
467 Returns a contiguous set containing all {@code long} values from {@code lower} (inclusive) to {@code upper} (exclusive). If the endpoints are equal, an empty set is returned. (These are the same values contained in {@code Range.closedOpen(lower, upper)}.) @throws IllegalArgumentException if {@code lower} is greater than {@code upper} @since 23.0
468 Computes the coalesced range for the given range+value - does not mutate the map.
469 Adds {@code node} to the graph and returns the associated {@link NetworkConnections}. @throws IllegalStateException if {@code node} is already present
470 Returns an immutable map containing the same entries as {@code map}. The returned map iterates over entries in the same order as the {@code entrySet} of the original map. If {@code map} somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose comparator is not <i>consistent with equals</i>), the results of this method are undefined. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if any key or value in {@code map} is null
471 {@inheritDoc} @throws NullPointerException if {@code rowKey} is {@code null}
472 @since 12.0
473 @since 12.0
474 Returns an immutable list containing the given elements, in order. @throws NullPointerException if {@code elements} contains a null element
475 Returns an {@code ImmutableRangeMap} containing the associations previously added to this builder. @throws IllegalArgumentException if any two ranges inserted into this builder overlap
476 Returns an {@code ImmutableRangeSet} containing the ranges added to this builder. @throws IllegalArgumentException if any input ranges have nonempty overlap
477 Returns the URLs in the class path specified by the {@code java.class.path} {@linkplain System#getProperty system property}.
478 Returns all declared parameters of this {@code Invokable}. Note that if this is a constructor of a non-static inner class, unlike {@link Constructor#getParameterTypes}, the hidden {@code this} parameter of the enclosing class is excluded from the returned parameters.
479 Returns all declared exception types of this {@code Invokable}.
480 Wraps a collection of tasks. @throws NullPointerException if any element of {@code tasks} is null
481 Returns an immutable list containing the given elements, sorted according to their natural order. The sorting algorithm used is stable, so elements that compare as equal will stay in the order in which they appear in the input. <p>If your data has no duplicates, or you wish to deduplicate elements, use {@code ImmutableSortedSet.copyOf(elements)}; if you want a {@code List} you can use its {@code asList()} view. <p><b>Java 8+ users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted {@code ImmutableList}, use {@code stream.sorted().collect(toImmutableList())}. @throws NullPointerException if any element in the input is null @since 21.0
482 Returns an immutable list containing the given elements, in sorted order relative to the specified comparator. The sorting algorithm used is stable, so elements that compare as equal will stay in the order in which they appear in the input. <p>If your data has no duplicates, or you wish to deduplicate elements, use {@code ImmutableSortedSet.copyOf(comparator, elements)}; if you want a {@code List} you can use its {@code asList()} view. <p><b>Java 8+ users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted {@code ImmutableList}, use {@code stream.sorted(comparator).collect(toImmutableList())}. @throws NullPointerException if any element in the input is null @since 21.0
483 Returns an immutable sorted set containing the given elements sorted by the given {@code Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the first one specified is included. @throws NullPointerException if {@code comparator} or any of {@code elements} is null
484 Creates an ImmutableMap from the first n entries in entryArray. This implementation may replace the entries in entryArray with its own entry objects (though they will have the same key/value contents), and may take ownership of entryArray.
485 The index in the {@link #parts()} list at which the public suffix begins. For example, for the domain name {@code myblog.blogspot.co.uk}, the value would be 1 (the index of the {@code blogspot} part). The value is negative (specifically, {@link #NO_SUFFIX_FOUND}) if no public suffix was found.
486 The index in the {@link #parts()} list at which the registry suffix begins. For example, for the domain name {@code myblog.blogspot.co.uk}, the value would be 2 (the index of the {@code co} part). The value is negative (specifically, {@link #NO_SUFFIX_FOUND}) if no registry suffix was found.
487 Accepts a collection of possibly-null entries. If {@code sameComparator}, then it is assumed that they do not need to be sorted or checked for dupes.
488 Creates a {@code TreeBasedTable} with the same mappings and sort order as the specified {@code TreeBasedTable}.
489 Creates a {@link BloomFilter} with the expected number of insertions and a default expected false positive probability of 3%. <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified, will result in its saturation, and a sharp deterioration of its false positive probability. <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>} is. <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since {@link #equals} also relies on object identity of funnels. @param funnel the funnel of T's that the constructed {@code BloomFilter} will use @param expectedInsertions the number of expected insertions to the constructed {@code BloomFilter}; must be positive @return a {@code BloomFilter}
490 Returns a {@code Collector} that returns the {@code k} greatest (relative to the specified {@code Comparator}) input elements, in descending order, as an unmodifiable {@code List}. Ties are broken arbitrarily. <p>For example: {@snippet : Stream.of("foo", "quux", "banana", "elephant") .collect(greatest(2, comparingInt(String::length))) // returns {"elephant", "banana"} } <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log k)), as opposed to e.g. {@code Stream.sorted(comparator.reversed()).limit(k)}, which currently takes O(n log n) time and O(n) space. @throws IllegalArgumentException if {@code k < 0} @since 22.0
491 Returns the {@code k} least elements of the given iterable according to this ordering, in order from least to greatest. If there are fewer than {@code k} elements present, all will be included. <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple elements are equivalent, it is undefined which will come first. <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterable).collect(Comparators.least(k, thisComparator))} instead. @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending order @throws IllegalArgumentException if {@code k} is negative @since 8.0
492 Returns the {@code k} greatest elements from the given iterator according to this ordering, in order from greatest to least. If there are fewer than {@code k} elements present, all will be included. <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple elements are equivalent, it is undefined which will come first. <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).collect(Comparators.greatest(k, thisComparator))} instead. @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in <i>descending order</i> @throws IllegalArgumentException if {@code k} is negative @since 14.0
493 Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function to its exception if it is an instance of a given exception type. The function can use a {@link DeferredCloser} to capture objects to be closed when the pipeline is done. <p>If this {@code ClosingFuture} succeeds or fails with a different exception type, the function will not be called, and the derived {@code ClosingFuture} will be equivalent to this one. <p>If the function throws an exception, that exception is used as the result of the derived {@code ClosingFuture}. <p>Example usage: {@snippet : ClosingFuture<QueryResult> queryFuture = queryFuture.catching( QueryException.class, (closer, x) -> Query.emptyQueryResult(), executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. <p>After calling this method, you may not call {@link #finishToFuture()}, {@link #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on the original {@code ClosingFuture} instance. @param exceptionType the exception type that triggers use of {@code fallback}. The exception type is matched against this step's exception. "This step's exception" means the cause of the {@link ExecutionException} thrown by {@link Future#get()} on the {@link Future} underlying this step or, if {@code get()} throws a different kind of exception, that exception itself. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding {@code Throwable.class} in particular. @param fallback the function to be called if this step fails with the expected exception type. The function's argument is this step's exception. "This step's exception" means the cause of the {@link ExecutionException} thrown by {@link Future#get()} on the {@link Future} underlying this step or, if {@code get()} throws a different kind of exception, that exception itself. @param executor the executor that runs {@code fallback} if the input fails
494 Waits for the all the services to reach a terminal state. After this method returns all services will either be {@linkplain Service.State#TERMINATED terminated} or {@linkplain Service.State#FAILED failed}.
495 Waits for the all the services to reach a terminal state for no more than the given time. After this method returns all services will either be {@linkplain Service.State#TERMINATED terminated} or {@linkplain Service.State#FAILED failed}. @param timeout the maximum time to wait @param unit the time unit of the timeout argument @throws TimeoutException if not all of the services have stopped within the deadline
496 Returns a {@code char} matcher functionally equivalent to this one, but which may be faster to query than the original; your mileage may vary. Precomputation takes time and requires more memory, so it is only likely to be worthwhile if the precomputed matcher is queried very often. <p>This method has no effect (returns {@code this}) when called in GWT: it's unclear whether a precomputed matcher is faster, but it certainly would consume more memory (which doesn't seem like a worthwhile tradeoff in a browser).
497 Computes the hash code of the {@code file} using {@code hashFunction}. @param file the file to read @param hashFunction the hash function to use to hash the data @return the {@link HashCode} of all of the bytes in the file @throws IOException if an I/O error occurs @since 12.0 @deprecated Prefer {@code asByteSource(file).hash(hashFunction)}.
498 Moves a file from one path to another. This method can rename a file and/or move it to a different directory. In either case {@code to} must be the target path for the file itself; not just the new name for the file or the path to the new parent directory. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#move}. @param from the source file @param to the destination file @throws IOException if an I/O error occurs @throws IllegalArgumentException if {@code from.equals(to)}
499 Reads all of the lines from a URL. The lines do not include line-termination characters, but do include other leading and trailing whitespace. <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code Resources.asCharSource(url, charset).readLines()}. @param url the URL to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return a mutable {@link List} containing all the lines @throws IOException if an I/O error occurs
500 Fully maps a file read-only in to memory as per {@link FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)}. <p>Files are mapped from offset 0 to its length. <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes. @param file the file to map @return a read-only buffer reflecting {@code file} @throws FileNotFoundException if the {@code file} does not exist @throws IOException if an I/O error occurs @see FileChannel#map(MapMode, long, long) @since 2.0
501 Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}. @param executor the executor to modify to make sure it exits when the application is finished @param terminationTimeout how long to wait for the executor to finish before terminating the JVM @param timeUnit unit of time for the time parameter @return an unmodifiable version of the input which will not hang the JVM
502 Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}. @param executor the executor to modify to make sure it exits when the application is finished @param terminationTimeout how long to wait for the executor to finish before terminating the JVM @param timeUnit unit of time for the time parameter @return an unmodifiable version of the input which will not hang the JVM
503 Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}. This is useful if the given service uses daemon threads, and we want to keep the JVM from exiting immediately on shutdown, instead giving these daemon threads a chance to terminate normally. @param service ExecutorService which uses daemon threads @param terminationTimeout how long to wait for the executor to finish before terminating the JVM @since 28.0 (but only since 33.4.0 in the Android flavor)
504 Removes an entry whose key has been garbage collected.
505 Removes an entry whose value has been garbage collected.
506 Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy}. The manager will become healthy after all the component services have reached the {@linkplain State#RUNNING running} state. @throws IllegalStateException if the service manager reaches a state from which it cannot become {@linkplain #isHealthy() healthy}.
507 Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy} for no more than the given time. The manager will become healthy after all the component services have reached the {@linkplain State#RUNNING running} state. @param timeout the maximum time to wait @param unit the time unit of the timeout argument @throws TimeoutException if not all of the services have finished starting within the deadline @throws IllegalStateException if the service manager reaches a state from which it cannot become {@linkplain #isHealthy() healthy}.
508 Returns the service load times. This value will only return startup times for services that have finished starting. @return Map of services and their corresponding startup time in millis, the map entries will be ordered by startup time.
509 @since 18.0
510 Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to {@code compareTo()}, only the first one specified is included. To create a copy of a {@code SortedSet} that preserves the comparator, call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once. <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)} returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s}, while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>} containing one element (the given set itself). <p><b>Note:</b> Despite what the method name suggests, if {@code elements} is an {@code ImmutableSortedSet}, it may be returned instead of a copy. <p>This method is not type-safe, as it may be called on elements that are not mutually comparable. <p>This method is safe to use even when {@code elements} is a synchronized or concurrent collection that is currently being modified by another thread. @throws ClassCastException if the elements are not mutually comparable @throws NullPointerException if any of {@code elements} is null @since 7.0 (source-compatible since 2.0)
511 Returns a synchronized (thread-safe) navigable map backed by the specified navigable map. In order to guarantee serial access, it is critical that <b>all</b> access to the backing navigable map is accomplished through the returned navigable map (or its views). <p>It is imperative that the user manually synchronize on the returned navigable map when iterating over any of its collection views, or the collections views of any of its {@code descendingMap}, {@code subMap}, {@code headMap} or {@code tailMap} views. {@snippet : NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>()); // Needn't be in synchronized block NavigableSet<K> set = map.navigableKeySet(); synchronized (map) { // Synchronizing on map, not set! Iterator<K> it = set.iterator(); // Must be in synchronized block while (it.hasNext()) { foo(it.next()); } } } <p>or: {@snippet : NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>()); NavigableMap<K, V> map2 = map.subMap(foo, false, bar, true); // Needn't be in synchronized block NavigableSet<K> set2 = map2.descendingKeySet(); synchronized (map) { // Synchronizing on map, not map2 or set2! Iterator<K> it = set2.iterator(); // Must be in synchronized block while (it.hasNext()) { foo(it.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>The returned navigable map will be serializable if the specified navigable map is serializable. @param navigableMap the navigable map to be "wrapped" in a synchronized navigable map. @return a synchronized view of the specified navigable map. @since 13.0
512 Reads all characters from a file into a {@link String}, using the given character set. @param file the file to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return a string containing all the characters from the file @throws IOException if an I/O error occurs @deprecated Prefer {@code asCharSource(file, charset).read()}.
513 Reads all characters from a URL into a {@link String}, using the given character set. @param url the URL to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return a string containing all the characters from the URL @throws IOException if an I/O error occurs.
514 Creates an empty {@code CompactLinkedHashMap} instance.
515 Constructs a {@code TreeMultimap}, ordered by the natural ordering of its keys and values, with the same mappings as the specified multimap. @param multimap the multimap whose contents are copied to this multimap
516 Creates a {@link ReentrantLock} with the given fairness policy. The {@code lockName} is used in the warning or exception output to help identify the locks involved in the detected deadlock.
517 Creates a {@link ReentrantReadWriteLock} with the given fairness policy. The {@code lockName} is used in the warning or exception output to help identify the locks involved in the detected deadlock.
518 For a given Enum type, creates an immutable map from each of the Enum's values to a corresponding LockGraphNode, with the {@code allowedPriorLocks} and {@code disallowedPriorLocks} prepopulated with nodes according to the natural ordering of the associated Enum values.
519 Helper method for {@link #validateSyntax(List)}. Validates that one part of a domain name is valid. @param part The domain name part to be validated @param isFinalPart Is this the final (rightmost) domain part? @return Whether the part is valid
520 Returns an integer representing an IPv4 address regardless of whether the supplied argument is an IPv4 address or not. <p>IPv6 addresses are <b>coerced</b> to IPv4 addresses before being converted to integers. <p>As long as there are applications that assume that all IP addresses are IPv4 addresses and can therefore be converted safely to integers (for whatever purpose) this function can be used to handle IPv6 addresses as well until the application is suitably fixed. <p>NOTE: an IPv6 address coerced to an IPv4 address can only be used for such purposes as rudimentary identification or indexing into a collection of real {@link InetAddress}es. They cannot be used as real addresses for the purposes of network communication. @param ip {@link InetAddress} to convert @return {@code int}, "coerced" if ip is not an IPv4 address @since 7.0
521 A sensible definition of {@link #contains} in terms of {@link #iterator}. If you override {@link #iterator}, you may wish to override {@link #contains} to forward to this implementation. @since 7.0
522 A sensible definition of {@link #remove} in terms of {@link #iterator}, using the iterator's {@code remove} method. If you override {@link #iterator}, you may wish to override {@link #remove} to forward to this implementation. @since 7.0
523 A sensible definition of {@link #removeAll} in terms of {@link #iterator}, using the iterator's {@code remove} method. If you override {@link #iterator}, you may wish to override {@link #removeAll} to forward to this implementation. @since 7.0
524 A sensible definition of {@link #retainAll} in terms of {@link #iterator}, using the iterator's {@code remove} method. If you override {@link #iterator}, you may wish to override {@link #retainAll} to forward to this implementation. @since 7.0
525 A sensible definition of {@link #clear} in terms of {@link #iterator}, using the iterator's {@code remove} method. If you override {@link #iterator}, you may wish to override {@link #clear} to forward to this implementation. @since 7.0
526 A sensible definition of {@link #isEmpty} as {@code !iterator().hasNext}. If you override {@link #isEmpty}, you may wish to override {@link #isEmpty} to forward to this implementation. Alternately, it may be more efficient to implement {@code isEmpty} as {@code size() == 0}. @since 7.0
527 A sensible definition of {@link #toArray()} in terms of {@link #toArray(Object[])}. If you override {@link #toArray(Object[])}, you may wish to override {@link #toArray} to forward to this implementation. @since 7.0
528 Duration-based overload of {@link #schedule(Runnable, long, TimeUnit)}. @since 29.0
529 Returns all subscribers for the given listener grouped by the type of event they subscribe to.
530 Returns the subgraph of {@code network} induced by {@code nodes}. This subgraph is a new graph that contains all of the nodes in {@code nodes}, and all of the {@link Network#edges() edges} from {@code network} for which the {@link Network#incidentNodes(Object) incident nodes} are both contained by {@code nodes}. @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph
531 Creates a mutable copy of {@code network} with the same nodes and edges.
532 Returns an empty {@link MutableGraph} with the properties of this {@link GraphBuilder}.
533 Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges} (and associated edge values) from {@code graph} for which both nodes are contained by {@code nodes}. @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph
534 Creates a mutable copy of {@code graph} with the same nodes, edges, and edge values.
535 Associates all of the given map's keys and values in the built bimap. Duplicate keys or values are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key or value in {@code map} is null
536 Associates all of the given map's keys and values in the built map. Duplicate keys, according to the comparator (which might be the keys' natural order), are not allowed, and will cause {@link #build} to fail. @throws NullPointerException if any key or value in {@code map} is null
537 Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered navigable map.
538 Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered sorted map.
539 Returns a map containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings whose keys satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
540 Returns a map containing the mappings in {@code unfiltered} that satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the map's entries have a {@link Entry#setValue} method that throws an {@link IllegalArgumentException} when the existing key and the provided value don't satisfy the predicate. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings that satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}.
541 Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose keys and values are the result of applying the provided mapping functions to the input elements. The generated map is sorted by the specified comparator. <p>If the mapped keys contain duplicates (according to the specified comparator), an {@code IllegalArgumentException} is thrown when the collection operation is performed. (This differs from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which throws an {@code IllegalStateException}.) @since 21.0
542 Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys and values are the result of applying the provided mapping functions to the input elements. The resulting implementation is specialized for enum key types. The returned map and its views will iterate over keys in their enum definition order, not encounter order. <p>If the mapped keys contain duplicates, an {@code IllegalArgumentException} is thrown when the collection operation is performed. (This differs from the {@code Collector} returned by {@link java.util.stream.Collectors#toMap(java.util.function.Function, java.util.function.Function) Collectors.toMap(Function, Function)}, which throws an {@code IllegalStateException}.) @since 21.0
543 Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys and values are the result of applying the provided mapping functions to the input elements. The resulting implementation is specialized for enum key types. The returned map and its views will iterate over keys in their enum definition order, not encounter order. <p>If the mapped keys contain duplicates, the values are merged using the specified merging function. @since 21.0
544 Returns type mappings using type parameters and type arguments found in the generic superclass and the super interfaces of {@code contextClass}.
545 Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. <p>Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream. <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method is called. This will fail if the iterator is infinite and may cause problems if the iterator eagerly fetches data for each source when iterated (rather than producing sources that only load data through their streams). Prefer using the {@link #concat(Iterable)} overload if possible. @param sources the sources to concatenate @return a {@code ByteSource} containing the concatenated data @throws NullPointerException if any of {@code sources} is {@code null} @since 15.0
546 Concatenates multiple {@link CharSource} instances into a single source. Streams returned from the source will contain the concatenated data from the streams of the underlying sources. <p>Only one underlying stream will be open at a time. Closing the concatenated stream will close the open underlying stream. <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method is called. This will fail if the iterator is infinite and may cause problems if the iterator eagerly fetches data for each source when iterated (rather than producing sources that only load data through their streams). Prefer using the {@link #concat(Iterable)} overload if possible. @param sources the sources to concatenate @return a {@code CharSource} containing the concatenated data @throws NullPointerException if any of {@code sources} is {@code null} @since 15.0
547 Returns an {@code ImmutableRangeSet} containing each of the specified disjoint ranges. Overlapping ranges and empty ranges are forbidden, though adjacent ranges are permitted and will be merged. @throws IllegalArgumentException if any ranges overlap or are empty @since 21.0
548 Returns an immutable sorted multiset containing the given elements sorted by the given {@code Comparator}. This method iterates over {@code elements} at most once. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if {@code comparator} or any of {@code elements} is null
549 Returns an immutable sorted multiset containing the elements of a sorted multiset, sorted by the same {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always uses the natural ordering of the elements. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>This method is safe to use even when {@code sortedMultiset} is a synchronized or concurrent collection that is currently being modified by another thread. @throws NullPointerException if {@code sortedMultiset} or any of its elements is null
550 Returns an {@code ImmutableList} containing the same elements, in the same order, as this collection. <p><b>Performance note:</b> in most cases this method can return quickly without actually copying anything. The exact circumstances under which the copy is performed are undefined and subject to change. @since 2.0
551 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableSortedSet}, ordered by the specified comparator. <p>If the elements contain duplicates (according to the comparator), only the first duplicate in encounter order will appear in the result. @since 21.0
552 Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to {@code compareTo()}, only the first one specified is included. <p>This method is not type-safe, as it may be called on elements that are not mutually comparable. @throws ClassCastException if the elements are not mutually comparable @throws NullPointerException if any of {@code elements} is null
553 Returns a newly-created immutable bimap, or throws an exception if any key or value was added more than once. The iteration order of the returned bimap is the order in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case entries are sorted by value. @throws IllegalArgumentException if duplicate keys or values were added @since 31.0
554 This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less than (or equal to, if {@code inclusive}) {@code toKey}. <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code toKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code toKey}. @since 12.0
555 This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are greater than (or equal to, if {@code inclusive}) {@code fromKey}. <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromKey}. @since 12.0
556 Indicates whether this domain name represents a <i>public suffix</i>, as defined by the Mozilla Foundation's <a href="http://publicsuffix.org/">Public Suffix List</a> (PSL). A public suffix is one under which Internet users can directly register names, such as {@code com}, {@code co.uk} or {@code pvt.k12.wy.us}. Examples of domain names that are <i>not</i> public suffixes include {@code google.com}, {@code foo.co.uk}, and {@code myblog.blogspot.com}. <p>Public suffixes are a proper superset of {@linkplain #isRegistrySuffix() registry suffixes}. The list of public suffixes additionally contains privately owned domain names under which Internet users can register subdomains. An example of a public suffix that is not a registry suffix is {@code blogspot.com}. Note that it is true that all public suffixes <i>have</i> registry suffixes, since domain name registries collectively control all internet domain names. <p>For considerations on whether the public suffix or registry suffix designation is more suitable for your application, see <a href="https://github.com/google/guava/wiki/InternetDomainNameExplained">this article</a>. @return {@code true} if this domain name appears exactly on the public suffix list @since 6.0
557 Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix}, including if it is a public suffix itself. For example, returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code invalid} or {@code google.invalid}. This is the recommended method for determining whether a domain is potentially an addressable host. <p>Note that this method is equivalent to {@link #hasRegistrySuffix()} because all registry suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes. @since 6.0
558 Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix}, while not being a public suffix itself. For example, returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and {@code myblog.blogspot.com}, but not for {@code com}, {@code co.uk}, {@code google.invalid}, or {@code blogspot.com}. <p>This method can be used to determine whether it will probably be possible to set cookies on the domain, though even that depends on individual browsers' implementations of cookie controls. See <a href="http://www.ietf.org/rfc/rfc2109.txt">RFC 2109</a> for details. @since 6.0
559 Indicates whether this domain name is composed of exactly one subdomain component followed by a {@linkplain #isPublicSuffix() public suffix}. For example, returns {@code true} for {@code google.com} {@code foo.co.uk}, and {@code myblog.blogspot.com}, but not for {@code www.google.com}, {@code co.uk}, or {@code blogspot.com}. <p>This method can be used to determine whether a domain is probably the highest level for which cookies may be set, though even that depends on individual browsers' implementations of cookie controls. See <a href="http://www.ietf.org/rfc/rfc2109.txt">RFC 2109</a> for details. @since 6.0
560 Indicates whether this domain name represents a <i>registry suffix</i>, as defined by a subset of the Mozilla Foundation's <a href="http://publicsuffix.org/">Public Suffix List</a> (PSL). A registry suffix is one under which Internet users can directly register names via a domain name registrar, and have such registrations lawfully protected by internet-governing bodies such as ICANN. Examples of registry suffixes include {@code com}, {@code co.uk}, and {@code pvt.k12.wy.us}. Examples of domain names that are <i>not</i> registry suffixes include {@code google.com} and {@code foo.co.uk}. <p>Registry suffixes are a proper subset of {@linkplain #isPublicSuffix() public suffixes}. The list of public suffixes additionally contains privately owned domain names under which Internet users can register subdomains. An example of a public suffix that is not a registry suffix is {@code blogspot.com}. Note that it is true that all public suffixes <i>have</i> registry suffixes, since domain name registries collectively control all internet domain names. <p>For considerations on whether the public suffix or registry suffix designation is more suitable for your application, see <a href="https://github.com/google/guava/wiki/InternetDomainNameExplained">this article</a>. @return {@code true} if this domain name appears exactly on the public suffix list as part of the registry suffix section (labelled "ICANN"). @since 23.3
561 Indicates whether this domain name ends in a {@linkplain #isRegistrySuffix() registry suffix}, including if it is a registry suffix itself. For example, returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code invalid} or {@code google.invalid}. <p>Note that this method is equivalent to {@link #hasPublicSuffix()} because all registry suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes. @since 23.3
562 Indicates whether this domain name ends in a {@linkplain #isRegistrySuffix() registry suffix}, while not being a registry suffix itself. For example, returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and {@code blogspot.com}, but not for {@code com}, {@code co.uk}, or {@code google.invalid}. @since 23.3
563 Indicates whether this domain name is composed of exactly one subdomain component followed by a {@linkplain #isRegistrySuffix() registry suffix}. For example, returns {@code true} for {@code google.com}, {@code foo.co.uk}, and {@code blogspot.com}, but not for {@code www.google.com}, {@code co.uk}, or {@code myblog.blogspot.com}. <p><b>Warning:</b> This method should not be used to determine the probable highest level parent domain for which cookies may be set. Use {@link #topPrivateDomain()} for that purpose. @since 23.3
564 Returns an immutable map containing the given entries, with keys sorted by the provided comparator. @throws NullPointerException if any key or value in {@code map} is null @throws IllegalArgumentException if any two keys are equal according to the comparator @since 19.0
565 Returns an immutable map containing the same entries as the provided sorted map, with the same ordering. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if any key or value in {@code map} is null
566 Returns an immutable copy of the current contents of this set view. Does not support null elements. <p><b>Warning:</b> this may have unexpected results if a backing set of this view uses a nonstandard notion of equivalence, for example if it is a {@link TreeSet} using a comparator that is inconsistent with {@link Object#equals(Object)}.
567 Returns the raw types of the types in this set, in the same order.
568 Removes the element at position {@code index}. <p>Normally this method leaves the elements at up to {@code index - 1}, inclusive, untouched. Under these circumstances, it returns {@code null}. <p>Occasionally, in order to maintain the heap invariant, it must swap a later element of the list with one before {@code index}. Under these circumstances it returns a pair of elements as a {@link MoveDesc}. The first one is the element that was previously at the end of the heap and is now at some position before {@code index}. The second element is the one that was swapped down to replace the element at {@code index}. This fact is used by iterator.remove so as to visit elements during a traversal once and only once.
569 Returns the square root of {@code x}, rounded with the specified rounding mode. @throws IllegalArgumentException if {@code x < 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code sqrt(x)} is not an integer
570 Returns an immutable set containing each of {@code elements}, minus duplicates, in the order each appears first in the source iterator. @throws NullPointerException if any of {@code elements} is null
571 Recursively scan the given directory, adding resources for each file encountered. Symlinks which have already been traversed in the current tree path will be skipped to eliminate cycles; otherwise symlinks are traversed. @param directory the root of the directory to scan @param packagePrefix resource path prefix inside {@code classloader} for any files found under {@code directory} @param currentPath canonical files already visited in the current directory tree path, for cycle elimination
572 Returns the class path URIs specified by the {@code Class-Path} manifest attribute, according to <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html#Main_Attributes">JAR File Specification</a>. If {@code manifest} is null, it means the jar file has no manifest, and an empty set will be returned.
573 Returns the raw type of {@code T}. Formally speaking, if {@code T} is returned by {@link java.lang.reflect.Method#getGenericReturnType}, the raw type is what's returned by {@link java.lang.reflect.Method#getReturnType} of the same method object. Specifically: <ul> <li>If {@code T} is a {@code Class} itself, {@code T} itself is returned. <li>If {@code T} is a {@link ParameterizedType}, the raw type of the parameterized type is returned. <li>If {@code T} is a {@link GenericArrayType}, the returned type is the corresponding array class. For example: {@code List<Integer>[] => List[]}. <li>If {@code T} is a type variable or a wildcard type, the raw type of the first upper bound is returned. For example: {@code <X extends Foo> => Foo}. </ul>
574 Returns the {@code k} greatest elements of the given iterable according to this ordering, in order from greatest to least. If there are fewer than {@code k} elements present, all will be included. <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple elements are equivalent, it is undefined which will come first. <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterable).collect(Comparators.greatest(k, thisComparator))} instead. @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in <i>descending order</i> @throws IllegalArgumentException if {@code k} is negative @since 8.0
575 Waits for the all the services to reach a terminal state for no more than the given time. After this method returns all services will either be {@linkplain Service.State#TERMINATED terminated} or {@linkplain Service.State#FAILED failed}. @param timeout the maximum time to wait @throws TimeoutException if not all of the services have stopped within the deadline @since 28.0 (but only since 33.4.0 in the Android flavor)
576 Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This method waits 120 seconds before continuing with JVM termination, even if the executor has not finished its work. <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}. @param executor the executor to modify to make sure it exits when the application is finished @return an unmodifiable version of the input which will not hang the JVM
577 Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}. @param executor the executor to modify to make sure it exits when the application is finished @param terminationTimeout how long to wait for the executor to finish before terminating the JVM @return an unmodifiable version of the input which will not hang the JVM @since 28.0 (but only since 33.4.0 in the Android flavor)
578 Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This method waits 120 seconds before continuing with JVM termination, even if the executor has not finished its work. <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}. @param executor the executor to modify to make sure it exits when the application is finished @return an unmodifiable version of the input which will not hang the JVM
579 Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when the application is complete. It does so by using daemon threads and adding a shutdown hook to wait for their completion. <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}. @param executor the executor to modify to make sure it exits when the application is finished @param terminationTimeout how long to wait for the executor to finish before terminating the JVM @return an unmodifiable version of the input which will not hang the JVM @since 28.0 (but only since 33.4.0 in the Android flavor)
580 Performs eviction if the segment is over capacity. Avoids flushing the entire cache if the newest entry exceeds the maximum weight all on its own. @param newest the most recently added entry
581 Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy} for no more than the given time. The manager will become healthy after all the component services have reached the {@linkplain State#RUNNING running} state. @param timeout the maximum time to wait @throws TimeoutException if not all of the services have finished starting within the deadline @throws IllegalStateException if the service manager reaches a state from which it cannot become {@linkplain #isHealthy() healthy}. @since 28.0 (but only since 33.4.0 in the Android flavor)
582 Returns the service load times. This value will only return startup times for services that have finished starting. @return Map of services and their corresponding startup time, the map entries will be ordered by startup time. @since 31.0 (but only since 33.4.0 in the Android flavor)
583 @since 18.0
584 Equivalent to {@code newReentrantLock(lockName, false)}.
585 Equivalent to {@code newReentrantReadWriteLock(lockName, false)}.
586 Validation method used by {@code from} to ensure that the domain name is syntactically valid according to RFC 1035. @return Is the domain name syntactically valid?
587 Registers all subscriber methods on the given listener object.
588 Unregisters all subscribers on the given listener object.
589 Returns an {@link ImmutableNetwork.Builder} with the properties of this {@link NetworkBuilder}. <p>The returned builder can be used for populating an {@link ImmutableNetwork}. @since 28.0
590 Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges} from {@code graph} for which both nodes are contained by {@code nodes}. @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph
591 Creates a mutable copy of {@code graph} with the same nodes and edges.
592 Returns an {@link ImmutableValueGraph.Builder} with the properties of this {@link ValueGraphBuilder}. <p>The returned builder can be used for populating an {@link ImmutableValueGraph}. <p>Note that the returned builder will always have {@link #incidentEdgeOrder} set to {@link ElementOrder#stable()}, regardless of the value that was set in this builder. @since 28.0
593 Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered map.
594 Returns a sorted map containing the mappings in {@code unfiltered} that satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the map's entries have a {@link Entry#setValue} method that throws an {@link IllegalArgumentException} when the existing key and the provided value don't satisfy the predicate. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings that satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. @since 14.0
595 Returns a sorted map containing the mappings in {@code unfiltered} that satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the map's entries have a {@link Entry#setValue} method that throws an {@link IllegalArgumentException} when the existing key and the provided value don't satisfy the predicate. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings that satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. @since 11.0
596 Returns a map containing the mappings in {@code unfiltered} whose values satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()}, {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings whose values satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
597 Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys and values are the result of applying the provided mapping functions to the input elements. <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}), the values are merged using the specified merging function. If the merging function returns {@code null}, then the collector removes the value that has been computed for the key thus far (though future occurrences of the key would reinsert it). <p>Entries will appear in the encounter order of the first occurrence of the key. @since 21.0
598 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableRangeMap}. As in {@link Builder}, overlapping ranges are not permitted. @since 23.1
599 Returns an immutable sorted multiset containing the given elements sorted by their natural ordering. To create a copy of a {@code SortedMultiset} that preserves the comparator, call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once. <p>Note that if {@code s} is a {@code Multiset<String>}, then {@code ImmutableSortedMultiset.copyOf(s)} returns an {@code ImmutableSortedMultiset<String>} containing each of the strings in {@code s}, while {@code ImmutableSortedMultiset.of(s)} returns an {@code ImmutableSortedMultiset<Multiset<String>>} containing one element (the given multiset itself). <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>This method is not type-safe, as it may be called on elements that are not mutually comparable. @throws ClassCastException if the elements are not mutually comparable @throws NullPointerException if any of {@code elements} is null
600 Returns a newly-created {@code ImmutableSortedMultiset} based on the contents of the {@code Builder}.
601 Returns a new {@link WildcardType} with {@code upperBound}.
602 Returns a new {@link WildcardType} with {@code lowerBound}.
603 Returns a {@link Collection} of all the permutations of the specified {@link Iterable} using the specified {@link Comparator} for establishing the lexicographical ordering. <p>Examples: {@snippet : for (List<String> perm : orderedPermutations(asList("b", "c", "a"))) { println(perm); } // -> ["a", "b", "c"] // -> ["a", "c", "b"] // -> ["b", "a", "c"] // -> ["b", "c", "a"] // -> ["c", "a", "b"] // -> ["c", "b", "a"] for (List<Integer> perm : orderedPermutations(asList(1, 2, 2, 1))) { println(perm); } // -> [1, 1, 2, 2] // -> [1, 2, 1, 2] // -> [1, 2, 2, 1] // -> [2, 1, 1, 2] // -> [2, 1, 2, 1] // -> [2, 2, 1, 1] } <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations Generation, described in Knuth's "The Art of Computer Programming", Volume 4, Chapter 7, Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the first permutation will be in ascending order, and the last will be in descending order. <p>Elements that compare equal are considered equal and no new permutations are created by swapping them. <p>An empty iterable has only one permutation, which is an empty list. @param elements the original iterable whose elements have to be permuted. @param comparator a comparator for the iterable's elements. @return an immutable {@link Collection} containing all the different permutations of the original iterable. @throws NullPointerException If the specified iterable is null, has any null elements, or if the specified comparator is null. @since 12.0
604 Returns an {@code ImmutableList} containing all of the elements from this {@code FluentIterable} in the order specified by {@code comparator}. To produce an {@code ImmutableList} sorted by its natural ordering, use {@code toSortedList(Ordering.natural())}. <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code stream.sorted(comparator).collect()}. @param comparator the function by which to sort list elements @throws NullPointerException if any element of this iterable is {@code null} @since 14.0 (since 13.0 as {@code toSortedImmutableList()}).
605 Returns an immutable list containing the given elements, in order. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>Note that if {@code list} is a {@code List<String>}, then {@code ImmutableList.copyOf(list)} returns an {@code ImmutableList<String>} containing each of the strings in {@code list}, while {@code ImmutableList.of(list)} returns an {@code ImmutableList<List<String>>} containing one element (the given list itself). <p>This method is safe to use even when {@code elements} is a synchronized or concurrent collection that is currently being modified by another thread. @throws NullPointerException if {@code elements} contains a null element
606 Returns a newly-created immutable bimap. The iteration order of the returned bimap is the order in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case entries are sorted by value. <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method will throw an exception if there are duplicate keys or values. The {@code build()} method will soon be deprecated. @throws IllegalArgumentException if duplicate keys or values were added
607 Returns a newly-created immutable map, or throws an exception if any key was added more than once. The iteration order of the returned map is the order in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case entries are sorted by value. @throws IllegalArgumentException if duplicate keys were added @since 31.0
608 Returns a newly-created immutable map, using the last value for any key that was added more than once. The iteration order of the returned map is the order in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case entries are sorted by value. If a key was added more than once, it appears in iteration order based on the first time it was added, again unless {@link #orderEntriesByValue} was called. <p>In the current implementation, all values associated with a given key are stored in the {@code Builder} object, even though only one of them will be used in the built map. If there can be many repeated keys, it may be more space-efficient to use a {@link java.util.LinkedHashMap LinkedHashMap} and {@link ImmutableMap#copyOf(Map)} rather than {@code ImmutableMap.Builder}. @since 31.1
609 This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less than {@code toKey}. <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code toKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code toKey}.
610 This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges from {@code fromKey} to {@code toKey}, inclusive or exclusive as indicated by the boolean flags. <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}. @since 12.0
611 This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are greater than or equals to {@code fromKey}. <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromKey}.
612 Returns an immutable map containing the given entries, with keys sorted by their natural ordering. <p>This method is not type-safe, as it may be called on a map with keys that are not mutually comparable. @throws NullPointerException if any key or value in {@code map} is null @throws IllegalArgumentException if any two keys are equal according to the comparator @since 19.0
613 Returns an immutable map containing the same entries as {@code map}, sorted by the natural ordering of the keys. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>This method is not type-safe, as it may be called on a map with keys that are not mutually comparable. @throws ClassCastException if the keys in {@code map} are not mutually comparable @throws NullPointerException if any key or value in {@code map} is null @throws IllegalArgumentException if any two keys are equal according to their natural ordering
614 Returns an immutable map containing the same entries as {@code map}, with keys sorted by the provided comparator. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if any key or value in {@code map} is null @throws IllegalArgumentException if any two keys are equal according to the comparator
615 Returns every possible list that can be formed by choosing one element from each of the given sets in order; the "n-ary <a href="http://en.wikipedia.org/wiki/Cartesian_product">Cartesian product</a>" of the sets. For example: {@snippet : Sets.cartesianProduct(ImmutableList.of( ImmutableSet.of(1, 2), ImmutableSet.of("A", "B", "C"))) } <p>returns a set containing six lists: <ul> <li>{@code ImmutableList.of(1, "A")} <li>{@code ImmutableList.of(1, "B")} <li>{@code ImmutableList.of(1, "C")} <li>{@code ImmutableList.of(2, "A")} <li>{@code ImmutableList.of(2, "B")} <li>{@code ImmutableList.of(2, "C")} </ul> <p>The result is guaranteed to be in the "traditional", lexicographical order for Cartesian products that you would get from nesting for loops: {@snippet : for (B b0 : sets.get(0)) { for (B b1 : sets.get(1)) { ... ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...); // operate on tuple } } } <p>Note that if any input set is empty, the Cartesian product will also be empty. If no sets at all are provided (an empty list), the resulting Cartesian product has one element, an empty list (counter-intuitive, but mathematically consistent). <p><i>Performance notes:</i> while the cartesian product of sets of size {@code m, n, p} is a set of size {@code m x n x p}, its actual memory consumption is much smaller. When the cartesian set is constructed, the input sets are merely copied. Only as the resulting set is iterated are the individual lists created, and these are not retained after iteration. @param sets the sets to choose elements from, in the order that the elements chosen from those sets should appear in the resulting lists @param <B> any common base class shared by all axes (often just {@link Object}) @return the Cartesian product, as an immutable set containing immutable lists @throws NullPointerException if {@code sets}, any one of the {@code sets}, or any element of a provided set is null @throws IllegalArgumentException if the cartesian product size exceeds the {@code int} range @since 2.0
616 Removes only this exact instance, not others that are equals()
617 Removes and returns the value at {@code index}.
618 Returns an immutable set containing each of {@code elements}, minus duplicates, in the order each appears first in the source iterable. This method iterates over {@code elements} only once. <p><b>Performance note:</b> This method will sometimes recognize that the actual copy operation is unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only once. This reduces the expense of habitually making defensive copies at API boundaries. However, the precise conditions for skipping the copy operation are undefined. @throws NullPointerException if any of {@code elements} is null
619 Returns the {@link Invokable} for {@code constructor}, which must be a member of {@code T}. @since 14.0
620 Returns true if this type is a subtype of the given {@code type}. "Subtype" is defined according to <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1">the rules for type arguments</a> introduced with Java generics. @since 19.0
621 Returns the {@link Invokable} for {@code method}, which must be a member of {@code T}. @since 14.0
622 Cleanup expired entries when the lock is available.
623 Creates a {@code CycleDetectingLockFactory.WithExplicitOrdering<E>}.
624 Registers all subscriber methods on {@code object} to receive events. @param object object whose subscriber methods should be registered.
625 Unregisters all subscriber methods on a registered {@code object}. @param object object whose subscriber methods should be unregistered. @throws IllegalArgumentException if the object was not previously registered.
626 Returns an {@link ImmutableGraph.Builder} with the properties of this {@link GraphBuilder}. <p>The returned builder can be used for populating an {@link ImmutableGraph}. <p>Note that the returned builder will always have {@link #incidentEdgeOrder} set to {@link ElementOrder#stable()}, regardless of the value that was set in this builder. @since 28.0
627 Returns a bimap containing the mappings in {@code unfiltered} that satisfy a predicate. The returned bimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the bimap and its views. When given a key/value pair that doesn't satisfy the predicate, the bimap's {@code put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the map's entries have an {@link Entry#setValue} method that throws an {@link IllegalArgumentException} when the existing key and the provided value don't satisfy the predicate. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered bimap or its views, only mappings that satisfy the filter will be removed from the underlying bimap. <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every key/value mapping in the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered bimap and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented at {@link Predicate#apply}. @since 14.0
628 Returns a navigable map containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings whose keys satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 14.0
629 Returns a navigable map containing the mappings in {@code unfiltered} whose values satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()}, {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings whose values satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 14.0
630 Returns a sorted map containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings whose keys satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 11.0
631 Returns a sorted map containing the mappings in {@code unfiltered} whose values satisfy a predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the map and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()}, {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map or its views, only mappings whose values satisfy the filter will be removed from the underlying map. <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered map and use the copy. <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented at {@link Predicate#apply}. Do not provide a predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. @since 11.0
632 Returns an immutable sorted multiset containing the given elements sorted by the given {@code Comparator}. @throws NullPointerException if {@code comparator} or any of {@code elements} is null
633 Returns all locations that {@code classloader} and parent loaders load classes and resources from. Callers can {@linkplain LocationInfo#scanResources scan} individual locations selectively or even in parallel.
634 Returns {@code ? extends X} if any of {@code bounds} is a subtype of {@code X[]}; or null otherwise.
635 Returns the array type of {@code componentType}.
636 Returns a {@link Collection} of all the permutations of the specified {@link Iterable}. <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations Generation, described in Knuth's "The Art of Computer Programming", Volume 4, Chapter 7, Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the first permutation will be in ascending order, and the last will be in descending order. <p>Duplicate elements are considered equal. For example, the list [1, 1] will have only one permutation, instead of two. This is why the elements have to implement {@link Comparable}. <p>An empty iterable has only one permutation, which is an empty list. <p>This method is equivalent to {@code Collections2.orderedPermutations(list, Ordering.natural())}. @param elements the original iterable whose elements have to be permuted. @return an immutable {@link Collection} containing all the different permutations of the original iterable. @throws NullPointerException if the specified iterable is null or has any null elements. @since 12.0
637 Returns an immutable multiset containing the given elements, in the "grouped iteration order" described in the class documentation. @throws NullPointerException if any of {@code elements} is null
638 Returns an immutable multiset containing the given elements, in the "grouped iteration order" described in the class documentation. @throws NullPointerException if any of {@code elements} is null
639 Returns a copy of {@code multiset} as an {@link ImmutableMultiset} whose iteration order puts the highest count first, with ties broken by the iteration order of the original multiset. @since 11.0
640 Returns a {@link Collection} of all the permutations of the specified {@link Collection}. <p><i>Notes:</i> This is an implementation of the Plain Changes algorithm for permutations generation, described in Knuth's "The Art of Computer Programming", Volume 4, Chapter 7, Section 7.2.1.2. <p>If the input list contains equal elements, some of the generated permutations will be equal. <p>An empty collection has only one permutation, which is an empty list. @param elements the original collection whose elements have to be permuted. @return an immutable {@link Collection} containing all the different permutations of the original collection. @throws NullPointerException if the specified collection is null or has any null elements. @since 12.0
641 Returns an immutable list containing the given elements, in order. If {@code elements} is a {@link Collection}, this method behaves exactly as {@link #copyOf(Collection)}; otherwise, it behaves exactly as {@code copyOf(elements.iterator()}. @throws NullPointerException if {@code elements} contains a null element
642 Returns an immutable copy of the specified {@code RangeSet}.
643 Returns an immutable sorted set containing the elements of a sorted set, sorted by the same {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always uses the natural ordering of the elements. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. <p>This method is safe to use even when {@code sortedSet} is a synchronized or concurrent collection that is currently being modified by another thread. @throws NullPointerException if {@code sortedSet} or any of its elements is null
644 Reads all the lines of this source as a list of strings. The returned list will be empty if this source is empty. <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code \n}. If the source's content does not end in a line termination sequence, it is treated as if it does. @throws IOException if an I/O error occurs while reading from this source
645 Returns a new immutable class-to-instance map containing the entries provided to this builder. @throws IllegalArgumentException if duplicate keys were added
646 Creates an ImmutableListMultimap from an asMap.entrySet.
647 Returns a newly-created immutable map. The iteration order of the returned map is the order in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case entries are sorted by value. <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method will throw an exception if there are duplicate keys. The {@code build()} method will soon be deprecated. @throws IllegalArgumentException if duplicate keys were added
648 Creates an ImmutableSetMultimap from an asMap.entrySet.
649 Creates an {@code ImmutableMap<String, String>} from a {@code Properties} instance. Properties normally derive from {@code Map<Object, Object>}, but they typically contain strings, which is awkward. This method lets you get a plain-old-{@code Map} out of a {@code Properties}. @param properties a {@code Properties} object to be converted @return an immutable map containing all the entries in {@code properties} @throws ClassCastException if any key in {@code properties} is not a {@code String} @throws NullPointerException if any key or value in {@code properties} is null
650 Returns a map from the ith element of list to i.
651 Returns a new immutable type-to-instance map containing the entries provided to this builder. @throws IllegalArgumentException if duplicate keys were added
652 Returns a new {@code TypeResolver} with {@code variable} mapping to {@code type}.
653 Returns an immutable map whose keys are the distinct elements of {@code keys} and whose value for each key was computed by {@code valueFunction}. The map's iteration order is the order of the first appearance of each key in {@code keys}. <p>When there are multiple instances of a key in {@code keys}, it is unspecified whether {@code valueFunction} will be applied to more than one instance of that key and, if it is, which result will be mapped to that key in the returned map. @throws NullPointerException if any element of {@code keys} is {@code null}, or if {@code valueFunction} produces {@code null} for any key @since 14.0
654 This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges from {@code fromKey}, inclusive, to {@code toKey}, exclusive. <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps the original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.
655 Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose keys and values are the result of applying the provided mapping functions to the input elements. <p>If the mapped keys contain duplicates (according to the comparator), the values are merged using the specified merging function. Entries will appear in the encounter order of the first occurrence of the key. @since 21.0
656 Removes and returns the greatest element of this queue, or returns {@code null} if the queue is empty.
657 Removes and returns the greatest element of this queue. @throws NoSuchElementException if the queue is empty
658 Returns an {@code ImmutableSet} containing all of the elements from this fluent iterable with duplicates removed. <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSet#toImmutableSet} to {@code stream.collect()}. @throws NullPointerException if any element is {@code null} @since 14.0 (since 12.0 as {@code toImmutableSet()}).
659 Returns true if this type is a supertype of the given {@code type}. "Supertype" is defined according to <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1">the rules for type arguments</a> introduced with Java generics. @since 19.0
660 Returns true if this type is a supertype of the given {@code type}. "Supertype" is defined according to <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1">the rules for type arguments</a> introduced with Java generics. @since 19.0
661 Returns true if this type is a subtype of the given {@code type}. "Subtype" is defined according to <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1">the rules for type arguments</a> introduced with Java generics. @since 19.0
662 Drain the key and value reference queues, cleaning up internal entries containing garbage collected keys or values.
663 Returns a bimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The returned bimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the bimap and its views. When given a key that doesn't satisfy the predicate, the bimap's {@code put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered bimap or its views, only mappings that satisfy the filter will be removed from the underlying bimap. <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every key in the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered bimap and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented at {@link Predicate#apply}. @since 14.0
664 Returns a bimap containing the mappings in {@code unfiltered} whose values satisfy a predicate. The returned bimap is a live view of {@code unfiltered}; changes to one affect the other. <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have iterators that don't support {@code remove()}, but all other methods are supported by the bimap and its views. When given a value that doesn't satisfy the predicate, the bimap's {@code put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the map's entries have a {@link Entry#setValue} method that throws an {@link IllegalArgumentException} when the provided value doesn't satisfy the predicate. <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered bimap or its views, only mappings that satisfy the filter will be removed from the underlying bimap. <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is. <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every value in the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i> needed, it may be faster to copy the filtered bimap and use the copy. <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented at {@link Predicate#apply}. @since 14.0
665 Returns an immutable sorted multiset containing the given elements sorted by their natural ordering. <p>This method is not type-safe, as it may be called on elements that are not mutually comparable. @throws ClassCastException if the elements are not mutually comparable @throws NullPointerException if any of {@code elements} is null
666 Returns the type token representing the generic type declaration of {@code cls}. For example: {@code TypeToken.getGenericType(Iterable.class)} returns {@code Iterable<T>}. <p>If {@code cls} isn't parameterized and isn't a generic array, the type token of the class is returned.
667 Returns an {@code ImmutableMultiset} containing all of the elements from this fluent iterable. <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableMultiset#toImmutableMultiset} to {@code stream.collect()}. @throws NullPointerException if any element is null @since 19.0
668 Returns a newly-created {@code ImmutableMultiset} based on the contents of the {@code Builder}.
669 Returns every possible list that can be formed by choosing one element from each of the given lists in order; the "n-ary <a href="http://en.wikipedia.org/wiki/Cartesian_product">Cartesian product</a>" of the lists. For example: {@snippet : Lists.cartesianProduct(ImmutableList.of( ImmutableList.of(1, 2), ImmutableList.of("A", "B", "C"))) } <p>returns a list containing six lists in the following order: <ul> <li>{@code ImmutableList.of(1, "A")} <li>{@code ImmutableList.of(1, "B")} <li>{@code ImmutableList.of(1, "C")} <li>{@code ImmutableList.of(2, "A")} <li>{@code ImmutableList.of(2, "B")} <li>{@code ImmutableList.of(2, "C")} </ul> <p>The result is guaranteed to be in the "traditional", lexicographical order for Cartesian products that you would get from nesting for loops: {@snippet : for (B b0 : lists.get(0)) { for (B b1 : lists.get(1)) { ... ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...); // operate on tuple } } } <p>Note that if any input list is empty, the Cartesian product will also be empty. If no lists at all are provided (an empty list), the resulting Cartesian product has one element, an empty list (counter-intuitive, but mathematically consistent). <p><i>Performance notes:</i> while the cartesian product of lists of size {@code m, n, p} is a list of size {@code m x n x p}, its actual memory consumption is much smaller. When the cartesian product is constructed, the input lists are merely copied. Only as the resulting list is iterated are the individual lists created, and these are not retained after iteration. @param lists the lists to choose elements from, in the order that the elements chosen from those lists should appear in the resulting lists @param <B> any common base class shared by all axes (often just {@link Object}) @return the Cartesian product, as an immutable list containing immutable lists @throws IllegalArgumentException if the size of the cartesian product would be greater than {@link Integer#MAX_VALUE} @throws NullPointerException if {@code lists}, any one of the {@code lists}, or any element of a provided list is null @since 19.0
670 Creates a CacheBuilderSpec from a string. @param cacheBuilderSpecification the string form
671 Returns an {@code ImmutableList} containing all of the elements from this fluent iterable in proper sequence. <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code stream.collect()}. @throws NullPointerException if any element is {@code null} @since 14.0 (since 12.0 as {@code toImmutableList()}).
672 Returns an immutable list of paths to the files contained in the given directory. @throws NoSuchFileException if the file does not exist <i>(optional specific exception)</i> @throws NotDirectoryException if the file could not be opened because it is not a directory <i>(optional specific exception)</i> @throws IOException if an I/O error occurs
673 Constructor used to implement {@link #from(String)}, and from subclasses.
674 Creates a new {@code ListenableFuture} whose value is a list containing the values of all its input futures, if all succeed. <p>The list of results is in the same order as the input list. <p>This differs from {@link #successfulAsList(Iterable)} in that it will return a failed future if any of the items fails. <p>Canceling this future will attempt to cancel all the component futures, and if any of the provided futures fails or is canceled, this one is, too. @param futures futures to combine @return a future that provides a list of the results of the component futures @since 10.0
675 Creates a {@link FutureCombiner} that processes the completed futures whether or not they're successful. <p>Any failures from the input futures will not be propagated to the returned future. @since 20.0
676 Creates a {@link FutureCombiner} requiring that all passed in futures are successful. <p>If any input fails, the returned future fails immediately. @since 20.0
677 Creates a new {@code ListenableFuture} whose value is a list containing the values of all its successful input futures. The list of results is in the same order as the input list, and if any of the provided futures fails or is canceled, its corresponding position will contain {@code null} (which is indistinguishable from the future having a successful value of {@code null}). <p>The list of results is in the same order as the input list. <p>This differs from {@link #allAsList(Iterable)} in that it's tolerant of failed futures for any of the items, representing them as {@code null} in the result list. <p>Canceling this future will attempt to cancel all the component futures. @param futures futures to combine @return a future that provides a list of the results of the component futures @since 10.0
678 Can't use Iterables.toArray because it's not gwt compatible
679 Returns an {@code ImmutableRangeSet} representing the union of the specified ranges. <p>This is the smallest {@code RangeSet} which encloses each of the specified ranges. Duplicate or connected ranges are permitted, and will be coalesced in the result. @since 21.0
680 Returns a new range set consisting of the intersection of this range set and {@code other}. <p>This is essentially the same as {@code TreeRangeSet.create(this).removeAll(other.complement())} except it returns an {@code ImmutableRangeSet}. @since 21.0
681 Returns a new range set consisting of the difference of this range set and {@code other}. <p>This is essentially the same as {@code TreeRangeSet.create(this).removeAll(other)} except it returns an {@code ImmutableRangeSet}. @since 21.0
682 Returns a {@link Collector} that accumulates elements into an {@code ImmutableBiMap} whose keys and values are the result of applying the provided mapping functions to the input elements. Entries appear in the result {@code ImmutableBiMap} in encounter order. <p>If the mapped keys or values contain duplicates (according to {@link Object#equals(Object)}), an {@code IllegalArgumentException} is thrown when the collection operation is performed. (This differs from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which throws an {@code IllegalStateException}.) @since 21.0
683 Returns an immutable map containing the same entries as {@code map}. If {@code map} somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose comparator is not <i>consistent with equals</i>), the results of this method are undefined. <p><b>Note:</b> Despite what the method name suggests, if {@code map} is an {@code ImmutableClassToInstanceMap}, no copy will actually be performed. @throws NullPointerException if any key or value in {@code map} is null @throws ClassCastException if any value is not an instance of the type specified by its key
684 Returns an immutable multimap containing the same mappings as {@code multimap}. The generated multimap's key and value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if any key or value in {@code multimap} is null
685 Returns a newly-created immutable multimap.
686 @since 28.1
687 Returns a newly-created immutable set multimap.
688 Returns a map with the given {@code values}, indexed by keys derived from those values. In other words, each input value produces an entry in the map whose key is the result of applying {@code keyFunction} to that value. These entries appear in the same order as the input values. Example usage: {@snippet : Color red = new Color("red", 255, 0, 0); ... Iterator<Color> allColors = ImmutableSet.of(red, green, blue).iterator(); Map<String, Color> colorForName = uniqueIndex(allColors, toStringFunction()); assertThat(colorForName).containsEntry("red", red); } <p>If your index may associate multiple values with each key, use {@link Multimaps#index(Iterator, Function) Multimaps.index}. @param values the values to use when constructing the {@code Map} @param keyFunction the function used to produce the key for each value @return a map mapping the result of evaluating the function {@code keyFunction} on each value in the input collection to that value @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one value in the input collection @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code keyFunction} produces {@code null} for any value @since 10.0
689 Returns the set of all subsets of {@code set} of size {@code size}. For example, {@code combinations(ImmutableSet.of(1, 2, 3), 2)} returns the set {@code {{1, 2}, {1, 3}, {2, 3}}}. <p>Elements appear in these subsets in the same iteration order as they appeared in the input set. The order in which these subsets appear in the outer set is undefined. <p>The returned set and its constituent sets use {@code equals} to decide whether two elements are identical, even if the input set uses a different concept of equivalence. <p><i>Performance notes:</i> the memory usage of the returned set is only {@code O(n)}. When the result set is constructed, the input set is merely copied. Only as the result set is iterated are the individual subsets created. Each of these subsets occupies an additional O(n) memory but only for as long as the user retains a reference to it. That is, the set returned by {@code combinations} does not retain the individual subsets. @param set the set of elements to take combinations of @param size the number of elements per combination @return the set of all combinations of {@code size} elements from {@code set} @throws IllegalArgumentException if {@code size} is not between 0 and {@code set.size()} inclusive @throws NullPointerException if {@code set} is or contains {@code null} @since 23.0
690 Returns an immutable copy of {@code graph}.
691 Returns a new {@code TypeResolver} with {@code variable} mapping to {@code type}.
692 Returns an immutable map whose keys are the distinct elements of {@code keys} and whose value for each key was computed by {@code valueFunction}. The map's iteration order is the order of the first appearance of each key in {@code keys}. <p>When there are multiple instances of a key in {@code keys}, it is unspecified whether {@code valueFunction} will be applied to more than one instance of that key and, if it is, which result will be mapped to that key in the returned map. <p>If {@code keys} is a {@link Set}, a live view can be obtained instead of a copy using {@link Maps#asMap(Set, Function)}. <p><b>Note:</b> on Java 8+, it is usually better to use streams. For example: {@snippet : import static com.google.common.collect.ImmutableMap.toImmutableMap; ... ImmutableMap<Color, String> colorNames = allColors.stream().collect(toImmutableMap(c -> c, c -> c.toString())); } <p>Streams provide a more standard and flexible API and the lambdas make it clear what the keys and values in the map are. @throws NullPointerException if any element of {@code keys} is {@code null}, or if {@code valueFunction} produces {@code null} for any key @since 14.0
693 Removes and returns the least element of this queue, or returns {@code null} if the queue is empty.
694 Adds the given element to this queue. If this queue has a maximum size, after adding {@code element} the queue will automatically evict its greatest element (according to its comparator), which may be {@code element} itself.
695 Returns all classes loadable from the current class path. @since 16.0
696 Returns all top level classes loadable from the current class path. Note that "top-level-ness" is determined heuristically by class name (see {@link ClassInfo#isTopLevel}).
697 Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code startNodes}, in the order of a breadth-first traversal. This is equivalent to a breadth-first traversal of a graph with an additional root node whose successors are the listed {@code startNodes}. @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph @see #breadthFirst(Object) @since 24.1
698 Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code startNodes}, in the order of a depth-first pre-order traversal. This is equivalent to a depth-first pre-order traversal of a graph with an additional root node whose successors are the listed {@code startNodes}. @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph @see #depthFirstPreOrder(Object) @since 24.1
699 Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code startNodes}, in the order of a depth-first post-order traversal. This is equivalent to a depth-first post-order traversal of a graph with an additional root node whose successors are the listed {@code startNodes}. @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph @see #depthFirstPostOrder(Object) @since 24.1
700 Scans this location and returns all scanned resources. <p>This file and jar files from "Class-Path" entry in the scanned manifest files will be added to {@code scannedFiles}. <p>A file will be scanned at most once even if specified multiple times by one or multiple jar files' "Class-Path" manifest entries. Particularly, if a jar file from the "Class-Path" manifest entry is already in {@code scannedFiles}, either because it was scanned earlier, or it was intentionally added to the set by the caller, it will not be scanned again. <p>Note that when you call {@code location.scanResources(scannedFiles)}, the location will always be scanned even if {@code scannedFiles} already contains it.
701 Explicitly specifies the return type of this {@code Invokable}.
702 Cleanup collected entries when the lock is available.
703 Resolves all type variables in {@code type} and all downstream types and returns a corresponding type with type variables resolved.
704 {@code A.is(B)} is defined as {@code Foo<A>.isSubtypeOf(Foo<B>)}. <p>Specifically, returns true if any of the following conditions is met: <ol> <li>'this' and {@code formalType} are equal. <li>'this' and {@code formalType} have equal canonical form. <li>{@code formalType} is {@code <? extends Foo>} and 'this' is a subtype of {@code Foo}. <li>{@code formalType} is {@code <? super Foo>} and 'this' is a supertype of {@code Foo}. </ol> Note that condition 2 isn't technically accurate under the context of a recursively bounded type variables. For example, {@code Enum<? extends Enum<E>>} canonicalizes to {@code Enum<?>} where {@code E} is the type variable declared on the {@code Enum} class declaration. It's technically <em>not</em> true that {@code Foo<Enum<? extends Enum<E>>>} is a subtype of {@code Foo<Enum<?>>} according to JLS. See testRecursiveWildcardSubtypeBug() for a real example. <p>It appears that properly handling recursive type bounds in the presence of implicit type bounds is not easy. For now we punt, hoping that this defect should rarely cause issues in real code. @param formalType is {@code Foo<formalType>} a supertype of {@code Foo<T>}? @param declaration The type variable in the context of a parameterized type. Used to infer type bound when {@code formalType} is a wildcard with implicit upper bound.
705 In reflection, {@code Foo<?>.getUpperBounds()[0]} is always {@code Object.class}, even when Foo is defined as {@code Foo<T extends String>}. Thus directly calling {@code <?>.is(String.class)} will return false. To mitigate, we canonicalize wildcards by enforcing the following invariants: <ol> <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For example both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to {@code Enum<? extends Enum<E>}. <li>{@code canonicalize(t)} produces a "literal" supertype of t. For example: {@code Enum<? extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is a supertype (if we disregard the upper bound is implicitly an Enum too). <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)} and vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}. <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}. </ol>
706 Constructs a new {@code CacheBuilder} instance with the settings specified in {@code spec}. This is especially useful for command-line configuration of a {@code CacheBuilder}. @param spec a String in the format specified by {@link CacheBuilderSpec} @since 12.0
707 Returns a CacheBuilderSpec that will prevent caching.
708 Returns an instance of {@link InternetDomainName} after lenient validation. Specifically, validation against <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a> ("Internationalizing Domain Names in Applications") is skipped, while validation against <a href="http://www.ietf.org/rfc/rfc1035.txt">RFC 1035</a> is relaxed in the following ways: <ul> <li>Any part containing non-ASCII characters is considered valid. <li>Underscores ('_') are permitted wherever dashes ('-') are permitted. <li>Parts other than the final part may start with a digit, as mandated by <a href="https://tools.ietf.org/html/rfc1123#section-2">RFC 1123</a>. </ul> @param domain A domain name (not IP address) @throws IllegalArgumentException if {@code domain} is not syntactically valid according to {@link #isValid} @since 10.0 (previously named {@code fromLenient})
709 Returns a list of delegate futures that correspond to the futures received in the order that they complete. Delegate futures return the same value or throw the same exception as the corresponding input future returns/throws. <p>"In the order that they complete" means, for practical purposes, about what you would expect, but there are some subtleties. First, we do guarantee that, if the output future at index n is done, the output future at index n-1 is also done. (But as usual with futures, some listeners for future n may complete before some for future n-1.) However, it is possible, if one input completes with result X and another later with result Y, for Y to come before X in the output future list. (Such races are impossible to solve without global synchronization of all future completions. And they should have little practical impact.) <p>Cancelling a delegate future propagates to input futures once all the delegates complete, either from cancellation or because an input future has completed. If N futures are passed in, and M delegates are cancelled, the remaining M input futures will be cancelled once N - M of the input futures complete. If all the delegates are cancelled, all the input futures will be too. @since 17.0
710 Returns a new range set consisting of the union of this range set and {@code other}. <p>This is essentially the same as {@code TreeRangeSet.create(this).addAll(other)} except it returns an {@code ImmutableRangeSet}. @since 21.0
711 Returns an immutable multimap containing the same mappings as {@code multimap}, in the "key-grouped" iteration order described in the class documentation. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if any key or value in {@code multimap} is null
712 Returns a newly-created immutable list multimap.
713 Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys and values are the result of applying the provided mapping functions to the input elements. Entries appear in the result {@code ImmutableMap} in encounter order. <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}, an {@code IllegalArgumentException} is thrown when the collection operation is performed. (This differs from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which throws an {@code IllegalStateException}.) @since 21.0
714 Returns an immutable multimap containing a single entry.
715 Returns an immutable multimap containing the given entries, in order. Repeated occurrences of an entry (according to {@link Object#equals}) after the first are ignored.
716 Returns an immutable multimap containing the given entries, in order. Repeated occurrences of an entry (according to {@link Object#equals}) after the first are ignored.
717 Returns an immutable multimap containing the given entries, in order. Repeated occurrences of an entry (according to {@link Object#equals}) after the first are ignored.
718 Returns an immutable multimap containing the given entries, in order. Repeated occurrences of an entry (according to {@link Object#equals}) after the first are ignored.
719 Returns an immutable multimap containing the specified entries. The returned multimap iterates over keys in the order they were first encountered in the input, and the values for each key are iterated in the order they were encountered. If two values for the same key are {@linkplain Object#equals equal}, the first value encountered is used. @throws NullPointerException if any key, value, or entry is null @since 19.0
720 Returns an immutable set multimap containing the same mappings as {@code multimap}. The generated multimap's key and value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view. Repeated occurrences of an entry in the multimap after the first are ignored. <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change. @throws NullPointerException if any key or value in {@code multimap} is null
721 Returns a map with the given {@code values}, indexed by keys derived from those values. In other words, each input value produces an entry in the map whose key is the result of applying {@code keyFunction} to that value. These entries appear in the same order as the input values. Example usage: {@snippet : Color red = new Color("red", 255, 0, 0); ... ImmutableSet<Color> allColors = ImmutableSet.of(red, green, blue); ImmutableMap<String, Color> colorForName = uniqueIndex(allColors, c -> c.toString()); assertThat(colorForName).containsEntry("red", red); } <p>If your index may associate multiple values with each key, use {@link Multimaps#index(Iterable, Function) Multimaps.index}. <p><b>Note:</b> on Java 8+, it is usually better to use streams. For example: {@snippet : import static com.google.common.collect.ImmutableMap.toImmutableMap; ... ImmutableMap<String, Color> colorForName = allColors.stream().collect(toImmutableMap(c -> c.toString(), c -> c)); } <p>Streams provide a more standard and flexible API and the lambdas make it clear what the keys and values in the map are. @param values the values to use when constructing the {@code Map} @param keyFunction the function used to produce the key for each value @return a map mapping the result of evaluating the function {@code keyFunction} on each value in the input collection to that value @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one value in the input collection @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code keyFunction} produces {@code null} for any value
722 Creates an {@code ArrayTable} filled with {@code null}. @param rowKeys row keys that may be stored in the generated table @param columnKeys column keys that may be stored in the generated table @throws NullPointerException if any of the provided keys is null @throws IllegalArgumentException if {@code rowKeys} or {@code columnKeys} contains duplicates or if exactly one of {@code rowKeys} or {@code columnKeys} is empty.
723 Returns the set of all possible subsets of {@code set}. For example, {@code powerSet(ImmutableSet.of(1, 2))} returns the set {@code {{}, {1}, {2}, {1, 2}}}. <p>Elements appear in these subsets in the same iteration order as they appeared in the input set. The order in which these subsets appear in the outer set is undefined. Note that the power set of the empty set is not the empty set, but a one-element set containing the empty set. <p>The returned set and its constituent sets use {@code equals} to decide whether two elements are identical, even if the input set uses a different concept of equivalence. <p><i>Performance notes:</i> while the power set of a set with size {@code n} is of size {@code 2^n}, its memory usage is only {@code O(n)}. When the power set is constructed, the input set is merely copied. Only as the power set is iterated are the individual subsets created, and these subsets themselves occupy only a small constant amount of memory. @param set the set of elements to construct a power set from @return the power set, as an immutable set of immutable sets @throws IllegalArgumentException if {@code set} has more than 30 unique elements (causing the power set size to exceed the {@code int} range) @throws NullPointerException if {@code set} is or contains {@code null} @see <a href="http://en.wikipedia.org/wiki/Power_set">Power set article at Wikipedia</a> @since 4.0
724 A factory that chooses the most space-efficient representation of the table.
725 Returns a newly-created {@code ImmutableGraph} based on the contents of this {@code Builder}.
726 Returns an immutable copy of {@code network}.
727 Returns an immutable copy of {@code graph}.
728 Returns a resolver that resolves types "covariantly". <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code <T>} is covariantly resolved to {@code <?>} such that return type of {@code List::get} is {@code <?>}.
729 Returns a resolver that resolves types "invariantly". <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code <T>} cannot be invariantly resolved to {@code <?>} because otherwise the parameter type of {@code List::set} will be {@code <?>} and it'll falsely say any object can be passed into {@code ArrayList<?>::set}. <p>Instead, {@code <?>} will be resolved to a capture in the form of a type variable {@code <capture-of-? extends Object>}, effectively preventing {@code set} from accepting any type.
730 Returns a new {@code TypeResolver} with type variables in {@code formal} mapping to types in {@code actual}. <p>For example, if {@code formal} is a {@code TypeVariable T}, and {@code actual} is {@code String.class}, then {@code new TypeResolver().where(formal, actual)} will {@linkplain #resolveType resolve} {@code ParameterizedType List<T>} to {@code List<String>}, and resolve {@code Map<T, Something>} to {@code Map<String, Something>} etc. Similarly, {@code formal} and {@code actual} can be {@code Map<K, V>} and {@code Map<String, Integer>} respectively, or they can be {@code E[]} and {@code String[]} respectively, or even any arbitrary combination thereof. @param formal The type whose type variables or itself is mapped to other type(s). It's almost always a bug if {@code formal} isn't a type variable and contains no type variable. Make sure you are passing the two parameters in the right order. @param actual The type that the formal type variable(s) are mapped to. It can be or contain yet other type variables, in which case these type variables will be further resolved if corresponding mappings exist in the current {@code TypeResolver} instance.
731 Returns an immutable map whose keys are the distinct elements of this {@code FluentIterable} and whose value for each key was computed by {@code valueFunction}. The map's iteration order is the order of the first appearance of each key in this iterable. <p>When there are multiple instances of a key in this iterable, it is unspecified whether {@code valueFunction} will be applied to more than one instance of that key and, if it is, which result will be mapped to that key in the returned map. <p><b>{@code Stream} equivalent:</b> {@code stream.collect(ImmutableMap.toImmutableMap(k -> k, valueFunction))}. @throws NullPointerException if any element of this iterable is {@code null}, or if {@code valueFunction} produces {@code null} for any key @since 14.0
732 Builds a new min-max priority queue using the previously specified options, and having the given initial elements.
733 Adds the given element to this queue. If this queue has a maximum size, after adding {@code element} the queue will automatically evict its greatest element (according to its comparator), which may be {@code element} itself. @return {@code true} always
734 Returns all top level classes whose package name is {@code packageName}.
735 Returns all top level classes whose package name is {@code packageName} or starts with {@code packageName} followed by a '.'.
736 Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in the order of a breadth-first traversal. That is, all the nodes of depth 0 are returned, then depth 1, then 2, and so on. <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in the order {@code abcdef} (assuming successors are returned in alphabetical order). {@snippet : b ---- a ---- d | | | | e ---- c ---- f } <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change while iteration is in progress. <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will compute its next element on the fly. It is thus possible to limit the traversal to a certain number of nodes as follows: {@snippet : Iterables.limit(Traverser.forGraph(graph).breadthFirst(node), maxNumberOfNodes); } <p>See <a href="https://en.wikipedia.org/wiki/Breadth-first_search">Wikipedia</a> for more info. @throws IllegalArgumentException if {@code startNode} is not an element of the graph
737 Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in the order of a depth-first pre-order traversal. "Pre-order" implies that nodes appear in the {@code Iterable} in the order in which they are first visited. <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in the order {@code abecfd} (assuming successors are returned in alphabetical order). {@snippet : b ---- a ---- d | | | | e ---- c ---- f } <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change while iteration is in progress. <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will compute its next element on the fly. It is thus possible to limit the traversal to a certain number of nodes as follows: {@snippet : Iterables.limit( Traverser.forGraph(graph).depthFirstPreOrder(node), maxNumberOfNodes); } <p>See <a href="https://en.wikipedia.org/wiki/Depth-first_search">Wikipedia</a> for more info. @throws IllegalArgumentException if {@code startNode} is not an element of the graph
738 Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in the order of a depth-first post-order traversal. "Post-order" implies that nodes appear in the {@code Iterable} in the order in which they are visited for the last time. <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in the order {@code fcebda} (assuming successors are returned in alphabetical order). {@snippet : b ---- a ---- d | | | | e ---- c ---- f } <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change while iteration is in progress. <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will compute its next element on the fly. It is thus possible to limit the traversal to a certain number of nodes as follows: {@snippet : Iterables.limit( Traverser.forGraph(graph).depthFirstPostOrder(node), maxNumberOfNodes); } <p>See <a href="https://en.wikipedia.org/wiki/Depth-first_search">Wikipedia</a> for more info. @throws IllegalArgumentException if {@code startNode} is not an element of the graph
739 Scans this location and returns all scanned resources.
740 Returns a {@code ClassPath} representing all classes and resources loadable from {@code classloader} and its ancestor class loaders. <p><b>Warning:</b> {@code ClassPath} can find classes and resources only from: <ul> <li>{@link URLClassLoader} instances' {@code file:} URLs <li>the {@linkplain ClassLoader#getSystemClassLoader() system class loader}. To search the system class loader even when it is not a {@link URLClassLoader} (as in Java 9), {@code ClassPath} searches the files from the {@code java.class.path} system property. </ul> @throws IOException if the attempt to read class path resources (jar files or directories) failed.
741 Explicitly specifies the return type of this {@code Invokable}. For example: {@snippet : Method factoryMethod = Person.class.getMethod("create"); Invokable<?, Person> factory = Invokable.of(getNameMethod).returning(Person.class); }
742 Gets the value from an entry. Returns null if the entry is invalid, partially-collected, loading, or expired.
743 Performs routine cleanup prior to executing a write. This should be called every time a write thread acquires the segment lock, immediately after acquiring the lock. <p>Post-condition: expireEntries has been run.
744 Resolves {@code var} using the encapsulated type mapping. If it maps to yet another non-reified type or has bounds, {@code forDependants} is used to do further resolution, which doesn't try to resolve any type variable on generic declarations that are already being resolved. <p>Should only be called and overridden by {@link #resolve(TypeVariable)}.
745 If the class is parameterized, such as {@link java.util.ArrayList ArrayList}, this returns {@code ArrayList<E>}.
746 Implemented to support serialization of subclasses.
747 Returns a {@link Traverser} instance for the file and directory tree. The returned traverser starts from a {@link Path} and will return all files and directories it encounters. <p>The returned traverser attempts to avoid following symbolic links to directories. However, the traverser cannot guarantee that it will not follow symbolic links to directories as it is possible for a directory to be replaced with a symbolic link between checking if the file is a directory and actually reading the contents of that directory. <p>If the {@link Path} passed to one of the traversal methods does not exist or is not a directory, no exception will be thrown and the returned {@link Iterable} will contain a single element: that path. <p>{@link DirectoryIteratorException} may be thrown when iterating {@link Iterable} instances created by this traverser if an {@link IOException} is thrown by a call to {@link #listFiles(Path)}. <p>Example: {@code MoreFiles.fileTraverser().depthFirstPreOrder(Paths.get("/"))} may return the following paths: {@code ["/", "/etc", "/etc/config.txt", "/etc/fonts", "/home", "/home/alice", ...]} @since 23.5
748 Returns a {@code HostSpecifier} built from the provided {@code specifier}, which is already known to be valid. If the {@code specifier} might be invalid, use {@link #from(String)} instead. <p>The specifier must be in one of these formats: <ul> <li>A domain name, like {@code google.com} <li>A IPv4 address string, like {@code 127.0.0.1} <li>An IPv6 address string with or without brackets, like {@code [2001:db8::1]} or {@code 2001:db8::1} </ul> @throws IllegalArgumentException if the specifier is not valid.
749 Returns the ancestor of the current domain at the given number of levels "higher" (rightward) in the subdomain list. The number of levels must be non-negative, and less than {@code N-1}, where {@code N} is the number of parts in the domain. <p>TODO: Reasonable candidate for addition to public API.
750 Creates and returns a new {@code InternetDomainName} by prepending the argument and a dot to the current name. For example, {@code InternetDomainName.from("foo.com").child("www.bar")} returns a new {@code InternetDomainName} with the value {@code www.bar.foo.com}. Only lenient validation is performed, as described {@link #from(String) here}. @throws NullPointerException if leftParts is null @throws IllegalArgumentException if the resulting name is not valid
751 Indicates whether the argument is a syntactically valid domain name using lenient validation. Specifically, validation against <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a> ("Internationalizing Domain Names in Applications") is skipped. <p>The following two code snippets are equivalent: {@snippet : domainName = InternetDomainName.isValid(name) ? InternetDomainName.from(name) : DEFAULT_DOMAIN; } {@snippet : try { domainName = InternetDomainName.from(name); } catch (IllegalArgumentException e) { domainName = DEFAULT_DOMAIN; } } @since 8.0 (previously named {@code isValidLenient})
752 Returns a {@code Collector} accumulating entries into an {@code ImmutableListMultimap}. Each input element is mapped to a key and a stream of values, each of which are put into the resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the streams of values. <p>Example: {@snippet : static final ImmutableListMultimap<Character, Character> FIRST_LETTER_MULTIMAP = Stream.of("banana", "apple", "carrot", "asparagus", "cherry") .collect( flatteningToImmutableListMultimap( str -> str.charAt(0), str -> str.substring(1).chars().mapToObj(c -> (char) c)); // is equivalent to static final ImmutableListMultimap<Character, Character> FIRST_LETTER_MULTIMAP = ImmutableListMultimap.<Character, Character>builder() .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a')) .putAll('a', Arrays.asList('p', 'p', 'l', 'e')) .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't')) .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's')) .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y')) .build(); } } @since 21.0
753 Returns an immutable multimap containing a single entry.
754 Returns an immutable multimap containing the given entries, in order.
755 Returns an immutable multimap containing the given entries, in order.
756 Returns an immutable multimap containing the given entries, in order.
757 Returns an immutable multimap containing the given entries, in order.
758 Returns an immutable multimap containing the specified entries. The returned multimap iterates over keys in the order they were first encountered in the input, and the values for each key are iterated in the order they were encountered. @throws NullPointerException if any key, value, or entry is null @since 19.0
759 Creates an index {@code ImmutableListMultimap} that contains the results of applying a specified function to each item in an {@code Iterator} of values. Each value will be stored as a value in the resulting multimap, yielding a multimap with the same size as the input iterator. The key used to store that value in the multimap will be the result of calling the function on that value. The resulting multimap is created as an immutable snapshot. In the returned multimap, keys appear in the order they are first encountered, and the values corresponding to each key appear in the same order as they are encountered. <p>For example, {@snippet : List<String> badGuys = Arrays.asList("Inky", "Blinky", "Pinky", "Pinky", "Clyde"); Function<String, Integer> stringLengthFunction = ...; Multimap<Integer, String> index = Multimaps.index(badGuys.iterator(), stringLengthFunction); System.out.println(index); } <p>prints {@snippet : {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]} } <p>The returned multimap is serializable if its keys and values are all serializable. @param values the values to use when constructing the {@code ImmutableListMultimap} @param keyFunction the function used to produce the key for each value @return {@code ImmutableListMultimap} mapping the result of evaluating the function {@code keyFunction} on each value in the input collection to that value @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code keyFunction} produces {@code null} for any key @since 10.0
760 <em>Replaces</em> all parameters with the given attribute with parameters using the given values. If there are no values, any existing parameters with the given attribute are removed. @throws IllegalArgumentException if either {@code attribute} or {@code values} is invalid @since 24.0
761 Returns a {@link Collector} that accumulates elements into an {@code ImmutableSetMultimap} whose keys and values are the result of applying the provided mapping functions to the input elements. <p>For streams with defined encounter order (as defined in the Ordering section of the {@link java.util.stream} Javadoc), that order is preserved, but entries are <a href="ImmutableMultimap.html#iteration">grouped by key</a>. <p>Example: {@snippet : static final Multimap<Character, String> FIRST_LETTER_MULTIMAP = Stream.of("banana", "apple", "carrot", "asparagus", "cherry") .collect(toImmutableSetMultimap(str -> str.charAt(0), str -> str.substring(1))); // is equivalent to static final Multimap<Character, String> FIRST_LETTER_MULTIMAP = new ImmutableSetMultimap.Builder<Character, String>() .put('b', "anana") .putAll('a', "pple", "sparagus") .putAll('c', "arrot", "herry") .build(); } @since 21.0
762 {@inheritDoc} <p>Because an inverse of a set multimap cannot contain multiple pairs with the same key and value, this method returns an {@code ImmutableSetMultimap} rather than the {@code ImmutableMultimap} specified in the {@code ImmutableMultimap} class.
763 Marks the {@link State} as ready to receive transitions. Returns true if no transitions have been observed yet.
764 Provides a snapshot of the current state of all the services under management. <p>N.B. This snapshot is guaranteed to be consistent, i.e. the set of states returned will correspond to a point in time view of the services. @since 29.0 (present with return type {@code ImmutableMultimap} since 14.0)
765 Returns a map with the contents of this {@code FluentIterable} as its {@code values}, indexed by keys derived from those values. In other words, each input value produces an entry in the map whose key is the result of applying {@code keyFunction} to that value. These entries appear in the same order as they appeared in this fluent iterable. Example usage: {@snippet : Color red = new Color("red", 255, 0, 0); ... FluentIterable<Color> allColors = FluentIterable.from(ImmutableSet.of(red, green, blue)); Map<String, Color> colorForName = allColors.uniqueIndex(toStringFunction()); assertThat(colorForName).containsEntry("red", red); } <p>If your index may associate multiple values with each key, use {@link #index(Function) index}. <p><b>{@code Stream} equivalent:</b> {@code stream.collect(ImmutableMap.toImmutableMap(keyFunction, v -> v))}. @param keyFunction the function used to produce the key for each value @return a map mapping the result of evaluating the function {@code keyFunction} on each value in this fluent iterable to that value @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one value in this fluent iterable @throws NullPointerException if any element of this iterable is {@code null}, or if {@code keyFunction} produces {@code null} for any key @since 14.0
766 Creates an {@code ArrayTable} with the mappings in the provided table. <p>If {@code table} includes a mapping with row key {@code r} and a separate mapping with column key {@code c}, the returned table contains a mapping with row key {@code r} and column key {@code c}. If that row key / column key pair in not in {@code table}, the pair maps to {@code null} in the generated table. <p>The returned table allows subsequent {@code put} calls with the row keys in {@code table.rowKeySet()} and the column keys in {@code table.columnKeySet()}. Calling {@link #put} with other keys leads to an {@code IllegalArgumentException}. <p>The ordering of {@code table.rowKeySet()} and {@code table.columnKeySet()} determines the row and column iteration ordering of the returned table. @throws NullPointerException if {@code table} has a null key
767 Returns a newly-created {@code ImmutableNetwork} based on the contents of this {@code Builder}.
768 Returns a newly-created {@code ImmutableValueGraph} based on the contents of this {@code Builder}.
769 Constructs a new type token of {@code T} while resolving free type variables in the context of {@code declaringClass}. <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure. <p>For example: {@snippet : abstract class IKnowMyType<T> { TypeToken<T> getMyType() { return new TypeToken<T>(getClass()) {}; } } new IKnowMyType<String>() {}.getMyType() => String }
770 Builds a new min-max priority queue using the previously specified options, and having no initial contents.
771 Creates a new min-max priority queue using natural order, no maximum size, and initially containing the given elements.
772 Returns the set of nodes that are reachable from {@code node}. Node B is defined as reachable from node A if there exists a path (a sequence of adjacent outgoing edges) starting at node A and ending at node B. Note that a node is always reachable from itself via a zero-length path. <p>This is a "snapshot" based on the current topology of {@code graph}, rather than a live view of the set of nodes reachable from {@code node}. In other words, the returned {@link Set} will not be updated after modifications to {@code graph}. @throws IllegalArgumentException if {@code node} is not present in {@code graph} @since 33.1.0 (present with return type {@code Set} since 20.0)
773 Returns the internal entry for the specified key. The entry may be loading, expired, or partially collected.
774 This method is a convenience for testing. Code should call {@link Segment#getLiveValue} instead.
775 Returns a newly inserted {@code LoadingValueReference}, or null if the live value reference is already loading.
776 Performs routine cleanup following a read. Normally cleanup happens during writes. If cleanup is not observed after a sufficient number of reads, try cleaning up from the read thread.
777 Resolves {@code var} using the encapsulated type mapping. If it maps to yet another non-reified type or has bounds, {@code forDependants} is used to do further resolution, which doesn't try to resolve any type variable on generic declarations that are already being resolved. <p>Should only be called and overridden by {@link #resolve(TypeVariable)}.
778 Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a combining function to their values. The function can use a {@link DeferredCloser} to capture objects to be closed when the pipeline is done. <p>If this combiner was returned by a {@link #whenAllSucceed} method and any of the inputs fail, so will the returned step. <p>If the combiningCallable throws a {@code CancellationException}, the pipeline will be cancelled. <p>If the combiningCallable throws an {@code ExecutionException}, the cause of the thrown {@code ExecutionException} will be extracted and used as the failure of the derived step.
779 Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a {@code ClosingFuture}-returning function to their values. The function can use a {@link DeferredCloser} to capture objects to be closed when the pipeline is done (other than those captured by the returned {@link ClosingFuture}). <p>If this combiner was returned by a {@link #whenAllSucceed} method and any of the inputs fail, so will the returned step. <p>If the combiningCallable throws a {@code CancellationException}, the pipeline will be cancelled. <p>If the combiningCallable throws an {@code ExecutionException}, the cause of the thrown {@code ExecutionException} will be extracted and used as the failure of the derived step. <p>If the combiningCallable throws any other exception, it will be used as the failure of the derived step. <p>If an exception is thrown after the combiningCallable creates a {@code ClosingFuture}, then none of the closeable objects in that {@code ClosingFuture} will be closed. <p>Usage guidelines for this method: <ul> <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a {@code ClosingFuture}. If possible, prefer calling {@link #call(CombiningCallable, Executor)} instead, with a function that returns the next value directly. <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()} for every closeable object this step creates in order to capture it for later closing. <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code ClosingFuture} call {@link #from(ListenableFuture)}. </ul> <p>The same warnings about doing heavyweight operations within {@link ClosingFuture#transformAsync(AsyncClosingFunction, Executor)} apply here.
780 Attempts to return a {@code HostSpecifier} for the given string, throwing an exception if parsing fails. Always use this method in preference to {@link #fromValid(String)} for a specifier that is not already known to be valid. @throws ParseException if the specifier is not valid.
781 Determines whether {@code specifier} represents a valid {@link HostSpecifier} as described in the documentation for {@link #fromValid(String)}.
782 Returns the {@linkplain #isPublicSuffix() public suffix} portion of the domain name, or {@code null} if no public suffix is present. @since 6.0
783 Returns the portion of this domain name that is one level beneath the {@linkplain #isPublicSuffix() public suffix}. For example, for {@code x.adwords.google.co.uk} it returns {@code google.co.uk}, since {@code co.uk} is a public suffix. Similarly, for {@code myblog.blogspot.com} it returns the same domain, {@code myblog.blogspot.com}, since {@code blogspot.com} is a public suffix. <p>If {@link #isTopPrivateDomain()} is true, the current domain name instance is returned. <p>This method can be used to determine the probable highest level parent domain for which cookies may be set, though even that depends on individual browsers' implementations of cookie controls. @throws IllegalStateException if this domain does not end with a public suffix @since 6.0
784 Returns the {@linkplain #isRegistrySuffix() registry suffix} portion of the domain name, or {@code null} if no registry suffix is present. @since 23.3
785 Returns the portion of this domain name that is one level beneath the {@linkplain #isRegistrySuffix() registry suffix}. For example, for {@code x.adwords.google.co.uk} it returns {@code google.co.uk}, since {@code co.uk} is a registry suffix. Similarly, for {@code myblog.blogspot.com} it returns {@code blogspot.com}, since {@code com} is a registry suffix. <p>If {@link #isTopDomainUnderRegistrySuffix()} is true, the current domain name instance is returned. <p><b>Warning:</b> This method should not be used to determine whether a domain is probably the highest level for which cookies may be set. Use {@link #isTopPrivateDomain()} for that purpose. @throws IllegalStateException if this domain does not end with a registry suffix @since 23.3
786 Returns an {@code InternetDomainName} that is the immediate ancestor of this one; that is, the current domain with the leftmost part removed. For example, the parent of {@code www.google.com} is {@code google.com}. @throws IllegalStateException if the domain has no parent, as determined by {@link #hasParent}
787 Returns a {@link Collector} that accumulates elements into an {@code ImmutableListMultimap} whose keys and values are the result of applying the provided mapping functions to the input elements. <p>For streams with defined encounter order (as defined in the Ordering section of the {@link java.util.stream} Javadoc), that order is preserved, but entries are <a href="ImmutableMultimap.html#iteration">grouped by key</a>. <p>Example: {@snippet : static final Multimap<Character, String> FIRST_LETTER_MULTIMAP = Stream.of("banana", "apple", "carrot", "asparagus", "cherry") .collect(toImmutableListMultimap(str -> str.charAt(0), str -> str.substring(1))); // is equivalent to static final Multimap<Character, String> FIRST_LETTER_MULTIMAP = new ImmutableListMultimap.Builder<Character, String>() .put('b', "anana") .putAll('a', "pple", "sparagus") .putAll('c', "arrot", "herry") .build(); } @since 21.0
788 Returns an immutable multimap containing a single entry.
789 Returns an immutable multimap containing the given entries, in order.
790 Returns an immutable multimap containing the given entries, in the "key-grouped" insertion order described in the <a href="#iteration">class documentation</a>.
791 Returns an immutable multimap containing the given entries, in the "key-grouped" insertion order described in the <a href="#iteration">class documentation</a>.
792 Returns an immutable multimap containing the given entries, in the "key-grouped" insertion order described in the <a href="#iteration">class documentation</a>.
793 Returns an immutable multimap containing the specified entries. The returned multimap iterates over keys in the order they were first encountered in the input, and the values for each key are iterated in the order they were encountered. @throws NullPointerException if any key, value, or entry is null @since 19.0
794 {@inheritDoc} <p>Because an inverse of a list multimap can contain multiple pairs with the same key and value, this method returns an {@code ImmutableListMultimap} rather than the {@code ImmutableMultimap} specified in the {@code ImmutableMultimap} class. @since 11.0
795 Creates an index {@code ImmutableListMultimap} that contains the results of applying a specified function to each item in an {@code Iterable} of values. Each value will be stored as a value in the resulting multimap, yielding a multimap with the same size as the input iterable. The key used to store that value in the multimap will be the result of calling the function on that value. The resulting multimap is created as an immutable snapshot. In the returned multimap, keys appear in the order they are first encountered, and the values corresponding to each key appear in the same order as they are encountered. <p>For example, {@snippet : List<String> badGuys = Arrays.asList("Inky", "Blinky", "Pinky", "Pinky", "Clyde"); Function<String, Integer> stringLengthFunction = ...; Multimap<Integer, String> index = Multimaps.index(badGuys, stringLengthFunction); System.out.println(index); } <p>prints {@snippet : {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]} } <p>The returned multimap is serializable if its keys and values are all serializable. @param values the values to use when constructing the {@code ImmutableListMultimap} @param keyFunction the function used to produce the key for each value @return {@code ImmutableListMultimap} mapping the result of evaluating the function {@code keyFunction} on each value in the input collection to that value @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code keyFunction} produces {@code null} for any key
796 <em>Replaces</em> all parameters with the given attribute with a single parameter with the given value. If multiple parameters with the same attributes are necessary use {@link #withParameters(String, Iterable)}. Prefer {@link #withCharset} for setting the {@code charset} parameter when using a {@link Charset} object. @throws IllegalArgumentException if either {@code attribute} or {@code value} is invalid
797 <em>Replaces</em> all parameters with the given parameters. @throws IllegalArgumentException if any parameter or value is invalid
798 Creates a new media type with the given type and subtype. @throws IllegalArgumentException if type or subtype is invalid or if a wildcard is used for the type, but not the subtype.
799 Parses a media type from its string representation. @throws IllegalArgumentException if the input is not parsable
800 Constructs a new instance for managing the given services. @param services The services to manage @throws IllegalArgumentException if not all services are {@linkplain State#NEW new} or if there are any duplicate services.
801 Returns a {@code Collector} accumulating entries into an {@code ImmutableSetMultimap}. Each input element is mapped to a key and a stream of values, each of which are put into the resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the streams of values. <p>Example: {@snippet : static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP = Stream.of("banana", "apple", "carrot", "asparagus", "cherry") .collect( flatteningToImmutableSetMultimap( str -> str.charAt(0), str -> str.substring(1).chars().mapToObj(c -> (char) c)); // is equivalent to static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP = ImmutableSetMultimap.<Character, Character>builder() .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a')) .putAll('a', Arrays.asList('p', 'p', 'l', 'e')) .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't')) .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's')) .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y')) .build(); // after deduplication, the resulting multimap is equivalent to static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP = ImmutableSetMultimap.<Character, Character>builder() .putAll('b', Arrays.asList('a', 'n')) .putAll('a', Arrays.asList('p', 'l', 'e', 's', 'a', 'r', 'g', 'u')) .putAll('c', Arrays.asList('a', 'r', 'o', 't', 'h', 'e', 'y')) .build(); } } @since 21.0
802 Resolves the given {@code type} against the type context represented by this type. For example: {@snippet : new TypeToken<List<String>>() {}.resolveType( List.class.getMethod("get", int.class).getGenericReturnType()) => String.class }
803 Creates a new min-max priority queue with default settings: natural order, no maximum size, no initial contents, and an initial expected size of 11.
804 Refreshes the value associated with {@code key}, unless another thread is already doing so. Returns the newly refreshed value associated with {@code key} if it was refreshed inline, or {@code null} if another thread is performing the refresh or if an error occurs during refresh.
805 Waits uninterruptibly for {@code newValue} to be loaded, and then records loading stats.
806 Advances to the given entry. Returns true if the entry was valid, false if it should be skipped.
807 This method is a convenience for testing. Code should call {@link LocalCache#containsValue} directly.
808 Creates an index {@code ImmutableListMultimap} that contains the results of applying a specified function to each item in this {@code FluentIterable} of values. Each element of this iterable will be stored as a value in the resulting multimap, yielding a multimap with the same size as this iterable. The key used to store that value in the multimap will be the result of calling the function on that value. The resulting multimap is created as an immutable snapshot. In the returned multimap, keys appear in the order they are first encountered, and the values corresponding to each key appear in the same order as they are encountered. <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.groupingBy(keyFunction))} behaves similarly, but returns a mutable {@code Map<K, List<E>>} instead, and may not preserve the order of entries. @param keyFunction the function used to produce the key for each value @throws NullPointerException if any element of this iterable is {@code null}, or if {@code keyFunction} produces {@code null} for any key @since 14.0
809 Returns a new instance with the same type and subtype as this instance, with the {@code charset} parameter set to the {@link Charset#name name} of the given charset. Only one {@code charset} parameter will be present on the new instance regardless of the number set on this one. <p>If a charset must be specified that is not supported on this JVM (and thus is not representable as a {@link Charset} instance), use {@link #withParameter}.
810 Returns a new instance with the same type and subtype as this instance, but without any parameters.
811 Creates a media type with the "application" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
812 Creates a media type with the "audio" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
813 Creates a media type with the "font" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
814 Creates a media type with the "image" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
815 Creates a media type with the "text" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
816 Creates a media type with the "video" type and the given subtype. @throws IllegalArgumentException if subtype is invalid
817 Returns a newly-created immutable table, or throws an exception if duplicate key pairs were added. @throws IllegalArgumentException if duplicate key pairs were added @since 31.0
818 Returns the generic superclass of this type or {@code null} if the type represents {@link Object} or an interface. This method is similar but different from {@link Class#getGenericSuperclass}. For example, {@code new TypeToken<StringArrayList>() {}.getGenericSuperclass()} will return {@code new TypeToken<ArrayList<String>>() {}}; while {@code StringArrayList.class.getGenericSuperclass()} will return {@code ArrayList<E>}, where {@code E} is the type variable declared by class {@code ArrayList}. <p>If this type is a type variable or wildcard, its first upper bound is examined and returned if the bound is a class or extends from a class. This means that the returned type could be a type variable too.
819 Returns the generic interfaces that this type directly {@code implements}. This method is similar but different from {@link Class#getGenericInterfaces()}. For example, {@code new TypeToken<List<String>>() {}.getGenericInterfaces()} will return a list that contains {@code new TypeToken<Iterable<String>>() {}}; while {@code List.class.getGenericInterfaces()} will return an array that contains {@code Iterable<T>}, where the {@code T} is the type variable declared by interface {@code Iterable}. <p>If this type is a type variable or wildcard, its upper bounds are examined and those that are either an interface or upper-bounded only by interfaces are returned. This means that the returned types could include type variables too.
820 Returns the generic form of {@code superclass}. For example, if this is {@code ArrayList<String>}, {@code Iterable<String>} is returned given the input {@code Iterable.class}.
821 Returns the result of calling {@link CacheLoader#loadAll}, or null if {@code loader} doesn't implement {@code loadAll}.
822 Finds the next entry in the current chain. Returns true if an entry was found.
823 Returns a newly-created immutable table. <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method will throw an exception if there are duplicate key pairs. The {@code build()} method will soon be deprecated. @throws IllegalArgumentException if duplicate key pairs were added
824 Finds the next entry in the current table. Returns true if an entry was found.
825 Returns subtype of {@code this} with {@code subclass} as the raw class. For example, if this is {@code Iterable<String>} and {@code subclass} is {@code List}, {@code List<String>} is returned.
826 Returns an immutable copy of the provided table. <p>The {@link Table#cellSet()} iteration order of the provided table determines the iteration ordering of all views in the returned table. Note that some views of the original table and the copied table may have different iteration orders. For more control over the ordering, create a {@link Builder} and call {@link Builder#orderRowsBy}, {@link Builder#orderColumnsBy}, and {@link Builder#putAll} <p>Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.
827 Returns a {@code Collector} that accumulates elements into an {@code ImmutableTable}. Each input element is mapped to one cell in the returned table, with the rows, columns, and values generated by applying the specified functions. <p>The returned {@code Collector} will throw a {@code NullPointerException} at collection time if the row, column, or value functions return null on any input. @since 21.0
