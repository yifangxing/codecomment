1 Read into a direct tor indirect buffer using {@code PositionedReadable.readFully()}. @param stream stream @param range file range @param buffer destination buffer @throws IOException IO problems.
2 Validate a list of vectored read ranges. @param ranges list of ranges. @throws EOFException any EOF exception.
3 Indicates that a caching operation is in progress. @param actionFuture the {@code Future} of a caching action. @throws IllegalArgumentException if actionFuture is null.
4 Updates the current state to the specified value. Asserts that the current state is as expected. @param newState the state to transition to. @param expectedCurrentState the collection of states from which transition to {@code newState} is allowed. @throws IllegalArgumentException if newState is null. @throws IllegalArgumentException if expectedCurrentState is null.
5 Validates that the given path exists and is a directory. @param path the path to check. @param argName the name of the argument being validated.
6 Validates that the given path exists and is a file. @param path the path to check. @param argName the name of the argument being validated.
7 Indicates whether the given block is the last block in the associated file. @param blockNumber the id of the desired block. @return true if the given block is the last block in the associated file, false otherwise. @throws IllegalArgumentException if blockNumber is invalid.
8 Gets the start offset of the given block. @param blockNumber the id of the given block. @return the start offset of the given block. @throws IllegalArgumentException if blockNumber is invalid.
9 Gets the state of the given block. @param blockNumber the id of the given block. @return the state of the given block. @throws IllegalArgumentException if blockNumber is invalid.
10 Sets the state of the given block to the given value. @param blockNumber the id of the given block. @param blockState the target state. @throws IllegalArgumentException if blockNumber is invalid.
11 Gets the id of the block that contains the given absolute offset. @param offset the absolute offset to check. @return the id of the block that contains the given absolute offset. @throws IllegalArgumentException if offset is invalid.
12 Aggregate an existing {@link IOStatisticsSnapshot} with the supplied statistics. @param snapshot snapshot to update @param statistics IOStatistics to add @return true if the snapshot was updated. @throws IllegalArgumentException if the {@code statistics} argument is not null but not an instance of IOStatistics, or if {@code snapshot} is invalid.
13 Save IOStatisticsSnapshot to a Hadoop filesystem as a JSON file. @param snapshot statistics @param fs filesystem @param path path @param overwrite should any existing file be overwritten? @throws UncheckedIOException Any IO exception.
14 Get the counters of an IOStatisticsSnapshot. @param source source of statistics. @return the map of counters.
15 Get the gauges of an IOStatisticsSnapshot. @param source source of statistics. @return the map of gauges.
16 Get the minimums of an IOStatisticsSnapshot. @param source source of statistics. @return the map of minimums.
17 Get the maximums of an IOStatisticsSnapshot. @param source source of statistics. @return the map of maximums.
18 Get the means of an IOStatisticsSnapshot. Each value in the map is the (sample, sum) tuple of the values; the mean is then calculated by dividing sum/sample wherever sample count is non-zero. @param source source of statistics. @return a map of mean key to (sample, sum) tuples.
19 Create a copy of the FlagSet. @return a new mutable instance with a separate copy of the flags
20 Create a FlagSet. @param enumClass class of enum @param prefix prefix (with trailing ".") for path capabilities probe @param flags flags @param <E> enum type @return a mutable FlagSet
21 Performs any necessary cleanup @throws IOException upon error
22 Close all FileSystem instances in the Cache. @param onlyAutomatic only close those that are marked for automatic closing @throws IOException a problem arose closing one or more FileSystem.
23 Save IOStatisticsSnapshot to a JSON string. @param snapshot statistics; may be null or of an incompatible type @return JSON string value @throws UncheckedIOException Any IO/jackson exception. @throws IllegalArgumentException if the supplied class is not a snapshot
24 Writes bytes to a file. This utility method opens the file for writing, creating the file if it does not exist, or overwrites an existing file. All bytes in the byte array are written to the file. @param fileContext the file context with which to create the file @param path the path to the file @param bytes the byte array with the bytes to write @return the file context @throws NullPointerException if any of the arguments are {@code null} @throws IOException if an I/O error occurs creating or writing to the file
25 Write lines of text to a file. Each line is a char sequence and is written to the file in sequence with each line terminated by the platform's line separator, as defined by the system property {@code line.separator}. Characters are encoded into bytes using the specified charset. This utility method opens the file for writing, creating the file if it does not exist, or overwrites an existing file. @param fileContext the file context with which to create the file @param path the path to the file @param lines a Collection to iterate over the char sequences @param cs the charset to use for encoding @return the file context @throws NullPointerException if any of the arguments are {@code null} @throws IOException if an I/O error occurs creating or writing to the file
26 Write a line of text to a file. Characters are encoded into bytes using the specified charset. This utility method opens the file for writing, creating the file if it does not exist, or overwrites an existing file. @param fs the file context with which to create the file @param path the path to the file @param charseq the char sequence to write to the file @param cs the charset to use for encoding @return the file context @throws NullPointerException if any of the arguments are {@code null} @throws IOException if an I/O error occurs creating or writing to the file
27 Create a new FSDataOutputStreamBuilder for the file with path. Files are overwritten by default. @param path file path @return a FSDataOutputStreamBuilder object to build the file HADOOP-14384. Temporarily reduce the visibility of method before the builder interface becomes stable.
28 This is overridden to ensure that this class's create() method is ultimately called. {@inheritDoc}
29 Create a Builder to append a file. @param path file path. @return a {@link FSDataOutputStreamBuilder} to build file append request.
30 This is overridden to ensure that this class's create() method is ultimately called. {@inheritDoc}
31 List the statuses of the files/directories in the given path if the path is a directory. @param f given path @return the statuses of the files/directories in the given path @throws IOException if an I/O error occurs.
32 Filter files/directories in the given list of paths using default path filter. <p> Does not guarantee to return the List of files/directories status in a sorted order. @param files a list of paths @return a list of statuses for the files under the given paths after applying the filter default Path filter @throws FileNotFoundException when the path does not exist @throws IOException see specific implementation
33 Create a mutable integer counter @param info metadata of the metric @param iVal initial value @return a new counter object
34 Create a mutable long integer counter @param info metadata of the metric @param iVal initial value @return a new counter object
35 Create a mutable long integer gauge @param info metadata of the metric @param iVal initial value @return a new gauge object
36 Create a mutable float gauge @param info metadata of the metric @param iVal initial value @return a new gauge object
37 Create a mutable integer gauge @param info metadata of the metric @param iVal initial value @return a new gauge object
38 Apply the given function to the resolved path under the the supplied FileContext. @param fileContext file context to resolve under @param path path to resolve @param fn function to invoke @param <T> return type. @return the return value of the function as revoked against the resolved path. @throws UnresolvedLinkException link resolution failure @throws IOException other IO failure.
39 Create a builder for a Globber, bonded to the specific file context. @param fileContext file context. @return the builder to finish configuring.
40 Create a builder for a Globber, bonded to the specific filesystem. @param filesystem filesystem @return the builder to finish configuring.
41 @return true if the call is done; otherwise, return false.
42 @return the async return value from {@link AsyncCallHandler}. @param <T> T. @param <R> R.
43 Override to hook in DUHelper class.
44 Create from another statistic. @param that source
45 Extract the statistics from a source object -or "" if it is not an instance of {@link IOStatistics}, {@link IOStatisticsSource} or the retrieved statistics are null. <p> Exceptions are caught and downgraded to debug logging. @param source source of statistics. @return a string for logging.
46 Return the statistics dump of the wrapped statistics. @return the statistics for logging.
47 Evaluate and stringify the statistics. @return a string value.
48 Convert IOStatistics to a string form, with all the metrics sorted and empty value stripped. This is more expensive than the simple conversion, so should only be used for logging/output where it's known/highly likely that the caller wants to see the values. Not for debug logging. @param statistics A statistics instance. @return string value or the empty string if null
49 Create the tracker. If the factory is null, a stub tracker is returned. @param factory tracker factory @param statistic statistic to track @return a duration tracker.
50 Delete cache file as part of the block cache LRU eviction. @param elementToPurge Block entry to evict.
51 Create IOStatistics from a storage statistics instance. This will be updated as the storage statistics change. @param storageStatistics source data. @return an IO statistics source.
52 Add a counter statistic to dynamically return the latest value of the source. @param key key of this statistic @param source atomic long counter @return the builder.
53 Add a counter statistic to dynamically return the latest value of the source. @param key key of this statistic @param source atomic int counter @return the builder.
54 Build a dynamic counter statistic from a {@link MutableCounterLong}. @param key key of this statistic @param source mutable long counter @return the builder.
55 Add a gauge statistic to dynamically return the latest value of the source. @param key key of this statistic @param source atomic long gauge @return the builder.
56 Add a gauge statistic to dynamically return the latest value of the source. @param key key of this statistic @param source atomic int gauge @return the builder.
57 Add a minimum statistic to dynamically return the latest value of the source. @param key key of this statistic @param source atomic long minimum @return the builder.
58 Add a minimum statistic to dynamically return the latest value of the source. @param key key of this statistic @param source atomic int minimum @return the builder.
59 Add a maximum statistic to dynamically return the latest value of the source. @param key key of this statistic @param source atomic long maximum @return the builder.
60 Add a maximum statistic to dynamically return the latest value of the source. @param key key of this statistic @param source atomic int maximum @return the builder.
61 Override point: register this class as the handler for the control-C and SIGINT interrupts. Subclasses can extend this with extra operations, such as an exception handler: <pre> Thread.setDefaultUncaughtExceptionHandler( new YarnUncaughtExceptionHandler()); </pre>
62 Accept a new UNIX domain connection. This method can only be used on sockets that were bound with bind(). @return The new connection. @throws IOException If there was an I/O error performing the accept-- such as the socket being closed from under us. Particularly when the accept is timed out, it throws SocketTimeoutException.
63 Call shutdown(SHUT_RDWR) on the UNIX domain socket. @throws IOException raised on errors performing I/O.
64 Send some FileDescriptor objects to the process on the other side of this socket. @param descriptors The file descriptors to send. @param jbuf Some bytes to send. You must send at least one byte. @param offset The offset in the jbuf array to start at. @param length Length of the jbuf array to use. @throws IOException raised on errors performing I/O.
65 Receive some FileDescriptor objects from the process on the other side of this socket, and wrap them in FileInputStream objects. @param streams input stream. @param buf input buf. @param offset input offset. @param length input length. @return wrap them in FileInputStream objects. @throws IOException raised on errors performing I/O.
66 Creating a new IOStatisticsContext instance for a FS to be used. @param key Thread ID that represents which thread the context belongs to. @return an instance of IOStatisticsContext.
67 Verify that the given checksums match the given data. The 'mark' of the ByteBuffer parameters may be modified by this function,. but the position is maintained. @param data the DirectByteBuffer pointing to the data to verify. @param checksums the DirectByteBuffer pointing to a series of stored checksums @param fileName the name of the file being read, for error-reporting @param basePos the file position to which the start of 'data' corresponds @throws ChecksumException if the checksums do not match
68 This method is executed immediately after decryption. Check whether decryptor should be updated and recalculate padding if needed.
69 Reset the underlying stream offset; clear {@link #inBuffer} and {@link #outBuffer}. This Typically happens during {@link #seek(long)} or {@link #skip(long)}.
70 Encryption is buffer based. If there is enough room in {@link #inBuffer}, then write to this buffer. If {@link #inBuffer} is full, then do encryption and write data to the underlying stream. @param b the data. @param off the start offset in the data. @param len the number of bytes to write. @throws IOException raised on errors performing I/O.
71 To flush, we need to encrypt the data in the buffer and write to the underlying stream, then do the flush.
72 Compile glob pattern string @param globPattern the glob pattern @return the pattern object
73 In the common network topology setup, distance value should be an even number such as 0, 2, 4, 6. To make it more general, we group distance by {1, 2}, {3, 4} and {5 and beyond} for accounting. So if the caller ask for bytes read for distance 2, the function will return the value for group {1, 2}. @param distance the network distance @return the total number of bytes read by the network distance
74 This create has been added to support the FileContext that processes the permission with umask before calling this method. This a temporary method added to support the transition from FileSystem to FileContext for user applications. @param f path. @param absolutePermission permission. @param flag create flag. @param bufferSize buffer size. @param replication replication. @param blockSize block size. @param progress progress. @param checksumOpt check sum opt. @return output stream. @throws IOException IO failure
75 Constructor to be called by subclasses. @param uri for this file system. @param supportedScheme the scheme supported by the implementor @param authorityNeeded if true then theURI must have authority, if false then the URI must have null authority. @param defaultPort default port to use if port is not specified in the URI. @throws URISyntaxException <code>uri</code> has syntax error
76 Encode with inputs and generates outputs. More see above. @param inputs input buffers to read data from @param outputs output buffers to put the encoded data into, read to read after the call @throws IOException raised on errors performing I/O.
77 Encode with inputs and generates outputs. Note, for both inputs and outputs, no mixing of on-heap buffers and direct buffers are allowed. If the coder option ALLOW_CHANGE_INPUTS is set true (false by default), the content of input buffers may change after the call, subject to concrete implementation. Anyway the positions of input buffers will move forward. @param inputs input buffers to read data from. The buffers' remaining will be 0 after encoding @param outputs output buffers to put the encoded data into, ready to read after the call @throws IOException if the encoder is closed.
78 Wrap an existing array of primitives @param value - array of primitives
79 Used for delegation token related functionality. Must delegate to underlying file system.
80 Probe the inner stream for a capability. Syncable operations are rejected before being passed down. @param capability string to query the stream support for. @return true if a capability is known to be supported.
81 Releases resources allocated to the given block. @throws IllegalArgumentException if data is null.
82 Releases resources for any blocks marked as 'done'.
83 Constructs an instance of a {@code CachingBlockManager}. @param blockManagerParameters params for block manager. @throws IllegalArgumentException if bufferPoolSize is zero or negative.
84 Gets the block having the given {@code blockNumber}. @throws IllegalArgumentException if buffer is null.
85 Gets the current absolute position within this file. @return the current absolute position within this file.
86 Determines whether the current buffer has been fully read. @return true if the current buffer has been fully read, false otherwise.
87 If the given {@code pos} lies within the current buffer, updates the current position to the specified value and returns true; otherwise returns false without changing the position. @param pos the absolute position to change the current position to if possible. @return true if the given current position was updated, false otherwise.
88 Get the context's IOStatisticsContext. @return instance of IOStatisticsContext for the context.
89 Set the IOStatisticsContext for the current thread. @param statisticsContext IOStatistics context instance for the current thread. If null, the context is reset.
90 Return sub configs for instance specified in the config. Assuming format specified as follows:<pre> [type].[instance].[option] = [value]</pre> Note, '*' is a special default instance, which is excluded in the result. @param type of the instance @return a map with [instance] as key and config object as value
91 Parse parameters starting from the given position Consider using the variant that directly takes a List @param args an array of input arguments @param pos the position at which starts to parse @return a list of parameters
92 Display an error string prefaced with the command name. Also increments the error count for the command which will result in a non-zero exit code. @param message error message to display
93 Hook to implement support for {@link PathHandle} operations. @param stat Referent in the target FileSystem @param opts Constraints that determine the validity of the {@link PathHandle} reference.
94 Handle is valid iff the referent is neither moved nor changed. Equivalent to changed(false), moved(false). @return Options requiring that the content and location of the entity be unchanged between calls.
95 Handle is valid iff the content of the referent is the same. Equivalent to changed(false), moved(true). @return Options requiring that the content of the entity is unchanged, but it may be at a different location.
96 Handle is valid iff the referent is unmoved in the namespace. Equivalent to changed(true), moved(false). @return Options requiring that the referent exist in the same location, but its content may have changed.
97 Handle is valid iff the referent exists in the namespace. Equivalent to changed(true), moved(true). @return Options requiring that the implementation resolve a reference to this entity regardless of changes to content or location.
98 Create a new instance of the ShellCommandExecutor to execute a command. @param execString The command to execute with arguments @param dir If not-null, specifies the directory which should be set as the current working directory for the command. If null, the current working directory is not modified. @param env If not-null, environment of the command will include the key-value pairs specified in the map. If null, the current environment is not modified. @param timeout Specifies the time in milliseconds, after which the command will be killed and the status marked as timed-out. If 0, the command will not be timed out. @param inheritParentEnv Indicates if the process should inherit the env vars from the parent process or not.
99 RunImmediately should set true, if we skip the first refresh. @param runImmediately The param default should be false.
100 Create a private clone of a public token. @param newService the new service name @return a private token
101 Test whether this Path uses a scheme and is relative. Pathnames with scheme and relative path are illegal.
102 Returns true if the path component (i.e. directory) of this URI is absolute <strong>and</strong> the scheme is null, <b>and</b> the authority is null. @return whether the path is absolute and the URI has no scheme nor authority parts
103 Returns true if the path component (i.e. directory) of this URI is absolute. This method is a wrapper for {@link #isUriPathAbsolute()}. @return whether this URI's path is absolute
104 Check that a Path belongs to this FileSystem. If the path is fully qualified URI, then its scheme and authority matches that of this file system. Otherwise the path must be slash-relative name. @param path the path. @throws InvalidPathException if the path is invalid
105 Write instance encoded as protobuf to stream. @param out Output stream @see PBHelper#convert(FileStatus) @deprecated Use the {@link PBHelper} and protobuf serialization directly.
106 Check all the arguments to the {@link MultipartUploader#putPart(UploadHandle, int, Path, InputStream, long)} operation. @param filePath Target path for upload (as {@link #startUpload(Path)}). @param inputStream Data for this part. Implementations MUST close this stream after reading in the data. @param partNumber Index of the part relative to others. @param uploadId Identifier from {@link #startUpload(Path)}. @param lengthInBytes Target length to read from the stream. @throws IllegalArgumentException invalid argument
107 {@inheritDoc}. @param path path to abort uploads under. @return a future to -1. @throws IOException raised on errors performing I/O.
108 Skips over and discards <code>n</code> bytes of data from the input stream. The <code>skip</code> method skips over some smaller number of bytes when reaching end of file before <code>n</code> bytes have been skipped. The actual number of bytes skipped is returned. If <code>n</code> is negative, no bytes are skipped. @param n the number of bytes to be skipped. @return the actual number of bytes skipped. @exception IOException if an I/O error occurs. ChecksumException if the chunk to skip to is corrupted
109 Apply a umask to this permission and return a new one. The umask is used by create, mkdir, and other Hadoop filesystem operations. The mode argument for these operations is modified by removing the bits which are set in the umask. Thus, the umask limits the permissions which newly created files and directories get. @param umask The umask to use @return The effective permission
110 Return file permission. @param sftpFile @return file permission
111 Construct by the given mode. octal mask is applied. <pre> before mask after mask file type sticky bit octal 100644 644 file no decimal 33188 420 octal 101644 1644 file yes decimal 33700 1420 octal 40644 644 directory no decimal 16804 420 octal 41644 1644 directory yes decimal 17316 1420 </pre> 100644 becomes 644 while 644 remains as 644 @param mode Mode is supposed to come from the result of native stat() call. It contains complete permission information: rwxrwxrwx, sticky bit, whether it is a directory or a file, etc. Upon applying mask, only permission and sticky bit info will be kept because they are the only parts to be used for now. @see #FsPermission(short mode)
112 Get the default permission for directory and symlink. In previous versions, this default permission was also used to create files, so files created end up with ugo+x permission. See HADOOP-9155 for detail. Two new methods are added to solve this, please use {@link FsPermission#getDirDefault()} for directory, and use {@link FsPermission#getFileDefault()} for file. This method is kept for compatibility. @return Default FsPermission.
113 Get the default permission for directory. @return DirDefault FsPermission.
114 Get the default permission for file. @return FileDefault FsPermission.
115 Get the default permission for cache pools. @return CachePoolDefault FsPermission.
116 Create a FsPermission from a Unix symbolic permission string @param unixSymbolicPermission e.g. "-rw-rw-rw-" @return FsPermission.
117 Prints all the ACL entries in a single scope. @param aclStatus AclStatus for the path @param fsPerm FsPermission for the path @param entries List<AclEntry> containing ACL entries of file
118 Convert a List of AclEntries into a string - the reverse of parseAclSpec. @param aclSpec List of AclEntries to convert @return String representation of aclSpec
119 Construct by given mode, either in octal or symbolic format. @param mode mode as a string, either in octal or symbolic format @throws IllegalArgumentException if <code>mode</code> is invalid
120 Read in data. @param b destination buffer. @param offset offset within the buffer. @param length length of bytes to read. @throws EOFException if the position is negative @throws IndexOutOfBoundsException if there isn't space for the amount of data requested. @throws IllegalArgumentException other arguments are invalid.
121 Current size of compressed data. @return @throws IOException
122 Compute column widths and rebuild the format string @param items to find the max field width for each column
123 Return the {@link QuotaUsage} of a given {@link Path}. @param f path to use @return the quota usage @throws IOException IO failure
124 Return the total size of all files from a specified path. @param path the path. @throws IOException IO failure @return the number of path content summary.
125 Construct an instance with the given name. @param name input name.
126 Enter a state -thread safe. @param proposed proposed new state @return the original state @throws ServiceStateException if the transition is not permitted
127 @return Instantiate the service defined in {@code serviceClassName}. Sets the {@code configuration} field to the the value of {@code conf}, and the {@code service} field to the service created. @param conf configuration to use
128 Return true if bytes from {#getBytes()} match.
129 Set the value to a copy of the given byte range. @param newData the new values to copy in @param offset the offset in newData to start at @param length the number of bytes to copy
130 Copy the key into BytesWritable. The input BytesWritable will be automatically resized to the actual key size. @param key BytesWritable to hold the key. @throws IOException raised on errors performing I/O. @return the key into BytesWritable.
131 A wrapper for {@link File#list()}. This java.io API returns null when a dir is not a directory or for any I/O error. Instead of having null check everywhere File#list() is used, we will add utility API to get around this problem. For the majority of cases where we prefer an IOException to be thrown. @param dir directory for which listing should be performed @return list of file names or empty string list @exception AccessDeniedException for unreadable directory @exception IOException for invalid directory or for bad disk
132 Checks that the current running process can read, write, and execute the given directory by using methods of the File object. @param dir File to check @throws DiskErrorException if dir is not readable, not writable, or not executable
133 Locks the provided direct ByteBuffer into memory, preventing it from swapping out. After a buffer is locked, future accesses will not incur a page fault. See the mlock(2) man page for more information. @throws NativeIOException
134 Create a new SharedFileDescriptorFactory. @param prefix The prefix to prepend to all the file names created by this factory. @param paths An array of paths to use. We will try each path in succession, and return a factory using the first usable path. @return The factory. @throws IOException If a factory could not be created for any reason.
135 Generate checksums for the given data chunks and output chunks & checksums to the underlying output stream.
136 Calculate checksums for the given data. The 'mark' of the ByteBuffer parameters may be modified by this function, but the position is maintained. @param data the DirectByteBuffer pointing to the data to checksum. @param checksums the DirectByteBuffer into which checksums will be stored. Enough space must be available in this buffer to put the checksums.
137 Forcibly free the direct buffers.
138 Create a BoundedByteArrayOutputStream with the specified capacity @param capacity The capacity of the underlying byte array
139 Decode the given url safe string into this token. @param newValue the encoded string @throws IOException raised on errors performing I/O.
140 Which blocks were erased ? @param blockGroup blockGroup. @return output blocks to recover
141 This method tries to find the marker (passed to it as the first parameter) in the stream. It can find bit patterns of length &lt;= 63 bits. Specifically this method is used in CBZip2InputStream to find the end of block (EOB) delimiter in the stream, starting from the current position of the stream. If marker is found, the stream position will be at the byte containing the starting bit of the marker. @param marker The bit pattern to be found in the stream @param markerBitLength No of bits in the marker @return true if the marker was found otherwise false @throws IOException raised on errors performing I/O. @throws IllegalArgumentException if marketBitLength is greater than 63
142 Constructs a new <tt>CBZip2OutputStream</tt> with specified blocksize. <p> <b>Attention: </b>The caller is resonsible to write the two BZip2 magic bytes <tt>"BZ"</tt> to the specified stream prior to calling this constructor. </p> @param out the destination stream. @param blockSize the blockSize as 100k units. @throws IOException if an I/O error occurs in the specified stream. @throws IllegalArgumentException if {@code (blockSize < 1) || (blockSize > 9)} @throws NullPointerException if {@code out == null}. @see #MIN_BLOCKSIZE @see #MAX_BLOCKSIZE
143 Create a {@link BlockCompressorStream} with given output-stream and compressor. Use default of 512 as bufferSize and compressionOverhead of (1% of bufferSize + 12 bytes) = 18 bytes (zlib algorithm). @param out stream @param compressor compressor to be used
144 Create a {@link BlockDecompressorStream}. @param in input stream @param decompressor decompressor to use @param bufferSize size of buffer @throws IOException raised on errors performing I/O.
145 Write the data provided to the compression codec, compressing no more than the buffer size less the compression overhead as specified during construction for each block. Each block contains the uncompressed length for the block, followed by one or more length-prefixed blocks of compressed data.
146 Creates a new compressor with the default compression level. Compressed data will be generated in ZStandard format. @param level level. @param bufferSize bufferSize.
147 Create an output stream with a codec taken from the global CodecPool. @param codec The codec to use to create the output stream. @param conf The configuration to use if we need to create a new codec. @param out The output stream to wrap. @return The new output stream @throws IOException
148 Close the file.
149 Create an input stream with a codec taken from the global CodecPool. @param codec The codec to use to create the input stream. @param conf The configuration to use if we need to create a new codec. @param in The input stream to wrap. @return The new input stream @throws IOException
150 Close the file.
151 Return the appropriate implementation of the zlib compressor. @param conf configuration @return the appropriate implementation of the zlib compressor.
152 Return the appropriate implementation of the zlib direct decompressor. @param conf configuration @return the appropriate implementation of the zlib decompressor.
153 Return the appropriate implementation of the zlib decompressor. @param conf configuration @return the appropriate implementation of the zlib decompressor.
154 Persists a DelegationKey into the SQL database. The delegation keyId is expected to be unique and any duplicate key attempts will result in an IOException. @param key DelegationKey to persist into the SQL database.
155 Updates an existing DelegationKey in the SQL database. @param key Updated DelegationKey.
156 Read a string, but check it for sanity. The format consists of a vint followed by the given number of bytes. @param in the stream to read from @param maxLength the largest acceptable length of the encoded string @return the bytes as a string @throws IOException if reading from the DataInput fails @throws IllegalArgumentException if the encoded byte size for string is negative or larger than maxSize. Only the vint is read.
157 Skips over one Text in the input. @param in input in. @throws IOException raised on errors performing I/O.
158 Read a compressed buffer
159 @return Read a UTF8 encoded string with a maximum size. @param in input datainput. @param maxLength input maxLength. @throws IOException raised on errors performing I/O.
160 Write a String as a VInt n, followed by n Bytes as in Text format. @param out out. @param s s. @throws IOException raised on errors performing I/O.
161 Construct the service key for a token @param addr InetSocketAddress of remote connection with a token @return "ip:port" or "host:port" depending on the value of hadoop.security.token.service.use_ip
162 Create a hadoop token from a protobuf token. @param tokenProto token @return a new token
163 writes String value of enum to DataOutput. @param out Dataoutput stream @param enumVal enum value @throws IOException raised on errors performing I/O.
164 Serialize a {@link PermissionStatus} from its base components. @param out out. @param username username. @param groupname groupname. @param permission FsPermission. @throws IOException raised on errors performing I/O.
165 Construct from a byte array. @param utf8 input utf8.
166 Construct from another text. @param utf8 input utf8.
167 Read one line from the InputStream into the given Text. @param str the object to store the given line (without newline) @param maxLineLength the maximum number of bytes to store into str; the rest of the line is silently discarded. @param maxBytesToConsume the maximum number of bytes to consume in this call. This is only a hint, because if the line cross this threshold, we allow it to happen. It can overshoot potentially by as much as one buffer length. @return the number of bytes read including the (longest) newline found. @throws IOException if the underlying stream throws
168 @return Returns the length of this text. The length is equal to the number of Unicode code units in the text.
169 Copy constructor. @param other the map to copy from
170 Copy constructor. @param other the map to copy from
171 <p> Keep trying for a maximum time, waiting a fixed time between attempts, and then fail by re-throwing the exception. </p> @param timeUnit timeUnit. @param sleepTime sleepTime. @param maxTime maxTime. @return RetryPolicy.
172 Create a proxy for an interface of implementations of that interface using the given {@link FailoverProxyProvider} and the same retry policy for each method in the interface. @param iface the interface that the retry will implement @param proxyProvider provides implementation instances whose methods should be retried @param retryPolicy the policy for retrying or failing over method call failures @param <T> T. @return the retry proxy
173 Create a proxy for an interface of an implementation class using the a set of retry policies specified by method name. If no retry policy is defined for a method then a default of {@link RetryPolicies#TRY_ONCE_THEN_FAIL} is used. @param iface the interface that the retry will implement @param <T> T. @param implementation the instance whose methods should be retried @param methodNameToPolicyMap a map of method names to retry policies @return the retry proxy
174 Constructor @param fout FS output stream. @param compressionName Name of the compression algorithm, which will be used for all data blocks. @throws IOException @see Compression#getSupportedAlgorithms
175 For reading from file. @throws IOException
176 Check whether we reach the end of the stream. @return false if the chunk encoded stream has more data to read (in which case available() will be greater than 0); true otherwise. @throws java.io.IOException on I/O errors.
177 Flush the internal buffer. Is this the last call to flushBuffer? @throws java.io.IOException
178 Compare an entry with a RawComparable object. This is useful when Entries are stored in a collection, and we want to compare a user supplied key.
179 Construct from a given string. @param string input string.
180 Construct a hash value for a String. @param string string. @return MD5Hash.
181 Compress and flush contents to dfs
182 Returns a tracking identifier that can be used to associate usages of a token across multiple client sessions. Currently, this function just returns an MD5 of {{@link #getBytes()}. @return tracking identifier
183 Encode this token as a url safe string. @return the encoded string @throws IOException raised on errors performing I/O.
184 Add a leaf node Update node counter &amp; rack counter if necessary @param node node to be added; can be null @exception IllegalArgumentException if add a node to a leave or node to be added is not a leaf
185 Remove a node Update node counter and rack counter if necessary @param node node to be removed; can be null
186 Update empty rack number when remove a node like decommission. @param node node to be added; can be null
187 Sort nodes array by network distance to <i>reader</i> with secondary sort. <p> In a three-level topology, a node can be either local, on the same rack, or on a different rack from the reader. Sorting the nodes based on network distance from the reader reduces network traffic and improves performance. </p> As an additional twist, we also randomize the nodes at each network distance. This helps with load balancing when there is data skew. @param reader Node where data will be read @param nodes Available replicas with the requested data @param activeLen Number of active nodes at the front of the array @param secondarySort a secondary sorting strategy which can inject into that point from outside to help sort the same distance. @param <T> Generics Type T
188 Sort nodes array by network distance to <i>reader</i>. <p> using network location. This is used when the reader is not a datanode. Sorting the nodes based on network distance from the reader reduces network traffic and improves performance. </p> @param reader Node where data will be read @param nodes Available replicas with the requested data @param activeLen Number of active nodes at the front of the array @param secondarySort a secondary sorting strategy which can inject into that point from outside to help sort the same distance. @param <T> Generics Type T.
189 Create a new input stream with the given timeout. If the timeout is zero, it will be treated as infinite timeout. The socket's channel will be configured to be non-blocking. @param channel Channel for reading, should also be a {@link SelectableChannel}. The channel will be configured to be non-blocking. @param timeout timeout in milliseconds. must not be negative. @throws IOException raised on errors performing I/O.
190 Create a new ouput stream with the given timeout. If the timeout is zero, it will be treated as infinite timeout. The socket's channel will be configured to be non-blocking. @param channel Channel for writing, should also be a {@link SelectableChannel}. The channel will be configured to be non-blocking. @param timeout timeout in milliseconds. must not be negative. @throws IOException raised on errors performing I/O.
191 @return the rpc response or, in case of timeout, null.
192 Create an instance with the default configuration. <p> Calling {@link #setConf(Configuration)} will trigger a re-evaluation of the configuration settings and so be used to set up the mapping script.
193 Create an instance with the default configuration. <p> Calling {@link #setConf(Configuration)} will trigger a re-evaluation of the configuration settings and so be used to set up the mapping script.
194 Creates a parent node to be added to the list of children. Creates a node using the InnerNode four argument constructor specifying the name, location, parent, and level of this node. <p>To be overridden in subclasses for specific InnerNode implementations, as alternative to overriding the full {@link #add(Node)} method. @param parentName The name of the parent node @return A new inner node @see InnerNodeImpl(String, String, InnerNode, int)
195 Add a socket. @param sock The socket to add. It is an error to re-add a socket that we are already watching. @param handler The handler to associate with this socket. This may be called any time after this function is called.
196 Remove a socket. Its handler will be called. @param sock The socket to remove.
197 Waits on the channel with the given timeout using one of the cached selectors. It also removes any cached selectors that are idle for a few seconds. @param channel @param ops @param timeout @return @throws IOException
198 Returns the first available IP address associated with the provided network interface or the local host IP if "default" is given. @param strInterface The name of the network interface or subinterface to query (e.g. eth0 or eth0:0) or the string "default" @return The IP address in text form, the local host IP is returned if the interface name "default" is specified @throws UnknownHostException If the given interface is invalid
199 Returns all the host names associated by the default nameserver with the address bound to the specified network interface @param strInterface The name of the network interface to query (e.g. eth0) @return The list of host names associated with IPs bound to the network interface @throws UnknownHostException If one is encountered while querying the default interface
200 Returns the default (first) host name associated by the provided nameserver with the address bound to the specified network interface @param strInterface The name of the network interface to query (e.g. eth0) @param nameserver The DNS host name @param tryfallbackResolution Input tryfallbackResolution. @return The default host names associated with IPs bound to the network interface @throws UnknownHostException If one is encountered while querying the default interface
201 Load configuration from a list of files until the first successful load @param conf the configuration object @param files the list of filenames to try @return the configuration object
202 This method will block if a cache entry doesn't exist, and any subsequent requests for the same user will wait on this request to return. If a user already exists in the cache, and when the key expires, the first call to reload the key will block, but subsequent requests will return the old value until the blocking thread returns. If reloadGroupsInBackground is true, then the thread that needs to refresh an expired key will not block either. Instead it will return the old cache value and schedule a background refresh @param user key of cache @return List of groups belonging to user @throws IOException to prevent caching negative entries
203 Shutdown the JvmMetrics singleton. This is not necessary if the JVM itself is shutdown, but may be necessary for scenarios where JvmMetrics instance needs to be re-created while the JVM is still around. One such scenario is unit-testing.
204 Stops the service. No new calls will be handled after this is called.
205 stop the server. @throws Exception exception.
206 Instantiates a new {@link MutableQuantiles} for a metric that rolls itself over on the specified time interval. @param name of the metric @param description long-form textual description of the metric @param sampleName type of items in the stream (e.g., "Ops") @param valueName type of the values @param interval rollover interval (in seconds) of the estimator
207 Create a mutable metric with stats @param name of the metric @param desc metric description @param sampleName of the metric (e.g., "Ops") @param valueName of the metric (e.g., "Time" or "Latency") @param extended produce extended stat (stdev, min/max etc.) if true. @return a new mutable stat metric object
208 Construct a snapshot stat metric with extended stat off by default @param name of the metric @param description of the metric @param sampleName of the metric (e.g. "Ops") @param valueName of the metric (e.g. "Time", "Latency")
209 Set the metrics context tag @param name of the context @return the registry itself as a convenience
210 Add a tag to the metrics @param name of the tag @param description of the tag @param value of the tag @param override existing tag if true @return the registry (for keep adding tags)
211 Add a rate sample for a rate metric. @param name of the rate metric @param elapsed time
212 Publish a metrics snapshot to all the sinks @param buffer the metrics snapshot to publish @param immediate indicates that we should publish metrics immediately instead of using a separate thread.
213 Copy the values to other (saves object creation and gc.) @param other the destination to hold our values
214 Logs a Slow RPC Request. @param methodName - RPC Request method name @param details - Processing Detail. If a request took significant more time than other requests, and its processing time is at least `logSlowRPCThresholdMs` we consider that as a slow RPC. The definition rules for calculating whether the current request took too much time compared to other requests are as follows: 3 is a magic number that comes from 3 sigma deviation. A very simple explanation can be found by searching for 68-95-99.7 rule. We flag an RPC as slow RPC if and only if it falls above 99.7% of requests. We start this logic only once we have enough sample size.
215 Refresh the netgroup cache
216 Print something at the end of a section
217 Print a title entry. @param format format string @param args any arguments
218 Format and raise a failure. @param category category for exception @param message string formatting message @param args any arguments for the formatting @throws KerberosDiagsFailure containing the formatted text
219 Create a user from a login name. It is intended to be used for remote users in RPC, since it won't have any credentials. @param user the full user principal name, must not be empty or null @param authMethod authMethod. @return the UserGroupInformation for the remote user.
220 should be called before this object is used. @throws IOException raised on errors performing I/O.
221 Update the current master key for generating delegation tokens It should be called only by tokenRemoverThread. @throws IOException raised on errors performing I/O.
222 Creates an <code>DelegationTokenAuthenticatedURL</code>. <p> An instance of the default {@link DelegationTokenAuthenticator} will be used.
223 Creates an <code>DelegationTokenAuthenticatedURL</code>. @param authenticator the {@link DelegationTokenAuthenticator} instance to use, if <code>null</code> the default one will be used.
224 Creates an <code>DelegationTokenAuthenticatedURL</code> using the default {@link DelegationTokenAuthenticator} class. @param connConfigurator a connection configurator.
225 Reads up to <code>b.length</code> bytes of data from this input stream into an array of bytes. <p> The <code>read</code> method of <code>InputStream</code> calls the <code>read</code> method of three arguments with the arguments <code>b</code>, <code>0</code>, and <code>b.length</code>. @param b the buffer into which the data is read. @return the total number of bytes read into the buffer, or <code>-1</code> is there is no more data because the end of the stream has been reached. @exception IOException if an I/O error occurs.
226 Is this user logged in from a keytab file managed by the UGI? @return true if the credentials are from a keytab file.
227 Is this user logged in from a ticket (but no keytab) managed by the UGI? @return true if the credentials are from a ticket cache.
228 Initialize a singleton SSL socket factory. @param preferredMode applicable only if the instance is not initialized. @throws IOException if an error occurs.
229 Factory constructor for commands
230 public construction of harfilesystem
231 Constructor to create a HarFileSystem with an underlying filesystem. @param fs underlying file system
232 Default ctor with no configuration. Be sure to invoke {@link #setConf(Configuration)} with a valid configuration prior to running commands.
233 Create an instance of this tool using the given configuration. @param conf configuration.
234 Constructor
235 Create an InetAddress with a fully qualified hostname of the given hostname. InetAddress does not qualify an incomplete hostname that is resolved via the domain search list. {@link InetAddress#getCanonicalHostName()} will fully qualify the hostname, but it always return the A record whereas the given hostname may be a CNAME. @param host a hostname or ip address @return InetAddress with the fully qualified hostname or ip @throws UnknownHostException if host does not exist
236 Serializes the AccessControlList object
237 Get a new zookeeper client instance. protected so that test class can inherit and pass in a mock object for zookeeper @return new zookeeper client instance @throws IOException raised on errors performing I/O.
238 Get size of the Queue for keyName. This is only used in unit tests. @param keyName the key name @return int queue size. Zero means the queue is empty or the key does not exist.
239 This removes the "num" values currently at the head of the Queue for the provided key. Will immediately fire the Queue filler function if key does not exist How many values are actually returned is governed by the <code>SyncGenerationPolicy</code> specified by the user. @param keyName String key name @param num Minimum number of values to return. @return {@literal List<E>} values returned @throws IOException raised on errors performing I/O. @throws ExecutionException execution exception.
240 Drains the Queue for the provided key. @param keyName the key to drain the Queue for
241 Insert e into the backing queue or block until we can. If client backoff is enabled this method behaves like add which throws if the queue overflows. If we block and the queue changes on us, we will insert while the queue is drained.
242 Initialize this class if it isn't already.
243 now. @param timeUnit timeUnit. @return current elapsed time in specified timeunit.
244 Get a server protocol's signature @param clientMethodsHashCode client protocol methods hashcode @param serverVersion server protocol version @param protocol protocol @return the server's protocol signature
245 Decay the stored costs for each user and clean as necessary. This method should be called periodically in order to keep costs current.
246 Compute the appropriate priority for a schedulable based on past requests. @param obj the schedulable obj to query and remember @return the level index which we recommend scheduling in
247 Returns an element first non-empty queue equal to the priority returned by the multiplexer or scans from highest to lowest priority queue. Caller must always acquire a semaphore permit before invoking. @return the first non-empty queue with less priority, or null if everything was empty
248 Close the connection.
249 Filesystem constructor for use by {@link GlobBuilder}. @param fs filesystem @param pathPattern path pattern @param filter optional filter @param resolveSymlinks should symlinks be resolved.
250 @param hostEntries comma separated ip/cidr/host addresses
251 Return default OS instance. @throws UnsupportedOperationException If cannot determine OS. @return Default instance for the detected OS.
252 {@inheritDoc}
253 {@inheritDoc}
254 Transform input xml given a stylesheet. @param styleSheet the style-sheet @param xml input xml data @param out output @throws TransformerConfigurationException synopsis signals a problem creating a transformer object. @throws TransformerException this is used for throwing processor exceptions before the processing has started.
255 Return the string representation of the object in the output format. if qOption is false, output directory count, file count, and content size; if qOption is true, output quota and remaining quota as well. if hOption is false, file sizes are returned in bytes if hOption is true, file sizes are returned in human readable if tOption is true, display the quota by storage types if tOption is false, same logic with #toString(boolean,boolean) if xOption is false, output includes the calculation from snapshots if xOption is true, output excludes the calculation from snapshots @param qOption a flag indicating if quota needs to be printed or not @param hOption a flag indicating if human readable output is to be used @param tOption a flag indicating if display quota by storage types @param xOption a flag indicating if calculation from snapshots is to be included in the output @param types Storage types to display @return the string representation of the object
256 Return the string representation of the snapshot counts in the output format. @param hOption flag indicating human readable or not @return String representation of the snapshot counts
257 Let t = percentage of max memory. Let e = round(log_2 t). Then, we choose capacity = 2^e/(size of reference), unless it is outside the close interval [1, 2^30]. @param mapName mapName. @param percentage percentage. @return compute capacity.
258 Fills the buffer with a chunk data. No mark is supported. This method assumes that all data in the buffer has already been read in, hence pos > count.
259 Like read(byte[], int, int), but does not provide a dest buffer, so the read data is discarded. @param len maximum number of bytes to read. @return the number of bytes read. @throws IOException if an I/O error occurs.
260 Convert to a String.
261 Convert to a string, checking for valid UTF8. @return the converted string @throws UTFDataFormatException if the underlying bytes contain invalid UTF8 data.
262 @return Convert a UTF-8 encoded byte array back into a string. @param bytes input bytes. @throws IOException if the byte array is invalid UTF8
263 @return Read a UTF-8 encoded string. @see DataInput#readUTF() @param in DataInput. @throws IOException raised on errors performing I/O.
264 Check the rpc response header.
265 Convert a byte to a hex string. @see #byteToHexString(byte[]) @see #byteToHexString(byte[], int, int) @param b byte @return byte's hex value as a String
266 Handler for uncaught exceptions: terminate the service. @param thread thread @param exception exception
267 Exit with the usage exit code {@link #EXIT_USAGE} and message {@link #USAGE_MESSAGE}. @throws ExitUtil.ExitException if exceptions are disabled
268 Uncaught exception handler. If an error is raised: shutdown The state of the system is unknown at this point -attempting a clean shutdown is dangerous. Instead: exit @param thread thread that failed @param exception the raised exception
269 Exit the JVM. This is method can be overridden for testing, throwing an exception instead. Any subclassed method MUST raise an {@code ExitException} instance/subclass. The service launcher code assumes that after this method is invoked, no other code in the same method is called. @param exitCode code to exit @param message input message.
270 Like {@link #terminate(int, Throwable)} without a message. @param status exit code @throws ExitException if {@link System#exit(int)} is disabled.
271 Prints a message to stderr and exits with a status code. @param status exit code @param msg message
272 Forcibly terminates the currently running Java virtual machine. @param status status code @throws HaltException if {@link Runtime#halt(int)} is disabled.
273 Sort the given range of items using quick sort. {@inheritDoc} If the recursion depth falls below {@link #getMaxDepth}, then switch to {@link HeapSort}.
274 Private constructor. @param file Path file associated to this ACL @param owner String file owner @param group String file group @param stickyBit the sticky bit @param entries the ACL entries @param permission permission of the path
275 Parse comma separated list of ACL entries to secure generated nodes, e.g. <code>sasl:hdfs/host1@MY.DOMAIN:cdrwa,sasl:hdfs/host2@MY.DOMAIN:cdrwa</code> @param aclString aclString. @return ACL list @throws BadAclFormatException if an ACL is invalid
276 Parse a comma-separated list of authentication mechanisms. Each such mechanism should be of the form 'scheme:auth' -- the same syntax used for the 'addAuth' command in the ZK CLI. @param authString the comma-separated auth mechanisms @return a list of parsed authentications @throws BadAuthFormatException if the auth format is invalid
277 Preserve the attributes of the source to the target. The method calls {@link #shouldPreserve(FileAttribute)} to check what attribute to preserve. @param src source to preserve @param target where to preserve attributes @param preserveRawXAttrs true if raw.* xattrs should be preserved @throws IOException if fails to preserve attributes
278 Translates the given permission bits to the equivalent minimal ACL. @param perm FsPermission to translate @return List&lt;AclEntry&gt; containing exactly 3 entries representing the owner, group and other permissions
279 If the store is tracking the given key, return the duration tracker for it. If not tracked, return the stub tracker. @param key statistic key prefix @param count #of times to increment the matching counter in this operation. @return a tracker.
280 Constructor -increments the counter by 1. @param iostats statistics to update @param key prefix of values.
281 Create the duration text from a {@code String.format()} code call; log output at info level. @param log log to write to @param format format string @param args list of arguments
282 Wait for a single of future to complete, extracting IOEs afterwards. @param <T> Generics Type T. @param future future to wait for. @throws IOException if one of the called futures raised an IOE. @throws RuntimeException if one of the futures raised one.
283 Wait for a single of future to complete, ignoring exceptions raised. @param future future to wait for. @param <T> Generics Type T.
284 Returns a CrcComposer which will collapse all ingested CRCs into a single value. @param type type. @param bytesPerCrcHint bytesPerCrcHint. @throws IOException raised on errors performing I/O. @return a CrcComposer which will collapse all ingested CRCs into a single value.
285 Updates with a single additional CRC which corresponds to an underlying data size of {@code bytesPerCrc}. @param crcB crcB. @param bytesPerCrc bytesPerCrc. @throws IOException raised on errors performing I/O.
286 Formats time in ms and appends difference (finishTime - startTime) as returned by formatTimeDiff(). If finish time is 0, empty string is returned, if start time is 0 then difference is not appended to return value. @param dateFormat date format to use @param finishTime finish time @param startTime start time @return formatted value.
287 Escape commas in the string using the default escape char @param str a string @return an escaped string
288 Unescape commas in the string using the default escape char @param str a string @return an unescaped string
289 @return Build a log message for starting up and shutting down. @param classname the class of the server @param args arguments
290 Get the next source value. This calls {@link #sourceHasNext()} first to verify that there is data. @return the next value @throws IOException failure @throws NoSuchElementException no more data
291 Given a future, evaluate it. Raised exceptions are extracted and handled. See {@link FutureIO#awaitFuture(Future, long, TimeUnit)}. @param future future to evaluate @param <T> type of the result. @return the result, if all went well. @throws InterruptedIOException future was interrupted @throws IOException if something went wrong @throws RuntimeException any nested RTE thrown
292 Evaluates a collection of futures and returns their results as a list. <p> This method blocks until all futures in the collection have completed. If any future throws an exception during its execution, this method extracts and rethrows that exception. </p> @param collection collection of futures to be evaluated @param <T> type of the result. @return the list of future's result, if all went well. @throws InterruptedIOException waiting for future completion was interrupted @throws CancellationException if the future itself was cancelled @throws IOException if something went wrong @throws RuntimeException any nested RTE thrown
293 Given a future, evaluate it. Raised exceptions are extracted and handled. See {@link FutureIO#awaitFuture(Future, long, TimeUnit)}. @param future future to evaluate @param <T> type of the result. @param timeout timeout. @param unit unit. @return the result, if all went well. @throws InterruptedIOException future was interrupted @throws IOException if something went wrong @throws RuntimeException any nested RTE thrown @throws TimeoutException the future timed out.
294 Evaluates a collection of futures and returns their results as a list, but only waits up to the specified timeout for each future to complete. <p> This method blocks until all futures in the collection have completed or the timeout expires, whichever happens first. If any future throws an exception during its execution, this method extracts and rethrows that exception. @param collection collection of futures to be evaluated @param duration timeout duration @param <T> type of the result. @return the list of future's result, if all went well. @throws InterruptedIOException waiting for future completion was interrupted @throws CancellationException if the future itself was cancelled @throws IOException if something went wrong @throws RuntimeException any nested RTE thrown @throws TimeoutException the future timed out.
295 Cancels a collection of futures and awaits the specified duration for their completion. <p> This method blocks until all futures in the collection have completed or the timeout expires, whichever happens first. All exceptions thrown by the futures are ignored. as is any TimeoutException. @param collection collection of futures to be evaluated @param interruptIfRunning should the cancel interrupt any active futures? @param duration total timeout duration @param <T> type of the result. @return all futures which completed successfully.
296 Create an object for the given class and initialize it from conf @param theClass class of which an object is created @param conf Configuration @param argTypes the types of the arguments @param values the values of the arguments @param <T> Generics Type. @return a new object
297 @return Returns the class of keys in this file.
298 @return Returns the class of values in this file.
299 Loads the class of the given name @param name classname @return outcome code
300 Create an instance of a class @param name classname @return the outcome
301 Override point: create the base configuration for the service. Subclasses can override to create HDFS/YARN configurations etc. @return the configuration to use as the service initializer.
302 Return the supplied configuration for testing or otherwise load a new configuration. @return the configuration to use
303 Empty constructor; passes a new Configuration object instance to its superclass's constructor
304 Construct a ReconfigurableBase.
305 Construct a ReconfigurableBase with the {@link Configuration} conf. @param conf configuration.
306 Fully qualify the path to a binary that should be in a known hadoop bin location. This is primarily useful for disambiguating call-outs to executable sub-components of Hadoop to avoid clashes with other executables that may be in the path. Caveat: this call doesn't just format the path to the bin directory. It also checks for file existence of the composed path. The output of this call should be cached by callers. @param executable executable @return executable file reference @throws FileNotFoundException if the path does not exist @throws IOException on path canonicalization failures
307 Run the command. @throws IOException raised on errors performing I/O.
308 Adds a named node to the tree. @param status status. @return Progress.
309 Utility function to ensure that the configured base znode exists. This recursively creates the znode as well as all of its parents. @param path Path of the znode to create. @throws Exception If it cannot create the file.
310 Does a path have a given capability? Calls {@code PathCapabilities#hasPathCapability(Path, String)}, mapping IOExceptions to false. @param fs filesystem @param path path to query the capability of. @param capability non-null, non-empty string to query the path for support. @return true if the capability is supported under that part of the FS false if the method is not loaded or the path lacks the capability. @throws IllegalArgumentException invalid arguments
311 Does an object implement {@code StreamCapabilities} and, if so, what is the result of the probe for the capability? Calls {@code StreamCapabilities#hasCapability(String)}, @param object object to probe @param capability capability string @return true iff the object implements StreamCapabilities and the capability is declared available.
312 Get the counters of an IOStatisticsSnapshot. @param source source of statistics. @return the map of counters.
313 Get the gauges of an IOStatisticsSnapshot. @param source source of statistics. @return the map of gauges.
314 Get the minimums of an IOStatisticsSnapshot. @param source source of statistics. @return the map of minimums.
315 Get the maximums of an IOStatisticsSnapshot. @param source source of statistics. @return the map of maximums.
316 Get the means of an IOStatisticsSnapshot. Each value in the map is the (sample, sum) tuple of the values; the mean is then calculated by dividing sum/sample wherever sample is non-zero. @param source source of statistics. @return a map of mean key to (sample, sum) tuples.
317 Invoke a static method. @param args arguments. @return result. @param <R> type of result.
318 Checks for an implementation, first finding the given class by name. <p> The name passed to the constructor is the method name used. @param className name of a class @param argClasses argument classes for the method @return this Builder for method chaining
319 Checks for an implementation, first finding the given class by name. <p> The name passed to the constructor is the method name used. @param className name of a class @param argClasses argument classes for the method @return this Builder for method chaining
320 Load a static method from the source class, which will be a noop() if the class is null or the method isn't found. If the class and method are not found, then an {@code IllegalStateException} is raised on the basis that this means that the binding class is broken, rather than missing/out of date. @param <T> return type @param source source. If null, the method is a no-op. @param returnType return type class (unused) @param name method name @param parameterTypes parameters @return the method or a no-op. @throws IllegalStateException if the method is not static.
321 Probe for an object being an instance of {@code IOStatisticsSource}. @param object object to probe @return true if the object is the right type, false if the classes were not found or the object is null/of a different type
322 Probe for an object being an instance of {@code IOStatisticsSource}. @param object object to probe @return true if the object is the right type, false if the classes were not found or the object is null/of a different type
323 Probe for an object being an instance of {@code IOStatisticsSnapshot}. @param object object to probe @return true if the object is the right type, false if the classes were not found or the object is null/of a different type
324 Probe to check if the thread-level IO statistics enabled. If the relevant classes and methods were not found, returns false @return true if the IOStatisticsContext API was found and is enabled.
325 Get the maximum number of objects/files to delete in a single request. @param fileSystem filesystem @param path path to delete under. @return a number greater than or equal to zero. @throws UnsupportedOperationException bulk delete under that path is not supported. @throws IllegalArgumentException path not valid. @throws IOException problems resolving paths @throws RuntimeException invocation failure.
326 Delete a list of files/objects. <ul> <li>Files must be under the path provided in {@code base}.</li> <li>The size of the list must be equal to or less than the page size.</li> <li>Directories are not supported; the outcome of attempting to delete directories is undefined (ignored; undetected, listed as failures...).</li> <li>The operation is not atomic.</li> <li>The operation is treated as idempotent: network failures may trigger resubmission of the request -any new objects created under a path in the list may then be deleted.</li> <li>There is no guarantee that any parent directories exist after this call. </li> </ul> @param fs filesystem @param base path to delete under. @param paths list of paths which must be absolute and under the base path. @return a list of all the paths which couldn't be deleted for a reason other than "not found" and any associated error message. @throws UnsupportedOperationException bulk delete under that path is not supported. @throws IllegalArgumentException if a path argument is invalid. @throws IOException IO problems including networking, authentication and more.
327 OpenFile assistant, easy reflection-based access to {@code FileSystem#openFile(Path)} and blocks awaiting the operation completion. @param fs filesystem @param path path @param policy read policy @param status optional file status @param length optional file length @param options nullable map of other options @return stream of the opened file @throws IOException if the operation was attempted and failed.
328 Delegate to {@code ByteBufferPositionedReadable#read(long, ByteBuffer)}. @param in input stream @param position position within file @param buf the ByteBuffer to receive the results of the read operation. @throws UnsupportedOperationException if the input doesn't implement the interface or, if when invoked, it is raised. Note: that is the default behaviour of {@code FSDataInputStream#readFully(long, ByteBuffer)}. @throws IOException if the operation was attempted and failed.
329 Require a IOStatistics to be available. @throws UnsupportedOperationException if the method was not found.
330 Require IOStatisticsContext methods to be available. @throws UnsupportedOperationException if the classes/methods were not found
331 @param recommendedLength Recommended size of the internal array. @param sizeLimit the limit of the size of the cache. The limit is disabled if it is &lt;= 0. @param creationExpirationPeriod the time period C &gt; 0 in nanoseconds that the creation of an entry is expired if it is added to the cache longer than C. @param accessExpirationPeriod the time period A &gt;= 0 in nanoseconds that the access of an entry is expired if it is not accessed longer than A.
332 Constructor. @param vectorSize The vector size of <i>this</i> filter. @param nbHash The number of hash functions to consider. @param hashType type of the hashing function (see {@link Hash}).
333 Removes a specified key from <i>this</i> counting Bloom filter. <p> <b>Invariant</b>: nothing happens if the specified key does not belong to <i>this</i> counter Bloom filter. @param key The key to remove.
334 Adds a collection of false positive information to <i>this</i> retouched Bloom filter. @param coll The collection of false positive.
335 Adds a list of false positive information to <i>this</i> retouched Bloom filter. @param keys The list of false positive.
336 Adds an array of false positive information to <i>this</i> retouched Bloom filter. @param keys The array of false positive.
337 Clears a specified bit in the bit vector and keeps up-to-date the KeyList vectors. @param index The position of the bit to clear.
338 Chooses the bit position that minimizes the number of false negative generated while maximizing. the number of false positive removed. @param h The different bit positions. @return The position that minimizes the number of false negative generated while maximizing.
339 API compatible with Hadoop 1.x. @param argv argv. @throws Throwable Anything thrown by the example program's main
340 Get the credential entry by name from a credential provider. Handle key deprecation. @param provider a credential provider @param name alias of the credential @return the credential entry or null if not found
341 Adds the deprecated key to the global deprecation map. It does not override any existing entries in the deprecation map. This is to be used only by the developers in order to add deprecation of keys, and attempts to call this method after loading resources once, would lead to <tt>UnsupportedOperationException</tt> If a key is deprecated in favor of multiple keys, they are all treated as aliases of each other, and setting any one of them resets all the others to the new value. If you have multiple deprecation entries to add, it is more efficient to use #addDeprecations(DeprecationDelta[] deltas) instead. @param key to be deprecated @param newKeys list of keys that take up the values of deprecated key @param customMessage depcrication message @deprecated use {@link #addDeprecation(String key, String newKey, String customMessage)} instead
342 Open the main listener for the server @throws Exception
343 Verify that the argument, if given, in the conf is parseable.
344 Clear all of the state held within the parent ZNode. This recursively deletes everything within the znode as well as the parent znode itself. It should only be used when it's certain that no electors are currently participating in the election. @throws IOException raised on errors performing I/O. @throws InterruptedException interrupted exception.
345 If there is a breadcrumb node indicating that another node may need fencing, try to fence that node. @return the Stat of the breadcrumb node that was read, or null if no breadcrumb node existed
346 Synchronously reads a range from the stream dealing with the combinations of ByteBuffers buffers and PositionedReadable streams. @param stream the stream to read from @param range the range to read @param allocate the function to allocate ByteBuffers @return the CompletableFuture that contains the read data or an exception. @throws IllegalArgumentException the range is invalid other than by offset or being null. @throws EOFException the range offset is negative @throws NullPointerException if the range is null.
347 Requests that the given block should be copied to the local cache. The block must not be accessed by the caller after calling this method because it will released asynchronously relative to the caller. @throws IllegalArgumentException if data is null.
348 Indicates that a prefetch operation is in progress. @param actionFuture the {@code Future} of a prefetch action. @throws IllegalArgumentException if actionFuture is null.
349 Marks the completion of reading data into the buffer. The buffer cannot be modified once in this state. @param expectedCurrentState the collection of states from which transition to READY is allowed.
350 Gets the size of the given block. @param blockNumber the id of the desired block. @return the size of the given block.
351 Gets the relative offset corresponding to the given block and the absolute offset. @param blockNumber the id of the given block. @param offset absolute offset in the file. @return the relative offset corresponding to the given block and the absolute offset. @throws IllegalArgumentException if either blockNumber or offset is invalid.
352 Constructs an instance of {@link BlockData}. @param fileSize the size of a file. @param blockSize the file is divided into blocks of this size. @throws IllegalArgumentException if fileSize is negative. @throws IllegalArgumentException if blockSize is negative. @throws IllegalArgumentException if blockSize is zero or negative.
353 Gets the id of the current block. @return the id of the current block.
354 Close all FileSystems in the cache, whether they are marked for automatic closing or not. @throws IOException a problem arose closing one or more FileSystem.
355 Close all cached FileSystem instances for a given UGI. Be sure those filesystems are not used anymore. @param ugi user group info to close @throws IOException a problem arose closing one or more filesystem.
356 Write a line of text to a file. Characters are encoded into bytes using UTF-8. This utility method opens the file for writing, creating the file if it does not exist, or overwrites an existing file. @param fileContext the files system with which to create the file @param path the path to the file @param charseq the char sequence to write to the file @return the file context @throws NullPointerException if any of the arguments are {@code null} @throws IOException if an I/O error occurs creating or writing to the file
357 Writes bytes to a file. This utility method opens the file for writing, creating the file if it does not exist, or overwrites an existing file. All bytes in the byte array are written to the file. @param fs the file system with which to create the file @param path the path to the file @param bytes the byte array with the bytes to write @return the file system @throws NullPointerException if any of the arguments are {@code null} @throws IOException if an I/O error occurs creating or writing to the file
358 Write lines of text to a file. Each line is a char sequence and is written to the file in sequence with each line terminated by the platform's line separator, as defined by the system property {@code line.separator}. Characters are encoded into bytes using the specified charset. This utility method opens the file for writing, creating the file if it does not exist, or overwrites an existing file. @param fs the file system with which to create the file @param path the path to the file @param lines a Collection to iterate over the char sequences @param cs the charset to use for encoding @return the file system @throws NullPointerException if any of the arguments are {@code null} @throws IOException if an I/O error occurs creating or writing to the file
359 Write a line of text to a file. Characters are encoded into bytes using the specified charset. This utility method opens the file for writing, creating the file if it does not exist, or overwrites an existing file. @param fs the file system with which to create the file @param path the path to the file @param charseq the char sequence to write to the file @param cs the charset to use for encoding @return the file system @throws NullPointerException if any of the arguments are {@code null} @throws IOException if an I/O error occurs creating or writing to the file
360 Constructor with host, name, network topology, offset, length and corrupt flag. @param names names. @param hosts hosts. @param topologyPaths topologyPaths. @param offset offset. @param length length. @param corrupt corrupt.
361 Create a mutable integer counter @param name of the metric @param desc metric description @param iVal initial value @return a new counter object
362 Create a mutable long integer counter @param name of the metric @param desc metric description @param iVal initial value @return a new counter object
363 Create a mutable long integer gauge @param name of the metric @param desc metric description @param iVal initial value @return a new gauge object
364 Create a mutable float gauge @param name of the metric @param desc metric description @param iVal initial value @return a new gauge object
365 Create a mutable integer gauge @param name of the metric @param desc metric description @param iVal initial value @return a new gauge object
366 Create a copy of this instance. @return copy.
367 Extract any statistics from the source and log at debug, if the log is set to log at debug. No-op if logging is not at debug or the source is null/of the wrong type/doesn't provide statistics. @param log log to log to @param message message for log -this must contain "{}" for the statistics report to actually get logged. @param source source object
368 toString method returns the superclass toString, but if the subclass implements {@link IOStatisticsSource} then those statistics are extracted and included in the output. That is: statistics of subclasses are automatically reported. @return a string value.
369 Convert IOStatistics to a string form, with all the metrics sorted and empty value stripped. @param statistics A statistics instance; may be null @return string value or the empty string if null
370 Given an IOException raising callable/lambda expression, execute it and update the relevant statistic, returning the measured duration. {@link #trackDurationOfInvocation(DurationTrackerFactory, String, InvocationRaisingIOE)} with the duration returned for logging etc.; added as a new method to avoid linking problems with any code calling the existing method. @param factory factory of duration trackers @param statistic statistic key @param input input callable. @return the duration of the operation, as measured by the duration tracker. @throws IOException IO failure.
371 Given a Java supplier, evaluate it while tracking the duration of the operation and success/failure. @param factory factory of duration trackers @param statistic statistic key @param input input callable. @param <B> return type. @return the output of the supplier.
372 Add the given entry to the head of the linked list and if the LRU cache size exceeds the max limit, evict tail of the LRU linked list. @param entry Block entry to add.
373 Constructor invoked via the builder. @param counters keys to use for the counter statistics. @param gauges names of gauges @param minimums names of minimums @param maximums names of maximums @param meanStatistics names of mean statistics.
374 Decryption is buffer based. If there is data in {@link #outBuffer}, then read it out of this buffer. If there is no data in {@link #outBuffer}, then read more from the underlying stream and do the decryption. @param b the buffer into which the decrypted data is read. @param off the buffer offset. @param len the maximum number of decrypted data bytes to read. @return int the total number of decrypted data bytes read into the buffer. @throws IOException raised on errors performing I/O.
375 Decrypt length bytes in buffer starting at offset. Output is also put into buffer starting at offset. It is thread-safe.
376 Decrypts the given {@link ByteBuffer} in place. {@code length} bytes are decrypted from {@code buf} starting at {@code start}. {@code buf.position()} and {@code buf.limit()} are unchanged after this method returns. This method is thread-safe. <p> This method decrypts the input buf chunk-by-chunk and writes the decrypted output back into the input buf. It uses two local buffers taken from the {@link #bufferPool} to assist in this process: one is designated as the input buffer and it stores a single chunk of the given buf, the other is designated as the output buffer, which stores the output of decrypting the input buffer. Both buffers are of size {@link #bufferSize}. </p> <p> Decryption is done by using a {@link Decryptor} and the {@link #decrypt(Decryptor, ByteBuffer, ByteBuffer, byte)} method. Once the decrypted data is written into the output buffer, is is copied back into buf. Both buffers are returned back into the pool once the entire buf is decrypted. </p> @param filePosition the current position of the file being read @param buf the {@link ByteBuffer} to decrypt @param length the number of bytes in {@code buf} to decrypt @param start the position in {@code buf} to start decrypting data from
377 Decrypts the given {@link ByteBuffer} in place. {@code length} bytes are decrypted from {@code buf} starting at {@code start}. {@code buf.position()} and {@code buf.limit()} are unchanged after this method returns. @see #decrypt(long, ByteBuffer, int, int)
378 Seek to a position.
379 Skip n bytes
380 Creates a glob filter with the specified file pattern. @param filePattern the file pattern. @throws IOException thrown if the file pattern is incorrect.
381 Creates a glob filter with the specified file pattern and an user filter. @param filePattern the file pattern. @param filter user filter in addition to the glob pattern. @throws IOException thrown if the file pattern is incorrect.
382 Given a Tar File as input it will untar the file in a the untar directory passed as the second parameter This utility will untar ".tar" files and ".tar.gz","tgz" files. @param inputStream The tar file as input. @param untarDir The untar directory where to untar the tar file. @param gzipped The input stream is gzipped TODO Use magic number and PusbackInputStream to identify @throws IOException an exception occurred @throws InterruptedException command interrupted @throws ExecutionException task submit failed
383 @return Map of uri and statistics for each filesystem instantiated. The uri consists of scheme and authority for the filesystem.
384 Clears all the statistics stored in AbstractFileSystem, for all the file systems.
385 Encode with inputs and generates outputs. More see above. @param inputs input buffers to read data from @param outputs output buffers to put the encoded data into, read to read after the call @throws IOException if the encoder is closed.
386 A thread pool that that blocks clients submitting additional tasks if there are already {@code activeTasks} running threads and {@code waitingTasks} tasks waiting in its queue. @param activeTasks maximum number of active tasks @param waitingTasks maximum number of waiting tasks @param keepAliveTime time until threads are cleaned up in {@code unit} @param unit time unit @param prefixName prefix of name for threads @return BlockingThreadPoolExecutorService.
387 Associates a buffer with this file. @param bufferData the buffer associated with this file. @param startOffset Start offset of the buffer relative to the start of a file. @param readOffset Offset where reading starts relative to the start of a file. @throws IllegalArgumentException if bufferData is null. @throws IllegalArgumentException if startOffset is negative. @throws IllegalArgumentException if readOffset is negative. @throws IllegalArgumentException if readOffset is outside the range [startOffset, buffer end].
388 Get the context's {@link IOStatisticsContext} which implements {@link IOStatisticsSource}. This is either a thread-local value or a global empty context. @return instance of {@link IOStatisticsContext}.
389 Reset the context's IOStatistics. {@link IOStatisticsContext#reset()}
390 Take a snapshot of the context IOStatistics. {@link IOStatisticsContext#snapshot()} @return an instance of {@link IOStatisticsSnapshot}.
391 Aggregate into the IOStatistics context the statistics passed in via IOStatistics/source parameter. <p> Returns false if the source is null or does not contain any statistics. @param source implementation of {@link IOStatisticsSource} or {@link IOStatistics} @return true if the the source object was aggregated.
392 Parallel execution. All tasks run within the same IOStatisticsContext as the thread calling this method. @param task task to execute @param <E> exception which may be raised in execution. @return true if the operation executed successfully @throws E any exception raised. @throws IOException IOExceptions raised by remote iterator or in execution.
393 Set the IOStatisticsContext for the current thread. @param statisticsContext IOStatistics context instance for the current thread. If null, the context is reset.
394 Set the statistics context for this thread.
395 Reset the statistics context if it was set earlier. This unbinds the current thread from any statistics context.
396 Display an exception prefaced with the command name. Also increments the error count for the command which will result in a non-zero exit code. @param e exception to display
397 Create a durable, serializable handle to the referent of the given entity. @param stat Referent in the target FileSystem @param opt If absent, assume {@link HandleOpt#path()}. @throws IllegalArgumentException If the FileStatus does not belong to this FileSystem @throws UnsupportedOperationException If {@link #createPathHandle} not overridden by subclass. @throws UnsupportedOperationException If this FileSystem cannot enforce the specified constraints. @return path handle.
398 Add a token in the storage (in memory). @param alias the alias for the key @param t the token object
399 AES-CTR will consume all of the input data. It requires enough space in the destination buffer to encrypt entire input buffer.
400 AES-CTR will consume all of the input data. It requires enough space in the destination buffer to decrypt entire input buffer.
401 Initialize regex mount point. @throws IOException
402 Create a new Path based on the child path resolved against the parent path. @param parent the parent path @param child the child path
403 Construct a path from a String. Path strings are URIs, but with unescaped elements and some additional normalization. @param pathString the path string
404 Construct a Path from components. @param scheme the scheme @param authority the authority @param path the path
405 Returns the printable version of the path that is either the path as given on the commandline, or the full path @return String of the path
406 Get the path-part of a pathname. Checks that URI matches this file system and that the path-part is a valid name. @param p path @return path-part of the Path p
407 Return the fully-qualified path of path f resolving the path through any internal symlinks or mount point @param p path to be resolved @return fully qualified path @throws FileNotFoundException when file not find throw. @throws AccessControlException when accees control error throw. @throws IOException raised on errors performing I/O. @throws UnresolvedLinkException if symbolic link on path cannot be resolved internally
408 The specification of this method matches that of {@link FileContext#create(Path, EnumSet, Options.CreateOpts...)} except that the Path f must be fully qualified and the permission is absolute (i.e. umask has been applied). @param f the path. @param createFlag create_flag. @param opts create ops. @throws AccessControlException access controll exception. @throws FileAlreadyExistsException file already exception. @throws FileNotFoundException file not found exception. @throws ParentNotDirectoryException parent not dir exception. @throws UnsupportedFileSystemException unsupported file system exception. @throws UnresolvedLinkException unresolved link exception. @throws IOException raised on errors performing I/O. @return output stream.
409 Create from unmasked mode and umask. @param mode mode. @param umask umask. @return If the mode is already an FsCreateModes object, return it.
410 Call {@link #mkdirs(Path, FsPermission)} with default permission. @param f path @return true if the directory was created @throws IOException IO failure
411 Sets permission. @param permission if permission is null, default value is set
412 Opens an FSDataOutputStream at the indicated Path with write-progress reporting. Same as create(), except fails if parent directory doesn't already exist. @param f the file name to open @param overwrite if a file with this name already exists, then if true, the file will be overwritten, and if false an error will be thrown. @param bufferSize the size of the buffer to be used. @param replication required block replication for the file. @param blockSize block size @param progress the progress reporter @throws IOException IO failure @see #setPermission(Path, FsPermission) @return output stream.
413 Create an immutable {@link FsPermission} object. @param permission permission. @return FsPermission.
414 Append a key/value pair. @param key input Object key. @param val input Object val. @throws IOException raised on errors performing I/O.
415 Get the compressed size of the block in progress. @return the number of compressed bytes written to the underlying FS file. The size may be smaller than actual need to compress the all data written due to internal buffering inside the compressor. @throws IOException
416 Skips over and discards <code>n</code> bytes of data from the input stream. The <code>skip</code> method skips over some smaller number of bytes when reaching end of file before <code>n</code> bytes have been skipped. The actual number of bytes skipped is returned. If <code>n</code> is negative, no bytes are skipped. @param n the number of bytes to be skipped. @return the actual number of bytes skipped. @exception IOException if an I/O error occurs. ChecksumException if the chunk to skip to is corrupted
417 Return the total size of all files from a specified path.
418 Return the total size of all files from a specified path.
419 Simple 'main' to facilitate manual testing of the pause monitor. This main function just leaks memory into a list. Running this class with a 1GB heap will very quickly go into "GC hell" and result in log messages about the GC pauses. @param args args. @throws Exception Exception.
420 {@inheritDoc} @throws ServiceStateException if the current service state does not permit this action
421 Enter a state; record this via {@link #recordLifecycleEvent} and log at the info level. @param newState the proposed new state @return the original state it wasn't already in that state, and the state model permits state re-entrancy.
422 Get the default realm. <p> Not having a default realm may be harmless, so is noted at info. All other invocation failures are downgraded to warn, as follow-on actions may still work. Failure to invoke the method via introspection is considered a failure, as it's a sign of JVM compatibility issues that may have other consequences
423 Are the two byte sequences equal?
424 Returns true iff <code>o</code> is a Text with the same length and same contents.
425 Set the BytesWritable to the contents of the given newData. @param newData the value to set this BytesWritable to.
426 Decode with inputs and erasedIndexes, generates outputs. How to prepare for inputs: 1. Create an array containing data units + parity units. Please note the data units should be first or before the parity units. 2. Set null in the array locations specified via erasedIndexes to indicate they're erased and no data are to read from; 3. Set null in the array locations for extra redundant items, as they're not necessary to read when decoding. For example in RS-6-3, if only 1 unit is really erased, then we have 2 extra items as redundant. They can be set as null to indicate no data will be used from them. For an example using RS (6, 3), assuming sources (d0, d1, d2, d3, d4, d5) and parities (p0, p1, p2), d2 being erased. We can and may want to use only 6 units like (d1, d3, d4, d5, p0, p2) to recover d2. We will have: inputs = [null(d0), d1, null(d2), d3, d4, d5, p0, null(p1), p2] erasedIndexes = [2] // index of d2 into inputs array outputs = [a-writable-buffer] Note, for both inputs and outputs, no mixing of on-heap buffers and direct buffers are allowed. If the coder option ALLOW_CHANGE_INPUTS is set true (false by default), the content of input buffers may change after the call, subject to concrete implementation. @param inputs input buffers to read data from. The buffers' remaining will be 0 after decoding @param erasedIndexes indexes of erased units in the inputs array @param outputs output buffers to put decoded data into according to erasedIndexes, ready for read after the call @throws IOException raised on errors performing I/O.
427 Decode with inputs and erasedIndexes, generates outputs. More see above. @param inputs input buffers to read data from @param erasedIndexes indexes of erased units in the inputs array @param outputs output buffers to put decoded data into according to erasedIndexes, ready for read after the call @throws IOException if the decoder is closed.
428 Skips bytes in the stream until the start marker of a block is reached or end of stream is reached. Used for testing purposes to identify the start offsets of blocks.
429 Constructs a new <tt>CBZip2OutputStream</tt> with a blocksize of 900k. <p> <b>Attention: </b>The caller is resonsible to write the two BZip2 magic bytes <tt>"BZ"</tt> to the specified stream prior to calling this constructor. </p> @param out * the destination stream. @throws IOException if an I/O error occurs in the specified stream. @throws NullPointerException if <code>out == null</code>.
430 Create a {@link BlockDecompressorStream}. @param in input stream @param decompressor decompressor to use @throws IOException raised on errors performing I/O.
431 Create a {@link CompressionOutputStream} that will write to the given {@link OutputStream}. @param out the location for the final output stream @return a stream the user can write uncompressed data to have it compressed @throws IOException raised on errors performing I/O.
432 Create a {@link CompressionOutputStream} that will write to the given {@link OutputStream}. @param out the location for the final output stream @return a stream the user can write uncompressed data to, to have it compressed @throws IOException raised on errors performing I/O.
433 Create a {@link CompressionOutputStream} that will write to the given {@link OutputStream}. @param out the location for the final output stream @return a stream the user can write uncompressed data to have compressed @throws IOException raised on errors performing I/O.
434 Create a {@link CompressionOutputStream} that will write to the given {@link OutputStream}. @param out the location for the final output stream @return a stream the user can write uncompressed data to have it compressed @throws IOException raised on errors performing I/O.
435 Close the map.
436 Finishing up the current block.
437 Create a {@link CompressionInputStream} that will read from the given input stream. @param in the stream to read compressed bytes from @return a stream to read uncompressed bytes from @throws IOException raised on errors performing I/O.
438 Create a {@link CompressionInputStream} that will read from the given input stream and return a stream for uncompressed data. @param in the stream to read compressed bytes from @return a stream to read uncompressed bytes from @throws IOException raised on errors performing I/O.
439 Create a {@link CompressionInputStream} that will read from the given input stream. @param in the stream to read compressed bytes from @return a stream to read uncompressed bytes from @throws IOException raised on errors performing I/O.
440 Create a {@link CompressionInputStream} that will read from the given input stream. @param in the stream to read compressed bytes from @return a stream to read uncompressed bytes from @throws IOException raised on errors performing I/O.
441 Close the map. @throws IOException raised on errors performing I/O.
442 closes the underlying reader
443 {@inheritDoc}
444 Write and flush the file header.
445 Stores all the keys to DataOutput. @param out DataOutput. @throws IOException raised on errors performing I/O.
446 Read the next 'compressed' block
447 Position valLenIn/valIn to the 'value' corresponding to the 'current' key
448 @return Read a UTF8 encoded string from in. @param in input in. @throws IOException raised on errors performing I/O.
449 Obtains the DelegationKey from the SQL database. @param keyId KeyId of the DelegationKey to obtain. @return DelegationKey that matches the given keyId or null if it doesn't exist in the database.
450 Select a delegation token from all tokens in credentials, based on url. @param url url. @param creds credentials. @return token.
451 Try to locate the required token for the server. @param authType of the SASL client @return Token for server, or null if no token available @throws IOException - token selector cannot be instantiated
452 Set the given token's service to the format expected by the RPC client @param token a delegation token @param addr the socket for the rpc connection
453 Get a token from a TokenProto payload. @param tokenProto marshalled token @return the token.
454 Get the ByteString for frequently used fixed and small set strings. @param key Hadoop Writable Text string @return the ByteString for frequently used fixed and small set strings.
455 Clone a token. @param other the token to clone
456 Read from the InputStream into the given Text. @param str the object to store the given line @param maxLineLength the maximum number of bytes to store into str. @return the number of bytes read including the newline @throws IOException if the underlying stream throws
457 Read from the InputStream into the given Text. @param str the object to store the given line @return the number of bytes read including the newline @throws IOException if the underlying stream throws
458 Create a instrumented lock instance which logs a warning message when lock held time is above given threshold. @param name the identifier of the lock object @param logger this class does not have its own logger, will log to the given logger instead @param minLoggingGapMs the minimum time gap between two log messages, this is to avoid spamming to many logs @param lockWarningThresholdMs the time threshold to view lock held time as being "too long"
459 <p> Create a proxy for an interface of an implementation class using the same retry policy for each method in the interface. </p> @param iface the interface that the retry will implement @param implementation the instance whose methods should be retried @param retryPolicy the policy for retrying method call failures @param <T> T. @return the retry proxy
460 It first processes the wait time, if there is any, and then invokes {@link #processRetryInfo()}. If the wait time is positive, it either sleeps for synchronous calls or immediately returns for asynchronous calls. @return {@link CallReturn#RETRY} if the retryInfo is processed; otherwise, return {@link CallReturn#WAIT_RETRY}.
461 Constructor @param fsdos output stream for writing. Must be at position 0. @param minBlockSize Minimum compressed block size in bytes. A compression block will not be closed until it reaches this size except for the last block. @param compressName Name of the compression algorithm. Must be one of the strings returned by {@link TFile#getSupportedCompressionAlgorithms()}. @param comparator Leave comparator as null or empty string if TFile is not sorted. Otherwise, provide the string name for the comparison algorithm for keys. Two kinds of comparators are supported. <ul> <li>Algorithmic comparator: binary comparators that is language independent. Currently, only "memcmp" is supported. <li>Language-specific comparator: binary comparators that can only be constructed in specific language. For Java, the syntax is "jclass:", followed by the class name of the RawComparator. Currently, we only support RawComparators that can be constructed through the default constructor (with no parameters). Parameterized RawComparators such as {@link WritableComparator} or {@link JavaSerializationComparator} may not be directly used. One should write a wrapper class that inherits from such classes and use its default constructor to perform proper initialization. </ul> @param conf The configuration object. @throws IOException raised on errors performing I/O.
462 Have we reached the last chunk. @return true if we have reached the last chunk. @throws java.io.IOException
463 How many bytes remain in the current chunk? @return remaining bytes left in the current chunk. @throws java.io.IOException
464 Compare the entry key to another key. Synonymous to compareTo(new ByteArray(buf, offset, length) @param buf The key buffer @param offset offset into the key buffer. @param length the length of the key. @return comparison result between the entry key with the input key.
465 Close the file.
466 Append a key/value pair.
467 Append a key/value pair.
468 Make a copy of the writable object using serialization to a buffer. @param dst the object to copy from @param src the object to copy into, which is destroyed @throws IOException raised on errors performing I/O. @deprecated use ReflectionUtils.cloneInto instead.
469 Randomly choose one node from <i>scope</i>. If scope starts with ~, choose one from the all nodes except for the ones in <i>scope</i>; otherwise, choose one from <i>scope</i>. If excludedNodes is given, choose a node that's not in excludedNodes. @param scope range of nodes from which a node will be chosen @param excludedNodes nodes to be excluded from @return the chosen node
470 Sort nodes array by network distance to <i>reader</i>. <p> In a three-level topology, a node can be either local, on the same rack, or on a different rack from the reader. Sorting the nodes based on network distance from the reader reduces network traffic and improves performance. <p> As an additional twist, we also randomize the nodes at each network distance. This helps with load balancing when there is data skew. @param reader Node where data will be read @param nodes Available replicas with the requested data @param activeLen Number of active nodes at the front of the array
471 Sort nodes array by network distance to <i>reader</i> with secondary sort. <p> using network location. This is used when the reader is not a datanode. Sorting the nodes based on network distance from the reader reduces network traffic and improves performance. </p> @param reader Node where data will be read @param nodes Available replicas with the requested data @param activeLen Number of active nodes at the front of the array
472 Same as SocketInputStream(socket.getChannel(), timeout): <br><br> Create a new input stream with the given timeout. If the timeout is zero, it will be treated as infinite timeout. The socket's channel will be configured to be non-blocking. @see SocketInputStream#SocketInputStream(ReadableByteChannel, long) @param socket should have a channel associated with it. @param timeout timeout timeout in milliseconds. must not be negative. @throws IOException raised on errors performing I/O.
473 Same as SocketInputStream(socket.getChannel(), socket.getSoTimeout()) :<br><br> Create a new input stream with the given timeout. If the timeout is zero, it will be treated as infinite timeout. The socket's channel will be configured to be non-blocking. @see SocketInputStream#SocketInputStream(ReadableByteChannel, long) @param socket should have a channel associated with it. @throws IOException raised on errors performing I/O.
474 Same as SocketOutputStream(socket.getChannel(), timeout):<br><br> Create a new ouput stream with the given timeout. If the timeout is zero, it will be treated as infinite timeout. The socket's channel will be configured to be non-blocking. @see SocketOutputStream#SocketOutputStream(WritableByteChannel, long) @param socket should have a channel associated with it. @param timeout timeout timeout in milliseconds. must not be negative. @throws IOException raised on errors performing I/O.
475 Add a leaf node Update node counter &amp; rack counter if necessary @param node node to be added; can be null @exception IllegalArgumentException if add a node to a leave or node to be added is not a leaf
476 Performs one IO and returns number of bytes read or written. It waits up to the specified timeout. If the channel is not read before the timeout, SocketTimeoutException is thrown. @param buf buffer for IO @param ops Selection Ops used for waiting. Suggested values: SelectionKey.OP_READ while reading and SelectionKey.OP_WRITE while writing. @return number of bytes read or written. negative implies end of stream. @throws IOException
477 The contract is similar to {@link SocketChannel#connect(SocketAddress)} with a timeout. @see SocketChannel#connect(SocketAddress) @param channel - this should be a {@link SelectableChannel} @param endpoint @throws IOException
478 This is similar to {@link #doIO(ByteBuffer, int)} except that it does not perform any I/O. It just waits for the channel to be ready for I/O as specified in ops. @param ops Selection Ops used for waiting @throws SocketTimeoutException if select on the channel times out. @throws IOException if any other I/O error occurs.
479 Returns the default (first) host name associated by the default nameserver with the address bound to the specified network interface @param strInterface The name of the network interface to query (e.g. eth0). Must not be null. @return The default host name associated with IPs bound to the network interface @throws UnknownHostException If one is encountered while querying the default interface
480 @return Returns the default (first) host name associated by the provided nameserver with the address bound to the specified network interface. @param strInterface The name of the network interface to query (e.g. eth0) @param nameserver The DNS host name @throws UnknownHostException If one is encountered while querying the default interface
481 Reattach the class's metrics to a new metric system.
482 Instantiates a new {@link MutableInverseQuantiles} for a metric that rolls itself over on the specified time interval. @param name of the metric @param description long-form textual description of the metric @param sampleName type of items in the stream (e.g., "Ops") @param valueName type of the values @param intervalSecs rollover interval (in seconds) of the estimator
483 Create a mutable metric that estimates quantiles of a stream of values @param name of the metric @param desc metric description @param sampleName of the metric (e.g., "Ops") @param valueName of the metric (e.g., "Time" or "Latency") @param interval rollover interval of estimator in seconds @return a new quantile estimator object @throws MetricsException if interval is not a positive integer
484 Create a mutable metric with stats @param name of the metric @param desc metric description @param sampleName of the metric (e.g., "Ops") @param valueName of the metric (e.g., "Time" or "Latency") @return a new mutable metric object
485 Add a tag to the metrics @param name of the tag @param description of the tag @param value of the tag @return the registry (for keep adding tags)
486 @param name name of metric @param value value of metric
487 Instrument a Call queue time based on its priority. @param priority of the RPC call @param queueTime of the RPC call in the queue of the priority
488 Instrument a Call processing time based on its priority. @param priority of the RPC call @param processingTime of the RPC call in the queue of the priority
489 Add an overall RPC processing time sample. @param rpcCallName of the RPC call @param overallProcessingTime the overall RPC processing time
490 Locate the {@code krb5.conf} file and dump it. No-op on windows. @throws IOException problems reading the file.
491 Assert that a condition must hold. If not, an exception is raised, or, if {@link #nofail} is set, an error will be logged and the method return false. @param condition condition which must hold @param category category for exception @param message string formatting message @param args any arguments for the formatting @return true if the verification succeeded, false if it failed but an exception was not raised. @throws KerberosDiagsFailure containing the formatted text if the condition was met
492 Conditional failure with string formatted arguments. There is no chek for the {@link #nofail} value. @param condition failure condition @param category category for exception @param message string formatting message @param args any arguments for the formatting @throws KerberosDiagsFailure containing the formatted text if the condition was met
493 Create a user from a login name. It is intended to be used for remote users in RPC, since it won't have any credentials. @param user the full user principal name, must not be empty or null @return the UserGroupInformation for the remote user.
494 Verifies that the given identifier and password are valid and match. @param identifier Token identifier. @param password Password in the token. @throws InvalidToken InvalidToken.
495 Spawn a thread to do periodic renewals of kerberos credentials from a keytab file.
496 Constructor @deprecated invoke via {@link FsShell} @param cmd the count command @param pos the starting index of the arguments @param conf configuration
497 Get a new zookeeper client instance. protected so that test class can inherit and mock out the zookeeper instance @return new zookeeper client instance @throws IOException raised on errors performing I/O. @throws KeeperException zookeeper connectionloss exception
498 This removes the value currently at the head of the Queue for the provided key. Will immediately fire the Queue filler function if key does not exist. If Queue exists but all values are drained, It will ask the generator function to add 1 value to Queue and then drain it. @param keyName String key name @return E the next value in the Queue @throws IOException raised on errors performing I/O. @throws ExecutionException executionException.
499 Resolves a host subject to the security requirements determined by hadoop.security.token.service.use_ip. Optionally logs slow resolutions. @param hostname host or ip to resolve @return a resolved host @throws UnknownHostException if the host doesn't exist
500 Get a server protocol's signature @param server server implementation @param protocol server protocol @param clientVersion client's version @param clientMethodsHash client's protocol's hash code @return the server protocol's signature @throws IOException if any error occurs
501 Check if a method is supported by the server or not. @param methodName a method's name in String format @param parameterTypes a method's parameter types @return true if the method is supported by the server @throws IOException raised on errors performing I/O.
502 Verify RPC header is valid @param header - RPC request header @throws RpcServerException - header contains invalid values
503 Decode the a protobuf from the given input stream @return Message - decoded protobuf @throws RpcServerException - deserialization failed
504 poll() provides no strict consistency: it is possible for poll to return null even though an element is in the queue.
505 Try to set up the response to indicate that the client version is incompatible with the server. This can contain special-case code to speak enough of past IPC protocols to pass back an exception to the caller. @param clientVersion the version the caller is using @throws IOException
506 {@inheritDoc}
507 constructors for har input stream. @param fs the underlying filesystem @param p The path in the underlying filesystem @param start the start position in the part file @param length the length of valid data in the part file @param bufsize the buffer size @throws IOException raised on errors performing I/O.
508 Evict expired entries.
509 Evict entries in order to enforce the size limit of the cache.
510 Return the string representation of the object in the output format. For description of the options, @see #toString(boolean, boolean, boolean, boolean, List) @param qOption a flag indicating if quota needs to be printed or not @param hOption a flag indicating if human readable output is to be used @param xOption a flag indicating if calculation from snapshots is to be included in the output @return the string representation of the object
511 Return the string representation of the object in the output format. For description of the options, @see #toString(boolean, boolean, boolean, boolean, List) @param qOption a flag indicating if quota needs to be printed or not @param hOption a flag indicating if human readable output if to be used @param tOption a flag indicating if display quota by storage types @param types Storage types to display @return the string representation of the object
512 Return the string representation of the object in the output format. if hOption is false file sizes are returned in bytes if hOption is true file sizes are returned in human readable @param hOption a flag indicating if human readable output if to be used @param tOption type option. @param types storage types. @return the string representation of the object.
513 Wait for a list of futures to complete. If the list is empty, return immediately. @param futures list of futures. @param <T> Generics Type T. @throws IOException if one of the called futures raised an IOE. @throws RuntimeException if one of the futures raised one.
514 Block awaiting completion for any non-null future passed in; No-op if a null arg was supplied. @param future future @throws IOException if one of the called futures raised an IOE. @throws RuntimeException if one of the futures raised one.
515 Composes length / CRC_SIZE_IN_BYTES more CRCs from crcBuffer, with each CRC expected to correspond to exactly {@code bytesPerCrc} underlying data bytes. @param crcBuffer crcBuffer. @param offset offset. @param length must be a multiple of the expected byte-size of a CRC. @param bytesPerCrc bytesPerCrc. @throws IOException raised on errors performing I/O.
516 Composes {@code numChecksumsToRead} additional CRCs into the current digest out of {@code checksumIn}, with each CRC expected to correspond to exactly {@code bytesPerCrc} underlying data bytes. @param checksumIn checksumIn. @param numChecksumsToRead numChecksumsToRead. @param bytesPerCrc bytesPerCrc. @throws IOException raised on errors performing I/O.
517 Create an object for the given class and initialize it from conf @param theClass class of which an object is created @param conf Configuration @param <T> Generics Type T. @return a new object
518 Returns the class of keys in this file. @return keyClass.
519 Returns the class of values in this file. @return Value Class.
520 Run the class/resource find or load operation @param args command specific arguments. @return the outcome @throws Exception if something went very wrong
521 Construct from a {@link FileContext}. @param fc FileContext @param path path. @throws IOException failure
522 Creates a DataChecksum from HEADER_LEN bytes from arr[offset]. @param bytes bytes. @param offset offset. @return DataChecksum of the type in the array or null in case of an error. @throws IOException raised on errors performing I/O.
523 This constructs a DataChecksum by reading HEADER_LEN bytes from input stream <i>in</i>. @param in data input stream. @throws IOException raised on errors performing I/O. @return DataChecksum by reading HEADER_LEN bytes from input stream.
524 Check to see if a command needs to be executed and execute if needed. @throws IOException raised on errors performing I/O.
525 Aggregate an existing {@code IOStatisticsSnapshot} with the supplied statistics. @param snapshot snapshot to update @param statistics IOStatistics to add @return true if the snapshot was updated. @throws IllegalArgumentException if the {@code statistics} argument is not null but not an instance of IOStatistics, or if {@code snapshot} is invalid. @throws UnsupportedOperationException if the IOStatistics classes were not found
526 Create a new {@code IOStatisticsSnapshot} instance. @return an empty IOStatisticsSnapshot. @throws UnsupportedOperationException if the IOStatistics classes were not found
527 Create a new {@code IOStatisticsSnapshot} instance. @param source optional source statistics @return an IOStatisticsSnapshot. @throws ClassCastException if the {@code source} is not valid. @throws UnsupportedOperationException if the IOStatistics classes were not found
528 Save IOStatisticsSnapshot to a JSON string. @param snapshot statistics; may be null or of an incompatible type @return JSON string value or null if source is not an IOStatisticsSnapshot @throws UncheckedIOException Any IO/jackson exception. @throws UnsupportedOperationException if the IOStatistics classes were not found
529 Load IOStatisticsSnapshot from a JSON string. @param json JSON string value. @return deserialized snapshot. @throws UncheckedIOException Any IO/jackson exception. @throws UnsupportedOperationException if the IOStatistics classes were not found
530 Load IOStatisticsSnapshot from a Hadoop filesystem. @param fs filesystem @param path path @return the loaded snapshot @throws UncheckedIOException Any IO exception. @throws UnsupportedOperationException if the IOStatistics classes were not found
531 Extract the IOStatistics from an object in a serializable form. @param source source object, may be null/not a statistics source/instance @return {@code IOStatisticsSnapshot} or null if the object is null/doesn't have statistics @throws UnsupportedOperationException if the IOStatistics classes were not found
532 Save IOStatisticsSnapshot to a Hadoop filesystem as a JSON file. @param snapshot statistics @param fs filesystem @param path path @param overwrite should any existing file be overwritten? @throws UncheckedIOException Any IO exception. @throws UnsupportedOperationException if the IOStatistics classes were not found
533 Convert IOStatistics to a string form, with all the metrics sorted and empty value stripped. @param statistics A statistics instance. @return string value or the empty string if null @throws UnsupportedOperationException if the IOStatistics classes were not found
534 Get the context's {@code IOStatisticsContext} which implements {@code IOStatisticsSource}. This is either a thread-local value or a global empty context. @return instance of {@code IOStatisticsContext}. @throws UnsupportedOperationException if the IOStatisticsContext API was not found
535 Set the IOStatisticsContext for the current thread. @param statisticsContext IOStatistics context instance for the current thread. If null, the context is reset. @throws UnsupportedOperationException if the IOStatisticsContext API was not found
536 Reset the context's IOStatistics. {@code IOStatisticsContext#reset()} @throws UnsupportedOperationException if the IOStatisticsContext API was not found
537 Take a snapshot of the context IOStatistics. {@code IOStatisticsContext#snapshot()} @return an instance of {@code IOStatisticsSnapshot}. @throws UnsupportedOperationException if the IOStatisticsContext API was not found
538 Aggregate into the IOStatistics context the statistics passed in via IOStatistics/source parameter. <p> Returns false if the source is null or does not contain any statistics. @param source implementation of {@link IOStatisticsSource} or {@link IOStatistics} @return true if the the source object was aggregated.
539 Compares two version name strings using maven's ComparableVersion class. @param version1 the first version to compare @param version2 the second version to compare @return a negative integer if version1 precedes version2, a positive integer if version2 precedes version1, and 0 if and only if the two versions are equal.
540 Constructor @param vectorSize The vector size of <i>this</i> filter. @param nbHash The number of hash function to consider. @param hashType type of the hashing function (see {@link org.apache.hadoop.util.hash.Hash}).
541 Constructor @param vectorSize The vector size of <i>this</i> filter. @param nbHash The number of hash function to consider. @param hashType type of the hashing function (see {@link org.apache.hadoop.util.hash.Hash}).
542 Checks if this MapFile has the indicated key. The membership test is performed using a Bloom filter, so the result has always non-zero probability of false positives. @param key key to check @return false iff key doesn't exist, true if key probably exists. @throws IOException raised on errors performing I/O.
543 Performs the selective clearing for a given key. @param k The false positive key to remove from <i>this</i> retouched Bloom filter. @param scheme The selective clearing scheme to apply.
544 Adds the deprecated key to the global deprecation map. It does not override any existing entries in the deprecation map. This is to be used only by the developers in order to add deprecation of keys, and attempts to call this method after loading resources once, would lead to <tt>UnsupportedOperationException</tt> If you have multiple deprecation entries to add, it is more efficient to use #addDeprecations(DeprecationDelta[] deltas) instead. @param key to be deprecated @param newKey key that take up the values of deprecated key @param customMessage deprecation message
545 Adds the deprecated key to the global deprecation map when no custom message is provided. It does not override any existing entries in the deprecation map. This is to be used only by the developers in order to add deprecation of keys, and attempts to call this method after loading resources once, would lead to <tt>UnsupportedOperationException</tt> If a key is deprecated in favor of multiple keys, they are all treated as aliases of each other, and setting any one of them resets all the others to the new value. If you have multiple deprecation entries to add, it is more efficient to use #addDeprecations(DeprecationDelta[] deltas) instead. @param key Key that is to be deprecated @param newKeys list of keys that take up the values of deprecated key @deprecated use {@link #addDeprecation(String key, String newKey)} instead
546 Adds the deprecated key to the global deprecation map when no custom message is provided. It does not override any existing entries in the deprecation map. This is to be used only by the developers in order to add deprecation of keys, and attempts to call this method after loading resources once, would lead to <tt>UnsupportedOperationException</tt> If you have multiple deprecation entries to add, it is more efficient to use #addDeprecations(DeprecationDelta[] deltas) instead. @param key Key that is to be deprecated @param newKey key that takes up the value of deprecated key
547 Start the server. Does not wait for the server to start. @throws IOException raised on errors performing I/O.
548 Write the "ActiveBreadCrumb" node, indicating that this node may need to be fenced on failover. @param oldBreadcrumbStat
549 Try to delete the "ActiveBreadCrumb" node when gracefully giving up active status. If this fails, it will simply warn, since the graceful release behavior is only an optimization.
550 This is the default implementation which iterates through the ranges to read each synchronously, but the intent is that subclasses can make more efficient readers. The data or exceptions are pushed into {@link FileRange#getData()}. @param stream the stream to read the data from @param ranges the byte ranges to read @param allocate the byte buffer allocation @throws IllegalArgumentException if there are overlapping ranges or a range is invalid @throws EOFException the range offset is negative
551 Requests cancellation of any previously issued prefetch requests.
552 Gets the block having the given {@code blockNumber}. The entire block is read into memory and returned as a {@code BufferData}. The blocks are treated as a limited resource and must be released when one is done reading them. @param blockNumber the number of the block to be read and returned. @return {@code BufferData} having data from the given block. @throws IOException if there an error reading the given block. @throws IllegalArgumentException if blockNumber is negative.
553 Constructs an instance of {@link FilePosition}. @param fileSize size of the associated file. @param blockSize size of each block within the file. @throws IllegalArgumentException if fileSize is negative. @throws IllegalArgumentException if blockSize is zero or negative.
554 Determines whether the current block is the last block in this file. @return true if the current block is the last block in this file, false otherwise.
555 Close all cached FileSystem instances. After this operation, they may not be used in any operations. @throws IOException a problem arose closing one or more filesystem.
556 Write a line of text to a file. Characters are encoded into bytes using UTF-8. This utility method opens the file for writing, creating the file if it does not exist, or overwrites an existing file. @param fs the files system with which to create the file @param path the path to the file @param charseq the char sequence to write to the file @return the file system @throws NullPointerException if any of the arguments are {@code null} @throws IOException if an I/O error occurs creating or writing to the file
557 Constructor with host, name, offset, length and corrupt flag. @param names names. @param hosts hosts. @param offset offset. @param length length. @param corrupt corrupt.
558 Constructor with host, name, network topology, offset and length. @param names names. @param hosts hosts. @param topologyPaths topologyPaths. @param offset offset. @param length length.
559 Aggregate the mean statistics. This returns a new instance. @param l left value @param r right value @return aggregate value
560 Take a snapshot. This completely overwrites the map data with the statistics from the source. @param source statistics source.
561 Extract any statistics from the source and log to this class's log at debug, if the log is set to log at debug. No-op if logging is not at debug or the source is null/of the wrong type/doesn't provide statistics. @param message message for log -this must contain "{}" for the statistics report to actually get logged. @param source source object
562 A method to log IOStatistics from a source at different levels. @param log Logger for logging. @param level LOG level. @param source Source to LOG.
563 Clean up after an iteration. If the log is at debug, calculate and log the IOStatistics. If the iterator is closeable, cast and then cleanup the iterator @param source iterator source @param <T> type of source
564 Given an IOException raising callable/lambda expression, execute it and update the relevant statistic. @param factory factory of duration trackers @param statistic statistic key @param input input callable. @throws IOException IO failure.
565 Positioned read. It is thread-safe
566 Positioned read fully. It is thread-safe
567 Positioned read using {@link ByteBuffer}s. This method is thread-safe.
568 Positioned readFully using {@link ByteBuffer}s. This method is thread-safe.
569 ByteBuffer read.
570 Write a {@link Writable}, {@link String}, primitive type, or an array of the preceding. @param allowCompactArrays - set true for RPC and internal or intra-cluster usages. Set false for inter-cluster, File, and other persisted output usages, to preserve the ability to interchange files with other clusters that may not be running the same version of software. Sometime in ~2013 we can consider removing this parameter and always using the compact format. @param conf configuration. @param out dataoutput. @param declaredClass declaredClass. @param instance instance. @throws IOException raised on errors performing I/O.
571 Acquires a buffer if one is immediately available. Otherwise returns null. @param blockNumber the id of the block to try acquire. @return the acquired block's {@code BufferData} or null.
572 Number of ByteBuffers available to be acquired. @return the number of available buffers.
573 Execute the task across the data. @param task task to execute @param <E> exception which may be raised in execution. @return true if the operation executed successfully @throws E any exception raised. @throws IOException IOExceptions raised by remote iterator or in execution.
574 Iterates over the given expanded paths and invokes {@link #processPath(PathData)} on each element. If "recursive" is true, will do a post-visit DFS on directories. @param parent if called via a recurse, will be the parent dir, else null @param items a list of {@link PathData} objects to process @throws IOException if anything goes wrong...
575 Utility function for mapping {@link FileSystem#getPathHandle} to a fixed set of handle options. @param fs Target filesystem @param opt Options to bind in partially evaluated function @return Function reference with options fixed
576 Create a ShellCommandExecutor object using the user's name. @param userName user's name @return a ShellCommandExecutor object
577 Create a ShellCommandExecutor object for fetch a user's group id list. @param userName the user's name @return a ShellCommandExecutor object
578 Populates keys/values from proto buffer storage. @param in - stream ready to read a serialized proto buffer message
579 NEVER call this method directly. @param issuer issuer. @param renewer renewer. @param credentials cache in which to add new delegation tokens. @param tokens list of new delegation tokens. @throws IOException raised on errors performing I/O.
580 Add a named token to this UGI @param alias Name of the token @param token Token to be added @return true on successful add of new token
581 Resolve against given working directory. @param workDir @param path @return absolute path
582 Resolve against given working directory. * @param workDir @param path @return
583 Convert a path to a File. @param path the path. @return file.
584 See {@link FileContext#fixRelativePart}. @param p the path. @return relative part.
585 Returns a qualified path object. @param defaultUri if this path is missing the scheme or authority components, borrow them from this URI @param workingDir if this path isn't absolute, treat it as relative to this working directory @return this path if it contains a scheme and authority and is absolute, or a new path that includes a path and authority and is fully qualified
586 return the top level archive.
587 return the top level archive path.
588 Convenience method, so that we don't open a new connection when using this method from within another method. Otherwise every API invocation incurs the overhead of opening/closing a TCP connection.
589 Get the FileStatus info @param ignoreFNF if true, stat will be null if the path doesn't exist @return FileStatus for the given path @throws IOException if anything goes wrong
590 @return Path that generated the exception
591 @return Path if the operation involved copying or moving, else null
592 Return the total size of all files in the filesystem. @throws IOException IO failure @return the number of path used.
593 Constructor @param fs base file system @param uri base uri @throws IOException
594 Return remaining path from specified index to the end of the path array. @param path An array of path components split by slash @param startIndex the specified start index of the path array @return remaining path.
595 Get the target of the link. If a merge link then it returned as "," separated URI list. @return the path.
596 Create a new Path based on the child path resolved against the parent path. @param parent the parent path @param child the child path
597 Create a new Path based on the child path resolved against the parent path. @param parent the parent path @param child the child path
598 Create a new Path based on the child path resolved against the parent path. @param parent the parent path @param child the child path
599 Renames an existing map directory. @param fs fs. @param oldName oldName. @param newName newName. @throws IOException raised on errors performing I/O.
600 Add the service prefix for a local filesystem.
601 Convert a nested URI to decode the underlying path. The translation takes the authority and parses it into the underlying scheme and authority. For example, "myscheme://hdfs@nn/my/path" is converted to "hdfs://nn/my/path". @param nestedUri the URI from the nested URI @return the unnested path
602 stringToPath. @param str str. @return path array.
603 Return a version of the given Path without the scheme information. @param path the source Path @return a copy of this Path without the scheme information
604 Merge 2 paths such that the second path is appended relative to the first. The returned path has the scheme and authority of the first path. On Windows, the drive specification in the second path is discarded. @param path1 the first path @param path2 the second path, to be appended relative to path1 @return the merged path
605 Ensure that the file exists and if it is or is not a directory @param typeRequirement Set it to the desired requirement. @throws PathIOException if file doesn't exist or the type does not match what was specified in typeRequirement.
606 Given a child of this directory, use the directory's path and the child's basename to construct the string to the child. This preserves relative paths since Path will fully qualify. @param childPath a path contained within this directory @return String of the path relative to this directory
607 Provides a hook for handling paths that don't exist. By default it will throw an exception. Primarily overriden by commands that create paths such as mkdir or touch. @param item the {@link PathData} that doesn't exist @throws FileNotFoundException if arg is a path and it doesn't exist @throws IOException if anything else goes wrong...
608 Get the file system of supplied path. @param absOrFqPath - absolute or fully qualified path @return the file system of the path @throws UnsupportedFileSystemException If the file system for <code>absOrFqPath</code> is not supported. @throws IOException If the file system for <code>absOrFqPath</code> could not be instantiated.
609 Create a directory with the provided permission. The permission of the directory is set to be the provided permission as in setPermission, not permission{@literal &~}umask @see #create(FileSystem, Path, FsPermission) @param fs FileSystem handle @param dir the name of the directory to be created @param permission the permission of the directory @return true if the directory creation succeeds; false otherwise @throws IOException A problem creating the directories.
610 Constructor. @param length a file's length @param isdir if the path is a directory @param block_replication the file's replication factor @param blocksize a file's block size @param modification_time a file's modification time @param access_time a file's access time @param permission a file's permission @param owner a file's owner @param group a file's group @param symlink symlink if the path is a symbolic link @param path the path's qualified name @param attr Attribute flags (See {@link FileStatus.AttrFlags}). @param locations a file's block locations
611 Append a key/value pair. @param key input Writable key. @param val input Writable val. @throws IOException raised on errors performing I/O.
612 Writes records from RawKeyValueIterator into a file represented by the passed writer. @param records the RawKeyValueIterator @param writer the Writer created earlier @throws IOException raised on errors performing I/O.
613 {@inheritDoc} This invokes {@link #serviceInit} @param conf the configuration of the service. This must not be null @throws ServiceStateException if the configuration was null, the state change not permitted, or something else went wrong
614 {@inheritDoc}
615 Whether this is a private clone of a public token. @param thePublicService the public service name @return true when the public service is the same as specified
616 Match token service field to alias text. True if alias is null.
617 Match fetcher's service name to the service text and/or url prefix.
618 Create the directory if it doesn't exist and check that dir is readable, writable and executable @param dir dir. @throws DiskErrorException disk problem.
619 Create the directory if it doesn't exist and check that dir is readable, writable and executable. Perform some disk IO to ensure that the disk is usable for writes. @param dir dir. @throws DiskErrorException disk problem.
620 Checksums all complete data chunks and flushes them to the underlying stream. If there is a trailing partial chunk, it is not flushed and is maintained in the buffer.
621 Validate outputs decoded from inputs, by decoding an input back from the outputs and comparing it with the original one. For instance, in RS (6, 3), let (d0, d1, d2, d3, d4, d5) be sources and (p0, p1, p2) be parities, and assume inputs = [d0, null (d1), d2, d3, d4, d5, null (p0), p1, null (p2)]; erasedIndexes = [1, 6]; outputs = [d1, p0]. Then 1. Create new inputs, erasedIndexes and outputs for validation so that the inputs could contain the decoded outputs, and decode them: newInputs = [d1, d2, d3, d4, d5, p0] newErasedIndexes = [0] newOutputs = [d0'] 2. Compare d0 and d0'. The comparison will fail with high probability when the initial outputs are wrong. Note that the input buffers' positions must be the ones where data are read: If the input buffers have been processed by a decoder, the buffers' positions must be reset before being passed into this method. This method does not change outputs and erasedIndexes. @param inputs input buffers used for decoding. The buffers' position are moved to the end after this method. @param erasedIndexes indexes of erased units used for decoding @param outputs decoded output buffers, which are ready to be read after the call @throws IOException raised on errors performing I/O.
622 Decode with inputs and erasedIndexes, generates outputs. More see above. Note, for both input and output ECChunks, no mixing of on-heap buffers and direct buffers are allowed. @param inputs input buffers to read data from @param erasedIndexes indexes of erased units in the inputs array @param outputs output buffers to put decoded data into according to erasedIndexes, ready for read after the call @throws IOException if the decoder is closed
623 Signaling the end of write to the block. The block register will be called for registering the finished block.
624 The default cleanup. Subclasses can override this with a custom cleanup. @throws IOException raised on errors performing I/O.
625 Finishing reading the block. Release all resources.
626 Loads all the keys. @param in DataInput. @throws IOException raised on errors performing I/O.
627 Read 'raw' keys. @param key - The buffer into which the key is read @return Returns the key length or -1 for end of file @throws IOException raised on errors performing I/O.
628 Get the 'value' corresponding to the last read 'key'. @param val : The 'value' to be read. @throws IOException raised on errors performing I/O.
629 @return Get the 'value' corresponding to the last read 'key'. @param val : The 'value' to be read. @throws IOException raised on errors performing I/O.
630 Read 'raw' records. @param key - The buffer into which the key is read @param val - The 'raw' value @return Returns the total record length or -1 for end of file @throws IOException raised on errors performing I/O.
631 Read 'raw' values. @param val - The 'raw' value @return Returns the value length @throws IOException raised on errors performing I/O.
632 Obtains the DelegationTokenInformation associated with the given TokenIdentifier in the SQL database. @param ident Existing TokenIdentifier in the SQL database. @return DelegationTokenInformation that matches the given TokenIdentifier or null if it doesn't exist in the database.
633 Create and initialize a {@link PermissionStatus} from {@link DataInput}. @param in data input. @throws IOException raised on errors performing I/O. @return PermissionStatus.
634 Read an Enum value from DataInput, Enums are read and written using String values. @param <T> Enum type @param in DataInput to read from @param enumType Class type of Enum @return Enum represented by String read from DataInput @throws IOException raised on errors performing I/O.
635 Deserializes the AccessControlList object
636 Get the ByteString for frequently used fixed and small set strings. @param key string @return the ByteString for frequently used fixed and small set strings.
637 Create a {@code TokenProto} instance from a hadoop token. This builds and caches the fields (identifier, password, kind, service) but not renewer or any payload. @param tok token @return a marshallable protobuf class.
638 Create a new delegation token identifier @param kind token kind @param owner the effective username of the token owner @param renewer the username of the renewer @param realUser the real username of the token owner
639 Invoke the call once without retrying.
640 check whether we have already successfully obtained the key. It also initializes the valueInputStream.
641 Copy the value into BytesWritable. The input BytesWritable will be automatically resized to the actual value size. The implementation directly uses the buffer inside BytesWritable for storing the value. The call does not require the value length to be known. @param value value. @throws IOException raised on errors performing I/O. @return long value.
642 Writing the value to the output stream. This method avoids copying value data from Scanner into user buffer, then writing to the output stream. It does not require the value length to be known. @param out The output stream @return the length of the value @throws IOException raised on errors performing I/O.
643 Compare the entry key to another key. Synonymous to compareTo(key, 0, key.length). @param buf The key buffer. @return comparison result between the entry key with the input key.
644 Compare whether this and other points to the same key value.
645 Requests a delegation token using the configured <code>Authenticator</code> for authentication. @param url the URL to get the delegation token from. Only HTTP/S URLs are supported. @param token the authentication token being used for the user where the Delegation token will be stored. @param renewer the renewer user. @param doAsUser the user to do as, which will be the token owner. @throws IOException if an IO error occurred. @throws AuthenticationException if an authentication exception occurred. @return abstract delegation token identifier.
646 Renews a delegation token from the server end-point using the configured <code>Authenticator</code> for authentication. @param url the URL to renew the delegation token from. Only HTTP/S URLs are supported. @param token the authentication token with the Delegation Token to renew. @param doAsUser the user to do as, which will be the token owner. @param dToken abstract delegation token identifier. @throws IOException if an IO error occurred. @throws AuthenticationException if an authentication exception occurred. @return delegation token long value.
647 Cancels a delegation token from the server end-point. It does not require being authenticated by the configured <code>Authenticator</code>. @param url the URL to cancel the delegation token from. Only HTTP/S URLs are supported. @param token the authentication token with the Delegation Token to cancel. @param dToken abstract delegation token identifier. @param doAsUser the user to do as, which will be the token owner. @throws IOException if an IO error occurred.
648 Randomly choose a node. @param scope range of nodes from which a node will be chosen @return the chosen node @see #chooseRandom(String, Collection)
649 Sort nodes array by their distances to <i>reader</i>. <p> This is the same as {@link NetworkTopology#sortByDistance(Node, Node[], int)} except with a four-level network topology which contains the additional network distance of a "node group" which is between local and same rack. @param reader Node where data will be read @param nodes Available replicas with the requested data @param activeLen Number of active nodes at the front of the array
650 Return a {@link SocketInputWrapper} for the socket and set the given timeout. If the socket does not have an associated channel, then its socket timeout will be set to the specified value. Otherwise, a {@link SocketInputStream} will be created which reads with the configured timeout. Any socket created using socket factories returned by {@link #NetUtils}, must use this interface instead of {@link Socket#getInputStream()}. In general, this should be called only once on each socket: see the note in {@link SocketInputWrapper#setTimeout(long)} for more information. @see Socket#getChannel() @param socket socket. @param timeout timeout in milliseconds. zero for waiting as long as necessary. @return SocketInputWrapper for reading from the socket. @throws IOException raised on errors performing I/O.
651 Returns OutputStream for the socket. If the socket has an associated SocketChannel then it returns a {@link SocketOutputStream} with the given timeout. If the socket does not have a channel, {@link Socket#getOutputStream()} is returned. In the later case, the timeout argument is ignored and the write will wait until data is available.<br><br> Any socket created using socket factories returned by {@link NetUtils}, must use this interface instead of {@link Socket#getOutputStream()}. @see Socket#getChannel() @param socket socket. @param timeout timeout in milliseconds. This may not always apply. zero for waiting as long as necessary. @return OutputStream for writing to the socket. @throws IOException raised on errors performing I/O.
652 Like {@link NetUtils#connect(Socket, SocketAddress, int)} but also takes a local address and port to bind the socket to. @param socket socket. @param endpoint the remote address @param localAddr the local address to bind the socket to @param timeout timeout in milliseconds @throws IOException raised on errors performing I/O.
653 Register the MBean using our standard MBeanName format "hadoop:service={@literal <serviceName>,name=<nameName>}" Where the {@literal <serviceName> and <nameName>} are the supplied parameters. @param serviceName serviceName. @param nameName nameName. @param properties - Key value pairs to define additional JMX ObjectName properties. @param theMbean - the MBean to register @return the named used to register the MBean
654 Create a mutable inverse metric that estimates inverse quantiles of a stream of values @param name of the metric @param desc metric description @param sampleName of the metric (e.g., "Ops") @param valueName of the metric (e.g., "Rate") @param interval rollover interval of estimator in seconds @return a new inverse quantile estimator object @throws MetricsException if interval is not a positive integer
655 Constructor @param cacheName name to identify the cache by @param percentage percentage of total java heap space used by this cache @param expirationTime time for an entry to expire in nanoseconds
656 Initialize the registry with all the methods in a protocol so they all show up in the first snapshot. Convenient for JMX implementations. @param protocol the protocol class
657 Initialize the registry with all rate names passed in. This is an alternative to the above init function since this metric can be used more than just for rpc name. @param names the array of all rate names
658 Aggregates the thread's local samples into the global metrics. The caller should ensure its thread safety.
659 Create a mutable rate metric (for throughput measurement). @param name of the metric @param desc description @param extended produce extended stat (stdev/min/max etc.) if true @return a new mutable rate metric object
660 Initialize the registry with all the methods in a protocol so they all show up in the first snapshot. Convenient for JMX implementations. @param protocol the protocol class
661 Add {@link MutableMetric} for a method annotated with {@link Metric}
662 Validate the UGI: verify it is kerberized. @param messagePrefix message in exceptions @param user user to validate
663 Verify that a file is valid: it is a file, non-empty and readable. @param file file @param category category for exceptions @param text text message @return true if the validation held; false if it did not <i>and</i> {@link #nofail} has disabled raising exceptions.
664 Verify whether auth_to_local rules transform a principal name <p> Having a local user name "bar@foo.com" may be harmless, so it is noted at info. However if what was intended is a transformation to "bar" it can be difficult to debug, hence this check.
665 Get the username encoded in the token identifier @return the username or owner
666 Default constructor for the Find command.
667 Constructor
668 Force re-Login a user in from a keytab file irrespective of the last login time. Loads a user identity from a keytab file and logs them in. They become the currently logged-in user. This method assumes that {@link #loginUserFromKeytab(String, String)} had happened already. The Subject field of this UserGroupInformation object is updated to have the new credentials. @throws IOException raised on errors performing I/O. @throws KerberosAuthException on a failure
669 Force re-Login a user in from the ticket cache irrespective of the last login time. This method assumes that login had happened already. The Subject field of this UserGroupInformation object is updated to have the new credentials. @throws IOException raised on errors performing I/O. @throws KerberosAuthException on a failure
670 Re-Login a user in from the ticket cache. This method assumes that login had happened already. The Subject field of this UserGroupInformation object is updated to have the new credentials. @throws IOException raised on errors performing I/O. @throws KerberosAuthException on a failure
671 Create a socket address with the given host and port. The hostname might be replaced with another host that was set via {@link #addStaticResolution(String, String)}. The value of hadoop.security.token.service.use_ip will determine whether the standard java host resolver is used, or if the fully qualified resolver is used. @param host the hostname or IP use to instantiate the object @param port the port number @return InetSocketAddress
672 Checks if {@code host} is a local host name and return {@link InetAddress} corresponding to that address. @param host the specified host @return a valid local {@link InetAddress} or null @throws SocketException if an I/O error occurs
673 Initiates a rpc call by sending the rpc request to the remote server. Note: this is not called from the current thread, but by another thread, so that if the current thread is interrupted that the socket state isn't corrupted with a partially written message. @param call - the rpc request
674 Process an RPC Request - the connection headers and context must have been already read. - Based on the rpcKind, decode the rpcRequest. - A successfully decoded RpcCall will be deposited in RPC-Q and its response will be sent later when the request is processed. @param header - RPC request header @param buffer - stream to request payload @throws RpcServerException - generally due to fatal rpc layer issues such as invalid header or deserialization error. The call queue may also throw a fatal or non-fatal exception on overflow. @throws IOException - fatal internal error that should/could not be sent to client. @throws InterruptedException
675 Setup response for the IPC Call. @param call {@link Call} to which we are setting up the response @param status of the IPC call @param rv return value for the IPC Call, if the call was successful @param errorClass error class, if the the call failed @param error error message, if the call failed @throws IOException
676 Reloads the ip list
677 Test the {@link SysInfoLinux}. @param args - arguments to this calculator test
678 Return the string representation of the object in the output format. For description of the options, @see #toString(boolean, boolean, boolean, boolean, List) @param qOption a flag indicating if quota needs to be printed or not @param hOption a flag indicating if human readable output if to be used @return the string representation of the object
679 Read checksum verified bytes from this byte-input stream into the specified byte array, starting at the given offset. <p> This method implements the general contract of the corresponding <code>{@link InputStream#read(byte[], int, int) read}</code> method of the <code>{@link InputStream}</code> class. As an additional convenience, it attempts to read as many bytes as possible by repeatedly invoking the <code>read</code> method of the underlying stream. This iterated <code>read</code> continues until one of the following conditions becomes true: <ul> <li> The specified number of bytes have been read, <li> The <code>read</code> method of the underlying stream returns <code>-1</code>, indicating end-of-file. </ul> If the first <code>read</code> on the underlying stream returns <code>-1</code> to indicate end-of-file then this method returns <code>-1</code>. Otherwise this method returns the number of bytes actually read. @param b destination buffer. @param off offset at which to start storing bytes. @param len maximum number of bytes to read. @return the number of bytes read, or <code>-1</code> if the end of the stream has been reached. @exception IOException if an I/O error occurs. ChecksumException if any checksum error occurs
680 Creates an instance of the requested {@link Expression} class. @param expressionClass {@link Expression} class to be instantiated @param conf the Hadoop configuration @return a new instance of the requested {@link Expression} class
681 Get an instance of the requested command @param cmdName name of the command to lookup @param conf the hadoop configuration @return the {@link Command} or null if the command is unknown
682 Construct a new {@link WritableComparable} instance. @return WritableComparable.
683 Create a new instance of a class with a defined factory. @param c input c. @param conf input configuration. @return a new instance of a class with a defined factory.
684 Get the socket factory corresponding to the given proxy URI. If the given proxy URI corresponds to an absence of configuration parameter, returns null. If the URI is malformed raises an exception. @param conf configuration. @param propValue the property which is the class name of the SocketFactory to instantiate; assumed non null and non empty. @return a socket factory as defined in the property value.
685 Get the token identifier object, or null if it could not be constructed (because the class could not be loaded, for example). @return the token identifier, or null if there was no class found for it @throws IOException failure to unmarshall the data @throws RuntimeException if the token class could not be instantiated.
686 Returns a {@link DiskValidator} instance corresponding to the passed clazz. @param clazz a class extends {@link DiskValidator} @return disk validator.
687 Constructor. <p> Builds an empty Dynamic Bloom filter. @param vectorSize The number of bits in the vector. @param nbHash The number of hash function to consider. @param hashType type of the hashing function (see {@link org.apache.hadoop.util.hash.Hash}). @param nr The threshold for the maximum number of keys to record in a dynamic Bloom filter row.
688 Adds a new row to <i>this</i> dynamic Bloom filter.
689 Constructor @param vectorSize The vector size of <i>this</i> filter. @param nbHash The number of hash function to consider. @param hashType type of the hashing function (see {@link org.apache.hadoop.util.hash.Hash}).
690 Loads the resource at a given index into the properties. @param props the object containing the loaded properties. @param startIdx the index where the new resource has been added. @param fullReload flag whether we do complete reload of the conf instead of just loading the new resource.
691 Any service instance can drop out of the election by calling quitElection. <br> This will lose any leader status, if held, and stop monitoring of the lock node. <br> If the instance wants to participate in election again, then it needs to call joinElection(). <br> This allows service instances to take themselves out of rotation for known impending unavailable states (e.g. long GC pause or software upgrade). @param needFence true if the underlying daemon may need to be fenced if a failover occurs due to dropping out of the election.
692 Read fully a list of file ranges asynchronously from this file. The default iterates through the ranges to read each synchronously, but the intent is that FSDataInputStream subclasses can make more efficient readers. As a result of the call, each range will have FileRange.setData(CompletableFuture) called with a future that when complete will have a ByteBuffer with the data from the file's range. <p> The position returned by getPos() after readVectored() is undefined. </p> <p> If a file is changed while the readVectored() operation is in progress, the output is undefined. Some ranges may have old data, some may have new and some may have both. </p> <p> While a readVectored() operation is in progress, normal read api calls may block. </p> @param ranges the byte ranges to read @param allocate the function to allocate ByteBuffer @throws IOException any IOE. @throws IllegalArgumentException if the any of ranges are invalid, or they overlap.
693 Constructor with host, name, offset and length. @param names names array. @param hosts host array. @param offset offset. @param length length.
694 Constructor. @param key Statistic key. @param success Are these success or failure statistics. @param count Count of operation invocations. @param max Max duration; -1 if unknown. @param min Min duration; -1 if unknown. @param mean Mean duration -may be null. (will be cloned)
695 Aggregate the current statistics with the source reference passed in. The operation is synchronized. @param source source; may be null @return true if a merge took place.
696 Construct, taking a snapshot of the source statistics data if the source is non-null. If the source is null, the empty maps are created @param source statistics source. Nullable.
697 Apply an operation to all values of a RemoteIterator. If the iterator is an IOStatisticsSource returning a non-null set of statistics, <i>and</i> this classes log is set to DEBUG, then the statistics of the operation are evaluated and logged at debug. <p> The number of entries processed is returned, as it is useful to know this, especially during tests or when reporting values to users. </p> This does not close the iterator afterwards. @param source iterator source @param consumer consumer of the values. @return the number of elements processed @param <T> type of source @throws IOException if the source RemoteIterator or the consumer raise one.
698 Write a {@link Writable}, {@link String}, primitive type, or an array of the preceding. @param out DataOutput. @param instance instance. @param conf Configuration. @param declaredClass declaredClass. @throws IOException raised on errors performing I/O.
699 Requests optional prefetching of the given block. The block is prefetched only if we can acquire a free buffer. @throws IllegalArgumentException if blockNumber is negative.
700 Acquires a {@code ByteBuffer}; blocking if necessary until one becomes available. @param blockNumber the id of the block to acquire. @return the acquired block's {@code BufferData}.
701 This is the last chance to modify an argument before going into the (possibly) recursive {@link #processPaths(PathData, PathData...)} {@literal ->} {@link #processPath(PathData)} loop. Ex. ls and du use this to expand out directories. @param item a {@link PathData} representing a path which exists @throws IOException if anything goes wrong...
702 Iterates over the given expanded paths and invokes {@link #processPath(PathData)} on each element. If "recursive" is true, will do a post-visit DFS on directories. @param parent if called via a recurse, will be the parent dir, else null @param itemsIterator a iterator of {@link PathData} objects to process @throws IOException if anything goes wrong...
703 Attempt to partially resolve group names. @param userName the user's name @param errMessage error message from the shell command @param groupNames the incomplete list of group names @return a set of resolved group names @throws PartialGroupNameException if the resolution fails or times out
704 Static method to execute a shell command. Covers most of the simple cases without requiring the user to implement the <code>Shell</code> interface. @param cmd shell command to execute. @return the output of the executed command. @throws IOException raised on errors performing I/O.
705 Static method to execute a shell command. Covers most of the simple cases without requiring the user to implement the <code>Shell</code> interface. @param env the map of environment key=value @param cmd shell command to execute. @return the output of the executed command. @throws IOException on any problem.
706 Copy all of the credentials from one credential object into another. Existing secrets and tokens are overwritten. @param other the credentials to copy
707 Copy all of the credentials from one credential object into another. Existing secrets and tokens are not overwritten. @param other the credentials to copy
708 Given a renewer, add delegation tokens for issuer and it's child issuers to the <code>Credentials</code> object if it is not already present. <p> Note: This method is not intended to be overridden. Issuers should implement getCanonicalService and getDelegationToken to ensure consistent token acquisition behavior. @param renewer the user allowed to renew the delegation tokens @param credentials cache in which to add new delegation tokens @return list of new delegation tokens @throws IOException thrown if IOException if an IO error occurs.
709 Add a token to this UGI @param token Token to be added @return true on successful add of new token
710 Set the working directory to the given directory.
711 Sets the {@link Path}'s last modified time and last access time to the given valid times. @param mtime the modification time to set (only if no less than zero). @param atime the access time to set (only if no less than zero). @throws IOException if setting the times fails.
712 Convert a path to a File. @param path the path. @return file.
713 Make the path Absolute and get the path-part of a pathname. Checks that URI matches this file system and that the path-part is a valid name. @param p path @return path-part of the Path p
714 Returns a qualified path object for the {@link FileSystem}'s working directory. @param fs the target FileSystem @return a qualified path object for the FileSystem's working directory @deprecated use {@link #makeQualified(URI, Path)}
715 Make the path fully qualified if it is isn't. A Fully-qualified path has scheme and authority specified and an absolute path. Use the default file system and working dir in this FileContext to qualify. @param path the path. @return qualified path
716 Make the path fully qualified to this file system @param path the path. @return the qualified path
717 List the statuses of the files/directories in the given path if the path is a directory. @param f is the path @return an array that contains statuses of the files/directories in the given path @throws AccessControlException If access is denied @throws FileNotFoundException If <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
718 Delete a file. @param f the path to delete. @param recursive if path is a directory and set to true, the directory is deleted else throws an exception. In case of a file the recursive can be set to either true or false. @throws AccessControlException If access is denied @throws FileNotFoundException If <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server RuntimeExceptions: @throws InvalidPathException If path <code>f</code> is invalid @return if delete success true, not false.
719 Opens an FSDataInputStream at the indicated Path using default buffersize. @param f the file name to open @throws AccessControlException If access is denied @throws FileNotFoundException If file <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server @return input stream.
720 Opens an FSDataInputStream at the indicated Path. @param f the file name to open @param bufferSize the size of the buffer to be used. @throws AccessControlException If access is denied @throws FileNotFoundException If file <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server @return output stream.
721 Truncate the file in the indicated path to the indicated size. <ul> <li>Fails if path is a directory. <li>Fails if path does not exist. <li>Fails if path is not closed. <li>Fails if new size is greater than current size. </ul> @param f The path to the file to be truncated @param newLength The size the file is to be truncated to @return <code>true</code> if the file has been truncated to the desired <code>newLength</code> and is immediately available to be reused for write operations such as <code>append</code>, or <code>false</code> if a background process of adjusting the length of the last block has been started, and clients should wait for it to complete before proceeding with further file updates. @throws AccessControlException If access is denied @throws FileNotFoundException If file <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
722 Set replication for an existing file. @param f file name @param replication new replication @return true if successful @throws AccessControlException If access is denied @throws FileNotFoundException If file <code>f</code> does not exist @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
723 Set permission of a path. @param f the path. @param permission - the new absolute permission (umask is not applied) @throws AccessControlException If access is denied @throws FileNotFoundException If <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
724 Set owner of a path (i.e. a file or a directory). The parameters username and groupname cannot both be null. @param f The path @param username If it is null, the original username remains unchanged. @param groupname If it is null, the original groupname remains unchanged. @throws AccessControlException If access is denied @throws FileNotFoundException If <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server RuntimeExceptions: @throws HadoopIllegalArgumentException If <code>username</code> or <code>groupname</code> is invalid.
725 Set access time of a file. @param f The path @param mtime Set the modification time of this file. The number of milliseconds since epoch (Jan 1, 1970). A value of -1 means that this call should not set modification time. @param atime Set the access time of this file. The number of milliseconds since Jan 1, 1970. A value of -1 means that this call should not set access time. @throws AccessControlException If access is denied @throws FileNotFoundException If <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
726 Get the checksum of a file. @param f file path @return The file checksum. The default return value is null, which indicates that no checksum algorithm is implemented in the corresponding FileSystem. @throws AccessControlException If access is denied @throws FileNotFoundException If <code>f</code> does not exist @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
727 Return a file status object that represents the path. @param f The path we want information from @return a FileStatus object @throws AccessControlException If access is denied @throws FileNotFoundException If <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
728 Checks if the user can access a path. The mode specifies which access checks to perform. If the requested permissions are granted, then the method returns normally. If access is denied, then the method throws an {@link AccessControlException}. <p> The default implementation of this method calls {@link #getFileStatus(Path)} and checks the returned permissions against the requested permissions. Note that the getFileStatus call will be subject to authorization checks. Typically, this requires search (execute) permissions on each directory in the path's prefix, but this is implementation-defined. Any file system that provides a richer authorization model (such as ACLs) may override the default implementation so that it checks against that model instead. <p> In general, applications should avoid using this method, due to the risk of time-of-check/time-of-use race conditions. The permissions on a file may change immediately after the access call returns. Most applications should prefer running specific file system actions as the desired user represented by a {@link UserGroupInformation}. @param path Path to check @param mode type of access to check @throws AccessControlException if access is denied @throws FileNotFoundException if the path does not exist @throws UnsupportedFileSystemException if file system for <code>path</code> is not supported @throws IOException see specific implementation Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
729 Return a file status object that represents the path. If the path refers to a symlink then the FileStatus of the symlink is returned. The behavior is equivalent to #getFileStatus() if the underlying file system does not support symbolic links. @param f The path we want information from. @return A FileStatus object @throws AccessControlException If access is denied @throws FileNotFoundException If <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If an I/O error occurred
730 Returns the target of the given symbolic link as it was specified when the link was created. Links in the path leading up to the final path component are resolved transparently. @param f the path to return the target of @return The un-interpreted target of the symbolic link. @throws AccessControlException If access is denied @throws FileNotFoundException If path <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If the given path does not refer to a symlink or an I/O error occurred
731 Return blockLocation of the given file for the given offset and len. For a nonexistent file or regions, null will be returned. This call is most helpful with DFS, where it returns hostnames of machines that contain the given file. In HDFS, if file is three-replicated, the returned array contains elements like: <pre> BlockLocation(offset: 0, length: BLOCK_SIZE, hosts: {"host1:9866", "host2:9866, host3:9866"}) BlockLocation(offset: BLOCK_SIZE, length: BLOCK_SIZE, hosts: {"host2:9866", "host3:9866, host4:9866"}) </pre> And if a file is erasure-coded, the returned BlockLocation are logical block groups. Suppose we have a RS_3_2 coded file (3 data units and 2 parity units). 1. If the file size is less than one stripe size, say 2 * CELL_SIZE, then there will be one BlockLocation returned, with 0 offset, actual file size and 4 hosts (2 data blocks and 2 parity blocks) hosting the actual blocks. 3. If the file size is less than one group size but greater than one stripe size, then there will be one BlockLocation returned, with 0 offset, actual file size with 5 hosts (3 data blocks and 2 parity blocks) hosting the actual blocks. 4. If the file size is greater than one group size, 3 * BLOCK_SIZE + 123 for example, then the result will be like: <pre> BlockLocation(offset: 0, length: 3 * BLOCK_SIZE, hosts: {"host1:9866", "host2:9866","host3:9866","host4:9866","host5:9866"}) BlockLocation(offset: 3 * BLOCK_SIZE, length: 123, hosts: {"host1:9866", "host4:9866", "host5:9866"}) </pre> @param f - get blocklocations of this file @param start position (byte offset) @param len (in bytes) @return block locations for given file at specified offset of len @throws AccessControlException If access is denied @throws FileNotFoundException If <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server RuntimeExceptions: @throws InvalidPathException If path <code>f</code> is invalid
732 Returns a status object describing the use and capacity of the file system denoted by the Parh argument p. If the file system has multiple partitions, the use and capacity of the partition pointed to by the specified path is reflected. @param f Path for which status should be obtained. null means the root partition of the default file system. @return a FsStatus object @throws AccessControlException If access is denied @throws FileNotFoundException If <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
733 Creates a symbolic link to an existing file. An exception is thrown if the symlink exits, the user does not have permission to create symlink, or the underlying file system does not support symlinks. Symlink permissions are ignored, access to a symlink is determined by the permissions of the symlink target. Symlinks in paths leading up to the final path component are resolved transparently. If the final path component refers to a symlink some functions operate on the symlink itself, these are: - delete(f) and deleteOnExit(f) - Deletes the symlink. - rename(src, dst) - If src refers to a symlink, the symlink is renamed. If dst refers to a symlink, the symlink is over-written. - getLinkTarget(f) - Returns the target of the symlink. - getFileLinkStatus(f) - Returns a FileStatus object describing the symlink. Some functions, create() and mkdir(), expect the final path component does not exist. If they are given a path that refers to a symlink that does exist they behave as if the path referred to an existing file or directory. All other functions fully resolve, ie follow, the symlink. These are: open, setReplication, setOwner, setTimes, setWorkingDirectory, setPermission, getFileChecksum, setVerifyChecksum, getFileBlockLocations, getFsStatus, getFileStatus, exists, and listStatus. Symlink targets are stored as given to createSymlink, assuming the underlying file system is capable of storing a fully qualified URI. Dangling symlinks are permitted. FileContext supports four types of symlink targets, and resolves them as follows <pre> Given a path referring to a symlink of form: {@literal <---}X{@literal --->} fs://host/A/B/link {@literal <-----}Y{@literal ----->} In this path X is the scheme and authority that identify the file system, and Y is the path leading up to the final path component "link". If Y is a symlink itself then let Y' be the target of Y and X' be the scheme and authority of Y'. Symlink targets may: 1. Fully qualified URIs fs://hostX/A/B/file Resolved according to the target file system. 2. Partially qualified URIs (eg scheme but no host) fs:///A/B/file Resolved according to the target file system. Eg resolving a symlink to hdfs:///A results in an exception because HDFS URIs must be fully qualified, while a symlink to file:///A will not since Hadoop's local file systems require partially qualified URIs. 3. Relative paths path Resolves to [Y'][path]. Eg if Y resolves to hdfs://host/A and path is "../B/file" then [Y'][path] is hdfs://host/B/file 4. Absolute paths path Resolves to [X'][path]. Eg if Y resolves hdfs://host/A/B and path is "/file" then [X][path] is hdfs://host/file </pre> @param target the target of the symbolic link @param link the path to be created that points to target @param createParent if true then missing parent dirs are created if false then parent must exist @throws AccessControlException If access is denied @throws FileAlreadyExistsException If file <code>link</code> already exists @throws FileNotFoundException If <code>target</code> does not exist @throws ParentNotDirectoryException If parent of <code>link</code> is not a directory. @throws UnsupportedFileSystemException If file system for <code>target</code> or <code>link</code> is not supported @throws IOException If an I/O error occurred
734 List the statuses of the files/directories in the given path if the path is a directory. @param f is the path @return an iterator that traverses statuses of the files/directories in the given path @throws AccessControlException If access is denied @throws FileNotFoundException If <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
735 List CorruptFile Blocks. @param path the path. @return an iterator over the corrupt files under the given path (may contain duplicates if a file has more than one corrupt block) @throws IOException If an I/O error occurred.
736 List the statuses of the files/directories in the given path if the path is a directory. Return the file's status and block locations If the path is a file. If a returned status is a file, it contains the file's block locations. @param f is the path @return an iterator that traverses statuses of the files/directories in the given path If any IO exception (for example the input directory gets deleted while listing is being executed), next() or hasNext() of the returned iterator may throw a RuntimeException with the io exception as the cause. @throws AccessControlException If access is denied @throws FileNotFoundException If <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
737 Returns the list of AbstractFileSystems accessed in the path. The list may contain more than one AbstractFileSystems objects in case of symlinks. @param f Path which needs to be resolved @return List of AbstractFileSystems accessed in the path @throws IOException If an I/O error occurred.
738 Modifies ACL entries of files and directories. This method can add new ACL entries or modify the permissions on existing ACL entries. All existing ACL entries that are not specified in this call are retained without changes. (Modifications are merged into the current ACL.) @param path Path to modify @param aclSpec List{@literal <}AclEntry{@literal >} describing modifications @throws IOException if an ACL could not be modified
739 Removes ACL entries from files and directories. Other ACL entries are retained. @param path Path to modify @param aclSpec List{@literal <}AclEntry{@literal >} describing entries to remove @throws IOException if an ACL could not be modified
740 Removes all default ACL entries from files and directories. @param path Path to modify @throws IOException if an ACL could not be modified
741 Removes all but the base ACL entries of files and directories. The entries for user, group, and others are retained for compatibility with permission bits. @param path Path to modify @throws IOException if an ACL could not be removed
742 Fully replaces ACL of files and directories, discarding all existing entries. @param path Path to modify @param aclSpec List{@literal <}AclEntry{@literal >} describing modifications, must include entries for user, group, and others for compatibility with permission bits. @throws IOException if an ACL could not be modified
743 Gets the ACLs of files and directories. @param path Path to get @return RemoteIterator{@literal <}AclStatus{@literal >} which returns each AclStatus @throws IOException if an ACL could not be read
744 Set an xattr of a file or directory. The name must be prefixed with the namespace followed by ".". For example, "user.attr". <p> Refer to the HDFS extended attributes user documentation for details. @param path Path to modify @param name xattr name. @param value xattr value. @param flag xattr set flag @throws IOException If an I/O error occurred.
745 Get an xattr for a file or directory. The name must be prefixed with the namespace followed by ".". For example, "user.attr". <p> Refer to the HDFS extended attributes user documentation for details. @param path Path to get extended attribute @param name xattr name. @return byte[] xattr value. @throws IOException If an I/O error occurred.
746 Get all of the xattrs for a file or directory. Only those xattrs for which the logged-in user has permissions to view are returned. <p> Refer to the HDFS extended attributes user documentation for details. @param path Path to get extended attributes @return Map{@literal <}String, byte[]{@literal >} describing the XAttrs of the file or directory @throws IOException If an I/O error occurred.
747 Get all of the xattrs for a file or directory. Only those xattrs for which the logged-in user has permissions to view are returned. <p> Refer to the HDFS extended attributes user documentation for details. @param path Path to get extended attributes @param names XAttr names. @return Map{@literal <}String, byte[]{@literal >} describing the XAttrs of the file or directory @throws IOException If an I/O error occurred.
748 Remove an xattr of a file or directory. The name must be prefixed with the namespace followed by ".". For example, "user.attr". <p> Refer to the HDFS extended attributes user documentation for details. @param path Path to remove extended attribute @param name xattr name @throws IOException If an I/O error occurred.
749 Get all of the xattr names for a file or directory. Only those xattr names which the logged-in user has permissions to view are returned. <p> Refer to the HDFS extended attributes user documentation for details. @param path Path to get extended attributes @return List{@literal <}String{@literal >} of the XAttr names of the file or directory @throws IOException If an I/O error occurred.
750 Create a snapshot. @param path The directory where snapshots will be taken. @param snapshotName The name of the snapshot @return the snapshot path. @throws IOException If an I/O error occurred <p>Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
751 Rename a snapshot. @param path The directory path where the snapshot was taken @param snapshotOldName Old name of the snapshot @param snapshotNewName New name of the snapshot @throws IOException If an I/O error occurred <p>Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
752 Delete a snapshot of a directory. @param path The directory that the to-be-deleted snapshot belongs to @param snapshotName The name of the snapshot @throws IOException If an I/O error occurred <p>Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
753 Set the source path to satisfy storage policy. @param path The source path referring to either a directory or a file. @throws IOException If an I/O error occurred.
754 Set the storage policy for a given file or directory. @param path file or directory path. @param policyName the name of the target storage policy. The list of supported Storage policies can be retrieved via {@link #getAllStoragePolicies}. @throws IOException If an I/O error occurred.
755 Unset the storage policy set for a given file or directory. @param src file or directory path. @throws IOException If an I/O error occurred.
756 Query the effective storage policy ID for the given file or directory. @param path file or directory path. @return storage policy for give file. @throws IOException If an I/O error occurred.
757 Return the path capabilities of the bonded {@code AbstractFileSystem}. @param path path to query the capability of. @param capability string to query the stream support for. @return true iff the capability is supported under that FS. @throws IOException path resolution or other IO failure @throws IllegalArgumentException invalid arguments
758 Return a set of server default configuration values based on path. @param path path to fetch server defaults @return server default configuration values for path @throws IOException an I/O error occurred
759 Create a multipart uploader. @param basePath file path under which all files are uploaded @return a MultipartUploaderBuilder object to build the uploader @throws IOException if some early checks cause IO failures. @throws UnsupportedOperationException if support is checked early.
760 Convenience method, so that we don't open a new connection when using this method from within another method. Otherwise every API invocation incurs the overhead of opening/closing a TCP connection.
761 Updates the paths's file status @return the updated FileStatus @throws IOException if anything goes wrong...
762 Return the total size of all files in the filesystem.
763 Get resolved path from regex mount points. E.g. link: ^/user/(?<username>\\w+) => s3://$user.apache.com/_${user} srcPath: is /user/hadoop/dir1 resolveLastComponent: true then return value is s3://hadoop.apache.com/_hadoop @param srcPath - the src path to resolve @param resolveLastComponent - whether resolve the path after last `/` @return mapped path of the mount point.
764 We search through all the configured dirs for the file's existence and return true when we find one
765 Deletes the named map file. @param fs input fs. @param name input name. @throws IOException raised on errors performing I/O.
766 Use the given time to determine the current directory. The current directory will be based on the {@link #rollIntervalMinutes}. @param now the current time @return the current directory
767 Open the specified File for write access, ensuring that it does not exist. @param f the file that we want to create @param permissions we want to have on the file (if security is enabled) @throws AlreadyExistsException if the file already exists @throws IOException if any other error occurred @return createForWrite FileOutputStream.
768 Check the source and target paths to ensure that they are either both in /.reserved/raw or neither in /.reserved/raw. If neither src nor target are in /.reserved/raw, then return false, indicating not to preserve raw.* xattrs. If both src/target are in /.reserved/raw, then return true, indicating raw.* xattrs should be preserved. If only one of src/target is in /.reserved/raw then throw an exception. @param src The source path to check. This should be a fully-qualified path, not relative. @param target The target path to check. This should be a fully-qualified path, not relative. @return true if raw.* xattrs should be preserved. @throws PathOperationException is only one of src/target are in /.reserved/raw.
769 Returns the parent of a path or null if at root. Better alternative is {@link #getOptionalParentPath()} to handle nullable value for root path. @return the parent of a path or null if at root
770 Returns the parent of a path as {@link Optional} or {@link Optional#empty()} i.e an empty Optional if at root. @return Parent of path wrappen in {@link Optional}. {@link Optional#empty()} i.e an empty Optional if at root.
771 Returns a RemoteIterator for PathData objects of the items contained in the given directory. @return remote iterator of PathData objects for its children @throws IOException if anything else goes wrong...
772 Construct from a {@link FileContext}. @param fc FileContext @param p path. @throws IOException failure
773 Set the verify checksum flag for the file system denoted by the path. This is only applicable if the corresponding FileSystem supports checksum. By default doesn't do anything. @param verifyChecksum verify check sum. @param f set the verifyChecksum for the Filesystem containing this path @throws AccessControlException If access is denied @throws FileNotFoundException If <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
774 Read instance encoded as protobuf from stream. @param in Input stream @see PBHelper#convert(FileStatus) @deprecated Use the {@link PBHelper} and protobuf serialization directly.
775 Constructor. @param length a file's length @param isdir if the path is a directory @param block_replication the file's replication factor @param blocksize a file's block size @param modification_time a file's modification time @param access_time a file's access time @param permission a file's permission @param owner a file's owner @param group a file's group @param symlink symlink if the path is a symbolic link @param path the path's qualified name @param hasAcl entity has associated ACLs @param isEncrypted entity is encrypted @param isErasureCoded entity is erasure coded @param locations a file's block locations
776 Append a key/value pair to the map. The key must be greater or equal to the previous key added to the map. @param key key. @param val value. @throws IOException raised on errors performing I/O.
777 Relay to {@link #stop()} @throws IOException raised on errors performing I/O.
778 Write one byte
779 Write a portion of an array, flushing to the underlying stream at most once if necessary.
780 Validate outputs decoded from inputs, by decoding an input back from those outputs and comparing it with the original one. @param inputs input buffers used for decoding @param erasedIndexes indexes of erased units used for decoding @param outputs decoded output buffers @throws IOException raised on errors performing I/O.
781 Close the current data block if necessary. @param bForceFinish Force the closure regardless of the block size. @throws IOException
782 Convenience method for reading a token from a DataInputStream. @param in DataInputStream. @throws IOException raised on errors performing I/O.
783 Obtain a list of tokens that will be considered for cleanup, based on the last time the token was updated in SQL. This list may include tokens that are not expired and should not be deleted (e.g. if the token was last renewed using a higher renewal interval). The number of results is limited to reduce performance impact. Some level of contention is expected when multiple routers run cleanup simultaneously. @return Map of tokens that have not been updated in SQL after the token renewal period.
784 Fills up the passed rawValue with the value corresponding to the key read earlier. @param rawValue input ValueBytes rawValue. @return the length of the value @throws IOException raised on errors performing I/O.
785 Write contents of this instance as CredentialsProto message to DataOutput. @param out @throws IOException
786 Create a {@code TokenProto} instance from a hadoop token. This builds and caches the fields (identifier, password, kind, service) but not renewer or any payload. @param tok token @return a marshallable protobuf class.
787 Get an entry to access the key and value. @return The Entry object to access the key and value. @throws IOException raised on errors performing I/O.
788 Internal API. Comparing the key at cursor to user-specified key. @param other user-specified key. @return negative if key at cursor is smaller than user key; 0 if equal; and positive if key at cursor greater than user key. @throws IOException
789 Copy the key and value in one shot into BytesWritables. This is equivalent to getKey(key); getValue(value); @param key BytesWritable to hold key. @param value BytesWritable to hold value @throws IOException raised on errors performing I/O.
790 Advance cursor by n positions within the block. @param n Number of key-value pairs to skip in block. @throws IOException
791 Requests a delegation token using the configured <code>Authenticator</code> for authentication. @param url the URL to get the delegation token from. Only HTTP/S URLs are supported. @param token the authentication token being used for the user where the Delegation token will be stored. @param renewer the renewer user. @throws IOException if an IO error occurred. @throws AuthenticationException if an authentication exception occurred. @return abstract delegation token identifier.
792 Renews a delegation token from the server end-point using the configured <code>Authenticator</code> for authentication. @param url the URL to renew the delegation token from. Only HTTP/S URLs are supported. @param token the authentication token with the Delegation Token to renew. @param dToken abstract delegation token identifier. @throws IOException if an IO error occurred. @throws AuthenticationException if an authentication exception occurred. @return delegation token long value.
793 Cancels a delegation token from the server end-point. It does not require being authenticated by the configured <code>Authenticator</code>. @param url the URL to cancel the delegation token from. Only HTTP/S URLs are supported. @param token the authentication token with the Delegation Token to cancel. @param dToken abstract delegation token identifier. @throws IOException if an IO error occurred.
794 Same as <code>getInputStream(socket, socket.getSoTimeout()).</code> @param socket socket. @throws IOException raised on errors performing I/O. @return SocketInputWrapper for reading from the socket. @see #getInputStream(Socket, long)
795 Same as getOutputStream(socket, 0). Timeout of zero implies write will wait until data is available.<br><br> From documentation for {@link #getOutputStream(Socket, long)} : <br> Returns OutputStream for the socket. If the socket has an associated SocketChannel then it returns a {@link SocketOutputStream} with the given timeout. If the socket does not have a channel, {@link Socket#getOutputStream()} is returned. In the later case, the timeout argument is ignored and the write will wait until data is available.<br><br> Any socket created using socket factories returned by {@link NetUtils}, must use this interface instead of {@link Socket#getOutputStream()}. @see #getOutputStream(Socket, long) @param socket socket. @return OutputStream for writing to the socket. @throws IOException raised on errors performing I/O.
796 This is a drop-in replacement for {@link Socket#connect(SocketAddress, int)}. In the case of normal sockets that don't have associated channels, this just invokes <code>socket.connect(endpoint, timeout)</code>. If <code>socket.getChannel()</code> returns a non-null channel, connect is implemented using Hadoop's selectors. This is done mainly to avoid Sun's connect implementation from creating thread-local selectors, since Hadoop does not have control on when these are closed and could end up taking all the available file descriptors. @see java.net.Socket#connect(java.net.SocketAddress, int) @param socket socket. @param address the remote address @param timeout timeout in milliseconds @throws IOException raised on errors performing I/O.
797 Sample all the sources for a snapshot of metrics/tags @return the metrics buffer containing the snapshot
798 Register the MBean using our standard MBeanName format "hadoop:service={@literal <serviceName>,name=<nameName>}" Where the {@literal <serviceName> and <nameName>} are the supplied parameters. @param serviceName serviceName. @param nameName nameName. @param theMbean - the MBean to register @return the named used to register the MBean
799 Get a metric by given directory name. @param dirName directory name @return the metric
800 Initialize the metrics for JMX with priority levels. @param numLevels input numLevels.
801 Collects states maintained in {@link ThreadLocal}, if any.
802 Create a mutable rate metric @param name of the metric @return a new mutable metric object
803 Create a mutable rate metric @param name of the metric @param description of the metric @return a new mutable rate metric object
804 Dump a keytab: list all principals. @param keytabFile the keytab file @throws IOException IO problems
805 Validate any JAAS entry referenced in the {@link #SUN_SECURITY_JAAS_FILE} property. @param jaasRequired is JAAS required
806 Return the real owner for a token. If this is a token from a proxy user, the real/effective user will be returned. @param id @return real owner
807 Utility function to ensure that the configured base znode exists. This recursively creates the znode as well as all of its parents. @throws IOException raised on errors performing I/O. @throws InterruptedException interrupted exception. @throws KeeperException other zookeeper operation errors.
808 get data set by the active leader @return data set by the active instance @throws ActiveNotFoundException when there is no active leader @throws KeeperException other zookeeper operation errors @throws InterruptedException interrupted exception. @throws IOException when ZooKeeper connection could not be established
809 Re-login a user from keytab if TGT is expired or is close to expiry. @throws IOException raised on errors performing I/O. @throws KerberosAuthException if it's a kerberos login exception.
810 Re-Login a user in from a keytab file. Loads a user identity from a keytab file and logs them in. They become the currently logged-in user. This method assumes that {@link #loginUserFromKeytab(String, String)} had happened already. The Subject field of this UserGroupInformation object is updated to have the new credentials. @throws IOException raised on errors performing I/O. @throws KerberosAuthException on a failure
811 Returns an InetSocketAddress that a client can use to connect to the given listening address. @param addr of a listener @return socket address that a client can use to connect to the server.
812 Update the server address if the address corresponding to the host name has changed. @return true if an addr change was detected. @throws IOException when the hostname cannot be resolved.
813 Resolve the uri's hostname and add the default port if not in the uri @param uri to resolve @param defaultPort if none is given @return URI
814 Make a call, passing <code>rpcRequest</code>, to the IPC server defined by <code>remoteId</code>, returning the rpc response. @param rpcKind @param rpcRequest - contains serialized method and method parameters @param remoteId - the target rpc server @param serviceClass - service class for RPC @param fallbackToSimpleAuth - set to true or false during this method to indicate if a secure client falls back to simple auth @param alignmentContext - state alignment context @return the rpc response Throws exceptions if there are network problems or if the remote code threw an exception.
815 This method handles the following conditions: <ul> <li>If retry is not to be processed, return null</li> <li>If there is no cache entry, add a new entry {@code newEntry} and return it.</li> <li>If there is an existing entry, wait for its completion. If the completion state is {@link CacheEntry#FAILED}, the expectation is that the thread that waited for completion, retries the request. the {@link CacheEntry} state is set to {@link CacheEntry#INPROGRESS} again. <li>If the completion state is {@link CacheEntry#SUCCESS}, the entry is returned so that the thread that waits for it can can return previous response.</li> <ul> @return {@link CacheEntry}.
816 Add a new cache entry into the retry cache. The cache entry consists of clientId and callId extracted from editlog. @param clientId input clientId. @param callId input callId.
817 Return the string representation of the object in the output format. if qOption is false, output directory count, file count, and content size; if qOption is true, output quota and remaining quota as well. @param qOption a flag indicating if quota needs to be printed or not @return the string representation of the object
818 Get an instance of the requested expression @param expressionName name of the command to lookup @param conf the Hadoop configuration @return the {@link Expression} or null if the expression is unknown
819 Creates an instance of the requested {@link Expression} class. @param expressionClassname name of the {@link Expression} class to be instantiated @param conf the Hadoop configuration @return a new instance of the requested {@link Expression} class
820 Build the description used by the help command.
821 Gets an instance of an expression from the factory.
822 Returns an instance of the class implementing the given command. The class must have been registered via {@link #addClass(Class, String...)} @param cmd name of the command @return instance of the requested command
823 Read a {@link Writable}, {@link String}, primitive type, or an array of the preceding. @param in DataInput. @param objectWritable objectWritable. @param conf configuration. @return Object. @throws IOException raised on errors performing I/O.
824 Create a new instance of a class with a defined factory. @param c input c. @return a new instance of a class with a defined factory.
825 Decode the token identifier. The subclass can customize the way to decode the token identifier. @param token the token where to extract the identifier @return the delegation token identifier @throws IOException raised on errors performing I/O.
826 Print out a Credentials object. @param creds the Credentials object to be printed out. @param alias print only tokens matching alias (null matches all). @param out print to this stream. @throws IOException failure to unmarshall a token identifier.
827 Returns {@link DiskValidator} instance corresponding to its name. The diskValidator parameter can be "basic" for {@link BasicDiskValidator} or "read-write" for {@link ReadWriteDiskValidator}. @param diskValidator canonical class name, for example, "basic" @throws DiskErrorException if the class cannot be located @return disk validator.
828 Default Constructor.
829 Return an array containing hostnames, offset and size of portions of the given file. For nonexistent file or regions, {@code null} is returned. <pre> if f == null : result = null elif f.getLen() {@literal <=} start: result = [] else result = [ locations(FS, b) for b in blocks(FS, p, s, s+l)] </pre> This call is most helpful with and distributed filesystem where the hostnames of machines that contain blocks of the given file can be determined. The default implementation returns an array containing one element: <pre> BlockLocation( { "localhost:9866" }, { "localhost" }, 0, file.getLen()) </pre> In HDFS, if file is three-replicated, the returned array contains elements like: <pre> BlockLocation(offset: 0, length: BLOCK_SIZE, hosts: {"host1:9866", "host2:9866, host3:9866"}) BlockLocation(offset: BLOCK_SIZE, length: BLOCK_SIZE, hosts: {"host2:9866", "host3:9866, host4:9866"}) </pre> And if a file is erasure-coded, the returned BlockLocation are logical block groups. Suppose we have a RS_3_2 coded file (3 data units and 2 parity units). 1. If the file size is less than one stripe size, say 2 * CELL_SIZE, then there will be one BlockLocation returned, with 0 offset, actual file size and 4 hosts (2 data blocks and 2 parity blocks) hosting the actual blocks. 3. If the file size is less than one group size but greater than one stripe size, then there will be one BlockLocation returned, with 0 offset, actual file size with 5 hosts (3 data blocks and 2 parity blocks) hosting the actual blocks. 4. If the file size is greater than one group size, 3 * BLOCK_SIZE + 123 for example, then the result will be like: <pre> BlockLocation(offset: 0, length: 3 * BLOCK_SIZE, hosts: {"host1:9866", "host2:9866","host3:9866","host4:9866","host5:9866"}) BlockLocation(offset: 3 * BLOCK_SIZE, length: 123, hosts: {"host1:9866", "host4:9866", "host5:9866"}) </pre> @param file FilesStatus to get data from @param start offset into the given file @param len length for which to get locations for @throws IOException IO failure @return block location array.
830 Fetch the duration timing summary of success or failure operations from an IO Statistics source. If the duration key is unknown, the summary will be incomplete. @param source source of data @param key duration statistic key @param success fetch success statistics, or if false, failure stats. @return a summary of the statistics.
831 Returns a snapshot of the current thread's IOStatistics. @return IOStatisticsSnapshot of the context.
832 Take a snapshot of the current statistics state. <p> This is not an atomic option. <p> The instance can be serialized, and its {@code toString()} method lists all the values. @param statistics statistics @return a snapshot of the current values.
833 Create a new {@link IOStatisticsSnapshot} instance. @param source optional source statistics @return an IOStatisticsSnapshot. @throws ClassCastException if the {@code source} is not null and not an IOStatistics instance
834 Build a list from a RemoteIterator. @param source source iterator @param <T> type @return a list of the values. @throws IOException if the source RemoteIterator raises it.
835 Processes a {@link PathData} item, calling {@link #processPathArgument(PathData)} or {@link #processNonexistentPath(PathData)} on each item. @param item {@link PathData} item to process @throws IOException if anything goes wrong...
836 Get the current user's group list from Unix by running the command 'groups' NOTE. For non-existing user it will return EMPTY list. @param user get groups for this user @return the groups list that the <code>user</code> belongs to. The primary group is returned first. @throws IOException if encounter any error when running the command
837 Build and execute the resolution command. The command is executed in the directory specified by the system property "user.dir" if set; otherwise the current working directory is used. @param args a list of arguments @param commandScriptName input commandScriptName. @return null if the number of arguments is out of range, or the output of the command.
838 Returns the target of the given symlink. Returns the empty string if the given path does not refer to a symlink or there is an error accessing the symlink. @param f File representing the symbolic link. @return The target of the symbolic link, empty string on error or if not a symlink.
839 Use the command chmod to set permission.
840 Calls shell to get users for a netgroup by calling getent netgroup, this is a low level function that just returns string that @param netgroup get users for this netgroup @return string of users for a given netgroup in getent netgroups format @throws IOException raised on errors performing I/O.
841 Create a copy of the given credentials. @param credentials to copy
842 Add the given Credentials to this user. @param credentials of tokens and secrets
843 Get the path to a local file @return File representing the local path @throws IllegalArgumentException if this.fs is not the LocalFileSystem
844 Create the directory or check permissions if it already exists. The semantics of mkdirsWithExistsAndPermissionCheck method is different from the mkdirs method provided in the Sun's java.io.File class in the following way: While creating the non-existent parent directories, this method checks for the existence of those directories if the mkdir fails at any point (since that directory might have just been created by some other process). If both mkdir() and the exists() check fails for any seemingly non-existent directory, then we signal an error; Sun's mkdir would signal an error (return false) if a directory it is attempting to create already exists or the mkdir fails. @param localFS local filesystem @param dir directory to be created or checked @param expected expected permission @throws IOException
845 Calls out to platform's native stat(1) implementation to get file metadata (permissions, user, group, atime, mtime, etc). This works around the lack of lstat(2) in Java 6. Currently, the {@link Stat} class used to do this only supports Linux and FreeBSD, so the old {@link #deprecatedGetFileLinkStatusInternal(Path)} implementation (deprecated) remains further OS support is added. @param f File to stat @param dereference whether to dereference symlinks @return FileStatus of f @throws IOException
846 Return path of the enclosing root for a given path The enclosing root path is a common ancestor that should be used for temp and staging dirs as well as within encryption zones and other restricted directories. Call makeQualified on the param path to ensure its part of the correct filesystem @param path file path to find the enclosing root path for @return a path to the enclosing root @throws IOException early checks like failure to resolve path cause IO failures
847 Delete all the paths that were marked as delete-on-exit.
848 Does the file exist? Note: Avoid using this method if you already have FileStatus in hand. Instead reuse the FileStatus @param f the file or dir to be checked @throws AccessControlException If access is denied @throws IOException If an I/O error occurred @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server @return if f exists true, not false.
849 Set the working directory for wd-relative names (such a "foo/bar"). Working directory feature is provided by simply prefixing relative names with the working dir. Note this is different from Unix where the wd is actually set to the inode. Hence setWorkingDir does not follow symlinks etc. This works better in a distributed environment that has multiple independent roots. {@link #getWorkingDirectory()} should return what setWorkingDir() set. @param newWDir new working directory @throws IOException <br> NewWdir can be one of: <ul> <li>relative path: "foo/bar";</li> <li>absolute without scheme: "/foo/bar"</li> <li>fully qualified with scheme: "xx://auth/foo/bar"</li> </ul> <br> Illegal WDs: <ul> <li>relative with scheme: "xx:foo/bar"</li> <li>non existent directory</li> </ul>
850 Check if copying srcName to dst would overwrite an existing file or directory. @param srcName File or directory to be copied. @param dst Destination to copy srcName to. @param overwrite Whether it's ok to overwrite an existing file. @throws AccessControlException If access is denied. @throws IOException If dst is an existing directory, or dst is an existing file and the overwrite option is not passed.
851 Return the {@link ContentSummary} of path f. @param f path @return the {@link ContentSummary} of path f. @throws AccessControlException If access is denied @throws FileNotFoundException If <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>f</code> is not supported @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
852 Get delegation tokens for the file systems accessed for a given path. @param p Path for which delegations tokens are requested. @param renewer the account name that is allowed to renew the token. @return List of delegation tokens. @throws IOException If an I/O error occurred.
853 Set an xattr of a file or directory. The name must be prefixed with the namespace followed by ".". For example, "user.attr". <p> Refer to the HDFS extended attributes user documentation for details. @param path Path to modify @param name xattr name. @param value xattr value. @throws IOException If an I/O error occurred.
854 Create a snapshot with a default name. @param path The directory where snapshots will be taken. @return the snapshot path. @throws IOException If an I/O error occurred <p>Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
855 Construct from a {@link FileContext}. @param fc FileContext @param p path. @throws IOException failure
856 Wait for all files in waitList to have length equal to newLength.
857 Walk through all regex mount points to see whether the path match any regex expressions. E.g. link: ^/user/(?&lt;username&gt;\\w+) =&gt; s3://$user.apache.com/_${user} srcPath: is /user/hadoop/dir1 resolveLastComponent: true then return value is s3://hadoop.apache.com/_hadoop @param srcPath srcPath. @param resolveLastComponent resolveLastComponent. @return ResolveResult.
858 We search through all the configured dirs for the file's existence and return true when we find. @param pathStr the requested file (this will be searched) @param conf the Configuration object @return true if files exist. false otherwise
859 this method returns the path inside the har filesystem. this is relative path inside the har filesystem. @param path the fully qualified path in the har filesystem. @return relative path in the filesystem.
860 Return the name of the checksum file associated with a file. @param file the file path. @return the checksum file associated with a file.
861 Test if the parent directory exists @return boolean indicating parent exists @throws IOException upon unexpected error
862 This version of the mkdirs method assumes that the permission is absolute. It has been added to support the FileContext that processes the permission with umask before calling this method. This a temporary method added to support the transition from FileSystem to FileContext for user applications. @param f the path. @param absolutePermission permission. @param createParent create parent. @throws IOException IO failure.
863 Renames Path src to Path dst <ul> <li>Fails if src is a file and dst is a directory.</li> <li>Fails if src is a directory and dst is a file.</li> <li>Fails if the parent of dst does not exist or is a file.</li> </ul> <p> If OVERWRITE option is not passed as an argument, rename fails if the dst already exists. </p> <p> If OVERWRITE option is passed as an argument, rename overwrites the dst if it is a file or an empty directory. Rename fails if dst is a non-empty directory. </p> Note that atomicity of rename is dependent on the file system implementation. Please refer to the file system documentation for details. This default implementation is non atomic. <p> This method is deprecated since it is a temporary method added to support the transition from FileSystem to FileContext for user applications. </p> @param src path to be renamed @param dst new path after rename @param options rename options. @throws FileNotFoundException src path does not exist, or the parent path of dst does not exist. @throws FileAlreadyExistsException dest path exists and is a file @throws ParentNotDirectoryException if the parent path of dest is not a directory @throws IOException on failure
864 Return the name of the checksum file associated with a file. @param file the file path. @return name of the checksum file associated with a file.
865 Check if a given path is the base path or under the base path. @param p path to check. @param basePath base path. @return true if the given path is the base path or under the base path.
866 Returns true if and only if this path represents the root of a file system. @return true if and only if this path represents the root of a file system
867 Adds a suffix to the final name in the path. @param suffix the suffix to add @return a new path with the suffix added
868 Return a fully-qualified version of the given symlink target if it has no scheme and authority. Partially and fully-qualified paths are returned unmodified. @param pathURI URI of the filesystem of pathWithLink @param pathWithLink Path that contains the symlink @param target The symlink's absolute target @return Fully qualified version of the target.
869 The specification of this method matches that of {@link FileContext#rename(Path, Path, Options.Rename...)} except that Path f must be for this file system. @param src src. @param dst dst. @param overwrite overwrite flag. @throws AccessControlException access control exception. @throws FileAlreadyExistsException file already exists exception. @throws FileNotFoundException file not found exception. @throws ParentNotDirectoryException parent not directory exception. @throws UnresolvedLinkException unresolved link exception. @throws IOException raised on errors performing I/O.
870 Constructor for file systems on which symbolic links are not supported @param length length. @param isdir isdir. @param block_replication block replication. @param blocksize block size. @param modification_time modification time. @param access_time access_time. @param permission permission. @param owner owner. @param group group. @param path the path.
871 Copy constructor. @param other FileStatus to copy @throws IOException raised on errors performing I/O.
872 Constructor @param stat a file status @param locations a file's block locations
873 Constructor @param length a file's length @param isdir if the path is a directory @param block_replication the file's replication factor @param blocksize a file's block size @param modification_time a file's modification time @param access_time a file's access time @param permission a file's permission @param owner a file's owner @param group a file's group @param symlink symlink if the path is a symbolic link @param path the path's qualified name @param locations a file's block locations
874 Append a value to the file. @param value value. @throws IOException raised on errors performing I/O.
875 Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> and generate a checksum for each data chunk. <p> This method stores bytes from the given array into this stream's buffer before it gets checksumed. The buffer gets checksumed and flushed to the underlying output stream when all data in a checksum chunk are in the buffer. If the buffer is empty and requested length is at least as large as the size of next checksum chunk size, this method will checksum and write the chunk directly to the underlying output stream. Thus it avoids unnecessary data copy. @param b the data. @param off the start offset in the data. @param len the number of bytes to write. @exception IOException if an I/O error occurs.
876 Overriden to close the stream.
877 Seek to the end of the scanner. The entry returned by the previous entry() call will be invalid. @throws IOException raised on errors performing I/O.
878 Close the scanner. Release all resources. The behavior of using the scanner after calling close is not defined. The entry returned by the previous entry() call will be invalid.
879 Convenience method for reading a token storage file and loading its Tokens. @param filename filename. @param conf configuration. @throws IOException raised on errors performing I/O. @return Token.
880 Advance cursor in block until we find a key that is greater than or equal to the input key. @param key Key to compare. @param greater advance until we find a key greater than the input key. @return true if we find a equal key. @throws IOException
881 Requests an immediate publish of all metrics from sources to sinks.
882 Initialize the metrics for JMX with protocol methods @param protocol the protocol class
883 Collects states maintained in {@link ThreadLocal}, if any.
884 Add sample to a stat metric by name. @param name of the metric @param value of the snapshot to add
885 Add token stats to the owner to token count mapping. @param id token id.
886 Remove token stats to the owner to token count mapping. @param id
887 @return an {@link HAServiceTarget} for the current active node in the cluster, or null if no node is active. @throws IOException if a ZK-related issue occurs @throws InterruptedException if thread is interrupted
888 Create a new ActiveStandbyElector object <br> The elector is created by providing to it the Zookeeper configuration, the parent znode under which to create the znode and a reference to the callback interface. <br> The parent znode name must be the same for all service instances and different across services. <br> After the leader has been lost, a new leader will be elected after the session timeout expires. Hence, the app must set this parameter based on its needs for failure response time. The session timeout must be greater than the Zookeeper disconnect timeout and is recommended to be 3X that value to enable Zookeeper to retry transient disconnections. Setting a very short session timeout may result in frequent transitions between active and standby states during issues like network outages/GS pauses. @param zookeeperHostPorts ZooKeeper hostPort for all ZooKeeper servers @param zookeeperSessionTimeout ZooKeeper session timeout @param parentZnodeName znode under which to create the lock @param acl ZooKeeper ACL's @param authInfo a list of authentication credentials to add to the ZK connection @param app reference to callback interface object @param failFast whether need to add the retry when establishing ZK connection. @param maxRetryNum max Retry Num @param truststoreKeystore truststore keystore, that we will use for ZK if SSL/TLS is enabled @throws IOException raised on errors performing I/O. @throws HadoopIllegalArgumentException if valid data is not supplied. @throws KeeperException other zookeeper operation errors.
889 Create an InetSocketAddress from the given target string and default port. If the string cannot be parsed correctly, the <code>configName</code> parameter is used as part of the exception message, allowing the user to better diagnose the misconfiguration. @param target a string of either "host" or "host:port" @param defaultPort the default port if <code>target</code> does not include a port number @param configName the name of the configuration from which <code>target</code> was loaded. This is used in the exception message in the case that parsing fails. @param useCacheIfPresent Whether use cache when create URI @return socket addr
890 Returns InetSocketAddress that a client can use to connect to the server. Server.getListenerAddress() is not correct when the server binds to "0.0.0.0". This returns "hostname:port" of the server, or "127.0.0.1:port" when the getListenerAddress() returns "0.0.0.0:port". @param server server. @return socket address that a client can use to connect to the server.
891 Make a call, passing <code>rpcRequest</code>, to the IPC server defined by <code>remoteId</code>, returning the rpc respond. @param rpcKind - input rpcKind. @param rpcRequest - contains serialized method and method parameters @param remoteId - the target rpc server @param fallbackToSimpleAuth - set to true or false during this method to indicate if a secure client falls back to simple auth @return the rpc response Throws exceptions if there are network problems or if the remote code threw an exception. @throws IOException raised on errors performing I/O.
892 Static method that provides null check for retryCache. @param cache input Cache. @param clientId client id of this request @param callId client call id of this request @return CacheEntry.
893 Static method that provides null check for retryCache. @param cache input cache. @param payload input payload. @param clientId client id of this request @param callId client call id of this request @return CacheEntryWithPayload.
894 Gets a named expression from the factory.
895 Get a comparator for a {@link WritableComparable} implementation. @param c class. @param conf configuration. @return WritableComparator.
896 Construct for a {@link WritableComparable} implementation. @param keyClass WritableComparable Class.
897 Create an allocator object. @param contextCfgItemName contextCfgItemName.
898 Sets all deprecated properties that are not currently set but have a corresponding new property that is set. Useful for iterating the properties when all deprecated properties for currently set properties need to be present.
899 A new configuration with the same settings cloned from another. @param other the configuration from which to clone settings.
900 Add a configuration resource. The properties of this resource will override properties of previously added resources, unless they were marked <a href="#Final">final</a>. @param conf Configuration object from which to load properties
901 Returns alternative names (non-deprecated keys or previously-set deprecated keys) for a given non-deprecated key. If the given key is deprecated, return null. @param name property name. @return alternative names.
902 Gets information about why a property was set. Typically this is the path to the resource objects (file, URL, etc.) the property came from, but it can also indicate that it was set programmatically, or because of the command line. @param name - The property name to get the source of. @return null - If the property or its source wasn't found. Otherwise, returns a list of the sources of the resource. The older sources are the first ones in the list. So for example if a configuration is set from the command line, and then written out to a file that is read back in the first entry would indicate that it was set from the command line, while the second one would indicate the file that the new configuration was read in from.
903 Return the number of keys in the configuration. @return number of keys in the configuration.
904 Clears all keys from the configuration.
905 Get an {@link Iterator} to go through the list of <code>String</code> key-value pairs in the configuration. @return an iterator over the entries.
906 get keys matching the the regex. @param regex the regex to match against. @return {@literal Map<String,String>} with matching keys
907 Vectored read. If the file has no checksums: delegate to the underlying stream. If the file is checksummed: calculate the checksum ranges as well as the data ranges, read both, and validate the checksums as well as returning the data. @param ranges the byte ranges to read @param allocate the function to allocate ByteBuffer @throws IOException
908 Gets the block having the given {@code blockNumber}. @throws IllegalArgumentException if blockNumber is negative.
909 Wait for all files in waitList to have replication number equal to rep.
910 Return an array containing hostnames, offset and size of portions of the given file. For a nonexistent file or regions, {@code null} is returned. This call is most helpful with location-aware distributed filesystems, where it returns hostnames of machines that contain the given file. A FileSystem will normally return the equivalent result of passing the {@code FileStatus} of the path to {@link #getFileBlockLocations(FileStatus, long, long)} @param p path is used to identify an FS since an FS could have another FS that it could be delegating the call to @param start offset into the given file @param len length for which to get locations for @throws FileNotFoundException when the path does not exist @throws IOException IO failure @return block location array.
911 Fetch the duration timing summary from an IOStatistics source. If the duration key is unknown, the summary will be incomplete. @param source source of data @param key duration statistic key @return a summary of the statistics.
912 Create a new {@link IOStatisticsSnapshot} instance. @return an empty IOStatisticsSnapshot.
913 Extract the IOStatistics from an object in a serializable form. @param source source object, may be null/not a statistics source/instance @return {@link IOStatisticsSnapshot} or null if the object is null/doesn't have statistics
914 Build an array from a RemoteIterator. @param source source iterator @param a destination array; if too small a new array of the same type is created @param <T> type @return an array of the values. @throws IOException if the source RemoteIterator raises it.
915 Renew a delegation token. @param token the token to renew @param renewer the full principal name of the user doing the renewal @return the new expiration time @throws InvalidToken if the token is invalid @throws AccessControlException if the user can't renew token
916 Cancel a token by removing it from cache. @param token token. @param canceller canceller. @return Identifier of the canceled token @throws InvalidToken for invalid token @throws AccessControlException if the user isn't allowed to cancel
917 Processes the command's list of expanded arguments. {@link #processArgument(PathData)} will be invoked with each item in the list. The loop catches IOExceptions, increments the error count, and displays the exception. @param args a list of {@link PathData} to process @throws IOException if anything goes wrong...
918 Returns list of groups for a user @param userName get groups for this user @return list of groups for a given user
919 Retrieves the number of links to the specified file. @param fileName file name. @throws IOException raised on errors performing I/O. @return link count.
920 Create a soft link between a src and destination only on a local disk. HDFS does not support this. On Windows, when symlink creation fails due to security setting, we will log a warning. The return code in this case is 2. @param target the target for symlink @param linkname the symlink @return 0 on success @throws IOException raised on errors performing I/O.
921 Change the permissions on a file / directory, recursively, if needed. @param filename name of the file whose permissions are to change @param perm permission string @param recursive true, if permissions should be changed recursively @return the exit code from the command. @throws IOException raised on errors performing I/O.
922 Look for <code>setsid</code>. @return true if <code>setsid</code> was present
923 Set the ownership on a file / directory. User name and group name cannot both be null. @param file the file to change @param username the new user owner name @param groupname the new group owner name @throws IOException raised on errors performing I/O.
924 Gets users for a netgroup @param netgroup return users for this netgroup @return list of users for a given netgroup @throws IOException raised on errors performing I/O.
925 Obtain the tokens in credentials form associated with this user. @return Credentials of tokens associated with this user
926 Filter files/directories in the given path using the user-supplied path filter. @param f is the path name @param filter is the user-supplied path filter @return an array of FileStatus objects for the files under the given path after applying the filter @throws AccessControlException If access is denied @throws FileNotFoundException If <code>f</code> does not exist @throws UnsupportedFileSystemException If file system for <code>pathPattern</code> is not supported @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
927 Filter files/directories in the given list of paths using user-supplied path filter. @param files is a list of paths @param filter is the filter @return a list of statuses for the files under the given paths after applying the filter @throws AccessControlException If access is denied @throws FileNotFoundException If a file in <code>files</code> does not exist @throws IOException If an I/O error occurred Exceptions applicable to file systems accessed over RPC: @throws RpcClientException If an exception occurred in the RPC client @throws RpcServerException If an exception occurred in the RPC server @throws UnexpectedServerException If server implementation throws undeclared exception to RPC server
928 Resolve the pathname p relative to root InodeDir. @param p - input path @param resolveLastComponent resolveLastComponent. @return ResolveResult which allows further resolution of the remaining path @throws IOException raised on errors performing I/O.
929 Set replication for an existing file. Implement the abstract <tt>setReplication</tt> of <tt>FileSystem</tt> @param src file name @param replication new replication @throws IOException if an I/O error occurs. @return true if successful; false if file does not exist or is a directory
930 Implement the delete(Path, boolean) in checksum file system.
931 Rename files/dirs
932 Implement the delete(Path, boolean) in checksum file system.
933 Returns true if the target is an ancestor of the source.
934 @param path @return return full path including the chroot
935 Strip out the root from the path. @param p - fully qualified path p @return - the remaining path without the beginning /
936 Strip out the root from the path. @param p - fully qualified path p @return - the remaining path without the beginning / @throws IOException if the p is not prefixed with root
937 Performs the operation specified by the next function, calling it repeatedly until all symlinks in the given path are resolved. @param fc FileContext used to access file systems. @param path The path to resolve symlinks on. @return Generic type determined by the implementation of next. @throws IOException raised on errors performing I/O.
938 The specification of this method matches that of {@link FileContext#rename(Path, Path, Options.Rename...)} except that Path f must be for this file system. @param src src. @param dst dst. @param options options. @throws AccessControlException access control exception. @throws FileAlreadyExistsException file already exists exception. @throws FileNotFoundException file not found exception. @throws ParentNotDirectoryException parent not directory exception. @throws UnresolvedLinkException unresolved link exception. @throws IOException raised on errors performing I/O.
939 Combine the status stored in the index and the underlying status. @param h status stored in the index @return the combined file status @throws IOException raised on errors performing I/O.
940 Convert the file information in FTPFile to a {@link FileStatus} object. * @param ftpFile @param parentPath @return FileStatus
941 Verify that tokenFile contains valid Credentials. If not, an exception is raised, or, if {@link #nofail} is set, an error will be logged and the method return false.
942 Print out a Credentials file from the local filesystem. @param tokenFile a local File object. @param alias print only tokens matching alias (null matches all). @param conf Configuration object passed along. @param out print to this stream. @throws IOException raised on errors performing I/O.
943 This method synchronizes the state of a delegation token information in local cache with its actual value in Zookeeper. @param ident Identifier of the token
944 Construct the metrics system @param prefix for the system
945 This implementation is same as ProtobufRpcEngine2.Server.ProtobufInvoker#call(..) except this implementation uses non-shaded protobuf classes from legacy protobuf version (default 2.5.0).
946 Add a rate sample for a rate metric @param name of the rate metric @param elapsed time
947 This method is intended to be used for recovering persisted delegation tokens. Tokens that have an unknown <code>DelegationKey</code> are marked as expired and automatically cleaned up. This method must be called before this secret manager is activated (before startThreads() is called) @param identifier identifier read from persistent storage @param renewDate token renew time @throws IOException raised on errors performing I/O.
948 This method syncs token information from currentTokens to tokenOwnerStats. It is used when the currentTokens is initialized or refreshed. This is called from a single thread thus no synchronization is needed.
949 Remove expired delegation tokens from cache
950 Create a new ActiveStandbyElector object <br> The elector is created by providing to it the Zookeeper configuration, the parent znode under which to create the znode and a reference to the callback interface. <br> The parent znode name must be the same for all service instances and different across services. <br> After the leader has been lost, a new leader will be elected after the session timeout expires. Hence, the app must set this parameter based on its needs for failure response time. The session timeout must be greater than the Zookeeper disconnect timeout and is recommended to be 3X that value to enable Zookeeper to retry transient disconnections. Setting a very short session timeout may result in frequent transitions between active and standby states during issues like network outages/GS pauses. @param zookeeperHostPorts ZooKeeper hostPort for all ZooKeeper servers @param zookeeperSessionTimeout ZooKeeper session timeout @param parentZnodeName znode under which to create the lock @param acl ZooKeeper ACL's @param authInfo a list of authentication credentials to add to the ZK connection @param app reference to callback interface object @param maxRetryNum maxRetryNum. @param truststoreKeystore truststore keystore, that we will use for ZK if SSL/TLS is enabled @throws IOException raised on errors performing I/O. @throws HadoopIllegalArgumentException if valid data is not supplied. @throws KeeperException other zookeeper operation errors.
951 To participate in election, the app will call joinElection. The result will be notified by a callback on either the becomeActive or becomeStandby app interfaces. <br> After this the elector will automatically monitor the leader status and perform re-election if necessary<br> The app could potentially start off in standby mode and ignore the becomeStandby call. @param data to be set by the app. non-null data must be set. @throws HadoopIllegalArgumentException if valid data is not supplied
952 Create an InetSocketAddress from the given target string and default port. If the string cannot be parsed correctly, the <code>configName</code> parameter is used as part of the exception message, allowing the user to better diagnose the misconfiguration. @param target a string of either "host" or "host:port" @param defaultPort the default port if <code>target</code> does not include a port number @param configName the name of the configuration from which <code>target</code> was loaded. This is used in the exception message in the case that parsing fails. @return socket addr.
953 This is the client side invoker of RPC method. It only throws ServiceException, since the invocation proxy expects only ServiceException to be thrown by the method in case protobuf service. ServiceException has the following causes: <ol> <li>Exceptions encountered on the client side in this method are set as cause in ServiceException as is.</li> <li>Exceptions from the server are wrapped in RemoteException and are set as cause in ServiceException</li> </ol> Note that the client calling protobuf RPC methods, must handle ServiceException by getting the cause from the ServiceException. If the cause is RemoteException, then unwrap it to get the exception thrown by the server.
954 This is the client side invoker of RPC method. It only throws ServiceException, since the invocation proxy expects only ServiceException to be thrown by the method in case protobuf service. ServiceException has the following causes: <ol> <li>Exceptions encountered on the client side in this method are set as cause in ServiceException as is.</li> <li>Exceptions from the server are wrapped in RemoteException and are set as cause in ServiceException</li> </ol> Note that the client calling protobuf RPC methods, must handle ServiceException by getting the cause from the ServiceException. If the cause is RemoteException, then unwrap it to get the exception thrown by the server.
955 Parse a list of arguments to to extract the {@link Expression} elements. The input Deque will be modified to remove the used elements. @param args arguments to be parsed @return list of {@link Expression} elements applicable to this command @throws IOException if list can not be parsed
956 For backwards compatibility. @param c WritableComparable Type. @return WritableComparator.
957 Authenticates a request looking for the <code>delegation</code> query-string parameter and verifying it is a valid token. If there is not <code>delegation</code> query-string parameter, it delegates the authentication to the {@link KerberosAuthenticationHandler} unless it is disabled. @param request the HTTP client request. @param response the HTTP client response. @return the authentication token for the authenticated request. @throws IOException thrown if an IO error occurred. @throws AuthenticationException thrown if the authentication failed.
958 Checks for the presence of the property <code>name</code> in the deprecation map. Returns the first of the list of new keys if present in the deprecation map or the <code>name</code> itself. If the property is not presently set but the property map contains an entry for the deprecated key, the value of the deprecated key is set as the value for the provided property name. Also updates properties and overlays with deprecated keys, if the new key does not already exist. @param deprecations deprecation context @param name the property name @return the first property in the list of properties mapping the <code>name</code> or the <code>name</code> itself.
959 Set the environment of the subprocess to be the Configuration, with '.'s replaced by '_'s.
