1 Retrieves an enum constant by name if present. @param enumClass the enum class to search within @param value the name of the enum constant @return Optional containing the enum constant or absent if not found
2 Searches for an element in the given iterable that matches the predicate. @param iterable the iterable to search through @param predicate the condition to match elements against @return Optional containing the first matching element or absent if none found
3 Checks if any element matches the given predicate. @param predicate condition to evaluate each element against @return true if at least one element matches, false otherwise
4 Creates a precomputed positive CharMatcher based on character count and BitSet. @param totalCharacters number of characters to match @param table BitSet representing the set of characters to match @param description descriptive string for the matcher @return CharMatcher instance configured with specified parameters
5 Propagates the given throwable if it's an instance of either specified type. @param throwable the throwable to check and possibly rethrow @param declaredType1 first type to check against @param declaredType2 second type to check against @throws X1 if throwable is an instance of declaredType1 @throws X2 if throwable is an instance of declaredType2
6 Rethrows the given throwable as a RuntimeException. @param e the throwable to rethrow @throws IOException if the original throwable is an instance of IOException
7 Rethrows the given throwable as a specific exception type. @param e the throwable to rethrow @param declaredType the specific exception type to check against @throws IOException if the throwable is an instance of IOException @throws X if the throwable is an instance of the specified declared type
8 Closes all registered Closeable resources in LIFO order. Handles exceptions during closing and suppresses them if necessary.
9 Creates a new thread with a specified name and runnable task. @param name the name to assign to the thread @param runnable the task for the thread to execute @return the newly created Thread object
10 Filters a SetMultimap by keys using a given predicate. @param unfiltered the original multimap to filter @param keyPredicate condition for keys to be included @return a new FilteredKeySetMultimap with filtered keys
11 Filters entries in a SetMultimap based on a predicate. @param unfiltered the original multimap to filter @param entryPredicate the condition each entry must satisfy @return a new SetMultimap with filtered entries
12 Retrieves a declared annotation of the specified type. @param annotationType the annotation class to look for @return the annotation if found, or null if not present
13 Merges multiple sorted iterators into a single unmodifiable iterator. @param iterators collection of sorted iterators to merge @param comparator comparator for sorting elements @return UnmodifiableIterator containing merged elements
14 Converts an iterable to an array. @param iterable source iterable @return Object array containing elements from the iterable
15 Replaces all values associated with a key. @param key the key to replace values for @param values new values to be set @return list of old values or empty if key not found
16 Removes all values associated with a given key. @param key the key whose values are to be removed @return list of removed values or empty if key not found
17 Creates a new CopyOnWriteArrayList from an Iterable. @param elements source of elements to add to the list @return populated CopyOnWriteArrayList instance
18 Creates a new CopyOnWriteArraySet from an Iterable. @param elements source of elements to add to the set @return populated CopyOnWriteArraySet instance
19 Performs a binary search on a sorted list. @param list the sorted list to search @param key the element to find @param comparator the comparator for element comparison @param presentBehavior behavior when key is found @param absentBehavior behavior when key is not found @return index of the key or result from absentBehavior
20 Retrieves multiple striped resources by keys. @param keys iterable of keys to fetch resources for @return immutable list of resources or empty if none found
21 Generates a string representation of the network. @return A formatted string detailing network properties and structure
22 Generates string representation of the graph. @return String summarizing graph's properties and structure
23 Transforms entries of a navigable map using a specified transformer. @param fromMap the source navigable map to transform @param transformer the transformation function for entries @return a new NavigableMap with transformed values
24 Transforms values of a sorted map using a provided function. @param fromMap source sorted map to transform @param function function to apply to each value @return new SortedMap with transformed values
25 Adds a specified number of occurrences of an element to the multiset. @param element the element to add @param occurrences the number of times to add the element @return the count of the element before adding
26 Adds specified number of occurrences of an element. @param element the element to add @param occurrences the number of times to add the element @return count of the element before adding
27 Transforms values of a ListMultimap using a specified function. @param fromMultimap original multimap to transform @param function function to apply to each value @return new ListMultimap with transformed values
28 Adds all elements from the specified collection to this multiset. @param elementsToAdd the collection of elements to add @return true if any element was added, false otherwise
29 Adds all elements from the specified collection to this multiset. Delegates the operation to `Multisets.addAllImpl`. @param elementsToAdd collection of elements to add @return true if any element was added, false otherwise
30 Wraps a Multimap in a synchronized version. @param multimap the underlying Multimap to be wrapped @return synchronized Multimap instance
31 Returns a synchronized view of the specified table. @param table the original table to be wrapped @return a synchronized Table instance
32 Escapes a string by converting special characters to Unicode sequences. @param string the input string to escape @return escaped string with Unicode sequences if needed
33 Converts a Readable source to a StringBuilder. @param r the source Readable @return StringBuilder containing the contents of the Readable @throws IOException if an I/O error occurs
34 Catches exceptions from a future and provides a fallback value. @param input future to monitor for exceptions @param exceptionType type of exception to catch @param fallback function to execute on caught exception @param executor for executing the fallback @return ListenableFuture with error handling
35 Cancels the task associated with this Future. @param mayInterruptIfRunning true if the thread executing this task should be interrupted; otherwise, leave it running @return true if the task was successfully cancelled, false if already completed or cancelled
36 Sets the result of the computation. @param value the computed value to set @return true if successful, false if already set
37 Sets an exception for the future. @param throwable the Throwable to set @return true if exception was successfully set, false otherwise
38 Sets the future for this AbstractFuture. @param future the ListenableFuture to set @return true if the future was successfully set, false otherwise
39 Transforms a future's result using a specified function. @param input the original future to transform @param function the transformation function to apply @param executor the executor for asynchronous execution @return ListenableFuture representing the transformed outcome
40 Atomically increments the value associated with a key by one. @param key the key to update @return updated value after increment
41 Decrements the value associated with a key by 1 atomically. @param key the key to update @return updated value after decrement
42 Atomically increments the value associated with a key by one. @param key the key whose associated value is to be incremented @return the old value before increment
43 Atomically decrements the value associated with a key. @param key the key whose value is to be decremented @return the old value before decrementing
44 Creates an AtomicLongMap initialized with entries from the specified map. @param m the map whose entries are to be added @return a new AtomicLongMap object containing the entries of the specified map
45 Initializes a new graph builder with specified directionality. @param directed true if the graph is directed, false otherwise
46 Initializes a new NetworkBuilder instance. @param directed true if the network is directed, false otherwise
47 Initializes the graph builder with specified directionality. @param directed true if the graph is directed, false otherwise
48 Adds a listener with an associated executor to the service. @param listener the listener to add @param executor the executor for processing events
49 Converts an object from type A to B using the convert method. @param a non-nullable object of type A @return converted object of type B
50 Creates and returns a new instance of CompactHashMap. @return A new CompactHashMap with default size
51 Creates a CompactHashMap with the specified expected size. @param expectedSize estimated number of entries to store @return a new CompactHashMap instance
52 Creates a new instance of CompactHashSet with default size. @return an empty CompactHashSet ready for use
53 Creates a CompactHashSet with an initial capacity. @param expectedSize estimated number of elements to store @return CompactHashSet instance
54 Creates a new ListMultimap from a given map and list factory. @param map initial map to use; must be empty @param factory supplier for creating new lists to store values @return ListMultimap instance wrapping the provided map and factory
55 Creates a SetMultimap from a backing map and value set supplier. @param map initial backing map (must be empty) @param factory supplier for creating sets of values @return SetMultimap instance
56 Constructs a new Builder instance with an empty LinkedHashMultiset. Initializes to maintain insertion order of elements.
57 Composes this converter with another to form a chain. @param secondConverter converter from type B to C @return composed Converter from A to C
58 Appends elements from an array to a StringBuilder. @param builder destination for appending @param parts array of objects to join @return the original StringBuilder with appended elements
59 Joins elements from an iterable into a single string. Uses optimized array handling for lists; otherwise, delegates to iterator method. @param parts iterable of objects to join @return concatenated string of elements
60 Creates a MapMakerInternalMap with specified key and value strengths. @param builder configuration for map strength settings @return MapMakerInternalMap instance based on strength configurations
61 Creates a MapMakerInternalMap with dummy values. @param builder configuration for map settings @return MapMakerInternalMap instance based on key and value strength
62 Concatenates multiple iterables into a single FluentIterable. @param inputs varargs of iterables to concatenate @return FluentIterable containing all elements from the input iterables
63 Retrieves an element from the delegate iterable at the specified position. @param position index of the element to retrieve @return element at the given position @throws IndexOutOfBoundsException if position is out of bounds
64 Acquires a single permit with rate limiting. @return wait time in seconds
65 Attempts to acquire a lock with a specified timeout. @param time the maximum time to wait for the lock @return true if the lock was acquired, false otherwise
66 Attempts to acquire a lock and check condition satisfaction. @param guard the condition guard to evaluate @param time the maximum time to wait for the lock @param unit the time unit of the timeout @return true if lock is acquired and condition is satisfied, false otherwise
67 Converts cache specification to a CacheBuilder instance with lenient parsing. @param spec cache configuration specification @return configured CacheBuilder object
68 Creates a strong interner instance. @return Interner configured to use strong references
69 Creates a weak interner. Uses WeakReferences to manage interned objects. @return Interner that uses weak references for garbage collection
70 Sets a value at the specified row and column keys. @param rowKey unique identifier for the row @param columnKey unique identifier for the column @param value new value to set (can be null) @return old value at the specified position or null if not present
71 Removes the value at the specified row and column keys. @param rowKey key of the row to remove @param columnKey key of the column to remove @return old value at the specified position or null if not found
72 Checks equality with another ImmutableDoubleArray. @param object the object to compare with @return true if equal, false otherwise
73 Compares this array with another object for equality. @param object the object to compare with @return true if the arrays are equal, false otherwise
74 Checks equality with another ImmutableLongArray. @param object the object to compare with @return true if equal, false otherwise
75 Converts a string to the specified case format. @param format target case format @param s input string to convert @return converted string in the desired format
76 Finds the first matching character in a sequence. @param sequence the CharSequence to search within @return the index of the first match or -1 if no match is found
77 Constructs an iterator with a specified size starting at index 0. @param size total number of elements in the collection
78 Extracts Teredo tunneling information from an IPv6 address. @param ip the IPv6 address to analyze @return TeredoInfo object containing server, client IP, port, and flags
79 Checks if a byte array is well-formed UTF-8. @param bytes the byte array to check @return true if the byte array is valid UTF-8, false otherwise
80 Encodes a byte array into a string using the default encoding scheme. @param bytes the source byte array to encode @return the encoded string representation of the byte array
81 Reads exactly the specified number of bytes from an InputStream. @param in the input stream to read from @param b the destination byte array @param off the offset in the byte array to start writing @param len the number of bytes to read @throws IOException if an I/O error occurs or end of stream is reached prematurely
82 Reverses the entire boolean array. @param array the boolean array to reverse
83 Rotates a segment of a boolean array. @param array the boolean array to rotate @param distance number of positions to rotate @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
84 Reverses the entire byte array. @param array the byte array to reverse
85 Rotates a portion of the byte array by a specified distance. @param array the byte array to rotate @param distance the number of positions to rotate @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
86 Sorts a portion of the byte array in descending order. @param array the byte array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
87 Sorts a portion of the character array in descending order. @param array the character array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
88 Reverses the entire character array. @param array the character array to reverse
89 Rotates a portion of the character array. @param array the character array to rotate @param distance number of positions to rotate @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
90 Sorts a portion of a double array in descending order. @param array the array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
91 Reverses all elements in a double array. @param array the array to reverse
92 Rotates elements in a double array between specified indices. @param array the array to rotate @param distance number of positions to rotate @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
93 Sorts a portion of a float array in descending order. @param array the array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
94 Reverses all elements in a float array. @param array the array to reverse
95 Rotates elements in a float array between specified indices by a given distance. @param array the array to rotate @param distance the number of positions each element is shifted @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
96 Sorts a portion of an integer array in descending order. @param array the array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
97 Reverses elements in the given integer array. @param array the array to reverse
98 Rotates elements in an integer array between specified indices. @param array the array to rotate @param distance the number of positions to rotate by @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
99 Sorts a portion of a long array in descending order. @param array the array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
100 Reverses the elements of a long array. @param array the array to reverse
101 Rotates a specified range of a long array by a given distance. @param array the array to rotate @param distance the number of positions to rotate @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
102 Sorts a portion of a short array in descending order. @param array the array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
103 Reverses elements in a short array. @param array the array to reverse
104 Rotates elements in a short array between specified indexes. @param array the array to rotate @param distance the number of positions each element is shifted @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
105 Sorts an entire byte array as unsigned integers. @param array the byte array to sort
106 Sorts an entire byte array in descending order using unsigned interpretation. @param array the byte array to sort
107 Sorts an integer array in ascending order. @param array the array to sort
108 Sorts an integer array in descending order. @param array the array to sort
109 Sorts an unsigned long array. @param array the array to sort
110 Sorts an unsigned long array in descending order. @param array the array to be sorted
111 Creates a Splitter using a specific string as a delimiter. Throws IllegalArgumentException if the separator is empty. @param separator string to split on @return a new Splitter instance configured with the given separator
112 Sets key-value separator using a character. @param separator character to split on @return new MapSplitter configured with the specified separator
113 Starts the Finalizer thread for managing resource cleanup. @param finalizableReferenceClass class for finalizable references @param queue reference queue for processing @param frqReference phantom reference that started the finalization process
114 Returns a new Builder instance for constructing an ImmutableListMultimap. @return Builder object to build an immutable multimap
115 Returns a new Builder instance for constructing an ImmutableSetMultimap. @return Builder object to build an ImmutableSetMultimap
116 Returns an unmodifiable view of the specified multiset. @param multiset the multiset to wrap @return an unmodifiable Multiset instance
117 Creates an EvictingQueue with a specified maximum size. @param maxSize the maximum number of elements the queue can hold; must be non-negative @return a new EvictingQueue instance
118 Protected constructor to prevent instantiation.
119 Protected constructor to prevent instantiation.
120 Protected constructor to prevent instantiation.
121 Creates an unmodifiable view of the provided entry set. @param entrySet original collection of key-value entries @return UnmodifiableEntrySet object wrapping the original set
122 Returns an unmodifiable view of the specified navigable map. @param map the navigable map to wrap @return an unmodifiable NavigableMap object
123 Returns an unmodifiable view of the specified ListMultimap. @param delegate the underlying multimap to wrap @return an unmodifiable ListMultimap
124 Returns an unmodifiable view of the specified set multimap. @param delegate the underlying set multimap to wrap @return an unmodifiable SetMultimap instance
125 Creates an unmodifiable view of the specified `RowSortedTable`. @param table the original table to wrap @return a RowSortedTable that cannot be modified
126 Converts a standard Java Future to a ListenableFuture in a pool thread. @param future the standard Future instance to adapt @return ListenableFuture object for enhanced asynchronous handling
127 Adds a callback to a listenable future. @param future the ListenableFuture to attach the callback to @param callback the FutureCallback to execute upon completion @param executor the Executor to run the callback on
128 Initializes a LocalCache with specified configuration. @param builder CacheBuilder instance with cache settings @param loader optional CacheLoader for value loading
129 Creates a TreeMultiset with natural ordering for comparable elements. @return TreeMultiset instance using natural element comparison
130 Creates a TreeMultiset with an optional comparator. @param comparator custom comparator for element ordering; uses natural order if null @return TreeMultiset instance
131 Replaces all values associated with a key. @param key the key to replace values for @param values new values to associate with the key @return an unmodifiable view of the old values or an empty collection if none exist
132 Replaces values associated with a key. @param key the key to replace values for @param values new values to associate with the key @return an unmodifiable view of the old values or an empty collection if none exist
133 Removes all values associated with a specified key. @param key the key whose values are to be removed @return an unmodifiable view of the removed values or an empty collection if none exist
134 Creates a new HashMultiset with an estimated capacity. @param distinctElements expected number of unique elements @return HashMultiset instance initialized with the given capacity
135 Checks if the given network contains a cycle. @param network the network to check for cycles @return true if the network has at least one cycle, false otherwise
136 Creates a `LinkedHashMultiset` with specified initial capacity. @param distinctElements expected number of distinct elements @return new `LinkedHashMultiset` instance
137 Constructs a StandardNetwork using the provided builder. Initializes node and edge maps based on builder configurations. @param builder configuration for network properties
138 Constructs a StandardValueGraph with specified builder settings. @param builder configuration for graph properties
139 Creates a new HashSet with an optimal initial capacity. @return a new HashSet configured for the expected number of values per key
140 Creates a LinkedHashSet with an initial capacity optimized for value set size. @return a LinkedHashSet instance for storing values
141 Adds a cell to the table with specified row key, column key, and value. @param rowKey the row identifier for the cell @param columnKey the column identifier for the cell @param value the data stored in the cell @return this Builder instance for method chaining
142 Adds a key-value pair to the map builder. @param key the entry's key @param value the entry's value @return the Builder instance for method chaining
143 Adds a class type and its instance to the builder. @param key the Class type as the key @param value the instance of the class type @return the Builder instance for method chaining
144 Adds all entries from a map to the builder. @param map source map with class types as keys and corresponding instances as values @return the Builder instance for method chaining
145 Adds a key-value pair from an entry to the map builder. @param entry the entry containing the key and value @return the Builder instance for method chaining
146 Adds a key-value pair to the map builder. @param key the entry's key @param value the entry's value @return the Builder instance for method chaining
147 Adds a type-safe key-value pair to the builder. @param key the Class representing the entry's key @param value the instance of type T to be stored @return the Builder instance for method chaining
148 Adds a type-safe entry to the builder. @param key TypeToken representing the entry's key @param value instance corresponding to the key @return Builder instance for method chaining
149 Adds multiple key-value pairs from an iterable of entries. @param entries iterable containing entries to add @return this Builder instance for method chaining
150 Adds multiple key-value pairs from an iterable of entries. @param entries iterable containing entries to add @return this Builder instance for method chaining
151 Filters a navigable set based on a predicate. @param unfiltered the original navigable set to filter @param predicate condition for element inclusion @return a new NavigableSet containing only elements that satisfy the predicate
152 Builds an immutable sorted map. @return ImmutableSortedMap instance based on current entries and comparator
153 Adds a key-value entry to the builder. @param range the range of keys for the entry @param value the associated value @return this Builder instance
154 Adds a non-empty range to the builder. @param range the range to add @return the Builder instance for method chaining
155 Computes the intersection of two ranges. @param connectedRange the other range to intersect with @return Range representing the overlap or null if no intersection
156 Finds the gap between two non-overlapping ranges. @param otherRange the range to compare against @return Range object representing the gap or throws exception if ranges overlap
157 Returns the smallest range that encloses both this and another range. @param other the range to span with @return a new Range object representing the union of this and the other range
158 Returns the canonical form of the range within the specified domain. @param domain the discrete domain in which to find the canonical range @return Range object representing the canonical interval
159 Creates a new empty HashBiMap with default initial capacity. @return a new HashBiMap instance
160 Creates a new HashBiMap from an existing map. @param map the source map to populate the bi-map with initial entries @return a new HashBiMap instance containing all entries from the provided map
161 Returns a new instance of Builder with default initial capacity. @return Builder object for constructing ImmutableClassToInstanceMap
162 Creates an immutable class-to-instance map from a single type-value pair. @param type the class type of the instance @param value the instance to be mapped @return an ImmutableClassToInstanceMap containing the specified type-value pair
163 Returns the set of all values in the bi-map. Utilizes the inverse map to extract keys as values. @return ImmutableSet containing all values
164 Returns a reversed view of the given list. Handles ImmutableLists, ReverseLists, and other lists. @param list the original list to reverse @return a List representing the reversed view
165 Creates an immutable list from the specified array. @param elements the source array to copy elements from @return an ImmutableList containing the elements of the array
166 Creates an immutable list from the given array elements. @param elements source array of elements @param length number of elements to include in the list @return ImmutableList containing specified elements
167 Returns an immutable sublist from the specified range. @param fromIndex inclusive start index @param toIndex exclusive end index @return ImmutableList containing elements from fromIndex to toIndex-1
168 Creates an ImmutableRangeMap with a single range and corresponding value. @param range the range to map @param value the value associated with the range @return an ImmutableRangeMap containing the specified range-value pair
169 Creates an ImmutableRangeSet from a single range. @param range the Range object to include in the set @return ImmutableRangeSet containing the specified range or special cases
170 Creates an ImmutableSortedMap with a single key-value pair. @param comparator comparator for sorting keys @param k1 the key @param v1 the value associated with the key @return an ImmutableSortedMap containing the specified key-value pair
171 Creates an immutable set from an array. @param elements the array of elements to include in the set @return an ImmutableSet containing the specified elements
172 Returns a new Builder instance for creating ImmutableSet. @return Builder object initialized with zero capacity
173 Concatenates two iterators into one. @param a first iterator to concatenate @param b second iterator to concatenate @return combined Iterator containing elements from both input iterators in order
174 Concatenates three iterators into a single iterator. @param a first iterator @param b second iterator @param c third iterator @return Iterator containing all elements from input iterators in order
175 Concatenates four iterators into a single iterator. @param a first iterator @param b second iterator @param c third iterator @param d fourth iterator @return Iterator containing all elements from input iterators in order
176 Retrieves all subscribers for a given event type. @param event the event object to find subscribers for @return Iterator of Subscribers associated with the event's class hierarchy
177 Retrieves result from a ClosingFuture if completed. Ensures the future is being called and part of managed futures. @param closingFuture the future to retrieve the result from @return result of the ClosingFuture @throws ExecutionException if computation threw an exception
178 Checks if the segment contains a value equivalent to the given object. @param value the value to search for @return true if a matching value is found, false otherwise
179 Removes and returns the value associated with the specified key. Iterates through entries, delegates equality check to `Objects.equals`. @param key key of the entry to remove @return value of the removed entry or null if not found
180 Clears all entries in the map. Delegates to the underlying map's entry set iterator.
181 Checks if the map is empty. @return true if no entries are present, false otherwise
182 Computes the hash code based on the entries of the underlying map. @return computed hash code using the entries
183 Computes the difference between two maps using default object equality. @param left first map to compare @param right second map to compare @return MapDifference object detailing differences
184 Constructs an EventBus instance with default configuration.
185 Compares and swaps elements to maintain heap property. @param index current position of the element @param x element to be inserted @return new position of the element after comparison and swap
186 Fills a hole in the heap by moving elements down. @param index starting index of the hole @return final position of the filled hole
187 Checks if the set contains a specified element. @param object element to check for presence in the set @return true if the set contains the element, false otherwise
188 Removes the specified element from the set if present. @param object element to be removed @return true if the element was successfully removed, false otherwise
189 Returns a subset of elements within the specified range. Delegates to underlying unmodifiable sorted set. @param fromElement lower bound for the returned subset (inclusive) @param toElement upper bound for the returned subset (exclusive) @return SortedSet containing elements in the range [fromElement, toElement)
190 Returns a sorted set of row keys. Utilizes the rowMap's key set for efficient access. @return SortedSet containing all row keys
191 Removes all values associated with a given key. @param key the key whose values are to be removed @return a set of removed values or an empty set if no values were present
192 Creates a Bloom filter with specified parameters. @param funnel function to convert elements into bytes @param expectedInsertions expected number of insertions @param fpp desired false positive probability @return BloomFilter object configured with the given parameters
193 Rounds a double value to an integer using specified rounding mode. @param x the double value to round @param mode the RoundingMode to apply @return the rounded integer value @throws ArithmeticException if rounding is out of range or unnecessary
194 Rounds a double value to the nearest long using specified rounding mode. @param x the double value to round @param mode the RoundingMode to apply @return the rounded long value
195 Adds all elements from the iterator to the buffer, maintaining top K elements. @param elements iterator of elements to add
196 Creates a TopKSelector to find the least K elements using natural ordering. @param k number of least elements to track @return TopKSelector configured for least elements with natural ordering
197 Creates a TopKSelector to find the top K greatest elements using natural ordering. @param k number of top elements to track @return TopKSelector configured to select greatest elements naturally
198 Checks if an integer is prime. @param n the integer to check @return true if n is prime, false otherwise
199 Computes the binomial coefficient "n choose k". @param n total number of items @param k number of items to choose @return BigInteger representing the binomial coefficient
200 Computes statistics from an iterable of numbers. @param values collection of numeric data points @return Stats object containing computed metrics
201 Computes statistics from an iterator of numbers. @param values iterator of numbers to analyze @return Stats object containing computed metrics
202 Adds statistics from another PairedStatsAccumulator instance. @param values the PairedStatsAccumulator to add
203 Computes statistics from a DoubleStream. @param values stream of double values to analyze @return Stats object containing statistical metrics
204 Computes statistics for a stream of integers. @param values IntStream containing data points @return Stats object with computed metrics
205 Computes statistics from a stream of long values. @param values LongStream containing the data points @return Stats object with computed metrics
206 Adds all data points from a DoubleStream to the accumulator. @param values stream of double values to be added
207 Adds all integer values from a stream to the accumulator. @param values IntStream containing data points to be added
208 Adds all data points from a LongStream to the accumulator. @param values stream of long values to be added
209 Recursively selects elements from an array based on specified indices. @param allRequired array of required indices @param requiredFrom starting index in allRequired @param requiredTo ending index in allRequired @param array the array to select elements from @param from lower bound of search range @param to upper bound of search range
210 Creates an ImmutableDoubleArray from an iterable of Double values. @param values the source iterable of Double numbers @return an ImmutableDoubleArray containing the double values
211 Creates an immutable array from an iterable of integers. @param values iterable of Integer objects to convert @return ImmutableIntArray instance or EMPTY if the collection is empty
212 Creates an ImmutableLongArray from an Iterable of Longs. @param values the input iterable of Long objects @return ImmutableLongArray instance containing the values
213 Converts the unsigned long value to a string in the specified radix. @param radix base for conversion (must be between Character.MIN_RADIX and Character.MAX_RADIX) @return string representation of the unsigned long in the given radix
214 Converts an unsigned long to its string representation in base 10. @param x unsigned long value to convert @return string representation of the unsigned long in decimal format
215 Invokes any of the given tasks concurrently. @param executorService service to execute tasks @param tasks collection of callable tasks @param timed true if timeout is applicable @param timeout maximum time to wait for a task to complete @return result of the completed task @throws InterruptedException if interrupted while waiting @throws ExecutionException if task execution fails @throws TimeoutException if no task completes within the timeout period
216 Executes a runnable task asynchronously. @param combiner task to execute @param executor executor for the task @return ListenableFuture representing the async execution result
217 Creates a ClosingFuture from a ListenableFuture. @param future the ListenableFuture to manage @return a new ClosingFuture instance
218 Attempts to retrieve and remove the head of the queue. Returns null if no elements are present.
219 Retrieves and returns the head of the queue without removing it. Handles empty queue by returning null. @return the head of the queue or null if it's empty
220 Submits a synchronous task for execution. @param callable the task to be executed synchronously @param executor the executor to run the task @return a non-cancellable ListenableFuture representing the task's result
221 Retrieves a value from a Future with a specified timeout. @param future the Future to retrieve the value from @param exceptionClass the class of the exception to throw if an error occurs @param timeout the maximum time to wait for the Future to complete @param unit the time unit of the timeout parameter @return the result of the Future, or throws the specified checked exception if retrieval fails @throws X the specified checked exception if an error occurs
222 Notifies service has stopped. Updates state and enqueues termination event. @throws IllegalStateException if service is not running, starting, or stopping
223 Notifies listeners of a service failure. @param cause the exception that caused the failure
224 Starts timing for service startup. @param service the service to start timing for
225 Transitions a service from one state to another, updating internal state and metrics. @param service the service being transitioned @param from the current state of the service @param to the target state for the service
226 Enters monitor when condition is met. @param guard the condition to wait for @throws InterruptedException if interrupted while waiting
227 Waits for a condition to be satisfied. @param guard the condition to wait for @throws InterruptedException if interrupted while waiting
228 Enters a guarded section uninterruptibly. @param guard condition to wait for @throws IllegalMonitorStateException if guard's monitor is not this instance
229 Waits uninterruptibly for a condition to be satisfied. @param guard the condition to wait for @throws IllegalMonitorStateException if not holding lock or wrong monitor
230 Attempts to enter the monitor when a given condition is satisfied. @param guard condition to wait for @param time maximum time to wait @param unit time unit of the timeout @return true if condition is met, false on timeout @throws InterruptedException if interrupted while waiting
231 Enters the monitor uninterruptibly, waiting for a condition. @param guard the condition to wait for @param time maximum time to wait @param unit time unit of the input time @return true if condition is satisfied, false otherwise
232 Waits for a condition to be satisfied with a specified time limit. @param guard the condition to wait for @param time maximum time to wait @param unit time unit of the input time @return true if condition is satisfied, false otherwise @throws InterruptedException if interrupted while waiting
233 Waits uninterruptibly for a condition to be satisfied with a specified timeout. @param guard the condition to wait for @param time maximum time to wait @param unit time unit of the input time @return true if condition is satisfied, false otherwise
234 Applies a timeout to the current future. @param timeout duration of the timeout @param unit TimeUnit for the timeout @param scheduledExecutor ScheduledExecutorService for scheduling timeouts @return FluentFuture with timeout management
235 Wraps a ListenableFuture with a specified timeout. @param delegate original ListenableFuture to wrap @param time timeout duration as Duration @param scheduledExecutor ScheduledExecutorService for scheduling timeouts @return TimeoutFuture instance with timeout management
236 Finds the first element in the iterable that matches the given predicate. @param predicate condition to match elements against @return Optional containing the first matching element or absent if none found
237 Creates an optimized CharMatcher based on character set. Uses BitSet for efficient character matching and returns either a positive or negated matcher. @return CharMatcher instance configured with optimal parameters
238 Rethrows the given throwable as a specific exception type or RuntimeException. @param e the throwable to rethrow @param declaredType1 first exception type to check against @param declaredType2 second exception type to check against @throws IOException if the throwable is an instance of IOException @throws X1 if the throwable is an instance of declaredType1 @throws X2 if the throwable is an instance of declaredType2
239 Writes byte array to an output stream. @param bytes the byte array to write @throws IOException if writing fails
240 Writes data from an InputStream to the output stream. @param input source InputStream @return number of bytes written @throws IOException if I/O error occurs
241 Checks if the byte source is empty. @return true if the source is empty, false otherwise @throws IOException if an I/O error occurs
242 Returns the size of the byte source. If size is known, returns it directly; otherwise, counts bytes by skipping or reading. @return Size of the byte source in bytes @throws IOException if an I/O error occurs
243 Copies byte data to an OutputStream. @param output destination OutputStream @return number of bytes copied @throws IOException if I/O error occurs during copying or resource management
244 Copies byte data to a sink. @param sink destination for the byte data @return number of bytes copied @throws IOException if an I/O error occurs
245 Reads byte data from the source. @return byte array containing the data read @throws IOException if an I/O error occurs
246 Reads bytes from the source using a specified ByteProcessor. @param processor the ByteProcessor to process the bytes @return result from the ByteProcessor or null if not applicable @throws IOException if an I/O error occurs
247 Compares byte contents of current source with another ByteSource. @param other the ByteSource to compare against @return true if contents are equal, false otherwise @throws IOException if an I/O error occurs during comparison
248 Writes a character sequence to the output stream. @param charSequence the character sequence to write @throws IOException if an I/O error occurs
249 Writes character data from a Readable source to the output stream. @param readable the source of characters to write @return number of characters written @throws IOException if an I/O error occurs
250 Returns the length of the character source. Uses cached value if available, otherwise counts characters by reading. @return total number of characters @throws IOException if an I/O error occurs
251 Copies character data to an Appendable destination. @param appendable the destination for copied characters @return number of characters copied @throws IOException if an I/O error occurs
252 Copies character data to a sink. @param sink destination for the copied characters @return number of characters copied @throws IOException if an I/O error occurs
253 Reads the first line from a character source. @return The first line of text or null if the source is empty @throws IOException if an I/O error occurs while reading
254 Reads lines from the source and processes them using the given LineProcessor. @param processor the line processor to handle each line @return result from the processor after processing all lines or breaking early @throws IOException if an I/O error occurs during reading or processing
255 Checks if the character source is empty. Uses lengthIfKnown or reads first character to determine emptiness. @return true if empty, false otherwise @throws IOException if an I/O error occurs
256 Expands the cache table size. Handles rehashing and node relocation for efficient storage.
257 Filters keys in a Multimap based on a given predicate. @param unfiltered the original Multimap to filter @param keyPredicate the predicate for filtering keys @return a new Multimap with filtered keys
258 Filters entries in a SetMultimap by their values. @param unfiltered the original multimap to filter @param valuePredicate condition each value must satisfy @return a new SetMultimap with filtered entries
259 Filters entries in a multimap based on a predicate. @param unfiltered the original multimap to filter @param entryPredicate the condition each entry must satisfy @return a new Multimap with filtered entries
260 Creates an iterator for column keys in sorted order. @return Iterator over unique column keys, sorted by the comparator
261 Creates an immutable bi-map from an iterable of entries. @param entries iterable containing key-value pairs @return ImmutableBiMap with the specified entries
262 Creates an immutable map from iterable entries. @param entries iterable of key-value pairs @return ImmutableMap containing the specified entries
263 Converts an iterable to a typed array. @param iterable source iterable @param type Class object representing the array component type @return array containing elements of the iterable
264 Creates an ImmutableSortedSet from given comparator and iterable. @param comparator sorting order for elements @param elements source iterable @return new ImmutableSortedSet instance
265 Searches for a key in a list using binary search. @param list the sorted list to search @param keyFunction function to extract keys from list elements @param key the key to find @param keyComparator comparator for key comparison @param presentBehavior behavior when key is found @param absentBehavior behavior when key is not found @return index of the key or result from absentBehavior
266 Removes all values associated with the specified key. This operation is not supported and will throw UnsupportedOperationException. @param key key whose associated values are to be removed @return list of values that were removed (always empty)
267 Transforms values of a navigable map using a specified function. @param fromMap the source navigable map to transform @param function the transformation function for values @return a new NavigableMap with transformed values
268 Removes a mapping from the table if it exists. @param rowKey key identifying the row @param columnKey key identifying the column @param value value to remove @return true if the mapping was removed, false otherwise
269 Returns a synchronized (thread-safe) view of the specified list multimap. @param multimap the ListMultimap to be wrapped @return synchronized ListMultimap instance
270 Returns a synchronized SetMultimap wrapper. @param multimap the underlying SetMultimap to be wrapped @return synchronized SetMultimap instance
271 Converts Readable source to string. @param r the source Readable @return string representation of the Readable @throws IOException if an I/O error occurs
272 Catches exceptions of a specified type and provides a fallback value. @param exceptionType type of exception to catch @param fallback function to execute on caught exception @param executor for executing the fallback @return FluentFuture with error handling
273 Transforms the result of this future using a specified function. @param function the transformation function to apply @param executor the executor for asynchronous execution @return FluentFuture representing the transformed outcome
274 Creates a new directed graph builder. @return GraphBuilder configured for directed graphs
275 Creates an undirected graph builder. @return GraphBuilder instance configured for undirected graphs
276 Creates a GraphBuilder from an existing graph. @param graph source graph to copy properties from @return new GraphBuilder with same configuration as the input graph
277 Creates a directed NetworkBuilder instance. @return NetworkBuilder configured for directed networks
278 Creates an undirected network builder. @return NetworkBuilder instance configured for undirected networks
279 Creates a NetworkBuilder from an existing network. @param network the source network to copy settings from @return a new NetworkBuilder with copied properties
280 Creates a directed value graph builder. @return ValueGraphBuilder configured for directed graphs
281 Creates an undirected value graph builder. @return ValueGraphBuilder configured for undirected graphs
282 Creates a ValueGraphBuilder from an existing graph. Copies properties like directionality, self-loops, node order, and edge order. @param graph the source ValueGraph to copy properties from @return a new ValueGraphBuilder configured with the same properties as the input graph
283 Adds a listener with an associated executor to monitor service state changes. @param listener the listener to add @param executor the executor for processing events
284 Creates an empty CompactLinkedHashSet. @return A new instance of CompactLinkedHashSet with default settings
285 Creates a CompactHashSet from a collection. @param collection elements to initialize the set with @return CompactHashSet containing all elements from the input collection
286 Creates a CompactLinkedHashSet with an initial capacity. @param expectedSize estimated number of elements to store @return CompactLinkedHashSet instance
287 Creates a sorted set multimap from a map and a value set supplier. @param map initial map to use; must be empty @param factory supplier for creating sorted sets of values @return SortedSetMultimap with specified backing map and value set factory
288 Creates a collector that accumulates elements into an immutable multiset. @return Collector for ImmutableMultiset with each element having a count of 1
289 Converts a stream of elements into an immutable multiset. @param elementFunction extracts the element from each input @param countFunction determines the count for each element @return Collector that accumulates elements into an ImmutableMultiset
290 Provides a builder instance for creating ImmutableMultiset. @return Builder object initialized with an empty LinkedHashMultiset
291 Joins elements from an array into a single string. @param parts array of objects to join @return concatenated string of elements
292 Joins elements of this iterable using the specified Joiner. @param joiner Joiner object to define joining behavior @return Concatenated string of iterable elements
293 Simplifies a file path by resolving relative components. @param pathname the input file path to simplify @return simplified and normalized file path
294 Parses encoded trie data into an immutable map. @param stack deque for managing parsed sequences @param encoded input character sequence representing the trie @param start starting index in the encoded sequence @param builder map builder to store parsed suffixes and types @return number of characters processed
295 Creates a ConcurrentMap with specified parameters. @return Configured ConcurrentMap instance
296 Transforms elements and concatenates iterables. @param function transformation function to apply to each element @return FluentIterable containing all transformed elements
297 Concatenates multiple iterables into a single iterable. @param inputs varargs of iterables to concatenate @return Iterable containing all elements from the input iterables
298 Retrieves the result of a completed task or throws an exception. Waits up to the specified timeout if necessary. @param timeout time to wait before giving up @param unit TimeUnit for the timeout parameter @return result of the task if successful, null if explicitly set to null @throws InterruptedException if the current thread is interrupted while waiting @throws TimeoutException if the wait times out @throws ExecutionException if the computation threw an exception
299 Adds a new node to the graph. @param node the node to be added @return GraphConnections object for the new node
300 Attempts to acquire a lock and check condition satisfaction within a specified duration. @param guard the condition guard to evaluate @param time the maximum time to wait for the lock as a Duration @return true if lock is acquired and condition is satisfied, false otherwise
301 Converts a string to the specified case format. Handles camel conversion and appends separators accordingly. @param format target case format @param s input string to convert @return converted string in the desired format
302 Converts a string to the specified case format, handling camel case conversion. @param format target case format @param s input string to convert @return converted string in the desired format
303 Converts a string to the specified case format. Handles camel conversion and appends separators. @param format target case format @param s input string to convert @return converted string in the desired format
304 Converts a string to a specified case format. @param format target case format @param str input string to convert @return converted string in the desired format
305 Checks if none of the characters in the sequence match. @param sequence the CharSequence to check @return true if no characters match, false otherwise
306 Removes all matching characters from the input sequence. @param sequence the CharSequence to process @return a new String with matching characters removed
307 Replaces all matching characters in the sequence with a specified character. @param sequence the CharSequence to process @param replacement the character to replace matches with @return a new String with matched characters replaced
308 Retrieves the embedded IPv4 client address from an IPv6 address. @param ip the Inet6Address to process @return Inet4Address representing the embedded IPv4 client IP @throws IllegalArgumentException if no embedded IPv4 address is found
309 Reads bytes from the input stream and updates the hash. @param bytes destination buffer for read bytes @param off starting offset in the buffer @param len maximum number of bytes to read @return number of bytes read or -1 if end of stream
310 Reads all bytes from an InputStream into a byte array. @param in the input stream to read from @param b the destination byte array @throws IOException if an I/O error occurs or end of stream is reached prematurely
311 Rotates a boolean array by a specified distance. @param array the boolean array to rotate @param distance number of positions to rotate
312 Rotates the entire byte array by a specified distance. @param array the byte array to rotate @param distance the number of positions to rotate
313 Sorts byte array in descending order. @param array the byte array to sort
314 Sorts the entire character array in descending order. @param array the character array to sort
315 Rotates a character array by a specified distance. @param array the character array to rotate @param distance number of positions to rotate
316 Sorts an entire double array in descending order. @param array the array to sort
317 Rotates elements in a double array by a specified distance. @param array the array to rotate @param distance number of positions to rotate
318 Sorts an entire float array in descending order. @param array the array to sort
319 Rotates elements in a float array by a specified distance. @param array the array to rotate @param distance the number of positions each element is shifted
320 Sorts an integer array in descending order. @param array the array to sort
321 Rotates elements in an integer array by a specified distance. @param array the array to rotate @param distance the number of positions to rotate by
322 Sorts an entire long array in descending order. @param array the array to sort
323 Rotates an entire long array by a specified distance. @param array the array to rotate @param distance the number of positions to rotate
324 Sorts an entire short array in descending order. @param array the array to sort
325 Rotates elements in a short array by a specified distance. @param array the array to rotate @param distance the number of positions each element is shifted
326 Sets key-value separator for map creation. @param separator string to split on @return New MapSplitter configured with the specified key-value separator
327 Creates a rate limiter with specified parameters. @param permitsPerSecond rate of permit issuance @param warmupPeriod duration for rate to stabilize @param unit time unit for warmup period @return configured RateLimiter instance
328 Returns an unmodifiable view of the specified sorted multiset. @param sortedMultiset the sorted multiset to wrap @return an unmodifiable SortedMultiset object
329 Returns an unmodifiable view of the specified navigable set. @param set the navigable set to wrap @return an unmodifiable navigable set or the original if already immutable/unmodifiable
330 Returns an unmodifiable view of the specified collection of map entries. @param entries original collection of key-value entries @return UnmodifiableEntrySet if entries is a Set, otherwise UnmodifiableEntries
331 Returns an unmodifiable view of the specified sorted set multimap. @param delegate the underlying sorted set multimap to wrap @return unmodifiable SortedSetMultimap instance
332 Creates a ClosingFuture that ensures resources are closed upon task completion. @param future the ListenableFuture to manage @param closingExecutor Executor for resource cleanup tasks @return ClosingFuture object with added callbacks for resource management
333 Adds a callback to handle completion of this future. @param callback FutureCallback to execute upon completion @param executor Executor to run the callback on
334 Creates a new EnumBiMap with specified enum types for keys and values. @param keyType class of the enum type for keys @param valueType class of the enum type for values @return newly created EnumBiMap instance
335 Creates a new EnumHashBiMap with specified enum type. @param keyType class representing the enum type for keys @return EnumHashBiMap instance initialized with the given key type
336 Creates a TreeMultiset from an iterable of comparable elements. @param elements source of elements to add @return TreeMultiset instance containing the added elements
337 Constructs a new Builder instance with a specified comparator. @param comparator custom comparator for element ordering
338 Replaces values associated with a key in the multimap. @param key the key to replace values for @param values new values to associate with the key @return an unmodifiable view of the old values or an empty collection if none exist
339 Replaces all values associated with a key atomically. @param key the key to replace values for @param values the new set of values to associate with the key @return the previous set of values associated with the key, or empty if none
340 Creates a new HashMultiset from an iterable of elements. @param elements source of elements to add to the multiset @return HashMultiset instance containing all elements from the iterable
341 Creates a new ArrayListMultimap with specified capacities. @param expectedKeys the expected number of unique keys @param expectedValuesPerKey the expected number of values per key @return initialized ArrayListMultimap instance
342 Creates a new HashMultimap with specified sizes. @param expectedKeys estimated number of distinct keys @param expectedValuesPerKey average number of values per key @return initialized HashMultimap instance
343 Creates a new HashMultimap from an existing Multimap. @param multimap the source Multimap to copy entries from @return a new HashMultimap containing the same key-value pairs as the input
344 Creates a new LinkedListMultimap with an estimated number of keys. @param expectedKeys the anticipated number of unique keys @return a new LinkedListMultimap instance
345 Creates a `LinkedHashMultiset` from an iterable. @param elements the iterable containing elements to add @return new `LinkedHashMultiset` instance with elements added
346 Creates a LinkedHashMultimap with default capacities. @return a new LinkedHashMultimap instance
347 Creates a LinkedHashMultimap with specified capacities. @param expectedKeys the expected number of keys @param expectedValuesPerKey the maximum number of values per key @return a new LinkedHashMultimap instance
348 Constructs a mutable network using the provided builder. Initializes node and edge maps based on builder configurations. @param builder configuration for network properties
349 Initializes a StandardMutableValueGraph with specified builder settings. @param builder configuration for graph properties
350 Adds a cell to the table. @param cell the cell to add, must not be null @return this Builder instance for method chaining
351 Adds a key-value pair from an entry to the map builder. @param entry the entry containing the key and value @return the Builder instance for method chaining
352 Adds all key-value pairs from the specified iterable to the map builder. @param entries iterable of entries containing keys and values @return the Builder instance for method chaining
353 Adds a key-value pair from an entry to the map builder. @param entry the entry containing the key and value @return the Builder instance for method chaining
354 Converts the map to an immutable set multimap. @return An ImmutableSetMultimap representation of the map, or an empty one if the map is empty
355 Builds an immutable sorted map. @return ImmutableSortedMap instance based on current entries and comparator
356 Adds all entries from another RangeMap to the builder. @param rangeMap source RangeMap to copy entries from @return this Builder instance for method chaining
357 Adds multiple non-overlapping ranges to the builder. @param ranges iterable collection of ranges to add @return Builder instance for method chaining
358 Intersects the given range with the ranges in this set. @param range the range to intersect with @return an immutable list of intersecting ranges
359 Creates a ContiguousSet from a range and discrete domain. @param range the range of elements in the set @param domain the discrete domain defining element boundaries @return ContiguousSet object representing the specified range
360 Coalesces a range with an existing entry if they are connected and have the same value. @param range the range to coalesce @param value the value associated with the range @param entry the existing map entry to check against @return the coalesced range or the original range if not applicable
361 Converts the range set to an immutable sorted set. @param domain discrete domain for value comparison @return ImmutableSortedSet containing all values in the ranges @throws IllegalArgumentException if domain or range is unbounded
362 Converts a map to an immutable EnumMap. Handles empty and non-empty maps, ensuring entries are not null. @param map the input map to convert @return ImmutableEnumMap representation of the input map
363 Returns an immutable map representation of the table's rows. Each key in the map is a row key, and each value is a map representing the column-value pairs for that row.
364 Returns an iterator over elements in reverse order. @return UnmodifiableIterator of elements in descending order
365 Constructs and returns an immutable list from added elements. Marks the builder as copy-on-write to prevent further modifications. @return ImmutableList containing all added elements
366 Creates an immutable list from the given array. @param elements source array of elements @return ImmutableList containing all elements from the array
367 Builds an immutable sorted set from the added elements. Sorts and removes duplicates before creating the set. @return ImmutableSortedSet containing unique, sorted elements
368 Creates an immutable map from a given array of entries. @param n number of entries in the array @param entryArray array of key-value pairs @param throwIfDuplicateKeys flag to throw exception on duplicate keys @return ImmutableMap instance backed by the provided entries
369 Finds the index of the domain part matching the desired public suffix type. @param desiredType optional public suffix type to match @return index of the matching suffix or NO_SUFFIX_FOUND if not found
370 Creates an immutable set from enum elements. @param elements iterable of enum elements @return ImmutableSet containing the enum elements
371 Provides an unmodifiable iterator over graph elements. Ensures safe iteration without modifying the graph structure. @return UnmodifiableIterator for traversing graph elements
372 Posts an event to all registered subscribers. @param event the event object to be posted
373 Attempts to cross over and bubble up an element in a binary heap. @param removeIndex index of the removed element @param vacated index of the vacated position @param toTrickle element to be moved and bubbled up @return MoveDesc object if successful, null otherwise
374 Returns the comparator for row keys. @return Comparator used for sorting row keys
375 Wraps a navigable set in a synchronized version. @param navigableSet the underlying navigable set to be wrapped @return a synchronized NavigableSet instance using the set itself as the lock
376 Creates a Bloom filter with specified parameters. @param funnel function to convert elements into bytes @param expectedInsertions expected number of insertions @param fpp desired false positive probability @return BloomFilter object configured with the given parameters
377 Creates a Bloom filter with default false positive probability. @param funnel function to convert elements into bytes @param expectedInsertions expected number of insertions @return BloomFilter object configured with the given parameters and default FPP of 3%
378 Estimates the number of elements added to the BloomFilter. Uses bit statistics and hash function count for approximation. @return Approximate element count as a long value
379 Collects the least k elements using a custom comparator. @param k number of least elements to collect @param comparator comparator for element ordering @return collector that gathers and returns the least k elements
380 Finds the least k elements from an iterator. @param iterator source of elements to compare @param k number of least elements to retrieve @return List containing the top k least elements sorted by comparator
381 Adds all elements from the iterable to the buffer. @param elements iterable of elements to add
382 Converts the unsigned long value to its string representation. @return string representation of the unsigned long in decimal format
383 Prepares to acquire a lock, validating the current thread's lock order. @param lock the lock about to be acquired
384 Transforms the result of this ClosingFuture using a given function. @param function the transformation function to apply @param executor the executor to use for applying the function @return a new ClosingFuture with the transformed result
385 Transforms this future's result asynchronously using a given function. @param function the transformation function to apply @param executor the executor to use for asynchronous execution @return a new ClosingFuture with the transformed result
386 Retrieves value from Future, handling checked exceptions. @param future source of the result @param exceptionClass class of exception to throw on failure @return result from Future or throws specified exception
387 Retrieves a value from a Future with a specified timeout. @param future the Future to retrieve the value from @param exceptionClass the class of the exception to throw if an error occurs @param timeout the maximum time to wait for the Future to complete @return the result of the Future, or throws the specified checked exception if retrieval fails @throws X the specified checked exception if an error occurs
388 Reschedules a task with the next schedule. @return Cancellable instance managing the rescheduled task lifecycle
389 Notifies the service has started. Updates state and notifies listeners accordingly. @throws IllegalStateException if service is not in STARTING state
390 Starts all services asynchronously. Throws IllegalStateException if any service is not in NEW state. @return this ServiceManager instance
391 Attempts to enter monitor when condition is met within a specified duration. @param guard condition to wait for @param time maximum wait time @return true if condition is satisfied, false on timeout @throws InterruptedException if interrupted while waiting
392 Enters the monitor uninterruptibly for a specified duration. @param guard the condition to wait for @param time maximum waiting time as a Duration @return true if condition is satisfied, false otherwise
393 Waits for a condition to be satisfied within a specified duration. @param guard the condition to wait for @param time maximum waiting time as a Duration @return true if condition is met, false otherwise @throws InterruptedException if interrupted while waiting
394 Waits uninterruptibly for a condition with a specified timeout. @param guard the condition to wait for @param time maximum time to wait as Duration @return true if condition is satisfied, false otherwise
395 Applies a timeout to the future. @param timeout duration of the timeout @param scheduledExecutor ScheduledExecutorService for scheduling timeouts @return FluentFuture with timeout management
396 Writes a byte array to a specified file. @param from byte array containing data to write @param to destination file for writing @throws IOException if an I/O error occurs during the write operation
397 Computes the hash of byte data using a specified hash function. @param hashFunction the hashing algorithm to apply @return HashCode representing the computed hash @throws IOException if an I/O error occurs during processing
398 Copies file content to an OutputStream. @param from source File to be copied @param to destination OutputStream @throws IOException if I/O error occurs during copying
399 Copies content from a URL to an OutputStream. @param from source URL @param to destination OutputStream @throws IOException if I/O error occurs during copying
400 Copies a file from one location to another. @param from source file @param to destination file @throws IOException if an I/O error occurs or files are identical
401 Converts a File to a byte array. @param file the source file to be converted @return byte array containing the file's content @throws IOException if an I/O error occurs
402 Converts a URL to a byte array. @param url the URL to convert @return byte array containing the URL content @throws IOException if an I/O error occurs
403 Reads bytes from a file using a specified ByteProcessor. @param file the source file to be processed @param processor the ByteProcessor to handle the byte data @return result from the ByteProcessor or null if not applicable @throws IOException if an I/O error occurs
404 Compares two files for equality by content. @param file1 first file to compare @param file2 second file to compare @return true if files are equal, false otherwise @throws IOException if an I/O error occurs during comparison
405 Checks if two paths represent the same file content. @param path1 first file path to compare @param path2 second file path to compare @return true if both paths are equal, false otherwise @throws IOException if an I/O error occurs during comparison
406 Writes a character sequence to a file using specified charset. @param from the CharSequence to write @param to the target File @param charset the Charset to use for writing @throws IOException if an I/O error occurs
407 Appends a character sequence to a file using the specified charset. @param from the character sequence to append @param to the target file @param charset the charset to use for writing @throws IOException if an I/O error occurs
408 Copies file content to an Appendable destination using specified charset. @param from source File to read @param charset character encoding for reading the file @param to destination Appendable to write to @throws IOException if an I/O error occurs
409 Reads the first line of a file using specified charset. @param file the source file to be read @param charset character encoding to use @return The first line of text or null if empty @throws IOException if an I/O error occurs while reading
410 Reads lines from a file using specified charset. @param file the source file to be read @param charset character encoding to use @return mutable list of lines from the file @throws IOException if an I/O error occurs during reading
411 Reads lines from a file and processes them using a callback. @param file the source file to read @param charset character encoding for reading the file @param callback processor to handle each line @return result from the processor after processing all lines or breaking early @throws IOException if an I/O error occurs during reading or processing
412 Reads lines from a URL and processes them using a LineProcessor. @param url the URL to read from @param charset character encoding for reading the URL @param callback the LineProcessor to handle each line @return result from the processor after processing all lines or breaking early @throws IOException if an I/O error occurs during reading or processing
413 Maps a file to a memory-mapped buffer. @param file the target file @param mode mapping mode (READ_ONLY or READ_WRITE) @return MappedByteBuffer representing the mapped file region @throws IOException if an I/O error occurs
414 Maps a file to a memory-mapped buffer. Validates that the size is non-negative. @param file target file @param mode mapping mode (READ_ONLY or READ_WRITE) @param size size of the region to map, -1 for full file @return MappedByteBuffer representing the mapped file region @throws IOException if an I/O error occurs
415 Adds a delayed shutdown hook for an executor service. @param service the executor service to manage @param terminationTimeout timeout for service termination @param timeUnit unit of time for termination timeout
416 Filters entries in a multimap based on a value predicate. @param unfiltered the original multimap to filter @param valuePredicate condition to evaluate on entry values @return a new Multimap with filtered entries
417 Creates a compound ordering from multiple comparators. @param comparators iterable of comparators for complex sorting @return CompoundOrdering object combining the specified comparators
418 Creates an immutable bi-map from a given map. @param map source map containing key-value pairs @return ImmutableBiMap with entries from the provided map
419 Converts iterable to a typed array. @param type Class object representing the array component type @return array containing elements of the delegate iterable
420 Converts an iterator to a typed array. @param iterator source iterator @param type Class object representing the array component type @return array containing elements of the iterator
421 Converts the iterable to an ImmutableSortedSet based on a comparator. @param comparator sorting order for elements @return new ImmutableSortedSet instance
422 Creates an ImmutableSortedSet from given elements using natural ordering. @param elements source iterable of elements @return new ImmutableSortedSet instance with sorted and immutable elements
423 Creates an ImmutableSortedSet from a comparator and collection. @param comparator sorting order for elements @param elements source collection @return new ImmutableSortedSet instance
424 Returns an unmodifiable view of the row map. @return SortedMap with rows as keys and unmodifiable column maps as values
425 Returns the string representation of the media type. Uses lazy initialization for efficiency. @return formatted media type as a String
426 Returns a synchronized SortedSetMultimap. @param multimap the underlying SortedSetMultimap to be wrapped @return synchronized SortedSetMultimap instance
427 Reads content from a character source as a string. @return the content of the source as a string @throws IOException if an I/O error occurs during reading
428 Creates a CompactLinkedHashMap with insertion-order. @param expectedSize estimated number of entries to store @return a new CompactLinkedHashMap instance
429 Creates a CompactLinkedHashSet from a given collection. @param collection elements to initialize the set with @return CompactLinkedHashSet instance containing all elements from the collection
430 Creates a TreeMultimap with natural ordering for keys and values. @return TreeMultimap instance with sorted keys and values
431 Creates a TreeMultimap with custom comparators. @param keyComparator comparator for sorting keys @param valueComparator comparator for sorting values @return initialized TreeMultimap instance
432 Checks if any character in the sequence matches. @param sequence the CharSequence to check @return true if at least one character matches, false otherwise
433 Retains characters in the input sequence that match this matcher. @param sequence the CharSequence to process @return a new String with only matching characters retained
434 Replaces all occurrences of matching characters in the sequence with a replacement string. @param sequence the CharSequence to process @param replacement the CharSequence used as replacement for matches @return a new String with matched characters replaced by the replacement string
435 Coerces an InetAddress to an Inet4Address. @param ip the input InetAddress (IPv4 or IPv6) @return coerced Inet4Address for IPv6, original if IPv4
436 Creates a rate limiter with specified permits per second and warmup period. @param permitsPerSecond rate of permit issuance @param warmupPeriod duration for rate stabilization @return configured RateLimiter instance
437 Returns a synchronized view of all entries in the multimap. @return a Set containing all key-value pairs managed by this multimap
438 Schedules a task with a specified delay. @param command the task to execute @param delay time from now to start execution @param unit time unit of the delay parameter @return ListenableScheduledFuture representing the scheduled task
439 Builds a LoadingCache with specified loader. Validates weight configuration before initialization. @param loader CacheLoader for value loading @return LoadingCache instance configured with builder settings
440 Builds and returns a cache instance with configured parameters. Validates weight configuration and ensures proper settings for non-loading caches. @return Cache object with specified properties
441 Creates a new Builder with specified comparator. @param comparator custom comparator for element ordering @return Builder instance configured with the given comparator
442 Creates a Builder with elements in reverse natural order. @return Builder configured for descending order
443 Creates a Builder with natural ordering. @return Builder instance using natural element comparison
444 Creates an EnumBiMap from a given map with enum keys and values. @param map input map with enum entries @return newly created EnumBiMap instance initialized with the map's contents
445 Creates an EnumHashBiMap from a given map. @param map input map with enum keys and values @return EnumHashBiMap instance initialized with the entries from the input map
446 Replaces all values associated with a given key. @param key the key whose values are to be replaced @param values the new values to associate with the key @return a set containing all the old values associated with the key
447 Checks if two lists are permutations of each other. @param first first list to compare @param second second list to compare @return true if both lists have the same elements with the same frequency, false otherwise
448 Creates a new empty ArrayListMultimap. @return An initialized ArrayListMultimap instance with default capacities.
449 Creates a new ArrayListMultimap from an existing Multimap. @param multimap the source Multimap to copy entries from @return a new ArrayListMultimap containing the same key-value pairs as the input
450 Creates and returns a new instance of HashMultimap. Initializes with default settings for key-value storage.
451 Creates and returns a new empty LinkedListMultimap. @return LinkedListMultimap instance with default capacity
452 Creates a new LinkedListMultimap from an existing Multimap. @param multimap source of entries to add @return LinkedListMultimap instance initialized with the provided entries
453 Creates a LinkedHashMultimap from an existing Multimap. @param multimap the source multimap to copy entries from @return a new LinkedHashMultimap instance with copied entries
454 Constructs and returns a mutable network based on current builder settings. @return MutableNetwork instance with configured properties
455 Constructs a StandardMutableGraph using specified builder settings. @param builder configuration for graph properties
456 Constructs and returns a mutable value graph. @param <N1> node type extending the builder's node type @param <V1> value type extending the builder's value type @return MutableValueGraph instance configured with builder settings
457 Adds all cells from another table to this builder. @param table the source table containing cells to add @return this Builder instance for method chaining
458 Adds all key-value pairs from the specified iterable to the map builder. @param entries iterable of entries containing keys and values @return the Builder instance for method chaining
459 Adds all key-value pairs from the specified map to the builder. @param map source map containing entries to add @return the Builder instance for method chaining
460 Adds all key-value pairs from the specified iterable to the map builder. @param entries iterable of entries containing keys and values @return the Builder instance for method chaining
461 Filters entries of a filtered map based on an additional predicate. @param map the original AbstractFilteredMap to filter further @param entryPredicate the additional condition for entries to satisfy @return a new FilteredEntryMap with combined predicates
462 Adds all non-overlapping ranges from another RangeSet. @param ranges RangeSet containing ranges to add @return Builder instance for method chaining
463 Returns a subset of the range set within the specified range. @param range the range to intersect with @return an ImmutableRangeSet containing ranges that intersect with the given range
464 Creates a ContiguousSet of integers from lower to upper bounds. @param lower the inclusive lower bound @param upper the inclusive upper bound @return ContiguousSet object representing the range [lower, upper]
465 Creates a ContiguousSet of Longs within a closed range. @param lower the inclusive lower bound of the range @param upper the inclusive upper bound of the range @return ContiguousSet containing all Long values from lower to upper
466 Creates a ContiguousSet with elements from lower to upper (exclusive). @param lower the inclusive lower bound of the set @param upper the exclusive upper bound of the set @return ContiguousSet object representing the range [lower, upper)
467 Creates a ContiguousSet with elements from lower (inclusive) to upper (exclusive). @param lower the inclusive lower bound of the set @param upper the exclusive upper bound of the set @return ContiguousSet object representing the specified range
468 Coalesces a range with adjacent ranges if they have the same value. @param range the range to be coalesced @param value the value associated with the range @return the coalesced range
469 Adds a new node to the network. @param node the node to be added @return NetworkConnections object for the new node
470 Creates an immutable map from a given map. @param map the source map to copy entries from @return ImmutableMap containing the same key-value pairs as the input map
471 Retrieves an immutable map of column keys to values for a given row key. @param rowKey the row key to fetch data for @return an ImmutableMap containing column-value pairs or an empty map if the row key is not found
472 Finds the greatest element less than the given element. @param e the reference element @return the greatest element less than e, or null if no such element exists
473 Finds the greatest element less than or equal to the given element. @param e target element for comparison @return greatest element <= e or null if no such element exists
474 Creates an immutable list from an iterator. @param elements iterator providing elements to include @return ImmutableList containing all elements from the iterator
475 Builds and returns an ImmutableRangeMap from entries. Sorts entries, checks for overlaps, and constructs the map. @return ImmutableRangeMap containing sorted ranges and associated values
476 Builds an ImmutableRangeSet from added ranges. Merges overlapping or contiguous ranges, ensuring immutability. @return ImmutableRangeSet containing merged ranges
477 Parses the Java class path into a list of URLs. @return ImmutableList of URLs representing classpath entries
478 Retrieves method parameters with metadata. @return ImmutableList of Parameter objects representing each parameter
479 Retrieves a list of exception types associated with the method. @return ImmutableList containing TypeToken representations of exceptions
480 Wraps a collection of Callable tasks. @param tasks original Callable tasks to wrap @return ImmutableList of wrapped Callable tasks
481 Creates an immutable sorted list from the given iterable. @param elements source iterable of comparable elements @return ImmutableList containing sorted elements
482 Creates a sorted immutable list from an iterable. @param comparator comparator for element ordering @param elements source iterable of elements @return ImmutableList containing sorted elements
483 Creates an immutable sorted set from an iterator. @param comparator the comparator defining element order @param elements iterator providing elements to add @return ImmutableSortedSet containing unique, sorted elements
484 Creates an immutable map from a given array of entries. @param n number of entries in the array @param entryArray array of key-value pairs @param throwIfDuplicateKeys flag to throw exception on duplicate keys @return ImmutableMap instance backed by the provided entries
485 Retrieves the index of the public suffix. @return index of the public suffix or SUFFIX_NOT_INITIALIZED if not found
486 Retrieves the index of the registry suffix. Caches the result for future calls. @return index of the registry suffix or SUFFIX_NOT_INITIALIZED if not found
487 Constructs an ImmutableSortedMap from entries. @param comparator key comparator @param sameComparator true if using the same comparator as existing map @param entries iterable of entries to include @return ImmutableSortedMap with sorted and unique keys
488 Creates a new TreeBasedTable with the same comparators and contents as the given table. @param table source table to copy from @return a new TreeBasedTable with copied data and comparators
489 Creates a Bloom filter with default false positive probability. @param funnel function to convert elements into bytes @param expectedInsertions expected number of insertions @return BloomFilter object configured with the given parameters and default FPP of 3%
490 Collects the greatest k elements using a custom comparator. @param k number of greatest elements to collect @param comparator comparator for element ordering @return collector that gathers and returns the greatest k elements
491 Finds the least k elements from an iterable. @param iterable source of elements to compare @param k number of least elements to retrieve @return List containing the top k least elements sorted by comparator
492 Finds the greatest k elements from an iterator. @param iterator source of elements to compare @param k number of greatest elements to retrieve @return List containing the top k greatest elements sorted by comparator
493 Catches exceptions of a specified type and applies a fallback function. @param exceptionType type of exception to catch @param fallback function to apply on caught exception @param executor to execute the fallback function @return new ClosingFuture with applied fallback
494 Waits until the service has stopped.
495 Waits for all services to stop within a specified timeout. @param timeout maximum time to wait @param unit time unit of the input time @throws TimeoutException if not all services stop in time
496 Returns an optimized version of this CharMatcher. @return optimized CharMatcher instance
497 Computes the hash of a file using a specified hash function. @param file the source file to be hashed @param hashFunction the hashing algorithm to apply @return HashCode representing the computed hash @throws IOException if an I/O error occurs during processing
498 Moves a file from one location to another. @param from source file @param to destination file @throws IOException if an I/O error occurs
499 Reads lines from a URL and returns them as a mutable list. @param url the URL to read from @param charset character encoding for reading the URL @return List of strings representing the lines read from the URL @throws IOException if an I/O error occurs during reading
500 Maps a file to a read-only memory-mapped buffer. @param file the target file @return MappedByteBuffer representing the mapped file region @throws IOException if an I/O error occurs or file is null
501 Wraps an executor service with graceful shutdown capabilities. @param executor the ThreadPoolExecutor to enhance @param terminationTimeout timeout for service termination @param timeUnit unit of time for termination timeout @return ExecutorService configured for delayed shutdown
502 Wraps a scheduled thread pool executor with an exiting service. @param executor the ScheduledThreadPoolExecutor to manage @param terminationTimeout timeout for service termination @param timeUnit unit of time for termination timeout @return ScheduledExecutorService configured with daemon threads and shutdown hooks
503 Adds a delayed shutdown hook for an executor service with specified timeout. @param service the executor service to manage @param terminationTimeout duration for service termination
504 Attempts to reclaim a cache entry by key. @param entry the cache entry to reclaim @param hash the hash code of the key @return true if the entry was successfully reclaimed, false otherwise
505 Attempts to reclaim a cache entry by key and value reference. @param key the cache entry key @param hash the hash code of the key @param valueReference reference to the cache entry value @return true if the entry is successfully reclaimed, false otherwise
506 Waits uninterruptibly for all managed services to reach a healthy state.
507 Waits for all services to become healthy within a specified timeout. @param timeout maximum time to wait @param unit time unit of the input time @throws TimeoutException if not all services are healthy within the timeout
508 Returns a map of services to their startup times. @return ImmutableMap with Service as key and Long (startup time in ms) as value
509 Retrieves annotations of a specific type for this parameter. @param annotationType the class of the annotation to retrieve @return an array of annotations of the specified type, or empty if none found
510 Creates an ImmutableSortedSet from a collection using natural ordering. @param elements source collection of comparable elements @return new ImmutableSortedSet instance in natural order
511 Wraps a navigable map in a synchronized version. @param navigableMap the underlying navigable map to be wrapped @return synchronized NavigableMap instance using 'this' as mutex
512 Converts a File to a string using the specified charset. @param file the source file to be converted @param charset character encoding to use @return the content of the file as a string @throws IOException if an I/O error occurs during reading
513 Converts a URL to a string using the specified character set. @param url the URL to convert @param charset character encoding to use @return content of the URL as a string @throws IOException if an I/O error occurs during reading
514 Creates a new CompactLinkedHashMap with default insertion order. @return an empty CompactLinkedHashMap instance
515 Creates a TreeMultimap with natural ordering for keys and values. @param multimap source multimap to copy entries from @return TreeMultimap instance initialized with sorted data
516 Creates a reentrant lock with cycle detection if enabled. @param lockName unique identifier for the lock @param fair true for fair locking, false otherwise @return ReentrantLock instance
517 Creates a new reentrant read-write lock with cycle detection. @param lockName unique identifier for the lock @param fair indicates if the lock should use fair ordering policy @return ReentrantReadWriteLock instance based on current policy
518 Creates and initializes lock graph nodes for an enum. @param clazz the enum class to create nodes for @return unmodifiable map of enum values to LockGraphNode instances
519 Validates a domain part. @param part the domain part to validate @param isFinalPart indicates if it's the last part of the domain @return true if valid, false otherwise
520 Converts an InetAddress to its integer representation. @param ip the input InetAddress (IPv4 or IPv6) @return integer value of the IP address
521 Checks if the wrapped collection contains a specific element. @param object the element to look for @return true if element is found, false otherwise
522 Removes an element from the wrapped collection. @param object element to be removed @return true if the element was found and removed; false otherwise
523 Removes all elements from the wrapped collection that are contained in the specified collection. @param collection elements to remove @return true if any elements were removed, false otherwise
524 Retains only elements in this collection that are contained in the specified collection. @param collection elements to retain @return true if any elements were removed, false otherwise
525 Clears all elements from the wrapped collection.
526 Checks if the wrapped collection is empty. @return true if the collection has no elements, false otherwise
527 Converts collection to array using standard size and toArray logic. @return Object array containing all elements of the collection
528 Schedules a task with a specified delay. @param command the task to execute @param delay time duration for delay @return ListenableScheduledFuture representing the scheduled task
529 Finds all subscribers for a given listener. @param listener the object containing event handler methods @return a Multimap of event types to Subscribers
530 Creates an induced subgraph from the specified network using given nodes. @param network source graph to extract subgraph from @param nodes iterable of nodes to include in the subgraph @return MutableNetwork containing only the specified nodes and their edges
531 Creates a deep copy of the given network. @param network the source network to copy @return a new MutableNetwork instance with copied nodes and edges
532 Builds and returns a mutable graph instance. @return MutableGraph object configured with current builder settings
533 Creates an induced subgraph from the given graph. @param graph original ValueGraph to extract subgraph from @param nodes iterable of nodes to include in the subgraph @return MutableValueGraph containing only specified nodes and their edges
534 Creates a deep copy of the given ValueGraph. @param graph the original ValueGraph to copy @return a new MutableValueGraph with identical nodes and edges
535 Adds all key-value pairs from the specified map to the builder. @param map source map containing entries to add @return the Builder instance for method chaining
536 Adds all key-value pairs from the specified map to the builder. @param map source map containing entries to add @return the Builder instance for method chaining
537 Filters a navigable map with an additional predicate. @param map the original filtered navigable map @param entryPredicate the extra condition for entries to be included @return a new filtered navigable map with combined predicates
538 Filters a filtered map with an additional predicate. @param map the original filtered map @param entryPredicate the additional condition for entries @return a new FilteredEntrySortedMap with combined predicates
539 Filters map keys based on a predicate. @param unfiltered the original map to filter @param keyPredicate condition for keys to be included @return new map with filtered keys
540 Filters entries of a map based on a predicate. @param unfiltered the original map to filter entries from @param entryPredicate the condition that entries must satisfy to be included @return a new Map with filtered entries
541 Creates a collector for ImmutableSortedMap. @param comparator key comparator for sorting @param keyFunction function to extract keys @param valueFunction function to extract values @return Collector that collects elements into an immutable sorted map
542 Creates a collector for immutable enum maps. @param keyFunction extracts enum keys from input elements @param valueFunction extracts values from input elements @return collector to build ImmutableMap from stream
543 Creates a collector to accumulate elements into an immutable enum map. @param keyFunction function mapping elements to enum keys @param valueFunction function mapping elements to values @param mergeFunction function merging values for duplicate keys @return Collector that accumulates elements into an ImmutableMap
544 Retrieves immutable type mappings for a given context type. @param contextType the Java type to analyze @return ImmutableMap of TypeVariableKey to Type mappings
545 Concatenates multiple byte sources from an iterator into a single source. @param sources iterator of ByteSource instances to concatenate @return ByteSource representing the concatenated content
546 Concatenates multiple character sources from an iterator. @param sources iterator providing CharSource instances to concatenate @return a single CharSource representing the concatenated input
547 Creates an immutable range set from the given iterable of ranges. @param ranges iterable collection of Range objects to include @return ImmutableRangeSet containing the provided ranges, merged and made immutable
548 Creates an ImmutableSortedMultiset from a collection of elements. @param comparator the comparator defining element order @param elements source of elements to add to the multiset @return ImmutableSortedMultiset instance or empty if input is empty
549 Creates an immutable sorted multiset from a sorted multiset. @param sortedMultiset the source sorted multiset @return ImmutableSortedMultiset instance with elements from sortedMultiset
550 Converts the collection to an immutable list. Handles different sizes by using appropriate constructors. @return ImmutableList containing all elements of the collection
551 Creates a collector for an immutable sorted set. @param comparator defines the order of elements @return Collector for ImmutableSortedSet with sorted, unique elements
552 Creates an immutable sorted set from an iterator using natural ordering. @param elements iterator providing elements to add @return ImmutableSortedSet containing unique, sorted elements
553 Builds an ImmutableBiMap from the accumulated entries. Handles different sizes of entry arrays and sorts based on value comparator if present. @return ImmutableBiMap instance with specified entries
554 Returns a submap from the start to the specified key. @param toKey upper bound of the keys in the returned map @param inclusive whether the upper bound is included @return ImmutableSortedMap with keys less than (or equal to if inclusive) toKey
555 Returns a submap containing entries with keys greater than or equal to fromKey. @param fromKey the key to start retrieval from @param inclusive true if including fromKey in the result @return ImmutableSortedMap with specified range
556 Checks if the domain has a public suffix. @return true if the domain has a public suffix at index 0, false otherwise
557 Checks if the domain has a public suffix. @return true if a public suffix exists, false otherwise
558 Checks if the domain is under a public suffix. @return true if the domain has a public suffix, false otherwise
559 Checks if the domain is at the top level of its private registry. @return true if the domain is a top-level private domain, false otherwise
560 Checks if the domain has a registry suffix. @return true if registry suffix index is 0, false otherwise
561 Checks if the domain name has a registry suffix. @return true if registry suffix exists, false otherwise
562 Checks if the domain has a registry suffix. @return true if the domain has a valid registry suffix, false otherwise
563 Checks if the domain has no subdomains under its registry suffix. @return true if top-level, false otherwise
564 Creates an ImmutableSortedMap from entries with a specified comparator. @param entries iterable of key-value pairs to include @param comparator key comparator for sorting @return ImmutableSortedMap with sorted and unique keys
565 Creates an immutable sorted map from a given SortedMap. Uses the map's comparator or natural ordering if none is provided. @param map original SortedMap to copy @return ImmutableSortedMap with the same entries as the input map
566 Creates an immutable copy of the set. @return ImmutableSet containing all elements from the current set
567 Retrieves raw types associated with the generic type. @return ImmutableSet of raw types in descending order by hierarchy level
568 Removes and returns the element at the specified index. Adjusts heap structure to maintain order. @param index position of the element to remove @return MoveDesc object describing changes or null if no swap occurs
569 Computes the integer square root of a BigInteger with specified rounding mode. @param x non-negative BigInteger value to compute the square root for @param mode rounding mode to apply @return integer square root of x, rounded according to specified mode @throws IllegalArgumentException if x is negative @throws ArithmeticException if rounding is required but unnecessary
570 Creates an immutable set from an iterator. Handles empty, single-element, and multi-element cases efficiently. @param elements the iterator providing elements for the set @return ImmutableSet containing all elements from the iterator
571 Recursively scans a directory for resources. @param directory the directory to scan @param packagePrefix prefix for resource names @param currentPath set of visited directories to avoid cycles @param builder collects ResourceInfo objects @throws IOException if an I/O error occurs
572 Extracts classpath files from a JAR's manifest. @param jarFile the JAR file to process @param manifest the manifest of the JAR, may be null @return ImmutableSet of File objects representing classpath entries
573 Retrieves the raw supertype of the generic type. Uses getRawTypes() to determine the runtime type. @return Class representing the raw supertype
574 Finds the greatest k elements from an iterable using a reversed comparator. @param iterable source of elements to compare @param k number of greatest elements to retrieve @return List containing the top k greatest elements sorted by comparator
575 Waits for all services to stop within a specified timeout. Converts Duration to nanoseconds and handles overflow. @param timeout maximum time to wait as Duration @throws TimeoutException if not all services stop in time
576 Returns an executor service with graceful shutdown capabilities. @param executor the ThreadPoolExecutor to configure @return configured ExecutorService with delayed shutdown hook
577 Wraps a ThreadPoolExecutor with graceful shutdown capabilities. @param executor the ThreadPoolExecutor to enhance @param terminationTimeout timeout for service termination @return ExecutorService configured for delayed shutdown
578 Wraps a scheduled thread pool executor with exiting capabilities. @param executor the ScheduledThreadPoolExecutor to enhance @return ScheduledExecutorService configured for graceful shutdowns
579 Wraps a scheduled thread pool executor with an exiting service using a specified duration. @param executor the ScheduledThreadPoolExecutor to manage @param terminationTimeout timeout for service termination as a Duration @return ScheduledExecutorService configured with daemon threads and shutdown hooks
580 Evicts entries to maintain segment weight limits. @param newest the most recently added entry
581 Waits for all services to become healthy within a specified duration. Converts Duration to nanoseconds and handles overflow. @param timeout maximum time to wait @throws TimeoutException if not all services are healthy within the timeout
582 Converts service startup times to durations. @return ImmutableMap of Service to Duration representing startup times
583 Retrieves annotations of a specific type for this parameter. @param annotationType the class of the annotation to retrieve @return an array of annotations of the specified type, or empty if none found
584 Creates a non-fair reentrant lock with cycle detection. @param lockName unique identifier for the lock @return ReentrantLock instance
585 Creates a non-fair reentrant read-write lock with cycle detection. @param lockName unique identifier for the lock @return ReentrantReadWriteLock instance with non-fair policy
586 Validates the syntax of domain name parts. @param parts list of domain parts to validate @return true if all parts are valid, false otherwise
587 Registers an object as a listener for specific events. @param listener the object containing event handler methods
588 Unregisters event subscribers associated with a listener. @param listener object containing event handler methods to unregister
589 Creates an ImmutableNetwork builder from the current configuration. @return ImmutableNetwork.Builder with specified node and edge types
590 Creates an induced subgraph from a given graph and set of nodes. @param graph source graph to extract subgraph from @param nodes iterable collection of nodes for the subgraph @return MutableGraph containing specified nodes and their edges
591 Creates a mutable copy of the given graph. @param graph source graph to be copied @return MutableGraph object with same nodes and edges as input graph
592 Creates an immutable value graph builder. @return ImmutableValueGraph.Builder configured with current settings
593 Filters a filtered map with an additional predicate. @param map the original filtered bi-map @param entryPredicate the extra condition for entries to satisfy @return a new FilteredEntryBiMap with combined filtering
594 Filters a navigable map based on an entry predicate. @param unfiltered the original map to filter entries from @param entryPredicate the condition for entries to be included @return a new filtered navigable map
595 Filters entries of a sorted map based on a predicate. @param unfiltered the original sorted map to filter @param entryPredicate the condition for entries to be included @return a new SortedMap with filtered entries
596 Filters map entries by their values. @param unfiltered the original map to filter @param valuePredicate condition for filtering entry values @return a new Map with entries having values that satisfy the predicate
597 Creates a Collector that gathers elements into an ImmutableMap. @param keyFunction extracts keys from each element @param valueFunction extracts values from each element @param mergeFunction merges values for duplicate keys @return Collector producing an ImmutableMap
598 Creates a collector for ImmutableRangeMap. @param keyFunction extracts range key from element @param valueFunction extracts value from element @return Collector to build ImmutableRangeMap
599 Creates an ImmutableSortedMultiset from a collection of elements using natural ordering. @param elements source of elements to add to the multiset @return ImmutableSortedMultiset instance or empty if input is empty
600 Builds and returns an immutable sorted multiset. Utilizes the provided comparator to order elements. @return ImmutableSortedMultiset instance with sorted elements
601 Creates a wildcard type with an upper bound. @param upperBound the upper bound type @return WildcardType object representing "? extends upperBound"
602 Creates a wildcard type with the specified lower bound. @param lowerBound the lower bound of the wildcard type @return a WildcardType instance representing the supertype
603 Generates ordered permutations of a collection. @param elements iterable of elements to permute @param comparator comparator for element ordering @return Collection of ordered permutations
604 Converts the iterable to a sorted immutable list. @param comparator comparator for sorting elements @return ImmutableList of sorted elements
605 Creates an immutable list from the given collection. @param elements source collection of elements @return ImmutableList containing all elements from the collection
606 Builds an immutable bi-directional map from accumulated entries. @return ImmutableBiMap instance or throws if invalid state
607 Constructs an immutable map and throws on duplicate keys. @return ImmutableMap instance based on builder's state
608 Constructs an immutable map without throwing on duplicate keys. @return ImmutableMap instance based on builder's state
609 Returns an immutable submap with keys less than the specified key. @param toKey upper bound of the keys in the returned map @return ImmutableSortedMap with keys less than toKey
610 Returns a submap with keys in the specified range. @param fromKey lower bound of the keys @param fromInclusive true if including fromKey @param toKey upper bound of the keys @param toInclusive true if including toKey @return ImmutableSortedMap with keys between fromKey and toKey
611 Retrieves a submap with keys greater than or equal to fromKey. @param fromKey the key to start retrieval from @return ImmutableSortedMap containing entries with keys >= fromKey
612 Creates an ImmutableSortedMap from entries using natural ordering. @param entries iterable of key-value pairs to include @return ImmutableSortedMap with sorted and unique keys based on natural order
613 Creates an ImmutableSortedMap from the given map using natural ordering. @param map input map to convert @return ImmutableSortedMap with entries sorted by natural key order
614 Creates an immutable sorted map from a given map and comparator. @param map input map to convert @param comparator key comparator for sorting @return ImmutableSortedMap with sorted entries
615 Computes the Cartesian product of multiple sets. @param sets list of input sets @return a set of lists representing the Cartesian product
616 Removes the exact element from the queue. @param target object to be removed @return true if element is found and removed, false otherwise
617 Removes and returns the element at the specified index. @param index position of the element to remove @return removed element
618 Creates an immutable set from the given iterable. @param elements the source of elements for the set @return ImmutableSet containing all elements from the iterable
619 Creates an Invokable for a constructor. @param constructor the Constructor object to wrap @return Invokable representing the constructor
620 Checks if the current type is a subtype of the specified supertype. @param supertype the type to check against @return true if this type is a subtype, false otherwise
621 Retrieves an Invokable for a specified method. Validates that the method is declared by the current raw type. @param method the Method to wrap @return Invokable object representing the method
622 Attempts to expire and remove outdated cache entries. @param now current time in nanoseconds
623 Creates a new WithExplicitOrdering instance for an enum class. @param enumClass the enum class to process @param policy concurrency policy to enforce @return WithExplicitOrdering instance configured with lock graph nodes
624 Registers an object as an event listener. @param object the object with event handler methods
625 Unregisters event listeners associated with an object. @param object listener to be unregistered
626 Creates an ImmutableGraph builder from the current configuration. @return ImmutableGraph.Builder instance with generic type N1
627 Filters entries of a BiMap based on a predicate. @param unfiltered the original bi-map to filter @param entryPredicate the condition for entries to satisfy @return a new FilteredEntryBiMap with filtered entries
628 Filters navigable map entries by key predicate. @param unfiltered the original map to filter keys from @param keyPredicate condition for keys to be included @return a new filtered navigable map
629 Filters a navigable map by values using a predicate. @param unfiltered the original map to filter entries from @param valuePredicate condition to evaluate on entry values @return a new filtered navigable map
630 Filters entries in a sorted map by key. @param unfiltered the original sorted map to filter @param keyPredicate condition for keys to be included @return a new SortedMap with filtered entries based on key predicate
631 Filters entries of a sorted map by their values. @param unfiltered the original sorted map to filter @param valuePredicate condition to evaluate on entry values @return a new SortedMap with filtered entries based on value predicate
632 Creates an immutable sorted multiset from an iterator. @param comparator custom comparator for element ordering @param elements iterator providing elements to add @return ImmutableSortedMultiset instance with sorted elements
633 Constructs a set of LocationInfo objects from the given class loader. @param classloader the ClassLoader to inspect for resources @return ImmutableSet of LocationInfo containing file and class loader pairs
634 Determines the subtype of a component type from an array of bounds. @param bounds array of type bounds @return Type representing the subtype or null if not found
635 Creates a new array type from the given component type. Handles wildcard types by processing their bounds. @param componentType the type of components in the array @return Type representing the new array
636 Generates ordered permutations of an iterable using natural ordering. @param elements iterable of comparable elements to permute @return collection of ordered permutations
637 Creates an immutable multiset from the specified iterable. @param elements the iterable containing elements to add @return ImmutableMultiset containing the specified elements or empty if none provided
638 Creates an immutable multiset from an iterator of elements. @param elements source iterator providing the elements @return ImmutableMultiset containing all elements from the iterator
639 Creates an immutable multiset with entries sorted by descending count. @param multiset the input multiset to process @return ImmutableMultiset with elements ordered by highest count first
640 Generates all permutations of a collection. @param elements source collection of elements to permute @return Collection containing all permutations as lists
641 Creates an immutable list from the given iterable. @param elements iterable providing elements to include @return ImmutableList containing all elements from the iterable
642 Creates an immutable copy of the given RangeSet. @param rangeSet the RangeSet to copy @return ImmutableRangeSet containing all ranges from the input set
643 Creates an ImmutableSortedSet from a SortedSet. @param sortedSet the input SortedSet to copy @return an ImmutableSortedSet with elements and order preserved
644 Reads all lines from the character source. @return ImmutableList containing all read lines @throws IOException if an I/O error occurs during reading
645 Constructs an immutable map from the builder's entries. @return ImmutableClassToInstanceMap instance based on builder's state
646 Constructs an ImmutableListMultimap from map entries. @param mapEntries collection of key-value pairs @param valueComparator optional comparator for values @return Immutable list multimap with sorted or unsorted values
647 Builds an immutable map instance. @return ImmutableMap based on builder's state or throws if duplicate keys exist
648 Creates an ImmutableSetMultimap from a collection of map entries. @param mapEntries collection of key-value pairs where values are collections @param valueComparator comparator for sorting values, or null for unordered sets @return ImmutableSetMultimap instance containing the entries
649 Converts a Properties object to an ImmutableMap. @param properties source Properties object @return ImmutableMap containing key-value pairs from the Properties
650 Creates an immutable map from a collection, mapping each element to its index. @param list the collection of elements to be indexed @return ImmutableMap with elements as keys and their indices as values
651 Builds an immutable map from the current builder state. @return ImmutableTypeToInstanceMap instance based on builder's entries
652 Constructs a new TypeTable with additional mappings. @param mappings map of TypeVariableKey to Type representing new bindings @return new TypeTable instance including updated mappings
653 Converts an iterator of keys and a value function into an ImmutableMap. @param keys Iterator providing the map keys @param valueFunction Function to compute values from keys @return ImmutableMap with keys mapped to their computed values
654 Returns a submap with keys in the specified range. @param fromKey lower bound of the keys @param toKey upper bound of the keys @return ImmutableSortedMap with keys between fromKey (inclusive) and toKey (exclusive)
655 Collects elements into an immutable sorted map. @param comparator key comparator for the sorted map @param keyFunction function to extract keys from elements @param valueFunction function to extract values from elements @param mergeFunction function to resolve conflicts between values @return Collector that accumulates elements into an ImmutableSortedMap
656 Removes and returns the maximum element from the queue. Returns null if the queue is empty.
657 Removes and returns the maximum element from the queue. Throws NoSuchElementException if the queue is empty. @return The removed maximum element
658 Converts the iterable to an immutable set. @return ImmutableSet containing all elements from the delegate iterable
659 Checks if this type is a supertype of the given type. @param type the TypeToken to compare against @return true if this type is a supertype, false otherwise
660 Checks if this type token represents a supertype of the specified type. @param type the type to check against @return true if this type is a supertype, false otherwise
661 Checks if this type token is a subtype of another type. @param type the TypeToken to check against @return true if this type is a subtype, false otherwise
662 Drains reference queues for keys and values. Checks and processes weak references to reclaim entries safely.
663 Filters a BiMap by keys using a predicate. @param unfiltered the original bi-map to filter @param keyPredicate condition for keys to satisfy @return a new FilteredEntryBiMap with filtered entries
664 Filters entries of a BiMap based on a value predicate. @param unfiltered the original bi-map to filter @param valuePredicate condition to evaluate on entry values @return a new FilteredEntryBiMap with filtered entries
665 Creates an immutable sorted multiset from an iterator using natural ordering. @param elements iterator providing elements to add @return ImmutableSortedMultiset instance with sorted elements
666 Converts a class to its generic type token. Handles array and parameterized types. @param cls the class to convert @return TypeToken representing the generic type
667 Converts the iterable to an immutable multiset. @return ImmutableMultiset containing elements from the delegate iterable or empty if none
668 Builds an immutable multiset from the current contents. @return ImmutableMultiset containing elements added to this builder
669 Computes the Cartesian product of multiple lists. @param lists input lists representing dimensions @return List of Lists containing all combinations
670 Parses a cache specification string into a CacheBuilderSpec. @param cacheBuilderSpecification string representation of cache settings @return CacheBuilderSpec object configured from the input string
671 Converts the iterable to an immutable list. @return ImmutableList containing all elements from the delegate iterable
672 Lists files in a directory. @param dir directory path to list files from @return ImmutableList of file paths or empty if none found @throws IOException if an I/O error occurs
673 Constructs an InternetDomainName object by normalizing and validating the given domain name. @param name raw domain name string to be processed
674 Aggregates multiple ListenableFutures into a single future. @param futures iterable of ListenableFutures to aggregate @return ListenableFuture containing results from all input futures
675 Combines multiple listenable futures into a single combiner. @param futures iterable of listenable futures to combine @return FutureCombiner that aggregates all input futures
676 Combines multiple listenable futures to wait for all successful completions. @param futures iterable of futures to combine @return FutureCombiner that aggregates results from all futures
677 Aggregates results from a collection of ListenableFutures. @param futures iterable of ListenableFutures to aggregate @return ListenableFuture containing list of results, ignoring failures
678 Converts an iterable of ListenableFutures to a GWT-compatible array. @param futures iterable of ListenableFutures @return array of ListenableFutures
679 Creates an immutable range set from a collection of ranges. @param ranges iterable of Range objects to be combined @return ImmutableRangeSet containing the union of all input ranges
680 Computes the intersection of this range set with another. @param other the RangeSet to intersect with @return ImmutableRangeSet representing the intersection
681 Computes the difference between this set and another RangeSet. @param other the RangeSet to subtract from this set @return a new ImmutableRangeSet representing the difference
682 Creates a collector for an immutable bi-directional map from input elements. @param keyFunction extracts keys from input elements @param valueFunction extracts values from input elements @return Collector for ImmutableBiMap
683 Creates an immutable map from the given class-instance mapping. @param map source map with class types as keys and corresponding instances as values @return ImmutableClassToInstanceMap instance based on input map
684 Creates an immutable copy of the given multimap. @param multimap the multimap to copy @return a new ImmutableListMultimap instance with the same key-value pairs
685 Builds an ImmutableMultimap from added entries. @return the constructed ImmutableMultimap
686 Merges a range with a value using a remapping function. @param range the range to merge @param value the value associated with the range @param remappingFunction function to resolve conflicts between existing and new values
687 Builds an immutable sorted set multimap. @return ImmutableSetMultimap instance with entries sorted by key and values
688 Creates an immutable map from iterator values with unique keys. @param values iterator of values to be indexed @param keyFunction function to extract keys from values @return ImmutableMap with unique keys or throws on duplicates
689 Generates all possible combinations of a given set with a specified size. @param set the input set from which to generate combinations @param size the size of each combination @return a set containing all combinations of the specified size
690 Creates an immutable copy of a given graph. @param graph the source graph to copy @return ImmutableGraph instance representing the copied graph
691 Creates a new TypeResolver with additional type mappings. @param mappings map of TypeVariableKey to Type representing new bindings @return new TypeResolver instance including updated mappings
692 Converts an iterable of keys and a value function into an ImmutableMap. @param keys Iterable providing the map keys @param valueFunction Function to compute values from keys @return ImmutableMap with keys mapped to their computed values
693 Retrieves and removes the minimum element from the queue. @return the smallest element or null if the queue is empty
694 Adds an element to the priority queue. @param element the element to add @return true if addition is successful, false if it exceeds max size and element is removed
695 Retrieves all ClassInfo objects from resources. @return Immutable set of ClassInfo instances
696 Retrieves top-level class information from resources. @return ImmutableSet of ClassInfo objects representing top-level classes
697 Performs a breadth-first traversal starting from specified nodes. @param startNodes initial set of nodes to traverse from @return Iterable representing the traversal order
698 Performs a pre-order depth-first traversal starting from given nodes. @param startNodes initial set of nodes to traverse @return Iterable of nodes in pre-order sequence
699 Performs depth-first post-order traversal on validated nodes. @param startNodes initial set of nodes to traverse @return Iterable of traversed nodes in post-order
700 Scans specified files for resources. @param scannedFiles set of already scanned files @return ImmutableSet of ResourceInfo objects found @throws IOException if an I/O error occurs during scanning
701 Specializes the invokable to a more specific return type. @param returnType the expected return type @return specialized Invokable with the specified return type @throws IllegalArgumentException if returnType is not a supertype of the current return type
702 Attempts to safely drain reference queues for cache entries. Acquires a lock before draining and ensures it's released afterward.
703 Resolves a given Java Type to its actual representation. @param type the Type to resolve @return resolved Type or original if not applicable
704 Checks if the runtime type matches a formal type, handling wildcard types. @param formalType the formal type to compare against @param declaration type variable with declared bounds @return true if the runtime type is compatible with the formal type
705 Canonicalizes a type argument. Handles wildcard types by removing redundant bounds; otherwise, recursively canonicalizes wildcards. @param declaration type variable with declared bounds @param typeArg the type argument to canonicalize @return canonicalized Type
706 Creates a CacheBuilder instance from a specification string. @param spec cache configuration specification @return configured CacheBuilder object
707 Disables caching by setting maximum size to zero. @return CacheBuilderSpec object with disabled caching
708 Creates an InternetDomainName object from a string. @param domain raw domain name string to be processed @return InternetDomainName object
709 Converts futures to complete in order. @param futures iterable of ListenableFutures @return immutable list of ListenableFutures that complete in order
710 Computes the union of this range set with another. @param other RangeSet to be combined with this one @return ImmutableRangeSet containing all ranges from both sets
711 Creates an immutable copy of the given multimap. @param multimap the multimap to copy @return a new ImmutableMultimap instance with the same key-value pairs
712 Constructs an ImmutableMultimap from added entries. @return the constructed ImmutableMultimap instance
713 Creates a collector that builds an ImmutableMap from elements. @param keyFunction function to extract keys from elements @param valueFunction function to extract values from elements @return Collector building an ImmutableMap with extracted keys and values
714 Creates an ImmutableSetMultimap with a single key-value pair. @param k1 the key to add @param v1 the value associated with the key @return ImmutableSetMultimap containing the specified key-value pair
715 Creates an ImmutableSetMultimap with two key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @return ImmutableSetMultimap containing the specified key-value pairs
716 Creates an ImmutableSetMultimap from six key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @param k3 third key @param v3 value associated with the third key @return ImmutableSetMultimap containing the specified key-value pairs
717 Creates an ImmutableSetMultimap from four key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @param k3 third key @param v3 value associated with the third key @param k4 fourth key @param v4 value associated with the fourth key @return ImmutableSetMultimap containing the specified entries
718 Creates an ImmutableSetMultimap from five key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @param k3 third key @param v3 value associated with the third key @param k4 fourth key @param v4 value associated with the fourth key @param k5 fifth key @param v5 value associated with the fifth key @return ImmutableSetMultimap containing the specified entries
719 Creates an immutable set multimap from iterable of entries. @param entries iterable containing key-value pairs to add @return ImmutableSetMultimap instance with provided entries
720 Creates an immutable set multimap from a given multimap with unordered values. @param multimap source multimap to copy entries from @return ImmutableSetMultimap instance containing the copied entries
721 Creates an immutable map from iterable values with unique keys. @param values iterable of values to be indexed @param keyFunction function to extract keys from values @return ImmutableMap with unique keys or throws on duplicates
722 Creates a new ArrayTable with specified row and column keys. @param rowKeys iterable providing row identifiers @param columnKeys iterable providing column identifiers @return initialized ArrayTable instance
723 Generates the power set of the given set. @param set input set to generate subsets from @return a set containing all possible subsets of the input set
724 Creates a RegularImmutableTable based on ordered components. @param cellList list of cells with row, column, and value @param rowSpace set of all possible rows @param columnSpace set of all possible columns @return DenseImmutableTable or SparseImmutableTable depending on density
725 Constructs an immutable graph from the current mutable configuration. @return ImmutableGraph instance representing the finalized graph structure
726 Creates an immutable copy of a given network. @param network the source network to copy @return an ImmutableNetwork instance; if input is already immutable, returns it directly
727 Creates an immutable copy of a given ValueGraph. @param graph the source graph to copy from @return ImmutableValueGraph instance
728 Creates a covariant TypeResolver for a given context type. @param contextType the Java type to analyze @return TypeResolver instance with mappings from the context type
729 Creates a TypeResolver for the given type, capturing wildcards. @param contextType the Java type to resolve @return TypeResolver with captured wildcard types
730 Creates a TypeResolver with type mappings between formal and actual types. @param formal source type @param actual target type @return new TypeResolver instance with populated mappings
731 Converts the iterable to an ImmutableMap using a value function. @param valueFunction Function to compute values from elements @return ImmutableMap with elements as keys and computed values
732 Creates a MinMaxPriorityQueue initialized with specified elements. @param initialContents initial elements to add to the queue @return configured MinMaxPriorityQueue instance
733 Adds an element to the priority queue. @param element the element to add @return always true, as elements are always added with overflow handling
734 Retrieves top-level classes by package name. @param packageName the package to filter classes by @return ImmutableSet of ClassInfo objects in the specified package
735 Retrieves top-level classes within a specified package recursively. @param packageName the base package name to search under @return ImmutableSet of ClassInfo objects matching the package
736 Performs a breadth-first traversal starting from a single node. @param startNode initial node to traverse from @return Iterable representing the traversal order
737 Initiates pre-order depth-first traversal from a single node. @param startNode the starting node for traversal @return Iterable of nodes in pre-order sequence
738 Initiates depth-first post-order traversal from a single node. @param startNode the starting node for traversal @return Iterable of traversed nodes in post-order
739 Scans all resources without prior exclusions. @return ImmutableSet of ResourceInfo objects found @throws IOException if an I/O error occurs during scanning
740 Constructs a ClassPath instance from the specified class loader. @param classloader the ClassLoader to inspect for resources @return ClassPath object containing all discovered resources @throws IOException if an I/O error occurs during resource scanning
741 Specializes the invokable to a more specific return type. @param returnType the expected return type class @return specialized Invokable with the specified return type
742 Retrieves a live value from a cache entry. @param entry the cache entry to retrieve from @param now current time in nanoseconds @return the live value or null if expired or invalid
743 Performs pre-write cleanup operations. @param now current time in nanoseconds
744 Resolves a type variable to its actual type. @param var the type variable to resolve @param forDependants table for resolving dependent types @return resolved Type or original if unresolved
745 Retrieves the generic return type of the method or constructor. @return ParameterizedType if generic, otherwise raw Class
746 Provides a serializable representation of the runtime type. @return Serializable TypeToken instance representing the resolved type
747 Creates a traverser for navigating file trees. @return Traverser object configured to traverse file paths
748 Constructs a valid HostSpecifier from a string. @param specifier host specification string @return HostSpecifier object or throws IllegalArgumentException if invalid
749 Finds an ancestor domain by removing specified levels. @param levels number of hierarchical levels to ascend @return InternetDomainName object representing the ancestor domain
750 Creates a child domain by appending a subdomain to the current domain. @param leftParts subdomain parts to be added @return InternetDomainName object representing the child domain
751 Validates if a given string is a valid internet domain name. @param name the domain name to validate @return true if valid, false otherwise
752 Creates a collector to flatten elements into an immutable list-based multimap. @param keyFunction extracts the key from each element @param valuesFunction generates a stream of values for each key @return Collector that accumulates elements into ImmutableListMultimap
753 Creates an immutable multimap with a single key-value pair. @param k1 the key @param v1 the value associated with the key @return an ImmutableListMultimap containing the key-value pair
754 Creates an ImmutableListMultimap with two key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @return ImmutableMultimap containing the specified key-value pairs
755 Creates an ImmutableListMultimap with three key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @param k3 third key @param v3 value associated with the third key @return an ImmutableMultimap containing the specified key-value pairs
756 Creates an ImmutableListMultimap with four key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @param k3 third key @param v3 value associated with the third key @param k4 fourth key @param v4 value associated with the fourth key @return ImmutableMultimap containing the specified entries
757 Creates an ImmutableListMultimap from five key-value pairs. @param k1,k2,k3,k4,k5 keys for the multimap entries @param v1,v2,v3,v4,v5 values associated with each key @return ImmutableMultimap containing the specified key-value pairs
758 Creates an immutable list multimap from the given iterable of entries. @param entries iterable containing key-value pairs to add @return a new ImmutableListMultimap instance with the provided entries
759 Indexes values by applying a key function. @param values iterator of values to index @param keyFunction function to extract keys from values @return ImmutableMultimap with indexed values
760 Creates a new MediaType with additional parameters. @param attribute parameter name to add @param values iterable of parameter values @return new MediaType instance with updated parameters
761 Converts a stream of elements into an immutable set multimap. @param keyFunction extracts the key from each element @param valueFunction extracts the value from each element @return Collector for building ImmutableSetMultimap
762 Returns the inverted multimap with keys and values swapped. Uses cached result if available to optimize performance.
763 Marks the service manager as ready. Checks for race conditions where services transition before initialization. Throws an exception if services are in unexpected states.
764 Retrieves services grouped by their current state. @return ImmutableSetMultimap with State as key and Service as value
765 Creates an immutable map from iterable values with unique keys. @param keyFunction function to extract keys from values @return ImmutableMap with unique keys or throws on duplicates
766 Creates an ArrayTable from another Table. @param table source table to initialize from @return ArrayTable instance initialized with the provided table's data
767 Builds an immutable network from the mutable one. @return ImmutableNetwork instance created from mutableNetwork
768 Builds an immutable value graph from the mutable one. @return ImmutableValueGraph instance
769 Constructs a TypeToken for the given declaring class. @param declaringClass the class declaring the generic type
770 Creates an empty MinMaxPriorityQueue. @return configured MinMaxPriorityQueue instance
771 Creates a MinMaxPriorityQueue with natural ordering. @param initialContents elements to initialize the queue @return configured MinMaxPriorityQueue instance
772 Finds all nodes reachable from a given node in a graph. @param graph the graph to traverse @param node the starting node for traversal @return an immutable set of reachable nodes
773 Retrieves an entry by key. Handles null keys by returning null. @param key the search key @return the matching ReferenceEntry or null if not found
774 Checks if a cache entry is live. @param entry the cache entry to check @param now current time in nanoseconds @return true if the entry is live and valid, false otherwise
775 Inserts a new LoadingValueReference for a key. @param key the key to insert @param hash the hash of the key @param checkTime whether to check refresh time @return LoadingValueReference or null if entry is already loading or recent
776 Performs cleanup after a read operation. Triggers cleanup periodically based on read count threshold.
777 Resolves a type variable to its actual type. @param var the type variable to resolve @param forDependants table for resolving dependent types @return resolved Type or original if unresolved
778 Executes a combining callable with specified executor and manages resources. @param combiningCallable task to execute for combining results @param executor executor for task execution @return ClosingFuture representing the combined result with resource management
779 Executes an asynchronous callable combining multiple futures. @param combiningCallable the callable to execute upon completion @param executor the executor for running the callable @return ClosingFuture representing the combined result
780 Constructs a HostSpecifier from a string. @param specifier host specification string @return HostSpecifier object @throws ParseException if the specifier is invalid
781 Validates a host specification string. @param specifier host specification string @return true if valid, false otherwise
782 Retrieves the public suffix of the domain. @return InternetDomainName object representing the public suffix or null if none exists
783 Returns the top private domain. @return InternetDomainName object representing the top private domain
784 Retrieves the registry suffix of the domain. Uses cached index if available, returns null if no suffix exists. @return InternetDomainName object representing the registry suffix or null
785 Returns the top-level domain under the registry suffix. @return InternetDomainName object representing the top-level domain
786 Retrieves the parent domain of the current domain. Throws IllegalStateException if the domain has no parent. @return InternetDomainName object representing the parent domain
787 Creates a Collector for grouping elements into an ImmutableListMultimap. @param keyFunction function to extract keys from elements @param valueFunction function to extract values from elements @return Collector that accumulates elements into an ImmutableListMultimap
788 Creates an immutable multimap with a single key-value pair. @param k1 the key @param v1 the value associated with the key @return an ImmutableMultimap containing the key-value pair
789 Creates an immutable multimap with two key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @return ImmutableMultimap containing specified key-value pairs
790 Creates an ImmutableMultimap with three key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @param k3 third key @param v3 value associated with the third key @return an ImmutableMultimap containing the specified key-value pairs
791 Creates an immutable multimap with four key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @param k3 third key @param v3 value associated with the third key @param k4 fourth key @param v4 value associated with the fourth key @return ImmutableMultimap containing the specified entries
792 Creates an ImmutableMultimap from five key-value pairs. @param k1,k2,k3,k4,k5 keys for the multimap entries @param v1,v2,v3,v4,v5 values associated with each key @return ImmutableMultimap containing the specified key-value pairs
793 Creates an immutable multimap from the given iterable of entries. @param entries iterable containing key-value pairs to add @return a new ImmutableMultimap instance with the provided entries
794 Returns an inverted version of the multimap. Uses cached result if available to improve performance. @return a new ImmutableListMultimap with keys and values swapped
795 Indexes iterable values by applying a key function. @param values iterable of values to index @param keyFunction function to extract keys from values @return ImmutableListMultimap with indexed values
796 Adds a single parameter to the media type. @param attribute parameter name @param value parameter value @return new MediaType instance with added parameter
797 Creates a new MediaType with additional parameters. @param parameters key-value pairs to add or update @return new MediaType instance with updated parameters
798 Creates a MediaType instance without character set information. @param type primary MIME type (e.g., "application") @param subtype MIME subtype (e.g., "json") @return MediaType object with no parsed charset
799 Parses a string into a MediaType. @param input the media type string to parse @return MediaType object representing the parsed type @throws IllegalArgumentException if parsing fails
800 Initializes the ServiceManager with a collection of services. @param services iterable of services to manage Logs a warning if no services are provided and substitutes a placeholder service.
801 Creates a collector to flatten elements into an ImmutableSetMultimap. @param keyFunction extracts the key from each element @param valuesFunction generates a stream of values for each key @return Collector that accumulates elements into an ImmutableSetMultimap
802 Resolves a given Java Type to its actual representation. @param type the Type to resolve @return resolved TypeToken or original if not applicable
803 Creates a MinMaxPriorityQueue with natural ordering. @param <E> type of elements, must extend Comparable @return configured MinMaxPriorityQueue instance
804 Refreshes the value for a given key using the provided loader. @param key the cache key @param hash hash code of the key @param loader CacheLoader to load the new value @param checkTime whether to check refresh time @return refreshed value or null if loading fails or is not done
805 Retrieves and records statistics for a cache value. Handles successful load, null checks, and exception recording. @param key the entry's key @param hash the entry's hash code @param loadingValueReference reference to the loading value @param newValue future representing the new value @return the loaded value @throws ExecutionException if computation threw an exception
806 Advances to the next valid cache entry. @param entry the cache entry to check @return true if a valid entry is found, false otherwise
807 Checks if the segment contains a specific value. @param value the value to search for @return true if the value is found, false otherwise
808 Indexes elements by applying a key function. @param keyFunction function to extract keys from elements @return ImmutableListMultimap with indexed elements
809 Sets the character set for this media type. @param charset the character set to use @return new MediaType instance with the specified character set
810 Returns a new MediaType instance without parameters. @return MediaType object with no parsed charset if parameters are empty; otherwise, creates a new one
811 Creates an application media type. @param subtype MIME subtype (e.g., "json") @return MediaType object representing the application type with no charset
812 Creates a MediaType instance for audio types. @param subtype MIME subtype of the audio (e.g., "mpeg") @return MediaType object representing the audio type
813 Creates a font media type with specified subtype. @param subtype MIME subtype (e.g., "woff", "ttf") @return Font MediaType object
814 Creates an image MediaType instance. @param subtype MIME subtype (e.g., "png", "jpeg") @return MediaType object representing the image type
815 Creates a text-based MediaType. @param subtype MIME subtype (e.g., "plain", "html") @return MediaType object with type "text"
816 Creates a video media type. @param subtype MIME subtype (e.g., "mp4", "avi") @return MediaType object representing the video type
817 Builds an immutable table from added cells. @return ImmutableTable instance based on the number of cells
818 Retrieves the generic superclass of a type. Handles TypeVariable and WildcardType cases. @return TypeToken representing the generic superclass or null if none exists
819 Retrieves generic interfaces for the runtime type. @return ImmutableList of TypeTokens representing generic interfaces
820 Retrieves the closest supertype of a given class. @param superclass the superclass to check against @return TypeToken representing the closest supertype or throws IllegalArgumentException if not applicable
821 Loads multiple cache entries using the provided loader. @param keys set of keys to load @param loader CacheLoader instance for loading values @return map of loaded key-value pairs or null if any key is invalid @throws ExecutionException on failure during loading
822 Advances to the next valid entry in the cache chain. @return true if a valid entry is found, false otherwise
823 Constructs an immutable table from added cells. @return ImmutableTable instance or throws exception if invalid
824 Advances to the next valid cache entry in the table. @return true if a valid entry is found, false otherwise
825 Retrieves a TypeToken for the specified subclass. @param subclass the subclass to create a TypeToken for @return TypeToken representing the subclass @throws IllegalArgumentException if subclass isn't valid or not a subtype
826 Creates an immutable table from another table. @param table the source table to copy @return ImmutableTable instance or throws exception if invalid
827 Collects elements into an ImmutableTable. @param rowFunction extracts row key from element @param columnFunction extracts column key from element @param valueFunction extracts value from element @return Collector for building ImmutableTable
