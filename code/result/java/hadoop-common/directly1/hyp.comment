1 Creates a FileRange instance with specified offset and length. @param offset starting file position @param length number of bytes in range
2 Creates a FileRange object from given parameters. @param offset starting file offset @param length file range length @param reference arbitrary reference data
3 Validates and returns a FileRange object. @param range FileRange object to validate
4 Validates object is not null and throws exception if true. @param obj Object to validate @param argName Name of argument being validated
5 Validates and masks input value as a positive integer. @param value input value to validate @param argName name of the argument being validated
6 Validates that the provided value is non-negative. @param value long integer to check @param argName name of the argument being validated
7 Validates argument presence with error message. @param isPresent true if present, false otherwise @param argName name of the argument to validate
8 Logs error message with the specified argument name if it's not valid. @param isValid true if valid, false otherwise @param argName name of the argument in question
9 Logs an error message if the input value is invalid. @param isValid true if the value is valid; false otherwise @param argName name of the argument being validated @param validValues comma-separated list of allowed values
10 Validates equality between two values with specified names. @param value1 first value to compare @param value1Name name of the first value @param value2 second value to compare @param value2Name name of the second value
11 Validates if one number is a multiple of another. @param value1 the base value @param value1Name name of the base value @param value2 the divisor value @param value2Name name of the divisor value
12 Validates that the first value is greater than the second. @param value1 first value to compare @param value1Name name of the first value @param value2 second value to compare @param value2Name name of the second value
13 Validates the relationship between two values. @param value1 first value @param value1Name name of the first value @param value2 second value @param value2Name name of the second value
14 Validates the relationship between two values. @param value1 first value @param value1Name name of first value @param value2 second value @param value2Name name of second value
15 Validates numeric value against specified inclusive range. @param value value to check @param valueName descriptive name of value @param minValueInclusive minimum allowed value (inclusive) @param maxValueInclusive maximum allowed value (inclusive)
16 Validates a double value against an inclusive minimum and maximum range. @param value value to validate @param valueName name of the value being validated @param minValueInclusive minimum allowed value (inclusive) @param maxValueInclusive maximum allowed value (inclusive)
17 Validates and filters a collection of paths based on page size and base path. @param paths Collection of paths to validate @param pageSize Maximum number of paths per page @param basePath Base directory for valid paths
18 Initializes block upload data from a given file. @param file the file containing the data to be uploaded
19 Casts snapshot to IOStatisticsSnapshot. @param snapshot object to cast
20 Creates a map of enum constants by prefix and lowercase value. @param prefix unique identifier for the enum values @param enumClass Class of the Enum to fetch constants from @return Map of prefixes to Enum values or null if duplicate found
21 Processes file ranges and returns a list of filtered results. @param input list of file ranges to process
22 Checks if a path is a direct child of another path. @param parent the parent directory @param child the potential child directory @return true if child is direct child of parent, false otherwise
23 Checks if two qualified paths have the same namespace and different file names. @param qualPath1 first path to compare @param qualPath2 second path to compare @return true if paths differ only in file name, false otherwise
24 Checks and deletes file with specified path. @param f Path to the file @return true if successful, false otherwise
25 Deletes OnExit paths and masks their associated functions.
26 Checks if a file has a valid CRC mask. @param file Path object representing the file to check
27 Checks if a file path matches a specific mask (file.ext.crc). @param file Path object to check @return true if the path matches the mask, false otherwise
28 Updates BlockLocation array based on given range and file offset. @param locations input BlockLocation array @param start start of range @param len length of range @param fileOffsetInHar file offset in HAR format @return updated BlockLocation array
29 Recursively fetches status metadata from nested file. @param o FileStatus object to retrieve metadata from
30 Converts an array of FileStatus to an array of Paths. @param stats array of file statuses @return array of Paths or null if input is null
31 Resolves file system link for the given path. @param f input path to resolve
32 Calls m1() and retrieves its m2 result. @param src source file path
33 Calls m1() and retrieves its m2() result.
34 Calls default implementation of m1().
35 Updates internal data structures with masked values. @param data input data to process
36 Validates and positions the byte array for masking operation. @param position index to start masking from @param buffer input byte array @param offset starting offset in buffer @param length number of bytes to mask
37 Validates and parses the provided upload ID. @param uploadId byte array containing the upload identifier
38 Validates and processes part handles in the provided map. @param partHandles map of PartHandle objects keyed by integer IDs
39 Computes a mask for the given file system capability. @param path file system path @return capability-specific mask as a string, or throws on invalid input
40 Constructs an IRQ handler with a given name and interrupt handler. @param name unique identifier for the handler @param handler Interrupted object to handle interrupts
41 Partitions the input list into pages of specified size. @param originalList list to be partitioned @param pageSize size of each page @return List of sublists, each representing a page
42 Initializes JSON serialization for a given class type. @param classType the class to serialize @param failOnUnknownProperties whether to fail on unknown properties during deserialization @param pretty whether to format output with indentation
43 Initializes storage statistics from given I/O statistics. @param name unique identifier @param scheme storage scheme (e.g. file system) @param ioStatistics input/output statistics to base on
44 Retrieves a map of function masks keyed by unique identifiers.
45 Creates a new FSDataOutputStream with specified permissions and configuration. @param f the file to be created @param permission file system permissions @param flags creation flags (e.g. overwrite) @param bufferSize buffer size for I/O operations @param replication data block replication factor @param blockSize block size for storage @param progress progress monitor for write operation
46 Creates a new FSDataOutputStream with specified permissions and settings. @param f the file path @param permission file system permissions @param overwrite whether to overwrite existing files
47 Constructs an instance of PathAccessDeniedException with the specified path and error message. @param path the path that caused the access denial
48 Constructs a PathPermissionException with the specified file system path. @param path file system path where the operation was denied
49 Constructs a PathNotFoundException with the specified path. @param path the non-existent file path
50 Constructs a PathExistsException with the specified file path. @param path unique file identifier
51 Constructs an IOException with the specified file path. @param path file path associated with the exception
52 Constructs a new instance of ClosedIOException with a specified file path and error message.
53 Returns a mask defining the function's behavior. Must be implemented by subclasses.
54 Returns the function mask value (m1).
55 Calculates a FUNC_MASK value from internal data. @return short integer representing the mask
56 Masks sensitive information in an array of strings using the m1 function. @param strings input string array @return modified string array with sensitive info masked
57 Returns a deprecated flag value.
58 Tries to resolve file path and returns true if successful. @param f Path object to resolve @return true if resolution is successful, false otherwise
59 Checks if PathData item has valid file mask. @param item PathData object to check @return true if valid, false otherwise
60 Returns ACL entries based on the given PathData item. @param item PathData object to determine ACL entries from
61 Legacy method to check if file exists and has a valid metadata. @param f Path object representing the file to check
62 Calculates the function mask for a given file. @param file FileStatus object @return short representing permissions and flags
63 Evaluates a mask condition based on m1() and m2(). @return true if both conditions are false, false otherwise
64 Returns the path of the symbolic link. @throws IOException if the current path is not a symbolic link
65 Returns the length of the target file in bytes. @return file length as a 64-bit integer, or -1L if unknown
66 Calculates a function mask using the provided file path. @param f Path to calculate the mask for
67 Resolves block storage policy for a given source path. @param src source file system path @return BlockStoragePolicySpi object or null if not found
68 Creates or replaces extended attributes on a file. @param path file system path @param name attribute name @param value attribute value
69 Creates an instance of IOException with I/O-related error code. @param path affected file or directory path @param cause underlying cause of the exception
70 Decompresses data at specified position and updates internal state. @param position file offset to decompress
71 Reads and returns the function mask length from input stream. @throws IOException if file is corrupt or invalid
72 Retrieves and returns a mask value from input stream. @throws IOException if an I/O error occurs.
73 Registers an expression factory with the given class. @param expressionClass Class to register
74 Registers commands for the specified registrar class. @param registrarClass Class to register commands for
75 Clips and fetches data from underlying stream. @param pos position in the stream @param b buffer to read into @param offset offset within the buffer @param length requested data length @return actual data length or -1 if invalid request
76 Reads data from underlying stream. @param pos current position @param b buffer for data @param offset starting index in buffer @param length number of bytes to read
77 Parses glob pattern and generates list of alternative strings. @param filePatternWithOffset Glob pattern with offset @return List of alternative strings or null if invalid pattern
78 Returns directory entries for a given file path. @param f the file path to retrieve directory entries for @return DirectoryEntries object containing file status array and other metadata
79 Encodes a byte array using the specified codec. @param value input byte array @param encoding encoding scheme (HEX, BASE64, or UTF-8) @return encoded string or null if invalid encoding
80 Filters file statuses based on a provided filter, adding matching statuses to the result list. @param results list of filtered FileStatus objects @param f directory path to scan @param filter PathFilter instance for filtering files
81 Constructs a new MetricsTag instance with provided info and value. @param info MetricsInfo object containing tag details @param value Tag value string
82 Initializes an AbstractMetric instance with given metrics information. @param info MetricsInfo object containing metric details
83 Retrieves a new delegated token using Kerberos authentication. @param url Hadoop service URL @param token existing token with authentication information @param renewer user or service to delegate as @param doAsUser user to impersonate @return new delegationToken or null on failure
84 Authenticates and fetches data from the given URL using Kerberos delegation. @param url URL to access @param token authentication token with delegating capabilities @param doAsUser user ID for which to perform operation @return operation result (long) or throws exception on failure
85 Authenticates with Kerberos using a delegation token. @param url URL to authenticate against @param token Token containing the delegation token @param doAsUser User to impersonate during authentication
86 Initializes ValueQueue with specified parameters and settings. @param numValues total number of values @param lowWatermark watermark threshold as a fraction (0 < x <= 1) @param expiry time-to-live for cache entries in milliseconds @param numFillerThreads number of threads to refill queues @param policy synchronization generation policy @param refiller queue refiller instance
87 Validates an object instance against a null check message. @param obj object to validate
88 Retrieves or computes storage statistics by name. @param name unique identifier @param provider optional provider to compute stats @return StorageStatistics object or null if not found
89 Updates global storage statistics using m1() function.
90 Closes the block upload data and deletes associated files. @throws IOException on I/O errors
91 Copies a file using platform-specific native method or standard Java I/O. @param src source file to copy @param dst destination file path
92 Closes and masks the provided input stream. @param stream input stream to close and mask
93 Closes all provided Closeable streams and/or resources. @param streams zero or more Closeable objects to be closed
94 Deletes a file and updates its metadata. @param file File object to be deleted
95 Performs mask-related operations. Invokes methods m1 and m3 through fos, an object of unknown type.
96 Updates function mask with statistics and logs. @param failed boolean indicating failed state
97 Updates and returns the previous buffer size. @param newCount new buffer size
98 Retrieves an InetSocketAddress from the web server's connectors list. @param index position of the connector in the list @return InetSocketAddress object or null if invalid or not found
99 Initializes GcTimeMonitor with specified parameters. @param observationWindowMs time window for monitoring @param sleepIntervalMs interval between checks @param maxGcTimePercentage maximum GC time percentage threshold @param alertHandler handler for sending alerts
100 Generates function mask by combining servlet name and path. @param request HTTP request object @param servletName unique identifier for the servlet
101 Compares two FileStatus objects using deep equality. @param o FileStatus object to compare with @return true if equal, false otherwise
102 Calls m1() to fetch intermediate result and delegates execution of m2().
103 Updates mask with new sum and increments counter. @param sampleCount current count of samples @param newSum new sum value for updating mask
104 Merges two MeanStatistic objects into one. @param other MeanStatistic object to merge with @return merged MeanStatistic object
105 Formats a StringBuilder with key-value pairs from a map, separated by a separator. @param sb StringBuilder to append the formatted string @param type Type identifier (e.g. "User") @param map Map of key-value pairs @param separator Separator between key-value pairs
106 Invokes recursive M3 function with key-value pair's components. @param entry a map entry containing key and value
107 Increments duration tracker with given key and count. @param key unique tracking identifier @param count duration value to add (in milliseconds)
108 Creates a statistic from map entry key-value pairs. @param e map entry containing metric values
109 Initializes map of statistics with passthrough function.
110 Evaluates function with specified mask and key. @param key identifier for evaluation @param eval function to be evaluated
111 Evaluates a gauge with a custom function. @param key unique gauge identifier @param eval custom function to apply to key
112 Evaluates the specified function on the given key and updates the minimums. @param key unique identifier @param eval function to be evaluated (returns a Long value)
113 Evaluates and stores function result in maximums.m1. @param key unique identifier @param eval function to evaluate
114 Evaluates mean statistic using provided function. @param key unique identifier @param eval statistical evaluation function
115 Returns an IOStatisticsSource instance wrapping the provided statistics. @param statistics IOStatistics object to be wrapped
116 Returns an empty IO statistics store with default mask. @return EmptyIOStatisticsStore instance with default mask
117 Returns an empty IO statistics instance.
118 Retrieves and returns a mask value from the counter map using the provided key. @param key unique identifier or key to look up in the counter map
119 Retrieves atomic long value associated with given key from maximum map. @param key unique identifier of the value to fetch
120 Retrieves the minimum value mask from the minimum map. @param key unique key identifier
121 Retrieves the atomic long value associated with the given key from gaugeMap. @param key unique identifier for the atomic long value
122 Retrieves the mean statistic for the given key. @param key unique identifier for the statistic
123 Delegates to firstDuration's m1() method. @return Duration object from firstDuration's calculation.
124 Sets the wrapped statistics object. @param wrapped new statistics object to be wrapped
125 Returns the dynamically generated I/O statistics instance. @return DynamicIOStatistics object or null if not built
126 Validates that FlagSet is mutable before performing an operation. @throws IllegalArgumentException if FlagSet is immutable.
127 Loads block data from file or stream. @throws IOException on I/O errors
128 Initializes a signal handler with the given name. @throws IllegalArgumentException if initialization fails
129 Checks if the object is closed based on its reference count. @return true if the object is closed, false otherwise
130 Creates a deep copy of the provided map's values using the specified function. @param source original map @param copyFn function to apply to each value during copying @return copied map with same keys and updated values
131 Computes and returns a masked result using the provided factory, statistic, and input. @param factory DurationTrackerFactory instance @param statistic statistic to be processed @param input CallableRaisingIOE containing computation logic @return B result object or throws IOException if an error occurs
132 Combines two duration tracker factories into a single factory. @param first primary factory @param second secondary factory
133 Returns functional mask value from RPC client.
134 Returns the mask value from RPC slow calls. @return The masked value as a long integer
135 Returns the function mask value from RPC requeue calls. @return The function mask value as a long integer.
136 Clears IO statistics context and logs the action. @param id unique identifier for logging purposes
137 Initializes an IO statistics snapshot object. Creates internal data structures.
138 Returns true if m1() returns true. @return result of IOStatisticsContextIntegration.m1()
139 Initializes BuiltInGzipDecompressor with default state.
140 Encrypts and initializes encryption context with a given key. @throws IOException if an I/O error occurs
141 Calculates the optimal buffer size for crypto operations. @param codec CryptoCodec object @param bufferSize initial buffer size @return adjusted buffer size, ensuring it's a multiple of codec's minimum block size
142 Copies source file to destination using native method or fallback implementation. @param src source file @param dst destination file
143 Initializes checksum calculator with CRC and MD5 parameters. @param bytesPerCRC number of bytes per CRC calculation @param crcPerBlock initial CRC value for each block @param md5 MD5 hash object
144 Constructs an MD5MD5CRC32FileChecksum object with default values.
145 Initializes an instance of the checksum class with specified parameters. @param bytesPerCRC number of bytes per CRC value @param crcPerBlock initial CRC value for each block @param md5 MD5 hash object
146 Compiles a glob string into a regular expression pattern. @param glob the input glob string
147 Delegates file status iteration to underlying File System. @param f Path to iterate over @return iterator of FileStatus objects or null if not found
148 Resolves file path to canonical representation. @param file the file object @param makeCanonicalPath whether to resolve to absolute path or not
149 Extracts POSIX file permissions from a given mode. @param mode numeric file mode
150 Validates and executes function mask operation. @throws IOException if invalid command string is encountered
151 Validates the combined length of shell commands. @param commands variable number of shell command strings
152 Builds and executes a PowerShell script to terminate a process at a specific host. @param processName name of the process to terminate @param host hostname where the process is running @return generated PowerShell script as a string or null on failure
153 Calls the underlying sum calculation method. @return result of sum calculation
154 Calculates optimal buffer size based on data size and m1 result. @param dataSize total data size @return optimal buffer size
155 Computes mask bytes based on given Checksum and size. @param sum Checksum object @param checksumSize size of checksum @return array of mask bytes or null if invalid input
156 Updates bytes read by incrementing the internal counter. @param newBytes number of additional bytes read
157 Updates bytes written counter with new data. @param newBytes additional bytes to add to the total
158 Increments the read operations counter by specified amount. @param count number of operations to increment by
159 Increments large read operations counter by specified count. @param count number of large read operations to increment
160 Increments write operations by specified count. @param count number of operations to increment by
161 Updates bytes read erasure coded value. @param newBytes number of new bytes to add
162 Updates bytesRead counters based on distance. @param distance network distance (0-4) @param newBytes number of bytes to increment
163 Updates remote read time in milliseconds. @param durationMS time to add (in ms)
164 Aggregates statistics from root data and referenced sub-data. @param visitor StatisticsAggregator object to process data @return aggregated result of type T or null if failed
165 Initializes ContentSummary object from Builder. @param builder ContentSummary builder instance
166 Initializes checksum calculator with default settings.
167 Returns a ChecksumOpt instance with NULL data type and invalid mask value.
168 Validates and extracts create flags from the provided EnumSet. @param flag EnumSet containing CreateFlag options
169 Validates URI scheme against a supported scheme. @param uri URI object to validate @param supportedScheme expected scheme (e.g. http, https)
170 Constructs an InvalidPathException with the specified invalid path name. @param path the invalid path name
171 Constructs an InvalidPathException with the specified path and optional reason. @param path invalid file system path @param reason optional reason for the invalid path (may be null)
172 Returns the first non-null element from an array of objects. @param inputs array of objects to search @return first non-null object or throws exception if all null
173 Returns the first non-null element from an array of inputs. @param inputs array of values to search @throws HadoopIllegalArgumentException if all elements are null
174 Validates and ensures all input buffers are non-null and match the expected length. @param buffers array of byte arrays to be validated
175 Validates and checks consistency of ByteBuffer array. @param buffers array of ByteBuffers to check
176 Validates and sanitizes input buffers. @param buffers array of byte arrays to be validated
177 Validates and checks consistency across an array of ByteBuffer objects. @param buffers Array of ByteBuffers to validate
178 Closes a proxy object, invoking its close method if available. @param proxy Object to be closed
179 Computes checksum options by merging default and user settings. @param defaultOpt default checksum options @param userOpt user-provided checksum options @param userBytesPerChecksum number of bytes per checksum for user option (0 to use default) @return merged ChecksumOpt object or null if invalid input
180 Returns the default port value from the file system implementation. @param theFsImpl File system instance @return Default port number or DELEGATE_TO_FS_DEFAULT_PORT if not set
181 Reconstructs a URI with corrected fragment and scheme. @param uri input URI to modify @return modified URI or original if unchanged
182 Calls file system's m1 method to manage replica count. @param src Path object representing source location @param replication short value specifying number of replicas @return true if successful, false otherwise
183 Performs FTP client logout and disconnection. @param client active FTPClient instance
184 Calls child node's m1() method. Throws IOException if any I/O error occurs.
185 Legacy constructor for deprecated ContentSummary objects.
186 Constructs a ContentSummary object with specified metrics. @param length total content length @param fileCount number of files @param directoryCount number of directories @param quota overall storage quota @param spaceConsumed consumed space in bytes @param spaceQuota allocated space quota in bytes
187 Calculates time units from milliseconds until next renewal. @param unit requested time unit (e.g. TimeUnit.MINUTES) @return equivalent value in the specified unit
188 Updates the renewal time based on the provided delay. @param delay time to be added to the current time, with a 10% adjustment
189 Updates last activity timestamp using current system time. @param none @return none
190 Waits for a specified duration by sleeping and checking time periodically. @param millis milliseconds to wait
191 Returns current time in milliseconds.
192 Awaits termination of all async disk services within a specified time limit. @param milliseconds maximum wait duration in milliseconds @return true if all services terminated, false on timeout or exception
193 Validates CRC32 checksums in a file. @param sumsBytes ByteBuffer containing CRC32 values @param sumsOffset offset of CRC32 values in sumsBytes @param data ByteBuffer containing file data @param dataOffset offset of file data in data ByteBuffer @return validated file data ByteBuffer
194 Opens an FSDataInputStream to the specified file. @param f the Path object pointing to the file
195 Calculates functional mask based on file size and internal calculations. @param file Path to file (not used in calculation) @param fileSize size of the file @return calculated function mask value
196 Returns a default FsStatus object with maximum values.
197 Registers file mode commands with the CommandFactory. @param factory CommandFactory instance to register commands with
198 Registers find command with given CommandFactory. @param factory instance of CommandFactory to register command
199 Configures command factory with count mask. @param factory CommandFactory instance to configure
200 Legacy constructor to initialize CommandFormat with name and bounds. @param name command identifier @param min minimum value @param max maximum value @param possibleOpt optional parameters (varargs)
201 Wraps a Callable raising IO exception in a CompletableFuture. @param callable function to be executed with potential IO exception
202 Wraps mandatory key validation with additional error text. @param knownKeys existing keys to validate against @param extraErrorText custom error message for missing keys
203 Retrieves capability values from namesToValues pipeline.
204 Builds a URI header for auditor. @return Header string or empty if construction failed
205 Initializes a WeakReferenceMap with a provided key-value factory and an optional callback for lost references. @param factory function to create values when keys are not yet stored @param referenceLost callback to invoke when a weakly referenced key is garbage collected (optional)
206 Writes function mask to output stream. @param out OutputStream to write to @param capability Function capability string
207 Checks if input stream matches specified capability mask. @param in InputStream to check @param capability Capability mask string
208 Executes Hadoop job with specified executor and timeout settings. @param logger logging instance @param timeout execution timeout in specified time unit @param unit timeout time unit (e.g. SECONDS, MINUTES)
209 Returns a mask value using m1 with enable parameter set to true. @return Masked value of type T
210 Returns a function mask value using m1 with false flag. @return Function mask value of type T
211 Calculates the function mask value based on size and item counts. @return calculated function mask integer value
212 Initializes SingleFilePerBlockCache with prefetching statistics, max blocks count, and duration tracker factory. @param prefetchingStatistics statistics for prefetching @param maxBlocksCount maximum number of blocks to cache @param trackerFactory factory for tracking durations
213 Constructs a SemaphoredDelegatingExecutor instance. @param executorDelegatee underlying executor service @param permitCount initial semaphore permits count @param fair whether semaphore is fair or not @param trackerFactory factory for duration tracking
214 Executes masked operation on Entry object. @param entry Entry object to process
215 Completes the function by setting state to DONE and checking checksum. @throws IllegalStateException if checksum mismatch occurs
216 Initializes DataInputStream builder with specified buffer size. @param bufSize maximum buffer size
217 Returns a DataInputStreamBuilder with the specified mask. @return DataInputStreamBuilder instance
218 Composes and returns a mask value using nested functions.
219 Computes and returns a functional mask value through nested function calls. @return The computed functional mask value of type V.
220 Returns a unique value for the given new value, or retrieves and updates an existing one. @param newVal new value to be processed
221 Validates overlap between two file ranges. @param otherOffset offset of other file range @param otherEnd end of other file range @param other other FileRange object @param minSeek minimum seek distance required @param maxSize maximum size difference allowed @return true if overlapping, false otherwise
222 Creates a bulk delete operation on the specified Path. @param path Hadoop file system path to delete files from
223 Initializes And operator mask in ExpressionFactory. @param factory ExpressionFactory instance to configure
224 Configures expression factories with print and print0 functions. @param factory ExpressionFactory instance to be configured
225 Configures ExpressionFactory with mask-related expressions. @param factory ExpressionFactory instance to configure
226 Initializes a new Name command with optional case sensitivity. @param caseSensitive true to consider input case, false otherwise
227 Retrieves CompressionCodec for the given file path. @param file Path object representing the file
228 Formats SSL factory mode into a string using a given template. @param mode SSL factory mode (e.g. PROD, DEV) @param template format string with placeholders for mode @return formatted string or null if template is invalid
229 Generates a functional mask from the module name.
230 Performs bitwise AND operation on two Result objects. @param other Result object to perform operation with @return Result object with ANDed values
231 Creates a Result instance with masked values. @return Result object containing m1() inverted and m2()
232 Creates and configures a FindOptions object for database queries.
233 Checks if an expression exists by name. @param expressionName name of the expression to check
234 Applies mask function to each expression in deque and counts results. @param exprs deque of expressions @param count number of iterations
235 Applies mask operation to deque elements. @param args deque of strings @param count number of iterations
236 Parses a string into a URI with scheme and authority. @param pathString input string to parse @return URI object or throws exception if invalid
237 Configures the order comparator based on conditionals m1(), m2(). @param none
238 Checks if mask is present. @return true if mask is available, false otherwise
239 Returns a masked version of the command name. @return Masked string representation or original name if invalid
240 Updates or clears file attributes based on the preservation flag. @param preserve true to update, false to clear attributes
241 Constructs a MetricsRecordBuilder instance. @param parent the parent MetricsCollector @param info MetricsInfo object @param rf metrics filter (record) @param mf metrics filter (metric) @param acceptable flag indicating record acceptability
242 Initializes a new ChunkedArrayList instance with specified chunk capacity and maximum size constraints. @param initialChunkCapacity the starting capacity for each chunk @param maxChunkSize the maximum allowed size for any chunk
243 Finds the index of the first default ACL entry in the builder list. @return the index or PIVOT_NOT_FOUND if not found
244 Wraps the main file system access call with IOException handling. @param path file system path
245 Validates and sets an option mask. @param option unique option identifier
246 Constructs a new TableBuilder instance with the given column headers. @param headers variable number of column headers as Objects
247 Checks if mask flag is set to zero. @return true if mask flag is zero, false otherwise
248 Initializes a new Shell instance with the specified interval. @param interval time interval in milliseconds
249 Initializes a Token object with provided credentials and metadata. @param identifier unique token identifier @param password token password bytes @param kind token type, represented as text @param service token service, represented as text
250 Initializes a new Token instance with default values.
251 Creates a new Globber instance to search for files matching the given pattern. @param fc FileContext object @param pathPattern file path pattern to match @param filter optional PathFilter for filtering results @param resolveSymlinks whether to follow symbolic links
252 Constructs a detailed error message by combining operation, path, target path, and fully qualified path details. @return formatted error message as a string
253 Handles connection setup exceptions with retry logic. @param currRetries current number of retries @param maxRetries maximum allowed retries @param ex exception encountered @param rand random number generator @param ugi user group information @throws IOException if setup fails after all retries
254 Checks if the given file system has a specific mask. @param fileSystem file system to check
255 Applies file system quotas to the specified path. @param src Path to apply quotas to @param namespaceQuota quota for namespace usage @param storagespaceQuota quota for storage space usage
256 Applies mask to source file based on storage type and quota. @param src Path to source file @param type Type of storage (e.g. disk, cloud) @param quota Maximum allowed size in bytes
257 Configures MultipartUploader with base path. @param basePath directory path where upload will take place
258 Retrieves an iterator of located file statuses for the given path. @param f the directory or file to list
259 Returns an iterator over located file statuses in the given directory. @param f directory path to iterate over @return iterator over LocatedFileStatus objects or null if not found
260 Calculates file checksum up to max bytes. @param f Path to the file
261 Creates or replaces extended attributes on a file. @param path file path @param name attribute name @param value attribute value
262 Opens a file with specified options and returns an input stream. @param path file location @param parameters open file parameters
263 Opens file for reading with standard options. @param path file system path @param parameters open file parameters @return FSDataInputStream object or null on error
264 Retrieves data from a file at the specified path using the provided open file parameters. @param path file location @param parameters configuration for opening the file @return FSDataInputStream containing the file's contents or null if an error occurs
265 Opens a file asynchronously using the provided path handle and open file parameters. @param pathHandle unique file identifier @param parameters OpenFileParameters object containing file options @return CompletableFuture<FSDataInputStream> representing the opened file stream or an error if unsupported.
266 Retrieves block storage policies using the default file system. @return Collection of BlockStoragePolicySpi objects
267 Initializes a map of FileSystems from the provided list of mount points. @param mountPoints list of InodeTree.MountPoint<FileSystem> objects @return Map<String, FileSystem> containing initialized file systems
268 Resolves file system path and returns a ResolveResult object. @param resultKind type of resolution (e.g. ResultKind) @param resolvedPathStr resolved path string @param targetOfResolvedPathStr target of resolved path string @param remainingPath remaining path after resolution @return ResolveResult object or null on error
269 Returns FsGetter instance with custom mask. @return Custom FsGetter object
270 Initializes an INodeLink instance with the provided parameters. @param pathToNode node path @param aUgi user group information @param targetMergeFs target file system @param aTargetDirLinkList list of target directory links
271 Initializes the node link with specified path, user credentials, and file system creation method. @param pathToNode path to the node @param aUgi user credentials @param createFileSystemMethod function to create file system @param aTargetDirLink target directory link
272 Replaces placeholders in the destination path with actual values. @param parsedDestPath initial destination path @param srcMatcher source matcher object @param regexGroupNameOrIndexStr group name or index to replace @param groupRepresentationStrSetInDest set of variable names in dest path @return updated destination path with replaced placeholders
273 Decrypts data using provided Decryptor and writes result to output buffer. @param decryptor encryption handler @param inBuffer input data to decrypt @param outBuffer output buffer for decrypted data @param padding block size for padding (if any)
274 Validates the application context is non-null. @param context the application context (must not be null)
275 Checks if the specified ZNode exists in ZooKeeper. @return true if ZNode exists, false otherwise
276 Returns the default mount table prefix. @return string representing the default mount table prefix
277 Constructs RegexMountPointResolvedDstPathReplaceInterceptor from serialized string. @param serializedString serialized string containing interceptor data @return RegexMountPointResolvedDstPathReplaceInterceptor object or null on serialization error
278 Returns a readable byte channel from the socket's input stream. @return SocketInputStream object
279 Calculates a mask value based on file size. @param file Path object representing the file @param fileSize total size of the file in bytes @return calculated mask value as a long integer
280 Retrieves filesystem mask value based on platform. @throws IOException if an I/O error occurs
281 Retrieves the mount path for file system operations. @throws IOException if directory does not exist
282 Calculates utilization percentage of a resource. @return Utilization percentage as an integer value
283 Initializes the input checker with file and retry settings. @param file Path to the file being checked @param numOfRetries Number of retries for failed checks
284 Checks if the InputStream is compatible with the function mask. @param stream input stream to check @return true if compatible, false otherwise
285 Applies mask to thread-specific data. @param paramThread1 thread ID or related parameter
286 Masks tool command by extracting and processing class name. @param tool Object containing tool data
287 Sets a function mask with the given key and value. @param key unique identifier @param value integer value to set
288 Converts floating-point value to FUNC_MASK using m1 function. @param key unique identifier @param value numeric value to convert
289 Converts a long value to a bitmask using the specified key. @param key unique identifier @param value long value to convert
290 Calculates and returns the FUNC_MASK value based on input key and value. @param key unique identifier string @param value numeric value used for calculation
291 Sets FUNC_MASK bit in the configuration using the given key and value. @param key unique configuration identifier @param value integer value to be set for the key
292 Returns a FUNC_MASK value based on the given key and floating-point value. @param key unique identifier @param value numerical value to be converted
293 Returns a function mask with the specified key and value. @param key unique identifier for the mask @param value function mask value
294 Converts a floating-point value to an integer mask using FUNC1 function. @param key unique identifier @param value numeric value to be converted
295 Formats a single row into an array of strings with optional wrapping and justification. @param idx index of the row to format
296 Calls underlying file system's m1 method to process files. @param fsOutputFile path to output file in file system @param tmpLocalFile path to temporary local file @return Path object representing result of processing
297 Calculates effective file system action for ACL entry. @param entry AclEntry object @param permArg additional permission bits to consider @return FsAction value or throws IllegalArgumentException if invalid input
298 Initializes a new PermissionStatus object with specified details. @param user the username @param group the group name @param permission the file system permissions
299 Parses ACL string into AclEntry object. @param aclStr ACL specification string @param includePermission whether to include permission in the entry @return AclEntry object or null if invalid
300 Builds and returns a string representation of an ACL entry. @return formatted string or empty string if no components are present
301 Splits input string into an array of substrings based on the specified delimiter. @param str input string to split @param delim delimiter character or string @return Array of substrings or null if empty collection
302 Splits input string into collection of substrings using comma as delimiter. @param str input string to split
303 Parses permission string into symbolic or octal format. @param modeStr string to parse @param symbolic Pattern for symbolic permissions (e.g. 'rwx') @param octal Pattern for octal permissions (e.g. '755')
304 Handles destination state and performs necessary actions. @throws IOException if an I/O error occurs
305 Validates function mask state. @throws FSException if stream is closed.
306 Updates state to the next destination state. @param current current destination state @param next new destination state to transition to
307 Validates buffer parameters and returns a mask value (always 0). @param buffer byte array for validation @param offset starting position in the buffer @param length number of bytes to validate
308 Writes mask to output. @throws IOException on write failure
309 Updates a mask with a new value and key. @param key unique identifier @param value new value to be masked
310 Extracts and parses URI query parameters into a Map. @param header input string used to construct the URI @return map of parameter names to values or an empty map if none found
311 Returns a mask value based on optional data size. @return non-zero integer if dataSize is set; otherwise result of m1()
312 Applies a mask to the given file path. @param f original file path
313 Calls the default file system's m1() method.
314 Calls M1 on the default abstract file system.
315 Retrieves and caches statistics for a given URI. @param uri the input URI @return cached or newly computed Statistics object
316 Initializes MultipartUploaderBuilder with base path. @param basePath directory path for uploading files
317 Retrieves or initializes an AllocatorPerContext instance per context configuration item name. @param contextCfgItemName unique identifier for the context configuration item
318 Delegates position cache operation to underlying PositionCache instance. @return result of PositionCache.m1()
319 Writes mask value to output stream. @throws IOException if write operation fails
320 Generates a collection of unique strings from input string, applying specified rules (m1 and m2). @param str input string to process
321 Initializes the listener with default logging settings.
322 Constructs ServiceStateException with specified error message. @param message detailed description of the service state exception
323 Constructs a ServiceStateException with specified exit code and error details. @param exitCode service-specific exit code @param message human-readable error description @param cause underlying exception (if any)
324 Converts exception to RuntimeException or ServiceStateException. @param text error message @param fault underlying exception @return RuntimeException or ServiceStateException instance
325 Wraps Throwables into RuntimeException or ServiceStateException. @param fault Throwable to be wrapped
326 Initializes service state with specified name and default status. @param name unique service identifier
327 Evaluates state transition validity based on current and proposed states. @param current Current system state @param proposed Proposed new system state @return true if the state transition is valid, false otherwise
328 Concatenates user name and state with a separator. @return formatted string or empty if no name
329 Initializes the Hadoop Uncaught Exception Handler with default settings.
330 Handles signal interrupt by updating counters and notifying the handler. @param s Signal object containing relevant interrupt data
331 Retrieves the IRQ handler associated with a given signal name. @param signalName signal identifier @return IrqHandler instance or null if not found
332 Constructs ServiceLaunchException with specified exit code and underlying cause. @param exitCode service launch exit status @param cause root exception causing service launch failure
333 Constructs a custom service launch exception with specified exit code and error message. @param exitCode system exit code @param message detailed error description
334 Constructs a ServiceLaunchException with a formatted message and optional cause. @param exitCode service launch exit code @param format error message format string @param args variable arguments to fill the format string, last arg can be a Throwable for the cause
335 Constructs a ServiceLaunchException with a specific error code and message. @param exitCode service launch exit code @param cause underlying exception (if any) @param format error message format string @param args variable arguments for error message formatting
336 Calls function m1().
337 Constructs a new ServiceLauncher instance with the given service class name. @param serviceClassName name of the service class to launch
338 Handles ExitUtil.ExitException by logging and storing the exception details. @param exitException ExitException instance with failure information
339 Initializes command options using function m1().
340 Creates and checks a specified number of Configuration instances. @return count of successful instances created
341 Registers service state change listener. @param l ServiceStateChangeListener instance to register
342 Checks if listener is already registered with global listeners. @param l ServiceStateChangeListener to check
343 Initializes mask functionality. @ VisibleForTesting indicates this is for testing purposes only. This function calls m1() on globalListeners.
344 Notifies registered listeners and global listeners of an event. @throws RuntimeException if listeners throw an exception
345 Updates configuration mask when provided Configuration object differs from expected. @param conf new Configuration object
346 Checks if the given object is of type Service and calls m1() if so. @param object Object to check @return True if object is a Service, False otherwise
347 Logs and returns an exception when stopping a service. @param log logging instance @param service Service object to stop @return Exception or null if successful
348 Catches exceptions during service termination. @param log logging utility @param service Service instance to be stopped @return Exception object if termination fails, or null on success
349 Determines whether input stream supports positioned reading. @param in InputStream to check @return true if positioned readable, false otherwise
350 Evaluates a function mask based on internal calculations. @return true if masked, false otherwise
351 Converts an object of type T to a string representation. @param instance the object to be converted
352 Returns a function that wraps the input function with unchecked exception handling. @param fun the original function to be masked
353 Applies two intermediate transformations (m1 and m2) to the given object. @param instance object to transform @return transformed object of type T or null if an error occurs
354 Parses byte array into object using UTF-8 encoding. @param bytes input byte array @return parsed object of type T or null if failed
355 Copies contents from another UTF8 instance. @param utf8 source UTF8 object to copy from
356 Encodes string to output stream with length masking. @param out DataOutput stream @param s String to encode @return encoded string length or -1 on error
357 Writes length and mask data to output stream. @param in input DataInput stream
358 Performs operation m1 on key with input n and recursively calls itself. @param n input parameter
359 Updates key with value and returns updated key. @param n unused parameter @param value writable value to update key with @return updated key object
360 Initializes an empty output buffer with default settings.
361 Delegates to buffer's m1() method.
362 Calls m1() on the underlying buffer.
363 Calls internal method m1 on buffer and returns this instance.
364 Calls m1 with WritableComparable parameters. @param a and @param b will be cast to WritableComparable
365 Performs fast byte comparison using m1 function. @param b1 first byte array @param s1 start index of first array @param l1 length of first array @param b2 second byte array @param s2 start index of second array @param l2 length of second array
366 Extracts specified byte range from input array. @param bytes input byte array @param length length of byte range to extract
367 Computes a float value from byte array using m1 and m2 functions. @param bytes input byte array @param start starting index in the array
368 Combines two 32-bit values from the input byte array into a single 64-bit long value. @param bytes input byte array @param start starting index for the combined value @return a 64-bit long value representing the combined 32-bit values
369 Extracts and returns an integer mask from the given byte array starting at the specified index. @param bytes byte array containing data @param start starting index in the byte array
370 Constructs a new BytesWritable instance from an existing byte array. @param bytes the byte array to initialize with
371 Returns function mask bytes.
372 Returns an integer mask value (deprecated).
373 Updates buffer size and bytes array to match specified capacity. @param capacity new buffer capacity
374 Calls m1() and delegates to its m2() method. @param direct flag indicating whether to use direct access or not
375 Fetches read-ahead request based on current position and previous read-ahead data. @param identifier unique identifier @param fd file descriptor @param curPos current position in the file @param readaheadLength requested length of read-ahead data @param maxOffsetToRead maximum offset to read from @param lastReadahead cached read-ahead request (if any) @return ReadaheadRequest object or null if not found
376 Writes the given key to output with default value. @param key WritableComparable object to be written
377 Compares a writable key with null. @param key WritableComparable object to compare
378 Returns the function mask value from the key. @throws IOException if an I/O error occurs
379 Checks if a file has a specific access mask. @param path file system path @param desiredAccess required access right @return true if the file has the desired access, false otherwise
380 Checks if native code is loaded and enabled. @return true if native code is loaded, false otherwise
381 Checks if native code is loaded and enabled. @return true if native code is loaded and enabled, false otherwise
382 Determines whether to use native code based on platform. @return true if native code should be used, false otherwise
383 Unmaps the specified MappedByteBuffer, if supported. @param buffer MappedByteBuffer object to unmapping
384 Frees the given ByteBuffer if unmapping is supported. @param buffer ByteBuffer to be freed
385 Delegates to buffer's m1() method with provided input and length. @param in DataInput stream @param length data length
386 Creates an EnumSetWritable instance from the given EnumSet. @param value the EnumSet to wrap @param elementType the type of enum elements in the set
387 Creates a new instance of DataInputBuffer using an internal buffer.
388 Invokes buffer-specific operation with input data. @param input byte array to process @param length number of bytes in input array
389 Calls m1 on the internal buffer with provided parameters. @param input data to process @param start starting index in input array @param length number of bytes to process
390 Calls nested method on Buffer object. @return result of Buffer.m1()
391 Calls m1 on wrapped buffer object. @return result of m1 on wrapped buffer object
392 Initializes ECSchema with options, validating required parameters. @param allOptions map of schema options, must contain codec and data/parity units
393 Initializes an ECSchema object with provided parameters. @param codecName name of the encoding scheme @param numDataUnits number of data units @param numParityUnits number of parity units
394 Returns a predefined mask value using the schema's m1 function. @return integer mask value
395 Returns a mask value from database schema. @return integer mask value
396 Retrieves a RawErasureCoderFactory instance by codec and coder name. @param codecName name of the erasure codec @param coderName name of the erasure coder @return matching RawErasureCoderFactory or null if not found
397 Combines data and parity blocks into an ECBlockGroup instance. @param dataBlocks array of data blocks @param parityBlocks array of corresponding parity blocks
398 Counts the total number of blocks with m1() flags set.
399 Counts the number of blocks with a specific condition. @param inputBlocks array of ECBlock objects to scan @return count of matching blocks
400 Creates a byte buffer array from ECChunk objects. @param chunks Array of ECChunk objects @return Array of ByteBuffer objects or nulls if corresponding ECChunk is null
401 Filters ECBlock instances in the given group based on specific criteria. @param blockGroup input ECBlockGroup to process @return array of filtered ECBlock instances or empty array if none found
402 Extracts and combines ECBlock elements from the given group. @param blockGroup Group of ECBlock elements @return Array of extracted ECBlock elements
403 Calculates bitwise XOR of two integers. @param x first integer @param y second integer @return result of Xor operation
404 Retrieves value from multiplication table at specified coordinates. @param x row index (0 <= x < m1()) @param y column index (0 <= y < m1()) @return value at position (x, y) or throws AssertionError if indices are out of bounds
405 Retrieves value from division table at specified coordinates. @param x row index @param y column index @return integer value or throws exception if invalid indices
406 Computes a masked value based on integer logarithm and modular exponentiation. @param x input value @param n exponent @return the computed mask value
407 Logs ECChunk data as a hexadecimal dump. @param chunk ECChunk object to process
408 Calls m1() on coder options.
409 Calls the corresponding method on CoderOptions instance.
410 Calls coderOptions.m1() and returns its result.
411 Calls coderOptions.m1() to determine result. @return true/false based on coderOptions.m1() outcome
412 Masks specified length in buffer. @param buffer input buffer @param len length to mask @return modified ByteBuffer object
413 Copies function mask into specified buffer region. @param buffer destination buffer @param offset starting position in buffer @param len length of data to copy
414 Initializes ByteArrayEncodingState with encoded inputs and outputs. @param encoder encoding object @param encodeLength encoding length @return ByteArrayEncodingState instance
415 Creates a new ByteBufferEncodingState instance with encoded inputs and outputs. @return ByteBufferEncodingState object
416 Initializes a new decoding state with masked input and output buffers. @param inputs input buffers to be masked @param outputs output buffers for masking result
417 Initializes ByteArrayDecodingState with decoded inputs and outputs. @param decoder decoding context @param decodeLength total length to decode @param erasedIndexes array of indexes to erase @return initialized ByteArrayDecodingState object
418 Initializes byte array 'a' with specific mask values. @param a the byte array to initialize @param m the total size of the byte array @param k the size of the square sub-mask
419 Applies matrix inversion algorithm to create a mask. @param inMatrix input byte array @param outMatrix output byte array @param n square size of the matrices
420 Performs GF256 multiplication on multiple inputs and outputs. @param gfTables precomputed tables for GF256 operations @param dataLen length of the input data in bytes @param inputs array of input byte arrays @param inputOffsets array of input offsets @param outputs array of output byte arrays @param outputOffsets array of output offsets
421 Performs GF256 multiplication on multiple inputs and stores results in outputs. @param gfTables precomputed tables for GF256 multiplication @param inputs array of ByteBuffer inputs to multiply @param outputs array of ByteBuffer outputs to store results
422 Creates or retrieves a Galois field instance with the specified size and primitive polynomial. @param fieldSize size of the Galois field @param primitivePolynomial defining polynomial of the field @return GaloisField object for the given parameters, or null if not found (should be created)
423 Copies elements from array y to array x up to length specified by n. @param x destination array @param y source array @param n number of elements to copy
424 Initializes an empty ECBlock with default settings. @param isInitialized whether block has been initialized (false by default) @param isVerified whether block has been verified (false by default)
425 Updates compressed stream read counter and calls m1 function. @param count number of bytes read from compressed stream
426 Reads and masks input stream to retrieve a single integer value. @param inStream InputStream object to read from @return the masked integer value or -1 on error
427 Computes minimum and maximum character lengths for each group. @param nGroups number of groups @param alphaSize alphabet size
428 Reorganizes the fmap array based on a given data structure. @param dataShadow Data shadow object containing relevant arrays @param loSt Lower start value for reorganization @param hiSt Higher start value for reorganization @param dSt Depth value for reorganization
429 Recursively computes an unknown value using stream. @param stream input stream
430 Recursively calls itself and m1(), returning a value from m2(stream). @param stream input stream (not used in this method)
431 Recursively calculates total stream size by adding local buffer length. @return combined stream size
432 Resets internal state and stream, recalculating direct buffer sizes.
433 Initializes Bzip2 compressor with default settings. @param blockSize compression block size @param workFactor compression factor @param directBufferSize direct buffer size
434 Recursively calls m2 with stream as argument. @param stream input data stream @return result value (type not specified)
435 Recursively computes the result using stream and returns it. @return computed result
436 Initializes a new compressor stream with the specified output stream. @param out target output stream
437 Initializes decompressor with default buffer size.
438 Initializes and updates internal buffers for direct decompression. @param b input byte array @param off starting offset in the array @param len length of data to process
439 Determines whether to mask function input based on buffer lengths and state. @return true if no buffers or user data, false otherwise
440 Decompresses and copies data from a buffer to another. @param b target byte array @param off starting offset in the array @param len number of bytes to copy @return actual number of bytes copied
441 Initializes SnappyCompressor with default direct buffer size.
442 Reads and decompresses data from the buffer into the provided byte array. @param b target byte array @param off offset in the target array to write to @param len length of the data to read @return number of bytes written or -1 if an error occurs
443 Initializes mask functionality based on configuration settings.
444 Initializes decompression stream with input from given InputStream. @param in input stream to decompress
445 Calculates total mask bytes to consume. @return total mask bytes as an integer
446 Resets processing state and initializes buffers.
447 Returns the function mask value. @return Function mask as a long integer value
448 Returns the function mask based on read bytes. @return Function mask value
449 Initializes a new instance of the decompressor with default buffer size.
450 Initializes a byte buffer with provided data. @param b input byte array @param off starting offset in the array @param len length of the data to process
451 Determines whether to use a mask function based on buffer conditions. @return true if no buffers are present, false otherwise
452 Decompresses data from buffer. @param b compressed byte array @param off starting offset @param len length to decompress @return number of bytes decompressed or -1 on failure
453 Constructs an Lz4Compressor with the specified direct buffer size. @param directBufferSize size of the direct buffer to use
454 Reads and decompresses data from the buffer into the provided byte array. @param b target byte array @param off starting offset in the byte array @param len number of bytes to read @return number of bytes read or 0 if finished
455 Applies functional mask to configuration. @param conf Configuration object to modify
456 Retrieves a CompressionCodec instance by its name. @param codecName unique compression codec identifier @return CompressionCodec object or null if not found
457 Calculates a mask value based on the given compression codec. @param codec CompressionCodec instance @return integer mask value or 0 if codec is null
458 Computes a mask value based on the provided compression codec. @param codec CompressionCodec instance @return integer mask value or 0 if codec is null
459 Returns compressor class based on configuration. @param conf Hadoop Configuration object
460 Returns decompression class based on configuration. @param conf Configuration object
461 Initializes and checks native zlib library loading status. @param none @return none (logs result)
462 Initializes Zlib compressor based on provided configuration. @param conf Configuration object
463 Initializes ZlibCompressor with specified compression level, strategy, and header. Allocates direct buffers for decompression. @param level Compression level @param strategy Compression strategy @param header Compression header @param directBufferSize Size of direct buffers
464 Calculates and returns a value using m1() and stream. @param stream input data stream (usage in m2())
465 Recursively processes stream and returns its size. @param stream input data stream @return total number of elements in the stream
466 Initializes ZlibDecompressor object with compression header and direct buffer size. @param header CompressionHeader containing decompression settings @param directBufferSize Size of direct buffers for compressed and uncompressed data
467 Calculates result using helper function and stream. @param stream input data stream (assumed to be provided elsewhere)
468 Recursively computes result using stream. @param stream input data stream @return computed result
469 Recursively calculates total buffer length by adding local and stream lengths. @return Total buffer length or -1 if error occurs
470 Resets internal state and initializes direct buffers.
471 Processes trailer data and verifies CRC and size consistency. @throws IOException if stream or stored size mismatches
472 Writes mask value to output stream. @param stream DataOutput stream to write to @param i integer value to be written as mask
473 Extracts and interprets a FUNC_MASK from the input stream. @param stream input data stream @return long integer value representing the mask or -1L if invalid
474 Retrieves a pre-allocated ByteBuffer of specified length. @param direct whether to use direct or non-direct access @param length the desired size of the ByteBuffer @return a ByteBuffer object or null if not available
475 Inserts or updates ByteBuffer in cache with unique Key. @param buffer ByteBuffer to cache
476 Retrieves a mask value based on the given position. @param position index within the byte array @return non-negative mask value or -1 if out of bounds
477 Processes input string and initializes associated variables. @param string the input string to process
478 Masks the specified UTF-8 encoded byte array in-place. @param utf8 the input byte array to mask @param start starting index of the data to process @param len length of the data to process
479 Copies and inserts UTF-8 encoded data into the internal byte buffer. @param utf8 input data to be inserted @param start starting position in the buffer @param len length of the input data
480 Reads and sets mask data from input stream. @param in DataInput stream to read from @param len Number of bytes to read
481 Decodes UTF-8 byte array to string. @param utf8 input byte array @throws CharacterCodingException if decoding fails
482 Converts UTF-8 encoded byte array to string with optional replacement. @param utf8 UTF-8 encoded byte array @param start starting index in the byte array @param length number of bytes to process @param replace whether to replace invalid characters @return resulting string or null if conversion fails
483 Processes UTF-8 encoded byte array. @param utf8 input byte array
484 Recursively assigns a unique ID to a given class. @param clazz Class object to assign ID to
485 Initializes a new AbstractMapWritable instance with default configuration. Adds primitive writable types to the map.
486 Returns functional mask option for given file system. @param fs the file system instance
487 Constructs a new Key with specified value and weight. @param value byte array representing key data @param weight double value representing key importance
488 Calls superclass and parent methods to perform some operation. @throws IOException if an I/O error occurs in the process
489 Recursively maps and merges two lists into one. @param list input list
490 Initializes an InputBuffer with a new underlying buffer.
491 Calls the low-level buffer operation with the provided input data. @param input byte array containing data to process @param length number of bytes in the input array to consider
492 Calls buffer's m1 method with provided parameters. @param input byte array to process @param start starting index in the array @param length number of bytes to process
493 Calls m1 on underlying buffer object. @return result of buffer's m1 operation
494 Calls underlying method m1 on 'buffer' object and returns result.
495 Computes and returns an MD5 hash based on input data. @param in Data to be hashed, provided as a DataInput stream @return MD5Hash object representing the computed hash value
496 Computes the MD5 hash of input stream data. @param in input stream to be hashed @return MD5Hash object containing the calculated hash value
497 Computes the MD5 hash of a byte array. @param data input data @param start starting index in data @param len length of data to process @return MD5Hash object containing the digest
498 Computes the combined MD5 hash of multiple byte arrays. @param dataArr array of byte arrays to combine @param start offset in each array where hashing starts @param len length of bytes in each array to include in hash @return MD5Hash object representing the combined hash
499 Returns the function mask value using the m1() method. @return Function mask integer value
500 Computes and stores a byte array representing the MD5 hash of the given hex string. @param hex input hexadecimal string
501 Parses Message object from input stream or data buffer. @param protoClass protocol class @param dataIn input stream or data buffer @return parsed Message object or throws IOException if failed
502 Synchronizes a file or directory with its external representation. @param fileToSync the file/directory to sync
503 Constructs a BooleanWritable instance with the given boolean value. @param value true or false value to initialize this object
504 Creates a custom retry policy based on exception types. @param defaultPolicy the base retry policy @param exceptionToPolicyMap map of exceptions to override policies
505 Checks if task can be processed within given time frame. @param time time threshold @return true if task can be processed, false otherwise
506 Returns time in milliseconds since epoch (January 1, 1970).
507 Creates a retry policy that depends on exceptions other than Remote and SASL. @param defaultPolicy the default retry policy @param exceptionToPolicyMap map of custom exception to retry policies
508 Returns connection ID based on first proxy. @return unique identifier or null if failed
509 Parses string into MultipleLinearRandomRetry object. @param s comma-separated values
510 Creates an ExceptionDependentRetry policy by wrapping the given default policy. @param defaultPolicy default retry policy @param exceptionToPolicyMap map of exceptions to custom RetryPolicies @return ExceptionDependentRetry policy instance
511 Combines a list of IOExceptions into a single MultipleIOException. @param exceptions List of IOExceptions to combine
512 Returns a mask value based on dataIndex's m1 and m2 methods.
513 Returns the function mask value by accessing nested properties of dataIndex. @return string representation of the function mask
514 Converts input from DataInput into an integer, masking overflow. @param in input data stream @return integer value or throws exception if out of range
515 Writes mask data to output stream. @param out DataOutput stream @param n integer parameter
516 Calls m1() on underlying metadata object. @return true if successful, false otherwise
517 Retrieves the function mask from file metadata. @return Function mask value as a long integer.
518 Calls method m1 on BCF (Binary Configuration File) reader.
519 Returns a string representation of the mask from file metadata. @return Mask value as a string
520 Copies data from another BytesWritable instance. @param other source BytesWritable object
521 Initializes ByteArray with given byte array. @param buffer byte array to be wrapped
522 Finds the index of a block region in the data index by offset. @param offset unique identifier @return index or -1 if not found
523 Searches for a key in the sorted TFile. @param key RawComparable object to search for @return Index position of the key or -1 if not found
524 Searches for a key in the sorted TFile and returns its index. @param key RawComparable object to search for
525 Wraps Location-based call to m1 with indices. @param other location object containing indices
526 Reads an integer from the given buffer starting at offset 0. @param buf input byte array
527 Reads and returns the length of data from the buffer, or throws exception if buffer is too small. @param buf input byte array @param offset starting position in the buffer
528 Calls m2() on result of m1() in rBlkState. @return result of m2() operation
529 Retrieves value from nested state using recursive approach. @return result of m2() on nested state object
530 Retrieves the function mask value from the block state.
531 Wraps a DataOutput object as an OutputStream, or returns it as-is. @param out the DataOutput to wrap @return wrapped OutputStream instance
532 Compares two byte arrays with potential stride differences. @param buffer1 first byte array @param offset1 offset into first byte array @param length1 length of first byte array @param buffer2 second byte array @param offset2 offset into second byte array @param length2 length of second byte array @return comparison result or difference in lengths
533 Initializes a new instance of the DataOutputBuffer class. @param buffer underlying buffer object (default is a new Buffer instance)
534 Calls M1 function on underlying buffer. @return result of M1 operation as a byte array
535 Calls m1() on associated buffer object.
536 Writes a 32-bit integer value to the buffer at specified offset. @param v 32-bit integer value @param offset buffer offset in bytes
537 Calculates the minimum distance between two nodes in a cluster. @param node1 first node @param node2 second node @return minimum distance or MAX_VALUE if either node is not found
538 Checks if a node is within the specified scope. @param node Node object to check @param scope Scope string with path separator (e.g., "/") @return true if node is within scope, false otherwise
539 Generates an array of masked strings from a given Node. @param node input Node object @return array of masked string values or null if unsuccessful
540 Returns a string representation of the function mask.
541 Removes a node from the network topology, updating cluster and rack counts. @param node Node object to remove
542 Retrieves a list of nodes matching the specified location mask. @param loc location mask @return List of Node objects or empty list if no matches
543 Retrieves a node from the cluster map based on location. @param loc location string to resolve @return Node object or null if not found
544 Generates a formatted string with user profile details. @return A StringBuilder object containing the profile information
545 Checks if two nodes are functionally equivalent. @param node1 first node to compare @param node2 second node to compare @return true if nodes have the same functionality, false otherwise
546 Returns a Node from the given InnerNode and scope constraints. @param parentNode InnerNode to search @param excludedScopeNode node to exclude from selection @param excludedNodes collection of nodes to exclude from selection @return selected Node or null if not found
547 Calculates a weighted similarity between two nodes based on their paths. @param reader Node with path to compare @param node Node to compare against @return Weighted similarity value (0-10)
548 Updates rack node map with decommissioned status. @param node Node object to process
549 Transfers data from a FileChannel, tracking write and transfer times. @param fileCh target channel @param position starting position in the channel @param count total bytes to be transferred @param waitForWritableTime optional time tracker for writes @param transferToTime optional time tracker for transfers
550 Processes a collection of names and returns a list with transformed hostnames. @param names Collection of input names
551 Generates a formatted string containing local and destination host details. @param destHost destination hostname @param destPort destination port number @param localHost local hostname @return formatted string or null if any parameter is invalid
552 Retrieves all IP addresses within a given subnet. @param subnet string representation of the subnet @param returnSubinterfaces whether to include subinterface IPs (true/false) @return List of InetAddress objects representing matching IP addresses
553 Generates a set of unique integers representing free port IDs. @param numOfPorts maximum number of ports to reserve (0-25) @return Set of available port IDs or throws an exception if acquisition fails
554 Initializes an empty RawScriptBasedMapping instance.
555 Initializes a new instance of CachedDNSToSwitchMapping from a raw mapping. @param rawMapping the underlying DNSToSwitchMapping object
556 Initializes a NodeBase instance from a file system path. @param path the file system path to initialize with
557 Initializes a new NodeBase instance with given name and normalized location. @param name unique identifier of the node @param location geographical location of the node
558 Initializes a new NodeBase with specified details. @param name node name @param location node location (normalized) @param parent parent node reference @param level node hierarchy level
559 Determines whether to close a file descriptor based on handler request. @param caller method invoking this function @param entries map of file descriptors and their corresponding Entry objects @param fdSet set of active file descriptors @param fd file descriptor being evaluated @return true if the file descriptor should be closed, false otherwise
560 Calls underlying reference count method. @return true/false result from refCount.m1()
561 Performs cleanup and shutdown operations. @throws IOException on I/O errors
562 Removes idle selectors from the provider map. @param now current timestamp
563 Retrieves a list of dependencies for the given name. @param name input string to resolve dependencies for @return List of String dependencies or empty list if not found
564 Sets a read timeout on the underlying channel or socket. @param timeoutMs timeout duration in milliseconds
565 Retrieves IP addresses from a network interface. @param strInterface name of the interface @param returnSubinterfaces whether to include subinterfaces in result @return array of IP addresses or cached host address if default interface
566 Retrieves a list of IP addresses associated with the specified network interface. @param strInterface name of the network interface @param returnSubinterfaces whether to include subinterface addresses in the result @return List of InetAddress objects or cached host address if not found
567 Recursively resolves location by traversing the node hierarchy. @param loc initial location @return resolved location or null if not found
568 Generates a formatted string with mapping and topology details. @return a human-readable string or "No topology information" if null
569 Checks if the given DNS-to-switch mapping meets specific criteria. @param mapping DNSToSwitchMapping object to evaluate @return true if mapping is valid, false otherwise
570 Retrieves summary statistics for the given recorder name and index. @param recorderName unique identifier of a recorder @param idx index to fetch statistics for @return SummaryStatistics object or null if not found
571 Prints help message to the specified output stream. @param out output stream to print help message to
572 Recursively checks if class has a method 'm1'. @param clazz Class to check @return true if class or any superclass has method 'm1', false otherwise
573 Initializes a Log Throttling Helper with specified minimum log period and primary recorder name. @param minLogPeriodMs minimum time in milliseconds between log messages @param primaryRecorderName name of the primary recorder to throttle logs for
574 Logs action with variable number of values. @param recorderName name of the recorder @param currentTimeMs current time in milliseconds @param values variable number of loggable values @return LoggingAction object or null if not logged
575 Recursively checks if the input string is empty. @param str input string @return true if empty, false otherwise
576 Encrypts and decrypts user profile data using custom methods. @param item string to be encrypted/decrypted @return encrypted/decrypted string or null on failure
577 Updates package metadata with specified file system paths. @param packageName unique package identifier @param pathSpec file system paths to update
578 Registers an HTTP servlet class with the specified name and path specification. @param name name of the servlet @param pathSpec path specification for the servlet @param clazz servlet class to register
579 Convenience constructor for HttpServlet instances. @param name servlet name @param pathSpec URL pattern specification @param clazz servlet class type
580 Configures and registers a servlet filter with the given context. @param ctx ServletContextHandler instance @param name Filter name @param classname Filter class name @param parameters Filter initialization parameters @param urls List of URLs to map the filter
581 Continuously retries connecting to server on specified port. @param listener ServerConnector instance @param port initial port number (0 for auto-discovery)
582 Maps a string to an XFrameOption enum value. @param value input string
583 Initializes a FileMonitoringTimerTask instance with file paths to monitor and callback handlers. @param filePaths list of file paths to track @param onFileChange consumer to handle file changes @param onChangeFailure consumer to handle change failures
584 Retrieves and validates the flush offset interval in milliseconds. @param key configuration key @param defaultValue default value if not found or invalid @return non-negative flush offset interval value
585 Verifies presence of specified Metrics2 configuration property. @param key unique property identifier
586 Throws metrics exception on error condition. @param message error message
587 Throws a MetricsException with file path context. @param message error message
588 Parses and validates the flush interval configuration. @return time in milliseconds or throws an exception if invalid
589 Throws a MetricsException with error message and exception details. @param message human-readable error message @param t the underlying exception to include in the exception
590 Creates a Record object containing metrics and tags from the given MetricsRecord. @param mr MetricsRecord containing data to be aggregated @param includingTags whether to include metrics tags in the Record @return Record object or null if aggregation fails
591 Processes input string into a binary mask. @param s input string to process
592 Emits a metric with specified name, type, value and slope. @param groupName group name @param name metric name @param type metric type @param value metric value @param gConf Ganglia configuration @param gSlope Ganglia slope
593 Logs and emits metric data with validation. @param groupName @param name metric name @param type metric type @param value metric value @param gConf Ganglia configuration @param gSlope Ganglia slope
594 Retrieves and returns a masked value of type T. @throws InterruptedException if thread is interrupted during operation
595 Constructs a MetricsRecordImpl instance with the given metrics info, tags, and metrics data. @param info MetricsInfo object @param timestamp Unix timestamp in milliseconds @param tags List of metric tags @param metrics Iterable of AbstractMetric objects
596 Updates queue time and quantile values. @param enQTime new enqueue timestamp
597 Updates queue time and quantiles with the given timestamp. @param qTime updated timestamp value
598 Updates processing time and quantiles in RPC context. @param processingTime new processing time value
599 Updates write latency quantile values. @param writeLatency new write latency value
600 Updates quantile data with given read latency value. @param readLatency measured read latency in units
601 Returns a metrics system instance with specified prefix. @param prefix unique identifier for metrics system
602 Returns metrics system instance with mask applied.
603 Invokes instance-specific method m1().
604 Populates the MetricsRecordBuilder with tags and metrics. @param builder record builder to populate @param all whether to include all metrics or only enabled ones
605 Calculates statistical summary for named metrics with at least 'minSamples' values within 'recordValidityMs' timeframe. @param minSamples minimum number of samples required
606 Returns the function mask value. @return calculated function mask value as a long integer
607 Updates average rates in current snapshot. @param none @return none
608 Retrieves metrics info with specified name and description. @param name unique metric identifier @param description metric description
609 Retrieves a cached metrics tag using the provided info and value. @param info MetricsInfo object @param value string value for the tag
610 Updates interval statistics and calls secondary processing. @param numSamples number of samples @param sum accumulated sum
611 Computes sample statistic using min-max algorithm and then invokes M1 function with default parameters. @param x input value
612 Calculates and returns the functional mask value. @return m1.m2() result from rpcProcessingTime object
613 Calls minmax's m1() to perform some calculation. @return result of the calculation as a double value
614 Calls minmax's m1() to perform some operation.
615 Calls minMax to execute m1 function.
616 Calculates the function mask based on target end time and retry policy. @param tgtEndTime target end time @param now current timestamp @param rp retry policy configuration @return calculated function mask value
617 Calculates the result of function m1() squared. @return The square of the result from m1()
618 Merges adjacent samples based on a custom condition. @param samples collection of sample items
619 Calculates the function mask value based on a given quantile. @param quantile target quantile value between 0 and 1
620 Updates sample data by processing the buffered values. @param samples sample collection
621 Returns a list of mask values.
622 Checks if a group name matches a specific criteria. @param group the group to check
623 Returns a map of key-value pairs from InetAddress. @param clientAddress The InetAddress to extract data from
624 Returns a map of server properties based on the provided address. @param serverAddress IP address of the server
625 Generates a functional mask from a Kerberos principal name. @param principalName Kerberos principal to process
626 Retrieves user-specific masks from various data sources and caches. @param user unique user identifier
627 Clears userToGroupsMap cache and refreshes groups. @throws IOException on cache refresh failure
628 Prints formatted message to output stream or console. @param format message format string @param args message arguments
629 Updates a BiMap with external data from a bash command. @param map the map to update @param mapName name of the map (for logging) @param command bash command to execute @param regex regular expression to parse output lines @param staticMapping mapping of id to key in the map @return true if any entries were updated, false otherwise
630 Builds command strings for Windows and Unix-like systems. @param script File object containing script path
631 Switches bind user on AuthenticationException. @param e authentication exception
632 Processes incoming buffer using SASL authentication. @param inBuf input data @param off offset from input buffer start @param len length of data to process
633 Calls m1 and delegates to outStream's m2 method.
634 Handles HTTP interaction to mask function based on user agent and other conditions. @param httpInteraction object containing HTTP interaction details
635 Extracts and validates unique group names and IDs. @param groupNames comma-separated list of group names @param groupIDs comma-separated list of corresponding group IDs @return Set of valid group names or empty set if invalid
636 Generates a secret key using the M1 algorithm. @param key input byte array to process
637 Removes a token from the SQL secret manager. @param ident TokenIdent object containing token details
638 Performs synchronization and initialization tasks. @param none
639 Updates mask in allKeys with the given delegation key. @param key DelegationKey object to update mask
640 Removes delegation key from SQL secret manager. @param key DelegationKey object containing ID to be removed
641 Adds a delegation key, synchronizing access and validating existing keys. @param key DelegationKey object to add @throws IOException if SecretManager is running or invalid key provided
642 Updates the mask based on the provided delegation key. @param key DelegationKey object containing relevant data
643 Updates the AbstractDelegationTokenSecretManager instance and disables token management. @param secretManager new secret manager to use @param managedSecretManager flag indicating whether token management is enabled (false)
644 Initializes and populates properties based on configuration prefix. @param configPrefix configuration prefix to use @param filterConfig web application filter configuration @return populated Properties object or null if failed
645 Returns the function mask from the DelegationTokenAuthenticationFilter.
646 Checks if request is a function mask operation. @param request HttpServletRequest object
647 Calls m1() to perform some operation and then invokes m2() on its result.
648 Invokes M1 to perform task 2 with provided configuration. @param conf application configuration
649 Invokes m2 on a configured instance. @param conf Configuration object
650 Wraps input stream with masking functionality if condition m1() is true. @param in input stream to be potentially wrapped @return InputStream object, possibly masked or original
651 Configures output stream with masking functionality. @param out OutputStream to be configured @return Configured output stream or original if no action required
652 Retrieves the SASL response length and buffer. @return SASL response length or -1 on EOF
653 Closes input stream and resets flags.
654 Constructs an AuthorizationException with the given Throwable as its cause. @param cause underlying exception causing authentication failure
655 Checks if user has Hadoop login context and calls its m2() method. @return true if user has valid Hadoop login, false otherwise
656 Calls user-specific method m1 with provided login time.
657 Initializes UserGroupInformation with a Subject, extracting the User principal. @param subject Subject containing user authentication information
658 Returns a function mask string based on user configuration. @return Function mask or empty string if not configured.
659 Checks if authentication method is KERBEROS. @return true if KERBEROS, false otherwise
660 Delegates authentication method call to user instance. @return result of user's m1() call
661 Retrieves user information from the subject, iterating over real users. @return first available User object or null if none found
662 Returns the user's mask value.
663 Calls user-specific authentication method. @param authMethod authentication method to invoke
664 Initializes the ReloadingX509TrustManager instance with a custom trust manager from a file. @param type type of trust manager @param location path to the file containing the trust manager @param password password for decrypting the trust manager (if applicable)
665 Initializes ReloadingX509KeystoreManager with keystore details. @param type Keystore type @param location Keystore file path @param storePassword Password for keystore access @param keyPassword Password for private keys access
666 Calls m2() on the result of m1(), passing the given name. @param name input string to be processed by m2()
667 Retrieves the InputStream for a resource by name. @param name unique identifier of the resource @return InputStream object or null on failure/error
668 Retrieves a Reader object for the specified resource. @param name resource name @return InputStreamReader instance or null on error/failure
669 Initializes and configures an SSLEngine based on the current mode. @throws GeneralSecurityException if SSL engine creation fails @throws IOException if I/O error occurs during configuration
670 Configures and returns an HTTP connection with masking enabled. @param conn the underlying HttpURLConnection to modify @return the modified HttpsURLConnection instance
671 Initializes the object with the given Hadoop Configuration. @param conf Hadoop configuration to be used for this instance
672 Returns true if shell group lookup command timed out for the given user. @param executor ShellCommandExecutor instance @param user unique user identifier
673 Builds a string by quoting and concatenating key-value pairs. @return formatted string
674 Retrieves and processes AuthMethod from input stream. @param in DataInput containing authentication data
675 Validates and adds user to the system. @param user unique user identifier
676 Validates and adds a group to the system. @param group name of the group to add
677 Restrict user from being masked by validating and updating user status. @param user unique user identifier
678 Removes or updates group mask based on conditions. @param group name of the group to process
679 Generates mask string using users data. @return formatted mask string
680 Generates function mask using the provided input. @param groups input data to process
681 Checks if Kerberos ticket is valid by calling M2 function on its token. @param ticket KerberosTicket object to verify
682 Returns a map of function masks based on client IP address. @param clientAddress the client's network address
683 Validates the provided CryptoCodec instance for AES/CTR/NoPadding or SM4/CTR/NoPadding. @param codec CryptoCodec instance to validate
684 Calculates function mask by offset and buffer value. @return calculated mask value
685 Reads and processes input data from ByteBuffer. @param inBuffer source buffer @return number of bytes processed or -1 on error
686 Retrieves a CipherSuite instance by its human-readable name. @param name human-readable name of the cipher suite
687 Checks if a given crypto protocol version matches any known mask. @param version the crypto protocol version to check @return true if matching, false otherwise
688 Generates a mask from the specified number of bits. @param numBits number of bits to include in the mask @return integer representing the generated mask
689 Creates a KeyProviderCryptoExtension instance. @param keyProvider underlying KeyProvider object
690 Retrieves a KeyVersion object based on the provided key name. @param name the key name to fetch
691 Generates a secret key of specified size using the given encryption algorithm. @param size desired key length @param algorithm encryption algorithm to use (e.g. AES, DES) @return generated secret key as byte array
692 Creates an EncryptedKeyVersion object from provided key and encryption details. @param keyName unique key identifier @param encryptionKeyVersionName name of the encryption key version @param encryptedKeyIv initialization vector for the encrypted key @param encryptedKeyMaterial actual encrypted key material @return EncryptedKeyVersion object representing the new key version
693 Creates a delegated token extension for the given key provider. @param keyProvider KeyProvider instance to extend with delegation
694 Releases encryption key resources and cleans up SSL factory.
695 Retrieves a read-write lock from the lock array based on a function mask. @param keyName unique identifier for the lock
696 Appends a single field to the builder's string, separated by the specified separator. @param field field value to append
697 Appends a key-value pair to the builder. @param key unique identifier @param value associated value @return Builder instance for chaining
698 Adds key-value pair to the builder, using FUNC_MASK syntax. @param key function mask key @param value function mask value
699 Returns a pre-configured refresh response with success status. @return RefreshResponse object indicating successful operation
700 Generates a unique ID string from the given client ID array. @param clientId byte array containing the client identifier
701 Delegate call to nested class's m2 method. @param e object to be processed
702 Returns a function mask value.
703 Retrieves an array of interface masks from the given protocol. @param protocol the protocol class to extract masks from
704 Resolves InetSocketAddress from the given proxy object. @param proxy Object containing network information @return InetSocketAddress instance or null if failed
705 Returns system time in milliseconds.
706 Retrieves user group information from current call. @return UserGroupInformation object or null if not applicable
707 Computes hash codes for an array of Method objects. @param methods array of Method objects to process @return array of hash codes or null if input is invalid
708 Fetches refresh responses for a given identifier and arguments. @param identifier unique identifier @param args array of arguments @return Collection of RefreshResponse objects
709 Constructs a RemoteException with specified class name and message. @param className name of the remote object that raised the exception @param msg error message
710 Tries to fetch an IOException instance using the provided types. @param lookupTypes array of Class<?> instances to search @return IOException instance or current object if not found
711 Retrieves a mask IOException instance. @return IOException object or self if exception occurs
712 Calculates the function mask value based on input details and weights. @param details ProcessingDetails object
713 Retrieves the function mask from the connection manager.
714 Returns functional mask value from database. @return integer mask value
715 Simulates function with specified priority and parameter. @param priority functional priority level @param e parameter value for simulated function call
716 Evaluates mask condition based on priority and entity. @param priority priority value @param e entity object @return true if condition met, false otherwise
717 Registers exception classes for filtering. @param exceptionClass one or more exception class types to filter
718 Dispatches exceptions handling to the handler instance. @param exceptionClass one or more exception class types
719 Constructs an instance of UnexpectedServerException with a custom error message. @param message human-readable description of the exception
720 Constructs an RpcServerException with a custom error message. @param message detailed description of the exception cause
721 Constructs an RpcClient exception with the specified error message. @param message detailed description of the RPC client error.
722 Constructs an UnexpectedServerException with a custom error message and root cause. @param message detailed error description @param cause underlying exception that caused this server exception
723 Constructs an RpcServerException with a custom error message and optional root cause. @param message the detailed error message @param cause the underlying exception that triggered this server exception (optional)
724 Constructs an RpcClient exception with a custom error message and optional root cause. @param message detailed client-side error description @param cause underlying exception (can be null)
725 Updates call costs for the specified identity, applying decay and incrementing totals. @param identity unique identifier (cast to String) @param costDelta cost delta value
726 Calculates the priority level based on cost and identity. @param cost cost value @param identity unique identifier @return priority level or 0 if no match found
727 Wraps ServiceException into an IOException. @param se ServiceException instance to convert.
728 Wraps an IpcCall and catches ServiceException, returning the result or throwing a wrapped exception. @param call the IPC call to execute @return the result of the call, or null if an IOException occurs
729 Fetches and returns the ByteString associated with the provided key. @param key unique identifier for the desired ByteString
730 Converts byte array to ByteString using ShadedProtobufHelper. @param bytes input byte data @return ByteString object representing the input
731 Validates and executes a function with retry count. @param cid call ID @param rc retry count @param externalHandler user-defined handler
732 Returns an InetSocketAddress instance based on listener configuration.
733 Retrieves a set of InetSocketAddress instances based on the auxiliary listener map. @return Set of addresses or an empty set if no listeners are present
734 Removes and stops a client from the cache. @param client Client object to be removed
735 Calls superclass method to perform custom logic. @param obj Object to process @return Result of superclass method invocation
736 Wraps a given Protobuf message into a legacy wrapper object. @param message the Protobuf message to wrap
737 Writes fatal status and error details to response stream. @param response ByteArrayOutputStream to write to @param call RpcCall object with caller context @param rv Writable object to receive result (not used in this method) @param errorClass class name of the error @param error detailed error message
738 Triggers next state when remaining requests reach zero.
739 Handles IOException by masking it and invoking next step. @param error IOException instance to be handled
740 Sets RPC response and triggers subsequent processing. @param rpcResponse Writable response object
741 Repeatedly calls superclass method with socket timeout handling. @throws IOException if an I/O error occurs
742 Repeatedly attempts to read data from socket until timeout is reached. @param buf buffer to store data @param off offset in buffer @param len length of data to read @throws IOException if an I/O error occurs
743 Retrieves the current function's network address.
744 Returns the result of m2 in the current call stack or 0 if empty. @return Result from m2 in the current call stack, defaulting to 0 if none found.
745 Returns a string mask from the current RPC connection, or null if invalid.
746 Recursively fetches and returns the result from the current call stack. @return result value or 0 if no active call found
747 Serializes and returns a string mask using the configured ObjectMapper. @return serialized mask or null on failure
748 Initializes MachineList with host entries and address factory. @param hostEntries Collection of host entries (IP addresses or CIDR ranges) @param addressFactory InetAddressFactory instance for IP address resolution
749 Validates an IP address by recursively checking its sub-network. @param ipAddress the IP address to validate @return true if valid, false otherwise
750 Initializes Linux system info with specified files and time tracking parameters. @param procfsMemFile path to procfs file for memory info @param procfsCpuFile path to procfs file for CPU info @param procfsStatFile path to procfs file for system statistics @param procfsNetFile path to procfs file for network info @param procfsDisksFile path to procfs file for disk info @param jiffyLengthInMillis length of a jiffy in milliseconds
751 Reads memory info from the file and populates various size fields. @param readAgain whether to re-read the file
752 Returns the function mask value based on the number of processors. @return The bit mask representing the number of available processor units.
753 Returns the function mask value based on the number of cores. @return The function mask value representing the available cores.
754 Calculates CPU frequency mask. @return unique system identifier as a long value
755 Reads and parses CPU time from a file.
756 Returns the function mask based on network bytes read. @return unique identifier representing current system state
757 Calculates and returns the function mask. @return A unique identifier representing the function's execution (in bytes)
758 Reads disk statistics from the /proc/fs/disks file and updates numDisksBytesRead and numDisksBytesWritten counters.
759 Retrieves value from a buffer using an index derived from the input key. @param k input key @return V object or null if invalid index
760 Retrieves a value from the buffer using the provided key. @param k input key @return associated value, or null if not found or removed
761 Retrieves a value associated with the given key, updating size and modification counters as needed. @param index bucket index @param key search key @return Value object or null if not found
762 Configures external DTD and stylesheet access masks. @param transformerFactory Factory for creating transformers
763 Converts string representation of a long value with optional size prefix to its numeric equivalent. @param s string representation of the number, e.g. "123k" or "456m" @return the numeric value as a long
764 Formats a number with a specified unit and decimal places. @param n the value to format @param unit the unit of measurement (e.g. "bytes", "KB") @param decimalPlaces the number of decimal places to display
765 Formats a double value as a percentage string with specified decimal places. @param fraction decimal value to format @param decimalPlaces number of decimal places to display @return formatted string or null if not applicable
766 Formats byte array as a hexadecimal string. @param bytes input byte array @param start starting index @param end ending index @return hexadecimal representation of the specified range
767 Formats double value to string with 2 decimal places. @param d input double value
768 Handles exit exceptions with logging and system termination. @param ee ExitException instance
769 Handles halt exception by logging and potentially throwing. @param he the HaltException to handle
770 Registers a shutdown hook with custom priority and timeout. @param shutdownHook Runnable to execute at shutdown @param priority Shutdown hook priority @param timeout Timeout for the hook in specified TimeUnit @param unit Time unit for the timeout (e.g. seconds, milliseconds)
771 Registers or removes a shutdown hook with the specified timeout. @param shutdownHook Runnable to be executed on shutdown @return true if added or removed successfully, false otherwise
772 Executes a shutdown hook with default timeout. @param shutdownHook Runnable to execute on shutdown
773 Reads a resource file by name. @param resourceName identifier for the resource to load
774 Constructs a new LineReader instance from an InputStream. @param in input stream to read from @param bufferSize default buffer size (optional)
775 Checks and resets mask functionality based on time interval. @throws IOException if an I/O error occurs
776 Creates a custom thread factory with the given prefix. @param prefix unique identifier for threads created by this factory
777 Dynamically doubles array capacity when threshold is reached.
778 Combines elements from an iterator into an ArrayList. @param elements iterator yielding elements of type E @return populated ArrayList containing all elements
779 Recursively adds elements from the given iterable to a collection. @param addTo the target collection @param elementsToAdd the source iterable @return true if successful, false otherwise
780 Creates an empty ArrayList with specified initial capacity. @param initialArraySize initial size of the list
781 Writes instance data to output stream using m3() and m2() methods. @param instance object of type T @param dataOutputStream OutputStream for writing data
782 Initializes operation duration tracking with current system time.
783 Sets finished flag based on result of m1().
784 Calculates duration based on intermediate values m1 and m2.
785 Computes and returns a mask value using nested functions m1() and m2().
786 Computes the FUNC_MASK value based on lengthBytes and modulus. @param lengthBytes positive number of bytes @param mod modulus value @return calculated FUNC_MASK value
787 Computes CRC mask using bitwise XOR operation. @param crcA initial CRC value @param monomial polynomial coefficient @param mod modulus for calculation @return resulting CRC mask value
788 Converts an integer to a 32-bit mask in binary format. @param value input integer value @return byte array representation of the mask
789 Returns a hexadecimal string representation of the first 4-byte CRC. @param bytes input byte array (must be exactly 4 bytes)
790 Formats byte array into a hexadecimal string. @param bytes input byte array @return formatted hexadecimal string or throws IOException on invalid length
791 Extracts and unpacks JAR contents to a specified directory. @param inputStream input stream containing the JAR file @param toDir target directory for unpacking @param unpackRegex pattern for files to be extracted
792 Unpacks JAR contents to a specified directory, filtering by regex pattern. @param jarFile JAR archive to unpack @param toDir target directory for unpacked files @param unpackRegex filter pattern for files to unpack
793 Finds the first occurrence of 'b' in utf starting from position start, up to a maximum of n occurrences. @param utf byte array to search @param start initial search position @param length maximum number of bytes to consider @param b target byte value @param n maximum number of occurrences to find
794 Maps a key to a weakly referenced value. @param key unique identifier @param value object to be stored @return associated value or null if not found
795 Retrieves value associated with given key from map. @param key unique identifier @return Value object or null if not found
796 Checks if a key exists in the map by fetching its associated value. @param key unique identifier @return true if key is present, false otherwise
797 Resolves a strong reference to an object with the given key. @param key unique identifier @return V object or null if creation failed
798 Counts and removes weakly referenced objects from the map. @return number of removed objects
799 Returns a snapshot of the suppressed count and wait value. Resets the suppressed count and maximum wait on completion.
800 Calculates function execution mask based on start and finish times. @param finishTime end of execution timestamp @param startTime beginning of execution timestamp @return execution mask string
801 Extracts key-value pairs from input string. @param str input string @return Map of key-value pairs or empty map if invalid
802 Splits a string into an array of substrings, handling escaped separators. @param str input string to split @param escapeChar character used for escaping in the input string @param separator character used as the delimiter @return array of substrings or null if input is null
803 Escapes characters in a string using a specified escape character. @param str input string to be processed @param escapeChar the character used for escaping @param charsToEscape array of characters to be escaped @return modified string with escaped characters or null if input is null
804 Escapes special characters in a string using a custom mask. @param str input string to be masked @param escapeChar character used for escaping @param charsToEscape array of characters to be escaped @return masked string or null if input is null
805 Returns mask string from common version info.
806 Returns function mask string from common version info. @return Function mask string.
807 Returns function name mask from version info.
808 Returns the function mask string from common version info. @return Function mask string or null if not available
809 Returns the version-specific function mask.
810 Returns the function mask string. @return Function mask value as a string
811 Returns the version info mask as a string.
812 Returns function mask string from COMMON_VERSION_INFO. @return function mask string
813 Returns the function mask string. @return Functionality-specific version info as a string
814 Constructs a filtering iterator from an existing iterator and a predicate function. @param source the underlying iterator to be filtered @param filter a function that determines whether an element should be included in the iteration
815 Constructs a haltable remote iterator with specified source and continuation criteria. @param source the underlying iterable data source @param continueWork callback to determine whether iteration should be continued or halted
816 Checks if there is a next element in the stream. @return true if next element exists, false otherwise
817 Initializes this object with the given value, potentially closing it. @param o Object to initialize with, may be closed afterwards
818 Executes a callable on an executor and returns a future result of type T. @param executor the executor to use for execution @param call the callable to execute @return CompletableFuture containing result of type T, or null if not found
819 Creates a lazy auto-closeable reference to an IO resource. @param constructor factory function that creates the IO resource
820 Creates a lazy atomic reference with a given supplier. @param supplier function to lazily load value of type T
821 Calls superclass method with pre-check. @throws IOException if reference is closed
822 Returns a mask value using the m1 function. @throws IOException if an I/O error occurs during execution.
823 Invokes a callable function with IOE exception handling. @param call Callable function to be executed
824 Creates a supplier from a callable that ignores IO exceptions. @param call function to execute, ignoring IO exceptions
825 Creates a builder instance from an iterator of remote items. @param items Iterator of remote items
826 Merges and prioritizes exceptions in the collection. @param exceptions Collection of exception objects
827 Initializes builder with an iterable of items. @param items Iterable collection of items to build from
828 Returns a new builder instance with default settings.
829 Wraps an ExecutionException into an IOException and re-throws it. @param e ExecutionException to be converted
830 Throws an IOException from a CompletionException. @param e CompletionException to rethrow as IOException
831 Configures an object with Hadoop Job configuration. @param theObject object to be configured @param conf Hadoop Configuration instance
832 Retrieves a class by name, throwing an exception if not found. @param name the name of the class to load @return the loaded Class object or null if not found (never returned)
833 Prints detailed thread dump to the provided PrintStream. @param stream output stream @param title title of the thread dump section
834 Initializes a new Configuration instance with given default loading behavior. @param loadDefaults true to load configuration defaults, false otherwise
835 Sets HTTP response with error JSON data. @param response HttpServletResponse object @param status HTTP status code @param ex Throwable exception instance
836 Creates a standardized error response with exception details. @param status HTTP status code for the error @param ex Throwable instance containing error information @return Error response object in JSON format
837 Initializes Cyclic Redundancy Check-32C (CRC-32C) checksum calculator.
838 Iterates over entities and applies mask operations.
839 Generates shell command for fetching user profile information. @param user username to fetch info for
840 Builds command line arguments for fetching user group information. @param user username to fetch groups for
841 Returns command-line arguments for ls function based on platform. @return Array of strings containing 'm1' and/or 'ls' commands
842 Generates chmod command based on permission and recursion flags. @param perm file or directory permissions @param recursive true for recursive operation, false otherwise
843 Generates platform-specific command array to change ownership. @param owner user identifier for ownership change @return Command array or null if not found
844 Generates command strings to create a symbolic link. @param target path of the file or directory being linked @param link path where the symbolic link will be created
845 Returns an array of command(s) to execute based on the operating system. @param link path or URL to resolve
846 Generates shell command to manipulate process by PID. @param code signal code (0 for isAlive, other for kill) @param pid unique process identifier @return array of shell command arguments or null if unavailable
847 Recursively generates a file path by appending the result of m1(basename) to the parent directory. @param parent directory where the file will be created @param basename base name of the file (will be appended with the result of m1)
848 Returns the Hadoop configuration directory as a File object. @throws FileNotFoundException if Hadoop home directory is not found
849 Returns the Hadoop home directory file. If a failure cause is set, throws an exception.
850 Retrieves executable file path from Hadoop bin directory. @param hadoopHomeDir Hadoop installation root @param executable target executable name @return File object for the executable or throws exception if not found
851 Returns or throws a file based on the state of WINUTILS_FAILURE.
852 Synchronizes and iterates over child shells, applying mask operations.
853 Waits on the given thread to shut down within the specified timeout. @param thread Thread to wait for shutdown @return true if thread shut down successfully, false otherwise
854 Shuts down the ExecutorService after waiting for a specified duration. @param service ExecutorService to be shut down
855 Calculates progress mask using synchronized functionality. @return Progress object representing calculated mask
856 Calculates weighted progress based on the given weightage. @param weightage float value between 0 and 1 representing weightage @return Progress object or null if calculation fails
857 Calculates weighted progress from all phases. @return total progress value or current progress if no phases
858 Updates the progress and notifies the parent with method m1. @param none
859 Converts a string path to a UTF-8 encoded string representation. @param path input string path @return encoded string or null on failure
860 Converts file system statistics to a string representation. @param path file system path @param stat file system statistics object @return string representation of the statistics or null if failed
861 Recursively processes data with UTF-8 encoding. @param path current processing path @param data input data to process @param version processing version number
862 Creates a ZNode at the specified path with provided ACL. @param path unique node identifier @param zkAcl list of Access Control List entries @return true if node was successfully created, false otherwise
863 Calls M1 and executes subsequent Curator operations if successful. @param path input path to process @return true if M1 succeeds, false otherwise
864 Performs a masked operation on the specified path based on given ACLs and node path. @param path path to operate on @param fencingACL list of access control lists @param fencingNodePath path of the fencing node
865 Registers program with specified name and metadata. @param name unique program identifier @param mainClass program's primary class type @param description program description string @throws Throwable if registration fails for any reason
866 Builds a function mask using the specified method and argument types. @param targetClass class containing the method @param methodName name of the method to invoke @param argClasses classes of the method's arguments
867 Creates a Builder instance with a dynamically loaded method. @param targetClass the class containing the method @param methodName the name of the method to load @param argClasses variable arguments for the method (optional)
868 Creates an unbound method with the given name. @param name unique method identifier
869 Checks if any method in the array has a specific unbound property. @param methods array of DynMethods.UnboundMethod objects @return true if no method has the property, false otherwise
870 Checks if a method is unbound. @param method UnboundMethod object to check @return true if the method is unbound, false otherwise
871 Binds a method to an object instance. @param receiver the target object
872 Creates a new instance of StaticMethod. @return a new StaticMethod object
873 Generates a function mask by invoking methods on the provided class. @param clazz target class with m1() and m2() methods
874 Generates a function mask using class methods and parameters. @param clazz Class containing m1() and m2() methods
875 Calculates and writes function mask based on data type. @param out DataOutputStream for writing @param reset flag to trigger additional processing @return data type size or 0 on failure
876 Calculates and updates checksum mask in buffer. @param buf input buffer @param offset starting index for calculation @param reset whether to perform additional reset operation @return size of the resulting mask
877 Returns rate limiting object based on provided capacity. @param capacity maximum allowed requests
878 Installs UNIX signal handlers for TERM, HUP and INT signals. @param log Logger instance for logging
879 Initializes a LightWeightGSet with the specified recommended length. @param recommended_length target size of the set
880 Updates include and exclude masks based on host details. @param includes set of included strings @param excludes set of excluded strings
881 Updates mask for hosts, including/excluding specified IDs. @param includeHosts set of host IDs to include in mask @param excludeHosts map of host IDs to exclude from mask
882 Computes the FUNC_MASK value based on the provided key, nbytes, and initval. @param key cryptographic key @param nbytes length of the key in bytes @param initval initial value for calculation @return computed FUNC_MASK value as an integer
883 Returns a specific hash implementation based on the provided type. @param type Hash type (JENKINS_HASH or MURMUR_HASH) @return Hash object for specified type, or null if invalid type
884 Initializes a new instance of the Counting Bloom Filter.
885 Initializes a new instance of the BloomFilter class.
886 Initializes an empty Dynamic Bloom Filter instance.
887 Computes an array of hash values for a given Key object. @param k the input key @return array of int hash values or throws exception on invalid input
888 Initializes a new instance of AutoCloseableLock using a ReentrantLock.
889 Calls the m1 method to perform some unknown operation.
890 Logs an error message with exception details. @param e Throwable instance to log @param text error message template @param args variable arguments for the message
891 Logs an error message with a formatted string. @param errorcode unique error code @param text descriptive error message
892 Loads a class by name and logs its source URL. @param name class name @param clazz Class object
893 Returns a GcData instance with mask applied. @return GcData object with mask applied to current data
894 Initializes CRC-32 calculator with default settings.
895 Iterates over hooks and checks for timeouts. @return number of timed out hooks
896 Adds an element to the heap and updates its mask. @param element T object to add
897 Retrieves the top element from a min-heap, updating its contents. @return the removed top element or null if empty
898 Executes function m1 to apply mask operation.
899 Creates and populates a hash set with iterator's elements. @param elements iterator over elements to add @return populated hash set
900 Creates an initial set with estimated size based on provided capacity. @param expectedSize anticipated number of elements
901 Updates the current value to a specified mask, ensuring forward progress. @param newValue new mask value
902 Creates a table listing with default columns and settings. @return TableListing object
903 Checks if a given key is deprecated. @param key unique identifier to check
904 Checks if a name is masked due to deprecation. @param name the name to check
905 Reloads all existing configurations in the registry.
906 Applies mask to configuration based on given name. @param name unique identifier for masking operation
907 Converts time duration string to specified unit and returns value. @param name identifier for logging purposes @param vStr time duration string (e.g., "1h", "2d") @param defaultUnit default time unit if string is invalid @param returnUnit target time unit for result @return converted long value or throws error if precision lost
908 Creates a properties object from a list of tags. @param tagList collection of tag names
909 Masks sensitive text in key-value pairs. @param key unique identifier @param value textual data to be processed @return original text or redacted text if key matches filter criteria
910 Masks sensitive data by returning a redacted string when key matches a specific condition. @param key the input key to check @param value the input value to mask or return as is
911 Initiates server reconfiguration task. @throws IOException if server is stopped or another task is running
912 Constructs a DeprecationContext from another context and deltas. @param other existing DeprecationContext to copy from @param deltas array of DeprecationDelta updates to apply
913 Constructs a ReconfigurationException with detailed property configuration values. @param property name of the reconfigured property @param newVal new value of the reconfigured property @param oldVal original value of the reconfigured property @param cause underlying exception causing the reconfiguration issue
914 Constructs a ReconfigurationException with detailed error message. @param property affected system property @param newVal new value of the property @param oldVal original value of the property
915 Enables or disables manual HA state management based on automatic failover settings. @param target HAServiceTarget to evaluate @return true if manual management allowed, false otherwise
916 Executes a command via SSH, capturing output and error streams. @param session SSH connection object @param cmd command to execute @return exit status of the executed command
917 Verifies service health and state for failover eligibility. @throws ServiceFailedException if unhealthy or not eligible
918 Reads data from a range into a ByteBuffer using the provided function. @param range FileRange object specifying the data to be read @param buffer ByteBuffer to store the read data @param operation Function to process the read data
919 Validates and sorts input file ranges, checking for overlaps and ensuring they fit within a given file length. @param input list of FileRange objects @param fileLength optional file length to validate against @return sorted list of validated FileRange objects or null if empty
920 Initializes a new instance of BlockManager with given BlockData. @param blockData non-null BlockData object
921 Applies mask to buffer data. @param data BufferData object to modify
922 Removes the specified item from the pool, synchronizing with createdItems. @param item item to be removed
923 Validates a variable number of states against expected values. @param states array of State objects
924 Validates and sanitizes string argument. @param arg input value to validate @param argName name of the argument being validated
925 Validates the number of elements in a collection. @param collection input collection @param numElements expected count @param argName name of the collection
926 Validates and sets file system mask for the given path. @param path Path to validate @param argName Name of the argument being validated
927 Initializes a bounded resource pool with the specified capacity. @param size maximum number of resources in the pool
928 Initializes a BufferPool with specified size and bufferSize. @param size total number of buffers in pool @param bufferSize size of each buffer @param prefetchingStatistics statistics for memory allocation tracking
929 Sets mask bit for a given block. @param blockNumber unique block identifier
930 Initializes a BufferData object with the specified block number and data. @param blockNumber unique block identifier @param buffer ByteBuffer containing block data
931 Initializes a Retryer with customizable delay and update intervals. @param perRetryDelay delay between retries in milliseconds @param maxDelay maximum total retry delay in milliseconds @param statusUpdateInterval interval to update retry status in seconds
932 Applies masks to array elements and updates internal state. @param array input array of type T @param argName name of the parameter for logging purposes
933 Applies mask operations to input byte array and logs result. @param array input data to be processed @param argName name of the input parameter for logging purposes
934 Applies masks to short array using multiple methods. @param array input short array @param argName name of the argument being masked
935 Applies mask operations to an integer array. @param array input array of integers @param argName name of the argument being masked (for logging purposes)
936 Applies mask operations to an array and updates its length. @param array input array to modify @param argName name of the argument being processed
937 Masks function arguments based on iterable size. @param iter Iterable of elements to check @param argName Name of the argument being masked
938 Processes a collection of paths and returns a list of entries containing the processed path and any errors encountered. @param paths Collection of paths to process
939 Applies function to IO statistics snapshot of given source. @param source data source (must be serializable) @param fun function to apply @return result of applying function or null if fails
940 Initializes FlagSet with given class, prefix and optional initial flag set. @param enumClass the enumeration class @param prefix the prefix for flag names @param flags the initial EnumSet of flags (null to create an empty one)
941 Closes the object and updates cache with object identity hash. @throws IOException if an I/O error occurs during closing
942 Recursively calls m1 with FileStatus parameter. @param o FileStatus object to process
943 Calls superclass's implementation of m1. @param o FileStatus object to process @return result of superclass's m1 invocation
944 Recursively generates an array of Paths containing the provided path and its ancestors. @param stats FileStatus array (not used in this implementation) @param path the starting file or directory path @return Path[] containing the original path and its parent directories
945 Returns true if the given file system supports read-only connector. @param path file system path @param capability file system capability
946 Creates a JSON serializer for IO statistics snapshot. @return JsonSerialization object for IO statistics snapshot
947 Creates StorageStatistics object from given IOStatistics. @param name storage identifier @param scheme storage scheme (e.g. file system) @param source input statistics
948 Creates an empty storage statistics object with specified masks. @return EmptyStorageStatistics object
949 Constructs a PathIsDirectoryException with specified file path and reason. @param path the file path that caused the exception
950 Constructs an exception indicating that a given path is not a directory. @param path the invalid file path
951 Constructs an exception for unsupported file system operations. @param path the affected file path
952 Constructs an exception indicating that a directory with specified path is not empty. @param path absolute or relative path to non-empty directory
953 Initializes buffer size and returns mask value. @param bufSize new buffer size @return mask value
954 Calculates and returns the FUNC_MASK value based on replication settings. @param replica short integer representing the replication configuration
955 Calculates and returns the function mask value based on block size. @param blkSize block size in bytes
956 Returns a mask based on recursive calculations.
957 Creates and returns a function mask. Returns the result of calling m2().
958 Creates a mask with optional overwrite flag. @param overwrite true to create overwrite flag, false otherwise
959 Generates and returns a mask based on specified flag settings.
960 Interprets and stores host array, either from input or interning empty array. @param hosts input host array (or null to replace with empty array)
961 Initializes or updates the cached hosts array. @param cachedHosts optional array of host strings to interner
962 Interns and caches an array of names for efficient reuse. @param names array of strings to interner
963 Initializes or updates the topology paths array. @param topologyPaths array of topology path strings
964 Attempts to evaluate file metadata. If file not found, returns false. @param f Path to the file
965 Wraps IOException with additional context and logs. @param path file/directory path @param methodName method performing the operation @param exception original IOException instance @return wrapped IOException or null if interrupted
966 Verifies and reads data block at specified position. @param position offset to check
967 Writes masked data to file. @throws IOException on write error
968 Initializes expression factories with predefined masks. @param factory ExpressionFactory instance to configure
969 Registers various commands with the CommandFactory. @param factory instance of CommandFactory to register commands with
970 Expands file patterns into a list of matching filenames. @param filePattern pattern to expand @return List of filenames that match the pattern
971 Retrieves file statuses for a given path and filter. @param f the directory to traverse @param filter optional filter for file selection @return array of FileStatus objects
972 Retrieves status of multiple files matching a filter. @param files array of file paths to process @param filter filter criteria for files @return array of FileStatus objects or null if an error occurs
973 Wraps a call to the underlying m1 method with null as the last parameter. @param url URL object @param token Token object @param renewer Renewer string
974 Calls m1 with default parameters. @param url URL to access @param token authentication token
975 Calls m1 with provided URL and token, passing null as a third parameter. @param url the URL to process @param token the authentication token
976 Initializes FileEncryptionInfo object with provided parameters. @param suite CipherSuite instance @param version CryptoProtocolVersion instance @param edek encrypted data encryption key (EDEK) @param iv initialization vector @param keyName string identifier for encryption key @param ezKeyVersionName string identifier for EZ key version
977 Computes and returns a mask value based on the given file system permissions. @param perm FsPermission object representing file system permissions
978 Computes and returns the functional mask based on the provided checksum options. @param chksumOpt checksum optimization parameters
979 Wraps an IOException in a custom exception. @param cause underlying IOException to be wrapped
980 Initializes an instance with a custom file system link resolution function. @param fn the custom resolution function to use
981 Initializes GlobBuilder with FileContext. @param fc FileContext to use
982 Initializes GlobBuilder with a file system. @param fs the file system to operate on
983 Returns a mask value based on the given file system permissions. @param perm FsPermission object representing file system permissions @return A unique mask value for the specified permissions
984 Calculates and returns the function mask. @param prog Progressable object to track progress @return Function mask value
985 Computes and returns the function mask based on given checksum options. @param chksumOpt checksum options @return computed function mask
986 Validates and bounds byte array write operation. @param b input byte array @param off starting offset @param len length to write
987 Calls M2 method on object referenced by string s1. @param s1 reference to an object with M2 method @param s2 input for M2 method @return result of M2 method call
988 Checks if the current ZooKeeper client has a valid session. @param ctx ZooKeeper object containing session information @return true if client is stale, false otherwise
989 Retrieves or initializes Statistics instance for the given file system class. @param scheme unique file system identifier @param cls Class of the file system @return Statistics object associated with the file system
990 Closes and flushes input/output streams, handling buffering. @param in InputStream to close @param out OutputStream to close @param buffSize buffer size (not used) @param close whether to actually close the streams
991 Copies data from input stream to output stream, optionally closing streams. @param in InputStream containing data @param out OutputStream for copied data @param count Total bytes to copy @param close Whether to close the streams after copying
992 Recursively checks a directory for errors and returns on first success. @param dir Directory to check
993 Checks if there are any non-zero type quotas. @return true if any quota is set, false otherwise
994 Checks if the type mask is set. @return true if any storage types are consumed, false otherwise
995 Calls superclass's version of m1.
996 Calls superclass implementation of m1(). @return result from superclass's m1() method.
997 Initializes mask with default values.
998 Updates local M3 value using another MeanStatistic instance. @param other MeanStatistic object to update from
999 Formats IOStatistics object into a string. @param statistics IOStatistics data or null @return formatted string or empty if no data
1000 Formats data from a map into a string using the specified type and delimiter. @param sb StringBuilder to append formatted data @param type Type of data (e.g. "key" or "value") @param map Map containing data to format @param isEmpty Predicate to check for empty values
1001 Returns a duration tracker instance with default start time. @param key unique identifier for tracking purposes
1002 Retrieves and processes LongStatistics from a map of counters. @return Iterator<LongStatistic> containing processed data
1003 Updates mask settings for mean, min, and max values. @param prefix unique identifier prefix @param durationMillis time duration in milliseconds
1004 Retrieves and returns dynamic I/O statistics. @return DynamicIOStatistics object
1005 Adds dynamic IO statistics function with specified key and evaluation logic. @param key unique identifier for the statistic @param eval function to evaluate IO values as long integers
1006 Adds dynamic I/O statistics builder with custom evaluation function. @param key unique identifier @param eval function to evaluate statistic value from input string @return DynamicIOStatisticsBuilder instance for chaining
1007 Configures dynamic IO statistics builder with custom evaluation function. @param key unique statistic identifier @param eval long-value evaluator function for the key
1008 Adds dynamic IO statistics builder function with given key and evaluation function. @param key unique identifier for the statistics @param eval function to evaluate long value from input string
1009 Configures dynamic I/O statistics with a custom evaluation function. @param key unique key for the configuration @param eval function to evaluate mean statistic values @return this builder instance for method chaining
1010 Initializes and schedules an IRQ handler with the specified name. @param signalName unique identifier for the IRQ handler
1011 Returns a mapping of function names to their corresponding mask values.
1012 Transform map entries using passthrough function. @param source input map to transform
1013 Creates an instance of IOStatisticsSnapshot with default values.
1014 Initializes IO statistics context with given thread and ID. @param threadId unique identifier of the thread @param id unique identifier of the IO statistics context
1015 Creates an empty IOStatisticsSnapshot instance.
1016 Returns whether to mask IO statistics. @return true to mask IO statistics, false otherwise
1017 Returns I/O statistics with specified output mask. @return IOStatistics object representing current I/O state
1018 Returns IO statistics with function mask applied. @return IOStatistics object with updated mask value
1019 Retrieves I/O statistics based on provided input data. @return IOStatistics object representing system performance metrics
1020 Returns IO statistics masked with the specified function. @return IOStatistics object with applied mask
1021 Returns IO statistics based on input mask. @return IOStatistics object reflecting current state
1022 Returns I/O statistics mask. @return IOStatistics object or null if not supported
1023 Returns IO statistics with a specific mask value. @return IOStatistics object with mask applied
1024 Returns IO statistics with specified mask. @return IOStatistics object representing current IO state
1025 Returns IO statistics with mask applied. @return IOStatistics object with mask applied
1026 Verifies checksums for the given data and CRC values. @param type Type of verification @param algorithm Checksum algorithm to use @param data Data being verified @param dataOffset Offset into data where verification starts @param dataLength Length of data being verified @param bytesPerCrc Number of bytes per CRC value @param crcs Array of expected CRC values @param crcsOffset Offset into crcs array where verification starts @param filename Name of file being verified (for error reporting) @param basePos Base position in file for relative error reporting
1027 Updates IV and key for decryption using provided parameters. @param decryptor Decryptor object @param position Position value used in calculations @param iv Initialization vector to be updated
1028 Encrypts and writes data from input buffer to output. @throws IOException on write errors
1029 Initializes checksum calculator with default values. @param unknown MD5 hash value @param unknown CRC-32 hash value @param unknown Gzip compression status
1030 Initializes an empty MD5MD5CRC32CastagnoliFileChecksum object.
1031 Initializes a GlobPattern instance from a string representation. @param globPattern string pattern following glob syntax rules
1032 Returns a string representation of the specified file. @param file the file to convert to a string
1033 Generates a mask string for the given file. @param file File object to generate mask for
1034 Extracts zip archive to specified directory, preserving timestamps and permissions. @param inputStream zip archive input stream @param toDir target extraction directory
1035 Unzips the specified archive file to the target directory, handling platform-specific permissions. @param inFile input Zip Archive @param unzipDir target unzipping directory
1036 Executes SFTP operation using pooled connections. @param channel SFTP channel object @throws IOException if an I/O error occurs
1037 Closes and cleans up all active connections, updating internal state.
1038 Initializes buffer and checksum arrays with specified size. @param size target buffer size
1039 Copies and aggregates statistics from another instance. @param other source Statistics object
1040 Calculates the total bytes read by aggregating statistics.
1041 Calculates the total bytes written by aggregating statistics.
1042 Calculates the total read operations across all statistics data. @return total read operations count
1043 Calculates the total number of large read operations.
1044 Calculates total write operations mask. @return integer value representing the total write operations
1045 Calculates the cumulative remote read time in milliseconds.
1046 Aggregates statistics using a custom aggregator. @return aggregated StatisticsData object
1047 Calculates the total bytes read for erasure coded data.
1048 Aggregates statistics and updates root data.
1049 Validates and configures file/path operation flags. @param path Object representing a file or directory @param pathExists whether the file/directory already exists @param flag EnumSet of CreateFlag options to consider
1050 Validates and initializes flags for create operation. @param flag set of CreateFlags to validate
1051 Constructs a URI with scheme and port masking. @param uri input URI @param supportedScheme supported scheme @param authorityNeeded whether authority is required @param defaultPort default port to use if not specified in URI @return masked URI or null if invalid
1052 Creates an ArrayPrimitiveWritable instance with the specified primitive type. @param componentType Class of the primitive type (e.g., Integer.class, Float.class)
1053 Parses a permission string into a bitmask. @param permString string of 'r', 'w', 'c', 'd', and 'a' characters @return bitmask value or throws exception on invalid input
1054 Combines default and user checksum options. @param defaultOpt default checksum option @param userOpt user-provided checksum option
1055 Calculates the functional mask URI using nested calls to m1 and m2. @return calculated URI object
1056 Constructs a ContentSummary object with given metrics. @param length total content length in bytes @param fileCount number of files in the content @param directoryCount number of directories in the content
1057 Retrieves file system status with default parameters. @throws IOException on I/O error
1058 Initializes HttpReferrerAuditHeader from builder parameters. @param builder configuration builder for audit header properties
1059 Releases and cleans up allocated buffer data. @param data BufferData object to release
1060 Constructs a semaphored delegating executor with given settings. @param executorDelegatee the underlying executor service @param permitCount initial permit count for semaphore @param fair whether to use fair locking in semaphore
1061 Finds and releases the highest-priority 'ready' BufferData by blockNumber. @param blockNumber unique block identifier
1062 Returns a mask value by executing m1() and retrieving result from buffer. @return integer mask value
1063 Checks if position is within buffer range. @param pos position to check
1064 Returns a mask value based on internal calculations.
1065 Returns an IO statistics context based on thread-level stats enablement. @return Active or empty IO statistics context depending on thread settings
1066 Updates active IO stats context with given statistics. @param statisticsContext IOStatisticsContext object
1067 Merges overlapping file ranges into combined ranges. @param sortedRanges list of file ranges to merge @return list of merged combined file ranges
1068 Merges file ranges into combined segments based on CRC offset. @param dataRanges list of FileRange objects @param bytesPerSum size of each CRC sum chunk @param minSeek minimum seek position for merging @param maxSize maximum size of merged segment @return List of CombinedFileRange objects representing merged segments
1069 Initializes a new instance of the Name class with default settings.
1070 Recursively traverses the expression tree and performs operation m1 on each node. @param item PathData object to process @param depth current recursion depth (not used in this implementation)
1071 Returns cached FindOptions instance or initializes it with m1() values.
1072 Parses command line arguments and sets options. @param args collection of argument strings
1073 Returns a string describing the function mask based on conditions. @return descriptive string or null if condition is met
1074 Logs error message with prefix. @param message error description to be logged
1075 Generates a function mask string based on usage flag and command options. @return Function mask string or empty if no options available
1076 Segregates ACL entries into access and default scopes. @param aclEntries list of AclEntry objects to process
1077 Formats and prints masked data to the specified output stream. @param out target output stream
1078 Creates a Location instance based on the given boolean flag. @param allow true to create an enabled location, false otherwise
1079 Creates a new Data instance with the specified mask. @param allow boolean flag indicating whether to allow the data
1080 Initializes a new instance of the Shell class with default values. @param initialDelay initial delay value (default is 0)
1081 Creates a delegated authentication token from the given DelegationToken. @param dToken DelegationToken object to create token from
1082 Delegates file status iteration to underlying FS instance. @param f Path to iterate over @return Iterator of LocatedFileStatus objects or null if empty
1083 Opens a file asynchronously using the FS implementation. @param path file location @param parameters open file parameters @return input stream to the opened file or null if failed
1084 Retrieves the fallback file system mask. @return FileSystem object or null if not found
1085 Copies data from input to output buffer. @param input input ByteBuffer @param output output ByteBuffer
1086 Encrypts and writes data to the given ByteBuffer. @param output ByteBuffer to store encrypted data
1087 Parses and creates a RegexMountPointInterceptor instance from the input string. @param interceptorSettingsString configuration settings as a string
1088 Normalizes and truncates URL path. @param scheme protocol scheme @param path original URL path @return normalized URL path
1089 Validates file system path syntax. @param pathString path string to check @param slashed whether the path is supposed to be slash-separated
1090 Checks URI mask functionality. @return true if successful, false otherwise
1091 Extracts the least significant 31 bits from the given Path object. @param p the input Path object
1092 Validates and normalizes a file system path. @param path the input path to validate
1093 Calculates a function mask by traversing the directory tree and finding the maximum file ID. @param initial Path to start searching from @param lastId previous maximum file ID @return next available file ID (id + 1)
1094 Calculates and updates functional mask value. @param n number of units to add @return the updated functional mask value or 0 for invalid input
1095 Fetches data from InputStream using a ByteBuffer from the provided pool, with optional zero-copy read and direct buffer support. @param stream InputStream to read from @param bufferPool ByteBufferPool for allocating buffers @param maxLength maximum length of data to read @return ByteBuffer containing read data or null on failure
1096 Performs mask-related operations on evaluated entries. Calls methods to evaluate and process masks.
1097 Creates and initializes a CommonAuditContext object with default settings. @return initialized CommonAuditContext instance
1098 Constructs an FsPermission object with specified user, group, and other actions. @param u user action @param g group action @param o other action
1099 Constructs FsPermission object from short mode value. @param mode short mode value representing file permissions
1100 Constructs FsPermission object from DataInput stream. @param in input stream containing permission byte
1101 Returns the corresponding file system action based on the ACL entry. @param entry AclEntry object containing access control information
1102 Creates a PermissionStatus instance with the given attributes. @param user user identifier @param group group identifier @param permission file system permissions
1103 Parses ACL specification into a list of AclEntry objects. @param aclSpec comma-separated string containing ACL entries @param includePermission whether to include permission details in each entry @return List of parsed AclEntry objects or empty list if invalid input
1104 Creates FsCreateModes object from two FsPermission objects. @param masked permission bits to mask @param unmasked original permission bits
1105 Evaluates ACL entry permissions and outputs mask information. @param aclStatus current ACL status @param fsPerm file system permission @param entry ACL entry to evaluate
1106 Splits input string by comma delimiter. @param str input string to split
1107 Calls m1() and returns result from byteBuffer's m2(). @return result of byteBuffer.m2()
1108 Calls method m1 and returns result of byteBuffer's m2. @return true if successful, false otherwise
1109 Initiates block data upload with specified mask. @throws IOException on upload failure
1110 Checks if function is in closed state. @return true if closed, false otherwise
1111 Calls superclass and output methods.
1112 Wraps URI in a call to AbstractFileSystem.m1. @param uri input URI
1113 Calls m1() to initialize context and then delegates to m2(). @return result from m2() in initialized context
1114 Writes sync data to output stream or updates last sync position. @throws IOException on write error
1115 Returns a mask value from output stream. @throws IOException on I/O error
1116 Calculates a long value by combining two masked values. @return combined mask value
1117 Computes the content summary for a given file path. @param f the file path to process @return ContentSummary object representing the aggregated data
1118 Processes user group strings to populate users and groups sets. @param userGroupStrings array of ACL parts with user/group info
1119 Retrieves an EnumSet from a string list, applying a mapping and ignoring unknown values if requested. @param key unique identifier for the operation @param valueString comma-separated string of values to process @param enumClass Class representing the enumeration type @param ignoreUnknown true to bypass exceptions on unknown values @return EnumSet containing processed values, or null if invalid input
1120 Validates service state against a specified expected state. @param expectedState required service state
1121 Initializes an AbstractService instance with a given name. @param name unique identifier of the service
1122 Validates transition of a service to a proposed state. @param name service name @param state current service state @param proposed target service state
1123 Creates a ServiceLaunchException instance with exit code and original exception. @param exception original exception to be wrapped
1124 Validates and logs configuration files. @param filenames array of configuration file names
1125 Creates an ExitUtil.ExitException instance based on the provided Throwable. @param thrown the exception to wrap @return a custom ExitException with additional details or null if not applicable
1126 Registers a shutdown hook to safely terminate services. @param service service instance to be shut down
1127 Records and handles service failure by updating the failure cause. @param exception Exception instance to be recorded
1128 Logs lifecycle event with current time and state.
1129 Stops specified number of started services in reverse order. @param numOfServicesStarted number of services to stop @param stopOnlyStartedServices true to only stop started services, false to also stop init'd services
1130 Wraps Service exception in LOG exception. @param service instance of Service to wrap exception from
1131 Calculates function mask by comparing two UTF-8 strings. @param o string to compare with this object's bytes
1132 Compares the bytes of two UTF-8 objects for equality. @param o object to compare with this instance @return true if byte arrays are equal, false otherwise
1133 Calculates a mask value using MD5 hashes. @param that the other MD5 hash to compare with @return an integer mask value
1134 Calculates the bitwise mask between two binary comparable values. @param other The BinaryComparable value to compare with
1135 Computes a bitwise mask from two byte arrays. @param other input array to combine with @param off offset into other array @param len length of input array slice
1136 Calculates a mask value using m1 and m2 values. @return calculated mask value as an integer
1137 Calculates masked value using m1 and m2 functions. @param bytes input byte array @param start starting index in bytes
1138 Sets the array size with optional resizing if necessary. @param size new array size
1139 Checks file accessibility on Windows or calls platform-independent method. @param f File to check @return true if accessible, false otherwise
1140 Tests write access to a file on the current OS. @param f File object @return true if writable, false otherwise
1141 Checks if file has execute permission. @param f the File object to check
1142 Returns an instance of the ReadaheadPool class, initializing it if necessary.
1143 Calculates a function mask value based on condition evaluation. @return non-zero if m1() and m2() both evaluate to true, otherwise 0
1144 Calculates checksum for provided data and stores it in the sums array. @param data input data to calculate checksum from @param dataOffset offset into data where calculation starts @param dataLength length of data to process @param sums output array to store calculated checksums @param sumsOffset offset into sums array where result will be stored
1145 Creates a file output stream with specified permissions. @param f the file to create @param permissions the desired file permissions @return FileOutputStream object for writing to the file @throws IOException if an I/O error occurs
1146 Releases and reinitializes crypto stream buffers from pool.
1147 Initializes crypto streams with masks. @param inBuffer input buffer to mask @param outBuffer output buffer to mask
1148 Fetches file status by descriptor, handling Windows-specific differences. @param fd FileDescriptor to retrieve status for @return Stat object containing file status or null on failure
1149 Retrieves file statistics for the specified path. @param path file system path @return Stat object containing file attributes or null on error
1150 Creates a new instance of BoundedByteArrayOutputStream with specified initial capacity and maximum size limit.
1151 Constructs an instance from a given EnumSet. @param value the EnumSet to copy
1152 Invokes buffer's m1 method to process input stream data. @param in input stream containing data @param length length of input data
1153 Reads and processes key data from buffer. @return DataInputStream object containing processed key data
1154 Encodes and sets new value for writable object using base64 encoding. @param obj Writable object to set new value on @param newValue new encoded value as string
1155 Computes and returns a result using buffers and keys. @param b1 input byte array 1 @param s1 start index for b1 @param l1 length of b1 @param b2 input byte array 2 @param s2 start index for b2 @param l2 length of b2 @return result value (type not specified)
1156 Checks if the given ECBlockGroup has valid erase count. @param blockGroup ECBlockGroup object to verify @return true if erase count is within valid range, false otherwise
1157 Recursively sums up ECBlockGroup values from its sub-groups. @param blockGroup ECBlockGroup instance @return total value of the block group and its children
1158 Extracts indices of EC blocks that match a certain condition. @param inputBlocks array of EC blocks to search @return array of indices or empty array if none found
1159 Validates and counts input buffers against specified conditions. @param buffers array of ByteBuffer objects to validate @throws HadoopIllegalArgumentException on invalid buffer or insufficient count
1160 Validates input buffers for decoding. @param buffers array of byte arrays to validate
1161 Initializes erasure decoding step with input blocks, erased indexes, and encoding/decoding tools. @param inputBlocks EC block array @param erasedIndexes array of erased data unit indices @param outputBlocks EC block array for results @param rawDecoder Raw Erasure Decoder instance @param rawEncoder Raw Erasure Encoder instance
1162 Validates input arrays for masking operation. @param inputs array of data to mask @param erasedIndexes array of indexes to erase from outputs @param outputs array of masked data
1163 Initializes ECBlock-based erasure encoding step with raw encoders. @param inputBlocks array of input blocks @param outputBlocks array of output blocks @param rsRawEncoder raw encoder for Reed-Solomon encoding @param xorRawEncoder raw encoder for XOR encoding
1164 Validates input and output array lengths against encoder parameters. @param inputs input data array @param outputs output data array
1165 Merges two arrays of integers into a single array. @param p first array @param q second array @return merged array with common elements combined
1166 Computes the element-wise product of two arrays using a recursive formula. @param p first array @param q second array @return an array with the element-wise product of p and q
1167 Performs row operations to transform the input matrix into upper triangular form. @param matrix 2D array to be transformed
1168 Prints header and processes ECChunks. @param header input header string @param chunks array of ECChunk objects to process
1169 Applies function m1 to each ByteBuffer in the array. @param buffers array of ByteBuffers @param dataLen length of data to process
1170 Processes ECChunk array and returns a ByteBuffer array with filtered data. @param chunks Array of ECChunks to process
1171 Applies function m1 to each buffer array in parallel. @param buffers arrays of byte data @param offsets initial offset for each array @param dataLen length of the data to process
1172 Initializes a Galois Field with default parameters. @return GaloisField object
1173 Initializes BlockCompressorStream with output stream and compression settings. @param out target OutputStream @param compressor Compressor instance for data compression @param bufferSize allocated buffer size for input data @param compressionOverhead overhead bytes consumed by compression algorithm
1174 Initializes ZStandard decompressor with specified buffer size. @param bufferSize maximum size of direct buffers for compression and decompression
1175 Initializes a new instance of the Lz4Compressor class with default direct buffer size.
1176 Retrieves a compression codec instance by name, returning the class type or null on failure. @param codecName name of the desired compression codec
1177 Creates or retrieves Compressor instance based on provided codec and configuration. @param codec CompressionCodec instance @param conf Configuration object @return Compressor instance or null if creation failed
1178 Retrieves a Decompressor instance from pool or creates a new one based on codec. @param codec CompressionCodec object @return Decompressor instance or null if creation fails
1179 Updates or removes a Compressor instance based on its type. @param compressor Compressor object to process
1180 Applies mask to a Decompressor instance based on its type. @param decompressor Decompressor instance to process
1181 Returns the compressor class based on function mask. @return Compressor subclass (ZStandardCompressor)
1182 Returns the decompressor class based on the function mask. @return Class of the ZStandard decompressor.
1183 Initializes Zlib compressor with default settings.
1184 Initializes Zlib compressor with configuration settings. @param conf application configuration
1185 Reinitializes the compressor with a new configuration. @param conf Configuration object
1186 Processes gzip header and sets the state accordingly.
1187 Writes user profile data to output stream. @param out DataOutput stream to write to
1188 Extracts and casts a 64-bit value from the input stream into an integer. @param stream DataInput stream containing the value @return The extracted integer value or throws IOException if out of range
1189 Validates and extracts an integer value from the input stream within a specified range. @param stream DataInput stream containing the integer value @param lower minimum allowed value @param upper maximum allowed value @return extracted integer value as int, or throws IOException if invalid
1190 Initializes Text instance from input string. @param string input text to be stored in this Text object
1191 Finds the position of a substring within a byte array. @param what the target substring @param start search starting offset in the array @return the matched position or -1 if not found
1192 Writes serialized data to output stream and returns its length. @param out output stream @param s input string @return integer length of written data or -1 on failure
1193 Writes a string to output with length masking. @param out DataOutput stream @param s String value @param maxLength maximum allowed bytes @return actual bytes written
1194 Initializes internal state from UTF-8 encoded byte array. @param utf8 input data in UTF-8 encoding
1195 Copies text attributes from one Text object to another. @param other Text object containing attributes to copy
1196 Parses text up to the next newline or maxBytesToConsume, consuming at most maxLineLength characters per line. @param str Text object to append to @param maxLineLength maximum length of each line @param maxBytesToConsume total bytes to consume before newline @return number of consumed bytes
1197 Consumes input bytes until a record delimiter is found or maxBytesToConsume is reached. @param maxLineLength maximum number of characters to read per line @return total consumed bytes
1198 Initializes a new instance of SortedMapWritable with an empty TreeMap. @param none
1199 Initializes an empty instance of MapWritable.
1200 Initializes a new Key instance from a byte array. @param value the key value as a byte array
1201 Computes MD5 hash of given byte array. @param data input bytes to be hashed
1202 Computes MD5 hash using provided UTF-8 string. @param utf8 UTF-8 encoded string to hash
1203 Sets MD5 hash value from hexadecimal representation. @param hex hexadecimal string representing MD5 hash
1204 Creates a retry policy with fixed sleep duration. @param sleepTime duration to wait between retries @param timeUnit unit of the sleep time (e.g. seconds, milliseconds)
1205 Creates a retry policy with fixed sleep between retries. @param maxRetries maximum number of retries @param sleepTime time to wait before next retry in specified unit @return RetryPolicy instance for the configured policy
1206 Creates an exponential backoff retry policy with specified parameters. @param maxRetries maximum number of retries @param sleepTime initial delay between retries in the given unit @param timeUnit unit of measurement for the sleep time (e.g. milliseconds, seconds)
1207 Creates a retry policy with proportional backoff up to maximum retries. @param maxRetries maximum number of allowed retries @param sleepTime initial sleep duration in specified unit @param timeUnit time unit for the sleep duration (e.g. SECONDS, MILLISECONDS)
1208 Updates write lock held timestamp.
1209 Acquires timestamp lock and updates lockAcquireTimestamp.
1210 Updates lock held timestamp when write lock is acquired.
1211 Creates a proxy instance with failover and retry capabilities. @param iface interface type @param proxyProvider provider for the underlying proxy object @param methodNameToPolicyMap map of method names to retry policies @param defaultPolicy default retry policy when no specific policy is defined
1212 Delegates to Multiple Linear Random Retry strategy. @return result of underlying strategy's implementation
1213 Recursively checks for instance of WrapperRetryPolicy. @param obj object to check
1214 Returns an IOException instance with error details. @return IOException object containing exception information.
1215 Returns a string array containing compression masks.
1216 Returns block state value from associated RBlockState instance. @return Block state value as a string or equivalent default if not set
1217 Reads and processes input data to generate a mask string. @param in DataInput object providing input data
1218 Calculates and updates mask-related variables based on input data. @throws IOException if input reading fails
1219 Returns a comparator instance based on the provided file metadata name. @param name string identifier of the file metadata
1220 Writes chunk to output stream with length mask. @param chunk binary data chunk @param offset starting index in chunk @param len length of chunk to write @param last true if this is the last chunk in a sequence
1221 Flushes output and writes data to buffer. @param data input data array @param offset starting index in data @param len number of bytes to write
1222 Initializes single chunk encoder with output stream and chunk size. @param out DataOutputStream to write encoded data @param size Chunk size
1223 Returns a comparator for sorting Scanner.Entries based on their masked values. @throws RuntimeException if entries are not comparable (i.e., TFiles are unsorted)
1224 Checks if current location is within a valid range relative to end location. @return true if current location is at or beyond end location, false otherwise
1225 Calculates a location based on an offset and block index. @param offset input offset to calculate from @return Location object or end if invalid offset
1226 Returns location based on block and record indices. @return Location object representing current position.
1227 Returns the integer value from the first four bytes of the buffer. @param buf input byte array
1228 Processes input string, truncating if too long and encoding into byte array. @param string input string to process
1229 Converts Writable objects into a byte array. @param writables variable arguments of Writable objects @return byte array representation or null on failure
1230 Generates a byte array from the input string. @param string input string
1231 Compresses data using the Deflate algorithm and writes it to output. @param uncompressedDataBuffer input buffer containing data to compress
1232 Copies the contents of another Map object into this one. @param other source Map object
1233 Sets key-value pair in compressed form. @param key unique identifier with correct class @param val value with correct class
1234 Generates a byte mask using the DataOutputBuffer. @return byte array representing the generated mask
1235 Encodes object as base64 string. @param obj Writable object to encode @return Base64 encoded string or null on error
1236 Masks input buffer using output buffer's first two elements. @param none (no parameters)
1237 Calculates the functional distance between two nodes. @param node1 first Node object @param node2 second Node object @return integer distance or MAX_VALUE if null pointers detected
1238 Applies mask operation using m2 on the given node. @param node input node to process @return masked result or null if failed
1239 Retrieves a list of leaf nodes within the specified scope. @param scope unique identifier for the scope @return List of Node objects representing leaf nodes
1240 Calculates a mask value based on the given scope and excluded nodes. @param scope Node scope string @param excludedNodes Collection of excluded nodes @return Calculated mask value
1241 Updates node's mask based on its rack and associated nodes. @param node Node object to process
1242 Sorts and processes a subset of nodes based on weights. @param reader node reader @param nodes array to populate with sorted nodes @param activeLen length of nodes to process @param secondarySort optional custom sorting consumer
1243 Decommissions a leaf node, locking and unlocking network resources. @param node Node to be decommissioned
1244 Reads bytes from the given FileChannel at specified position and count. @param fileCh channel to read from @param position offset in bytes to start reading from @param count number of bytes to read
1245 Wraps a specific IOException type with additional context and error codes. @param destHost destination host @param destPort destination port @param localHost local host @param localPort local port @param exception underlying IOException instance @return wrapped IOException instance
1246 Creates an instance of RawScriptBasedMappingWithDependency.
1247 Initializes ScriptBasedMapping with raw DNSToSwitch mapping data. @param rawMap raw DNSToSwitch mapping data to initialize from
1248 Initializes an InnerNodeImpl instance with the given file system path.
1249 Initializes an inner node with specified details. @param name node name @param location node location @param parent parent node (if any) @param level nesting level of the node
1250 Sends a masked notification and marks the user as kicked. @throws IOException on write failure
1251 Creates a DomainSocket instance for the specified path. @param path socket path
1252 Creates an array of anonymous DomainSockets with specified file descriptors. @throws IOException if unable to access file descriptors
1253 Creates a DomainSocket instance for the given path. @param path socket file path
1254 Updates the entry for a specific file descriptor in the given map. @param caller context of the update operation @param entries map of file descriptors to their associated data @param fdSet set of file descriptors being managed @param fd ID of the file descriptor to be updated
1255 Closes the resource and notifies watchers. @throws IOException on failure
1256 Retrieves a SelectorInfo object for the given SelectableChannel. @param channel SelectableChannel instance @return SelectorInfo object or null if not found
1257 Updates selector info with current timestamp and notifies the provider. @param info SelectorInfo object to update
1258 Convenience wrapper to fetch device information. @param strInterface network interface string
1259 Resolves interface hostname and returns an array of potential hostnames. @param strInterface interface name @param nameserver DNS server to use (optional) @param tryfallbackResolution whether to attempt fallback resolution (default: false) @return array of possible hostnames or null if not found
1260 Initializes LogThrottlingHelper with minimum log period in milliseconds. @param minLogPeriodMs threshold time for log throttling
1261 Creates LogAction instance with default recorder name and execution time. @param values log action parameters
1262 Escapes HTML characters in user-provided input. @param name user-provided string to be sanitized
1263 Builds HTML-quoted string from API response. @return quoted string in StringBuffer format
1264 Escapes HTML in raw request content. @return escaped HTML string or null if failed
1265 Initializes file monitoring timer task with single file path. @param filePath unique file identifier @param onFileChange callback for file change events @param onChangeFailure callback for failure events
1266 Creates a new MetricsRecord instance. @param mr existing MetricsRecord to build upon @param unused flag (always set to false)
1267 Invokes consumer function with result of m1() and ensures cleanup via m2(). @throws InterruptedException if interrupted while waiting
1268 Iterates and processes data using the provided Consumer. @param consumer callback function to process each data element
1269 Executes m1() function on cacheHit object.
1270 Clears mask cache by invoking m1 on cacheClearer instance.
1271 Triggers mask update in cache. Calls m1() on cacheUpdated object.
1272 Sends RPC request to client with backoff on disconnection.
1273 Executes slow RPC calls with mask operation.
1274 Requeues all calls using RPC mechanism.
1275 Calls RPC function m1 to update success counter.
1276 Reads data from a WritableByteChannel into a ByteBuffer and returns the count of bytes transferred. @param channel channel to read from @param buffer buffer to write to @return number of bytes successfully transferred or -1 on failure
1277 Reads bytes from a channel into a buffer and returns the count. @param channel input data stream @param buffer output byte array @return number of bytes read, or -1 on error
1278 Updates failure count and last failure time. @param none @return none
1279 Retrieves a set of string flags for the specified user. @param user unique username
1280 Applies mask to metrics system. @param name metric name (not used in this implementation)
1281 Generates and logs quantile metrics. @param ucName upper-case name prefix @param uvName upper-case name suffix @param desc metric description @param lvName lower-case name for interval @param pDecimalFormat decimal format for logging
1282 Generates and processes multiple inverse percentile metrics. @param ucName upper case name prefix @param uvName upper/lower case name suffix @param desc metric description @param lvName lower case name component @param df DecimalFormat object for formatting values
1283 Initializes MetricsRegistry with given name. @param name unique identifier for registry
1284 Creates and caches a MetricsTag instance with given name, description, and value. @param name tag name @param description tag description @param value tag value
1285 Initializes MutableStat with specified name, description and sample information. @param name unique identifier @param description descriptive text @param sampleName sample name @param valueName value name @param extended whether to include additional statistics
1286 Registers metrics with the given info and value. @param info MetricsInfo object @param value metric value to register @param override whether to override existing values @return this MetricsRegistry instance
1287 Updates internal statistics with new value and triggers secondary processing. @param value new data point to process
1288 Calculates and returns the m1-m2 value from rpcProcessingTime.
1289 Adds a long value to the buffer, incrementing its size and triggering overflow handling when full. @param v the long value to add
1290 Computes and returns a map of quantile values. @return Map<Quantile, Long> containing computed values or null if failed
1291 Retrieves top N name-value pairs from token owner statistics. @param n the number of items to retrieve @return List of NameValuePair objects, or empty if n is 0
1292 Updates Netgroup cache based on provided groups. @param groups list of group names to process
1293 Returns collection of tokens based on subject's data. @return Collection of Token objects for the subject
1294 Retrieves a list of function masks for the specified user. @param user unique user identifier @return list of function mask strings or empty list if not found
1295 Retrieves a set of function masks for the specified user. @param user unique user identifier
1296 Fetches and caches user group memberships by ID. @param user unique user identifier @return list of group names or empty list if not found
1297 Recursively invokes itself with an empty string argument.
1298 Logs and sets field mask to unset value. @param property name of the field to modify
1299 Retrieves environment variable value and updates local variable. @param variable name of the variable to fetch
1300 Prints the contents of a file to the console. @param file input file to read from
1301 Logs an error with formatted message and arguments. @param category error type (e.g. "Database") @param message error description
1302 Logs warning message with formatted string. @param category log category @param message warning message to be logged
1303 Executes authentication method-specific logic. @param authMethod type of authentication to perform
1304 Writes an integer to the output stream using either native write or wrapped buffer. @param b the integer value to be written
1305 Invokes m1 with default offset and length using entire input array.
1306 Retrieves DelegationTokenInformation for the given token identifier. @param identifier TokenIdent object containing token information @return DelegationTokenInformation object or null if not found/invalid
1307 Delegates execution of m1 to the provided AbstractDelegationTokenSecretManager.
1308 Updates the current master key for generating delegation tokens. @throws IOException if an I/O error occurs
1309 Creates a new DelegationKey instance with default values. @param delegateId default delegate ID @param timestamp default timestamp in milliseconds @param secretKey default secret key or null for none
1310 Creates a new authenticated URL using a delegation token. @param authenticator DelegationTokenAuthenticator instance @param connConfigurator ConnectionConfigurator for the underlying connection
1311 Tries to refresh user session with existing FS instance. @return true if refresh was successful, false otherwise
1312 Reads a byte from the input stream, either directly or by wrapping. @throws IOException if an I/O error occurs
1313 Reads data from input stream into buffer. @param b output byte array @param off output offset @param len length to read @return number of bytes read or -1 on error
1314 Wraps call to m2 with InetAddress lookup, throwing AuthorizationException if address unknown.
1315 Checks if mask is present using M1 result. @return true if M1 returns non-null, false otherwise
1316 Creates a UserGroupInformation instance with the given user and real user. @param user user name @param realUser actual user identity @return UserGroupInformation object
1317 Returns a functional mask of the given UserGroupInformation, or the original object if no valid mask exists. @param user UserGroupInformation to process @return UserGroupInformation with functional mask applied, or original object
1318 Formats user authentication information into a string. @return formatted string or null if not found
1319 Returns authentication method mask for current user or group. @return AuthenticationMethod value or null if unavailable
1320 Retrieves the authentication method for a given UserGroupInformation. @param ugi UserGroupInformation object @return AuthenticationMethod enum value
1321 Creates IpcConnectionContextProto instance with user information and protocol. @param protocol optional protocol string @param ugi UserGroupInformation object to include in context @param authMethod authentication method used for ugi (KERBEROS or TOKEN)
1322 Verifies SSL/TLS session by certificate. @param host server hostname @param session SSLSession object @return true if verified, false on exception or failure
1323 Retrieves a resource identifier by name. @param name unique resource identifier @return resource ID or E_NOT_FOUND if not found
1324 Initializes a new Command instance with the given configuration.
1325 Initializes CommandFactory with configuration. @param conf application configuration
1326 Initializes an instance of FsShell with the given Hadoop configuration.
1327 Initializes the FindClass instance with the provided Hadoop Configuration. @param conf Hadoop configuration object
1328 Initializes group retrieval with configuration and output stream. @param conf Hadoop Configuration object @param out print stream to write output to
1329 Initializes Configured instance with default configuration.
1330 Generates a function mask string. @return function mask string with '*' or 'm1() m2()' content
1331 Retrieves the first valid Kerberos ticket from the subject. @return The first valid KerberosTicket object or null if none found
1332 Initializes ZK client using provided configuration and trust store. @param zkClientConfig ZooKeeper client configuration @param truststoreKeystore Trust store and keystore for SSL/TLS authentication
1333 Creates an OpenSSL cipher instance based on the given transformation and engine ID. @param transformation encryption algorithm string @param engineId name of the cryptographic engine to use (can be null)
1334 Generates key version based on provided name and material. @param name unique key identifier @param options configuration settings for algorithm and parameters
1335 Generates a KeyVersion object using the M5 algorithm. @param name unique key identifier
1336 Handles the given event E, potentially delegating to other methods based on conditions. @param e the event to handle
1337 Initializes writable IPC server with invocation handler.
1338 Initializes and starts the stopwatch. @return current instance for method chaining
1339 Stops the StopWatch and updates elapsed time. @return this StopWatch object
1340 Calculates elapsed time in nanoseconds since function invocation. @return elapsed time as a long integer
1341 Recursively counts the total number of methods in the provided array. @param methods array of Method objects
1342 Computes protocol signature fingerprint based on server version and method hashes. @param protocol target protocol class @param serverVersion server version number @return ProtocolSigFingerprint object or null if not cached
1343 Creates a RemoteException with class and message details from attributes. @param attrs Attributes object containing class and message values
1344 Returns a list of items with mask applied. @throws IOException if an error occurs
1345 Invokes m3() with extracted timing metrics. @param callName name of the scheduled task @param schedulable Schedulable object @param details ProcessingDetails containing timing data
1346 Checks function mask based on priority, element, and include last flag. @param priority current priority level @param e element to check against @param includeLast whether to consider the last priority @return true if match found, false otherwise
1347 Processes an exception and populates a ResponseParams object. @param t the exception to process @param responseParams the ResponseParams object to update
1348 Constructs a VersionMismatch exception with specified protocol and version details. @param interfaceName name of the protocol interface @param clientVersion client-side version number @param serverVersion server-side version number
1349 Computes and schedules cache levels for each ID. @param callCosts map of IDs with atomic cost values
1350 Computes and returns the priority of an object based on its schedule cache or call costs. @param identity unique identifier of the object
1351 Calls superclass implementation of m1.
1352 Computes and returns a function mask index. @return integer index value
1353 Retrieves and returns a mask value from the specified IP address. @return null if address is invalid or null, otherwise the mask value
1354 Initializes machine list with provided host entries and default address factory. @param hostEntries collection of host entries
1355 Recursively calls itself with an initial flag value.
1356 Calculates total available disk space in bytes. @return total available space, or -1 if calculation fails
1357 Calls m1() and returns result of m2() tracked by CPU time tracker.
1358 Calculates the system-wide CPU usage as a float value. @return normalized CPU usage or UNAVAILABLE if failed
1359 Calculates overall VCore usage as a percentage. @return Overall VCore usage (0.0 - 1.0) or CpuTimeTracker.UNAVAILABLE if unavailable
1360 Inserts a key-value pair into the buffer, potentially resizing it if necessary. @param k key to be inserted @param v value associated with the key
1361 Creates a TransformerFactory instance with secure processing enabled. @return configured TransformerFactory object
1362 Creates a secure SAX transformer factory instance. @return SAXTransformerFactory with secure processing enabled
1363 Formats byte count to human-readable string or binary mask. @param size total bytes @param humanReadable true for human-readable format (e.g., KB, MB), false for binary mask (e.g., B, KiB)
1364 Formats file size as human-readable string or binary mask. @param size file size in bytes @param humanReadable true for human-readable format (e.g., KB, MB), false for binary mask (e.g., 1Kb)
1365 Converts binary number to string representation with traditional binary prefix. @param number binary number value
1366 Returns a string representation of binary prefix mask. @param len length in bits
1367 Calculates and sets disk usage metrics for the given URI. @param uri file system URI @param fsStatus file system status object @param mountedOnPath path where the file is mounted
1368 Returns a hexadecimal string representation of the given byte array. @param bytes input byte array
1369 Calls overloaded version of m1 with null as optional parameter.
1370 Handles exit exception by invoking m1 function. @param ee ExitException object containing error details
1371 Logs and exits with a service launch exception. @param status error code @param message descriptive error message
1372 Recursively handles exit exceptions by either propagating or wrapping the exception. @param status error code @param t thrown exception (will be wrapped in ExitException if not already so)
1373 Throws an ExitException with the specified status and message. @param status exit status @param msg error message
1374 Recursively wraps or unwraps HaltExceptions as needed. @param status error code @param t Throwable to process @throws HaltException if wrapping is required
1375 Wraps an exception with provided status and message. @param status error code @param message detailed error description
1376 Unregisters shutdown hook in a thread-safe manner.
1377 Returns a list from an iterable, using recursion for non-collection iterables. @param elements input iterable to convert @return ArrayList of type E or throws NullPointerException if null
1378 Creates and populates a linked list with elements from an iterable. @param elements iterable containing elements to add to the list
1379 Creates a masked ACL entry list from the given permission and entries. @param perm FsPermission object @param entries List of AclEntry objects @return List of AclEntry objects with added mask entry
1380 Creates an ArrayList from a variable number of elements. @param elements array of elements to add @return populated ArrayList or null if input is null
1381 Creates an ArrayList with estimated initial capacity based on provided size. @param estimatedSize initial capacity estimate
1382 Masks a file's contents using the provided instance. @param file File to mask @param instance Instance used for masking
1383 Initializes StatisticDurationTracker instance and increments counter in IOStatisticsStore. @param iostats IOStatisticsStore to update @param key unique counter identifier @param count positive value to increment the counter by
1384 Logs a duration information message with optional logging level. @param log Logger instance @param logAtInfo whether to log at INFO level or not @param format log format string @param args variable arguments for the log format
1385 Returns function mask string using m1().
1386 Creates a CRC composer with specified parameters. @param type checksum type @param bytesPerCrcHint hint for CRC calculation @param stripeLength stripe length
1387 Computes a function mask using the given CRC values and parameters. @param crcA first CRC value @param crcB second CRC value @param lengthB data length @param mod modulus for calculation @return computed function mask
1388 Computes and returns a digest value for the current stripe. @return Digest value as a byte array
1389 Unpacks and saves a compressed archive from InputStream to specified directory. @param inputStream input stream containing the compressed archive @param toDir target directory for unpacking @param name file name for the unpacked archive @param unpackRegex pattern for extracting specific files or directories
1390 Extracts contents of a JAR file. @param jarFile JAR file to extract from @param toDir directory to extract into
1391 Extracts specified number of bytes from UTF-8 encoded array starting at offset 0. @param utf UTF-8 encoded byte array @param b extracted byte count @return extracted byte count or -1 if invalid
1392 Retrieves a value from the cache using FUNC_MASK strategy. @param key unique identifier for cache lookup
1393 Logs lock hold duration and updates suppressed statistics. @param acquireTime lock acquisition timestamp @param releaseTime lock release timestamp @param checkLockHeld true for held lock, false for waiting lock
1394 Formats a time string with optional duration. @param formattedFinishTime time string to display @param finishTime timestamp of completion (0 for no duration) @param startTime timestamp of start (0 for no duration) @return Formatted time string or empty if no duration
1395 Escapes string and converts to comma-separated array. @param str input string to process
1396 Replaces special characters in a string with underscores. @param s input string @return modified string with special chars replaced
1397 Escapes a character in a string. @param str input string @param escapeChar character used for escaping @param charToEscape character to be escaped @return modified string with character escaped
1398 Escapes a single character in a string. @param str input string @param escapeChar the character used for escaping @param charToEscape the character to be escaped
1399 Generates functional mask message for startup. @param classname class name @param hostname host machine name @param args command line arguments array @return formatted string containing system and application information
1400 Returns version info mask string.
1401 Returns the function mask value and consumes input data if available. @throws IOException if an I/O error occurs
1402 Checks for the existence of a next item in the data stream. @return true if there is a next item, false otherwise
1403 Creates a lazy auto-closeable reference to an object managed by the given supplier. @param supplier creates instances of T, which must implement AutoCloseable
1404 Calculates file system mask using BulkDelete. @param fs FileSystem instance @param path File system path @return integer mask value
1405 Applies mask to files in the specified directory and subdirectories. @param fs FileSystem instance @param base base directory path @param paths collection of file paths to process @return list of file paths with associated metadata or null if failed
1406 Opens a file with specified policy and options. @param fs FileSystem instance @param path Path to the file @param policy Read policy (e.g. "read-only") @param status Optional FileStatus object @param length Optional file length @param options Additional file open options @return FSDataInputStream or null on failure
1407 Applies mask operation to input stream at specified position. @param in InputStream to process @param position Position to apply mask from @param buf ByteBuffer to store result
1408 Computes and returns a mask of file system statistics. @param fs FileSystem object @param path Path to compute statistics for @return Serializable result or null if failed
1409 Processes JSON input to produce a serializable result. @param json input JSON string
1410 Evaluates and returns the mask value. @return The evaluated mask value
1411 Creates a Builder instance from an iterable of items. @param items input iterable
1412 Wraps an ExecutionException in an IOException and delegates to FutureIO. @param e exception containing execution result
1413 Retrieves the result of a future, handling cancellation and execution exceptions. @param future Future object to retrieve result from @return Result T or throws exception if cancelled or failed
1414 Retrieves result from Future with optional timeout. @param future Future object to retrieve result from @param timeout Timeout duration in specified TimeUnit @param unit Time unit for timeout duration @return Result object or throws exception if failed
1415 Wraps a CompletionException in an IO operation. @param e CompletionException to be handled @throws IOException if IO operation fails
1416 Invokes configurable methods on the given object based on configuration settings. @param theObject object to invoke methods on @param conf configuration settings
1417 Fetches the writable class for a given name from NAME_TO_CLASS or Configuration. @param name The name of the writable class @param conf The configuration to use for loading the class @return The loaded Class object, or null if not found
1418 Retrieves a class by name from configuration or default lookup. @param conf Hadoop Configuration object @param className Class name to fetch @return Loaded Class object or null if not found
1419 Retrieves a function mask class by name. @param name class name to fetch @return FunctionMask class or null if not found
1420 Logs function usage with a timestamped message. @param log logging object @param title function name @param minInterval minimum interval between logs in seconds
1421 Logs stack trace with specified title at minimum interval. @param log Logger instance @param title Log message title @param minInterval Minimum time interval between logs in seconds
1422 Initializes FSBuilder with a path and/or path handle. @param optionalPath file system path (optional) @param optionalPathHandle file system path handle (optional)
1423 Initializes a new instance of the Configuration class with default settings.
1424 Handles HTTP status mismatch by throwing a custom exception. @param conn HttpURLConnection object @param expectedStatus expected HTTP status code
1425 Selects and initializes CRC32C implementation based on configuration. @return CRC32C instance or fallback to PureJavaCrc32C if initialization fails
1426 Calls Shell.m1() with user name and returns result as an array. @param userName unique user identifier
1427 Calls M1 shell command with specified username. @param userName user name to pass to shell command
1428 Generates command with file path based on permissions and recursion. @param perm permission level @param recursive whether to recurse into directories @param file file path to append to the command
1429 Returns mask array based on provided process ID. @param pid unique process identifier @return array of masks or null if invalid PID
1430 Generates function mask by invoking nested methods.
1431 Returns the mask file associated with an executable. @param executable name of the executable
1432 Calculates and returns current progress phase with weightages.
1433 Executes and configures the mask phase based on the given iteration count. @param n number of iterations for the mask phase
1434 Creates and configures a Progress object with given weightage. @param weightage relative importance value @return configured Progress object or null if creation failed
1435 Returns a float value based on the result of calling m1().
1436 Calls m1 with default configuration (null). @param path file system path to process
1437 Applies ACL permissions to a file system path. @param path file system path @param zkAcl list of access control lists (ACLs)
1438 Loads and invokes a method on a target class. @param className name of the class to invoke @param methodName name of the method to invoke @param argClasses classes of method arguments (varargs)
1439 Configures builder with target class and variable classes. @param targetClass target class to build @param varClasses variable classes to include
1440 Tries to resolve a method by loading the target class and recursively invoking itself. @param className name of the class containing the desired method @param methodName name of the method to invoke @param argClasses classes of the method's arguments (varargs)
1441 Configures builder with target class and optional argument classes. @param targetClass class to build @param argClasses variable number of argument classes
1442 Creates an unbound method instance for the specified class and name. @param source Class containing the method (optional) @return UnboundMethod instance or null if not found
1443 Verifies availability of specific unbound methods. @throws UnsupportedOperationException for any unavailable method
1444 Checks bulk delete deletion method flag. @return true if enabled, false otherwise
1445 Checks file system open file method flag. @return true/false indicating status of flag
1446 Checks if mask is available. @param byteBufferPositionedReadableReadFullyAvailableMethod result of availability check for readable and fully readable @return true if mask is available, false otherwise
1447 Checks if input stream is fully available and readable. @param in InputStream to check @return true if stream is fully available and readable, false otherwise
1448 Returns a boolean indicating whether to mask function calls. @return true if masking is enabled, false otherwise
1449 Returns true if iostatistics context is enabled. @return true if enabled, false otherwise
1450 Validates and registers an unbound method. @param method UnboundMethod object to validate
1451 Invokes method m2 on an instance of class M1. @param receiver instance of class M1
1452 Invokes m2() on the result of m1(), passing the given receiver.
1453 Returns a mask value by executing m1() and then calling m2() on its result. @throws NoSuchMethodException if either m1() or m2() is not found
1454 Returns a mask value by calling nested methods.
1455 Loads and registers available file systems. @throws ServiceConfigurationError if any file system fails to load
1456 Computes Jenkins hash for a file. @param args array containing single filename
1457 Initializes a hash function with specified max value, number of hashes, and type. @param maxValue maximum input value @param nbHash number of hash iterations @param hashType identifier for the hash algorithm to use
1458 Initializes a new instance of the RetouchedBloomFilter class.
1459 Finds the minimum non-masked value in a hash bucket. @param key input to be hashed
1460 Applies a mask operation to the key using hash functions. @param key Key object to process
1461 Updates the given Key's hash values in the provided hash vector. @param k Key to be updated @param vector Hash array of Keys
1462 Finds the index of the hash with the minimum key weight. @param h array of hash indices
1463 Finds the index of the hash that maximizes the FP-weight. @param h array of hash indices @return index with maximum FP-weight or -Integer.MIN_VALUE if empty
1464 Calculates the weight ratios for each vector element. @param vectorSize size of the input vectors
1465 Retrieves and processes a resource by its name. @param name unique identifier for the resource @return SUCCESS or error code if processing fails
1466 Returns error code for usage mismatch.
1467 Inserts or updates an element in the heap data structure. @param element element to insert/replace
1468 Creates a sorted TreeSet from an iterable collection of comparable elements. @param elements input iterable containing elements to be added to the set
1469 Converts an iterable to a set, leveraging recursive structure if necessary. @param elements input iterable @return Set of unique elements or null if not found
1470 Creates a hash set from an array of elements. @param elements variable number of elements to include @return HashSet containing all input elements
1471 Executes a program by ID, handling invalid inputs and unknown programs. @param args array of command-line arguments @return 0 on success, -1 otherwise
1472 Adds a column to the builder with specified title and justification. @param title column title @param justification text alignment (e.g. left, center, right) @param wrap whether to wrap long texts in the column
1473 Converts time value to milliseconds based on specified unit. @param name unused parameter @param vStr time value string @param unit time unit to convert to (e.g. TimeUnit.SECONDS)
1474 Updates a property in the document with given configuration and redactor. @param doc Document to update @param conf Configuration element @param propertyName Property name @param redactor Optional ConfigRedactor for value transformation
1475 Iterates to find a valid DeprecationContext. @param deltas array of DeprecationDelta objects
1476 Iterates through port ranges to establish connections and perform m1 operation. @param listener ServerConnector instance @param startPort starting port for iteration @throws Exception if any connection attempt fails
1477 Configures environment variables with HA service-specific settings. @param target HAServiceTarget instance @param environment Map of environment variables to update
1478 Reads data from a PositionedReadable stream into a ByteBuffer. @param stream PositionedReadable stream to read from @param range FileRange specifying the data to read @param buffer ByteBuffer to hold the read data
1479 Applies mask function to each file range in the list. @param ranges collection of file ranges
1480 Updates internal state to caching mode and associates given future with current object. @param actionFuture Future object containing pending task
1481 Updates the current state with a new one while validating and applying mask. @param newState new state to apply @param expectedCurrentState one or more expected current states
1482 Validates and sets mask for the given file path. @param path File system path @param argName Name of argument being validated (for error messages)
1483 Validates and processes a file path with the given argument name. @param path file system path @param argName name of the argument being validated
1484 Checks if the given block number is the last block in a file. @param blockNumber index of the block to check @return true if blockNumber is the last block, false otherwise
1485 Calculates function mask value based on block number and size. @param blockNumber unique block identifier @return calculated long mask value
1486 Retrieves the current state at a specified block number. @param blockNumber specific block identifier
1487 Updates the state of a block with the given block number and state. @param blockNumber unique block identifier @param blockState current state of the block
1488 Calculates function mask by dividing block size. @param offset memory address offset @return function mask value as integer
1489 Evaluates snapshot with optional statistics for masking. @param snapshot serialized data to evaluate @param statistics optional IOStatistics instance @return true if snapshot can be masked, false otherwise
1490 Applies a mask to the given filesystem at the specified path. @param snapshot snapshot data @param fs file system object @param path file system location @param overwrite whether to override existing files
1491 Creates a map of function masks by counting counters in the given snapshot. @param source input snapshot
1492 Computes gauges mask from source object. @param source input object to process @return map of gauge names to their corresponding IDs
1493 Computes mask values from given source object. @param source input data to process
1494 Extracts maximum values from snapshot and returns them as a map. @param source Serializable object containing statistics data
1495 Extracts and maps statistics from the given source. @param source input data
1496 Creates and returns a new FlagSet instance with default values.
1497 Creates a FlagSet instance from an EnumSet. @param enumClass the type of enums @param prefix prefix for flag names @param flags set of enums to include in FlagSet
1498 Clears and invokes file system operation. @throws IOException if an I/O error occurs
1499 Performs file system operations with optional auto-closing. @param onlyAutomatic true to skip non-automatic file systems @throws IOException if any operation fails
1500 Converts an M2 snapshot to JSON format. @param snapshot M2 snapshot object
1501 Writes data to a Hadoop FileContext. @param fileContext Hadoop context @param path file location @param bytes data to be written @return the input fileContext
1502 Writes Iterable of CharSequence to a FileContext. @param fileContext FileContext to write to @param path Path to write at @param lines Iterable of lines to write @param cs Charset for encoding @return the original FileContext
1503 Writes CharSequence to FileContext using specified Charset. @param fs FileContext instance @param path Path to write to @param charseq CharSequence to write @param cs Charset to use for encoding @return the modified FileContext instance
1504 Creates an FSDataOutputStreamBuilder with specified file mask. @param path Path to create output stream for
1505 Creates an output stream builder with specified file system mask. @param path file system path
1506 Creates an FSDataOutputStreamBuilder instance with a mask. @param path file system path
1507 Creates an FSDataOutputStreamBuilder instance with the specified file system mask. @param path Path object representing the target location
1508 Retrieves file statuses by path with default filter. @param f Path to query @return array of FileStatus objects or null if not found
1509 Retrieves status of multiple files. @param files array of file paths
1510 Returns a MutableCounterInt instance with specified value and MetricsInfo. @param info MetricsInfo object @param iVal integer value to be masked in the counter
1511 Initializes and registers a mutable counter with the given metric info and value. @param info MetricsInfo object @param iVal initial value for the counter @return MutableCounterLong instance representing the initialized counter
1512 Retrieves and stores a mutable gauge with the given value for the specified metric. @param info MetricsInfo object containing metric details @param iVal initial value of the gauge
1513 Calculates a gauge value by applying the FUNC_MASK function to the given metrics info and input value. @param info MetricsInfo object containing relevant data @param iVal Input float value to process @return MutableGaugeFloat result or null if failed
1514 Generates a mutable gauge integer for the given metrics info and value. @param info MetricsInfo object @param iVal int value to be wrapped in MutableGaugeInt @return MutableGaugeInt instance or null if creation fails
1515 Resolves a filesystem link to the specified type. @param fileContext context for resolving links @param path location of the link @param fn function to resolve the link to the desired type @return object of type T or throws exceptions if resolution fails
1516 Creates a GlobBuilder instance from the given FileContext. @param fileContext FileContext object containing relevant data
1517 Creates a new GlobBuilder instance with the specified file system. @param filesystem the file system to associate with the GlobBuilder
1518 Handles asynchronous function call result. @return true if handled successfully, false otherwise
1519 Returns an AsyncGet instance from a cache or generates a new one. @return cached or newly created AsyncGet object
1520 Updates mask value based on helper function result. @param m1() result of unknown helper function
1521 Copies all data from another MeanStatistic instance. @param that MeanStatistic to copy from
1522 Generates a mask string from the given source object. @param source nullable object to process @return generated mask string or empty if processing fails
1523 Generates function mask using wrapped value. @return function mask string
1524 Returns function mask based on available statistics. @return Function mask string or NULL_SOURCE if no statistics are available.
1525 Formats IOStatistics into a human-readable mask. @param statistics IOStatistics object to process (null for empty result) @return String representation of the statistics or an empty string if null
1526 Creates a duration tracker instance based on provided factory and statistic name. @param factory optional factory for custom tracking implementation @param statistic name of the tracked statistic @return DurationTracker object or stub implementation if no factory is provided
1527 Purges single entry from the cache. @param elementToPurge Entry object containing path and block number to purge
1528 Calculates IO statistics with a custom mask. @param storageStatistics input storage statistics @return DynamicIOStatistics object or null if invalid
1529 Sets dynamic I/O statistics with key and value from atomic long source. @param key unique identifier @param source atomic long with initial value
1530 Sets IO statistics mask using specified key and updates source counter. @param key unique identifier @param source source counter to update
1531 Creates DynamicIOStatisticsBuilder with counter data from source. @param key unique identifier @param source MutableCounterLong instance for statistics
1532 Updates statistics with values from a source. @param key identifier for the statistics @param source AtomicLong containing initial values
1533 Builds DynamicIOStatistics with specified key and initialized statistics from source. @param key unique identifier @param source initial statistics @return this builder instance for chaining
1534 Builds dynamic I/O statistics with given key and source value. @param key unique identifier @param source atomic long value @return DynamicIOStatisticsBuilder instance for chaining
1535 Updates DynamicIOStatisticsBuilder with statistics from the given source. @param key statistic key @param source source of statistics (AtomicInteger) @return this builder instance for chaining
1536 Adds dynamic I/O statistics builder with custom mask. @param key unique identifier @param source atomic counter
1537 Builds dynamic IO statistics with specified key and source. @param key unique identifier @param source source of statistics (AtomicInteger)
1538 Initializes interrupt handling and uncaught exception handler. @throws IllegalArgumentException if configuration fails
1539 Creates a new DomainSocket instance with the given path and file descriptor. @return DomainSocket object or throws IOException if creation fails
1540 Performs mask-related operations and cleanup. @throws IOException if an I/O error occurs
1541 Executes a function on the provided file descriptors. @param descriptors array of FileDescriptor objects @param jbuf byte buffer for data storage @param offset starting position in the buffer @param length number of bytes to process
1542 Reads data from multiple file streams into a buffer. @param streams array of FileInputStream objects @param buf target byte array @param offset starting offset in the buffer @param length number of bytes to read @return result code or throws IOException on failure
1543 Creates and returns an IOStatisticsContext instance with the given key. @param key unique identifier for the context
1544 Validates and updates user profile by ID. @param data ByteBuffer containing user data @param checksums ByteBuffer with checksums for validation @param fileName name of the file being processed @param basePos starting position in the file
1545 Computes and applies decryption mask based on provided parameters. @param decryptor Decryptor object @param inBuffer Input buffer containing encrypted data @param position Position within the input buffer @param iv Initialization vector for decryption @return Decryption mask byte or 0 if not applicable
1546 Encrypts and decrypts data using a mask function. @param offset input/output buffer address
1547 Writes data to buffer using chunked writes. @param b byte array to write @param off starting offset in the array @param len number of bytes to write
1548 Override of superclass method to perform additional initialization.
1549 Compiles a glob pattern into a regular expression mask. @param globPattern glob pattern string @return compiled Pattern object
1550 Calculates the byte count for a given distance. @param distance integer value representing the distance
1551 Creates or appends to a file based on the specified flags and permissions. @param f Path to the file @param absolutePermission File permissions @param flag Create mode flags @return FSDataOutputStream instance or null if failed
1552 Initializes an AbstractFileSystem instance from a URI and scheme parameters. @param uri URI to initialize the file system @param supportedScheme supported protocol scheme (e.g. "s3", "hdfs") @param authorityNeeded whether authority is required for this file system @param defaultPort default port number for this file system
1553 Encodes and masks input byte arrays into output byte arrays. @param inputs input byte arrays to be encoded @param outputs output byte arrays to store the result
1554 Encodes input buffers and writes output to direct or byte array state. @param inputs input ByteBuffer arrays @param outputs output ByteBuffer array
1555 Constructs an ArrayPrimitiveWritable with the given primitive value. @param value primitive value to be wrapped in the writable object
1556 Returns file system URI using underlying implementation.
1557 Checks if capability is not supported by this instance or data source. @param capability unique capability identifier @return true if capability is not supported, false otherwise
1558 Performs Buffer operations based on provided data. @param data BufferData object containing relevant information
1559 Processes and removes completed BufferData objects.
1560 Initializes CachingBlockManager with given parameters. @param blockManagerParameters configuration and settings for the manager
1561 Processes block data from ByteBuffer. @param blockNumber unique block identifier @param buffer ByteBuffer containing block data
1562 Calculates function mask value based on internal calculations. @return calculated mask value
1563 Verifies buffer consistency by comparing start offset, data value, and byte count.
1564 Checks if a position is within the buffer and triggers a mask operation. @param pos position to check @return true if mask operation triggered, false otherwise
1565 Returns an instance of IOStatisticsContext. @return IOStatisticsContext object or null if invalid
1566 Integrates metrics into the provided IO statistics context. @param statisticsContext context to integrate metrics into
1567 Builds a metrics configuration map for the specified type. @param type string identifier of the metric type @return Map of instance IDs to MetricsConfig objects
1568 Processes command-line arguments and returns a list of strings up to the specified position. @param args array of command-line arguments @param pos maximum number of arguments to process
1569 Increments error counter and logs message with mask. @param message error message to be logged
1570 Creates a path handle for the given file status, validating its authority and handling options. @param stat FileStatus object @param opts Options.HandleOpt array @return LocalFileSystemPathHandle instance
1571 Initializes an array of handle options with default values. @return Array of HandleOpt objects
1572 Returns an array of handle options with default values. @return Array containing two HandleOpt instances with different configurations
1573 Returns an array of handle options with specific mask values. @return Array of HandleOpt objects with pre-set flags
1574 Returns an array of handle options with mask enabled. @return Array of HandleOpt objects with mask flag set to true
1575 Initializes a ShellCommandExecutor with the given command, working directory, environment variables, and execution settings. @param execString array of executable strings @param dir working directory for the shell command (optional) @param env map of environment variables to set (optional) @param timeout maximum allowed execution time in milliseconds @param inheritParentEnv whether to inherit parent process environment variables
1576 Initializes or stops the refresh thread based on the interval setting. @param runImmediately whether to start immediately if enabled
1577 Creates a private token instance with specified service. @param newService Text representation of service
1578 Validates function mask parameters and throws exception on unsupported configuration.
1579 Checks if function mask conditions are met. @return true if all conditions match, false otherwise
1580 Returns true if mask is enabled.
1581 Validates the file system of a given Path. @param path input Path to validate
1582 Writes user profile data to output stream. @param out DataOutput stream to write to
1583 Validates parameters for file upload functionality. @param filePath the path to the file @param inputStream input stream containing file data @param partNumber part number of the uploaded file (1-indexed) @param uploadId unique identifier for the upload operation @param lengthInBytes total length of the file in bytes
1584 Performs asynchronous operation on file at given Path, returning a future result. @param path location of the file to process
1585 Computes the remaining bytes to read from a file, ensuring we don't exceed its length. @param n number of additional bytes to consider @return remaining bytes that can be safely read
1586 Creates a new FsPermission object with the specified permissions. @param umask existing FsPermission object
1587 Converts SFTP file permissions to FS permission. @param sftpFile SFTP file entry @return FsPermission object representing the file's permissions
1588 Constructs FsPermission object from Unix-style file mode. @param mode Unix-style file mode (permissions)
1589 Creates an FsPermission instance with default file permissions. @return FsPermission object representing read/write/execute permissions for owner, group, and others.
1590 Constructs FsPermission with execute and write permissions for owner. @return FsPermission object representing the specified permissions
1591 Creates an FsPermission instance with execute permissions for owner and group.
1592 Creates file system permissions mask with read and execute access for owner. @return FsPermission object representing the mask
1593 Converts Unix symbolic permission string to FsPermission object. @param unixSymbolicPermission string representation of permissions
1594 Processes ACL entries based on type and permissions. @param aclStatus Acl status @param fsPerm File system permission @param entries List of AclEntry objects
1595 Concatenates ACL entries into a comma-separated string. @param aclSpec list of AclEntry objects
1596 Constructs an FsPermission instance based on the provided access control string. @param mode access control string representing file system permissions
1597 Extracts a specified length of bytes from the given buffer starting at the indicated offset. @param b input buffer @param offset starting position in buffer @param length number of bytes to extract @return extracted byte count or -1 on error
1598 Calculates the function mask by subtracting start position from result of m1(). @return difference between m1() and posStart
1599 Formats and updates display format for PathData items. @param items array of PathData objects
1600 Retrieves quota usage information from the specified file. @param f Path to the file to query
1601 Computes functional mask value based on file system path. @param path file system path @return computed functional mask value
1602 Initializes an instance of AbstractLaunchableService with the specified name.
1603 Updates service state and returns previous state. @param proposed new service state @return the old service state
1604 Instantiates and initializes a Service object from the configuration. @param conf Configuration object @return initialized Service object or null if creation fails
1605 Compares this object to another using binary comparison. @param other Object to compare with @return true if objects are equal, false otherwise
1606 Updates mask data in the underlying buffer. @param newData new byte array @param offset starting index for update @param length number of bytes to update
1607 Processes BytesWritable object and returns an integer value. @throws IOException if processing fails
1608 Retrieves an array of file names within the specified directory. @param dir target directory @return array of file names, or null if access is denied or an error occurs
1609 Verifies directory permissions and throws exceptions for any issues. @param dir File object representing the directory to check
1610 Initializes and locks memory for the given ByteBuffer. @param buffer direct ByteBuffer to lock @param len length of the buffer
1611 Creates a SharedFileDescriptorFactory instance for each path, throwing an exception on failure or if no paths are configured. @param prefix factory prefix @param paths array of file descriptor paths @return the first successfully created SharedFileDescriptorFactory @throws IOException on loading or configuration error
1612 Computes and updates checksum for a byte array chunk. @param b the input byte array @param off starting offset in the array @param len length of the chunk to process
1613 Updates checksums using CRC32 algorithm. @param data input buffer @param checksums output buffer for updated checksums
1614 Encrypts input and decrypts output using crypto stream utilities.
1615 Initializes a new instance of BoundedByteArrayOutputStream with specified capacity. @param capacity maximum allowed size in bytes.
1616 Applies mask to current value and updates it. @param newValue new value to apply mask to
1617 Filters EC blocks from input group based on predicate m3(). @param blockGroup ECBlockGroup to filter @return array of filtered EC blocks or null if empty
1618 Searches for a specific marker in compressed data. @param marker target value to search for @param markerBitLength length of the marker in bits @return true if found, false otherwise
1619 Initializes CBZip2OutputStream with specified block size and output stream. @param out target output stream @param blockSize compression block size (1-9)
1620 Creates a new BlockCompressorStream instance with default buffer size and compression level. @param out output stream to write compressed data @param compressor compressor instance to use for compression
1621 Initializes BlockDecompressorStream with input stream and decompression settings. @param in InputStream to read from @param decompressor Decompressor instance for compression algorithm @param bufferSize Buffer size for efficient I/O operations
1622 Writes a byte array to the compressor in chunks. @param b input byte array @param off starting offset within the array @param len number of bytes to write
1623 Constructs a new ZStandard compressor with specified compression level and buffer sizes. @param level Zstandard compression level @param bufferSize input/output buffer size
1624 Creates a compression output stream using the specified codec and configuration. @param codec CompressionCodec instance @param conf Configuration object @param out OutputStream to compress data to @return CompressionOutputStream or null on failure
1625 Serializes and cleans up resources after compression.
1626 Creates a compression-aware input stream from the given codec and input stream. @param codec CompressionCodec instance @param conf Configuration object (not used) @param in InputStream to compress @return CompressionInputStream instance or null on failure
1627 Releases decompressors and deserializers, and notifies input stream.
1628 Returns a Compressor instance based on configuration settings. @param conf Configuration object
1629 Returns direct decompressor instance based on configuration. @param conf input configuration @return ZlibDirectDecompressor or null if not applicable
1630 Returns decompressor instance based on configuration settings. @param conf Configuration object @return ZlibDecompressor or BuiltInZlibInflater instance
1631 Stores delegation key using SQL secret manager. @param key DelegationKey object
1632 Updates delegation key in SQL secret manager. @param key DelegationKey object
1633 Reads and decodes a variable-length string from input stream. @param in DataInput source @param maxLength maximum allowed encoded size @return decoded String or null if malformed
1634 Reads and writes a masked data value. @param in input stream
1635 Reads and processes mask data from input stream. @param buffer DataInputBuffer instance @param filter CompressionInputStream instance
1636 Reads and decodes a FUNC_MASK from the input stream. @param in input stream @param maxLength maximum allowed length @return encoded mask as string or throws IOException if an error occurs.
1637 Writes masked string to output stream. @param out DataOutput stream @param s String to mask (null for no-op)
1638 Constructs a Text object from an InetSocketAddress. @param addr network address to extract host and port @return Text representation of the address in "host:port" format
1639 Creates a Token object from the provided TokenProto. @param tokenProto Token prototype with data to be extracted @return Token object with converted data or null if failed
1640 Writes an enumeration value to output stream. @param out DataOutputStream instance @param enumVal enumeration value to be written
1641 Writes user and group information to output stream. @param out DataOutput stream @param username user identifier @param groupname group identifier @param permission FsPermission object
1642 Creates a new Text instance from a UTF-8 encoded byte array. @param utf8 byte array containing text data in UTF-8 encoding
1643 Constructs a new Text instance from UTF-8 encoded string. @param utf8 UTF-8 encoded text content
1644 Determines the mask for a given text based on record delimiter bytes. @param str input Text object @param maxLineLength maximum allowed line length @param maxBytesToConsume maximum allowed bytes to consume @return integer mask value or throws IOException if error occurs
1645 Calculates and returns the text length mask value.
1646 Copies contents from another SortedMapWritable.
1647 Constructs a new MapWritable instance by copying from another. @param other MapWritable object to copy values from
1648 Creates a retry policy with fixed sleep interval and maximum execution time. @param maxTime maximum allowed execution time @param sleepTime fixed sleep interval between retries @param timeUnit unit of time for maxTime and sleepTime
1649 Creates a proxied object with failover and retry functionality. @param iface interface to proxy @param proxyProvider provider for failover proxy instances @param retryPolicy policy for retries on invocation failures
1650 Creates a proxy instance for the given interface and implementation. @param iface target interface @param implementation concrete class to proxy @param methodNameToPolicyMap map of method names to retry policies
1651 Initializes a Writer object from an FSDataOutputStream. @param fout output stream with desired compression @param compressionName name of the compression algorithm @param conf configuration settings for this writer
1652 Initializes a TFileIndex with the specified entry count and reads key entries from the input stream, indexed by record numbers. @param entryCount number of index entries @param in input stream containing key data @param comparator byte comparator to use for comparisons
1653 Checks for function mask presence based on iterative chunk processing. @throws IOException on I/O errors
1654 Resets buffer and clears remaining data. @throws IOException if an I/O error occurs
1655 Computes a mask value using provided RawComparable key. @param key input key for computation @return integer mask value
1656 Initializes UTF-8 encoded String instance with given input. @param string input string to be encoded and stored.
1657 Computes MD5 hash of input string. @param string input string to be hashed
1658 Flushes buffered records and updates internal state. @throws IOException if an I/O error occurs
1659 Generates and returns the function mask as a string. If trackingId is null, it will be computed using m1().
1660 Generates function mask using m1 service. @throws IOException if an error occurs during execution.
1661 Adds a new node to the network topology. @param node Node object to be added
1662 Removes a node from the network topology. @param node Node to be removed
1663 Decommissions a node, handling inner nodes and network locks. @param node Node to be decommissioned
1664 Invokes recursive node processing with specified parameters. @param reader initial node to traverse from @param nodes array of nodes to process @param activeLen length of active nodes @param secondarySort callback for secondary sorting
1665 Performs masked function on a node array with secondary sorting. @param reader input node @param nodes array of nodes to process @param activeLen length of active node range @param secondarySort callback for secondary sorting results
1666 Initializes this socket input stream with a readable byte channel and timeout. @param channel the underlying channel to read from @param timeout the maximum time in milliseconds to wait for data
1667 Initializes SocketOutputStream with a writable channel and timeout. @param channel WritableByteChannel for output @param timeout connection timeout in milliseconds
1668 Retrieves a Writable object associated with a Call instance. @param call the Call instance @param connection the Connection instance @param timeout maximum wait time in specified unit @param unit TimeUnit for timeout value @return Writable object or null if not found or interrupted
1669 Constructs a ScriptBasedMapping instance using a RawScriptBasedMapping.
1670 Constructs ScriptBasedMappingWithDependency instance using RawScriptBasedMappingWithDependency.
1671 Creates an inner node with specified mask properties. @param parentName name of parent node
1672 Adds a new entry to the processing queue and handles socket closure. @param sock DomainSocket object @param handler Handler object for error handling
1673 Removes and processes DomainSocket instance. @param sock DomainSocket object to process
1674 Waits for IO on a selectable channel with specified operations and timeout. @param channel the SelectableChannel to wait on @param ops the desired operations (e.g. READ, WRITE) @param timeout the maximum time in millis to wait @return 0 if timed out, or non-zero if an event occurred
1675 Extracts and returns the first IP address from the given interface string. @param strInterface network interface or IP address (e.g. "eth0" or "192.168.1.1")
1676 Returns an array of strings based on the given interface string. @param strInterface interface string to process
1677 Resolves hostname from interface and/or nameserver. @param strInterface network interface @param nameserver DNS server to query (null for default) @param tryfallbackResolution whether to attempt fallback resolution @return resolved hostname or cached value if applicable
1678 Loads and combines metrics configurations from multiple files. @param prefix unique identifier for combined config @param fileNames one or more file names to load properties from @return combined MetricsConfig object or default config if none found
1679 Fetches user group masks by ID. @param user unique user identifier @return Set of group masks or null on failure
1680 Calls instance-specific method m1 on singleton instance.
1681 Shuts down the server, notifying listeners and cleaning up resources.
1682 Stops and cleans up resources associated with a web app.
1683 Initializes a MutableQuantiles instance with provided name, description, sample name, value name, and interval. @param name display name @param description descriptive text @param sampleName sample identifier @param valueName value identifier @param interval calculation interval in seconds
1684 Creates and registers a mutable statistic with the given name and description. @param name unique identifier for the statistic @param desc human-readable description of the statistic @param sampleName optional sample-related identifier @param valueName optional value-related identifier @param extended whether to enable extended statistics functionality @return MutableStat object representing the newly created statistic
1685 Constructs a new MutableStat instance with default visibility. @param name Statistic name @param description Statistic description @param sampleName Sample name for the statistic @param valueName Value name for the statistic
1686 Retrieves metrics registry mask for the given context and name. @param name unique metric identifier @return MetricsRegistry object or null if not found
1687 Creates or updates metrics registry entry. @param name metric name @param description metric description @param value metric value @param override whether to override existing entry @return MetricsRegistry object
1688 Updates user profile statistics by elapsed time. @param name unique user identifier @param elapsed elapsed time in milliseconds
1689 Processes metric buffer and publishes statistics. @param buffer MetricsBuffer object @param immediate Whether to process immediately or with logical time
1690 Applies mask to provided SampleStat instance. @param other SampleStat object to modify
1691 Logs slow RPCs based on performance metrics. @param methodName method name @param call client call object @param details ProcessingDetails object containing timing information
1692 Executes mask operation on network groups.
1693 Calls function m1 with and without a delimiter string.
1694 Formats and logs message with masked arguments. @param format formatting string @param args variable number of argument values to mask
1695 Throws a custom exception with formatted error message. @param category diagnostic category @param message error description @param args variable arguments for message formatting
1696 Creates a UserGroupInformation instance with the specified user and authentication method. @param user unique user identifier @param authMethod authentication method to use @return UserGroupInformation object
1697 Initializes expired token removal and starts the daemon thread. @throws IOException if an I/O error occurs
1698 Updates and saves data to the current key.
1699 Constructs an unauthenticated URL with default delegation token.
1700 Constructs an authenticated URL using the provided delegationToken authenticator. @param authenticator DelegationTokenAuthenticator instance
1701 Constructs an authenticated URL using a delegationToken. @param connConfigurator configuration for establishing connections
1702 Calls m1 with default offset and length parameters. @param b input byte array
1703 Evaluates mask conditions and checks for valid result.
1704 Evaluates all condition methods and returns true if they pass and m3 is null.
1705 Initializes or reinitializes the SSL channel factory with a specific mode. @param preferredMode desired SSL channel mode
1706 Initializes CommandFactory with default settings. @see #CommandFactory(Long)
1707 Initializes the HarFileSystem instance.
1708 Initializes a new instance of HarFileSystem with the specified file system. @param fs the underlying file system
1709 Constructs an empty FsShell instance.
1710 Initializes and returns the base groups. @param conf configuration object
1711 Initializes console output and error streams.
1712 Resolves host to InetAddress. @param host hostname or IP address
1713 Writes ACL string to output stream. @param out DataOutput stream to write to
1714 Initializes ZooKeeper client with truststore and keystore settings. @throws IOException if configuration or initialization fails
1715 Retrieves a function mask value based on the provided key name. @param keyName unique identifier for the key @return non-zero integer value or 0 if not found
1716 Retrieves 'num' values of type E from a queue for the given keyName. @param keyName unique identifier @param num number of values to fetch @return List<E> of fetched values or null if not found
1717 Removes and processes tasks from queue for given key. @param keyName unique identifier
1718 Handles event E based on conditions and delegates to other methods accordingly. @param e the incoming event
1719 Initializes mask functionality if not already done. @throws Exception if initialization fails
1720 Converts this duration to the specified unit. @param timeUnit target time unit (e.g. NANOSECONDS, MICROSECONDS)
1721 Generates a protocol signature based on client methods hash code and server version. @param clientMethodsHashCode unique hash of client methods @param serverVersion current server version @param protocol protocol class to generate signature for @return ProtocolSignature object or null if mismatched
1722 Decays current costs and updates totals. @throws Exception if an error occurs during decay
1723 Calculates functional mask value based on schedulable object properties. @param obj Schedulable object to process @return Functional mask value as integer
1724 Retrieves an element from the queue based on a priority mask. @return E object or null if not found
1725 Closes IPC connection and performs cleanup. @throws IOException if unexpected closure occurs
1726 Initializes a Globber instance to recursively collect files matching the specified pattern and filter. @param fs FileSystem instance @param pathPattern Path pattern to match against @param filter Optional PathFilter for additional filtering @param resolveSymlinks Whether to resolve symbolic links
1727 Initializes a new MachineList instance from given host entries. @param hostEntries string containing machine host entries
1728 Returns platform-specific system information based on the operating system. @return SysInfo object for Linux or Windows, or throws exception otherwise
1729 Calculates and returns the function mask value.
1730 Calculates the function mask value. @return Total free swap size in bytes plus result of m1()
1731 Applies XSLT transformation to XML data and writes result to output stream. @param styleSheet InputStream containing XSL stylesheet @param xml InputStream containing XML data @param out Writer for transformed XML output
1732 Generates a string mask based on options and storage types. @param qOption query option @param hOption human-readable option @param tOption truncate option (if true, returns result of m1) @param xOption exclude snapshot values @param types list of storage types
1733 Formats a string with snapshot details based on the given option. @param hOption boolean indicating whether to include human-readable format
1734 Calculates a value based on the given percentage and map name. @param percentage percentage value @param mapName map identifier
1735 Updates internal position and chunk count based on masking operation. @throws IOException if read operation fails
1736 Calculates the total length of data available in chunks. @return Total length
1737 Processes input bytes and populates a StringBuilder. @return the populated StringBuilder as a String
1738 Generates a function mask by synchronizing with the IBuffer and performing two operations.
1739 Packs byte array into a human-readable mask string. @param bytes input byte array
1740 Extracts and formats a string from DataInput stream. @param in input data stream @return formatted string or null on error
1741 Verifies and extracts client ID from RpcResponseHeaderProto. @param header Response header to check
1742 Wraps single byte in an array for consistency with other methods. @param b single byte to be wrapped
1743 Handles uncaught exceptions by logging and exiting the thread. @param thread Thread object that encountered the exception @param exception Throwable instance of the caught exception
1744 Displays exit usage message with error details.
1745 Handles exceptions thrown by threads during shutdown. @param thread the throwing thread @param exception the thrown exception or error
1746 Logs error with specified exit code and message. @param exitCode system exit code @param message error description
1747 Throws exit exception with custom message. @param status integer status code @throws ExitException if exception occurs
1748 Logs and exits with specified status and message. @param status system exit code @param msg error message to be logged
1749 Handles halt exception with custom message. @param status integer status code @throws HaltException if an error occurs
1750 Wraps calls to overloaded m1() variant with default value. @param s IndexedSortable object @param p int parameter @param r int parameter
1751 Constructs an AclStatus object from given parameters. @param owner file owner @param group file group @param stickyBit whether sticky bit is set @param entries list of AclEntry objects @param permission FsPermission value for the file
1752 Parses ACL string into list of ACL objects. @param aclString comma-separated ACLs in scheme:id:perm format @return List of ACL objects or empty list if input is null
1753 Parses auth string into list of ZKAuthInfo objects. @param authString comma-separated auth strings in scheme:auth format
1754 Copies file metadata from source to target while preserving specified attributes. @param src PathData containing source file @param target PathData containing target file @param preserveRawXAttrs whether to preserve raw xattrs or only those specified in FileAttribute.XATTR
1755 Transforms FsPermission into a list of AclEntries for ACCESS scope. @param perm FsPermission object to transform @return List of AclEntry objects representing permission types (USER, GROUP, OTHER)
1756 Resolves duration tracker based on provided key and count. @param key unique identifier @param count long value for tracking purposes
1757 Constructs StatisticDurationTracker with default duration count. @param iostats IO statistics store instance @param key statistic key identifier
1758 Constructs DurationInfo instance with logging. @param log Logger instance @param format duration format string
1759 Waits for the asynchronous operation to complete and handles exceptions. @param future CompletableFuture containing the result or exception
1760 Waits for and ignores the result of a CompletableFuture. @param future nullable CompletableFuture to be ignored
1761 Creates CRC composer with specified parameters. @param type checksum type @param bytesPerCrcHint hint for CRC computation rate
1762 Updates the composite CRC and advances position in stripe. @param crcB new CRC byte @param bytesPerCrc CRC byte count per update
1763 Recursively formats and returns a timestamp string. @param dateFormat date format to apply @param finishTime end time in milliseconds @param startTime start time in milliseconds
1764 Escapes and joins input string with comma separator. @param str input string to process
1765 Converts input string to CSV format with specified escape and separator characters. @param str input string
1766 Generates function mask by combining class name and arguments. @param classname Java class name @param args list of argument values
1767 Retrieves the function mask. @throws IOException if an I/O error occurs
1768 Wraps FutureIO's read operation on a future object. @param future future object to be read from @return the result of reading from the future or null if interrupted @throws InterruptedIOException if IO is interrupted @throws IOException if an I/O error occurs @throws RuntimeException if any other exception occurs
1769 Combines the results of asynchronous operations into a single list. @param collection collection of futures containing operation results @return List of T objects, or throws an exception if any operation fails
1770 Wraps a {@link Future} in a deprecated interface for legacy compatibility. @param future the asynchronous result to retrieve @param timeout maximum time to wait for completion (in specified {@code unit}) @param unit time unit for {@code timeout} @return the underlying result or throws an exception if not completed within the deadline
1771 Retrieves results from a collection of futures with timeout. @param collection Collection of asynchronous tasks @param duration Time to wait for each task to complete @return List of task results or throws an exception if timed out
1772 Executes and gathers results from a collection of futures with timeout. @param collection Collection of asynchronous tasks @param interruptIfRunning If true, interrupts running futures on timeout @param duration Timeout duration in milliseconds @return List of task results or null if all tasks cancelled
1773 Instantiates class with given arguments using cached constructor. @param theClass Class to instantiate @param conf Configuration object @param argTypes Constructor parameter types @param values Arguments to pass to constructor @return Instantiated object of type T or null if failed
1774 Retrieves or initializes the key class based on configuration. @return The loaded Class object, or null if initialization fails
1775 Retrieves and caches the class associated with a mask. @return The Class<?> object, or null if not initialized
1776 Loads and initializes a class by its name. @return int indicating success or error code
1777 Creates an instance of a class by its name and returns success code. @return int success or error code
1778 Creates a new instance of Configuration.
1779 Creates a configuration object. If supplied, uses provided configuration; otherwise creates a new instance.
1780 Initializes FindClass with default configuration.
1781 Initializes ReconfigurableBase with default configuration.
1782 Initializes ReconfigurableBase with a given configuration. @param conf configuration object or null to use default configuration
1783 Generates a mask string from an executable file. @param executable path to executable file
1784 Executes a shell command with optional redirection of output and error streams. @param dir working directory for the command @param redirectErrorStream whether to redirect error stream to output
1785 Creates and configures progress instance based on given status. @param status current progress status
1786 Calls m1 with provided path and no filter. @param path directory to process
1787 Checks if the file system has a specific capability. @param fs the file system object @param path the directory path @param capability the capability to check for @return true if the capability is present, false otherwise
1788 Checks if an object has a specific capability. @param object Object to check @param capability Capability name to look for @return true if the object has the capability, false otherwise
1789 Retrieves statistics counters map from IostatisticsCountersMethod. @param source input data (not used in this implementation)
1790 Converts input data to map of string-long pairs. @param source input data (type not specified in comment)
1791 Calculates minimum statistics mask from given data. @param source input data to process
1792 Returns map of statistics maximums from iostatisticsMaximumsMethod. @param source input data to process
1793 Computes mask statistics from given data. @param source input data to process
1794 Invokes function with provided arguments and masking logic. @param args variable number of arguments to pass to the function
1795 Adds class to be processed by builder. @param className class name @param varargs classes to process
1796 Configures builder with class name and argument classes. @param className target class name @param argClasses variable number of argument classes
1797 Creates a dynamic unbound method instance. @param source class containing the method @param returnType expected return type of the method @param name method name to find and validate @param parameterTypes variable number of parameter types @return UnboundMethod object or null if not found/invalid
1798 Checks if an object meets the FUNC_MASK condition. @param object Object to check
1799 Checks if the given object matches the function mask criteria. @param object the object to check @return true if object meets the mask requirements, false otherwise
1800 Checks whether an object has a valid mask. @param object Serializable object to check @return true if the object has a valid mask, false otherwise
1801 Evaluates condition based on m1 and context-enabled m2 result. @return true if both conditions are met, false otherwise
1802 Calculates the mask value for a given file system and path. @param fileSystem the file system to operate on @param path the path within the file system @return the calculated mask value
1803 Retrieves a list of file system entries for the given paths. @param fs FileSystem instance @param base Base path for filtering @param paths Collection of Path objects to process @return List of Map.Entry objects containing Path and String values
1804 Opens a file in the specified file system with the given policy and options. @param fs target file system @param path file location @param policy access control policy @param status optional file status (null if unknown) @param length optional file length (null if unknown) @param options additional file system options (null if none)
1805 Reads and processes input stream to fill buffer at specified position. @param in InputStream to read from @param position starting position for reading @param buf ByteBuffer to be filled with data
1806 Creates an iostatistics snapshot using the specified method. @param iostatisticsSnapshotCreateMethod method to use for creating the snapshot
1807 Applies mask to iostatistics context. @param iostatisticsContextEnabledMethod context to be masked
1808 Initializes a LightWeightCache instance with specified parameters. @param recommendedLength recommended cache length @param sizeLimit maximum cache size @param creationExpirationPeriod period for item expiration after creation @param accessExpirationPeriod period for item expiration after last access
1809 Initializes a Filter object with specified parameters. @param vectorSize size of the hashing vector @param nbHash number of hash functions to use @param hashType type of hash function (implementation-specific)
1810 Updates the bucket mask for a given key. @param key unique identifier
1811 Recursively processes each Key in the given collection. @param coll Collection of Keys to process
1812 Recursively processes each Key in the provided list. @param keys List of Key objects to process
1813 Recursively processes an array of Key objects. @param keys array of Key objects to process
1814 Updates the key and fingerprint vectors at specified index. @param index position in vector to update
1815 Finds the index of the hash value with the minimum ratio. @param h array of hash values
1816 Executes function m1 and handles its result. @param argv array of command-line arguments
1817 Retrieves CredentialEntry by name, handling aliasing and deprecated keys. @param provider credential provider instance @param name unique credential name or alias @return CredentialEntry object or null if not found
1818 Marks deprecated keys and updates custom message. @param key key to be deprecated @param newKeys replacement keys @param customMessage updated deprecation message
1819 Iterates over listeners and triggers corresponding actions based on their status. @throws Exception if an error occurs during processing
1820 Parses and validates fencing configuration string. @param argStr input configuration string @throws BadFencingConfigurationException on parsing error
1821 Recursively deletes a ZooKeeper node and its children.
1822 Fetches and processes ZK data for fencing an active session. @return Stat object or null if no old node found
1823 Reads data from the specified stream into a ByteBuffer within the given range. @param stream input stream @param range file range to read from @param allocate callback for allocating buffer memory @return CompletableFuture containing the read ByteBuffer or null on failure
1824 Processes BufferData by caching or executing operations. @param data input buffer data
1825 Sets the action future and updates internal state. @param actionFuture Future object containing asynchronous operation
1826 Updates buffer and checksum based on expected current state. @param expectedCurrentState array of states to update to
1827 Calculates the mask value for a given block number. @param blockNumber unique block identifier
1828 Calculates function mask value based on block number and offset. @param blockNumber unique block identifier @param offset memory address offset @return int function mask value
1829 Initializes BlockData object with file size and block size parameters. @param fileSize total file size in bytes @param blockSize fixed block size in bytes
1830 Returns mask value based on buffer data. @return integer mask value
1831 Calls m1 with default flag value (false). @throws IOException if an I/O error occurs
1832 Closes all resources and caches user-specific information. @param ugi UserGroupInformation object to process
1833 Wraps the provided file context and path with a character set. @param fileContext underlying file system context @param path file or directory path @param charseq character encoding to use (default is UTF-8)
1834 Writes byte array to M5 file system, creating file if it doesn't exist. @param fs M5 file system instance @param path file path @param bytes data to write @return the same file system instance
1835 Writes a list of strings to the specified file system path. @param fs target file system @param path file path to write to @param lines iterable of strings to write @param cs character set for encoding @return the modified file system
1836 Writes CharSequence to a file with specified charset and returns the FileSystem. @param fs FileSystem instance @param path Path to write to @param charseq CharSequence to write @param cs Charset for encoding
1837 Constructs a new BlockLocation object. @param names array of block names @param hosts array of hostnames for the blocks @param topologyPaths array of topology paths (optional) @param offset block start offset in bytes @param length block size in bytes @param corrupt indicates if the block is corrupted
1838 Wraps an integer value in a MutableCounter object. @param name counter description @param desc counter description details @param iVal initial integer value @return MutableCounterInt instance with wrapped value
1839 Wraps immutable counter with initial value into mutable counter. @param name and @param desc are used as key for interned string @param iVal is the initial value of the counter
1840 Creates a new mutable gauge with initial value. @param name gauge name @param desc gauge description @param iVal initial gauge value
1841 Creates and returns a MutableGaugeFloat instance with the given value. @param name gauge name @param desc gauge description @param iVal initial gauge value
1842 Creates a mutable gauge with initial value and description. @param name unique identifier @param desc descriptive text @param iVal initial integer value
1843 Creates a MeanStatistic instance with this object as input.
1844 Logs a message with optional statistics. @param log Logger instance @param message Log message to display @param source Source object for logging context
1845 Formats the superclass's output with additional statistics. @return Formatted string or null if not found
1846 Converts IOStatistics to string representation. @param statistics nullable IOStatistics object @return string representation or empty string if null
1847 Calculates and returns a duration based on the provided factory, statistic, and IOE. @param factory DurationTrackerFactory instance @param statistic statistical string @param input InvocationRaisingIOE object @return calculated Duration object
1848 Executes a supplier function with masked duration tracking. @param factory DurationTrackerFactory instance @param statistic tracked statistic name @return result of input supplier or null if not found
1849 Evicts oldest entry from cache when max block count is reached. @param entry Entry object to manage
1850 Initializes IO statistics store with dynamic counters, gauges, minimums, maximums and mean statistics. @param counters list of counter keys @param gauges list of gauge keys @param minimums list of minimum value keys @param maximums list of maximum value keys @param meanStatistics list of mean statistic function keys
1851 Reads and decrypts data from input buffer. @param b input byte array @param off starting offset in bytes @param len length of data to read @return number of bytes read or -1 if error
1852 Decrypts and writes data from buffer to offset using provided decryptor. @param position current position in the stream @param buffer input data array @param offset starting write position @param length amount of data to process
1853 Decrypts and writes encrypted data to the provided ByteBuffer. @param filePosition starting position of the data @param buf output buffer @param length total length of the data @param start offset in the output buffer
1854 Decrypts data from ByteBuffer using a decryptor. @param buf input ByteBuffer @param length total bytes to process @param start starting offset in ByteBuffer
1855 Seeks to a specific position in the input stream. @param pos target position @throws IOException if seeking fails or is unsupported
1856 Skips bytes from the input stream and updates output buffer. @param n number of bytes to skip @return actual number of bytes skipped
1857 Initializes GlobFilter with specified file pattern. @param filePattern glob pattern to filter files
1858 Initializes a glob filter with the given pattern and path filter. @param filePattern glob pattern to match files @param filter path filter for further filtering
1859 Creates directory and extracts tarball archive to specified path. @param inputStream input stream containing tarball data @param untarDir target directory for extraction @param gzipped whether the tarball is gzipped or not
1860 Retrieves statistics by URI, delegating to AbstractFileSystem. @return map of URIs to corresponding Statistics objects
1861 Calls AbstractFileSystem's m1() method.
1862 Recursively processes input and output chunks. @param inputs array of input chunks @param outputs array of output chunks
1863 Creates a blocking thread pool with customizable parameters. @param activeTasks initial number of threads @param waitingTasks target number of idle threads @param keepAliveTime time to maintain threads for reuse @param unit time unit for keep alive time @param prefixName custom executor name prefix @return BlockingThreadPoolExecutorService instance
1864 Updates internal state with masked buffer data. @param bufferData BufferData object @param startOffset starting offset of mask operation @param readOffset current read offset
1865 Returns a mask value using the m1 function. @return result of m1 function call
1866 Calls m1() and subsequently calls its m2() method.
1867 Returns a serialized mask value by executing nested functions.
1868 Checks for valid data in the provided source object. @param source input object to process @return true if valid data found, false otherwise
1869 Executes a task for each item in the iterator, handling failures and retries. @throws E any exception thrown by the task @return true if all tasks succeeded, false otherwise
1870 Sets IO statistics context using provided value. @param statisticsContext null or valid IOStatisticsContext object
1871 Updates IO statistics context using mask operation. @param ioStatisticsContext Context to update, or null to skip
1872 Updates IO statistics context mask. @param ioStatisticsContext non-null IOStatisticsContext instance
1873 Handles and logs an exception, potentially re-throwing a command interrupt. @param e the Exception to handle
1874 Returns a path handle with functional bits masked. @param stat file status @param opt optional handle options @return PathHandle object
1875 Updates tokens in the map based on the given alias and token. @param alias Text identifier for the update @param t Token to apply to matching aliases
1876 Processes input and output buffers using m1 function. @param inBuffer input data buffer @param outBuffer output data buffer
1877 Processes input and output buffers using function M1. @param inBuffer input data stream @param outBuffer output data stream
1878 Initializes mount point and destination path mapping. @throws IOException if pattern syntax exception occurs
1879 Resolves a child path relative to the provided parent path. @param parent parent directory path @param child child file or directory path
1880 Initializes a Path object from a string representation. @param pathString string to parse (e.g. "/path/to/resource")
1881 Initializes a new Path object from scheme, authority, and path components. @param scheme URI scheme (e.g., "http") @param authority host and port of the URI @param path URI path (may be modified to avoid scheme conflicts)
1882 Returns the function mask based on URI and scheme. @return function mask string
1883 Extracts the filename mask from a Path object. @param p Path to extract filename mask from @return Filename mask string or throws exception if invalid
1884 Resolves and filters the provided file path, handling exceptions. @param p input file path @return resolved file path or null on failure
1885 Initializes and configures an FSDataOutputStream based on given options. @param f the file path @param createFlag the creation flags @param opts additional CreateOpts to configure the output stream @return configured FSDataOutputStream
1886 Calculates FS permission by applying a user mask to the given mode. @param mode initial file system permissions @param umask user mask to apply @return updated FsPermission object
1887 Recursively checks write permissions on a directory. @param f Path to check
1888 Updates the internal permission mask with the given FsPermission. @param permission FsPermission object to assign or null for default
1889 Opens a new file for write operation with specified parameters.
1890 Creates an immutable FS permission object from a short value. @param permission short value representing file system permissions
1891 Writes key-value pair to output stream. @param key unique key object @param val associated value object
1892 Retrieves and returns the result of wBlkState's m1() operation. @throws IOException if an I/O error occurs during execution
1893 Calculates and returns the remaining bytes to read from a file. @param n initial offset @return remaining bytes or 0 if not needed
1894 Calls native file system method to perform operation 1. @param path file system path @return result of operation 1 as a long value
1895 Calls file system's m1 operation on the specified path. @param path file system path to operate on
1896 Continuously appends incremental string values to a list. @throws Exception if an error occurs
1897 Starts the service if not already running. @throws ServiceStateException on startup failure
1898 Updates the current service state to a new specified state. @param newState new desired state @return previous state or null if unchanged
1899 Retrieves and logs the default Kerberos realm. @throws KerberosDiagsFailure if invocation fails
1900 Overridden method to check if object is instance of BytesWritable. @param right_obj Object to be checked @return true if BytesWritable, false otherwise
1901 Calls superclass's m1() method with Text object if present. @param o Object to check and pass to superclass if Text
1902 Initializes data using BytesWritable object. @param newData BytesWritable containing new data
1903 Decodes input buffers and updates positions. @param inputs array of ByteBuffer inputs @param erasedIndexes array of erased index positions @param outputs array of ByteBuffer outputs
1904 Performs decoding and masking operation on input byte arrays. @param inputs input byte arrays @param erasedIndexes array of indexes to be erased @param outputs output byte arrays
1905 Returns true if the delimiter mask is set.
1906 Initializes CBZip2 output stream with specified output and block size. @param out target output stream
1907 Initializes the block decompressor stream with input and decompression context. @param in input stream to read from @param decompressor decompression algorithm instance
1908 Creates compression output stream using specified configuration. @param out OutputStream to compress data into
1909 Creates and returns an instance of CompressionOutputStream with specified settings. @param out OutputStream to compress data into
1910 Creates a compression output stream with specified mask. @param out OutputStream to compress
1911 Creates a compression output stream with specified settings. @param out target output stream
1912 Synchronizes and performs operations on 'data' and 'index' objects. @throws IOException if an I/O error occurs during synchronization
1913 Resets output and compression state. @throws IOException on write failure
1914 Creates CompressionInputStream from provided InputStream. @param in input stream to compress
1915 Creates and returns a compression-enabled input stream. @param in original input stream to compress
1916 Creates a compression-aware InputStream from a regular stream. @param in original InputStream to be compressed
1917 Creates a compression-aware input stream from a regular input stream. @param in input stream to compress
1918 Calls index and data processing methods in sequence. @throws IOException on error during processing
1919 Resets input stream and closes it.
1920 Returns a DirectDecompressor instance with pre-configured masks. @return DirectDecompressor instance with configured mask settings
1921 Writes functional mask data to output stream. @throws IOException on write failure
1922 Writes token and secret key data to output stream. @param out DataOutput stream
1923 Initializes file synchronization and decompression state. @throws IOException if file is corrupt
1924 Decompresses or skips values in the buffer based on compression status. @throws IOException if decompression fails
1925 Reads data from input stream up to maximum allowed bytes. @param in DataInput stream
1926 Retrieves DelegationKey by ID using both superclass and custom methods. @param keyId unique identifier for the key @return DelegationKey object or null if not found
1927 Retrieves a delegation token for the given URL and credentials. @param url Hadoop URL object @param creds Credentials object @return Delegation token or null if not available
1928 Fetches a token using the specified authentication type. @param authType SaslAuth type @return Token object or null on failure
1929 Applies a mask to the specified Token, associated with the given InetSocketAddress. @param token Token object to be processed @param addr InetSocketAddress instance representing network address and port
1930 Converts TokenProto to Token with a specific TokenIdentifier.
1931 Retrieves a ByteString from cache using the given Text key. @param key input Text object used for caching and lookup @return cached ByteString or null if not found, with fallback to m3() computation
1932 Copies token data from another token object. @param other the source token to clone
1933 Calls m1 with default maxCharPerLine value. @param str Text object to process @param maxLineLength maximum line length @return result of m1 call (int)
1934 Calls overloaded m1 with default max rows and columns. @param str Text object to process
1935 Constructs an instrumented lock instance with specified parameters. @param name human-readable lock identifier @param logger logging utility for lock events @param minLoggingGapMs minimum time gap between log entries (ms) @param lockWarningThresholdMs threshold for warning messages (ms)
1936 Creates a RetryProxy instance with the given interface, implementation and retry policy. @param iface target interface @param implementation concrete implementation to use @param retryPolicy retry strategy for failures
1937 Waits for specified time before retrying, handling thread interruptions. @throws InterruptedIOException if interrupted while waiting
1938 Initializes a Writer object with configuration and settings. @param fsdos file output stream for writing @param minBlockSize minimum block size for compression @param compressName compression algorithm name @param comparator comparator class for data sorting @param conf Hadoop Configuration object
1939 Returns true if chunk mask is set. @throws IOException on read error
1940 Calculates and returns a mask integer value. @throws IOException on IO-related errors
1941 Wraps byte array slice into a ByteArray object and delegates to m1(ByteArray). @param buf original byte array @param offset starting index of the slice @param length length of the slice
1942 Calls parent method and invokes m1() if output stream is initialized.
1943 Updates a key-value pair in the data store. @param key Object with class matching keyClass @param val Object with class matching valClass
1944 Processes a byte array as a key and associated ValueBytes. @param keyData input key data @param keyOffset starting offset of key in input data @param keyLength length of input key @param val associated ValueBytes object
1945 Depreciated function to copy all fields from src to dst. @param dst writable destination object @param src writable source object
1946 Recursively fetches Node based on provided scope and excluded nodes. @param scope the scope of search @param excludedNodes collection of nodes to exclude from result
1947 Recursively calls m1 with an additional 'next' parameter. @param reader current node @param nodes array of nodes @param activeLen length of active nodes @param next next node in recursion (default is null)
1948 Calls overloaded version with an additional parameter.
1949 Creates a new SocketInputStream from a given socket and timeout value. @param socket the underlying socket channel @param timeout connection timeout in milliseconds
1950 Initializes SocketInputStream with a given Socket instance. @param socket the underlying socket channel and timeout value
1951 Creates a new SocketOutputStream instance from the provided socket and timeout. @param socket the underlying socket channel @param timeout socket write timeout in milliseconds
1952 Adds a new node to the cluster, handling inner nodes and network topology. @param node Node object to add
1953 Fetches a function mask from the buffer. @param buf ByteBuffer containing data @param ops operation flags @throws IOException if an I/O error occurs @return -1 on failure or 0 on success
1954 Establishes a TCP connection to the specified endpoint on the given socket channel. @param channel SocketChannel instance @param endpoint SocketAddress of the remote server @param timeout Connection timeout in milliseconds
1955 Executes operation on socket channel with specified timeout. @param ops operation to perform @throws IOException if an I/O error occurs or socket times out
1956 Wraps the main method invocation with a single parameter. @param strInterface interface string (may be null)
1957 Simplified constructor for M1 class, using default caching behavior. @param strInterface interface string @param nameserver DNS server address
1958 Initializes metrics using m1 function.
1959 Initializes a MutableInverseQuantiles object with specified parameters. @param name unique identifier for the quantile @param description description of the quantile @param sampleName name of the sample data @param valueName name of the calculated values @param intervalSecs time interval in seconds
1960 Creates and registers a quantiles metric with the given name, description, sample name, and value name, using the specified interval. @param name metric name @param desc metric description @param sampleName sample name @param valueName value name @param interval positive quantile interval @return MutableQuantiles object representing the created metric
1961 Convenience constructor for creating a MutableStat with default flags. @param name stat name @param desc stat description @param sampleName sample name @param valueName value name
1962 Creates a new MetricsRegistry object with basic properties. @param name metric name @param description metric description @param value initial metric value
1963 Calls innerMetrics with user-provided name and value. @param name unique identifier @param value associated numerical value
1964 Updates RPC queue rates based on priority and queue time. @param priority integer representing service level (e.g., 0-9) @param queueTime timestamp for rate calculation
1965 Updates RPC processing rates with given priority and processing time. @param priority numerical priority level @param processingTime total processing duration in milliseconds
1966 Updates RPC processing rates with given data. @param rpcCallName name of RPC call @param overallProcessingTime total processing time for the call
1967 Configures Kerberos environment on non-Windows platforms. @throws IOException if any I/O error occurs
1968 Evaluates condition and logs failure or success accordingly. @param condition boolean condition to check @return true if condition met, false otherwise
1969 Logs diagnostic information using m1() function when condition is true. @param condition boolean flag to enable logging @param category logging category @param message log message @param args variable arguments for log message
1970 Returns UserGroupInformation instance based on provided username. @param user unique username to authenticate with
1971 Verifies token validity by comparing user-provided and stored passwords. @param identifier unique token identifier @param password user-entered password @throws InvalidToken if token or password mismatch
1972 Performs keytab renewal based on ticket validity. @param none
1973 Creates a Count object from an array of command arguments. @param cmd full command array @param pos starting position for copying into args array @param conf configuration object (passed to superclass)
1974 Establishes a ZooKeeper connection with authentication. @throws IOException if ZooKeeper connection fails @throws KeeperException on ZooKeeper error
1975 Executes function with mask operation using provided key name. @param keyName input key to perform operation on
1976 Performs a name lookup and logs slow lookups if enabled. @param hostname hostname to resolve @return InetAddress object or throws UnknownHostException
1977 Retrieves protocol signature for a given server and client. @param server VersionedProtocol instance @param protocol protocol name @param clientVersion client version @param clientMethodsHash client methods hash @return ProtocolSignature object or throws IOException on failure
1978 Checks if a server method is enabled by signature. @param methodName name of the server method @param parameterTypes method parameters @return true if enabled, false otherwise
1979 Validates RPC request header for fatal errors. @param header RpcRequestHeaderProto object to validate
1980 Deserializes a Message instance from the provided RpcWritable.Buffer. @param message Message to deserialize @param buffer Buffer containing deserialized data @return Deserialized Message of type T or throws an exception if failed
1981 Returns a functional mask value based on semaphore state. @return non-null value if semaphore is in valid state, or null otherwise.
1982 Handles version mismatch between server and client. @param clientVersion client IPC version
1983 Calculates the function mask value based on swap size and offset. @return calculated function mask value in bytes.
1984 Creates a new HarFS data input stream for the given file system and path. @param fs the underlying file system @param p the file path to access @param start starting byte offset @param length number of bytes to read @param bufsize buffer size
1985 Evicts entries from the queue based on FUNC_MASK logic.
1986 Repeats operation m1 until size limit is reached or exceeded. @param none
1987 Wraps calls to m2 with qOption and xOption set. @param qOption true if query option enabled @param hOption true if header option enabled @param xOption true if other option enabled
1988 Wraps the original call with a default value of false for the new option.
1989 Returns a mask string based on option flags and storage types. @param hOption high option flag @param tOption type option flag @param types list of StorageType objects
1990 Recursively completes and handles a list of asynchronous futures. @param futures list of CompletableFuture objects to process
1991 Processes a CompletableFuture with a Void result, calling m1() on it. @param future CompletableFuture containing the result to process
1992 Updates CRC for byte array in chunks. @param crcBuffer input data with CRC @param offset starting position of first CRC chunk @param length total number of bytes to process @param bytesPerCrc size of each CRC chunk
1993 Recursively reads and processes CRC values from the input stream. @param checksumIn input stream containing CRC data @param numChecksumsToRead number of CRC values to read @param bytesPerCrc number of bytes per CRC value
1994 Instantiates an object of a given class with default configuration. @param theClass Class to instantiate @param conf Configuration to use (default constructor used)
1995 Calls the M1 method on the underlying data structure. @return The result of the M1 operation, or null if not applicable
1996 Calls data.m1() and returns its result.
1997 Evaluates the action specified by the user. @param args array of two elements: action and name @return integer result code or throws exception
1998 Initializes a new FutureDataInputStreamBuilderImpl instance with the given file context and path. @param fc non-null FileContext object @param path non-null Path to initialize from
1999 Creates a DataChecksum object from a byte array, starting at specified offset. @param bytes input byte array @param offset starting position in the array (must be non-negative) @throws InvalidChecksumSizeException if checksum creation fails
2000 Creates a DataChecksum object based on input parameters. @param in DataInputStream containing checksum metadata @return DataChecksum object or null if creation fails
2001 Updates launch mechanism for processes on macOS. @throws IOException if an error occurs during process execution
2002 Computes mask value based on provided snapshot and optional statistics. @param snapshot serialized data @param statistics additional statistical data (may be null)
2003 Creates and returns a serialized mask object.
2004 Creates a mask from the given source object. @param source input data to create mask from
2005 Converts snapshot to JSON string. @param snapshot serialized data (can be null)
2006 Converts JSON string to Serializable object. @param json JSON input string
2007 Loads IO statistics snapshot from file system. @param fs FileSystem object @param path File path to load from
2008 Retrieves IOSTATISTICS snapshot from the given source. @param source object containing statistics data
2009 Saves file system statistics snapshot to specified location. @param snapshot Snapshot data (may be null) @param fs File system instance @param path Destination path for saved snapshot @param overwrite Whether to overwrite existing file
2010 Converts statistical data to formatted string. @param statistics Object containing statistical data
2011 Retrieves function mask from current method context. @throws UnsupportedOperationException if operation is not supported
2012 Sets thread context based on provided statistics context. @param statisticsContext optional context object (may be null)
2013 Resets function mask context. @throws UnsupportedOperationException if operation fails
2014 Returns a serializable mask value. @throws UnsupportedOperationException if operation is not supported
2015 Evaluates the function mask for the given object. @param source Object to evaluate @return true if the mask applies, false otherwise
2016 Compares two version strings and returns a bitmask of their difference. @param version1 first version string @param version2 second version string @return bitmask indicating version relationship (e.g. 0 for equal, -1 or +1 for less/greater)
2017 Initializes a counting Bloom filter with specified parameters. @param vectorSize size of the underlying vector @param nbHash number of hash functions to use @param hashType type of hash function (not used in this implementation)
2018 Initializes a Bloom Filter with specified parameters. @param vectorSize size of the filter's bit array @param nbHash number of hash functions to use @param hashType type of hash function (implementation-specific)
2019 Checks membership in the Bloom filter using provided key. @param key WritableComparable object to check @return true if key is likely present, false otherwise
2020 Applies a mask to the given Key based on the specified scheme. @param k Key object @param scheme Masking scheme (e.g. RANDOM, MINIMUM_FN, etc.)
2021 Overloads m1 to accept either a single new key or an array of keys.
2022 Legacy wrapper function to call m1 with user ID and new keys. @param key unique identifier of the user @param newKeys array of updated keys
2023 Updates database key to a new value.
2024 Starts and initializes the web server. @throws IOException if an I/O error occurs
2025 Updates or creates a ZNode breadcrumb with the given application data. @param oldBreadcrumbStat previous breadcrumb stat (optional)
2026 Deletes the breadcrumb of an active node. @throws IllegalStateException if breadcrumb data does not match application data
2027 Processes file ranges on the given stream. @param stream input stream @param ranges list of file ranges to process @param allocate callback for allocating buffer space
2028 Executes operation and processes buffered data. Performs operation on prefetched or ready data blocks. @see #m1() for related operation execution
2029 Retrieves data for the specified block number. @param blockNumber unique block identifier @return BufferData object containing block data or throws IOException on failure.
2030 Initializes FilePosition object with fileSize and blockSize parameters. @param fileSize total size of the file @param blockSize size of each block in the file
2031 Calls block data's m2 method with result of m1 as argument.
2032 Calls cache cleanup and initializes it. @throws IOException on cache operation failure
2033 Wraps existing m1() call with UTF-8 encoding. @param fs file system instance @param path file path to operate on @param charseq character sequence for operation
2034 Creates a new BlockLocation object with provided parameters. @param names array of file names @param hosts array of hostnames @param offset block start position @param length block size in bytes @param corrupt flag indicating corrupted data
2035 Constructs a BlockLocation object with specified parameters. @param names array of block identifiers @param hosts array of host names @param topologyPaths array of topology paths @param offset starting position in bytes @param length block length in bytes
2036 Combines two MeanStatistics into one. @param l left MeanStatistic @param r right MeanStatistic @return combined MeanStatistic
2037 Synchronizes and updates counters, gauges, minimums, maximums, and mean statistics. @param source IOStatistics object containing data to update from
2038 Wraps call to main logging method with default logger. @param message log message @param source optional source object
2039 Logs IO statistics at specified level. @param log Logger instance @param level logging level (INFO, ERROR, WARN) @param source Object to be logged
2040 Closes and logs statistics for a RemoteIterator. @param source Iterator to close and log
2041 Calls m1 function with given parameters. @param factory DurationTrackerFactory instance @param statistic specific statistic name @param input InvocationRaisingIOE object for I/O operations
2042 Reads from underlying input source to buffer at specified position and offset. @param position current read position @param buffer data buffer @param offset starting offset in buffer @param length number of bytes to read @return actual number of bytes read or -1 on error
2043 Reads data from a positioned source. @param position current read position @param buffer target byte array @param offset initial buffer offset @param length number of bytes to read
2044 Reads data from the input stream to the byte buffer. @param position current stream position @param buf target byte buffer @return number of bytes read or -1 on error
2045 Performs a positioned read operation using a ByteBuffer. @param position current file position @param buf ByteBuffer to read from
2046 Reads data from ByteBuffer or ReadableByteChannel and updates internal buffers. @param buf input buffer @return number of bytes read or -1 on error
2047 Writes Java object to output stream. @param out DataOutput stream @param instance Object to be written @param declaredClass Class of the object @param conf Configuration object (not used) @param allowCompactArrays Flag for compact arrays (not used)
2048 Fetches buffer data by block number with mask functionality. @param blockNumber unique block identifier
2049 Delegates call to underlying buffer pool's m1 method.
2050 Determines whether to mask a task based on its status and service availability. @param task Task object containing I/O operations
2051 Processes multiple path data items in bulk, handling exceptions individually. @param parent PathData object representing the parent context @param items variable number of PathData objects to process
2052 Returns a function to map FileStatus objects to PathHandles. @param fs FileSystem instance @param opt Handle options (variable arguments)
2053 Creates a ShellCommandExecutor instance with specified parameters. @param userName username to be used in execution
2054 Creates ShellCommandExecutor instance with custom mask function. @param userName user name to be masked
2055 Processes credentials data from input stream. @throws IOException if input operation fails
2056 Recursively fetches and adds tokens from the given issuer hierarchy. @param issuer DelegationTokenIssuer to fetch tokens from @param renewer string used for token renewal @param credentials Credentials object containing existing tokens @param tokens list of fetched Token objects
2057 Synchronizes and delegates to m1() with given alias and token. @param alias Text alias @param token Token with identifier @return True if operation successful
2058 Resolves absolute or relative path within the given working directory. @param workDir base directory @param path input path to resolve @return resolved Path object
2059 Resolves a relative path to an absolute path by prepending the work directory. @param workDir base directory path @param path relative path to resolve @return absolute path or original path if already absolute
2060 Creates a File object from the given Path, applying transformations as needed. @param path input Path to process
2061 Recursively applies mask function to path. @param p input path
2062 Constructs a URI for the FUNC_MASK file based on the working directory and default URI. @param defaultUri default URI to use when constructing the new URI @param workingDir working directory to use as the base path @return new Path object representing the constructed URI
2063 Returns a Path instance representing the m1 function URI. @return Path object for m1 function endpoint
2064 Returns a path representing the FUNC_MASK URI.
2065 Returns SFTP function mask path or null on error. @param channel SFTP connection channel
2066 Retrieves file status for a given path, handling FileNotFoundExceptions. @param fs FileSystem instance @param pathString file system path as string @param ignoreFNF whether to ignore or rethrow FileNotFoundExceptions @return FileStatus object or null if not found
2067 Returns a Path representing the function's mask. @return Path object representing the function's mask
2068 Returns a path to function mask based on target path. @return Path object or null if targetPath is null
2069 Returns the total size of the file system rooted at the specified path. @param path root directory of the file system
2070 Initializes a ChRootedFileSystem with the given file system and URI. @param fs underlying file system @param uri URI of the chroot directory
2071 Constructs a partial path from the provided array, starting at the specified index. @param path array of path elements @param startIndex index to start constructing the path from @return Path object representing the constructed partial path or SlashPath if out-of-bounds
2072 Concatenates directory links into a single path string. @return concatenated path or null if no links are provided
2073 Constructs a Path instance by combining two existing Paths. @param parent parent directory path @param child child file or directory path
2074 Creates a new path by appending a child element to the specified parent. @param parent the parent directory or file @param child the name of the child element to append
2075 Initializes a new Path instance by delegating to its constructor. @param parent directory path of the parent @param child child path object
2076 Renames a file or directory in the given filesystem. @param fs FileSystem instance @param oldName original path name @param newName new path name
2077 Creates a path from file metadata. @param f File object containing m1 and m2 data
2078 Constructs a Path object from the given URI. @param nestedUri input URI to process @return constructed Path object
2079 Creates an array of Path objects from the given string array. @param str array of strings to convert @return array of Path objects or null if input is null
2080 Applies mask operation to the given file system path. @param path input file system path
2081 Combines two paths using a custom mask operation. @param path1 primary path @return combined Path object
2082 Validates file type requirement for the existing path. @param typeRequirement file type to validate (directory or not)
2083 Generates a function mask string from the given child path. @param childPath input path
2084 Throws a PathNotFoundException for the given PathData item. @param item PathData object to check for existence
2085 Performs file system operations on the given path. @param absOrFqPath absolute or fully qualified path to operate on
2086 Updates file system permissions and returns true if directory exists. @param fs FileSystem object @param dir Path to the directory @param permission FsPermission value to set @return true if directory exists; false otherwise
2087 Initializes a LocatedFileStatus object with file metadata. @param locations array of block locations for the file
2088 Convenience wrapper to call m1 with Object parameters.
2089 Writes masked key-value pairs to the output stream. @param records iterator over raw key-value data @param writer output writer for masked data
2090 Initializes service state based on configuration. @param conf service configuration
2091 Stops the service, invoking necessary cleanup and notifications.
2092 Checks if text matches public service mask criteria. @param thePublicService Text object to evaluate
2093 Checks if given token matches specified text alias. @param token Token object to check @param alias Text alias for matching
2094 Checks if a URL matches the specified service. @param fetcher DtFetcher instance @param service Text object representing the service @param url Text object containing the URL to check
2095 Applies file system mask to specified directory. @param dir directory path to apply mask to
2096 Applies disk error handling and masking operations on the specified directory. @param dir directory to process
2097 Disables all function masks.
2098 Updates and decodes input buffers while removing specified indexes. @param inputs original input buffers @param erasedIndexes indices of removed elements @param outputs updated output buffers
2099 Recursively processes input and output ECChunks. @param inputs encoded chunks to process @param erasedIndexes indexes of chunks to erase @param outputs buffer for processed output chunks
2100 Closes the current block and updates state. @throws IOException on failure
2101 Clears and initializes mask segment. @throws IOException on I/O error
2102 Closes and flushes block state. @throws IOException on write error
2103 Reads and populates token and secret key maps from input stream. @param in DataInput stream containing tokens and secret keys
2104 Fetches and processes compressed or uncompressed key from underlying buffer. @param key DataOutputBuffer to read key from
2105 Processes and writes configurable data to output stream. @param val Writable object containing configuration data
2106 Processes and returns the given object, applying configurable settings and handling compressed block reads. @param val the object to process @return the processed object or null if an exception occurs
2107 Computes the length of a compressed or uncompressed key-value pair. @param key DataOutputBuffer for key data @param val ValueBytes object for value data @return total length of key and value, or -1 on error
2108 Decodes compressed or decompressed user value bytes. @param val ValueBytes object to process @return length of decoded value
2109 Retrieves DelegationTokenInformation for the given TokenIdent. @param ident unique token identifier @return DelegationTokenInformation object or throws exception if not found
2110 Parses DataInput to create a PermissionStatus object. @param in input stream containing permission data
2111 Reads an enum value from input stream and returns it. @param in DataInput stream containing the enum value @param enumType class of the enum to read @return Enum instance or null if not found
2112 Reads and processes ACL string from input stream. @param in DataInput stream containing ACL data
2113 Retrieves a ByteString from Protobuf helper. @param key Text object used as input
2114 Builds a TokenProto object from the given token. @param tok Token object to extract data from
2115 Constructs a DelegationTokenIdentifier with specified attributes. @param kind token type @param owner token owner @param renewer token renewer @param realUser real user associated with the token
2116 Executes method with retries and failovers. @throws Exception on failure or retry policy exceeded @return result of successful execution or error object
2117 Fetches key-value pair from input stream. @throws IOException on read error
2118 Reads data from input stream and returns a FUNC_MASK long value. @param value BytesWritable object to read into
2119 Transfers data to OutputStream and returns total size transferred. @param out target output stream @return total size in bytes or -1 on error
2120 Returns the result of m1 with default offset and length. @param buf input byte array
2121 Compares this entry with another object for equality. @param other Object to compare with @return true if equal, false otherwise
2122 Obtains a Delegation Token by URL and authentication details. @param url the URL to fetch the token from @param token authenticated token for the request @param renewer user or service requesting the token @param doAsUser user on behalf of whom the token is requested @return DelegationToken object or null if not obtained
2123 Retrieves a long value from the JSON response of renewing a delegation token. @param url URL to access @param token authenticated token @param dToken delegation token @param doAsUser user to perform operation as @return long value or throws exception if failed
2124 Cancels a delegation token using the provided credentials. @param url URL to access the service @param token Authentication token for the operation @param dToken Token to cancel @param doAsUser User to perform the cancellation as
2125 Returns a Node instance using the provided scope. @param scope unique identifier for the node scope
2126 Processes a Node and its children recursively. @param reader Node to process @param nodes array of child Nodes @param activeLen length of active data
2127 Creates a SocketInputWrapper instance with the given timeout. @param socket network socket @param timeout connection timeout in milliseconds @return SocketInputWrapper object or throws IOException if an error occurs
2128 Returns an OutputStream instance based on socket status. @param socket active socket connection @param timeout connection timeout in milliseconds @return SocketOutputStream or existing OutputStream if available
2129 Establishes a connection to a remote endpoint. @param socket active socket object @param endpoint destination address and port @param localAddr source address and port (optional) @param timeout connection timeout in milliseconds
2130 Registers an MBean with the given properties. @param serviceName JMX service name @param nameName ObjectName name @param properties bean registration properties @return registered ObjectName or null on failure
2131 Creates and initializes a MutableQuantiles object. @param name unique quantile metric identifier @param desc metric description @param sampleName sampling information @param valueName value associated with the quantile @param interval positive interval value for quantile calculation @return initialized MutableQuantiles object or null on error
2132 Initializes a retry cache with specified name, percentage, and expiration time. @param cacheName unique cache identifier @param percentage percentage of capacity to compute @param expirationTime time-to-live in milliseconds
2133 Processes a given protocol class, logging and performing actions based on its methods. @param protocol the Class<?> to process
2134 Applies mask operation to each name in the provided array. @param names array of strings to be processed
2135 Updates sample statistics in the local map with corresponding global metrics. @param localStats concurrent map of user IDs to ThreadSafeSampleStat objects
2136 Creates a new mutable rate with default enabled state. @param name rate name @param desc rate description @param extended whether the rate is extended
2137 Registers protocol methods with the registry and logs their names. @param protocol Class<?> to register
2138 Processes metric annotations on a given method. @param source the object being processed @param method the method containing the annotations
2139 Validates and logs user authentication status. @param messagePrefix prefix for error messages @param user UserGroupInformation object
2140 Validates a file based on various criteria. @param file File object to check @param category Category for error messages (e.g. log level) @param text Placeholder text for error messages @return true if all checks pass, false otherwise
2141 Validates and extracts Kerberos short name from a given principal. @param principal user principal to process
2142 Computes and returns the function mask for the current user. @return null if owner is null or has no permissions, otherwise a UserGroupInformation object
2143 Enables recursive search in the find operation.
2144 Initializes a new instance of the Count class.
2145 Initializes mask functionality.
2146 Initializes mask functionality by calling underlying m1 method with default parameters.
2147 Performs a default invocation of m1 with isInit=false.
2148 Resolves hostname to IP address and returns InetSocketAddress. @param host hostname or IP address @param port TCP port number @return InetSocketAddress object
2149 Resolves host name to InetAddress. @param host hostname or IP address @return InetAddress object or null if not found
2150 Continues RPC call with final packet. @param call ongoing RPC operation
2151 Processes RPC request from client. @param header RpcRequestHeaderProto object @param buffer RpcWritable.Buffer object
2152 Handles RPC call response based on status. @param call RpcCall object @param status RpcStatusProto enum value @param erCode RpcErrorCodeProto enum value @param rv Writable object (may be null) @param errorClass String representing error class @param error String containing error message
2153 Applies mask functions to IP list and performs additional processing. @param none @return none
2154 Prints system info to console. Fetches and displays various system metrics.
2155 Calls M1 with default values for 'useSystemFont' and 'fontSize'. @param qOption query option flag @param hOption header option flag
2156 Reads data from byte array using FUNC_MASK algorithm. @param b input byte array @param off offset within the array to start reading @return number of bytes read or 0 for EOF, -1 on error
2157 Creates an instance of the specified expression class from configuration. @param expressionClass Class of the expression to create @param conf Configuration object for instantiation @return Instance of the expression class or null if creation fails
2158 Retrieves a command instance by name from the configuration. @param cmdName unique command identifier @param conf application configuration @return Command object or null if not found
2159 Returns a WritableComparable instance based on key class and configuration. @return instance of WritableComparable or null
2160 Creates a Writable instance using the given class and configuration. @param c Class of the Writable to create @param conf Configuration for initializing Configurable instances
2161 Creates SocketFactory instance based on configuration and property value. @param conf Configuration object @param propValue Property value to resolve factory class @return SocketFactory instance or throws exception if class not found
2162 Retrieves a masked token identifier based on the current state. @return T object representing the token identifier or null if not found
2163 Retrieves a valid instance of DiskValidator based on the provided class. @param clazz Class<? extends DiskValidator> type to validate
2164 Initializes a DynamicBloomFilter with specified parameters. @param vectorSize size of the filter vector @param nbHash number of hash functions to use @param hashType type of hash function (e.g. murmur3) @param nr reserved capacity for records
2165 Initializes the last row of the bloom filter matrix.
2166 Initializes a new RetouchedBloomFilter instance with specified parameters. @param vectorSize size of the filter's underlying vector @param nbHash number of hash functions to use @param hashType type of hashing algorithm to employ
2167 Updates resource masks for the given Properties instance. @param props Properties object to update @param startIdx starting index for mask updates @param fullReload whether to fully reload resources or not
2168 Executes synchronization logic for election. @param needFence whether a fence is needed
2169 Allocates memory and reads data into ByteBuffer objects using Vectored Read. @param ranges collection of file ranges to read @param allocate function to allocate memory for each range
2170 Constructs a new BlockLocation instance with the given parameters. @param names array of block names @param hosts array of host identifiers @param offset starting offset in bytes @param length total length of the block in bytes
2171 Creates a DurationStatisticSummary object with specified metrics. @param key unique identifier for the statistic @param success indicates whether the duration is considered successful @param count total number of samples @param max maximum value @param min minimum value @param mean optional mean value, cloned if provided
2172 Aggregates statistics from the given source into local counters. @param source IOStatistics object to aggregate @return true if aggregation successful, false otherwise
2173 Initializes IO statistics snapshot from given source or creates default maps. @param source optional IOStatistics instance to snapshot
2174 Counts elements in the remote iterator and applies a consumer to each element. @param source RemoteIterator containing data @param consumer Consumer function to process each element @return Number of processed elements or -1 on error
2175 Invokes serialization of an object to the given output stream. @param out output stream for serialized data @param instance object being serialized @param declaredClass class declaring the serialization method @param conf configuration parameters (not used in this implementation)
2176 Processes block operations based on the provided block number. @param blockNumber unique block identifier
2177 Acquires BufferData for the given block number with retries. @param blockNumber unique block identifier @return BufferData object or null if acquisition fails
2178 Initializes functional mask by traversing PathData structure. @param item PathData object to process
2179 Recursively groups and processes remote path data into chunks of specified size. @param parent the parent directory @param itemsIterator iterator over remote path data
2180 Resolves partial group names for a given user. @param userName The name of the user @param errMessage Error message to be used in exceptions @return Set of group names or null if not found @throws PartialGroupNameException If resolution fails
2181 Executes command with optional arguments and timeout. @param cmd vararg command to execute
2182 Executes shell command in environment with default timeout. @param env execution environment @param cmd command to execute
2183 Calls m1 with default configuration (sync=true). @param other Credentials object to process
2184 Masks credentials by calling underlying function. @param other Credentials to mask
2185 Retrieves an array of tokens with mask functionality. @param renewer unique identifier for token renewal @param credentials authentication data (may be null)
2186 Recursively checks token validity. @param token input token to validate @return true if valid, false otherwise
2187 Updates and processes the current working directory. @param newDir Path to the new directory.
2188 Updates file metadata with modified and accessed times. @param p Path to the file @param mtime Modified time in milliseconds, or -1 for no change @param atime Accessed time in milliseconds, or -1 for no change
2189 Calls RawLocalFileSystem's m1 method to perform an operation on the given file path. @param path Path object representing the file location
2190 Generates functional mask by applying multiple operations to the input path. @param p input file path
2191 Calls m3 with file system's m1 and m2 results. @param fs FileSystem object
2192 Applies M3 operation to the given file system path. @param path input file system path
2193 Computes and appends M3 value to the given path. @param path input path object
2194 Resolves file status for the given path. @param f input path
2195 Resolves symbolic links for specified file path and returns true if successful. @param f the original file path @param recursive whether to resolve links recursively @return true if resolution was successful, false otherwise
2196 Resolves and returns a file stream for the given path. @param f file system path
2197 Resolves symbolic link to FSDataInputStream. @param f symbolic link path @param bufferSize buffer size for input stream @return FSDataInputStream object or throws exception if failed
2198 Resizes a file to the specified length. @param f file path @param newLength desired file size in bytes @return true if resize was successful, false otherwise
2199 Resolves file system links to fetch data with specified replication. @param f original file path @param replication desired replication level @return true if successful, false otherwise
2200 Updates file permissions and metadata. @param f target file path @param permission new file permissions
2201 Resolves file system links and applies access control for the given path. @param f input file path @param username user identifier (optional) @param groupname group identifier (optional)
2202 Updates file metadata (mtime and atime). @param f file path @param mtime last modified time @param atime last accessed time
2203 Resolves file checksum for a given path. @param f path to resolve @return FileChecksum object or null if not found
2204 Resolves M2 status for a given file path. @param f input file path
2205 Resolves file system links and applies access control. @param path file system path @param mode FsAction to apply to the path
2206 Resolves file status for the given path, handling symbolic links. @param f input path
2207 Resolves absolute file path and returns its masked equivalent. @param f input file path
2208 Resolves block locations for a file path. @param f file path @param start start offset @param len length @return array of BlockLocation objects or null if not found
2209 Resolves file system status for a given path. @param f the input file path @return FsStatus object or default FS if null input
2210 Resolves and creates a symbolic link to the target file system. @param target destination file path @param link symbolic link to create @param createParent whether to create parent directories if needed
2211 Resolves file status iterator for a given path. @param f input file path
2212 Resolves remote file system links for the given path. @param path input path to resolve
2213 Resolves file status for the given path. @param f the input file path
2214 Resolves file system links and returns a set of matching AbstractFileSystem instances. @param f input path to resolve @return Set<AbstractFileSystem> or throws IOException if an error occurs
2215 Resolves ACL specifications for the given file path. @param path absolute file path @param aclSpec list of access control entries to apply
2216 Resolves file system links and applies ACL specifications. @param path input path @param aclSpec list of access control entries
2217 Resolves file system link for the given path. @param path input file path to resolve
2218 Resolves file system link for the given path. @param path input file path
2219 Resolves ACL for a given file path. @param path the file path @param aclSpec list of access control entries
2220 Resolves ACL status for the given path. @param path input file system path @return AclStatus object or null if not found
2221 Resolves and sets file system attribute for the given path. @param path input path @param name attribute name @param value attribute value @param flag flags for setting attributes
2222 Resolves file system link and fetches data by name. @param path input path @param name target file or directory name @return byte array containing the resolved data
2223 Resolves file system links and retrieves metadata for the given path. @param path input file path @return a map of metadata (key-value pairs)
2224 Resolves file system links to fetch key-value pairs. @param path input path @param names list of key names @return Map of key-value pairs or null if not found
2225 Resolves file system link for the given path and name. @param path input file path @param name associated file name
2226 Resolves file system links to fetch a list of strings from the specified path. @param path input path to resolve @return list of strings or null if an error occurs
2227 Resolves a file system link for the given path and snapshot name. @param path input file system path @param snapshotName linked snapshot identifier @return resolved Path object or throws IOException if failed
2228 Resolves file system link for the given path and renames snapshots. @param path input directory path @param snapshotOldName old snapshot name @param snapshotNewName new snapshot name
2229 Resolves file system link for the given path and snapshot name. @param path absolute file system path @param snapshotName name of the snapshot to resolve
2230 Resolves file system link for the given path. @param path input file system path
2231 Resolves file system link for given path and policy name. @param path input path @param policyName file system access policy
2232 Resolves file system links for the given source path. @param src input path to resolve @throws IOException if an I/O error occurs
2233 Resolves BlockStoragePolicySpi for the given path. @param path input path to resolve @return BlockStoragePolicySpi instance or null if not found
2234 Resolves file system link for the given path and capability. @param path directory path @param capability required capability @return true if resolved, false otherwise
2235 Resolves server defaults for the given file system path. @param path file system path to resolve
2236 Creates an MultipartUploaderBuilder instance with the given base path. @param basePath file system path to resolve links from
2237 Returns SFTP channel path mask. @param client SFTP client instance
2238 Retrieves file status based on a function mask. @return FileStatus object or null if failed
2239 Calls underlying file system's implementation of m1.
2240 Resolves a file system path using interceptors and regex patterns. @param srcPath original file system path @param resolveLastComponent whether to resolve the last component of the path @return ResolveResult object or null if no mapping occurred
2241 Checks if a file exists in the local filesystem. @param pathStr relative or absolute file path @param conf configuration object @return true if file found, false otherwise
2242 Recursively cleans files and directories in the specified FS. @param fs FileSystem instance @param name root directory name
2243 Calculates the file system path for a specific date. @param now current time
2244 Returns a FileOutputStream with specified permissions. @param f file to open @param permissions access rights for the stream
2245 Determines whether to preserve raw xattributes during copy operation. @param src source file path @param target destination file path @return true if raw xattributes should be preserved, false otherwise
2246 Returns the path to mask file. @return Path to mask file or null if not available
2247 Generates the function mask path. @return Optional Path object representing the function mask or empty if not found
2248 Fetches path data iterator for the given directory. @return iterator of PathData objects or null if not found
2249 Configures FSDataOutputStreamBuilder with file context and path. @param fc FileContext object @param p Path to the file
2250 Validates and processes a file on the specified filesystem. @param verifyChecksum whether to check the file's checksum @param f file path
2251 Reads and parses FileStatusProto from input stream. @param in DataInput stream containing file status data
2252 Initializes LocatedFileStatus object with given parameters. @param length file length @param isdir true if directory
2253 Updates and indexes data with new key-value pair. @param key unique identifier @param val associated value
2254 Performs functional mask operation.
2255 Writes an integer to the buffer and triggers overflow handling when full. @param b the integer value to write
2256 Copies and masks specified bytes into a buffer. @param b input byte array @param off starting offset in the input array @param len number of bytes to process @return number of bytes successfully copied
2257 Recursively re-encodes input/output arrays with erasures. @param inputs array of ECChunks to encode @param erasedIndexes indexes of elements to erase in the encoding process @param outputs array of encoded ECChunks
2258 Forces or schedules completion of block appender. @param bForceFinish true to immediately finish, false to schedule for next attempt
2259 Reads and processes token storage header and data. @param in input stream containing token storage
2260 Retrieves a map of tokens and their corresponding information for cleanup. @return A map of TokenIdent to DelegationTokenInformation, or an empty map if failed
2261 Retrieves the length of a value from the input stream. @param rawValue Value bytes to process @return Length of the processed value
2262 Serializes token and secret key data to output stream. @throws IOException if serialization fails
2263 Wraps token in Proto wrapper. @param tok input token object @return wrapped TokenProto object
2264 Creates a new Entry instance with default properties.
2265 Calculates and returns a bitmask based on the provided RawComparable object. @param other RawComparable object containing relevant data
2266 Applies mask functions to key and value BytesWritable objects. @param key input key object @param value input value object
2267 Iterates and processes 'n' data blocks. @param n number of blocks to process
2268 Retrieves a delegationToken using provided parameters. @param url URL for authentication @param token AuthenticatedToken object @param renewer Renewer string (optional)
2269 Constructs an authenticated URL using a token and delegated token. @param url target URL @param token authentication token @param dToken delegated token identifier
2270 Convenience wrapper for fetching user profile with provided authentication tokens. @param url URL of the service @param token authenticated URL token @param dToken delegation token
2271 Wraps the given socket with an input wrapper. @param socket underlying socket to wrap
2272 Wraps Socket's output stream with a default buffer size of 0. @param socket network endpoint
2273 Overloaded variant of m1() with specified connect timeout. @param socket client socket to use @param address server endpoint to connect to @param timeout connection timeout in milliseconds (optional)
2274 Creates a metrics buffer by aggregating sources and filtering based on the source filter. @return MetricsBuffer object
2275 Calls overloaded m2 with default parameters. @param serviceName service identifier @param nameName name identifier @param theMbean MBean object to access
2276 Retrieves ReadWriteDiskValidatorMetrics instance for the specified directory. @param dirName unique directory name @return Metrics object or a new instance if not found
2277 Initializes RPC stats for the given number of priority levels. @param numLevels the number of priority levels to initialize
2278 Synchronizes and updates mask-specific statistics.
2279 Creates a new mutable rate with specified name. @param name name of the rate
2280 Constructs a new MutableRate instance with basic details. @param name rate name @param description rate description
2281 Inspects and extracts keytab entries from the provided file. @param keytabFile path to the keytab file
2282 Validates and prints JAAS configuration details if required. @param jaasRequired true to enable JAAS validation
2283 Resolves the user identifier to a string representation. @param id TokenIdent object containing user information
2284 Ensures existence of the working directory ZNode and its parents. @throws IOException if creation fails
2285 Fetches and returns the function mask from ZooKeeper. @throws ActiveNotFoundException if the function is not found @throws KeeperException if a ZooKeeper exception occurs @throws InterruptedException if interrupted while waiting for ZooKeeper response @throws IOException if an I/O error occurs
2286 Applies mask to input data (m1) with all bits set.
2287 Invokes m1 with default parameter value (false). @throws IOException if an I/O error occurs
2288 Updates InetSocketAddress with a default host if necessary. @param addr existing address object @return updated or original address object
2289 Detects and updates the IPC client address if it has changed. @return true if a change was detected, false otherwise
2290 Constructs or modifies a URI with a host and optional port. @param uri original URI @param defaultPort default port to use if missing in the input URI @return modified URI with a fully qualified host and port (if any)
2291 Fetches and processes RPC response with fallback to simple authentication. @param rpcKind the type of RPC request @param rpcRequest the RPC request object @param remoteId unique server identifier @param serviceClass the service class for the connection @param fallbackToSimpleAuth flag to enable simple authentication fallback @param alignmentContext the alignment context for the call @return the processed response or null if async
2292 Retrieves a cached entry and updates its state according to the function's result. @param newEntry the new entry to cache @return the updated cache entry or null if not found
2293 Updates cache entry for client ID with specified call ID. @param clientId unique client identifier @param callId call identifier
2294 Simplifies the call to m1() with default values. @param qOption flag to enable additional processing (default: false)
2295 Creates an instance of a named expression based on the provided configuration. @param expressionName name of the expression to instantiate @param conf Hadoop Configuration object @return Expression instance or null if instantiation fails
2296 Creates an instance of the specified Expression class. @param expressionClassname fully qualified name of the Expression class @param conf configuration object @return Expression object or null if creation fails
2297 Generates a mask string describing recognised expressions and operators. @param factory ExpressionFactory instance @return A formatted string containing information about primary expressions and operators
2298 Creates an instance of the specified expression class with masked parameters. @param expressionClass class of the expression to create
2299 Calls m2 with given command and result of m1. @param cmd command string
2300 Deserializes and instantiates an object from a DataInput stream. @param in input data @param objectWritable optional ObjectWritable to populate with the result @param conf configuration for deserialization (e.g. schema) @return instantiated object or null if not found
2301 Creates an instance of the given writable class with default parameters. @param c The class to instantiate
2302 Extracts and returns the mask value from the provided token. @param token input token containing the mask value @return TokenIdent representing the extracted mask value
2303 Prints tokens from Credentials to the specified PrintStream. @param creds Credentials object containing tokens @param alias Text alias for token kind @param out Output stream for formatted token data
2304 Instantiates and returns a DiskValidator instance based on the provided name. @param diskValidator name of the validator to instantiate @return DiskValidator object or throws exception if invalid name
2305 Initializes BlockLocation with default values.
2306 Calculates block locations for a given file status. @param file FileStatus object @param start starting offset @param len length of data @return array of BlockLocation objects or null if not applicable
2307 Calculates duration statistic summary for a given key and success flag. @param source IOStatistics object @param key unique identifier @param success true if successful, false otherwise
2308 Creates an IO statistics snapshot. @return IOStatisticsSnapshot object representing current IO usage.
2309 Creates an IOStatisticsSnapshot instance from provided statistics. @param statistics input IOStatistics object
2310 Creates an IOStatisticsSnapshot from the provided source. @param source input data (nullable) @return serialized snapshot or null if source is null
2311 Extracts elements from a RemoteIterator and returns them as a list. @param source iterator of elements to be extracted
2312 Conditionally calls either m1() or m2() based on the existence of the PathData item. @param item PathData object to evaluate
2313 Retrieves a set of user group masks by executing shell commands. @param user unique user identifier @return Set of String group names or EMPTY_GROUPS_SET if failed
2314 Executes shell commands with arguments and returns output as a string. @param args list of command-line arguments @return concatenated output or null on failure
2315 Extracts the function mask from a file. @param f File object containing symbolic link @return Function mask as string, or empty if failed
2316 Sets file system permissions for a given path. @param p the Path to set permissions on @param permission FsPermission values to apply
2317 Generates a mask for the given network group. @param netgroup unique network group identifier
2318 Copies all credentials from the given source object. @param credentials source credentials to copy from
2319 Applies mask to subject based on provided Credentials. @param credentials user authentication information
2320 Retrieves file mask from local file system. @return File object or throws exception on non-local path
2321 Applies a file system permission mask to the specified directory. @param dir target directory path @param expected desired permissions
2322 Retrieves file status for the given path. @param f the file path @param dereference whether to follow symbolic links @return FileStatus object or null if an error occurs
2323 Returns Path representing function mask directory. @param path input file system path @return Path to function mask directory or null if not created
2324 Deletes files marked for deletion on exit. @param none
2325 Checks if a file system path exists and is accessible. @param f the Path to check @return true if path exists, false otherwise
2326 Sets the working directory to the specified path. @param newWDir the desired working directory
2327 Recursively copies or moves a file to the specified destination. @param srcName source file name @param dst target directory path @param overwrite true to overwrite existing files, false otherwise
2328 Calculates content summary for a given file path. @param f the input file path @return ContentSummary object representing the file's size, blocks, and replicas
2329 Collects tokens from all file systems associated with the given path. @param p Path to collect tokens for @param renewer Token renewer identifier @return List of tokens collected from all file systems or null on failure
2330 Creates or updates extended attributes on a file. @param path the file to modify @param name the attribute name @param value the attribute value data
2331 Wraps call to overloaded m1 method with a null context.
2332 Initializes MultipartUploaderBuilderImpl with file context and path. @param fc FileContext instance @param p Path to the file
2333 Truncates wait list items to specified length. @throws IOException if an I/O error occurs
2334 Resolves the path to a mount point using regex patterns and returns the result. @param srcPath path to be resolved @return ResolveResult object or null if not found
2335 Executes allocator operation on specified path. @param pathStr path to operate on @param conf configuration for the operation @return true if successful, false otherwise
2336 Constructs a path relative to the archive root by resolving symbolic links. @param path input path to resolve @return resolved path or separator path if failed
2337 Returns a path to a CRC file based on the input file's name and extension. @param file input file path
2338 Returns true if mask is applied; otherwise fetches and applies the mask from file. @throws IOException if an I/O error occurs during mask fetching
2339 Creates a directory with specified permissions and parent handling. @param f the file path to create @param absolutePermission permissions for the directory @param createParent whether to create parent directories if missing
2340 Renames a file or directory. @param src source path @param dst destination path @param options optional rename options (e.g. OVERWRITE)
2341 Creates a path for a function mask by appending '.crc' to the file's directory and name. @param file input file path
2342 Checks if a file path matches a base path. @param p the file path to check @param basePath the base path to match @return true if the file path matches, false otherwise
2343 Checks if mask is empty (null).
2344 Constructs a Path object with the specified suffix appended to the parent directory. @param suffix file name suffix
2345 Resolves a function mask by combining the provided paths and URI. @param pathURI base URI @param pathWithLink link to be masked @param target target path for masking @return Path object with resolved function mask or original target if not applicable
2346 Renames a file or directory from one location to another. @param src source Path @param dst destination Path @param overwrite whether to allow overwriting an existing destination
2347 Constructs a FileStatus object with the given parameters. @param length file size in bytes @param isdir true if directory, false otherwise @param block_replication block replication factor @param blocksize block size in bytes @param modification_time last modified time @param access_time last accessed time @param permission file permissions @param owner file owner @param group file group @param path file path
2348 Copies a FileStatus object, preserving its attributes. @param other the original FileStatus to copy
2349 Converts FileStatus to LocatedFileStatus with BlockLocation array. @param locations array of block locations @throws RuntimeException on unexpected IOException
2350 Constructs a LocatedFileStatus object from given parameters. @param length file length @param isdir true if directory, false otherwise @param block_replication replication factor for blocks @param blocksize size of each block @param modification_time last modified time @param access_time last accessed time @param permission FsPermission object (optional) @param owner and group file ownership information @param symlink and path file location information @param locations array of BlockLocation objects
2351 Increments user counter and updates database. @param value Writable object to be persisted
2352 Masks a portion of the input byte array. @param b input byte array @param off starting offset @param len length to mask @throws IOException if an I/O error occurs
2353 Calls parent class's m2() and invokes child-specific logic in m1(). @throws Throwable if any exception occurs during execution.
2354 Performs function mask operation. Calls m1() method.
2355 Applies mask to functional units.
2356 Reads and returns user credentials from a file. @param filename path to the file containing credentials @param conf configuration object @return Credentials object or throws IOException if failed
2357 Searches for a key within a block. @param key RawComparable object to search for @param greater whether to search for keys greater than the given key @return true if key is found, false otherwise @throws IOException on input stream errors
2358 Triggers M3 function when sink condition is met. @param sinks current state of sink conditions
2359 Executes RPC rate calculations for a given protocol. @param protocol Class of the protocol to process
2360 Calls inner metrics method m1. @see innerMetrics
2361 Updates a mutable metric by adding a value. @param name unique metric identifier @param value new value to add to the metric
2362 Updates token owner statistics by incrementing count for the given token ID. @param id unique token identifier
2363 Updates token owner statistics based on given identifier. @param id TokenIdent object
2364 Fetches the current HAServiceTarget instance based on active node data. @return HAServiceTarget object or null if not found
2365 Initializes an ActiveStandbyElector instance with ZooKeeper configuration and callbacks. @param zookeeperHostPorts ZooKeeper host:port string @param zookeeperSessionTimeout session timeout in milliseconds @param parentZnodeName parent ZNode name for working directory @param acl ACL list for ZooKeeper access control @param authInfo authentication info for ZooKeeper connections @param app callback for ActiveStandbyElector events @param maxRetryNum maximum retry count for failed operations @param failFast whether to fail fast or re-establish session on failure @param truststoreKeystore Truststore and Keystore configuration
2366 Creates an InetSocketAddress instance with default port. @param target host or IP address @param defaultPort default network port number @param configName configuration name (not used in this method) @param useCacheIfPresent whether to use cache if present (not used in this method) @return InetSocketAddress object
2367 Returns an InetSocketAddress instance based on the server's M1 address. @param server server object containing M1 address information
2368 Wraps existing implementation to provide a simplified interface. @param rpcKind type of request @param rpcRequest request data @param remoteId ID of the remote connection @param fallbackToSimpleAuth flag for simple auth fallback
2369 Retrieves CacheEntry from the RetryCache instance. @param cache RetryCache instance to fetch from @param clientId unique client identifier @param callId specific call identifier @return CacheEntry object or null if not found
2370 Retrieves a CacheEntryWithPayload from the retry cache. @param cache RetryCache instance @param payload associated data @param clientId unique client identifier @param callId call identifier @return CacheEntryWithPayload or null if not found
2371 Creates an Expression instance using factory and cached value. @param expressionName name of the expression to create
2372 Returns a WritableComparator instance for the given class. If not found in cache, creates one and initializes it with configuration. @param c Class of the WritableComparable to compare @param conf Configuration object used for initialization
2373 Constructor for custom WritableComparator with specified key class. @param keyClass class of keys to be compared
2374 Initializes LocalDirAllocator with context configuration item name. @param contextCfgItemName unique identifier for local directory allocation
2375 Merges deprecated keys with new values from an overlay. @param deprecations context of deprecated keys and info @param props properties to update with merged values @param overlay overlay with new key-value pairs
2376 Copies another Configuration object into this one. @param other the configuration to copy from
2377 Masks system properties using configuration. @param conf Configuration object containing system property restrictions
2378 Retrieves alternative names for a given function name from deprecation context. @param name the function name to look up @return array of alternative names or null if not found
2379 Retrieves a mask array by name. @param name the name of the mask to fetch @return an array of mask values or null if not found
2380 Calls m1 to retrieve an object and then calls its m2 method. @return result of object's m2 method
2381 Invokes m2() on objects retrieved from m1() and m3().
2382 Iterates over properties, filtering and mapping string key-value pairs. @return Iterator of Map.Entry objects containing filtered data
2383 Compiles a regex pattern and maps matching strings to their replacement values. @param regex regular expression string @return Map of matched strings to replacement values
2384 Processes a list of file ranges and allocates buffers for checksums and data. @param ranges List of file ranges to process @param allocate Function to allocate buffers of specified type
2385 Retrieves BufferData by block number with retries and error handling. @param blockNumber the unique identifier of the block to fetch @return BufferData object or throws an exception on failure
2386 Polls wait list items, monitoring replication status and warning about potential long waits. @throws IOException if an I/O error occurs
2387 Retrieves block locations for a given path and length. @param p the file path @param start starting offset in bytes @param len requested number of blocks @return array of BlockLocation objects or throws IOException if an error occurs
2388 Retrieves duration statistic summary with mask enabled. @param source IO statistics object @param key statistic key
2389 Returns a default instance of Serializable. This is an overloaded method with no parameters and no user-provided data. @return A generic Serializable object
2390 Computes and returns a serializable mask from the given source object. @param source input data to process @return Serializable mask or null on failure
2391 Merges items from a remote iterator into an array. @param source RemoteIterator to fetch items from @param a Target array to merge into @return The merged array, or null if source is empty
2392 Renews a delegationToken using the provided token and renewer. @param token delegationToken to be renewed @param renewer identity of the entity requesting renewal @return timestamp for the new expiration date or -1 on failure
2393 Cancels a token by ID, validating authorization and token existence. @param token TokenIdent object to cancel @param canceller principal requesting cancellation @return cancelled TokenIdent object or null if not found
2394 Processes a linked list of PathData objects and calls m2() on each, catching any IOExceptions to be handled by m1().
2395 Retrieves functional masks for a given user name. @param userName unique user identifier @return list of functional mask strings or empty list if not found
2396 Retrieves the mask value of a file. @param fileName path to the file @return int value of the file's mask or throws IOException/FNF if not found
2397 Creates a symbolic link from the target file to the link file. @param target path to the target file @param linkname name of the symbolic link @return 0 on success, non-zero exit code on failure
2398 Executes shell command to change file permissions. @param filename target file path @param perm desired permissions @param recursive whether to apply recursively @return exit status code of the command execution
2399 Checks if setsid command is available and supported. @return true if setsid is available, false otherwise
2400 Executes a command to mask the specified file with the given username and/or group name. @param file File object to be masked @param username user identifier (optional) @param groupname group identifier (optional)
2401 Extracts a list of usernames from the raw output of m1(netgroup). @param netgroup network group identifier @return List<String> of usernames, or empty if none found
2402 Returns a Credentials object with filtered tokens.
2403 Retrieves file statuses for a given path and optional filter. @param f the path to query @param filter optional filter to apply (null for all files) @return array of FileStatus objects or null if an error occurs
2404 Retrieves status of multiple files by applying a filter. @param files array of file paths @param filter filter to apply on each file @return array of FileStatus objects or null if an error occurs
2405 Resolves a path to an object of type T. @param p the path to resolve @param resolveLastComponent whether to resolve last component as external directory @return ResolveResult object or null if not found
2406 Recursively updates file metadata with specified replication factor. @param src the source file path @param replication the new replication value to apply
2407 Recursively checks file existence and updates metadata. @param f Path to the file @param recursive whether to check subdirectories
2408 Copies file from src to dst, handling intermediate directories. @param src source path @param dst destination path @return true if copy successful, false otherwise
2409 Recursively processes a file path. @param f the file path to process @param recursive whether to recursively traverse subdirectories @return true if processing is successful, false otherwise
2410 Checks if a path in the source data tree matches a target path. @param source PathData object containing source paths @param target PathData object containing target path to match @return true if the source path matches the target, false otherwise
2411 Returns a modified Path object based on the provided input. @param path original Path object to be transformed
2412 Masks a file path based on its contents and the given URI. @param p Path object to process @return modified string representation of the path or an empty string if it matches a specific pattern
2413 Extracts and formats the functional mask from a given Path. @param p input Path object @return formatted String or empty string if matching a specific pattern
2414 Resolves a file system path to its target object. @param fc FileContext instance @param path Path to resolve @return Target object of the path or null if not found
2415 Renames a file by updating the source and destination paths. @param src original file path @param dst new file path @param options optional rename options (e.g. OVERWRITE)
2416 Computes FileStatus for masked file. @param h HarStatus object containing file metadata @return FileStatus object or throws IOException if error occurs
2417 Creates a FileStatus object from an FTPFile. @param ftpFile FTP file object @param parentPath path to the file's parent directory @return FileStatus object or null if not found
2418 Checks token file integrity using M3 validation. @param tokenFile File containing authentication data @param conf Configuration object for validation @return True if validation passes, False otherwise
2419 Processes a file with credentials and writes output to a stream. @param tokenFile input file containing credentials @param alias Text object for aliasing output @param conf Configuration settings for processing @param out PrintStream destination for output results
2420 Updates token information for the given identifier. @param ident TokenIdent object
2421 Initializes MetricsSystem instance with the given prefix. @param prefix unique identifier for MBean registration
2422 Executes a method on the server, handling exceptions and metrics. @param server RPC server instance @param connectionProtocolName protocol name for logging @param request RPC request message @param methodName method to invoke @param protocolImpl protocol implementation instance @return result of the invoked method or null if cancelled
2423 Registers event with given name and elapsed time. @param name unique event identifier @param elapsed time elapsed since event occurrence in milliseconds
2424 Adds a persisted delegation token with specified renew date. @param identifier TokenIdent object @param renewDate long value representing the renewal date
2425 Updates token owner stats and processes tokens.
2426 Removes and logs expired tokens, updating the database. @throws IOException on database access errors
2427 Initializes ActiveStandbyElector instance with ZooKeeper connection details. @param zookeeperHostPorts host and port of ZooKeeper ensemble @param zookeeperSessionTimeout timeout for ZooKeeper session
2428 Processes application data and initiates active election. @param data byte array containing application data
2429 Returns an InetSocketAddress instance with the given target and default port. @param target IP address or hostname @param defaultPort default TCP port number
2430 Handles RPC calls by converting the message into a buffer and sending it to the client. @param proxy unused parameter @param method RPC method being called @param args array containing the message to be sent (args[1]) @return Message object or null if asynchronous call is used
2431 Invokes a remote RPC method with the given arguments. @param proxy RPC client proxy @param method RPC method to invoke @param args RPC parameters (must be 2) @return invoked message or null on async call
2432 Parses an expression from a deque of tokens. @param args deque of input tokens @return parsed Expression object or null if invalid
2433 Returns a comparator instance for the given WritableComparable class. @param c Class of the WritableComparable to create a comparator for
2434 Authenticates using delegated token if provided; otherwise, falls back to handler. @param request HTTP servlet request
2435 Returns an array of names possibly transformed by deprecation rules. @param deprecations DeprecationContext object @param name Original name to transform @return Array of transformed names or overlayed values if applicable
2436 Replaces '.' with '_' in key names and updates environment map.
2437 Customizes and returns a TokenIdent using the m2 and m3 methods. @param token input token with TokenIdent @param canceller string parameter for customization @return customized TokenIdent or throws IOException if error occurs
2438 Fetches and caches group affiliations for a given user. @param user unique user identifier @return list of group names or empty list if not found
2439 Creates a directory and extracts tar file contents. @param inFile input file to extract @param untarDir target directory for extraction
2440 Invokes core operation with default flag value. @param filename input file name @param perm permission string @return result code (int)
2441 Sets file permissions on Windows. @param f the file to modify @param readable whether to grant or revoke read permission @return true if successful, false otherwise
2442 Sets file permissions on Windows. @param f target file @param writable whether to grant or revoke write permission @return true if successful, false otherwise
2443 Sets file execute bit based on platform. @param f the file to modify @param executable whether to add or remove execute permission @return true if successful, false otherwise
2444 Executes native functions based on system conditions. @throws IOException if native call fails
2445 Invokes M2 operation on file system data and passes results to FileUtil. @param p Path object @param username user identifier @param groupname group name
2446 Applies file permissions to the specified file. @param f File object @param permission FsPermission object containing user, group and other actions
2447 Updates net group cache based on provided groups. @param groups list of group identifiers
2448 Logs user group information and associated tokens. @param ugi UserGroupInformation object containing tokens
2449 Logs user group information with token details. @param log logging instance @param caption descriptive text @param ugi user and group information to be logged
2450 Validates file system permissions for a directory. @param localFS Local file system instance @param dir Directory path to validate @param expected Expected permission value
2451 Validates file system permissions and disk integrity. @param localFS Local file system instance @param dir directory path to check @param expected expected permissions
2452 Returns status of multiple files. @param files array of file paths
2453 Resolves and delegates to target file system's used space calculation. @throws IOException if an I/O error occurs
2454 Retrieves block locations for a file. @param file FileStatus object @param start starting offset (in bytes) @param len length of the range to fetch (in bytes) @return array of BlockLocation objects or null if not found
2455 Opens a file stream for reading from the archive. @param f path to the file @param bufferSize buffer size for I/O operations @return FSDataInputStream object or throws IOException if not found
2456 Creates a buffered input stream for file contents. @param f the path to the file @param bufferSize the size of the buffer @return an FSDataInputStream object or null if fails
2457 Opens an input stream to the specified file with optional checksum verification. @param f Path to the file @param bufferSize Buffer size for reading from the file
2458 Updates file mask for source and target paths. @param src source path @param dst target path
2459 Renames a file from src to dst across possibly different filesystems. @param src source path @param dst destination path @param options rename options @throws various exceptions on failure or unsupported operation
2460 Recursively fetches file status metadata for child files under a given directory. @param parent Directory parent object @param statuses List to store FileStatus objects
2461 Calculates file status based on path. @param f file path to query @return FileStatus object or null if error occurs
2462 Retrieves FileStatus for the given Path. @param file Path to fetch status for @return FileStatus object or null if not found
2463 Retrieves FileStatus for the given local file, using FTP metadata. @param client FTPClient instance @param file Path to the local file @return FileStatus object or throws FileNotFoundException if not found
2464 Initializes MetricsSystem instance with default configuration.
2465 Initializes rolling averages with the specified metric value name. @param metricValueName unique identifier for the rolling average
2466 Schedules a task to roll rates based on the specified window and interval. @param windows number of windows @param interval time interval between rate rolls @param timeUnit unit of time for the interval (e.g. seconds, minutes)
2467 Handles node's election participation based on its health state. @param lastHealthState current service health state
2468 Initiates mask functionality with sleep after failure to become active. @param SLEEP_AFTER_FAILURE_TO_BECOME_ACTIVE sleep duration in milliseconds
2469 Handles ZooKeeper watched events. @param zk ZooKeeper connection @param event WatchedEvent object containing type and state information
2470 Creates an InetSocketAddress with default port.
2471 Handles delegated authentication by checking the authorization header. @param request HttpServletRequest object @param response HttpServletResponse object @return AuthenticationToken or null on error
2472 Checks if name matches a func mask pattern. @param name input string to check
2473 Resolves and formats the input name using M2 and M3/M4 methods. @param name user-provided name to be processed
2474 Sets or updates a property with deprecation handling. @param name property name @param value property value @param source optional source of the change (e.g. "user" or null for programmatically)
2475 Updates mask data for a given user name. @param name unique user identifier
2476 Calculates and returns the function mask value. @return Function mask value in bytes.
2477 Calculates and returns the function mask value. @return 64-bit unsigned integer representing the function mask.
2478 Returns the functional mask value based on available memory. @return functional mask as a 64-bit integer value.
2479 Returns system memory mask based on available memory. @return unique identifier reflecting current memory availability
2480 Returns the number of processors available to this JVM instance. @return The number of processors as an integer.
2481 Returns a function mask value based on CPU frequency. @return Function mask as a long integer value
2482 Returns function execution mask in milliseconds. @return Cumulative CPU time in milliseconds since last reset
2483 Calculates CPU usage as a percentage of total processors. @return normalized CPU usage or -1.0f if unavailable
2484 Calculates CPU usage as a percentage. @return CPU usage value or -1.0 if unavailable
2485 Returns a mask value based on network bytes read. @return unique identifier as a long integer
2486 Returns the function mask value based on network bytes written.
2487 Executes mask operation on network groups.
2488 Updates file system status for a given mount point. @param viewFileSystem View of the file system @param mountPointMap Map of mount points to their statuses @param mountPoint Mount point to update @param path File system path to query
2489 Retrieves file status array for the given path. @param f Path to query @return Array of FileStatus objects or null if not found
2490 Resolves file status with optional dereferencing. @param f path to the file @param dereference whether to follow symbolic links
2491 Resolves file status for a given path in the view FS. @param f input file path @return FileStatus object or null if not found
2492 Retrieves file statuses for a given path. @param f the input path @return array of FileStatus objects or null if not found
2493 Checks if a file exists on the SFTP server. @param channel SFTP connection @param file local file path @return true if file found, false otherwise
2494 Retrieves SFTP file status for a given file. @param channel SFTP channel @param sftpFile SFTP file entry @param parentPath Parent path of the file @return FileStatus object containing file metadata or null if not found
2495 Checks if a SFTP channel has read access to a specified file. @param channel SFTP channel object @param file local file path @return true if access is granted, false otherwise
2496 Checks if FTP client has write access to a file. @param client FTP client object @param file Path to the file @return True if accessible, False otherwise
2497 Retrieves the status of one or more files on an FTP server. @param client FTPClient instance @param file Path to the file(s) being queried @return Array of FileStatus objects representing the file(s)
2498 Checks if a local file exists on the remote server. @param client connected FTPClient instance @param file Path to the local file @return true if file is found, false otherwise
2499 Initializes CBZip2InputStream with input stream and read mode. @param in input stream to decompress @param readMode compression mode (see READ_MODE constants)
2500 Extracts and returns the CRC32 mask from a CBZip2 archive. @param in input stream to the archive
2501 Handles create node result from Zookeeper. @param rc create result code @param path path to create node @param ctx context object @param name name of operation
2502 Handles StatNode result, performs actions based on the code and state. @param rc result code @param path file system path @param ctx context object @param stat StatNode object
2503 Returns an InetSocketAddress with default port (-1). @param target hostname or IP address
2504 Parses specification string into a list of InetSocketAddress objects. @param specs comma-separated host:port strings or null to use localhost:defaultPort @param defaultPort default port number to use if not specified in specs @return List of InetSocketAddress objects or empty list if specs is null
2505 Constructs a function mask from the given URI and default port. @param uri input URI @param defPort default port number @return function mask string or null if invalid URI
2506 Generates a configuration document with masked values. @param propertyName property name to mask (null for all) @param redactor config redactor instance @return Document object containing the generated configuration
2507 Evaluates a string expression by substituting variables with their values. @param expr input string expression @return the evaluated string or null if failed
2508 Updates reconfiguration based on provided parameters. @param out PrintWriter for output @param reconf Reconfigurable object @param req HttpServletRequest containing parameter values
2509 Calls overloaded variant with optional callback. @param name key string @param value associated value string @param callback (optional) callback function reference
2510 Sets user preference with logging and parent class notification. @param name preference name @param value new value for the preference @param source optional source of the change (e.g. user or system)
2511 Verifies directory permissions and grants them if requested. @param dir File object to verify @param tryGrantPermissions whether to attempt permission grant @return true if valid directory, false otherwise
2512 Calculates and returns the functional mask value. @return The computed functional mask integer value.
2513 Retrieves file system status for each mount point that the given path leads to. @param fileSystem ViewFileSystem instance @param path URI path to check @return Map of MountPoints to FsStatus objects or throws exception if not found
2514 Resolves file status for the given path. @param f input path to resolve @return FileStatus object or null if not found
2515 Renames a file on SFTP server. @param channel active SFTP channel @param src source file path @param dst destination file path @return true if rename was successful, false otherwise
2516 Retrieves SFTP directory contents and converts to FileStatus array. @param client ChannelSftp object for SFTP connection @return FileStatus[] of files in the directory, or null if empty
2517 Creates or updates directory for file upload. @param client SFTP client @param file Path to file being uploaded @param permission File system permissions @return true if directory creation was successful, false otherwise
2518 Returns an array of file statuses matching the given pattern. @param pathPattern globbing pattern to match files against
2519 Retrieves file statuses matching a glob pattern and filter. @param pathPattern glob pattern to match @param filter optional filter for results @return array of FileStatus objects or null if empty
2520 Returns an array of file statuses matching the specified glob pattern. @param pathPattern glob pattern to match files against
2521 Returns an array of file status objects matching the given pattern and filter. @param pathPattern globbed path pattern to match @param filter filtering criteria for matched files
2522 Renames a file on an FTP server. @param client active FTPClient session @param src source file path @param dst destination file path @return true if the rename was successful, false otherwise
2523 Recursively deletes a file or directory on an FTP server. @param client FTPClient instance @param file Path to the file/directory to delete @param recursive true for recursive deletion, false otherwise
2524 Creates directory recursively on FTP server. @param client FTPClient instance @param file Path to create directory at @param permission FsPermission object for directory permissions @return true if directory creation was successful, false otherwise
2525 Validates and extracts mask from IP:port string. @param ipPort input string in format "IP:port" @return formatted mask string or original input if invalid
2526 Generates an InetSocketAddress based on token data. @param token input Token object
2527 Resolves URI to Text representation using NetUtils. @param uri input URI object
2528 Calculates function mask based on internal conditions. @return Function mask string or null if not applicable.
2529 Generates a function mask by combining results from m1 and m2 functions.
2530 Applies the mask function to the given expression. @param expr input string to be masked
2531 Retrieves and processes user data based on the provided name. @param name User identifier
2532 Retrieves a value from the deprecation context or returns the default value. @param name unique identifier @param defaultValue fallback value to return if not found @return retrieved value or default value
2533 Performs a series of operations based on the provided key and value. Validates keys against mandatory and optional sets, then processes with options. @param key unique identifier for operation @param value associated data for processing
2534 Validates and processes key-value pair. @param key unique identifier for the key @param value associated value for the key
2535 Sets the default file system name from the given URI. @param conf configuration object @param uri URI containing the file system information
2536 Configures Hadoop job with viewfs link and source data. @param conf Hadoop configuration @param mountTableName table name for mounting viewfs @param src source URI @param target target URI
2537 Configures M3 with a viewfs link merge path. @param conf Configuration object @param mountTableName table name to be mounted @param target URI to be merged
2538 Configures viewfs link fallback for given mount table name. @param conf Hadoop configuration @param mountTableName unique mount table identifier @param target URI object
2539 Configures viewfs link merge for the given table and target URIs. @param conf Configuration object @param mountTableName name of the mounted table @param targets array of URI targets
2540 Configures viewfs link with specified settings and target directories. @param conf Configuration object @param mountTableName table name for mounting @param src source directory path @param settings configuration settings string @param targets target directory paths
2541 Configures the function mask for a given mount table. @param conf Configuration object @param mountTableName unique mount table identifier @param srcRegex source regex pattern @param targetStr target string value @param interceptorSettings optional interceptor settings
2542 Configures the viewfs home directory for a mount table. @param conf Configuration object @param mountTableName name of the mount table @param homedir path to the viewfs home directory
2543 Sets M3 configuration value from underlying file system permission mask. @param conf Configuration object @param umask FS permission mask to convert
2544 Configures compression codecs for Hadoop IO. @param conf Hadoop Configuration object @param classes List of Class objects (codec implementations)
2545 Sets compression type in configuration. @param job Configuration object @param val Compression type value
2546 Initializes configuration with filter-specific properties. @param filterConfig FilterConfig object @return Configuration instance
2547 Parses command line arguments and executes corresponding actions. @param args array of command line arguments @return 0 on success, non-zero on failure
2548 Sets a mask value with the given name and integer value. @param name unique identifier for the mask @param value integer value to be assigned to the mask
2549 Sets the mask value for the specified field. @param name field identifier @param value numeric value to be masked
2550 Applies a mask to the given float value and updates it in the model. @param name unique identifier for the masked value @param value float value to be masked
2551 Applies a mask to the specified value and updates the internal state. @param name unique identifier for the masked value @param value numerical value to be masked
2552 Masks a field with a specified boolean value. @param name field name @param value true to mask, false otherwise
2553 Adds a time duration mask with specified name and value in given unit. @param name name of the mask @param value time duration value to add @param unit TimeUnit for the added duration (e.g. SECONDS, MILLISECONDS)
2554 Calculates and stores a masked value in storage. @param name identifier for stored value @param value numerical value to be processed @param unit associated measurement unit
2555 Applies mask to string using regular expression. @param name input string @param pattern compiled regex pattern
2556 Applies mask to input string. @param name input string to be masked @param values variable number of strings to apply as a mask
2557 Masks an IP address with a given name. @param name host name to mask @param addr IP address to mask
2558 Configures mask for a given class. @param name unique identifier @param theClass Class to configure @param xface interface to verify against
2559 Recursively checks if a directory is empty. @param dir directory to check @return true if the directory is empty, false otherwise
2560 Tries to delete all contents of a directory and its subdirectories. @param dir the directory to delete @param tryGrantPermissions whether to attempt to grant permissions before deleting @return true if all deletions were successful, false otherwise
2561 Retrieves file status for a given path. @param f the input path
2562 Computes and returns the file status for a given path. @param f path to compute file status for
2563 Deletes an SFTP file or directory. @param channel SFTP connection @param file Path to delete @param recursive whether to delete recursively
2564 Creates a compressed input stream for seeking and decompression. @param seekableIn input stream to compress @param decompressor decompressor instance @param start compression start position @param end compression end position @param readMode read mode @return BZip2CompressionInputStream object
2565 Processes and sets metric fields on the source object. @param source Object to process @param field Field containing metric annotations
2566 Retrieves function mask value from configuration. @param conf Configuration object @param t Storage type enumeration value @param name Function name string
2567 Resolves FTP transfer mode from configuration. @param conf Configuration object @return int representing transfer mode (e.g. BLOCK, STREAM, COMPRESSED)
2568 Configures FTP client data connection mode based on configuration. @param client FTPClient instance @param conf Configuration object with data connection mode setting
2569 Builds function mask by concatenating mount table name and configuration constant. @param conf Mule configuration object @param mountTableName name of the mount table
2570 Resolves user permissions from configuration, or uses default umask if not specified. @param conf Configuration object to parse umask from @return FsPermission object representing the resolved umask
2571 Retrieves configurable CompressionCodecs and merges with provider codecs. @param conf Hadoop configuration object @return List of available CompressionCodec classes
2572 Returns the compression type based on the provided configuration. @param job Configuration object containing compression type @return CompressionType enum value or RECORD if not specified
2573 Generates a formatted string for the given property, incorporating its value and configuration setting if applicable. @param property the property to process @return a string representation of the property's value and configuration
2574 Resolves Hadoop token file locations and processes tokens. @param conf Hadoop configuration object
2575 Initializes and loads key store with password. @throws IOException on keystore creation or loading errors
2576 Retrieves the DNS configuration mask from the given Configuration object. @param conf Configuration object (may be null) @return String representing the DNS configuration or an empty string if not found
2577 Retrieves the user associated with a given protocol and configuration. @param protocol Class of the protocol to fetch user from @param conf Configuration object used for fetching user @return The fetched user ID or null if not found
2578 Returns a string representation of the function mask, or null if not found. @param name input parameter for m1() method
2579 Updates or inserts a key-value pair in the underlying data structure. @param name unique identifier for the key @param value associated value for the key
2580 Converts and returns a duration value from string representation. @param name input string to parse @param defaultValue default value if parsing fails @param defaultUnit unit of default value @param returnUnit unit to return the result in @return parsed duration value or default value
2581 Calculates a double value based on the given name, default value, and target unit. @param name unique identifier @param defaultValue fallback value if calculation is invalid @param targetUnit desired storage unit for result @return calculated double value or default value if failed
2582 Converts value from string representation to the specified unit. @param name string representation of the value @param defaultValue default value if conversion fails @param targetUnit desired storage unit for result @return converted double value or defaultValue if invalid input
2583 Returns a pattern object from the given string, using the default if invalid or null. @param name unique identifier @param defaultValue fallback pattern to use if input is invalid
2584 Extracts and returns collection of strings from input using m1 and m2 methods. @param name input string to process
2585 Calls M1 to process input string and then passes result to M2.
2586 Returns default values or parsed string representations from a backing system. @param name unique identifier @param defaultValue array of fallback values to use when parsing fails @return String[] containing either the parsed value(s) or the default values
2587 Retrieves a collection of strings from the underlying data source. @param name unique identifier for lookup @return non-empty collection if found, otherwise an empty collection
2588 Calls m1 to retrieve string representation and then passes it to m2 from StringUtils. @param name input string
2589 Returns array of strings from default values or parsed string. @param name input name for parsing @param defaultValue default values to return if parsing fails @return Array of strings, either parsed result or default values
2590 Retrieves configuration map from properties based on prefix. @param confPrefix prefix to filter properties
2591 Adds a configuration parameter to the JSON output. @param name parameter name @param redactor ConfigRedactor instance for data processing
2592 Updates a configuration property with a new value. @param property unique property identifier @param newVal new value for the property (may be null) @throws ReconfigurationException if update fails or is not allowed
2593 Calls superclass's m1 and logs a message with redacted value. @param name input string to pass to superclass @return result from superclass's m1 method
2594 Retrieves the default mount table name from configuration. @param conf configuration object
2595 Determines if native Bzip2 library is loaded and ready for use. @param conf Configuration object containing library settings @return true if native library loaded, false otherwise
2596 Creates a SocketFactory instance based on configuration settings. @param conf Hadoop Configuration object
2597 Extracts and returns the user ID from configuration. @param conf Configuration object
2598 Sets an option to its unset value. @param option name of the option
2599 Initializes TruststoreKeystore object from Hadoop configuration. @param conf Hadoop Configuration object
2600 Performs Kerberos ticket management. @param force whether to refresh the ticket regardless of conditions
2601 Initializes KeyProvider with Hadoop configuration. @param conf Hadoop Configuration object
2602 Retrieves a list of ACLs from ZooKeeper configuration. @param conf Hadoop configuration object @return List of ACLs or empty list if not found
2603 Computes a function mask based on configuration. @param conf Configuration object
2604 Retrieves an EnumSet from configuration data. @param key configuration key @param enumClass Enum class to retrieve values for @param ignoreUnknown whether to ignore unknown values @return EnumSet of values or null if not found
2605 Creates IntegerRange instance based on input string. @param name input string @param defaultValue default value to use if parsing fails @return IntegerRange object or null if parsing failed
2606 Overridden method to fetch a string value with logging. @param name the name of the field @param defaultValue default value if not found @return the fetched string value or default value
2607 Wraps a single boolean value in a boxed primitive. @param key unique identifier for the value @param value single boolean value to box
2608 Applies bitwise mask operation to the given double value. @param key unique identifier for the mask operation @param value double value to be masked @return result of the mask operation (type B not specified)
2609 Wraps primitive boolean value in a boxed type.
2610 Computes and returns a function mask based on input key and value. @param key unique identifier for the function @param value numerical value to be processed
2611 Invokes M3 processing on the given URI after applying intermediate transformations. @param conf configuration object @param uri input URI to process
2612 Invokes M2 with provided configuration and targets. @param conf Hadoop Configuration @param mountTableName name of mounted table @param src source data path @param settings optional settings string (defaults to "minReplication=2,repairOnRead=true") @param targets URI array for target tables
2613 Updates index interval configuration value. @param conf Configuration object @param interval new index interval value
2614 Sets IPC ping interval in configuration. @param conf Hadoop Configuration object @param pingInterval interval value (in ms)
2615 Sets IPC client connect timeout in configuration. @param conf Configuration object to update @param timeout new timeout value (in milliseconds)
2616 Sets nested mount point support configuration. @param conf Hadoop configuration object @param isNestedMountPointSupported true to enable or false to disable support
2617 Applies mask configuration based on provided key and values. @param key unique identifier for the configuration @param values additional values required by the configuration
2618 Validates and processes input key and values. @param key unique identifier @param values variable number of related values
2619 Creates an InetSocketAddress based on the provided name and address. @param name network interface name @param addr initial address to modify @return modified address or null if creation fails
2620 Configures RPC engine for given protocol. @param conf configuration object @param protocol the protocol to configure @param engine the engine class to use
2621 Verifies and processes a directory path. @param p directory Path to verify @param recursive whether to perform recursive operations @return true if successful, false otherwise
2622 Wraps call to m1 with default recursive parameter. @param dir directory object @return true if directory is empty or null, false otherwise
2623 Resolves file status for the given path. @param f Path to resolve @return FileStatus object or throws exception if access fails
2624 Fetches file statuses for the given path. @param f Path to fetch statuses for @return Array of FileStatus objects or null if not found
2625 Creates a new FSDataOutputStream instance with default permissions. @param f file path @param overwrite whether to overwrite existing files @param bufferSize buffer size for I/O operations @param replication data block replication factor @param blockSize block size in bytes @param progress progress monitor for long-running operations
2626 Returns file system permissions based on umask or default configuration. @return FsPermission object representing file system permissions
2627 Creates a BlockFactory instance based on the specified type. @param keyToBufferDir directory path for buffered data @param configuration application configuration @param name factory type (e.g. DATA_BLOCKS_BUFFER_ARRAY)
2628 Initializes compression codecs factory with user-specified or default codecs. @param conf Configuration object containing codec settings
2629 Returns user profile data or default value if not found. @param name unique user identifier @param defaultValue default value to return if profile is missing @return UserProfile object or default value as String
2630 Converts string to integer using custom functions m1 and m2. @param name input string @param defaultValue default value to return if conversion fails @return integer representation of the string or defaultValue if failed
2631 Converts string to long value using hexadecimal or decimal conversion. @param name string identifier @param defaultValue default long value to return when conversion fails @return long value or defaultValue if conversion fails
2632 Converts string to binary prefix value and returns it as a long. @param name input string @param defaultValue default value if conversion fails @return binary prefix value or default value if not found
2633 Retrieves and converts a float value from the system using the given name. @param name identifier for retrieving the float value @param defaultValue default value to return if retrieval fails @return retrieved float value or defaultValue if not available
2634 Retrieves and parses a numeric mask value from configuration. @param name unique identifier for the mask @return numeric value or default value if not found
2635 Returns the boolean value of a string parameter or a default value. @param name unique identifier @param defaultValue default boolean value to return on failure
2636 Retrieves a class by name or returns the default class. @param name Class name to search for @param defaultValue Default class to return if not found @return Retrieved class object or default class
2637 Sets a mask value based on provided name and boolean value. @param name unique identifier for the mask @param value true/false state of the mask
2638 Returns the value of the specified resource with default value and time unit. @param name resource name @param defaultValue default value to use if not found @param unit time unit for returned value
2639 Builds a map of SASL properties from configuration. @param conf Hadoop Configuration object @param configKey key to fetch QOP values for @param defaultQOP default QualityOfProtection value @return Map of SASL properties or empty if not found
2640 Converts string array to integer array using m1 and m2 functions. @param name input string @return int array representation of input or null if invalid
2641 Resolves function mask by name, returning default values if not found. @param name unique identifier for the function mask @param defaultValue array of Class<?> objects to use as fallback @return array of Class<?> objects or defaultValue if not resolved
2642 Searches for a valid local directory based on the given properties and path. @param dirsProp unique directory identifier @param path file or directory path to search for @return File object of the first matching directory or null if not found @throws IOException if no valid directories are found in the property
2643 Initializes SerializationFactory with configured serializations. @param conf Configuration object containing serialization settings
2644 Retrieves configuration properties from Hadoop Configuration object. @param conf Hadoop Configuration instance @param confPrefix prefix to filter properties in the config @return Map of string key-value pairs or null if empty
2645 Retrieves configuration settings as a map from M1 source. @param conf Configuration object @param confPrefix prefix to filter settings @return Map of key-value pairs or empty if not found
2646 Adds properties from the configuration with a specified prefix to the FSBuilder. @param builder FSBuilder instance @param conf Configuration object @param prefix Property prefix (including dot if not empty) @param mandatory whether properties are required or optional
2647 Generates an HTML form to display and apply configuration changes. @param out PrintWriter for output @param reconf Reconfigurable object containing current and new configurations
2648 Calls m2 with intermediate results from m1. @param conf configuration object @param src source string @param target target URI
2649 Invokes M2 operation with configuration and target URI. @param conf Hadoop Configuration object @param target Target URI to process
2650 Invokes M2 with results of M1 and current configuration. @param conf Hadoop Configuration object @param target target URI
2651 Invokes another instance of M2 with results from M1 and specified targets. @param conf Configuration object @param targets array of target URIs
2652 Recursively calls itself with user-specific configuration and home directory. @param conf Configuration object @param homedir User's home directory path
2653 Recursively fetches configuration and executes function m1 to generate result. @param conf Configuration object
2654 Creates an M6 ErasureEncoder instance based on the provided configuration and options. @param conf Configuration object @param options ErasureCodecOptions object
2655 Creates an ErasureDecoder instance based on the provided configuration and options. @param conf Configuration object @param options ErasureCodecOptions object @return ErasureDecoder instance or null if creation fails
2656 Returns compressor class based on configuration. @param conf Hadoop Configuration object
2657 Returns decompressor class based on configuration. @param conf Hadoop Configuration object
2658 Determines the decompressor to use based on configuration. @param conf Configuration object
2659 Retrieves a SocketFactory instance based on configuration and class type. @param conf Hadoop Configuration object @param clazz Class to determine factory implementation for @return SocketFactory instance or null if not found
2660 Constructs a Hadoop Zookeeper factory with Kerberos authentication. @param zkPrincipal Zookeeper principal @param kerberosPrincipal Kerberos principal @param kerberosKeytab Kerberos keytab file path
2661 Initializes SSL/TLS context and socket factory. @throws GeneralSecurityException on security errors @throws IOException on I/O errors
2662 Determines if function masking is enabled based on configuration. @param conf Configuration object
2663 Configures security masks based on authentication type. @param conf Hadoop Configuration object
2664 Finds and returns a valid CryptoCodec instance based on the given configuration and cipher suite. @param conf Configuration object @param cipherSuite CipherSuite object @return CryptoCodec instance or null if not found
2665 Resolves hash based on configuration. @param conf application configuration
2666 Retrieves a flag set from configuration based on the given enum class. @param enumClass Class of enumeration to fetch flags for @param conf Configuration object @param key Key to retrieve flags under @param ignoreUnknown Whether to ignore unknown flags @return FlagSet containing fetched flags or null if not found
2667 Generates and writes XML mask for a property. @param propertyName name of the property to mask @param out output writer @param config configuration object
2668 Masks sensitive configuration properties and writes the result to a JSON stream. @param config Configuration object with sensitive properties @param out Writer to output the masked JSON data
2669 Applies mask function to input string with specified integer value. @param key input string subject to masking @param value integer value used in masking operation
2670 Maps float value to its equivalent long representation and passes both to underlying function. @param key unique identifier for mapping operation @param value float value to be converted and mapped
2671 Calculates a mask by applying value to the specified key. @param key unique identifier for the calculation @param value numeric value used in the calculation
2672 Maps string key to integer value using m1 function. @param key unique identifier as a string @param value integer value to be mapped @return integer result of mapping or null if failed
2673 Creates a MetricsSource instance from the provided object. @param source Object to create MetricsSource from
2674 Creates an FSDataOutputStream with specified parameters. @param f file to write @param overwrite whether to overwrite existing file @param bufferSize buffer size for I/O operations @param replication HDFS block replication count @param blockSize HDFS block size in bytes
2675 Creates or overwrites a file at the specified path with the given permissions and options. @param f file path @param createFlag file creation flags @param opts additional file creation options @return FSDataOutputStream for writing to the file
2676 Creates a new directory with specified permissions and creates parent if necessary. @param dir directory path @param permission file system permissions @param createParent whether to create parent directories if needed
2677 Compresses or decompresses data using specified codecs. @param args command line arguments: -in to encode, -out to decode
2678 Resolves FUNC_MASK from principal configuration and hostname. @param principalConfig principal configuration string @param hostname host name to resolve against @return resolved FUNC_MASK string or original principal config if invalid
2679 Replaces hostname in principal config with client IP. @param principalConfig configuration string @param addr client's network address @return modified principal config or original if invalid
2680 Initializes server with RPC configuration. @param rpcKind Rpc kind (e.g. TCP, UDP) @param protocolClass Protocol class for data serialization @param protocolImpl Implementation of the protocol @return This server object for method chaining
2681 Creates a KeyProvider instance using configuration and key name. @param conf Configuration object @param configKeyName Name of the configuration key @return KeyProvider instance or null if not found
2682 Creates a URI for the function mask based on the provided configuration. @param conf Configuration object
2683 Initializes Kerberos environment by executing kinit command. @param none @return none
2684 Creates an InetSocketAddress from the given name and default values. @param name hostname or service name @param defaultAddress default IP address (used if name is empty) @param defaultPort default port number @return InetSocketAddress object representing the resolved address and port
2685 Resolves and constructs an InetSocketAddress based on provided properties. @param hostProperty property for host value @param addressProperty property for address value @param defaultAddressValue default address to use if property is null @param addr existing InetSocketAddress to reuse @return constructed InetSocketAddress or null if invalid properties
2686 Resolves file system link to FSDataInputStream. @return FSDataInputStream object or null if not found
2687 Opens file for reading and returns a stream. @return FSDataInputStream object or null if failed
2688 Configures SFTP connection settings from URI and Configuration. @param uriInfo URI containing host, port, user, and password information @param conf Configuration object to store SFTP settings
2689 Retrieves an SFTP channel for the specified host. @return ChannelSftp object or throws IOException if failed
2690 Retrieves and sets the buffer size based on the system configuration. @param IO_FILE_BUFFER_SIZE_KEY system key for buffer size configuration @param IO_FILE_BUFFER_SIZE_DEFAULT default buffer size value
2691 Opens an input stream to the file at the specified path. @param f Path to the file
2692 Opens an FSDataInputStream from the given file descriptor. @param fd PathHandle representing the file descriptor
2693 Creates an output stream to the specified file. @param f Path to the file
2694 Creates an output stream to the specified file. @param f Path to the file @param appendToNewBlock Flag to append to new block or not
2695 Initializes the cache with a semaphore based on configuration. @param conf Configuration object
2696 Initializes Sorter with file system, comparator, and configuration. @param fs the file system to use @param comparator comparator for sorting @param keyClass class of key objects @param valClass class of value objects @param conf Hadoop configuration @param metadata metadata for the sort operation
2697 Creates a CompressionOutputStream with LZ4 compression. @param out OutputStream to compress @param compressor Compressor instance for compression
2698 Creates a compression-aware input stream using LZ4 decompression. @param in the original input stream @param decompressor the decompressor instance
2699 Creates a LZ4 decompressor with the specified buffer size. @return Decompressor instance or null if failed
2700 Returns a CompressionOutputStream instance based on compression method. @param out OutputStream to write compressed data to @param compressor Compressor instance (used for CompressorStream) @return CompressionOutputStream instance or throws IOException if error occurs
2701 Creates a compression input stream based on configuration. @param in the input stream to compress @param decompressor the decompression object @return CompressionInputStream instance or throws IOException if failed
2702 Creates a CompressionOutputStream instance with specified buffer size and overhead. @param out OutputStream to compress @param compressor Compressor instance for compression
2703 Creates a Snappy compressor instance with specified buffer size. @return Compressor object or null if creation fails
2704 Creates a compression-aware input stream using the provided decompressor. @param in original input stream @param decompressor Decompressor instance for decompressing data
2705 Creates a Snappy decompressor instance with specified buffer size. @return Decompressor object for decompressing Snappy compressed data
2706 Configures and calls internal m2 function with default buffer size. @param in input stream @param out output stream @param conf configuration object
2707 Wraps input/output streams with default buffer size. @param in input stream to wrap @param out output stream to wrap @param conf configuration object for buffer size @param close flag to close the streams after use
2708 Retrieves and returns the function mask from the configuration. @param conf Configuration object
2709 Initializes configuration for the script. @param conf Configuration object
2710 Retrieves configuration value for crypto buffer size. @param conf Configuration object @return default crypto buffer size if not set in config
2711 Retrieves the number of priority levels for a given namespace. @param ns namespace identifier @param conf configuration object @return numLevels integer value or throws exception if invalid
2712 Returns a configuration mask value based on IPC client RPC timeout settings. @param conf Configuration object to retrieve values from
2713 Retrieves function mask from configuration. @param conf Configuration object @return function mask value or default if not set
2714 Calculates the function mask value from configuration. @param conf Configuration object @return Function mask value or 0 if invalid
2715 Initializes a LineReader object with specified input stream and configuration. @param in InputStream to read from @param conf Configuration object containing file buffer size settings
2716 Initializes a LineReader with input stream and configuration. @param in InputStream to read from @param conf Configuration object for buffer size @param recordDelimiterBytes delimiter bytes for line separation
2717 Calls superclass method with provided name and default value. Logs the result if not equal to the default value. @param name property name @param defaultValue default value to log against @return property value from superclass
2718 Configures FTP client with custom timeout settings. @param client FTPClient instance to configure @param conf Configuration object containing timeout settings
2719 Retrieves a long integer value from options using the given key. If parsing fails, returns the provided default value and logs an error. @param key option identifier @param defVal default long value to return if parsing fails @return parsed long value or default value
2720 Returns the block size mask value.
2721 Calls superclass method to fetch a value and logs the result. @param name key to retrieve @param defaultValue default value if not found @return fetched or default value
2722 Calls superclass method with default value and logs result. @param name parameter name @param defaultValue default value to use if not found @return float value or default value
2723 Initializes configuration and intervals for trash management. @param conf Configuration object @param fs FileSystem instance @param home Home directory Path
2724 Checks if nested mount point support is enabled in configuration. @param conf configuration object
2725 Creates an LZ4 compressor instance with specified buffer size and HC usage. @return Compressor object; null if configuration is invalid
2726 Creates a retry policy based on configuration settings. @param conf Hadoop Configuration object @param retryPolicyEnabledKey key for enabling/disabling retry policy @param defaultRetryPolicyEnabled default enabled state @param retryPolicySpecKey key for specifying retry policy spec @param defaultRetryPolicySpec default retry policy specification @return RetryPolicy object or null if not created
2727 Configures and sets up Jetty contexts for logs and static content. @param parent ContextHandlerCollection instance @param appDir application directory path @param conf Hadoop configuration object
2728 Configures servlets for the application. @param configuration Application configuration
2729 Retrieves failover enable status for a namespace. @param namespace the namespace to check @param conf configuration object @return true if enabled, false otherwise
2730 Initializes a new IPC client with the given configuration. @param valueClass class of the data to be processed @param conf Hadoop configuration for client settings @param factory socket factory for establishing connections
2731 Checks if IPC backoff is enabled based on configuration. @param prefix key prefix @param conf Hadoop Configuration object @return true if enabled, false otherwise
2732 Checks and returns IPC backoff enable flag for given namespace and port. @param namespace cluster or application namespace @param port service port number @param conf Configuration object containing key-value pairs @return true if enabled, false otherwise
2733 Retrieves password mask for the given user. @param name user identifier @return password character array or null if not found
2734 Calls superclass's m1 with provided parameters and logs result. @param name property name @param defaultValue default boolean value to use if not found @return true if property exists and is enabled, false otherwise
2735 Resolves the file system class based on scheme and configuration. @param scheme file system scheme @param conf Hadoop Configuration object @return Class of FileSystem implementation or null if not found
2736 Resolves and instantiates AbstractFileSystem implementation for the given URI. @param uri file system URI @param conf Hadoop configuration @return AbstractFileSystem instance or throws UnsupportedFileSystemException if not found
2737 Instantiates a blocking call queue class based on configuration. @param namespace namespace identifier @param port port number @param conf configuration object @return Class of BlockingQueue<Call> or null if not found
2738 Returns an instance of RpcScheduler based on configuration. @param namespace namespace identifier @param port network port number @param conf system Configuration object @return RpcScheduler class or null if not found
2739 Resolves class by name, applying interface validation and method invocation. @param name class name @param defaultValue default class to return if not found @param xface interface to validate against and invoke methods on @return Class<? extends U> or null if not found
2740 Fetches or creates a FileSystem instance based on the provided key. @param uri URI of the filesystem @param conf Configuration object @param key unique identifier for the filesystem @return FileSystem object or null if not found
2741 Calculates the function timeout mask based on configuration. @param conf Configuration object @return Function timeout mask in milliseconds
2742 Retrieves a password mask by name from registered credential providers. @param name the key to fetch @return char[] password mask or null if not found
2743 Determines and returns a set of priority-based weights. @param priorityLevels number of priority levels @param ns namespace string @param conf configuration object @return array of positive integer weights or throws exception if invalid
2744 Initializes filter instances from configuration. @param conf Hadoop Configuration object @return FilterInitializer array or null if failed to initialize
2745 Retrieves a list of objects implementing the specified interface. @param name filter string @param xface target interface class @return List of objects implementing xface or null if none found
2746 Configures and initializes the compression pipeline. @param config configuration object @param outStream output stream to write compressed data @param ownStream whether this method owns the output stream @param key class of the key to serialize @param val class of the value to serialize @param compCodec optional compression codec to use @param meta metadata object @param syncIntervalVal synchronization interval value
2747 Calls FutureIO's m1 with provided arguments. @param builder FSBuilder instance @param conf Hadoop configuration @param prefix string prefix @param mandatory whether operation is mandatory
2748 Configures FSBuilder with optional and mandatory prefixes. @param builder the FSBuilder to configure @param conf configuration settings @param optionalPrefix prefix for optional data @param mandatoryPrefix prefix for mandatory data
2749 Validates native libraries and winutils on Windows. @param args command line arguments, can be -a to check all or -h for help
2750 Returns compressor class based on configuration. @return Compressor subclass (e.g. Bzip2Compressor)
2751 Returns decompression factory instance based on configuration. @return Class of Decompressor implementation (e.g. Bzip2Decompressor)
2752 Returns the decompression mask using Bzip2 factory.
2753 Constructs HadoopZookeeperFactory instance with the given ZooKeeper principal. @param zkPrincipal ZooKeeper principal to use
2754 Retrieves user functional masks by ID. @param result SearchResult object @param c DirContext instance @param goUpHierarchy flag to traverse hierarchy @return Set of String group identifiers or empty set if not found
2755 Creates a CryptoCodec instance based on the specified configuration. @param conf Configuration object with cipher suite settings
2756 Initializes server socket with specified address and backlog. @param socket ServerSocket instance @param address InetSocketAddress for binding @param backlog maximum queue size
2757 Dumps property value to output writer. @param config configuration object @param propertyName name of the property to dump @param out output writer
2758 Checks if a file exists in the specified directory. @param f Path to the directory to check
2759 Validates and fetches server's Kerberos principal name. @param authType SaslAuth object @return Server's Kerberos principal name or null if not found
2760 Reconstructs a valid URI from the given raw URI, applying HARP (HTTP Archive Protocol) rules. @param rawURI input URI to process @return reconstructed URI or null if not applicable
2761 Wraps m1 output in a new FileSystem instance. @param conf Configuration object
2762 Configures function mask settings based on provided URI and configuration. @param name URI to determine scheme from @param conf Configuration object for resolving symlinks
2763 Wraps the output of m1() in an HDFS filesystem. @param conf Hadoop configuration
2764 Validates and normalizes a file system path. @param path the path to validate
2765 Resolves InetSocketAddress from properties or defaults. @param hostProperty property for hostname @param addressProperty property for address (may override hostname) @param defaultAddressValue default address value if not set @param defaultPort default port number @return InetSocketAddress object with resolved values
2766 Creates an FSDataOutputStream for writing to a remote file. @param f Path to the remote file @return FSDataOutputStream instance or null if creation fails
2767 Initializes a new DataInputStreamBuilder instance from the specified file system and path. @param fileSystem File system to operate on @param path Path to initialize builder with
2768 Initializes data input stream builder with given file system and path handle. @param fileSystem non-null file system instance @param pathHandle non-null path handle instance
2769 Opens file for reading based on provided read policies. @param instance DynamicWrappedIO instance @param fs FileSystem object @param status FileStatus object @param readPolicies string specifying read policies @return FSDataInputStream object or null if failed
2770 Checks if file system allows appending operations. @param fs FileSystem object to check @return true if append allowed, false otherwise
2771 Constructs a Sorter instance with specified parameters. @param fs FileSystem object @param comparator RawComparator for sorting @param keyClass Class of the key data type @param valClass Class of the value data type @param conf Configuration object
2772 Initializes Bzip2 compressor with configuration. @param conf Hadoop Configuration object
2773 Reinitializes the compressor based on provided configuration. @param conf Compression configuration object
2774 Initializes and reads SequenceFile metadata. @param tempReader whether to read temporary data
2775 Reinitializes the compressor based on provided configuration. @param conf Compression configuration
2776 Creates a DataOutputStream for writing a value of specified length. @param length length of the value to be written (or -1 for dynamic length) @return DataOutputStream instance or null if an error occurs
2777 Creates a WBlockState object with the specified compression algorithm and output streams. @param compressionAlgo Algorithm instance for compression @param fsOut FSDataOutputStream to write compressed data to @param fsOutputBuffer BytesWritable buffer for compressed data @param conf Configuration object for file system settings
2778 Calls parent and child methods to perform initialization. @param conf configuration object passed to both calls
2779 Initializes configuration for M1 operation. @param conf Configuration object
2780 Creates an instance of Options from a Configuration object. @param conf Configuration object to initialize options with @return Initialized Options object
2781 Calculates function mask based on configuration. @param conf Configuration object @return Function mask value or -1 if not found
2782 Establishes an FTP connection using configuration settings. @throws IOException if login or other operations fail
2783 Returns a long value for the given key, using a default value if it's negative. @param key unique identifier @param defVal default value to use when key value is invalid @return valid long value or default value
2784 Creates FsServerDefaults object with checksum and buffer settings. @throws IOException if configuration cannot be loaded
2785 Returns a constant value equivalent to calling m1() with no parameters. This is likely a wrapper around another function call.
2786 Moves a bad file to the designated 'bad_files' directory. @param p Path to the bad file
2787 Constructs a caching get space used object using the provided builder. @param path path to cache @param interval time interval for caching @param jitter randomization value for caching @param initialUsed initial used space value
2788 Reads compressed sequence file data into the given DataOutputBuffer. @param buffer Data output buffer to store read data @return Key length or -1 if end of sequence @throws IOException on unsupported block-compressed sequences
2789 Returns a RetryPolicy instance based on configuration settings. @param conf Hadoop Configuration object @param retryPolicyEnabledKey key for enabling/disabling retry policy @param defaultRetryPolicyEnabled default enabled state of retry policy @param retryPolicySpecKey key for specifying retry policy spec @param defaultRetryPolicySpec default retry policy specification @param remoteExceptionToRetry exception to retry on remote nodes @return RetryPolicy instance or TRY_ONCE_THEN_FAIL if not configured
2790 Initializes a new Client instance with default socket factory. @param valueClass client data class @param conf configuration object
2791 Retrieves a cached or newly created Client instance. @param conf configuration object @param factory socket factory used to create the client @return configured Client object
2792 Updates configuration with credential provider path based on file system class. @param config existing Configuration object @param fileSystemClass target FileSystem class @return updated Configuration object or original if no changes
2793 Retrieves an instance of AbstractFileSystem based on the provided URI and configuration. @param uri unique identifier @param conf system-wide configuration settings
2794 Initializes Server configuration and returns a configured instance. @throws IOException if initialization fails @throws HadoopIllegalArgumentException on missing configuration settings
2795 Creates and configures a TrashPolicy instance based on the provided configuration. @param conf Configuration object @return configured TrashPolicy object
2796 Creates and configures a TrashPolicy instance based on configuration settings. @param conf Configuration object containing policy settings @param fs FileSystem object used for policy initialization @return An initialized TrashPolicy instance
2797 Resolves domain name using a dynamically loaded resolver class. @param conf configuration object @param configKey key for resolving the resolver class
2798 Resolves SASL properties resolver instance from configuration. @param conf Hadoop Configuration object @return resolved SaslPropertiesResolver instance or null if not found
2799 Resolves and initializes SASL property resolver. @param saslPropsResolverKey unique key for the resolver
2800 Instantiates and returns the configured impersonation provider. @param conf Hadoop configuration object
2801 Executes executor shutdown with configurable timeout. @param conf configuration object
2802 Retrieves password mask using multiple methods. @param name user's unique identifier @return password mask as a char array or null if not found
2803 Creates an instance of RawErasureEncoder based on configuration and codec. @param conf configuration object @param codec encoding format (e.g., "default") @param coderOptions options for erasure coding @return RawErasureEncoder instance or null if invalid input
2804 Creates and returns a RawErasureDecoder instance based on the provided configuration and codec. @param conf Configuration object @param codec Codec name @param coderOptions ErasureCoder options
2805 Updates and replaces the RpcScheduler instance with a new one, initializing a BlockingQueue with custom settings. @param schedulerClass class of the new scheduler @param queueClassToUse class of the blocking queue @param maxSize maximum size of the queue @param ns namespace for configuration @param conf application configuration
2806 Initializes FairCallQueue with specified configuration. @param priorityLevels number of priority levels @param capacity total queue capacity @param ns namespace for metrics @param capacityWeights weights for each queue's capacity @param serverFailOverEnabled flag to enable server failover @param conf configuration object
2807 Serializes and stores an item in the configuration. @param conf Configuration object @param item Item to serialize (generic type K) @param keyName Unique identifier for the stored item
2808 Retrieves a serialized object of type K from the configuration. @param conf Configuration object @param keyName unique key name @param itemClass class type of the returned object @return K object or null if not found
2809 Configures key-value pairs in Hadoop Configuration. @param conf Hadoop configuration @param items array of values to configure @param keyName name of the key to set
2810 Retrieves an array of items of type K from configuration using keyName and itemClass. @param conf Configuration object @param keyName unique identifier for the items in the config @param itemClass class of the items to be retrieved @return Array of items of type K or null on error
2811 Initializes a Writer object with the given configuration and file system. @param fs FileSystem instance @param conf Configuration settings @param name Path to write data to @param keyClass Class of key data type @param valClass Class of value data type @param bufferSize Buffer size for I/O operations @param replication Replication factor for data @param blockSize Block size for I/O operations @param progress Progressable instance for tracking progress @param metadata Metadata associated with the write operation
2812 Serializes and deserializes data of type T between src and dst using a custom serialization framework. @param conf Configuration object for serialization @param src Source object to serialize @param dst Destination object to deserialize into @return Deserialized destination object or null on failure
2813 Wraps {@link FutureIO#m1(FSBuilder, Configuration, String, String)} call. @param builder FSBuilder instance @param conf configuration object @param optionalPrefix prefix for optional parameters @param mandatoryPrefix prefix for mandatory parameters
2814 Fetches user's group membership by ID. @param user unique user identifier @param goUpHierarchy flag to include parent groups (0 = no, > 0 = yes) @return Set of group DNs or an empty set if not found
2815 Writes configuration property with specified format. @param conf Hadoop Configuration object @param out Writer to output data @param format Output format (JSON or XML) @param propertyName Property name to write
2816 Configures authentication filter in the given FilterContainer. @param container target FilterContainer @param conf configuration object
2817 Creates a SASL client for authentication based on the provided auth type. @param authType SaslAuth object containing authentication details @return SaslClient instance or null if authentication fails
2818 Creates a FileSystem instance based on the provided URI and configuration. @param uri unique file system identifier @param conf Hadoop Configuration object @return initialized FileSystem object or null if creation fails
2819 Initializes and configures the ViewFs instance. @param theUri URI to initialize with @param conf configuration options
2820 Overridden method m1: loads and initializes resources based on URI. @param name input URI @param conf configuration object
2821 Computes M4 value by invoking M1 and utilizing internal parameters. @param path input path object
2822 Applies transformations to input path and returns processed result. @param p original file system path
2823 Calls file system operation on the given path. @param path file system path to operate on
2824 Opens Avro file input for reading, specifying sequential read policy. @param fc FileContext instance @param p Path to the Avro file
2825 Recursively copies and optionally deletes source file. @param src source path @param dst destination path @param deleteSource whether to delete the original file @param overwrite whether to overwrite existing files @return true if successful, false otherwise
2826 Constructs an FSDataInputStreamBuilder instance with a given file system and path. @param fileSystem the file system to operate on @param path the file or directory path to access
2827 Constructs an FSDataInputStreamBuilder with the given file system and path handle. @param fileSystem the file system to operate on @param pathHandle the path handle for this builder
2828 Returns an FSDataInputStream instance based on given parameters. @param fs FileSystem object @param status FileStatus object @param readPolicies string of read policies
2829 Retrieves FsPermission for a given file or directory. @param path original file/directory Path @param backupPath alternate Path to use if original is corrupted @return FsPermission object or null on failure
2830 Initializes a Sorter instance with the given configuration. @param fs FileSystem instance @param keyClass Class of the key used for sorting @param valClass Class of the values being sorted @param conf Hadoop Configuration object
2831 Returns compressor instance based on configuration. @param conf Configuration object @return Bzip2Compressor or BZip2DummyCompressor instance
2832 Initializes mask reader for given file and stream. @param filename path to the file @param in input stream @param start starting position @param length length of data to read @param conf configuration object @param tempReader whether this is a temporary reader
2833 Creates a compressed output stream with specified compressor and settings. @param out target output stream @param compressor compression algorithm to use @return CompressionOutputStream instance or null on failure
2834 Creates and returns a ZStandard compressor instance with custom settings. @return Compressor object implementing ZStandard compression algorithm
2835 Creates a compression-aware input stream using the provided decompressor. @param in original input stream @param decompressor instance to handle compressed data @return CompressionInputStream object
2836 Creates a decompressor instance based on function mask. @return ZStandardDecompressor object implementing decompression functionality
2837 Creates a new Block Appender instance. @return BlockAppender object
2838 Initializes ScriptBasedMapping with given configuration. @param conf Configuration object to initialize the mapping.
2839 Calls parent and child methods with configuration. @param conf application configuration
2840 Parses command-line arguments and sets up the key provider. @param args array of command-line arguments @return 0 on success, non-zero on error
2841 Creates a ConnectionId instance with default retry policy if not provided. @param addr the InetSocketAddress to connect to @param protocol the protocol class for the connection @param ticket the UserGroupInformation for authentication @param rpcTimeout the RPC timeout in milliseconds @param conf the Configuration object for client settings
2842 Creates an FSDataOutputStream to a file on the HDFS with specified permissions and replication. @param file Path of the file to create @param permission File system permissions @param overwrite Whether to overwrite existing files @return FSDataOutputStream instance or null if creation failed
2843 Returns FsServerDefaults instance for the given path. @param p Path to fetch defaults for @return FsServerDefaults instance or throws IOException if an error occurs
2844 Creates a buffered output stream for the given file. @param f file path @param overwrite whether to overwrite existing file
2845 Wraps a file output stream with progress tracking.
2846 Creates an M4 file output stream with specified replication and chunk size. @param f file path @param replication data replication factor
2847 Creates an M4 file output stream. @param f Path to file @param replication short replication factor @param progress Progressable callback
2848 Creates an output stream to write data to a file at the specified path. @param f target file path @param overwrite whether to overwrite existing file @param bufferSize buffer size for writing operations @return FSDataOutputStream object
2849 Creates an FSDataOutputStream for writing to a file. @param f the file path @param overwrite whether to overwrite existing files @param bufferSize buffer size for writing @param progress progressable object (not used in this method)
2850 Initializes FSDataOutputStreamBuilder with a FileSystem and Path. @param fileSystem required file system instance @param p required path to configure output settings from
2851 Reads a compressed or uncompressed key from storage. @param key Writable object representing the key to read
2852 Retrieves a key by its ID, handling compressed and uncompressed cases. @param key the key to fetch
2853 Initializes Invoker instance with client connection and protocol details. @param protocol Class of the remote protocol @param connId unique ConnectionId @param conf Configuration object @param factory SocketFactory instance @param alignmentContext AlignmentContext for this invocation
2854 Creates a new Client instance with default socket factory settings. @param conf configuration object
2855 Creates a new Client instance using provided configuration and socket factory. @param conf client configuration @param factory socket factory for network operations
2856 Initializes Invoker instance with client connection details. @param protocol Class of the remote protocol to use @param connId unique identifier for the client connection @param conf configuration settings for the client @param factory SocketFactory instance for creating sockets @param alignmentContext context for alignment operations
2857 Retrieves protocol signature for the given method name. @param rpcProxy RPC proxy object @param protocol protocol class @param rpcKind RPC kind @param version protocol version @param methodName target method name to find hash for @return true if method hash found, false otherwise
2858 Initializes a new instance of Trash with the specified file system and configuration. @param fs file system to use @param conf configuration for this instance
2859 Creates a network topology using the given configuration. @param conf Configuration object
2860 Initializes a new SASL RPC client instance. @param ugi UserGroupInformation for authentication @param protocol Class of the remote communication protocol @param serverAddr Server address to connect to @param conf Configuration settings for this client
2861 Configures impersonation and proxy servers based on provided prefix. @param conf configuration object @param proxyUserPrefix prefix to configure impersonation
2862 Adds a shutdown hook with specified priority. @param shutdownHook Runnable to execute on shutdown @param priority hook execution order (lower values run first)
2863 Retrieves and returns a password mask as a string from the configuration. @param conf Configuration object @param name property name for password mask @return masked password string or null if not found
2864 Retrieves password from configuration or returns default value. @param conf Configuration object @param alias unique alias identifier @param defaultPass default password value @return Password string or null if not found
2865 Retrieves ZK authentication info from configuration. @param conf Hadoop Configuration object @param configKey key for auth info in config file @return List of ZKAuthInfo objects or empty list if not found
2866 Initializes the DecayRpcScheduler with given parameters. @param numLevels number of priority levels @param ns namespace identifier @param conf configuration object
2867 Creates a masked instance of a Writable object. @param orig original object to mask @param conf configuration for masking operation @return masked object or null if error occurs
2868 Wraps OutputStream with UTF-8 OutputStreamWriter and calls m1.
2869 Selects the first compatible SASL authentication type from the list. @param authTypes list of available SASL authentication types @return selected SaslAuth object or null if none found
2870 Initializes an FTP-based file system with the given configuration. @param theUri URI of the FTP server @param conf Configuration object for this file system
2871 Initializes a raw local file system instance. @param theUri URI of the file system @param conf Hadoop configuration object
2872 Calls superclass m1 method and then calls m2 with configuration.
2873 Initializes MultipartUploaderBuilderImpl with the given file system and path. @param fileSystem non-null file system instance @param p non-null file path to configure uploader for
2874 Initializes a new PathData object from file system, path string, and status. @param fs the underlying Hadoop file system @param pathString the path as a string @param stat file status
2875 Evaluates the capabilities of a given path. @param path Path object to check @param capability Capability type to verify @return True if the path supports the specified capability, false otherwise
2876 Applies file system function mask to the given path. @param path input file system path
2877 Resolves and potentially swaps scheme of a given path. @param path the input path to resolve @return resolved Path object, with swapped scheme if applicable
2878 Recursively resolves FileStatus for the given PathData and depth. @param item PathData containing file status @param depth current recursion depth @return resolved FileStatus or null if not found
2879 Computes function mask by processing input path. @param path the input path to process
2880 Copies a file from source to destination. @param src source file path @param dst destination file path @throws various exceptions on copy operation failure
2881 Creates a new FSDataInputStreamBuilder for the given filesystem and path. @param fileSystem filesystem instance @param path file or directory to read from
2882 Creates a builder for an FSDataInputStream. @param fileSystem file system instance @param pathHandle path handle to the input stream
2883 Calculates and returns FsPermission for the given paths. @param oldPath original path @param newPath new path @return FsPermission object or null if not found
2884 Returns Bzip2 compressor instance with specified configuration. @return Compressor object implementing Bzip2 compression algorithm
2885 Retrieves a block reader for the specified name. @param name unique identifier @return BlockReader object or throws exception if not found
2886 Retrieves a BlockReader for the specified block index. @param blockIndex unique identifier of the block to read
2887 Flushes and closes the block appender. @throws IOException if an I/O error occurs
2888 Creates a block appender with specified name and compression scheme. @param name unique block appender identifier @param compressionName name of the compression scheme to use @return BlockAppender instance or throws exception if failed
2889 Creates a new block appender with the given name and uses the result of m1 as meta block. @param name unique block appender identifier
2890 Initializes block appender instance. @throws IOException on write error
2891 Opens an output stream on the specified file. @param f the Path to open
2892 Recursively attempts to create a file system output stream with a unique ID. @param initial the initial path
2893 Opens or re-opens a file in the specified location for output. @param targetFile Path to the desired file
2894 Masks instance data in filesystem. @param fs FileSystem object @param path Path to mask data @param instance Instance to mask @param overwrite Whether to overwrite existing data
2895 Initializes a Writer instance with the specified configuration and file system. @param fs FileSystem instance @param conf Configuration object @param name Path to write to @param keyClass Class of key values @param valClass Class of value objects @param progress Progressable instance for reporting progress @param metadata Metadata object for tracking file information
2896 Verifies file existence and initializes buffer size. @param f Path to the file @return True if file exists; False otherwise
2897 Initializes a new FileSystemDataOutputStreamBuilder instance. @param fileSystem underlying file system @param p path to data output stream
2898 Updates or inserts key-value pair into the data store. @param key unique identifier @param val new value to associate with the key @return true if a new entry was created, false otherwise
2899 Initializes Trash with provided Hadoop Configuration. @param conf Hadoop job configuration
2900 Redirects to m2 with resolved domain name. @param conf Configuration object @param uri URI object containing a resolved domain name (via m1()) @param configKey configuration key for resolver
2901 Returns a singleton instance of the Groups object, lazily initializing it from the given Configuration. @param conf configuration to use for initialization
2902 Initializes and returns a singleton instance of Group configuration. @param conf Configuration object to initialize from
2903 Configures Hadoop proxy user settings. @param conf Configuration object
2904 Verifies a file's mask and initializes shutdown hook if necessary. @param f the Path to verify @return true if successful, false otherwise
2905 Synchronizes and schedules a shutdown hook with specified priority. @param priority The priority of the shutdown hook.
2906 Logs function execution with customizable arguments and registers shutdown hook. @param clazz Class to be logged @param args Customizable log message arguments @param log Logger instance for logging
2907 Configures SSL/TLS settings from configuration. @throws IOException if properties are missing
2908 Initializes SSL factory with a ReloadingX509KeystoreManager. @param mode SSLFactory.Mode @param keystoreType type of the keystore (e.g. JKS) @param storesReloadInterval interval to reload keystore in seconds
2909 Retrieves ZK authentication info from configuration. @param conf Configuration object @return list of ZK auth info or null if not found
2910 Retrieves a list of function masks associated with the given user. @param user username to retrieve function masks for
2911 Configures and executes m1 operation on System.out. @throws Exception if an error occurs during execution
2912 Performs authentication using the provided IPC streams. @param ipcStreams IpcStreams object for communication @return AuthMethod enum value representing the chosen authentication method
2913 Initializes PathData with file system and path string. @param fs FileSystem object @param pathString absolute path to initialize from
2914 Retrieves file system data for the specified path. @return Array of PathData objects representing files and subdirectories
2915 Throws FileNotFoundException with user-friendly error messages. @param fs FileSystem object @param path Path to the missing directory @param e Initial exception
2916 Determines if a read-only connector is supported at the specified path. @param path file system path @param capability requested capability @return true if read-only connector is supported, false otherwise
2917 Checks if a path has a specific capability. @param path Path to check @param capability Capability to verify @return true if the path has the capability, false otherwise
2918 Retrieves a file mask from the given filesystem at the specified location. @param fs FileSystem instance @param path Path to the file
2919 Builds DataInputStream from the given file path. @param path file location to read from @return FutureDataInputStreamBuilder instance or null if failed
2920 Creates a DataInputStreamBuilder instance for the provided file handle. @param pathHandle handle to the file path
2921 Loads and configures key store with specified password. @throws IOException if keystore cannot be loaded or created
2922 Initializes and loads the TFile index if not already done. @throws IOException on errors reading or parsing the index
2923 Reads data from BCF file using specified name. @param name unique identifier to read data for
2924 Initializes Reader object from FSDataInputStream and configuration. @param fin input stream to read from @param fileLength total size of the file in bytes @param conf configuration settings
2925 Starts and returns a Meta Block output stream. @param name unique block identifier @param compressName compressed block name @return DataOutputStream instance or throws exceptions if failed
2926 Closes TFile object, writing metadata and index if in READY state. @throws IOException on write or close errors
2927 Starts and writes a Meta Block with the given name. @param name unique identifier for the Meta Block @return DataOutputStream object for further writing
2928 Initializes and returns a DataOutputStream for a new key of specified length. @param length the length of the key
2929 Copies a file from source to destination, optionally deleting the original. @param src source file @param dstFS destination file system @param dst destination path @param deleteSource whether to delete the original file @return true if successful, false otherwise
2930 Processes multipart upload and returns the result. @param multipartUploadId unique multipart upload identifier @param filePath path to file being processed @param handleMap map of part handles @return PathHandle object representing the processed file
2931 Creates and initializes a new output stream to the specified file. @param fs FileSystem instance @param file destination Path object @param permission FsPermission for the new file @return FSDataOutputStream instance for writing to the file
2932 Initializes a Writer instance with the specified configuration and name. @param fs FileSystem instance @param conf Configuration object @param name Path to write to @param keyClass Class of key data type @param valClass Class of value data type
2933 Creates a masked log file for the current working directory. @throws IOException if an I/O error occurs
2934 Calls underlying data storage's method to perform operation with given key and value. @param key unique identifier @param val associated value @return true if successful, false otherwise
2935 Creates a protocol proxy for the given class and client version. @param protocol protocol class @param clientVersion client version number
2936 Initializes and returns a Groups instance with default configuration.
2937 Configures security settings and group information. @param conf Configuration object @param overrideNameRules Whether to override name rules
2938 Initializes an empty Access Control List (ACL).
2939 Constructs an AccessControlList from a string representation. @param aclString string containing ACL data in the format "owner group"
2940 Constructs an Access Control List (ACL) from user and group identifiers. @param users comma-separated list of user IDs @param groups comma-separated list of group IDs
2941 Initializes configuration and calls itself recursively.
2942 Initializes SSL configuration based on the specified mode. @param mode SSLFactory.Mode value (CLIENT or SERVER)
2943 Initializes ZK client with configured settings and authentications. @param authInfos list of AuthInfo objects @param sslEnabled true to enable SSL, false otherwise
2944 Modifies user group list based on specified rule. @param user user identifier @return List of modified usernames or original list if no rule applied
2945 Initializes and starts the MetricsSystem instance. @param prefix custom metric prefix
2946 Constructs a PathData instance with specified file system and extension. @param extension file name extension (e.g., ".txt")
2947 Creates a new PathData with a mask applied to the given child path. @param child PathData object to apply the mask to
2948 Processes a PathData item to determine its mask. @param item PathData object containing file system and path data
2949 Determines whether to handle the given capability via parent's implementation. @param path file system path @param capability desired capability @return true if handled by this class, false otherwise
2950 Custom implementation of FS connector read-only capability check. @param path file system path @param capability type of capability to check @return true if read-only connector is supported, false otherwise
2951 Handles path capabilities. @param path Path object @param capability Capability string @return true if capable, false otherwise
2952 Retrieves and aggregates file status information from multiple MRNflyNodes. @param f Path to fetch status for @return Array of FileStatus objects or throws IOException if errors occur
2953 Copies a file or directory from source to destination. @param deleteSource whether to delete the original file after copying @param overwrite whether to overwrite existing files at destination
2954 Recursively copies or moves a file system subtree. @param deleteSource whether to delete source after copy
2955 Opens file for read with specified policy. @param policy file access policy
2956 Opens a file for sequential read access with specified buffer size and optional length. @param fs FileSystem instance @param file Path to the file to open @param bufferSize Buffer size in bytes @param length Optional file length (>= 0) @return FSDataInputStream object or null on failure
2957 Fetches masked data from the specified file system and path. @param fs file system instance @param path file location @param status optional file status (may be null) @return T object or throws exception if error occurs
2958 Calls m1() and returns result from tfileIndex's m2().
2959 Calls m1() and returns result of tfileIndex.m2(). @throws IOException if an I/O error occurs
2960 Finds the block index for a given key with optional greater-than comparison. @param key RawComparable key to search @param greater true for "greater than" search, false otherwise @return Location object representing the block index or end if not found
2961 Retrieves a RawComparable object from the file system based on the given offset. @param offset file offset @return RawComparable object or null if not found
2962 Initializes a Reader object with FSDataInputStream, file length, and configuration. @param fsdis input stream for file data @param fileLength total size of the file in bytes @param conf Hadoop configuration
2963 Updates block mask by reading and processing the specified block. @param blockIndex index of the block to process
2964 Writes key-value pair to output streams. @param key byte array containing key data @param koff offset into key buffer @param klen length of key data @param value byte array containing value data @param voff offset into value buffer @param vlen length of value data
2965 Retrieves the mask value from the sorted key array. @return The middle key or null if count is zero.
2966 Updates the index by masking a key. @param key WritableComparable to mask
2967 Searches for key in the data and returns a mask based on the comparison result. @param key WritableComparable key to search for @param before whether to find previous matching key @return int mask indicating comparison result (0: equal, < 0: less, > 0: greater)
2968 Iterates through input data and writes the next entry to output based on comparator rules.
2969 Creates a ProtocolProxy instance with default parameters. @param protocol the protocol class @param clientVersion the client version @param addr the socket address @param ticket user group information @param conf configuration object @param factory socket factory @param rpcTimeout RPC timeout value @param connectionRetryPolicy retry policy for connections
2970 Wraps the m5 method with additional parameters into a unified interface. @param protocol protocol class
2971 Calls the m1() method to fetch a related resource and then calls its m2() method.
2972 Calls M1 to fetch and process data, then calls M2 on the result. @param path input path
2973 Runs user group information initialization if not already completed. @param None
2974 Configures function mask based on provided configuration. @param conf Function configuration to apply settings from.
2975 Launches a service with configurable parameters and error handling. @param conf configuration object @param instance service instance @param processedArgs command-line arguments @param addShutdownHook whether to add shutdown hook @param execute whether to execute the service @return ExitException object or null if successful
2976 Invokes m1 with provided AuthInfo list and default flag value. @param authInfos list of authentication information
2977 Initializes LocalFs with configuration and URI.
2978 Creates a function mask for the given PathData. @param in input stream to write data from @param target PathData object with file system and overwrite flags
2979 Copies a file from source to destination and optionally deletes source. @param srcFS source file system @param src source file path @param dstFS destination file system @param dst destination file path @param deleteSource whether to delete the source after copy @param overwrite whether to overwrite existing destination @param conf configuration object
2980 Fetches MRNflyNode array by ID and returns a FSDataInputStream. @param mrNodes array of MRNflyNode objects @return FSDataInputStream object or null if not found
2981 Copies a file from source to destination and optionally deletes the source. @param srcFS source file system @param src source file path @param dst destination file @param deleteSource whether to delete the source after copy @param conf configuration object @return true if successful, false otherwise
2982 Opens file in sequential read policy mode. @return File stream input data or null if failed
2983 Convenience method to fetch data from file system. @param fs FileSystem instance @param path Path to data location
2984 Computes the function mask value from the given offset. @param offset input data offset
2985 Retrieves a function mask from the current location. @throws IOException on read error
2986 Initializes a Scanner instance with the specified reader and location bounds. @param reader input Reader object @param begin starting point of the scan (inclusive) @param end ending point of the scan (inclusive) @throws IOException if an I/O error occurs while initializing the scanner
2987 Validates and updates location mask based on provided Location object. @param l Location object with various fields (beginLocation, endLocation, etc.)
2988 Validates block mask by performing checks and updates. @throws IOException if an I/O error occurs
2989 Copies data from key to value array. @param key source byte array @param value destination byte array
2990 Retrieves value associated with given key using default retrieval strategy. @param key unique key identifier
2991 Fetches the next key based on the given key and value. @param key WritableComparable key object @param val Writable value object @param before whether to seek before or after the key @return next WritableComparable key object or null if not found
2992 Returns UserGroupInformation instance based on the provided user and groups. @param user unique user identifier @param userGroups array of group names for the user
2993 Computes and returns UserGroupInformation based on provided parameters. @param user user identifier @param realUser actual user information @param userGroups array of user group memberships @return the computed UserGroupInformation object
2994 Retrieves a list of group names for the current user. @return List of group names or an empty list if retrieval fails
2995 Retrieves a set of group names associated with the current user. @return Set of group names or an empty set if failed
2996 Authenticates and returns UserGroupInformation instance. @param subject Subject object @param params Login parameters
2997 Initializes service authorization manager with configuration and policy provider. @param conf Configuration object @param provider Policy provider instance
2998 Invokes M2 on the default instance. @param user User information @param remoteAddress Remote address of the caller
2999 Calls second-level authorization on Hadoop framework. @param user UserGroupInformation object @param remoteAddress remote IP address
3000 Wraps existing functionality with a different parameter set. @param conf Hadoop configuration
3001 Invokes recursive implementation with an empty list. @throws IOException if I/O operation fails
3002 Copies and synchronizes source PathData with target, preserving raw Xattrs if applicable. @param src source data to copy from @param target target data to synchronize with
3003 Wraps the main file copy function with a simple wrapper for backwards compatibility.
3004 Fetches FSDataInputStream for MRNflyNode instances from file system. @param f Path to file @param bufferSize buffer size for input stream
3005 Creates a scanner instance to read from the specified range. @throws IOException if an I/O error occurs
3006 Creates a Scanner instance for the given record range. @param beginRecNum starting record number (clamped to 0 if negative) @param endRecNum ending record number (clamped to max allowed value if invalid) @return Scanner object or throws IOException on error
3007 Constructs a new Scanner instance from a Reader at specified offset range. @param reader the underlying Reader to read from @param offBegin offset of beginning of desired data in bytes @param offEnd offset of end of desired data in bytes
3008 Applies mask to data at specified location. @throws IOException on input/output error
3009 Checks if a given key exists in the data structure. @param key WritableComparable object to search @return true if key is present, false otherwise
3010 Shortcut to call m1 with default behavior (not nulling key). @param key object to be stored @param val value associated with the key
3011 Returns true if simple authentication is disabled.
3012 Performs logout operation with Kerberos authentication. @throws IOException if an I/O error occurs
3013 Returns an array of group names based on internal logic. @return Array of String group names
3014 Checks if a user has access based on their group membership. @param ugi the UserGroupInformation object to check
3015 Retrieves user group information for the given subject. @param subject Subject object to fetch info from
3016 Calls deprecated version of m1 with reduced parameters. @param user UserGroupInformation instance @param remoteAddress Remote address string @param conf Configuration object (currently unused)
3017 Authenticates and authorizes user based on auth method. @throws RpcServerException if authorization fails
3018 Validates and processes path data between source and destination. @param src source PathData object @param dst destination PathData object
3019 Applies mask operation to source image. @param delSrc whether to delete source image after processing @param src input image path @param dst output image path
3020 Performs a file operation with masking functionality. @param delSrc whether to delete the source file @param src source file path @param dst destination file path
3021 Creates a Scanner instance with specified file offset and length. @param offset starting position in bytes @param length number of bytes to scan
3022 Initializes a Scanner with a Reader and key boundaries. @param reader input data source @param beginKey starting point for scanning (null for beginning) @param endKey ending point for scanning (null for end)
3023 Creates a cryptographic operation instance from a byte array key. @param key byte array containing the key @param keyOffset offset within the key array to start reading from @param keyLen length of the key in bytes @return true if successful, false otherwise
3024 Encrypts or decrypts data using specified key and mask. @param key encryption/decryption key @param keyOffset starting offset of the key in bytes @param keyLen length of the key in bytes
3025 Encrypts or decrypts data using a provided key. @param key encryption/decryption key @param keyOffset offset into the key array (assumed to be in bytes) @param keyLen length of the key array (in bytes)
3026 Returns a writable object with a function mask applied to the given value. @param key unique identifier or key @param val value to be masked @return Writable object if successful, otherwise null
3027 Creates a ProtocolProxy instance for the given protocol and configuration. @param protocol Class of the protocol to proxy @param clientVersion Client version number @param connId Connection ID @param conf Configuration object @param factory Socket factory @param alignmentContext Alignment context @return Initialized ProtocolProxy object
3028 Creates a ProtocolProxy instance with specified parameters. @param protocol the target protocol class @param clientVersion the client version @param addr the server address @param ticket the user's identity @param conf configuration settings @param factory socket creation factory @param rpcTimeout RPC timeout in milliseconds @param connectionRetryPolicy retry policy for connections @param fallbackToSimpleAuth flag to enable simple authentication fallback
3029 Creates a ProtocolProxy instance for the specified protocol and configuration. @param protocol class of the protocol to proxy @return ProtocolProxy object or null if creation fails
3030 Opens and validates a file with specified mode, owner, and group. @param f File to open @param mode Access mode (e.g. "r", "rw") @param expectedOwner Expected file owner @param expectedGroup Expected file group @return Opened RandomAccessFile or null on failure
3031 Reads and validates file metadata. @param file the File object to read @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FSDataInputStream for successful validation, or null if not found
3032 Opens FileInputStream for a file and validates its ownership. @param f the file to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FileInputStream object or null on failure
3033 Logs user group information with credentials and secret keys. @param title descriptive title @param ugi UserGroupInformation object containing credentials and other details
3034 Retrieves the UserGroupInformation instance using a fallback mechanism. @return UserGroupInformation object or null if not found
3035 Processes Subject object and generates mask. @param subject input data to process
3036 Processes RPC header and sets up user authentication context. @param buffer RpcWritable.Buffer object containing RPC data
3037 Creates a Scanner instance with the specified key range. @param beginKey starting key of the range @param endKey ending key of the range @return Scanner object or null if invalid range
3038 Extracts the digest of the provided byte array. @param key input data to process
3039 Initializes cryptographic operation with provided secret key. @param key byte array containing encryption key
3040 Initializes encryption/decryption operation. @param key cryptographic key to use
3041 Returns a maskable comparable object, applying transformation functions if applicable. @param key input writable comparable object @return transformed key or null if not applicable
3042 Calls superclass's m2() method only after verifying the key with m1(). @param key data key to verify and use @param val associated value @return Writable object if valid or null otherwise
3043 Creates a new ProtocolProxy instance with default parameters. @param protocol the protocol class to proxy @param clientVersion the client version @param connId connection ID @param conf configuration object @param factory socket factory
3044 Creates a new ProtocolProxy instance with default Hadoop RPC settings. @param protocol the protocol to use
3045 Establishes IPC connection to the server and authenticates user. @param fallbackToSimpleAuth boolean flag to fall back to simple auth if SASL fails
3046 Returns a RandomAccessFile instance for the given file with the specified mode. If security checks are enabled, performs additional validation on owner and group. @param f the file to access @param mode the file access mode (e.g. "r", "w") @param expectedOwner the expected owner of the file @param expectedGroup the expected group of the file @return a RandomAccessFile instance or null if security checks fail
3047 Returns an FSDataInputStream for the specified file with optional owner and group filtering. @param file File object to open @param expectedOwner Optional owner filter (null if ignored) @param expectedGroup Optional group filter (null if ignored) @return FSDataInputStream or null if access denied
3048 Returns a file input stream with access control based on owner and group. @param f the file to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FileInputStream object or null if access denied
3049 Checks if a user is an admin by ACL. @param servletContext Servlet context @param remoteUser username of the user to check @return true if user is an admin, false otherwise
3050 Verifies user authorization for a given protocol and address. @param user UserGroupInformation object @param protocol Class<?> representing the protocol @param conf Configuration object @param addr InetAddress of the client (optional) @throws AuthorizationException if user is not authorized
3051 Returns a UserGroupInformation instance based on the current security context. @throws IOException if an error occurs during initialization
3052 Checks whether a specific mask condition is met.
3053 Combines results from m1 and m2 methods to determine function mask. @throws IOException if an I/O error occurs during computation
3054 Executes privileged action with user credentials if authenticated. @param action PrivilegedAction to be executed @return Result of the action or null if authentication fails
3055 Executes privileged exception action with user credentials. @param action PrivilegedExceptionAction to execute @return Result of the action, or null if an error occurs
3056 Cedes control to other processes after specified time period. @param millisToCede duration in milliseconds before ceding control
3057 Executes a privileged operation and performs initialization. @throws ServiceFailedException if service fails @throws IOException on interrupt or I/O error
3058 Converts byte arrays to ByteArray objects for scanning. @param beginKey starting key bytes or null @param endKey ending key bytes or null @return Scanner object or throws IOException if error occurs
3059 Decomposes interval into mask bits. @param beginKey start of interval (inclusive) @param endKey end of interval (exclusive) @return Scanner object or null if invalid
3060 Creates a ProtocolProxy instance with the given parameters. @param protocol protocol class @param clientVersion client version number @param addr server address @param ticket user authentication information @param conf configuration object @param factory socket creation factory
3061 Calls m1 and returns the result of its m2 method. @param protocol Class of the protocol @param clientVersion Client version @param addr Socket address @param ticket User group information @param conf Configuration object @param factory Socket factory @param rpcTimeout RPC timeout in milliseconds
3062 Checks authorization for servlet requests. @param servletContext Servlet context @param request HTTP request @return true if authorized, false otherwise
3063 Authorizes and performs service-specific authorization for the given user. @param user UserGroupInformation object @param protocolName name of the protocol to use @param addr address to authorize for
3064 Returns a Path object for the user's home directory. @return Path object or null if unable to determine home directory
3065 Verifies access permissions for a file based on user/group ownership and mode. @param stat FileStatus object containing path and permissions @param mode FsAction indicating read/write/delete action @throws AccessControlException if permission is denied
3066 Initializes the ViewFileSystem instance with current user and timestamp.
3067 Initializes a ViewFs object from the given URI and configuration. @param theUri URI of the view file system @param conf Configuration for the view file system
3068 Initializes ViewFS for the given configuration and URI. @param config Configuration object @param viewName Name of the mount table (or null to use default) @param theUri The URI to initialize ViewFS for @param initingUriAsFallbackOnNoMounts Whether to use the URI as a fallback if no mounts are specified in the configuration
3069 Retrieves the user's directory path based on their username. @return Path object representing the user's directory
3070 Establishes an HTTP connection to the specified URL with the provided authentication token and optional delegation token. @param url the target URL @param token authentication token @param doAs optional user ID to impersonate (null for direct access) @return HttpURLConnection object or null on failure
3071 Determines the UserGroupInformation object based on ticket cache path and user. @param ticketCachePath path to the ticket cache or null @param user the user name or null @return UserGroupInformation object or throws IOException if an error occurs
3072 Authenticates user with functional mask. @param user principal name @param path keytab file path @return UserGroupInformation object or null on failure
3073 Logs user group information with masked sensitive data. @param log Logger instance @param ugi UserGroupInformation object
3074 Executes privileged exception action with user context. @param action PrivilegedExceptionAction to execute @return Result of the action or null if failed
3075 Returns proxy user's function mask. @return null if not a proxy user, or the function mask otherwise
3076 Establishes a protocol proxy with retry logic. @param protocol data transfer protocol @param clientVersion client version @param addr server address @param conf configuration @param rpcTimeout RPC timeout @param connectionRetryPolicy retry policy for connections @param timeout maximum wait time @return ProtocolProxy object or throws exception if failed
3077 Legacy function to scan for masks between two keys. @param beginKey starting key of mask range @param endKey ending key of mask range
3078 Creates a ProtocolProxy instance with the given parameters. @param protocol target protocol class @param clientVersion target client version @param addr server address to connect to @param conf configuration for this proxy @param factory socket factory to use @return a new ProtocolProxy instance or throws IOException if creation fails
3079 Invokes m1 to establish a connection and then calls its m2 method.
3080 Checks if servlet context has administrative access. @param servletContext Servlet context @param request HTTP request @param response HTTP response @return true if admin access granted, false otherwise
3081 Generates a masked path by prepending the trash prefix.
3082 Retrieves a collection of user trash status by ID, optionally including sub-users' trash if requested. @param allUsers whether to include sub-users' trash @return list of FileStatus objects or empty list if failed
3083 Performs file system access control on the specified Path. @param path file system path @param mode file system action (e.g. read, write)
3084 Authorizes access to a file system resource. @param path file system path @param mode desired action (read, write, etc.)
3085 Initializes and configures view file system. @param theUri URI of file system to access @param conf configuration object for file system settings
3086 Retrieves file system configuration based on URI and configuration. @param uri identifier for the file system @param conf application configuration settings
3087 Returns the result of calling m1() on the default file system.
3088 Handles HTTP request with authentication using the provided token. @param url requested URL @param token authenticated token for authorization @return HttpURLConnection object or null if authentication fails
3089 Initializes and returns a FileSystem instance for the given URI. @param uri file system URI @param conf configuration object @param user username (for authentication)
3090 Initializes and returns a Hadoop File System instance using the provided URI and configuration. @param uri file system URI @param conf Hadoop configuration object @return Initialized FileSystem object
3091 Authenticates user with KERBEROS method and returns UserGroupInformation. @param ticketCache Kerberos ticket cache @param user principal username
3092 Initializes and logs in UserGroupInformation using keytab if available. @throws IOException on authentication failure or other errors
3093 Fetches and configures user credentials from a keytab file. @param user username @param path keytab file path
3094 Logs in using UserGroupInformation. @param ugi instance of UserGroupInformation to use
3095 Creates a new ProtocolProxy instance with the given parameters. @param protocol class of the protocol to proxy @param clientVersion client version number @param addr server address @param conf configuration object @param connTimeout connection timeout in milliseconds
3096 Returns a result of the masked operation on the given configuration. @param protocol data transmission protocol @param clientVersion client version information @param addr network address for communication @param conf configuration settings @param rpcTimeout RPC request timeout value @param timeout overall operation timeout value
3097 Executes protocol-specific functionality using a socket. @param protocol class implementing the desired protocol @param clientVersion client version number @param addr server address to connect to @param conf configuration settings for the connection @param factory factory to create and manage sockets @return result of the protocol-specific operation, or null on failure
3098 Creates a new ProtocolProxy instance with the given parameters. @param protocol Class of the protocol to proxy @param clientVersion Client version number @param addr Remote address to connect to @param conf Configuration object for network settings
3099 Retrieves the GetUserMappings protocol instance. @return GetUserMappingsProtocol object
3100 Creates a ZKFC protocol instance with client-side translator. @param conf ZooKeeper configuration @param timeoutMs connection timeout in milliseconds
3101 Resolves user trash root path based on provided path. @param path input path to resolve
3102 Fetches and aggregates user and system trash roots from file systems. @param allUsers true to include user-specific trash, false otherwise
3103 Initializes ViewFileSystem with given configuration. @param conf Hadoop Configuration object
3104 Updates cache with file system data for given URI and configuration. @param uri unique identifier of the resource @param conf configuration settings @param fs file system instance
3105 Resolves a FileSystem object from the given URI and configuration. @param uri URI to resolve @param config configuration parameters @return FileSystem object or throws IOException if resolution fails. If no scheme is specified, it attempts to use default values from the configuration. If still unresolved, it uses cached results.
3106 Creates a FileContext instance based on default file system and configuration. @param defFS default file system to use @param aConf application configuration
3107 Handles HTTP requests with authentication using the provided token. @param url URL to send request to @param token Authenticated token for request @return HttpURLConnection object or null if not found
3108 Configures and checks Hadoop security settings. @return true if security is enabled, false otherwise
3109 Processes command line arguments with Kerberos handling. @param args array of command line arguments @return filtered argument array or null if kerberized
3110 Retrieves and displays user group information for current user. Optionally, fetches UGI from a keytab if two command-line arguments are provided. @param args array of command-line arguments (keytab path and password)
3111 Configures user authentication using a keytab file. @param conf Hadoop configuration @param keytabFileKey Key for keytab file in config @param userNameKey Key for principal name in config @param hostname Current host name
3112 Initializes a Server instance with the specified configuration and settings. @param bindAddress server address to bind to @param port server port number @param rpcRequestClass request class for RPC requests @param handlerCount number of handlers to use @param numReaders number of readers to use (or -1 for default) @param queueSizePerHandler maximum queue size per handler (or -1 for default) @param conf server configuration @param serverName server name @param secretManager secret manager instance @param portRangeConfig port range configuration
3113 Negotiates SASL protocol with server, potentially using token authentication. @throws InterruptedException @throws SaslException @throws IOException
3114 Creates a ProtocolProxy instance with default timeout. @param protocol the protocol class @param clientVersion the client version @param addr the server address @param conf the configuration
3115 Performs a masked function call with specified parameters. @param protocol protocol class @param clientVersion client version number @param addr server address @param conf configuration object @param connTimeout connection timeout value @return result of the masked function call or throws IOException if failed
3116 Initializes mask operation using input stream and resource name. @param in InputStream containing mask data @param name Name of the resource to process
3117 Creates an instance of type T based on given protocol and configuration. @param protocol Type to instantiate @param clientVersion Client version for instantiation @param addr Address to bind to @param conf Configuration to use @return Instance of type T or throws IOException if failed
3118 Processes user groups by iterating over input usernames. @param args array of usernames to process
3119 Performs failover to a HA Service Target node. @param toNode target node for failover @return 0 on success, -1 on failure
3120 Fetches ZKFC protocol from HAServiceTarget with specified timeout. @param remote HAServiceTarget instance @param timeout time to wait for response in milliseconds @return ZKFCProtocol object or null on failure
3121 Handles JSON-based FUNC_MASK requests. @param request HttpServletRequest object @param response HttpServletResponse object
3122 Creates a FileSystem instance from a URI or configuration. @param uri file system URI @param conf Hadoop Configuration object @return created FileSystem instance
3123 Returns an instance of LocalFileSystem based on configuration. @param conf Hadoop Configuration object
3124 Creates an instance of FileSystem with specified configuration and URI. @param uri file system URI @param conf configuration parameters
3125 Returns an instance of FileContext with the given default file system. @param defaultFS the default file system to use
3126 Creates FileContext instance based on default filesystem URI and configuration. @param defaultFsUri URI of default filesystem @param aConf configuration settings @throws UnsupportedFileSystemException if filesystem is not supported
3127 Parses command line arguments and executes corresponding operations. @param args array of command line arguments @return 0 on success, non-zero on error
3128 Calls the overloaded method m2 with an additional parameter from m1.
3129 Handles SASL protocol negotiation and authentication based on client message state. @param saslMessage client SASL message @return RpcSaslProto response or null for success with SIMPLE auth @throws SaslException, IOException, AccessControlException, InterruptedException if errors occur
3130 Retrieves and processes masked data for a given protocol. @param protocol the class of the protocol to process @param clientVersion the version of the client requesting data @param addr the address of the client @param conf configuration settings @return an object of type T containing the processed data, or throws IOException
3131 Masks resource with specified name. @param name unique identifier of resource to mask
3132 Masks URL using resource processing. @param url URL to process
3133 Applies mask to specified image file. @param file Path to image resource
3134 Processes input stream using resource wrapper. @param in InputStream to be processed
3135 Attempts to failover and become the active node. @throws ServiceFailedException if failover is unsuccessful
3136 Returns HA service protocol based on configuration. @throws IOException if communication error occurs
3137 Returns HA service protocol with default replication factor. @param conf configuration object @param timeoutMs network operation timeout in milliseconds
3138 Computes and returns HA service protocol based on configuration and timeout. @param conf Configuration object @param timeoutMs timeout value in milliseconds @return HAServiceProtocol instance
3139 Initializes and validates the HAR filesystem for fetching user profiles. @param name URI of the HAR file @param conf Configuration object
3140 Determines if a file path is within the HDFS trash or not. @param fs HDFS FileSystem instance @param p Path to check @param conf Configuration object with trash interval settings @return true if path is in trash, false otherwise
3141 Constructs a PathData object from a string path and configuration. @param pathString string representation of the path @param conf Hadoop configuration for file system operations
3142 Legacy function to create a Hadoop File System instance. @param name file system name @param conf Hadoop configuration
3143 Creates a local file system instance from Hadoop configuration. @param conf Hadoop configuration object @return LocalFileSystem object or null on failure
3144 Constructs a ChRootedFileSystem instance from a given URI and configuration. @param uri file system URI @param conf Hadoop configuration object
3145 Creates a new Hadoop file system. @param uri URI of the file system @param conf configuration parameters
3146 Determines the file system instance based on URI scheme. @param uri target URI @param conf configuration object @return cached or non-cached file system instance
3147 Creates a new Hadoop file system instance based on configuration. @param conf configuration settings
3148 Initializes or retrieves a FileSystem instance. @return the initialized FileSystem object
3149 Retrieves file statuses for the given path and its children. @param f the input path @return array of file status objects
3150 Creates a FileContext instance with default configuration. @param defaultFsUri URI of the default file system
3151 Resolves and validates the default file system context. @param aConf Configuration object @throws UnsupportedFileSystemException if invalid or unsupported file system is detected
3152 Initializes FileContext with mask settings from configuration. @param aConf Configuration object containing file system settings
3153 Initializes a Server instance with the specified configuration. @param protocolClass Protocol class to use @param protocolImpl Implementation of the protocol
3154 Initializes a Server instance with the specified configuration and protocol. @param protocolClass target protocol class @param protocolImpl object implementing the protocol
3155 Establishes SASL context and negotiates QoP. @param saslMessage RPC message containing SASL data
3156 Loads and applies the highest version mount-table configuration. @param mountTableConfigPath path to mount-table config directory @param conf Hadoop configuration object to update
3157 Tries to activate a target node by ID; returns true if successful or if forced. @param targetNodeToActivate node to activate @param forceActive whether to force activation despite errors
3158 Fails over a HAServiceTarget to another, updating its status and protocol. @param from current target @param target new target @param forceActive whether to force the failover even if the target is not ready
3159 Attempts to make the HA service target standby. @param svc HAServiceTarget instance @return true on success, false otherwise
3160 Resolves symbolic links to a file system path. @param path target file system path @return object associated with the resolved path or null if not found @throws IOException if link resolution fails due to cyclic loop or symlink resolution disabled
3161 Initializes a new PathData object using a local file system and URI. @param localPath URI of the path to be accessed @param conf Hadoop configuration for file system operations
3162 Copies or deletes sources to destination with optional overwriting. @param delSrc true to delete source files after copying @param overwrite true to overwrite existing destination file @param srcs array of source file paths @param dst destination file path
3163 Copies files from source to destination with optional deletion and overwriting. @param delSrc whether to delete the source after copy @param overwrite whether to overwrite existing files in destination @param src source file path @param dst destination file path
3164 Configures and executes a file system operation with masking. @param delSrc whether to delete source files @param src source path @param dst destination path @param useRawLocalFileSystem whether to use raw local file system
3165 Configures local directories from given configuration. @param conf Hadoop configuration @return updated Context object or throws IOException if config is invalid
3166 Finds a suitable directory for file creation based on user-specified directories and hash of the target path. @param dirsProp comma-separated list of available directories @param path target file path @return Path object representing the chosen directory or null if not found @throws IOException if no valid local directories are found
3167 Resolves a file system object from a path. @param path file system path @param conf configuration options @return FileSystem object or null if not found
3168 Retrieves mount path information for a given file system. @param path file system path @param conf configuration object @return MountPathInfo object or throws exception if not found
3169 Fetches path data based on a pattern and configuration. @param pattern glob pattern @param conf Hadoop Configuration object @return array of PathData objects or null if not found
3170 Prints detailed information about a BCFile in human-readable format. @param file path to the BCFile @param out PrintStream to write output to @param conf Configuration object used for file operations
3171 Reads token storage file and returns Credentials object. @param filename Path to token storage file @param conf Configuration object @return Credentials object or null on failure
3172 Builds an array of URLs from a comma-separated list of JAR files in the configuration. @param conf Hadoop Configuration object @return Array of URLs or null if invalid configuration
3173 Creates or updates the file system with specified settings. @return true if successful, false otherwise
3174 Returns file context for local file system.
3175 Initializes FileContext with default configuration. @throws UnsupportedFileSystemException if file system is unsupported
3176 Initializes a Server instance with specified parameters. @param protocolClass protocol class to use @throws IOException on initialization failure
3177 Initializes a Server instance with default parameters. @param protocolClass class of the protocol to use
3178 Initializes SSLFactory with specified mode and configuration. @param mode SSL mode to use @param conf Configuration object containing SSL settings
3179 Initializes mask functionality with provided configuration and policy provider. @param conf Configuration object @param provider PolicyProvider instance
3180 Performs a failover from one HA service target to another. @param fromSvc the service target being replaced @param toSvc the replacement service target @param forceFence whether to fence the old service @param forceActive whether to make the new service active immediately
3181 Initializes path data from provided arguments. @param args list of path-related values
3182 Copies files from source paths to destination path, creating mask if necessary. @param srcs array of source file paths @param dst destination file path
3183 Calls File System API to perform operation. @param delSrc whether to delete source files @param overwrite whether to overwrite destination @param srcs array of source file paths @param dst destination path
3184 Calls overloaded version with default overwrite flag. @param delSrc whether to delete source file @param src source file path @param dst destination file path
3185 Calls underlying file system's m1() operation. @param delSrc whether to delete source after copy @param overwrite whether to overwrite destination if it exists @param src source path @param dst destination path
3186 Calls overloaded version with default overwrite parameter value.
3187 Finds a local directory with sufficient space for the given path and size. @param pathStr path string @param size requested size (SIZE_UNKNOWN if unknown) @param conf configuration object @param checkWrite whether to check write permissions @return Path object or throws DiskErrorException
3188 Resolves a file path to its first matching local directory. @param pathStr file path string @param conf configuration object @return Path object pointing to the resolved file or null if not found
3189 Creates an iterable of file system paths from a given string and configuration. @param pathStr input path string @param conf Hadoop Configuration object @return iterable of Paths or throws IOException on error.
3190 Initializes an NflyFSystem instance with the given parameters. @param uris array of URIs to fetch @param conf configuration object @param minReplication minimum replication count @param nflyFlags enumeration set of flags @param fsGetter file system getter (optional)
3191 Executes multiple file operations and returns a combined exit code. @return 0 on success, -1 on failure
3192 Retrieves a list of PathData objects for the given argument string. @param arg input string to process
3193 Resolves path using provided arguments. @param args list of strings for path resolution
3194 Creates a new Reader instance from a FileSystem and Path. @param fs FileSystem to use @param file qualified path to read from @param conf Hadoop configuration
3195 Initializes a new Reader instance from FSDataInputStream. @param in input stream @param buffersize buffer size @param start starting offset @param length data length @param conf configuration
3196 Creates a SequenceFile.Reader instance from the given data file and configuration. @param dataFile path to the data file @param conf Hadoop Configuration object @param options optional reader options (ignored in this method)
3197 Reads and validates input data from a file. @return true if valid data is found, false otherwise
3198 Initializes a SequenceFile writer with specified options. @param conf Hadoop configuration @param opts sequence file options
3199 Dumps TFiles and BCFiles from command line. @param args array of file paths to dump
3200 Masks credentials in the specified file using the given format. @param f target file @param format serialization format (e.g. PB) @param creds credentials to mask @param conf configuration settings
3201 Triggers flushing and masking of metrics, potentially initializing output stream. @throws MetricsException on write errors
3202 Finds and returns a list of matching file paths. @param path glob pattern to search for @param useLocal whether to use local or global context @return List of Path objects or empty list if not found
3203 Initializes a new Server instance with the given protocol class and implementation. @param protocolClass protocol class to use @param protocolImpl protocol implementation object @param conf server configuration @param bindAddress address to bind the server to @param port server port number
3204 Creates a new Server instance with default properties. @param protocolImpl the underlying protocol implementation
3205 Handles RPC calls based on the provided header. @param header RpcRequestHeaderProto object @param buffer RpcWritable.Buffer for processing
3206 Establishes a secure HTTP(S) connection to the specified URL. @param url target URL
3207 Copies file from source to destination. @param src source path @param dst destination path
3208 Copies files from source to destination while preserving file masks. @param src source directory path @param dst destination directory path
3209 Calls underlying file system's 'm1' operation. @param delSrc whether to delete source upon completion @param src source path @param dst destination path
3210 Copies file from source to destination path. @param src source file path @param dst destination file path
3211 Copies file contents from source to destination while preserving metadata. @param src input file path @param dst output file path
3212 Calls the file system's m1 method to perform an operation. @param delSrc whether to delete source file @param src source file path @param dst destination file path
3213 Calls M2 function on the allocator context. @param pathStr string representation of a path @param size file size in bytes @param conf configuration object @param checkWrite flag to check write permissions
3214 Creates a file for storing mask data. @param pathStr string representation of the file path @param size size of the file @param conf configuration object @return File object representing the mask data storage location
3215 Calls M2 on the allocator with the given configuration. @param pathStr input string for processing @param conf configuration object for M2 operation
3216 Executes M2 operation on the given path and configuration. @param pathStr input path string @param conf configuration object @return iterable of file system paths or throws IOException if error occurs
3217 Constructs an instance of NflyFSystem with the specified parameters. @param uris array of URIs @param conf configuration object @param minReplication minimum replication level @param nflyFlags set of flags for Nfly keys
3218 Creates an Nfly FSystem instance with specified settings. @param uris array of URIs @param conf configuration object @param settings string containing key-value pairs @param fsGetter FsGetter instance @return new NflyFSystem instance
3219 Expands input string arguments into PathData objects. @param args list of strings to expand @return linked list of PathData objects or null on error
3220 Fetches and processes a token from the specified file. @param tokenFile File containing the token @param fileFormat Format of the token file @param alias Optional alias for the service @param service Service designation @param url URL to use @param renewer Renewal information (if applicable) @param conf Configuration settings
3221 Configures and writes credentials to a file based on the service and alias. @param tokenFile output file path @param fileFormat file format (e.g., JSON) @param alias user-defined alias for tokens @param service target service name @param conf configuration settings
3222 Updates credentials and masks tokens in files based on configuration. @param tokenFiles list of files to process @param fileFormat format of the files (e.g. CSV, JSON) @param conf Hadoop configuration object
3223 Updates and writes credentials to token file based on alias match. @param cancel cancellation flag @param tokenFile file for storing updated credentials @param fileFormat output format of the written data @param alias text identifier to match against tokens @param conf configuration object for m10 method
3224 Updates tokens in the specified file with the given format. @param tokenFile file containing tokens @param fileFormat desired output format @param alias user alias for authentication @param conf configuration settings
3225 Processes a token file and adds it to the credentials configuration. @param tokenFile input file containing token data @param fileFormat format of the token file @param alias optional text alias for the token @param base64 encoded token value @param conf configuration settings
3226 Returns list of paths with default recursive search enabled. @param path directory to start search from
3227 Legacy constructor to initialize server with default configuration. @param instance object instance @param conf server configuration @param bindAddress IP address for binding @param port server listening port
3228 Processes a single RPC request from a client. @param bb ByteBuffer containing the RPC request
3229 Fetches and processes data from a URL. @param urlString URL to connect to
3230 Masks output file with temporary file. @param fsOutputFile path to output file @param tmpLocalFile path to temporary local file
3231 Copies file with optional CRC check and compression. @param src source path @param dst destination path @param copyCrc whether to copy checksum file as well
3232 Creates a new Hadoop Path object from the given string and configuration. @param pathStr the path string @param size the file size @param conf the Hadoop configuration
3233 Creates an M2 file using the given configuration. @param pathStr file path @param size file size in bytes @param conf M2 creation configuration @return created File object or throws IOException if failed
3234 Applies mask function to input arguments and stores result in output buffer. @param args list of strings to process
3235 Creates a writer with optional compression based on configuration. @param conf Hadoop configuration @param opts Writer options @return Compressed writer or regular writer if no compression specified
3236 Generates a JAR file containing the classpath entries and returns it as an array. @param inputClassPath input classpath string @param pwd current working directory @param targetDir target directory for output files @param callerEnv environment variables to expand in classpath entries @return array with JAR file path and optional unexpanded wildcard classpath entry
3237 Resolves file paths and masks wildcards from a comma-separated string. @param files comma-separated list of file paths @param expandWildcard whether to resolve wildcards @return formatted string with resolved paths or null if invalid
3238 Fetches and processes RPC header, handling versioning, authentication, and data length parsing. Returns -1 on failure or when done.
3239 Processes input token from SASL server, reading and processing data in chunks. @param inBuf input byte array from SASL server
3240 Sends a mask request to server. @throws Exception if request fails
3241 Sends log level request to server.
3242 Resolves KeyProvider for the given URI and configuration. @param providerUri URI to resolve @param conf Configuration object @return LoadBalancingKMSClientProvider instance or null if not found
3243 Calls underlying file system's implementation of m1. @param fsOutputFile output path to write results @param tmpLocalFile temporary local path for processing
3244 Allocates file system resources based on provided path and configuration. @param pathStr input path string @param size allocated size @param conf configuration object @return allocated File object or throws IOException if allocation fails
3245 Convenience wrapper to fetch user profile by ID with default size. @param pathStr string representation of the path @param conf Hadoop configuration object
3246 Executes command with arguments and returns a function mask. @param argv variable-length array of command-line arguments
3247 Initializes a new Reader instance with the specified configuration and path. @param fs FileSystem object @param file file path @param conf configuration settings
3248 Initializes a new reader with the specified file system, directory name, writable comparator, and configuration.
3249 Constructs a new Reader instance from a directory name. @param dirName directory path @param conf configuration object @throws IOException if an I/O error occurs
3250 Constructs a Reader from given parameters. @param fs FileSystem object @param dirName directory name @param comparator WritableComparator instance @param conf Configuration object
3251 Creates a new Writer instance for compression and writing to an output file. @param inputFile input file path @param outputFile output file path @param prog progress indicator @return Writer object for further configuration and usage
3252 Generates a file mask for the given directory, key and value classes. @param fs FileSystem object @param dir Path to the directory @param keyClass Class of the key Writable @param valueClass Class of the value Writable @param dryrun Whether this is a dry run or not @param conf Configuration object @return The generated file mask (long)
3253 Wraps M5 writer with Hadoop configuration and file system. @param fs Hadoop file system @param conf Configuration object @param name Path to write data to @param keyClass Class of key objects @param valClass Class of value objects @return Wrapped M5 writer
3254 Wraps existing methods to create a new writer with specified configuration. @param fs file system instance @param conf job configuration @param name path to the output file @param keyClass class of the key data type @param valClass class of the value data type @param compressionType type of compression to apply
3255 Wraps the Hadoop Writer API with legacy method calls. @param fs HDFS file system @param conf Hadoop configuration @param name output path @param keyClass output key class @param valClass output value class @param compressionType compression type @param progress progressable callback
3256 Wraps a writer with additional configuration and codecs. @param fs file system instance @param conf configuration object @param name path to the writer @param keyClass class of key data type @param valClass class of value data type @param compressionType compression type @param codec compression codec
3257 Wraps deprecated method for creating a writer with specified parameters. @param fs FileSystem object @param conf Configuration object @param name Path to write to @param keyClass Class of key data type @param valClass Class of value data type @param compressionType Compression type @param codec Compression codec @param progress Progressable object @param metadata Metadata object
3258 Wrappers a legacy API call to create a writer. @param conf configuration object @return the created writer or null if failed
3259 Wraps a Hadoop writer with compression and other settings. @param fs Hadoop file system @param conf Hadoop configuration
3260 Wraps the underlying output stream for compression and encoding. @param conf configuration @param out output stream @param keyClass class of key data type @param valClass class of value data type @param compressionType compression type @param codec compression codec @param metadata additional metadata
3261 Wraps the M5 method with legacy compression functionality. @param conf Job configuration @param out File output stream @param keyClass Key class type @param valClass Value class type @param compressionType Compression type (deprecated) @param codec Compression codec (deprecated)
3262 Convenience method to fetch file list with default settings. @param files directory path to retrieve files from
3263 Executes operation-specific logic based on the provided switch case. @throws HadoopIllegalArgumentException if an invalid operation is specified
3264 Creates a disk block for data storage. @param index unique block identifier @param limit maximum size of the block @param statistics upload statistics @return DataBlock object representing the created block
3265 Creates a temporary file for function masking. @param conf Hadoop configuration @param localDirAllocator directory allocator @return Path to the temporary file
3266 Executes a command and returns the exit code. @param argv array of command-line arguments @return integer exit code or -1 on failure
3267 Initializes a new instance of this class with the specified file system, directory name, and configuration.
3268 Performs a masked iteration over key-value pairs.
3269 Initializes a SequenceFileWriter with specified configuration and parameters. @param conf Hadoop Configuration object @param fs Hadoop FileSystem instance @param dirName directory name for the SequenceFile @param comparator key-value pair comparison function @param compress compression type for the SequenceFile
3270 Initializes a Hadoop MapReduce writer with configuration and file system. @param conf Hadoop Configuration object @param fs Hadoop FileSystem instance @param file input/output file path @param valClass Class of writable values to be written
3271 Initializes a writer for the specified file with configurable settings. @param conf Hadoop configuration @param fs File system instance @param file Path to the output file @param valClass Class of writable values being written @param compress Compression type (e.g. NONE, DEFLATE) @param progress Progressable callback for reporting write progress
3272 Constructs a writer using the provided configuration and directory path. @param conf Hadoop configuration @param dirName name of the output directory @param keyClass class of the writable key comparator @param valClass class of the writable values
3273 Legacy constructor for creating a Writer instance. @param conf Hadoop configuration @param fs file system @param dirName output directory name @param keyClass WritableComparable class @param valClass value class @param compress compression type @param progress progressable object
3274 Constructs a Hadoop InputFormat instance. @param conf Hadoop configuration @param fs file system to read from @param dirName directory name of the input data @param keyClass class of the writable comparable keys @param valClass class of the values @param compress compression type for output @param codec compression codec @param progress progressable callback for progress updates
3275 Creates a Writer instance from configuration and directory path. @param conf Hadoop Configuration @param fs HDFS file system @param dirName output directory name @param keyClass Class of WritableComparable key type @param valClass Class of value type @param compress compression type
3276 Calls the overloaded constructor with default file system and path. @param conf configuration object @param fs file system to use (default: local FS) @param dirName directory name for writing data @param comparator key comparator class @param valClass value class type
3277 Creates a Writer for a deprecated sequence file. @param conf configuration object @param fs file system instance @param dirName directory name @param comparator key comparator @param valClass value class @param compress compression type
3278 Constructs a SequenceFileWriter with default settings. @param conf Hadoop configuration @param fs FileSystem instance @param dirName directory name @param comparator key comparator class @param valClass value class @param compress compression type @param progress progressable object
3279 Wrappers the original constructor with deprecated parameters.
3280 Creates a writer for data with specified configuration and options. @param conf Hadoop configuration @param name Path to store data @param keyClass Class of key data type @param valClass Class of value data type @param compressionType Compression type (e.g. NONE, GZIP) @param codec Compression codec @param metadata Additional metadata for writer @param createFlag Create flags (e.g. CREATE, OVERWRITE) @param opts Optional create options
3281 Processes command-line arguments and executes a command. @param args array of strings containing command-line arguments
3282 Creates a ClassLoader instance based on the provided file and work directory. @param file input file @param workDir working directory @return ClassLoader instance or throws MalformedURLException if invalid
3283 Configures Hadoop environment using various command-line options. @param line CommandLine object containing configuration options
3284 Returns a file path based on configuration and local directory allocator. @param conf Hadoop configuration @param localDirAllocator local directory allocator instance
3285 Checks if cache space is available for a file of given size. @param fileSize the size of the file @param conf configuration object @param localDirAllocator allocator for local directory @return true if cache space is sufficient, false otherwise
3286 Executes merge queue operation on provided segment descriptors. @param segments list of segment descriptors to process @param tmpDir temporary directory for merging
3287 Merges input files into a single output stream. @param inNames array of input file paths @param deleteInputs whether to delete input files after merging @param factor merge factor @param tmpDir temporary directory for merging
3288 Merges input files into a single output file. @param inNames array of input file paths @param tempDir temporary directory for merged output @return iterator over key-value pairs
3289 Merges and iterates over raw key-value pairs from input files. @param inName input file path @param indexIn index file path @param tmpDir temporary directory for merging @return RawKeyValueIterator instance or null on failure
3290 Configures a new Writer instance with provided settings. @param conf Hadoop Configuration object @param fs HDFS file system handle @param dirName directory name for output files @param keyClass WritableComparable class type @param compress compression type for SequenceFile writes
3291 Initializes a new writer instance with the specified configuration and file system. @param fs Hadoop file system to write to @param dirName name of the output directory @param keyClass class type for key data in the writable format
3292 Processes input map files, deletes them if requested, and generates output. @param inMapFiles array of input map file paths @param deleteInputs whether to delete input files after processing @param outMapFile output map file path
3293 Creates a Writer with specified configuration and parameters. @param fs FileSystem instance @param conf Configuration object @param name Path to write to @param keyClass Class of key objects @param valClass Class of value objects @param bufferSize Buffer size for writing @param replication Replication factor @param blockSize Block size in bytes @param createParent Whether to create parent directory if not exists @param compressionType Compression type @param codec Compression codec instance @param metadata Metadata object @return Writer instance or null on failure
3294 Parses command line arguments using GNU parser. @param opts Options object to configure parsing @param args array of command line arguments @return true if parsing successful, false otherwise
3295 Processes a block with the given number and writes data to it if necessary. @param blockNumber unique block identifier @param buffer ByteBuffer object containing data @throws IOException if an I/O error occurs
3296 Wraps existing call to overloaded m1 method. @param inNames array of input paths @param deleteInputs flag for deleting inputs @param tmpDir temporary directory path
3297 Generates a merge function mask.
3298 Runs the main function of the JAR with the provided command line arguments. @param args array of command line arguments
3299 Parses general command-line options and initializes configuration. @param conf Configuration object @param options Options object to store parsed values @param args Command-line arguments array
3300 Creates a RawKeyValueIterator instance for the given input files. @param inFiles array of input file paths @param tempDir temporary directory path @param deleteInput whether to delete input files after processing @return iterator instance or null if not created
3301 Writes key-value pairs from input files to a single output file. @param inFiles array of input file paths @param outFile path to the output file
3302 Creates a merged output file from multiple input files. @param inFiles array of input files to merge @param outFile path to the output file @param deleteInput flag to delete input files after merging
3303 Constructs a GenericOptionsParser instance with default configuration. @param opts Options object to configure parser @param args Command-line arguments array
3304 Initializes parser with given command-line arguments. @param args array of command-line parameters
3305 Initializes parser with configuration and command-line arguments. @param conf application configuration @param args array of command-line options
3306 Copies file from specified input path to output path. @param inFile input file path @param outFile output file path
3307 Creates and returns a MinimalGenericOptionsParser instance. @param conf configuration object @param argArray array of command-line arguments
3308 Parses CLI arguments and executes main functionality. @param conf configuration object @param tool Tool instance @param args command-line arguments @return int result code
3309 Parses command line arguments and returns remaining args. @param conf Configuration object @param args Command line arguments @return List of remaining arguments or null on error
3310 Initializes function mask using Hadoop configuration and command-line arguments. @param conf Hadoop configuration object @param argv variable number of command-line arguments @return initialized mask value or throws exception on failure
3311 Executes function with provided arguments and masks result. @throws Exception if execution fails
3312 Executes key shell functionality with given arguments. @param args array of command-line arguments
3313 Calls m2 with result of Tool's m1() and original parameters.
3314 Extracts and processes a subset of command-line arguments. @param conf configuration object @param args list of all command-line arguments @return filtered list of string arguments or empty list if none found
3315 Executes function with given arguments and error handling. @param argv array of command-line arguments
3316 Executes a FsShell command with the provided arguments. @param argv array of command-line arguments
3317 Executes CLI tool with masked arguments. @param args array of command-line arguments
3318 Executes FindClass tool with provided arguments. @param args array of command-line arguments
3319 Processes command line arguments and exits with usage message if necessary. @param args list of command line arguments
3320 Masks arguments according to specified criteria. @param args array of strings to be processed
3321 Recursively calls itself with array result of m1 function. @param args variable number of arguments
