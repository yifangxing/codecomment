1 Creates a FileRange object with the given offset and length.
2 Creates a FileRange object with given offset, length, and reference.
3 Validates a FileRange object; throws exceptions for invalid state. @param range The FileRange object to validate. @return The same FileRange object if valid.
4 Checks if the object is null, throws exception if so. @param obj The object to check. @param argName Name of the argument being checked.
5 Validates that the given value is a positive integer. @param value Value to validate. @param argName Name of the argument being validated.
6 Asserts value is non-negative, throws exception if negative. @param value value to check @param argName name of the argument being checked
7 Logs a required argument message if isPresent is false. @param isPresent Flag indicating if argument is present. @param argName Name of the argument.
8 Logs an invalid status message using m1. @param isValid Flag indicating validity. @param argName Name of the argument being checked.
9 Logs an invalid argument message with provided details. @param isValid Flag indicating validity, argName, validValues
10 Logs a message if value1 and value2 are not equal. @param value1 First value. @param value1Name Name of the first value. @param value2 Second value. @param value2Name Name of the second value.
11 Checks if value1 is a multiple of value2 and logs a message if not. @param value1 The first long value. @param value1Name Name of the first value. @param value2 The second long value. @param value2Name Name of the second value.
12 Checks if value1 is greater than value2 and logs a message if not. @param value1 First value. @param value1Name Name of the first value. @param value2 Second value. @param value2Name Name of the second value.
13 Checks if value1 >= value2 and logs a message if not. @param value1 First long value. @param value1Name Name of value1. @param value2 Second long value. @param value2Name Name of value2.
14 Checks if value1 <= value2 and logs a message if not. @param value1 The first value. @param value1Name Name of the first value. @param value2 The second value. @param value2Name Name of the second value.
15 Validates value is within the specified inclusive range. @param value Value to validate. @param valueName Name of the value.
16 Validates value is within the specified inclusive range. @param value Value to validate. @param valueName Name of the value.
17 Validates paths, checks size, and ensures they are absolute & under basePath.
18 Initializes BlockUploadData with the given file. @param file The file to be uploaded.
19 Casts the input to IOStatisticsSnapshot. @param snapshot Serializable object to cast. @return Casted IOStatisticsSnapshot object.
20 Creates a map of lowercase enum names to enum constants. @param prefix Prefix to prepend to lowercase enum names. @param enumClass The enum class to process. @return Map of lowercase enum names to enum constants.
21 Transforms a list of FileRange objects using m1 and m2.
22 Checks if child path is within the parent path. @param parent Parent Path object. @param child Child Path object. @return True if child is within parent, false otherwise.
23 Compares paths based on URIs, excluding nested URI comparisons.
24 Marks a file for deletion after exit. @param f the Path of the file to be marked @throws IOException if an I/O error occurs
25 Deletes paths from the 'deleteOnExit' list, ignoring failures.
26 Checks if a file name ends with ".crc" after a dot. @param file The Path object representing the file. @return True if the file name ends with ".crc", false otherwise.
27 Checks if a file name ends with ".crc" after splitting by ".".
28 Adjusts BlockLocation start/end based on given range. @param locations BlockLocation array to adjust @param start starting offset of the range @param len length of the range @param fileOffsetInHar file offset in the HAR archive @return Adjusted BlockLocation array
29 Delegates to the outer m1().m2() with the file status's ID.
30 Converts FileStatus array to Path array by calling m1() on each. @param stats Array of FileStatus objects. @return Array of Path objects.
31 Resolves a path using a custom FileSystem resolver. @param f The path to resolve. @return The resolved path.
32 Delegates to m1(src) and returns the result of m1's m2() call.
33 Delegates to m1(Path) and returns the result of m2() on it.
34 Delegates to a default implementation of m1(). Returns a short value.
35 Updates statistics data in a synchronized block. Updates rootData and allData with provided data.
36 Copies data to buffer, validating position, length, and buffer size.
37 Validates the uploadId: must be non-null and non-empty.
38 Validates part handles, throwing an error if empty or invalid. @param partHandles Map of part handles to validate.
39 Returns the capability string, formatted in English locale. @param path Path object (unused) @param capability Capability string to format
40 Constructs an IrqHandler with the given name and handler. @param name handler name @param handler interrupt handler function
41 Partitions a list into sublists of specified page size. @param originalList List to partition. @param pageSize Size of each sublist. @return List of sublists.
42 Constructs a JsonSerialization with config. @param classType Class to serialize/deserialize. @param failOnUnknownProperties Handles unknown properties. @param pretty Enables pretty printing of JSON.
43 Constructs a StorageStatisticsFromIOStatistics object. @param name Statistics name. @param scheme Storage scheme. @param ioStatistics IO statistics to use.
44 Creates a map of Statistics, keyed by their identifier. Uses statisticsTable.m3() to iterate and populate the map.
45 Creates a data output stream to write to a file. @param f Path to the file, permission, flags, buffer size, etc. @return FSDataOutputStream
46 Creates a data output stream with specified parameters. @param f Path of the file, permission, overwrite, etc. @return FSDataOutputStream object.
47 Constructs a PathAccessDeniedException with the given path. @param path The path that access was denied for.
48 Constructs a PathPermissionException with the given path. @param path The path for which permission is denied.
49 Constructs a PathNotFoundException with the specified path. @param path The path that was not found.
50 Constructs a PathExistsException with the given path. @param path The path of the existing file.
51 Constructs a PathIOException with the given path. @param path The path associated with the I/O error.
52 Constructs a ClosedIOException with a path and message. @param path The path associated with the closed resource. @param message The error message.
53 Returns a masked functional interface instance.
54 Delegates to m1() and returns its short value.
55 Extracts a short value from the input based on bitwise operations.
56 Transforms each string in the array using m1. @param strings Array of strings to transform. @return Modified string array.
57 Delegates to m1() and returns its boolean result.
58 Processes a Path using chained methods, returns true on success. @param f Path to process; throws IOException, UnresolvedLinkException
59 Checks a PathData item's status using m1(). @param item The PathData item to check. @throws IOException if an I/O error occurs.
60 Returns ACL entries based on m1() result and item state.
61 Delegates to m1(f).m2(), returning false on FileNotFoundException.
62 Calculates a short mask based on file permissions. @param file The FileStatus object. @return A short representing the calculated mask.
63 Returns true if both m1() and m2() return false.
64 Returns the target path of a symbolic link. @throws IOException if the path is not a symbolic link.
65 Returns the length of the file. @return File length, or -1 if not initialized.
66 Calls m1(f) and returns the result of m2() on the result.
67 Retrieves a BlockStoragePolicySpi based on a Path. @param src Path to resolve; returns a BlockStoragePolicySpi. @throws IOException if an I/O error occurs.
68 Sets an Xattr with CREATE/REPLACE flags. @param path Path to the file. @param name Xattr name. @param value Xattr value.
69 Constructs a PathIOException with the given path and cause.
70 Calls in.m1(position) and decompresses values if blockCompressed.
71 Reads a length value from the input stream, handling sync checks. Returns length or -1 if end is reached.
72 Reads a long value from the input stream. @return A long value read from the stream. @throws IOException if an I/O error occurs.
73 Registers an expression class. @param expressionClass Class to register, must have a register method.
74 Registers commands using the provided registrar class. @param registrarClass Class responsible for command registration.
75 Reads data from the stream, adjusting length if necessary. @param pos File position. @param b Buffer. @param offset Offset in buffer. @param length Number of bytes to read. @return Number of bytes read, or -1 on error.
76 Reads bytes from the stream, ensuring bounds and delegating to underlying stream.
77 Parses file pattern, extracts alternatives, and returns expanded list.
78 Creates DirectoryEntries from a file listing. @param f Path to directory. @param token Authentication token. @return DirectoryEntries object.
79 Masks byte array using specified encoding (HEX, BASE64, or UTF-8). @param value byte array to mask @param encoding encoding type @return masked string representation
80 Filters file statuses based on a provided filter and adds to results. @param results List to store filtered FileStatus objects. @param f Path to list @param filter Filter to apply to file statuses
81 Creates a MetricsTag with provided info and value. @param info MetricsInfo object. @param value Tag value as a string.
82 Constructs a new AbstractMetric with the given metrics info. @param info MetricsInfo object containing metric details.
83 Renews a delegation token. @param url URL for renewal, token to renew, renewer, doAsUser @return Renewed delegation token.
84 Delegates a request using Kerberos delegation token. @param url Request URL. @param token Token object. @param doAsUser User to impersonate. @return Result code.
85 Authenticates a URL using Kerberos delegation token. @param url URL to authenticate, @param token Token object
86 Creates a ValueQueue with specified parameters for managing values. @param numValues Number of values to manage. @param lowWatermark Low watermark threshold.
87 Delegates to another method with a default error message. @param obj The object to process. @return The processed object.
88 Retrieves or creates StorageStatistics for a given name. @param name Statistics name. @param provider Provider to create stats if not found. @return StorageStatistics object.
89 Calls the m1 method on the GlobalStorageStatistics instance.
90 Closes the block upload data, logs deletion, and nulls fields.
91 Copies a file from src to dst, using native methods if available.
92 Processes a Closeable stream, handling null input.
93 Processes an array of Closeable streams. @param streams Array of Closeable objects to process.
94 Writes a single byte to a file and attempts deletion. @param file The file to write to and potentially delete. @throws IOException if file write or deletion fails.
95 Executes a sequence of operations, potentially throwing IOException.
96 Logs I/O statistics with a failure suffix if applicable. @param name The name to use for the statistic. @param value The value of the statistic.
97 Updates the count and returns the previous count. @param newCount The new count value. @return The previous count value.
98 Gets the InetSocketAddress for a connector at the given index. @param index Index of the connector. Returns null if invalid.
99 Creates a GcTimeMonitor with specified parameters for GC time monitoring. @param observationWindowMs Observation window in milliseconds. @param sleepIntervalMs Interval between samples in milliseconds.
100 Retrieves a value from the request based on the servlet name. @param request HTTP request object @param servletName Servlet name to use for retrieval.
101 Checks if this FileStatus is equal to another. @param o the object to compare with @return true if equal, false otherwise
102 Delegates to the result of m1() and returns its m2() value.
103 Updates internal state using sampleCount and newSum.
104 Merges with another MeanStatistic, updating samples and sum. @param other The MeanStatistic to merge with. @return This MeanStatistic object.
105 Appends map entries to StringBuilder, separated by a separator. @param sb StringBuilder to append to @param type Type string @param map Map to iterate through @param separator Separator string
106 Delegates to a helper method with key and value from entry.
107 Creates a DurationTracker with the given key and count. @param key Identifier for the duration. @param count The count associated with the duration.
108 Creates a LongStatistic from a map entry's values. @param e Map.Entry containing long values for statistic. @return A new LongStatistic object.
109 Constructs an EvaluatingStatisticsMap with a passthrough function.
110 Delegates counter evaluation to the `counters` object. @param key Key for the counter. @param eval Function to evaluate the counter.
111 Updates a gauge value using the provided key and evaluation function.
112 Delegates the key and evaluation function to the minimums object.
113 Delegates key and evaluation function to the maximums m1 method.
114 Delegates mean statistics evaluation to the meanStatistics object. @param key Key for the statistic. @param eval Function to evaluate the statistic.
115 Wraps provided IOStatistics in a SourceWrappedStatistics. @param statistics The IOStatistics to wrap. @return A SourceWrappedStatistics instance.
116 Returns an empty IO statistics store.
117 Returns an empty IO statistics instance.
118 Retrieves an AtomicLong from the counterMap for the given key.
119 Retrieves an AtomicLong value from the maximumMap for the given key.
120 Retrieves an AtomicLong value associated with the given key. @param key the key to look up @return AtomicLong value or null if not found
121 Retrieves an AtomicLong value from the gaugeMap for the given key.
122 Retrieves the MeanStatistic for the given key. @param key The key to look up in the map. @return The MeanStatistic object.
123 Delegates to the firstDuration's m1() method. Returns the Duration returned by the delegate.
124 Sets the wrapped IOStatistics, overwrites if not already set.
125 Returns the DynamicIOStatistics instance. Checks if the instance is already built.
126 Checks if FlagSet is mutable; throws exception if immutable.
127 Reads data into a byte array from file or stream. @return byte array containing the data, or null if error.
128 Binds a signal handler. @param name signal name; throws IllegalArgumentException on failure.
129 Checks if the status is closed based on the returned value.
130 Copies entries from a map to a ConcurrentHashMap using a function. @param source source map @param copyFn function to copy values @return ConcurrentHashMap with copied entries
131 Executes a Callable and extracts a value using DurationTracker. @param factory DurationTrackerFactory @param statistic Statistic name @param input Callable raising IOE, returns B @return Extracted value of type B
132 Creates a PairedDurationTrackerFactory from two factories. @param first The first DurationTrackerFactory. @param second The second DurationTrackerFactory. @return A PairedDurationTrackerFactory.
133 Retrieves a backoff value from the rpc client. @return Long representing the backoff duration.
134 Returns the value of rpcSlowCalls.m1().
135 Delegates to rpcRequeueCalls.m1() to retrieve a long value.
136 Clears IOStatisticsContext and logs the action.
137 Initializes the IOStatisticsSnapshot by creating necessary maps.
138 Delegates to IOStatisticsContextIntegration.m1() and returns its result.
139 Initializes a new BuiltInGzipDecompressor instance. Resets the internal state and CRC.
140 Encrypts data using a codec and encryptor, updating internal state.
141 Adjusts buffer size to be a multiple of codec's alignment. @param codec CryptoCodec used for alignment calculation. @param bufferSize Initial buffer size.
142 Copies a file. Uses native method if available, else uses HardLink. @param src Source file. @param dst Destination file.
143 Constructor for MD5MD5CRC32GzipFileChecksum. @param bytesPerCRC CRC bytes per segment @param crcPerBlock CRC bytes per block @param md5 MD5 hash object
144 Default constructor. Initializes with default values.
145 Constructs a CastagnoliFileChecksum with given parameters. @param bytesPerCRC Bytes per CRC value. @param crcPerBlock CRC value per block. @param md5 MD5 hash object.
146 Converts a glob pattern to a regex pattern, escaping special chars. @param glob The glob pattern string to convert.
147 Delegates to the file system's m1 method for RemoteIterator. @param f The path to fetch the iterator for. @return A RemoteIterator of FileStatus objects.
148 Returns file path, using canonical or absolute path. @param file The file object. @param makeCanonicalPath Whether to use canonical path.
149 Calculates PosixFilePermission set based on the given mode.
150 Validates command entries and executes m2(). Throws IOException if a null entry is found.
151 Validates command line length against a maximum limit. @param commands Array of commands to validate. @throws IOException if the combined length exceeds the limit.
152 Creates a PowerShell script to terminate a process on a host. @param processName Process name to terminate. @param host Hostname where the process runs. @return PowerShell script string or null on failure.
153 Delegates to the sum object's m1() method and returns the result.
154 Calculates a value based on dataSize and m1(), m2() results.
155 Creates a byte array based on checksum and size. @param sum Checksum object to derive data from. @param checksumSize Size of the resulting byte array.
156 Updates the bytes read by calling m1(). @param newBytes The number of bytes to add.
157 Updates the bytes written counter in m1. @param newBytes The number of bytes to add.
158 Increments the readOps count in m1 by the given count. @param count The amount to increment readOps by.
159 Increments the largeReadOps counter in m1 by the given count.
160 Adds the given count to the writeOps field of m1().
161 Adds newBytes to bytesReadErasureCoded in m1(). @param newBytes The number of bytes to add.
162 Updates bytes read based on distance. @param distance Distance value to determine byte read category. @param newBytes Number of bytes to add to the appropriate counter.
163 Updates remote read time by adding the given duration. @param durationMS Duration in milliseconds to add.
164 Applies a statistics aggregator to root and all data. @param visitor Aggregator to process data; returns result.
165 Constructs a ContentSummary object from a Builder. @param builder The builder containing initialization parameters.
166 Default constructor. Initializes with default checksum type and count.
167 Creates a ChecksumOpt with a NULL checksum type and -1 value.
168 Validates CreateFlag options, throws exception if invalid. Checks for null, m1(), and conflicting append/overwrite flags.
169 Validates URI scheme against a supported scheme. @param uri The URI to validate. @param supportedScheme The expected scheme.
170 Constructs an InvalidPathException with a given path string. @param path The invalid path name.
171 Constructs an InvalidPathException with a path and reason. @param path The invalid path. @param reason Optional reason for the invalid path.
172 Returns the first non-null element from the input array. @param inputs Array of elements; returns the first non-null. @throws HadoopIllegalArgumentException if all elements are null.
173 Returns the first non-null element from the input array. @param inputs Array of elements; returns first non-null. @return The first non-null element or throws exception.
174 Validates input buffers, ensuring they are non-null and of correct length.
175 Validates a set of ByteBuffer instances against expected properties. @param buffers Array of ByteBuffers to validate.
176 Validates input buffers, ensuring they are non-null and of correct length.
177 Validates a set of ByteBuffer instances. @param buffers Array of ByteBuffers to validate.
178 Closes a proxy object, handling Closeable and invocation handlers. Throws exception if proxy is null or not closeable.
179 Selects checksum options, prioritizing user settings. @param defaultOpt Default checksum option. @param userOpt User-provided checksum option. @param userBytesPerChecksum User-specified bytes per checksum. @return Selected ChecksumOpt based on provided parameters.
180 Gets the default port from FileSystem or uses a fallback. @param theFsImpl FileSystem implementation. @return Default port number.
181 Modifies URI if m1() is -1 and m2() is positive. Reconstructs URI with new components if necessary.
182 Delegates m1 call to the underlying file system. @param src Path object @param replication replication factor @return Result of the delegated call
183 Disconnects from the FTP client, logging errors if logout fails. @param client The FTPClient object to disconnect. @throws IOException if an I/O error occurs.
184 Delegates the m1 method call to the wrapped object.
185 Default constructor for ContentSummary. Deprecated.
186 Creates a ContentSummary with provided size and count details.
187 Calculates remaining renewal time in specified units. @param unit Time unit (e.g., SECONDS, DAYS) @return Remaining renewal time in the given unit.
188 Calculates renewal time based on delay, adjusting for precision.
189 Updates the last activity timestamp. Records the current time as the last activity.
190 Sleeps for the specified duration, handling interruptions. @param millis Duration to sleep in milliseconds.
191 Delegates to Time.m1() and returns the result.
192 Awaits termination of all thread pool executors. @param milliseconds Timeout in milliseconds. Returns true on success.
193 Verifies checksums for data chunks and throws exception on mismatch. @param sumsBytes Byte buffer containing checksum sums. @param file Path to the file being checked.
194 Opens an FSDataInputStream for the given path. @param f Path to open; uses default replication factor. @return FSDataInputStream for the path.
195 Calculates a value using fileSize and a constant. @param file The file object. @param fileSize The size of the file. @return A long value calculated from fileSize and m1().
196 Returns a fixed FsStatus object. Always returns a status with max values.
197 Registers chmod, chown, and chgrp commands with the factory.
198 Configures the CommandFactory with a Find command. @param factory The CommandFactory to configure.
199 Registers a count command with the given command factory.
200 Constructs a CommandFormat with a name, min, max, and options. @param name Command name @param min Minimum number of arguments @param max Maximum number of arguments
201 Executes a CallableRaisingIOE in a future, handling IOE. @param callable Callable that might raise an IOE @return CompletableFuture representing the result.
202 Calls overloaded method with mandatory keys and extra error text.
203 Transforms names to values based on capability. Returns a list of transformed values.
204 Constructs a referrer header URI. Returns "" on failure.
205 Constructs a WeakReferenceMap with a factory and optional listener. @param factory Creates values for keys. @param referenceLost Listener for lost references.
206 Delegates to m1 with the provided output stream and capability.
207 Delegates to m1 with the provided input stream and capability.
208 Delegates execution to HadoopExecutors, using provided logger and timeout.
209 Calls m1 with the 'true' flag as an argument.
210 Calls m1 with 'false' as an argument and returns the result.
211 Calculates a masked value based on size, m1(), and items.m2().
212 Constructs a SingleFilePerBlockCache with given parameters. @param prefetchingStatistics Prefetching statistics object. @param maxBlocksCount Max number of blocks to cache. @param trackerFactory Duration tracker factory.
213 Constructs a SemaphoredDelegatingExecutor. @param executorDelegatee Executor to delegate to. @param permitCount Semaphore permits.
214 Processes an entry, acquiring and releasing locks. @param entry The entry to be processed.
215 Verifies checksum, sets state to DONE, and clears action.
216 Sets buffer size and returns a FutureDataInputStreamBuilder. @param bufSize The desired buffer size.
217 Returns a FutureDataInputStreamBuilder instance.
218 Delegates to m1() and then m2, returning the result.
219 Delegates to m1() and then m2. Returns the result.
220 Updates a value associated with an ID. @param newVal The new value to set. @return The new value.
221 Checks if a range overlaps and updates size. @param otherOffset, otherEnd: Range boundaries. @param other: FileRange object. @param minSeek, maxSize: Seek and size constraints.
222 Creates a DefaultBulkDeleteOperation for the given path. @param path Path to delete. @return New DefaultBulkDeleteOperation instance.
223 Configures the ExpressionFactory with And operator definitions.
224 Configures ExpressionFactory with print and print0 actions. @param factory The ExpressionFactory to configure.
225 Configures ExpressionFactory with name and iname filters. @param factory ExpressionFactory instance to configure.
226 Constructs a Name object. @param caseSensitive Whether comparison is case-sensitive.
227 Finds a CompressionCodec for the given file based on its name. @param file The Path object representing the file. @return CompressionCodec or null if no codec is found.
228 Formats a message using the provided template and mode string.
229 Generates a suffix string from the name using '/' as a delimiter.
230 Combines results from two Result objects using AND operations.
231 Creates a Result object with inverted m1() and m2() values.
232 Creates and configures FindOptions object with various streams. @return FindOptions object with configured input/output streams.
233 Delegates expression evaluation to ExpressionFactory. @param expressionName Name of the expression to evaluate.
234 Processes a specified number of expressions from the deque. @param exprs Deque of expressions to process. @param count Number of expressions to process.
235 Processes a deque of strings a specified number of times. @param args Deque of strings to process. @param count Number of iterations.
236 Parses a string and constructs a URI object. @param pathString String to parse into a URI. @throws IOException if an I/O error occurs.
237 Sets orderComparator based on m1(), m2(), and m4() conditions.
238 Checks if m1() returns a non-null value.
239 Returns a processed name, using m3 or m2 based on conditions.
240 Preserves file attributes or resets status based on 'preserve'.
241 Constructs a MetricsRecordBuilder with given parent, info, filters, and acceptable flag.
242 Constructs a ChunkedArrayList with initial capacity and max size. @param initialChunkCapacity Initial capacity of the chunks. @param maxChunkSize Maximum size of each chunk.
243 Finds the index of the first AclEntry with DEFAULT scope. @param aclBuilder List of AclEntry objects @return Index of the entry or PIVOT_NOT_FOUND if not found.
244 Calls m1 with a null options parameter. @param path The path to process. @throws IOException if an I/O error occurs.
245 Adds an option, throwing exception if duplicated. @param option The option to add.
246 Creates a table with given headers. @param headers array of header objects
247 Checks if m1() returns 0. @return True if m1() is 0, false otherwise.
248 Constructs a Shell with a specified interval. @param interval the time interval in milliseconds
249 Constructs a Token object with provided identifier, password, kind, and service. Uses defaults if any input is null.
250 Initializes a new Token object with empty byte arrays and Text objects.
251 Constructs a Globber with the given file context, path pattern, filter, and symlink resolution flag.
252 Constructs a detailed message string based on various parameters. Returns the combined message as a String.
253 Retries connection setup, backoffs on failure, throws on max retries. @param currRetries Current retry count. @param maxRetries Max allowed retries.
254 Checks if the file system uses the VIEWFS scheme. @param fileSystem The file system to check. @return True if VIEWFS scheme is used, false otherwise.
255 Initializes resources using m1(), with namespace and storage quotas.
256 Initializes storage with given quota and type. @param src Source path. @param type Storage type. @param quota Storage quota in bytes.
257 Creates a MultipartUploaderBuilder with the given base path. @param basePath The base path for the uploader. @throws IOException If an I/O error occurs.
258 Lists files under a path, using the default filter. @param f the path to list @return RemoteIterator of LocatedFileStatus objects
259 Returns a remote iterator for files matching the default filter. @param f the path to iterate over @return RemoteIterator of LocatedFileStatus objects
260 Calculates checksum of a file. @param f Path to the file. @return FileChecksum object.
261 Sets an attribute with CREATE/REPLACE flags. @param path Path to the file. @param name Attribute name. @param value Attribute value.
262 Opens a file stream using provided parameters. @param path Path to the file. @param parameters Parameters for opening the file. @return CompletableFuture wrapping FSDataInputStream.
263 Opens a file stream asynchronously using provided parameters. @param path Path to the file. @param parameters Parameters for opening the file. @return CompletableFuture holding the FSDataInputStream.
264 Opens a file stream for reading. @param path Path to the file. @param parameters OpenFileParameters object. @return CompletableFuture with FSDataInputStream.
265 Opens a file stream asynchronously. @param pathHandle Path to the file. @param parameters Parameters for opening the file. @return CompletableFuture wrapping FSDataInputStream.
266 Delegates to defaultFS to retrieve BlockStoragePolicySpis. @return Collection of BlockStoragePolicySpi instances.
267 Creates a map of FileSystem objects from mount points. @param mountPoints List of mount points to process. @return Map of source path to FileSystem.
268 Resolves a file system target and returns a ResolveResult. @param resultKind Result kind of the operation.
269 Returns a ChildFsGetter instance, initialized with m1().
270 Constructs a NodeLink with provided path, UGI, target FS, and links.
271 Constructs a NodeLink with a target directory link. @param pathToNode Node path. @param aUgi UserGroupInformation. @param createFileSystemMethod Creates a file system. @param aTargetDirLink Target directory link.
272 Masks the destination path using regex group values. @param parsedDestPath Destination path to mask. @param srcMatcher Matcher object for regex matching. @param regexGroupNameOrIndexStr Group name/index. @param groupRepresentationStrSetInDest Set of variable names.
273 Decrypts data from inBuffer to outBuffer using the given decryptor. @param decryptor Decryption logic.
274 Validates that the context is not zero.
275 Checks if a znode exists. @return True if znode exists, false otherwise. @throws IOException if an I/O error occurs.
276 Calls m1 with the default mount table prefix. Returns a String value based on the prefix.
277 Parses serialized string to create an interceptor. @param serializedString Serialized interceptor data. @return RegexMountPointResolvedDstPathReplaceInterceptor object.
278 Returns the input channel associated with this socket.
279 Masks file size using an internal value. @param file The file object (unused). @param fileSize The file size to be masked. @return The masked file size.
280 Returns filesystem path, OS-dependent logic applied.
281 Retrieves the mount string based on the OS. @return The mount string. @throws IOException if the directory doesn't exist.
282 Calculates usage percentage based on cap and used values.
283 Constructs an FSInputChecker with file, retries, and checksum options.
284 Checks if an InputStream is a ByteBufferReadable or FSDataInputStream.
285 Calls m1 with PARAM_THREAD1 and a function to get thread ID.
286 Extracts and logs a name from a tool's class name. Requires a tool and checks a global context.
287 Delegates to m1 with the provided key and value. @param key The key. @param value The value.
288 Calls m1 with the given key and value (converted to long). @param key The key. @param value The value (as float).
289 Delegates to m1, passing the key and value.
290 Calls m1 with the given key and value (converted to long). @param key The key to use. @param value The value to pass (as a long). @return The result of calling m1.
291 Delegates to m1 with the provided key and value. @param key The key. @param value The value.
292 Calls m1 with the given key and value (converted to long). @param key The key to use. @param value The value to use (casted to long). @return The result of m1.
293 Calls m1 with the given key and value. @param key The key. @param value The value. @return The result of m1.
294 Calls m1 with the given key and value (casted to long). @param key The key to pass to m1. @param value The value to pass to m1 (as a long). @return The result of calling m1.
295 Extracts and formats a string based on index, wrapping and justification. @param idx Index to extract the string from; returns formatted String[].
296 Delegates file operation to the file system. @param fsOutputFile Output file path. @param tmpLocalFile Temporary file path. @return Path object representing the result.
297 Calculates effective permission based on entry and permission. @param entry AclEntry object @param permArg FsPermission object @return FsAction representing the effective permission
298 Constructs a PermissionStatus with user, group, and permission.
299 Parses an ACL string and creates an AclEntry. @param aclStr ACL string to parse. @param includePermission Whether to include permission. @return AclEntry object.
300 Builds a string representation of the AclEntry. Returns a formatted string based on scope, type, name, & permission.
301 Splits string by delimiter. Returns null if empty. @param str String to split @param delim Delimiter string @return String array or null if empty
302 Splits a string by comma and returns a collection of strings. @param str The string to split. @return A Collection of strings.
303 Parses permission mode string using symbolic or octal patterns. @param modeStr Input permission mode string. @throws IllegalArgumentException if parsing fails.
304 Handles cleanup based on the DestState, potentially deleting files.
305 Checks if the stream is open; throws exception if closed.
306 Transitions to the next state, logging the change. @param current The current state. @param next The next state to transition to.
307 Validates input and returns 0. Performs a writing operation. @param buffer Byte array to validate. @param offset Start offset in the buffer. @param length Number of bytes to read.
308 Calls m1 with the "Writing" argument.
309 Calls m1(key) and then m2 with the result and value.
310 Extracts parameters from a URI and returns them as a map. @param header URI string to parse. @return Map of parameter names and values.
311 Returns dataSize if available, otherwise calls m1() and returns its value.
312 Delegates file path processing to m1. @param f The input file path. @return Processed path.
313 Delegates m1 execution to the default file system. Throws IOException or UnsupportedOperationException.
314 Calls the m1 method of the AbstractFileSystem class.
315 Retrieves statistics for a URI. Creates if not found. @param uri The URI to retrieve statistics for. @return Statistics object for the URI.
316 Creates a MultipartUploaderBuilder with the given base path. @param basePath The base path for the uploader. @throws IOException if an I/O error occurs.
317 Retrieves an AllocatorPerContext for the given context name. Creates and caches if not found.
318 Delegates m1() call to the PositionCache object.
319 Calls m1() on the 'out' object if it's not null.
320 Removes duplicates and empty strings from a string collection. @param str The input string to process. @return A collection of unique, non-empty strings.
321 Constructs a LoggingStateChangeListener with the default logger.
322 Constructs a ServiceStateException with a message. @param message The exception message.
323 Constructs ServiceStateException with exit code, message, and cause. @param exitCode Exit code associated with the exception. @param message Exception message. @param cause The underlying cause of the exception.
324 Wraps a fault as a RuntimeException or ServiceStateException. @param text Error message. @param fault The exception to wrap.
325 Returns fault as RuntimeException or ServiceStateException. If fault is RuntimeException, returns it; otherwise, wraps it.
326 Constructs a ServiceStateModel with the given name and NOTINITED state. @param name The name of the service.
327 Checks if a state transition is allowed based on state maps. @param current Current state. @param proposed Proposed state. @return True if transition is allowed, false otherwise.
328 Concatenates a prefix based on name.m1() with state.m2().
329 Default constructor. Initializes with a null handler.
330 Processes an interrupt signal. @param s The interrupt signal received.
331 Finds an IrqHandler by signal name. @param signalName The signal name to search for. @return The matching IrqHandler or null.
332 Constructs a ServiceLaunchException with exit code and cause.
333 Constructs a ServiceLaunchException with exit code and message.
334 Constructs a ServiceLaunchException with exit code, format, and args. Optionally sets cause if last arg is a Throwable.
335 Constructs a ServiceLaunchException with exit code, cause, and format.
336 Calls the m1 method.
337 Constructs a ServiceLauncher with the same class name for both. @param serviceClassName Class name for the service to launch.
338 Handles ExitException: logs details and sets service exit code.
339 Initializes commandOptions by calling m1().
340 Loads and creates Configuration instances from a list; returns count.
341 Adds a ServiceStateChangeListener to the global listeners. @param l The ServiceStateChangeListener to add.
342 Adds a ServiceStateChangeListener to the global listeners. @param l The listener to add. @return True if added successfully, false otherwise.
343 Calls the m1 method on the globalListeners object.
344 Notifies listeners and global listeners about the event. Handles exceptions during listener notification.
345 Handles configuration override during initialization. @param conf The new configuration object.
346 Checks if object is a Service and calls m1 if true. @param object The object to check. @return True if object is a Service, false otherwise.
347 Stops the service and logs any exceptions. @param log Logger instance @param service Service to stop @return Exception if an error occurred, null otherwise
348 Stops the service and logs any exceptions. @param log Logger instance for error logging. @param service Service to be stopped. @return Exception if an error occurred, otherwise null.
349 Checks if input stream supports pread byte buffer. @param in Input stream to check. @return True if stream supports pread byte buffer.
350 Delegates to m1().m2() and returns the result.
351 Converts an instance to a string, handling JSON processing errors.
352 Adapts a FunctionRaisingIOE to a Function, suppressing exceptions.
353 Applies m1 and m2 to the input instance. @param instance The input instance to be transformed. @return The transformed instance.
354 Decodes byte array to String using UTF_8 and calls m1. @param bytes byte array to decode @return Result of m1 after decoding
355 Copies the content of another UTF8 object.
356 Writes a string to the output, truncating if too long. @param out Output stream to write to. @param s String to write. Returns length of written string.
357 Reads data from input stream. @param in DataInput stream to read from.
358 Calls key.m1(n) and then recursively calls m2(key).
359 Calls m2 with the updated key and provided value. @param n key value, @param value writable value @return Writable object
360 Constructs a new OutputBuffer using a default Buffer.
361 Delegates the call to buffer's m1() method. Returns the byte array returned by buffer.m1().
362 Delegates the call to buffer's m1() method.
363 Delegates m1() call to the internal buffer. Returns the current OutputBuffer instance.
364 Delegates to the more specific m1 method with casted arguments.
365 Compares two byte arrays using FastByteComparisons. @param b1, s1, l1 First array, start, length. @param b2, s2, l2 Second array, start, length.
366 Calls overloaded method with offset 0. @param bytes byte array @param length length of the array to process
367 Calculates a float value from byte array, starting at index.
368 Combines two 32-bit values from byte array into a 64-bit long.
369 Calls m1 with the given byte array and start index. @param bytes byte array @param start start index @return int result of m1
370 Constructs a BytesWritable with the given byte array. @param bytes The byte array to wrap.
371 Calls m1() and returns the result. Deprecated.
372 Calls m1() and returns its result. Deprecated.
373 Resizes the data structures if the given capacity differs. @param capacity The new capacity to resize to.
374 Delegates to m1(direct) and returns the result of its m2() call.
375 Calculates and returns a ReadaheadRequest based on parameters. @param identifier Identifier, fd, curPos, readaheadLength, maxOffsetToRead, lastReadahead @return ReadaheadRequest object.
376 Calls m2 with the given key and a default NullWritable value. @param key The key to pass to the overloaded method.
377 Calls m2 with the given key and a NullWritable value. @param key The key to pass to m2. @throws IOException if an I/O error occurs.
378 Returns a value obtained by calling key.m1(). @return Long value returned by key.m1()
379 Checks access to a path with specified access right. @param path The path to check. @param access Access right value. @return True if access is allowed, false otherwise.
380 Checks if NativeCodeLoader.m1() returns true AND nativeLoaded is true.
381 Checks if NativeCodeLoader.m1() returns true AND nativeLoaded is true.
382 Returns false if Sparc, otherwise calls NativeCodeLoader.m1().
383 Unmaps the provided buffer if supported; logs reason otherwise.
384 Releases the buffer, attempting unmapping if supported. Logs an error or reason if unmapping fails or is unavailable.
385 Delegates buffer processing to the internal buffer. @param in Input stream to read from. @param length Number of bytes to read.
386 Constructs an EnumSetWritable from an EnumSet. @param value The EnumSet to wrap. @param elementType The element type of the EnumSet.
387 Constructs a DataInputBuffer with a new internal buffer.
388 Delegates processing of the input array to the buffer. @param input Input byte array. @param length Number of bytes to process from the input.
389 Delegates buffer processing to the internal buffer. @param input Input byte array. @param start Start index in the array. @param length Number of bytes to process.
390 Delegates to the buffer's m1() method and returns the result.
391 Delegates the call to buffer's m1() method.
392 Constructs an ECSchema from provided options. @param allOptions Map of schema options; must not be null/empty.
393 Constructs an ECSchema with codec name, data units, and parity units.
394 Retrieves a value from the schema. @return An integer value obtained from schema.m1()
395 Returns a value from the schema's m1 method.
396 Finds a RawErasureCoderFactory by codec and coder names. @param codecName Codec name to search for. @param coderName Coder name to search for. @return RawErasureCoderFactory or null if not found.
397 Creates an ECBlockGroup with provided data and parity blocks.
398 Counts erased blocks in data and parity block lists. Returns the total count of erased blocks.
399 Counts blocks where m1() returns true. @param inputBlocks Array of ECBlock objects. @return Number of blocks where m1() is true.
400 Converts ECChunk array to ByteBuffer array by calling m1() on each. @param chunks Array of ECChunk objects. @return ByteBuffer array corresponding to the input chunks.
401 Extracts ECBlocks from a block group based on a condition. @param blockGroup The block group to extract blocks from. @return Array of ECBlocks that satisfy the condition.
402 Creates an ECBlock array from a block group. @param blockGroup ECBlockGroup to extract blocks from. @return An array containing blocks from the group.
403 Returns the bitwise XOR of two integers. @param x The first integer. @param y The second integer.
404 Retrieves a value from a precomputed multiplication table. @param x Index for the first dimension. @param y Index for the second dimension.
405 Retrieves a value from the divTable based on x and y. @param x Index for the row. @param y Index for the column.
406 Calculates a value based on input x and n using lookup tables. @param x Input value (>=0, < m1()) @param n Input value, used in calculation @return Calculated integer value.
407 Dumps the chunk data as a hex string to the console. @param chunk The chunk object to dump.
408 Delegates m1() call to coderOptions. Returns the result.
409 Delegates m1() call to coderOptions. Returns the result.
410 Delegates m1() call to coderOptions. Returns the result.
411 Delegates m1() call to coderOptions. Returns the result.
412 Masks a portion of the buffer with a calculated value. @param buffer The buffer to mask. @param len Length of the portion to mask. @return The modified buffer.
413 Masks a portion of the buffer using m1 and System.m2. @param buffer The buffer to mask. @param offset Start offset in the buffer. @param len Length of the portion to mask.
414 Creates a ByteArrayEncodingState object with encoded data. @return ByteArrayEncodingState object containing encoded data.
415 Creates a ByteBufferEncodingState with new ByteBuffers. @return ByteBufferEncodingState object with prepared buffers.
416 Creates a ByteBufferDecodingState with prepared inputs and outputs. @return A new ByteBufferDecodingState object.
417 Creates a ByteArrayDecodingState object with decoded data. @param decoder The decoder object @param decodeLength The length to decode @return A ByteArrayDecodingState object
418 Fills a byte array with specific values based on m and k.
419 Applies a transformation to the input matrix. @param inMatrix Input matrix to be transformed. @param outMatrix Output matrix to store the result. @param n Size of the square matrix.
420 Masks data using GF tables and input/output offsets.
421 Processes input data using GF tables and writes to outputs. @param gfTables GF tables for processing. @param inputs Input ByteBuffers. @param outputs Output ByteBuffers.
422 Retrieves or creates a GaloisField instance based on size & polynomial. @param fieldSize The size of the Galois field. @param primitivePolynomial The primitive polynomial. @return GaloisField instance.
423 Calls overloaded method with array length as the size.
424 Default constructor for ECBlock, initializes with default flags.
425 Adds to reportedBytesReadFromCompressedStream and calls m1. @param count The number of bytes read.
426 Reads a byte from the input stream. Increments internal counter if a byte is read successfully.
427 Processes groups, calculates min/max lengths, and calls m1. @param alphaSize Alphabet size. @param nGroups Number of groups to process.
428 Recursively partitions data using a modified quicksort approach. @param dataShadow Data object containing arrays for processing.
429 Calls m1() and then returns the result of m2(stream).
430 Calls m1() and returns the result of m2(stream).
431 Calls m1(), then returns userBufLen + result of recursive m2(stream).
432 Initializes internal buffers and prepares for processing.
433 Default constructor. Uses default block size, work factor, and buffer size.
434 Calls m1() and then calls m2(stream), returning the result.
435 Calls m1() and then returns the result of m2(stream).
436 Initializes a new CompressorStream with the given output stream.
437 Default constructor, uses the default direct buffer size.
438 Copies byte array data and initializes internal buffers. @param b byte array to copy @param off start offset in the array @param len number of bytes to copy
439 Checks buffer conditions; returns true if safe, false otherwise.
440 Reads data into the provided byte array. @param b buffer to write to, off offset, len length @return number of bytes read
441 Default constructor, uses the default direct buffer size.
442 Reads data into the provided byte array. @param b buffer to write to, off offset, len length to read @return number of bytes written
443 Executes the m1 method. @param conf Configuration object (unused).
444 Initializes a DecompressorStream with the given input stream. @param in the input stream to decompress @throws IOException if an I/O error occurs
445 Calculates the total bytes to consume. Returns the sum of userBufferBytesToConsume and remaining.
446 Resets internal state for decompression processing.
447 Writes data and returns the number of bytes written.
448 Reads data and returns the number of bytes read.
449 Creates a new Lz4Decompressor with the default buffer size.
450 Copies byte array into internal buffer and processes it. @param b byte array to copy @param off starting offset in the array @param len number of bytes to copy
451 Checks buffer conditions; returns true if safe, false otherwise.
452 Reads data from the buffer into the provided byte array. @param b buffer to write to, off offset, len length to read @return number of bytes read
453 Creates a Lz4Compressor with a specified direct buffer size. @param directBufferSize Size of the direct buffer to use.
454 Reads data into the provided byte array. Returns the number of bytes read.
455 Executes m1() within a synchronized block. @param conf Configuration object (unused)
456 Retrieves a CompressionCodec by name, trying multiple registries. @param codecName Name of the codec to retrieve. @return CompressionCodec object or null if not found.
457 Returns a masked value based on the provided codec. @param codec CompressionCodec object; null returns 0.
458 Calculates a value based on the codec, returning 0 if null. @param codec CompressionCodec object to use for calculation @return Calculated integer value.
459 Returns compressor class based on configuration. @param conf Hadoop configuration object @return Compressor class (ZlibCompressor or BuiltInZlibDeflater)
460 Selects Decompressor class based on Configuration. @param conf Configuration object to determine Decompressor. @return Class of the selected Decompressor.
461 Checks and initializes the native-zlib library. Logs success or failure based on initialization.
462 Initializes the compressor with configuration, handling unsupported strategies. @param conf Configuration object for compressor setup.
463 Initializes the ZlibCompressor with provided compression settings.
464 Calls m1() and returns the result of m2(stream).
465 Calls m1() and returns the result of m2(stream).
466 Initializes the ZlibDecompressor with header and buffer size. @param header Compression header data. @param directBufferSize Size of direct buffers.
467 Calls m1() and returns the result of m2(stream).
468 Calls m1() and returns the result of m2(stream).
469 Calculates a value using m1 and recursive call. Uses userBufLen and stream for the calculation.
470 Resets the state for processing a new input stream.
471 Processes gzip trailer data based on the current state. Handles CRC and size verification, advancing the state.
472 Writes data to the output stream using m1. @param stream DataOutput stream to write to @param i Integer value used by m1
473 Reads data from stream, processes it, and returns a long value.
474 Retrieves a ByteBuffer from a pool or allocates a new one. @param direct if true, allocates a direct buffer; otherwise, not. @param length the desired capacity of the buffer.
475 Adds a buffer to the TreeMap, avoiding duplicates. @param buffer ByteBuffer to be added.
476 Retrieves a value from the byte array at the given position. @param position index of the value to retrieve @return the value at the position, or -1 if out of bounds.
477 Processes a string, extracting data using helper methods. @param string The input string to process.
478 Processes a byte array segment. @param utf8 byte array, start start index, len length
479 Copies data to the buffer, updates length, and resets textLength.
480 Reads 'len' bytes from input 'in' and sets internal length.
481 Decodes a byte array as UTF-8 and returns the resulting string.
482 Decodes byte array to String. @param utf8 byte array to decode @param start start index in the byte array @param length length of the byte array to decode @param replace whether to replace invalid chars @return decoded String
483 Calls m1 with the entire byte array. @param utf8 The byte array to process. @throws MalformedInputException if input is invalid.
484 Registers a class, assigns an ID, and calls m2 with the ID. Throws exception if max class limit is exceeded.
485 Initializes the AbstractMapWritable with default Writable types.
486 Creates a FileSystemOption for SequenceFile writers. @param fs the FileSystem to use @return A FileSystemOption object
487 Constructs a Key object with the given byte array and weight. @param value The byte array representing the key. @param weight The weight associated with the key.
488 Executes m3, calls super.m1(), and parentContainer.m3.
489 Converts a list to an array using helper methods m1 and m2. @param list List of elements to convert. @return Array containing elements from the list.
490 Constructs a new InputBuffer using a default Buffer.
491 Delegates processing of the input array to the buffer. @param input The byte array to process. @param length The number of bytes to process.
492 Delegates buffer processing to the internal buffer. @param input Input byte array. @param start Starting index in the array. @param length Number of bytes to process.
493 Delegates to the internal buffer's m1() method.
494 Delegates the call to buffer's m1() method.
495 Calculates MD5 hash from input stream. @param in Input stream to calculate hash from. @return MD5Hash object containing the result.
496 Calculates MD5 hash of an input stream. @param in Input stream to hash. @return MD5Hash object containing the hash.
497 Calculates MD5 hash of data portion. @param data byte array to hash @param start start index in the array @param len length of data to hash @return MD5Hash object containing the hash
498 Calculates MD5 hash of data. @param dataArr Byte array of data to hash. @param start Start index in data array. @param len Length of data to hash. @return MD5Hash object containing the hash.
499 Delegates to m1() and returns its result.
500 Parses a hex string into an MD5 digest byte array. @param hex Hexadecimal string representing the MD5 digest.
501 Parses a message from a DataInput, handling InputStream or byte array. @param protoClass The class of the message to parse. @param dataIn Input stream containing the message data. @return Parsed Message object.
502 Synchronizes a file or directory. @param fileToSync The file/directory to synchronize. @throws IOException if an I/O error occurs.
503 Constructs a BooleanWritable with the given boolean value.
504 Creates a RemoteExceptionDependentRetry policy. Uses default policy and exception-specific policies.
505 Checks if elapsed time exceeds 'time' and queue is not empty.
506 Delegates to Time.m1() and returns the result.
507 Creates a RetryPolicy excluding Remote/Sasl exceptions. @param defaultPolicy Default retry policy. @param exceptionToPolicyMap Exception-specific retry policies.
508 Retrieves a ConnectionId using RPC call to the first proxy.
509 Parses a string to create a MultipleLinearRandomRetry object. @param s String containing retry/sleep values, comma-separated. @return MultipleLinearRandomRetry object or null if invalid.
510 Creates an exception-dependent retry policy. @param defaultPolicy Default retry policy. @param exceptionToPolicyMap Mapping of exceptions to policies.
511 Handles a list of IOExceptions, returning one or a combined exception.
512 Returns a value derived from chained method calls on dataIndex.
513 Retrieves a value by chaining method calls on dataIndex.
514 Reads a value from DataInput, casts to int, throws if out of range.
515 Calls m1 with the provided output stream and integer. @param out DataOutput stream to write to. @param n Integer value to pass to m1.
516 Delegates the call to tfileMeta.m1() and returns the result.
517 Retrieves a masked value from the transaction file metadata. @return A long representing the masked value.
518 Delegates the m1 method call to the readerBCF object.
519 Retrieves a value from the tfileMeta object.
520 Constructs a ByteArray from a BytesWritable. @param other The BytesWritable to copy from.
521 Constructs a ByteArray with the specified byte array. @param buffer The byte array to wrap.
522 Finds the index of a block region by offset. @param offset The offset to search for. @return Index of the region, or -1 if not found.
523 Finds the index of a key using the comparator. @param key The key to search for. @return The index or -1 if not found.
524 Finds the index of a key using the comparator. @param key The key to search for. @return Index of the key or -1 if not found.
525 Calls m1 with block and record indices from the Location. @param other The Location object to extract indices from.
526 Calls overloaded method with offset 0. @param buf byte array to process @throws IOException if an I/O error occurs
527 Reads data into the buffer, handling potential buffer overflows. @param buf buffer to read into @param offset starting offset in the buffer @return number of bytes read
528 Delegates to rBlkState.m1().m2() and returns the result.
529 Delegates to rBlkState.m1().m2() and returns the result.
530 Retrieves a value from the rBlkState object.
531 Returns the OutputStream if possible, otherwise wraps it.
532 Compares two byte buffers for equality, handling stride and offsets.
533 Constructs a DataOutputBuffer with a default Buffer.
534 Delegates to buffer's m1() method and returns the result.
535 Delegates to the buffer's m1() method and returns the result.
536 Writes an integer to the buffer at the given offset. @param v integer to write @param offset offset in the buffer
537 Calculates distance between nodes. Returns MAX_VALUE on error.
538 Checks if a scope matches a node's location. @param node The Node to check. @param scope The scope string. @return True if the scope matches, false otherwise.
539 Calls m1 and m2 to process a Node. @param node The Node to process. @return String array result of the chained calls.
540 Delegates to m1 with the current object as an argument.
541 Removes a node from the cluster map, handling inner nodes and locks.
542 Retrieves a list of nodes from the cluster map by location. @param loc Location string to search for nodes. @return List of nodes or an empty list if not found.
543 Retrieves a Node from the cluster map using a location string.
544 Generates a string representation of rack and leaf information. Returns a formatted string with rack count, leaf count, and leaf details.
545 Checks if two nodes satisfy a condition (delegates to m1). @param node1 The first node. @param node2 The second node.
546 Selects a Node, considering exclusions and availability. @param parentNode Parent Node. @return Selected Node or null if no valid Node found.
547 Calculates a weight based on reader and node paths. Returns weight, considering path similarity.
548 Adds node to rack's node set, if not decommissioned. @param node The Node object to add.
549 Transfers data from a FileChannel, tracking wait & transfer times. @param fileCh channel to transfer from, position, count, times.
550 Transforms a collection of names, adding a modified version. @param names Collection of names to transform. @return List of transformed names.
551 Constructs a string containing host and port details. @param destHost Destination host string. @param destPort Destination port (int). @param localHost Local host string. @return String with formatted host and port information.
552 Finds InetAddresses within a subnet, optionally including subinterfaces. @param subnet Subnet string (e.g., "192.168.1.0/24") @param returnSubinterfaces Whether to include subinterfaces. @return List of InetAddress objects.
553 Generates a set of free ports. @param numOfPorts number of ports to acquire @throws IllegalStateException if not enough ports are available
554 Default constructor for RawScriptBasedMapping class.
555 Constructs a CachedDNSToSwitchMapping with the given raw mapping.
556 Constructs a NodeBase with a normalized path. @param path The path to be normalized and set.
557 Constructs a NodeBase with the given name and normalized location.
558 Constructs a new NodeBase with the given name, location, parent, and level.
559 Sends a callback, potentially closing the file descriptor. @param caller Caller of the method, for logging.
560 Delegates to the internal refCount's m1() method.
561 Decrements refCount, shuts down, and releases the file descriptor.
562 Removes idle selectors from provider queues based on timeout. @param now Current timestamp to determine idle selectors.
563 Retrieves dependencies for a name, caching the result. @param name The name to retrieve dependencies for. @return List of dependencies or an empty list if none.
564 Sets a timeout value for the socket operation. @param timeoutMs Timeout in milliseconds.
565 Gets IP addresses for a network interface. @param strInterface Interface name. @return Array of IP addresses.
566 Gets a list of InetAddresses for a network interface. @param strInterface Interface name, "default" uses cached address. @param returnSubinterfaces Whether to include sub-interfaces. @return List of InetAddress objects.
567 Resolves a location string, recursing if necessary.
568 Generates a string representation of rack topology data. Returns formatted string or "No topology information" if null.
569 Checks if mapping is valid AbstractDNSToSwitchMapping and m1() returns true.
570 Retrieves statistics for a recorder at a given index. @param recorderName Recorder name. @param idx Index of the statistic. @return SummaryStatistics object or null if not found.
571 Delegates printing to GenericOptionsParser's m1 method. @param out PrintStream to use for output.
572 Recursively checks a class and its superclass. Returns true if not null, otherwise false.
573 Constructs a LogThrottlingHelper with a Timer. @param minLogPeriodMs Minimum logging period in milliseconds. @param primaryRecorderName Name of the primary recorder.
574 Logs action data for a recorder. Creates a new log if needed. @param recorderName Name of the recorder. @param currentTimeMs Current timestamp in milliseconds.
575 Checks if a string is valid. @param str The string to validate. Returns false if null.
576 Processes a string, returning a modified string or the original. @param item The string to process. @return Modified string or original if processing fails.
577 Calls m2 with default metadata. @param packageName Package name to process. @param pathSpec Path specification to use.
578 Registers a servlet with the given name and path spec. @param name servlet name @param pathSpec servlet path @param clazz servlet class
579 Overloads m1 with default 'false' for the 'secure' parameter. @param name servlet name, pathSpec servlet path, clazz servlet class
580 Registers a filter with the given ServletContextHandler. @param ctx Handler, name, classname, params, URLs for filter.
581 Attempts to connect a listener to a port, retrying if needed. @param listener ServerConnector to connect @param port initial port to try
582 Finds an XFrameOption matching the given value. @param value The value to match. @throws IllegalArgumentException if no match is found.
583 Creates a FileMonitoringTimerTask. @param filePaths Paths to monitor. @param onFileChange Action on file change. @param onChangeFailure Action on failure.
584 Retrieves property value, validating it's non-negative. @param key Property key. @param defaultValue Default value. @return Property value as a long.
585 Throws exception if property key is missing from properties. @param key The property key to check.
586 Throws a MetricsException if currentOutStream.m1() returns true. @param message Exception message to include.
587 Throws a MetricsException if ignoreError is false. @param message Error message to include in exception.
588 Parses roll interval from properties and returns millis. Throws MetricsException for invalid format or value.
589 Throws a MetricsException if ignoreError is false. @param message Error message. @param t The exception that caused the error.
590 Creates or retrieves a Record based on MetricsRecord data. @param mr MetricsRecord to process. @param includingTags Whether to include tags in the Record. @return The created or retrieved Record.
591 Copies a string to the buffer, updates offset, and performs actions. @param s The string to be copied.
592 Emits a metric to Ganglia, handling null checks and logging. @param groupName Metric group name.
593 Emits a Ganglia metric with given name, type, value, and config. @param groupName Metric group name. @param name Metric name. @param type Metric type. @param value Metric value.
594 Retrieves a value after waiting for a condition to be met. Calls m1(), waits if size is 0, then returns the result of m3().
595 Creates a MetricsRecordImpl with the given info, timestamp, tags, and metrics.
596 Records enQTime to rpcEnQueueTime and quantiles (if enabled). @param enQTime The enqueue time to record.
597 Records queue time. Updates rpcQueueTime and quantiles if enabled.
598 Records processing time. Updates rpcProcessingTime and quantiles.
599 Updates quantiles with write latency. @param writeLatency the write latency value to update with
600 Updates quantiles with read latency. @param readLatency The read latency value to update with.
601 Returns a MetricsSystem instance with the given prefix. @param prefix Prefix to be used for metrics. @return MetricsSystem instance.
602 Returns the MetricsSystem instance. Returns a MetricsSystem object.
603 Calls the m1() method of the INSTANCE object.
604 Populates a MetricsRecordBuilder with data from tags and metrics. @param builder Builder to populate, all flag for metric processing.
605 Calculates averages for metrics with sufficient samples. @param minSamples minimum number of samples required @return Map of metric names to their calculated averages.
606 Retrieves the masked RPC processing time.
607 Processes rates in the current snapshot, updating averages.
608 Creates a MetricsInfo object and caches it. @param name Metrics name. @param description Metrics description.
609 Creates a MetricsTag using the provided MetricsInfo and value.
610 Updates interval statistics and calls m2. @param numSamples Number of samples. @param sum The sum of the samples.
611 Updates min/max and returns a SampleStat object. @param x The double value to be processed.
612 Calculates a value by chaining method calls on rpcProcessingTime.
613 Delegates to minmax.m1() and returns the result.
614 Delegates to minmax.m1() and returns the result.
615 Calls the m1() method of the minMax object.
616 Calculates the next retry time based on target time, now, and policy. @param tgtEndTime Target end time. @param now Current time. @param rp Retry policy. @return Next retry time in milliseconds.
617 Returns the result of applying Math.m2 to the value of m1().
618 Adjusts sample item values based on a condition. Iterates through samples, modifying 'g' values if criteria met.
619 Estimates a value at a given quantile from the sample data. @param quantile quantile value between 0 and 1 @return estimated value at the specified quantile
620 Processes buffer data, inserts items into samples, and adjusts values.
621 Returns a new list containing the elements from m1().
622 Delegates group processing to m1().m2(). @param group The group string to process. @return Result of m1().m2(group).
623 Calls m1 with only the client address. @param clientAddress The InetAddress of the client. @return A map of string key-value pairs.
624 Delegates to another m1 method. @param serverAddress The server address. @param ingressPort The ingress port. @return A map of strings to strings.
625 Extracts a masked Hadoop Kerberos name from a principal name.
626 Retrieves a set of strings associated with a user. Returns cached or computed set; throws exception if user is blocked.
627 Clears user-to-groups cache and related caches. Refreshes groups and clears negative cache if needed.
628 Logs a formatted message to either 'out' or System.out. @param format Format string for the message. @param args Arguments to format into the message.
629 Updates a BiMap with data from a bash command's output. @param map BiMap to update. @param mapName Name of the map being updated. @return True if the map was updated, false otherwise.
630 Executes a script based on the OS. @param script The script file to execute. @return Array of command to execute the script.
631 Switches bind user after an AuthenticationException. Logs the switch if the new user is different.
632 Processes input data, potentially wrapping with SASL tokens. @param inBuf Input byte array. @param off Offset in the byte array. @param len Length of data to process.
633 Calls m1() and delegates to outStream's m2(), throwing IOException.
634 Handles CSRF protection: responds with error or continues. @param httpInteraction The HTTP interaction object.
635 Extracts group names, validates against IDs, returns a set. @param groupNames Comma-separated group names. @param groupIDs Comma-separated group IDs. @return Set of group names.
636 Delegates SecretKey generation to SecretManager. @param key The key to use for SecretKey generation. @return A SecretKey object.
637 Removes a token from the SQL secret manager. @param ident TokenIdent object containing token details. @throws IOException if an I/O error occurs.
638 Executes a sequence of operations: m1, allKeys.m2, m3, currentTokens.m2.
639 Calls m2 on allKeys with the key's m1 value and the key.
640 Removes a delegation key using the provided key. Logs errors.
641 Adds a delegation key. Throws exception if SecretManager is running. Updates m3 if key.m1() exceeds m2().
642 Processes a delegation key, invoking allKeys.m2 and m3. @param key The delegation key to process. @throws IOException if an I/O error occurs.
643 Replaces the current secret manager with a new one. @param secretManager The new secret manager to use.
644 Loads properties, initializes them, and returns the Properties object.
645 Returns the UserGroupInformation obtained from DelegationTokenAuthenticationFilter.
646 Checks if delegation token operation is allowed. @param request HttpServletRequest object @return True if operation is allowed, false otherwise.
647 Delegates to m1().m2(this) and returns the result.
648 Delegates m2 call to the inner object, passing conf. @param conf Configuration object for the method. @return Long value returned by the inner m2 method.
649 Delegates method execution to m1().m2 with provided config. @param conf Configuration object passed to the delegate.
650 Wraps the input stream if m1() returns true. @param in The input stream to potentially wrap. @return The (potentially wrapped) input stream.
651 Wraps OutputStream with BufferedOutputStream if m1() returns true. @param out The OutputStream to wrap. @return Wrapped OutputStream or original if m1() is false.
652 Reads and processes SASL token from input stream. Returns token length or -1 if EOF is reached.
653 Releases resources and closes the stream.
654 Constructs an AuthorizationException with a root cause. @param cause The underlying exception that caused this one.
655 Delegates m2() call to HadoopLoginContext if applicable, else returns true.
656 Delegates login time update to the user object. @param loginTime The login timestamp to be updated.
657 Constructs UserGroupInformation from a Subject, extracting the User principal. @param subject The Subject containing the User principal.
658 Delegates to user's m1() method and returns the result.
659 Checks if user authentication method is Kerberos. @return True if Kerberos, false otherwise.
660 Delegates authentication method call to the user object.
661 Returns the UserGroupInformation of the first RealUser found. Returns null if no RealUser is found.
662 Delegates to user's m1() method and returns the result.
663 Delegates m1 call to the user object. @param authMethod Authentication method to use.
664 Creates a ReloadingX509TrustManager with given type, location, and password.
665 Creates a ReloadingX509KeystoreManager. @param type keystore type (e.g., "JKS", "PKCS12") @param location keystore file location
666 Delegates URL retrieval to m1().m2(name). @param name URL name; passed to m1().m2() @return URL object obtained from m1().m2()
667 Retrieves an InputStream for the given resource name. @param name Resource name to locate. @return InputStream or null if resource not found/error.
668 Creates a Reader from a resource URL. @param name resource name; returns Reader or null on error.
669 Creates and configures an SSLEngine based on the current mode. @return Configured SSLEngine instance.
670 Applies SSL configuration to HttpsURLConnection if applicable. @param conn HttpURLConnection to configure, returns the same.
671 Initializes the Configured object with the provided configuration. @param conf The configuration object to use.
672 Checks if shell group lookup command exceeded the timeout. @param executor ShellCommandExecutor instance @param user User for whom groups are being retrieved @return True if timeout exceeded, false otherwise.
673 Constructs a string from m1() arguments, quoting if needed.
674 Delegates to m2 with input from DataInput. @param in DataInput object to read from @return AuthMethod object obtained from m2
675 Adds a user if conditions are met. @param user The user to be added.
676 Adds a group if valid. Adds to lists if m2() returns false.
677 Removes a user if allowed. Throws exception if removal is restricted.
678 Removes a group if allowed; otherwise, throws an exception. @param group The group to remove.
679 Delegates user processing to m1, returning the result.
680 Delegates to m1 with the 'groups' parameter.
681 Checks a Kerberos ticket's validity based on its m1 value. @param ticket The Kerberos ticket to validate.
682 Returns SASL properties based on client address whitelist. @param clientAddress Client's InetAddress; null uses saslProps. @return Map of SASL properties.
683 Validates codec cipher suite; throws exception if unsupported.
684 Calculates the masked function value. Uses m1(), subtracts outBuffer.m2() from streamOffset.
685 Reads data from input buffer into a temporary byte array. @param inBuffer Input buffer to read from. @return Number of bytes read, or -1 if an error occurred.
686 Finds a CipherSuite by name. @param name The name of the cipher suite to find. @throws IllegalArgumentException if no matching suite is found.
687 Checks if a CryptoProtocolVersion is a known supported version.
688 Calculates a masked integer value from a given number of bits. @param numBits The number of bits to mask (0-32). @return The masked integer value.
689 Creates a KeyProviderCryptoExtension, extracting CryptoExtension if available. @param keyProvider The KeyProvider to use. @return A KeyProviderCryptoExtension instance.
690 Retrieves a KeyVersion by name. @param name Key name, used to locate the version. @return KeyVersion object or null if not found.
691 Generates a key of specified size using the given algorithm. @param size Key size in bits. @param algorithm Algorithm to use for key generation.
692 Creates an EncryptedKeyVersion object with provided data. @param keyName Key name. @param encryptionKeyVersionName Version name. @return EncryptedKeyVersion object.
693 Creates a KeyProviderDelegationTokenExtension. @param keyProvider The KeyProvider to delegate to. @return A KeyProviderDelegationTokenExtension instance.
694 Executes a task, handling exceptions and releasing resources.
695 Retrieves a ReadWriteLock for the given key. @param keyName The key to get the lock for. @return A ReadWriteLock object.
696 Appends field to StringBuilder if field exists. @param field The field to append. @return The Builder instance.
697 Adds key-value pair to the StringBuilder if both key & value exist. @param key The key to add. @param value The value to add. @return The Builder object for chaining.
698 Adds a key-value pair to the builder, conditionally. @param key The key to add. @param value The value associated with the key.
699 Creates and returns a RefreshResponse indicating success. Returns a RefreshResponse object with status 0 and message "Success".
700 Generates a UUID from a byte array. @param clientId byte array representing the client ID @return UUID string representation
701 Delegates the operation to the putRef's m2 method. @param e the element to be processed @return the result of the delegated operation
702 Calls the m1 method of the callQueue and returns the result.
703 Retrieves and processes interfaces from a protocol class. @param protocol Class containing interface definitions @return Array of processed interface classes
704 Retrieves an InetSocketAddress from a proxy object. Uses m1 and m2 methods on the proxy.
705 Delegates to Time.m1() and returns the result.
706 Retrieves UserGroupInformation from the current Call object. Returns null if the current Call object is null.
707 Calculates hash codes for an array of methods. @param methods Array of methods to process. @return Array of integer hash codes.
708 Retrieves refresh responses for a given identifier. @param identifier Identifier for refresh requests. @param args Arguments passed to the handlers. @return Collection of RefreshResponse objects.
709 Constructs a RemoteException with a class name and message. @param className Name of the remote class. @param msg Error message.
710 Attempts to find and return an IOException handler. Returns 'this' if no suitable handler is found.
711 Retrieves an IOException class from a class object. Returns 'this' if an exception occurs.
712 Calculates a cost based on processing details and weights. @param details ProcessingDetails object containing data. @return The calculated cost as a long.
713 Delegates to connectionManager.m1() and returns the result.
714 Delegates to connectionManager's m1() method and returns the result.
715 Adds an element to the queue with given priority and processes. @param priority Element priority. @param e The element to be added.
716 Executes a task based on priority and element. @param priority Task priority. @param e Element to be processed. @return True if task executed successfully, false otherwise.
717 Delegates exception class array to exceptionsHandler for processing.
718 Delegates exception class handling to exceptionsHandler. @param exceptionClass Array of exception classes to handle.
719 Constructs an UnexpectedServerException with the given message.
720 Constructs a new RpcServerException with the given error message.
721 Constructs an RPC client exception with the given error message.
722 Constructs an UnexpectedServerException with a message and cause.
723 Constructs a new RpcServerException with a message and cause.
724 Constructs an RpcClientException with a message and cause.
725 Updates call costs based on identity and cost delta. @param identity Object identifying the call. @param costDelta Amount to adjust call costs by.
726 Calculates a priority level based on cost, identity, and thresholds.
727 Delegates exception handling to ShadedProtobufHelper. @param se The ServiceException to handle. @return An IOException representing the handled exception.
728 Executes an IpcCall and handles ServiceException. @param call The IpcCall to execute. @return Result of the call or throws an IOException.
729 Delegates to ShadedProtobufHelper.m1 to generate a ByteString. @param key The key used by the helper method. @return The generated ByteString.
730 Delegates ByteString creation to ShadedProtobufHelper. @param bytes The byte array to create ByteString from. @return A ByteString object.
731 Executes a function with given ID, retry count, and handler. @param cid Call ID @param rc Retry count @param externalHandler External handler object
732 Retrieves the address of the listener. @return InetSocketAddress representing the listener's address.
733 Retrieves a set of auxiliary listener addresses. Returns an empty set if no listeners are configured.
734 Removes a client from the cache if its reference count is zero. @param client The client to potentially remove.
735 Delegates the call to the superclass's m1 method. @param obj The object passed to the super method. @return The result of the superclass's m1 method.
736 Creates a ProtobufWrapperLegacy with the given message. @param message The protobuf message to wrap. @throws IllegalArgumentException if not an unshaded protobuf.
737 Writes error response to output stream. @param response Output stream for response data. @param call RPC call context. @param rv Writable object (unused). @param errorClass Error class. @param error Error message.
738 Checks remaining requests and triggers action if zero.
739 Sets the error and calls method m1. @param error The exception to be set as the error.
740 Sets the RPC response and calls m1(). @param rpcResponse The response object to set.
741 Retries super.m2() until successful, handling SocketTimeoutException.
742 Reads data from the input stream, retrying on timeout. @param buf buffer to store data, @param off offset, @param len length @throws IOException if an I/O error occurs
743 Returns the InetAddress from the current call, or null.
744 Retrieves a value from CurCall's m2() or returns 0 if null.
745 Retrieves a value from an RpcCall connection if valid. @return String value or null if the call is invalid.
746 Retrieves a value from CurCall.m1(). Returns 0 if CurCall.m1() is null.
747 Parses connection data to String. Returns null on error.
748 Creates a MachineList from host entries and an address factory. @param hostEntries Collection of host entries. @param addressFactory Factory for resolving host addresses.
749 Checks if an IP address is valid, delegating to m2. @param ipAddress The IP address to validate. @return True if valid, false otherwise.
750 Constructs a SysInfoLinux object with provided procfs file paths. @param jiffyLengthInMillis Jiffy length in milliseconds.
751 Reads memory information from /proc/meminfo and parses values.
752 Returns the number of processors available. Calls m1() first, then returns numProcessors.
753 Returns the number of CPU cores available. Calls m1() first.
754 Returns the current CPU frequency. Calls m1() before returning the value.
755 Reads CPU time from a file and updates the CPU time tracker.
756 Reads network bytes and returns the count. Calls m1() and returns numNetBytesRead.
757 Calculates and returns the number of bytes written. Calls m1() and returns numNetBytesWritten.
758 Reads disk I/O statistics from procfsDisksFile. Calculates total bytes read/written, ignoring loop/ram disks.
759 Retrieves a value from the buffer based on key. @param k The key used to find the value. @return The value associated with the key, or null.
760 Retrieves a value from the buffer using the key. @param k The key used to find the value. @return The value associated with the key, or null.
761 Removes and returns the element associated with the given key. @param index index of the element @param key key of the element to remove @return the removed element or null if not found
762 Configures external DTD and stylesheet access. Uses m1 to set transformer access properties.
763 Parses a string with a size prefix (k, m, g, t, p, e) to a long.
764 Formats a long value with a unit and specified decimal places. @param n The number to format. @param unit The unit symbol. @param decimalPlaces Decimal places for formatting.
765 Formats a fraction as a percentage string with specified decimal places.
766 Converts a byte array slice to a hex string. @param bytes byte array to convert @param start start index (inclusive) @param end end index (exclusive)
767 Formats a double to a string with two decimal places. @param d The double value to format. @return Formatted string representation of the double.
768 Handles ExitException, logs error, and either exits or terminates.
769 Handles a HaltException, logs details, and either throws or handles it.
770 Adds a shutdown hook with priority and timeout. @param shutdownHook Hook to execute during shutdown.
771 Adds a shutdown hook. Throws exception if shutdown is in progress. @param shutdownHook Hook to be added. @return True if hook added, false otherwise.
772 Registers a shutdown hook. @param shutdownHook Runnable to execute on shutdown. @return True if hook registered, false otherwise.
773 Retrieves an input stream for the specified resource. @param resourceName Name of the resource to load. @throws IOException If resource cannot be loaded.
774 Constructs a LineReader with a default buffer size. @param in The input stream to read from.
775 Executes a process if enough time has passed since the last run.
776 Creates a ThreadFactory with a given prefix, sets daemon and priority. @param prefix Prefix for the created threads @return A ThreadFactory with configured thread naming and priority.
777 Doubles array capacity if size exceeds threshold. Expands the array if size > threshold and capacity < max.
778 Converts an iterator to an ArrayList. @param elements Iterator of elements to add to the list. @return ArrayList containing elements from the iterator.
779 Adds elements from iterable to collection, handling nulls. @param addTo Collection to add to. @param elementsToAdd Iterable of elements to add. @return True if all elements were added, otherwise false.
780 Creates an ArrayList with the specified initial size. @param initialArraySize the initial capacity of the ArrayList
781 Writes data derived from the instance to the output stream. @param instance The object to process. @param dataOutputStream Output stream to write data to.
782 Initializes an OperationDuration with start and finish times.
783 Sets the 'finished' flag based on the result of m1().
784 Calculates a duration by applying a mask to a value. Returns a Duration object.
785 Delegates to m1() and then m2, returning the result.
786 Calculates a masked product using exponentiation by squaring. @param lengthBytes Length of bytes, must be positive. @param mod Modulus for calculations. @return Masked product.
787 Calculates a masked CRC value. @param crcA Initial CRC value. @param crcB Second CRC value. @param monomial Monomial value. @param mod Modulus value.
788 Converts an integer to a byte array using m1. @param value integer to convert @return byte array representation of the integer
789 Masks a byte array and returns a hex string representation. @param bytes 4-byte array to mask; throws IOException if length != 4 @return Hex string representation of the masked byte array.
790 Converts byte array to hex string representation, 4 bytes at a time. @param bytes The byte array to convert. @throws IOException if the byte array length is not divisible by 4.
791 Extracts files from a JarInputStream to a directory, filtering by regex. @param inputStream Input stream for the Jar file. @param toDir Directory to extract files to. @param unpackRegex Regex pattern for file extraction.
792 Extracts files from a JAR archive based on a regex pattern. @param jarFile JAR file to extract from @param toDir Directory to extract files to @param unpackRegex Regex pattern for file selection
793 Finds the last occurrence of a byte within a byte array segment. @param utf byte array, start index, length, byte to find, count @return Last position or -1 if not found.
794 Associates key with value in map, using WeakReference for value. @param key The key for the map. @param value The value to associate with the key.
795 Retrieves a value from the map using the given key. @param key The key to look up in the map. @return The associated value or null if not found.
796 Checks if a value exists for the given key. @param key The key to check. @return True if a value exists, false otherwise.
797 Retrieves or creates a value associated with a key. @param key The key to look up or create a value for. @return The value associated with the key.
798 Counts and removes entries with null values from the map. Returns the number of removed entries.
799 Creates and returns a SuppressedSnapshot with reset counters. @return A new SuppressedSnapshot object.
800 Calculates a value based on the time difference. @param finishTime Finish time in milliseconds. @param startTime Start time in milliseconds.
801 Parses input string into key-value pairs and returns a map.
802 Splits a string by a separator, handling escape characters. @param str String to split, escapeChar and separator chars. @return String array of split substrings.
803 Masks characters in a string based on escapeChar and charsToEscape. @param str input string @param escapeChar escape character @param charsToEscape array of chars to escape @return masked string
804 Masks characters in a string based on escape char & chars. @param str input string @param escapeChar escape character @param charsToEscape chars to escape @return masked string
805 Retrieves a masked value from the COMMON_VERSION_INFO object.
806 Retrieves a masked value from the COMMON_VERSION_INFO object.
807 Retrieves a masked value from the COMMON_VERSION_INFO object.
808 Returns a masked version string from COMMON_VERSION_INFO.
809 Returns a masked version string from COMMON_VERSION_INFO.
810 Retrieves a masked value from the COMMON_VERSION_INFO object.
811 Retrieves a masked value from the COMMON_VERSION_INFO object.
812 Returns a masked value from the COMMON_VERSION_INFO object.
813 Retrieves a masked value from the COMMON_VERSION_INFO object.
814 Creates a FilteringRemoteIterator from a source iterator and filter. @param source Iterator to filter. @param filter Function to determine if an element is included.
815 Constructs a HaltableRemoteIterator from a source iterator. @param source The iterator to wrap. @param continueWork Callable to determine if iteration continues.
816 Checks if next is valid, otherwise calls m1(). Returns true if successful, otherwise delegates.
817 Constructs a MaybeClose with an object and default close flag. @param o The object to be potentially closed.
818 Creates a CompletableFuture that executes the Callable on the given executor. @param executor Executor to run the Callable @param call Callable to execute @return CompletableFuture wrapping the Callable's result
819 Creates a LazyAutoCloseableReference with the given constructor.
820 Creates a LazyAtomicReference initialized with the given supplier. @param supplier Supplier for the initial value. @return A LazyAtomicReference.
821 Calls m2 with a boolean and then calls super.m3(). Throws IOException if closed.
822 Delegates to the m1() method and returns its result.
823 Executes a CallableRaisingIOE and returns the result. @param call CallableRaisingIOE to execute. @return The result of the Callable.
824 Adapts a CallableRaisingIOE to a Supplier, masking I/O exceptions.
825 Creates a Builder for filtering RemoteIterator items. @param items The iterator to filter. @return A Builder instance.
826 Processes a collection of exceptions, merging similar ones. @param exceptions Collection of exceptions to process.
827 Creates a builder from an iterable of items. @param items iterable to initialize the builder with
828 Returns a new Builder instance, equivalent to m1(true).
829 Wraps and re-throws an ExecutionException as an IOException.
830 Wraps and re-throws a CompletionException as an IOException.
831 Configures an object using a JobConf. @param theObject Object to configure. @param conf Configuration object.
832 Loads a class by name. @param name Class name to load. @return The loaded Class object. @throws ClassNotFoundException if class is not found.
833 Prints a thread dump to the stream with the given title. @param stream output stream @param title dump title
834 Constructs a Configuration object. @param loadDefaults if true, loads default configuration values.
835 Sends an error response to the client with details of the exception. @param response HTTP response object @param status HTTP status code @param ex The exception to include in the response
836 Creates a response with error details from a Throwable. @param status HTTP status code @param ex The exception to extract error information from @return Response object containing error details in JSON
837 Constructs a PureJavaCrc32C object and initializes it.
838 Iterates through elements, calling m1() and m2() on each.
839 Retrieves group memberships for a user, platform-dependent. @param user The username to query. @return An array of strings representing the command.
840 Returns command to retrieve user group memberships. Uses different commands based on OS (Windows/Linux).
841 Returns OS-specific command array (Windows or Unix).
842 Generates chmod command based on platform and recursion. @param perm permission string. @param recursive flag for recursive chmod. @return String array representing the chmod command.
843 Returns chown command based on OS. @param owner The user to change ownership to. @return String array representing the chown command.
844 Creates command array for creating symbolic links. @param target The target file/directory. @param link The link file/directory.
845 Reads a symbolic link based on the OS. @param link The symbolic link to read. @return An array containing readlink command.
846 Constructs a kill command string based on OS and code. @param code Signal code for kill. @param pid Process ID to kill. @return String array representing the kill command.
847 Creates a File object with the given parent directory and basename.
848 Finds the Hadoop home directory, returning a File object.
849 Returns the Hadoop home file. Throws exception if failure cause exists.
850 Returns a File object representing the executable in Hadoop bin. @param hadoopHomeDir Hadoop home directory @param executable Executable file name @return File object or throws FileNotFoundException
851 Returns WINUTILS_FILE if WINUTILS_FAILURE is null, otherwise throws exception.
852 Iterates through shells, calls m2 on non-null m1, then calls m4.
853 Attempts to shutdown a thread. @param thread The thread to shutdown. @return True if shutdown was successful, false otherwise.
854 Shuts down the provided ExecutorService. @param service ExecutorService to shutdown. @throws InterruptedException if interrupted while waiting.
855 Creates and initializes a Progress object. Populates it with data from phases and context. @return Progress object representing the progress.
856 Creates a new progress phase with associated weightage. @param weightage Weightage for the new progress phase. @return The newly created Progress phase object.
857 Calculates progress based on phases. Returns progress or default if no phases.
858 Updates progress and notifies parent, if available.
859 Reads file content from path as string, UTF-8 encoded. @param path file path @return file content or null if file is not found
860 Reads file content from path as string, using UTF-8 encoding. @param path file path @param stat file stat object @return File content as string, or null if reading fails.
861 Writes data to a file. @param path file path, @param data string data, @param version version number
862 Creates a Zookeeper node if it doesn't exist, sets ACLs. @param path Zookeeper path to create. @param zkAcl ACLs to apply to the node. @return True if node was created, false otherwise.
863 Executes a sequence of operations on the Curator based on path. @param path The path to operate on. Returns true on success.
864 Applies fencing ACLs to a path if condition is met. @param path Path to apply ACLs to. @param fencingACL List of ACLs to apply. @param fencingNodePath Node path for fencing.
865 Calls m1 on 'programs' with name and a ProgramDescription. @param name Program name. @param mainClass Main class of the program. @param description Program description.
866 Loads a method from a class. @param targetClass Class containing the method. @param methodName Method name to load. @param argClasses Method argument classes. @return Builder object.
867 Loads a hidden method and makes it accessible. @param targetClass Class containing the method @param methodName Method name @param argClasses Method argument classes @return Builder object
868 Creates an UnboundMethod instance with specified name, applying m1 and m2. @param name Method name. @return An UnboundMethod object.
869 Checks if all methods' m1() return false. @param methods Array of UnboundMethod instances. @return True if all m1() calls return false.
870 Returns the inverse boolean value of the result of method.m1().
871 Binds a method to a receiver object. @param receiver The object to bind the method to. @return A BoundMethod instance.
872 Calls m2 with result of m1 and a message, returns StaticMethod.
873 Calls m3 with results of clazz.m1(), clazz.m2(), and "jar".
874 Masks a class using m1, m2 methods and "file".
875 Writes checksum data to output and resets state. @param out Output stream to write to. @param reset Reset internal state after writing. @return Size of the type.
876 Writes checksum to buffer, resets summer if needed. @param buf buffer to write to, @param offset offset, @param reset reset flag @return size of checksum type
877 Creates a RateLimiting object. Returns m1() if capacity is 0.
878 Registers UNIX signal handlers for TERM, HUP, INT. Throws IllegalStateException if already registered.
879 Creates a LightWeightGSet with a recommended initial length. @param recommended_length initial capacity suggestion
880 Populates include/exclude sets with details from current host.
881 Populates include/exclude host sets from current host details.
882 Processes data using a key, updating internal state. @param key Key for processing. @param nbytes Number of bytes to process. @param initval Initial value for the processing.
883 Selects a hash function based on the given type. @param type hash function type (JENKINS_HASH, MURMUR_HASH) @return Hash object or null if type is invalid.
884 Constructs a new CountingBloomFilter with default parameters.
885 Default constructor for the Bloom filter.
886 Constructs a new, empty DynamicBloomFilter.
887 Calculates hash values from key data. @param k Key object containing data to hash. @return Array of hash values.
888 Creates an AutoCloseableLock with a ReentrantLock.
889 Calls the m1 method.
890 Logs an error message with details and exception to stderr. @param e The exception to log. @param text Error message format. @param args Arguments for the message format.
891 Logs an error message with an error code and text. @param errorcode Error code to log. @param text Error message text.
892 Logs class loading information, including name and URL. @param name Class name. @param clazz The class object.
893 Retrieves data using the m1() method of the curData object.
894 Constructs a PureJavaCrc32 object and initializes it.
895 Executes shutdown hooks and returns the number of timeouts.
896 Adds an element to the heap and maintains heap properties. @param element The element to add to the heap.
897 Removes and returns the root element (first) from the heap. Returns null if the heap is empty.
898 Calls the m1 method.
899 Converts an iterator to a HashSet. @param elements Iterator of elements to add to the set. @return A HashSet containing the elements from the iterator.
900 Creates a HashSet with elements from m1, sized for expectedSize.
901 Advances to a new value, throwing exception if newValue is too small. @param newValue The target value to advance to. @throws IllegalStateException if newValue is less than current value.
902 Creates a TableListing with specified columns, header, and wrap width.
903 Checks if a key is deprecated. @param key The key to check. @return True if deprecated, false otherwise.
904 Checks if a name is deprecated and accessed. @param name The name to check. @return True if deprecated and accessed, false otherwise.
905 Reloads existing configurations from the registry. Logs action.
906 Processes a name, loading defaults if not already present.
907 Parses a time duration string, converts it, and returns a long.
908 Creates a Properties object from a list of tags. @param tagList List of tags to process. @return Properties object containing processed tag data.
909 Returns REDACTED_TEXT if key matches a condition, otherwise returns value.
910 Returns a redacted value if key matches a condition, otherwise returns the original value.
911 Starts a reconfiguration task, throwing IOException if blocked.
912 Constructs a DeprecationContext from another context and deltas. @param other The context to copy from. @param deltas Array of deprecation deltas to apply.
913 Constructs a ReconfigurationException with property details and cause.
914 Constructs a ReconfigurationException with property details. @param property Property name. @param newVal New value. @param oldVal Old value.
915 Checks if manual HA management is allowed based on target and flags. @param target The HAServiceTarget to check. @return True if manual management is allowed, false otherwise.
916 Executes a command on a remote host via SSH and returns exit code. @param session SSH session object @param cmd Command to execute @return Exit code of the command
917 Checks if failover is possible; throws exception if not healthy.
918 Reads data from a file range into a buffer using an operation. @param range FileRange object defining the range to read.
919 Sorts file ranges and validates against optional file length. @param input List of FileRange objects to sort. @param fileLength Optional file length for validation. @return Sorted list of FileRange objects.
920 Constructs a BlockManager with the provided BlockData. @param blockData The BlockData to use for block management.
921 Calls m1 with the provided data and a string key. @param data BufferData object to be processed
922 Adds an item to the pool, validating its origin. @param item The item to add to the pool.
923 Throws IllegalStateException if state validation fails. Validates states, throws exception if they don't match.
924 Calls m1 and m3. m1 takes arg and argName. m3 validates arg.
925 Validates collection size. @param collection Collection to validate. @param numElements Expected number of elements. @param argName Name of the collection argument.
926 Calls m1 and m3, checking path existence and providing an error message.
927 Creates a bounded resource pool with the specified size. @param size The maximum number of resources in the pool.
928 Creates a buffer pool with specified size and buffer size. @param size Pool size @param bufferSize Buffer size @param prefetchingStatistics Prefetching statistics object
929 Calls m1 with the provided block number and a string literal. @param blockNumber The block number to pass to m1.
930 Constructs a BufferData object. @param blockNumber Block number. @param buffer ByteBuffer containing the data.
931 Constructs a Retryer with specified delay and update interval. @param perRetryDelay Delay between retries. @param maxDelay Maximum delay value. @param statusUpdateInterval Interval for status updates.
932 Processes an array and a string argument using m1 and m2. @param array The input array of type T. @param argName A string argument used in processing.
933 Calls m1 and m2 with the input array and argName.
934 Calls m1 and m2 with the array and argName.
935 Calls m1 and m2 with the provided array and argument name.
936 Calls m1 and m2 with the array and argName.
937 Processes an iterable and a string argument using helper methods.
938 Processes paths, deletes if invalid, and returns a list of results.
939 Applies a function to the result of processing a source. @param source The source object. @param fun The function to apply. @return The result of the function.
940 Constructs a FlagSet with an enum class, prefix, and optional flags.
941 Closes the resource and caches it, logging details.
942 Delegates to another m1 method with a FileStatus object.
943 Delegates the method call to the parent class. @param o The FileStatus object to pass to the parent. @return The result of the parent class's m1 method.
944 Returns a Path array. If stats is null, returns a single Path.
945 Checks if a path has a specific capability (read-only). @param path The path to check. @param capability Capability string. @return True if capability is FS_READ_ONLY_CONNECTOR.
946 Creates a JsonSerialization for IOStatisticsSnapshot. Configures for non-field serialization and pretty printing.
947 Creates a StorageStatistics object from IOStatistics. @param name Statistics name. @param scheme Statistics scheme. @param source IOStatistics source.
948 Returns storage statistics based on m1() and m2().
949 Constructs a PathIsDirectoryException with the given path. @param path The path that is a directory.
950 Constructs a PathIsNotDirectoryException with the given path. @param path The path that is not a directory.
951 Constructs a PathOperationException with the given path. @param path The path associated with the exception.
952 Constructs a DirectoryIsNotEmptyException with the given path. @param path The path of the directory.
953 Initializes buffer size and calls m1(). @param bufSize The size of the buffer. @return The result of calling m1().
954 Sets the replication value and returns the result of m1(). @param replica The replication value to set. @return The result of calling the m1() method.
955 Sets the block size and calls m1(). @param blkSize The desired block size. @return The result of calling m1().
956 Sets recursive to true and returns the result of m1().
957 Sets the CREATE flag and returns the result of m2().
958 Sets the overwrite flag based on the input and returns a B object.
959 Sets the APPEND flag and returns the result of m2().
960 Sets the hosts array, using StringInterner if provided. @param hosts Array of host strings, can be null.
961 Sets cachedHosts. Uses StringInterner if not null.
962 Sets the names array, using StringInterner if names is provided.
963 Sets topology paths, using StringInterner if provided. @param topologyPaths Array of topology path strings.
964 Delegates to m1(f).m2(), returning false on FileNotFoundException.
965 Handles exceptions, returning interrupted/path exceptions or wrapping others. @param path file/directory path @param methodName method name @param exception the exception to handle @return handled IOException
966 Synchronizes input based on position, handling edge cases & checksum.
967 Calls data.m1 with the provided firstPosition.
968 Registers expression classes with the given ExpressionFactory. @param factory Factory to register expression classes with.
969 Registers various command classes with the given CommandFactory.
970 Expands a file pattern into a list of fully qualified paths. @param filePattern The file pattern to expand. @return List of expanded file paths.
971 Lists files under a path, filtered by the given filter. @param f The path to list. @param filter Filter to apply. @return FileStatus array of matching files.
972 Retrieves FileStatus objects for paths matching the filter. @param files array of paths to check @param filter filter to apply @return array of FileStatus objects
973 Renews a delegation token. @param url Token URL. @param token The token to renew. @param renewer Renewer string.
974 Calls m1 with a null request context. @param url The URL to fetch. @param token Authentication token. @return Long value returned by m1.
975 Calls overloaded method with null for the third parameter. @param url The URL to process. @param token Authentication token.
976 Constructs a FileEncryptionInfo object with provided encryption details.
977 Sets the permission and returns a B object. @param perm The permission to set. @return A B object.
978 Processes ChecksumOpt and returns a B object. @param chksumOpt ChecksumOpt object to process @return A B object.
979 Constructs a WrappedIOException with the specified cause. @param cause The underlying IOException being wrapped.
980 Constructs a FsLinkResolution with the given resolution function. @param fn The function to resolve file system links.
981 Constructs a GlobBuilder with the provided FileContext. @param fc The FileContext to use; must not be null.
982 Constructs a GlobBuilder with the given file system. @param fs The file system to use for globbing.
983 Sets the permission and returns a B object. @param perm The permission to set. @return A B object with the updated permission.
984 Processes a Progressable object, sets progress, and returns a B object.
985 Processes checksum options and returns a B object. @param chksumOpt ChecksumOpt object to process @return A B object after processing.
986 Validates byte array bounds for writing. @param b byte array @param off starting index @param len number of bytes to write
987 Checks if s1 contains s2. @param s1 The string to search within. @param s2 The string to search for. @return True if s1 contains s2, false otherwise.
988 Checks if the context is a valid ZooKeeper client. @param ctx The context object to validate. @return True if stale, false otherwise.
989 Retrieves statistics for a filesystem. @param scheme Filesystem scheme; must not be null. @param cls Filesystem class @return Statistics object
990 Copies data from InputStream to OutputStream, optionally closing streams. @param in Input stream. @param out Output stream. @param buffSize Buffer size. @param close Whether to close streams.
991 Copies data from an InputStream to an OutputStream. @param in Input stream to read from. @param out Output stream to write to. @param count Number of bytes to copy. @param close Whether to close streams after copying.
992 Checks a directory, attempting to process files until success. @param dir Directory to check; throws DiskErrorException on failure.
993 Checks if any storage type has a positive quota. @return True if any type quota is positive, false otherwise.
994 Checks if any storage type has consumed resources. @return True if any type has consumed resources, false otherwise.
995 Delegates the call to the superclass's m1 method. @param o The object passed to the super method. @return The result of the superclass's m1 method.
996 Calls the m1 method of the superclass. Returns the integer value returned by the superclass's m1.
997 Calls m1 with initial values of 0 and 0.
998 Calls m3 with values obtained from the given MeanStatistic.
999 Creates a statistics string from IOStatistics. @param statistics IOStatistics object, or null for empty string. @return Statistics string or empty string if null.
1000 Appends processed map entries to StringBuilder, filtering with predicate. @param sb StringBuilder to append to @param type Type string @param map Map to process @param isEmpty Predicate to check for empty values
1001 Returns a DurationTracker with the given key and default value 1. @param key the key for the DurationTracker @return a DurationTracker object
1002 Creates an iterator for LongStatistic objects from counters.
1003 Calls m1, m2, and m3 with the given prefix and duration. @param prefix Prefix string to be used in the calls. @param durationMillis Duration in milliseconds.
1004 Generates and returns IO statistics. Uses m1() to create stats, resets instance.
1005 Updates statistics for a key using the provided evaluation function. @param key The key to update statistics for. @param eval Function to evaluate the key and return a long value.
1006 Sets the key and evaluation function for IO statistics. @param key The key for the statistics. @param eval Function to evaluate the value as a long.
1007 Updates statistics for a key using the provided function. @param key The key for the statistics. @param eval Function to evaluate the value as a long.
1008 Sets the key and evaluation function for IO statistics. @param key The key for the statistics. @param eval Function to evaluate the value as a long.
1009 Adds a statistic evaluation to the builder. @param key Statistic key. @param eval Function to calculate the statistic.
1010 Creates and dispatches an interrupt handler for the given signal. @param signalName The name of the interrupt signal.
1011 Delegates to IOStatisticsBinding.m1, returning a map.
1012 Delegates to overloaded method with a passthrough function. @param source Input map; returned unchanged.
1013 Creates and returns a new IOStatisticsSnapshot object.
1014 Constructs a new IOStatisticsContextImpl with thread and ID. @param threadId The ID of the thread. @param id The unique ID for this context.
1015 Creates and returns a new IOStatisticsSnapshot object.
1016 Delegates to IOStatisticsContext.m1() and returns its result.
1017 Returns IO statistics by calling m1 with the output stream.
1018 Delegates IO statistics calculation to m1, passing 'in'.
1019 Returns IO statistics using the provided data.
1020 Returns IO statistics using provided data. @return IOStatistics object containing statistics.
1021 Returns IO statistics using the provided input stream.
1022 Returns IO statistics for the wrapped stream.
1023 Returns IO statistics using the provided output stream.
1024 Returns IO statistics using the provided input stream.
1025 Returns IO statistics using the provided input stream.
1026 Verifies CRC checksums against provided data and expected values.
1027 Decrypts data at a given position using provided parameters. @param decryptor Decryptor instance @param position Data position @param iv Initialization vector
1028 Encrypts data from inBuffer to outBuffer, handling padding.
1029 Default constructor for MD5MD5CRC32GzipFileChecksum.
1030 Default constructor for MD5MD5CRC32CastagnoliFileChecksum.
1031 Constructs a GlobPattern with the given glob pattern string.
1032 Reads file content. @param file The file to read. @throws IOException If an I/O error occurs.
1033 Masks file content on non-Windows systems. @param file The file to mask. @throws IOException If an I/O error occurs.
1034 Extracts a zip file to the specified directory, ensuring security. @param inputStream Zip archive input stream @param toDir Directory to extract files to
1035 Unzips a file to a directory, handling file creation and permissions. @param inFile Input zip file @param unzipDir Directory to unzip to
1036 Releases the SFTP channel to the connection pool. @param channel The SFTP channel to release.
1037 Shuts down the connection map, closing active SFTP connections.
1038 Initializes the buffer with the given size. @param size The size of the buffer to create.
1039 Constructs a Statistics object as a copy of another Statistics.
1040 Calculates total bytes read using a custom StatisticsAggregator. @return Total bytes read as a long.
1041 Calculates total bytes written using a custom statistics aggregator. @return Total bytes written as a long.
1042 Calculates total read operations using a StatisticsAggregator. @return The total read operation count.
1043 Calculates the total large read operations using StatisticsAggregator. @return int representing the total large read operations.
1044 Calculates the total write operations using a StatisticsAggregator. @return Total write operations count.
1045 Calculates the total remote read time MS using a StatisticsAggregator. @return Total remote read time in milliseconds.
1046 Calculates and returns statistics data using an aggregator. @return StatisticsData object containing aggregated results.
1047 Calculates total bytes read during erasure coding. Returns the sum of bytesReadErasureCoded.
1048 Aggregates statistics data using a StatisticsAggregator.
1049 Validates file creation flags and throws exceptions if needed. @param path The file path. @param pathExists Whether the path exists. @param flag Creation flags.
1050 Processes flags and throws exception if APPEND flag is missing. @param flag EnumSet of CreateFlag values.
1051 Constructs a URI based on input, scheme, authority, and port. @param uri The base URI. @throws URISyntaxException if URI syntax is invalid.
1052 Creates a new ArrayPrimitiveWritable for the given primitive type. @param componentType The Class object representing the primitive type.
1053 Parses permission string and returns the corresponding integer permission.
1054 Calls m1 with a default value for the third parameter. @param defaultOpt Default ChecksumOpt value. @param userOpt User-provided ChecksumOpt value.
1055 Returns a URI by applying m2 to the result of m1.
1056 Creates a ContentSummary with default values for some fields. @param length Total length of content. @param fileCount Number of files. @param directoryCount Number of directories.
1057 Calls m1 with a null argument. @return FsStatus object representing the result.
1058 Constructs an HttpReferrerAuditHeader from a builder, initializing its attributes.
1059 Releases a buffer associated with the given data. @param data BufferData object containing release info.
1060 Constructs a SemaphoredDelegatingExecutor with a permit count. @param executorDelegatee The underlying ExecutorService. @param permitCount The initial number of permits. @param fair Whether permits are granted fairly.
1061 Releases a 'ready' block with highest priority for a block number. @param blockNumber The block number to prioritize for release.
1062 Calls m1() and returns the result of buffer.m2().
1063 Checks if the given position is within the buffer's bounds. @param pos The position to check. @return True if within bounds, false otherwise.
1064 Initializes resources and returns the buffer start offset.
1065 Returns the IO statistics context based on thread IO stats.
1066 Updates IO statistics context, null safe. @param statisticsContext Context to update, or null.
1067 Combines overlapping file ranges into larger, optimized ranges. @param sortedRanges List of sorted file ranges to combine. @param chunkSize Chunk size for combining ranges. @return List of combined file ranges.
1068 Combines overlapping FileRange objects into CombinedFileRange. @param dataRanges List of FileRange objects to combine. @return List of combined FileRange objects.
1069 Default constructor. Initializes with the default visibility.
1070 Processes PathData recursively. @param item PathData to process, depth is ignored. @return Result of processing, fails if any child fails.
1071 Returns the configured FindOptions, initializing if null.
1072 Processes command-line arguments, handling options and values.
1073 Returns a string based on m1(): deprecated message or m2() result.
1074 Logs an error message by prepending a prefix. @param message The error message to log.
1075 Constructs a command string based on internal logic. Returns command or command + usage string.
1076 Constructs ScopedAclEntries from a list of AclEntry objects. Separates access and default entries based on a pivot.
1077 Prints rows to the output stream formatted according to widths. @param out PrintStream to write the formatted rows to.
1078 Creates a new Location object. @param allow boolean indicating location permission @return A new Location object.
1079 Creates a Data object. @param allow boolean value to initialize the Data object. @return A new Data object.
1080 Default constructor, initializes with a default timeout.
1081 Creates a DelegationTokenAuthenticatedURL.Token from a Token. @param dToken The input Token to create the new Token from. @return A new DelegationTokenAuthenticatedURL.Token object.
1082 Delegates to the underlying filesystem's m1 method. @param f The path to retrieve the iterator for. @return RemoteIterator of LocatedFileStatus.
1083 Delegates to the underlying filesystem implementation. @param path Path to open. @param parameters Open file parameters. @return CompletableFuture wrapping FSDataInputStream.
1084 Gets the fallback filesystem. Returns null if unavailable or error.
1085 Copies data from input to output buffers. @param input Input buffer. @param output Output buffer. @return Number of bytes copied.
1086 Encrypts data to the output buffer. @param output ByteBuffer to write encrypted data to @return Number of bytes written to the output buffer
1087 Creates a RegexMountPointInterceptor based on settings. @param interceptorSettingsString settings string to parse @return RegexMountPointInterceptor or null if invalid.
1088 Normalizes a path string, replacing backslashes with forward slashes if on Windows and adjusting length based on separators.
1089 Checks if a path string is valid based on given criteria. @param pathString The path string to validate. @param slashed Whether the path should be slashed. @return True if the path is valid, false otherwise.
1090 Checks if the URI contains a separator after the initial part.
1091 Masks the result of Path method calls with a bitmask. @param p The Path object to process. @return An integer result, masked to remove sign extension.
1092 Validates that the given path is a child of the base path. @param path The path to validate.
1093 Finds the next available ID for new files in a directory. @param initial The base path. @param lastId The last known ID. @return The next available ID.
1094 Applies a mask to a value. @param n The value to be masked. Returns n.
1095 Reads data from an InputStream into a ByteBuffer from a pool. @param stream Input stream to read from @param bufferPool ByteBuffer pool for buffer allocation @param maxLength Maximum number of bytes to read @return ByteBuffer containing the read data @throws IOException if an I/O error occurs
1096 Executes m1 on evaluatedEntries and then calls m2.
1097 Creates and initializes a CommonAuditContext object. Returns the initialized context.
1098 Constructs a FsPermission with user, group, and other actions. @param u User action @param g Group action @param o Other action
1099 Constructs a FsPermission object from a short mode value.
1100 Creates a FsPermission object from input stream. @param in Input stream containing permission bits. @return FsPermission object constructed from the input.
1101 Calls m1 with the provided AclEntry and default permission. @param entry The AclEntry to process. @return An FsAction object.
1102 Creates a PermissionStatus object with the given user, group, and permission.
1103 Parses aclSpec into AclEntry objects. @param aclSpec comma-separated ACL string @param includePermission flag to include permission @return List of AclEntry objects
1104 Creates an FsCreateModes object with the given masked and unmasked permissions.
1105 Outputs ACL entry permissions, comparing effective permission. @param aclStatus ACL status object. @param fsPerm FsPermission object. @param entry AclEntry object.
1106 Splits a string by comma. @param str The string to split. @return String array of split strings.
1107 Calls m1() and returns the result of byteBuffer.m2().
1108 Calls m1() and returns the result of byteBuffer.m2().
1109 Initiates a data block upload. Returns null.
1110 Attempts to close the state; returns true if successful.
1111 Calls super.m1() and then calls out.m1().
1112 Delegates to AbstractFileSystem.m1 to get statistics for a URI. @param uri The URI to get statistics for. @return Statistics object.
1113 Delegates to a context's m2() method. @return Result of context.m2()
1114 Syncs data if necessary, writing SYNC_ESCAPE and sync data.
1115 Returns a value from the output stream. @return Long value obtained from m1() method. @throws IOException if an I/O error occurs.
1116 Calculates a value by summing results from fsOut and fsBufferedOutput.
1117 Calculates content summary for a file or directory. @param f Path to the file or directory. @return ContentSummary object with aggregated file stats.
1118 Processes user/group strings to populate users and groups. Populates users/groups based on input strings; uses m2/m3.
1119 Creates an EnumSet from a string value, using enum mapping. @param key Key identifier, valueString comma-separated values.
1120 Checks if the service state matches the expected state. @param expectedState The expected service state. @throws ServiceStateException if states do not match.
1121 Initializes the service with a name and associated state model. @param name Service name.
1122 Checks if a state transition is valid. @param name Service name, state, and proposed state. @throws ServiceStateException if transition is invalid.
1123 Creates a ServiceLaunchException wrapping the given exception. @param exception The exception to wrap. @return A new ServiceLaunchException.
1124 Validates configuration files exist. @param filenames array of configuration file paths
1125 Creates a ServiceLaunchException from a Throwable. @param thrown The exception to wrap. @return A ServiceLaunchException with details from thrown.
1126 Initializes the shutdown hook with a weak reference to the service. @param service The service to be shut down.
1127 Records a failure, storing the exception and state. @param exception The exception that caused the failure.
1128 Records a lifecycle event with timestamp and state.
1129 Stops services, optionally only started ones. Throws exception if any occur.
1130 Calls overloaded method with default logger. @param service The service object to process. @return An Exception if processing fails.
1131 Compares bytes using WritableComparator. @param o The other byte array to compare. @return Comparison result.
1132 Compares this UTF8 object with another. @param o The object to compare to. @return True if equal, false otherwise.
1133 Compares this MD5 hash with another using WritableComparator. @param that the MD5Hash to compare with @return int result of the comparison
1134 Compares this object with another BinaryComparable object. @param other The other object to compare with. @return Comparison result using WritableComparator.
1135 Compares two byte arrays using WritableComparator. @param other The second byte array to compare. @param off Offset in 'other' to start comparison. @param len Length of data to compare in 'other'.
1136 Compares two objects using WritableComparator. @return int result of the comparison.
1137 Calculates a double value based on byte array and start index.
1138 Sets the size, adjusting if it exceeds the maximum allowed size. @param size The desired size to set.
1139 Checks if a file is readable, platform-specific. @param f The file to check. @return True if readable, false otherwise.
1140 Checks if a file is writable. Uses NativeIO on Windows, f.m1() otherwise.
1141 Checks if a file has execute permission. @param f The file to check. @return True if executable, false otherwise.
1142 Returns the ReadaheadPool instance, creating it if necessary.
1143 Returns m2 if m1 is true, otherwise returns 0.
1144 Calculates checksums for data, using native or custom methods. @param data Data to checksum. @param dataOffset Offset into data. @param dataLength Length of data. @param sums Checksum storage. @param sumsOffset Offset into sums.
1145 Opens a file for writing, creating it if it doesn't exist. @param f The file to open. @param permissions File permissions. @return A FileOutputStream object.
1146 Drains the buffer pool, processing each buffer with CryptoStreamUtils.
1147 Applies a cryptographic operation to both inBuffer and outBuffer.
1148 Gets file stat information for a file descriptor. @param fd The file descriptor. @return Stat object containing file statistics.
1149 Retrieves Stat object for the given path. @param path file path to get stat for @return Stat object or null if an error occurs
1150 Constructs a BoundedByteArrayOutputStream with given capacity and limit.
1151 Constructs an EnumSetWritable with the given EnumSet. @param value The EnumSet to wrap.
1152 Delegates input stream processing to the buffer. @param in Input stream to process. @param length Number of bytes to read.
1153 Reads key data using keyDataInputStream and returns it.
1154 Decodes a Base64 string and writes it to a Writable object. @param obj Writable object to write to @param newValue Base64 encoded string
1155 Processes byte arrays using keys, then calls m3 with them. @param b1, b2 byte arrays to process, s1, s2 their offsets, l1, l2 their lengths @return Result of calling m3 with derived keys.
1156 Checks if the erased count in the block group is within range. @param blockGroup ECBlockGroup object to check. @return True if erased count is within range, false otherwise.
1157 Recursively calculates a sum based on block group data.
1158 Extracts indices of erased blocks from input. @param inputBlocks ECBlock array to process. @return Array of erased block indices.
1159 Validates input buffers, throws exception if invalid or insufficient.
1160 Validates input buffers and throws exception if invalid or insufficient.
1161 Initializes erasure decoding step with input blocks, erased indexes, decoders, encoders.
1162 Validates input arrays and lengths for decoding. @param inputs Input array. @param erasedIndexes Indexes to be erased. @param outputs Output array.
1163 Initializes an HHXORErasureEncodingStep with encoders and block arrays.
1164 Validates input and output array lengths against encoder sizes.
1165 Merges two arrays, prioritizing elements from both up to the shorter length.
1166 Combines two int arrays using m2 and recursive m1 calls. @param p First int array. @param q Second int array. @return Combined int array.
1167 Performs row operations on a matrix to transform it. Asserts matrix validity; uses helper methods m1, m2, m3.
1168 Processes chunks after printing a header and footer. @param header Header string to print. @param chunks Array of ECChunk objects to process.
1169 Processes data in each buffer with m1. @param buffers Array of ByteBuffers to process. @param dataLen Length of data to be processed.
1170 Converts ECChunks to ByteBuffer array, applying optional encoding. @param chunks Array of ECChunk objects to convert. @return ByteBuffer array containing the converted data.
1171 Processes data in buffers using m1, offset by offset values.
1172 Creates a GaloisField with default size and polynomial. @return A GaloisField object.
1173 Creates a BlockCompressorStream. @param out Output stream. @param compressor Compressor. @param bufferSize Buffer size. @param compressionOverhead Overhead for compression.
1174 Creates a ZStandardDecompressor with a specified buffer size. @param bufferSize The size of the direct buffers to allocate.
1175 Creates a new Lz4Compressor with the default direct buffer size.
1176 Resolves a CompressionCodec by name. @param codecName Name of the codec to resolve. @return CompressionCodec instance or null if not found.
1177 Obtains a compressor, either from a pool or creates a new one. @param codec Compression codec to use. @param conf Hadoop configuration. @return A Compressor instance.
1178 Retrieves a Decompressor from a pool or creates a new one. @param codec CompressionCodec used to obtain the decompressor @return A Decompressor instance
1179 Processes a compressor, potentially using a pool and updating counts. @param compressor The compressor object to process.
1180 Processes a Decompressor, potentially triggering decompression. @param decompressor The Decompressor object to process.
1181 Returns the ZStandardCompressor class. Calls m1() first.
1182 Returns the ZStandardDecompressor class. Calls m1() first.
1183 Constructs a ZlibCompressor with default compression settings.
1184 Constructs a ZlibCompressor with default header and buffer size. @param conf Configuration object for compression parameters.
1185 Reinitializes the compressor with a new configuration. @param conf Configuration object for compressor settings.
1186 Processes Gzip header fields based on current state and input buffer.
1187 Writes data to the output stream. @param out DataOutput to write to. @throws IOException if an I/O error occurs.
1188 Reads a long from the stream and casts to int, throws IOException if out of range.
1189 Reads an integer from stream, validates range [lower, upper]. @param stream Input stream. @param lower Lower bound (inclusive). @param upper Upper bound (inclusive). @return Integer value from stream.
1190 Constructs a Text object with the given string. @param string The string to be set as the text content.
1191 Finds the index of a sequence in bytes, returns -1 if not found.
1192 Writes string length to output and then the string itself. @param out DataOutput to write to @param s String to write @return Length of the written string
1193 Writes a string to the output, ensuring it's within maxLength. @param out DataOutput to write to @param s String to write @param maxLength Max length of string in bytes @return Length of the written string
1194 Processes a byte array. Handles empty arrays separately.
1195 Calls m3 with values from 'other' object. Updates textLength with value from 'other'.
1196 Reads text until newline or maxBytes, appending to a buffer. @param str Text buffer to append to @param maxLineLength Max chars per line @param maxBytesToConsume Max bytes to consume @return Number of bytes consumed
1197 Extracts data from a Text stream until a delimiter is found. @param str Text object to read from, maxLineLength, maxBytesToConsume @return Number of bytes consumed from the stream.
1198 Constructs a new SortedMapWritable. Initializes the internal TreeMap.
1199 Constructs a new MapWritable with an internal HashMap.
1200 Constructs a Key from a byte array. Uses a default precision of 1.0.
1201 Calculates MD5 hash of the input byte array. @param data The byte array to hash. @return MD5Hash object representing the hash.
1202 Calculates MD5 hash of UTF8 string. @param utf8 UTF8 object to hash. @return MD5Hash object representing the hash.
1203 Constructs an MD5Hash object from a hexadecimal string. @param hex The hexadecimal representation of the hash.
1204 Creates a RetryPolicy with max attempts and fixed sleep. @param sleepTime Sleep time between retries. @param timeUnit Time unit of the sleep time.
1205 Creates a RetryPolicy with max retries and fixed sleep time. @param maxRetries Maximum number of retries. @param sleepTime Sleep time between retries. @param timeUnit Time unit for sleepTime.
1206 Creates an ExponentialBackoffRetry policy with given params. @param maxRetries Max retry attempts. @param sleepTime Initial sleep time. @param timeUnit Time unit for sleepTime.
1207 Creates a RetryPolicy with proportional sleep. @param maxRetries Max retries allowed. @param sleepTime Initial sleep time. @param timeUnit Time unit for sleepTime.
1208 Acquires a write lock and records the timestamp if successful.
1209 Records the timestamp when the lock is acquired.
1210 Updates timestamp if read lock is held. @return void
1211 Creates a dynamic proxy implementing the given interface. @param iface Interface to implement. @return Proxy object.
1212 Delegates the call to m1() to multipleLinearRandomRetry. Returns the value returned by the delegate method.
1213 Checks if this policy is equivalent to another. @param obj The object to compare with. @return True if equivalent, false otherwise.
1214 Delegates exception handling to m1. @return IOException - exception thrown by m1
1215 Delegates to Compression.m1() and returns its result.
1216 Delegates to rBlkState's m1() method and returns the result.
1217 Reads a string from the input stream. @param in DataInput stream to read from @return String read from the stream, or null if error.
1218 Reads data, adjusts 'remain', and sets 'lastChunk' flag.
1219 Returns a Comparator<RawComparable> using TFileMeta.m1. @param name Used by TFileMeta.m1 to create the comparator.
1220 Writes a chunk of data to the output stream, handling last chunk. @param chunk Data to write. @param offset Starting offset in the chunk. @param len Length of data to write. @param last True if this is the last chunk.
1221 Writes data to the output stream, adjusting for buffer size. @param data Data to write. @param offset Starting offset in data. @param len Number of bytes to write.
1222 Initializes the encoder with an output stream and chunk size. @param out Output stream for writing encoded data. @param size Chunk size to be encoded.
1223 Creates a comparator for Scanner.Entry objects based on m4. Throws RuntimeException if entries are not comparable.
1224 Checks if currentLocation is before endLocation. @return True if currentLocation is before endLocation.
1225 Finds the location of a block given an offset. @param offset The offset into the data. @return Location object or end if block not found.
1226 Creates a new Location object using blockIndex and recordIndex.
1227 Calls overloaded method with offset 0. @param buf input byte array @throws IOException if I/O error occurs
1228 Truncates string if too long, converts to bytes, and writes to buffer.
1229 Converts Writable objects to a byte array. @param writables Array of Writable objects to convert. @return Byte array representation of the writables.
1230 Converts a string to a byte array using a specific encoding. @param string The input string to convert. @return Byte array representing the encoded string.
1231 Deflates data from buffer to output stream. Uses deflateFilter, buffer, and deflateOut for processing.
1232 Copies data from the provided Writable object. @param other The Writable object to copy from.
1233 Writes a key-value pair to the output stream with type validation. @param key The key object. @param val The value object.
1234 Generates a byte array by writing data to a buffer. Uses m1 to write data; returns the resulting byte array.
1235 Masks object data to a Base64 string. @param obj Writable object to be masked. @return Base64 encoded string representation of the object.
1236 Calls m3 on inBuffer with results from outBuffer's m1 and m2.
1237 Calculates a distance between two nodes based on their paths. @param node1 The first node. @param node2 The second node. @return Distance value.
1238 Delegates to m2 with the result of node.m1().
1239 Collects leaf nodes within a given scope. @param scope defines the scope to search within @return List of leaf Node objects found in scope
1240 Calculates a count based on scope, excluded nodes, and cluster size.
1241 Processes a node, updating rack membership and triggering updates.
1242 Sorts nodes based on weight, then applies secondary sort. @param nodes Array to store sorted nodes. @param activeLen Number of active nodes to sort.
1243 Decommissions a node, ensuring it's not an inner node. @param node The node to decommission.
1244 Overloads m1 with default buffer values. @param fileCh FileChannel to read from. @param position Start position. @param count Number of bytes to read.
1245 Wraps an IOException with a more descriptive error message. @param exception The original IOException to wrap.
1246 Default constructor for RawScriptBasedMappingWithDependency.
1247 Initializes a ScriptBasedMapping with a DNSToSwitchMapping. @param rawMap The raw mapping data.
1248 Constructs an InnerNodeImpl with the given path. @param path The path for this node.
1249 Constructs an InnerNodeImpl with name, location, parent, and level.
1250 Sends a notification via socket, handling potential IO errors.
1251 Creates a DomainSocket connected to the specified path. @param path Socket path. @throws IOException if an I/O error occurs.
1252 Creates and returns a DomainSocket array from file descriptors.
1253 Creates a DomainSocket using the given path. @param path socket path @return DomainSocket object
1254 Processes entries and calls m2 if m1 returns true. @param caller Caller identifier, entries, fdSet, fd
1255 Closes the resource, notifies the watcher thread, and releases the lock.
1256 Retrieves a SelectorInfo for the given channel. Creates one if it doesn't exist.
1257 Updates activity time and registers provider info. @param info SelectorInfo object containing provider details.
1258 Calls m1 with the interface string and default flag true. @param strInterface Interface string to use. @throws UnknownHostException if host resolution fails.
1259 Resolves hostnames for a given interface, using fallback resolution if needed. @param strInterface Interface to resolve @return Array of resolved hostnames.
1260 Constructs a LogThrottlingHelper with a minimum log period. @param minLogPeriodMs Minimum time (ms) between log entries.
1261 Creates a LogAction with default recorder name and timestamp. @param values double values to be logged @return LogAction object
1262 Processes a name string using HtmlQuoting and rawRequest. @param name The name to be processed. @return The processed name string.
1263 Retrieves a URL from rawRequest, quotes it, and returns as StringBuffer.
1264 Quotes the raw request string using HtmlQuoting.m2(). Returns the quoted string.
1265 Creates a FileMonitoringTimerTask for a single file. @param filePath Path to monitor. @param onFileChange Callback on file change. @param onChangeFailure Callback on failure.
1266 Creates a record from a MetricsRecord. @param mr The MetricsRecord to use. @return A Record object.
1267 Executes a consumer with a value from m1(), then calls m4. @param consumer Consumer to be executed with the value from m1()
1268 Executes a consumer multiple times, performing setup/cleanup. @param consumer The consumer to execute repeatedly.
1269 Calls the m1() method on the cacheHit object.
1270 Clears the cache using the provided cacheClearer object.
1271 Calls the m1() method of the cacheUpdated object.
1272 Calls the m1 method on the rpcClientBackoffDisconnected object.
1273 Calls the m1 method of the rpcSlowCalls object.
1274 Requeues RPC calls using the rpcRequeueCalls object.
1275 Calls the m1() method on the rpcCallSuccesses object.
1276 Writes data from buffer to channel, handling buffer size limits. @param channel WritableByteChannel to write to @param buffer ByteBuffer to read from @return Number of bytes written
1277 Reads data from a channel into a buffer. @param channel ReadableByteChannel to read from. @param buffer ByteBuffer to write to. @return Number of bytes read.
1278 Increments failure count and updates the last failure timestamp.
1279 Retrieves user groups, logs duration, and warns on slow execution. @param user User identifier. @return Set of user group names.
1280 Logs the 'name' to the default metrics system.
1281 Calculates and applies quantile-based formatting. @param ucName, uvName, desc, lvName input strings. @param pDecimalFormat DecimalFormat for percentile formatting.
1282 Processes inverse quantiles, generating names and descriptions. @param ucName, uvName, desc, lvName Input strings for formatting. @param df DecimalFormat object for number formatting.
1283 Creates a MetricsRegistry with the given name. @param name The name of the metrics registry.
1284 Creates a MetricsTag with given name, description, and value.
1285 Creates a MutableStat with capitalized names and descriptions. @param name Stat name. @param description Stat description.
1286 Registers a metric with given info and value, optionally overriding. @param info Metric info object @param value Metric value @param override Whether to override existing metrics @return MetricsRegistry instance
1287 Updates statistics and minimum/maximum values, then calls m2. @param value The value to use for updating statistics.
1288 Returns the combined processing time from rpcProcessingTime.
1289 Adds a value to the buffer and increments counters. @param v The value to add to the buffer.
1290 Calculates quantile counts. Returns map of quantile to count.
1291 Returns the top N token owners. @param n number of top owners to retrieve @return List of NameValuePair objects representing top owners
1292 Processes a list of groups, caching those meeting criteria.
1293 Returns a collection of tokens, synchronized on 'subject'.
1294 Transforms user input and returns a list of strings. @param user The user input string. @return A list of transformed strings.
1295 Transforms user data to a set of strings. @param user User identifier; returns a Set<String>.
1296 Retrieves user groups, caches them, and returns the list.
1297 Calls m1 with an empty string as an argument.
1298 Sets the value of a property to UNSET. @param property The name of the property to set.
1299 Logs the value of an environment variable. @param variable Name of the environment variable.
1300 Reads a file line by line and prints each line to the console. @param file The file to read. @throws IOException if an I/O error occurs.
1301 Logs an error message with a category and formatted arguments. @param category Error category. @param message Error message format. @param args Arguments for message formatting.
1302 Logs a warning message with a specified category and formatted arguments.
1303 Delegates authentication to the user object. @param authMethod Authentication method to use.
1304 Writes a byte to the output stream, optionally wrapped. @param b The byte to write. @throws IOException if an I/O error occurs.
1305 Calls overloaded m1 with full byte array. @param b byte array to process @throws IOException if an I/O error occurs
1306 Retrieves delegation token information, validating its existence and expiry. @param identifier Token identifier @return DelegationTokenInformation or throws InvalidToken
1307 Delegates the secret manager to the token manager for processing.
1308 Updates the master key for generating delegation tokens. Uses m2() to get new ID, creates DelegationKey, and updates.
1309 Default constructor for DelegationKey, initializes with default values.
1310 Constructs a DelegationTokenAuthenticatedURL. @param authenticator DelegationTokenAuthenticator @param connConfigurator ConnectionConfigurator
1311 Attempts to renew a delegation token, or obtains a new one. Returns true if a filesystem was obtained, false otherwise.
1312 Reads a byte from the input stream, wrapping if enabled. @return The byte value, or -1 if end of stream. @throws IOException if an I/O error occurs.
1313 Reads bytes from the input stream into the provided byte array.
1314 Calls m2 with an InetAddress derived from remoteAddress. @param user UserGroupInformation for authorization. @param remoteAddress Remote address string. @throws AuthorizationException if host resolution fails.
1315 Checks if m1() returns a non-null value.
1316 Creates a UserGroupInformation with provided user and real user. @param user User identifier. @param realUser The real UserGroupInformation. @return A UserGroupInformation object.
1317 Returns the underlying UserGroupInformation or the input if null.
1318 Constructs a string with authentication and source information.
1319 Gets the authentication method. Uses m1() to get UGI, otherwise uses the current object. Returns the authentication method.
1320 Determines the authentication method for a UserGroupInformation. @param ugi UserGroupInformation object. @return AuthenticationMethod for the user.
1321 Creates an IpcConnectionContextProto based on protocol, ugi, auth. @param protocol Protocol string. @param ugi UserGroupInformation object. @param authMethod Authentication method. @return IpcConnectionContextProto object.
1322 Validates SSL session certificate against the host. @param host The hostname to validate against. @param session The SSL session to validate. @return True if validation succeeds, false otherwise.
1323 Retrieves a resource URL by name. Returns SUCCESS or E_NOT_FOUND.
1324 Constructs a Command object with the given configuration.
1325 Constructs a CommandFactory with the given configuration. @param conf Configuration object for factory setup.
1326 Constructs a FsShell object with the given configuration. @param conf Hadoop configuration object.
1327 Constructs a FindClass object using the provided configuration. @param conf Configuration object for class finding.
1328 Constructs a GetGroupsBase with a configuration and print stream. @param conf Configuration object @param out PrintStream for output
1329 Default constructor. Calls the parameterized constructor with null.
1330 Constructs a masked string based on the allAllowed flag. Returns the masked string.
1331 Finds a valid Kerberos ticket from the subject's tickets. @return A valid KerberosTicket or null if none found.
1332 Calls m1 with a default ClientX509Util. @param zkClientConfig ZK client configuration. @param truststoreKeystore Truststore/keystore details.
1333 Creates an OpensslCipher with given transformation and engine. @param transformation Cipher transformation string. @param engineId Engine identifier, or null for default. @return An OpensslCipher object.
1334 Creates a KeyVersion using provided name and material. @param name KeyVersion name. @param options Options object for key creation. @return KeyVersion object.
1335 Retrieves a KeyVersion for the given name. @param name Key name; throws IOException if metadata not found. @return KeyVersion object.
1336 Processes element 'e'. Delegates if m1() fails, or acts based on m2().
1337 Initializes the RPC invoker and sets the initialization flag.
1338 Starts the stopwatch. Throws exception if already running. Returns the StopWatch instance for chaining.
1339 Stops the stopwatch and returns the elapsed time. Returns this StopWatch instance.
1340 Returns elapsed time, considering if the timer is started.
1341 Delegates to a helper method after processing the input array.
1342 Retrieves or creates a ProtocolSigFingerprint for the given protocol and server version.
1343 Creates a RemoteException with class and message from attributes.
1344 Returns a partial listing, throwing an exception if present.
1345 Records processing details for a schedulable task. @param callName The name of the call. @param schedulable The schedulable object. @param details Processing details object.
1346 Checks if an element 'e' can be processed at a given priority. @param priority Priority level to check. @param e Element to process. @param includeLast Whether to include the last priority.
1347 Handles exceptions, populates response params with error details.
1348 Constructs a VersionMismatch exception with interface name & versions. @param interfaceName Interface name. @param clientVersion Client version. @param serverVersion Server version.
1349 Updates the cache schedule with computed levels for each ID.
1350 Retrieves priority based on cache or cost. @param identity Object used as key for priority lookup. @return Priority integer value.
1351 Calls the m1 method of the superclass and returns its result.
1352 Returns a value based on m1() and m2() calls. Uses m1() to get an index, then calls m2().
1353 Gets address string. Returns null if address is null.
1354 Constructs a MachineList with the given host entries and default InetAddressFactory. @param hostEntries Collection of host entries to initialize the list.
1355 Calls m1 with the default value of false.
1356 Calculates available RAM size in KB. Uses inactiveFileSize if available.
1357 Calls m1() and returns the result of cpuTimeTracker.m2().
1358 Calculates overall CPU usage, dividing by a factor. Returns usage or UNAVAILABLE if not available.
1359 Calculates and returns overall vCore usage, dividing by 100 if available.
1360 Inserts a key-value pair into the buffer, resizing if needed. @param k The key to insert. @param v The value associated with the key.
1361 Creates a TransformerFactory with secure processing enabled. @return TransformerFactory instance with secure processing on.
1362 Creates and configures a SAXTransformerFactory. Enables secure processing and applies custom settings.
1363 Formats size as a string. Human-readable if flag is true. @param size The size in bytes. @param humanReadable Flag to format as human-readable.
1364 Formats size as string, human-readable if specified. @param size Size in bytes. @param humanReadable True for human-readable format.
1365 Converts a number to a string with a traditional binary prefix. @param number The number to convert. @return String representation with binary prefix.
1366 Converts a length to a binary prefix string (e.g., 1024 -> 1KiB). @param len The length value to convert. @return Binary prefix string representation.
1367 Reports filesystem status. @param uri URI of the filesystem, fsStatus, mountedOnPath
1368 Calls overloaded method with full byte array. @param bytes The byte array to process.
1369 Calls m1 with an additional null parameter. @param s IndexedSortable object @param p starting index @param r ending index
1370 Logs an ExitException using ExitUtil. @param ee The exception to log.
1371 Logs a ServiceLaunchException with the given status and message.
1372 Handles an exception, potentially wrapping it as an ExitException. @param status Exit status code. @param t The exception to handle.
1373 Throws an ExitException with the given status and message. @param status Exit status code. @param msg Error message.
1374 Handles HaltException, recursively escalating if needed. @param status Status code for the exception. @param t The exception to handle.
1375 Throws a HaltException with the given status and message.
1376 Unregisters the shutdown hook. Handles potential IllegalStateExceptions.
1377 Converts an iterable to an ArrayList. Handles null and iterables.
1378 Creates a LinkedList from an Iterable of elements. @param elements Iterable source for LinkedList elements @return LinkedList containing elements from the Iterable
1379 Masks ACL entries based on permission and existing entries. @param perm FsPermission to apply. @param entries Existing ACL entries to mask. @return Masked list of ACL entries.
1380 Creates an ArrayList from a variable number of elements. @param elements elements to add to the list @return ArrayList containing the provided elements
1381 Creates an ArrayList with the estimated size. @param estimatedSize Initial capacity of the ArrayList.
1382 Processes a file using an instance. @param file Input file to process. @param instance Instance used for processing.
1383 Initializes a duration tracker with a key and initial count. @param iostats Store for IO statistics. @param key Identifier for the tracker. @param count Initial counter value.
1384 Creates a DurationInfo object, logs start message based on config. @param log Logger instance @param logAtInfo Whether to log at info level @param format Format string for the duration text @param args Arguments for the format string
1385 Delegates to the m1() method and returns its result.
1386 Creates a CrcComposer with specified type, hint size, and stripe length.
1387 Calculates a masked CRC value. @param crcA, crcB CRC values, lengthB length, mod modulus.
1388 Calculates and returns a digest based on stripe data. Resets composite CRC and position after calculation.
1389 Extracts a file from an input stream to a directory. @param inputStream Source input stream @param toDir Destination directory @param name File name @param unpackRegex Regex for unpacking (optional)
1390 Delegates to overloaded method with default match filter. @param jarFile Input JAR file. @param toDir Output directory.
1391 Overloaded method to call the recursive implementation. @param utf byte array, b byte value, n int value
1392 Retrieves a value by key, potentially creating/reclaiming it.
1393 Logs lock held/wait time if exceeding threshold, avoids spamming. @param acquireTime Lock acquisition timestamp. @param releaseTime Lock release timestamp. @param checkLockHeld Flag to check if lock was held.
1394 Constructs a formatted string including finish time and duration. @param formattedFinishTime Finish time string. @param finishTime Finish time in milliseconds. @param startTime Start time in milliseconds.
1395 Splits a string by a delimiter, escaping a character. @param str The string to split.
1396 Masks a string by replacing characters with underscores. @param s The string to mask. @return The masked string.
1397 Escapes characters in a string using a custom escape character. @param str String to escape @param escapeChar Escape character @param charToEscape Character to escape
1398 Escapes characters in a string using a custom escape character. @param str String to escape. @param escapeChar Escape character. @param charToEscape Character to escape.
1399 Constructs a startup message string with class, host, args, version info.
1400 Returns a masked value from the COMMON_VERSION_INFO object.
1401 Returns the next element if available, otherwise throws exception.
1402 Checks for next element, handles IO errors, and calls m4 if absent.
1403 Creates a LazyAutoCloseableReference from a supplier. @param supplier Supplier of AutoCloseable resource. @return LazyAutoCloseableReference instance.
1404 Deletes files/directories recursively using BulkDelete. @param fs FileSystem object @param path Path to delete @return Number of deleted items
1405 Deletes paths using a bulk delete operation. @param fs FileSystem object @param base Base path for deletion @param paths Paths to delete @return List of deleted paths
1406 Opens a data input stream with specified policy, status, length, options. @param fs Filesystem object @param path Path to open @return FSDataInputStream object
1407 Reads data into a buffer at a specified position from an input stream.
1408 Retrieves IO statistics snapshot for a given file system path. @param fs file system @param path path to snapshot @return IOStatisticsSnapshot object
1409 Creates an IOStatisticsSnapshot from JSON. @param json JSON string containing snapshot data. @return IOStatisticsSnapshot object.
1410 Delegates evaluation to m1, providing this object as the evaluator.
1411 Creates a Builder for masking items from an iterable. @param items Iterable of items to be masked. @return Builder object for masking.
1412 Delegates to FutureIO.m1, throwing IOException. @param e The ExecutionException to delegate. @return The result of FutureIO.m1.
1413 Retrieves the result from a Future, handling exceptions. @param future Future object to retrieve the result from. @return Result of the Future or handles exceptions.
1414 Gets the result of a Future with a timeout. @param future Future to check. @param timeout Timeout duration. @param unit Timeout unit (e.g., SECONDS). @return Result of the Future. @throws TimeoutException if timeout expires.
1415 Delegates to FutureIO.m1(e). @param e CompletionException to delegate. @return Result from FutureIO.m1(e).
1416 Delegates m1 and m2 to theObject if it's Configurable. @param theObject Object to potentially delegate to. @param conf Configuration object to pass.
1417 Retrieves a Class object by name, using NAME_TO_CLASS or config. @param name Class name to retrieve. @param conf Configuration object. @return Class object or throws IOException if not found.
1418 Loads a class by name, using configuration if provided. @param conf Configuration object, or null. @param className Class name to load. @return The loaded Class object.
1419 Loads a class by name. @param name The name of the class to load. @return The loaded Class object.
1420 Logs a stack trace if the minimum interval has passed. @param log Logger instance. @param title Title for the log message. @param minInterval Minimum time interval in seconds.
1421 Logs a stack trace if the minimum interval has passed. @param log Logger instance @param title Stack trace title @param minInterval Minimum time interval in seconds
1422 Creates a builder, ensuring only path or pathHandle is provided. @param optionalPath Optional path to use. @param optionalPathHandle Optional path handle to use.
1423 Default constructor. Initializes with default configuration settings.
1424 Throws an exception based on HTTP response status and error details.
1425 Creates a Checksum instance, preferring Java9Crc32C if available. Falls back to PureJavaCrc32C on failure.
1426 Delegates to Shell.m1 to retrieve string array based on username.
1427 Delegates to Shell.m1 to retrieve string array by username. @param userName The username to use for the request. @return String array returned by Shell.m1.
1428 Appends a file path to a command array. @param perm permission string, recursive flag, file path @return Command array with the added file path.
1429 Delegates processing to m1 with initial value 0 and given PID.
1430 Delegates to m1().m2() and returns the result.
1431 Returns a File object for the executable path. Uses m1() to get base dir, then combines with executable.
1432 Returns a Progress object, calculating phase weightage.
1433 Executes m1() n times, then calculates phase progress. @param n Number of times to execute m1(); affects progress.
1434 Creates a Progress object, sets status, and returns it. @param status Progress status string @param weightage Progress weightage float @return Progress object with updated status
1435 Synchronized method that returns the result of m1().
1436 Calls m1 with null arguments. @param path The path to be processed. @return True if successful, false otherwise.
1437 Processes a path, applying ACLs to each segment. @param path The path to process. @param zkAcl ACLs to apply to each path segment.
1438 Sets method details, loading class if needed. @param className Class name to load. @param methodName Method name. @param argClasses Argument classes.
1439 Calls m1 with the targetClass and provided argument classes. @param targetClass The class to be targeted. @param argClasses Argument classes for the method. @return This builder instance.
1440 Sets method details, loading class if not found. @param className Class name. @param methodName Method name. @param argClasses Argument class types.
1441 Calls m1 with the provided target class and argument classes. @param targetClass The class to be targeted. @param argClasses Argument classes to be passed. @return This builder instance.
1442 Creates an unbound method. Returns it or a default if source is null.
1443 Checks if all unbound methods are supported; throws exception if not.
1444 Delegates deletion to m1, using bulkDeleteDeleteMethod.
1445 Delegates to m1 with fileSystemOpenFileMethod. Returns the result of the delegation.
1446 Delegates to m1 with the provided buffer state. @return True if m1 succeeds, false otherwise.
1447 Processes input stream based on a condition. @param in Input stream to process. Returns boolean result.
1448 Delegates to m1 with the istatisticsSnapshotCreateMethod.
1449 Delegates to m1 with the istatisticsContextEnabledMethod flag.
1450 Executes unbound method. Throws UnsupportedOperationException if fails.
1451 Delegates to m1() and then calls m2() with the receiver.
1452 Delegates to m1 and passes the receiver to m2.
1453 Chains method calls: returns the result of m1().m2().
1454 Chains method calls: returns the result of m1().m2().
1455 Loads file systems using ServiceLoader and registers them.
1456 Calculates and prints the Jenkins hash of a file. @param args Command-line arguments; expects filename. @throws IOException if file reading fails.
1457 Constructs a HashFunction with specified max value, hash count, and type. @param maxValue Max value for hashing. @param nbHash Number of hash functions. @param hashType Type of hash function.
1458 Constructs a new RetouchedBloomFilter instance.
1459 Finds the minimum value in hash buckets based on key. Returns the minimum value or 0 if no value is found.
1460 Processes a key by hashing and applying transformations. @param key The key to be processed. Throws NullPointerException if null.
1461 Processes a key by applying hashing and updating vector elements. @param k The key to process. @param vector The array of lists to update.
1462 Finds the index of the element with the minimum key weight. @param h array of hash indices @return Index of the element with the minimum key weight.
1463 Finds the index with the maximum FP weight. @param h array of hash indices @return Index with the highest FP weight.
1464 Calculates the ratio of keyWeight to fpWeight for each element.
1465 Reads and prints resource content from URL. @param name Resource name to load. @return SUCCESS, E_NOT_FOUND, or E_LOAD_FAILED.
1466 Prints usage instructions and returns E_USAGE. Explains available commands and return codes.
1467 Adds an element if space is available or replaces if valid. @param element The element to add or replace. @return True if added/replaced, false otherwise.
1468 Creates a TreeSet from the given elements. @param elements Iterable of comparable elements @return TreeSet containing the elements
1469 Converts an iterable to a HashSet. Handles Collection types.
1470 Creates a HashSet from the provided elements. @param elements elements to be added to the HashSet @return A HashSet containing the input elements.
1471 Executes a program based on the provided arguments. @param args Command-line arguments; first is program name. @return 0 on success, -1 on failure.
1472 Adds a column with the given title, justification, and wrap. @param title Column title. @param justification Column justification. @param wrap Whether to wrap the column text. @return This builder instance.
1473 Calls m1 with the provided name, value string, and unit. @param name Name identifier. @param vStr Value string. @param unit Time unit.
1474 Adds a property to the configuration element, redacting if needed. @param doc XML document, conf config element, propertyName property name @param redactor ConfigRedactor for value redaction
1475 Processes deprecation deltas, updating deprecation contexts.
1476 Attempts to bind a connector to an available port. Tries ports in `portRanges`, retrying on bind failures.
1477 Sets environment variables based on target state and properties. @param target The HAServiceTarget object. @param environment The environment map to update.
1478 Reads data from a stream into a buffer, using direct buffer if available. @param stream Readable stream to read from. @param range File range to read. @param buffer ByteBuffer to write to.
1479 Processes a list of file ranges using m2. @param ranges List of FileRange objects to process.
1480 Initiates caching action, validates future, and updates state. @param actionFuture Future representing the caching action.
1481 Updates the state to newState, validates inputs, and calls m2.
1482 Checks if a path is a directory, providing a custom error message. @param path The path to check. @param argName Argument name for error message.
1483 Checks if the given path points to a file, throwing an exception if not. @param path The path to check. @param argName Argument name for error message.
1484 Checks if the given block number is the last block. @param blockNumber The block number to check. @return True if it's the last block, false otherwise.
1485 Calculates a masked value based on the block number. @param blockNumber The block number to process. @return A long value representing the masked block number.
1486 Retrieves the state of a block. @param blockNumber The block's index. @return The state of the specified block.
1487 Updates the state of a block with the given state. @param blockNumber Block index to update. @param blockState The new state for the block.
1488 Calculates the block index from an offset. @param offset The offset value. @return The block index as an integer.
1489 Processes a snapshot with optional statistics. @param snapshot The snapshot to process. @param statistics Optional IOStatistics object. @return True if processing is successful, false otherwise.
1490 Saves a snapshot to the filesystem, overwriting if needed. @param snapshot The snapshot to save. @param fs Filesystem to use. @param path Path to save to. @param overwrite Whether to overwrite existing files.
1491 Extracts counters from a source using m1. @param source Serializable source object @return Map of string counters.
1492 Extracts gauges from a source using m1 and IOStatisticsSnapshot. @param source Serializable source data. @return Map of gauges.
1493 Extracts minimum statistics from a source using m1. @param source Serializable data source @return Map of string keys to Long values.
1494 Extracts maximum statistics from a serializable source. @param source The serializable data source. @return A map of string keys to long values.
1495 Transforms source data into a map of string keys and Long tuples.
1496 Creates a new FlagSet instance with the provided parameters.
1497 Creates a FlagSet instance with the given enum class, prefix, and flags.
1498 Calls m1 on the file system if it exists, then sets it to null.
1499 Processes keys, performing actions based on 'onlyAutomatic'. Throws MultipleIOException if any IOExceptions occur.
1500 Converts a snapshot to a JSON string using m2 and toJson. @param snapshot The snapshot to convert; may be null.
1501 Writes byte array to a file in the fileContext. @param fileContext Hadoop file context. @param path Path to write to. @param bytes Data to write. @return The fileContext.
1502 Writes lines to a file in the file system. @param fileContext FileContext object @param path Path to the file @param lines Lines to write @param cs Charset to use for encoding @return FileContext object
1503 Writes a CharSequence to a file using a FileSystem and Charset. @param fs FileSystem object @param path Path to write to @param charseq CharSequence to write @param cs Charset to use for encoding @return FileSystem object
1504 Creates an FSDataOutputStreamBuilder for the given path. @param path Path to create the output stream for.
1505 Creates an FSDataOutputStreamBuilder for the given path. @param path Path for the output stream builder.
1506 Creates an FSDataOutputStreamBuilder for the given path. @param path The path for the output stream builder.
1507 Creates an FSDataOutputStreamBuilder for the given path. @param path Path for the output stream builder.
1508 Lists status of files/directories under the given path. @param f Path to list. Returns FileStatus[] or throws IOException.
1509 Lists status of files. @param files array of file paths @return FileStatus array or null if empty
1510 Creates and registers a MutableCounterInt with the given info. @param info MetricsInfo object. @param iVal Initial value for the counter. @return The created MutableCounterInt.
1511 Creates and registers a MutableCounterLong with the given info. @param info MetricsInfo object @param iVal Initial value for the counter @return The created MutableCounterLong object
1512 Creates and registers a MutableGaugeLong metric. @param info MetricsInfo object; @param iVal initial value @return The created MutableGaugeLong object
1513 Creates a MutableGaugeFloat, registers it, and returns it. @param info MetricsInfo object @param iVal Initial float value @return MutableGaugeFloat object
1514 Creates and registers a MutableGaugeInt with the given info. @param info MetricsInfo object @param iVal Initial integer value @return The created MutableGaugeInt object
1515 Resolves a link using the provided function. @param fileContext FileContext object. @param path Path to resolve. @param fn Link resolution function.
1516 Creates a new GlobBuilder instance with the given FileContext. @param fileContext The context for file operations. @return A new GlobBuilder object.
1517 Creates a new GlobBuilder instance for the given filesystem. @param filesystem The filesystem to use for globbing. @return A new GlobBuilder object.
1518 Processes a call return, logs it, and handles retry/async states.
1519 Returns an AsyncGet object, prioritizing ASYNC_RETURN.m1(). Returns a fallback AsyncGet if m1() returns null.
1520 Calls used.m3 with the result of DUHelper.m2(m1()).
1521 Creates a new MeanStatistic by copying an existing one. @param that The MeanStatistic to copy.
1522 Extracts a string from the source, handling RuntimeExceptions. @param source The source object to extract from, may be null. @return A string or "" if an error occurs.
1523 Delegates to the wrapped object's m1 method. @return The result of calling m1 on the wrapped object.
1524 Returns statistics or a null source if statistics is null.
1525 Generates a statistics report string based on provided IOStatistics. @param statistics IOStatistics object to report on, or null. @return Statistics report string or empty string if null.
1526 Returns a DurationTracker, using factory or a stub. @param factory Factory to create tracker, or null. @param statistic Statistic name. @return DurationTracker object.
1527 Purges a cache entry, attempting to acquire a write lock first. @param elementToPurge Entry to purge from the cache.
1528 Creates IO statistics from storage statistics. @param storageStatistics Source statistics to process. @return IOStatistics object built from the input.
1529 Updates statistics for a key using an AtomicLong source. @param key Identifier for the statistics. @param source AtomicLong to update statistics from.
1530 Updates statistics for a given key using the provided AtomicInteger. @param key statistic key @param source AtomicInteger to update the statistic with
1531 Records a metric from the source counter for the given key. @param key Metric key @param source Counter to record from @return The builder instance.
1532 Updates statistics for a given key using the provided AtomicLong. @param key Identifier for the statistics. @param source AtomicLong to update.
1533 Updates statistics for a key using an AtomicInteger. @param key Identifier for the statistics. @param source AtomicInteger to update.
1534 Updates statistics for a key using the provided AtomicLong. @param key Statistics key. @param source AtomicLong to update.
1535 Updates statistics for a key using an AtomicInteger source. @param key Statistics key. @param source AtomicInteger to update.
1536 Updates statistics for a key using the provided AtomicLong. @param key Statistic key. @param source AtomicLong to update.
1537 Updates statistics for a key using an AtomicInteger. @param key Identifier for the statistics. @param source AtomicInteger to update.
1538 Initializes interrupt handling and sets uncaught exception handler.
1539 Creates a DomainSocket instance. @param path Socket path. @return DomainSocket object. @throws IOException If an I/O error occurs.
1540 Executes m3 and updates refCount based on success/failure.
1541 Reads data from file descriptors into a byte array. @param descriptors file descriptors to read from @param jbuf buffer to store the read data @param offset start offset in the buffer @param length number of bytes to read @throws IOException if an I/O error occurs
1542 Reads data from multiple file streams into a buffer. @param streams Input streams, streams[i] will be set to null. @param buf Buffer to store the data. @param offset Offset in the buffer. @param length Number of bytes to read. @return Number of bytes read.
1543 Creates and returns an IOStatisticsContext instance for a key. @param key The key used to identify the statistics context. @return An IOStatisticsContextImpl object.
1544 Calculates and verifies checksums for data, using native or fallback method. @param data ByteBuffer containing data @param checksums ByteBuffer for checksums @param fileName file name @param basePos base position
1545 Processes decryption padding. @param decryptor Decryptor object @param inBuffer Input buffer @param position Current position @param iv Initialization vector @return Padding byte
1546 Initializes stream with given offset, resets buffers, and decrypts. @param offset Offset for stream initialization.
1547 Reads data from input buffer to byte array. @param b byte array to fill, off offset, len number of bytes
1548 Calls m1, then super.m2, if not closed.
1549 Creates a Pattern object from a glob pattern string. @param globPattern The glob pattern string. @return A Pattern object.
1550 Reads bytes based on distance. Returns the number of bytes read.
1551 Creates a FSDataOutputStream with specified flags and permissions. @param f Path to create the output stream on.
1552 Constructs a FileSystem with URI, scheme, authority flag, and default port.
1553 Encodes data from inputs to outputs; returns if dataLen is 0.
1554 Encodes data into output buffers, updating input buffer positions.
1555 Constructs a new ArrayPrimitiveWritable with the given value.
1556 Delegates m1() call to the underlying file system. @return URI returned by the file system's m1() method.
1557 Checks if capability is handled; delegates if not. @param capability The capability to check. @return True if capability is handled, false otherwise.
1558 Processes data using ops and buffer pool. @param data BufferData object to be processed.
1559 Processes BufferData objects where m1(DONE) returns true. Iterates through data from m3() and calls m2() for each.
1560 Constructs a CachingBlockManager with provided parameters. @param blockManagerParameters Configuration parameters for the manager.
1561 Reads data from a block into a buffer. @param blockNumber Block number to read. @param buffer ByteBuffer to store the data.
1562 Calculates a masked value by adding m2 to bufferStartOffset.
1563 Checks buffer status: start offset, m2() value, and bytes read.
1564 Updates buffer at given position if conditions are met. @param pos Position to update in the buffer. @return True if updated, false otherwise.
1565 Creates an IOStatisticsContext using m2 with provided arguments.
1566 Delegates IO statistics processing to the integration layer. @param statisticsContext Context for IO statistics.
1567 Extracts metrics configurations for a given type. @param type The type of metrics to extract. @return A map of instance to MetricsConfig.
1568 Modifies and returns a list of strings from the input array.
1569 Logs an error message and increments the error count. @param message The error message to log.
1570 Creates a PathHandle for a file, validating file system and options. @param stat FileStatus object @param opts Handle options @return LocalFileSystemPathHandle object
1571 Returns an array containing the results of m1 and m2 (both false).
1572 Returns an array containing the results of m1(false) and m2(true).
1573 Returns an array containing the results of m1(true) and m2(false).
1574 Returns an array containing the results of m1(true) and m2(true).
1575 Creates a ShellCommandExecutor with given command, directory, env, timeout.
1576 Starts or stops the refresh thread based on refreshInterval. @param runImmediately Whether to start immediately or schedule.
1577 Creates a new PrivateToken wrapping the given service. @param newService The service to wrap in a PrivateToken. @return A new PrivateToken instance.
1578 Throws exception if m1().m2() is true and m3() is false.
1579 Checks a condition based on m1() and null checks on uri fields.
1580 Delegates to m1() and returns its boolean result.
1581 Validates a Path object against the current filesystem's configuration.
1582 Writes the file status to an output stream. @param out Output stream to write to. @throws IOException if an I/O error occurs.
1583 Validates input parameters for file upload processing. @param filePath Path to the file. @param inputStream Input stream for the file part. @param partNumber Part number of the upload. @param uploadId Upload handle identifier. @param lengthInBytes Length of the file part in bytes.
1584 Returns a CompletableFuture that is immediately completed with -1. @param path Path object (unused in this method) @return CompletableFuture<Integer> - immediately completed with -1
1585 Reads 'n' bytes, adjusting if beyond file length. @param n number of bytes to read @return number of bytes actually read
1586 Calculates permission mask based on a given umask. @param umask The umask to calculate the permission mask from. @return A new FsPermission object representing the mask.
1587 Creates an FsPermission from the given LsEntry's mode.
1588 Constructs a FsPermission with the given octal mode. @param mode Octal representation of file permissions.
1589 Returns a default FsPermission with read, write, and execute permissions.
1590 Returns a FsPermission object representing the FUNC_MASK (00777).
1591 Returns a FsPermission object representing the default file permissions (0666).
1592 Returns a FsPermission representing the FUNC_MASK (00755).
1593 Parses a Unix symbolic permission string into an FsPermission. @param unixSymbolicPermission Unix permission string (e.g., "rwxrwxrwx") @return FsPermission representing the parsed permission.
1594 Processes AclEntry list based on conditions. @param aclStatus Acl status object @param fsPerm FsPermission object @param entries List of AclEntry objects to process
1595 Converts a list of AclEntry objects to a comma-separated string.
1596 Creates a FsPermission with the given mode string. @param mode String representing the file permissions.
1597 Reads up to 'length' bytes from the source into the provided buffer. @param b buffer to read into, offset start index, length to read @return number of bytes read, or -1 on failure
1598 Calculates a value by subtracting posStart from the result of m1().
1599 Updates maxRepl, maxLen, maxOwner, maxGroup based on PathData. Calculates lineFormat string for displaying PathData items.
1600 Delegates quota usage retrieval to m1. @param f Path to the file. @return QuotaUsage object.
1601 Delegates to m1(path) and returns the result of m2().
1602 Constructs a new AbstractLaunchableService with the given name.
1603 Transitions service state, returning the previous state. @param proposed The new state to transition to. @return The service's previous state.
1604 Creates and returns a Service instance using the provided configuration.
1605 Compares this object with another BinaryComparable object. @param other The object to compare to. @return True if objects are equal, false otherwise.
1606 Copies a portion of newData to bytes. @param newData Data to copy from. @param offset Start offset in newData. @param length Number of bytes to copy.
1607 Processes a BytesWritable key by applying transformations. Recursively calls itself with a derived key. Returns an int.
1608 Lists file names in a directory. @param dir The directory to list. @return String array of file names. @throws IOException if access is denied or error occurs.
1609 Checks if a directory is valid, readable, writable, and executable. @param dir The directory to check. @throws DiskErrorException if any check fails.
1610 Locks a ByteBuffer, checks if direct, and processes it. @param buffer ByteBuffer to lock and process. @param len Length associated with the ByteBuffer.
1611 Creates a SharedFileDescriptorFactory, throwing IOException on failure. @param prefix Prefix for file paths. @param paths Array of paths to try.
1612 Processes data in chunks, updating checksum and tracing. @param b byte array to process @param off offset in the array @param len number of bytes to process
1613 Processes data and checksums, handling recursive calls or CRC checks.
1614 Processes input and output buffers using CryptoStreamUtils and m2.
1615 Constructs a BoundedByteArrayOutputStream with specified capacity. @param capacity initial buffer size, also the maximum size.
1616 Calls m1 with the current object and the provided newValue. @param newValue Value passed to m1 method.
1617 Filters ECBlocks from a block group based on m3() status. @param blockGroup The ECBlockGroup to filter. @return An array of filtered ECBlocks.
1618 Searches for a marker in the compressed stream. @param marker The marker to search for. @param markerBitLength Length of the marker in bits. @return True if marker found, false otherwise.
1619 Creates a CBZip2OutputStream with the specified output stream and block size. @param out output stream to write to @param blockSize block size (1-9) @throws IOException if an I/O error occurs
1620 Creates a BlockCompressorStream with default buffer sizes. @param out Output stream to write compressed data. @param compressor Compressor to use for compression.
1621 Creates a BlockDecompressorStream with given input, decompressor, and buffer size.
1622 Writes data to the compressor, handling size limits and errors. @param b the data to write @param off offset in the buffer @param len number of bytes to write
1623 Constructs a ZStandardCompressor with specified level and buffer sizes.
1624 Creates a CompressionOutputStream using the given codec and output stream. @param codec CompressionCodec to use @param conf Configuration for the codec @param out Output stream to compress @return CompressionOutputStream instance
1625 Releases resources used by the compressor and output stream.
1626 Creates a CompressionInputStream using the given codec and stream. @param codec Compression codec @param conf Configuration object @param in Input stream to compress @return CompressionInputStream object
1627 Releases resources and calls deserializer cleanup methods.
1628 Creates a compressor based on configuration. @param conf Configuration object to determine compressor type. @return Compressor instance.
1629 Creates a ZlibDirectDecompressor if m1(conf) is true, else null.
1630 Creates a Decompressor based on the configuration. @param conf Configuration object to determine compressor type. @return A Decompressor instance.
1631 Stores the delegation key in the SQL secret manager. @param key The delegation key to store. @throws IOException If an IO error occurs.
1632 Updates a delegation key, writing to stream and calling super. @param key The delegation key to update. @throws IOException If an IO error occurs during update.
1633 Reads a string from input, masking length to maxLength. @param in DataInput to read from @param maxLength Max allowed string length @return String read from input
1634 Reads data from input stream. @param in DataInput stream to read from.
1635 Copies data from input buffer to target buffer, then filters. @param buffer Target buffer to copy data to. @param filter Compression filter to apply.
1636 Reads a fixed-length byte array from input. @param in DataInput to read from. @param maxLength Maximum length of the read data. @return Byte array read from input.
1637 Writes a string to the output or -1 if the string is null. @param out DataOutput to write to @param s String to write
1638 Creates a Text object containing host and port from an address. @param addr The InetSocketAddress to extract host and port from. @return A Text object representing the host and port.
1639 Creates a Token object from a TokenProto. @param tokenProto TokenProto object to create Token from @return Token object
1640 Writes enum value to output using Text.m2. @param out Output stream @param enumVal Enum value to write
1641 Writes username, groupname, and permission to the output stream.
1642 Constructs a Text object from a byte array (UTF-8 encoded).
1643 Constructs a new Text object by copying from an existing Text.
1644 Determines line length based on record delimiter. @param str Input text. @param maxLineLength Max line length. @param maxBytesToConsume Max bytes to consume.
1645 Returns the text length, initializing if negative.
1646 Constructs a new SortedMapWritable, copying from another. @param other The SortedMapWritable to copy from.
1647 Constructs a new MapWritable by copying another MapWritable.
1648 Creates a RetryPolicy with a max time and fixed sleep duration. @param maxTime Maximum time allowed for retries. @param sleepTime Sleep time between retries. @param timeUnit Time unit for maxTime and sleepTime.
1649 Creates a dynamic proxy implementing the given interface. @param iface Interface to proxy. @param proxyProvider Provider for the base proxy. @param retryPolicy Retry policy to apply.
1650 Creates a proxy with default failover provider. @param iface Interface to proxy. @param implementation Implementation of the interface. @param methodNameToPolicyMap Retry policies for methods.
1651 Creates a Writer with a given output stream, compression name, and config.
1652 Constructs a TFileIndex with entries from the input stream. @param entryCount number of entries to read @param in input stream for reading index data @param comparator comparator for comparing bytes @throws IOException if an I/O error occurs
1653 Determines completion status based on internal logic. Returns true if complete, false otherwise.
1654 Writes buffered data to the output stream if data exists.
1655 Delegates to reader.m5 with prepared arguments.
1656 Initializes a UTF8 object with the given string. @param string The string to be set as the initial value.
1657 Calculates MD5 hash of a string using UTF-8 encoding. @param string The string to hash. @return MD5Hash object representing the hash.
1658 Flushes buffered records to the output stream. Clears the buffered records counter after flushing.
1659 Returns the tracking ID, generating it if it's null.
1660 Delegates to m1, passing 'this'. @return String result from m1. @throws IOException if m1 throws IOException
1661 Adds a node to the topology, validating its depth and location.
1662 Removes a node from the cluster map. @param node The node to remove. Throws exception if inner node.
1663 Removes a node. Throws exception if inner node. Acquires/releases netlock.
1664 Sorts nodes using a secondary sort function. @param reader Node reader. @param nodes Array of nodes to sort. @param activeLen Active length of the nodes array. @param secondarySort Consumer for secondary sorting.
1665 Calls m1 with the 'true' flag for secondary sorting. @param reader Node reader. @param nodes Array of nodes. @param activeLen Active length of the nodes array. @param secondarySort Consumer for secondary sorting.
1666 Creates a SocketInputStream with a timeout for reading. @param channel ReadableByteChannel to read from. @param timeout Timeout in milliseconds.
1667 Creates a SocketOutputStream with a specified timeout. @param channel WritableByteChannel to write to. @param timeout Timeout in milliseconds.
1668 Waits for a call to complete, handling errors and timeouts. @param call The call to wait for. @param connection The connection used by the call. @param timeout Timeout value. @param unit Timeout unit. @return Writable result or null if timeout.
1669 Default constructor, uses RawScriptBasedMapping internally.
1670 Constructs a ScriptBasedMappingWithDependency, using RawScriptBasedMapping.
1671 Creates a new InnerNodeImpl with provided parent name and derived data.
1672 Processes a domain socket, handling closed sockets and adding entries. @param sock The domain socket to process. @param handler Handler for socket-related events.
1673 Processes domain socket, removing it if necessary. @param sock The DomainSocket to process.
1674 Selects a key on a channel with a timeout. @param channel The channel to select on. @param ops The selection ops. @param timeout Timeout in milliseconds. @return Selection result or 0 if timeout.
1675 Retrieves the first IP address from the interface. @param strInterface Interface name. @return First IP address or null if not found.
1676 Calls m1 with null timeout and false flag. @param strInterface Interface string to process. @throws UnknownHostException if host resolution fails.
1677 Resolves hostname based on interface and nameserver. @param strInterface Interface string, null for default. @param nameserver Nameserver string, null for default. @return Resolved hostname.
1678 Loads MetricsConfig from specified files, or creates a default. @param prefix Config prefix. @param fileNames File names to load. @return MetricsConfig object.
1679 Fetches group list for a user, caches negatively if empty, throws exception.
1680 Calls the m1 method of the Singleton instance.
1681 Stops the server, shutting down handlers, listener, and responder.
1682 Stops the web application context and related components. Handles exceptions and aggregates them into a MultiException.
1683 Constructs a MutableQuantiles object with given parameters. @param interval Interval for sample rollover.
1684 Creates and registers a MutableStat. @param name Stat name. @param extended Extended flag. @return The created MutableStat.
1685 Constructs a MutableStat with a flag initially set to false. @param name Stat name. @param description Stat description. @param sampleName Sample name. @param valueName Value name.
1686 Creates a MetricsRegistry with the given name. @param name The name of the registry. @return A MetricsRegistry object.
1687 Creates a MetricsRegistry with an interned name/description. @param name Metrics name. @param description Metrics description. @param value Metrics value. @param override Whether to override existing registry. @return The created MetricsRegistry.
1688 Records elapsed time for a given name into thread-local stats. @param name Identifier for the recorded elapsed time. @param elapsed Elapsed time value to record.
1689 Sends metrics to sinks, optionally immediately. @param buffer MetricsBuffer to send. @param immediate If true, sends immediately; otherwise, asynchronously.
1690 Calls the m1 method of the provided SampleStat object. @param other The SampleStat object to call m1 on.
1691 Logs slow RPC calls exceeding defined thresholds. @param methodName RPC method name. @param call Call object. @param details Processing details.
1692 Retrieves netgroups, refreshes cache, and processes them.
1693 Calls m1 with and without a string argument.
1694 Logs messages using m1, formats a string, and calls m1 again.
1695 Logs a message and throws a KerberosDiagsFailure. @param category Message category. @param message Message to log. @param args Arguments for the message.
1696 Creates a UserGroupInformation object for a given user and auth method. @param user the user's name @param authMethod the authentication method to use @return UserGroupInformation object
1697 Starts the expired token removal process. Ensures !running, then initializes and starts the removal thread.
1698 Updates the current key and performs related operations.
1699 Constructs a DelegationTokenAuthenticatedURL with null parameters.
1700 Constructs a DelegationTokenAuthenticatedURL with an authenticator. @param authenticator The DelegationTokenAuthenticator to use.
1701 Constructs a DelegationTokenAuthenticatedURL with a null base URL. @param connConfigurator Configures the connection.
1702 Reads bytes from a byte array. @param b the byte array to read from @return number of bytes read
1703 Checks if m1 and m2 are true and m3 is not null.
1704 Checks if m1 is true, m2 is true, and m3 is null.
1705 Creates or retrieves a DelegatingSSLSocketFactory instance. @param preferredMode Preferred SSL channel mode.
1706 Default constructor. Initializes the CommandFactory with null config.
1707 Constructs a HarFileSystem object. Must initialize the underlying file system.
1708 Constructs a HarFileSystem with the given FileSystem. @param fs The FileSystem to associate with this HarFileSystem.
1709 Default constructor for FsShell, calls the parameterized constructor.
1710 Constructs a GetGroupsBase with a Configuration and default output. @param conf The Configuration object used for initialization.
1711 Initializes the Command object with System.out and System.err.
1712 Resolves a host name to an InetAddress. Throws UnknownHostException if resolution fails.
1713 Writes the ACL string to the output stream. @param out DataOutput to write the ACL string to.
1714 Creates and configures a ZooKeeper client. Uses truststoreKeystore if provided, then returns the client.
1715 Retrieves queue size for a given key. @param keyName The key to retrieve the queue size for. @return The size of the queue or 0 if not found.
1716 Retrieves a list of elements from a queue, handling refill policies. @param keyName Key for the queue. @param num Number of elements to retrieve. @return List of retrieved elements.
1717 Processes tasks from the queue for a given key, then cleans up. @param keyName The key to process tasks for.
1718 Processes an element 'e' based on internal conditions.
1719 Initializes resources if not already initialized, calls m1().
1720 Converts m1 to the specified time unit. @param timeUnit The TimeUnit to convert to.
1721 Checks protocol signature based on hashcode and server version. @param clientMethodsHashCode Client's methods hashcode. @param serverVersion Server version. @param protocol Protocol class. @return ProtocolSignature object.
1722 Decays current costs based on decayFactor, updates totals, and cleans zero costs.
1723 Calculates a masked value based on the object's identity. @param obj The object to process. @return A masked integer value.
1724 Retrieves an element from the queues based on priority. Returns the element or null if no element is found.
1725 Closes the IPC connection, handling exceptions and logging.
1726 Constructs a Globber with the given file system, pattern, filter, and symlink resolution.
1727 Constructs a MachineList with the given host entries and default InetAddressFactory. @param hostEntries Comma-separated string of host entries.
1728 Returns SysInfo object based on OS. @return SysInfo instance; throws UnsupportedOperationException if OS is unknown.
1729 Calculates available RAM size in KB. Uses ramSize, hardwareCorruptSize, hugePageTotal, hugePageSize.
1730 Calculates a masked value by adding swapSizeFree to m1().
1731 Transforms XML using XSLT, writing output to a Writer. @param styleSheet XSLT stylesheet input stream @param xml XML input stream @param out Writer to write the transformed output
1732 Generates a summary string based on options and storage types. Returns a formatted string; options control summary content.
1733 Formats snapshot information into a string. @param hOption boolean flag, affects formatting. @return Formatted snapshot information string.
1734 Calls m3 with a calculated value, percentage, and mapName.
1735 Reads data into the buffer. Updates `count` based on `m1` result, ensuring non-negativity.
1736 Reads up to 'len' bytes from the input stream. @param len The maximum number of bytes to read. @return The actual number of bytes read.
1737 Reads data from IBUF, processes it, and returns as a string.
1738 Reads data into a buffer and returns it as a string. Uses IBUF for reading and buffer for string construction.
1739 Converts byte array to String using internal helper methods.
1740 Reads a string from the input stream. @param in DataInput stream to read from @return The read string
1741 Validates RPC response header client ID. @param header RpcResponseHeaderProto containing client ID @throws IOException if client IDs do not match
1742 Wraps a single byte in a byte array and passes it to m1. @param b The byte to be wrapped.
1743 Handles uncaught exceptions in a thread, logs error, and propagates. @param thread The thread where exception occurred. @param exception The exception that was thrown.
1744 Prints usage information to the console.
1745 Handles thread exceptions during shutdown or normal operation. Logs the exception and potentially initiates shutdown.
1746 Logs an exit message with the given exit code and message.
1747 Throws an ExitException with a default message. @param status Exit status code.
1748 Logs an error message and exits the program with a status code. @param status Exit status code. @param msg Error message to log.
1749 Calls m1 with default exception message. @param status status code to pass to m1 @throws HaltException if an error occurs
1750 Calls m1 with a null comparison object. @param s IndexedSortable object to sort. @param p Starting index of the sort range. @param r Ending index of the sort range.
1751 Constructs an AclStatus object with the given parameters. @param owner The owner of the file/directory. @param group The group of the file/directory.
1752 Parses an ACL string into a list of ACL objects. @param aclString Comma-separated ACL string. @return List of ACL objects or an empty list if null.
1753 Parses auth string into a list of ZKAuthInfo objects. @param authString Comma-separated auth string, scheme:auth @return List of ZKAuthInfo objects or empty list if null.
1754 Copies file attributes from src to target, optionally preserving Xattrs. @param src Source PathData @param target Target PathData @param preserveRawXAttrs Preserve raw Xattrs
1755 Creates ACL entries for user, group, and other based on permission. @param perm FsPermission object containing permission details @return List of AclEntry objects
1756 Returns a DurationTracker based on the key. @param key The key to check. @param count The count value. @return A DurationTracker instance.
1757 Constructs a DurationTracker with a default interval. @param iostats IOStatisticsStore for tracking. @param key Identifier for the tracked duration.
1758 Constructs a DurationInfo with logging enabled. @param log Logger instance for logging. @param format Format string for duration. @param args Arguments to format the duration.
1759 Waits for CompletableFuture completion, handling exceptions. @param future The CompletableFuture to wait for. @throws IOException if a CancellationException occurs.
1760 Waits for future completion, logs duration, ignores exceptions. @param future CompletableFuture to wait for, can be null.
1761 Creates a CrcComposer with a maximum hint length. @param type checksum type, @param bytesPerCrcHint max hint bytes @return CrcComposer instance
1762 Updates composite CRC based on bytesPerCrc, potentially using hint. @param crcB current CRC value @param bytesPerCrc bytes processed for CRC update
1763 Formats finish time and calls m2 with formatted time and other params.
1764 Delegates to overloaded method with default escape and comma. @param str The input string to process.
1765 Calls m1 with default escape and comma separators. @param str The input string to be processed.
1766 Masks class name and arguments with hostname. @param classname Class name to mask. @param args Arguments to mask. @return Masked string.
1767 Retrieves a value, throwing exception if element is absent.
1768 Delegates to FutureIO.m1 to retrieve a result from a Future. @param future The Future to retrieve the result from. @return The result wrapped in the Future. @throws InterruptedIOException, IOException, RuntimeException
1769 Collects results from a collection of Futures into a List. @param collection Futures to retrieve results from. @return List of results, or an empty list if input is empty.
1770 Retrieves result from future within a timeout. @param future Future to retrieve from. @param timeout Timeout duration. @param unit Timeout unit (e.g., SECONDS, MILLISECONDS) @return Result of the future.
1771 Collects results from a list of Futures within a given duration. @param collection Futures to retrieve results from. @param duration Timeout duration for each future. @return List of results from the futures.
1772 Retrieves results from a collection of Futures, handling exceptions. @param collection Futures to process @return List of retrieved results
1773 Creates an instance of theClass using provided arguments. @param theClass Class to instantiate @param conf Configuration object @param argTypes Argument types for the constructor @param values Constructor arguments @return Instance of theClass
1774 Returns the key class, fetching it if not already loaded. Throws RuntimeException on IO error.
1775 Lazily initializes and returns the valClass. Uses WritableName.m2() to fetch it from conf.
1776 Loads a class by name and handles potential loading errors. @param name Class name to load. Returns success/failure code.
1777 Creates an instance of the class named 'name'. Returns SUCCESS, E_NOT_FOUND, or E_CREATE_FAILED.
1778 Creates and returns a new Configuration object.
1779 Returns the configuration, using suppliedConf if available.
1780 Constructs a FindClass object using a default Configuration.
1781 Constructs a ReconfigurableBase with a default Configuration.
1782 Constructs a ReconfigurableBase with a Configuration object. Uses a default config if none is provided.
1783 Executes a command and returns its output as a string.
1784 Launches a shell process with configured parameters. Configures environment, directory, and handles timeouts.
1785 Creates and updates a Progress object with the given status.
1786 Calls m1 with the given path and a null value for the second parameter. @param path The path to be passed to the overloaded method.
1787 Checks if a path has the specified capability. @param fs filesystem, path the path, capability the capability @return True if path has capability, false otherwise.
1788 Checks if a stream has a capability for a given object. @param object The object to check. @param capability Capability string to check for. @return True if capability exists, false otherwise.
1789 Delegates counter retrieval to iostatisticsCountersMethod. @param source The source object for counter retrieval. @return A map of string keys to long values.
1790 Delegates gauge retrieval to iostatisticsGaugesMethod. @param source The source object for gauge retrieval. @return A map of string keys to long values.
1791 Delegates to m1 to retrieve minimum statistics. @param source The source object for analysis. @return A map of string keys to long values.
1792 Delegates to m1 to get maximum statistics for a source. @param source The source data for statistics. @return A map of string keys to long values.
1793 Delegates to m1 to process a source and return a map. @param source Serializable data to be processed. @return Map containing processed data.
1794 Delegates to m4 with null as the first argument and args as the second.
1795 Calls m1 with provided class name and argument classes. @param className Class name to set. @param argClasses Argument classes. @return This builder instance.
1796 Calls m1 with provided class name and argument classes. @param className Class name to use. @param argClasses Argument classes. @return This builder instance.
1797 Creates an unbound method. @param source Class to search. @param returnType Return type of method. @param name Method name. @param parameterTypes Method parameter types. @return UnboundMethod object.
1798 Checks if an object satisfies a condition using m1 and m2. @param object The object to check. @return True if both conditions are met, false otherwise.
1799 Checks a condition based on m1() and isIOStatisticsMethod.m2().
1800 Checks a condition based on m1() and isIOStatisticsSnapshotMethod. @param object Serializable object to be processed. @return True if both conditions are met, false otherwise.
1801 Checks if m1() is true and iostatisticsContextEnabledMethod.m2() returns true.
1802 Deletes a file or directory. @param fileSystem The file system to operate on. @param path The path to delete. @throws IOException if an I/O error occurs.
1803 Deletes paths using a bulk delete method and returns results. @param fs Filesystem, base path, and paths to delete. @return List of deletion results.
1804 Opens a data input stream with specified options. @param fs Filesystem, path, policy, status, length, options @return FSDataInputStream or null on failure
1805 Reads data from an input stream into a ByteBuffer at a specific position.
1806 Calls m1 with the iostatisticsSnapshotCreateMethod.
1807 Calls m1 with the iostatisticsContextEnabledMethod flag.
1808 Creates a LightWeightCache with default Timer. @param recommendedLength Initial cache size. @param sizeLimit Max cache size. @param creationExpiration Period for creation expiration. @param accessExpiration Period for access expiration.
1809 Constructs a Filter with specified vector size, hash count, and type.
1810 Processes a key, validating it and updating hash buckets. @param key The key to process; must not be null.
1811 Processes a collection of keys, recursively calling m1 for each. @param coll Collection of keys to process; must not be null.
1812 Processes a list of keys, recursively calling m1 for each. @param keys List of keys to process; must not be null.
1813 Processes an array of keys, recursively calling m1 for each. @param keys Array of keys to process; must not be null.
1814 Processes key and fp lists at the given index, updating data. @param index Index of the list to process.
1815 Finds the index of the minimum ratio value in the array.
1816 Calls m1 with argv, logs -1 if m1 returns -1.
1817 Retrieves a CredentialEntry, trying different names/keys. @param provider CredentialProvider to fetch from. @param name Name to search for. Returns entry or null.
1818 Logs a deprecation event with the given key, new keys, and message.
1819 Processes server listeners, assigning ports or handling them.
1820 Parses arguments from a string. @param argStr Argument string to parse. @throws BadFencingConfigurationException if parsing fails.
1821 Recursively deletes a znode from Zookeeper. Throws IOException if deletion fails.
1822 Retrieves a Stat object and potentially fences an old node. Returns null if no old node exists, otherwise returns stat.
1823 Asynchronously reads data from a stream into a ByteBuffer. @param stream Input stream @param range File range to read @param allocate Allocates ByteBuffer @return CompletableFuture containing the ByteBuffer
1824 Processes buffer data, potentially caching it based on state. @param data BufferData object to process.
1825 Sets action future and updates state to PREFETCHING. @param actionFuture Future object representing an action.
1826 Updates internal state, calculates checksum, and transitions. @param expectedCurrentState Expected current state array.
1827 Calculates block size based on block number and file size. @param blockNumber the block number @return the size of the block
1828 Calculates an offset value based on block number and offset. @param blockNumber Block identifier. @param offset Initial offset value. @return Calculated offset as an integer.
1829 Initializes a BlockData object with file size and block size. @param fileSize Size of the file in bytes. @param blockSize Size of each block.
1830 Calls m1() and returns a value from blockData based on offset.
1831 Calls m1 with 'false' as the argument.
1832 Closes resources and invalidates cache entries for the given UGI. @param ugi UserGroupInformation object
1833 Calls overloaded method with UTF-8 encoding. @param fileContext FileContext object @param path Path object @param charseq CharSequence object @return FileContext object
1834 Writes byte array to a file in the given file system. @param fs file system @param path file path @param bytes data to write @return the file system
1835 Writes lines to a file in a FileSystem, using the given charset. @param fs FileSystem to write to @param path Path to the file @param lines Lines to write @param cs Charset to use for encoding @return FileSystem
1836 Writes a CharSequence to a file in a FileSystem, returns fs. @param fs FileSystem to write to. @param path Path to write the content. @param charseq Content to write. @param cs Charset for encoding.
1837 Constructs a BlockLocation with null topology. @param names Block names. @param hosts Hostnames. @param offset Offset. @param length Length. @param corrupt Corrupt flag.
1838 Creates a MutableCounterInt with an interned name and description. @param name Counter name. @param desc Counter description. @param iVal Initial counter value. @return MutableCounterInt object.
1839 Creates a MutableCounterLong with an interned name and description. @param name Counter name. @param desc Counter description. @param iVal Initial counter value. @return MutableCounterLong object.
1840 Creates a MutableGaugeLong with interned name/desc. @param name Gauge name. @param desc Gauge description. @param iVal Initial gauge value. @return MutableGaugeLong object.
1841 Creates a MutableGaugeFloat with interned name/desc. @param name Gauge name @param desc Gauge description @param iVal Initial float value @return MutableGaugeFloat instance
1842 Creates a MutableGaugeInt with interned name and description. @param name Gauge name. @param desc Gauge description. @param iVal Initial integer value. @return MutableGaugeInt object.
1843 Creates a new MeanStatistic instance, using the current object.
1844 Logs a message with associated source stats if logging is enabled. @param log Logger instance @param message Message to log @param source Source object for stats
1845 Extends the parent's m1() by adding IO statistics logging.
1846 Returns a string representation of statistics or "" if null. @param statistics The statistics object to format. @return A string representation of the statistics.
1847 Measures duration of input.m4() using tracker. @param factory DurationTrackerFactory @param statistic Statistic name @param input Input object @return Duration object
1848 Executes a supplier, tracks duration, and propagates exceptions. @param factory DurationTrackerFactory, input Supplier<B> @return Result of the supplier.
1849 Processes an entry, potentially purging old entries. @param entry The entry to process.
1850 Initializes statistics store with counters, gauges, mins, maxes, means. @param counters List of counter keys @param gauges List of gauge keys @param minimums List of minimum keys @param maximums List of maximum keys @param meanStatistics List of mean statistic keys
1851 Reads bytes from input to output buffer, handling validation & decryption. @param b buffer to write to, @param off offset, @param len length @return number of bytes read
1852 Decrypts data into a buffer using a decryptor and IV. @param position Decryption start position.
1853 Decrypts data from a ByteBuffer, using a Decryptor. @param filePosition File position for decryption.
1854 Decrypts data from a buffer, handling padding and updating state.
1855 Seeks to the specified position in the stream. @param pos The position to seek to.
1856 Skips a specified number of bytes from the input stream. @param n number of bytes to skip, must be non-negative @return number of bytes actually skipped
1857 Constructs a GlobFilter with the given file pattern. @param filePattern The glob pattern for file filtering.
1858 Initializes a GlobFilter with a file pattern and PathFilter. @param filePattern Pattern for matching files. @param filter PathFilter to apply.
1859 Extracts files from an InputStream to a directory. @param inputStream Input stream containing archive data. @param untarDir Directory to extract files to. @param gzipped Whether the archive is gzipped.
1860 Delegates to AbstractFileSystem.m1() to retrieve statistics. Returns a map of URI to Statistics objects.
1861 Calls the m1 method of the AbstractFileSystem class.
1862 Processes ECChunk arrays, converting to ByteBuffers and calling m2. @param inputs ECChunk input array @param outputs ECChunk output array
1863 Creates a BlockingThreadPoolExecutorService with specified parameters. @param activeTasks, waitingTasks, keepAliveTime, unit, prefixName @return BlockingThreadPoolExecutorService instance
1864 Processes buffer data, offsets, and calls helper methods. @param bufferData Data buffer to process. @param startOffset Start offset for processing. @param readOffset Read offset for processing.
1865 Delegates execution to the m1() method.
1866 Calls m2() on the result of m1().
1867 Returns the result of chaining m1() and m2() calls.
1868 Processes a source object, returning true if successful, false otherwise.
1869 Executes tasks on items, handles failures, aborts, and reverts. @param task The task to execute. @return True if all tasks succeeded, false otherwise.
1870 Delegates processing to m1, casting statisticsContext to IOStatisticsContext.
1871 Updates IO statistics using the provided context. @param ioStatisticsContext Context for IO statistics.
1872 Calls m1 on IOStatisticsContext if it exists.
1873 Handles an exception, logs failure, and re-throws a message. @param e The exception to handle.
1874 Creates a PathHandle. Uses default options if none are provided. @param stat FileStatus object @param opt HandleOpt array, options for PathHandle creation
1875 Adds or updates tokens in the tokenMap based on alias and token.
1876 Copies data from `inBuffer` to `outBuffer`. @param inBuffer Input buffer containing data. @param outBuffer Output buffer to receive data.
1877 Delegates processing to m1, copying data between buffers.
1878 Initializes resources and prepares for processing, throws IOException on failure.
1879 Constructs a Path object by resolving a child path relative to a parent.
1880 Creates a Path from a string representation. @param pathString The path string to be parsed. @throws IllegalArgumentException if the path string is invalid.
1881 Constructs a Path with the given scheme, authority, and path. @param scheme scheme of the path (e.g., "http") @param authority authority of the path (e.g., "example.com") @param path path component of the URI
1882 Calls m1 with the URI and inferred scheme. @return String result of calling m1.
1883 Extracts and validates a path segment from a Path object. @param p The Path object to extract from. @return The validated path segment.
1884 Processes a path, calls m1, then returns the result of m2(p).m3().
1885 Creates a FSDataOutputStream with specified options. @param f the path @param createFlag create flags @param opts create options @return FSDataOutputStream
1886 Combines a permission mode with a umask. @param mode base permission mode @param umask umask to apply @return Combined FsPermission object
1887 Sets access permissions for a file. @param f The Path object representing the file. @throws IOException if an I/O error occurs.
1888 Sets the permission. Uses default if permission is null.
1889 Creates a data output stream, using default file permissions. @param f Path to the output file @return FSDataOutputStream @throws IOException if an I/O error occurs
1890 Creates an FsPermission object from a short permission value. @param permission short representing the permission value @return An ImmutableFsPermission object.
1891 Writes a key-value pair to the output stream, validating types.
1892 Delegates to wBlkState's m1() method. @return Long value returned by wBlkState.m1() @throws IOException if wBlkState.m1() throws IOException
1893 Reads 'n' bytes from the input stream, adjusting 'n' if needed.
1894 Delegates m1 call to the underlying filesystem. @param path Path to operate on. @return Long value returned by the filesystem's m1.
1895 Delegates m1 operation to the underlying filesystem. @param path The path to operate on. @return Long value returned by the filesystem's m1.
1896 Starts JVM pause monitoring and continuously adds strings to a list.
1897 Attempts to start the service, handling exceptions and logging.
1898 Transitions to a new state, logs the change, and triggers actions. @param newState The target state to transition to. @return The actual state after the transition.
1899 Retrieves and logs the default Kerberos realm. Handles exceptions.
1900 Compares with another object, delegates to super if BytesWritable.
1901 Checks if object is a Text; if so, calls super.m1(o).
1902 Calls overloaded method with bytes, offset, and size from BytesWritable.
1903 Decodes data from input buffers, handles erasure, and updates positions.
1904 Decodes data using ByteArrayDecodingState, returns if empty. @param inputs Input byte array, erased indexes, output array. @throws IOException if an I/O error occurs during decoding.
1905 Checks a condition using m1 with specified delimiter and bit length.
1906 Creates a CBZip2OutputStream with default block size. @param out The OutputStream to write compressed data to.
1907 Creates a BlockDecompressorStream with an input stream and decompressor. @param in Input stream to decompress. @param decompressor Decompressor to use.
1908 Creates a compression output stream using the codec. @param out The underlying output stream. @return CompressionOutputStream instance.
1909 Creates a compression output stream using the codec. @param out The underlying output stream. @return A CompressionOutputStream.
1910 Creates a compression output stream using the provided output stream. @param out The underlying output stream. @return A CompressionOutputStream instance.
1911 Creates a compression output stream using codec utilities. @param out The underlying output stream. @return A CompressionOutputStream instance.
1912 Calls m1() on data and index objects.
1913 Releases resources held by 'out' and 'compressor'.
1914 Creates a compression input stream using the codec. @param in Input stream to compress. @return CompressionInputStream object.
1915 Creates a compression input stream using the codec. @param in Input stream to be compressed. @return CompressionInputStream instance.
1916 Creates a compression input stream using the provided input stream. @param in The input stream to compress. @return A CompressionInputStream.
1917 Creates a compression input stream using the codec. @param in Input stream to compress. @return CompressionInputStream
1918 Calls m1 on the index and data, if index is open.
1919 Delegates m1() call to the inner object and then nulls it.
1920 Returns a DirectDecompressor instance using the provided configuration.
1921 Writes data to the output stream in a specific format.
1922 Writes data to the output stream, including token and secret key maps.
1923 Decompresses data, verifies sync, and prepares buffers.
1924 Decompresses or skips values based on compression state. Handles decompression and seeks based on flags and buffers.
1925 Reads a string from the input stream, with a maximum length. @param in DataInput to read from @throws IOException if an I/O error occurs
1926 Retrieves a DelegationKey by ID, fetching from SQL if missing. @param keyId The ID of the delegation key to retrieve. @return The DelegationKey object, or the one from super().
1927 Retrieves a delegation token from credentials for a service. @param url URL containing service address. @param creds Credentials containing the token. @return Delegation token.
1928 Retrieves a token selector based on the provided authentication type. @param authType SaslAuth object representing the authentication type @return TokenSelector object or null if token info is null
1929 Processes a token for a service address. @param token Token object, can be null. @param addr Service address.
1930 Delegates token creation to ShadedProtobufHelper. @param tokenProto TokenProto object to process @return Token object of a specific type
1931 Retrieves a ByteString value associated with the given Text key.
1932 Constructs a new Token by cloning another Token object.
1933 Delegates to overloaded method with default maxWraps. @param str The input text string. @param maxLineLength Maximum line length.
1934 Calls m1 with default max and min values. @throws IOException if an I/O error occurs
1935 Constructs an InstrumentedLock with a ReentrantLock. @param name Lock name, logger, gap & threshold for logging.
1936 Creates a proxied object with retry logic. @param iface Interface to proxy, implementation, retry policy.
1937 Waits specified time for retry, logs details, and returns RETRY. @throws InterruptedIOException if the wait is interrupted.
1938 Creates a Writer with provided stream, size, compression, comparator, and config.
1939 Executes m1() and returns the value of lastChunk.
1940 Executes m1() and returns the value of the remain variable.
1941 Delegates to a ByteArray-based m1 method. @param buf byte array @param offset start offset @param length length of the data
1942 Calls m1 if out is not null, then calls super.m2().
1943 Writes key-value pair to buffer, validates types, and flushes if full.
1944 Writes key and value to buffer, handling block size limits. @param keyData Key data. @param val Value data.
1945 Copies data from src to dst using reflection. @param dst Destination Writable object. @param src Source Writable object.
1946 Recursively finds a node based on scope, excluding specified nodes.
1947 Overloaded method, calls the primary m1 with a null context.
1948 Overloads m1 with a null context. @param reader Node reader @param nodes Array of nodes @param activeLen Active length of nodes array
1949 Creates a SocketInputStream associated with a Socket. @param socket The Socket to associate with. @param timeout Timeout value in milliseconds.
1950 Creates a SocketInputStream associated with the given socket. @param socket The Socket to associate with this stream.
1951 Creates a SocketOutputStream with a timeout. @param socket The Socket instance. @param timeout Timeout in milliseconds.
1952 Adds a node to the network topology, handling node placement.
1953 Reads from a buffer, performs operations, and handles IO exceptions.
1954 Connects a channel to an endpoint with a timeout. @param channel SocketChannel to connect. @param endpoint Remote address to connect to. @param timeout Connection timeout in seconds.
1955 Throws SocketTimeoutException if selector returns 0. Uses SelectorPool.m1 to check channel selection status.
1956 Calls m1 with a null timeout and false flag. @param strInterface The interface string. @throws UnknownHostException if hostname resolution fails.
1957 Resolves hostname, using provided interface/nameserver. @param strInterface Network interface, null for default. @param nameserver Nameserver, null for default. @return Resolved hostname or null if resolution fails.
1958 Calls UgiMetrics.m1() for metric tracking.
1959 Constructs a MutableInverseQuantiles object. @param intervalSecs Interval in seconds.
1960 Creates and registers a MutableQuantiles object. @param name Quantiles name, @param interval Interval size. @return The newly created MutableQuantiles object.
1961 Creates a MutableStat with the given parameters and default flag. @param name Stat name @param desc Description @param sampleName Sample name @param valueName Value name
1962 Creates a MetricsRegistry with a boolean flag. @param name Metric name. @param description Metric description. @param value Metric value.
1963 Delegates the call to innerMetrics.m1 with provided name and value.
1964 Records queue rate for a given priority and queue time. @param priority Level of the queue. @param queueTime Time spent in the queue.
1965 Records processing rate for a given priority and time. @param priority Processing level priority. @param processingTime Processing time in milliseconds.
1966 Records RPC processing time. @param rpcCallName RPC call name. @param overallProcessingTime Processing time in milliseconds.
1967 Locates and sets the Kerberos configuration file path. Uses system properties and environment variables to find it.
1968 Returns false if condition is false, logs error if !nofail. @param condition boolean condition to check @param category error category @param message error message @param args message arguments
1969 Logs a message if the condition is true. @param condition Flag to determine if message is logged. @param category Message category. @param message Message to log. @param args Arguments for the message.
1970 Gets UserGroupInformation for a user, using SIMPLE authentication. @param user User name. @return UserGroupInformation object.
1971 Verifies password against stored password for a token. @param identifier Token identifier. @param password Password to verify. @throws InvalidToken if password doesn't match.
1972 Renews Kerberos ticket if conditions are met and ticket exists.
1973 Constructs a Count object. @param cmd Command-line arguments, starting from 'pos'. @param pos Starting position in the command array. @param conf Configuration object.
1974 Connects to ZooKeeper, configures watchers and auth. @return ZooKeeper instance, configured and ready to use.
1975 Retrieves a value by key name, performing chained operations.
1976 Resolves a hostname to an InetAddress. Logs slow lookups. @param hostname The hostname to resolve. @return An InetAddress object.
1977 Creates a ProtocolSignature using provided data. @param server VersionedProtocol instance. @param protocol Protocol name. @param clientVersion Client version. @param clientMethodsHash Hash of client methods. @return ProtocolSignature object.
1978 Checks if a server method is supported. @param methodName Method name to check. @param parameterTypes Method parameter types. @return True if the method is supported, false otherwise.
1979 Validates the RPC request header for essential fields. Throws exception if validation fails.
1980 Decodes a message buffer into a typed Message. @param message The message to decode. @param buffer The buffer containing the encoded message. @return Decoded message of type T.
1981 Returns m2() if semaphore.m1() is true, otherwise returns null.
1982 Handles version mismatch errors based on client version. @param clientVersion Client version number.
1983 Calculates a masked value by adding swapSize * 1024 to m1().
1984 Creates a HarFSDataInputStream. @param fs Filesystem, path, start, length, bufsize for input stream.
1985 Evicts entries from the queue up to EVICTION_LIMIT. Uses timer and checks eviction criteria (m3) before removal.
1986 Decrements a counter until it's below the size limit.
1987 Overloads m1 with a default value for the 'z' parameter. @param qOption boolean option @param hOption boolean option @param xOption boolean option
1988 Calls overloaded method with `false` for the last parameter. @param qOption, hOption, tOption flags, types storage types
1989 Selects a method based on options. @param hOption flag, @param tOption flag, @param types list of types
1990 Recursively processes a list of CompletableFutures. @param futures List of CompletableFutures to process.
1991 Executes m1 with the provided CompletableFuture, if it exists. @param future CompletableFuture to execute, or null.
1992 Updates CRC values from a byte array in chunks. @param crcBuffer Byte array containing CRC data. @param offset Start offset in the byte array. @param length Number of bytes to process. @param bytesPerCrc Bytes per CRC value.
1993 Reads checksums and processes them. @param checksumIn Input stream for checksums. @param numChecksumsToRead Number of checksums to read. @param bytesPerCrc Bytes per CRC value.
1994 Creates an instance of the specified class using the configuration. @param theClass Class to instantiate. @param conf Configuration object.
1995 Delegates the call to data.m1() and returns the result.
1996 Delegates the call to data.m1() and returns the result.
1997 Processes arguments, delegates to other methods based on action. @param args Command-line arguments; action and name. @return Result code based on the action.
1998 Constructs a FutureDataInputStreamBuilderImpl. @param fc The file context. @param path The path to the file. @throws IOException if an I/O error occurs.
1999 Creates a DataChecksum from a byte array, offset, and bytesPerChecksum. @param bytes byte array to process @param offset offset into the byte array @return DataChecksum object
2000 Creates a DataChecksum object. @param in Input stream to read checksum parameters from. @return DataChecksum object or throws InvalidChecksumSizeException.
2001 Executes a process if enough time has passed, logs if on macOS.
2002 Aggregates a snapshot using m2, passing snapshot and statistics.
2003 Creates an IStatisticsSnapshot using m2, after calling m1.
2004 Creates an IStatisticsSnapshot from a source object. @param source The source object to create snapshot from. @return An IStatisticsSnapshot or null on failure.
2005 Converts a snapshot to a JSON string. @param snapshot Serializable snapshot object @return JSON string representation of the snapshot
2006 Parses a JSON string and returns an IostatisticsSnapshot. @param json JSON string to parse. @return IostatisticsSnapshot object.
2007 Loads an I/O statistics snapshot for a given file system path. @param fs FileSystem object @param path Path to load statistics for @return Statistics snapshot
2008 Retrieves an I/O statistics snapshot from the source. @param source The source object to retrieve stats from. @return A Serializable object or null if unavailable.
2009 Saves a snapshot to the filesystem. @param snapshot The snapshot to save, null allowed. @param fs The filesystem. @param path The path to save to. @param overwrite Whether to overwrite existing files.
2010 Converts statistics to a pretty string representation. Uses m2 method for conversion; statistics are passed.
2011 Executes m1 and returns the result of m2. @throws UnsupportedOperationException if an error occurs
2012 Sets thread context using statistics context. @param statisticsContext Statistics context object. @throws UnsupportedOperationException if operation is not supported.
2013 Calls m1() and resets the iostatistics context using m2.
2014 Retrieves a snapshot context using m2, after calling m1.
2015 Delegates processing to m2, passing the source object.
2016 Compares two versions using ComparableVersion. @param version1 First version string. @param version2 Second version string. @return Comparison result from ComparableVersion.
2017 Initializes a CountingBloomFilter with specified size, hashes, and hash type.
2018 Initializes a Bloom filter with specified size, hash count, and type.
2019 Checks if a key might exist in the bloom filter. @param key The key to check. @return True if potentially present, false if definitely absent.
2020 Clears a data element based on the key and scheme. @param k The key to use for clearing. @param scheme The clearing scheme to apply.
2021 Overloads m1 with a single new key. @param key Original key. @param newKey New key to add. @param customMessage Optional custom message.
2022 Calls overloaded method with null as the third argument. @param key The key. @param newKeys Array of new keys.
2023 Calls m1 with a single new key, using the provided key. @param key The original key. @param newKey The new key to add.
2024 Starts the HTTP server, including metrics and handler checks.
2025 Updates the ZNode to mark the local node as the most recent. @param oldBreadcrumbStat Previous ZNode stat, or null if new.
2026 Deletes the breadcrumb for the active node, verifying data integrity.
2027 Applies a FileRange to a stream using a provided allocator. @param stream Input stream. @param ranges Ranges to apply.
2028 Executes m1 operation on buffer data, transitioning state.
2029 Reads block data into a buffer. @param blockNumber Block number to read. @return BufferData object containing block number and buffer.
2030 Initializes a FilePosition with file size and block size. @param fileSize size of the file in bytes @param blockSize size of each block in bytes
2031 Delegates m2 call to blockData, passing result of m1().
2032 Calls m1 with "closeAll" and then executes CACHE.m2().
2033 Delegates to overloaded method with UTF-8 charset. @param fs FileSystem to use. @param path Path to operate on. @param charseq CharSequence to use. @return FileSystem object.
2034 Constructor for BlockLocation with null filename. @param names Block names, hosts, offset, length, corrupt flag.
2035 Constructs a BlockLocation with specified names, hosts, paths, offset, and length.
2036 Combines two MeanStatistic objects. Returns a new MeanStatistic containing combined data.
2037 Processes IOStatistics to update internal counters and gauges. @param source The IOStatistics object to process.
2038 Calls the overloaded method with LOG as the source. @param message The log message to be recorded. @param source The object associated with the message.
2039 Logs IO statistics based on level. @param log Logger instance. @param level Logging level. @param source Source object.
2040 Logs remote iterator stats and closes it if possible. @param source The RemoteIterator to process.
2041 Delegates the statistic tracking to the provided factory. @param factory DurationTrackerFactory instance @param statistic Statistic name @param input Input for tracking
2042 Reads data from input at a given position. @param position The position to read from. @param buffer The buffer to write to. @param offset Offset in the buffer. @param length Number of bytes to read. @return Number of bytes read.
2043 Reads data from the input stream at a specific position. @param position byte offset, buffer, offset, and length.
2044 Reads data from input into buffer at given position. @param position byte buffer position @param buf byte buffer @return number of bytes read
2045 Reads data from input into a ByteBuffer, updating position. @param position Byte buffer position @param buf Byte buffer to read into
2046 Reads data from the input stream into the provided ByteBuffer. @param buf ByteBuffer to read data into @return Number of bytes read, or -1 if EOF.
2047 Writes an object to a DataOutput, handling various types. @param out Output stream to write to.
2048 Retrieves buffer data for a given block number. @param blockNumber The block number to retrieve data for.
2049 Delegates to bufferPool's m1() method and returns the result.
2050 Executes a task, using service if available, otherwise uses m3. @param task The task to execute. @return True if the task execution is successful.
2051 Processes a list of PathData objects, handling potential IOExceptions.
2052 Creates a Function to get PathHandle from FileStatus. @param fs FileSystem instance @param opt Handle options @return Function<FileStatus, PathHandle>
2053 Creates a ShellCommandExecutor with the given username. @param userName The username to use for the executor.
2054 Creates a ShellCommandExecutor with the provided username. @param userName The username to use for the executor.
2055 Processes credentials from input, iterating and calling m6/m9. @param in DataInput stream containing credentials data.
2056 Retrieves or obtains a delegation token, potentially from issuer. @param issuer Token issuer, renewer, credentials, tokens
2057 Calls m2 on m1, passing alias and token. Synchronized.
2058 Returns the path or a new Path based on path.m1() result.
2059 Returns the path, or a new Path based on workDir if m1() is false.
2060 Creates a File object based on the provided Path, handling potential issues.
2061 Returns the path, potentially wrapping it with m2(). @param p The input path. @return A modified Path object.
2062 Constructs a Path with a resolved URI, using default URI if needed.
2063 Creates a Path object from the URI's m1() value.
2064 Creates a Path object using the URI's m1() value.
2065 Creates a Path object from channel.m1(), returns null on error.
2066 Retrieves a FileStatus for the given path. @param fs FileSystem instance @param pathString Path to retrieve status for @param ignoreFNF Ignore FileNotFoundException if true @return FileStatus object or null if not found
2067 Returns a new Path object based on the existing 'path' field.
2068 Returns a Path object from targetPath, or null if targetPath is null.
2069 Starts the recursive file processing from the root directory. @return Long - total file count from the root. @throws IOException if an I/O error occurs.
2070 Creates a ChRootedFileSystem with the given FileSystem and URI. @param fs the underlying FileSystem @param uri the URI for the chrooted view @throws IOException if an I/O error occurs
2071 Constructs a Path object from a string array, starting at startIndex.
2072 Constructs a Path object from a list of directory links. Returns a Path representing the concatenated directory links.
2073 Creates a Path object from parent and child path strings.
2074 Creates a child path, delegating to a constructor. @param parent The parent path. @param child The name of the child path.
2075 Constructs a Path with a parent Path and a child string.
2076 Renames a file or directory. @param fs FileSystem object @param oldName Old name @param newName New name
2077 Creates a Path object from the result of File's m1() and m2().
2078 Extracts the path from a URI, reconstructing it as a Path object.
2079 Creates Path array from string array. @param str array of strings to create Path objects from @return Array of Path objects.
2080 Modifies Path based on m1() result. Returns new Path or original.
2081 Combines paths, modifying path2 and incorporating it into the result. @param path1 First path object. @param path2 Second path object, modified during processing. @return New Path object with combined data.
2082 Validates path against specified file type requirement. @param typeRequirement FileTypeRequirement to check against.
2083 Constructs a masked path string based on the child path. @param childPath Path object to mask @return Masked path string
2084 Throws PathNotFoundException based on the provided PathData. @param item PathData object used to generate the exception.
2085 Gets the AbstractFileSystem for the given path. @param absOrFqPath Path to resolve; validates and resolves it. @return AbstractFileSystem object.
2086 Sets permissions on a directory. @param fs Filesystem object. @param dir Path to the directory. @param permission FsPermission to set. @return True if operation was successful.
2087 Constructs a LocatedFileStatus with file details and block locations. @param locations Array of BlockLocation objects.
2088 Delegates to the object-based m1 method. @param key The key object. @param val The value object.
2089 Writes records from iterator to writer. @param records Iterator of raw key-value records. @param writer Writer to write the records to.
2090 Initializes the service with the given configuration. Throws ServiceStateException if config is null or init fails.
2091 Stops the service, handling re-entry and potential exceptions.
2092 Delegates processing of a Text object to publicService. @param thePublicService The Text object to process. @return True if processing was successful, false otherwise.
2093 Checks if the token's alias matches the given alias. @param token The token to check. @param alias The alias to compare. @return True if alias is null or matches; otherwise false.
2094 Checks service/URL based on fetcher's protocol. @param fetcher DtFetcher object. @param service Text service, can be null. @param url URL string. @return True if condition is met.
2095 Processes a directory. @param dir The directory to process. @throws DiskErrorException if an error occurs during processing.
2096 Processes a directory by calling m1 and m2. @param dir The directory to process. @throws DiskErrorException if a disk error occurs.
2097 Calls m1 with false arguments.
2098 Processes input buffers, erases data, and decodes with validation.
2099 Processes EC chunks, converting to ByteBuffers and calling m2. @param inputs ECChunk array, @param erasedIndexes erasure indices @param outputs ECChunk array for results
2100 Registers a block, handling errors and ensuring closure.
2101 Executes m1 and optionally deletes the segment file. @throws IOException if an I/O error occurs
2102 Executes a masked function, ensuring it's not closed. Sets closed to true after execution, regardless of success.
2103 Reads token and secret key data from input stream. Populates tokenMap and secretKeysMap with read data.
2104 Reads a key from the input buffer and writes it to the output buffer. @param key DataOutputBuffer to write the key to. @return Key length or -1 if error.
2105 Processes a Writable value, potentially configuring it and handling data.
2106 Masks a value, potentially configuring it and handling compression. @param val The value to mask. @return The masked value.
2107 Reads key and value from input stream, decompresses if needed. @param key DataOutputBuffer for the key @param val ValueBytes object for the value @return Length of the read data or -1 if error
2108 Processes data bytes, decompressing if needed, and returns length.
2109 Retrieves delegation token information from the SQL secret manager. @param ident TokenIdent object containing token identifiers. @throws RuntimeException if token retrieval fails.
2110 Creates and populates a PermissionStatus object from DataInput. @param in DataInput stream to read permission data from. @return Populated PermissionStatus object.
2111 Reads an enum value from DataInput. @param in DataInput to read from; @param enumType Enum type. @return Enum value or null.
2112 Processes an ACL string from input. @param in DataInput stream containing ACL string @throws IOException if an I/O error occurs
2113 Delegates to ShadedProtobufHelper.m1 to create a ByteString. @param key The input Text key. @return ByteString generated by the helper method.
2114 Creates a TokenProto from a Token object. Populates fields from Token properties.
2115 Constructs a DelegationTokenIdentifier with kind, owner, renewer, realUser.
2116 Executes a call, retries if needed, handling failures and exceptions. @return CallReturn object containing result or exception.
2117 Reads a key-value pair. Throws EOFException if no data.
2118 Copies data from BytesWritable to DataInputStream, returns size.
2119 Copies data from input stream to output stream in chunks. @param out Output stream to write data to. @return Total number of bytes transferred.
2120 Calls overloaded method with full buffer. @param buf byte array to process @return Result of processing the byte array
2121 Checks if two Entry objects are equal by comparing m2 results.
2122 Retrieves and validates a delegation token from a URL. @param url URL to fetch token from, renewer, doAsUser @return A delegation token object.
2123 Renews a delegation token and returns the new expiration timestamp. @param url URL to renew token. @param token Authentication token.
2124 Cancels a delegation token using the provided URL, token, and user. @param url URL for cancellation, token, dToken, doAsUser @throws IOException if an I/O error occurs
2125 Calls m1 with the given scope and a null value for the data. @param scope The scope to use. @return A Node object.
2126 Adjusts the reader based on node group, then calls super.m5.
2127 Creates a SocketInputWrapper with a timeout. @param socket The socket to wrap. @param timeout Timeout in milliseconds. @return SocketInputWrapper object.
2128 Returns OutputStream; uses socket's if not null, else creates new. @param socket The socket to use. @param timeout Timeout value for the OutputStream. @return OutputStream object.
2129 Connects a socket to an endpoint, handling timeouts and loopback detection.
2130 Registers an MBean with the MBeanServer, returning the ObjectName. @param serviceName MBean service name @param nameName MBean name @param properties MBean properties @param theMbean The MBean to register @return ObjectName of registered MBean, or null on failure.
2131 Creates and registers a MutableQuantiles object. @param name Quantiles name, @param interval Interval size. @return Registered MutableQuantiles object.
2132 Creates a RetryCache with specified name, percentage, and expiration.
2133 Processes a protocol class, logging and triggering actions for methods. @param protocol The class representing the protocol to process.
2134 Iterates through names and calls m1 for each name. @param names Array of names to process.
2135 Updates global metrics with stats from local map. @param localStats Map of stat names to ThreadSafeSampleStat objects.
2136 Calls m1 with extended set to true. @param name Rate name. @param desc Rate description. @param extended Extended flag. @return MutableRate object.
2137 Registers methods of a protocol with the rate metrics registry. @param protocol Class representing the protocol to register.
2138 Processes methods with Metric annotations, registering them. @param source The source object. @param method The method to process.
2139 Logs Kerberos authentication issues for a user. @param messagePrefix Prefix for log messages. @param user UserGroupInformation object.
2140 Checks file existence, type, emptiness, and readability. @param file The file to check. @param category Category for logging. @param text Text to include in log messages.
2141 Gets Kerberos short name, logs errors, and throws exceptions.
2142 Retrieves UserGroupInformation based on owner and realUser. Returns null if conditions are not met; uses m4/m5 internally.
2143 Initializes the Find object, enabling recursive searching.
2144 Default constructor for the Count class. Does nothing.
2145 Calls m1 with specific boolean arguments.
2146 Calls m1 with true as an argument.
2147 Calls m1 with 'false' as the argument.
2148 Creates an InetSocketAddress, resolving host if possible. @param host The hostname or IP address. @param port The port number. @return An InetSocketAddress object.
2149 Resolves a host string to an InetAddress, handling null/UnknownHostException.
2150 Sends a final packet for a call, handling connection closure. @param call The RPC call to finalize.
2151 Reads and prepares an RPC call from the provided header and buffer. @param header RPC request header @param buffer Buffer containing the RPC request data
2152 Sends RPC response, handling success/failure and errors. @param call RPC call context.
2153 Updates the IP list and performs an associated action.
2154 Displays system information using SysInfoLinux plugin.
2155 Overloads m1 with default values for 'i' and 'data'. @param qOption boolean option @param hOption boolean option
2156 Reads data into byte array. @param b buffer to read into @param off offset in the buffer @param len number of bytes to read @return number of bytes read
2157 Creates an Expression instance of the given class. @param expressionClass Expression class to instantiate. @param conf Configuration object used for instantiation. @return Expression instance or null if class is null.
2158 Retrieves a Command instance by name, creating if necessary. @param cmdName Command name. @param conf Configuration object. @return Command instance or null if not found/creatable.
2159 Creates a WritableComparable instance using keyClass and conf.
2160 Creates a Writable object of the given class, using factory or reflection. @param c Writable class to instantiate. @param conf Configuration object for configurable instances.
2161 Creates a SocketFactory instance using a class name and configuration. @param conf Configuration object. @param propValue Class name of the SocketFactory. @return SocketFactory instance.
2162 Initializes a TokenIdentifier object from input stream. @return TokenIdentifier object or null if initialization fails
2163 Retrieves a DiskValidator instance, potentially from a registry. @param clazz DiskValidator class to retrieve. @return A DiskValidator instance.
2164 Initializes a DynamicBloomFilter with specified parameters. @param vectorSize size of the filter's vector @param nbHash number of hash functions @param hashType type of hash function @param nr initial number of filters
2165 Expands the Bloom filter matrix by adding a new filter.
2166 Constructs a RetouchedBloomFilter with specified size, hashes, and hash type.
2167 Updates resources from properties, potentially reloading fully. @param props Properties object to read from. @param startIdx Start index for resource processing. @param fullReload Whether to perform a full resource reload.
2168 Yields from election, potentially triggering a fence. @param needFence whether to trigger a fence if needed
2169 Delegates VectoredReadUtils.m1 to perform vectored read. @param ranges List of file ranges to read. @param allocate Allocates ByteBuffer for reading.
2170 Constructs a BlockLocation with default replication factor. @param names block names, hosts, offset, and length are required.
2171 Creates a DurationStatisticSummary. @param key summary key @param success boolean indicating success @param count event count @param max maximum duration @param min minimum duration @param mean statistic mean (cloned)
2172 Processes IO statistics from source. @param source IOStatistics object to process, null safe. @return True if processing was successful.
2173 Initializes the snapshot, either from a source or creates empty maps.
2174 Consumes elements from iterator, applying consumer, and returns count. @param source Iterator providing elements. @param consumer Consumer to apply to each element. @return Number of elements consumed.
2175 Calls the overloaded m1 method with `false` for the `allowSubclasses` parameter.
2176 Processes a block, potentially prefetching data. @param blockNumber The block number to process.
2177 Retrieves BufferData for a block, retrying with exponential backoff. @param blockNumber The block number to retrieve. @return BufferData object or throws IllegalStateException.
2178 Initializes and starts processing of PathData. @param item The PathData object to process.
2179 Recursively processes PathData items, handling grouping. @param parent Parent PathData. @param itemsIterator Iterator for PathData items.
2180 Resolves group names for a user, throwing PartialGroupNameException on failure.
2181 Delegates to overloaded method with default timeout. @param cmd Command line arguments. @return Result string from the delegated method.
2182 Executes a command with environment variables. @param env Environment variables. @param cmd Command to execute. @return Command output as a string.
2183 Calls m1 with the provided credentials and default flag. @param other Credentials object to pass to m1.
2184 Calls m1 with the given credentials and false as the second argument. @param other The Credentials object to pass to m1.
2185 Retrieves tokens based on renewer and credentials. @param renewer renewer string @param credentials credentials object @return Array of tokens
2186 Recursively calls m2 with the token's parent, or returns false. @param token The token to process; null terminates recursion.
2187 Sets the working directory to a new directory. @param newDir The new directory to set as working.
2188 Sets file modification and access times. @param p Path to the file. @param mtime Modification time in seconds. @param atime Access time in seconds.
2189 Delegates file retrieval to the underlying RawLocalFileSystem. @param path Path to the file. @return The File object representing the path.
2190 Processes a Path object and returns a String result. Uses helper methods m1, m2, m3, and m4 for processing.
2191 Calls m3 with arguments obtained from the provided FileSystem. @param fs FileSystem object used to get arguments. @return Path object returned by m3.
2192 Delegates m3 operation on the given path. @param path The path to operate on. @return The result of the delegated operation.
2193 Calls m1, then returns the result of path.m3(). @param path The path object to operate on.
2194 Resolves a file status by path. @param f The path to resolve. @return An array of FileStatus objects.
2195 Resolves links in a file system path recursively. @param f Path to resolve. @param recursive Whether to resolve recursively. @return True if resolved successfully, false otherwise.
2196 Resolves a symbolic link to an FSDataInputStream. @param f Path to the symbolic link @return FSDataInputStream or null if unresolved
2197 Opens a data input stream for a path, using the provided buffer size. @param f Path to open @param bufferSize Buffer size for the stream @return FSDataInputStream object
2198 Resizes a file to the specified length using a file resolver. @param f Path to the file. @param newLength New file length. @return True if successful, false otherwise.
2199 Resolves a link and calls FSLinkResolver.m3 with replication factor. @param f Path to resolve. @param replication Replication factor.
2200 Sets file permissions using an AbstractFileSystem. @param f Path to the file. @param permission Permissions to set.
2201 Resolves links on a path, setting username/groupname. @param f Path to resolve. @param username Username for access control. @param groupname Groupname for access control.
2202 Updates the modification and access times of a file. @param f Path to the file. @param mtime Modification time. @param atime Access time.
2203 Calculates checksum of a file using a file system resolver. @param f Path to the file @return FileChecksum object
2204 Resolves a file status by path, using the filesystem's m2 method. @param f The path to resolve. @return FileStatus object.
2205 Executes an FSAction on a path using a LinkResolver. @param path Path to operate on. @param mode The FSAction to perform.
2206 Resolves a file status, potentially following symbolic links. @param f Path to resolve; must be fully qualified. @return FileStatus object or null if not found.
2207 Resolves symbolic links to their absolute path. @param f Path to resolve @return Absolute path or null if unresolved
2208 Retrieves block locations for a file path within a given range. @param f file path @param start start offset @param len length @return BlockLocation array
2209 Resolves a file system status, using default FS if path is null. @param f Path to resolve; null uses default FS. @return FsStatus object.
2210 Creates a symbolic link from 'link' to 'target', creating parents if needed. @param target The path to the target file. @param link The path to the symbolic link. @param createParent Whether to create parent directories.
2211 Resolves a path to a RemoteIterator of FileStatus objects. @param f The path to resolve. @return RemoteIterator of FileStatus or null if not found.
2212 Resolves a path to a remote iterator of paths. @param path The path to resolve. @return RemoteIterator of Path objects.
2213 Resolves a remote iterator of located file statuses for a path. @param f The path to resolve. @return RemoteIterator of LocatedFileStatus.
2214 Resolves file system links and collects AbstractFileSystems. @param f Path to resolve; throws IOException. @return Set of AbstractFileSystems found.
2215 Resolves and applies ACL specifications to a file system path. @param path The path to resolve. @param aclSpec ACL entries to apply. @throws IOException If an I/O error occurs.
2216 Resolves and applies ACL specifications to a file system path. @param path Path to resolve. @param aclSpec List of ACL entries to apply.
2217 Resolves a file system link at the given path. @param path Path to resolve; throws IOException on failure.
2218 Resolves and executes m2 operation on the absolute file path. @param path The Path object to resolve and operate on. @throws IOException if an I/O error occurs.
2219 Resolves and applies ACL specifications to a path. @param path Path to resolve. @param aclSpec ACL entries to apply.
2220 Resolves ACL status for a given path using FSLinkResolver. @param path Path to resolve ACL status for. @throws IOException if an I/O error occurs.
2221 Sets extended attributes on a file path. @param path Path to the file. @param name Attribute name. @param value Attribute value. @param flag Attribute flags.
2222 Resolves a byte array resource by path and name. @param path Path to the resource. @param name Resource name. @return Byte array of the resource.
2223 Resolves file content at the given path. @param path Path to the file. @return Map containing file content or empty map. @throws IOException if an I/O error occurs.
2224 Resolves file content by names, using the filesystem. @param path Base path for resolution. @param names List of names to resolve. @return Map of name to byte array content.
2225 Resolves and links a path with a given name using FSLinkResolver. @param path Path to resolve. @param name Name to associate with the path.
2226 Resolves links within a path using the AbstractFileSystem. @param path The path to resolve. @return A list of strings representing resolved links.
2227 Resolves a path to its snapshot using FSLinkResolver. @param path The path to resolve. @param snapshotName Snapshot identifier. @return Resolved Path object.
2228 Renames a snapshot on the file system. @param path Path to the snapshot. @param snapshotOldName Old snapshot name. @param snapshotNewName New snapshot name.
2229 Resolves and executes a file system operation with a snapshot name. @param path The path to resolve. @param snapshotName The snapshot name to use.
2230 Resolves and executes m2 on the absolute file system path. @param path The Path to resolve and execute m2 on.
2231 Resolves a link using the provided path and policy name. @param path Path to resolve. @param policyName Policy name to apply.
2232 Resolves links in a file using a custom link resolver. @param src The source Path to resolve links from. @throws IOException if an I/O error occurs.
2233 Resolves a BlockStoragePolicySpi for a given path. @param path Path to resolve. @throws IOException if an I/O error occurs.
2234 Resolves a path with a capability, using a link resolution strategy. @param path The path to resolve. @param capability Capability to use for resolution.
2235 Resolves FsServerDefaults by linking across file systems. @param path Path to resolve defaults for. @return FsServerDefaults object.
2236 Resolves and configures multipart upload using a base path. @param basePath base path for the upload configuration @return MultipartUploaderBuilder configured with resolved path
2237 Delegates to m1 to obtain a Path object using the provided client.
2238 Retrieves a file status using helper methods, handles cleanup. @return FileStatus object or null if an error occurs.
2239 Delegates m1() call to the underlying FileSystem object. @return long value returned by fs.m1() @throws IOException if an I/O error occurs
2240 Resolves a path using interceptors and regex matching. @param srcPath Path to resolve. @param resolveLastComponent Whether to resolve last component. @return ResolveResult object or null if unresolved.
2241 Checks if a file exists in local directories based on path. @param pathStr File path to check. @param conf Hadoop configuration. @return True if file exists, false otherwise.
2242 Processes data, index, and directory paths using the FileSystem. @param fs The FileSystem object to use. @param name The base name of the paths to process.
2243 Calculates the file path for data based on the given date. @param now The current date to determine the file path. @return Path object representing the calculated file path.
2244 Opens a file output stream, respecting security or using native IO. @param f The file to open. @param permissions File permissions. @return FileOutputStream object. @throws IOException If an I/O error occurs.
2245 Checks if raw xattrs should be preserved during copy. @param src Source path. @param target Destination path. @return True if both paths are RESERVED_RAW, otherwise false.
2246 Delegates to m1() and returns the resulting Path.
2247 Returns an Optional Path derived from m1().
2248 Returns a RemoteIterator of PathData for directories. Uses fs.m2(path) to get FileStatus and transforms.
2249 Creates a new FSDataOutputStreamBuilder with FileContext and Path. @param fc FileContext for file system operations. @param p Path to create the output stream for. @throws IOException if an I/O error occurs.
2250 Processes a file path. @param verifyChecksum checksum verification flag @param f input file path @throws exceptions during file processing
2251 Reads a FileStatusProto from the input stream and populates fields.
2252 Constructs a LocatedFileStatus with block locations. @param length File length, isdir, replication, blocksize, times, permission, owner, group, symlink, path, locations
2253 Writes key-value pair to data, updates index if needed. @param key The key to write. @param val The value associated with the key.
2254 Calls the m1 method. @throws IOException if an I/O error occurs in m1
2255 Adds a byte to the internal buffer. @param b The byte to add. Calls m1() when buffer is full.
2256 Copies data from byte array `b` to internal buffer. @param b input byte array, @param off offset, @param len length @return number of bytes copied
2257 Processes EC chunks, converting to ByteBuffers and calling m2. @param inputs ECChunk array, outputs array @param erasedIndexes Indexes of erased chunks @param outputs ECChunk array
2258 Finishes the block appender if forced or block is full. @param bForceFinish flag to force finishing the appender
2259 Reads and processes token storage data from input stream. @param in Input stream containing token storage data.
2260 Retrieves delegation tokens for cleanup from the SQL secret manager. @return Map of TokenIdent to DelegationTokenInformation.
2261 Reads a value length from ValueBytes and returns it. @param rawValue ValueBytes object to read from @return Length of the value read.
2262 Writes credentials data to the provided DataOutput stream.
2263 Delegates Token processing to ShadedProtobufHelper. @param tok Token object to process @return TokenProto object
2264 Creates and returns a new Entry object after calling m1().
2265 Reads data using a reader, passing derived values from 'other'.
2266 Executes m1 with the key and m2 with the value. @param key The key to pass to m1. @param value The value to pass to m2.
2267 Executes a loop of operations using valueBufferInputStream. @param n iteration count
2268 Delegates token renewal. @param url URL to delegate to. @param token Existing token. @param renewer Renewal identifier.
2269 Delegates a URL request. @param url URL to request. @param token Authentication token. @param dToken Delegation token. @return Result code.
2270 Calls m1 with null as the fourth argument. @param url The URL to process. @param token Authentication token. @param dToken Delegation token.
2271 Creates a SocketInputWrapper using the socket and its timeout. @param socket The socket to wrap. @return A SocketInputWrapper.
2272 Returns an OutputStream for the given socket, using default flags. @param socket Socket to create OutputStream for. @return OutputStream for the socket.
2273 Delegates to overloaded method with null bindAddress. @param socket Socket to use @param address SocketAddress to connect to @param timeout Connection timeout in milliseconds
2274 Creates a MetricsBuffer by collecting data from configured sources. Returns the populated MetricsBuffer.
2275 Delegates to overloaded method with empty collection. @param serviceName MBean service name. @param nameName MBean name. @param theMbean The MBean object. @return ObjectName for the MBean.
2276 Retrieves or creates metrics for the given directory. @param dirName The directory name for which metrics are needed. @return ReadWriteDiskValidatorMetrics object.
2277 Initializes RPC stats for a given number of priority levels. @param numLevels The number of priority levels to initialize.
2278 Updates thread-local statistics if available.
2279 Creates a MutableRate with name and default values. @param name The name of the rate. @return A new MutableRate object.
2280 Creates a MutableRate with the given name and description. @param name Rate name. @param description Rate description.
2281 Loads and processes a keytab file, extracting and displaying entries.
2282 Checks and initializes JAAS configuration if required. @param jaasRequired flag to determine if JAAS is needed.
2283 Extracts a user identifier based on TokenIdent properties. Returns the identifier from m1().m2() or m4().m5().
2284 Creates parent ZNodes in ZK, ensuring existence and ACLs. Throws IOException/KeeperException if creation fails.
2285 Retrieves data from ZooKeeper lock file path. @return Byte array containing data or null if not found. @throws ActiveNotFoundException, KeeperException, InterruptedException, IOException
2286 Calls m1 with true as an argument.
2287 Calls m1 with 'false' as the parameter.
2288 Modifies address if condition is met, using fallback if needed. @param addr The InetSocketAddress to potentially modify. @return The modified or original InetSocketAddress.
2289 Updates server address and user info if a change is detected. @return True if address changed, false otherwise.
2290 Modifies URI, updating host to fqHost, using defaultPort if needed.
2291 Sends an RPC request and returns a Writable response or null. @param rpcKind RPC kind, request, remoteId, serviceClass, auth flags, context @return Writable response or null if async RPC is enabled.
2292 Adds a CacheEntry to the set, handles retry logic, and waits. @param newEntry The CacheEntry to add. @return The CacheEntry, after potential waiting.
2293 Adds a new cache entry to the set. @param clientId Client identifier. @param callId Call identifier.
2294 Overload of m1, calls the other m1 with default false value.
2295 Creates and returns an Expression instance by name and config. @param expressionName Name of the expression to create. @param conf Configuration object for the expression.
2296 Creates an Expression instance by class name. @param expressionClassname Class name of the Expression. @param conf Configuration object. @throws IllegalArgumentException if class not found.
2297 Generates a help string describing recognised expressions. @param factory Expression factory to create expressions. @return Help string describing expressions.
2298 Creates an expression of the given class. @param expressionClass Class of the expression to create. @return An Expression object.
2299 Executes command 'cmd' with default value from m1(). @param cmd The command to execute. @return A Command object.
2300 Reads an object from DataInput, handling primitives, arrays, and custom types. @param in DataInput to read from, objectWritable to store result, conf Configuration @return Object read from input
2301 Creates a new Writable object of the specified class. @param c Class of the Writable object to create. @return A new Writable object.
2302 Delegates to token's m1() method. @param token The token to delegate to. @return The result of token.m1()
2303 Prints delegation tokens from credentials to output stream. @param creds Credentials object containing tokens. @param alias Text alias. @param out PrintStream to write output to.
2304 Creates a DiskValidator instance based on the diskValidator string. @param diskValidator String representing the validator class name. @return DiskValidator instance.
2305 Default constructor, initializes with empty arrays and zero timestamps.
2306 Returns an array containing a single BlockLocation. @param file FileStatus object @param start Start offset (unused) @param len Length (unused) @return BlockLocation array
2307 Calculates duration statistics for a key, considering success/failure. @param source IOStatistics source. @param key Statistic key. @param success Success indicator. @return DurationStatisticSummary object.
2308 Creates an IOStatisticsSnapshot from the current context. @return A new IOStatisticsSnapshot object.
2309 Creates an IOStatisticsSnapshot from the given statistics. @param statistics The IOStatistics object to snapshot. @return A new IOStatisticsSnapshot object.
2310 Creates an IOStatisticsSnapshot from an IOStatistics object. @param source The IOStatistics object to snapshot. @return An IOStatisticsSnapshot.
2311 Collects elements from a RemoteIterator into a List. @param source Iterator to collect from. @return List containing elements from the iterator.
2312 Processes a PathData item: calls m2 if exists, else m1. @param item The PathData object to process. @throws IOException if an I/O error occurs.
2313 Retrieves a set of group names for a given user. Returns empty set on failure or if retry is not needed.
2314 Executes commands from a script with arguments, returning combined output. @param args Arguments to pass to the script. @param commandScriptName Script name to execute. @return Combined output string or null on error.
2315 Reads and masks the content of a file. @param f the file to read @return masked content or "" if error occurs
2316 Sets file permissions. @param p Path to the file. @param permission FsPermission object defining permissions.
2317 Masks a netgroup string using m4 transformations. @param netgroup The netgroup string to mask. @return The masked string, or an empty string on error.
2318 Creates a new Credentials object, copying from an existing one.
2319 Executes m1().m2(credentials) under synchronization. @param credentials Authentication credentials.
2320 Delegates path resolution to LocalFileSystem. @param path Path to resolve. @return Resolved file object.
2321 Creates a directory and sets its permissions if needed. @param localFS filesystem object @param dir path of the directory @param expected desired permissions
2322 Retrieves a FileStatus object for the given path. @param f The path to retrieve the status for. @param dereference Whether to dereference symbolic links. @return FileStatus object representing the file or directory.
2323 Processes a path and returns a new Path object. @param path Input path to be processed. @return A new Path object.
2324 Deletes files associated with FileContexts, then clears the set.
2325 Checks if a file exists. Returns true if found, false otherwise.
2326 Sets the working directory to the given path. @param newWDir The new working directory path. @throws IOException if an I/O error occurs.
2327 Copies a file or recursively copies a directory. @param srcName Source file/directory name. @param dst Destination Path. @param overwrite Overwrite if destination exists.
2328 Calculates content summary for a file or directory. @param f Path to file/directory. Returns ContentSummary object.
2329 Retrieves tokens from file systems associated with a path. @param p Path to check. @param renewer Renewal identifier. @return List of tokens.
2330 Sets an XAttribute with CREATE/REPLACE flags. @param path Path to the file. @param name Attribute name. @param value Attribute value.
2331 Delegates to the overloaded method with a default resolver. @param path The path to process. @return The processed path.
2332 Initializes the MultipartUploaderBuilder with FileContext and Path. @param fc FileContext for server defaults. @param p Path to upload to.
2333 Truncates PathData items in waitList to newLength. Iterates and waits for each item to reach the specified length.
2334 Attempts to resolve a path using regex mount points. @param srcPath Path to resolve. @param resolveLastComponent Whether to resolve the last component. @return ResolveResult object or null if no match found.
2335 Delegates path processing to AllocatorPerContext. @param pathStr Path to process. @param conf Configuration object. @return Result of the delegated processing.
2336 Calculates a modified path based on archive path comparisons. Returns a new Path object or Path.SEPARATOR if no match.
2337 Creates a new Path with a modified extension (.crc). @param file The input Path object. @return A new Path object with the modified extension.
2338 Reads a file; returns true on success, false otherwise.
2339 Creates a directory. @param f the path to create @param absolutePermission permissions for the directory @param createParent whether to create parent directories
2340 Renames a file or directory from src to dst, handling overwrite. @param src Source path @param dst Destination path @param options Rename options (e.g., OVERWRITE)
2341 Creates a new Path with a CRC extension based on the input Path. @param file The input Path object. @return A new Path object with the modified extension.
2342 Checks if any parent directory of p matches basePath. @param p Path to check. @param basePath Base path to compare against. @return True if a match is found, false otherwise.
2343 Checks if m1() returns null. @return True if m1() is null, false otherwise.
2344 Constructs a Path object with a suffix, using m2() as a prefix.
2345 Returns target path or modified target based on URI scheme/auth. @param pathURI URI path @param pathWithLink Path with link @param target Target path @return Path object
2346 Renames a file or directory from src to dst, handling exceptions. @param src Source path @param dst Destination path @param overwrite Overwrite existing destination
2347 Constructs a FileStatus with a null name. @param length File size, isdir, replication, etc. See other params.
2348 Copies FileStatus from another object. Uses getters to allow subclasses to override values.
2349 Constructs a LocatedFileStatus with FileStatus and block locations. @param stat The FileStatus object. @param locations Block locations for the file.
2350 Constructs a LocatedFileStatus with basic permission flags. @param length File length, isdir, replication, blocksize, times, permission, owner, group, symlink, path, locations
2351 Increments a counter and writes to a Writable. @param value The Writable object to write to. @throws IOException if an I/O error occurs.
2352 Processes a byte array segment, performing operations in a loop. @param b byte array @param off start offset @param len length of segment @throws IOException if I/O error occurs @throws ArrayIndexOutOfBoundsException if arguments are invalid
2353 Calls m1() and super.m2().
2354 Calls method m1, potentially throwing an IOException.
2355 Calls the m1 method. @throws IOException if an I/O error occurs during m1 execution
2356 Reads credentials from a file. @param filename File containing credentials. @param conf Configuration object. @return Credentials object.
2357 Searches for a key within a block, returning true if found. @param key The key to search for. @param greater True for greater than, false otherwise.
2358 Executes m3 if sinks.m1() is positive, using m2 as input.
2359 Updates rate metrics for the given protocol. @param protocol The protocol class to update rates for.
2360 Delegates the m1 call to the innerMetrics object.
2361 Adds a value to a metric, creating it if it doesn't exist. @param name metric name @param value value to add
2362 Updates token owner stats based on the provided token identifier. @param id The token identifier.
2363 Updates token owner stats based on the provided token ID.
2364 Retrieves the HAServiceTarget from active data. Returns null if ActiveNotFoundException occurs.
2365 Constructs an ActiveStandbyElector with provided configuration. @param app Callback for election events.
2366 Resolves a target address, using cached value if available. @param target Target address string. @param defaultPort Default port if resolution fails. @param configName Configuration name. @param useCacheIfPresent Whether to use cached value. @return Resolved InetSocketAddress.
2367 Returns an InetSocketAddress from the server's address. @param server The server object to extract address from. @return An InetSocketAddress representing the server's address.
2368 Calls m1 with a default RPC service class. @param rpcKind RPC kind, request, remoteId, fallback flag. @return Writable result.
2369 Retrieves a CacheEntry, returning null if m1 returns true. @param cache RetryCache instance @param clientId Client identifier @param callId Call identifier @return CacheEntry or null
2370 Retrieves a CacheEntryWithPayload from the cache. Returns null if m1 returns true.
2371 Creates an expression. @param expressionName Name of the expression to create. @return The created expression.
2372 Retrieves or creates a WritableComparator for the given class. @param c Class of WritableComparable @param conf Hadoop configuration @return WritableComparator instance
2373 Constructs a WritableComparator for the given key class. @param keyClass Class of WritableComparable to compare.
2374 Creates a LocalDirAllocator with the given context configuration item name.
2375 Updates properties based on deprecation context and overlay.
2376 Creates a new configuration by cloning another configuration object.
2377 Creates a Resource object using configuration and restricts props.
2378 Retrieves alternative names based on the provided name. @param name The name to search for alternative names. @return Array of alternative names or null if not found.
2379 Retrieves string array based on name, returns null if fails.
2380 Delegates to the result of m1() and returns its m2() value.
2381 Calls m2() on instances of m1 and m3. No return value.
2382 Converts Properties to a Map<String, String> iterator. Extracts String key-value pairs from Properties.
2383 Filters entries from m7().m8() matching regex, populating a map.
2384 Reads file ranges, calculates checksums, and allocates buffers.
2385 Retrieves buffer data for a given block number, with retries. @param blockNumber The block number to retrieve. @return BufferData object containing the retrieved data.
2386 Processes wait list items, checking for replication inconsistencies.
2387 Gets block locations for a file range. @param p Path to the file; start & len define the range. @return BlockLocation[] array of block locations.
2388 Returns duration statistic summary for a key from the source. @param source IOStatistics object @param key Key to retrieve the statistic for @return DurationStatisticSummary object
2389 Calls m1 with a null argument. @return Serializable object returned by m1(null)
2390 Extracts a serializable object from a source, using m1 & m2. @param source The source object. Returns null if m1 returns null.
2391 Converts RemoteIterator to array. @param source Iterator to convert. @param a Array to populate. @return Populated array.
2392 Renews a token with provided renewer, verifies access, and updates expiry.
2393 Cancels a token, verifying authorization and updating metrics. @param token The token to cancel. @param canceler The canceler principal. @return TokenIdent object.
2394 Processes a list of PathData objects, handling potential IOExceptions.
2395 Returns a list of strings from m1, filtered by userName.
2396 Gets the hard link count of a file. @param fileName The file to check. @throws IOException if file is invalid or an error occurs.
2397 Creates a symbolic link from linkname to target. @param target The path to the target file. @param linkname The path to the symbolic link. @return Exit code of the symlink creation process.
2398 Changes file permissions. @param filename File to modify. @param perm Permission string. @param recursive Recursive flag. @return Exit code of the shell command.
2399 Checks if setsid is supported on the system. Returns true if supported, false otherwise.
2400 Executes a shell command with username/group and writes to file. @param file Output file. @param username Username (optional). @param groupname Groupname (optional).
2401 Extracts usernames from netgroup string. @param netgroup The netgroup string to parse. @return List of usernames found in the netgroup.
2402 Retrieves credentials, iterating and removing invalidated tokens. @return Credentials object containing tokens.
2403 Lists status of files/directories under a path, filtered by a PathFilter. @param f path to list @param filter filter to apply @return Array of FileStatus objects
2404 Retrieves FileStatus objects for paths matching the filter. @param files array of paths to check @param filter filter to apply @return array of FileStatus objects
2405 Resolves a path and returns a ResolveResult. @param p The path to resolve. @param resolveLastComponent Whether to resolve the last component. @return ResolveResult object containing resolution details.
2406 Performs replication of a path with a given replication factor. @param src The source path to replicate. @param replication The desired replication factor. @return True if replication was successful, false otherwise.
2407 Processes a file path, recursively if needed. @param f the file path @param recursive whether to process recursively @return true if processed, false otherwise
2408 Copies a Path to another Path, handling various file system operations. @param src Source Path @param dst Destination Path @return True if copy successful, false otherwise.
2409 Processes a Path, recursively if needed, handling file status. @param f Path to process @param recursive Recursive flag @return True if successful, false otherwise.
2410 Checks if a path from source is an ancestor of target's path.
2411 Constructs a Path by prepending a root path part. @param path The Path to modify. @return A new Path object.
2412 Extracts a path component, handling URI validation and root path. @param p Path object to process. @return String path component, potentially modified.
2413 Extracts and processes a path component. @param p The Path object to process. @return A string representing the processed path.
2414 Resolves a path, following symlinks until resolved or error. @param fc FileContext to operate on. @param path Path to resolve. @return Resolved object of type T.
2415 Moves a file from src to dst, optionally overwriting existing files. @param src Source path @param dst Destination path @param options Rename options
2416 Returns a FileStatus object, adjusting modification time based on metadata version.
2417 Creates a FileStatus object from an FTPFile. @param ftpFile Source FTPFile object. @param parentPath Parent path of the file. @return A FileStatus representing the FTPFile.
2418 Attempts token file acquisition, logs failure if nofail is true. @param tokenFile Token file. @param conf Configuration. @return True if successful, false otherwise.
2419 Processes a token file, creates credentials, and prints output. @param tokenFile File containing the token. @param alias Text alias. @param conf Configuration object. @param out PrintStream for output.
2420 Updates token information for a given ident, handling errors. @param ident TokenIdent object representing the token.
2421 Constructs a MetricsSystemImpl with a given prefix. @param prefix Prefix for metrics names; null allows later init.
2422 Executes a RPC method call on the server. @param server RPC server instance @return RPC response or null if async @throws Exception if an error occurs during execution
2423 Delegates m1 call to the registry with provided name and elapsed time.
2424 Adds a persisted delegation token, updating renew date and password. @param identifier Token identifier. @param renewDate Token renewal date.
2425 Processes current tokens, updating owner stats.
2426 Removes expired delegation tokens. Iterates through tokens, removes expired ones, and notifies.
2427 Creates an ActiveStandbyElector with default enableSecure flag. @param zookeeperHostPorts Zookeeper host ports, session timeout, parent Znode, ACL, auth info, callback, retry num, truststoreKeystore.
2428 Copies data and initiates an active election if not already in one. @param data The byte array to copy. Throws IllegalArgumentException if null.
2429 Resolves a target address with a default port and config name.
2430 Executes a method on a remote service, handling parameters and tracing. @param proxy The proxy object. @param method The method to execute. @param args Method arguments. @return RpcWritable.Buffer or null depending on configuration.
2431 Invokes a remote method on a service proxy. @param proxy The proxy object. @param method The method to invoke. @param args Arguments for the method. @return RpcWritable.Buffer or null.
2432 Parses expressions from a deque of arguments. @param args deque of string arguments @return Expression object representing the parsed expression
2433 Creates a WritableComparator for the given class. @param c Class of WritableComparable to compare. @return A WritableComparator instance.
2434 Authenticates request, using delegation token or fallback handler. @param request HTTP request @param response HTTP response @return AuthenticationToken or null on failure
2435 Processes deprecation keys, updates properties, and returns names.
2436 Populates the environment map with keys and values from m5(). @param env The environment map to populate.
2437 Processes a token, retrieves its ID, registers it, then delegates.
2438 Retrieves user groups, caches them, and returns the list.
2439 Extracts a file to a directory, handling gzip and OS differences. @param inFile Input file to extract. @param untarDir Directory to extract to.
2440 Calls m1 with default 'copy' flag. @param filename File to process. @param perm Permissions to apply. @return Result code from m1.
2441 Sets file read permission on Windows, otherwise uses File.setReadable. @param f The file to modify. @param readable True to grant read permission, false to revoke. @return True on success, false on failure.
2442 Sets file write permission on Windows, otherwise delegates. @param f The file to modify. @param writable True to add write permission, false to remove. @return True if successful, false otherwise.
2443 Sets file executable permission on Windows, otherwise uses File.setExecutable(). @param f The file to modify. @param executable True to set executable, false to remove it. @return True if successful, false otherwise.
2444 Performs actions based on conditions involving m1, m2, and IO.
2445 Delegates file processing to FileUtil. @param p Path to the file. @param username Username. @param groupname Group name.
2446 Sets file permissions based on group permissions, handling edge cases.
2447 Processes a list of groups, caching those meeting criteria.
2448 Logs user group tokens. @param ugi UserGroupInformation object containing tokens.
2449 Logs user group information with tokens, if logging is enabled. @param log Logger instance for logging. @param caption Log message caption. @param ugi UserGroupInformation object.
2450 Sets file system permissions on a directory. @param localFS File system object. @param dir Directory path. @param expected Expected permissions.
2451 Sets file permissions recursively. @param localFS File system. @param dir Directory path. @param expected Expected permissions.
2452 Lists status of files in the given paths. @param files array of paths to check @return FileStatus array for each path
2453 Gets used space for the root filesystem. Throws exception if not a mount point.
2454 Retrieves block locations for a file segment. @param file FileStatus object @param start Start offset of the segment @param len Length of the segment @return Array of BlockLocation objects
2455 Opens an FSDataInputStream for a file. @param f Path to the file. @param bufferSize Input stream buffer size. @return FSDataInputStream for the file.
2456 Opens an input stream for the given path. @param f Path to open. @param bufferSize I/O buffer size. @return FSDataInputStream for reading data.
2457 Opens an input stream for a file, handling checksum verification. @param f Path to the file. @param bufferSize Buffer size for input stream. @return FSDataInputStream for reading the file.
2458 Copies a file from src to dst, handling various conditions. @param src Source file path @param dst Destination file path
2459 Renames a file or directory from src to dst, handling unresolved links. @param src Source path. @param dst Destination path. @param options Rename options.
2460 Adds file statuses of children to the provided list. @param parent Parent HarStatus object. @param statuses List to store FileStatus objects.
2461 Retrieves a FileStatus for the given path. @param f Path to retrieve status for. @return FileStatus object.
2462 Retrieves FileStatus for a file on the SFTP server. @param client SFTP client @param file Path of the file @return FileStatus object or throws FileNotFoundException
2463 Retrieves FileStatus for a file, recursively searching FTP directories. @param client FTP client @param file Path to the file @return FileStatus object or throws FileNotFoundException
2464 Default constructor. Calls the parameterized constructor with null.
2465 Initializes a MutableRollingAverages object. @param metricValueName Name of the metric being averaged.
2466 Configures windowing, starts task, and schedules rate rolling.
2467 Handles master election based on health state & delay.
2468 Calls m1 with SLEEP_AFTER_FAILURE_TO_BECOME_ACTIVE.
2469 Handles ZooKeeper watch events, updating state and triggering actions. @param zk ZooKeeper instance @param event WatchedEvent received from ZooKeeper
2470 Resolves a target host to an InetSocketAddress. @param target Hostname or IP address. @param defaultPort Default port if resolution fails. @return InetSocketAddress object.
2471 Handles authentication based on delegation schemes. Returns AuthenticationToken or returns null if unauthorized.
2472 Checks if a name exists in the deprecation context. @param name The name to search for. @return True if the name is found, false otherwise.
2473 Processes a name using helper methods. @param name The name to process. @return The processed name or null if processing fails.
2474 Sets a property value, handling deprecation and aliases. @param name Property name. @param value Property value. @param source Source of the property.
2475 Processes a name, potentially retrieving or creating it. Updates associated objects with the provided name.
2476 Calculates and returns the size of the virtual memory. Calls m1() and returns the vmemSize value.
2477 Calculates and returns the memory size after calling m1().
2478 Returns the available virtual memory. Calls m1() first.
2479 Returns the amount of available memory. Calls m1() first.
2480 Returns the number of processors available. Calls m1() first, then returns numProcessors.
2481 Returns the CPU frequency in kHz after executing m1().
2482 Returns the cumulative CPU time in milliseconds. Includes time spent in m1().
2483 Calculates CPU usage per processor. Returns CPU usage, divided by numProcessors if > -1.
2484 Returns CPU usage as a float, normalized to a percentage.
2485 Reads network bytes and returns the count. Calls m1() and returns netBytesRead.
2486 Calculates a masked value, calls m1(), and returns netBytesWritten.
2487 Retrieves netgroup data, updates cache, and processes groups.
2488 Updates mount point status in the map. @param viewFileSystem View file system. @param mountPointMap Map of mount points and statuses. @param mountPoint The mount point. @param path The path to check status.
2489 Retrieves FileStatus objects for a given path. @param f Path to check; throws IOException if not found. @return Array of FileStatus objects.
2490 Gets a FileStatus for a path, using different methods based on flags.
2491 Gets file status for a given path. @param f Path to the file. @return FileStatus object.
2492 Retrieves file statuses for a given path. @param f the path to retrieve statuses for @return An array of FileStatus objects.
2493 Executes a file operation and handles exceptions. @param channel SFTP channel; @param file Path to file @throws IOException if an I/O error occurs
2494 Creates a FileStatus object from an LsEntry, resolving symlinks. @param channel SFTP channel, parent path, and file entry. @return FileStatus object representing the file or directory.
2495 Checks file status via SFTP. Returns true if failed, false otherwise.
2496 Attempts file operation; returns true on success, false if not found.
2497 Retrieves FileStatus objects for files within a given path. @param client FTPClient object @param file Path to search within @return Array of FileStatus objects
2498 Checks a file's status via m1, handling exceptions. @param client FTPClient to use, file Path to check @return True if successful, false if not found, throws FTPException
2499 Creates a CBZip2InputStream with specified input stream and mode. @param in Input stream to read from. @param readMode Read mode for decompression.
2500 Decompresses data from an InputStream using CBZip2. @param in Input stream containing compressed data. @return Long value returned by the CBZip2InputStream.
2501 Handles Zookeeper node creation, retries on failure, logs errors.
2502 Processes StatNode result, handles errors, and retries if needed. @param rc Zookeeper result code @param path Znode path @param ctx Context object @param stat Stat object
2503 Resolves a target string to an InetSocketAddress. @param target The target host/port string.
2504 Parses host/port specs, returns a list of InetSocketAddresses. @param specs Comma-separated host/port specifications. @param defaultPort Default port to use if not specified.
2505 Extracts the host from a URI, using a default port if needed. @param uri The URI to process. @param defPort Default port to use if host is missing. @return Host string, or null if URI is invalid.
2506 Creates a Document with configuration properties, or throws exceptions.
2507 Substitutes variables in an expression. @param expr expression string to substitute variables in @return expression with variables substituted, or original if failed
2508 Applies request parameters to reconfigure, logging changes. @param out Output writer for change messages. @param reconf Reconfigurable object to update. @param req HTTP request containing configuration parameters.
2509 Overloads m1 with a null context. @param name Name of the parameter. @param value Value of the parameter.
2510 Logs a setting change and calls the superclass's m3 method. @param name Setting name. @param value Setting value. @param source Source of the setting.
2511 Checks directory access, optionally granting permissions. @param dir The directory to check. @param tryGrantPermissions Whether to try granting permissions. @return True if access is granted, false otherwise.
2512 Delegates to m1() and returns its result.
2513 Retrieves status of mount points for a given path. @param fileSystem The ViewFileSystem to check. @param path The path to check against mount points. @return Map of MountPoint to FsStatus.
2514 Resolves symbolic links in a file status. @param f Path to the file. @return FileStatus object with resolved link, if applicable.
2515 Renames a file on the SFTP channel, checking for existence. @param channel SFTP channel @param src Source path @param dst Destination path @return True if rename was successful, false otherwise.
2516 Lists file statuses within a directory on the SFTP server. @param client SFTP client @param file Path to directory @return Array of FileStatus objects
2517 Creates a file on the SFTP server, creating parent dirs if needed. @param client SFTP client @param file Path of the file to create @param permission File permissions @return True if file creation was successful
2518 Lists status of files matching a path pattern. @param pathPattern glob-style path pattern to match @return FileStatus[] array of matching FileStatus objects
2519 Lists status of files matching a path pattern, filtered by a PathFilter.
2520 Lists status for files matching a path pattern. @param pathPattern Path pattern to match (e.g., "
2521 Lists status of files matching a path pattern, filtered by PathFilter. @param pathPattern Path pattern to match. @param filter Filter to apply. @return FileStatus[] of matching files.
2522 Renames a file on an FTP server. @param client FTP client, src source path, dst destination path @return True if rename was successful, false otherwise.
2523 Deletes a file or directory recursively. @param client FTPClient instance @param file Path to delete @param recursive Whether to delete recursively @throws IOException if directory is not empty and recursive is false
2524 Creates a directory path. @param client FTPClient instance @param file Path to create @param permission FsPermission for the directory @return True if directory was created, false otherwise.
2525 Masks an IP port string if valid. Returns original if invalid.
2526 Resolves an InetSocketAddress from a Token. @param token Token containing address information. @return Resolved InetSocketAddress.
2527 Parses a Text object from a URI. @param uri The URI to parse. @return A Text object parsed from the URI.
2528 Returns a masked string if m1() is null; otherwise, returns null.
2529 Masks data using SecurityUtil with values from m1() and m2().
2530 Delegates expression processing to m1. @param expr The input expression string.
2531 Processes a name using helper methods and returns the result. @param name The name to process. @return The processed result string.
2532 Retrieves a value based on a name, using a default if needed. @param name Name to search for. @param defaultValue Value if name is not found.
2533 Updates key-value pair, validates keys, and returns a B object.
2534 Updates an option with the given key and value. @param key option key @param value option value @return Current builder instance
2535 Sets the filesystem name in the configuration to the URI's scheme. @param conf Configuration object @param uri URI object
2536 Configures a viewfs link for a mount table. @param conf Configuration object. @param mountTableName Mount table name. @param src Source path. @param target Target URI.
2537 Sets the viewfs link merge path in the configuration. @param conf Configuration object. @param mountTableName Mount table name. @param target URI containing the merge path.
2538 Configures viewfs link fallback for a table. @param conf Configuration object. @param mountTableName Table name. @param target URI for the fallback link.
2539 Configures viewfs link merge for a mount table. @param conf Configuration object. @param mountTableName Mount table name. @param targets Array of target URIs.
2540 Sets a configuration value based on provided parameters.
2541 Sets a configuration value based on provided parameters. @param conf Configuration object. @param mountTableName Mount table name. @param srcRegex Source regex pattern. @param targetStr Target string value.
2542 Sets the viewfs.homedir configuration with a derived key. @param conf Hadoop configuration object @param mountTableName Mount table name @param homedir Home directory path
2543 Sets the UMASK configuration property using the provided permission. @param conf Configuration object. @param umask FsPermission object representing the UMASK.
2544 Sets compression codecs in configuration from a list of classes. @param conf Configuration object. @param classes List of codec classes.
2545 Sets the compression type for the job configuration. @param job The job configuration object. @param val Compression type to set.
2546 Extracts proxy user configurations from FilterConfig. @param filterConfig filter configuration object @return Configuration object with proxy user settings
2547 Parses command-line arguments and executes corresponding actions.
2548 Calls m2 with the name and the integer value converted by m1.
2549 Calls m2 with the provided name and a modified value. @param name The name to pass to m2. @param value The value to modify and pass to m2.
2550 Calls m2 with the given name and a modified value. @param name The name to pass to m2. @param value The value to modify and pass to m2.
2551 Calls m2 with the given name and a modified value. @param name The name to pass to m2. @param value The value to modify and pass to m2.
2552 Calls m2 with the provided name and a boolean value. @param name The name to pass to m2. @param value Boolean value to be converted and passed.
2553 Logs a named value, adjusted by a unit-based duration. @param name The name of the value to log. @param value The value to log, adjusted by the unit. @param unit Time unit used for duration calculation.
2554 Calls m2 with the name and a value adjusted by the unit's m1.
2555 Calls m2 with the given name and a result from pattern.m1().
2556 Calls m2 with a name and a concatenated string of values. @param name The name to pass to m2. @param values Variable arguments to be concatenated.
2557 Calls m2 with the provided name and address converted to a string. @param name The name to pass to m2. @param addr The address to convert and pass to m2.
2558 Validates class against interface and logs a message. @param name Name to log. @param theClass Class to validate. @param xface Interface to check against.
2559 Delegates to the overloaded method with default recursive flag. @param dir The directory to process.
2560 Deletes files in a directory, attempting permission grants if specified. @param dir Directory to delete files from. @param tryGrantPermissions Whether to try granting permissions. @return True if all files were deleted successfully.
2561 Retrieves FileStatus array for files within a directory. @param f Path to the directory. @return FileStatus[] or empty array if no files found.
2562 Returns FileStatus, masking path with target if applicable. @param f Path to mask @return FileStatus object
2563 Checks file/dir existence and recursively deletes if needed. @param channel SFTP channel @param file Path to file/directory @param recursive Recursive deletion flag @throws IOException on failure
2564 Creates a compression input stream from a seekable stream. @param seekableIn Seekable input stream. @param decompressor Decompressor object. @param start Start position. @param end End position. @param readMode Read mode. @return Compression input stream.
2565 Processes a field annotated with Metric, setting its value. Handles exceptions and logs errors during the process.
2566 Retrieves a masked value from configuration based on type and name.
2567 Determines FTP transfer mode based on configuration. @param conf Configuration object to read transfer mode from. @return FTP transfer mode constant.
2568 Configures FTP data connection mode based on configuration. @param client FTP client to configure. @param conf Configuration object.
2569 Retrieves a configuration value based on mount table name. @param conf Configuration object. @param mountTableName Mount table name. @return Configuration string value.
2570 Parses umask from configuration, defaults to DEFAULT_UMASK. @param conf Hadoop configuration object. @return FsPermission object representing the umask.
2571 Retrieves a list of available compression codecs based on config. @param conf Hadoop configuration object. @return List of CompressionCodec classes.
2572 Gets the compression type from the job configuration. @param job The job configuration object. @return CompressionType based on the configuration.
2573 Masks a property string based on defined rules. @param property The property to mask. @return Masked property string.
2574 Locates Hadoop token files from system properties & config. @param conf Hadoop configuration object.
2575 Loads the keystore using credentials from env/file/default.
2576 Resolves DNS address, using config or default. @param conf Configuration object, can be null. @return Resolved DNS address as String.
2577 Retrieves the username from Kerberos info, using config. @param protocol Protocol class. @param conf Configuration object. @return Username string or null if not found.
2578 Calls m1 and returns the result of m2 on its result, or null.
2579 Adds a value for the given name if it doesn't exist. @param name Key for the value. @param value Value to be associated with the key.
2580 Retrieves a value by name, using default if not found. @param name Value name. @param defaultValue Default value. @return Value as long.
2581 Retrieves a storage size, using default if empty. @param name Key for storage size. @param defaultValue Default size if key is empty. @param targetUnit Unit to convert the size to. @return Storage size as a double.
2582 Converts a storage size string to a value in target unit. @param name Storage size string name. @param defaultValue Default value if conversion fails. @param targetUnit Unit to convert to.
2583 Parses a pattern from a name, using default if parsing fails. @param name Property name. @param defaultValue Default pattern to use if parsing fails.
2584 Retrieves a collection of strings based on the input name. @param name Input string used to generate the collection. @return A collection of strings.
2585 Splits a string using m1's result. @param name Input string; used in m1. @return String array from m1's output.
2586 Retrieves string array from m1 or defaultValue if m1 returns null. @param name Parameter for m1. @param defaultValue Default string array. @return String array.
2587 Retrieves a collection of strings based on the input name. @param name The name to use for retrieval. @return A collection of strings or an empty collection.
2588 Processes a name using m1 and StringUtils.m2. @param name The input name string. @return String array result of processing.
2589 Retrieves string array from m1 or defaultValue if m1 is null. @param name Parameter for m1. @param defaultValue Default array if m1 returns null. @return String array.
2590 Extracts configuration values from properties with a prefix. @param confPrefix Prefix to filter configuration keys. @return Map of configuration key-value pairs.
2591 Writes configuration data to a JSON generator. @param jsonGen Generator to write to, name, config, redactor.
2592 Updates a property value. @param property Property name to update. @param newVal New value for the property. @throws ReconfigurationException if property is not configurable.
2593 Calls super.m1, logs a redacted value, and returns the value. @param name Input string parameter @return The value returned by super.m1
2594 Retrieves the default ViewFS mount table name from configuration.
2595 Attempts to load the native Bzip2 library. @param conf Hadoop configuration object. @return True if native library loaded, false otherwise.
2596 Gets the SocketFactory based on configuration. Returns default if not configured.
2597 Gets the static user from config, handles deprecated format. @param conf Configuration object to retrieve the user from. @return Static user string.
2598 Sets the value of an option to the result of processing it. @param option The option to set.
2599 Initializes TruststoreKeystore with configuration parameters. @param conf Configuration object containing keystore/truststore details.
2600 Renews a Kerberos ticket if forced or if conditions are met. @param force Whether to force renewal, regardless of conditions.
2601 Initializes the KeyProvider with a Configuration, sets JCEKS filter, and adds BouncyCastle provider if configured.
2602 Retrieves ACLs from ZooKeeper configuration. @param conf Configuration object; contains ZK ACL setting. @throws IOException if there's an error reading ACLs.
2603 Retrieves a hash type from configuration. @param conf Configuration object to read from. @return The hash type as an integer.
2604 Retrieves an EnumSet from configuration. @param key Config key, enumClass, ignoreUnknown flag. @return EnumSet or throws IllegalArgumentException.
2605 Creates an IntegerRanges object using the result of m1. @param name Parameter for m1. @param defaultValue Default value for m1.
2606 Retrieves a value by name, logs it, and returns the value.
2607 Delegates to another m2 method with a boxed boolean value. @param key The key to use. @param value The boolean value. @return The result of the delegated method.
2608 Calls m2 with the key and a modified value. @param key The key to use. @param value The value to modify and pass to m2. @return The result of calling m2.
2609 Delegates to another m2 method with a boxed boolean value. @param key The key for the method. @param value The boolean value. @return The result of the delegated method.
2610 Delegates to m2 with the key and a modified value.
2611 Calls m3 with a modified URI, using the provided configuration. @param conf Configuration object. @param uri URI string to process.
2612 Overloads m2 with default settings if settings is null. @param conf Configuration object @param mountTableName Mount table name @param src Source path @param settings Settings string, defaults if null @param targets Target URIs
2613 Sets the index interval in the configuration. @param conf Configuration object. @param interval The interval value to set.
2614 Sets the IPC ping interval in the configuration. @param conf Configuration object to modify. @param pingInterval Ping interval in milliseconds.
2615 Sets the IPC client connect timeout in the configuration. @param conf Configuration object to modify. @param timeout Timeout value in milliseconds.
2616 Sets the nested mount point support configuration. @param conf Configuration object to update. @param isNestedMountPointSupported Flag indicating support.
2617 Processes keys and values, then returns a B object. @param key The key to process. @param values Optional values associated with the key. @return A B object.
2618 Processes keys and values, then returns a B object. @param key The key to process. @param values Optional values associated with the key. @return A B object.
2619 Resolves and registers a socket address. @param name identifier; @param addr address to resolve/register @return Resolved InetSocketAddress
2620 Sets the engine class if not already configured. @param conf Configuration object. @param protocol Protocol class. @param engine Engine class to register.
2621 Checks if a file/directory can be deleted. @param p Path to delete. @param recursive Recursive deletion for directories. @return True if deletion is possible.
2622 Delegates to overloaded method with default delete flag. @param dir The directory to process.
2623 Retrieves FileStatus for a path, resolving intermediate filesystems. @param f Path to retrieve status for. @return FileStatus object.
2624 Retrieves FileStatus array for a given path. @param f the path to retrieve status for @return FileStatus array or null if not found
2625 Opens a data output stream, using default FsCreateModes. @param f Path to open. Overwrite and progress are also params. @return FSDataOutputStream
2626 Returns the FsPermission. Uses umask if available, otherwise uses conf.
2627 Creates a BlockFactory based on the provided name. @param keyToBufferDir Buffer directory key. @param configuration Configuration object. @param name Factory name (DATA_BLOCKS_BUFFER_ARRAY, etc.) @return BlockFactory instance.
2628 Initializes the CompressionCodecFactory with codecs from config. @param conf Hadoop configuration object.
2629 Returns the value of 'name' or 'defaultValue' if 'name' is null.
2630 Parses an integer value from a string, or returns a default. @param name String to parse, or default if parsing fails. @param defaultValue Default value if parsing fails.
2631 Retrieves a long value from a name, using default if unavailable. @param name Name to lookup. @param defaultValue Default value if not found.
2632 Retrieves a value by name, returns defaultValue if null. @param name Value name. @param defaultValue Default value if not found. @return Value as long.
2633 Retrieves a float value by name, returns default if not found. @param name Name of the value to retrieve. @param defaultValue Default value if not found.
2634 Retrieves a double value by name, returns defaultValue if not found. @param name The name of the value to retrieve. @param defaultValue The default value to return if not found.
2635 Retrieves a boolean value by name, using default if invalid. @param name Property name. @param defaultValue Default boolean value. @return Boolean value or default if invalid.
2636 Resolves a class by name, returns default if not found. @param name Class name to resolve. @param defaultValue Default class if name is not found.
2637 Calls m2 with the given name and a boolean value converted to Boolean.
2638 Overloads m1 with a default timing unit. @param name Metric name, @param defaultValue Default value, @param unit Timing unit
2639 Creates SASL properties with QOP based on configuration. @param conf Configuration object. @param configKey Key to fetch QOP from config. @param defaultQOP Default QOP to use. @return Map of SASL properties.
2640 Converts string array to integer array using m2. @param name Input string, used to generate the array. @return Integer array converted from the string array.
2641 Resolves class array from name, uses default if not found. @param name Class name to resolve. @param defaultValue Default class array if resolution fails. @return Array of resolved classes.
2642 Finds a file within specified directories based on a hash. @param dirsProp Property string containing directory paths. @param path File path to search for. @throws IOException If no valid directory is found.
2643 Constructs a SerializationFactory with provided Configuration. Initializes with default serializers from configuration.
2644 Retrieves configuration parameters with a given prefix. @param conf Configuration object. @param confPrefix Prefix for configuration keys. @return Map of configuration key-value pairs.
2645 Retrieves configuration map using prefix. @param conf Configuration object. @param confPrefix Prefix for configuration keys. @return Map of configuration string values.
2646 Adds/sets properties to the builder with a given prefix. @param builder FSBuilder instance. @param conf Configuration object. @param prefix Property prefix. @param mandatory Whether properties are mandatory.
2647 Generates HTML form for reconfiguration changes. @param out PrintWriter to write HTML output. @param reconf Reconfigurable object.
2648 Calls m2 with a default value for the intermediate parameter. @param conf Configuration object. @param src Source URI. @param target Target URI.
2649 Calls m2 with a derived URI. @param conf Configuration object. @param target Target URI to be used in the call.
2650 Calls m2 with a derived URI and provided configuration. @param conf Configuration object. @param target Target URI.
2651 Calls m2 with configuration and results of m1, given targets.
2652 Delegates to another m2 method with a derived value. @param conf Configuration object; @param homedir home directory
2653 Calls m2 with the configuration and result of m1. @param conf Configuration object used by m1 and m2.
2654 Creates an ErasureEncoder using the given configuration and options. @param conf Configuration object. @param options ErasureCodecOptions object. @return An ErasureEncoder instance.
2655 Creates an ErasureDecoder using provided config and options. @param conf Configuration object. @param options ErasureCodecOptions object. @return An ErasureDecoder instance.
2656 Returns the Compressor class based on configuration. @param conf Configuration object to determine compressor.
2657 Returns the appropriate Decompressor class based on config.
2658 Creates a Decompressor based on configuration. @param conf Configuration object to determine Decompressor type.
2659 Returns a SocketFactory, using config or default if not found.
2660 Constructs a HadoopZookeeperFactory with default truststore config. @param zkPrincipal Zookeeper principal. @param kerberosPrincipal Kerberos principal. @param kerberosKeytab Kerberos keytab file path.
2661 Initializes SSL context with provided mode and configuration.
2662 Checks configuration for authentication using SecurityUtil. @param conf Configuration object to check. @return True if authentication is enabled, false otherwise.
2663 Configures security rules based on the provided configuration.
2664 Finds a suitable CryptoCodec based on configuration and cipher suite. @param conf Configuration object. @param cipherSuite Cipher suite to match. @return CryptoCodec instance or null if none found.
2665 Creates a Hash object based on the configuration. @param conf Configuration object used to determine hash type. @return Hash object created based on configuration.
2666 Creates a FlagSet from a configuration, ignoring unknown flags. @param enumClass Enum class for flags. @param conf Configuration object. @param key Key for configuration.
2667 Writes configuration to a Writer, redacting property if provided. @param propertyName Property to redact, or null. @param out Output Writer. @param config Configuration object.
2668 Dumps configuration properties to a JSON writer. @param config Configuration object to dump. @param out JSON writer to write to.
2669 Delegates to m1 with the provided key and value.
2670 Calls m1 with the given key and value (casted to long). @param key The key to use. @param value The value to pass (as a long). @return The result of calling m1.
2671 Calls m1 with the given key and value (casted to long). @param key The key to use. @param value The value to cast to a long. @return The result of calling m1.
2672 Delegates to m1 with the provided key and value.
2673 Creates a MetricsSource from the given source object. @param source The object to track metrics for. @return A MetricsSource instance.
2674 Opens a data output stream at the given path. @param f Path to open; overwrite, bufferSize, etc. are config. @return FSDataOutputStream
2675 Creates a data output stream at the specified path. @param f Path to create stream. @param createFlag Flags for stream creation. @param opts Creation options. @return FSDataOutputStream object.
2676 Creates a directory at the given path with specified permissions. @param dir The directory path. @param permission FsPermission for the directory. @param createParent Whether to create parent directories.
2677 Processes compression/decompression based on command-line args. Uses codecs from factory, encodes/decodes files accordingly.
2678 Masks a principal configuration based on hostname validation. @param principalConfig The principal configuration string. @param hostname The hostname to validate against. @return The masked configuration or original if invalid.
2679 Masks a principal config string with an IP address. @param principalConfig Config string to mask. @param addr IP address to use for masking. @throws IOException if addr is null.
2680 Creates a server with the given RPC kind and protocol. @param rpcKind RPC kind, protocol class, and implementation. @return The created server instance.
2681 Creates a KeyProvider using the given configuration and key name. @param conf Configuration object. @param configKeyName Key name for the provider. @return KeyProvider or null if URI is null.
2682 Retrieves the URI for the default file system. @param conf Hadoop configuration object. @return URI of the default file system.
2683 Executes kinit command, handling PATH issues if necessary.
2684 Resolves an address and port from a name, using defaults if needed. @param name Name to resolve, defaults used if not found. @param defaultAddress Default address if name resolution fails. @param defaultPort Default port to use. @return Resolved InetSocketAddress.
2685 Resolves an InetSocketAddress, prioritizing provided properties. @param hostProperty Host property key. @param addressProperty Address property key. @param defaultAddressValue Default address value. @param addr Fallback InetSocketAddress. @return Resolved InetSocketAddress.
2686 Opens a file stream using provided parameters. @return CompletableFuture containing FSDataInputStream
2687 Opens a file stream, returning a CompletableFuture. Uses m14/m17.
2688 Configures SFTP connection details from URI info and configuration.
2689 Establishes an SFTP channel using configuration. @return ChannelSftp object or null if connection fails.
2690 Retrieves buffer size from file system configuration.
2691 Opens an FSDataInputStream for the given path. @param f Path to open; returns an FSDataInputStream.
2692 Opens an FSDataInputStream for the given path. @param fd PathHandle object representing the file path.
2693 Opens a data output stream for the given path. @param f The path to open. @return FSDataOutputStream for writing data.
2694 Opens a data output stream to write to a file. @param f the path to the file @param appendToNewBlock if true, append to new block @return FSDataOutputStream object
2695 Initializes the cache with a given configuration. @param conf Configuration object for cache settings.
2696 Constructs a Sorter with provided configuration and metadata.
2697 Creates a BlockCompressorStream with configured buffer size. @param out Output stream to compress to. @param compressor Compressor to use for compression. @return BlockCompressorStream instance.
2698 Creates a BlockDecompressorStream for LZ4 decompression. @param in Input stream to decompress. @param decompressor Decompressor instance. @return BlockDecompressorStream object.
2699 Creates and returns an Lz4Decompressor with a buffer size.
2700 Creates a compression output stream based on configuration. @param out The output stream. @param compressor Compressor object. @return CompressionOutputStream instance.
2701 Creates a CompressionInputStream based on configuration. @param in Input stream to compress. @param decompressor Decompressor object. @return CompressionInputStream instance.
2702 Creates a BlockCompressorStream with configured buffer size. @param out Output stream to compress to. @param compressor Compressor to use. @return BlockCompressorStream instance.
2703 Creates a SnappyCompressor with buffer size from configuration. @return SnappyCompressor instance
2704 Creates a BlockDecompressorStream for decompressing input. @param in Input stream to decompress. @param decompressor Decompressor instance. @return BlockDecompressorStream instance.
2705 Creates a SnappyDecompressor with buffer size from config. @return SnappyDecompressor instance
2706 Calls m2 with default buffer size and copy mode true. @param in input stream @param out output stream @param conf configuration object
2707 Delegates to overloaded method with default buffer size. @param in Input stream. @param out Output stream. @param conf Configuration object. @param close Close streams.
2708 Retrieves the IO file buffer size from configuration. @param conf Configuration object to read from. @return The IO file buffer size as an integer.
2709 Initializes script name and maxArgs from configuration. @param conf Configuration object; null if not provided.
2710 Retrieves the Hadoop security crypto buffer size from configuration.
2711 Gets the priority levels from configuration, logs deprecation warning. @param ns namespace @param conf Configuration object @return Number of priority levels.
2712 Gets the IPC client RPC timeout from configuration. @param conf Configuration object to retrieve timeout from. @return Timeout value in milliseconds.
2713 Gets the IPC ping interval from the configuration. @param conf Configuration object to retrieve the value from. @return The IPC ping interval in milliseconds.
2714 Returns the RPC timeout from configuration, defaulting to 0 if negative.
2715 Constructs a LineReader with default buffer size. @param in InputStream to read from @param conf Configuration object
2716 Constructs a LineReader with an InputStream, Configuration, and delimiter.
2717 Calls super.m1, logs the result, and returns the value. @param name Parameter name. @param defaultValue Default value if not found.
2718 Configures FTP client timeout based on configuration. @param client FTP client to configure. @param conf Configuration object containing timeout setting.
2719 Retrieves a long value for the given key, using defVal if parsing fails.
2720 Calls m1() with a key and default value, returning a long.
2721 Retrieves a value by name, logs it, and returns the value. @param name The name of the value to retrieve. @param defaultValue Default value if not found.
2722 Retrieves a value by name, logs it, and returns the value. @param name The name of the value to retrieve. @param defaultValue Default value if not found.
2723 Initializes trash-related configurations from given configuration. @param conf Configuration object. @param fs FileSystem instance. @param home Home directory Path.
2724 Checks if nested mount point support is enabled in config. @param conf Configuration object to check. @return True if supported, false otherwise.
2725 Creates and returns an Lz4Compressor instance with config. @return Lz4Compressor object with buffer size and LZ4HC flag.
2726 Creates a RetryPolicy based on configuration. @param conf Configuration object. @return RetryPolicy or null if disabled.
2727 Configures HTTP logs and static resources for Jetty server. @param parent Parent ContextHandlerCollection @param appDir Application directory @param conf Configuration object
2728 Registers servlets for various configuration endpoints. @param configuration The application configuration object.
2729 Checks if IPC callqueue server failover is enabled. @param namespace Namespace to check. @param conf Configuration object. @return True if enabled, default otherwise.
2730 Constructs a new Client with given Writable class, config, and socket factory.
2731 Checks if IPC backoff is enabled in the configuration. @param prefix Configuration prefix. @param conf Configuration object. @return True if enabled, false otherwise.
2732 Checks IPC backoff enable status from config, using namespace/port. @param namespace IPC namespace @param port Port number @param conf Configuration object @return True if enabled, false otherwise.
2733 Extracts password characters from name, if fallback is enabled. @param name The name to extract the password from. @return Character array of the password, or null.
2734 Calls super.m1, logs the value, and returns the result. @param name Parameter name. @param defaultValue Default value. @return Boolean value returned by super.m1.
2735 Finds a FileSystem implementation for the given scheme, using config or service files. @param scheme Filesystem scheme (e.g., "hdfs") @param conf Hadoop configuration object @return FileSystem class or throws UnsupportedFileSystemException
2736 Creates an AbstractFileSystem instance for the given URI. @param uri The URI for the filesystem. @param conf Configuration object. @return AbstractFileSystem instance.
2737 Retrieves a BlockingQueue class for IPC call queue. @param namespace IPC namespace. @param port Port number. @param conf Configuration object. @return Class extending BlockingQueue.
2738 Retrieves the RpcScheduler class based on configuration. @param namespace IPC namespace. @param port Port number. @param conf Configuration object.
2739 Finds a class by name, validates it against an interface. @param name Class name to find. @param defaultValue Default class if not found. @param xface Interface to validate against. @return Class extending U or null if not found/invalid.
2740 Retrieves a FileSystem, creating it if necessary. @param uri URI of the filesystem @param conf Configuration object @param key Key associated with the filesystem @return FileSystem object
2741 Calculates service shutdown duration from configuration. @param conf Configuration object; returns duration in milliseconds.
2742 Retrieves password for a given name from credential providers. @param name Name of the credential to retrieve. @return Password as a char array, or null if not found.
2743 Retrieves capacity weights for IPC call queue, using config or defaults. @param priorityLevels Number of priority levels. @param ns Namespace. @param conf Configuration object. @return Array of capacity weights.
2744 Creates FilterInitializer array from config, ensuring specific initializers are present.
2745 Retrieves a list of objects implementing the given interface. @param name Name to lookup. @param xface Interface to check. @return List of objects implementing the interface.
2746 Initializes data writing context with provided configurations. Sets up serializers, compression, and prepares for data writing.
2747 Delegates to FutureIO.m1, passing all arguments unchanged.
2748 Configures a builder with optional and mandatory prefixes. @param builder The FSBuilder to configure. @param conf Configuration object.
2749 Checks for native libraries; exits with code 1 if any fail. Command-line args control what is checked.
2750 Returns the Bzip2 compressor class based on the configuration.
2751 Returns the Bzip2Decompressor class using the provided configuration.
2752 Creates and returns a Bzip2Decompressor using the configuration.
2753 Constructs a HadoopZookeeperFactory with a Zookeeper principal. @param zkPrincipal Zookeeper principal string.
2754 Retrieves group names for a search result, handling different scenarios. @param result SearchResult object. @param c DirContext object. @param goUpHierarchy Hierarchy level to traverse. @return Set of group names.
2755 Creates a CryptoCodec using the configured cipher suite name. @param conf Configuration object; retrieves cipher suite name. @return CryptoCodec instance.
2756 Overloads m1 with null values for the timeout and selector.
2757 Dumps a configuration property to a writer, or throws an exception. @param config Configuration object @param propertyName Property name to dump @param out Writer to write to
2758 Delegates file processing to m1. @param f The Path object to process. @return True if processing succeeds, false otherwise.
2759 Retrieves the server principal, validating against configuration. @param authType Authentication type. @return Server principal string.
2760 Constructs a Har URI from a raw URI and configuration. @param rawURI The raw URI to process. @param conf Configuration object. @return A constructed URI or default URI if invalid.
2761 Creates a FileSystem instance. @param conf Hadoop configuration object @return FileSystem instance
2762 Initializes file system access based on URI and configuration. @param name URI representing the file system. @param conf Configuration object for file system access.
2763 Creates a FileSystem instance. @param conf Hadoop configuration object @return FileSystem object
2764 Validates a path's filesystem against the expected one. @param path The path to validate. Throws exception if invalid.
2765 Resolves host and address to an InetSocketAddress. @param hostProperty Host property key. @param addressProperty Address property key. @param defaultAddressValue Default address value. @param defaultPort Default port. @return InetSocketAddress object.
2766 Creates a data output stream on a file, handling permissions/existence. @param f Path of the file @return FSDataOutputStream object
2767 Constructs a FutureDataInputStreamBuilderImpl. @param fileSystem The file system to use. @param path The path to the data stream.
2768 Constructs a FutureDataInputStreamBuilderImpl. @param fileSystem The file system. @param pathHandle The path handle.
2769 Opens an FSDataInputStream based on DynamicWrappedIO's state. @param instance DynamicWrappedIO instance, determines open method. @param fs FileSystem to use. @param status FileStatus to open. @param readPolicies Read policies to apply. @return FSDataInputStream opened.
2770 Checks if the FileSystem supports appending. @param fs The FileSystem to check. @return True if appending is supported, false otherwise.
2771 Constructs a Sorter with a Metadata object. @param fs FileSystem, comparator, key/val classes, and config.
2772 Constructs a Bzip2Compressor with default direct buffer size. @param conf Hadoop configuration object.
2773 Reinitializes the compressor with configuration, or defaults. @param conf Configuration object, or null for defaults.
2774 Reads SequenceFile header and initializes readers. @param tempReader indicates if this is a temp reader @throws IOException if an I/O error occurs
2775 Initializes the compressor with a new configuration from the given config. @param conf Configuration object containing compression settings.
2776 Creates a DataOutputStream for writing a value. @param length Value length or -1 to use buffer. @return DataOutputStream for writing the value.
2777 Initializes a WBlockState with compression settings and streams. @param compressionAlgo Compression algorithm. @param fsOut FSDataOutputStream for writing.
2778 Calls super.m1 and then calls m1 on the result of m2().
2779 Calls super.m1 and sets dependencyScriptName from config. @param conf Configuration object; null if not provided.
2780 Creates an Options object using the provided configuration. @param conf Configuration object used to initialize Options. @return New Options object.
2781 Returns the IPC client timeout from config, or defaults to -1.
2782 Creates and configures an FTPClient with settings from config. @return Configured FTPClient object. @throws IOException if connection or login fails.
2783 Returns value for key, using defVal if negative. @param key option key @param defVal default value if key's value is negative @return Value associated with the key.
2784 Creates FsServerDefaults object using configuration. @return FsServerDefaults instance with default values.
2785 Delegates to a default implementation of m1(). @param f Unused Path object. @return Long value returned by the default m1().
2786 Moves a bad file to a "bad_files" directory for later inspection.
2787 Constructs CachingGetSpaceUsed with values from the builder. @param builder Builder object containing configuration values.
2788 Reads a record from the input stream. @param buffer Output buffer to write the record to. @return Key length or -1 if end of file.
2789 Creates a RetryPolicy based on config, or defaults to TRY_ONCE_THEN_FAIL. @param remoteExceptionToRetry Exception to retry on.
2790 Constructs a Client with a Writable class and Configuration. @param valueClass Class of Writable object to be handled. @param conf Hadoop configuration object.
2791 Retrieves a Client from the cache or creates a new one. @param conf Configuration object @param factory SocketFactory for client connections @param valueClass Writable class for data transfer @return Client object
2792 Updates credential provider path, filtering based on file system. @param config Configuration object to modify. @param fileSystemClass Class of the filesystem being used.
2793 Creates a FileSystem instance for the given URI and configuration. @param uri URI of the filesystem. @param conf Configuration object. @return AbstractFileSystem instance.
2794 Creates and configures a Server instance using provided configurations. @return Configured Server object.
2795 Creates and initializes a TrashPolicy based on configuration. @param conf Configuration object. @param fs FileSystem object. @param home Home directory Path. @return TrashPolicy instance.
2796 Creates and initializes a TrashPolicy instance. @param conf Configuration object. @param fs FileSystem object. @return TrashPolicy object.
2797 Creates a DomainNameResolver using the provided configuration. @param conf Configuration object. @param configKey Key to retrieve resolver class.
2798 Resolves and instantiates a SaslPropertiesResolver class. @param conf Configuration object used to find the class. @return An instance of the resolved SaslPropertiesResolver.
2799 Resolves and loads a SaslPropertiesResolver class. @param saslPropsResolverKey Key for resolving the resolver.
2800 Gets an impersonation provider class and instantiates it. @param conf Configuration object; defines provider class. @return ImpersonationProvider instance.
2801 Shuts down the ShutdownHookManager, handling timeout and interruption. @param conf Configuration object for shutdown parameters.
2802 Retrieves password characters from m1 or m2 based on name. @param name The name to use for password retrieval. @return char array containing password or null if both fail.
2803 Creates a RawErasureEncoder with given config, codec, and options.
2804 Creates a RawErasureDecoder with given config, codec, and options.
2805 Initializes a new RpcScheduler and BlockingQueue. @param schedulerClass Scheduler class, queue class, size, ns, config.
2806 Creates a FairCallQueue with specified priority levels, capacity, and configuration.
2807 Writes item to configuration using a stringifier. @param conf Configuration object. @param item Item to be written. @param keyName Key name in configuration.
2808 Retrieves a value from configuration, stringifies, and returns. @param conf Configuration object. @param keyName Key name in configuration. @param itemClass Class of the value to retrieve.
2809 Masks items using a stringifier and stores the result in config. @param conf Configuration object. @param items Items to mask. @param keyName Key name for storing the masked string.
2810 Retrieves an array of items from configuration. @param conf Configuration object. @param keyName Key name in configuration. @param itemClass Class of the items in the array. @return Array of items or null if not found.
2811 Creates a Writer with specified configuration and parameters. @param fs FileSystem, Configuration, Path, classes, sizes, etc.
2812 Serializes src to buffer, deserializes to dst. @param conf Configuration object. @param src Source object to serialize. @param dst Destination object to deserialize to. @return Deserialized destination object.
2813 Delegates FSBuilder creation to FutureIO. @param builder The FSBuilder instance. @param conf Configuration object. @param optionalPrefix Optional prefix string. @param mandatoryPrefix Mandatory prefix string.
2814 Retrieves a set of group names for a given user. @param user User's DN. @param goUpHierarchy Flag to search parent groups. @return Set of group names.
2815 Writes property to Writer in specified format. @param conf Configuration object. @param out Writer to write to. @param format Output format (JSON or XML). @param propertyName Property to write.
2816 Adds an authentication filter to the container with given config.
2817 Creates a SaslClient based on the provided authentication type. @param authType Authentication type containing protocol details. @return SaslClient object or null if authentication fails.
2818 Creates a FileSystem instance for the given URI and configuration. @param uri The URI of the filesystem. @param conf Hadoop configuration. @return FileSystem instance.
2819 Initializes the ViewFS state, including cache and inode tree. @param theUri The URI for the ViewFS mount point. @param conf Hadoop configuration.
2820 Calls super.m1, then conditionally calls fs.m1 and updates swapScheme.
2821 Delegates path modification to m4 on the provided path. @param path The path to be modified. @return The modified path.
2822 Applies masking operations to a Path. @param p the Path to mask @return the masked Path
2823 Delegates method execution to the underlying file system. @param path The path to operate on.
2824 Initializes an AvroFSInput with a FileContext and Path. @param fc FileContext for file operations. @param p Path to the Avro file.
2825 Copies a file or directory from src to dst, optionally deleting src. @param src Source path @param dst Destination path @param deleteSource Whether to delete source after copy @param overwrite Whether to overwrite existing destination @return True if copy was successful
2826 Constructs an FSDataInputStreamBuilder. @param fileSystem The file system. @param path The path to the file.
2827 Constructs an FSDataInputStreamBuilder. @param fileSystem The FileSystem object. @param pathHandle The PathHandle object.
2828 Opens an FSDataInputStream with specified read policies. @param fs FileSystem object @param status FileStatus object @param readPolicies Read policies string @return FSDataInputStream object
2829 Retrieves FsPermission, handling corruption and backups. @param path Path to check, @param backupPath backup path @return FsPermission object
2830 Constructs a Sorter with a default WritableComparator. @param fs FileSystem object @param keyClass Class of the key to compare @param valClass Class of the value @param conf Configuration object
2831 Creates a compressor based on configuration. @param conf Configuration object; determines compressor type. @return A Bzip2Compressor or BZip2DummyCompressor.
2832 Initializes reader with input stream, start position, and length. @param filename file name, can be null @param in input stream
2833 Creates a CompressionOutputStream using provided OutputStream & compressor.
2834 Creates and returns a ZStandardCompressor instance.
2835 Creates and returns a compression input stream. @param in Input stream to decompress. @param decompressor Decompressor to use. @return DecompressorStream object.
2836 Creates and returns a ZStandardDecompressor with configuration. Uses m1() and m2(conf) for initialization.
2837 Creates a BlockAppender. Throws IllegalStateException if preconditions are not met. @return BlockAppender instance
2838 Constructs a ScriptBasedMapping with the given configuration. @param conf The configuration object for the mapping.
2839 Calls super.m1 and then m2().m1 with the given configuration.
2840 Processes command-line arguments and executes corresponding actions. @param args Command-line arguments to process. @return 0 on success, 1 on failure.
2841 Creates a ConnectionId with provided address, protocol, ticket, timeout, and retry policy.
2842 Creates a data output stream for writing to a file. @param file Path to the file @return FSDataOutputStream for writing
2843 Returns the default FsServerDefaults. @return FsServerDefaults object.
2844 Opens a data output stream to write to a file. @param f path to the file @param overwrite if true, overwrites existing files @return FSDataOutputStream object
2845 Creates a data output stream at the specified path. @param f path to create stream at @param progress progressable object @return FSDataOutputStream object
2846 Opens a data output stream for writing to a file. @param f Path to the file. @param replication Replication factor. @return FSDataOutputStream object.
2847 Opens a data output stream for writing to a file. @param f Path to the file, replication factor, progressable. @return FSDataOutputStream object.
2848 Opens a data output stream at the given path. @param f Path to open. Overwrite & buffer size are params. @return FSDataOutputStream object.
2849 Opens a data output stream for writing to a file. @param f Path to the file, overwrite, buffer size, progress. @return FSDataOutputStream object.
2850 Creates a new FSDataOutputStreamBuilder. @param fileSystem The FileSystem to use. @param p The path for the output stream.
2851 Reads data into a Writable key, handling compressed/buffered modes. @param key The Writable key to populate. @return True if successful, false otherwise.
2852 Reads a key-value pair, validating the key class. @param key The key object. @return The read key object.
2853 Constructs an Invoker with provided protocol, connection, config, etc.
2854 Creates a Client object using the provided configuration. @param conf Configuration object for client setup. @return A Client object.
2855 Overloads m1 with default Writable class. @param conf Configuration object @param factory SocketFactory instance @return Client object
2856 Constructs an Invoker with provided protocol, connection, config, etc.
2857 Checks if a method is supported by the RPC protocol version. @param version RPC version to check @return True if the method is supported, false otherwise.
2858 Constructs a Trash object with a FileSystem and Configuration. @param fs The FileSystem to operate on. @param conf The configuration to use.
2859 Retrieves the network topology using the default factory. @param conf Configuration object for topology retrieval. @return NetworkTopology object representing the topology.
2860 Constructs a SaslRpcClient with user info, protocol, address, and config.
2861 Configures impersonation provider with a proxy user prefix. @param conf Hadoop configuration object @param proxyUserPrefix Prefix for proxy user
2862 Adds a shutdown hook with a given priority. @param shutdownHook Runnable to execute during shutdown. @param priority Hook priority.
2863 Retrieves a character array from configuration for a given name. @param conf Configuration object. @param name Name to retrieve. @return Character array or null if not found.
2864 Retrieves password for alias, falling back to default if unavailable. @param conf Configuration object, alias password alias, defaultPass default password @return Password string.
2865 Retrieves ZK authentication information from configuration. @param conf Configuration object. @param configKey Key for authentication configuration. @return List of ZKAuthInfo objects or empty list on failure.
2866 Constructs a DecayRpcScheduler with given configuration. @param numLevels Priority levels. @param ns Namespace. @param conf Configuration object.
2867 Creates a clone of an object using the provided configuration. @param orig The object to clone. @param conf Configuration object for cloning. @return A clone of the original object.
2868 Delegates to m1 with a UTF-8 wrapped OutputStreamWriter. @param out The output stream to wrap.
2869 Selects a SaslAuth type based on client capabilities. @param authTypes list of supported authentication types @return Selected SaslAuth type, or null if none suitable.
2870 Constructs an FTPFileSystem for interacting with an FTP server. @param theUri The URI representing the FTP server location. @param conf The configuration object.
2871 Constructs a RawLocalFs instance for accessing local file system. @param theUri The URI of the file system. @param conf Hadoop configuration.
2872 Calls super.m1 and then calls m2 with the provided configuration.
2873 Constructs a MultipartUploaderBuilderImpl. @param fileSystem The file system to use. @param p The path to upload.
2874 Initializes PathData with file system, path string, and status. @param fs FileSystem object @param pathString Path as string @param stat FileStatus object @throws IOException if an I/O error occurs
2875 Checks if a path has the specified capability. @param path Path to check. @param capability Capability string.
2876 Processes a path and returns a new Path object. @param path The input path to process. @return A new Path object.
2877 Resolves a path, potentially swapping the scheme. @param path Input path to resolve. @return Resolved path object.
2878 Retrieves FileStatus, potentially following linked files. @param item PathData containing file status and filesystem. @param depth Recursion depth for linked files. @return FileStatus object.
2879 Constructs a Path object based on path and workingDir. Returns a new Path or modifies the existing one.
2880 Moves a file or directory from src to dst. @param src Source path. @param dst Destination path.
2881 Creates an FSDataInputStreamBuilder for a given path. @param fileSystem The FileSystem object. @param path The path to create the stream for.
2882 Creates an FSDataInputStreamBuilder for a given filesystem and path. @param fileSystem The filesystem. @param pathHandle The path handle. @return An FSDataInputStreamBuilder object.
2883 Determines FsPermission based on paths; initializes if needed. @param oldPath The old path. @param newPath The new path. @return FsPermission object.
2884 Creates and returns a Bzip2 compressor using the provided configuration.
2885 Creates a BlockReader for the given name. @param name Block name; throws MetaBlockDoesNotExist if not found.
2886 Retrieves a BlockReader for the specified block index. @param blockIndex Index of the block to retrieve. @throws IndexOutOfBoundsException if blockIndex is out of bounds.
2887 Writes a new data block to the data index. Handles errors and ensures block appender is not active.
2888 Creates a BlockAppender with the given name and compression. @param name Block name. @param compressionName Compression name. @return BlockAppender object.
2889 Creates a BlockAppender with the given name, using default meta. @param name Appender name. @return BlockAppender instance.
2890 Initializes the block appender if it's not already initialized.
2891 Opens a file for writing. @param f Path to the file @return FSDataOutputStream for writing
2892 Finds a valid output path by incrementing an ID. @param initial Initial path to attempt writing to. @throws IOException if a valid path cannot be found.
2893 Initializes output stream for a file. Tries two methods to create. @param targetFile Path to the file to be written to. @throws IOException if file creation fails.
2894 Calls m2 with a Path obtained from fs.m1, overwriting if needed.
2895 Creates a Writer with specified FileSystem, Configuration, and metadata. @param fs FileSystem, conf Configuration, name Path, keyClass, valClass
2896 Processes a file path; returns true on success, false otherwise.
2897 Constructs a FileSystemDataOutputStreamBuilder. @param fileSystem The file system. @param p The path.
2898 Writes a value associated with a key, throws IOException if mismatch. @param key The key to write the value for. @param val The value to write. @return True if more data is available.
2899 Constructs a Trash object using the provided Configuration. @param conf Hadoop configuration object. @throws IOException if an I/O error occurs.
2900 Delegates to m2 with URI's host extracted via m1. @param conf Configuration object. @param uri URI object. @param configKey Key for configuration. @return DomainNameResolver object.
2901 Returns the Groups instance, creating it if it doesn't exist. @param conf Configuration object for initializing Groups.
2902 Initializes and returns the Groups instance using the given config.
2903 Calls m1 with the CONF_HADOOP_PROXYUSER property. @param conf Hadoop configuration object
2904 Adds a file to the set of files to be deleted on exit. @param f The Path object representing the file to add. @return True if successful, false otherwise.
2905 Executes m1 and registers this object with the shutdown hook. @param priority Priority level for shutdown hook registration.
2906 Logs startup info, registers signal loggers (Unix), and sets shutdown hook.
2907 Initializes SSL configuration properties from the SSLFactory. Handles potential IOExceptions if properties are missing.
2908 Initializes the KeyManagers using keystore details from config. @param mode SSLFactory mode @param keystoreType Keystore type @param storesReloadInterval Reload interval in milliseconds
2909 Retrieves ZK authentication information from the configuration. @param conf Configuration object containing ZK authentication details. @return List of ZKAuthInfo objects.
2910 Returns a list of strings derived from user input. @param user The input string. @return A new list containing strings derived from the input.
2911 Initializes the configuration and redirects output stream.
2912 Negotiates authentication method with remote peer via SASL. @param ipcStreams streams for communication @return Authentication method used after negotiation
2913 Constructs a PathData with a file system and path string. @param fs The file system. @param pathString The path string. @throws IOException If an I/O error occurs.
2914 Lists directory contents as PathData objects. Returns an array of PathData, sorted alphabetically.
2915 Throws FileNotFoundException if directory listing is inconsistent. Logs if directory is missing and throws the exception.
2916 Checks path capability; returns true for read-only connector. @param path Path to check. @param capability Capability string.
2917 Checks if a path has the specified capability. @param path The path to check. @param capability The capability to check for.
2918 Delegates path processing to FileSystem's m1 method. @param fs The FileSystem to use. @param path The path to process. @return The processed Path.
2919 Creates a FutureDataInputStreamBuilder for the given path. @param path Path to the data stream; returns a builder.
2920 Creates a FutureDataInputStreamBuilder for the given PathHandle. @param pathHandle Path to create the stream builder for. @return A FutureDataInputStreamBuilder instance.
2921 Loads keystore password and sets file permissions. Uses env var, file, or default password. Throws IOException.
2922 Initializes tfileIndex if not already initialized. Reads and creates TFileIndex object.
2923 Delegates BCF reader method. @param name The name to pass to the reader. @return DataInputStream returned by reader.
2924 Initializes a Reader with input stream, file length, and configuration.
2925 Creates a DataOutputStream for a Meta Block. @param name Block name, compressName compression name. @return DataOutputStream for writing the Meta Block.
2926 Closes the TFile, writing metadata and index to the block appender.
2927 Creates a Meta Block with the given name. @param name Name of the Meta Block. @return DataOutputStream for writing to the Meta Block.
2928 Creates a new KeyRegister DataOutputStream of specified length. @param length Length of the key to be registered. @return A new KeyRegister DataOutputStream.
2929 Copies a file or directory to a destination file system. @param src Source file/directory. @param dstFS Destination file system. @param dst Destination path. @param deleteSource Delete source after copy?
2930 Creates a PathHandle for a multipart upload, handling file operations. @param multipartUploadId Upload handle for multipart upload. @param filePath Path to the file. @param handleMap Map of part handles. @return PathHandle for the created file.
2931 Creates a data output stream for a file. @param fs FileSystem object @param file Path of the file @param permission FsPermission for the file @return FSDataOutputStream object
2932 Creates a Writer with specified filesystem, config, path, and classes. @param fs Filesystem. @param conf Configuration. @param name Path.
2933 Creates a log file, appending or overwriting based on allowAppend.
2934 Delegates to the underlying data structure's m1 method. @param key The key to use. @param val The value to associate with the key. @return Result of the underlying m1 method.
2935 Creates a ProtocolProxy for the given protocol. @param protocol Protocol interface. @return ProtocolProxy object. @throws IOException if an error occurs.
2936 Returns a Groups object, using the default Configuration.
2937 Initializes Kerberos authentication settings based on configuration. @param conf Hadoop configuration object @param overrideNameRules Whether to override name rules
2938 Constructs a new, empty AccessControlList.
2939 Constructs an ACL from a string representation. @param aclString String containing ACL data.
2940 Constructs an ACL with users and groups. @param users Comma-separated list of users. @param groups Comma-separated list of groups.
2941 Calls m1 with a default Configuration object.
2942 Initializes SSL components based on the provided mode. Configures keystore, truststore, and key/trust managers.
2943 Initializes a CuratorFramework client with ZooKeeper configuration. @param authInfos List of AuthInfo objects; may be modified. @param sslEnabled Enables SSL connection to ZooKeeper.
2944 Transforms user groups based on the 'rule' (upper/lower/none). @param user User identifier. Returns list of transformed group names.
2945 Initializes the metrics system with a given prefix. @param prefix Prefix for metrics names. @return MetricsSystem instance.
2946 Creates a PathData object with the given extension. @param extension file extension to append to the base path @return PathData object representing the combined path
2947 Creates a PathData object for a child path, ensuring parent is a directory. @param child The child path to create data for. @return A PathData object representing the child path.
2948 Processes a PathData item, calling m4 with either m3 or m5. @param item The PathData object to process. @throws IOException if an I/O error occurs.
2949 Checks path capabilities, returns true if read-only. Otherwise, delegates to superclass.
2950 Checks path capabilities, returning true for FS_READ_ONLY. @param path Path to check. @param capability Capability string.
2951 Checks path capability, returns false for append/concat, else calls super.
2952 Retrieves FileStatus for a given path, handling exceptions. @param f Path to retrieve FileStatus for. @return FileStatus array or throws exception if errors.
2953 Copies a file or directory from srcFS to dstFS. @param deleteSource Whether to delete source after copy.
2954 Copies a file or directory. Deletes source if specified. @param srcFS FileSystem of source. @param dst Destination file. @return True if copy successful.
2955 Opens a data input stream with specified policy. @param policy Policy string for opening the file. @return FSDataInputStream object.
2956 Opens a data input stream for a file. @param fs Filesystem, file path, buffer size, length. @return FSDataInputStream
2957 Reads data from a file system path, handling potential errors. @param fs Filesystem, path to read, and optional status. @return Data read from the file or throws an exception.
2958 Delegates to m1() and returns tfileIndex.m2(). Throws IOException if tfileIndex.m2() does.
2959 Delegates to m1() and returns tfileIndex.m2().
2960 Finds the block index for a key, considering greater flag. @param key The key to search for. @param greater True if seeking greater than key. @return Location object or end if not found.
2961 Reads a key from a block at the given offset. @param offset Offset to the block; returns null if not found.
2962 Initializes a Reader with an FSDataInputStream, file length, and config. @param fsdis Input stream for file data. @param fileLength Length of the file. @param conf Hadoop configuration. @throws IOException If an I/O error occurs.
2963 Initializes block reader for a specific block index. @param blockIndex Index of the block to read.
2964 Writes key/value data to streams, validating buffer offsets/lengths.
2965 Returns the median key. Returns null if no keys are present.
2966 Processes data based on the provided key. @param key The key used for data processing. @throws IOException if an I/O error occurs.
2967 Finds the position for a key, adjusting seek index as needed. @param key The key to search for. @param before True to find the position before the key. @return Comparison result: <0 if key is before, >0 otherwise.
2968 Reads and writes key-value pairs from multiple readers. Reads until all readers are exhausted or an error occurs.
2969 Creates a ProtocolProxy. Overloads m1 with null arguments. @param protocol Protocol class. @return ProtocolProxy object.
2970 Creates a ProtocolProxy with extracted connection details. @param protocol Protocol class. @param clientVersion Client version. @return ProtocolProxy object.
2971 Delegates m2() call to the result of m1(). @return Path object returned by m1().m2()
2972 Delegates Path processing to m1().m2(path). @param path The Path to process. @return Processed Path.
2973 Executes m2 if m1 fails, synchronizing access to prevent conflicts.
2974 Calls m1 with the provided configuration and true flag. @param conf The Hadoop configuration object.
2975 Executes service, handles exceptions, and creates an ExitException. @param conf Configuration object @param instance Service instance @return ExitUtil.ExitException representing service exit status
2976 Calls m1 with authInfos and false as the second argument. @param authInfos List of authentication information. @throws IOException if an I/O error occurs.
2977 Constructs a LocalFs object using the provided configuration. @param theUri The URI of the local file system. @param conf The configuration object.
2978 Copies data from an InputStream to a PathData target. @param in Input stream containing data to copy. @param target PathData to copy data to.
2979 Copies a file or directory. @param srcFS, dstFS FileSystems. @param src, dst Paths. @param deleteSource, overwrite Flags. @param conf Configuration.
2980 Repairs and opens a data stream based on node statuses. @param mrNodes Array of MRNflyNode objects. @param f Path to the file. @param bufferSize Size of the buffer. @return FSDataInputStream or null if failed.
2981 Copies a file from a FileSystem to a local file. @param srcFS FileSystem object @param src Path to source file @param dst Destination file @param deleteSource Delete source after copy? @param conf Configuration object @return True if copy succeeds, false otherwise.
2982 Opens a sequential file input stream with default policy. @return FSDataInputStream for sequential file access.
2983 Calls m1 with a null resolver. @param fs FileSystem to use. @param path Path to process. @return Result of processing the path.
2984 Applies m1 and m2 to the offset. @param offset The input offset value. @return The processed offset value.
2985 Reads data using reader.m1 with currentLocation. @return Long value returned by reader.m1.
2986 Initializes a Scanner with a Reader and location boundaries. @param reader Reader to read from; @param begin, @param end Location bounds. @throws IOException if an I/O error occurs.
2987 Validates location and adjusts state based on its properties. @param l The Location object to validate.
2988 Processes location data, potentially advancing the reader.
2989 Overloaded method to write a byte array to a destination. @param key Key for encryption/decryption. @param value Data to be written.
2990 Calls m1 with the given key and default flag (false). @param key The key to pass to the overloaded method. @throws IOException if an I/O error occurs.
2991 Filters and processes key-value pairs based on a comparison. @param key The key to compare. @param val The value to process. @param before Flag indicating comparison direction. @return Next key or null if filtered.
2992 Creates a UserGroupInformation object with provided user and groups. @param user User name. @param userGroups Array of user group names. @return UserGroupInformation object.
2993 Creates a UserGroupInformation object, populating group memberships. @param user User identifier. @param realUser Existing UserGroupInformation. @param userGroups Array of user group names. @return UserGroupInformation object.
2994 Retrieves a list of groups for the current user. Returns an empty list if an IO error occurs.
2995 Retrieves groups for the user. Returns empty set on failure.
2996 Obtains UserGroupInformation based on subject and login params. @param subject Subject for authentication, may be null. @param params Login parameters, may be null. @return UserGroupInformation object. @throws IOException if login fails.
2997 Delegates authorization management to serviceAuthorizationManager. @param conf Configuration object. @param provider Policy provider.
2998 Delegates method m2 to the singleton instance of m1. @param user UserGroupInformation object @param remoteAddress Remote address string
2999 Delegates method m2 to the singleton instance of m1. @param user UserGroupInformation object @param remoteAddress Remote address object
3000 Delegates to overloaded method with null argument. @param conf Configuration object. @param processedArgs List of processed arguments.
3001 Calls m1 with an empty list as an argument.
3002 Copies data from src PathData to target, preserving xattrs. @param src Source PathData @param target Target PathData
3003 Moves a file/directory from src to dst. @param srcFS, src, dstFS, dst, deleteSource, conf move details @throws IOException if an I/O error occurs
3004 Opens a data input stream for a path, handling exceptions and repair. @param f the path to open @param bufferSize the buffer size @return FSDataInputStream or throws exception
3005 Creates a new Scanner for parsing input from this stream. @return A Scanner instance.
3006 Creates a Scanner for records between beginRecNum and endRecNum. @param beginRecNum Start record number (>= 0). @param endRecNum End record number (<= total records).
3007 Creates a Scanner with specified character offsets. @param reader Reader object to read from. @param offBegin Start offset (inclusive). @param offEnd End offset (exclusive).
3008 Calls method m1 with the beginLocation value.
3009 Checks if the value for the given key is zero. @param key The key to check. @return True if the value is zero, false otherwise.
3010 Calls m1 with the key, val, and false for the 'isBinary' flag.
3011 Returns true if authentication fails using SIMPLE method.
3012 Logs out the user, initiating Kerberos logout sequence. Throws KerberosAuthException if logout fails.
3013 Converts a collection of strings to a string array.
3014 Checks if user has access based on ACLs, groups, or real UGI. @param ugi UserGroupInformation to check. @return True if access is allowed, false otherwise.
3015 Obtains UserGroupInformation from a Subject. @param subject The Subject to extract information from. @throws IOException if an error occurs during the process.
3016 Calls m1 with default configuration. @param user UserGroupInformation object @param remoteAddress Remote address string @throws AuthorizationException if authorization fails
3017 Authorizes a connection, proxies user if applicable, and records metrics.
3018 Copies or skips a PathData based on its status. @param src Source PathData. @param dst Destination PathData.
3019 Copies a file or directory. @param delSrc Delete source after copy. @param src Source path. @param dst Destination path.
3020 Copies a file or directory. @param delSrc Whether to delete src after copy. @param src Source path. @param dst Destination path.
3021 Creates a Scanner for a portion of the input stream. @param offset Start offset. @param length Length of the stream to scan. @return A Scanner object.
3022 Constructs a Scanner with custom block keys. @param reader Reader to read from. @param beginKey Block begin key. @param endKey Block end key.
3023 Calls m1 with a ByteArray initialized from the byte array. @param key byte array key @param keyOffset offset in the byte array @param keyLen length of the key @throws IOException if an I/O error occurs
3024 Calls m1 with a ByteArray created from the provided key data.
3025 Calls m1 with a ByteArray derived from the provided key data.
3026 Processes a key-value pair. Returns val if key matches, else null.
3027 Creates a ProtocolProxy. Uses SaslRpcServer if UserGroupInformation.m1() is true. @param protocol Protocol class. @param clientVersion Client version.
3028 Creates a ProtocolProxy with configured parameters. @param protocol Protocol class. @return ProtocolProxy instance.
3029 Creates a ProtocolProxy with configured parameters. @param protocol Protocol class. @return ProtocolProxy instance.
3030 Opens a RandomAccessFile and verifies file ownership. @param f File to open, mode access mode, owner/group expected values. @throws IOException if an I/O error occurs.
3031 Opens a FSDataInputStream, checks owner/group permissions. @param file The file to open. @param expectedOwner Expected owner string. @param expectedGroup Expected group string. @return FSDataInputStream or null if permissions fail.
3032 Opens a FileInputStream and verifies file ownership. @param f file to open @param expectedOwner expected owner @param expectedGroup expected group @return FileInputStream
3033 Logs user group information, including credentials and authentication details.
3034 Retrieves or creates a UserGroupInformation object. Returns the UserGroupInformation or creates a new one.
3035 Processes a Subject, potentially throwing an IOException. @param subject The Subject to process.
3036 Processes RPC buffer to extract connection context and user. @param buffer RPC buffer containing connection details. @throws RpcServerException if connection context is already read.
3037 Creates a Scanner with specified begin and end keys. @param beginKey Start key for the Scanner. @param endKey End key for the Scanner.
3038 Calls overloaded method with key and full length. @param key byte array key @throws IOException if I/O error occurs
3039 Calls overloaded method with key and full length. @param key The byte array key. @throws IOException if an I/O error occurs.
3040 Calls m1 with the entire key array. @param key The byte array key to use. @throws IOException if an I/O error occurs.
3041 Processes a key; returns it or null based on m1's result.
3042 Calls super.m2 if m1(key) returns true; otherwise, returns null.
3043 Creates a ProtocolProxy with specified parameters. @param protocol Protocol class. @param clientVersion Client version. @return ProtocolProxy object.
3044 Creates a ProtocolProxy with default proxy settings. @param protocol Protocol class. @return ProtocolProxy object.
3045 Establishes an IPC connection, handling authentication and retries. @param fallbackToSimpleAuth Whether to fallback to simple auth.
3046 Opens a RandomAccessFile, using m2 if UserGroupInformation.m1() is true. @param f file to open @param mode access mode (e.g., "r", "rw") @param expectedOwner owner string @param expectedGroup group string @return RandomAccessFile object
3047 Opens a file input stream, checking permissions if needed. @param file The file to open. @param expectedOwner Expected owner of the file. @param expectedGroup Expected group of the file.
3048 Opens a FileInputStream, checking user/group permissions if needed. @param f file to open, expectedOwner, expectedGroup for checks @throws IOException if an I/O error occurs
3049 Checks if the remote user is an admin based on ACL. @param servletContext Servlet context holding admin ACL. @param remoteUser Remote user's name. @return True if the user is an admin, false otherwise.
3050 Authorizes a user for a protocol, checking ACLs and host access. @param user UserGroupInformation object @param protocol Protocol to authorize
3051 Gets UserGroupInformation; returns default if subject is null/unverified.
3052 Delegates to m1().m2().
3053 Delegates to m1().m2(). Returns the result of that call.
3054 Executes action with elevated privileges if conditions are met. @param action The PrivilegedAction to execute. @return The result of the action.
3055 Executes a privileged action and returns the result. @param action The privileged action to execute. @return The result of the action.
3056 Executes a task under user's privilege, handling exceptions. @param millisToCede Timeout for the privileged action.
3057 Executes m1 within a privileged action using UserGroupInformation.
3058 Delegates to another m1 method with ByteArray objects. @param beginKey Byte array for the beginning key. @param endKey Byte array for the ending key. @return Scanner object.
3059 Delegates to m1, returns a Scanner. @param beginKey Start key for scanning. @param endKey End key for scanning.
3060 Creates a ProtocolProxy, delegates to m2 with a default timeout. @param protocol Protocol class @param clientVersion Client version @param addr Remote address @param ticket UserGroupInformation @param conf Configuration @param factory SocketFactory
3061 Delegates to m1 and calls its m2() method. @param protocol Protocol class. @return Result of m1().m2()
3062 Checks if the user is authorized to access a page. @param servletContext Servlet context. @param request HTTP request. @param response HTTP response. @return True if authorized, false otherwise.
3063 Authorizes a user for a protocol, using the service manager. @param user UserGroupInformation object @param protocolName Protocol name to authorize @param addr Address of the remote host
3064 Gets the user's home directory path. Uses UGI username or system property if UGI fails.
3065 Checks file access permissions based on user and action. @param stat FileStatus object. @param mode FsAction to be performed.
3066 Constructs a ViewFileSystem with current user and timestamp.
3067 Initializes a ViewFs object with the given URI and configuration. @param theUri The URI for the ViewFs. @param conf Hadoop configuration object.
3068 Initializes the InodeTree with configuration and view name. @param config Hadoop configuration object @param viewName View name for the view filesystem @param theUri URI representing the view filesystem
3069 Creates a Path object representing the user's home directory. Uses username from UGI or system property if UGI fails.
3070 Connects to a URL with a token, potentially using a delegation token. @param url URL to connect to @param token Authentication token @param doAs User to execute as @return HttpURLConnection object
3071 Gets UserGroupInformation based on ticket cache path/user. @param ticketCachePath Cache path, or null. @param user User name, or null. @return UserGroupInformation object.
3072 Authenticates user using provided principal and keytab path. @param user User principal. @param path Keytab file path. @return UserGroupInformation object.
3073 Logs user group information details. @param log Logger instance for logging. @param ugi UserGroupInformation object.
3074 Executes a privileged action and returns the result. @param action The action to execute. @return The result of the action.
3075 Returns the proxy token if UGI auth is PROXY, otherwise null.
3076 Creates a ProtocolProxy, retrying on connection errors. @param protocol Protocol class. @return ProtocolProxy object. @throws IOException if connection fails after timeout.
3077 Delegates scanner creation to m1. @param beginKey Start key for scanning. @param endKey End key for scanning. @return Scanner object.
3078 Creates a ProtocolProxy with default UserGroupInformation. @param protocol Protocol class. @param clientVersion Client version. @param addr Socket address. @param conf Configuration object. @param factory Socket factory. @return ProtocolProxy object.
3079 Calls the m2 method of the result of m1. @param protocol Protocol class. @return Result of the chained method call.
3080 Checks access based on admin configuration. @param servletContext Servlet context. @param request HTTP request. @param response HTTP response. @return True if access is allowed.
3081 Creates a masked path using a prefix and internal methods. @param path The input path (unused in this method). @return A new Path object with a masked path.
3082 Retrieves trash roots, either for current user or all users. @param allUsers true to get all user trash roots, false for current. @return Collection of FileStatus objects representing trash roots.
3083 Executes a file system action on a given path. @param path The path to operate on. @param mode The file system action to perform.
3084 Sets file access permissions. @param path Path to the file. @param mode File access mode.
3085 Initializes the ViewFileSystem with a URI and configuration. @param theUri The URI for the file system. @param conf Configuration object. @throws IOException if an I/O error occurs.
3086 Creates and returns a FileSystem object for the given URI. @param uri The URI of the file system. @param conf Hadoop configuration. @return FileSystem object.
3087 Delegates m1() call to the default file system. @return Path object returned by defaultFS.m1()
3088 Delegates to self or super based on token type. @param url URL to connect to. @param token Authentication token. @return HttpURLConnection object.
3089 Gets a FileSystem object for the given URI, using provided config and user. @param uri The URI of the file system. @param conf Hadoop configuration. @param user User name for authentication. @return FileSystem object.
3090 Gets a FileSystem object for the given URI, using provided config and user. @param uri The URI of the file system. @param conf Hadoop configuration. @param user User name for authentication. @return FileSystem object.
3091 Authenticates a user, returning a UserGroupInformation object. @param ticketCache Kerberos ticket cache path. @param user User principal name. @return UserGroupInformation object.
3092 Authenticates using a keytab or as the current user. Relogins UGI if a keytab is provided.
3093 Authenticates a user using a keytab file. @param user User's username. @param path Keytab file path.
3094 Calls m1 with the provided UserGroupInformation and a default logger. @param ugi UserGroupInformation object @throws IOException if an I/O error occurs
3095 Creates a ProtocolProxy. Delegates to internal method m2. @param protocol Protocol class. @param clientVersion Client version. @param addr Socket address. @param conf Configuration. @param connTimeout Connection timeout.
3096 Calls m2() on the result of m1(), passing protocol, version, addr, etc.
3097 Delegates to m1 and returns the result of m1's m2() call. @param protocol Protocol class. @param clientVersion Client version. @param addr Socket address. @param conf Configuration object. @param factory Socket factory. @return Result of m1().m2()
3098 Creates a ProtocolProxy with provided protocol, version, address, config. @param protocol Protocol class @param clientVersion Client version @param addr Socket address @param conf Configuration object @return ProtocolProxy instance
3099 Retrieves user mappings protocol using RPC. @return GetUserMappingsProtocol object.
3100 Creates a ZKFCProtocol with specified configuration and timeout. @param conf Configuration object. @param timeoutMs Timeout in milliseconds. @return ZKFCProtocol object.
3101 Determines the trash root path for a given path. @param path The path to find the trash root for. @return The trash root path.
3102 Retrieves trash roots, considering all users or not. @param allUsers true to include all users' trash, false otherwise. @return Collection of FileStatus objects representing trash roots.
3103 Constructs a ViewFileSystem with a default URI, using the given config. @param conf Configuration object for file system parameters.
3104 Adds a URI to the cache using the provided configuration and filesystem.
3105 Retrieves a FileSystem based on the provided URI and config. @param uri The URI for the filesystem. @param config Configuration object. @return A FileSystem object.
3106 Creates a new FileContext using the provided file system and config.
3107 Delegates to either self or super based on token type. @param url URL to connect to. @param token Authentication token. @return HttpURLConnection object.
3108 Performs security diagnostics and login checks. Logs system properties, environment variables, and config.
3109 Parses arguments, extracts principal/keytab, and returns modified args.
3110 Retrieves and displays UserGroupInformation, optionally from keytab. @param args Command-line arguments; keytab principal and file.
3111 Logs in the user using the provided keytab and principal. @param conf Hadoop configuration. @param keytabFileKey Keytab file key. @param userNameKey User name key. @param hostname Hostname to use for principal.
3112 Constructs a Server instance with specified configurations. @param bindAddress Server bind address. @param port Server port.
3113 Constructs the negotiate message for token authentication. Returns the negotiate message or negotiates token auth.
3114 Creates a ProtocolProxy with a default timeout. @param protocol Protocol class. @param clientVersion Client version. @param addr Socket address. @param conf Configuration object.
3115 Executes a protocol function and returns the result. @param protocol Protocol class to execute. @return Result of the protocol function.
3116 Processes a resource by creating a Resource object and passing it to m1. @param in Input stream for the resource. @param name Resource name.
3117 Delegates to m1 and calls its m2 method. @param protocol Class to instantiate. @param clientVersion Client version. @param addr Socket address. @param conf Configuration object. @return Result of m1.m2()
3118 Prints group memberships for given usernames, or default user. @param args Array of usernames to check; uses default if empty. @return 0
3119 Attempts failover to a node. @param toNode The target HAServiceTarget node. @return 0 on success, -1 on failure.
3120 Retrieves and initializes a ZKFCProtocol from a remote HAServiceTarget. @param remote Remote HAServiceTarget. @param timeout Timeout in milliseconds. @return ZKFCProtocol object.
3121 Processes JMX requests, serializes results to JSON, and returns.
3122 Retrieves a FileSystem instance from cache or creates a new one. @param uri The URI of the filesystem. @param conf Hadoop configuration. @return A FileSystem object.
3123 Retrieves the LocalFileSystem instance for the configuration. @param conf Hadoop configuration object @return LocalFileSystem instance
3124 Gets a FileSystem for the given URI and configuration. @param uri URI of the file system @param conf Hadoop configuration @return FileSystem instance
3125 Creates a FileContext using the provided file system. @param defaultFS The default file system to use. @return A FileContext object.
3126 Creates a FileContext using provided URI and config. @param defaultFsUri URI of the default file system. @param aConf Hadoop configuration. @return FileContext object.
3127 Processes command-line arguments and sets up operations. @param args Command-line arguments passed to the function. @return 0 on success, 1 on failure.
3128 Calls m2 with a generated principal name based on the configuration. @param conf Configuration object. @param keytabFileKey Keytab file key. @param userNameKey User name key.
3129 Processes a Sasl message and returns a Sasl response. @param saslMessage Incoming Sasl message to process. @return Sasl response or null based on the state. @throws SaslException, IOException, AccessControlException, InterruptedException
3130 Calls m1 and then m2, returning the result of m2. @param protocol Protocol class. @param clientVersion Client version. @param addr Socket address. @param conf Configuration object.
3131 Creates a Resource with the given name and passes it to m1. @param name The name of the resource to create.
3132 Processes a URL by creating a Resource and passing it to m1.
3133 Processes a file using m1. @param file The Path object representing the file to process.
3134 Processes an input stream by wrapping it in a Resource and calling m1.
3135 Attempts to become the active node, handling failover logic. Throws ServiceFailedException if failover fails.
3136 Retrieves the HAServiceProtocol based on configuration. @return HAServiceProtocol object. @throws IOException if an I/O error occurs.
3137 Calls m1 with a default retry count. @param conf Configuration object. @param timeoutMs Timeout in milliseconds. @return HAServiceProtocol object.
3138 Creates a HAServiceProtocol with given config and timeout. @param conf Configuration object @param timeoutMs Timeout in milliseconds @return HAServiceProtocol instance
3139 Initializes the HarFileSystem, fetches metadata, and validates paths.
3140 Checks if a path is trash-enabled, potentially updating trash interval. @param fs Filesystem. @param p Path to check. @param conf Configuration. @throws IOException if trash configuration retrieval fails.
3141 Constructs a PathData object from a path string and configuration. @param pathString Path string to create PathData from. @param conf Hadoop configuration. @throws IOException if an I/O error occurs.
3142 Creates a FileSystem object for the given name and configuration. @param name File system name. @param conf Hadoop configuration. @return FileSystem object.
3143 Retrieves the LocalFileSystem instance for the given configuration. @param conf Hadoop configuration object @return LocalFileSystem instance
3144 Constructs a ChRootedFileSystem with a given URI and configuration. @param uri The URI of the filesystem. @param conf Hadoop configuration. @throws IOException if an I/O error occurs.
3145 Gets a FileSystem instance for the given URI and configuration. @param uri The URI of the file system. @param conf The configuration settings. @return A FileSystem object.
3146 Retrieves a FileSystem based on URI scheme matching. @param uri The URI to resolve. @param conf Configuration object. @return A FileSystem instance.
3147 Gets a FileSystem instance using the provided Configuration. @param conf Hadoop configuration object @return A FileSystem instance
3148 Retrieves a FileSystem, using supplied or connecting to base path. @return FileSystem object, or null if supplied filesystem is null.
3149 Retrieves FileStatus for paths within a directory. @param f the path to the directory @return An array of FileStatus objects.
3150 Gets a FileContext for the default filesystem URI. @param defaultFsUri URI of the default filesystem @return FileContext object
3151 Gets a FileContext for the default filesystem. @param aConf Hadoop configuration object @throws UnsupportedFileSystemException if scheme is missing
3152 Creates a FileContext for the local file system. @param aConf Configuration object for file system operations. @throws UnsupportedFileSystemException if local FS is unsupported.
3153 Constructs a Server with specified configuration and protocol details.
3154 Constructs a Server with specified configuration and protocol. @param protocolClass Protocol class, or null to derive from impl.
3155 Processes incoming SASL message, authenticates client, and sets context. @param saslMessage Incoming SASL message to process.
3156 Loads the latest mount table configuration from the specified path. @param mountTableConfigPath Path to the mount table configuration. @param conf Hadoop configuration object.
3157 Checks if nodes are active, returns true if any fail activation. @param targetNodeToActivate Node to activate @param forceActive Forces activation despite errors.
3158 Attempts failover to target service, throwing exception on failure. @param from Source service, @param target Target service
3159 Attempts to gracefully make a service standby. @param svc The HAServiceTarget to make standby. @return True if successful, false otherwise.
3160 Resolves a path, following symlinks until resolved or error. @param filesys Filesystem object. @param path Path to resolve. @return Resolved object of type T.
3161 Creates a PathData object using a local URI and configuration. @param localPath The local URI path. @param conf The Hadoop configuration.
3162 Copies files from source paths to the destination path. @param delSrc Deletes source files after successful copy. @param overwrite Overwrites existing files at destination. @param srcs Source file paths. @param dst Destination path.
3163 Copies a file or directory. @param delSrc Delete source file/dir after copy. @param overwrite Overwrite existing files. @param src Source path. @param dst Destination path.
3164 Copies a file or directory. @param delSrc Delete source file after copy. @param src Source path. @param dst Destination path. @param useRawLocalFileSystem Use raw local filesystem.
3165 Creates a Context object with local directories from configuration. @param conf Hadoop configuration object @return Context object with configured local directories
3166 Finds a valid local path by iterating through directories. @param dirsProp Property containing directory paths. @param path The path to create. @return A Path object if found, otherwise throws IOException.
3167 Resolves a FileSystem for the given path using the configuration. @param path Path to resolve. @param conf Configuration object. @return Resolved FileSystem.
3168 Resolves mount path info for a given path and configuration. @param path Path to resolve. @param conf Configuration object. @return MountPathInfo object.
3169 Extracts path data based on a glob pattern. @param pattern glob pattern to match @param conf Hadoop configuration @return Array of PathData objects or null if no match
3170 Prints file metadata to the output stream. Reads and displays properties of a file.
3171 Reads credentials from a token storage file. @param filename Path to the credentials file. @param conf Hadoop configuration. @return Credentials object.
3172 Constructs a classpath URL array from libjars specified in config. @param conf Hadoop configuration object @return URL array of libjars or null if none are valid.
3173 Attempts to create a file system and handles potential errors. Returns true on success, throws exception if ignoreError is false.
3174 Returns a FileContext for the local file system. @throws UnsupportedFileSystemException if local FS is unsupported
3175 Creates a FileContext using the default configuration. @return FileContext object. @throws UnsupportedFileSystemException if FS is not supported.
3176 Constructs a Server instance with specified configuration parameters.
3177 Constructs a Server with specified parameters. Delegates to another constructor.
3178 Constructs an SSLFactory with the given mode and configuration.
3179 Delegates service authorization management to the provider. @param conf Configuration object. @param provider PolicyProvider instance.
3180 Performs failover from {@code fromSvc} to {@code toSvc}. Fences {@code fromSvc} if possible, makes {@code toSvc} active.
3181 Creates a PathData object, handling URI syntax exceptions. @param args List of arguments; used for path determination. @throws IOException if URI syntax is invalid and not on Windows.
3182 Copies files from multiple source paths to a destination path. @param srcs array of source paths @param dst destination path
3183 Delegates file system operation to the underlying file system. @param delSrc Whether to delete source files. @param overwrite Whether to overwrite existing files. @param srcs Source file paths. @param dst Destination path.
3184 Calls m1 with default copy-attributes. @param delSrc Whether to delete the source after copy. @param src Source path. @param dst Destination path.
3185 Delegates file operation to the underlying filesystem. @param delSrc Delete source file after copying. @param overwrite Overwrite destination if it exists. @param src Source path. @param dst Destination path.
3186 Calls m1 with the additional parameter set to false. @param delSrc Whether to delete the source after copying. @param src Source path. @param dst Destination path.
3187 Finds a local directory for a file, considering size and write check. @param pathStr file path, @param size file size, @param conf Configuration @param checkWrite whether to check write access @return Path object representing the chosen directory
3188 Finds a file path within configured local directories. @param pathStr The file path to search for. @param conf Hadoop configuration. @return Path object if found, otherwise throws exception.
3189 Creates an iterable of paths from a string path and configuration. @param pathStr Path string. @param conf Hadoop configuration. @return Iterable of Path objects.
3190 Initializes the NflyFSystem with provided URIs, config, and replication factors. @param uris URIs for the file system destinations @param conf Hadoop configuration @param minReplication Minimum replication factor @param nflyFlags Nfly key flags @param fsGetter FileSystem getter @throws IOException if minimum replication is not met
3191 Processes input paths, returns -1 if an error occurs. Iterates through 'args', processes each path using m3/m4.
3192 Retrieves a list of PathData objects for the given argument. @param arg argument to retrieve PathData for @return List of PathData objects
3193 Parses path arguments and sets the destination PathData. @param args LinkedList of arguments; determines path resolution. @throws IOException if path resolution fails.
3194 Constructs a Reader with a qualified file path. @param fs Filesystem. @param file Path to the file. @param conf Configuration object. @throws IOException if an I/O error occurs.
3195 Constructs a Reader with configured stream, start, and length.
3196 Creates a SequenceFile reader with specified options. @param dataFile Path to the SequenceFile. @param conf Hadoop configuration. @param options Reader options. @return SequenceFile.Reader instance.
3197 Reads a key from the input stream. Returns true if successful, false otherwise.
3198 Creates a Writer with provided Configuration and options. @param conf Hadoop configuration object. @param opts Writer options. @throws IOException if an I/O error occurs.
3199 Dumps TFile(s) to the console, using specified configuration. @param args Command-line arguments: TFile paths.
3200 Saves credentials to a file in specified format. @param f file to save to, format is the serialization format
3201 Flushes metrics data, creates new log file if needed. Updates current log file based on flush schedule.
3202 Lists files matching a glob pattern, locally or remotely. @param path glob path to search. @param useLocal if true, searches locally. @return List of Path objects found.
3203 Constructs a Server with default settings. @param protocolClass Protocol class. @param protocolImpl Protocol implementation.
3204 Constructs a Server with specified parameters. @param protocolImpl Protocol implementation @param conf Configuration object
3205 Processes out-of-band RPC headers based on call ID. @param header RPC request header @param buffer Data buffer for processing
3206 Opens a URL connection with authentication and SSL if HTTPS. @param url The URL to open. @return URLConnection object.
3207 Calls m1 with copy-only mode false, moving src to dst. @param src Source path @param dst Destination path
3208 Copies a file from src to dst using m1. @param src Source file path. @param dst Destination file path.
3209 Delegates m1 operation to the underlying file system. @param delSrc If true, deletes the source path after copy. @param src Source path. @param dst Destination path.
3210 Calls m1 with copy-only set to false. @param src Source path. @param dst Destination path.
3211 Copies a file from src to dst. @param src Source file path. @param dst Destination file path.
3212 Delegates method execution to the underlying filesystem. @param delSrc Whether to delete the source after copying. @param src Source path. @param dst Destination path.
3213 Delegates path creation to AllocatorPerContext. @param pathStr Path string. @param size Size. @param conf Configuration. @param checkWrite Whether to check write access.
3214 Creates a file with the given prefix in the specified directory. @param pathStr File path string. @param size File size. @param conf Configuration object. @return The created File object.
3215 Delegates path resolution to AllocatorPerContext. @param pathStr Path string to resolve. @param conf Configuration object. @return Resolved Path object.
3216 Retrieves a list of paths based on the provided path string and config. @param pathStr Path string to search. @param conf Configuration object. @return Iterable of Path objects.
3217 Constructs NflyFSystem with URI, config, minReplication, and flags. Delegates to the primary constructor.
3218 Creates an NflyFSystem with specified URIs, config, minRepl, and flags. @param uris URIs for the filesystem @param conf Hadoop configuration @return NflyFSystem object
3219 Expands string arguments into PathData objects. @param args List of string arguments to expand. @return LinkedList of PathData objects.
3220 Fetches a token, potentially aliased, using DtFetcher implementations. @param tokenFile File containing credentials.
3221 Processes token file, aliases tokens for a service, and saves credentials.
3222 Merges tokens from multiple files into a single Credentials object. @param tokenFiles List of token files to merge. @param fileFormat File format string. @param conf Configuration object.
3223 Processes tokens, cancels if requested, and saves new credentials. @param cancel Cancel token processing.
3224 Renews tokens from a file, checks aliases, and saves updated credentials.
3225 Adds a token to credentials and saves it to a file. @param tokenFile File to store token. @param fileFormat File format. @param alias Token alias. @param base64 Base64 encoded token. @param conf Hadoop configuration.
3226 Retrieves a list of paths from the given path string. @param path The path string to process. @return A list of Path objects.
3227 Constructor for Server (deprecated). Delegates to another constructor.
3228 Processes an RPC request from a ByteBuffer, handling errors and retries.
3229 Reads and processes data from a URL, extracting lines containing MARKER. @param urlString The URL to connect to and read from.
3230 Copies a file from a temporary location to the output file system. @param fsOutputFile Output file path. @param tmpLocalFile Temporary file path.
3231 Copies a Path to a destination, handling CRC copies as needed. @param src Source Path @param dst Destination Path @param copyCrc Whether to copy CRC files
3232 Creates a Path object. @param pathStr Path string. @param size File size. @param conf Hadoop configuration. @return Path object.
3233 Delegates file creation to AllocatorPerContext. @param pathStr File path. @param size File size. @param conf Configuration. @return File object.
3234 Processes a list of strings, calls m1, then m2. @param args List of strings to be processed. @throws IOException if an I/O error occurs.
3235 Creates a Writer instance with specified compression options. @param conf Configuration object. @param opts Writer options. @return Writer instance.
3236 Creates a classpath JAR with resolved entries, handling wildcards. @param inputClassPath classpath string to resolve @return Array of classpath JAR path and unexpanded classpath
3237 Masks file paths, expands wildcards if enabled, and returns a string. @param files Comma-separated file paths. @param expandWildcard Whether to expand wildcard characters. @return Masked file paths string.
3238 Reads and validates RPC headers, allocates data buffer. Returns count, or -1 on error.
3239 Processes input data using SASL unwrap and reads data. @param inBuf byte array containing data to be processed
3240 Logs the class name via HTTP request to the specified URL.
3241 Sends a log level request to the specified URL.
3242 Creates a KeyProvider for a given URI and configuration. @param providerUri URI of the key provider. @param conf Hadoop configuration. @return KeyProvider or null if the scheme doesn't match.
3243 Delegates the call to the underlying file system object. @param fsOutputFile Output file path. @param tmpLocalFile Temporary file path.
3244 Creates a file with a given prefix in the allocated directory. @param pathStr Path string, size, and configuration for file creation. @return The created file object.
3245 Delegates to overloaded method with default size. @param pathStr Path string. @param conf Configuration object. @return Path object.
3246 Processes command-line arguments, handles errors, and returns exit code.
3247 Constructs a Reader with a FileSystem, file path, and Configuration.
3248 Constructs a Reader with a FileSystem, directory name, and comparator.
3249 Constructs a Reader with a directory path. @param fs FileSystem object @param dirName Directory name @param conf Configuration object @throws IOException if an I/O error occurs
3250 Constructs a Reader with a directory path, config, and comparator. (Deprecated: Use the other constructor instead.)
3251 Creates a Writer from input and output paths, using Reader/Writer configs. @param inputFile Input file path. @param outputFile Output file path. @param prog Progressable object for tracking progress. @return Writer object.
3252 Processes a SequenceFile, creating an index if not dryrun. @param fs Filesystem to operate on. @param dir Directory containing the SequenceFile.
3253 Delegates to the primary m5 method with provided arguments.
3254 Delegates to the primary m6 method with provided arguments. @param fs FileSystem, configuration, path, key/val classes, compression @return Writer object
3255 Delegates to internal m7 method with provided parameters. @param fs FileSystem, conf Configuration, name Path, keyClass, valClass, compressionType, progress @return Writer object
3256 Creates a Writer instance with specified parameters. @param fs FileSystem, conf Configuration, name Path, etc. @return Writer instance
3257 Delegates to internal m8 method with provided parameters. @param fs FileSystem, conf Configuration, name Path, etc.
3258 Delegates to a more complete m11 method with pre-configured parameters.
3259 Creates a writer for the given file, using helper methods. @param fs FileSystem, conf Configuration, name Path, classes, codec, progress @return Writer object
3260 Delegates to the primary m6 method with adjusted parameters. @param conf Configuration object.
3261 Delegates to the internal m5 method with prepared arguments. @param conf Configuration object. @return Writer object.
3262 Processes files string. Overloads with default flag value. @param files String of files to process. @throws IOException if an I/O error occurs.
3263 Executes operation (GETLEVEL or SETLEVEL) via m1/m2. Throws exception if operation is invalid.
3264 Creates a DataBlock on disk. @param index block index, limit block size, statistics upload stats. @return DataBlock object.
3265 Creates a temporary file path for caching. @param conf Hadoop configuration @param localDirAllocator Local directory allocator @return Path object representing the temporary file
3266 Executes a command, traces its execution, and returns its exit code.
3267 Constructs a Reader with a FileSystem, directory name, and configuration.
3268 Merges sorted segments into larger ones until a threshold is met.
3269 Constructs a SequenceFile writer with given configuration. @param conf Hadoop configuration, fs FileSystem, dirName directory
3270 Constructs a Writer with given config, filesystem, file, and value class.
3271 Constructs a Writer with given configuration, file system, and classes. @param file Output file path. @param valClass Writable value class.
3272 Constructs a Writer with a directory path. @param conf Configuration object. @param fs FileSystem object. @param dirName Directory name. @param keyClass Key class. @param valClass Value class.
3273 Constructs a Writer with specified configuration, FS, dir, classes, compression, and progress. Delegates to another constructor.
3274 Constructs a Writer with specified configuration and parameters. @param conf Configuration object @param fs FileSystem object @param dirName Output directory name @param keyClass Class of the key @param valClass Class of the value @param compress Compression type @param codec Compression codec @param progress Progressable object @throws IOException if an I/O error occurs
3275 Constructs a Writer with a directory path. @param conf Configuration object @param fs FileSystem object @param dirName Directory name @param keyClass Key class @param valClass Value class @param compress Compression type
3276 Constructs a Writer with a directory path. @param conf Configuration object @param fs FileSystem object @param dirName Directory name @param comparator Comparator for writable values @param valClass Class of writable values
3277 Constructs a Writer with specified configuration and compression. @param conf Configuration object @param fs FileSystem object @param dirName Output directory name @param comparator Comparator for writable values @param compress Compression type
3278 Constructs a Writer with specified parameters. @param conf Configuration object @param fs FileSystem object @param dirName Output directory name @param comparator Comparator for writable values @param valClass Class of the writable values @param compress Compression type @param progress Progress reporter
3279 Constructs a Writer with specified configuration and parameters. @param conf Configuration object @param fs FileSystem object @param dirName Output directory name
3280 Creates a Writer. Delegates to m2, passing CreateResult. @param fc FileContext @return Writer object
3281 Processes command-line arguments and performs actions based on flags.
3282 Creates a ClassLoader, either ApplicationClassLoader or URLClassLoader. @param file The file to be loaded. @param workDir The working directory. @return A ClassLoader instance.
3283 Processes command-line arguments and configures the Hadoop configuration. @param line CommandLine object containing command-line options.
3284 Delegates path creation to m1. @param conf Hadoop configuration. @param localDirAllocator Local directory allocator. @return Path object.
3285 Checks if enough cache space is available for a file. @param fileSize Size of the file to be cached. @param conf Configuration object. @param localDirAllocator Local directory allocator. @return True if cache space is available, false otherwise.
3286 Creates and returns a RawKeyValueIterator for merging segments. @param segments List of segment descriptors to merge. @param tmpDir Temporary directory for merging. @return RawKeyValueIterator for the merged data.
3287 Creates a MergeQueue with segment descriptors from input paths. @param inNames Input paths to merge. @param deleteInputs Whether to keep input paths. @return MergeQueue object for merging.
3288 Merges input paths into a single file. @param inNames Input paths to merge. @param tempDir Temporary directory for merging. @param deleteInputs Whether to delete input paths after merge. @return Iterator for the merged key-value pairs.
3289 Creates and returns a RawKeyValueIterator for merging. @param inName Input path @param indexIn Index path @param tmpDir Temporary directory @return RawKeyValueIterator
3290 Creates a Writer with a key class. @param conf Configuration object. @param fs FileSystem object. @param dirName Directory name. @param keyClass Key class. @param compress Compression type.
3291 Constructs a Writer with a FileSystem, directory name, and key class.
3292 Processes map files, optionally deletes inputs, and writes output.
3293 Creates a Writer with specified parameters, delegating to m9. @param fs FileSystem, conf Configuration, name Path, etc. @return Writer object
3294 Parses command-line options. @param opts Options object to parse. @param args Command-line arguments. @return True if parsing was successful, false otherwise.
3295 Writes data to a block, handling locking, validation, and prefetching.
3296 Creates a RawKeyValueIterator. Uses factor if inNames is small. @param inNames Input paths. @param deleteInputs Delete inputs after processing. @param tmpDir Temporary directory. @return RawKeyValueIterator object.
3297 Merges data from a RawKeyValueIterator to a Writer. @param tmpDir Temporary directory for processing. @throws IOException If an I/O error occurs.
3298 Executes a JAR file using the RunJar class. @param args Command-line arguments passed to RunJar.
3299 Parses generic options using provided configuration, options, and args.
3300 Creates a RawKeyValueIterator based on input files and segments. @param inFiles Input file paths. @param tempDir Temporary directory. @param deleteInput Whether to delete input files. @return RawKeyValueIterator or null if no segments.
3301 Processes input files, writes results to output file. @param inFiles Input file paths. @param outFile Output file path.
3302 Merges input files into a single output file. @param inFiles array of input file paths @param outFile path to output file @param deleteInput whether to delete input files after merge
3303 Constructs a GenericOptionsParser with a default Configuration. @param opts Options object to parse. @param args Command-line arguments. @throws IOException If an I/O error occurs.
3304 Constructs a GenericOptionsParser with default configuration and options. @param args Command-line arguments to parse. @throws IOException If an I/O error occurs.
3305 Constructs a GenericOptionsParser with a default Options object. @param conf Configuration object. @param args Command-line arguments. @throws IOException If an I/O error occurs.
3306 Calls m1 with a single input file and default options. @param inFile Input file path. @param outFile Output file path.
3307 Creates a MinimalGenericOptionsParser with config and arguments. @param conf Configuration object @param argArray Command-line arguments @return MinimalGenericOptionsParser instance
3308 Executes a tool with configuration and arguments. @param conf Configuration object. @param tool Tool to execute. @param args Command-line arguments. @return Tool's exit code.
3309 Parses command line arguments, extracts configuration files/classes. @param conf Configuration object @param args Command line arguments @return Remaining arguments after parsing
3310 Executes a KDiag tool runner with the given configuration and arguments. @param conf Hadoop configuration. @param argv Command-line arguments. @return Exit code from the tool runner.
3311 Executes a Hadoop ToolRunner with provided configuration and args. @param args Command-line arguments for the Hadoop tool. @throws Exception if an error occurs during execution.
3312 Executes a KeyShell tool with given arguments and prints the result.
3313 Delegates to a private method with tool's result and arguments.
3314 Processes arguments, extracts a subset, and applies further logic. @param conf Configuration object. @param args Input list of strings.
3315 Processes command-line arguments and handles exceptions. @param argv Command-line arguments passed to the program.
3316 Executes a Hadoop FsShell command with provided arguments. @param argv command-line arguments for the FsShell @throws Exception if an error occurs during execution
3317 Parses CLI arguments and executes the CLI application. @param args Command-line arguments passed to the application.
3318 Runs the FindClass tool with provided arguments. Handles exceptions and prints error messages.
3319 Processes arguments, configures, and executes a task, handling exceptions.
3320 Calls m2 with the result of Arrays.m1 applied to args.
3321 Delegates to m2 with an array of strings. @param args Variable number of string arguments.
