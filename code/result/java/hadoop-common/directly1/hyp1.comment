1 Creates a file range with an offset and length. @param offset starting position in the file @param length number of bytes in the range @return FileRange object representing the specified range
2 Creates a FileRange object. @param offset starting position in file @param length number of bytes @param reference associated object @return FileRange instance
3 Validates and returns a file range. @param range FileRange object to validate @return Validated FileRange object @throws EOFException if position is negative
4 Validates that an object is not null. @param obj the object to check @param argName name of the argument for error message
5 Validates that the given value is a positive integer. @param value the number to validate @param argName name of the argument for error message
6 Validates that the given value is non-negative. @param value the value to check @param argName name of the argument for error message
7 Validates presence of an argument. @param isPresent flag indicating if argument is present @param argName name of the argument to validate
8 Logs validation failure message. @param isValid flag indicating validity @param argName name of the argument being validated
9 Validates argument and logs error if invalid. @param isValid flag indicating argument validity @param argName name of the argument to validate @param validValues string of valid values for the argument
10 Asserts equality of two long values. @param value1 first value to compare @param value1Name name of the first value @param value2 second value to compare @param value2Name name of the second value
11 Checks if one value is an integer multiple of another. @param value1 the dividend @param value1Name name of the dividend @param value2 the divisor @param value2Name name of the divisor
12 Ensures the first value is greater than the second. @param value1 the first numeric value @param value1Name name of the first value for error message @param value2 the second numeric value @param value2Name name of the second value for error message
13 Validates that one value is greater than or equal to another. @param value1 the first value to compare @param value1Name name of the first value for error message @param value2 the second value to compare @param value2Name name of the second value for error message
14 Validates that one long value is less than or equal to another. @param value1 first value to compare @param value1Name name of the first value @param value2 second value to compare @param value2Name name of the second value
15 Validates if a value is within a specified inclusive range. @param value the value to validate @param valueName name of the value for error message @param minValueInclusive minimum allowable value (inclusive) @param maxValueInclusive maximum allowable value (inclusive)
16 Validates if a double value is within a specified inclusive range. @param value the value to validate @param valueName name of the value for error message @param minValueInclusive minimum value (inclusive) @param maxValueInclusive maximum value (inclusive)
17 Masks paths based on size and base path constraints. @param paths collection of file paths to be masked @param pageSize maximum allowed number of paths @param basePath root directory for path validation
18 Initializes block upload data with a file. @param file the file to be uploaded
19 Validates and casts snapshot to IOStatisticsSnapshot. @param snapshot object to validate and cast @return IOStatisticsSnapshot instance
20 Creates a case-insensitive map of enum constants by prefix. @param prefix common prefix for keys @param enumClass class of the enum type @return Map with lower-case string keys and corresponding enum values
21 Applies mask to file ranges. @param input list of file ranges to process @return array of masked file ranges
22 Checks if a child path is within a parent directory. @param parent the parent directory path @param child the child path to check @return true if child is within parent, false otherwise
23 Compares two paths for a specific mask condition. @param qualPath1 first path to compare @param qualPath2 second path to compare @return true if paths match the mask condition, false otherwise
24 Masks a file by adding it to the delete on exit list. @param f file path to be masked @return true if masking is successful, false otherwise
25 Deletes files marked for deletion on exit. Synchronizes access to the delete list and handles IOExceptions gracefully.
26 Checks if file name ends with ".crc" and does not contain ".". @param file Path object representing the file @return true if conditions are met, false otherwise
27 Checks if file name contains both '.' and '.crc'. @param file Path to the file @return true if conditions are met, false otherwise
28 Adjusts block locations based on start, length, and file offset. @param locations array of BlockLocation objects to adjust @param start starting position for adjustment @param len length of the segment to adjust @param fileOffsetInHar file offset within HAR @return adjusted BlockLocation array
29 Calls m2 on result of m1(), passing o's m1() as argument. @param o FileStatus object @return Result of nested method calls
30 Extracts paths from file statuses. @param stats array of FileStatus objects @return array of Path objects or null if input is null
31 Resolves a file path to its status. @param f the input file path @return FileStatus object representing the resolved file @throws IOException if an I/O error occurs
32 Calls m1 on the source path and returns its m2 result. @param src source file path @return short value from m2 of m1's result @throws IOException if an I/O error occurs
33 Deprecated method to get file size. @param f Path to the file @return Size of the file in bytes @throws IOException if an I/O error occurs
34 Calls another method m1 without parameters. @param path unused parameter @return result of calling m1()
35 Updates statistics with provided data. Synchronizes access to shared resources.
36 Masks data in a buffer at a specified position. @param position starting position in the buffer @param buffer byte array containing data @param offset offset within the buffer to start masking @param length number of bytes to mask @throws EOFException if position is negative @throws IndexOutOfBoundsException if length exceeds available buffer space
37 Validates upload ID. @param uploadId unique identifier for the upload @throws IllegalArgumentException if uploadId is null or empty
38 Validates and processes part handles. @param partHandles map of part indices to PartHandle objects
39 Masks a capability for the given file path. @param path file path to mask capability for @param capability capability string to be masked @return masked capability string
40 Initializes an IrqHandler with a name and handler. @param name unique identifier for the handler @param handler function to handle interrupts
41 Partitions a list into sublists of a specified size. @param originalList the list to be partitioned @param pageSize the size of each sublist @return a list of sublists containing the partitioned elements
42 Initializes JSON serialization with specified class type and configuration. @param classType the target class for serialization @param failOnUnknownProperties if true, throws exception on unknown properties @param pretty if true, formats output with indentation
43 Constructs storage statistics from I/O statistics. @param name unique identifier for the storage @param scheme storage scheme used @param ioStatistics I/O statistics to analyze
44 Deprecated function to map statistics by key. @return Map of statistics keyed by some identifier
45 Creates a file output stream with specified parameters. @param f path to the file @param permission file permissions @param flags create flags @param bufferSize buffer size in bytes @param replication replication factor @param blockSize block size in bytes @param progress progress monitor @return FSDataOutputStream for writing @throws IOException if an I/O error occurs
46 Creates or overwrites a file with specified permissions and options. @param f file path @param permission file permissions @param overwrite flag to overwrite existing file @param bufferSize buffer size for I/O operations @param replication number of replications @param blockSize block size for file storage @param progress progress tracker @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
47 Constructs an exception indicating access denial to a specified path. @param path the path that access is denied to
48 Constructs a PathPermissionException with a specified path. @param path the path where the operation is not permitted
49 Constructs a PathNotFoundException with the specified path. @param path the missing file or directory path
50 Constructs an exception indicating that a file already exists. @param path the path of the existing file
51 Constructs an IOException with a specified path. @param path file path associated with the exception
52 Constructs a ClosedIOException with the specified file path and error message. @param path the file path where the exception occurred @param message the detail message of the exception
53 Abstract method to be implemented by subclasses. @return an instance of type B
54 Returns masked value using function m1. @deprecated Use alternative method instead.
55 Masks and converts integer to short. @return masked value as short
56 Masks each string in the input array. @param strings array of strings to be masked @return array of masked strings
57 Deprecated method that calls another function. @deprecated Use alternative method instead. @return Result of calling m1()
58 Checks if a file exists and is accessible. @param f file path to check @return true if file exists, false otherwise
59 Checks mask status of a PathData item. @param item PathData object to check @return true if mask is set, false otherwise @throws IOException if an I/O error occurs
60 Determines ACL entries based on conditions. @param item PathData object to evaluate @return List of AclEntry objects
61 Checks if file exists and calls m2 on its result. @param f file path to check @return true if file exists and m2 returns true, otherwise false
62 Determines mask for file permissions. @param file FileStatus object representing the file @return Short value of the determined mask
63 Checks if both m1 and m2 are false. @return true if both methods return false, otherwise false
64 Returns the symlink path. @throws IOException if the path is not a symbolic link
65 Returns the file length, fetching it if not already known. @return Length of the file in bytes @throws IOException if an I/O error occurs
66 Masks file using specified path. @param f file path @return masked value as long @deprecated Use alternative method instead
67 Retrieves block storage policy for a given path. @param src source file path @return BlockStoragePolicySpi object or null if not found
68 Sets an extended attribute with specified flags. @param path file path @param name attribute name @param value attribute value
69 Constructs an IOException with a specified file path and cause. @param path the file path associated with the error @param cause the underlying cause of the exception
70 Moves input stream to specified position. @param position new position for the stream @throws IOException if an I/O error occurs
71 Reads and validates next segment length. @return length of the next segment or -1 if end reached @throws IOException if file is corrupt
72 Returns masked value from input. @throws IOException if an I/O error occurs
73 Registers an expression class with the factory. @param expressionClass the class to be registered
74 Registers commands using the provided registrar class. @param registrarClass class responsible for command registration
75 Reads bytes from a specified position into a byte array. @param pos starting position in the stream @param b destination byte array @param offset offset within the buffer @param length number of bytes to read @return number of bytes read or -1 if no more bytes are available @throws IOException if an I/O error occurs
76 Reads data from a stream. @param pos starting position in the stream @param b byte array to store the read data @param offset offset within the byte array to start storing data @param length number of bytes to read @throws IOException if an I/O error occurs or insufficient data available
77 Expands a file pattern with offsets into multiple alternatives. @param filePatternWithOffset pattern and offset information @return list of expanded patterns or null if invalid @throws IOException if illegal pattern is encountered
78 Retrieves directory entries with a mask. @param f file path @param token security token @return DirectoryEntries object containing listed files @throws FileNotFoundException if file not found @throws IOException on I/O errors
79 Masks byte array value using specified encoding. @param value byte array to be masked @param encoding type of encoding (HEX, BASE64, or default) @return masked string representation @throws IOException if UTF-8 conversion fails
80 Filters files in a directory based on given criteria. @param results list to store filtered file statuses @param f path to the directory being processed @param filter criteria for filtering files @throws FileNotFoundException if file not found @throws IOException if I/O error occurs
81 Initializes a new MetricsTag with given info and value. @param info MetricsInfo object containing tag details @param value string value of the tag
82 Initializes an AbstractMetric with given MetricsInfo. @param info MetricsInfo object containing metric details
83 Retrieves delegation token from specified URL. @param url the target URL for token retrieval @param token initial token object to hold the result @param renewer user allowed to renew the token @param doAsUser user on behalf of whom the operation is performed @return updated token with delegation token or null if failed @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
84 Authenticates and retrieves a delegation token. @param url target URL for authentication @param token authentication token @param doAsUser user to authenticate as @return delegation token ID @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
85 Authenticates using Kerberos delegation token. @param url target URL for authentication @param token security token containing delegation information @param doAsUser user to act on behalf of @throws IOException if an I/O error occurs during authentication
86 Initializes a ValueQueue with specified parameters. @param numValues max number of values in the queue @param lowWatermark percentage threshold for refilling @param expiry time after which entries expire @param numFillerThreads number of threads to refill queues @param policy synchronization generation policy @param refiller strategy for filling the queue
87 Validates and returns the object. @param obj the object to validate @return the validated object
88 Retrieves or creates storage statistics. @param name unique identifier for the storage @param provider factory to create new statistics if needed @return StorageStatistics object @throws RuntimeException if provider returns null or incorrect stats
89 Calls m1 on GlobalStorageStatistics singleton.
90 Marks the resource as closed and performs cleanup. @throws IOException if an I/O error occurs during cleanup
91 Masks a file by copying its contents to another file. @param src source file to be masked @param dst destination file for the masked content @throws IOException if an I/O error occurs during the process
92 Closes a Closeable resource safely. @param stream the resource to close
93 Closes multiple Closeable resources. @param streams array of Closeable objects to close
94 Masks a file by writing a single byte and deleting it. @param file the file to be masked @throws IOException if an I/O error occurs
95 Calls methods to perform operations. @throws IOException if an I/O error occurs
96 Masks function and updates statistics. Uses key for naming, appends suffix on failure.
97 Updates and returns the old count. @param newCount new count value to set @return previous count value
98 Retrieves server address by index. @param index connector index @return InetSocketAddress or null if invalid
99 Initializes a GcTimeMonitor with specified parameters. @param observationWindowMs time window for monitoring GC activity (in ms) @param sleepIntervalMs interval between checks (in ms) @param maxGcTimePercentage maximum allowed GC time percentage @param alertHandler handler for alerts on excessive GC times
100 Masks servlet name in request path. @param request HTTP request object @param servletName name of the servlet @return masked servlet name from request path
101 Checks equality based on m1() comparison. @param o object to compare @return true if equal, false otherwise
102 Calls m2 on the result of m1(). @return Result of calling m2 on the object returned by m1()
103 Updates metrics with new sample count and sum. @param sampleCount number of samples @param newSum total sum of samples
104 Merges statistics from another MeanStatistic. @param other the MeanStatistic to merge with @return this MeanStatistic after merging
105 Appends formatted key-value pairs from map to StringBuilder. @param sb StringBuilder to append to @param type type identifier for output @param map source of key-value pairs @param separator string to separate entries
106 Converts map entry to string using custom methods. @param entry map entry with key as String @return result of applying m3 to entry's key and value
107 Tracks function duration. @param key identifier for the function @param count number of times to execute @return DurationTracker object
108 Creates a LongStatistic from map entry. @param e map entry with string key and long value @return LongStatistic object initialized with entry's values
109 Initializes statistics map with passthrough function.
110 Updates a counter metric with a calculated value. @param key identifier for the metric @param eval function to compute the new metric value
111 Records a gauge value using a provided evaluation function. @param key identifier for the gauge metric @param eval function to compute the gauge value
112 Updates mask with evaluated value. @param key unique identifier for the mask @param eval function to compute the new value
113 Applies a function to update the maximum value associated with a key. @param key unique identifier for the value @param eval function to compute the new maximum value
114 Applies a function to calculate statistics for a given key. @param key identifier for the data set @param eval function to compute MeanStatistic
115 Wraps given statistics in a source wrapper. @param statistics original IO statistics to be wrapped @return IOStatisticsSource object wrapping the input statistics
116 Returns an empty IOStatisticsStore instance. @return EmptyIOStatisticsStore object
117 Returns an empty I/O statistics instance. @return IOStatistics object representing no I/O operations
118 Retrieves an AtomicLong from counterMap by key. @param key unique identifier for the counter @return AtomicLong associated with the key or null if not found
119 Retrieves an AtomicLong from the maximumMap using the given key. @param key unique identifier for the AtomicLong @return AtomicLong associated with the key, or default if not found
120 Retrieves an AtomicLong from minimumMap by key. @param key unique identifier for the AtomicLong @return AtomicLong associated with the key or null if not found
121 Retrieves an AtomicLong from gaugeMap by key. @param key unique identifier for the AtomicLong @return AtomicLong associated with the key or null if not found
122 Retrieves MeanStatistic by key from map. @param key unique identifier for statistic @return MeanStatistic object or null if not found
123 Returns the duration from the first element. @return Duration object representing the duration of the first element
124 Sets the wrapped statistics. @param wrapped IOStatistics object to wrap
125 Returns the built instance of DynamicIOStatistics. @return DynamicIOStatistics object or throws an exception if not built
126 Ensures FlagSet is mutable. Throws an exception if FlagSet is immutable.
127 Reads data from a file or input stream into a byte array. @return byte array containing the read data @throws IOException if an I/O error occurs
128 Binds a signal handler. @throws IllegalArgumentException if handler is already bound or JVM has -Xrs set
129 Checks if the status is closed. @return true if status is closed, false otherwise
130 Copies elements from source map to destination concurrent hashmap using a transformation function. @param source the original map with string keys and serializable values @param copyFn function to transform or copy each value @return ConcurrentHashMap containing transformed entries
131 Executes callable with tracking and error handling. @param factory DurationTrackerFactory for tracking execution time @param statistic identifier for the tracked operation @param input CallableRaisingIOE to be executed @return result of the callable execution @throws IOException if an I/O error occurs during execution
132 Combines two DurationTrackerFactories. @param first the primary factory @param second the secondary factory @return a new PairedDurationTrackerFactory combining both
133 Retrieves mask value from RPC client backoff. @return long representing the mask value
134 Retrieves mask value from RPC slow calls. @return long value representing the mask
135 Returns result of RPC requeue calls. @return Long value from m1 method
136 Clears IO statistics context by ID. @param id unique identifier of the context to clear
137 Initializes an instance and sets up necessary maps.
138 Checks integration status. @return true if integrated, false otherwise
139 Initializes a Gzip decompressor. Sets initial state and resets CRC.
140 Masks data using encryption. @throws IOException if an I/O error occurs
141 Adjusts buffer size to be a multiple of codec's block size. @param codec cryptographic codec instance @param bufferSize initial buffer size @return adjusted buffer size
142 Masks a file by copying or linking it. @param src source file to mask @param dst destination file for masking @throws IOException if an I/O error occurs
143 Constructs an MD5MD5CRC32GzipFileChecksum with specified parameters. @param bytesPerCRC number of bytes per CRC block @param crcPerBlock number of CRC blocks @param md5 MD5 hash instance
144 Constructs an MD5-MD5-CRC32 file checksum. @param param1 first parameter (purpose unknown) @param param2 second parameter (purpose unknown) @param param3 third parameter (purpose unknown)
145 Constructs an MD5MD5CRC32CastagnoliFileChecksum. @param bytesPerCRC number of bytes per CRC block @param crcPerBlock number of CRC blocks @param md5 MD5Hash instance
146 Converts a glob pattern to a regex pattern. @param glob the input glob pattern string
147 Retrieves file status iterator for a given path. @param f file path to query @return iterator of FileStatus objects @throws IOException if an I/O error occurs
148 Recursively gets file path. @param file the File object @param makeCanonicalPath flag to use canonical path @return file path as String @throws IOException if I/O error occurs
149 Converts file mode to POSIX permissions. @param mode numeric file mode @return set of POSIX file permissions
150 Checks for null entries in command list and throws IOException if found. Calls m2() after validation.
151 Checks if the total length of shell commands exceeds Windows limit. @param commands array of command strings to be executed @throws IOException if combined command length exceeds maximum allowed
152 Generates a PowerShell script to kill a process on a remote host. @param processName name of the process to terminate @param host target host where the process runs @return path to the generated PowerShell script or null if failed
153 Calls m1 on sum object. @return result of sum.m1()
154 Calculates adjusted size based on data size and constants. @param dataSize original size of data @return adjusted size as an integer
155 Applies mask to checksum. @param sum Checksum object to process @param checksumSize size of the checksum array @return masked checksum as byte array
156 Updates total bytes read. @param newBytes number of bytes to add
157 Adds bytes written to the current count. @param newBytes number of bytes to add
158 Increments read operations count. @param count number of operations to add
159 Increments large read operations count. @param count number of operations to increment
160 Increments write operation count by specified amount. @param count number of operations to increment
161 Updates bytesReadErasureCoded with new byte count. @param newBytes number of bytes to add
162 Updates byte count based on distance. @param distance network distance of the data source @param newBytes number of bytes to add
163 Adds specified duration to remote read time. @param durationMS time in milliseconds to add
164 Aggregates statistics using a visitor pattern. @param visitor object to process statistics data @return result of aggregation
165 Constructs a ContentSummary from a Builder. @param builder the Builder containing summary data
166 Constructs a ChecksumOpt with default settings. Initializes with DEFAULT checksum type and -1 as size limit.
167 Creates a NULL checksum option. @return ChecksumOpt object configured for NULL checksum type
168 Validates create flags. @param flag set of creation flags @throws HadoopIllegalArgumentException if no options specified or both append and overwrite are enabled
169 Validates URI scheme against a supported scheme. @param uri the URI to validate @param supportedScheme the expected scheme @throws HadoopIllegalArgumentException if URI is missing or has an unsupported scheme
170 Constructs an exception for invalid path names. @param path the invalid path name
171 Constructs an InvalidPathException with a specified path and reason. @param path the invalid path @param reason optional additional information about the error
172 Returns the first non-null element from the array. @param inputs array of elements to check @return first non-null element or throws exception if all are null
173 Returns the first non-null element from the array. @param inputs array of elements to check @throws HadoopIllegalArgumentException if all elements are null
174 Validates byte buffers for non-null and correct length. @param buffers array of byte arrays to validate
175 Validates an array of ByteBuffers. @param buffers array of ByteBuffer objects to validate
176 Validates input buffers for decoding. @param buffers array of byte arrays to validate
177 Validates an array of ByteBuffers. @param buffers array of ByteBuffers to validate @throws HadoopIllegalArgumentException if any buffer is null or invalid
178 Closes the given proxy if it's Closeable. @param proxy object to be closed
179 Determines checksum options based on default and user settings. @param defaultOpt default checksum option @param userOpt user-defined checksum option @param userBytesPerChecksum user-specified bytes per checksum @return configured ChecksumOpt instance
180 Retrieves default port from FileSystem, falling back to delegate port. @param theFsImpl FileSystem implementation instance @return default port or DELEGATE_TO_FS_DEFAULT_PORT if not set
181 Modifies URI by setting query if path is empty. @param uri original URI to be modified @return modified URI with updated query
182 Checks file existence and sets replication factor. @param src file path to check @param replication desired replication factor @return true if file exists, false otherwise @throws IOException on I/O errors
183 Disconnects the FTP client and logs any logout failure. @param client FTPClient instance to be disconnected
184 Calls method m1 on the out object. @throws IOException if an I/O error occurs
185 Deprecated default constructor for ContentSummary.
186 Constructs a ContentSummary object. @param length total content length @param fileCount number of files @param directoryCount number of directories @param quota storage quota @param spaceConsumed current space consumed @param spaceQuota space quota limit
187 Converts remaining time to specified unit. @param unit target time unit @return time in the specified unit until renewal
188 Updates renewal time with a masked delay. @param delay the original delay value
189 Updates the last activity timestamp.
190 Pauses execution for a specified duration. @param millis duration to pause in milliseconds
191 Returns the current time in milliseconds. @return Current time in milliseconds
192 Waits for all thread pools to terminate within a specified time. @param milliseconds maximum wait time in milliseconds @return true if all thread pools terminated, false otherwise
193 Validates checksums for data against provided sums. @param sumsBytes ByteBuffer containing checksum values @param sumsOffset offset in sumsBytes @param data ByteBuffer containing the actual data @param dataOffset offset in data @param bytesPerSum number of bytes per checksum chunk @param file path to the data file @return original data ByteBuffer if validation passes @throws CompletionException with ChecksumException if validation fails
194 Opens an input stream for reading from a file. @param f file path @return FSDataInputStream for the file @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnresolvedLinkException if link cannot be resolved @throws IOException for other I/O errors
195 Masks file size using specified path. @param file file path @param fileSize original file size @return masked file size
196 Returns a status with maximum values. @param p file system path (unused) @return FsStatus object with max capacity and no free space
197 Registers Chmod, Chown, and Chgrp commands with the factory. @param factory CommandFactory instance to register commands with
198 Registers Find command with CommandFactory. @param factory instance of CommandFactory to register command with
199 Registers Count command with factory. @param factory CommandFactory instance to register command
200 Deprecated constructor for CommandFormat. @param name command name (unused) @param min minimum number of arguments @param max maximum number of arguments @param possibleOpt possible options (varargs)
201 Executes a Callable and returns a CompletableFuture. @param callable task to be executed @return CompletableFuture containing the result of the callable
202 Validates keys with optional additional error text. @param knownKeys collection of known keys @param extraErrorText additional error message for validation @throws IllegalArgumentException if validation fails
203 Masks names based on capability check. @return List of filtered names with capabilities
204 Constructs a masked URI for auditing purposes. @return Masked URI as a String or empty string if failed
205 Initializes a WeakReferenceMap with a value factory and an optional reference lost callback. @param factory function to create values for keys @param referenceLost consumer called when a key's reference is lost, may be null
206 Masks output stream with specified capability. @param out OutputStream to be masked @param capability masking capability as string @return true if masking successful, false otherwise
207 Checks if input stream has specified capability. @param in input stream to check @param capability capability to verify @return true if capability is present, false otherwise
208 Executes a task with a timeout using Hadoop executors. @param logger Logger instance for logging @param timeout Timeout value @param unit TimeUnit for the timeout
209 Calls m1 with true flag. @return result of m1(true)
210 Calls m1 with false flag. @return result of m1(false)
211 Calculates a masked value based on size and item count. @return The calculated masked integer value.
212 Initializes a cache with block management and prefetching statistics. @param prefetchingStatistics object to track prefetching stats @param maxBlocksCount maximum number of blocks to cache, must be > 0 @param trackerFactory factory for creating duration trackers, can be null
213 Constructs a SemaphoredDelegatingExecutor. @param executorDelegatee the underlying ExecutorService @param permitCount number of permits for concurrency control @param fair true if semaphore should use fair ordering policy @param trackerFactory factory for creating duration trackers, may be null
214 Masks an entry by locking and processing it. @param entry the Entry object to be masked
215 Marks the operation as done and validates checksum. @throws IllegalStateException if checksum has changed
216 Sets buffer size and returns builder. @param bufSize desired buffer size @return FutureDataInputStreamBuilder instance
217 Returns a FutureDataInputStreamBuilder instance. @return FutureDataInputStreamBuilder object
218 Applies two transformations to input. @return transformed value
219 Applies two transformations to an input value. @return transformed value after applying m1 and m2
220 Updates value associated with ID. @param newVal new value to set @return updated or existing value
221 Checks and updates file range based on given parameters. @param otherOffset starting offset of the other range @param otherEnd ending offset of the other range @param other FileRange object to compare with @param minSeek minimum seek distance required @param maxSize maximum size allowed for update @return true if updated successfully, false otherwise
222 Creates and returns a bulk delete operation. @param path file system path to perform deletion on @return BulkDelete instance for the specified path @throws IllegalArgumentException if path is invalid @throws IOException if an I/O error occurs
223 Configures expression factory with AND operators. @param factory ExpressionFactory instance to configure @throws IOException if an I/O error occurs during configuration
224 Registers print and print0 expressions with the factory. @param factory ExpressionFactory instance to register expressions with
225 Masks expressions using specified factories. @param factory ExpressionFactory instance to use @throws IOException if an I/O error occurs during masking
226 Constructs a Name object with case sensitivity option. @param caseSensitive true if name comparison is case-sensitive, false otherwise
227 Determines compression codec for a file. @param file path to the file @return CompressionCodec object or null if not found
228 Masks a template string based on SSL mode. @param mode SSL configuration mode @param template input string to be masked @return masked string
229 Masks the name by replacing each segment with a dot and its masked form. @return Masked name as a string
230 Masks two results by logical AND operation. @param other another Result object to mask with @return a new Result with masked values
231 Returns a Result based on negation of m1 and value of m2. @return Result object with boolean values from m1 and m2
232 Configures and returns a FindOptions object. @return FindOptions with specified input/output settings
233 Checks if an expression exists by name. @param expressionName the name of the expression to check @return true if the expression exists, false otherwise
234 Applies mask operation to expressions. @param exprs deque of expressions to process @param count number of expressions to mask
235 Processes elements from deque. @param args deque containing strings to process @param count number of elements to process
236 Constructs a URI from a given path string. @param pathString the input path string to be processed @return a URI object constructed from the input path @throws IOException if an I/O error occurs during processing
237 Sets order comparator based on conditions.
238 Checks if m1() returns a non-null value. @return true if m1() is not null, false otherwise
239 Masks function name or command if applicable. @return masked name or original if not applicable
240 Masks file attributes based on preserve flag. @param preserve true to mask timestamps, ownership, and permission; false otherwise
241 Initializes a new MetricsRecordBuilderImpl. @param parent the parent MetricsCollector @param info MetricsInfo for the record @param rf record filter @param mf metric filter @param acceptable flag indicating if the record is acceptable
242 Initializes a new ChunkedArrayList with specified capacities. @param initialChunkCapacity the initial capacity of each chunk @param maxChunkSize the maximum size of any single chunk
243 Finds index of default scope entry in ACL. @param aclBuilder list of access control entries @return index of default scope or PIVOT_NOT_FOUND if not found
244 Calls overloaded method with null as default value. @param path file system path @return processed path @throws IOException if an I/O error occurs
245 Adds an option if not already present. @param option unique configuration identifier @throws DuplicatedOptionException if option is already added
246 Initializes a TableBuilder with headers and adds them as the first row. @param headers variable number of header objects
247 Checks if mask function is active. @return true if mask is inactive (m1() == 0), false otherwise
248 Constructs a Shell with a specified interval. @param interval time interval in milliseconds
249 Initializes a Token with specified parameters. @param identifier unique token identifier @param password associated password @param kind type of token @param service service associated with the token
250 Initializes a new Token with empty identifier and password.
251 Initializes a new Globber instance. @param fc FileContext for file operations @param pathPattern Path pattern to match files @param filter Filter to apply to matched paths @param resolveSymlinks Whether to resolve symbolic links
252 Constructs a detailed operation message. @return String representation of the operation details
253 Handles retries and exceptions for server connection setup. @param currRetries current retry count @param maxRetries maximum allowed retries @param ex exception encountered during connection @param rand random number generator for backoff @param ugi user group information for privileged action execution @throws IOException if connection cannot be established @throws InterruptedException if thread is interrupted
254 Checks if FileSystem supports VIEWFS scheme. @param fileSystem target FileSystem instance @return true if supported, false otherwise
255 Masks a file path with specified quotas. @param src source file path @param namespaceQuota maximum number of files allowed @param storagespaceQuota maximum storage space allowed in bytes @throws IOException if an I/O error occurs
256 Masks a file with specified storage type and quota. @param src source file path @param type storage type to apply @param quota storage quota limit @throws IOException if an I/O error occurs
257 Initializes multipart uploader builder. @param basePath base directory path @return MultipartUploaderBuilder instance or null
258 Returns an iterator over file statuses in the specified path. @param f directory path to search @return iterator of LocatedFileStatus objects @throws FileNotFoundException if the path does not exist @throws IOException for other I/O errors
259 Retrieves file statuses from a path. @param f directory path to search @return iterator of file statuses matching the default filter @throws IOException if an I/O error occurs
260 Computes checksum for a file up to a specified size. @param f file path @return FileChecksum object @throws IOException if an I/O error occurs
261 Sets an extended attribute on a file. @param path file path @param name attribute name @param value attribute value @throws IOException if I/O error occurs
262 Opens a file for reading. @param path file path to open @param parameters file opening parameters @return CompletableFuture with FSDataInputStream or throws IOException
263 Opens a file for input. @param path file path to open @param parameters file opening parameters @return CompletableFuture of FSDataInputStream or throws IOException
264 Opens a file for input asynchronously. @param path the file path to open @param parameters file opening parameters @return CompletableFuture containing FSDataInputStream or throws IOException
265 Asynchronously opens a file for reading. @param pathHandle handle to the file path @param parameters file opening parameters @return CompletableFuture with FSDataInputStream or exception
266 Retrieves block storage policies. @return collection of block storage policy implementations @throws IOException if an I/O error occurs
267 Maps mount points to FileSystems. @param mountPoints list of mount points @return map from mount source to FileSystem
268 Resolves a path and initializes the target file system. @param resultKind kind of resolution result @param resolvedPathStr resolved path string @param targetOfResolvedPathStr target of resolved path string @param remainingPath remaining path after resolution @return ResolveResult object or null if initialization fails
269 Returns a new ChildFsGetter with m1 as its parent. @return ChildFsGetter instance
270 Constructs an INodeLink object. @param pathToNode path to the node @param aUgi user group information @param targetMergeFs target file system for merging @param aTargetDirLinkList list of target directory links
271 Initializes an INodeLink with a path, user info, and file system creation method. @param pathToNode node path @param aUgi user group information @param createFileSystemMethod function to create file system @param aTargetDirLink target directory link @throws URISyntaxException if URI is invalid
272 Replaces regex groups in destination path. @param parsedDestPath original destination path @param srcMatcher source matcher with regex groups @param regexGroupNameOrIndexStr group name or index to replace @param groupRepresentationStrSetInDest set of variable names representing the group @return updated destination path after replacements
273 Decrypts data from input buffer to output buffer. @param decryptor decryption utility @param inBuffer source ByteBuffer containing encrypted data @param outBuffer destination ByteBuffer for decrypted data @param padding number of padding bytes to handle @throws IOException if I/O error occurs during decryption
274 Validates that context is not zero. Throws an exception if context is invalid.
275 Checks if the specified znode exists in ZooKeeper. @return true if znode exists, false otherwise
276 Calls m1 with default configuration prefix. @return result of m1 with Constants.CONFIG_VIEWFS_PREFIX_DEFAULT_MOUNT_TABLE
277 Parses a serialized string to create a RegexMountPointResolvedDstPathReplaceInterceptor. @param serializedString the input string in serialized form @return an interceptor object or null if parsing fails
278 Returns the readable byte channel from the socket. @throws IllegalStateException if the socket does not have a channel
279 Applies mask operations on file size. @param file Path to the file @param fileSize original file size in bytes @return masked file size as a long value
280 Masks file system based on OS. @return masked filesystem path or null if not applicable
281 Masks directory path for mounting. @throws IOException if file operations fail @return masked mount path or throws exception
282 Calculates percentage of remaining capacity. @return integer percentage of available capacity
283 Initializes input checker with specified parameters. @param file path to the file to check @param numOfRetries number of retry attempts @param verifyChecksum flag to enable checksum verification @param sum checksum object for validation @param chunkSize size of data chunks @param checksumSize size of checksums
284 Checks if input stream is compatible with ByteBufferReadable. @param stream the InputStream to check @return true if stream is ByteBufferReadable, false otherwise
285 Masks function with thread ID. @param PARAM_THREAD1 parameter for masking
286 Masks tool by command if conditions met. @param tool the tool object to be masked
287 Masks and processes a string key with an integer value. @param key non-null string key to be processed @param value integer value associated with the key @return result of processing by method m1
288 Deprecated function to mask a string with a float value. @param key unique identifier key @param value float value to be masked @return result of masking operation
289 Applies mask to value using provided key. @param key unique identifier for masking logic @param value original numeric value to be masked @return masked value of type B
290 Deprecated. Converts and maps a string key to a long value using another function. @param key unique identifier string @param value numeric value to be converted to long @return B result of the mapping function
291 Applies mask operation using specified key and value. @param key unique identifier string @param value integer value to be masked @return result of the mask operation
292 Deprecated. Converts float to long and calls m1. @param key unique identifier key @param value float value to be converted @return result of m1 call
293 Deprecated function to mask a value with a key. @param key unique identifier string @param value long value to be masked @return result of masking operation
294 Deprecated method to mask a string with a double value. @param key unique identifier @param value numeric value to be masked @return result of masking operation
295 Masks and formats a row from the dataset. @param idx index of the row to process @return formatted string array of the masked row
296 Moves file from temporary local path to final output path. @param fsOutputFile destination path in the filesystem @param tmpLocalFile source path of the temporary local file @return Path object representing the moved file @throws IOException if an I/O error occurs during the move operation
297 Calculates effective permission for an ACL entry. @param entry ACL entry to process @param permArg optional file system permission argument @return calculated FsAction based on ACL rules
298 Constructs a PermissionStatus object. @param user username associated with the permission @param group group name associated with the permission @param permission file system permissions
299 Parses an ACL string and creates an AclEntry. @param aclStr the ACL specification string @param includePermission whether to include permission in parsing @return AclEntry object or throws exception for invalid input
300 Constructs a formatted string representation. @return formatted string based on object properties
301 Splits input string by delimiter and masks the result. @param str input string to split @param delim delimiter for splitting @return array of masked strings or null if no elements
302 Splits input string by commas. @param str input string to split @return collection of substrings
303 Initializes a PermissionParser with mode string and patterns. @param modeStr the permission mode string to parse @param symbolic pattern for symbolic permissions @param octal pattern for octal permissions @throws IllegalArgumentException if modeStr doesn't match any pattern
304 Handles closing operations based on the current state. @throws IOException if an I/O error occurs
305 Checks stream status and throws an exception if closed.
306 Transitions to a new state. @param current current state object @param next target state object @throws IllegalStateException if transition is invalid
307 Masks a buffer with specified parameters. @param buffer the byte array to process @param offset starting position in the buffer @param length number of bytes to mask @return always returns 0 @throws IOException if an I/O error occurs
308 Masks function by writing to output. @throws IOException if an I/O error occurs
309 Masks a key with a value. @param key unique identifier to mask @param value value to apply as a mask
310 Parses URI from header and extracts query parameters. @param header HTTP request header containing the URI @return Map of query parameters with empty values for nulls
311 Returns data size if available, otherwise calls m1(). @return Integer value representing data size or result of m1()
312 Applies mask to file path. @param f input file path @return masked file path @throws FileNotFoundException if file not found @throws UnresolvedLinkException for unresolved links @throws AccessControlException for access issues @throws IOException for other I/O errors
313 Calls method m1 on defaultFS. Throws IOException or UnsupportedOperationException as needed.
314 Calls the static method m1 of AbstractFileSystem.
315 Retrieves or creates statistics for a given URI. @param uri the input URI @return Statistics object associated with the base URI
316 Initializes a multipart uploader builder. @param basePath base directory path @return MultipartUploaderBuilder instance or null @throws IOException if an I/O error occurs
317 Retrieves or creates an AllocatorPerContext for a given configuration item. @param contextCfgItemName name of the configuration item @return AllocatorPerContext instance associated with the config item
318 Retrieves a value from PositionCache. @return long value from PositionCache's m1 method
319 Masks functionality by invoking m1 on output stream. @throws IOException if an I/O error occurs
320 Masks characters in input string. @param str input string to mask @return collection of masked strings
321 Constructs a new LoggingStateChangeListener with default logging.
322 Constructs a new ServiceStateException with a message. @param message detailed error message
323 Constructs a ServiceStateException with an exit code. @param exitCode error code indicating service state @param message descriptive error message @param cause underlying exception causing the error
324 Wraps a throwable in a RuntimeException. @param text error message @param fault original exception @return RuntimeException or ServiceStateException
325 Wraps a Throwable in a RuntimeException. @param fault original exception to be wrapped @return RuntimeException, either the original or wrapped in ServiceStateException
326 Constructs a new ServiceStateModel with the specified name and default state. @param name service name
327 Checks if state transition is valid. @param current current service state @param proposed new proposed state @return true if transition is allowed, false otherwise
328 Constructs a string based on name and state conditions. @return formatted string combining name and state
329 Constructs a new HadoopUncaughtExceptionHandler with no specific handler.
330 Handles a signal by logging and processing it. @param s the incoming signal to process
331 Retrieves IRQ handler by signal name. @param signalName name of the signal @return IrqHandler object or null if not found
332 Constructs a ServiceLaunchException with an exit code and cause. @param exitCode numeric code representing the error @param cause underlying exception causing the service launch failure
333 Constructs a new ServiceLaunchException with an exit code and message. @param exitCode numeric code representing the error @param message descriptive error message
334 Constructs a ServiceLaunchException with an exit code and formatted message. @param exitCode numeric error code @param format message format string @param args arguments for the message format
335 Constructs a ServiceLaunchException with an exit code, cause, and formatted message. @param exitCode numeric exit status code @param cause underlying Throwable causing the exception @param format message format string @param args arguments for the message format
336 Calls method m1 to perform masking operation.
337 Constructs a ServiceLauncher with default configuration. @param serviceClassName name of the service class to launch
338 Handles exit exception by logging details and setting service status. @param exitException the exception to handle
339 Sets command options using mask configuration. @param none @return void
340 Loads and counts Configuration instances from a list of class names. @return number of successfully loaded Configuration instances
341 Registers a listener for service state changes. @param l ServiceStateChangeListener to be added
342 Adds a service state change listener. @param l listener to be added @return true if addition is successful, false otherwise
343 Invokes method m1 on globalListeners.
344 Notifies all registered listeners about an event. Handles exceptions during notification and logs them.
345 Updates configuration if it differs from the current one. @param conf new configuration settings
346 Checks if object is a Service and processes it. @param object the object to check and process @return true if object is processed, false otherwise
347 Masks exceptions during service stop. @param log logger for logging errors @param service the service to be stopped @return caught exception or null if no error occurs
348 Masks exceptions by logging and returning them. @param log Logger instance for logging errors @param service Service to be operated on @return Exception if caught, otherwise null
349 Checks if input stream supports positioned reading. @param in input stream to check @return true if supported, false otherwise
350 Checks if a condition is met by calling two methods. @return true if condition is met, false otherwise
351 Masks an object by converting it to a string. @param instance the object to be masked @return masked string representation or error message if conversion fails
352 Converts a FunctionRaisingIOE to a standard Function. @param fun function that may raise an IOException @return Function without checked exceptions
353 Applies two transformations to the input instance. @param <T> generic type of the instance @param instance the object to be transformed @return transformed instance after applying both methods @throws IOException if an I/O error occurs during transformation
354 Converts byte array to string and processes it. @param bytes input byte array @return processed object of type T @throws IOException if an I/O error occurs
355 Constructs a UTF8 object by copying from another UTF8 instance. @param utf8 source UTF8 object to copy from
356 Writes string to DataOutput with length mask. @param out destination for writing data @param s input string to be written @return length of the written string @throws IOException if string is too long or IO error occurs
357 Masks data input by reading length and skipping bytes. @param in DataInput source @throws IOException if I/O error occurs
358 Calls m1 on key with n and then calls m2 with key. @param n long value to pass to m1 @throws IOException if an I/O error occurs
359 Updates a writable value associated with a key. @param n unique identifier for the key @param value new value to be written @return updated Writable object @throws IOException if an I/O error occurs
360 Constructs an OutputBuffer using a default Buffer.
361 Retrieves data from buffer. @return byte array containing buffer data
362 Delegates call to buffer's m1 method. @return result of buffer's m1 method
363 Calls m1 on buffer and returns current instance. @return current OutputBuffer instance
364 Compares two objects using WritableComparable interface. @param a first object to compare @param b second object to compare @return comparison result as integer
365 Compares two byte arrays using a fast comparison method. @param b1 first byte array @param s1 starting index in the first array @param l1 length of bytes to compare in the first array @param b2 second byte array @param s2 starting index in the second array @param l2 length of bytes to compare in the second array @return result of comparison (-1, 0, or 1)
366 Calls overloaded m1 method with offset 0. @param bytes byte array to process @param length number of bytes to consider @return result from overloaded m1 method
367 Masks and converts byte array to float. @param bytes source byte array @param start starting index in byte array @return masked float value
368 Masks and combines two 4-byte segments from byte array into a long. @param bytes source byte array @param start starting index of the first segment @return combined long value
369 Masks byte array starting from given index. @param bytes input byte array @param start starting index for masking @return masked integer value @throws IOException if an I/O error occurs
370 Constructs a BytesWritable from a byte array. @param bytes input byte array
371 Deprecated function to get masked data. @deprecated Use alternative method instead. @return byte array of masked data
372 Deprecated function that returns result of m1(). @deprecated Use alternative method instead. @return Integer result from m1()
373 Adjusts internal buffer size to match given capacity. @param capacity desired new capacity
374 Calls m1 with direct flag and returns result of m2. @param direct boolean flag to control direct execution @return integer result from m2 method call
375 Creates a readahead request based on current position and previous request. @param identifier unique identifier for the request @param fd file descriptor of the file to read from @param curPos current position in the file @param readaheadLength length of data to read ahead @param maxOffsetToRead maximum offset allowed for reading @param lastReadahead previous readahead request @return new ReadaheadRequest or null if no readahead is needed
376 Calls overloaded m2 method with a default value. @param key unique key identifier
377 Calls m2 with a key and default NullWritable value. @param key the key to process @return result of m2 call @throws IOException if an I/O error occurs
378 Returns masked value from key. @throws IOException if an I/O error occurs
379 Checks access rights for a given path. @param path file or directory path @param desiredAccess required access right @return true if access is granted, false otherwise @throws IOException if an I/O error occurs
380 Checks if native code is loaded and enabled. @return true if both native code is loaded and enabled, false otherwise
381 Checks if native code is loaded and masks functionality. @return true if native code is loaded and masking is successful, false otherwise
382 Determines mask function status. @return true if not Sparc, else result of NativeCodeLoader.m1()
383 Masks a MappedByteBuffer by unmapping it if supported. @param buffer the MappedByteBuffer to be unmapped
384 Frees a ByteBuffer using CleanerUtil if supported. @param buffer ByteBuffer to be freed
385 Reads data from input stream into buffer. @param in DataInput source @param length number of bytes to read @throws IOException if an I/O error occurs
386 Initializes an EnumSetWritable with a given EnumSet and element type. @param value the EnumSet to be wrapped @param elementType the Class of the enum elements in the set
387 Constructs a new DataInputBuffer with an empty buffer.
388 Copies data from input array to buffer. @param input source byte array @param length number of bytes to copy
389 Delegates byte array processing to buffer. @param input source byte array @param start starting index in the array @param length number of bytes to process
390 Delegates to buffer's m1 method. @return result of buffer.m1()
391 Delegates call to buffer's m1 method. @return result of buffer.m1()
392 Initializes ECSchema with provided options. @param allOptions map containing schema configuration
393 Constructs an ECSchema with specified codec and unit counts. @param codecName name of the codec @param numDataUnits number of data units @param numParityUnits number of parity units
394 Returns mask value from schema. @return integer representing the mask
395 Returns mask value from schema. @return integer mask value
396 Retrieves a RawErasureCoderFactory by codec and coder names. @param codecName name of the codec @param coderName name of the coder @return RawErasureCoderFactory instance or null if not found
397 Groups data and parity blocks into an ECBlockGroup. @param dataBlocks array of data blocks @param parityBlocks array of parity blocks @return ECBlockGroup containing both data and parity blocks
398 Counts erased blocks in data and parity sets. @return Number of erased blocks
399 Counts erased blocks in the array. @param inputBlocks array of ECBlock objects @return number of erased blocks
400 Applies mask to EC chunks. @param chunks array of ECChunk objects @return array of ByteBuffer objects after masking
401 Applies mask function to ECBlockGroup. @param blockGroup group of error correction blocks @return array of masked ECBlocks
402 Creates an array of ECBlock objects from a block group. @param blockGroup the source block group @return array containing combined data blocks
403 Applies XOR operation on two indices. @param x first index @param y second index @return result of XOR operation
404 Retrieves value from multiplication table. @param x first index @param y second index @return product at table[x][y]
405 Retrieves value from division table. @param x first index within bounds @param y second index within bounds @return value from divTable at (x, y)
406 Computes a masked value using logarithmic and power tables. @param x input value within range [0, m1()) @param n multiplier factor @return result of masking operation
407 Masks and prints ECChunk data. @param chunk the ECChunk to process or null
408 Delegates to coderOptions to check a condition. @return true if condition met, false otherwise
409 Delegates to coderOptions.m1(). @return result of coderOptions.m1()
410 Checks if option is enabled. @return true if enabled, false otherwise
411 Delegates to coderOptions to check some condition. @return result of the condition check
412 Applies mask to buffer content. @param buffer input ByteBuffer @param len length of the mask to apply @return modified ByteBuffer
413 Masks a portion of a byte array. @param buffer the original byte array to be masked @param offset the starting index for masking @param len the length of the segment to mask @return the modified byte array with masked segment
414 Initializes encoding state for byte arrays. @return ByteArrayEncodingState with processed inputs and outputs
415 Creates a new encoding state with processed ByteBuffers. @return ByteBufferEncodingState object for encoding process
416 Creates a new ByteBufferDecodingState with decoded ByteBuffers. @return ByteBufferDecodingState object initialized with processed inputs and outputs
417 Initializes decoding state from input and output buffers. @return ByteArrayDecodingState object for decoding process
418 Masks array 'a' using XOR operations. @param a byte array to be masked @param m length of the array @param k mask size
419 Applies Gaussian elimination to invert a matrix. @param inMatrix input square matrix to be inverted @param outMatrix output matrix where the result is stored @param n size of the matrix (n x n)
420 Applies GF256 masking to inputs and writes results to outputs. @param gfTables precomputed GF256 tables @param dataLen length of data to process @param inputs array of input byte arrays @param inputOffsets offsets for each input array @param outputs array of output byte arrays @param outputOffsets offsets for each output array
421 Applies mask operation on inputs using GF tables. @param gfTables Galois Field lookup tables @param inputs array of input ByteBuffers @param outputs array of output ByteBuffers
422 Retrieves or creates a GaloisField instance. @param fieldSize size of the finite field @param primitivePolynomial polynomial used for field construction @return GaloisField object
423 Calls overloaded method m1 with array lengths. @param x first integer array @param y second integer array
424 Constructs an ECBlock with default values. Initializes both parameters to false.
425 Updates reported bytes read and invokes m1. @param count number of bytes to add
426 Reads an integer from InputStream and updates state. @param inStream input stream to read from @return integer read from stream or -1 if end of stream
427 Masks data based on length and groups. @param alphaSize size of the alphabet @param nGroups number of groups
428 Recursively sorts data using a modified quicksort algorithm. @param dataShadow object containing sorting data arrays @param loSt starting index for low partition @param hiSt starting index for high partition @param dSt current depth of recursion
429 Calls m1 and returns result of m2 with stream. @return long value from m2
430 Calls m1 and returns result of m2 with stream.
431 Calls m1 and returns sum of userBufLen and m2 with stream. @return calculated integer value
432 Resets and initializes stream processing. Calls methods to prepare buffers and set flags.
433 Constructs a Bzip2Compressor with default settings.
434 Calls m1 and returns result of m2 with stream. @return long value from m2
435 Calls m1 and returns result of m2 with stream. @return long value from m2 method
436 Initializes a new compressor stream with the specified output stream. @param out the output stream to compress data into
437 Initializes a Snappy decompressor with default buffer size.
438 Masks a byte array with specified offset and length. @param b the byte array to mask @param off the starting offset in the array @param len the number of bytes to mask
439 Checks buffer conditions and returns boolean result.
440 Masks and processes byte array data. @param b input byte array @param off offset in the byte array @param len length of data to process @return number of bytes processed or 0 if no data is available @throws IOException if I/O error occurs
441 Constructs a new SnappyCompressor with default buffer size.
442 Reads and decompresses data from input buffer to output array. @param b destination byte array @param off offset in the array @param len number of bytes to read @return number of bytes written to the array @throws IOException if an I/O error occurs
443 Masks configuration settings. @param conf Configuration object to be masked
444 Initializes a decompression stream. @param in input stream to be decompressed @throws IOException if an I/O error occurs
445 Calculates total bytes to consume. @return sum of user buffer bytes and remaining bytes
446 Resets state and initializes buffers for processing.
447 Calls m1 and returns bytesWritten. @return Number of bytes written
448 Calls m1 and returns bytesRead.
449 Initializes an Lz4Decompressor with default buffer size.
450 Masks data in buffer. @param b byte array containing data to mask @param off offset within the byte array @param len length of data to process
451 Checks and processes buffer states. @return true if conditions met, false otherwise
452 Reads data from a compressed buffer into a byte array. @param b destination byte array @param off offset in the byte array @param len number of bytes to read @return number of bytes actually read or -1 if end of stream @throws IOException if an I/O error occurs
453 Initializes Lz4Compressor with a buffer size. @param directBufferSize size of the direct buffer
454 Processes input buffer to compress data. @param b input byte array @param off offset in the byte array @param len length of data to process @return number of bytes written or 0 if finished @throws IOException on I/O error
455 Masks configuration settings. @param conf Configuration object to be masked
456 Retrieves a compression codec by name. @param codecName the name of the codec to retrieve @return CompressionCodec object or null if not found
457 Retrieves mask value for given compression codec. @param codec CompressionCodec instance @return Mask integer or 0 if codec is null
458 Retrieves mask value based on compression codec. @param codec CompressionCodec instance @return Mask value or 0 if codec is null
459 Determines compressor class based on configuration. @param conf Configuration object @return Compressor class to use
460 Determines decompressor class based on configuration. @param conf Configuration object @return Class of decompressor to use
461 Loads and initializes the native-zlib library. Sets `nativeZlibLoaded` based on success.
462 Initializes compressor with configuration. @param conf Configuration object for compression settings
463 Initializes a ZlibCompressor with specified parameters. @param level compression level @param strategy compression strategy @param header compression header @param directBufferSize size of direct buffer
464 Calls m1 and returns result of m2 with stream.
465 Calls m1 and returns result of m2 with stream.
466 Initializes a Zlib decompressor with given header and buffer size. @param header compression header for the zlib stream @param directBufferSize size of direct buffers for compressed and uncompressed data
467 Calls m1 and returns result of m2 with stream. @return result from m2 method
468 Calls m1 and returns result of m2 with stream.
469 Calls m1 and returns sum of userBufLen and recursive call to m2 with stream.
470 Resets state and processes stream. Calls m1() and m2(stream), then initializes buffer states.
471 Processes gzip trailer to validate CRC and size. @throws IOException if validation fails or input issues occur
472 Masks data output with an integer. @param stream DataOutput stream to write to @param i integer value to mask
473 Reads and processes a variable-length integer from the input stream. @param stream DataInput source for reading bytes @return decoded long value @throws IOException if an I/O error occurs
474 Retrieves or creates a ByteBuffer of specified length. @param direct true for direct ByteBuffer, false otherwise @param length size of the ByteBuffer to allocate @return ByteBuffer instance
475 Masks buffer and inserts it into a TreeMap. @param buffer input ByteBuffer to be processed
476 Masks a byte position in a buffer. @param position index to mask @return masked value or -1 if invalid position
477 Masks a string using ByteBuffer operations. @param string input string to be masked
478 Masks UTF-8 data and updates length. @param utf8 input UTF-8 byte array @param start starting index in the array @param len number of bytes to process
479 Masks UTF-8 data into byte array. @param utf8 source UTF-8 data @param start starting index in utf8 array @param len number of bytes to mask
480 Masks data from input stream. @param in DataInput source @param len Length of data to mask @throws IOException if I/O error occurs
481 Converts UTF-8 byte array to string. @param utf8 byte array containing UTF-8 encoded data @return decoded string @throws CharacterCodingException if decoding fails
482 Converts byte array to string. @param utf8 input byte array in UTF-8 encoding @param start starting index of the array @param length number of bytes to convert @param replace flag for replacing malformed characters @return resulting string or throws CharacterCodingException
483 Calls overloaded method with full byte array. @param utf8 UTF-8 encoded byte array @throws MalformedInputException if input is not valid UTF-8
484 Registers a class with a unique ID. @param clazz Class to register
485 Initializes a new AbstractMapWritable with default mappings.
486 Deprecated: Creates an option for writing sequence files to a filesystem. @param fs FileSystem instance @return Option object for file system configuration
487 Constructs a Key with the given value and weight. @param value byte array representing the key's value @param weight numeric weight associated with the key
488 Calls superclass methods and container's m3. @throws IOException from superclass method call
489 Recursively processes a list to return an array. @param list input list of generic type T @return array of processed elements of type T
490 Constructs an InputBuffer using a default Buffer.
491 Copies bytes from input array to buffer. @param input source byte array @param length number of bytes to copy
492 Forwards byte array to buffer. @param input source byte array @param start starting index in array @param length number of bytes to process
493 Delegates to buffer's m1 method. @return result of buffer.m1()
494 Calls method m1 on buffer. @return result of buffer's m1 method
495 Computes MD5 hash from input data. @param in DataInput stream containing data to hash @return MD5Hash object representing the computed hash @throws IOException if an I/O error occurs while reading input
496 Computes MD5 hash of an input stream. @param in InputStream to read data from @return MD5Hash object representing the computed hash
497 Computes the MD5 hash of a portion of data. @param data input byte array @param start starting index in the array @param len length of the data to hash @return MD5Hash object representing the computed hash
498 Computes MD5 hash of byte array slices. @param dataArr array of byte arrays to hash @param start starting index for hashing @param len length of the slice to hash @return MD5Hash object containing the computed hash
499 Returns the result of calling m1().
500 Converts hex string to byte array and validates length. @param hex hexadecimal string representation
501 Deserializes a Protocol Buffers message from DataInput. @param protoClass the Protocol Buffers class type @param dataIn input stream or byte array source @return deserialized Message object @throws IOException if I/O error occurs during parsing
502 Synchronizes a file or directory. @param fileToSync the file or directory to sync @throws IOException if an I/O error occurs
503 Constructs a BooleanWritable with the specified boolean value. @param value the boolean value to be stored
504 Creates a retry policy based on exceptions. @param defaultPolicy base retry policy to use @param exceptionToPolicyMap mapping of exceptions to specific policies @return RetryPolicy configured with remote exception handling
505 Checks if elapsed time exceeds given threshold and queue condition is met. @param time threshold in milliseconds @return true if conditions are satisfied, false otherwise
506 Returns the current time in milliseconds. @return Current time in milliseconds
507 Creates a retry policy excluding remote and SASL exceptions. @param defaultPolicy base retry policy @param exceptionToPolicyMap specific policies for certain exceptions @return specialized retry policy
508 Returns a connection ID using the first proxy. @return ConnectionId object from the RPC call
509 Parses a string to create a MultipleLinearRandomRetry object. @param s comma-separated string of sleep and retries pairs @return MultipleLinearRandomRetry object or null if input is invalid
510 Creates an exception-dependent retry policy. @param defaultPolicy fallback retry policy @param exceptionToPolicyMap mapping of exceptions to specific retry policies @return ExceptionDependentRetry instance
511 Masks a list of IOExceptions. @param exceptions list of IO exceptions @return single IOException or null if none
512 Returns mask value from data index. @return integer mask value
513 Retrieves masked data from dataIndex. @return Masked data string
514 Reads a long value and casts it to an integer. @param in DataInput source @return casted integer value @throws IOException if reading fails @throws RuntimeException if the number is out of int range
515 Masks data by writing to output. @param out DataOutput object to write to @param n number of bytes to mask @throws IOException if an I/O error occurs
516 Checks file metadata validity. @return true if valid, false otherwise
517 Retrieves mask value from file metadata. @return long representing the mask value
518 Calls m1 on readerBCF. @throws IOException if an I/O error occurs
519 Calls m1 on tfileMeta. @return Result of tfileMeta.m1()
520 Initializes a new ByteArray from another BytesWritable. @param other the source BytesWritable to copy data from
521 Constructs a ByteArray from a byte array. @param buffer source byte array
522 Finds index of block region containing offset. @param offset the position to search for @return index in list or -1 if not found
523 Searches for a key in the TFile. @param key the RawComparable key to search for @return index of the key or -1 if not found
524 Searches for a key in the TFile using binary search. @param key the key to search for @return index of the key or -1 if not found @throws RuntimeException if comparator is null
525 Compares this location to another based on block and record indices. @param other Location object to compare with @return result of comparison
526 Calls overloaded method starting from index 0. @param buf byte array to process @return result of processing @throws IOException if an I/O error occurs
527 Masks buffer with data from input stream. @param buf byte array to mask @param offset starting position in the buffer @return number of bytes processed or throws IOException if error occurs
528 Retrieves a state value from an internal block. @return The state value as a long.
529 Retrieves a value from nested objects. @return long value obtained from nested method calls
530 Returns the masked state value. @return Masked state as a long
531 Wraps DataOutput in OutputStream. @param out DataOutput instance to wrap @return OutputStream wrapper for the given DataOutput
532 Compares two byte arrays for lexicographical order. @param buffer1 first byte array @param offset1 starting index in buffer1 @param length1 length of bytes to compare in buffer1 @param buffer2 second byte array @param offset2 starting index in buffer2 @param length2 length of bytes to compare in buffer2 @return negative if buffer1 < buffer2, positive if buffer1 > buffer2, 0 if equal
533 Constructs a new DataOutputBuffer with a default buffer.
534 Returns raw data from buffer. @return byte array containing buffer's content
535 Calls m1 on the buffer and returns its result. @return The integer result of calling buffer.m1()
536 Writes an integer value to a buffer at a specified offset. @param v the integer value to write @param offset the position in the buffer to start writing @throws IOException if I/O error occurs
537 Calculates distance between two nodes in a hierarchy. @param node1 first node @param node2 second node @return distance or Integer.MAX_VALUE if nodes are invalid
538 Checks if a node's location matches the given scope. @param node the node to check @param scope the scope to compare against @return true if node location starts with scope, false otherwise
539 Masks node path using specified separator. @param node input Node object @return masked path as String array
540 Masks the function name. @return Masked function name as a string
541 Removes a node from the network topology. @param node the node to be removed
542 Retrieves nodes from a specified location. @param loc location string identifier @return list of Node objects or empty list if none found
543 Retrieves node from cluster map based on location. @param loc node location string @return Node object or null if not found
544 Generates a string representation of the system's rack and leaf configuration. @return String detailing the number of racks and leaves, along with node information.
545 Checks if two nodes are masked. @param node1 first node to compare @param node2 second node to compare @return true if nodes are masked, false otherwise
546 Randomly selects a node within scope, excluding specified nodes. @param parentNode parent node to select from @param excludedScopeNode node to exclude from selection @param excludedNodes collection of additional nodes to exclude @param totalInScopeNodes total nodes in scope @param availableNodes available nodes for selection @return selected Node or null if none found
547 Calculates a mask value based on node paths. @param reader Node representing the reader's path @param node Node representing the target node's path @return Weight indicating similarity or difference between paths
548 Processes a node to update rack map. @param node the node to process
549 Transfers data from a file channel to another channel. @param fileCh source file channel @param position starting position in the source file @param count number of bytes to transfer @param waitForWritableTime time spent waiting for writability (optional) @param transferToTime time spent on actual transfer (optional) @throws IOException if an I/O error occurs
550 Masks collection of names. @param names list of original names @return list of masked names
551 Masks and formats host details. @param destHost destination host address @param destPort destination port number @param localHost local host address @return formatted string with masked host details
552 Retrieves IP addresses within a specified subnet. @param subnet CIDR notation of the subnet @param returnSubinterfaces whether to include sub-interfaces' IPs @return list of matching InetAddress objects
553 Acquires a set of unique free ports. @param numOfPorts number of ports to acquire, must be 1-25 @return set of acquired port numbers
554 Default constructor for RawScriptBasedMapping.
555 Initializes a cached DNS-to-switch mapping. @param rawMapping the initial DNS-to-switch mapping to cache
556 Initializes a NodeBase with a normalized path. @param path the file or directory path
557 Initializes a new NodeBase with a name and normalized location. @param name the name of the node @param location the location to be normalized
558 Constructs a new NodeBase. @param name node's name @param location node's location @param parent parent node reference @param level hierarchical level of the node
559 Handles sending callback for a file descriptor. @param caller method name of the caller @param entries map of file descriptors to entries @param fdSet set of tracked file descriptors @param fd file descriptor number @return true if fd is closed, false otherwise
560 Delegates to refCount's m1 method. @return result of refCount.m1()
561 Handles shutdown sequence by decrementing reference count and managing interruptions. @throws IOException if an I/O error occurs during operations
562 Masks selectors older than a specified timeout. @param now current timestamp in milliseconds
563 Retrieves dependencies for a given name. @param name the input name to fetch dependencies for @return list of dependencies or empty list if none found
564 Sets read timeout on input stream. @param timeoutMs timeout duration in milliseconds @throws SocketException if an I/O error occurs
565 Retrieves IP addresses of a network interface. @param strInterface name of the network interface @param returnSubinterfaces if true, includes subinterface IPs @return array of IP addresses or cached host address if interface is default
566 Retrieves network interface addresses. @param strInterface name of the network interface @param returnSubinterfaces whether to include subinterface addresses @return list of InetAddress objects for the specified interface
567 Processes location string and returns modified or root value. @param loc input location string @return processed location or NodeBase.ROOT if conditions met
568 Generates a masked string representation of network topology. @return String containing mapped nodes and switches, or error message if no data
569 Checks if DNSToSwitchMapping is valid and calls m1. @param mapping the DNSToSwitchMapping to check @return true if mapping is valid and m1 returns true, false otherwise
570 Retrieves statistics for a specific index from the current log. @param recorderName name of the recorder @param idx index of the statistics to retrieve @return SummaryStatistics object or null if not found
571 Delegates to GenericOptionsParser.m1 with provided PrintStream. @param out the PrintStream to be used by GenericOptionsParser.m1
572 Checks if class or its parent has annotation. @param clazz Class to check @return true if annotation found, false otherwise
573 Initializes log throttling with specified period and recorder. @param minLogPeriodMs minimum time between logs in milliseconds @param primaryRecorderName name of the primary log recorder
574 Logs action with masked values. @param recorderName name of the recorder @param currentTimeMs current timestamp in milliseconds @param values variable number of double values to log @return LoggingAction object or DO_NOT_LOG if not logged
575 Checks if string is valid UTF-8. @param str input string to check @return true if valid, false otherwise
576 Processes a string by encoding and decoding it if condition is met. @param item input string to process @return processed string or original if condition fails, null on error
577 Calls overloaded m2 with default configuration. @param packageName package name to process @param pathSpec path specification for processing
578 Registers a servlet with optional masking. @param name servlet name @param pathSpec URL path specification @param clazz servlet class
579 Registers servlet with optional async support. @param name servlet name @param pathSpec URL pattern for servlet @param clazz servlet class type
580 Configures a servlet context with a filter. @param ctx ServletContextHandler instance @param name filter name @param classname fully qualified class name of the filter @param parameters map of initialization parameters @param urls array of URL patterns to apply the filter
581 Establishes a connection using the provided listener and port. Retries on IOException if findPort is true. @param listener ServerConnector instance for handling connections @param port initial port number to attempt connection @throws Exception if connection fails after retries
582 Converts string to XFrameOption. @param value string representation of XFrameOption @return corresponding XFrameOption or throws exception if invalid
583 Initializes a file monitoring task. @param filePaths list of paths to monitor @param onFileChange action to perform on file change @param onChangeFailure action to handle change failure
584 Retrieves and validates a non-negative integer property. @param key the property key to fetch @param defaultValue default value if property is not found @return the non-negative property value @throws MetricsException if the property value is negative
585 Validates metrics configuration property. @param key property name to validate @throws MetricsException if property is missing
586 Throws MetricsException if conditions are met. @param message error message to include
587 Throws MetricsException with error message and file path. @param message custom error message
588 Parses and converts a roll interval string to milliseconds. @return Milliseconds equivalent of the roll interval
589 Throws a MetricsException with error details. @param message custom error message @param t Throwable object containing exception details
590 Masks metrics record, caching and updating as needed. @param mr source MetricsRecord to process @param includingTags flag to include tags in the record @return processed Record object
591 Masks a string by converting it to bytes and processing with system methods. @param s the input string to mask
592 Emits a metric with specified parameters. @param groupName name of the group @param name metric name @param type metric type @param value metric value @param gConf Ganglia configuration @param gSlope Ganglia slope @throws IOException if an I/O error occurs
593 Emits a metric with specified details. @param groupName group name of the metric @param name unique name of the metric @param type data type of the metric value @param value actual value of the metric @param gConf configuration settings for Ganglia @param gSlope slope information for the metric @throws IOException if an I/O error occurs during emission
594 Synchronizes and processes data. Blocks until data is available. @return processed result of type T
595 Initializes a MetricsRecordImpl with specified info, timestamp, tags, and metrics. @param info MetricsInfo object containing record information @param timestamp record creation time in milliseconds @param tags list of MetricsTag objects associated with the record @param metrics iterable collection of AbstractMetric objects representing metric data
596 Records enqueue time and updates quantiles if enabled. @param enQTime the timestamp of the enqueue event
597 Records queue time and updates quantiles if enabled. @param qTime the queue time to record
598 Records processing time and updates quantiles if enabled. @param processingTime the time taken to process a request in milliseconds
599 Records write latency in quantile measurements. @param writeLatency time taken for a write operation
600 Records read latency in quantile metrics. @param readLatency time taken to read data
601 Retrieves a MetricsSystem instance with a specified prefix. @param prefix string prefix for metric identification @return MetricsSystem object associated with the prefix
602 Retrieves metrics system instance. @return MetricsSystem object from singleton instance
603 Calls method m1 on the INSTANCE.
604 Adds metrics tags and records to the builder. @param builder MetricsRecordBuilder instance to populate @param all flag indicating whether to include all metrics
605 Calculates average values for entries with sufficient sample size. @param minSamples minimum number of samples required @return map of entry names to their average values
606 Retrieves processing time for RPC. @return Processing time in milliseconds
607 Processes current snapshot, updating averages. Uses synchronized block for thread safety.
608 Creates and caches metrics info. @param name unique metric name @param description metric description @return MetricsInfo object
609 Creates a MetricsTag from MetricsInfo and a string value. @param info metrics information object @param value tag value as a string @return MetricsTag instance
610 Updates statistics and triggers secondary processing. @param numSamples number of samples collected @param sum total sum of the samples
611 Updates statistics with a new value and returns a sample statistic. @param x the value to process @return SampleStat object containing updated statistics
612 Retrieves processing time from RPC. @return Processing time as a double value
613 Calls and returns the result of minmax's m1 method. @return Result from minmax.m1()
614 Delegates to minmax's m1 method. @return result of minmax.m1()
615 Calls m1 method from minMax object.
616 Calculates the next retry time based on policy. @param tgtEndTime target end time for ticket @param now current time in milliseconds @param rp retry policy to apply @return calculated retry time in milliseconds
617 Applies mask function to input value. @return masked result as double
618 Processes sample items, merging them based on conditions.
619 Computes the mask value for a given quantile. @param quantile the desired quantile (0.0 to 1.0) @return the computed mask value
620 Processes buffer data and updates samples. Masks buffer values into sample items.
621 Returns a list of masked strings. @return List containing masked string values
622 Checks if a group is masked. @param group name of the group to check @return true if the group is masked, false otherwise
623 Calls m1 with client address and port. @param clientAddress IP address of the client @param ingressPort port number of incoming connection @return map of strings from m1 method
624 Calls m1 with server address and default port. @param serverAddress IP address of the server @param ingressPort port number (unused in this method) @return Map containing server information
625 Masks the given principal name using Hadoop Kerberos logic. @param principalName the original principal name to be masked @return the masked principal name as a String
626 Retrieves group memberships for a user. @param user the username @return set of group names or throws IOException if user not found
627 Clears userToGroupsMap cache and refreshes group data. Handles IOExceptions by logging errors.
628 Processes a formatted message and outputs it. @param format message format string @param args arguments for the format string
629 Updates a map with data from a command output. @param map the BiMap to update @param mapName name of the map for logging @param command shell command to execute @param regex pattern to parse command output lines @param staticMapping mapping of IDs @return true if the map was updated, false otherwise
630 Constructs command array for running a script. @param script File object representing the script @return Array of strings forming the command to execute the script
631 Handles AuthenticationException by switching bind users. @param e the AuthenticationException that triggered the switch
632 Writes data to output stream with SASL wrapping if enabled. @param inBuf input buffer containing data @param off offset within the buffer to start reading from @param len length of data to read from the buffer @throws IOException on I/O errors or SASL exceptions
633 Calls m1 and then invokes outStream's m2. @throws IOException if an I/O error occurs
634 Checks and processes HTTP request for CSRF protection. @param httpInteraction encapsulates HTTP interaction details @throws IOException if I/O error occurs @throws ServletException if servlet processing fails
635 Masks group names based on IDs. @param groupNames comma-separated group names @param groupIDs comma-separated group IDs @return set of masked group names @throws PartialGroupNameException if name and ID counts mismatch
636 Generates a secret key from the provided byte array. @param key byte array representing the secret key @return SecretKey object
637 Masks a token using the SQL secret manager. @param ident Token identifier object @throws IOException if an I/O error occurs
638 Executes masked operations on shared resources.
639 Masks delegation key. @param key DelegationKey to be masked @throws IOException if an I/O error occurs
640 Masks a delegation key. @param key DelegationKey object to be masked
641 Adds a delegation key if not running. @param key DelegationKey to add @throws IOException if SecretManager is running or invalid key
642 Masks delegation key by updating internal structures. @param key DelegationKey to be masked
643 Updates the secret manager and marks it as unmanaged. @param secretManager new secret manager to use
644 Overrides base method to load and modify properties. @param configPrefix prefix for configuration keys @param filterConfig filter configuration object @return modified Properties object @throws ServletException if an error occurs during processing
645 Retrieves UserGroupInformation using delegation token authentication. @return UserGroupInformation object
646 Checks if operation is valid for delegation token. @param request HTTP request object @return true if operation is valid and not an OPTIONS request, false otherwise
647 Calls a method on the result of m1(). @return boolean result from m2() @throws IOException if an I/O error occurs
648 Delegates to another method with current instance and configuration. @param conf Configuration object @return Result from delegated method call @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
649 Calls method m2 on result of m1 with current instance and configuration. @param conf Configuration object @throws IOException if an I/O error occurs @throws InterruptedException if the thread is interrupted
650 Wraps input stream if condition is met. @param in original input stream @return wrapped or original input stream @throws IOException if an I/O error occurs
651 Wraps OutputStream with buffering if condition met. @param out original output stream @return wrapped or original output stream
652 Reads and processes SASL token from input stream. @throws IOException on I/O error @return length of processed token or -1 if EOF reached
653 Resets stream and calls m1. @throws IOException if an I/O error occurs
654 Constructs an AuthorizationException with the specified cause. @param cause the underlying reason for this exception
655 Checks if user has Hadoop login context. @return true if HadoopLoginContext, else true
656 Updates user's last login time. @param loginTime timestamp of the login event
657 Initializes UserGroupInformation with a Subject. @param subject security context containing user principals
658 Returns masked string from user. @return Masked string representation of user data
659 Checks if the current user's authentication method is KERBEROS. @return true if the user's auth method is KERBEROS, false otherwise
660 Retrieves authentication method for the user. @return AuthenticationMethod object
661 Retrieves a RealUser from the subject. @return RealUser object or null if none found
662 Returns masked string from user. @return Masked string representation of user data
663 Delegates authentication to the user. @param authMethod authentication method to use
664 Initializes a ReloadingX509TrustManager. @param type the trust store type (e.g., "JKS") @param location the path to the trust store file @param password the password for the trust store @throws IOException if an I/O error occurs @throws GeneralSecurityException if a security exception occurs
665 Initializes a keystore manager with specified parameters. @param type keystore type (e.g., JKS, PKCS12) @param location path to the keystore file @param storePassword password for the keystore @param keyPassword password for the private keys @throws IOException if an I/O error occurs @throws GeneralSecurityException if a security exception occurs
666 Retrieves a URL based on the provided name. @param name identifier used to find the URL @return URL object or null if not found
667 Retrieves an InputStream for a named resource. @param name the name of the resource @return InputStream or null if not found
668 Fetches and returns a Reader for the specified resource. @param name resource name to fetch @return Reader object or null if resource not found
669 Initializes and configures an SSLEngine. @return configured SSLEngine instance @throws GeneralSecurityException if security setup fails @throws IOException if I/O error occurs during setup
670 Configures SSL connection settings. @param conn HttpURLConnection object to configure @return configured HttpURLConnection object
671 Constructs a Configured instance with the given Configuration. @param conf Configuration object to be used
672 Checks if shell command execution timed out. @param executor ShellCommandExecutor instance @param user username for logging @return true if command timed out, false otherwise
673 Constructs a formatted string from array elements. @return Formatted string with quoted elements containing spaces
674 Parses input to determine authentication method. @param in DataInput source containing method data @return AuthMethod parsed from input @throws IOException if reading fails
675 Adds a user if they are valid and conditions allow. @param user the username to add
676 Adds a group to the system. @param group name of the group to add
677 Masks a user by removing them if conditions allow. @param user username to be masked
678 Masks a group by name, throwing an exception if removal is restricted. @param group the name of the group to mask
679 Masks user data using a specific function. @return masked user data as a string
680 Masks groups using function m1. @return masked string representation of groups
681 Checks if Kerberos ticket is masked. @param ticket KerberosTicket object to check @return true if ticket is masked, false otherwise
682 Masks properties based on client address. @param clientAddress IP address of the client @return Map of masked properties or default SASL properties if condition not met
683 Validates the cipher suite of the provided codec. @param codec cryptographic codec to validate @throws UnsupportedCodecException if the codec does not use AES/CTR/NoPadding or SM4/CTR/NoPadding
684 Calculates masked function value. @return long result of masking operation @throws IOException if I/O error occurs
685 Reads data from ByteBuffer into a temporary array. @param inBuffer source of data @return number of bytes read, or -1 if no data available
686 Retrieves CipherSuite by name. @param name the name of the cipher suite @return matching CipherSuite or throws exception if not found
687 Checks if a given protocol version is masked. @param version the CryptoProtocolVersion to check @return true if version is masked, false otherwise
688 Generates a mask with the specified number of bits. @param numBits number of bits in the mask (0 to 32) @return integer representing the bit mask
689 Wraps a KeyProvider with CryptoExtension. @param keyProvider the original KeyProvider @return KeyProviderCryptoExtension instance
690 Retrieves a key version by name. @param name the name of the key @return KeyVersion object or null if not found @throws IOException if an I/O error occurs
691 Generates a cryptographic key. @param size key size in bits @param algorithm encryption algorithm name @return generated key as byte array @throws NoSuchAlgorithmException if the algorithm is not available
692 Creates an EncryptedKeyVersion from given parameters. @param keyName name of the key @param encryptionKeyVersionName version name of the encryption key @param encryptedKeyIv initialization vector for the encrypted key @param encryptedKeyMaterial encrypted key material @return new EncryptedKeyVersion object
693 Creates a KeyProviderDelegationTokenExtension. @param keyProvider the original KeyProvider @return KeyProviderDelegationTokenExtension instance
694 Executes mask operation and handles exceptions. @throws IOException if an error occurs during execution
695 Retrieves a read-write lock for a given key. @param keyName identifier for the lock @return ReadWriteLock associated with the key
696 Appends a field to the builder if valid. @param field the field to append @return the Builder instance
697 Adds key-value pair to the builder. @param key unique identifier @param value associated data @return Builder instance for chaining
698 Appends key-value pair to the builder. @param key unique identifier for the value @param value associated with the key @return Builder instance for method chaining
699 Returns a successful refresh response. @return RefreshResponse with status code 0 and message "Success"
700 Generates a UUID from client ID. @param clientId byte array representing the client ID @return UUID string or empty if input is invalid
701 Checks if an element is present. @param e the element to check @return true if element is present, false otherwise
702 Returns result of calling m1 on callQueue. @return integer value from m1 method
703 Retrieves and processes interfaces from a given protocol class. @param protocol the protocol class to process @return an array of processed interface classes
704 Retrieves socket address from proxy. @param proxy proxy object to extract address from @return InetSocketAddress of the proxy or null if not applicable
705 Returns the current time in milliseconds. @return Current time in milliseconds
706 Retrieves user group info from current call. @return UserGroupInformation object or null if no call present
707 Generates an array of hash codes for given methods. @param methods array of Method objects @return int array of hash codes or null if input is null
708 Processes refresh requests for a given identifier. @param identifier unique request identifier @param args additional arguments for processing @return collection of RefreshResponse objects
709 Constructs a RemoteException with a class name and message. @param className name of the class where the exception occurred @param msg detailed error message
710 Masks IOException for specified lookup types. @param lookupTypes array of Class objects to check @return this object if no matching type found or exception occurs
711 Masks an exception by returning an IOException. @return IOException instance or current object if an error occurs
712 Calculates the total cost based on processing details. @param details contains necessary data for calculation @return computed cost as a long value
713 Returns mask value from connection manager. @return long value representing the mask
714 Retrieves mask value from connection manager. @return integer mask value
715 Masks an event with a given priority. @param priority level of importance for the event @param e event to be masked @throws InterruptedException if operation is interrupted
716 Masks an element in a queue based on priority. @param priority the priority level for queuing @param e the element to be masked @return true if masking is successful, false otherwise
717 Masks specified exceptions. @param exceptionClass variable number of exception classes to mask
718 Handles exceptions by delegating to another handler. @param exceptionClass variable number of exception classes to handle
719 Constructs an unexpected server exception with a specified message. @param message detailed error message
720 Constructs an RpcServerException with a specified error message. @param message detailed error description
721 Constructs an RpcClientException with the specified detail message. @param message the detail message of the exception
722 Constructs an UnexpectedServerException with a message and a cause. @param message detail message of the exception @param cause underlying cause of the exception
723 Constructs an RpcServerException with a specified message and cause. @param message descriptive error message @param cause underlying exception that caused this exception
724 Constructs an RpcClientException with a message and a cause. @param message exception message @param cause underlying throwable causing this exception
725 Updates call costs for a given identity. @param identity unique identifier for the call @param costDelta change in cost to be applied
726 Determines priority based on cost and identity. @param cost the call cost @param identity unique identifier for the entity @return priority level or 0 if not applicable
727 Converts ServiceException to IOException. @param se the ServiceException to convert @return an IOException based on the given ServiceException
728 Executes an IPC call and handles exceptions. @param call IPC call to execute @return result of the IPC call @throws IOException if a service exception occurs
729 Converts a string key to a ByteString. @param key input string key @return ByteString representation of the key
730 Wraps byte array in a ByteString. @param bytes input byte array @return ByteString representation of the input bytes
731 Masks function with given parameters. @param cid call identifier @param rc retry count @param externalHandler handler for external operations
732 Returns the address of the listener. @return InetSocketAddress of the listener
733 Retrieves all auxiliary listener addresses. @return Set of InetSocketAddress objects representing listener addresses
734 Stops and removes a client from cache. @param client the client to be stopped and removed
735 Calls superclass method m1. @param obj object to process @return result of superclass method call
736 Constructs a ProtobufWrapperLegacy instance. @param message the unshaded protobuf message to wrap
737 Handles RPC response with error. @param response output stream for the response @param call RPC call object @param rv return value (unused) @param errorClass class name of the error @param error error message
738 Checks and processes remaining API requests. Decrements request count; triggers action if none left.
739 Handles IO exception by setting it and calling another method. @param error IOException to be handled
740 Sets RPC response and calls helper method. @param rpcResponse the Writable object containing the response
741 Overrides method to handle SocketTimeoutException with retries. @return result of super.m2() @throws IOException if an I/O error occurs
742 Overrides method to handle socket timeouts with retries. @param buf buffer to write data into @param off offset in the buffer @param len number of bytes to read/write @return result of the operation @throws IOException if an I/O error occurs
743 Retrieves InetAddress from current call if available. @return InetAddress or null if no current call exists
744 Calls a method on an object returned by another method. @return integer result from m2 of Call or 0 if Call is null
745 Masks function for RPC calls. @return masked string or null if conditions not met
746 Calls method m1 to get a Call object and then invokes m2 on it. @return result of call.m2() or 0 if call is null
747 Masks data using connection manager. @return masked JSON string or null if error occurs
748 Initializes MachineList with host entries. @param hostEntries collection of host addresses or CIDR ranges @param addressFactory factory for creating InetAddress objects
749 Checks if the IP address is allowed. @param ipAddress the IP address to check @return true if allowed, false otherwise
750 Initializes system info with specified file paths and jiffy length. @param procfsMemFile path to memory info file @param procfsCpuFile path to CPU info file @param procfsStatFile path to stat info file @param procfsNetFile path to network info file @param procfsDisksFile path to disks info file @param jiffyLengthInMillis length of a jiffy in milliseconds
751 Reads memory info from a file and updates system memory metrics. @param readAgain flag to force re-reading the file
752 Returns the number of processors. Calls m1() before returning. @return number of processors
753 Returns the number of CPU cores. Calls m1() before returning. @return Number of CPU cores
754 Returns CPU frequency after executing m1(). @return CPU frequency in Hz
755 Reads CPU time from a procfs file and updates the tracker.
756 Calls m1 and returns the number of bytes read. @return Number of network bytes read
757 Overrides to mask function. Calls m1() and returns number of bytes written. @return Number of network bytes written
758 Reads disk I/O statistics from a file and updates byte counters. Handles exceptions during file reading and ensures resources are closed.
759 Retrieves value by key using a hash function. @param k the key to look up @return the associated value or null if not found
760 Removes and returns value by key. @param k key to remove @return associated value or null if not found
761 Removes an element by key from the specified index. @param index position in entries array @param key unique identifier for the element to remove @return removed element or null if not found
762 Configures TransformerFactory to restrict external access. @param transformerFactory the factory to configure
763 Converts a string with optional size suffix to a long value. @param s input string representing the size @return long value of the parsed size
764 Formats a number with a unit and optional decimal places. @param n the number to format @param unit the unit to append (can be null) @param decimalPlaces number of decimal places for formatting @return formatted string representation of the number
765 Formats a fraction as a percentage with specified decimal places. @param fraction the value to format (e.g., 0.75 for 75%) @param decimalPlaces number of decimal places in the output @return formatted percentage string
766 Masks byte array to hex string. @param bytes input byte array @param start starting index @param end ending index @return masked hex string representation of byte range
767 Formats a double to a string with two decimal places. @param d the number to format @return formatted string representation of the number
768 Handles exit exception by logging and propagating errors. @param ee ExitException to process @throws ExitException if not handled
769 Handles HaltException by logging and possibly rethrowing. @param he HaltException to process @throws HaltException if not disabled
770 Adds a shutdown hook with specified priority and timeout. @param shutdownHook the Runnable to execute on shutdown @param priority execution priority of the shutdown hook @param timeout maximum time to wait for the hook to complete @param unit time unit for the timeout
771 Registers a shutdown hook. @param shutdownHook the hook to add @return true if successful, false otherwise
772 Adds a shutdown hook with minimum timeout. @param shutdownHook the Runnable to execute on shutdown @return true if added successfully, false otherwise
773 Loads a resource as an InputStream. @param resourceName name of the resource to load @return InputStream for the resource or throws IOException if not found
774 Constructs a LineReader with the specified InputStream. Uses default buffer size. @param in InputStream to read from
775 Executes function with rate limiting and platform-specific configuration. @throws IOException if an I/O error occurs during execution
776 Creates a named thread factory with normal priority. @param prefix name prefix for threads @return ThreadFactory that creates threads with specified name and priority
777 Increases array capacity if size exceeds threshold and max length isn't reached.
778 Creates an ArrayList from Iterator elements. @param elements Iterator of elements to add to the list @return ArrayList containing the elements from the iterator
779 Adds all elements from the source iterable to the target collection. @param addTo collection where elements will be added @param elementsToAdd iterable of elements to add @return true if any element was added, false otherwise
780 Creates an ArrayList with a specified initial capacity. @param initialArraySize the initial size of the array list @return an ArrayList instance with the given initial capacity
781 Masks and writes an object to an output stream. @param instance the object to be masked @param dataOutputStream the output stream to write to
782 Initializes operation duration with current start and finish times.
783 Sets the 'finished' flag based on m1's result. @param none @return void
784 Converts duration using mask functions. @return Duration object after applying mask conversion
785 Masks data using nested transformation functions. @return masked string result of transformations
786 Computes a masked value using modular exponentiation. @param lengthBytes the number of bytes in the input data @param mod the modulus for the operation @return the computed masked value as an integer
787 Computes masked CRC value. @param crcA first CRC value @param crcB second CRC value @param monomial polynomial coefficient @param mod modulus for operation @return XOR result of modified crcA and crcB
788 Masks an integer value into a byte array. @param value integer to be masked @return byte array containing the masked value
789 Masks a 4-byte array as a hexadecimal string. @param bytes byte array of length 4 @return masked hexadecimal string representation @throws IOException if input array is not of length 4
790 Masks byte array into hexadecimal string. @param bytes input byte array @return masked hexadecimal representation of the byte array @throws IOException if byte array length is not divisible by 4
791 Unpacks a JAR file to a directory based on regex pattern. @param inputStream input stream of the JAR file @param toDir target directory for unpacking @param unpackRegex regex pattern for filtering entries @throws IOException if an I/O error occurs
792 Unpacks files from a JAR archive to a directory based on regex pattern. @param jarFile the source JAR file @param toDir the target directory for unpacked files @param unpackRegex regex pattern to filter entries @throws IOException if an I/O error occurs
793 Finds position of byte 'b' in UTF array within range. @param utf byte array containing UTF data @param start starting index for search @param length number of bytes to consider @param b byte to find @param n number of occurrences to find @return last found position or -1 if not found
794 Stores a key-value pair with weak reference. @param key unique identifier for the value @param value object to be stored @return the stored value wrapped in a WeakReference
795 Retrieves value by key using nested map operations. @param key unique identifier for the value @return value associated with the key or null if not found
796 Checks if a value exists for the given key. @param key the key to check @return true if a value exists, false otherwise
797 Creates or retrieves a value associated with a key. @param key unique identifier for the value @return the created or retrieved value
798 Cleans up expired entries in the map. @return number of removed entries
799 Resets and returns a snapshot of current suppression stats. @return SuppressedSnapshot containing count and max wait time
800 Calculates and masks the time difference between two timestamps. @param finishTime end timestamp in milliseconds @param startTime start timestamp in milliseconds @return masked time difference as a string
801 Masks input string into a key-value map. @param str input string to be masked @return Map of key-value pairs after masking
802 Splits a string by a separator, handling escape characters. @param str input string to split @param escapeChar character used to escape the separator @param separator delimiter for splitting the string @return array of split strings or null if input is null
803 Masks characters in a string using an escape character. @param str input string to process @param escapeChar character used for escaping @param charsToEscape array of characters to be escaped @return masked string with escape characters added
804 Masks characters in a string based on escape rules. @param str input string to process @param escapeChar character used for escaping @param charsToEscape array of characters that need to be escaped @return masked string or throws IllegalArgumentException if invalid
805 Returns version information string. @return Version info as a string
806 Returns version information. @return Version string from common info
807 Returns version information. @return version string from common info
808 Returns version information. @return Version string from common info
809 Retrieves version information. @return Version string from common info
810 Returns version information string. @return Version info from COMMON_VERSION_INFO
811 Returns version information from a common source. @return Version string from COMMON_VERSION_INFO
812 Returns version information. @return Version string from common info
813 Returns version information. @return Version string from common info
814 Initializes a filtering iterator. @param source remote iterator to wrap @param filter function to apply for filtering elements
815 Initializes a new HaltableRemoteIterator. @param source the underlying iterator to wrap @param continueWork logic to determine if iteration should continue
816 Checks if there is a next element. @return true if next exists, false otherwise @throws IOException if an I/O error occurs
817 Initializes with an object and sets close flag to true. @param o the object to be managed
818 Executes a callable asynchronously. @param executor execution context @param call task to be executed @return CompletableFuture representing the asynchronous computation
819 Initializes a reference with a callable that constructs an object. @param constructor callable to create the referenced object
820 Creates a LazyAtomicReference with a supplier. @param supplier provides the value lazily @return LazyAtomicReference instance initialized with the supplier
821 Checks and calls m2 if not closed, then returns result of super.m3(). @throws IOException if an I/O error occurs
822 Calls m1 and returns its result. @throws IOException if an I/O error occurs during execution
823 Executes a callable that may raise an I/O exception. @param call Callable object to execute @return Result of the callable execution
824 Converts CallableRaisingIOE to Supplier by masking IOExceptions. @param call the CallableRaisingIOE instance @return a Supplier that executes the callable without throwing IOEs
825 Creates a builder for masking remote iterator items. @param items RemoteIterator containing items to be masked @return Builder instance initialized with the given items
826 Masks exceptions by merging them into a single exception. @param exceptions collection of exceptions to be processed @throws E the merged exception
827 Constructs a builder with items from an iterable. @param items collection of items to be processed
828 Returns a builder instance with default enabled flag. @return Builder instance configured with defaults
829 Masks and rethrows an ExecutionException as an IOException. @param e the ExecutionException to mask @throws IOException the masked exception
830 Throws an IOException from a CompletionException. @param e the CompletionException to process @throws IOException if processing fails
831 Configures an object using Hadoop JobConf if applicable. @param theObject object to be configured @param conf configuration object
832 Retrieves a class by name. @param name the fully qualified class name @return the Class object for the given name @throws ClassNotFoundException if the class is not found
833 Generates a thread dump with detailed information. @param stream output stream for the dump @param title title of the thread dump
834 Initializes configuration with default loading option. @param loadDefaults flag to determine if defaults should be loaded
835 Sends error response to client. @param response HttpServletResponse object @param status HTTP status code @param ex Throwable exception @throws IOException if an I/O error occurs
836 Creates a JSON response for an error. @param status HTTP status code @param ex exception object causing the error @return Response object with error details in JSON format
837 Initializes a new PureJavaCrc32C instance and resets its state.
838 Iterates over elements and performs operations.
839 Generates command to get groups for a user. @param user username @return array of strings representing the command
840 Generates command to fetch groups for a user. @param user username to query @return array of strings representing the command
841 Returns command array for file listing. @return Array of strings representing the command and its options
842 Generates command for setting file permissions. @param perm permission string @param recursive true if applied recursively @return array of command strings
843 Generates chown command array. @param owner user or group to own the file @return command array for Windows or Unix
844 Creates a symbolic link command. @param target path to the target file or directory @param link path where the symlink should be created @return array of command strings for symlink creation
845 Generates command array for reading a symbolic link. @param link path to the symbolic link @return array of strings representing the command
846 Generates a command array for killing a process. @param code kill signal code @param pid process identifier @return string array representing the shell command
847 Creates a new File with the specified parent and basename. @param parent parent directory as File @param basename name of the file @return new File instance
848 Retrieves Hadoop home directory file. @return File object representing Hadoop home directory @throws FileNotFoundException if directory not found
849 Retrieves the Hadoop home directory file. Throws FileNotFoundException if Hadoop home setup failed. @return File object representing the Hadoop home directory
850 Locates an executable file within the Hadoop bin directory. @param hadoopHomeDir Hadoop installation directory @param executable name of the executable to find @return File object representing the executable @throws FileNotFoundException if executable is not found or access issues occur
851 Returns the WinUtils file or throws an exception. @throws FileNotFoundException if WinUtils is not available
852 Masks shells by invoking specific methods. Synchronizes access to child shells and processes them.
853 Attempts to shut down a thread with a specified wait time. @param thread the thread to be shut down @return true if shutdown is successful, false otherwise
854 Shuts down an executor service with a specified wait time. @param service ExecutorService to shut down @return true if shutdown was successful, false otherwise
855 Initializes and processes a progress phase. @return Progress object representing current phase status
856 Creates and initializes a Progress object with given weightage. @param weightage the weightage for the progress phase @return initialized Progress object
857 Calculates overall progress based on phases. @return total progress as a float
858 Updates progress to 100% and calls m1 on parent. @param none @return void
859 Masks a file path. @param path original file path @return masked path as UTF-8 string or null if masking fails
860 Masks a file path by converting its content to a string. @param path the file path to mask @param stat file status object @return masked content as a UTF-8 string or null if no bytes are available
861 Converts data string to bytes and calls another method. @param path file path @param data input string data @param version data version @throws Exception if conversion fails or method call throws
862 Creates a persistent ZNode in ZooKeeper. @param path the path of the ZNode to create @param zkAcl the ACLs for the ZNode @return true if the ZNode was created, false otherwise
863 Checks and processes file path. @param path file path to be processed @return true if processing succeeds, false otherwise
864 Applies ACL mask to a path. @param path the target path @param fencingACL list of access control entries for fencing @param fencingNodePath path for fencing node
865 Registers a program with a given name and description. @param name unique identifier for the program @param mainClass class containing the main entry point @param description brief description of the program @throws Throwable if registration fails
866 Sets a method for the builder. @param targetClass class containing the method @param methodName name of the method @param argClasses argument types of the method @return Builder instance
867 Masks a method in the specified class. @param targetClass the class containing the method @param methodName the name of the method to mask @param argClasses argument classes for the method @return Builder instance or throws exception if method not found
868 Creates an unbound method with specified name and two modifiers. @param name method name @return UnboundMethod object configured with m1() and m2()
869 Checks if none of the provided methods meet condition m1. @param methods array of UnboundMethod objects to check @return true if all methods fail m1, false otherwise
870 Checks if the unbound method is not masked. @param method the unbound method to check @return true if the method is not masked, false otherwise
871 Binds a method to an object. @param receiver target object for method binding @return BoundMethod instance or throws exception if binding fails
872 Creates a new StaticMethod instance. @return StaticMethod object
873 Masks class information. @param clazz Class object to process @return Masked string based on class methods
874 Masks class information. @param clazz Class to mask @return Masked string representation of class methods and file
875 Writes checksum to output stream. @param out DataOutputStream to write to @param reset true to reset after writing @return size of written data or 0 if none
876 Writes checksum to buffer. @param buf target byte array @param offset starting position in buffer @param reset flag to reset state after writing @return size of written data or 0 if no data written
877 Creates a rate limiting instance based on capacity. @param capacity maximum allowed requests per unit time @return RateLimiting object; uses m1 if capacity is 0, otherwise uses RestrictedRateLimiting
878 Registers UNIX signal handlers for TERM, HUP, and INT. Logs success or failure for each signal handler registration.
879 Initializes a LightWeightGSet with a specified length. @param recommended_length the desired initial capacity
880 Masks host details based on include and exclude sets. @param includes set of strings to include @param excludes set of strings to exclude
881 Masks hosts based on inclusion and exclusion criteria. @param includeHosts set of hosts to include @param excludeHosts map of hosts to exclude with priority levels
882 Hashes input key array using a custom algorithm. @param key byte array to hash @param nbytes number of bytes in the key @param initval initial value for hashing @return hashed integer value
883 Creates a hash based on the specified type. @param type hash algorithm identifier (JENKINS_HASH or MURMUR_HASH) @return Hash object or null if invalid type
884 Initializes an empty Counting Bloom Filter.
885 Constructs a new instance of BloomFilter.
886 Constructs a new instance of DynamicBloomFilter.
887 Computes hash values for a given key. @param k input key @return array of hash values
888 Constructs an AutoCloseableLock using a new ReentrantLock.
889 Calls method m1 to execute functionality.
890 Logs error message and prints stack trace. @param e exception to log @param text message template @param args arguments for the message template
891 Logs an error message with code and description. @param errorcode numeric error identifier @param text descriptive error message
892 Logs class loading and retrieves its code source URL. @param name name of the class being loaded @param clazz Class object to be processed
893 Retrieves data using mask function. @return GcData object containing masked data
894 Initializes a new CRC-32 checksum calculator.
895 Executes shutdown hooks and counts timeouts. @return Number of timeout occurrences
896 Adds an element to the heap and increments its size. @param element the element to be added to the heap
897 Removes and returns the root element of the heap. @return the root element or null if the heap is empty
898 Calls method m1 to perform masking operation.
899 Converts iterator to HashSet. @param elements iterator of elements to add @return HashSet containing all elements from the iterator
900 Creates a HashSet with an initial capacity. @param expectedSize estimated number of elements @return HashSet instance with specified initial capacity
901 Updates mask with a new value. @param newValue new mask value to set @throws IllegalStateException if newValue is less than current value
902 Creates a table listing with specified columns and settings. @return TableListing object configured with default parameters
903 Checks if a key is masked. @param key the key to check @return true if key is masked, false otherwise
904 Checks if a name is masked based on deprecation rules. @param name the name to check @return true if name is masked, false otherwise
905 Reloads all configurations from the registry. Logs a message if logging is enabled.
906 Masks resource by name, ensuring defaults are loaded. @param name the resource name to mask
907 Converts a time duration string to a specified unit. @param name descriptive name of the time duration @param vStr input time duration string @param defaultUnit default TimeUnit if parsing fails @param returnUnit target TimeUnit for conversion @return converted time duration in milliseconds
908 Masks tags and stores them in a Properties object. @param tagList list of tags to be masked @return Properties object containing masked tags
909 Masks sensitive values based on key. @param key identifier for the value @param value original value to be masked or returned @return masked value or original value if not sensitive
910 Masks sensitive XML values based on key. @param key identifier for the value @param value original string value @return masked value or original if not sensitive
911 Initiates a server reconfiguration task. Throws IOException if the server is stopped or another task is running.
912 Constructs a DeprecationContext with updates from deltas. @param other existing DeprecationContext to copy from @param deltas array of DeprecationDelta objects containing updates
913 Constructs a ReconfigurationException with property details and cause. @param property the configuration property name @param newVal the new value of the property @param oldVal the old value of the property @param cause the underlying exception cause
914 Constructs a ReconfigurationException with property details. @param property the name of the reconfigured property @param newVal new value for the property @param oldVal old value of the property
915 Checks if manual HA state management is allowed. @param target the HAServiceTarget to check @return true if allowed, false otherwise
916 Executes a command on an SSH session. @param session the SSH session to execute the command on @param cmd the command to be executed @return exit status of the command execution @throws JSchException if there is an error with the SSH connection @throws InterruptedException if the thread is interrupted during execution @throws IOException if there is an I/O error during command execution
917 Checks service health and state for failover eligibility. Throws exception if service is not healthy or in observer state.
918 Reads data from a file range into a ByteBuffer using an operation function. @param range the FileRange to read from @param buffer the ByteBuffer to write data to @param operation the Function4RaisingIOE to perform the read operation @throws IOException if an I/O error occurs during reading
919 Applies a mask to filter and validate file ranges. @param input list of file ranges to process @param fileLength optional total file length for validation @return filtered and validated list of file ranges @throws EOFException if any range exceeds file bounds
920 Initializes BlockManager with provided block data. @param blockData required block data configuration
921 Masks buffer data. @param data BufferData to be masked
922 Masks an item by adding it to a list and checking pool membership. @param item the item to mask
923 Validates and throws an exception if the current state does not match any of the expected states. @param states array of expected states
924 Validates and processes an argument. @param arg value to validate @param argName name of the argument for error messages
925 Validates collection size and performs masking. @param collection the collection to validate @param numElements expected number of elements @param argName name of the argument for error messages
926 Masks a file path and checks for existence. @param path the file path to mask @param argName name of the argument representing the path
927 Initializes a bounded resource pool with a specified size. @param size maximum number of resources in the pool
928 Initializes a BufferPool with specified size and buffer size. @param size maximum number of buffers in the pool @param bufferSize size of each buffer @param prefetchingStatistics statistics for memory allocation tracking
929 Masks a block by number. @param blockNumber identifier of the block to mask
930 Initializes a new BufferData instance. @param blockNumber the block number to associate with the buffer @param buffer the ByteBuffer containing data
931 Initializes a Retryer with specified delays and intervals. @param perRetryDelay delay between retries in milliseconds @param maxDelay maximum delay before giving up in milliseconds @param statusUpdateInterval interval for updating retry status in milliseconds
932 Masks array elements and validates length. @param array input array to be masked @param argName name of the argument for validation
933 Masks byte array with given name. @param array byte array to be masked @param argName name of the array argument
934 Applies masking to array elements. @param array input short array to be masked @param argName name of the argument for logging purposes
935 Masks an array by calling two helper methods. @param array the integer array to be masked @param argName name of the argument for logging purposes
936 Masks array elements and validates length. @param array long array to be masked @param argName name of the argument for validation
937 Applies a mask to iterable elements. @param iter the iterable to process @param argName name of the argument for logging purposes
938 Masks paths by deleting invalid ones. @param paths collection of file paths to process @return list of entries with deleted paths and exceptions
939 Applies transformation function to serialized source. @param source Serializable input data @param fun Transformation function that may raise IO exception @return Result of the transformation function
940 Initializes a FlagSet with specified parameters. @param enumClass the Enum class to use for flag values @param prefix prefix for enum names @param flags optional initial set of flags
941 Closes the resource and caches it. @throws IOException if an I/O error occurs
942 Recursively calls itself with a casted parameter. @param o object to be cast and processed @return result of recursive call
943 Calls superclass method to compare file statuses. @param o FileStatus object to compare @return Comparison result as an integer
944 Filters file statuses by given path. @param stats array of FileStatus objects @param path specific path to filter by @return filtered array of Paths or single-element array with path if stats is null
945 Checks if the specified path has read-only access. @param path file system path to check @param capability capability string to evaluate @return true if path is read-only, false otherwise
946 Creates a JsonSerialization instance for IOStatisticsSnapshot. @return JsonSerialization object configured for IOStatisticsSnapshot
947 Creates StorageStatistics from IOStatistics. @param name storage system name @param scheme storage access scheme @param source source IOStatistics object @return StorageStatistics instance
948 Returns empty storage statistics. @return EmptyStorageStatistics instance
949 Constructs an exception indicating that the specified path is a directory. @param path the problematic file path
950 Constructs an exception indicating that the specified path is not a directory. @param path the invalid path
951 Constructs a PathOperationException with the specified path. @param path the path where the operation is not supported
952 Constructs an exception indicating that a directory is not empty. @param path the path of the non-empty directory
953 Sets buffer size and returns result from m1. @param bufSize desired buffer size @return result of m1() call
954 Sets replication and returns result from m1. @param replica new replication value @return result of m1()
955 Sets block size and returns result from m1. @param blkSize new block size value @return result of m1() call
956 Enables recursion and invokes method m1. @return result of m1 invocation
957 Sets creation flag and returns result. @return result of operation
958 Sets flag based on overwrite option and returns result. @param overwrite true to use OVERWRITE flag, false otherwise @return B object from m3 method
959 Sets append flag and returns result. @return B object from m2()
960 Sets the internal hosts array. @param hosts array of host strings, can be null @throws IOException if an error occurs during interning
961 Sets cached hosts, normalizing them if provided. @param cachedHosts array of hostnames to cache
962 Initializes or resets internal names array. @param names array of name strings to be processed @throws IOException if an I/O error occurs during processing
963 Sets topology paths, interning strings to reduce memory usage. @param topologyPaths array of path strings or null
964 Checks if file exists and meets condition. @param f file path to check @return true if file exists and condition is met, otherwise false
965 Handles IOException by masking it or creating a PathIOException. @param path the file/directory path being processed @param methodName the method where the exception occurred @param exception the original IOException @return masked IOException or new PathIOException if masking fails
966 Masks data at specified position. @param position starting position for masking @throws IOException if I/O error occurs
967 Masks data at the first position. @throws IOException if an I/O error occurs
968 Registers expression classes with the factory. @param factory ExpressionFactory instance to register expressions with
969 Registers various command classes with the given factory. @param factory CommandFactory instance to register commands with
970 Expands file pattern with wildcards. @param filePattern pattern containing wildcards @return list of fully expanded file paths @throws IOException if an I/O error occurs
971 Recursively lists files matching a filter. @param f directory path to search @param filter criteria for file selection @return array of FileStatus objects
972 Filters and processes files. @param files array of file paths to process @param filter criteria for filtering files @return array of filtered FileStatus objects @throws FileNotFoundException if a file is not found @throws IOException if an I/O error occurs
973 Generates a delegation token for the given URL and token. @param url target URL @param token initial token @param renewer entity that can renew the token @return generated delegation token @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
974 Calls m1 with default parameters. @param url target URL @param token authentication token @return result of the call @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
975 Calls m1 with default headers. @param url target URL @param token authentication token @throws IOException if an I/O error occurs
976 Constructs a FileEncryptionInfo object. @param suite CipherSuite used for encryption @param version CryptoProtocolVersion of the encryption protocol @param edek Encrypted data encryption key @param iv Initialization vector, must match algorithm block size @param keyName Name of the encryption key @param ezKeyVersionName Version name of the EZ Key
977 Sets and processes file permissions. @param perm file system permissions to apply @return processed result of type B
978 Applies checksum option and returns result. @param chksumOpt checksum configuration options @return processed result of type B
979 Wraps an IOException with a non-null check. @param cause the original IOException to wrap
980 Constructs an FsLinkResolution with a given function. @param fn function to resolve file system links
981 Initializes a new GlobBuilder with the given file context. @param fc file context to be used
982 Initializes a new GlobBuilder with a given file system. @param fs the file system to use
983 Updates and returns permission settings. @param perm new file system permissions @return updated object instance
984 Processes with progress tracking. @param prog progress tracker @return result of processing
985 Applies checksum option and returns result. @param chksumOpt configuration for checksum calculation @return instance of B after processing
986 Masks a portion of a byte array. @param b the byte array to mask @param off the starting offset in the array @param len the number of bytes to mask @throws IOException if an I/O error occurs @throws IndexOutOfBoundsException if off or len are out of bounds
987 Checks if string s1 contains substring s2. @param s1 main string to search within @param s2 substring to find in s1 @return true if s2 is found in s1, false otherwise
988 Checks if the ZooKeeper client is current. @param ctx context object, expected to be a ZooKeeper instance @return true if client is stale and should be ignored, false otherwise
989 Retrieves or creates statistics for a file system. @param scheme the file system scheme @param cls the FileSystem class type @return Statistics object associated with the file system
990 Copies data from InputStream to OutputStream with buffer. @param in source input stream @param out destination output stream @param buffSize buffer size for copying @param close whether to close streams after operation
991 Copies data from input stream to output stream with a limit. @param in source InputStream @param out destination OutputStream @param count maximum number of bytes to copy @param close whether to close streams after operation @throws IOException if an I/O error occurs
992 Masks files in a directory. @param dir the directory to mask @throws DiskErrorException if an I/O error occurs
993 Checks if any storage type quota is positive. @return true if any quota is greater than zero, otherwise false
994 Checks if any type has been consumed. @return true if any type is consumed, false otherwise
995 Overrides method to call superclass implementation. @param o the object to be passed to the superclass method @return result of the superclass method call
996 Calls the superclass implementation of m1. @return result from superclass's m1 method
997 Calls function m1 with default arguments.
998 Updates mean statistics mask with another statistic. @param other MeanStatistic object to update from
999 Generates a masked string representation of IOStatistics. @param statistics the IOStatistics object to mask @return a formatted string or empty if statistics is null
1000 Masks data in StringBuilder based on map and predicate. @param sb StringBuilder to append masked data @param type type of data being masked @param map map containing data to mask @param isEmpty predicate to check if data is empty
1001 Creates a duration tracker with default count. @param key identifier for tracking @return DurationTracker object
1002 Generates an iterator of LongStatistic objects. @return Iterator<LongStatistic> containing processed statistics
1003 Masks metrics by invoking three methods with different suffixes. @param prefix common prefix for metric names @param durationMillis time duration in milliseconds
1004 Resets instance and returns I/O statistics. @return IOStatistics object containing I/O metrics
1005 Applies a mask function to dynamic IO statistics. @param key identifier for the statistics @param eval function to evaluate and apply as long @return DynamicIOStatisticsBuilder instance
1006 Registers a function to evaluate statistics for a given key. @param key identifier for the statistic @param eval function to compute the statistic value @return this builder instance
1007 Applies a function to evaluate and set statistics for a given key. @param key the identifier for the statistic @param eval function to compute the statistic value from the key @return DynamicIOStatisticsBuilder instance for method chaining
1008 Applies a mask function to dynamic I/O statistics. @param key identifier for the statistics entry @param eval function to evaluate and apply as a long value @return DynamicIOStatisticsBuilder instance for chaining
1009 Sets mask evaluation function for dynamic I/O statistics. @param key unique identifier for the statistic @param eval function to calculate mean statistic @return DynamicIOStatisticsBuilder instance
1010 Masks an interrupt signal. @param signalName name of the signal to mask
1011 Returns statistics as a map. @return Map containing I/O statistics
1012 Wraps source map with statistics passthrough. @param source input map to be wrapped @return wrapped map with statistics tracking
1013 Returns a new instance of IOStatisticsSnapshot. @return IOStatisticsSnapshot object representing current I/O statistics
1014 Initializes an IOStatisticsContextImpl with given thread and ID. @param threadId unique identifier for the thread @param id unique identifier for the context
1015 Creates and returns a new IOStatisticsSnapshot instance. @return IOStatisticsSnapshot object initialized with default values
1016 Checks if a specific I/O operation mask is enabled. @return true if the mask is enabled, false otherwise
1017 Returns I/O statistics from operation. @return IOStatistics object containing stats
1018 Executes input processing and returns statistics. @return IOStatistics containing processing results
1019 Retrieves I/O statistics. @return IOStatistics object containing I/O metrics
1020 Returns I/O statistics. @return IOStatistics object containing I/O data
1021 Returns I/O statistics. @return IOStatistics object containing I/O metrics
1022 Returns IO statistics for the wrapped stream. @return IOStatistics object containing statistics
1023 Returns I/O statistics. @return IOStatistics object containing I/O metrics
1024 Returns I/O statistics from input. @return IOStatistics object containing statistics
1025 Returns I/O statistics. @param in input data @return IOStatistics object containing stats
1026 Validates CRC for data block. @param type data type identifier @param algorithm checksum calculation algorithm @param data input data array @param dataOffset starting offset in data array @param dataLength length of data to validate @param bytesPerCrc number of bytes per CRC segment @param crcs expected CRC values array @param crcsOffset starting offset in CRCs array @param filename source file name for error reporting @param basePos base position in file for error reporting @throws ChecksumException if CRC validation fails
1027 Masks and decrypts data at a given position. @param decryptor Decryptor instance for decryption @param position Data position to mask and decrypt @param iv Initialization vector for decryption process
1028 Processes data encryption with padding. Throws IOException on I/O errors.
1029 Constructs an MD5MD5CRC32GzipFileChecksum with default values.
1030 Constructs an MD5MD5CRC32CastagnoliFileChecksum instance.
1031 Constructs a new GlobPattern with the specified pattern. @param globPattern the glob pattern to use
1032 Reads file content as string. @param file the file to read @throws IOException if an I/O error occurs
1033 Masks a file path for use in shell commands. @param file the File object to mask @return masked file path as a String @throws IOException if an I/O error occurs
1034 Extracts files from a ZIP input stream to a target directory. @param inputStream source ZIP archive input stream @param toDir target directory for extracted files @throws IOException if extraction fails
1035 Unzips a file to a specified directory. @param inFile input ZIP file @param unzipDir target directory for extraction @throws IOException if an I/O error occurs during unzipping
1036 Releases an SFTP channel back to the pool. @param channel the SFTP channel to release
1037 Shuts down the connections and clears resources.
1038 Initializes buffer and checksum arrays. @param size size of the buffer to initialize
1039 Copies statistics from another instance. @param other the source Statistics object to copy from
1040 Aggregates bytes read from statistics. @return total bytes read as long
1041 Aggregates total bytes written using a StatisticsAggregator. @return Total bytes written as a long value
1042 Aggregates read operations from statistics. @return Total number of read operations
1043 Aggregates large read operations. @return Total count of large read operations
1044 Aggregates write operations from statistics. @return Total number of write operations
1045 Aggregates remote read times from statistics. @return Total remote read time in milliseconds
1046 Aggregates statistics data. @return Aggregated StatisticsData object
1047 Aggregates erasure-coded bytes read. @return Total aggregated bytes read
1048 Aggregates statistics and updates root data.
1049 Handles file operations based on flags. @param path the file path object @param pathExists whether the file already exists @param flag set of operation flags (CREATE, APPEND, OVERWRITE) @throws IOException if file handling fails due to non-existent file or invalid flags
1050 Masks flags and validates APPEND presence. @param flag set of creation flags
1051 Masks a URI with a supported scheme and adjusts the port. @param uri original URI to mask @param supportedScheme target URI scheme @param authorityNeeded flag indicating if authority is required @param defaultPort default port to use if not specified in URI @return masked URI with adjusted scheme and port @throws URISyntaxException if URI construction fails
1052 Initializes an ArrayPrimitiveWritable with a specified component type. @param componentType the primitive class type of array elements
1053 Converts permission string to bitmask. @param permString permission string with characters 'r', 'w', 'c', 'd', 'a' @return integer bitmask representing permissions or throws exception for invalid input
1054 Calls overloaded method with default timeout. @param defaultOpt default checksum option @param userOpt user-specified checksum option @return result of the checksum operation
1055 Generates a masked URI. @return Masked URI
1056 Constructs a ContentSummary with specified counts. @param length total content length in bytes @param fileCount number of files @param directoryCount number of directories
1057 Calls m1 with null as the argument. @throws IOException if an I/O error occurs
1058 Constructs an HttpReferrerAuditHeader using a builder. @param builder configuration for constructing the header
1059 Processes buffer data, releases resources, and updates pool. @param data BufferData object to process
1060 Constructs a SemaphoredDelegatingExecutor with specified parameters. @param executorDelegatee underlying ExecutorService to delegate tasks @param permitCount number of permits for semaphore control @param fair true if semaphore should be fair in granting permits
1061 Releases the 'ready' block with the highest priority. @param blockNumber identifier for the block to process
1062 Calls m1 and returns result of buffer.m2.
1063 Checks if position is within buffer range. @param pos position to check @return true if position is within buffer, false otherwise
1064 Masks and returns the buffer start offset. Calls m1() before returning the value. @return masked buffer start offset as a long
1065 Returns active I/O statistics context if enabled, otherwise returns empty context.
1066 Masks IO statistics context. @param statisticsContext the context to be masked or null for default behavior
1067 Combines file ranges into chunks. @param sortedRanges list of sorted FileRange objects @param chunkSize size of each chunk @param minimumSeek minimum seek distance @param maxSize maximum size for combined range @return list of CombinedFileRange objects
1068 Combines file ranges with CRC offsets. @param dataRanges list of file ranges to process @param bytesPerSum number of bytes per sum calculation @param minSeek minimum seek distance for combining @param maxSize maximum size for combined range @return list of combined file ranges
1069 Constructs a new Name instance with default visibility.
1070 Evaluates expressions recursively. @param item PathData to evaluate @param depth current recursion depth @return Result of evaluation
1071 Returns FindOptions with mask applied. @return FindOptions object
1072 Parses command-line arguments. @param args list of command-line arguments
1073 Returns masked function description. @return Deprecated message or actual command description
1074 Logs an error message with a prefix. @param message the error message to log
1075 Generates a command string based on conditions. @return formatted command string
1076 Initializes ScopedAclEntries with given ACL entries. @param aclEntries list of Access Control List entries
1077 Formats and prints table data. @param out PrintStream to output formatted data
1078 Creates a new Location with specified mask setting. @param allow determines mask allowance @return Location object configured with mask setting
1079 Creates a Data object with mask status. @param allow indicates whether masking is allowed @return Data object initialized with mask status
1080 Constructs a new Shell instance with default ID.
1081 Masks a delegation token. @param dToken original token to be masked @return masked DelegationTokenAuthenticatedURL.Token object
1082 Retrieves file status iterator for a given path. @param f file path to search @return iterator of LocatedFileStatus objects
1083 Opens a file for reading. @param path the file path @param parameters additional open parameters @return CompletableFuture of FSDataInputStream @throws IOException if an I/O error occurs
1084 Retrieves a FileSystem instance. @return FileSystem object or null if unavailable
1085 Processes data from input buffer to output buffer. @param input source ByteBuffer containing data @param output destination ByteBuffer for processed data @return length of processed data in bytes @throws ShortBufferException if not enough space in output buffer
1086 Encrypts data into the provided ByteBuffer. @param output ByteBuffer to store encrypted data @return Length of encrypted data written to buffer @throws ShortBufferException if output buffer is too small @throws IllegalBlockSizeException for invalid block size @throws BadPaddingException for padding issues
1087 Parses interceptor settings string and returns a RegexMountPointInterceptor. @param interceptorSettingsString configuration string for the interceptor @return RegexMountPointInterceptor object or null if parsing fails
1088 Masks the given URI path. @param scheme URI scheme @param path original URI path @return masked URI path
1089 Checks if a path string has a valid separator at the specified position. @param pathString the input path string to check @param slashed flag indicating if the path should end with a slash @return true if the path has a valid separator, false otherwise
1090 Checks if URI contains separator after mask. @return true if separator exists, false otherwise
1091 Applies mask to extract lower 31 bits from Path. @param p input Path object @return masked integer value
1092 Validates and masks a file path. @param path the Path to validate
1093 Finds the next available ID by scanning directory files. @param initial path to start scanning from @param lastId last known ID @return next available ID @throws IOException if file system operations fail
1094 Applies mask function to input value. @param n input number to be masked @return masked value of n, or 0 if n is non-positive @throws IOException if an I/O error occurs during processing
1095 Reads data from an InputStream into a ByteBuffer. @param stream input source to read from @param bufferPool pool for acquiring ByteBuffers @param maxLength maximum length of data to read @return ByteBuffer containing the read data or null if unsuccessful @throws IOException if an I/O error occurs
1096 Calls methods to evaluate and process entries.
1097 Initializes and configures a CommonAuditContext. @return configured CommonAuditContext instance
1098 Constructs a FsPermission with specified actions for user, group, others. @param u action for user @param g action for group @param o action for others
1099 Constructs an FsPermission object from a short mode. @param mode permission bits represented as a short
1100 Constructs an FsPermission object from DataInput. @param in source of permission data @return FsPermission object initialized with input data
1101 Processes an ACL entry with default permission. @param entry ACL entry to process @return Resulting FsAction
1102 Creates a masked permission status. @param user the owner of the file or directory @param group the group associated with the file or directory @param permission the file system permissions @return PermissionStatus object with overridden FUNC_MASK method
1103 Parses ACL specification and creates entries. @param aclSpec comma-separated ACL specification string @param includePermission flag to include permissions in entries @return list of AclEntry objects
1104 Creates FsCreateModes with masked and unmasked permissions. @param masked permission object to be masked @param unmasked original permission object @return FsCreateModes instance
1105 Masks ACL entry based on permission and type. @param aclStatus current ACL status @param fsPerm file system permissions @param entry ACL entry to process
1106 Splits input string by commas. @param str input string to split @return array of substrings separated by commas
1107 Calls m1 and returns result of byteBuffer.m2().
1108 Calls m1 and checks buffer status. @return true if buffer operation successful, false otherwise
1109 Initiates block upload process. @throws IOException if an I/O error occurs during upload
1110 Checks and sets state to closed. @return true if state was changed, false otherwise
1111 Overrides method m1 to extend functionality. Calls superclass and delegate methods.
1112 Retrieves statistics from a given URI. @param uri location of the resource @return Statistics object containing file system details
1113 Allocates resources and invokes m2 on the context. @return result of context.m2()
1114 Writes synchronization data to output stream. @throws IOException if an I/O error occurs
1115 Returns masked value from output stream. @throws IOException if I/O error occurs
1116 Calculates and returns the masked value from file system outputs. @return long value representing the mask @throws IOException if an I/O error occurs during calculation
1117 Computes content summary for a file or directory. @param f path to the file or directory @return ContentSummary object with size, file count, and directory count @throws IOException if an I/O error occurs
1118 Initializes users and groups based on ACL parts. @param userGroupStrings array containing user and group strings
1119 Converts a comma-separated string to an EnumSet. @param key configuration key for error messages @param valueString comma-separated string of values @param enumClass the Enum class to convert to @param ignoreUnknown flag to ignore unknown values @return EnumSet containing parsed enum values
1120 Checks if service is in expected state. @param expectedState required state for operation @throws ServiceStateException if current state does not match expected
1121 Initializes a new service with a specified name. @param name the unique identifier for the service
1122 Validates state transition for a service. @param name service name @param state current service state @param proposed new proposed state @throws ServiceStateException if transition is invalid
1123 Wraps an exception in a ServiceLaunchException. @param exception the original exception to wrap @return a new ServiceLaunchException with EXIT_SERVICE_CREATION_FAILURE code
1124 Masks filenames by logging and validating their existence. @param filenames array of file paths to be processed
1125 Wraps a Throwable in an ExitException. @param thrown the original exception to be wrapped @return ExitUtil.ExitException with appropriate exit code and message
1126 Initializes a shutdown hook with a weak reference to the service. @param service the service to be monitored for shutdown
1127 Logs and records the first exception as a service failure. @param exception the exception to handle
1128 Records a lifecycle event with current time and state.
1129 Stops services in reverse order. @param numOfServicesStarted number of started services @param stopOnlyStartedServices flag to stop only started services
1130 Calls m1 with default LOG and given Service. @param service the Service to process @return an Exception or null if no error occurs
1131 Compares byte arrays using UTF-8 encoding. @param o UTF8 object to compare with @return comparison result as integer
1132 Compares this UTF8 object with another for equality. @param o the object to compare with @return true if equal, false otherwise
1133 Compares two MD5 hashes. @param that another MD5Hash object to compare with @return comparison result as an integer
1134 Compares this object with another BinaryComparable. @param other the other BinaryComparable to compare with @return result of comparison: 0 if equal, negative if less, positive if greater
1135 Compares byte arrays using specific comparator methods. @param other byte array to compare against @param off starting offset in the 'other' array @param len length of the segment to compare @return result of comparison as integer
1136 Returns mask value using comparator logic. @return integer result of mask calculation
1137 Masks and converts byte array to double. @param bytes source byte array @param start starting index in byte array @return masked double value
1138 Adjusts array size based on input. @param size desired new size for the array
1139 Checks file readability. @param f the File object to check @return true if file is readable, false otherwise
1140 Checks write access for a file. @param f the File object to check @return true if writable, false otherwise
1141 Checks file execute permission. @param f the File object to check @return true if file is executable, false otherwise
1142 Returns singleton ReadaheadPool instance. Initializes if not already created and m1() is true. @return ReadaheadPool instance or null if conditions not met
1143 Returns mask value based on condition. @return long value from m2() if m1() is true, otherwise 0
1144 Masks data with checksums. @param data input data array @param dataOffset starting offset in data array @param dataLength length of data to process @param sums output array for checksums @param sumsOffset starting offset in sums array
1145 Creates a file with specified permissions. @param f the File to create @param permissions file access permissions @return FileOutputStream for the created file @throws IOException if file creation fails
1146 Masks data in buffers from pool. Uses CryptoStreamUtils to process each buffer.
1147 Applies cryptographic mask to input and output buffers.
1148 Retrieves file statistics for a given file descriptor. Handles different OS environments and throws IOException on errors. @param fd FileDescriptor object representing the file @return Stat object containing file statistics or null if not found
1149 Retrieves file statistics for a given path. @param path file path to retrieve stats for @return Stat object containing file information @throws IOException if an I/O error occurs or path is null
1150 Initializes a bounded byte array output stream. @param capacity initial size of the buffer @param limit maximum number of bytes that can be written
1151 Constructs an EnumSetWritable with the specified EnumSet. @param value the EnumSet to be wrapped
1152 Reads data from input stream into buffer. @param in InputStream to read from @param length number of bytes to read @throws IOException if an I/O error occurs
1153 Masks data using key buffer. @return DataInputStream with masked data
1154 Masks an object with a Base64-decoded value. @param obj the Writable object to mask @param newValue the Base64-encoded string to decode and apply @throws IOException if decoding fails or I/O error occurs
1155 Processes data using two keys and a buffer. @param b1 first byte array @param s1 start index for b1 @param l1 length of data in b1 @param b2 second byte array @param s2 start index for b2 @param l2 length of data in b2 @return result of processing with keys
1156 Checks if the block group has an acceptable number of erased blocks. @param blockGroup the ECBlockGroup to check @return true if erased count is greater than 0 and less than or equal to max allowed, false otherwise
1157 Recursively counts blocks in group. @param blockGroup ECBlockGroup to process @return Total count of blocks
1158 Identifies indexes of erased blocks. @param inputBlocks array of ECBlock objects @return array of indexes for erased blocks
1159 Validates input buffers for decoding. @param buffers array of ByteBuffers to validate
1160 Validates input buffers for decoding. @param buffers array of byte arrays to be validated
1161 Initializes erasure decoding step for Reed-Solomon and XOR. @param inputBlocks array of input data blocks @param erasedIndexes indices of erased blocks @param outputBlocks array of output data blocks @param rawDecoder Reed-Solomon decoder instance @param rawEncoder XOR encoder instance
1162 Masks input array elements based on erased indexes. @param <T> generic type of array elements @param inputs original array to be masked @param erasedIndexes indices of elements to be erased @param outputs resulting array after masking @throws IllegalArgumentException if inputs length is invalid @throws HadoopIllegalArgumentException if lengths mismatch or too many erasures
1163 Initializes a new encoding step for erasure coding. @param inputBlocks array of input data blocks @param outputBlocks array of output encoded blocks @param rsRawEncoder Reed-Solomon raw encoder @param xorRawEncoder XOR raw encoder
1164 Validates input and output arrays against encoder requirements. @param inputs array of input elements @param outputs array of output elements
1165 Merges two integer arrays up to the length of the shorter array. @param p first input array @param q second input array @return merged array containing elements from both inputs
1166 Multiplies two integer arrays representing polynomials. @param p first polynomial array @param q second polynomial array @return resulting polynomial array after multiplication
1167 Performs Gaussian elimination on a given matrix. @param matrix 2D array representing the matrix to be processed
1168 Masks data in chunks under a given header. @param header descriptive header for the masking process @param chunks array of ECChunk objects to be masked
1169 Masks data in each buffer using specified length. @param buffers array of ByteBuffers to mask @param dataLen length of data to mask in each buffer
1170 Processes ECChunk array to create ByteBuffer array. @param chunks input ECChunk array @return processed ByteBuffer array
1171 Masks data in multiple buffers. @param buffers array of byte arrays containing data to mask @param offsets array of starting offsets for masking in each buffer @param dataLen length of data to mask in each buffer
1172 Creates a default Galois Field. @return GaloisField object with default size and primitive polynomial
1173 Initializes a block compressor stream. @param out output stream to write compressed data @param compressor compressor to use for compression @param bufferSize size of the buffer @param compressionOverhead overhead for compression
1174 Initializes a ZStandard decompressor with a specified buffer size. @param bufferSize size of the direct buffers for compression and decompression
1175 Initializes a new instance with default buffer size.
1176 Retrieves compression codec class by name. @param codecName name of the codec @return Class of the compression codec or null if not found
1177 Retrieves or creates a compressor for the given codec. @param codec compression codec to use @param conf configuration settings @return Compressor instance or null if creation fails
1178 Retrieves a decompressor for the given codec. @param codec compression codec to use @return Decompressor object or null if unavailable
1179 Applies masking to a compressor. @param compressor the Compressor object to mask
1180 Masks a decompressor by checking conditions and invoking methods. @param decompressor the Decompressor object to be masked
1181 Returns the compressor class. @return Class of ZStandardCompressor
1182 Returns the decompressor class. @return ZStandardDecompressor class
1183 Initializes a new ZlibCompressor with default settings.
1184 Initializes ZlibCompressor with configuration settings. @param conf Configuration object containing compression parameters
1185 Masks configuration and initializes compressor. @param conf Configuration object for compression settings
1186 Processes gzip header and transitions to deflate stream. Throws IOException on CRC mismatch.
1187 Writes data to output stream. @param out DataOutput object to write to @throws IOException if an I/O error occurs
1188 Reads a long value and casts it to an int, throwing an exception if out of range. @param stream input data source @return int representation of the read long value @throws IOException if value is too large for an integer or IO error occurs
1189 Reads a long from stream, checks bounds, and returns as int. @param stream data input source @param lower minimum allowed value @param upper maximum allowed value @return integer within specified bounds @throws IOException if value is out of bounds or read fails
1190 Constructs a Text object with the given string. @param string the initial text content
1191 Searches for a substring in byte array starting from given index. @param what substring to search @param start starting index @return position of first occurrence or -1 if not found
1192 Writes masked string to DataOutput. @param out destination for writing data @param s input string to mask and write @return number of bytes written @throws IOException if I/O error occurs
1193 Writes a string to DataOutput with a length check. @param out destination for writing data @param s string to write @param maxLength maximum allowed length of the string in bytes @return number of bytes written @throws IOException if string exceeds maxLength
1194 Initializes the object with UTF-8 encoded data. @param utf8 byte array containing UTF-8 encoded data
1195 Updates text content and length from another Text object. @param other source Text object to copy data from
1196 Reads and processes text from input, appending to given Text object. @param str Text object to append processed text @param maxLineLength Maximum length of a line to process @param maxBytesToConsume Maximum number of bytes to consume @return Number of bytes consumed or throws IOException if too many bytes
1197 Reads and processes text up to a specified delimiter or byte limit. @param str Text object to process @param maxLineLength Maximum length of the line to read @param maxBytesToConsume Maximum number of bytes to consume @return Number of bytes consumed @throws IOException if an I/O error occurs
1198 Constructs a new instance of SortedMapWritable. Initializes with a TreeMap to maintain sorted order.
1199 Constructs a new MapWritable instance. Initializes an internal HashMap to store key-value pairs.
1200 Constructs a key with the specified byte array and default weight. @param value byte array representing the key's value
1201 Computes MD5 hash of byte array. @param data input byte array @return MD5Hash object representing the hash
1202 Computes MD5 hash for UTF-8 string. @param utf8 UTF8 object containing input data @return MD5Hash of the input data
1203 Constructs an MD5 hash from a hexadecimal string. @param hex hexadecimal representation of the MD5 hash
1204 Creates an infinite retry policy with fixed sleep. @param sleepTime duration to wait between retries @param timeUnit unit of time for sleep duration @return RetryPolicy that retries indefinitely with specified sleep
1205 Creates a retry policy with fixed sleep. @param maxRetries maximum number of retries @param sleepTime duration to wait between retries @param timeUnit unit of time for sleep duration @return RetryPolicy object configured with max retries and sleep time
1206 Creates an exponential backoff retry policy. @param maxRetries maximum number of retries @param sleepTime base sleep time between retries @param timeUnit unit for the sleep time @return RetryPolicy with exponential backoff
1207 Creates a retry policy with exponential backoff. @param maxRetries maximum number of retries @param sleepTime base sleep duration between retries @param timeUnit time unit for sleep duration @return RetryPolicy object configured with specified parameters
1208 Updates write lock timestamp if held.
1209 Records the current timestamp for acquiring a lock.
1210 Checks lock status and records timestamp. Updates timestamp if read lock is held.
1211 Creates a proxy with retry logic for interface. @param iface target interface class @param proxyProvider provider for proxy objects @param methodNameToPolicyMap method-specific retry policies @param defaultPolicy default retry policy @return proxy object implementing the interface
1212 Delegates to multipleLinearRandomRetry's m1 method. @return Result of calling m1 on multipleLinearRandomRetry instance
1213 Checks equality with another object. @param obj the object to compare @return true if equal, false otherwise
1214 Masks exceptions and returns an IOException. @param exceptions array of Throwable objects to mask @return IOException object masking provided exceptions
1215 Returns an array of strings from compression utility. @return Array of compressed string data
1216 Retrieves block state. @return block state string from rBlkState
1217 Reads and masks data from input. @param in DataInput source @return masked string or null if no data
1218 Reads remaining data and sets chunk status. @throws IOException if an I/O error occurs
1219 Returns a comparator for RawComparable based on file metadata. @param name metadata field to compare by @return Comparator object for sorting
1220 Masks and writes a chunk of data to output. @param chunk byte array containing data to process @param offset starting index in the chunk @param len length of data to mask and write @param last flag indicating if it's the last chunk @throws IOException if an I/O error occurs
1221 Masks data by writing to output stream. @param data byte array containing data to mask @param offset starting index in the data array @param len number of bytes to mask @throws IOException if an I/O error occurs
1222 Initializes encoder with output stream and chunk size. @param out data output stream to write to @param size size of the chunk @throws IOException if I/O error occurs
1223 Returns a comparator for Scanner entries. @throws RuntimeException if entries are not comparable for unsorted TFiles
1224 Checks if current location has reached or exceeded end location. @return true if reached or exceeded, false otherwise
1225 Masks location based on offset. @param offset byte offset in the file @return Location object or end if block not found
1226 Creates a new location based on block and record indices. @return Location object representing the current position
1227 Calls overloaded method with default offset. @param buf input byte array @return result from overloaded method @throws IOException if an I/O error occurs
1228 Masks and processes a string, ensuring it fits within length limits. @param string input string to be processed
1229 Converts Writable objects to a byte array. @param writables variable number of Writable objects @return byte array representation of the Writable objects
1230 Masks input string and returns byte array. @param string input to be masked @return masked data as byte array
1231 Compresses data and writes it to output. @param uncompressedDataBuffer contains raw data to compress
1232 Masks this object with another Writable. @param other the source Writable to mask with
1233 Masks and serializes key-value pair to output stream. @param key the key object to be serialized @param val the value object to be serialized @throws IOException if class mismatch or negative length occurs
1234 Generates a masked byte array. @return byte array representing the mask
1235 Serializes object to Base64 string. @param obj Writable object to serialize @return Base64 encoded string representation of the object
1236 Masks data from input buffer to output buffer.
1237 Computes distance between two nodes. @param node1 first node in the comparison @param node2 second node in the comparison @return integer distance value or Integer.MAX_VALUE if null pointer is encountered
1238 Applies mask to node. @param node input node @return masked node result
1239 Retrieves leaf nodes within a specified scope. @param scope the scope to search for nodes @return list of leaf Node objects
1240 Calculates node count within a scope, excluding certain nodes. @param scope the scope string to evaluate @param excludedNodes collection of nodes to exclude from counting @return count of nodes in scope minus excluded nodes
1241 Masks a node by removing it from its rack's node set. @param node the node to be masked
1242 Sorts nodes based on weights and applies a secondary sort if needed. @param reader node used for reading data @param nodes array of nodes to be sorted @param activeLen number of active nodes @param secondarySort optional secondary sorting logic @param nonDataNodeReader flag indicating if using non-data node reader
1243 Masks a node by removing it and handling associated resources. @param node the node to be masked @throws IllegalArgumentException if the node is an inner node
1244 Reads bytes from a file channel. @param fileCh FileChannel to read from @param position starting position in the file @param count number of bytes to read
1245 Handles various socket exceptions by masking them with detailed messages. @param destHost destination host address @param destPort destination port number @param localHost local host address @param localPort local port number @param exception original IOException to be masked @return new IOException with a detailed message
1246 Constructs a new instance of RawScriptBasedMappingWithDependency.
1247 Constructs a ScriptBasedMapping with a given DNSToSwitchMapping. @param rawMap the initial mapping configuration
1248 Constructs an InnerNodeImpl with a specified path. @param path the node's path in the hierarchy
1249 Constructs an InnerNodeImpl. @param name node name @param location node location @param parent parent node @param level hierarchy level
1250 Masks functionality with assertions and socket operations. Asserts lock, checks kick status, writes to socket, handles exceptions.
1251 Creates a DomainSocket from the specified path. @param path socket file path @return DomainSocket object @throws IOException if an I/O error occurs
1252 Creates and returns an array of two anonymous DomainSockets. @return Array containing two DomainSocket instances @throws IOException if there is an I/O error during socket creation
1253 Creates a DomainSocket from the specified path. @param path file path for the socket @return DomainSocket object initialized with the given path and file descriptor @throws IOException if an I/O error occurs during socket creation
1254 Handles masking operations for file descriptors. @param caller identifier of the calling entity @param entries map of integer keys to Entry objects @param fdSet set containing file descriptor information @param fd file descriptor number
1255 Closes the resource and notifies sockets. @throws IOException if an I/O error occurs
1256 Retrieves or creates a SelectorInfo for a channel. @param channel the SelectableChannel to process @return SelectorInfo associated with the channel's provider @throws IOException if an I/O error occurs
1257 Updates selector activity time and processes it. @param info SelectorInfo object to update
1258 Calls m1 with interface and default flag. @param strInterface network interface name @return array of IP addresses or empty if none found @throws UnknownHostException if interface is invalid
1259 Resolves hostnames for given network interface. @param strInterface network interface name @param nameserver optional DNS server to use @param tryfallbackResolution flag to attempt fallback resolution @return array of resolved hostnames or cached hostname if none found @throws UnknownHostException if no addresses are found
1260 Initializes log throttling with a specified minimum period. @param minLogPeriodMs minimum time between logs in milliseconds
1261 Records action with default recorder and current time. @param values variable number of double values to log @return LogAction object representing the recorded action
1262 Quotes HTML special characters in request parameter. @param name raw input string from request @return quoted string safe for HTML display
1263 Constructs a StringBuffer with HTML-quoted URL from request. @return StringBuffer containing quoted URL
1264 Returns HTML-quoted request parameter. @return quoted string from raw request
1265 Initializes file monitoring task. @param filePath path to monitor for changes @param onFileChange action to perform on file change @param onChangeFailure action to take on failure
1266 Calls overloaded method with default logging flag. @param mr MetricsRecord to process @return processed Record object
1267 Processes an element using a consumer and handles cleanup. @param consumer function to process the element @throws InterruptedException if thread is interrupted during processing
1268 Executes a masked operation with a consumer. @param consumer function to apply to each element
1269 Calls m1 on cacheHit to handle cache hit.
1270 Clears the cache by invoking m1 on cacheCleared.
1271 Updates cache state.
1272 Calls m1 on rpcClientBackoffDisconnected to handle disconnection.
1273 Executes slow RPC call m1.
1274 Requeues RPC calls.
1275 Executes RPC call to mask data.
1276 Writes data from ByteBuffer to channel. @param channel target WritableByteChannel @param buffer source ByteBuffer @return number of bytes written or -1 if error occurs
1277 Reads data from a channel into a buffer. @param channel source of the data @param buffer destination for the read data @return number of bytes read or -1 if end of stream
1278 Increments failure count and records last failure time.
1279 Retrieves user groups with performance monitoring. @param user username for which to fetch groups @return set of group names associated with the user
1280 Masks metrics system with specified name. @param name identifier for the metric system
1281 Generates and processes percentile-based metrics. @param ucName prefix for metric name @param uvName suffix for metric name @param desc description of the metric @param lvName level name for the metric @param pDecimalFormat formatter for percentiles
1282 Generates and processes quantile data. @param ucName prefix for name template @param uvName suffix for name template @param desc description text @param lvName level name @param df DecimalFormat instance for formatting
1283 Initializes a new MetricsRegistry with a given name. @param name the name of the registry
1284 Creates and caches a metrics tag. @param name tag name @param description tag description @param value tag value @return MetricsTag object
1285 Initializes a MutableStat with various statistical information. @param name base name of the statistic @param description detailed description of the statistic @param sampleName name for samples in statistics @param valueName name for values in statistics @param extended flag indicating if extended stats are enabled
1286 Registers metrics with a registry. @param info metrics information @param value metric value @param override flag to override existing metrics @return MetricsRegistry instance
1287 Updates statistics with given value. @param value the value to update statistics with
1288 Retrieves processing time from RPC. @return Processing time value as a double
1289 Adds value to buffer and processes it if full. @param v the value to add
1290 Computes and returns a map of Quantile to Long. @return Map containing quantiles mapped to their respective long values, or null if samples are invalid
1291 Generates a sorted list of top N NameValuePairs based on token owner stats. @param n number of top entries to retrieve @return sorted List of NameValuePair objects
1292 Processes groups by checking conditions and updating cache. @param groups list of group identifiers to process
1293 Retrieves and masks tokens. @return Collection of masked Token objects
1294 Masks user data. @param user input user string @return list of masked strings @deprecated use alternative method
1295 Masks sensitive information from a user string. @param user input user data @return set of masked strings @throws IOException if an I/O error occurs
1296 Retrieves and caches user's group memberships. @param user the username to query @return list of group names associated with the user @throws IOException if an I/O error occurs during retrieval
1297 Recursively calls itself with an empty string.
1298 Logs the value of a system property. @param property name of the system property to log
1299 Masks environment variable value. @param variable name of the environment variable
1300 Reads and prints each line from a file. @param file the File to read from
1301 Logs an error message with a category and formatted arguments. @param category error category @param message error message template @param args optional arguments for the message template
1302 Logs a warning message with formatted details. @param category type of warning category @param message base message to log @param args additional arguments for formatting the message
1303 Processes authentication using specified method. @param authMethod authentication method to use
1304 Writes a single byte to the output stream. @param b byte value to write @throws IOException if an I/O error occurs
1305 Calls overloaded method with full array range. @param b byte array to process
1306 Validates a token and returns its information. @param identifier token identifier to validate @return DelegationTokenInformation if valid @throws InvalidToken if token is not found or expired
1307 Delegates call to token manager. @param secretManager AbstractDelegationTokenSecretManager instance
1308 Updates the current master key for delegation tokens. @throws IOException if an I/O error occurs during key update
1309 Constructs a new DelegationKey with default values.
1310 Initializes a new instance with given authenticator and configurator. @param authenticator the token authenticator to use @param connConfigurator configuration for connections
1311 Checks and renews delegation token if valid. @return true if token is valid, false otherwise @throws IOException if an I/O error occurs @throws InterruptedException if thread is interrupted
1312 Reads the next byte from input stream. @return next byte as an integer or -1 if end of stream @throws IOException if an I/O error occurs
1313 Reads bytes from input stream into buffer. @param b destination byte array @param off offset in the buffer @param len number of bytes to read @return number of bytes read or -1 if end of stream
1314 Calls m2 with user and resolved InetAddress. @param user UserGroupInformation object @param remoteAddress IP address as string @throws AuthorizationException if resolution fails or access is denied
1315 Checks if m1() returns a non-null value. @return true if m1() is not null, false otherwise
1316 Creates a UserGroupInformation object for proxy users. @param user the proxy user's name @param realUser the actual user being proxied @return UserGroupInformation representing the proxy setup
1317 Masks user information, returning the underlying user if available. @param user the original UserGroupInformation object @return masked UserGroupInformation or original if masking fails
1318 Constructs a detailed message string. @return formatted message including authentication and source information
1319 Retrieves authentication method for user group info. @return AuthenticationMethod object
1320 Determines the authentication method for a user group. @param ugi UserGroupInformation object representing the user group @return AuthenticationMethod used by the user group
1321 Creates an IPC connection context. @param protocol communication protocol @param ugi user group information @param authMethod authentication method @return IpcConnectionContextProto object
1322 Validates SSL session certificate for given host. @param host target hostname @param session SSL session object @return true if validation passes, false otherwise
1323 Masks a function by name. @param name function identifier @return status code (SUCCESS or E_NOT_FOUND)
1324 Constructs a new Command instance with the given configuration. @param conf Configuration settings for the command
1325 Constructs a CommandFactory with the given configuration. @param conf Configuration object containing settings
1326 Constructs an FsShell instance. @param conf configuration settings for the shell
1327 Constructs a new instance of FindClass. @param conf Configuration object to initialize with
1328 Constructs a new instance with configuration and output stream. @param conf Configuration object @param out PrintStream for output
1329 Default constructor initializes with no configuration.
1330 Masks or formats a string based on allowed status. @return Masked or formatted string
1331 Retrieves a valid Kerberos ticket from the subject. @return KerberosTicket object or null if none is found
1332 Initializes client configuration with provided settings and utility. @param zkClientConfig ZooKeeper client configuration @param truststoreKeystore Truststore and keystore configuration @throws ConfigurationException if configuration fails
1333 Initializes an OpenSSL cipher with specified transformation and engine. @param transformation encryption algorithm and mode @param engineId optional identifier for the cryptographic engine @return OpensslCipher instance configured with given parameters
1334 Generates a key version. @param name key identifier @param options configuration options @return KeyVersion object @throws NoSuchAlgorithmException if algorithm is not supported @throws IOException if I/O error occurs
1335 Retrieves KeyVersion by name. @param name key identifier @return KeyVersion object @throws NoSuchAlgorithmException if algorithm is not found @throws IOException if metadata or key retrieval fails
1336 Handles event E based on conditions. @param e event to be processed
1337 Initializes RPC server with writable invoker.
1338 Starts the stopwatch. Throws exception if already started. @return current Stopwatch instance
1339 Stops the StopWatch and calculates elapsed time. Throws IllegalStateException if not started.
1340 Calculates elapsed time in nanoseconds. @return Total elapsed time if started, otherwise just current elapsed time
1341 Recursively processes an array of Method objects. @param methods array of Method objects to process @return result of recursive processing
1342 Generates or retrieves protocol fingerprint. @param protocol Class representing the protocol @param serverVersion Version of the server @return ProtocolSigFingerprint object for the given protocol and version
1343 Creates a RemoteException with class and message from Attributes. @param attrs object containing error details @return RemoteException instance with specified class and message
1344 Returns a list of items. @throws IOException if an I/O error occurs @return List of T or empty list if no data available
1345 Calls m3 with timing metrics from ProcessingDetails. @param callName name of the call @param schedulable Schedulable instance @param details ProcessingDetails containing timing information
1346 Checks conditions for a given priority and element. @param priority the current priority level @param e the element to check against @param includeLast whether to include the last priority level @return true if conditions are met, otherwise false
1347 Handles exceptions by logging and setting response parameters. @param t the Throwable to process @param responseParams object to store response details
1348 Constructs a VersionMismatch exception. @param interfaceName name of the interface with version mismatch @param clientVersion client's protocol version @param serverVersion server's protocol version
1349 Updates cache with new levels based on call costs.
1350 Computes or retrieves priority for a given identity. @param identity unique identifier for the item @return computed priority as an integer
1351 Calls the superclass method m1. @return result of super.m1()
1352 Returns index after executing mask functions. @return Index from m1 function
1353 Masks IP address using helper methods. @return masked IP string or null if unavailable
1354 Initializes a new MachineList with given host entries. @param hostEntries collection of host names or IP addresses
1355 Calls overloaded method with default false parameter.
1356 Calculates total free memory size. @return Total free memory in bytes
1357 Calls m1 and returns CPU time from tracker.
1358 Calculates masked CPU usage. @return Masked CPU usage percentage or UNAVAILABLE if data is unavailable
1359 Calculates and returns the CPU usage percentage. @return CPU usage as a percentage or UNAVAILABLE if not applicable
1360 Adds a key-value pair to the buffer. @param k key to be added @param v value to be added
1361 Creates a secure TransformerFactory instance. @return configured TransformerFactory with secure processing enabled @throws TransformerConfigurationException if configuration fails
1362 Creates and configures a secure SAXTransformerFactory. @return configured SAXTransformerFactory instance
1363 Formats file size. @param size file size in bytes @param humanReadable true for human-readable format, false for raw bytes @return formatted size string
1364 Converts size to a formatted string. @param size file size in bytes @param humanReadable true for human-readable format, false for raw bytes @return formatted size string
1365 Masks a number using traditional binary prefix. @param number the number to mask @return masked string representation of the number
1366 Masks a length with binary prefix. @param len the length to mask @return masked length as string with binary unit
1367 Masks file system status and logs it. @param uri URI of the file system @param fsStatus file system status object @param mountedOnPath path where the file system is mounted
1368 Calls overloaded method with full byte array range. @param bytes input byte array @return result from processing byte array
1369 Calls overloaded method with default comparator. @param s indexed and sortable object @param p starting index @param r ending index
1370 Handles exit exception by delegating to utility method. @param ee ExitException to be processed
1371 Throws an exception with given status and message. @param status error code @param message descriptive error message
1372 Handles exceptions by rethrowing as ExitException. @param status error code @param t original throwable
1373 Throws an ExitException with given status and message. @param status error code @param msg descriptive message
1374 Handles exceptions by rethrowing as HaltException. @param status error code @param t original Throwable
1375 Throws a HaltException with given status and message. @param status error code @param message descriptive error message
1376 Registers a shutdown hook for the current instance. Handles IllegalStateException if registration fails.
1377 Converts Iterable to ArrayList. @param elements iterable collection of elements @return ArrayList containing the elements
1378 Creates a linked list from an iterable. @param elements collection of elements to add @return LinkedList containing the elements
1379 Applies ACL mask and other permissions. @param perm file system permission object @param entries list of existing ACL entries @return modified list of ACL entries with applied mask and other permissions
1380 Creates an ArrayList from variable arguments. @param elements array of elements to add to the list @return ArrayList containing the provided elements
1381 Creates an ArrayList with initial capacity. @param estimatedSize expected number of elements @return ArrayList initialized with specified capacity
1382 Applies mask to file content. @param file File to be masked @param instance Instance used for masking logic @throws IOException if an I/O error occurs
1383 Initializes a StatisticDurationTracker. @param iostats store for I/O statistics @param key identifier for the statistic @param count initial count to increment
1384 Initializes a DurationInfo with logging capabilities. @param log the Logger instance to use for logging @param logAtInfo true to log at INFO level, false for DEBUG @param format the message format string @param args arguments to be formatted into the message
1385 Returns masked function name. @return Masked function name as a string
1386 Creates a CrcComposer for given checksum type and parameters. @param type checksum algorithm type @param bytesPerCrcHint hint for bytes per CRC calculation @param stripeLength length of the data stripe @return CrcComposer instance configured with specified parameters @throws IOException if an I/O error occurs during setup
1387 Applies CRC mask to combine two CRCs. @param crcA first CRC value @param crcB second CRC value @param lengthB length of data for crcB @param mod modulus value @return combined CRC result
1388 Generates and resets the current stripe's digest. @return byte array containing the digest value
1389 Masks and processes input stream. @param inputStream source data stream @param toDir target directory for processing @param name file name for output @param unpackRegex pattern for unpacking files
1390 Extracts files from a JAR archive. @param jarFile source JAR file @param toDir target directory for extracted files
1391 Calls overloaded m1 with default start and end indices. @param utf byte array containing UTF data @param b byte to search for @param n number of times to find the byte @return result of the overloaded m1 method
1392 Retrieves value for key using weak reference caching. @param key unique identifier for the value @return cached value or newly fetched value if not found in cache
1393 Logs lock warning if held time exceeds threshold. @param acquireTime timestamp when lock was acquired @param releaseTime timestamp when lock was released @param checkLockHeld flag to check if lock is currently held
1394 Masks formatted finish time with optional start time difference. @param formattedFinishTime the formatted finish time string @param finishTime the finish time in milliseconds @param startTime the start time in milliseconds @return masked time string with optional duration
1395 Splits input string using default escape and delimiter. @param str input string to split @return array of split strings
1396 Masks characters in input string using specified escape character. @param s input string to be masked @return masked string with special characters escaped
1397 Escapes specified character in string using escape character. @param str input string @param escapeChar character used for escaping @param charToEscape character to be escaped @return modified string with escaped characters
1398 Escapes specified characters in a string. @param str input string to process @param escapeChar character used for escaping @param charToEscape single character to be escaped @return processed string with escaped characters
1399 Generates a startup message for a class. @param classname name of the class starting up @param hostname host where the class is running @param args arguments passed to the class @return formatted startup message string
1400 Returns the version information. @return Version string from common info
1401 Retrieves and removes the next element. @throws IOException if an I/O error occurs @throws NoSuchElementException if no more elements are available
1402 Checks for next item and handles exceptions. @return true if there is a next item, false otherwise
1403 Creates a lazy auto-closeable reference. @param supplier provides the instance to be managed @return LazyAutoCloseableReference for managing the instance
1404 Masks file system operations for a given path. @param fs FileSystem instance @param path target Path to process @return result of bulk operation or throws exception
1405 Masks specified paths in the given file system. @param fs FileSystem instance to operate on @param base Base path for bulk delete operation @param paths Collection of paths to mask @return List of entries with masked paths and results
1406 Opens a file for reading with optional parameters. @param fs FileSystem instance @param path Path to the file @param policy Read policy for the file @param status FileStatus object (optional) @param length Length of the file (optional) @param options Additional options for opening the file (optional) @return FSDataInputStream for reading the file
1407 Reads data from InputStream into ByteBuffer at specified position. @param in input stream to read from @param position starting position in the stream @param buf buffer to store read data
1408 Masks file system operations with statistics. @param fs FileSystem instance @param path Path to be processed @return Serializable result of operation
1409 Masks JSON data. @param json input JSON string @return masked JSON as Serializable object
1410 Evaluates and returns result using function mask. @return evaluated result of type T @throws UncheckedIOException if I/O error occurs
1411 Creates a builder for filtering items. @param items collection of items to filter @return Builder instance configured with the provided items
1412 Throws an IOException from an ExecutionException. @param e ExecutionException to convert @throws IOException converted exception
1413 Masks exceptions and logs cancellation. @param future the Future object to process @return result of future execution or null on ExecutionException @throws InterruptedIOException if interrupted during wait @throws CancellationException if future is cancelled @throws RuntimeException for other unexpected issues
1414 Waits for a future to complete with a timeout. @param future the Future object to wait on @param timeout the maximum time to wait @param unit the time unit of the timeout parameter @return the result of the future @throws InterruptedIOException if interrupted during wait @throws IOException if an I/O error occurs @throws CancellationException if the future is cancelled @throws RuntimeException for other execution exceptions @throws TimeoutException if the future does not complete in time
1415 Deprecated method to handle CompletionException. @param e the CompletionException to process @return result of processing the exception @throws IOException if an I/O error occurs
1416 Processes an object with a configuration. @param theObject the object to process @param conf the configuration to apply
1417 Retrieves a Class by name, using configuration if not found. @param name class name @param conf configuration object @return Class object or throws IOException if class cannot be loaded
1418 Loads a class by name using configuration or default method. @param conf Configuration object, may be null @param className name of the class to load @return Class object if found, otherwise throws RuntimeException
1419 Retrieves a class by name using a masked approach. @param name the fully qualified class name @return the Class object if found, otherwise throws ClassNotFoundException
1420 Logs a message with stack trace if minimum interval has passed. @param log the logger to use @param title the log message title @param minInterval minimum time interval in seconds between logs
1421 Logs a message with stack trace if the minimum interval has passed. @param log Logger instance to use for logging @param title Title of the log entry @param minInterval Minimum interval in seconds between logs
1422 Initializes the AbstractFSBuilderImpl with either a path or a path handle. @param optionalPath Optional Path object @param optionalPathHandle Optional PathHandle object
1423 Constructs a new Configuration with default settings enabled.
1424 Handles HTTP response errors by throwing appropriate exceptions. @param conn HttpURLConnection instance representing the connection @param expectedStatus Expected HTTP status code
1425 Returns a CRC32C checksum instance. @return Checksum object using Java 9 Crc32C if available, otherwise PureJavaCrc32C
1426 Calls Shell's m1 method with the given user name. @param userName the user's name @return array of strings returned by Shell's m1 method
1427 Calls Shell's m1 method to process user name. @param userName user's name string @return processed result as String array or null if error occurs
1428 Constructs a command array with file permission and recursion. @param perm file permission string @param recursive flag for recursive operation @param file target file path @return command array including file
1429 Masks a process ID. @param pid process identifier to mask @return masked process ID as string array
1430 Masks data using specified functions. @throws IOException if an I/O error occurs @return masked data as a string
1431 Masks an executable file. @param executable path to the executable file @return File object representing the masked file @throws FileNotFoundException if the executable is not found
1432 Initializes progress tracking. @return Progress object representing current phase
1433 Executes a masked function n times. @param n number of iterations
1434 Creates and updates a progress object. @param status current status string @param weightage completion percentage @return updated Progress object
1435 Returns masked value using function m1. @return float result of masking operation
1436 Checks if a file exists at the given path. @param path file path to check @return true if file exists, false otherwise @throws Exception if an error occurs during checking
1437 Masks a ZK path with ACLs. @param path the ZK path to mask @param zkAcl list of ACLs to apply @throws Exception if masking fails
1438 Sets method for builder using class name and method signature. @param className name of the target class @param methodName name of the method @param argClasses argument classes for the method @return Builder instance
1439 Sets up method with target class and argument types. @param targetClass the class to target @param argClasses array of argument classes @return Builder instance for chaining
1440 Sets method for builder. @param className name of the class containing the method @param methodName name of the method @param argClasses argument classes for the method @return Builder instance
1441 Sets up builder with target class and argument classes. @param targetClass class to be built @param argClasses argument classes for the target class @return Builder instance for method chaining
1442 Retrieves a dynamic unbound method. @param source class containing the method @param returnType expected return type of the method @param name method name @param parameterTypes types of the method parameters @return DynMethods.UnboundMethod instance or null if not found
1443 Checks and throws exception if any unbound method is found. @throws UnsupportedOperationException if an unbound method exists
1444 Checks if bulk delete method is masked. @return true if masked, false otherwise
1445 Checks if file system open file method is masked. @return true if masked, false otherwise
1446 Checks availability of read operation. @param byteBufferPositionedReadableReadFullyAvailableMethod buffer method reference @return true if read is available, false otherwise
1447 Checks and processes input stream. @param in input stream to process @return true if processing is successful, false otherwise @throws IOException if an I/O error occurs
1448 Checks if mask creation is successful. @param iostatisticsSnapshotCreateMethod method to create snapshot @return true if mask created, false otherwise
1449 Checks if IO statistics context is enabled. @return true if enabled, false otherwise
1450 Checks and masks unbound methods. @param method method to be checked @throws UnsupportedOperationException if method is unbound
1451 Invokes method m2 on the result of m1() with the given receiver. @param receiver object to receive the method call @return BoundMethod instance after invoking m2 @throws NoSuchMethodException if method m2 does not exist
1452 Returns a bound method by invoking and chaining methods. @param receiver object to bind the method to @return BoundMethod instance
1453 Invokes methods m1 and m2 in sequence. @return result of m2 invocation @throws NoSuchMethodException if method not found
1454 Calls two methods in sequence and returns the result. @return result of chained method calls m1().m2()
1455 Loads and registers available file systems. Synchronizes access to ensure thread safety during loading.
1456 Computes Jenkins hash of a file. @param args array containing one filename @throws IOException if an I/O error occurs
1457 Initializes a hash function with specified parameters. @param maxValue maximum value for hashing @param nbHash number of hashes to generate @param hashType type of hash function to use @throws IllegalArgumentException if maxValue or nbHash is <= 0, or hashType is unknown
1458 Initializes a new instance of RetouchedBloomFilter.
1459 Computes the minimum value in hash buckets for a given key. @param key input key to compute mask for @return minimum bucket value or 0 if no valid value found
1460 Applies a mask to the fingerprint vector using the provided key. @param key unique identifier used for masking
1461 Applies hashing and updates vector with key. @param k the key to process @param vector array of lists for storing keys
1462 Finds index with minimum weight in hash array. @param h array of hash indices @return index with lowest weight or Integer.MAX_VALUE if none found
1463 Finds index with maximum weight from hash array. @param h array of hash values @return index of maximum weight or minimum integer value if none found
1464 Computes ratios of key and fingerprint weights. @param vectorSize size of the vectors @param keyVector array of key values @param fpVector array of fingerprint values @param ratio output array for computed ratios
1465 Reads and prints the content of a resource by name. @param name resource identifier @return SUCCESS if successful, error code otherwise
1466 Displays usage instructions and error codes. @return Error code indicating the operation result
1467 Adds or updates an element in the data structure. @param element the element to add or update @return true if successful, false otherwise
1468 Creates a sorted TreeSet from an iterable of comparable elements. @param elements collection of elements to add to the set @return TreeSet containing all elements in sorted order
1469 Creates a HashSet from an Iterable. @param elements source Iterable of elements @return HashSet containing the elements
1470 Creates a HashSet from variable arguments. @param elements array of elements to add to the set @return HashSet containing the provided elements
1471 Executes a program based on command line arguments. @param args array of command line arguments @return 0 if successful, -1 if an error occurs
1472 Adds a column to the table. @param title column header text @param justification text alignment (e.g., left, right) @param wrap enables text wrapping if true @return Builder instance for method chaining
1473 Calls overloaded method with same time unit for both parameters. @param name resource name @param vStr value string @param unit time unit @return result of the overloaded method
1474 Masks a property in configuration document. @param doc XML document to update @param conf configuration element @param propertyName name of the property to mask @param redactor optional redactor for sensitive values
1475 Updates deprecation context with deltas until stable. @param deltas array of deprecation changes
1476 Attempts to bind a listener to a port, retrying on failure. @param listener the server connector to use @param startPort initial port to attempt binding @throws Exception if all ports fail or an unexpected error occurs
1477 Masks service properties based on its state. @param target HAServiceTarget to process @param environment Map to store masked properties
1478 Reads data from a stream into a buffer based on the specified range. @param stream source of positioned readable data @param range file range to read @param buffer target byte buffer for reading data @throws IOException if an I/O error occurs during reading
1479 Masks file ranges by processing them. @param ranges list of file ranges to mask @throws EOFException if end of file is reached unexpectedly
1480 Updates state and action for prefetching. @param actionFuture future representing the action to be performed
1481 Updates state if current state matches expected. @param newState new State to set @param expectedCurrentState one or more expected current States
1482 Masks a file path with validation. @param path the file path to mask @param argName name of the argument for error messages
1483 Validates and masks a file path. @param path the file path to validate @param argName name of the argument for error messages
1484 Checks if the last block is processed. @param blockNumber current block number to process @return true if it's the last block, false otherwise
1485 Masks and calculates block size. @param blockNumber block identifier @return masked block size as long
1486 Masks a block and returns its state. @param blockNumber index of the block to mask @return State object representing the masked block's state
1487 Updates block state and calls m1. @param blockNumber identifier for the block @param blockState new state to set for the block
1488 Computes block index from offset. @param offset file position @return block index as integer
1489 Applies mask to snapshot using provided statistics. @param snapshot the data snapshot to be masked @param statistics optional IOStatistics for masking logic @return true if masking is successful, false otherwise
1490 Applies a mask to a file in the given filesystem. @param snapshot optional Serializable snapshot for statistics @param fs target FileSystem @param path Path of the file to be masked @param overwrite flag to indicate if existing data should be overwritten
1491 Applies mask to source and returns statistics counters. @param source input data to be masked @return map of statistic counters after masking
1492 Masks serializable source into gauge statistics. @param source input data to be processed @return map of gauge names and their counts
1493 Applies mask function to source and returns minimum statistics. @param source input data @return map of masked statistics
1494 Applies mask operation on serializable source. @param source input data to be masked @return map of maximum statistics
1495 Processes source to create a map of key-value pairs. @param source input data for processing @return Map with string keys and LongEntry values
1496 Returns a new FlagSet with specified parameters. @return FlagSet object initialized with enumClass, prefix, and flags
1497 Creates a FlagSet with specified enum class, prefix, and flags. @param <E> enum type extending Enum<E> @param enumClass enum class to use @param prefix string prefix for the FlagSet @param flags set of enum constants to include @return new FlagSet instance
1498 Calls m1 on file system object and resets it. @throws IOException if an I/O error occurs
1499 Masks keys and processes file systems. @param onlyAutomatic flag to process only automatically closable keys @throws IOException if any file system operation fails
1500 Converts a serializable snapshot to JSON. @param snapshot the serializable object to be converted @return JSON string representation of the snapshot
1501 Writes bytes to a file in the given FileContext. @param fileContext context for file operations @param path path to the file @param bytes data to write to the file @return updated FileContext @throws IOException if an I/O error occurs
1502 Writes lines to a file in the specified charset. @param fileContext context of the file system @param path path to the file @param lines iterable of lines to write @param cs character set for encoding @return updated FileContext object @throws IOException if an I/O error occurs
1503 Writes CharSequence to file using specified charset. @param fs FileContext for file operations @param path Path of the target file @param charseq CharSequence to write @param cs Charset for encoding @return FileContext instance used for writing @throws IOException if an I/O error occurs
1504 Creates an FSDataOutputStreamBuilder for the given path. @param path file system path @return FSDataOutputStreamBuilder configured for the path
1505 Creates an FSDataOutputStreamBuilder for the given path. @param path file system path @return FSDataOutputStreamBuilder configured with specified options
1506 Builds an FSDataOutputStream for the given path. @param path file system path @return FSDataOutputStreamBuilder instance
1507 Creates an FSDataOutputStreamBuilder for the given path. @param path file system path @return FSDataOutputStreamBuilder instance
1508 Retrieves file statuses matching the default filter. @param f file path to check @return array of FileStatus objects @throws IOException if an I/O error occurs
1509 Checks file statuses using default filter. @param files array of file paths to check @return array of FileStatus objects @throws FileNotFoundException if a file is not found @throws IOException if an I/O error occurs
1510 Creates and registers a mutable counter with given metrics info. @param info MetricsInfo object containing metadata @param iVal Initial value for the counter @return MutableCounterInt instance
1511 Updates and returns a mutable counter for given metrics info. @param info metrics information object @param iVal initial value for the counter @return MutableCounterLong instance associated with the metrics info
1512 Registers a mutable gauge with a given value. @param info MetricsInfo object containing metadata @param iVal initial long value for the gauge @return MutableGaugeLong instance registered in metrics map
1513 Registers a mutable gauge with a float value. @param info MetricsInfo object containing metric details @param iVal Initial float value for the gauge @return MutableGaugeFloat instance registered in the metrics map
1514 Creates and registers a mutable integer gauge. @param info MetricsInfo object containing metadata @param iVal initial value for the gauge @return newly created MutableGaugeInt instance
1515 Resolves a filesystem link using the provided function. @param fileContext context for file operations @param path path to the link @param fn function to resolve the link @return result of resolving the link @throws UnresolvedLinkException if link cannot be resolved @throws IOException if an I/O error occurs
1516 Creates a new GlobBuilder instance with the given FileContext. @param fileContext context for file operations @return GlobBuilder object initialized with fileContext
1517 Creates a new GlobBuilder instance. @param filesystem the FileSystem to use @return GlobBuilder object initialized with the given filesystem
1518 Handles function execution and logging. @return true if async call is returned or has an exception, false otherwise
1519 Returns an AsyncGet instance. @return AsyncGet object or null if unavailable
1520 Calls helper methods to process and mask data.
1521 Copy constructor for MeanStatistic. @param that source MeanStatistic to copy from
1522 Masks the input object. @param source the object to mask, can be null @return masked string or empty if an error occurs
1523 Returns masked value using wrapped function. @return Masked string result
1524 Returns masked string of statistics. @return Masked string or NULL_SOURCE if statistics is null
1525 Generates a masked string representation of IOStatistics. @param statistics the IOStatistics object to be processed @return a formatted string with non-zero or valid statistics, empty if null
1526 Creates a DurationTracker using the provided factory or returns a stub. @param factory optional DurationTrackerFactory instance @param statistic name of the statistic to track @return DurationTracker object or STUB_DURATION_TRACKER if factory is null
1527 Attempts to purge a cache entry by acquiring a write lock and deleting the file. @param elementToPurge the entry to be purged
1528 Converts StorageStatistics to IOStatistics. @param storageStatistics source statistics object @return IOStatistics object with aggregated data
1529 Registers a metric with a key and an atomic long source. @param key unique identifier for the metric @param source atomic long providing the metric value @return this builder instance
1530 Applies a mask function to dynamic IO statistics. @param key identifier for the statistic @param source atomic integer representing the source value @return updated DynamicIOStatisticsBuilder instance
1531 Registers a counter metric with a mask function. @param key metric identifier @param source mutable counter to track @return this builder instance for method chaining
1532 Updates statistics with masked value from source. @param key identifier for the statistic @param source atomic long holding the source value @return this builder instance
1533 Updates statistics with masked value from AtomicInteger. @param key identifier for the statistic @param source atomic integer to mask and update @return updated DynamicIOStatisticsBuilder instance
1534 Updates statistics with masked value from source. @param key identifier for the statistic @param source atomic long holding the source value @return updated DynamicIOStatisticsBuilder instance
1535 Registers a mask function for dynamic IO statistics. @param key identifier for the statistic @param source atomic integer source for the statistic @return current builder instance
1536 Registers a metric with a key and an atomic long source. @param key metric identifier @param source atomic long providing the metric value @return this builder instance for method chaining
1537 Registers source with key for monitoring. @param key identifier for the source @param source AtomicInteger to monitor @return this builder instance
1538 Initializes interrupt handling and sets custom exception handler. Configures interrupt escalator for CONTROL_C and SIGTERM signals.
1539 Initializes and returns a new DomainSocket. @throws IOException if an I/O error occurs during socket creation
1540 Executes masked function logic. @throws IOException if an I/O error occurs during execution
1541 Masks file descriptors with buffer content. @param descriptors array of FileDescriptors to mask @param jbuf byte buffer containing masking data @param offset starting offset in the buffer @param length number of bytes to mask @throws IOException if an I/O error occurs
1542 Processes file input streams and buffer. @param streams array of FileInputStream objects @param buf byte buffer to process data @param offset starting offset in the buffer @param length number of bytes to process @return result code from m7 method @throws IOException if an I/O error occurs
1543 Creates an IOStatisticsContext instance. @param key unique identifier for the context @return IOStatisticsContextImpl object with the given key and instance ID
1544 Validates and processes data with checksums using native or Java methods. @param data ByteBuffer containing the data to be validated @param checksums ByteBuffer containing checksums for validation @param fileName name of the file being processed @param basePos base position in the file @throws ChecksumException if checksum validation fails
1545 Applies decryption mask to buffer. @param decryptor the Decryptor instance @param inBuffer input ByteBuffer to be masked @param position current position for masking @param iv initialization vector @return padding byte after processing @throws IOException if an I/O error occurs during masking
1546 Masks data at given offset. @param offset position to start masking @throws IOException if I/O error occurs
1547 Masks data in the buffer. @param b byte array to mask @param off offset in the byte array @param len number of bytes to mask @throws IOException if an I/O error occurs
1548 Synchronized method to execute m1 and superclass's m2. Skips execution if already closed. @throws IOException from m1 or super.m2
1549 Converts a glob pattern to a regex pattern. @param globPattern the input glob pattern string @return compiled regex Pattern object
1550 Determines bytes read based on distance. @param distance the distance value to determine method execution @return number of bytes read from a specific method call
1551 Creates or opens a file with specified permissions and flags. @param f file path @param absolutePermission file permissions @param flag creation flags @param bufferSize buffer size for data transfer @param replication replication factor @param blockSize block size for the file @param progress progress tracker @param checksumOpt checksum options @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
1552 Initializes an AbstractFileSystem with the given URI and configuration. @param uri the base URI for the file system @param supportedScheme the scheme supported by this file system @param authorityNeeded indicates if the URI must contain an authority component @param defaultPort the default port to use if not specified in the URI @throws URISyntaxException if the URI is invalid or does not match the configuration
1553 Masks input data and writes to output. @param inputs array of input byte arrays @param outputs array of output byte arrays @throws IOException if an I/O error occurs
1554 Processes input ByteBuffers and writes to output ByteBuffers. @param inputs array of input ByteBuffers @param outputs array of output ByteBuffers @throws IOException if an I/O error occurs
1555 Constructs an ArrayPrimitiveWritable with the given value. @param value the primitive array to be wrapped
1556 Returns the URI from the file system. @return URI representing the file system location
1557 Checks if capability is not available. @param capability capability to check @return true if capability is not available, false otherwise
1558 Processes buffer data. @param data input buffer data to process
1559 Processes and handles completed buffer data.
1560 Initializes a CachingBlockManager with given parameters. @param blockManagerParameters configuration for the block manager
1561 Reads data block into buffer. @param blockNumber identifier for the data block @param buffer destination to store read data @throws IOException if an I/O error occurs
1562 Calculates masked start offset. Calls helper methods m1 and m2. @return Calculated offset as long
1563 Checks if buffer is empty and read positions match. @return true if conditions met, false otherwise
1564 Checks conditions and updates buffer. @param pos position to check @return true if conditions met and buffer updated, false otherwise
1565 Returns an IOStatisticsContext with error handling. @return IOStatisticsContext or null if integration fails
1566 Delegates to IOStatisticsContextIntegration's m1 method. @param statisticsContext context object for I/O statistics
1567 Filters and maps metrics configurations by type. @param type configuration type filter @return Map of instance to MetricsConfig
1568 Modifies and returns a list of strings. @param args array of string arguments @param pos position for modification @return modified list of strings
1569 Increments error count and logs message. @param message the error message to log
1570 Creates a PathHandle for a file. @param stat FileStatus object representing the file @param opts Optional HandleOpt parameters @return PathHandle for the file or throws exceptions if invalid
1571 Returns an array of HandleOpt objects with default settings. @return Array containing two HandleOpt instances configured with false flags
1572 Returns an array of HandleOpt with specific options set. @return Array containing two HandleOpt instances configured differently
1573 Returns an array of HandleOpt with specific configurations. @return Array containing two HandleOpt objects configured with true and false respectively.
1574 Returns an array of HandleOpt objects with mask enabled. @return Array containing two HandleOpt instances with masks set to true
1575 Initializes a ShellCommandExecutor. @param execString command to execute @param dir working directory @param env environment variables @param timeout execution timeout in milliseconds @param inheritParentEnv whether to inherit parent environment
1576 Starts or stops a refresh thread based on the interval. @param runImmediately if true, starts the thread immediately
1577 Creates a new token with the given service. @param newService the service associated with the token @return a new PrivateToken instance
1578 Validates input conditions and throws exception if invalid.
1579 Checks conditions based on m1 and URI methods. @return true if m1 is true and both m2 and m3 are null, false otherwise
1580 Calls and returns the result of function m1. @return boolean result from m1()
1581 Validates URI scheme, authority, and port against current file system. @param path the Path to validate
1582 Writes file status to DataOutput. @param out destination for writing data @deprecated Use alternative method instead
1583 Validates and processes file upload parameters. @param filePath path to the file being uploaded @param inputStream stream containing file data @param partNumber current part number of the upload @param uploadId unique identifier for the upload session @param lengthInBytes size of the current part in bytes
1584 Processes file at given path and returns result asynchronously. @param path file path to process @return CompletableFuture with processed integer result
1585 Adjusts read length based on current position and file length. @param n requested number of bytes to read @return adjusted number of bytes that can be read @throws IOException if an I/O error occurs
1586 Applies a mask to an FsPermission. @param umask the permission mask to apply @return new FsPermission with masked permissions
1587 Converts SFTP file permissions to FsPermission. @param sftpFile SFTP entry representing a file @return FsPermission object
1588 Constructs an FsPermission with specified mode. @param mode file permission mode (e.g., 0755)
1589 Returns full permissions mask. @return FsPermission object with all permissions set
1590 Returns a permission mask with full read/write/execute permissions. @return FsPermission object representing 00777 permissions
1591 Returns file system permissions with read and write access for all users. @return FsPermission object representing 00666 permissions
1592 Returns default file permissions. @return FsPermission object with mask 00755
1593 Converts Unix symbolic permission to FsPermission. @param unixSymbolicPermission Unix permission string @return FsPermission object or null if input is null @throws IllegalArgumentException if permission length is incorrect
1594 Processes ACL entries based on conditions. @param aclStatus current ACL status @param fsPerm file system permissions @param entries list of ACL entries to process
1595 Masks ACL entries into a comma-separated string. @param aclSpec list of AclEntry objects @return masked string representation of ACL entries
1596 Constructs FsPermission from a string mode. @param mode permission string representation
1597 Reads bytes from buffer into array. @param b destination byte array @param offset start position in the array @param length number of bytes to read @return actual number of bytes read or -1 if not available @throws IOException on I/O error
1598 Calculates mask value based on position difference. @return calculated mask value as long @throws IOException if an I/O error occurs
1599 Updates format string for path data based on item statistics. @param items array of PathData objects @throws IOException if an I/O error occurs
1600 Retrieves quota usage for a given file path. @param f file path to check quota usage @return QuotaUsage object representing the quota information @throws IOException if an I/O error occurs while accessing the file
1601 Masks file path. @param path file path to mask @return masked value as long @throws IOException if I/O error occurs
1602 Initializes an AbstractLaunchableService with a given name. @param name service identifier
1603 Updates service state. @param proposed new state to set @return previous state of the service
1604 Initializes and returns a service instance. @param conf configuration object @return Service instance @throws Exception if initialization fails
1605 Compares two objects for equality based on specific criteria. @param other the object to compare with @return true if objects are equal, false otherwise
1606 Masks data in byte array. @param newData source byte array to mask @param offset starting index in newData @param length number of bytes to mask
1607 Modifies and returns an integer value from BytesWritable. @param key input BytesWritable object @return modified integer value
1608 Lists file names in a directory with permission check. @param dir directory to list files from @return array of file names @throws AccessDeniedException if access is denied @throws IOException for invalid directory or I/O errors
1609 Validates directory permissions. Throws DiskErrorException if any permission check fails.
1610 Masks data in a direct ByteBuffer. @param buffer direct ByteBuffer containing the data to mask @param len length of the data to process @throws IOException if ByteBuffer is not direct or other I/O error occurs
1611 Creates a SharedFileDescriptorFactory from given paths. @param prefix common prefix for file operations @param paths array of file paths to attempt factory creation @return SharedFileDescriptorFactory instance if successful @throws IOException if no valid factory can be created or an error occurs
1612 Processes a byte array with checksum calculations. @param b the input byte array @param off starting offset in the array @param len number of bytes to process @throws IOException if an I/O error occurs during processing
1613 Processes data and calculates checksums. @param data ByteBuffer containing input data @param checksums ByteBuffer to store calculated checksums
1614 Applies cryptographic mask to input and output buffers. Uses CryptoStreamUtils methods for masking operations.
1615 Constructs a bounded byte array output stream with specified capacity. @param capacity maximum size of the buffer
1616 Masks a value by calling another function. @param newValue new value to be masked @throws IOException if an I/O error occurs
1617 Filters ECBlocks based on a condition. @param blockGroup group of ECBlock objects @return filtered array of ECBlock objects
1618 Masks and checks for a marker in compressed data. @param marker the marker value to search for @param markerBitLength length of the marker in bits @return true if marker is found, false otherwise @throws IOException if an I/O error occurs @throws IllegalArgumentException if markerBitLength exceeds 63
1619 Initializes a CBZip2OutputStream with the specified output stream and block size. @param out the OutputStream to write compressed data to @param blockSize the compression block size (1-9) @throws IOException if an I/O error occurs
1620 Constructs a BlockCompressorStream with default block size and compression level. @param out output stream to compress data into @param compressor the compressor algorithm to use
1621 Constructs a BlockDecompressorStream. @param in input stream to read compressed data from @param decompressor decompressor to use for decompression @param bufferSize size of the buffer used for decompression @throws IOException if an I/O error occurs
1622 Masks data and writes it to the output stream. @param b byte array containing data to be written @param off starting offset in the byte array @param len number of bytes to write @throws IOException if an I/O error occurs or writing beyond end of stream
1623 Constructs a new ZStandardCompressor with specified level and buffer size. @param level compression level (0-21) @param bufferSize size of the input/output buffer
1624 Creates a CompressionOutputStream for the given codec and configuration. @param codec compression codec to use @param conf configuration settings @param out output stream to wrap @return CompressionOutputStream instance @throws IOException if an I/O error occurs
1625 Resets serializers and releases resources. Throws IOException if an I/O error occurs during reset.
1626 Creates a CompressionInputStream for decoding. @param codec the compression codec to use @param conf configuration settings @param in input stream containing compressed data @return CompressionInputStream for decompression @throws IOException if an I/O error occurs
1627 Releases decompressors and deserializers, closes input stream. @throws IOException on I/O error during resource release
1628 Returns a compressor based on configuration. @param conf configuration settings @return Compressor instance
1629 Returns a direct decompressor based on configuration. @param conf configuration settings @return DirectDecompressor instance or null if not applicable
1630 Returns a decompressor based on configuration. @param conf configuration object @return ZlibDecompressor if m1 is true, otherwise BuiltInZlibInflater
1631 Handles storing a delegation key using a DataOutputStream. @param key DelegationKey object to be stored @throws IOException if an I/O error occurs or SQL operation fails
1632 Updates delegation key using SQL secret manager. @param key DelegationKey object to be updated
1633 Reads a masked string from input with a maximum length. @param in DataInput source for the string data @param maxLength maximum allowed length of the string @return decoded string or throws exception if invalid length
1634 Masks data input by reading and processing its length. @param in DataInput stream to process
1635 Masks data from input buffer using compression filter. @param buffer input data buffer @param filter compression input stream @throws IOException if I/O error occurs
1636 Reads and masks data from input stream. @param in DataInput source @param maxLength maximum allowed length @return masked string representation of the data @throws IOException if reading fails
1637 Writes a string to DataOutput with length prefix. @param out DataOutput to write to @param s String to be written
1638 Masks IP address or hostname based on configuration. @param addr InetSocketAddress object containing address details @return Text object with masked address
1639 Creates a Token from TokenProto. @param tokenProto protocol buffer containing token data @return Token object created from proto
1640 Writes enum value to output stream. @param out DataOutput stream to write to @param enumVal Enum value to encode @throws IOException if an I/O error occurs
1641 Writes user and group names with permissions to output. @param out DataOutput stream for writing @param username User name to write @param groupname Group name to write @param permission File system permissions to write @throws IOException if an I/O error occurs
1642 Constructs a Text object from a UTF-8 byte array. @param utf8 byte array containing UTF-8 encoded text
1643 Constructs a new Text instance from another Text. @param utf8 source Text to copy
1644 Masks text based on delimiter presence. @param str input text to process @param maxLineLength maximum line length limit @param maxBytesToConsume maximum bytes to consume @return masked length or result of m1/m2 method @throws IOException if an I/O error occurs
1645 Returns masked text length. Ensures textLength is non-negative by calling m1().m2(). @return Masked text length
1646 Constructs a new SortedMapWritable by copying another. @param other the SortedMapWritable to copy from
1647 Constructs a new MapWritable by copying another. @param other the MapWritable to copy from
1648 Creates a retry policy with fixed sleep. @param maxTime maximum time for retries @param sleepTime time to sleep between retries @param timeUnit unit of time for maxTime and sleepTime @return RetryPolicy object
1649 Creates a proxied object with failover and retry capabilities. @param iface interface class to be proxied @param proxyProvider provider for the proxy instances @param retryPolicy policy for handling retries @return proxied object implementing the given interface
1650 Creates a proxy with retry policies. @param iface interface class type @param implementation concrete implementation of the interface @param methodNameToPolicyMap mapping of method names to retry policies @return proxy object with specified retry behavior
1651 Initializes a Writer for compressed data output. @param fout file output stream @param compressionName name of the compression algorithm @param conf configuration settings @throws IOException if file offset is not zero or other I/O errors occur
1652 Constructs a TFileIndex from input data. @param entryCount number of entries to index @param in DataInput stream containing the index data @param comparator BytesComparator for comparing byte arrays @throws IOException if an I/O error occurs
1653 Checks and processes data chunks. @return true if processing complete, false otherwise
1654 Masks and resets buffer content. @throws IOException on I/O error during masking
1655 Applies mask function to key. @param key input key object @return masked integer value
1656 Constructs a new UTF8 object with the given string. @param string the input string to be encoded in UTF-8
1657 Computes MD5 hash of a given string using UTF-8 encoding. @param string input text to hash @return MD5Hash object representing the hash
1658 Writes buffered records to output. @throws IOException if an I/O error occurs
1659 Generates or returns a masked tracking ID. @return Masked tracking ID as a string
1660 Masks function execution. @throws IOException if an I/O error occurs during masking
1661 Adds a new node to the network topology. @param node Node to be added
1662 Removes a node from the network topology. @param node the node to be removed Throws IllegalArgumentException if the node is an inner node.
1663 Masks a node, preventing it from being removed. @param node the node to be masked
1664 Calls overloaded method with additional parameter. @param reader Node to read from @param nodes Array of nodes to process @param activeLen Length of active section in nodes array @param secondarySort Consumer for secondary sorting logic
1665 Masks and sorts nodes using a secondary sort consumer. @param reader node to read from @param nodes array of nodes to process @param activeLen length of active nodes @param secondarySort consumer for secondary sorting logic
1666 Initializes a SocketInputStream with a readable byte channel and timeout. @param channel the readable byte channel to read from @param timeout the timeout value in milliseconds @throws IOException if an I/O error occurs or channel is invalid
1667 Initializes a SocketOutputStream with a channel and timeout. @param channel WritableByteChannel to write data to @param timeout maximum time in milliseconds for I/O operations @throws IOException if an I/O error occurs
1668 Executes a call with a timeout and handles exceptions. @param call the call to execute @param connection the connection to use @param timeout the timeout duration @param unit the time unit for the timeout @return Writable result or null if timed out @throws IOException if an I/O error occurs or call is interrupted
1669 Constructs a new ScriptBasedMapping using a default RawScriptBasedMapping.
1670 Constructs a new ScriptBasedMappingWithDependency. Initializes with a RawScriptBasedMappingWithDependency instance.
1671 Creates and returns a new InnerNodeImpl. @param parentName name of the parent node @return new InnerNodeImpl instance configured with specified parameters
1672 Handles a domain socket with a handler, adding it to processing. @param sock the DomainSocket to process @param handler the Handler for socket operations
1673 Masks a socket by removing it from processing. @param sock the DomainSocket to be masked
1674 Waits for I/O operations on a channel with a timeout. @param channel the SelectableChannel to wait on @param ops interest set of operations (e.g., OP_READ, OP_WRITE) @param timeout maximum time to wait in milliseconds @return result of the selection operation or 0 if timed out @throws IOException if an I/O error occurs
1675 Retrieves the first IP address from network interface. @param strInterface name of the network interface @return first IP address as a string @throws UnknownHostException if interface is not found
1676 Calls overloaded method with default parameters. @param strInterface network interface name @return array of IP addresses or empty if none found @throws UnknownHostException if network interface is invalid
1677 Retrieves hostname using specified interface and nameserver. @param strInterface network interface name or "default" for default @param nameserver DNS server address or "default" for system default @param tryfallbackResolution whether to attempt fallback resolution @return resolved hostname or cached one if interface is "default" @throws UnknownHostException if hostname cannot be determined
1678 Loads metrics configuration from files. @param prefix configuration key prefix @param fileNames list of property file names to load @return MetricsConfig object initialized with loaded properties or default if none found
1679 Fetches group list for a user. @param user the username @return set of group names or throws exception if none found
1680 Calls method m1 on Singleton instance.
1681 Stops the server and performs cleanup tasks.
1682 Stops monitoring and resources associated with a web app. @throws Exception if any step fails
1683 Initializes mutable quantiles with specified parameters. @param name metric name @param description metric description @param sampleName sample name @param valueName value name @param interval time interval in seconds
1684 Creates and registers a mutable statistic. @param name statistic identifier @param desc description of the statistic @param sampleName name of the sample @param valueName name of the value @param extended flag for extended statistics @return newly created MutableStat object
1685 Constructs a new MutableStat with specified names and default visibility. @param name unique identifier for the stat @param description brief description of the stat @param sampleName name of the sample data @param valueName name of the value being tracked
1686 Registers a metric with the given name. @param name unique metric identifier @return MetricsRegistry object
1687 Registers metrics with specified parameters. @param name metric name @param description metric description @param value metric value @param override flag to allow overriding existing metrics @return MetricsRegistry object
1688 Updates metrics for a named sample with elapsed time. @param name identifier for the sample @param elapsed time taken for the sample in milliseconds
1689 Masks metrics buffer and publishes statistics. @param buffer MetricsBuffer to be processed @param immediate Flag indicating immediate processing
1690 Masks statistics from another SampleStat instance. @param other SampleStat object to mask data into
1691 Logs slow RPC calls. @param methodName name of the method being called @param call Call object representing the RPC call @param details ProcessingDetails for the call
1692 Fetches and processes netgroups. @throws IOException if an I/O error occurs
1693 Calls method m1 twice, once with default parameters and once with a string argument.
1694 Logs formatted message with mask. @param format message format string @param args arguments for the format string
1695 Logs an error and throws a KerberosDiagsFailure exception. @param category the error category @param message the error message format @param args arguments for the message format
1696 Creates UserGroupInformation for a given user. @param user the username @param authMethod authentication method to use @return UserGroupInformation object
1697 Starts the expired token removal process. Throws IOException if an I/O error occurs.
1698 Masks function with synchronization and key management. @throws IOException if an I/O error occurs
1699 Constructs a new DelegationTokenAuthenticatedURL with default values.
1700 Constructs a new DelegationTokenAuthenticatedURL with a given authenticator. @param authenticator the authenticator to use for delegation token management
1701 Constructs a new instance with default authentication. @param connConfigurator configuration for connection settings
1702 Calls overloaded method with full byte array. @param b byte array to process @return result of processing @throws IOException if an I/O error occurs
1703 Checks conditions using three methods. @return true if all conditions are met, false otherwise
1704 Checks conditions using three methods. @return true if all conditions are met, false otherwise
1705 Initializes SSL socket factory with preferred mode. @param preferredMode SSL channel mode to use
1706 Constructs a new CommandFactory with no command.
1707 Constructs a new HarFileSystem instance. Requires calling initialize() to set up the underlying file system.
1708 Constructs a new HarFileSystem. @param fs underlying FileSystem object
1709 Constructs an FsShell instance with default settings. Initializes with null configuration by default.
1710 Constructor initializes with configuration and default output stream. @param conf Configuration object containing settings
1711 Constructs a Command instance. Initializes output and error streams to System.out and System.err respectively.
1712 Resolves host to InetAddress. @param host hostname or IP address string @return resolved InetAddress object @throws UnknownHostException if resolution fails
1713 Writes ACL string to output. @param out DataOutput stream to write to
1714 Initializes and returns a ZooKeeper instance. Configures SSL if truststore is provided. @return ZooKeeper instance @throws IOException on configuration or connection failure
1715 Masks a function using the provided key name. @param keyName unique identifier for the function @return integer result of the masking operation or 0 if queue is null
1716 Retrieves a list of items from the queue. @param keyName identifier for the queue @param num number of items to retrieve @return list of retrieved items
1717 Processes tasks associated with a key. @param keyName unique identifier for the task queue
1718 Handles event processing based on conditions. @param e the event to process
1719 Ensures initialization by calling m1 if not already initialized. Synchronized to prevent concurrent access issues.
1720 Converts a duration to nanoseconds. @param timeUnit target time unit @return duration in nanoseconds
1721 Generates a protocol signature based on client methods hash code and server version. @param clientMethodsHashCode hash code of client methods @param serverVersion version of the server @param protocol class representing the protocol @return ProtocolSignature object
1722 Decays current costs and updates totals. Logs decay process and handles exceptions.
1723 Applies a mask to an object's identity. @param obj the Schedulable object to process @return masked integer value
1724 Retrieves an element from a queue based on priority. @return E type element from the appropriate queue
1725 Closes the IPC connection. Handles exceptions and logs closure status.
1726 Initializes a new Globber with specified parameters. @param fs FileSystem to operate on @param pathPattern Path pattern to match files @param filter Filter to apply to matched paths @param resolveSymlinks Whether to resolve symbolic links
1727 Constructs a MachineList with specified host entries. @param hostEntries comma-separated list of host names or IP addresses
1728 Returns system info for the current OS. @return SysInfo object specific to Linux or Windows
1729 Calculates available memory size. @return available memory in bytes
1730 Calculates total memory mask. @return sum of m1 and swap size in KB
1731 Transforms XML using a stylesheet. @param styleSheet InputStream for the XSLT stylesheet @param xml InputStream for the XML document @param out Writer to output the transformation result @throws TransformerConfigurationException if configuration fails @throws TransformerException if transformation fails
1732 Generates a summary string based on storage options. @param qOption quick summary option @param hOption human-readable format option @param tOption type-specific summary option @param xOption detailed difference summary option @param types list of storage types to include @return formatted summary string
1733 Formats snapshot details into a string. @param hOption flag to include human-readable format @return formatted snapshot information as a string
1734 Calls another m3 method with runtime parameters. @param percentage decimal value representing percentage @param mapName name of the map @return result from nested m3 call
1735 Masks buffer content and updates count. @throws IOException if an I/O error occurs
1736 Reads data from buffer until specified length is reached. @param len desired number of bytes to read @return actual number of bytes read @throws IOException if an I/O error occurs
1737 Builds a string from buffer operations. @return resulting string after processing
1738 Masks data using specified buffer and methods. @return masked string representation of the data
1739 Masks byte array into a string. @param bytes input byte array to be masked @return masked string representation of the byte array
1740 Reads and masks data from input. @param in DataInput source @return Masked string representation of the data
1741 Validates RPC response header. @param header RPC response header to validate @throws IOException if validation fails or header is null
1742 Converts a single byte to its hexadecimal string representation. @param b the input byte @return hexadecimal string of the byte
1743 Handles uncaught exceptions by logging and terminating the thread. @param thread the thread where the exception occurred @param exception the throwable exception
1744 Exits the program with usage information.
1745 Handles exceptions thrown by threads during shutdown or normal operation. @param thread the thread that threw the exception @param exception the exception thrown by the thread
1746 Handles exit with code and message. @param exitCode numeric exit code @param message descriptive error or status message
1747 Throws an ExitException with a default message. @param status exit status code @throws ExitException if status meets certain criteria
1748 Logs error message and exits with given status. @param status exit status code @param msg error message to log
1749 Throws a HaltException with a default message. @param status error code for the exception
1750 Calls overloaded method with default comparator. @param s IndexedSortable object to sort @param p starting index of the range to sort @param r ending index of the range to sort
1751 Constructs an AclStatus object with specified details. @param owner the owner of the ACL @param group the group associated with the ACL @param stickyBit indicates whether the sticky bit is set @param entries iterable collection of ACL entries @param permission file system permissions
1752 Parses ACL string into list of ACL objects. @param aclString comma-separated ACL components @return List of ACL objects or empty list if input is null
1753 Parses an authorization string into a list of authentication info. @param authString comma-separated authentication components @return List of ZKAuthInfo objects @throws BadAuthFormatException if the format is incorrect
1754 Masks attributes from source to target path. @param src source PathData object @param target target PathData object @param preserveRawXAttrs flag to preserve raw extended attributes
1755 Creates ACL entries for user, group, and other based on file permissions. @param perm file system permissions object @return list of AclEntry objects representing access control rules
1756 Tracks duration for a given key and count. @param key unique identifier for the tracker @param count number of occurrences @return DurationTracker object or default if not valid
1757 Constructs a StatisticDurationTracker with default count of 1. @param iostats storage for I/O statistics @param key identifier for the statistic entry
1758 Constructs a DurationInfo with logging enabled. @param log Logger instance for logging @param format Message format string @param args Arguments for the message format
1759 Waits for a CompletableFuture to complete. @param future the CompletableFuture to wait on @throws IOException if task is cancelled or an error occurs
1760 Masks a given CompletableFuture by waiting for its completion. @param future the CompletableFuture to mask
1761 Creates a CRC composer with specified parameters. @param type checksum type to use @param bytesPerCrcHint hint for bytes per CRC block @return CrcComposer instance @throws IOException if an I/O error occurs
1762 Updates composite CRC and checks position in stripe. @param crcB current CRC value @param bytesPerCrc number of bytes processed @throws IOException if position exceeds stripe length
1763 Formats and compares times. @param dateFormat formatter for time conversion @param finishTime end time in milliseconds @param startTime start time in milliseconds @return formatted time string or result of comparison
1764 Calls overloaded method with default escape and comma characters. @param str input string to process @return processed string result
1765 Calls overloaded method with default escape and comma characters. @param str input string to process @return processed string result
1766 Masks function with given class name and arguments. @param classname name of the class @param args list of argument strings @return masked string result
1767 Masks function S. @throws IOException if an I/O error occurs
1768 Deprecated: Retrieves result from Future. @param future task to retrieve result from @return result of the Future @throws InterruptedIOException if interrupted while waiting @throws IOException for other I/O errors
1769 Collects results from a collection of futures. @param collection futures to process @return list of results @throws InterruptedIOException if interrupted while waiting @throws IOException for IO errors @throws CancellationException if any future is cancelled @throws RuntimeException for other execution issues
1770 Deprecated: Waits for a future to complete with a timeout. @param future the task to wait on @param timeout maximum time to wait @param unit time unit of the timeout @return result of the future @throws InterruptedIOException if interrupted during I/O operations @throws IOException if an I/O error occurs @throws RuntimeException for other exceptions @throws TimeoutException if the operation times out
1771 Collects results from futures within a specified timeout. @param collection of Future tasks @param duration maximum time to wait for each future @return list of results from futures @throws InterruptedIOException if thread is interrupted during I/O operations @throws IOException on I/O errors @throws CancellationException if any future task is cancelled @throws RuntimeException for other runtime issues @throws TimeoutException if a future does not complete within the timeout
1772 Waits for all futures in the collection to complete within a given duration. @param collection of Future objects @param interruptIfRunning true to interrupt running tasks, false otherwise @param duration max time to wait for each future @return list of results from completed futures
1773 Instantiates a class using provided arguments and configuration. @param theClass target class to instantiate @param conf configuration settings @param argTypes parameter types for constructor @param values argument values for constructor @return instance of T or throws RuntimeException on error
1774 Returns the key class, initializing it if necessary. @return Class<?> representing the key type
1775 Returns the Class object, initializing it if necessary. @return initialized Class object or null on failure
1776 Loads and processes a class by name. @param name class name to be loaded @return status code indicating success or failure
1777 Masks a function by creating an instance of a specified class. @param name class name to instantiate @return SUCCESS if successful, error code otherwise
1778 Creates and returns a new Configuration instance. @return Configuration object initialized with default settings
1779 Returns the configuration, using a supplied one if available. @return Configuration object
1780 Initializes a new instance of FindClass with a default configuration.
1781 Initializes a new instance with default configuration.
1782 Constructs a ReconfigurableBase with the given configuration. @param conf Configuration object; uses default if null
1783 Masks an executable command. @param executable the original command string @return masked command string @throws IOException if an I/O error occurs
1784 Executes a shell command with optional timeout. @throws IOException if an I/O error occurs during execution
1785 Updates progress with given status. @param status current status to set @return updated Progress object
1786 Calls overloaded method with default null value. @param path file path to process
1787 Checks if a file system has a specific capability for a given path. @param fs the file system object @param path the path to check capability for @param capability the capability to verify @return true if capability exists, false otherwise
1788 Checks if an object has a specified capability. @param object the object to check capabilities for @param capability the capability to verify @return true if the object has the capability, false otherwise
1789 Masks and counts statistics from source. @param source data source to process @return map of masked statistics
1790 Masks and returns statistics from source. @param source input data to process @return Map of statistic key-value pairs
1791 Calls m1 with null and given source. @param source input data to process @return map of statistics or null
1792 Processes serializable data to get statistics. @param source input data to process @return map of statistics or null if processing fails
1793 Applies a mask to the source data. @param source input data to be masked @return map of masked results
1794 Executes a masked function with variable arguments. @param args variable number of arguments for the function @return result of the function execution
1795 Configures builder with class name and argument classes. @param className name of the class to be configured @param argClasses variable number of argument classes @return Builder instance for method chaining
1796 Initializes builder with class name and argument classes. @param className name of the class to be built @param argClasses array of argument classes for the constructor @return Builder instance
1797 Retrieves a dynamic unbound method. @param source class containing the method @param returnType expected return type of the method @param name method name @param parameterTypes types of the method parameters @return DynMethods.UnboundMethod instance or throws if invalid
1798 Checks conditions on an object. @param object the object to check @return true if both conditions are met, false otherwise
1799 Checks conditions using two methods. @param object input object to evaluate @return true if both conditions are met, false otherwise
1800 Checks conditions and IO statistics for an object. @param object the Serializable object to check @return true if both conditions are met, false otherwise
1801 Checks conditions for mask function. @return true if both conditions are met, false otherwise
1802 Masks a file using specified filesystem and path. @param fileSystem the filesystem to use @param path the path of the file to mask @return result of masking operation @throws IOException if an I/O error occurs
1803 Masks specified paths in a file system. @param fs the FileSystem instance @param base the base directory path @param paths collection of paths to mask @return list of masked path entries @throws IOException if an I/O error occurs
1804 Opens a file in the specified filesystem. @param fs FileSystem instance @param path Path to the file @param policy File access policy @param status Optional FileStatus object @param length Optional file length @param options Optional map of additional options @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
1805 Reads data from InputStream into ByteBuffer at specified position. @param in source input stream @param position starting position in the stream @param buf destination buffer for read data @throws IOException if an I/O error occurs
1806 Masks the IO statistics snapshot creation. Calls m1 with iostatisticsSnapshotCreateMethod.
1807 Masks functionality by invoking another method. @param iostatisticsContextEnabledMethod method to be invoked
1808 Constructs a LightWeightCache with specified parameters. @param recommendedLength suggested initial capacity @param sizeLimit maximum number of entries allowed @param creationExpirationPeriod expiration time for entries since creation @param accessExpirationPeriod expiration time for entries since last access
1809 Initializes a Filter with specified parameters. @param vectorSize size of the filter vector @param nbHash number of hash functions @param hashType type of hash function to use
1810 Decrements the count of a key in hash buckets. @param key unique identifier for the item to decrement
1811 Recursively processes a collection of keys. @param coll collection of Key objects to process
1812 Recursively processes a list of keys. @param keys list of Key objects to process @throws NullPointerException if the keys list is null
1813 Recursively processes an array of keys. @param keys array of Key objects to process @throws NullPointerException if keys is null
1814 Masks keys and updates vectors at given index. @param index position in key and fp vectors
1815 Finds index of minimum value in ratio array. @param h array of hash indices @return index with minimum ratio value
1816 Executes function mask with provided arguments. @param argv array of string arguments @throws Throwable if an error occurs during execution
1817 Retrieves a credential entry by name or alias. @param provider source of credential entries @param name credential name or alias @return CredentialEntry object or null if not found @throws IOException if an I/O error occurs
1818 Marks a function as deprecated with a custom message. @param key the original function name @param newKeys array of alternative function names @param customMessage custom deprecation message
1819 Opens listeners and processes them based on port conditions. @throws Exception if an error occurs during processing
1820 Validates and processes configuration string. @param argStr configuration string to be validated @throws BadFencingConfigurationException if configuration is invalid
1821 Recursively deletes a directory from ZooKeeper. @throws IOException if deletion fails @throws InterruptedException if operation is interrupted
1822 Checks for and processes any old active nodes that need fencing. @return Stat object representing the status of the checked node, or null if no action is needed @throws InterruptedException if thread is interrupted during operation @throws KeeperException if there's a ZooKeeper error
1823 Reads data from a stream into a ByteBuffer. @param stream source of positioned readable data @param range file range to read @param allocate function to allocate ByteBuffer @return CompletableFuture containing the read ByteBuffer @throws EOFException if end of file is reached prematurely
1824 Processes buffer data with caching logic. @param data BufferData object to process
1825 Sets and validates an action future. @param actionFuture future representing the action to be performed
1826 Updates buffer and checksum, transitions to READY state. @param expectedCurrentState array of expected current states
1827 Calculates mask value for a block. @param blockNumber the block number to calculate mask for @return mask value based on file size and block configuration
1828 Applies mask to calculate effective offset. @param blockNumber identifier of the block @param offset original byte offset @return masked offset as integer
1829 Initializes block data with file size and block size. @param fileSize total file size in bytes @param blockSize size of each block in bytes
1830 Masks data using buffer offset. Calls m1(), then returns result of blockData.m2(). @return masked integer value
1831 Calls helper method with false flag. @throws IOException if I/O error occurs in helper method
1832 Closes all resources for a given UGI. @param ugi UserGroupInformation object representing the user
1833 Calls overloaded m1 with UTF-8 charset. @param fileContext file context for operations @param path file path to operate on @param charseq character sequence to process @return FileContext result from the overloaded method @throws IOException if an I/O error occurs
1834 Writes bytes to a file in the given filesystem. @param fs FileSystem instance @param path Path to the file @param bytes byte array to write @return the same FileSystem instance @throws IOException if an I/O error occurs
1835 Writes lines to a file in the specified charset. @param fs FileSystem instance @param path destination Path @param lines Iterable of CharSequence lines to write @param cs charset for encoding @return the FileSystem instance @throws IOException if an I/O error occurs
1836 Writes a CharSequence to a file using specified FileSystem and Charset. @param fs the FileSystem to use @param path the Path where the data will be written @param charseq the CharSequence to write @param cs the Charset to encode the CharSequence @return the FileSystem instance used for writing @throws IOException if an I/O error occurs
1837 Constructs a BlockLocation with specified parameters. @param names array of block replica hostnames @param hosts array of network locations for each replica @param topologyPaths array of network paths for each replica (nullable) @param offset starting byte offset in the file @param length total bytes in the block @param corrupt flag indicating if the block is corrupted
1838 Creates a mutable counter with interned name and description. @param name unique identifier for the counter @param desc description of the counter @param iVal initial value of the counter @return MutableCounterInt instance
1839 Creates a mutable counter with given name and description. @param name unique identifier for the counter @param desc description of the counter @param iVal initial value of the counter @return MutableCounterLong instance
1840 Creates a mutable gauge with specified name and description. @param name unique identifier for the gauge @param desc description of the gauge @param iVal initial value for the gauge @return MutableGaugeLong object
1841 Creates a mutable gauge with a float value. @param name metric name @param desc description of the metric @param iVal initial float value @return MutableGaugeFloat instance
1842 Creates a mutable gauge with integer value. @param name metric name @param desc metric description @param iVal initial integer value @return MutableGaugeInt instance
1843 Creates and returns a new MeanStatistic instance. @return MeanStatistic object initialized with current context
1844 Logs a masked message if logging is enabled. @param log Logger instance for logging @param message Message to be logged @param source Source object for generating stats
1845 Overrides m1 to append statistics. @return String with appended statistics or original value if not applicable
1846 Masks statistics by converting to string. @param statistics object containing statistics data @return masked string representation or empty if null
1847 Tracks duration of an operation and handles exceptions. @param factory DurationTrackerFactory to create a tracker @param statistic name of the statistic to track @param input InvocationRaisingIOE object representing the operation @return Duration of the operation @throws IOException if an I/O error occurs during execution
1848 Executes a supplier function with duration tracking. @param factory optional DurationTrackerFactory for creating trackers @param statistic name of the statistic to track @param input supplier function to execute @return result of the supplier function
1849 Masks an entry, updating internal state and purging if necessary. @param entry the Entry to be masked
1850 Initializes IO statistics with various metrics. @param counters list of counter keys @param gauges list of gauge keys @param minimums list of minimum keys @param maximums list of maximum keys @param meanStatistics list of mean statistic keys
1851 Reads bytes from input into buffer. @param b destination byte array @param off offset in the array to start storing bytes @param len maximum number of bytes to read @return number of bytes actually read or -1 if end of stream @throws IOException if an I/O error occurs
1852 Decrypts data from buffer into another buffer. @param position starting position in the data stream @param buffer input/output byte array for decryption @param offset start index in the buffer @param length number of bytes to decrypt @throws IOException if an I/O error occurs during decryption
1853 Decrypts data from a ByteBuffer into another. @param filePosition starting position in the file @param buf input ByteBuffer containing encrypted data @param length total number of bytes to decrypt @param start offset in the output buffer to start decryption @throws IOException if an I/O error occurs during decryption
1854 Decrypts data from ByteBuffer. @param buf input buffer containing encrypted data @param length total bytes to decrypt @param start starting index for decryption @throws IOException if an I/O error occurs during decryption
1855 Seeks to a specified position in the stream. @param pos target position to seek @throws IOException if an I/O error occurs or seeking is unsupported
1856 Skips bytes in the input stream. @param n number of bytes to skip @return actual number of bytes skipped @throws IOException if an I/O error occurs
1857 Initializes a new GlobFilter with a given file pattern. @param filePattern pattern to match files against
1858 Initializes a GlobFilter with a pattern and a path filter. @param filePattern glob pattern for matching files @param filter additional path filter criteria @throws IOException if initialization fails
1859 Unpacks an input stream into a directory. @param inputStream the input stream to unpack @param untarDir the target directory for extraction @param gzipped indicates if the input is gzip compressed
1860 Retrieves file system statistics. @return Map of URIs to their corresponding statistics
1861 Calls m1 method on AbstractFileSystem.
1862 Recursively processes input and output chunks. @param inputs array of ECChunk objects for processing @param outputs array of ECChunk objects for results @throws IOException if an I/O error occurs
1863 Creates a blocking thread pool with specified parameters. @param activeTasks number of threads in the pool @param waitingTasks max tasks that can wait in queue @param keepAliveTime time to keep idle threads alive @param unit time unit for keepAliveTime @param prefixName prefix for thread names @return BlockingThreadPoolExecutorService instance
1864 Masks buffer data starting from specified offsets. @param bufferData data to be masked @param startOffset starting offset for masking @param readOffset read offset for masking process
1865 Calls and returns the result of m1(). @return Object returned by m1()
1866 Calls method m2 on the result of m1.
1867 Returns a serializable object by calling nested methods. @return Serializable object from nested method calls
1868 Checks and processes statistics from a source object. @param source the object to process @return true if processing is successful, false otherwise
1869 Executes tasks concurrently, handling failures and reverting changes. @param task the task to execute on each item @return true if all tasks succeeded, false otherwise @throws E if a task throws an exception @throws IOException if there's an issue iterating items
1870 Masks the given statistics context. @param statisticsContext the context to be masked; can be null
1871 Calls m1 on ioStatisticsContext if it's not null.
1872 Calls m1 on ioStatisticsContext if it is not null.
1873 Handles exceptions by logging and rethrowing specific ones. @param e the exception to handle
1874 Applies mask to file status with optional handle options. @param stat file status object @param opt optional handle options @return PathHandle result
1875 Masks a token for a given alias. @param alias the text alias for the token @param t the token to be masked or null if ignored
1876 Masks input buffer and writes to output buffer. @param inBuffer source ByteBuffer containing data to mask @param outBuffer destination ByteBuffer for masked data @throws IOException if an I/O error occurs
1877 Masks input buffer data and writes to output buffer. @param inBuffer source ByteBuffer containing data to be masked @param outBuffer destination ByteBuffer for the masked data @throws IOException if an I/O error occurs during processing
1878 Initializes source pattern and destination path map. @throws IOException if there's an issue with the source path regex or initialization fails.
1879 Constructs a Path by resolving a child path against a parent path. @param parent the parent Path object @param child the child Path object to resolve
1880 Constructs a new Path object from a given string. @param pathString the input path string @throws IllegalArgumentException if the input is invalid
1881 Constructs a Path object with specified components. @param scheme URI scheme @param authority authority component of the URI @param path file or directory path
1882 Masks the URI using an inferred scheme. @return masked URI as a string
1883 Masks and validates path component. @param p file path to process @return masked string if valid, throws exception otherwise
1884 Processes and returns a masked path. @param p input file path @return processed Path object @throws FileNotFoundException if file not found @throws UnresolvedLinkException if symbolic link is unresolved @throws AccessControlException if access is denied @throws IOException for other I/O errors
1885 Creates an output stream for writing to a file with specified options. @param f the path of the file to be created @param createFlag flags specifying how to handle the file creation @param opts optional parameters for file creation @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
1886 Applies umask to file permission. @param mode original file permission @param umask user mask for permissions @return adjusted file permission
1887 Checks file permission using default settings. @param f file path to check @return true if permissions match, false otherwise @throws IOException if an I/O error occurs
1888 Sets file system permission. @param permission new permission to set or null to use default
1889 Creates a file output stream with specified parameters. @param f path to the file @param overwrite whether to overwrite existing file @param bufferSize size of buffer in bytes @param replication desired block replication factor @param blockSize desired block size in bytes @param progress callback for reporting progress @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
1890 Converts short permission to FsPermission. @param permission numeric permission value @return FsPermission object representing the permission
1891 Masks and writes key-value pair to output stream. @param key key object to be masked @param val value object to be masked @throws IOException if there's an I/O error during masking or writing
1892 Delegates to wBlkState's m1 method. @return result of wBlkState.m1() @throws IOException if an I/O error occurs
1893 Moves cursor in file by specified offset. @param n offset to move @return new position after move @throws IOException if I/O error occurs
1894 Delegates file size calculation to underlying filesystem. @param path file path to calculate size @return size of the file in bytes @throws IOException if an I/O error occurs
1895 Delegates to file system to get size of file at given path. @param path file path @return size of file in bytes @throws IOException if an I/O error occurs
1896 Initializes JVM pause monitoring and processes a list of strings. @param args command line arguments (unused)
1897 Starts the service if not already started. Handles exceptions and logs errors.
1898 Updates the current state. @param newState new state to transition to @return previous state before update
1899 Retrieves and logs the default Kerberos realm. Handles exceptions related to class invocation.
1900 Checks if object is instance of BytesWritable and delegates to superclass. @param right_obj object to check @return true if object is BytesWritable, otherwise false
1901 Checks if object is instance of Text and calls superclass method. @param o object to check @return true if object is Text, otherwise false
1902 Delegates to another method with byte array details. @param newData input data as BytesWritable
1903 Processes input buffers to decode and reconstruct data. @param inputs array of ByteBuffer containing input data @param erasedIndexes indices of erased or incomplete data @param outputs array of ByteBuffer for decoded output @throws IOException if an I/O error occurs during processing
1904 Masks input data based on erased indexes. @param inputs byte arrays containing data to be masked @param erasedIndexes indices of elements to be erased @param outputs resulting byte arrays after masking
1905 Checks block delimiter using BZip2 format. @return true if block delimiter is valid, false otherwise
1906 Creates a new CBZip2OutputStream with default block size. @param out output stream to compress data into @throws IOException if an I/O error occurs
1907 Initializes a new BlockDecompressorStream. @param in InputStream containing compressed data @param decompressor Decompressor to use for decompression @throws IOException if an I/O error occurs
1908 Creates a compression output stream. @param out underlying output stream @return CompressionOutputStream for writing compressed data @throws IOException if an I/O error occurs
1909 Creates a compression output stream. @param out underlying output stream @return CompressionOutputStream for writing compressed data @throws IOException if an I/O error occurs
1910 Creates a compression output stream. @param out underlying output stream @return CompressionOutputStream instance @throws IOException if an I/O error occurs
1911 Creates a compression output stream. @param out underlying output stream @return CompressionOutputStream configured with codec settings @throws IOException if an I/O error occurs
1912 Synchronizes and executes operations on data and index.
1913 Masks and compresses data. Resets output stream and compressor after processing.
1914 Creates a compression input stream. @param in input stream to compress @return CompressionInputStream for reading compressed data
1915 Creates a compression input stream. @param in input stream to compress @return CompressionInputStream instance @throws IOException if an I/O error occurs
1916 Compresses input stream using specified configuration. @param in input stream to compress @return compressed input stream @throws IOException if an I/O error occurs
1917 Compresses input stream using specified codec. @param in input stream to compress @return CompressionInputStream with compressed data @throws IOException if an I/O error occurs
1918 Executes methods m1 on index and data. Skips index execution if already closed. @throws IOException if an I/O error occurs
1919 Calls m1 on input stream and closes it. @throws IOException if an I/O error occurs
1920 Returns a zlib decompressor configured with the given settings. @return DirectDecompressor instance
1921 Writes metadata and configuration to output stream. @throws IOException if I/O error occurs
1922 Writes token and secret key maps to DataOutput. @param out the DataOutput stream to write to
1923 Processes input data for decompression and validation. @throws IOException if file corruption is detected or I/O error occurs
1924 Masks values based on decompression settings. @throws IOException if seeking fails
1925 Reads data from input stream up to specified length. @param in DataInput source @return String representation of read data
1926 Retrieves a DelegationKey by ID, creating it if not found. @param keyId unique identifier for the key @return DelegationKey object or null if retrieval fails
1927 Retrieves a delegation token for a given URL and credentials. @param url the target URL @param creds user credentials containing tokens @return the delegation token or null if not found
1928 Generates a security token for authentication. @param authType type of SASL authentication @return Token object or null if token info is unavailable @throws IOException if instantiation fails
1929 Masks a token with a service name from address. @param token the token to mask @param addr the InetSocketAddress of the service
1930 Converts TokenProto to Token. @param tokenProto Protocol buffer representation of the token @return Token object or null if conversion fails
1931 Masks a text key to a byte string. @param key the input text key @return masked byte string representation of the key
1932 Clones an existing token. @param other the token to clone
1933 Calls overloaded method with default maxLines. @param str text input @param maxLineLength maximum length of a line @return result of the overloaded method
1934 Calls overloaded method with max integer values as limits. @param str input text @return result of processing text @throws IOException if an I/O error occurs
1935 Constructs an instrumented lock with a specified name and logger. @param name unique identifier for the lock @param logger used for logging lock events @param minLoggingGapMs minimum time gap between log entries (in milliseconds) @param lockWarningThresholdMs threshold for warning on long lock holds (in milliseconds)
1936 Creates a retry proxy for an interface. @param iface interface class @param implementation concrete implementation of the interface @param retryPolicy policy defining retry behavior @return proxy object with retry capabilities
1937 Handles retry logic with a delay. @return CallReturn.RETRY indicating retry action @throws InterruptedIOException if interrupted during wait
1938 Initializes a Writer for TFile with given parameters. @param fsdos output stream to write data @param minBlockSize minimum block size @param compressName compression algorithm name @param comparator key comparator @param conf configuration settings @throws IOException if an I/O error occurs
1939 Masks data using function m1 and returns last chunk status. @return true if masking successful, false otherwise @throws IOException if an I/O error occurs during masking
1940 Calls m1 and returns the remain value. @throws IOException if an I/O error occurs during m1 execution
1941 Calls m1 with a ByteArray wrapper. @param buf byte array containing data @param offset starting index in the buffer @param length number of bytes to process @return result from m1 method call
1942 Calls m1 and then superclass's m2 if out is not null. @throws IOException if an I/O error occurs
1943 Masks a key-value pair for serialization. @param key the key object to serialize @param val the value object to serialize @throws IOException if key or value classes are incorrect, or key length is negative
1944 Masks a value with a given key. @param keyData byte array containing the key @param keyOffset offset of the key in the array @param keyLength length of the key @param val ValueBytes object to be masked @throws IOException if negative key length or I/O error occurs
1945 Masks destination writable with source writable. @param dst destination Writable object @param src source Writable object @throws IOException if an I/O error occurs
1946 Recursively searches for a node within a given scope. @param scope search scope identifier @param excludedNodes nodes to exclude from the search @return Node object or null if not found
1947 Calls overloaded method with default null value. @param reader Node to read from @param nodes Array of Nodes @param activeLen Length of active nodes
1948 Calls overloaded m1 with null as default value. @param reader current node being processed @param nodes array of nodes to process @param activeLen length of active portion in nodes
1949 Constructs a SocketInputStream with a specified timeout. @param socket the socket to read from @param timeout the read timeout in milliseconds @throws IOException if an I/O error occurs
1950 Constructs a SocketInputStream from a given socket. @param socket the underlying socket to read data from @throws IOException if an I/O error occurs during initialization
1951 Constructs a SocketOutputStream with a specified socket and timeout. @param socket The socket to be used for output. @param timeout Timeout in milliseconds for blocking operations. @throws IOException if an I/O error occurs.
1952 Processes a node addition, ensuring it's not an inner node and updating network topology. @param node the node to be processed
1953 Processes buffer with given operations. @param buf ByteBuffer to process @param ops operation set for processing @return result of processing or -1 if closed @throws IOException on I/O errors
1954 Connects a socket channel to an endpoint with a specified timeout. @param channel the socket channel to connect @param endpoint the target address to connect to @param timeout connection timeout in milliseconds @throws IOException if connection fails or is interrupted
1955 Applies mask operations to channel. @param ops bitwise OR of selected operations @throws IOException if operation times out or fails
1956 Calls overloaded method with default parameters. @param strInterface interface string or null @return result of the overloaded method @throws UnknownHostException if network error occurs
1957 Calls m1 with default secure flag. @param strInterface network interface name @param nameserver DNS server address @return result of m1 call @throws UnknownHostException if host cannot be determined
1958 Calls metrics function m1 from UgiMetrics.
1959 Constructs a MutableInverseQuantiles instance. @param name descriptive name of the metric @param description detailed description of the metric @param sampleName name of the sample @param valueName name of the value @param intervalSecs time interval in seconds
1960 Creates a mutable quantiles metric. @param name unique metric identifier @param desc metric description @param sampleName name of the sample @param valueName name of the value @param interval sampling interval @return MutableQuantiles object @throws MetricsException if interval is not positive
1961 Creates a mutable statistic with default enabled flag. @param name statistic name @param desc description of the statistic @param sampleName name of the sample @param valueName name of the value @return MutableStat object
1962 Creates a metrics registry entry with default visibility. @param name unique metric name @param description brief description of the metric @param value initial metric value @return MetricsRegistry object
1963 Delegates metrics recording to innerMetrics. @param name metric name @param value metric value
1964 Updates RPC queue rate with priority and time. @param priority queue priority level @param queueTime time spent in the queue
1965 Records RPC processing time by priority. @param priority level of the operation @param processingTime time taken for processing in milliseconds
1966 Records RPC call processing time. @param rpcCallName name of the RPC call @param overallProcessingTime time taken for the call in milliseconds
1967 Configures Kerberos settings based on system properties and environment variables. Throws IOException if an error occurs during configuration.
1968 Evaluates condition; logs failure if false. @param condition boolean to evaluate @param category log category @param message log message template @param args message arguments @return true if condition is met, otherwise false and logs error
1969 Logs a diagnostic message if condition is true. @param condition boolean to check if logging should occur @param category message category @param message log message format @param args arguments for the message format
1970 Creates UserGroupInformation for a given user. @param user username for which to create UserGroupInformation @return UserGroupInformation object with SIMPLE authentication method
1971 Validates token with provided password. @param identifier unique token identifier @param password user-provided password @throws InvalidToken if password does not match stored password
1972 Handles Kerberos ticket renewal process. Returns early if conditions in m1() or m2() fail.
1973 Deprecated constructor initializes command arguments. @param cmd array of command line arguments @param pos starting position in the array @param conf configuration settings
1974 Initializes and configures a ZooKeeper instance. @return Configured ZooKeeper object @throws IOException if connection fails @throws KeeperException for ZooKeeper errors
1975 Retrieves and processes data using specified key. @param keyName unique identifier for data retrieval @return processed result of type E
1976 Resolves hostname to InetAddress, logging slow lookups. @param hostname the hostname to resolve @return resolved InetAddress @throws UnknownHostException if resolution fails
1977 Generates protocol signature for a given versioned protocol. @param server VersionedProtocol instance @param protocol protocol name @param clientVersion client's version of the protocol @param clientMethodsHash hash of client methods @return ProtocolSignature object @throws IOException if class loading fails
1978 Checks if a method is supported. @param methodName name of the method to check @param parameterTypes types of the method parameters @return true if method is supported, false otherwise
1979 Validates RPC request header. @param header RPC request header to validate @throws RpcServerException if validation fails
1980 Masks a message using a buffer. @param message the input message to be masked @param buffer the buffer used for masking @return the masked message as type T @throws RpcServerException if an error occurs during masking
1981 Returns an element if condition is met; otherwise, returns null. @return element of type E or null
1982 Handles version mismatch with client. @param clientVersion client's IPC version @throws IOException if communication fails
1983 Returns masked value combining base and swap size. @return long representing combined mask value
1984 Creates a HarFSDataInputStream for reading from a specified range in a file. @param fs FileSystem instance @param p Path to the file @param start Starting position in the file @param length Length of the data to read @param bufsize Buffer size @throws IOException if an I/O error occurs
1985 Masks entries in the queue based on eviction criteria.
1986 Masks elements by removing excess beyond size limit. @param sizeLimit maximum allowed size
1987 Calls overloaded method with default values. @param qOption first option flag @param hOption second option flag @param xOption third option flag @return result of the overloaded method call
1988 Calls overloaded method with default sort option. @param qOption query option flag @param hOption history option flag @param tOption test option flag @param types list of storage types @return result string from overloaded method
1989 Masks storage types based on options. @param hOption horizontal processing option @param tOption type-specific processing option @param types list of storage types to process @return masked string result
1990 Waits for all futures to complete or throws an exception. @param futures list of CompletableFuture objects @throws IOException if any future completes exceptionally
1991 Masks a given CompletableFuture by invoking a helper method. @param future the CompletableFuture to be masked, can be null @throws IOException if an I/O error occurs during masking
1992 Updates CRC from byte array. @param crcBuffer source byte array @param offset starting index in the array @param length number of bytes to process @param bytesPerCrc bytes per CRC calculation @throws IOException if length is not a multiple of CRC_SIZE_BYTES
1993 Reads and processes checksum values from input stream. @param checksumIn input stream for reading checksums @param numChecksumsToRead number of checksums to read @param bytesPerCrc number of bytes per CRC @throws IOException if an I/O error occurs
1994 Instantiates an object of type T using configuration. @param theClass class type to instantiate @param conf configuration settings @return instance of T or null if instantiation fails
1995 Returns the class of the underlying data. @return Class object representing the type of data
1996 Returns the class type of the data object. @return Class object representing the type of data
1997 Handles actions based on input arguments. @param args array containing action and name @return result of the operation
1998 Initializes a FutureDataInputStreamBuilderImpl with file context and path. @param fc FileContext object for file operations @param path Path to the file @throws IOException if an I/O error occurs
1999 Creates a DataChecksum from a byte array. @param bytes source data array @param offset starting index in the byte array @return DataChecksum object or throws InvalidChecksumSizeException if creation fails
2000 Creates a DataChecksum from input stream. @param in DataInputStream to read checksum data @return DataChecksum object or throws exception if creation fails
2001 Executes function with rate limiting and system configuration. @throws IOException on process execution failure
2002 Aggregates I/O statistics from a snapshot. @param snapshot Serializable object containing data @param statistics nullable Object for additional stats @return true if aggregation is successful @throws UnsupportedOperationException if operation not supported
2003 Throws UnsupportedOperationException. @return Nothing as it always throws an exception
2004 Applies mask to source object. @param source input object to be masked @return Serializable result of masking operation @throws UnsupportedOperationException if operation is not supported @throws ClassCastException if casting fails
2005 Converts snapshot to JSON string. @param snapshot data to be converted @return JSON representation of the snapshot @throws UncheckedIOException if I/O error occurs @throws UnsupportedOperationException if operation is not supported
2006 Processes JSON string to create a serializable object. @param json input JSON data as string @return Serializable object or null if processing fails
2007 Applies mask to file system path. @param fs target file system @param path file path to mask @return Serializable result of masking operation @throws UncheckedIOException if an I/O error occurs @throws UnsupportedOperationException if operation is not supported
2008 Applies mask to source object. @param source object to be masked @return Serializable result of masking operation
2009 Saves a snapshot to the file system. @param snapshot data to save, can be null @param fs target file system @param path destination path @param overwrite flag to overwrite existing files
2010 Converts statistics to a pretty string. @param statistics object containing statistical data @return formatted string representation of statistics
2011 Calls m1 and returns result of m2 with null. @throws UnsupportedOperationException if operation not supported
2012 Masks and sets thread context with given statistics. @param statisticsContext optional statistics context object @throws UnsupportedOperationException if operation is not supported
2013 Calls two methods without parameters. Throws UnsupportedOperationException.
2014 Throws UnsupportedOperationException as this method is not implemented.
2015 Masks an object using context aggregation. @param source object to be masked @return true if masking is successful, false otherwise
2016 Compares two version strings. @param version1 first version string @param version2 second version string @return comparison result as integer
2017 Initializes a Counting Bloom Filter. @param vectorSize size of the bit vector @param nbHash number of hash functions to use @param hashType type of hash function to use
2018 Initializes a Bloom Filter with specified parameters. @param vectorSize size of the bit vector @param nbHash number of hash functions @param hashType type of hash function to use
2019 Checks if a key is present in the Bloom filter. @param key the key to check @return true if key may be present, false otherwise
2020 Applies a mask to the key based on the specified scheme. @param k the key to be masked @param scheme the masking scheme to apply
2021 Calls overloaded method with single-element array. @param key original key string @param newKey replacement key string @param customMessage message to display
2022 Deprecated method. Use m1 with all parameters. @param key primary key string @param newKeys array of new keys
2023 Calls overloaded method with single new key. @param key original key @param newKey replacement key
2024 Starts the HTTP server and initializes metrics. @throws IOException if there is an issue starting the server or initializing components
2025 Updates the znode to mark the local node as active. @param oldBreadcrumbStat existing znode stats or null if not found @throws KeeperException if a ZooKeeper operation fails @throws InterruptedException if the thread is interrupted
2026 Deletes the breadcrumb for an active node. Asserts that the state is ACTIVE. Throws IllegalStateException if data mismatch occurs. Logs exceptions during deletion.
2027 Masks data in the stream within specified ranges. @param stream input stream with positioned reading capability @param ranges list of file ranges to mask @param allocate function to allocate ByteBuffer instances @throws EOFException if end of file is reached unexpectedly
2028 Processes buffer pool data for prefetching and readiness.
2029 Reads data from a block into a BufferData object. @param blockNumber the block identifier to read @return BufferData containing the block's data @throws IOException if an I/O error occurs during reading
2030 Initializes FilePosition with file size and block size. @param fileSize total size of the file in bytes @param blockSize size of each block in bytes
2031 Checks a condition using block data. @return true if condition met, false otherwise
2032 Calls m1 with specific parameters and executes CACHE.m2(). @throws IOException if an I/O error occurs during execution
2033 Writes CharSequence to file using UTF-8 encoding. @param fs FileSystem instance @param path destination file path @param charseq data to write @return the same FileSystem instance @throws IOException if I/O error occurs
2034 Constructs a BlockLocation with specified names, hosts, and metadata. @param names array of block storage names @param hosts array of hostnames where the block is stored @param offset starting byte position in the file @param length size of the block in bytes @param corrupt indicates if the block is corrupted
2035 Constructs a BlockLocation with specified parameters. @param names array of block replica hostnames @param hosts array of block replica host addresses @param topologyPaths network topology paths for each replica @param offset starting byte offset in the file @param length length of the block in bytes
2036 Applies mask operation on two MeanStatistics. @param l left MeanStatistic operand @param r right MeanStatistic operand @return result of mask operation as a new MeanStatistic
2037 Updates statistics from IO source. @param source IOStatistics object containing data
2038 Logs a message with a source. @param message log message @param source object where the log originates from
2039 Logs IO statistics based on the specified level. @param log Logger instance for logging @param level Logging level as a string @param source Source object for statistics
2040 Logs and closes a RemoteIterator. @param source the RemoteIterator to process
2041 Masks function execution. @param factory DurationTrackerFactory instance @param statistic name of the statistic @param input InvocationRaisingIOE object @throws IOException if an I/O error occurs
2042 Reads data from a specified position into a buffer. @param position starting position for reading @param buffer target byte array to store read data @param offset starting offset in the buffer @param length number of bytes to read @return number of bytes actually read, or -1 if end of stream @throws IOException if an I/O error occurs
2043 Reads bytes from a specified position into a buffer. @param position the starting position to read from @param buffer the byte array to store the read data @param offset the offset in the buffer to start writing @param length the number of bytes to read @throws IOException if an I/O error occurs
2044 Reads bytes into buffer from specified position. @param position starting read position @param buf destination buffer @return number of bytes read or -1 if end reached @throws IOException on I/O error
2045 Reads bytes from a specified position into a ByteBuffer. @param position the starting position in the input stream @param buf the ByteBuffer to read data into @throws IOException if an I/O error occurs
2046 Reads data from a buffer into another buffer. @param buf target buffer to read into @return number of bytes read or -1 if end of stream
2047 Writes an object to a DataOutput stream. @param out output stream for writing data @param instance object to be written @param declaredClass class of the object @param conf configuration settings @param allowCompactArrays flag to enable compact array handling @throws IOException if an I/O error occurs
2048 Retrieves buffered data for a specific block. @param blockNumber identifier of the block to fetch @return BufferData object containing requested data
2049 Delegates to buffer pool's m1 method. @return result of bufferPool.m1()
2050 Executes a task with error handling. @param task the task to execute @return true if task is skipped, false otherwise @throws E if task execution fails @throws IOException if I/O error occurs
2051 Masks multiple path data items under a parent. @param parent the parent PathData object @param items variable number of PathData objects to mask @throws IOException if an I/O error occurs during masking
2052 Creates a function to get PathHandle from FileStatus. @param fs FileSystem instance @param opt optional HandleOpt arguments @return Function mapping FileStatus to PathHandle
2053 Executes a shell command with user name masked. @param userName the original user name to be masked @return ShellCommandExecutor instance for executing the masked command
2054 Executes a shell command with user name mask. @param userName user's name to be masked in command @return ShellCommandExecutor instance for execution
2055 Masks credentials from input stream. @param in DataInput stream containing credentials
2056 Recursively retrieves and adds delegation tokens to credentials. @param issuer token issuer @param renewer user allowed to renew the token @param credentials where tokens are stored @param tokens list to store retrieved tokens @throws IOException if an I/O error occurs
2057 Processes text with given token. @param alias text to process @param token processing token @return always true after processing
2058 Masks the given path if it doesn't meet condition m1. @param workDir working directory path @param path original file path @return masked path or original if condition is met
2059 Masks a file path within a working directory. @param workDir base directory for masking @param path original file path to mask @return masked file path or original if not modified
2060 Masks and processes a file path. @param path the original file path @return File object representing the processed path
2061 Masks path by prepending directory if condition not met. @param p input path @return masked path
2062 Constructs a masked path with default scheme and authority. @param defaultUri default URI for scheme and authority @param workingDir working directory for relative paths @return new Path with updated URI components
2063 Returns a path using URI method m1. @return Path object representing the URI
2064 Returns a new Path using the result of uri.m1(). @return Path object created from URI method m1()
2065 Retrieves file path from SFTP channel. @param channel SFTP channel object @return Path object or null if an exception occurs
2066 Retrieves file status from the filesystem. @param fs FileSystem instance to operate on @param pathString path of the file to check @param ignoreFNF flag to ignore FileNotFoundException @return FileStatus object or null if not found and ignored @throws IOException if an I/O error occurs
2067 Returns a new Path instance using the stored path. @return Path object initialized with the internal path
2068 Returns a Path object based on targetPath. @return Path object if targetPath is not null, otherwise null
2069 Calls m1 with root directory path. @return result of m1 with root path @throws IOException if an I/O error occurs
2070 Constructs a ChRootedFileSystem with a specified FileSystem and URI. @param fs the underlying FileSystem @param uri the root URI for the new filesystem @throws IOException if an I/O error occurs
2071 Constructs a Path from the given array starting at the specified index. @param path array of path components @param startIndex index to start constructing the path from @return constructed Path object
2072 Constructs a path from directory links. @return Path object representing the combined directories
2073 Constructs a path from a parent and child string. @param parent the parent directory as a string @param child the child file or directory name as a string
2074 Constructs a path by combining a parent and a child. @param parent the parent path @param child the child path component as a string
2075 Constructs a Path by combining a parent path and a child path. @param parent the parent directory as a String @param child the child path as a Path object
2076 Renames a directory in the given file system. @param fs FileSystem object @param oldName current name of the directory @param newName new name for the directory @throws IOException if renaming fails
2077 Creates a Path from File using nested methods. @param f input File object @return Path object created from file's metadata
2078 Constructs a Path from a URI, excluding the authority. @param nestedUri input URI to process @return Path object representing the URI without authority
2079 Converts array of strings to Paths. @param str array of string paths @return array of Path objects or null if input is null
2080 Masks a path based on its mode. @param path input path to be masked @return masked path or original if not applicable
2081 Combines two paths with a transformation on the second path. @param path1 first path object @param path2 second path object to be transformed @return new Path object combining elements of both input paths
2082 Validates file type based on requirement. @param typeRequirement specifies the required file type @throws PathIOException if validation fails
2083 Masks a file path. @param childPath the path to mask @return masked path as a string
2084 Throws PathNotFoundException with item's m1 value. @param item PathData object to process @throws IOException if an I/O error occurs
2085 Masks a file system path. @param absOrFqPath absolute or fully qualified path @return AbstractFileSystem instance @throws UnsupportedFileSystemException if unsupported file system @throws IOException if I/O error occurs
2086 Checks and sets directory permissions. @param fs FileSystem instance @param dir directory path @param permission desired file system permissions @return true if initial check passes, otherwise false
2087 Constructs a LocatedFileStatus object. @param length file size in bytes @param isdir true if the path is a directory @param block_replication replication factor for blocks @param blocksize block size in bytes @param modification_time last modified time in milliseconds since epoch @param access_time last accessed time in milliseconds since epoch @param permission file permissions @param owner file owner @param group file group @param symlink symbolic link target path, or null if not a symlink @param path file path @param attr set of attribute flags @param locations array of block locations
2088 Invokes overloaded m1 method with Object parameters. @param key writable key object @param val writable value object @throws IOException if an I/O error occurs
2089 Masks and writes key-value pairs from records. @param records iterator for raw key-value pairs @param writer destination for processed data
2090 Initializes service with configuration. @param conf Configuration object for the service
2091 Handles stopping the service. Ensures no re-entry and handles exceptions gracefully.
2092 Masks a text using a public service. @param thePublicService the text to be masked @return true if masking is successful, false otherwise
2093 Checks if token matches alias or if alias is null. @param token the Token object to check @param alias the Text alias to match against @return true if token matches alias or alias is null, false otherwise
2094 Checks if URL matches service or is protocol-based. @param fetcher object for fetching data @param service optional service name to match against @param url URL to check @return true if matches, false otherwise
2095 Masks files in the specified directory. @param dir directory containing files to mask @throws DiskErrorException if an error occurs during masking
2096 Masks files in a directory. @param dir directory containing files to mask @throws DiskErrorException if disk error occurs
2097 Calls m1 with both parameters set to false. @throws IOException if an I/O error occurs in m1
2098 Processes input buffers, replaces erased ones with outputs, and decodes. @param inputs array of ByteBuffer inputs @param erasedIndexes indexes of erased buffers @param outputs array of output ByteBuffers @throws IOException if decoding fails
2099 Processes input and output chunks for error correction. @param inputs array of ECChunk objects representing input data @param erasedIndexes indices of erased chunks @param outputs array of ECChunk objects for corrected output data
2100 Handles block processing and error tracking. Increments error count, processes blocks, decrements error count. Marks the operation as complete and closed.
2101 Masks input by calling helper methods. @throws IOException if file operations fail
2102 Masks data by processing a block. Closes the resource after processing.
2103 Reads and processes token and secret key data from input. @param in DataInput source for reading data @throws IOException if an I/O error occurs
2104 Reads and processes a key from the input stream. @param key DataOutputBuffer to store the read key @return Length of the key or -1 if no more keys are available
2105 Masks a writable value, applying configuration and validation. @param val the Writable object to be masked @throws IOException if an I/O error occurs during processing
2106 Masks and processes the input value. @param val the input object to be processed @return processed object @throws IOException if processing fails
2107 Reads key-value pair from input stream. @param key buffer to store key data @param val object to store value data @return total length of key and value, or -1 if end reached @throws IOException on I/O error
2108 Processes and masks value bytes. @param val ValueBytes object to process @return Length of processed value @throws IOException if I/O error occurs
2109 Retrieves delegation token information. @param ident token identifier @return DelegationTokenInformation object @throws NoSuchElementException if token not found @throws RuntimeException for SQL or IO errors
2110 Reads and returns permission status from input. @param in DataInput source @return PermissionStatus object @throws IOException if reading fails
2111 Reads an integer from input and returns corresponding enum value. @param in DataInput to read from @param enumType Enum class type @return Enum value or null if not found @throws IOException if reading fails
2112 Reads ACL string from input and processes it. @param in DataInput stream containing the ACL data
2113 Converts Text to ByteString. @param key input text to be converted @return ByteString representation of the input text
2114 Masks token details and returns a proto representation. @param tok input Token object @return TokenProto with masked information
2115 Initializes a new delegation token identifier. @param kind type of the delegation token @param owner user who owns the token @param renewer authorized to renew the token @param realUser actual user on behalf of whom the token is issued
2116 Handles method invocation with retry logic. @return CallReturn object containing result or exception
2117 Reads key-value pair from block reader. Throws EOFException if no data to read.
2118 Masks a BytesWritable value. @param value input BytesWritable object to mask @return masked long value @throws IOException if an I/O error occurs
2119 Transfers data from an input stream to an output stream with size constraints. @param out destination OutputStream for writing data @return total bytes transferred @throws IOException if I/O error occurs during transfer
2120 Calls overloaded method with full buffer range. @param buf byte array to process @return result of processing the entire buffer
2121 Compares this entry with another for equality. @param other object to compare with @return true if entries are equal, false otherwise
2122 Retrieves delegation token from URL. @param url target URL for fetching the token @param token authentication token @param renewer user allowed to renew the token @param doAsUser user on behalf of whom the operation is performed @return Token object containing delegation token details @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2123 Renews a delegation token. @param url URL to the service @param token authentication token @param dToken delegation token to renew @param doAsUser user on behalf of whom to perform the operation @return expiration time of the renewed token in milliseconds @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2124 Cancels a delegation token. @param url target URL @param token authentication token @param dToken delegation token to cancel @param doAsUser user on behalf of whom the operation is performed @throws IOException if an I/O error occurs or authentication fails
2125 Calls overloaded m1 with default value. @param scope operation scope @return Node object
2126 Overrides method to process nodes with specific conditions. @param reader current node being processed @param nodes array of nodes to be processed @param activeLen length of active nodes
2127 Wraps a socket input stream with a timeout. @param socket the underlying socket @param timeout max time in milliseconds to wait for data @return SocketInputWrapper instance @throws IOException if an I/O error occurs
2128 Returns an OutputStream for the socket. @param socket the target socket @param timeout connection timeout in milliseconds @return OutputStream or null if no output stream is available
2129 Connects a socket to an endpoint with optional local address and timeout. @param socket the socket to connect @param endpoint the remote endpoint to connect to @param localAddr the local address to bind, or null for default @param timeout the connection timeout in milliseconds @throws IOException if an I/O error occurs during connection
2130 Registers an MBean with the specified properties. @param serviceName service name for the MBean @param nameName name of the MBean @param properties MBean properties @param theMbean the MBean object to register @return ObjectName of registered MBean or null if registration fails
2131 Creates and registers a MutableQuantiles metric. @param name unique metric identifier @param desc description of the metric @param sampleName name for samples @param valueName name for values @param interval quantile calculation interval @return created MutableQuantiles object
2132 Initializes a RetryCache with specified parameters. @param cacheName name of the cache @param percentage capacity utilization percentage @param expirationTime time in milliseconds for entry expiration
2133 Processes protocol methods, logs and caches them. @param protocol the protocol class to process
2134 Masks each name in the provided array. @param names array of names to be masked
2135 Updates global metrics with local stats. @param localStats map of sample statistics to update
2136 Creates a mutable rate with optional extended features. @param name name of the rate @param desc description of the rate @param extended whether to enable extended features @return MutableRate object
2137 Masks protocol by caching and registering methods. @param protocol the protocol class to be masked
2138 Processes method annotations to handle metrics. @param source object containing the method @param method method being processed
2139 Logs Kerberos authentication issues for a user. @param messagePrefix prefix for log messages @param user UserGroupInformation object representing the user
2140 Validates file existence, type, content, and readability. @param file File object to validate @param category Category for validation messages @param text Description of the file being validated @return true if all checks pass, false otherwise
2141 Validates and processes Kerberos principal. @param principal the Kerberos principal to process
2142 Retrieves user group information based on owner and real user conditions. @return UserGroupInformation object or null if conditions are not met
2143 Constructs a new Find instance with recursion enabled.
2144 Default constructor for Count class.
2145 Calls method m1 with specific parameters. @throws IOException if an I/O error occurs
2146 Masks data by invoking helper method. @throws IOException if an I/O error occurs
2147 Calls m1 with default false flag. @throws IOException if an I/O error occurs
2148 Creates an InetSocketAddress for a given host and port. @param host the hostname or IP address @param port the port number @return InetSocketAddress object with resolved address
2149 Retrieves the InetAddress for a given host, ensuring it has a valid network interface. @param host hostname or IP address as a string @return InetAddress object if valid, otherwise null
2150 Masks and enqueues an RPC call for processing. @param call the RPC call to be processed @throws InterruptedException if interrupted while waiting @throws IOException if I/O error occurs during processing
2151 Processes an RPC request. @param header request header containing metadata @param buffer buffer containing the request data @throws RpcServerException if there's a server error processing the request @throws InterruptedException if the thread is interrupted while processing
2152 Handles RPC call response. @param call RPC call object @param status RPC status @param erCode error code proto @param rv writable return value @param errorClass class name of the error @param error error message @throws IOException if an I/O error occurs
2153 Masks IP addresses in the list and performs additional processing.
2154 Prints system information for a Linux environment. @param args command line arguments (not used)
2155 Calls overloaded method with default values. @param qOption query option flag @param hOption helper option flag @return result of the overloaded method
2156 Masks bytes in the array. @param b byte array to mask @param off starting offset @param len length of bytes to mask @return number of bytes masked or -1 if no bytes read @throws IOException on I/O error
2157 Creates an Expression instance using reflection. @param expressionClass the Class of the Expression to instantiate @param conf configuration object for instantiation @return Expression instance or null if expressionClass is null
2158 Retrieves and initializes a Command instance. @param cmdName name of the command @param conf configuration object @return initialized Command or null if not found
2159 Creates an instance of WritableComparable using reflection. @return WritableComparable object
2160 Creates a writable instance using a factory or reflection. @param c Class type of the writable @param conf Configuration for the writable @return Writable instance configured with given settings
2161 Creates a SocketFactory instance using configuration. @param conf Configuration object containing factory settings @param propValue Property value to determine the factory class @return SocketFactory instance @throws RuntimeException if class is not found
2162 Decodes a token identifier from byte array. @return decoded TokenIdentifier object or null if class is not found
2163 Retrieves or creates a DiskValidator instance. @param clazz class type of the DiskValidator to be instantiated @return DiskValidator instance of the specified class
2164 Initializes a DynamicBloomFilter with specified parameters. @param vectorSize size of the bit vector @param nbHash number of hash functions @param hashType type of hash function to use @param nr initial number of records
2165 Adds a new BloomFilter to the matrix. @param vectorSize size of the Bloom filter bit vector @param nbHash number of hash functions @param hashType type of hash function used
2166 Initializes a new RetouchedBloomFilter. @param vectorSize size of the bit vector @param nbHash number of hash functions @param hashType type of hash function to use
2167 Updates resource properties with optional overlay and backup. @param props properties to update @param startIdx starting index for update @param fullReload flag for full reload
2168 Handles yielding from an election process. @param needFence indicates whether a fence is required
2169 Reads file ranges using vectored I/O. @param ranges list of file ranges to read @param allocate function to allocate ByteBuffer @throws IOException if an I/O error occurs
2170 Constructs a block location with specified details. @param names array of hostnames storing the block @param hosts array of IP addresses or hostnames @param offset starting byte offset in the file @param length length of the block in bytes
2171 Constructs a DurationStatisticSummary. @param key unique identifier for the statistic @param success indicates if the operation was successful @param count number of occurrences @param max maximum duration value @param min minimum duration value @param mean MeanStatistic object representing average duration, cloned if not null
2172 Aggregates statistics from the given source. @param source the source of IO statistics to aggregate @return true if aggregation is successful, false if source is null
2173 Constructs an IOStatisticsSnapshot. @param source IOStatistics object to snapshot; if null, initializes empty maps
2174 Iterates over a remote iterator, consuming elements and counting them. @param source RemoteIterator providing the data @param consumer ConsumerRaisingIOE to process each element @return Count of processed elements @throws IOException if an I/O error occurs during processing
2175 Writes object to DataOutput. @param out destination for writing data @param instance object to write @param declaredClass class of the object @param conf configuration settings
2176 Processes block by number. @param blockNumber identifier of the block to process
2177 Acquires and returns buffer data for a given block number. @param blockNumber the block identifier to acquire @return BufferData object if successful, otherwise throws an exception
2178 Masks an item by processing its path data. @param item PathData object to be masked @throws IOException if I/O error occurs during masking
2179 Recursively processes directory items. @param parent parent directory data @param itemsIterator iterator for child items @throws IOException if an I/O error occurs
2180 Resolves group names for a user. @param userName unique user identifier @param errMessage error message to append @param groupNames comma-separated group names @return set of resolved group names @throws PartialGroupNameException if resolution fails
2181 Executes a command with no input and default timeout. @param cmd command to execute as varargs @return output of the command execution @throws IOException if an I/O error occurs
2182 Executes command with environment variables. @param env map of environment variables @param cmd command and its arguments @return output of the executed command @throws IOException if an I/O error occurs
2183 Calls overloaded m1 method with default flag set to true. @param other Credentials object containing user credentials
2184 Masks credentials by calling another method. @param other Credentials to be masked
2185 Generates tokens for a given user. @param renewer user identifier for token renewal @param credentials user credentials, default if null @return array of generated tokens @throws IOException if an I/O error occurs
2186 Recursively checks if token is valid. @param token the token to validate @return true if token is valid, false otherwise
2187 Sets a new working directory and processes it. @param newDir path to the new directory
2188 Sets modification and access times for a file. @param p path to the file @param mtime new modification time in milliseconds, or -1 if unchanged @param atime new access time in milliseconds, or -1 if unchanged @throws IOException if an I/O error occurs
2189 Retrieves a file from the specified path. @param path the path to the file @return the File object representing the path
2190 Masks file path. @param p file path to be masked @return masked string representation of the path
2191 Deprecated method to obtain a path using file system operations. @param fs FileSystem instance @return Path object
2192 Applies transformation to path using default file system and another operation. @param path input file path @return transformed file path
2193 Modifies and returns the given file path. @param path the original file path @return modified file path after applying transformations
2194 Resolves and fetches file status for a given path. @param f the input path @return array of FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if file is not found @throws UnsupportedFileSystemException if file system is unsupported @throws IOException for other I/O errors
2195 Checks file access recursively or not. @param f the file path to check @param recursive whether to check recursively @return true if accessible, false otherwise @throws AccessControlException if access is denied @throws FileNotFoundException if file is not found @throws UnsupportedFileSystemException if file system is unsupported @throws IOException for other I/O errors
2196 Opens a file for reading. @param f file path @return FSDataInputStream for the file @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if file system is unsupported @throws IOException if an I/O error occurs
2197 Opens an input stream for a file with specified buffer size. @param f file path @param bufferSize size of the buffer @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2198 Resolves and sets the length of a file. @param f file path @param newLength new length to set for the file @return true if operation is successful, false otherwise @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if file system is unsupported @throws IOException if an I/O error occurs
2199 Sets file replication factor. @param f file path @param replication desired replication level @return true if operation successful @throws AccessControlException if access is denied @throws FileNotFoundException if file not found @throws IOException for other I/O errors
2200 Applies file permissions to a path. @param f the path to modify @param permission new file permissions @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if file system is unsupported @throws IOException for other I/O errors
2201 Sets file owner and group. @param f file path @param username new owner's name @param groupname new group's name @throws AccessControlException if permission denied @throws UnsupportedFileSystemException if unsupported file system @throws FileNotFoundException if file not found @throws IOException for other I/O errors
2202 Updates file timestamps and resolves links. @param f file path to update @param mtime modification time in milliseconds @param atime access time in milliseconds @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException for other I/O errors
2203 Computes checksum for a file. @param f file path @return FileChecksum object @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws IOException on I/O errors
2204 Resolves and returns file status for a given path. @param f file path to check @return FileStatus object representing the file's status @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if file system is unsupported @throws IOException for other I/O errors
2205 Applies access control to a file path. @param path the file path to apply controls to @param mode the file system action mode @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException for other I/O errors
2206 Resolves file status for a given path. @param f file path to resolve @return FileStatus object representing the file's status @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if file system is unsupported @throws IOException on I/O errors
2207 Resolves a file path with access control checks. @param f input file path @return resolved Path object @throws AccessControlException if access is denied @throws FileNotFoundException if file is not found @throws UnsupportedFileSystemException if file system is unsupported @throws IOException for other I/O errors
2208 Retrieves block locations for a file within a specified range. @param f the file path @param start the starting offset of the range @param len the length of the range @return array of BlockLocation objects @throws IOException if an I/O error occurs @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported
2209 Resolves file status by path. @param f file path to resolve @return FsStatus of the file or default if null @throws AccessControlException if access is denied @throws FileNotFoundException if file is not found @throws UnsupportedFileSystemException if filesystem is unsupported @throws IOException for other I/O errors
2210 Creates a symbolic link. @param target the path to which the link should point @param link the path of the new symbolic link @param createParent if true, creates parent directories as needed @throws various exceptions based on file system operations
2211 Retrieves file status iterator for a given path. @param f file path @return RemoteIterator of FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if file system is unsupported @throws IOException if an I/O error occurs
2212 Resolves and returns a remote iterator for the given path. @param path the input file path @return RemoteIterator of paths or null if unresolved
2213 Retrieves file status iterator for a given path. @param f the input file path @return RemoteIterator of LocatedFileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if filesystem is unsupported @throws IOException for other I/O errors
2214 Resolves file system links and collects linked file systems. @param f target file path @return set of resolved AbstractFileSystem instances @throws IOException if an I/O error occurs
2215 Applies ACL to file path. @param path target file path @param aclSpec list of ACL entries
2216 Applies ACL to a file path. @param path target file path @param aclSpec list of access control entries @throws IOException if an I/O error occurs
2217 Resolves and processes a file system link. @param path the initial file path
2218 Resolves and processes a file system link. @param path the input file path @throws IOException if an I/O error occurs
2219 Applies ACL specifications to a file path. @param path the file path to apply ACLs @param aclSpec list of ACL entries to set @throws IOException if an I/O error occurs
2220 Retrieves ACL status for a given path. @param path file system path @return AclStatus object representing the ACL permissions @throws IOException if an I/O error occurs
2221 Sets an extended attribute on a file path. @param path the file path @param name the attribute name @param value the attribute value @param flag the set of flags for setting the attribute @throws IOException if an I/O error occurs
2222 Reads file content by path and name. @param path directory path @param name file name @return byte array of file content @throws IOException if an I/O error occurs
2223 Reads files from a directory. @param path directory path @return map of file names to their contents
2224 Reads files by name from a directory. @param path directory path @param names list of file names to read @return map of file names and their byte contents
2225 Resolves and processes a file system link. @param path the initial file path @param name the target name for processing @throws IOException if an I/O error occurs
2226 Resolves and lists files in a directory. @param path directory path @return list of file names or null if error occurs
2227 Resolves a path using a filesystem snapshot. @param path the original file path @param snapshotName name of the snapshot to use @return resolved path or throws IOException if fails
2228 Renames a file snapshot in the specified path. @param path directory containing the snapshot @param snapshotOldName current name of the snapshot @param snapshotNewName new name for the snapshot @throws IOException if an I/O error occurs during renaming
2229 Creates a snapshot of the specified path. @param path file system path to snapshot @param snapshotName name for the snapshot @throws IOException if an I/O error occurs
2230 Resolves and processes a file system link. @param path the path to be processed
2231 Resolves and applies a file system link policy. @param path the target file path @param policyName the name of the policy to apply @throws IOException if an I/O error occurs
2232 Processes a file path by resolving and manipulating it. @param src source file path to process @throws IOException if an I/O error occurs during processing
2233 Resolves block storage policy for a given path. @param path file system path @return BlockStoragePolicySpi object
2234 Checks capability for a file system path. @param path file system path to check @param capability required capability @return true if capability is granted, false otherwise @throws IOException if an I/O error occurs
2235 Resolves file system server defaults. @param path file path to resolve @return FsServerDefaults object @throws IOException if an I/O error occurs
2236 Initializes multipart uploader with base path. @param basePath root directory for uploads @return MultipartUploaderBuilder instance @throws IOException if file system access fails
2237 Returns a file path using SFTP client. @param client the SFTP client instance @return the file path as a Path object
2238 Retrieves file status. @return FileStatus object or null if an error occurs @throws IOException if I/O error occurs during retrieval
2239 Delegates to filesystem's m1 method. @throws IOException if an I/O error occurs
2240 Resolves path using regex and interceptors. @param srcPath source path to resolve @param resolveLastComponent flag to resolve last component @return ResolveResult object or null if not resolved
2241 Checks if a file exists in local directories. @param pathStr file path string @param conf configuration object @return true if file is found, false otherwise
2242 Marks a directory and its files as deleted. @param fs FileSystem object to perform operations on @param name directory name
2243 Generates a path for the current directory based on the date. @param now current date @return Path object representing the directory
2244 Opens a file output stream with specified permissions. @param f the File object to be opened @param permissions access permissions for the file @return FileOutputStream instance @throws IOException if an I/O error occurs
2245 Checks paths for raw reservation and throws exception if mismatch. @param src source path @param target target path @return true if both paths are in raw reservation, false otherwise
2246 Returns the masked path. @return Path object representing the masked path
2247 Returns an optional path. @return Optional containing Path or empty if not applicable
2248 Retrieves directory contents as an iterator. @return Iterator of PathData objects representing files in the directory @throws IOException if an I/O error occurs
2249 Constructs a FSDataOutputStreamBuilder. @param fc FileContext instance @param p Path to file @throws IOException if an I/O error occurs
2250 Verifies file checksum and checks access. @param verifyChecksum flag to enable/disable checksum verification @param f path to the file @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if file system is unsupported @throws IOException for other I/O errors
2251 Reads and processes file status data from input. @param in DataInput source containing file status information @throws IOException if reading fails or data is invalid
2252 Constructs a LocatedFileStatus object. @param length file size in bytes @param isdir true if the path is a directory @param block_replication replication factor of blocks @param blocksize block size in bytes @param modification_time last modification time in milliseconds since epoch @param access_time last access time in milliseconds since epoch @param permission file permissions @param owner file owner @param group file group @param symlink symbolic link path (if any) @param path file path @param hasAcl true if the file has an ACL @param isEncrypted true if the file is encrypted @param isErasureCoded true if the file uses erasure coding @param locations block locations
2253 Adds a key-value pair to the data store. @param key unique identifier for the value @param val associated data value @throws IOException if an I/O error occurs
2254 Calls method m1. @throws IOException if an I/O error occurs in m1
2255 Writes byte to buffer; flushes if full. @param b byte to write @throws IOException on I/O error
2256 Copies bytes from input array to buffer. @param b source byte array @param off offset in source array @param len number of bytes to copy @return number of bytes copied @throws IOException if an I/O error occurs
2257 Decodes input chunks using specified erased indexes. @param inputs array of encoded chunks @param erasedIndexes indexes of erased chunks @param outputs decoded chunk results @throws IOException if an I/O error occurs during decoding
2258 Finishes block appending if forced or size limit reached. @param bForceFinish flag to force block finish @throws IOException on I/O errors during processing
2259 Reads and validates token storage header, then processes data based on format. @param in DataInputStream to read from @throws IOException if header is invalid or unsupported format is encountered
2260 Fetches and processes delegation tokens for cleanup. @return Map of TokenIdent to DelegationTokenInformation
2261 Reads and returns the length of a value. @param rawValue input data containing the value @return length of the value read from input @throws IOException if an I/O error occurs
2262 Writes credentials to output stream. @param out DataOutput stream to write credentials @throws IOException if an I/O error occurs
2263 Converts a generic token to a protocol buffer token. @param tok the input token of any type @return the converted TokenProto object
2264 Executes mask function and returns an Entry. @throws IOException if input/output error occurs
2265 Compares current object with another using reader. @param other RawComparable to compare against @return Comparison result as an integer @throws IOException if I/O error occurs during comparison
2266 Masks key and value using helper methods. @param key input key to be masked @param value input value to be masked @throws IOException if an I/O error occurs
2267 Iterates and processes data n times. @param n number of iterations
2268 Fetches delegation token from specified URL. @param url target URL for fetching the token @param token existing authentication token @param renewer entity that can renew the token @return Token object containing AbstractDelegationTokenIdentifier @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2269 Calls m1 with an additional parameter set to null. @param url the URL to access @param token authentication token @param dToken delegation token @return result of the call @throws IOException if I/O error occurs @throws AuthenticationException if authentication fails
2270 Calls overloaded m1 with additional parameter set to null. @param url target URL for the request @param token authentication token @param dToken delegation token
2271 Wraps socket input with specified encoding. @param socket network socket connection @return SocketInputWrapper instance @throws IOException if an I/O error occurs
2272 Returns an OutputStream from the given Socket. @param socket the connected socket to write data to @return OutputStream for writing data to the socket @throws IOException if an I/O error occurs
2273 Calls overloaded method with default null value. @param socket network connection socket @param address target socket address @param timeout operation timeout in milliseconds
2274 Collects and returns metrics from sources. @return MetricsBuffer containing aggregated metrics
2275 Creates an ObjectName with specified service and MBean. @param serviceName name of the service @param nameName name component for the ObjectName @param theMbean MBean object to be associated @return created ObjectName instance
2276 Retrieves or creates disk validator metrics for a directory. @param dirName name of the directory @return ReadWriteDiskValidatorMetrics object
2277 Initializes RPC stats for a specified number of priority levels. @param numLevels the number of priority levels to initialize
2278 Processes and updates metrics in a thread-safe manner.
2279 Creates a mutable rate with default settings. @param name identifier for the rate @return MutableRate object initialized with given name
2280 Creates a mutable rate with specified name and description. @param name the name of the rate @param description the description of the rate @return a MutableRate object
2281 Examines and logs details of a Kerberos keytab file. @param keytabFile the keytab file to examine
2282 Configures JAAS based on system property. @param jaasRequired indicates if JAAS configuration is mandatory
2283 Retrieves the real user from TokenIdent. @param id TokenIdent object containing user information @return Real user string extracted from TokenIdent
2284 Ensures the existence of a ZNode directory. @throws IOException if an I/O error occurs @throws InterruptedException if interrupted while waiting @throws KeeperException if a ZooKeeper operation fails
2285 Retrieves mask data from Zookeeper. @throws ActiveNotFoundException if active node not found @throws KeeperException for Zookeeper operation errors @throws InterruptedException if thread is interrupted @throws IOException for I/O errors
2286 Calls method m1 with true parameter. @throws IOException if an I/O error occurs
2287 Calls overloaded method with false flag. @throws IOException if an I/O error occurs
2288 Modifies socket address based on conditions. @param addr original InetSocketAddress @return modified InetSocketAddress or default if exception occurs
2289 Checks and updates server address if changed. @return true if address was updated, false otherwise
2290 Masks URI host and sets default port if necessary. @param uri original URI to be masked @param defaultPort default port to use if none specified in URI @return masked URI with potential default port set
2291 Handles RPC request processing and response handling. @param rpcKind type of RPC call @param rpcRequest the RPC request to be sent @param remoteId identifier for the remote connection @param serviceClass class of the service @param fallbackToSimpleAuth flag to fall back to simple authentication @param alignmentContext context for alignment operations @return response from the server or null if asynchronous @throws IOException on I/O errors during processing
2292 Handles cache entry processing and state management. @param newEntry the new cache entry to process @return processed CacheEntry object
2293 Adds a new cache entry with masked client ID. @param clientId unique client identifier @param callId unique call identifier
2294 Calls overloaded method with default second parameter. @param qOption query option flag @return result of the overloaded method
2295 Creates an Expression instance based on the given name and configuration. @param expressionName name of the expression to create @param conf configuration object @return Expression instance or throws NullPointerException if config is null
2296 Creates an Expression instance from a class name. @param expressionClassname fully qualified class name of the Expression @param conf configuration object @return Expression instance @throws IllegalArgumentException if class not found
2297 Generates a masked string of recognized expressions. @param factory ExpressionFactory instance @return Masked string describing primary and operator expressions
2298 Creates an expression using a mask. @param expressionClass type of expression to create @return masked expression instance
2299 Executes command with default options. @param cmd command to execute @return Command object
2300 Reads an object from a DataInput stream. @param in input stream to read from @param objectWritable object to store the result, can be null @param conf configuration settings @return deserialized object or null if not applicable
2301 Creates an instance of a Writable class. @param c Class type of the Writable to create @return Instance of the specified Writable class or null if creation fails
2302 Masks a token by applying transformation m1. @param token input token to be masked @return transformed TokenIdent object @throws IOException if an I/O error occurs during masking
2303 Masks credentials by printing tokens matching the alias. @param creds user credentials object @param alias text to match against token identifiers @param out print stream for output @throws IOException if an I/O error occurs during output
2304 Creates a DiskValidator instance based on the input string. @param diskValidator name of the disk validator @return DiskValidator object @throws DiskErrorException if the validator class is not found
2305 Constructs an empty block location.
2306 Retrieves block locations for a file segment. @param file FileStatus object representing the file @param start starting offset of the segment @param len length of the segment @return array of BlockLocation objects or empty array if no blocks found @throws IOException if an I/O error occurs
2307 Generates a duration statistic summary. @param source IOStatistics object containing data @param key identifier for the statistic @param success indicates if the operation was successful @return DurationStatisticSummary with calculated statistics
2308 Takes a snapshot of IO statistics. @return IOStatisticsSnapshot object containing current stats
2309 Creates an IOStatisticsSnapshot from given IOStatistics. @param statistics source IOStatistics object @return IOStatisticsSnapshot instance
2310 Converts an object to an IOStatisticsSnapshot. @param source the source object, expected to be an IOStatistics instance @return a Serializable IOStatisticsSnapshot or null if conversion fails
2311 Masks data from remote iterator into a list. @param source RemoteIterator providing data @return List containing masked data @throws IOException if an I/O error occurs
2312 Processes PathData item. @param item PathData object to process @throws IOException if an I/O error occurs
2313 Executes shell command to fetch user groups. @param user username for which to fetch groups @return set of group names or empty set if none found
2314 Executes a command script with arguments. @param args list of command arguments @param commandScriptName name of the command script @return combined output of the command execution or null on error
2315 Masks file content by reading and processing it. @param f File object to be processed @return Masked content as a String or empty string on error
2316 Sets file permissions. @param p file path @param permission desired file permissions
2317 Masks a network group name. @param netgroup the original network group name @return masked network group name or empty string on error
2318 Copies credentials from another Credentials object. @param credentials source Credentials object to copy from
2319 Masks user credentials. @param credentials user's login details
2320 Masks a file path using local file system. @return masked File object or throws exception if not local
2321 Ensures directory has the expected permissions. @param localFS LocalFileSystem instance @param dir Path to the directory @param expected Expected FsPermission
2322 Retrieves file status with optional symlink resolution. @param f file path to check @param dereference true to resolve symlinks @return FileStatus object representing the file's status @throws IOException if an I/O error occurs
2323 Applies mask to given path. @param path input file path @return masked Path object @throws IOException if an I/O error occurs
2324 Marks files for deletion on exit. Iterates through and deletes paths associated with file contexts.
2325 Checks if a file exists at the specified path. @param f file path to check @return true if file exists, false otherwise
2326 Sets the working directory and validates it. @param newWDir new working directory path @throws IOException if an I/O error occurs or if the target is a file
2327 Copies a file to a destination path. @param srcName source file name or null for directories @param dst destination path @param overwrite flag to overwrite existing files @throws AccessControlException if access is denied @throws IOException on I/O errors or if target exists and overwrite is false
2328 Calculates content summary for a file or directory. @param f Path to the file or directory @return ContentSummary object with size, file count, and directory count @throws AccessControlException if access is denied @throws FileNotFoundException if file not found @throws UnsupportedFileSystemException if filesystem is unsupported @throws IOException for other I/O errors
2329 Retrieves tokens for a given path. @param p file system path @param renewer entity that can renew the token @return list of tokens associated with the path @throws IOException if an I/O error occurs
2330 Sets an extended attribute with specified flags. @param path file path @param name attribute name @param value attribute value @throws IOException if I/O error occurs
2331 Calls overloaded method with default options. @param path file system path to process @return result of processing the path @throws IOException if an I/O error occurs
2332 Initializes a MultipartUploaderBuilderImpl with file context and path. @param fc FileContext object for file operations @param p Path to the file @throws IOException if an I/O error occurs
2333 Waits for and truncates files in the wait list to a specified length. @throws IOException if an I/O error occurs
2334 Resolves path using regex mount points. @param srcPath source path to resolve @param resolveLastComponent flag to resolve last component @return ResolveResult or null if no match found
2335 Checks configuration against given path. @param pathStr file path string @param conf configuration object @return true if valid, false otherwise
2336 Masks a given path by finding its archive root. @param path the input file path @return masked path or null if not applicable
2337 Generates a masked path by appending ".crc" to the filename. @param file original file path @return new Path with modified filename
2338 Masks file based on condition. @return true if masking successful, false otherwise @throws IOException if an I/O error occurs
2339 Masks file with specified permissions. @param f file path @param absolutePermission file permissions @param createParent flag to create parent directory if missing @throws IOException on failure to mask or create parent
2340 Renames a file or directory. @param src source path @param dst destination path @param options optional rename options like OVERWRITE @throws IOException if operation fails
2341 Generates a masked path by appending ".crc" to the second part of the input path. @param file original file path @return modified path with appended CRC extension
2342 Checks if path is within base path. @param p path to check @param basePath base directory path @return true if path is within base path, false otherwise
2343 Checks if m1 returns null. @return true if m1 is null, false otherwise
2344 Constructs a path with a given suffix. @param suffix the string to append to the base path @return constructed Path object
2345 Masks a URI path with another path. @param pathURI the original URI to mask @param pathWithLink the path containing link information @param target the target path for masking @return masked Path or original target if no scheme and auth
2346 Renames or moves a file from source to destination. @param src source path @param dst destination path @param overwrite flag to allow overwriting existing files @throws IOException if an I/O error occurs
2347 Constructs a FileStatus object. @param length file size in bytes @param isdir true if the path is a directory @param block_replication replication factor of file blocks @param blocksize block size in bytes @param modification_time last modification time in milliseconds since epoch @param access_time last access time in milliseconds since epoch @param permission file permissions @param owner file owner @param group file group @param path file path
2348 Constructs a new FileStatus by copying another. @param other the FileStatus to copy from @throws IOException if an I/O error occurs during copying
2349 Initializes a LocatedFileStatus with the given FileStatus and block locations. @param stat FileStatus object containing file metadata @param locations BlockLocation array representing block locations
2350 Deprecated constructor for LocatedFileStatus. @param length file size in bytes @param isdir true if the path is a directory @param block_replication replication factor of blocks @param blocksize block size in bytes @param modification_time last modified timestamp @param access_time last accessed timestamp @param permission file permissions @param owner file owner @param group file group @param symlink symbolic link path @param path file path @param locations array of block locations
2351 Increments count and calls superclass method. @param value object to be written @throws IOException if an I/O error occurs
2352 Masks bytes in array. @param b byte array to mask @param off offset to start masking @param len number of bytes to mask @throws IOException if I/O error occurs
2353 Calls method m1 and then invokes superclass's m2. @throws Throwable if either method throws an exception
2354 Calls function m1 and handles potential IOExceptions.
2355 Overrides and calls method m1. Throws IOException if m1 does.
2356 Reads and parses credentials from a file. @param filename the file containing credentials @param conf configuration object (unused) @return Credentials object populated with data from the file @throws IOException if an error occurs during file reading
2357 Searches for a key in the current block. @param key the key to search for @param greater true if searching for keys greater than or equal to the given key @return true if a match is found, false otherwise @throws IOException if an I/O error occurs during the search
2358 Checks and processes sink status. Calls m3 with m2's result if sinks' count is greater than zero.
2359 Updates metrics for a given protocol. @param protocol the protocol class to update metrics for
2360 Delegates to innerMetrics' m1 method.
2361 Updates a mutable metric with a given value. @param name the name of the metric @param value the value to update the metric with
2362 Updates token owner statistics. @param id Token identifier
2363 Masks a token by updating its owner's statistics. @param id Token identifier to be masked
2364 Retrieves the current active HA service target. @return HAServiceTarget object or null if not found @throws IOException on unexpected ZooKeeper issues @throws InterruptedException if thread is interrupted during operation
2365 Initializes an ActiveStandbyElector with ZK configuration and callback. @param zookeeperHostPorts comma-separated list of ZK host:port pairs @param zookeeperSessionTimeout session timeout in milliseconds @param parentZnodeName ZK node path for election @param acl access control list for ZK nodes @param authInfo authentication information for ZK @param app callback for election events @param maxRetryNum maximum retry attempts on connection failure @param failFast if true, attempt to create a new connection immediately; otherwise, re-establish session @param truststoreKeystore keystore and truststore configuration @throws IOException if an I/O error occurs @throws HadoopIllegalArgumentException for invalid arguments @throws KeeperException if there is a ZK error
2366 Calls m1 with additional parameter. @param target target address @param defaultPort default port number @param configName configuration name @param useCacheIfPresent flag to use cache if available @return InetSocketAddress object
2367 Retrieves InetSocketAddress from Server using helper method. @param server Server instance to query @return InetSocketAddress associated with the server
2368 Calls m1 with default service class. @param rpcKind type of RPC kind @param rpcRequest request data @param remoteId connection identifier @param fallbackToSimpleAuth flag for fallback authentication @return Writable response or throws IOException
2369 Retrieves a CacheEntry from the RetryCache. @param cache RetryCache instance to query @param clientId client identifier in byte array format @param callId unique call identifier @return CacheEntry object or null if not found or conditions are met
2370 Retrieves or creates a cache entry. @param cache the RetryCache instance @param payload data to be cached @param clientId unique client identifier @param callId unique call identifier @return CacheEntryWithPayload object or null if not found or creation fails
2371 Creates an expression using a factory. @param expressionName name of the expression to create @return Expression object created by the factory
2372 Retrieves or creates a WritableComparator for a class. @param c the class of WritableComparable @param conf configuration settings @return configured WritableComparator instance
2373 Constructs a comparator for the specified writable class. @param keyClass the class of keys to be compared
2374 Initializes a LocalDirAllocator with a configuration item name. @param contextCfgItemName the configuration item name for the allocator
2375 Migrates deprecated keys to new ones in properties.
2376 Creates a deep copy of the given Configuration object. @param other the Configuration object to copy
2377 Masks configuration properties. @param conf Configuration object containing settings to mask
2378 Retrieves alternative names for a deprecated key. @param name the original key name @return array of alternative names or null if none exist
2379 Masks a resource name. @param name the resource name to mask @return masked resource names or null if not applicable
2380 Calls m2 on the result of m1(). @return Result of m2() called on the object returned by m1()
2381 Calls m2 on objects returned by m1 and m3.
2382 Converts Properties to Map and returns an iterator of entries. @return Iterator<Map.Entry<String, String>> containing key-value pairs
2383 Masks values in a map based on regex. @param regex pattern to match keys for masking @return Map with masked values
2384 Processes file ranges with checksum validation. @param ranges list of file ranges to process @param allocate function to allocate ByteBuffer @throws IOException if an I/O error occurs
2385 Retrieves buffer data by block number with retries. @param blockNumber the identifier of the block to retrieve @return BufferData object if successful @throws IOException if an I/O error occurs or stream is closed
2386 Processes items in waitList, adjusting replications and monitoring progress.
2387 Retrieves block locations for a specified path range. @param p the file path @param start starting offset in bytes @param len length of the range in bytes @return array of BlockLocation objects @throws IOException if an I/O error occurs
2388 Masks and summarizes duration statistics. @param source IOStatistics object containing data @param key identifier for the statistic to mask @return DurationStatisticSummary of masked statistics
2389 Calls overloaded m1 with null parameter. @return result of m1(null)
2390 Applies mask function to source object. @param source input data object @return processed Serializable object or null
2391 Converts RemoteIterator to array. @param source iterator of remote elements @param a target array type @return array containing elements from iterator @throws IOException if an I/O error occurs
2392 Renews a delegation token. @param token the token to be renewed @param renewer the user attempting to renew the token @return new expiration time of the token @throws InvalidToken if the token is invalid or expired @throws IOException on I/O errors
2393 Cancels a token by identifier and checks authorization. @param token the token to be cancelled @param canceller user attempting to cancel the token @return TokenIdent of the cancelled token @throws IOException if an I/O error occurs
2394 Processes a list of PathData objects. @param args list of PathData to process
2395 Masks sensitive information in user name. @param userName original user name @return list of masked characters @throws IOException if an I/O error occurs
2396 Executes a shell command to get the link count of a file. @param fileName the file to check @return the number of hard links @throws IOException if an I/O error occurs or file is not found
2397 Creates a symbolic link from target to linkname. @param target path of the target file @param linkname path where the symlink should be created @return exit code of the command execution, 0 on success @throws IOException if an I/O error occurs
2398 Changes file permissions using a shell command. @param filename path to the file @param perm permission string @param recursive true for recursive operation @return exit status of the shell command @throws IOException if an I/O error occurs
2399 Checks if 'setsid' is supported on the system. @return true if 'setsid' is available and allowed, false otherwise
2400 Masks a file with specified user and group. @param file the file to mask @param username the username for masking @param groupname the groupname for masking
2401 Parses netgroup to extract user list. @param netgroup netgroup string to be parsed @return List of usernames extracted from the netgroup @throws IOException if an I/O error occurs during parsing
2402 Generates and returns user credentials. @return Credentials object containing user tokens
2403 Filters files in a directory. @param f path to the directory @param filter criteria for file selection @return array of filtered FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if file not found @throws UnsupportedFileSystemException if file system is unsupported @throws IOException if I/O error occurs
2404 Filters and processes file statuses. @param files array of file paths to process @param filter criteria for filtering files @return array of filtered FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if a file is not found @throws IOException for other I/O errors
2405 Resolves a path to a filesystem node. @param p the input path string @param resolveLastComponent whether to resolve the last component @return ResolveResult containing the resolved node and details @throws IOException if an I/O error occurs
2406 Checks and replicates a file. @param src source file path @param replication number of replicas @return true if successful, false otherwise @throws IOException if an I/O error occurs @throws UnresolvedLinkException if a symbolic link cannot be resolved
2407 Checks and processes file status recursively. @param f file path to check @param recursive flag for recursive processing @return true if processed, false otherwise
2408 Moves file from source to destination path. Handles existing files and checks for specific conditions. @param src source file path @param dst destination file path @return true if operation successful, false otherwise
2409 Checks file status and processes recursively or individually. @param f file path to check @param recursive flag for recursive processing @return true if operation is successful, false otherwise @throws IOException if an I/O error occurs
2410 Checks if target path is a descendant of any ancestor in source path. @param source PathData representing the root path @param target PathData representing the path to check @return true if target is a descendant, false otherwise
2411 Masks a given path. @param path the original file path @return masked file path
2412 Masks the given path. @param p input file path @return masked path string or empty if matches root path
2413 Masks the given path by removing or modifying its root part. @param p input file path @return masked path string or empty if unchanged @throws IOException if internal error occurs
2414 Reads file content from given path. @param fc file context @param path file path @return file content or null if not found @throws IOException on I/O errors or symlink resolution issues
2415 Moves a file from source to destination with optional overwrite. @param src source file path @param dst destination file path @param options rename options (e.g., OVERWRITE) @throws IOException if an I/O error occurs
2416 Creates a FileStatus object based on HarStatus. @param h HarStatus instance containing file metadata @return FileStatus object representing the file or directory @throws IOException if an I/O error occurs
2417 Creates a FileStatus object from an FTP file. @param ftpFile the FTP file to process @param parentPath the parent directory path @return FileStatus representing the FTP file
2418 Masks credentials using a token file and configuration. @param tokenFile file containing the token @param conf configuration settings @param category error category @param message error message @return true if successful, false otherwise
2419 Masks credentials from a file and prints the result. @param tokenFile file containing credentials @param alias text alias for masking @param conf configuration settings @param out output stream for results @throws IOException if an I/O error occurs
2420 Updates or removes a token based on retrieval status. @param ident identifier for the token to process
2421 Initializes a MetricsSystem with a given prefix. @param prefix the metric system's prefix or null for default initialization
2422 Handles RPC method invocation. @param server RPC server instance @param connectionProtocolName protocol name for the connection @param request buffer containing request data @param methodName name of the method to invoke @param protocolImpl implementation of the protocol @return RpcWritable result or null if callback is set @throws Exception if method invocation fails
2423 Records a metric with a given name and elapsed time. @param name the name of the metric @param elapsed the elapsed time in milliseconds
2424 Adds a persisted delegation token. @param identifier unique token identifier @param renewDate token's renewal date @throws IOException if adding fails or token is already active
2425 Updates stats and processes tokens.
2426 Removes expired delegation tokens. @throws IOException if an I/O error occurs
2427 Constructs an ActiveStandbyElector with TLS enabled. @param zookeeperHostPorts ZooKeeper host:port list @param zookeeperSessionTimeout session timeout in milliseconds @param parentZnodeName parent ZNode name @param acl Access control lists for ZNodes @param authInfo authentication information for ZooKeeper @param app callback for election events @param maxRetryNum maximum number of retries on connection loss @param truststoreKeystore TLS truststore and keystore configuration @throws IOException if an I/O error occurs @throws HadoopIllegalArgumentException if invalid arguments are provided @throws KeeperException if a ZooKeeper operation fails
2428 Masks data and initiates an election if not already in one. @param data byte array to be masked @throws HadoopIllegalArgumentException if data is null
2429 Creates an InetSocketAddress with optional configuration. @param target hostname or IP address @param defaultPort port number to use if not specified in config @param configName name of the configuration file @return InetSocketAddress object
2430 Handles RPC method invocation with parameter validation and tracing. @param proxy the proxy object @param method the method being invoked @param args the arguments for the method @return the result of the method call or null for async processing @throws ServiceException if parameters are invalid or an error occurs
2431 Handles RPC method invocation with parameter validation and tracing. @param proxy the proxy object @param method the method to invoke @param args the arguments for the method @return the result of the method call or null if async @throws ServiceException if there's an issue during processing
2432 Parses and constructs an expression from a deque of string arguments. @param args deque containing expression tokens @return constructed Expression object @throws IOException if unexpected argument is encountered
2433 Returns a comparator for the specified writable class. @param c class of WritableComparable @return WritableComparator instance
2434 Authenticates user using delegation token or fallback method. @param request HTTP request object @param response HTTP response object @return AuthenticationToken if successful, null otherwise
2435 Masks a property name based on deprecation context. @param deprecations context for deprecated keys @param name original property name @return array of masked or new property names
2436 Masks environment variables by replacing dots with underscores. @param env map containing environment variables to be masked
2437 Overrides to process and validate token. @param token input token object @param canceller cancellation identifier @return processed TokenIdent or null if invalid @throws IOException on processing error
2438 Retrieves and updates user's group membership. @param user the username @return list of groups the user belongs to @throws IOException if an I/O error occurs
2439 Unpacks a tar file to the specified directory. @param inFile input tar file @param untarDir destination directory for unpacking @throws IOException if directory creation fails or unpacking errors occur
2440 Calls m1 with default value for overwrite. @param filename name of the file @param perm file permissions @return result of m1 method call @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
2441 Sets file readability on Windows; otherwise, delegates to m1. @param f the File object to modify @param readable true to make file readable, false to make it unreadable @return true if operation is successful, false otherwise
2442 Sets file permissions on Windows. @param f the target file @param writable indicates if file should be writable @return true if operation succeeds, false otherwise
2443 Sets file executable permission. @param f File object to modify @param executable boolean indicating if the file should be executable @return true if operation succeeds, false otherwise
2444 Executes native operations conditionally. Calls m4() if m1() is false and NativeIO.m2() is true, logs exception on failure. Always calls m5() if m1() is false.
2445 Modifies file permissions for a user and group. @param p path to the file @param username user name @param groupname group name @throws IOException if an I/O error occurs
2446 Applies file permissions with masking. @param f the target File object @param permission FsPermission to apply
2447 Processes groups for masking logic. @param groups list of group names to process
2448 Logs user group information and tokens. @param ugi UserGroupInformation object containing user details
2449 Logs user group information and tokens if logging is enabled. @param log the Logger instance to use for logging @param caption a descriptive caption for the log entry @param ugi UserGroupInformation object containing user details and tokens
2450 Masks directory permissions to expected. @param localFS Local file system instance @param dir Directory path to mask @param expected Expected file permissions @throws DiskErrorException if disk error occurs @throws IOException if I/O error occurs
2451 Masks directory permissions. @param localFS Local file system instance @param dir Directory path to mask @param expected Expected file permissions
2452 Checks file statuses with default filter. @param files array of file paths to check @return array of FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if a file is not found @throws IOException for other I/O errors
2453 Resolves and retrieves used space from file system. @throws IOException if an I/O error occurs @return used space in bytes
2454 Retrieves block locations for a file segment. @param file file status object @param start starting offset of the segment @param len length of the segment @return array of BlockLocation objects
2455 Opens an input stream for reading from a specified path. @param f the file path to read from @param bufferSize size of the buffer used for reading @return FSDataInputStream for the specified file @throws IOException if file is not found or other I/O errors occur
2456 Returns an input stream for reading data from a file. @param f the file path @param bufferSize size of the buffer to use @return FSDataInputStream with checksum enabled @throws IOException if an I/O error occurs @throws UnresolvedLinkException if a symbolic link could not be resolved
2457 Opens an input stream for the given file path with specified buffer size. @param f file path to open @param bufferSize size of the buffer @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2458 Masks a file by moving it to a destination path. @param src source file path @param dst destination file path @throws IOException if an I/O error occurs @throws UnresolvedLinkException if a symbolic link cannot be resolved
2459 Renames a file from source to destination path. @param src source file path @param dst destination file path @param options optional rename options @throws IOException if renaming fails for various reasons
2460 Masks file statuses under a given parent. @param parent the parent directory status @param statuses list to store masked file statuses @throws IOException if an I/O error occurs
2461 Retrieves file status using mask function. @param f file path @return FileStatus object or null if not found
2462 Retrieves file status from SFTP server. @param client SFTP client instance @param file local path of the file @return FileStatus object or throws IOException if not found
2463 Retrieves file status from FTP server. @param client FTP client instance @param file path to the file @return FileStatus object or throws FileNotFoundException if not found
2464 Constructs a new MetricsSystemImpl with default configuration.
2465 Initializes a MutableRollingAverages instance. @param metricValueName name of the metric for rolling averages
2466 Configures and schedules task execution. @param windows number of intervals to consider @param interval duration between executions @param timeUnit unit of the interval duration
2467 Handles master election logic based on health state. @param elector the election manager instance @param localTarget the target for election
2468 Masks functionality with sleep after failure to become active.
2469 Handles ZooKeeper watcher events. @param zk ZooKeeper instance @param event WatchedEvent received
2470 Creates an InetSocketAddress with a target and default port. @param target the target address (hostname or IP) @param defaultPort the default port number @return InetSocketAddress object
2471 Handles authentication based on request headers. @param request HTTP request containing authorization info @param response HTTP response to send challenges if needed @return AuthenticationToken or null if unauthorized @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2472 Checks if a given name matches any masked pattern. @param name the name to check @return true if name matches any mask, false otherwise
2473 Masks a given name using context-dependent rules. @param name the original name to be masked @return masked version of the input name
2474 Masks a property with a given name and value. @param name the property name to mask @param value the value to assign to the masked property @param source the source of the masking action or null if programmatically set
2475 Masks a given name by processing it through various methods. @param name the name to be masked
2476 Calls m1 and returns the value of vmemSize. @return size of virtual memory
2477 Returns memory size after executing mask function. @return Memory size in bytes
2478 Returns available memory size. Calls m1() before returning the value. @return Available memory in bytes
2479 Returns available memory. Calls m1() before returning. @return amount of available memory
2480 Returns the number of processors. Calls m1() before returning. @return Number of processors
2481 Returns CPU frequency in kHz. Calls m1() before returning the value. @return CPU frequency in kHz
2482 Returns cumulative CPU time in milliseconds. Calls m1() before returning the value. @return cumulative CPU time in milliseconds
2483 Calculates CPU usage per processor. @return CPU usage percentage or -1 if not available
2484 Returns CPU usage percentage. @return CPU usage as a float between 0 and 1, or -1 if not available
2485 Calls m1() and returns netBytesRead. @return Value of netBytesRead after calling m1()
2486 Calls m1 and returns the net bytes written. @return number of net bytes written
2487 Masks network group data. Fetches groups, updates cache, and processes them.
2488 Updates filesystem status for a given mount point and path. @param viewFileSystem the ViewFileSystem instance to use @param mountPointMap map of MountPoint to FsStatus @param mountPoint the target mount point @param path the filesystem path
2489 Retrieves file status for a given path. @param f the input file path @return array of FileStatus objects @throws IOException if an I/O error occurs
2490 Determines file status. @param f file path @param dereference whether to follow symbolic links @return FileStatus object @throws IOException if an I/O error occurs
2491 Retrieves file status for a given path. @param f file path @return FileStatus object representing the file's status @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnresolvedLinkException if a symlink cannot be resolved @throws IOException if an I/O error occurs
2492 Retrieves file statuses for a given path. @param f file path to query @return array of FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if file not found @throws UnresolvedLinkException if link cannot be resolved @throws IOException on I/O errors
2493 Masks a file using SFTP channel. @param channel SFTP channel for file operations @param file path of the file to mask @return true if masking successful, false if file not found @throws IOException if an I/O error occurs during operation
2494 Recursively retrieves file status from SFTP. @param channel SFTP channel @param sftpFile SFTP entry to process @param parentPath parent directory path @return FileStatus object representing the file or directory @throws IOException if an I/O error occurs
2495 Checks if a file is not masked. @param channel SFTP channel for file operations @param file path to the file @return true if file is not masked, false otherwise @throws IOException if an I/O error occurs
2496 Applies mask operation on FTP file. @param client FTP client instance @param file local file path @return true if successful, false if file not found
2497 Retrieves file status from FTP server. @param client FTPClient instance @param file Path to the file or directory @return Array of FileStatus objects representing files and subdirectories
2498 Checks if file exists on FTP server. @param client FTPClient instance @param file local path to the file @return true if file exists, false otherwise
2499 Constructs a CBZip2InputStream with specified input stream and read mode. @param in input stream containing BZip2 compressed data @param readMode specifies the reading mode (e.g., NORMAL or SMALL)
2500 Decompresses BZip2 input stream and returns a value. @param in BZip2 compressed input stream @return decompressed value as long @throws IOException if I/O error occurs
2501 Handles ZooKeeper node creation result. @param rc result code from ZooKeeper operation @param path path of the created node @param ctx context object for the operation @param name name associated with the operation
2502 Handles Zookeeper StatNode result. @param rc Zookeeper operation result code @param path Path of the node @param ctx Context object @param stat Node statistics
2503 Creates an InetSocketAddress from target and default port. @param target host or IP address @return InetSocketAddress with specified target and default port
2504 Parses address specifications and returns a list of InetSocketAddress. @param specs comma-separated host:port or just host strings @param defaultPort port to use if not specified in specs @return List of InetSocketAddress objects
2505 Masks URI by extracting and returning its host. @param uri the input URI to process @param defPort default port number if not specified in URI @return masked host string or null if authority is missing
2506 Generates a masked configuration document. @param propertyName specific property to mask; if null, masks all properties @param redactor tool for masking sensitive data @return Document object with masked configurations @throws IOException if there's an error parsing XML @throws IllegalArgumentException if specified property is not found
2507 Substitutes variables in expression. @param expr input expression with variables @return modified expression with substituted values or original if no substitutions
2508 Handles configuration reconfiguration and logging changes. @param out PrintWriter for outputting change logs @param reconf Reconfigurable object to apply new configurations @param req HttpServletRequest containing configuration parameters
2509 Calls overloaded method with default null for third parameter. @param name first parameter @param value second parameter
2510 Logs and sets a configuration property. @param name property name @param value property value @param source source of the property (optional)
2511 Masks a directory with optional permission granting. @param dir the directory to mask @param tryGrantPermissions flag to attempt granting permissions @return true if masking is successful, false otherwise
2512 Returns the mask value from function m1. @return integer mask value
2513 Retrieves file system status for given path. @param fileSystem the FileSystem instance @param path the Path to check @return Map of MountPoint to FsStatus @throws IOException if an I/O error occurs
2514 Retrieves file status and resolves symbolic links. @param f file path to check @return FileStatus object with resolved link @throws IOException if an I/O error occurs
2515 Renames a file on an SFTP server. @param channel SFTP channel connection @param src source path of the file to rename @param dst destination path for the renamed file @return true if renaming is successful, false otherwise
2516 Retrieves file status for a directory in SFTP. @param client SFTP client instance @param file local path to the directory @return array of FileStatus objects representing files and directories @throws IOException if an I/O error occurs during operation
2517 Creates a directory with specified permissions. @param client SFTP client instance @param file target directory path @param permission desired file system permissions @return true if directory is successfully created or already exists, false otherwise
2518 Retrieves file statuses matching a given path pattern. @param pathPattern the pattern to match file paths @return array of FileStatus objects @throws AccessControlException if access is denied @throws UnsupportedFileSystemException if file system is unsupported @throws IOException if an I/O error occurs
2519 Applies a mask to find files matching a pattern. @param pathPattern the file path pattern to match @param filter additional filter for file selection @return array of FileStatus objects or empty if none found
2520 Retrieves file status for paths matching a pattern. @param pathPattern glob pattern to match file paths @return array of FileStatus objects @throws IOException if an I/O error occurs
2521 Retrieves file statuses matching the given path pattern and filter. @param pathPattern path pattern to match files @param filter custom filter for file selection @return array of FileStatus objects
2522 Renames a file on an FTP server. @param client FTPClient instance @param src source file path @param dst destination file path @return true if rename is successful, false otherwise
2523 Deletes a file or directory on an FTP server. @param client FTPClient instance @param file path of the file or directory to delete @param recursive true if deletion should be recursive for directories @return true if deletion is successful, false otherwise
2524 Creates directory on FTP server with specified permissions. @param client FTPClient instance @param file Path to create directory @param permission FsPermission for the new directory @return true if directory was successfully created, false otherwise
2525 Masks IP and port in a given string. @param ipPort input string containing IP and port @return masked IP and port or original string if invalid
2526 Converts token to InetSocketAddress. @param token input token object @return InetSocketAddress derived from token
2527 Converts URI to Text using NetUtils. @param uri input URI object @return Text representation of the URI
2528 Returns masked string based on condition. @return Masked string or null if condition not met
2529 Masks data using security utility functions. @return masked string result
2530 Masks the given expression. @param expr input expression to be masked @return masked expression as a string
2531 Generates a processed string based on input name. @param name the input string to process @return the final processed string or null if none found
2532 Processes a name to derive a result. @param name the input name string @param defaultValue default value if processing fails @return processed result or null
2533 Applies a function mask with key and value. @param key unique identifier for the operation @param value associated data for the operation @return result of the masked function application
2534 Applies mask to configuration. @param key configuration key @param value configuration value @return result of the mask application
2535 Sets default file system name in configuration. @param conf Configuration object to update @param uri URI containing the file system name
2536 Updates configuration with a new link. @param conf Configuration object to update @param mountTableName Name of the mount table @param src Source path for the link @param target Target URI for the link
2537 Updates configuration with a masked target URI. @param conf Configuration object to update @param mountTableName Name of the mount table @param target Target URI for masking
2538 Updates configuration with a fallback link. @param conf Configuration object to update @param mountTableName Name of the mount table @param target URI for the fallback target
2539 Configures target URIs for a specified mount table. @param conf Configuration object to update @param mountTableName name of the mount table @param targets array of target URIs
2540 Updates configuration setting. @param conf Configuration object @param mountTableName Table name for mounting @param src Source path or identifier @param settings Configuration settings key @param targets Target paths or identifiers
2541 Updates configuration with masked source regex. @param conf Configuration object to update @param mountTableName Name of the mount table @param srcRegex Source regex pattern to mask @param targetStr Target string for masking @param interceptorSettings Optional interceptor settings
2542 Sets HDFS home directory in configuration. @param conf Configuration object to update @param mountTableName name of the mount table @param homedir HDFS home directory path
2543 Sets umask in configuration. @param conf Configuration object to update @param umask File permission umask to apply
2544 Masks configuration with class names. @param conf Configuration object to update @param classes List of Class objects to process
2545 Sets compression type for a job configuration. @param job Configuration object to modify @param val CompressionType value to set
2546 Creates configuration from FilterConfig with proxy user settings. @param filterConfig filter configuration object @return Configuration object containing proxy user settings
2547 Parses command-line arguments and executes corresponding actions. @param args array of command-line arguments @return exit code: 0 for success, 1 for error
2548 Masks and processes a given integer value. @param name identifier for the value processing @param value integer to be masked and processed
2549 Masks and processes a given value with a name. @param name identifier for the value @param value numeric value to be masked and processed
2550 Masks and processes a float value. @param name identifier for the value @param value the float value to be processed
2551 Masks and processes a given name and numeric value. @param name the input string to be processed @param value the numeric value to be masked and passed
2552 Masks a function with a given name and boolean value. @param name the name of the function to mask @param value the boolean value to apply for masking
2553 Masks and logs a time duration. @param name identifier for the log entry @param value duration value @param unit time unit for the duration
2554 Masks and stores a value with a given unit. @param name unique identifier for the value @param value numeric value to be masked @param unit storage unit associated with the value
2555 Masks a string using a regex pattern. @param name input string to mask @param pattern regex pattern for masking
2556 Masks sensitive information in log messages. @param name field name @param values variable number of string values to mask
2557 Masks and processes user information. @param name username to be masked @param addr network address associated with the user
2558 Validates class against interface and registers it. @param name registration name for the class @param theClass class to be validated and registered @param xface interface for validation
2559 Checks if directory is empty. @param dir directory to check @return true if directory is empty, false otherwise
2560 Masks a directory by deleting its contents. @param dir the directory to mask @param tryGrantPermissions flag to attempt granting permissions before deletion @return true if all deletions succeed, false otherwise
2561 Retrieves file statuses for a given path. @param f the path to check @return array of FileStatus objects or empty if none found
2562 Deprecated method to mask file status. @param f input file path @return FileStatus object with masked details or null if target does not exist
2563 Deletes a file or directory recursively. @param channel SFTP channel for operations @param file path of the file or directory to delete @param recursive true to delete directories recursively @return true if deletion is successful, false otherwise @throws IOException on I/O errors
2564 Creates a SplitCompressionInputStream for decompression. @param seekableIn input stream that supports seeking @param decompressor decompression algorithm to use @param start starting position in the stream @param end ending position in the stream @param readMode mode of reading the stream @return SplitCompressionInputStream for decompression @throws IOException if seekableIn does not support seeking
2565 Processes fields annotated with Metric. Updates field access and sets metrics if valid.
2566 Masks configuration key by combining storage type and name. @param conf Configuration object @param t Storage type @param name Key component @return Masked configuration key as a string
2567 Determines transfer mode from configuration. @param conf Configuration object @return Transfer mode code (FTP.BLOCK_TRANSFER_MODE, FTP.STREAM_TRANSFER_MODE, or FTP.COMPRESSED_TRANSFER_MODE)
2568 Configures FTP client data connection mode. @param client FTPClient instance to configure @param conf Configuration object containing settings @throws IOException if an I/O error occurs
2569 Masks table name with configuration settings. @param conf Configuration object @param mountTableName original table name @return masked table name as a string
2570 Retrieves file system permissions from configuration. @param conf Configuration object containing permission settings @return FsPermission object with parsed umask, defaulting to DEFAULT_UMASK if invalid or null
2571 Retrieves list of compression codecs from configuration. @param conf Hadoop configuration object @return List of CompressionCodec classes
2572 Determines compression type from configuration. @param job Configuration object containing settings @return CompressionType based on configuration, default is RECORD
2573 Masks a property value based on configuration. @param property the name of the property to mask @return masked property string or default if not set
2574 Processes Hadoop token files from configuration. @param conf Configuration object containing settings
2575 Initializes the key store with credentials. @throws IOException if there's an issue creating or loading the key store
2576 Masks configuration for DNS settings. @param conf Configuration object, can be null @return Masked IP address string @throws UnknownHostException if unable to resolve local host
2577 Masks function for protocol and configuration. @param protocol the protocol class @param conf the configuration object @return masked user or null if not applicable
2578 Masks a given name using a transformation function. @param name the original name to be masked @return the masked name or null if transformation fails
2579 Masks a value under a given name. @param name unique identifier for the value @param value the value to be masked
2580 Masks a value based on configuration. @param name configuration key @param defaultValue default value if config not found @param defaultUnit unit of the default value @param returnUnit desired unit for the returned value @return masked value in specified units or default value
2581 Converts a storage size value to the specified unit. @param name key for fetching the storage size value @param defaultValue default value if original is blank or invalid @param targetUnit unit to convert the storage size to @return converted storage size as a double
2582 Converts a storage value to the specified unit. @param name name of the storage size @param defaultValue default value if conversion fails @param targetUnit target unit for conversion @return converted value in target units or default value
2583 Retrieves a pattern by name, returning default if invalid. @param name the key to fetch the pattern from @param defaultValue the fallback pattern to use @return compiled Pattern or default if creation fails
2584 Processes and returns a collection of strings based on input name. @param name input string to process @return Collection of processed strings
2585 Processes input name through two methods. @param name input string to process @return processed string array or null if empty
2586 Retrieves a processed string value by name. @param name the key to look up the value @param defaultValue default values to return if no value is found @return an array of strings, either processed or default
2587 Converts a name to a collection of strings. @param name input string to process @return Collection of processed strings or empty collection if input is null
2588 Processes and splits a string using another method. @param name input string to process @return array of strings resulting from the split operation
2589 Retrieves a string array for a given name. @param name key to fetch the string value @param defaultValue default values to return if not found @return String array from m1 or defaultValue
2590 Filters and masks configuration properties. @param confPrefix prefix for filtering property names @return Map of filtered and masked properties
2591 Writes masked configuration to JSON. @param jsonGen JSON generator instance @param config configuration settings @param name parameter name @param redactor object for masking values
2592 Updates a property with a new value if conditions are met. @param property the name of the property to update @param newVal the new value for the property @throws ReconfigurationException if the property cannot be updated
2593 Overrides and logs the result of a method call. @param name input parameter for the method @return result of the overridden method
2594 Retrieves configuration property with default value. @param conf Configuration object @return Value of the specified config key or default if not found
2595 Loads and initializes bzip2 library. @param conf configuration object @return true if native library is loaded, false otherwise
2596 Creates a socket factory based on configuration. @param conf configuration object @return SocketFactory instance
2597 Masks deprecated UGI key with new static user. @param conf Configuration object @return Masked username or default if not found
2598 Masks an option by setting its value to unset. @param option the name of the option to mask
2599 Initializes TruststoreKeystore with configuration settings. @param conf Configuration object containing SSL keystore and truststore details
2600 Renews Kerberos ticket if conditions are met. @param force whether to force renewal regardless of current state
2601 Initializes KeyProvider with configuration. @param conf Hadoop configuration object
2602 Parses and returns ACL list from configuration. @param conf Configuration object containing ACL settings @return List of ACL objects @throws IOException if parsing fails
2603 Retrieves hash type configuration and returns its mask value. @param conf Configuration object containing settings @return Integer representing the mask value of the hash type
2604 Retrieves and parses an enum set from configuration. @param key config key for the enum set @param enumClass enum class type @param ignoreUnknown flag to ignore unknown enum values @return EnumSet of parsed enums or empty set if none found
2605 Creates an IntegerRanges object using a mask function. @param name parameter name for masking @param defaultValue default value if masking fails @return IntegerRanges object based on the mask result
2606 Retrieves and logs a configuration value. @param name the configuration key @param defaultValue the default value if not found @return the configuration value or default
2607 Calls m2 with key and boxed boolean. @param key unique identifier @param value boolean value to be boxed @return result of m2 call
2608 Applies mask to a numeric value using a key. @param key unique identifier for masking @param value numeric value to be masked @return result of the masking operation
2609 Calls m2 with key and boxed boolean value. @param key unique identifier @param value boolean flag @return result of m2 call
2610 Applies mask to key with double value. @param key unique identifier @param value numeric value to be masked @return processed result of type B
2611 Recursively processes URI configuration. @param conf Configuration object @param uri initial URI string
2612 Calls m2 with default settings if none provided. @param conf Configuration object @param mountTableName name of the mount table @param src source path @param settings optional settings string @param targets variable number of target URIs
2613 Sets the interval in the configuration. @param conf Configuration object to update @param interval new interval value
2614 Sets IPC ping interval in configuration. @param conf Configuration object to update @param pingInterval new ping interval value
2615 Sets IPC client connection timeout. @param conf Configuration object to update @param timeout Timeout value in milliseconds
2616 Sets nested mount point support in configuration. @param conf Configuration object to update @param isNestedMountPointSupported flag indicating support for nested mount points
2617 Processes a key with associated values. @param key unique identifier for the operation @param values variable number of values to process with the key @return result of processing as type B
2618 Processes a key with associated values. @param key unique identifier for the operation @param values variable number of values associated with the key @return result of the processing operation
2619 Masks and processes an address. @param name associated with the address @param addr original socket address @return processed InetSocketAddress
2620 Sets RPC engine in configuration. @param conf Configuration object @param protocol Protocol class @param engine Engine class to set
2621 Checks and processes a file or directory. @param p path to the file or directory @param recursive whether to process recursively @return true if processed successfully, false otherwise @throws IOException if an I/O error occurs
2622 Checks directory existence. @param dir directory to check @return true if directory exists, false otherwise
2623 Retrieves file status. @param f file path @return FileStatus object
2624 Retrieves file statuses from a given path. @param f file path to resolve @return FileStatus array of resolved files @throws AccessControlException if access is denied @throws FileNotFoundException if file is not found @throws IOException for other I/O errors
2625 Creates a file output stream with specified parameters. @param f file path @param overwrite flag to allow overwriting existing files @param bufferSize buffer size for I/O operations @param replication number of data replications @param blockSize block size for the file @param progress object to monitor progress @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
2626 Returns file system permission. Uses umask if set, otherwise retrieves from configuration. @return FsPermission object
2627 Creates a BlockFactory based on the specified type. @param keyToBufferDir directory for key to buffer mapping @param configuration configuration settings @param name type of block factory to create @return BlockFactory instance or throws IllegalArgumentException if unsupported
2628 Initializes the compression codec factory with configuration. @param conf Hadoop configuration object
2629 Retrieves value by name, returning default if null. @param name key to look up @param defaultValue value to return if lookup fails @return retrieved value or default
2630 Converts a string to an integer using a mask. @param name key for value retrieval @param defaultValue default integer value if conversion fails @return masked integer value or default if null
2631 Converts a named value to a long using a mask. @param name key for retrieving the value string @param defaultValue default long value if conversion fails @return converted long value or default if null or invalid
2632 Converts string to long using traditional binary prefix. @param name key for fetching value @param defaultValue default long value if conversion fails @return converted long value or default
2633 Retrieves and converts a named configuration value to a float. @param name configuration key @param defaultValue default float value if not found @return converted float value or default if conversion fails
2634 Retrieves and parses a double value by name. @param name key for the value to retrieve @param defaultValue default double value if retrieval fails @return parsed double value or default if not found
2635 Converts string to boolean with a default value. @param name key for the value in configuration @param defaultValue fallback boolean value if conversion fails @return parsed boolean or default value if invalid
2636 Fetches class by name, returns default if not found. @param name class name as string @param defaultValue default Class object to return if class not found @return Class object or default if class is not found
2637 Masks a function with a given name and boolean value. @param name the name of the function to mask @param value the boolean value to apply for masking
2638 Calls m1 with identical start and end units. @param name unique identifier @param defaultValue default value if not found @param unit time unit for both start and end @return result from m1 method
2639 Generates SASL properties for authentication. @param conf configuration object @param configKey key for fetching QOP values @param defaultQOP default QualityOfProtection setting @return Map containing SASL properties
2640 Converts string array to integer array using mask function. @param name input string @return integer array from masked string values
2641 Retrieves an array of Class objects based on a name. @param name the key to fetch class names @param defaultValue default classes if none found @return array of Class objects or default if not found
2642 Finds a valid directory for storing a file. @param dirsProp property containing directory paths @param path file path to be stored @return File object representing the chosen directory @throws IOException if no valid directory is found
2643 Initializes SerializationFactory with configurations. @param conf Configuration object containing serialization settings
2644 Masks configuration values based on prefix. @param conf Configuration object containing settings @param confPrefix Prefix to identify settings to mask @return Map of masked configuration key-value pairs
2645 Masks configuration values based on prefix. @param conf Configuration object containing settings @param confPrefix Prefix to identify config keys to mask @return Map of masked configuration key-value pairs
2646 Masks configuration properties with a prefix. @param builder FSBuilder instance to apply properties @param conf Configuration object containing properties @param prefix Prefix for filtering properties @param mandatory Flag indicating if properties are mandatory
2647 Generates a form for reconfiguring settings. @param out PrintWriter to output HTML @param reconf Reconfigurable object for configuration management
2648 Calls m2 with additional parameters. @param conf configuration object @param src source string @param target target URI
2649 Recursively calls m2 with modified configuration. @param conf Configuration object @param target Target URI
2650 Calls m2 with configuration, processed result from m1, and target URI. @param conf Configuration object @param target Target URI
2651 Calls m2 with modified configuration and targets. @param conf Configuration object @param targets Array of target URIs
2652 Calls overloaded m2 with additional parameter. @param conf configuration object @param homedir home directory path
2653 Calls another method with configuration and default value. @param conf application configuration @return result of m2 with configuration and computed default
2654 Creates an ErasureEncoder using configuration and options. @param conf Configuration object @param options ErasureCodecOptions specifying encoder settings @return ErasureEncoder instance
2655 Creates an ErasureDecoder instance. @param conf configuration settings @param options erasure codec options @return ErasureDecoder object initialized with given config and options
2656 Returns compressor class based on configuration. @param conf configuration settings @return Bzip2Compressor or BZip2DummyCompressor class
2657 Determines decompressor class based on configuration. @param conf Configuration object @return Class of decompressor to use
2658 Returns a decompressor based on configuration. @param conf configuration settings @return Bzip2Decompressor if enabled, otherwise BZip2DummyDecompressor
2659 Creates a SocketFactory based on configuration. @param conf Configuration object @param clazz Class for which the socket factory is created @return SocketFactory instance or default if not specified
2660 Initializes a Hadoop Zookeeper Factory with specified security settings. @param zkPrincipal ZooKeeper principal @param kerberosPrincipal Kerberos principal @param kerberosKeytab Path to Kerberos keytab file
2661 Initializes SSL context and configures it for client or server mode. @throws GeneralSecurityException if a security issue occurs @throws IOException if an I/O error occurs
2662 Checks security configuration mask. @param conf Configuration object @return true if mask is valid, false otherwise
2663 Configures security rules based on authentication type. @param conf Configuration object containing security settings @throws IOException if Kerberos realm cannot be retrieved
2664 Selects and returns a CryptoCodec compatible with the given CipherSuite. @param conf configuration settings @param cipherSuite desired cryptographic suite @return selected CryptoCodec or null if none found
2665 Generates a hash based on configuration. @param conf Configuration object @return Hash object
2666 Creates a FlagSet from configuration. @param enumClass the enum class type @param conf configuration object @param key config key prefix @param ignoreUnknown flag to ignore unknown values @return FlagSet containing parsed enum values
2667 Masks sensitive configuration properties in XML output. @param propertyName property to mask; null masks all @param out Writer to output the masked XML @param config Configuration object containing sensitive data @throws IOException if an I/O error occurs during processing @throws IllegalArgumentException for invalid input parameters
2668 Masks configuration properties and writes to output. @param config Configuration object containing sensitive data @param out Writer for outputting the masked JSON
2669 Calls m1 with given key and value. @param key unique identifier string @param value integer value @return result of m1 call
2670 Converts and delegates key-value pair to another method. @param key unique identifier @param value numeric value to be converted to long @return result of the delegated method
2671 Converts and delegates a masked function call. @param key unique identifier string @param value numeric value to be converted to long @return result of the delegated function
2672 Masks a function with a given key and value. @param key unique identifier for the function @param value integer value associated with the function @return result of the masked function execution
2673 Wraps an object in a MetricsSource with default factory. @param source the object to be wrapped @return MetricsSource instance
2674 Opens a file output stream with specified parameters. @param f file path @param overwrite flag to overwrite existing file @param bufferSize size of buffer in bytes @param replication number of block replicas @param blockSize size of each block in bytes @return FSDataOutputStream for writing to the file
2675 Creates a file with specified options. @param f file path @param createFlag flags for file creation @param opts additional options @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
2676 Creates a directory with specified permissions. @param dir target directory path @param permission directory permissions @param createParent flag to create parent directories if necessary
2677 Handles file compression and decompression based on command-line arguments. @param args command-line arguments specifying input/output files and operations
2678 Masks the principal configuration with a given hostname. @param principalConfig original principal configuration string @param hostname target hostname for masking @return masked principal configuration or original if invalid
2679 Masks the principal configuration with the client's domain name. @param principalConfig the original principal configuration string @param addr the client's InetAddress @return masked principal configuration or original if no replacement is needed @throws IOException if the client address is null or pattern replacement fails
2680 Registers an RPC service. @param rpcKind type of RPC communication @param protocolClass interface class of the protocol @param protocolImpl implementation instance of the protocol @return Server instance for method chaining
2681 Creates a KeyProvider using the specified configuration key. @param conf Configuration object containing settings @param configKeyName key for accessing the configuration @return KeyProvider instance or null if URI is invalid @throws IOException if an I/O error occurs during creation
2682 Constructs a URI from configuration. @param conf Configuration object @return Constructed URI with valid scheme
2683 Executes Kerberos kinit command and checks if it's executable. Logs path and issues warning if not found in PATH.
2684 Creates an InetSocketAddress from a given name or default values. @param name the name to resolve for the address @param defaultAddress fallback IP address if resolution fails @param defaultPort fallback port number @return InetSocketAddress instance using resolved or default values
2685 Resolves InetSocketAddress using host and address properties. @param hostProperty property key for the host @param addressProperty property key for the address @param defaultAddressValue default address value if not found @param addr initial InetSocketAddress @return resolved InetSocketAddress or result of m4 with default address
2686 Opens a file asynchronously with specified parameters. @return CompletableFuture of FSDataInputStream
2687 Opens a file stream with specified parameters. @return CompletableFuture of FSDataInputStream or throws IOException
2688 Configures SFTP settings from URI and configuration. @param uriInfo URI containing SFTP information @param conf Configuration object to store settings @throws IOException if host is null or decoding fails
2689 Establishes an SFTP channel using configuration settings. @return ChannelSftp object representing the established connection @throws IOException if connection fails
2690 Sets buffer size using file system configuration. @param bufferSize size of the buffer to be set
2691 Opens file input stream with specified buffer size. @param f file path @return FSDataInputStream for the file @throws IOException if an I/O error occurs
2692 Opens a file stream with specified buffer size. @param fd file handle for the path @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2693 Opens file for writing with specified buffer size. @param f file path @return FSDataOutputStream for writing @throws IOException if an I/O error occurs
2694 Opens a file for writing with specified buffer size and block appending option. @param f file path to write to @param appendToNewBlock flag to append data to a new block if true @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
2695 Initializes cache with configuration settings. @param conf configuration object containing parallel count
2696 Initializes a Sorter with specified parameters. @param fs FileSystem instance @param comparator RawComparator for key comparison @param keyClass Class of the sort keys @param valClass Class of the values to be sorted @param conf Configuration settings @param metadata Metadata associated with sorting
2697 Creates a compression output stream with specified buffer size and overhead. @param out the output stream to compress data into @param compressor the compressor to use for compression @return CompressionOutputStream configured with given parameters @throws IOException if an I/O error occurs
2698 Creates a compression input stream with the specified decompressor. @param in input stream to be compressed @param decompressor decompressor to use for compression @return CompressionInputStream for reading compressed data @throws IOException if an I/O error occurs
2699 Creates a LZ4 decompressor with configured buffer size. @return Lz4Decompressor instance initialized with buffer size from configuration
2700 Creates a compression output stream. @param out the output stream to wrap @param compressor the compressor to use @return CompressionOutputStream for writing compressed data @throws IOException if an I/O error occurs
2701 Creates a compression input stream for the given input and decompressor. @param in input stream to be compressed @param decompressor decompressor used for compression @return CompressionInputStream based on configuration @throws IOException if an I/O error occurs
2702 Creates a compressed output stream. @param out the underlying output stream @param compressor the compressor to use @return CompressionOutputStream for writing compressed data @throws IOException if an I/O error occurs
2703 Creates a Snappy compressor with configured buffer size. @return SnappyCompressor instance initialized with bufferSize
2704 Creates a compression input stream using the specified decompressor. @param in input stream to be compressed @param decompressor decompressor to use for compression @return CompressionInputStream for reading compressed data
2705 Creates a Snappy decompressor with configured buffer size. @return SnappyDecompressor instance initialized with specified buffer size
2706 Copies data from input stream to output stream with specified buffer size. @param in input stream source @param out output stream destination @param conf configuration object @throws IOException if an I/O error occurs
2707 Copies data from InputStream to OutputStream with configurable buffer size. @param in source input stream @param out destination output stream @param conf configuration object @param close whether to close streams after operation @throws IOException if I/O error occurs
2708 Retrieves the file buffer size from configuration. @param conf Configuration object @return File buffer size as an integer
2709 Configures the component using provided settings. @param conf Configuration object containing settings
2710 Retrieves crypto buffer size from configuration. @param conf Configuration object @return Buffer size as integer
2711 Retrieves IPC priority levels from configuration. @param ns namespace for configuration keys @param conf Configuration object @return number of priority levels, throws exception if invalid
2712 Retrieves the IPC client RPC timeout from configuration. @param conf Configuration object containing settings @return Timeout value in milliseconds
2713 Retrieves IPC ping interval from configuration. @param conf Configuration object @return Ping interval in milliseconds
2714 Retrieves RPC timeout from configuration. @param conf Configuration object @return Timeout value in milliseconds or 0 if negative
2715 Constructs a LineReader with an input stream and configuration. @param in input stream to read from @param conf configuration containing buffer size settings @throws IOException if there is an I/O error initializing the reader
2716 Initializes a LineReader with the given input stream and configuration. @param in input stream to read from @param conf configuration settings @param recordDelimiterBytes delimiter for record separation @throws IOException if an I/O error occurs
2717 Calls superclass method and logs the result. @param name key for fetching value @param defaultValue default value if not found @return fetched or default value
2718 Configures FTP client with specified timeout. @param client FTPClient instance to configure @param conf Configuration object containing timeout settings
2719 Retrieves a long value for a given key with a default. @param key configuration key @param defVal default long value if retrieval fails @return long value or default if invalid format
2720 Deprecated method to get block size. @return Block size in bytes (default: 32 MB)
2721 Calls superclass method and logs the result. @param name key for fetching the value @param defaultValue default value if not found @return fetched or default value
2722 Retrieves a float value by name with logging. @param name the key for the value to retrieve @param defaultValue the default value if not found @return the retrieved float value or default
2723 Configures trash management settings. @param conf configuration object @param fs file system instance @param home home directory path
2724 Checks if nested mount points are supported. @param conf configuration object @return true if supported, false otherwise
2725 Creates an LZ4 compressor. @return Compressor instance configured with buffer size and HC setting
2726 Creates a retry policy based on configuration. @param conf Configuration object @param retryPolicyEnabledKey key for checking if retry policy is enabled @param defaultRetryPolicyEnabled default value for retry policy enablement @param retryPolicySpecKey key for retry policy specification @param defaultRetryPolicySpec default retry policy specification @return configured RetryPolicy or null if disabled
2727 Configures log and static contexts for a web application. @param parent parent context handler collection @param appDir application directory path @param conf configuration settings @throws IOException if an I/O error occurs during setup
2728 Registers servlets for various configurations. @param configuration app configuration settings
2729 Checks failover enable property for a namespace. @param namespace configuration namespace @param conf Configuration object @return boolean value of the property or default if not found
2730 Initializes a new Client instance. @param valueClass class type for writable values @param conf configuration settings @param factory socket factory for network connections
2731 Checks if IPC backoff is enabled. @param prefix configuration key prefix @param conf Configuration object @return true if enabled, false otherwise
2732 Checks IPC backoff setting for a namespace and port. @param namespace configuration namespace @param port service port number @param conf Configuration object @return true if IPC backoff is enabled, false otherwise
2733 Masks password for given username. @param name username to fetch password for @return masked password as char array or null if not found
2734 Overrides base method to fetch a boolean value by name and logs the result. @param name key for the value to retrieve @param defaultValue default boolean value if not found @return retrieved boolean value or default value
2735 Retrieves FileSystem implementation class by scheme. @param scheme URI scheme for the filesystem @param conf configuration object containing filesystem properties @return FileSystem class or throws UnsupportedFileSystemException if not found
2736 Creates an AbstractFileSystem instance for a given URI and configuration. @param uri the file system URI @param conf the configuration object @return AbstractFileSystem instance @throws UnsupportedFileSystemException if implementation class is not found or null
2737 Retrieves a BlockingQueue implementation for IPC calls. @param namespace configuration namespace @param port service port number @param conf configuration object @return Class of BlockingQueue or LinkedBlockingQueue if not specified
2738 Retrieves RPC scheduler class for a given namespace and port. @param namespace configuration namespace @param port service port @param conf configuration object @return RpcScheduler subclass or default implementation
2739 Retrieves and validates a class by name. @param name class name to retrieve @param defaultValue default class if not found @param xface interface or superclass the retrieved class must implement/extend @return Class object if valid, otherwise null
2740 Acquires a FileSystem instance for the given URI. @param uri target file system URI @param conf configuration settings @param key unique identifier for caching @return FileSystem object or throws IOException if creation fails
2741 Retrieves shutdown timeout from configuration. @param conf Configuration object @return Minimum of configured or default shutdown timeout in milliseconds
2742 Masks a password by fetching it from credential providers. @param name key name for the password @return char array of the masked password or null if not found @throws IOException if there's an issue accessing the credential provider
2743 Retrieves and validates call queue capacity weights. @param priorityLevels number of priority levels @param ns namespace string @param conf configuration object @return array of validated weights
2744 Initializes filter initializers from configuration. @param conf configuration object @return array of FilterInitializer or null if config is invalid
2745 Retrieves and casts a list of classes implementing a given interface. @param name class name identifier @param xface interface type to check implementation against @return List of instances cast to U or throws RuntimeException if not implemented
2746 Initializes and configures output stream for writing data. @param config configuration settings @param outStream output stream to write data @param ownStream flag indicating if the stream is owned by this class @param key key class type @param val value class type @param compCodec compression codec for data @param meta metadata associated with the data @param syncIntervalVal synchronization interval @throws IOException if an I/O error occurs during setup
2747 Deprecated method. Calls FutureIO.m1 with given parameters. @param builder FSBuilder instance @param conf Configuration object @param prefix string prefix @param mandatory boolean indicating if mandatory
2748 Configures a builder with optional and mandatory prefixes. @param <T> the type of the FSBuilder @param <U> the subclass of FSBuilder @param builder the FSBuilder instance to configure @param conf configuration settings @param optionalPrefix prefix for optional configurations @param mandatoryPrefix prefix for mandatory configurations @return configured FSBuilder instance
2749 Checks availability of native libraries and Winutils. @param args command-line arguments for options
2750 Returns a Bzip2 compressor class. @return Class of type extending Compressor
2751 Returns decompressor class based on configuration. @return Class of decompressor or null if not applicable
2752 Returns a decompressor instance configured with the current settings. @return Decompressor object for Bzip2 format
2753 Constructs a HadoopZookeeperFactory with a specified principal. @param zkPrincipal ZooKeeper principal string
2754 Extracts groups from search result. @param result search result object @param c directory context @param goUpHierarchy flag to determine hierarchy traversal @return set of group names
2755 Retrieves and initializes a CryptoCodec based on configuration. @param conf Configuration object containing security settings @return CryptoCodec instance configured with specified cipher suite
2756 Initializes server socket with default handlers. @param socket ServerSocket instance to initialize @param address InetSocketAddress for binding the server @param backlog maximum length of pending connection queue
2757 Writes property value to output. @param config Configuration object @param propertyName Name of the property @param out Writer for output @throws IOException if an I/O error occurs
2758 Checks file mask against given path. @param f file path to check @return true if matches mask, false otherwise
2759 Generates Kerberos principal for authentication. @param authType authentication type object @return generated server principal or null if Kerberos info is missing @throws IOException on I/O errors during configuration retrieval
2760 Masks a given URI based on configuration. @param rawURI the original URI to be masked @param conf the configuration settings @return masked URI or default FileSystem URI if no authority is found @throws IOException if URI format is invalid
2761 Creates a FileSystem instance. @param conf configuration settings @return FileSystem object @throws IOException if an I/O error occurs
2762 Initializes file system configuration. @param name URI representing the file system path @param conf Configuration object for file system settings
2763 Retrieves FileSystem instance using configuration. @param conf Hadoop configuration object @return FileSystem object @throws IOException if an I/O error occurs
2764 Masks a given file path based on URI scheme and authority. @param path the file path to be masked
2765 Determines bind address using properties. @param hostProperty property key for host @param addressProperty property key for address @param defaultAddressValue default address if not found @param defaultPort default port number @return InetSocketAddress with resolved host or null
2766 Opens a file for writing with specified permissions and replication settings. @param f file path to open @param permission file permissions @param overwrite flag to overwrite existing file @param bufferSize buffer size for I/O operations @param replication desired replication factor @param blockSize block size for the file @param progress progress callback @return FSDataOutputStream for writing to the file @throws IOException if an error occurs during file operation
2767 Initializes a new instance with the specified filesystem and path. @param fileSystem the filesystem to use @param path the path within the filesystem
2768 Initializes a new instance with specified file system and path handle. @param fileSystem the file system to use @param pathHandle the path handle to initialize from
2769 Opens a file using specified policies. @param instance DynamicWrappedIO instance @param fs FileSystem object @param status FileStatus of the file to open @param readPolicies policies for reading the file @return FSDataInputStream for the opened file @throws IOException if an I/O error occurs
2770 Checks if file system supports appending. @param fs the FileSystem to check @return true if append is supported, false otherwise
2771 Constructs a Sorter with specified FileSystem and Comparator. @param fs file system to use for sorting @param comparator custom comparator for key comparison @param keyClass class of the sort keys @param valClass class of the values @param conf configuration settings for sorting
2772 Initializes Bzip2Compressor with configuration settings. @param conf Configuration object containing compression parameters
2773 Reinitializes the compressor with a new configuration. @param conf Configuration object for compression settings
2774 Initializes a SequenceFile reader. @param tempReader flag indicating temporary reader status @throws IOException if file version mismatch or other I/O errors occur
2775 Initializes compressor with new configuration. @param conf Configuration object containing settings
2776 Creates a DataOutputStream for writing values. @param length expected value length; if negative, uses buffer @return DataOutputStream for writing value data @throws IOException if I/O error occurs or incorrect state
2777 Initializes a WBlockState for writing compressed data. @param compressionAlgo algorithm for data compression @param fsOut file system output stream @param fsOutputBuffer buffer for file system output @param conf configuration settings @throws IOException if an I/O error occurs
2778 Calls superclass and nested method with configuration. @param conf Configuration object to be passed
2779 Overrides the base method to set configuration. @param conf Configuration object containing settings
2780 Creates an Options object from configuration. @param conf Configuration settings @return Options object initialized with given config
2781 Deprecated function to determine a mask value based on configuration. @param conf Configuration object @return Timeout value or -1 if not applicable
2782 Establishes an FTP connection using configuration settings. @return connected FTPClient instance @throws IOException if connection fails
2783 Retrieves a long value for a given key with a default. @param key configuration key @param defVal default value if retrieval fails or value is negative @return retrieved long value or default if negative
2784 Creates FsServerDefaults with default configuration. @throws IOException if an I/O error occurs
2785 Calls another m1 method without parameters. @param f file path (unused in this implementation) @return result from the parameterless m1 method
2786 Moves a bad file to a designated directory. @param p path to the file @param in input stream of the file @param sums input stream for checksums @return always false
2787 Constructs a new CachingGetSpaceUsed instance. @param builder builder object containing configuration settings @throws IOException if an I/O error occurs during initialization
2788 Writes compressed data to buffer. @param buffer output buffer for data @return key length or -1 if end of file @throws IOException on I/O errors
2789 Creates a retry policy based on configuration. @param conf configuration object @param retryPolicyEnabledKey key for enabling retry policy @param defaultRetryPolicyEnabled default value for retry policy enabled @param retryPolicySpecKey key for retry policy specification @param defaultRetryPolicySpec default retry policy specification @param remoteExceptionToRetry exception class to retry on @return configured RetryPolicy or TRY_ONCE_THEN_FAIL if none set
2790 Constructs a Client with specified value class and configuration. @param valueClass type of writable objects to handle @param conf Hadoop configuration settings
2791 Retrieves or creates a client instance. @param conf configuration settings @param factory socket factory for creating connections @param valueClass class type for writable values @return Client object
2792 Filters credential providers to avoid recursive dependencies. @param config Configuration object containing provider paths @param fileSystemClass Class representing the filesystem type @return New Configuration object with filtered provider paths
2793 Creates an abstract file system instance. @param uri file system URI @param conf configuration settings @return AbstractFileSystem object @throws UnsupportedFileSystemException if the URI is unsupported
2794 Initializes and returns a Server instance. @throws IOException if an I/O error occurs @throws HadoopIllegalArgumentException if required fields are not set
2795 Creates and configures a trash policy instance. @param conf configuration object for the file system @param fs file system where trash is applied @param home home directory path @return configured TrashPolicy instance
2796 Creates and initializes a TrashPolicy instance. @param conf configuration settings @param fs file system reference @return configured TrashPolicy object
2797 Creates a DomainNameResolver instance from configuration. @param conf Configuration object containing settings @param configKey Key for resolver class in configuration @return DomainNameResolver instance or default if not specified
2798 Creates a SaslPropertiesResolver instance from configuration. @param conf Configuration object containing SASL properties @return SaslPropertiesResolver instance configured by the provided settings
2799 Resolves SASL properties using a specified resolver key. @param saslPropsResolverKey key for the SASL property resolver
2800 Retrieves and instantiates the impersonation provider class. @param conf configuration object @return instantiated ImpersonationProvider or default if not specified
2801 Handles graceful shutdown of the executor. @param conf configuration settings
2802 Masks a given name to produce a character array. @param name the input string to be masked @return char[] representing the masked password or null if masking fails @throws IOException if an I/O error occurs during masking
2803 Creates an encoder with mask functionality. @param conf configuration settings @param codec erasure codec name @param coderOptions options for the erasure coder @return RawErasureEncoder instance
2804 Creates a raw erasure decoder. @param conf configuration settings @param codec codec identifier @param coderOptions options for the erasure coder @return RawErasureDecoder instance
2805 Initializes a new scheduler and queue for RPC operations. @param schedulerClass Class of the RpcScheduler to use @param queueClassToUse Class of the BlockingQueue implementation @param maxSize Maximum size of the queue @param ns Namespace identifier @param conf Configuration settings
2806 Initializes a FairCallQueue with specified priority levels and capacity. @param priorityLevels number of priority queues @param capacity total call capacity @param ns namespace for logging @param capacityWeights weights for each queue's capacity @param serverFailOverEnabled flag to enable failover @param conf configuration settings
2807 Masks an item in configuration by serializing it. @param conf Configuration object @param item Item to be masked @param keyName Key for storing the serialized item
2808 Retrieves and deserializes a configuration value. @param conf Configuration object @param keyName key for the configuration value @param itemClass class of the expected return type @return deserialized object or null if not found @throws IOException if an I/O error occurs
2809 Masks configuration with serialized items. @param conf Configuration object @param items Array of items to serialize @param keyName Key for storing the masked value in config @throws IOException if serialization fails
2810 Parses configuration key into an array of items. @param conf Configuration object @param keyName key to fetch from configuration @param itemClass class type of the items in the array @return array of parsed items or empty if key not found
2811 Initializes a Writer with specified configuration and file system parameters. @param fs FileSystem instance for file operations @param conf Configuration settings @param name Path to the file to be written @param keyClass Class of keys in the data @param valClass Class of values in the data @param bufferSize Size of the buffer used for writing @param replication Number of replicas for the file @param blockSize Block size for the file @param progress Progressable instance to report progress @param metadata Metadata associated with the file @throws IOException if an I/O error occurs
2812 Masks a source object by serializing and deserializing it. @param conf configuration settings @param src source object to mask @param dst destination object for masked data @return masked destination object
2813 Deprecated method to configure and build an FS object. @param builder FSBuilder instance for configuration @param conf Configuration settings @param optionalPrefix Optional prefix string @param mandatoryPrefix Mandatory prefix string @return Configured FSBuilder instance
2814 Retrieves groups for a given user. @param user username to search for @param goUpHierarchy number of levels to traverse up the hierarchy @return set of group names or empty if none found @throws NamingException if LDAP operations fail
2815 Writes configuration property to output in specified format. @param conf Configuration object @param out Writer for output @param format Output format (JSON or XML) @param propertyName Property name to write @throws IOException if I/O error occurs @throws IllegalArgumentException if invalid arguments are provided @throws BadFormatException if unsupported format is specified
2816 Masks filters in container based on configuration. @param container holds filter configurations @param conf application configuration settings
2817 Creates a SASL client for authentication. @param authType authentication type details @return SaslClient instance or null if unsupported method @throws SaslException on SASL creation error @throws IOException on I/O issues
2818 Creates a FileSystem instance for the given URI. @param uri URI of the file system @param conf configuration settings @return FileSystem object initialized with the provided URI and configuration @throws IOException if initialization fails
2819 Initializes ViewFileSystem with given URI and configuration. @param theUri file system URI @param conf configuration settings @throws IOException on initialization failure
2820 Overrides m1 to handle URI and Configuration. @param name the URI to process @param conf the configuration settings
2821 Modifies and returns the input path. @param path initial file path @return modified path after applying transformations
2822 Applies mask to file path. @param p input file path @return modified file path after masking @throws IOException if an I/O error occurs
2823 Delegates file system operation to underlying implementation. @param path file path to operate on
2824 Initializes AvroFSInput with file context and path. @param fc FileContext for accessing the file system @param p Path to the file @throws IOException if an I/O error occurs
2825 Recursively copies files from source to destination. @param src source path @param dst destination path @param deleteSource flag to delete source after copy @param overwrite flag to overwrite existing files @return true if operation successful, else false @throws various exceptions for file access issues
2826 Constructs an FSDataInputStreamBuilder. @param fileSystem the FileSystem to use @param path the Path of the file to read from
2827 Constructs an FSDataInputStreamBuilder. @param fileSystem the file system to use @param pathHandle the path handle for the input stream
2828 Opens file input stream with specified policies. @param fs FileSystem instance @param status FileStatus object @param readPolicies read policies as a string @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2829 Retrieves file permissions using a primary and backup path. @param path primary file path @param backupPath fallback file path @return FsPermission object or null if both paths fail @throws NoSuchAlgorithmException if algorithm is not found @throws CertificateException if certificate error occurs @throws IOException if I/O error occurs
2830 Initializes a Sorter with specified FileSystem and configuration. @param fs the FileSystem to use @param keyClass the class of keys to sort by @param valClass the class of values associated with keys @param conf the Configuration object for settings
2831 Creates a compressor based on configuration. @param conf configuration settings @return Bzip2Compressor if condition met, else BZip2DummyCompressor
2832 Masks a file by reading and processing its content. @param filename the path to the file @param in input stream for the file @param start starting position in the file @param length number of bytes to mask @param conf configuration settings @param tempReader flag indicating if temporary reader is used @throws IOException if an I/O error occurs
2833 Creates a compression output stream. @param out target output stream @param compressor used for compression @return CompressionOutputStream for writing compressed data @throws IOException if an I/O error occurs
2834 Initializes and returns a ZStandard compressor. @return ZStandardCompressor instance configured with settings from conf
2835 Wraps input stream with decompression. @param in input stream to be decompressed @param decompressor decompressor for the stream @return CompressionInputStream for reading decompressed data @throws IOException if an I/O error occurs
2836 Initializes and returns a ZStandard decompressor. @return ZStandardDecompressor instance configured with settings from m2(conf)
2837 Creates a new data block. @throws IOException if an I/O error occurs @return BlockAppender instance for the new block
2838 Constructs a ScriptBasedMapping with the given configuration. @param conf Configuration object to be set
2839 Calls superclass and nested method with configuration. @param conf Configuration object to apply
2840 Parses command-line arguments for key management operations. @param args array of command-line arguments @return exit code (0 for success, 1 for error)
2841 Creates a ConnectionId with specified parameters. @param addr InetSocketAddress for the connection @param protocol Class representing the protocol @param ticket UserGroupInformation for authentication @param rpcTimeout timeout for RPC calls in milliseconds @param connectionRetryPolicy policy for retrying connections, defaults if null @param conf configuration settings @return ConnectionId object configured with given parameters
2842 Creates a file in the specified path with given permissions. @param file target file path @param permission file permissions @param overwrite flag to overwrite existing file @param bufferSize buffer size for data transfer @param replication replication factor (not used) @param blockSize block size (not used) @param progress progress callback (not used) @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
2843 Retrieves default server settings from a specified path. @param p file system path to configuration @return FsServerDefaults object @throws IOException if an I/O error occurs
2844 Opens a file for writing with specified buffer size and options. @param f file path to write to @param overwrite flag to indicate if existing file should be overwritten @return FSDataOutputStream for writing data @throws IOException if an I/O error occurs
2845 Opens a file for writing with specified buffer size and progress tracking. @param f file path @param progress progress tracker @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
2846 Creates a file output stream with specified replication. @param f file path @param replication desired replication factor @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
2847 Opens a file for writing with specified parameters. @param f file path @param replication desired replication factor @param progress progress monitor @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
2848 Creates or opens an FSDataOutputStream. @param f file path @param overwrite flag to overwrite existing file @param bufferSize size of buffer @return FSDataOutputStream for writing @throws IOException if I/O error occurs
2849 Opens an output stream to write data to a file. @param f file path @param overwrite flag to overwrite existing file @param bufferSize size of the buffer @param progress callback for progress updates @return FSDataOutputStream for writing @throws IOException if an I/O error occurs
2850 Initializes a FSDataOutputStreamBuilder with the given FileSystem and Path. @param fileSystem the FileSystem to use for output operations @param p the Path where data will be written
2851 Reads and validates a key from the input stream. @param key Writable object representing the key to be read @return true if key is successfully read, false otherwise @throws IOException if an I/O error occurs or key class mismatch
2852 Retrieves and validates an object by key. @param key unique identifier for the object @return retrieved object or null if not found @throws IOException if key validation fails or I/O error occurs
2853 Initializes an Invoker for a specified protocol and connection. @param protocol the remote service interface class @param connId unique identifier for the client connection @param conf configuration settings for the RPC client @param factory socket factory for creating connections @param alignmentContext context for alignment purposes
2854 Creates a client with default socket factory and object writable class. @param conf configuration settings @return Client instance
2855 Creates a client with specified configuration and socket factory. @param conf configuration settings @param factory socket factory for network communication @return Client instance initialized with given parameters
2856 Initializes an Invoker with protocol and connection details. @param protocol the class of the remote service interface @param connId unique connection identifier @param conf configuration settings for the client @param factory socket factory for creating connections @param alignmentContext context for data alignment
2857 Checks if a method with the given name exists in the specified protocol version. @param rpcProxy RPC proxy object @param protocol class representing the protocol @param rpcKind type of RPC kind @param version protocol version @param methodName name of the method to check @return true if method exists and matches the version, false otherwise
2858 Initializes Trash with given FileSystem and configuration. @param fs the FileSystem to use @param conf the Configuration settings @throws IOException if an I/O error occurs
2859 Creates network topology using configuration and default factory. @param conf Configuration object @return NetworkTopology instance
2860 Initializes a new SaslRpcClient. @param ugi user group information @param protocol RPC protocol class @param serverAddr server address to connect to @param conf configuration settings
2861 Configures impersonation settings for a given prefix. @param conf Configuration object @param proxyUserPrefix Prefix for proxy user
2862 Adds a shutdown hook with a specified priority. @param shutdownHook the Runnable to execute on shutdown @param priority the priority of the shutdown hook
2863 Masks a configuration value by name. @param conf Configuration object @param name Key for the configuration value @return Masked password as a string or null if not found
2864 Retrieves password from configuration. @param conf Configuration object @param alias password identifier @param defaultPass default password if retrieval fails @return retrieved password or default password
2865 Masks and parses ZooKeeper authentication info. @param conf configuration object @param configKey key for auth configuration @return list of ZKAuthInfo or empty list if none found @throws IOException if reading fails
2866 Initializes a DecayRpcScheduler with specified parameters. @param numLevels number of priority levels @param ns namespace string @param conf configuration object
2867 Creates a masked copy of the original object. @param orig original Writable object to be copied @param conf configuration settings for cloning @return T new instance of the same type as orig, with data masked
2868 Writes to output stream using UTF-8 encoding. @param out OutputStream to write to
2869 Selects appropriate SASL auth type from list. @param authTypes available authentication types @return chosen SaslAuth or null if none suitable
2870 Initializes an FTP file system with a given URI and configuration. @param theUri FTP URI for the file system @param conf configuration settings for the file system @throws IOException if an I/O error occurs @throws URISyntaxException if the URI is invalid
2871 Constructs a RawLocalFs instance. @param theUri file system URI @param conf configuration settings @throws IOException if an I/O error occurs @throws URISyntaxException if the URI is invalid
2872 Calls superclass method and additional processing. @param name URI of the resource @param conf configuration settings @throws IOException if an I/O error occurs
2873 Initializes a MultipartUploaderBuilderImpl with given filesystem and path. @param fileSystem the FileSystem to use @param p the Path for operations
2874 Initializes a new PathData instance. @param fs FileSystem object @param pathString string representation of the path @param stat FileStatus object for the path @throws IOException if an I/O error occurs
2875 Checks if a path has specified capabilities. @param path the file system path to check @param capability the capability to verify @return true if the path supports the capability, false otherwise
2876 Applies mask to given path and returns root path. @param path input file path @return root path after applying mask @throws IOException if operation fails
2877 Modifies the path's scheme if swapScheme is not null. @param path original file path @return modified path with swapped scheme or original path
2878 Retrieves file status, resolving symbolic links if enabled. @param item path data of the file @param depth current recursion depth @return FileStatus object with resolved link or original if not a link
2879 Applies mask to given path. @param path original file path @return masked file path
2880 Moves a file from source to destination. @param src source file path @param dst destination file path @return true if move is successful, false otherwise @throws various exceptions for file access issues
2881 Creates a builder for reading files from the specified filesystem. @param fileSystem the filesystem to read from @param path the path of the file to read @return FSDataInputStreamBuilder instance
2882 Creates a builder for FSDataInputStream. @param fileSystem the file system to use @param pathHandle the path handle for the input stream @return FSDataInputStreamBuilder instance
2883 Determines file permissions based on paths. @param oldPath original file path @param newPath new file path @return FsPermission object, defaulting to "600" if unable to determine @throws IOException if I/O error occurs @throws NoSuchAlgorithmException if algorithm is unavailable @throws CertificateException if certificate handling fails
2884 Returns a Bzip2 compressor configured with the given settings. @return Compressor instance for Bzip2 compression
2885 Reads block data by name. @param name block identifier @return BlockReader instance @throws IOException if I/O error occurs @throws MetaBlockDoesNotExist if block does not exist
2886 Retrieves a BlockReader for the specified block index. @param blockIndex index of the block to read @return BlockReader instance for the block @throws IOException if an I/O error occurs
2887 Closes the resource, writing necessary metadata if not already in error state. Throws IllegalStateException if close is called with an active block appender.
2888 Creates a block appender with specified name and compression. @param name unique identifier for the block @param compressionName name of the compression algorithm @return BlockAppender instance @throws IOException if an I/O error occurs @throws MetaBlockAlreadyExists if the block already exists
2889 Appends a block with a given name using default settings. @param name block name to append @return BlockAppender instance for further operations @throws IOException if an I/O error occurs @throws MetaBlockAlreadyExists if the block already exists
2890 Initializes block appender if not already set. @throws IOException if an I/O error occurs during initialization
2891 Opens an output stream to write data to a file. @param f path to the file @return FSDataOutputStream for writing @throws IOException if an I/O error occurs
2892 Attempts to open a file for writing, appending a numeric suffix if necessary. @param initial the initial file path @throws IOException if an I/O error occurs
2893 Opens a file for writing with UTF-8 encoding. @param targetFile the file to write to @throws IOException if an I/O error occurs
2894 Masks file or directory. @param fs FileSystem object @param path target Path @param instance T instance for masking @param overwrite flag to allow overwriting existing files
2895 Initializes a Writer with specified configuration and file system parameters. @param fs File system where the data will be written @param conf Configuration settings for the writer @param name Path to the output file @param keyClass Class of the key objects @param valClass Class of the value objects @param progress Progressable object for tracking progress @param metadata Metadata associated with the data being written @throws IOException if an I/O error occurs during initialization
2896 Masks a file by applying specific operations. @param f Path to the file to be masked @return true if masking is successful, false otherwise
2897 Constructs a new FileSystemDataOutputStreamBuilder. @param fileSystem the file system to operate on @param p the path to the file
2898 Validates and processes key-value pair. @param key the key to process @param val the value to validate @return true if processing continues, false otherwise @throws IOException if value class does not match expected class
2899 Initializes a Trash instance. @param conf configuration settings @throws IOException if an I/O error occurs
2900 Resolves domain name using configuration and URI. @param conf configuration object @param uri target URI @param configKey key for configuration setting @return DomainNameResolver instance
2901 Returns singleton Groups instance. @param conf configuration settings @return Groups object initialized with given config
2902 Initializes and returns a singleton Groups instance. @param conf configuration settings for group initialization @return Groups object initialized with provided configuration
2903 Calls m1 with default proxy user configuration. @param conf Configuration object to be used
2904 Marks a file for deletion on exit. @param f the Path of the file to mark @return true if marking is successful, false otherwise
2905 Masks functionality with given priority. @param priority execution priority level
2906 Masks a function with logging and shutdown hooks. @param clazz class to mask @param args arguments for masking @param log logger instance
2907 Configures SSL settings from configuration. @throws IOException if required properties are missing or invalid
2908 Configures SSL key management with specified mode and reload interval. @param mode SSL configuration mode @param keystoreType type of the keystore (e.g., JKS, PKCS12) @param storesReloadInterval interval in milliseconds for reloading keystores @throws GeneralSecurityException if keystore properties are missing or invalid @throws IOException on I/O errors during keystore configuration
2909 Retrieves ZooKeeper authentication information. @param conf configuration object @return list of ZKAuthInfo objects
2910 Masks sensitive information in the user string. @param user input string containing user data @return list of masked strings
2911 Configures and executes system setup. @param args command line arguments (not used)
2912 Negotiates authentication method using IPC streams. @param ipcStreams communication streams for IPC @return negotiated AuthMethod @throws IOException if an I/O error occurs
2913 Initializes PathData with FileSystem and path string. @param fs the file system to use @param pathString the path as a string @throws IOException if an I/O error occurs
2914 Fetches and sorts directory contents. @return Array of PathData objects representing directory items @throws IOException if an I/O error occurs
2915 Handles directory inconsistency by throwing an exception or logging. @param fs FileSystem instance @param path Path to the directory @param e FileNotFoundException to throw if necessary @throws FileNotFoundException if directory is inconsistent and not ignored
2916 Checks if a file system is read-only. @param path the path to check @param capability the required capability @return true if read-only, otherwise delegates to superclass
2917 Checks if a path has a given capability. @param path the file system path to check @param capability the capability to verify @return true if the path has the capability, false otherwise @throws IOException if an I/O error occurs
2918 Applies a mask to a file path. @param fs FileSystem instance @param path original file path @return modified file path after applying the mask @throws IOException if an I/O error occurs
2919 Builds a FutureDataInputStream from a file path. @param path file path to read data from @return FutureDataInputStreamBuilder instance @throws IOException if an I/O error occurs @throws UnsupportedOperationException if operation is not supported
2920 Builds a data input stream from a file path. @param pathHandle file path handle @return FutureDataInputStreamBuilder for further configuration @throws IOException if an I/O error occurs @throws UnsupportedOperationException if operation is not supported
2921 Loads and masks the keystore with a password. Handles file permissions and throws exceptions on errors.
2922 Loads TFileIndex if not already loaded. @throws IOException if an I/O error occurs
2923 Retrieves data input stream by name. @param name resource name @return DataInputStream object @throws IOException if an I/O error occurs @throws MetaBlockDoesNotExist if the meta block does not exist
2924 Initializes a BCFile Reader. @param fin file input stream of the BCFile @param fileLength length of the file @param conf configuration settings @throws IOException if an I/O error occurs
2925 Starts a meta block with compression. @param name block name @param compressName compression algorithm name @return DataOutputStream for writing data @throws IOException if I/O error occurs @throws MetaBlockAlreadyExists if block already exists
2926 Closes the TFile if not already closed. Throws IllegalStateException if closing in the middle of key-value insertion.
2927 Starts a new Meta Block with the given name. @param name the name of the Meta Block @return DataOutputStream for writing to the block @throws IOException if an I/O error occurs @throws MetaBlockAlreadyExists if the block already exists
2928 Initializes and returns a new DataOutputStream for key registration. @param length the length of the key to register @return DataOutputStream for writing key data @throws IOException if an I/O error occurs or state is incorrect
2929 Recursively copies a file or directory to a destination. @param src source file or directory @param dstFS destination filesystem @param dst destination path @param deleteSource whether to delete the source after copying @param conf configuration settings @return true if operation successful, false otherwise
2930 Processes multipart upload and combines parts into a final file. @param multipartUploadId unique identifier for the multipart upload @param filePath destination path for the combined file @param handleMap mapping of part indices to their handles @return PathHandle representing the processed file @throws IOException if an I/O error occurs during processing
2931 Creates and returns a new file output stream with specified permissions. @param fs FileSystem instance @param file Path to the file @param permission File system permissions @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
2932 Initializes a Writer for writing data to a file in Hadoop's FileSystem. @param fs the FileSystem to write to @param conf Configuration object containing settings @param name Path of the file to create @param keyClass Class type for keys @param valClass Class type for values @throws IOException if an I/O error occurs
2933 Creates a log file with a masked name and writes to it. @throws IOException if file operations fail
2934 Delegates call to data's m1 method. @param key key object for comparison @param val value object @return result of data.m1 @throws IOException if an I/O error occurs
2935 Creates a protocol proxy with specified parameters. @param protocol the interface class of the protocol @param clientVersion version of the client @param addr socket address for connection @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating sockets @param rpcTimeout timeout for RPC operations @param connectionRetryPolicy retry policy for connections (not supported) @param fallbackToSimpleAuth flag to fall back to simple auth @param alignmentContext context for alignment @return ProtocolProxy instance @throws IOException if an I/O error occurs
2936 Retrieves default groups configuration. @return Groups object configured with default settings
2937 Configures Kerberos authentication and related settings. @param conf Configuration object containing security settings @param overrideNameRules Flag to override name rules
2938 Constructs an empty AccessControlList instance.
2939 Constructs an AccessControlList from a string. @param aclString space-separated string representing ACL rules
2940 Constructs an AccessControlList with specified users and groups. @param users comma-separated list of user names @param groups comma-separated list of group names
2941 Calls m1 with a new default Configuration.
2942 Configures SSL settings based on mode. @param mode SSL configuration mode @throws IOException if I/O error occurs @throws GeneralSecurityException if security error occurs
2943 Initializes a CuratorFramework client with given auth info and SSL settings. @param authInfos list of authentication information @param sslEnabled flag to enable SSL @throws IOException if ZK_ADDRESS is not configured or other I/O errors occur
2944 Transforms user group names based on a rule. @param user the user identifier @return list of transformed or original group names
2945 Initializes and configures the MetricsSystem. @param prefix identifier for the metrics system @return the configured MetricsSystem instance
2946 Creates a PathData object with an appended file extension. @param extension file extension to append @return PathData object representing the path with the new extension @throws IOException if an I/O error occurs
2947 Applies mask to child path data. @param child input path data @return modified PathData object @throws IOException if file system operation fails
2948 Processes PathData item recursively. @param item the PathData to process @throws IOException if an I/O error occurs
2949 Checks if path has read-only access. @param path file system path to check @param capability required capability @return true if read-only, otherwise delegates to superclass
2950 Checks if a path has the specified capability. @param path file system path to check @param capability required capability @return true if path is read-only, otherwise delegates to superclass method
2951 Checks path capability excluding append and concat. @param path file system path to check @param capability capability to verify @return true if capability is not append or concat, else false
2952 Retrieves file status from multiple nodes. @param f path to the file @return FileStatus array or throws exception if not found
2953 Copies a file or directory from source to destination. @param srcFS source filesystem @param srcStatus status of the source file/directory @param dstFS destination filesystem @param dst destination path @param deleteSource flag to delete source after copy @param overwrite flag to overwrite existing files @param conf configuration settings @return true if operation successful, false otherwise @throws IOException if an I/O error occurs
2954 Recursively copies files from source to destination. @param srcFS source file system @param srcStatus status of the source file or directory @param dst destination file @param deleteSource flag to delete source after copy @param conf configuration settings @return true if operation successful, false otherwise
2955 Opens a file stream for reading with specified policy. @param policy the read policy to apply @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2956 Opens a file for reading with specified buffer size and optional length. @param fs FileSystem instance @param file Path to the file @param bufferSize Buffer size for reading @param length Length of data to read, -1 for full file @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2957 Reads and processes a file from the given filesystem. @param fs FileSystem instance @param path Path to the file @param status Optional FileStatus object @return Processed data of type T @throws IOException if an I/O error occurs
2958 Calls m1 and retrieves data from tfileIndex. @return RawComparable object @throws IOException if an I/O error occurs
2959 Calls m1 and returns result from tfileIndex's m2. @return RawComparable object from tfileIndex @throws IOException if an I/O error occurs
2960 Finds location of key in TFile. @param key the search key @param greater true to find first >= key, false for <= key @return Location object or end if not found @throws IOException on I/O error
2961 Retrieves data from a file using an offset. @param offset the position in the file to read from @return RawComparable object or null if not found @throws IOException if an I/O error occurs
2962 Initializes a TFile reader with given input stream and configuration. @param fsdis file system data input stream @param fileLength length of the file to read @param conf Hadoop configuration @throws IOException if an I/O error occurs
2963 Masks a block and updates the reader. @param blockIndex index of the block to mask
2964 Masks key and value buffers. @param key buffer containing the key data @param koff offset in the key buffer @param klen length of the key data @param value buffer containing the value data @param voff offset in the value buffer @param vlen length of the value data @throws IOException if an I/O error occurs
2965 Retrieves and removes the maximum element. @return the maximum element or null if empty @throws IOException if an I/O error occurs
2966 Masks data for a given key. @param key the key to mask data by @throws IOException if an I/O error occurs
2967 Searches for a key in a sorted dataset. @param key the key to search for @param before flag indicating whether to find the closest key less than or equal to the given key @return comparison result or status code @throws IOException if an I/O error occurs during search
2968 Merges and writes sorted data from multiple input readers to an output writer. @throws IOException if I/O operations fail
2969 Creates a ProtocolProxy instance with default additional parameters. @param protocol interface class of the remote service @param clientVersion version of the client @param addr address of the RPC server @param ticket user authentication information @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout in milliseconds for RPC calls @param connectionRetryPolicy policy for retrying failed connections @return ProtocolProxy instance @throws IOException if an I/O error occurs
2970 Creates a ProtocolProxy instance. @param <T> type of protocol @param protocol class representing the protocol @param clientVersion version of the client @param connId connection identifier @param conf configuration settings @param factory socket factory for creating connections @param alignmentContext context for alignment @return ProtocolProxy instance @throws IOException if an I/O error occurs
2971 Retrieves a file path. @throws IOException if an I/O error occurs @return Path object representing the file location
2972 Processes a file path. @param path file path to process @return processed Path object @throws IOException if an I/O error occurs
2973 Ensures configuration is set; synchronizes access.
2974 Applies mask configuration. @param conf Configuration object to modify
2975 Handles service launch and exceptions. @param conf configuration object @param instance service instance @param processedArgs list of processed arguments @param addShutdownHook flag to add shutdown hook @param execute flag to execute the service @return ExitException with details of success or failure
2976 Calls m1 with default override flag. @param authInfos list of authentication information
2977 Constructs a LocalFs instance. @param theUri file system URI @param conf configuration settings @throws IOException if an I/O error occurs @throws URISyntaxException if the URI syntax is invalid
2978 Copies input stream to target path with optional checksum and overwrite checks. @param in source input stream @param target destination path data @throws IOException if an I/O error occurs
2979 Copies a file from source to destination. @param srcFS source filesystem @param src source path @param dstFS destination filesystem @param dst destination path @param deleteSource true to delete source after copy @param overwrite true to overwrite destination if it exists @param conf configuration settings @return true if copy is successful, false otherwise
2980 Repairs and opens a file stream from the most recent node. @param mrNodes array of MRNflyNode objects representing nodes @param f Path to the file @param bufferSize size of buffer for reading operations @return FSDataInputStream if successful, null otherwise
2981 Copies a file from source to destination. @param srcFS source FileSystem @param src source Path @param dst destination File @param deleteSource true if source should be deleted after copy @param conf configuration for the operation @return true if copy is successful, false otherwise
2982 Opens file with sequential read policy. @return FSDataInputStream for reading file @throws IOException if file cannot be opened
2983 Calls overloaded method with default null value. @param fs FileSystem instance @param path file path @return result of the overloaded method @throws IOException if an I/O error occurs
2984 Applies mask functions to an offset. @param offset input value to be masked @return masked result as a long @throws IOException if an I/O error occurs
2985 Reads and returns a masked value from the current location. @return long value representing the masked data @throws IOException if an I/O error occurs during reading
2986 Initializes a Scanner with specified reader and location range. @param reader source of data to scan @param begin start location for scanning @param end end location for scanning @throws IOException if an I/O error occurs
2987 Masks a location within specified bounds. @param l the Location to mask @throws IOException if an I/O error occurs
2988 Masks the current location if conditions are met. @return true if masking is successful, false otherwise
2989 Calls overloaded method with full array ranges. @param key byte array containing the key @param value byte array containing the value @throws IOException if an I/O error occurs
2990 Calls m1 with default value. @param key input key @return result of m1 call @throws IOException if an I/O error occurs
2991 Masks key based on comparison and updates value. @param key the key to compare @param val the value to update if condition met @param before flag indicating comparison direction @return masked key or null if condition not met @throws IOException if an I/O error occurs
2992 Creates UserGroupInformation for a user with specified groups. @param user username @param userGroups array of group names @return UserGroupInformation object configured with the given user and groups
2993 Masks user information with specified groups. @param user username string @param realUser UserGroupInformation object for the actual user @param userGroups array of group names @return masked UserGroupInformation object
2994 Deprecated method, does not perform any meaningful operation. @deprecated Use a different approach instead. @return Empty list of strings
2995 Retrieves groups for a user. @return Set of group names or empty set if an error occurs
2996 Authenticates user and returns UserGroupInformation. @param subject optional security subject @param params login parameters @return authenticated UserGroupInformation object @throws IOException if authentication fails
2997 Masks configuration and policy. @param conf Configuration object to be masked @param provider PolicyProvider object for masking policies
2998 Delegates authorization check to another method. @param user UserGroupInformation object representing the user @param remoteAddress IP address of the remote client @throws AuthorizationException if authorization fails
2999 Delegates authorization check to another method. @param user user group information @param remoteAddress IP address of the client @throws AuthorizationException if authorization fails
3000 Calls overloaded m1 with default null logger. @param conf configuration settings @param processedArgs list of processed arguments @param addShutdownHook flag to add shutdown hook @param execute flag to execute action @return ExitException indicating result
3001 Calls overloaded method m1 with an empty list. Throws IOException if an I/O error occurs.
3002 Masks data from source to target path. @param src source PathData object @param target target PathData object @throws IOException if an I/O error occurs
3003 Copies file from source to destination. @param srcFS source filesystem @param src source path @param dstFS destination filesystem @param dst destination path @param deleteSource flag to delete source after copy @param conf configuration settings @return true if operation successful, false otherwise @throws IOException on I/O errors
3004 Opens a file input stream for the given path. @param f file path to open @param bufferSize buffer size for reading @return FSDataInputStream object or throws exception if failed @throws IOException if an I/O error occurs
3005 Creates a Scanner to read from this input source. @param begin starting index of the range @param end ending index of the range (exclusive) @return Scanner object for the specified range @throws IOException if an I/O error occurs
3006 Creates a Scanner for records within a specified range. @param beginRecNum starting record number (inclusive) @param endRecNum ending record number (exclusive) @return Scanner object for the specified range @throws IOException if an I/O error occurs
3007 Initializes scanner with specific range. @param reader source of characters @param offBegin offset to start reading from @param offEnd offset to stop reading at @throws IOException if an I/O error occurs
3008 Begins masking operation at specified location. @param beginLocation starting point for masking @throws IOException if an I/O error occurs during masking
3009 Checks if the given key is masked. @param key the key to check @return true if the key is masked, false otherwise
3010 Calls m1 with default append flag. @param key input key @param val input value @return result from m1 method @throws IOException if an I/O error occurs
3011 Checks if SIMPLE authentication is masked. @return true if SIMPLE auth is masked, false otherwise
3012 Initiates logout process for a user. @throws IOException if an I/O error occurs during logout
3013 Retrieves and masks user groups. @return Array of masked group names
3014 Checks if user or group has permission. @param ugi user group information @return true if allowed, false otherwise
3015 Retrieves UserGroupInformation from Subject. @param subject security context for authentication @return UserGroupInformation object @throws IOException if authentication fails
3016 Deprecated. Use m1 with fewer parameters instead. @param user UserGroupInformation object representing the user @param remoteAddress Remote address string @param conf Configuration object (not used in this method)
3017 Handles authorization and logs success or failure. @throws RpcServerException if authorization fails
3018 Masks path data from source to destination. @param src source path data @param dst destination path data @throws IOException if operation fails
3019 Masks and copies a file. @param delSrc true to delete source file after copying @param src source file path @param dst destination file path @throws IOException if an I/O error occurs
3020 Masks a file by moving it to a new location. @param delSrc flag to delete the source file after copying @param src source file path @param dst destination file path @throws IOException if an I/O error occurs
3021 Creates a Scanner from a specified range in the input source. @param offset starting position in bytes @param length number of bytes to scan @return Scanner object for the specified range @throws IOException if an I/O error occurs
3022 Initializes Scanner with specified reader and key range. @param reader data source @param beginKey start of the key range (inclusive) @param endKey end of the key range (exclusive) @throws IOException if an I/O error occurs
3023 Validates byte array using specified offset and length. @param key byte array containing data to validate @param keyOffset starting index in the byte array @param keyLen number of bytes to validate from the offset @return true if validation passes, false otherwise
3024 Masks data using specified key. @param key byte array containing the mask key @param keyOffset starting offset in the key array @param keyLen length of the key to use
3025 Masks data using provided key. @param key byte array containing the mask key @param keyOffset starting index of the key in the array @param keyLen length of the key to use
3026 Applies mask operation to input value if condition is met. @param key unique identifier for the writable object @param val writable object to be masked @return masked value or null if condition fails
3027 Creates a ProtocolProxy for specified protocol. @param <T> type of the protocol @param protocol class of the protocol @param clientVersion version of the client @param connId connection identifier @param conf configuration settings @param factory socket factory for connections @param alignmentContext context for alignment @return ProtocolProxy instance @throws IOException if an I/O error occurs
3028 Creates a ProtocolProxy for a given protocol class. @param <T> type of the protocol @param protocol class representing the protocol @param clientVersion version of the client @param addr address of the server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC operations @param connectionRetryPolicy retry policy for connection attempts @param fallbackToSimpleAuth flag to allow falling back to simple auth @return ProtocolProxy instance @throws IOException if an I/O error occurs
3029 Creates a ProtocolProxy for the given protocol. @param <T> type of the protocol @param protocol class of the protocol @param clientVersion version of the client @param addr address of the server @param ticket user authentication information @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy policy for retrying failed connections @param fallbackToSimpleAuth flag to allow simple authentication fallback @param alignmentContext context for alignment purposes @return ProtocolProxy instance @throws IOException if an I/O error occurs
3030 Opens a file with specified mode and checks ownership. @param f the file to open @param mode file access mode ("r", "rw", etc.) @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return RandomAccessFile object if successful, throws IOException otherwise
3031 Opens a file for reading and verifies its owner and group. @param file the file to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FSDataInputStream if verification succeeds, throws IOException otherwise
3032 Opens a file input stream and checks file ownership. @param f the file to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FileInputStream if successful, throws IOException otherwise
3033 Logs user group information details. @param title descriptive title for the log @param ugi UserGroupInformation object to log
3034 Retrieves the current login user information. @return UserGroupInformation object representing the logged-in user @throws IOException if an I/O error occurs during retrieval
3035 Masks sensitive information in the given subject. @param subject the subject containing sensitive data
3036 Processes RPC connection context and user authentication. @param buffer input buffer containing connection details @throws RpcServerException on invalid or unauthorized access
3037 Creates a Scanner with specified key range. @param beginKey start of the key range (inclusive) @param endKey end of the key range (exclusive) @return Scanner object for the given key range @throws IOException if an I/O error occurs
3038 Checks if a byte array contains valid data. @param key byte array to check @return true if valid, false otherwise @throws IOException if an I/O error occurs
3039 Calls overloaded method with full byte array. @param key byte array to process
3040 Calls overloaded method with full byte array. @param key byte array to process
3041 Applies mask to key if condition met. @param key input key to process @return masked key or null if condition fails
3042 Overrides base method to conditionally process writable data. @param key unique identifier for the data @param val data value to be processed @return processed Writable or null if condition not met
3043 Creates a ProtocolProxy instance. @param <T> type of the protocol @param protocol Class representing the protocol @param clientVersion version of the client @param connId unique connection identifier @param conf configuration settings @param factory SocketFactory for creating sockets @return ProtocolProxy object @throws IOException if an I/O error occurs
3044 Creates a ProtocolProxy with default retry handler. @param protocol interface class of the protocol @param clientVersion version of the client @param addr address of the server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating sockets @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy policy for retrying connections @return ProtocolProxy instance @throws IOException if an I/O error occurs
3045 Establishes an IPC connection with a server using SASL authentication. @param fallbackToSimpleAuth flag to switch to simple auth if necessary
3046 Opens a file with specified mode and ownership checks. @param f the file to open @param mode the access mode ("r", "rw", etc.) @param expectedOwner the expected owner of the file @param expectedGroup the expected group of the file @return RandomAccessFile object @throws IOException if file cannot be opened or checks fail
3047 Checks file ownership and returns input stream. @param file the target file @param expectedOwner expected owner of the file @param expectedGroup expected group of the file @return FSDataInputStream if conditions are met, otherwise throws IOException
3048 Opens a file input stream with ownership checks. @param f the file to open @param expectedOwner the expected owner of the file @param expectedGroup the expected group of the file @return FileInputStream if permissions match, otherwise throws IOException
3049 Checks if the remote user is an admin. @param servletContext application context @param remoteUser username of the user to check @return true if user is an admin, false otherwise
3050 Authorizes a user for a specific protocol and address. @param user the UserGroupInformation object representing the user @param protocol the Class<?> object representing the protocol @param conf the Configuration object containing configuration settings @param addr the InetAddress object representing the client's address
3051 Retrieves user group information. @return UserGroupInformation object or default if null or empty subject @throws IOException on I/O errors during retrieval
3052 Checks a condition using nested methods. @return boolean result of the condition check @throws IOException if an I/O error occurs during the process
3053 Checks a condition using nested methods. @throws IOException if an I/O error occurs @return result of the condition check
3054 Executes an action with privileged permissions. @param action the action to execute @return result of the action
3055 Executes an action with user privileges. @param action privileged action to execute @return result of the action or throws IOException
3056 Executes a privileged action with a specified delay. @param millisToCede milliseconds to delay execution @throws AccessControlException if access is denied @throws ServiceFailedException if service fails @throws IOException if an I/O error occurs
3057 Executes a privileged action with user group information. Throws ServiceFailedException or IOException on failure.
3058 Creates a Scanner for a range of byte arrays. @param beginKey start of the range or null for no limit @param endKey end of the range or null for no limit @return Scanner object configured for the specified range @throws IOException if an I/O error occurs
3059 @deprecated Use m1 instead. Returns a Scanner for keys between beginKey and endKey. @param beginKey start of the key range (inclusive) @param endKey end of the key range (exclusive) @return Scanner object for iterating over the range @throws IOException if an I/O error occurs
3060 Creates a ProtocolProxy instance. @param protocol class of the protocol to proxy @param clientVersion version of the client @param addr address of the server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating sockets @return ProtocolProxy object @throws IOException if an I/O error occurs
3061 Invokes method m2 on a remote service. @param <T> type of the protocol class @param protocol interface class for remote service @param clientVersion version of the client @param addr address of the remote server @param ticket user authentication information @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC calls @return result of m2 method call @throws IOException if communication fails
3062 Checks user authorization based on configuration and ACLs. @param servletContext current ServletContext @param request incoming HttpServletRequest @param response outgoing HttpServletResponse @return true if authorized, false otherwise
3063 Authorizes user access based on protocol and address. @param user user information @param protocolName name of the communication protocol @param addr IP address of the client @throws AuthorizationException if authorization fails
3064 Retrieves the user's home directory path. @return Path object representing the user's home directory
3065 Checks file permissions for a given user. @param stat FileStatus object representing the file @param mode FsAction representing the required permission @throws AccessControlException if permission is denied @throws IOException on I/O errors
3066 Initializes the FileSystem view. @throws IOException if an I/O error occurs during initialization
3067 Initializes a ViewFs file system. @param theUri URI of the file system @param conf configuration settings @throws IOException if an I/O error occurs @throws URISyntaxException if URI syntax is invalid
3068 Initializes an InodeTree with configuration and URI. @param config Configuration object @param viewName Name of the view @param theUri Target URI @param initingUriAsFallbackOnNoMounts Flag to initialize URI as fallback @throws UnsupportedFileSystemException, URISyntaxException, FileAlreadyExistsException, IOException on errors
3069 Returns a masked path for the current user. @return Path object representing the user's directory
3070 Establishes an HTTP connection with authentication and optional delegation. @param url target URL for the connection @param token authentication token @param doAs user to impersonate (optional) @return HttpURLConnection instance @throws IOException if connection fails @throws AuthenticationException if authentication fails
3071 Retrieves UserGroupInformation based on ticket cache and user. @param ticketCachePath path to the ticket cache file @param user username for authentication @return UserGroupInformation object or null if not found
3072 Retrieves UserGroupInformation using Kerberos credentials. @param user principal name for authentication @param path path to the keytab file @return UserGroupInformation object or null if not initialized @throws IOException if an I/O error occurs during the process
3073 Logs user information for security auditing. @param log Logger instance for logging @param ugi UserGroupInformation object containing user details
3074 Executes an action with user privileges. @param action privileged action to execute @return result of the action or throws IOException
3075 Retrieves proxy user if authentication method is PROXY. @return proxy user string or null if not PROXY @throws IOException if an I/O error occurs
3076 Creates a protocol proxy with retries. @param <T> type of the protocol @param protocol class representing the protocol @param clientVersion version of the client @param addr server address @param conf configuration settings @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy retry policy for connections @param timeout total timeout for proxy creation @return ProtocolProxy instance @throws IOException if an I/O error occurs or timeout exceeds
3077 Masks data between two keys. @param beginKey starting key for masking @param endKey ending key for masking @return Scanner object for processed data
3078 Creates a ProtocolProxy instance. @param protocol the interface class of the protocol @param clientVersion version of the client @param addr address of the server @param conf configuration settings @param factory socket factory for creating connections @return ProtocolProxy object @throws IOException if an I/O error occurs
3079 Invokes method m2 on a proxy object created by m1. @param protocol interface class for the proxy @param clientVersion version of the client @param addr address of the server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating connections @return result of calling m2 on the proxy object @throws IOException if an I/O error occurs
3080 Checks user access based on configuration. @param servletContext application context @param request HTTP request @param response HTTP response @return true if access is granted, false otherwise
3081 Masks a given file path by appending a trash prefix. @param path original file path @return modified path with trash prefix
3082 Retrieves file statuses from trash directories. @param allUsers if true, checks all users' trash; otherwise, checks current user's trash @return list of FileStatus objects representing files in trash
3083 Masks file permissions at a given path. @param path the file path to mask permissions for @param mode the file access permissions to apply @throws AccessControlException if permission check fails @throws FileNotFoundException if the file does not exist @throws IOException if an I/O error occurs
3084 Masks file permissions for a given path. @param path the file system path @param mode the access control mode to apply @throws AccessControlException if permission is denied @throws FileNotFoundException if file does not exist @throws UnresolvedLinkException if symbolic link cannot be resolved @throws IOException for other I/O errors
3085 Initializes file system view with given URI and configuration. @param theUri file system URI @param conf configuration settings @throws IOException if initialization fails
3086 Initializes and returns a FileSystem instance. @param uri file system URI @param conf configuration settings @return FileSystem object @throws IOException if initialization fails
3087 Retrieves a file system path. @return Path object from the default file system
3088 Handles URL connection with authentication. @param url target URL for the connection @param token authentication token @return HttpURLConnection instance @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
3089 Creates a FileSystem instance with Kerberos authentication. @param uri Hadoop file system URI @param conf configuration settings @param user username for authentication @return FileSystem object authenticated via Kerberos @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
3090 Retrieves a FileSystem instance for the given URI and configuration. @param uri Hadoop file system URI @param conf Hadoop configuration object @param user Kerberos principal name @return FileSystem object @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
3091 Creates UserGroupInformation for a given Kerberos ticket and user. @param ticketCache path to the Kerberos ticket cache @param user username for authentication @return UserGroupInformation object or null if Kerberos is not enabled @throws IOException on login failure
3092 Masks user identity using Kerberos or current user. @throws IOException if login fails
3093 Masks a user with specified path. @param user username @param path keytab file path @throws IOException if an I/O error occurs
3094 Logs in using UserGroupInformation. @param ugi user group information object
3095 Creates a ProtocolProxy instance. @param <T> generic type for the protocol @param protocol class of the protocol interface @param clientVersion version of the client @param addr server address @param conf configuration settings @param connTimeout connection timeout in milliseconds @return ProtocolProxy object @throws IOException if an I/O error occurs
3096 Masks a function call with specified parameters. @param protocol class type of the protocol @param clientVersion version of the client @param addr address of the socket @param conf configuration settings @param rpcTimeout timeout for RPC calls @param timeout general timeout @return result of the masked function call @throws IOException if an I/O error occurs
3097 Invokes m1 with given parameters and calls m2 on the result. @param <T> generic type for protocol class @param protocol class of the protocol to use @param clientVersion version of the client @param addr address of the socket @param conf configuration settings @param factory socket factory for creating sockets @return result of calling m2 on the object returned by m1 @throws IOException if an I/O error occurs
3098 Creates a ProtocolProxy instance. @param protocol class type of the protocol @param clientVersion version of the client @param addr address of the server @param conf configuration settings @return ProtocolProxy object for communication @throws IOException if an I/O error occurs
3099 Creates and returns a GetUserMappingsProtocol instance. @return GetUserMappingsProtocol object for user group mapping
3100 Creates a ZKFCProtocol instance. @param conf configuration settings @param timeoutMs connection timeout in milliseconds @return ZKFCProtocol client side translator @throws IOException if an I/O error occurs
3101 Computes the trash root path for a given file system path. @param path the input file system path @return the computed trash root path
3102 Retrieves file statuses from trash across multiple filesystems. @param allUsers flag to include files from all users @return collection of FileStatus objects representing trash contents
3103 Constructs a ViewFileSystem with default URI and configuration. @param conf configuration settings for file system @throws IOException if an I/O error occurs during initialization
3104 Caches filesystem for given URI and configuration. @param uri target URI @param conf configuration settings @param fs FileSystem object to cache
3105 Retrieves FileSystem instance based on URI and configuration. @param uri target URI for file system access @param config configuration settings for the file system @return FileSystem object or throws IOException if failed
3106 Creates and returns a FileContext instance. @param defFS default file system implementation @param aConf configuration settings @return FileContext object initialized with the provided filesystem and configuration
3107 Creates an HTTP connection using a URL and authentication token. @param url the target URL for the connection @param token the authentication token @return HttpURLConnection instance @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
3108 Performs Kerberos diagnostics and logs configuration details. @return true if diagnostics complete successfully @throws Exception if any error occurs during diagnostics
3109 Processes arguments for Kerberos authentication. @param args input arguments array @return processed arguments or original if no changes @throws IOException on processing errors
3110 Masks user information and handles keytab authentication. @param args command-line arguments (username and keytab path if provided)
3111 Masks user credentials in secure mode. @param conf Configuration object @param keytabFileKey Key for the keytab file path @param userNameKey Key for the username @param hostname Hostname to generate principal name @throws IOException if keytab file is missing or invalid
3112 Initializes a Server instance with specified configurations and parameters. @param bindAddress address to bind the server @param port port number for the server @param rpcRequestClass class of RPC request @param handlerCount number of handler threads @param numReaders number of reader threads @param queueSizePerHandler max queue size per handler @param conf configuration settings @param serverName name of the server @param secretManager secret manager for authentication @param portRangeConfig port range configuration @throws IOException if an I/O error occurs during initialization
3113 Handles SASL negotiation for RPC. @return RpcSaslProto with negotiated challenge or response @throws InterruptedException, SaslException, IOException on failure
3114 Creates a ProtocolProxy instance with default timeout. @param <T> the type of protocol @param protocol Class representing the protocol @param clientVersion version of the client @param addr address for the proxy @param conf configuration settings @return ProtocolProxy instance @throws IOException if an I/O error occurs
3115 Masks a function call with specified parameters. @param <T> type of the protocol class @param protocol class representing the protocol @param clientVersion version of the client @param addr address of the socket @param conf configuration settings @param connTimeout connection timeout in milliseconds @return result of the masked function call @throws IOException if an I/O error occurs
3116 Masks input stream resource. @param in input stream to be masked @param name name of the resource
3117 Invokes m1 with given parameters and calls m2 on the result. @param <T> type of the protocol class @param protocol Protocol class to use @param clientVersion Version of the client @param addr Address of the socket @param conf Configuration settings @return Result of calling m2 on the object returned by m1 @throws IOException if an I/O error occurs
3118 Masks user groups from input arguments. @param args usernames to process, defaults to current user if empty @return 0 indicating successful execution
3119 Initiates failover to a specified node. @param toNode target HAServiceTarget for failover @return 0 if successful, -1 if failover fails
3120 Requests a remote service to relinquish its active status temporarily. @param remote HAServiceTarget instance representing the remote service @param timeout duration in milliseconds for which the service should step down @return ZKFCProtocol instance of the old active service @throws IOException if communication with the remote service fails
3121 Handles JMX requests, processes query parameters, and returns JSON responses. @param request HTTP servlet request containing query parameters @param response HTTP servlet response for sending JSON data
3122 Creates a FileSystem instance from URI and configuration. @param uri file system URI @param conf configuration settings @return FileSystem object @throws IOException if an I/O error occurs
3123 Retrieves the local file system instance. @param conf configuration settings @return LocalFileSystem object @throws IOException if an I/O error occurs
3124 Creates and returns a FileSystem instance. @param uri file system URI @param conf configuration settings @return FileSystem object @throws IOException if an I/O error occurs
3125 Creates a FileContext using the provided FileSystem and default configuration. @param defaultFS the default FileSystem to use @return a FileContext instance
3126 Creates FileContext using default file system URI and configuration. @param defaultFsUri URI of the default file system @param aConf Hadoop configuration @return FileContext object @throws UnsupportedFileSystemException if file system is unsupported
3127 Parses command-line arguments for token file operations. @param args command-line arguments array @return exit code: 0 on success, 1 on error
3128 Calls another method with configuration and keys. @param conf configuration object @param keytabFileKey key for the keytab file path @param userNameKey key for the user name
3129 Processes SASL messages and returns a response. @param saslMessage incoming SASL message @return processed SASL response or null @throws SaslException, IOException, AccessControlException, InterruptedException on error
3130 Masks and returns an object of specified protocol type. @param protocol Class type of the protocol @param clientVersion version of the client @param addr InetSocketAddress for communication @param conf Configuration settings @return Object of type T or throws IOException
3131 Masks a resource by name. @param name the name of the resource to mask
3132 Masks a URL resource. @param url the URL to be masked
3133 Masks a file by applying a resource transformation. @param file the path to the file to be masked
3134 Processes input stream through resource handling. @param in input stream to be processed
3135 Initiates a failover process to make the local node active. Throws exceptions if failover fails or service becomes unhealthy.
3136 Retrieves service protocol from the target monitor. @return HAServiceProtocol instance @throws IOException if communication fails
3137 Initializes HAServiceProtocol with configuration and timeout. @param conf configuration settings @param timeoutMs timeout in milliseconds @return HAServiceProtocol instance
3138 Initializes and returns HA service protocol. @param conf configuration settings @param timeoutMs operation timeout in milliseconds @return HAServiceProtocol instance @throws IOException if initialization fails
3139 Initializes and configures the Har Filesystem. @param name URI of the filesystem @param conf configuration settings @throws IOException if initialization fails
3140 Moves a file to the trash. @param fs FileSystem instance @param p Path of the file to be moved @param conf Configuration settings @return true if successfully moved to trash, false otherwise
3141 Initializes PathData with given path and configuration. @param pathString file system path as a string @param conf Hadoop configuration object @throws IOException if an I/O error occurs
3142 Creates a FileSystem instance with specified URI and configuration. @param name file system name @param conf configuration settings @return FileSystem object @deprecated Use alternative method instead
3143 Retrieves local file system instance. @param conf configuration settings @return LocalFileSystem object @throws IOException if an I/O error occurs
3144 Constructs a ChRootedFileSystem with a given URI and configuration. @param uri file system URI @param conf Hadoop configuration @throws IOException if an I/O error occurs
3145 Creates a FileSystem instance for the given URI and configuration. @param uri the uniform resource identifier @param conf the configuration settings @return a FileSystem object @throws IOException if an I/O error occurs
3146 Initializes file system based on URI scheme. @param uri target URI for the file system @param conf configuration settings @return initialized FileSystem object @throws IOException if an I/O error occurs
3147 Creates a FileSystem instance. @param conf configuration settings @return FileSystem object @throws IOException if an I/O error occurs
3148 Retrieves the FileSystem instance. @return FileSystem object, either supplied or created from base path @throws MetricsException if URI is invalid or connection fails
3149 Retrieves file statuses for a given path. @param f the input path @return array of FileStatus objects @throws IOException if an I/O error occurs
3150 Creates a FileContext using the specified default file system URI and default configuration. @param defaultFsUri URI of the default file system @return FileContext instance @throws UnsupportedFileSystemException if the file system is not supported
3151 Creates FileContext from Configuration. @param aConf configuration object @return FileContext instance @throws UnsupportedFileSystemException if URI has no valid scheme
3152 Creates a FileContext for the local file system. @param aConf configuration settings @return FileContext object for local file system @throws UnsupportedFileSystemException if local file system is not supported
3153 Constructs a new Server instance. @param protocolClass the RPC protocol class @param protocolImpl the implementation of the protocol @param conf configuration settings @param bindAddress address to bind the server to @param port port number for the server @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler size of the request queue per handler @param verbose enable verbose logging @param secretManager secret manager for security tokens @param portRangeConfig configuration for port range @param alignmentContext context for data alignment @throws IOException if an I/O error occurs during server setup
3154 Initializes a Server with specified parameters. @param protocolClass interface class for the protocol @param protocolImpl implementation of the protocol @param conf configuration settings @param bindAddress address to bind the server @param port port number for the server @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler size of the queue per handler @param verbose enables verbose logging @param secretManager secret manager for security tokens @param portRangeConfig configuration for port range @param alignmentContext context for alignment settings @throws IOException if initialization fails
3155 Handles SASL authentication for incoming RPC messages. @param saslMessage the SASL message from the client @throws RpcServerException if server-side error occurs @throws IOException if I/O error occurs @throws InterruptedException if thread is interrupted
3156 Loads the latest version of the mount table configuration. @param mountTableConfigPath path to the mount table configuration directory @param conf Hadoop configuration object @throws IOException if an I/O error occurs
3157 Activates a target node if not already active. @param targetNodeToActivate the node to activate @param forceActive flag to force activation on error @return true if activation is successful or skipped, false otherwise
3158 Initiates a failover from one HAServiceTarget to another. @param from the source HAServiceTarget @param target the destination HAServiceTarget @param forceActive flag to force active state if not ready @throws FailoverFailedException if failover fails for any reason
3159 Attempts to gracefully put a service target into standby mode. @param svc the HAServiceTarget to be modified @return true if successful, false otherwise
3160 Resolves and opens a file path, handling symlinks. @param filesys the FileSystem instance @param path the Path to resolve @return an open file handle or null if not found @throws IOException if an I/O error occurs
3161 Constructs PathData with local file system and path. @param localPath URI representing the local path @param conf Hadoop configuration @throws IOException if an I/O error occurs
3162 Copies files or directories to a destination. @param delSrc true if source files should be deleted after copying @param overwrite true if existing destination files should be overwritten @param srcs array of source paths to copy from @param dst destination path to copy to @throws IOException if an I/O error occurs during the operation
3163 Moves or copies a file from source to destination. @param delSrc true if source should be deleted after move @param overwrite true if destination can be overwritten @param src source file path @param dst destination file path @throws IOException if an I/O error occurs
3164 Masks a file by moving it to a destination path. @param delSrc true if source should be deleted after masking @param src source file path @param dst destination file path @param useRawLocalFileSystem flag to use raw local file system @throws IOException if an I/O error occurs
3165 Initializes context with local directories from configuration. @param conf Configuration object @return Context object initialized with local directories @throws IOException if directory configuration is invalid or inaccessible
3166 Finds a suitable directory for a file path. @param dirsProp property containing directory paths @param path file path to be stored @return Path object of the chosen directory or throws IOException if none found
3167 Resolves and retrieves FileSystem for a given path. @param path file system path @param conf configuration settings @return FileSystem object or throws exception if not found
3168 Resolves mount point information for a given path. @param path file system path to resolve @param conf configuration settings @return MountPathInfo containing resolved file system and remaining path @throws IOException if an I/O error occurs
3169 Parses a pattern and returns matching path data. @param pattern the file pattern to match @param conf configuration settings @return array of PathData objects or null if no matches found @throws IOException on I/O errors during file system operations
3170 Analyzes and prints properties of a TFile. @param file path to the TFile @param out PrintStream for output @param conf Configuration settings @throws IOException if an I/O error occurs
3171 Reads credentials from a file. @param filename path to the credential file @param conf configuration settings @return Credentials object containing read data @throws IOException if an I/O error occurs
3172 Parses configuration for JAR files and returns URLs. @param conf Configuration object @return Array of JAR file URLs or null if none found
3173 Initializes file system and sets up flushing timer. @return true if initialization is successful, false otherwise
3174 Retrieves local file system context. @return FileContext for local file system @throws UnsupportedFileSystemException if local file system is not supported
3175 Creates a FileContext instance using default configuration. @return FileContext object configured with default settings @throws UnsupportedFileSystemException if file system is unsupported
3176 Initializes a new Server instance. @param protocolClass the class of the protocol @param protocolImpl implementation of the protocol @param conf configuration settings for the server @param bindAddress address to bind the server to @param port port number for the server @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler size of the request queue per handler @param verbose enables detailed logging if true @param secretManager secret manager for secure communication @param portRangeConfig configuration for port range @param alignmentContext context for data alignment @throws IOException if an I/O error occurs during initialization
3177 Deprecated constructor for setting up a server. @param protocolClass unused parameter @param protocolImpl implementation of the protocol @param conf configuration settings @param bindAddress address to bind the server @param port port number to listen on @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler size of the request queue per handler @param verbose enable verbose logging @param secretManager secret manager for security tokens @param portRangeConfig unused parameter @throws IOException if an I/O error occurs during setup
3178 Initializes SSLFactory with given mode and configuration. @param mode SSL operation mode @param conf SSL configuration settings
3179 Masks configuration and policy using specified provider. @param conf Configuration object to be masked @param provider PolicyProvider used for masking
3180 Initiates failover from one service target to another. @param fromSvc current active service target @param toSvc target service for failover @param forceFence flag to force fencing operation @param forceActive flag to force activation of the target service @throws FailoverFailedException if failover fails
3181 Initializes destination path data. @param args list of arguments containing path information @throws IOException if URI syntax is invalid and not on Windows
3182 Masks multiple source files to a destination path. @param srcs array of source file paths @param dst destination file path @throws IOException if an I/O error occurs
3183 Moves files from source paths to destination. @param delSrc true if source files should be deleted after move @param overwrite true if existing destination files should be overwritten @param srcs array of source file paths @param dst destination directory path @throws IOException if an I/O error occurs
3184 Calls overloaded version of m1 with copy flag set to true. @param delSrc flag indicating whether to delete source after copying @param src source file path @param dst destination file path
3185 Copies or moves files from source to destination. @param delSrc true if source should be deleted after copy/move @param overwrite true if existing files in destination should be overwritten @param src source file path @param dst destination file path @throws IOException if an I/O error occurs
3186 Copies file from source to destination. @param delSrc true if source should be deleted after copy @param src source file path @param dst destination file path
3187 Finds a suitable local directory for file storage. @param pathStr base path string @param size required size or SIZE_UNKNOWN @param conf configuration settings @param checkWrite whether to check write permissions @return Path object of the selected directory @throws IOException if no valid directory is found
3188 Searches for a file in configured local directories. @param pathStr relative file path to search for @param conf configuration settings @return Path to the found file or throws DiskErrorException if not found
3189 Iterates over paths matching a given string pattern. @param pathStr the path string pattern @param conf configuration settings @return Iterable of matching Path objects @throws IOException if an I/O error occurs
3190 Initializes NflyFSystem with URIs and configuration. @param uris array of URI destinations @param conf configuration settings @param minReplication minimum number of replicas required @param nflyFlags flags for Nfly system behavior @param fsGetter factory for file systems @throws IOException if initialization fails
3191 Processes source files and handles exceptions. @return 0 if successful, -1 if an IOException occurs
3192 Masks paths based on given argument. @param arg input string for masking @return List of PathData objects @throws IOException if path not found
3193 Sets destination path based on arguments. @param args list of command-line arguments @throws IOException if path operations fail
3194 Constructs a new Reader instance. @param fs FileSystem object @param file Path to the file @param conf Configuration object @throws IOException if an I/O error occurs
3195 Constructs a Reader with specified parameters. @param in input stream from file system @param bufferSize size of buffer for reading @param start starting position in the file @param length length of data to read @param conf configuration settings @throws IOException if an I/O error occurs
3196 Creates a SequenceFile reader with specified options. @param dataFile path to the SequenceFile @param conf Hadoop configuration @param options additional reader options @return SequenceFile.Reader instance @throws IOException if an I/O error occurs
3197 Reads next key from input. @return true if key is successfully read, false otherwise @throws IOException if an I/O error occurs or class mismatch
3198 Constructs a Writer with specified configuration and options. @param conf Hadoop configuration @param opts variable number of option objects @throws IOException if an I/O error occurs
3199 Dumps TFile content. @param args array of TFile paths
3200 Masks a file with given credentials format. @param f the file to be masked @param format the serialization format for credentials @param creds the credentials to use for masking @param conf configuration settings for the operation
3201 Handles log flushing based on time and force flush flag. @throws MetricsException if an error occurs during log handling
3202 Finds JAR files matching the given path. @param path directory or file pattern to search @param useLocal flag to use local filesystem context @return list of Paths to JAR files
3203 Constructs a Server instance. @param protocolClass Protocol class type @param protocolImpl Implementation of the protocol @param conf Configuration settings @param bindAddress Address to bind server @param port Port number for the server @throws IOException if an I/O error occurs during initialization
3204 Deprecated constructor for Server. @param protocolImpl implementation of the protocol @param conf configuration settings @param bindAddress address to bind to @param port port number @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler queue size per handler @param verbose flag for verbose output @param secretManager secret manager for security tokens @throws IOException if an I/O error occurs
3205 Handles special RPC calls based on header. @param header request header containing call ID @param buffer data buffer for processing @throws RpcServerException if invalid or unsupported call @throws IOException on I/O errors @throws InterruptedException if thread is interrupted
3206 Establishes an authenticated URL connection. @param url the target URL to connect to @return the established URLConnection @throws Exception if authentication fails or other errors occur
3207 Copies file from source to destination. @param src source file path @param dst destination file path
3208 Masks file from source to destination. @param src source file path @param dst destination file path @throws IOException if I/O error occurs
3209 Moves a file from source to destination. @param delSrc true if source should be deleted after move @param src path to the source file @param dst path to the destination file @throws IOException if an I/O error occurs
3210 Copies file from source to destination. @param src source file path @param dst destination file path @throws IOException if an I/O error occurs
3211 Masks a file by moving it to a destination path. @param src source file path @param dst destination file path @throws IOException if an I/O error occurs
3212 Moves a file or directory from source to destination. @param delSrc true if source should be deleted after move @param src source path @param dst destination path @throws IOException if an I/O error occurs
3213 Allocates and configures a file path. @param pathStr the file path as a string @param size the desired size of the file @param conf configuration settings for allocation @param checkWrite flag to check write permissions @return Path object representing the allocated file path @throws IOException if an I/O error occurs
3214 Creates a masked file with given size in specified directory. @param pathStr directory path string @param size desired file size @param conf configuration settings @return created File object @throws IOException if I/O error occurs
3215 Retrieves an allocator context and processes a path. @param pathStr string representation of the path @param conf configuration settings @return processed Path object @throws IOException if an I/O error occurs
3216 Retrieves paths based on given configuration. @param pathStr string representation of the path @param conf configuration settings @return iterable collection of paths or throws IOException
3217 Constructs an NflyFSystem instance. @param uris array of URIs for system initialization @param conf configuration settings @param minReplication minimum replication factor @param nflyFlags flags for NFly operations @throws IOException if an I/O error occurs during construction
3218 Creates a FileSystem with specified URI and configuration. @param uris array of URIs for the file system @param conf Configuration object @param settings string containing key-value pairs for settings @param fsGetter FsGetter instance @return NflyFSystem object initialized with given parameters @throws IOException if an I/O error occurs
3219 Expands arguments to PathData objects. @param args list of argument strings @return LinkedList of PathData objects @throws IOException if expansion fails
3220 Masks a token by fetching and potentially aliasing it. @param tokenFile file containing token information @param fileFormat format of the token file @param alias optional alias for the token @param service service associated with the token @param url URL for token retrieval @param renewer entity that can renew the token @param conf configuration settings @throws Exception if an error occurs during processing
3221 Masks tokens in a file based on service and alias. @param tokenFile file containing tokens @param fileFormat format of the file @param alias text for aliasing @param service text representing the service @param conf configuration settings
3222 Merges credentials from token files into a single Credentials object. @param tokenFiles list of token files to process @param fileFormat format of the output file @param conf configuration settings @throws IOException if an I/O error occurs
3223 Masks or cancels tokens based on alias and configuration. @param cancel flag to determine if cancellation should occur @param tokenFile file containing token data @param fileFormat format of the token file @param alias text alias for token identification @param conf configuration settings
3224 Masks tokens in a given file. @param tokenFile file containing tokens @param fileFormat format of the token file @param alias text alias for token matching @param conf configuration settings @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
3225 Adds a token to credentials and writes to a file. @param tokenFile file containing token information @param fileFormat format of the output file @param alias optional alias for the token @param base64 base64 encoded token string @param conf configuration settings @throws IOException if an I/O error occurs
3226 Retrieves paths matching the given pattern. @param path directory path to search in @return list of matching Path objects
3227 Deprecated constructor for creating a server. @param instance server instance @param conf configuration settings @param bindAddress address to bind the server @param port port number for the server @throws IOException if an I/O error occurs
3228 Processes an RPC request from a ByteBuffer. @param bb input buffer containing the RPC data @throws IOException if I/O error occurs @throws InterruptedException if thread is interrupted
3229 Connects to a URL, reads content line by line, and prints lines containing a marker. @param urlString the URL to connect to @throws Exception if connection or reading fails
3230 Masks file content and writes to output. @param fsOutputFile destination path for masked file @param tmpLocalFile temporary local file containing original data
3231 Copies files from source to destination, optionally copying CRC. @param src source path @param dst destination path @param copyCrc flag to indicate if CRC file should be copied @throws IOException if an I/O error occurs
3232 Calls overloaded method with default recursive flag. @param pathStr file path as string @param size file size in bytes @param conf configuration settings @return Path object representing the file @throws IOException if an I/O error occurs
3233 Allocates and retrieves a file. @param pathStr file path string @param size file size in bytes @param conf configuration settings @return File object or throws IOException
3234 Processes a list of arguments. Masks and forwards them to another method. @param args LinkedList containing input arguments @throws IOException if processing fails
3235 Creates a writer with specified options and compression. @param conf configuration settings @param opts optional writer configurations @return Writer instance based on compression type @throws IOException if an I/O error occurs
3236 Masks input class path by expanding wildcards and creating a JAR. @param inputClassPath the original class path string @param pwd working directory as Path @param targetDir target directory for files as Path @param callerEnv environment variables map @return array of masked class path entries @throws IOException if I/O operations fail
3237 Masks file paths, handling wildcards if specified. @param files comma-separated list of file paths @param expandWildcard flag to determine wildcard expansion @return masked file paths as a single string @throws IOException if an I/O error occurs
3238 Handles RPC communication, reading headers and data. @return Count of bytes processed or -1 on error @throws IOException if I/O error occurs @throws InterruptedException if thread is interrupted
3239 Processes input buffer using SASL server unwrap and handles data chunks. @param inBuf input buffer to be processed
3240 Sets log level for a specified class. @throws Exception if an error occurs during execution
3241 Sets log level for a class. @throws Exception if an error occurs during execution
3242 Creates a KeyProvider for the given URI and configuration. @param providerUri URI of the key provider @param conf configuration settings @return KeyProvider instance or null if scheme does not match @throws IOException on invalid authority or port parsing
3243 Moves a file from temporary local storage to final filesystem output. @param fsOutputFile destination path in the filesystem @param tmpLocalFile source path of the temporary local file @throws IOException if an I/O error occurs during the move operation
3244 Allocates a file with given size and configuration. @param pathStr file path string @param size desired file size in bytes @param conf configuration settings @return allocated File object @throws IOException if allocation fails
3245 Calls another overloaded method with unknown size. @param pathStr file path string @param conf configuration settings @return Path object representing the file @throws IOException if an I/O error occurs
3246 Processes command-line arguments. @param argv variable number of command-line argument strings @return exit code indicating success or failure
3247 Constructs a new Reader instance. @param fs FileSystem object @param file path to the file @param conf Configuration settings @throws IOException if an I/O error occurs
3248 Initializes a new Reader. @param fs FileSystem instance @param dirName directory name for reading @param comparator custom comparator for sorting @param conf configuration settings @throws IOException if an I/O error occurs
3249 Deprecated constructor for Reader. @param fs FileSystem instance @param dirName directory name as string @param conf Configuration object @throws IOException if an I/O error occurs
3250 Constructs a new Reader instance. @param fs FileSystem object @param dirName directory name for reading @param comparator WritableComparator for key comparison @param conf Configuration settings @throws IOException if an I/O error occurs
3251 Masks input file content and writes to output file. @param inputFile path to the input file @param outputFile path to the output file @param prog progress tracking object @return Writer for the masked output @throws IOException if I/O error occurs
3252 Generates an index for a SequenceFile. @param fs FileSystem instance @param dir Directory containing the SequenceFile @param keyClass Key class of the SequenceFile @param valueClass Value class of the SequenceFile @param dryrun If true, performs a dry run without writing changes @param conf Configuration object @return Number of entries processed or -1 if index already exists
3253 Deprecated method for creating a writer. @param fs FileSystem instance @param conf Configuration settings @param name Path to the file @param keyClass Class type for keys @param valClass Class type for values @return Writer object @throws IOException if an I/O error occurs
3254 Deprecated method for creating a Writer. @param fs FileSystem instance @param conf Configuration object @param name Path to the file @param keyClass Class type for keys @param valClass Class type for values @param compressionType Compression type for output @return Writer instance or throws IOException
3255 Creates a Writer instance with specified parameters. @param fs FileSystem object @param conf Configuration object @param name Path for the file @param keyClass Class type for keys @param valClass Class type for values @param compressionType Compression type for output @param progress Progressable object for tracking progress @return Writer instance @throws IOException if an I/O error occurs
3256 Deprecated method for creating a writer with specified parameters. @param fs FileSystem instance @param conf Configuration settings @param name Path to the file @param keyClass Class type for keys @param valClass Class type for values @param compressionType Compression type @param codec Compression codec @return Writer object @throws IOException if an I/O error occurs
3257 Deprecated method for creating a writer. @param fs file system object @param conf configuration settings @param name path to the file @param keyClass class of keys @param valClass class of values @param compressionType type of compression @param codec compression codec @param progress progress tracker @param metadata associated metadata @return Writer object for writing data @throws IOException if an I/O error occurs
3258 Creates a new writer for writing to a file system. @param fs FileSystem instance @param conf Configuration settings @param name Path of the file to write @param keyClass Class type for keys @param valClass Class type for values @param bufferSize Size of buffer @param replication Replication factor @param blockSize Block size @param compressionType Compression type @param codec Compression codec @param progress Progressable object @param metadata Metadata for the file @return Writer instance for writing to the file system @throws IOException if an I/O error occurs
3259 Creates a Writer instance with specified parameters. @param fs FileSystem object @param conf Configuration settings @param name Path to the file @param keyClass Class type for keys @param valClass Class type for values @param compressionType Type of compression @param codec Compression codec @param progress Progressable callback @return Writer object @throws IOException if an I/O error occurs
3260 Creates a deprecated Writer instance. @param conf configuration settings @param out file data output stream @param keyClass class of the key @param valClass class of the value @param compressionType type of compression @param codec compression codec @param metadata additional metadata @return Writer object @throws IOException if an I/O error occurs
3261 Deprecated method to create a Writer instance. @param conf Configuration object @param out FSDataOutputStream for output @param keyClass Class of the key @param valClass Class of the value @param compressionType Compression type @param codec Compression codec @return Writer instance @throws IOException if an I/O error occurs
3262 Calls overloaded method with default false flag. @param files comma-separated file paths @return processed result as string
3263 Executes operation based on input. @throws HadoopIllegalArgumentException if invalid operation @throws Exception for other errors
3264 Creates a DataBlock for file upload. @param index unique identifier for the data block @param limit size limit for the data block @param statistics upload statistics tracker @return DataBlock object representing the file on disk
3265 Creates a temporary file in the local directory. @param conf configuration settings @param localDirAllocator allocator for local directories @return Path to the created temporary file @throws IOException if an I/O error occurs
3266 Executes shell command based on input arguments. @param argv array of command-line arguments @return exit code of the executed command
3267 Constructs a new Reader instance. @param fs FileSystem object @param dirName directory name @param conf Configuration object @throws IOException if an I/O error occurs
3268 Merges segments into a single raw key-value iterator. @throws IOException if an I/O error occurs @return RawKeyValueIterator for merged data
3269 Initializes a Writer for sequence files. @param conf Hadoop configuration @param fs FileSystem instance @param dirName directory name for output @param comparator custom comparator for keys @param compress compression type for files @throws IOException if an I/O error occurs
3270 Initializes a Writer for writing data to a file. @param conf configuration settings @param fs FileSystem instance @param file path of the output file @param valClass class type of the writable values @throws IOException if an I/O error occurs
3271 Constructs a Writer for writing data to a file. @param conf Hadoop configuration @param fs FileSystem instance @param file Output file path @param valClass Class of the value to be written @param compress Compression type @param progress Progressable object for reporting progress @throws IOException if an I/O error occurs
3272 Deprecated constructor for creating a Writer. @param conf Hadoop configuration object @param fs FileSystem instance @param dirName directory name for output @param keyClass class type of the keys @param valClass class type of the values @throws IOException if an I/O error occurs
3273 Deprecated constructor for Writer. @param conf Hadoop configuration @param fs FileSystem instance @param dirName output directory name @param keyClass key class type @param valClass value class type @param compress compression type @param progress progressable object @throws IOException if an I/O error occurs
3274 Constructs a Writer instance. @param conf Hadoop configuration @param fs FileSystem to use @param dirName output directory name @param keyClass key class type @param valClass value class type @param compress compression type @param codec compression codec @param progress progressable object @throws IOException if an I/O error occurs
3275 Deprecated constructor for Writer. @param conf Hadoop configuration @param fs FileSystem instance @param dirName directory name for output @param keyClass key class type @param valClass value class type @param compress compression type @throws IOException if an I/O error occurs
3276 Constructs a Writer instance. @param conf Hadoop configuration @param fs FileSystem object @param dirName output directory name @param comparator custom comparator for sorting @param valClass class of the values to be written @throws IOException if an I/O error occurs
3277 Deprecated constructor for Writer. @param conf Configuration object @param fs FileSystem object @param dirName directory name for output @param comparator WritableComparator for key comparison @param valClass class of values @param compress compression type for sequence file @throws IOException if an I/O error occurs
3278 Deprecated constructor for Writer. @param conf configuration settings @param fs file system to write to @param dirName directory name @param comparator key comparator @param valClass value class type @param compress compression type @param progress progressable object @throws IOException if an I/O error occurs
3279 Deprecated constructor for Writer. @param conf Hadoop configuration @param fs FileSystem instance @param dirName output directory name @param comparator WritableComparator for key comparison @param valClass value class type @param compress compression type @param codec compression codec @param progress Progressable object @throws IOException if an I/O error occurs
3280 Creates a Writer for a file in HDFS. @param fc FileContext object @param conf Configuration settings @param name Path to the file @param keyClass Class of keys @param valClass Class of values @param compressionType Compression type for the file @param codec Compression codec to use @param metadata Metadata for the file @param createFlag Flags for file creation @param opts Additional options for file creation @return Writer object for writing to the file @throws IOException if an I/O error occurs
3281 Handles command-line arguments for masking operations. @param args command-line arguments array
3282 Creates a ClassLoader based on the provided file and work directory. @param file main classpath file @param workDir working directory for classpath @return configured ClassLoader @throws MalformedURLException if URL formation fails
3283 Parses and processes command-line options for configuration. @param line CommandLine object containing user input
3284 Generates a masked file path. @param conf configuration settings @param localDirAllocator directory allocator @return Path object representing the masked file path @throws IOException if an I/O error occurs
3285 Checks if sufficient cache space is available. @param fileSize size of the file to be cached @param conf configuration settings @param localDirAllocator allocator for local directories @return true if enough space, false otherwise
3286 Merges segment data into a single iterator. @param segments list of segment descriptors to merge @param tmpDir temporary directory for intermediate files @return RawKeyValueIterator over merged data @throws IOException if an I/O error occurs during merging
3287 Merges input files into a single iterator. @param inNames array of input file paths @param deleteInputs flag to delete input files after processing @param factor merge factor @param tmpDir temporary directory for intermediate files @return RawKeyValueIterator over merged data @throws IOException if an I/O error occurs
3288 Merges input files into a single output file. @param inNames array of input file paths @param tempDir temporary directory for merging @param deleteInputs flag to delete input files after merge @return iterator over merged key-value pairs
3289 Initializes and returns a RawKeyValueIterator for merging segments. @param inName input file path @param indexIn index file path @param tmpDir temporary directory for merge operations @return RawKeyValueIterator for merged data @throws IOException if an I/O error occurs
3290 Initializes a Writer with specified configuration and compression. @param conf Hadoop configuration @param fs FileSystem instance @param dirName output directory name @param keyClass class of the key @param compress compression type for sequence files @throws IOException if an I/O error occurs
3291 Initializes a Writer to FileSystem with specified directory and key class. @param fs FileSystem instance @param dirName directory name for output @param keyClass key class type @throws IOException if initialization fails
3292 Processes input map files and writes to output file. @param inMapFiles array of input map files @param deleteInputs flag to delete input files after processing @param outMapFile output map file path @throws IOException if an I/O error occurs
3293 Creates a writer for writing to a file in the specified filesystem. @param fs FileSystem instance @param conf Configuration settings @param name Path of the file to create @param keyClass Class type for keys @param valClass Class type for values @param bufferSize Size of buffer for data transfer @param replication Replication factor for the file @param blockSize Block size for the file @param createParent Whether to create parent directories if they don't exist @param compressionType Type of compression to use @param codec Compression codec to use @param metadata Metadata for the file @return Writer object for writing to the file @throws IOException if an I/O error occurs
3294 Parses command-line arguments using provided options. @param opts command-line options configuration @param args array of command-line arguments @return true if parsing successful, false otherwise
3295 Processes a block by reading or writing data. @param blockNumber identifier for the block @param buffer data buffer @param conf configuration settings @param localDirAllocator directory allocator for local storage @throws IOException if an I/O error occurs
3296 Initializes a raw key-value iterator. @param inNames input file paths @param deleteInputs flag to delete input files after processing @param tmpDir temporary directory path @return RawKeyValueIterator instance
3297 Performs a merge pass on sorted data files. @param tmpDir temporary directory for processing @return 0 indicating successful completion
3298 Runs a jar file with provided arguments. @param args command-line arguments to pass to the jar
3299 Parses command-line arguments using specified configuration and options. @param conf Configuration object for parsing @param options Set of options to be parsed from arguments @param args Command-line arguments array @throws IOException if an I/O error occurs during parsing
3300 Merges input files into a single output file and returns an iterator. @param inFiles array of input file paths @param tempDir temporary directory for intermediate files @param deleteInput flag to delete input files after processing @return RawKeyValueIterator for the merged data @throws IOException if an I/O error occurs during processing
3301 Processes input files and writes output to a specified file. @param inFiles array of input file paths @param outFile path of the output file @throws IOException if output file already exists or other I/O errors occur
3302 Merges input files into an output file. @param inFiles array of input file paths @param outFile path to the output file @param deleteInput flag to delete input files after processing @throws IOException if output file already exists or other I/O errors occur
3303 Constructs a new GenericOptionsParser with default configuration. @param opts command-line options @param args command-line arguments @throws IOException if an I/O error occurs
3304 Initializes parser with default configuration and options. @param args command-line arguments to parse @throws IOException if an I/O error occurs during parsing
3305 Initializes parser with configuration and command-line arguments. @param conf Configuration object @param args Command-line arguments array @throws IOException if an I/O error occurs
3306 Copies content from one file to another. @param inFile source file path @param outFile destination file path @throws IOException if an I/O error occurs
3307 Parses command line arguments using configuration. @param conf Configuration object @param argArray Command line arguments array @return GenericOptionsParser instance @throws IOException if parsing fails
3308 Executes a tool with configuration and arguments. @param conf configuration object, may be null @param tool the tool to execute @param args command-line arguments @return exit code from tool execution
3309 Parses command-line arguments and updates configuration. @param conf Configuration object to update @param args List of command-line arguments @return List of remaining arguments after parsing
3310 Executes a diagnostic tool with configuration and arguments. @param conf Configuration object for the tool @param argv Variable arguments for the tool execution @return Exit status code from the tool execution @throws Exception if an error occurs during execution
3311 Executes a credential shell command. @param args command-line arguments @throws Exception if execution fails
3312 Executes a key shell command with provided arguments. @param args command-line arguments for the key shell
3313 Recursively calls m2 with modified arguments. @param tool Tool instance @param args Array of string arguments @return Result of recursive call
3314 Masks arguments based on configuration. @param conf Configuration object @param args List of input arguments @return Masked list of arguments or empty list if size <= 1
3315 Masks input arguments and handles exceptions. @param argv command line arguments
3316 Executes a file system command with arguments. @param argv array of command-line arguments
3317 Executes command-line interface with provided arguments. @param args command-line arguments
3318 Executes FindClass with provided arguments. @param args command-line arguments for execution
3319 Processes command-line arguments, logs details, and handles exceptions. @param args list of command-line arguments
3320 Masks input arguments and processes them. @param args command line arguments to be masked
3321 Invokes m2 with processed arguments. @param args variable number of string arguments
