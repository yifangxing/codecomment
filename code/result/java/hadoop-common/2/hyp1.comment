1 Creates a new FileRange with specified offset and length. @param offset starting byte position in the file @param length number of bytes in the range @return FileRange object representing the byte range
2 Creates a new FileRange instance. @param offset starting byte position in the file @param length number of bytes in the range @param reference associated context object @return FileRangeImpl representing the specified byte range
3 Validates and processes a file range. @param range the FileRange object to validate @return the validated FileRange object @throws IllegalArgumentException if range or length is invalid @throws EOFException if position is negative
4 Validates that an object is not null. @param obj the object to check @param argName name of the argument for error message
5 Validates that a long value is positive. @param value the number to validate @param argName name of the argument for error message
6 Validates that a long value is non-negative. @param value the number to check @param argName name of the argument for error message
7 Validates that a boolean condition is true. @param isPresent the condition to check @param argName name of the argument being validated
8 Validates a boolean condition and throws an exception if false. @param isValid condition to validate @param argName name of the argument being validated
9 Validates an argument against a set of valid values. @param isValid condition indicating if the argument is valid @param argName name of the argument being validated @param validValues string representation of valid values
10 Validates that two long values are equal. @param value1 first value to compare @param value1Name name of the first value for error message @param value2 second value to compare @param value2Name name of the second value for error message
11 Validates that one number is an integer multiple of another. @param value1 first numerical value @param value1Name name of the first value for error message @param value2 second numerical value @param value2Name name of the second value for error message
12 Ensures the first value is greater than the second. @param value1 the first numerical value to compare @param value1Name name of the first value for error message @param value2 the second numerical value to compare @param value2Name name of the second value for error message
13 Validates that one long value is greater than or equal to another. @param value1 first value to compare @param value1Name name of the first value for error message @param value2 second value to compare @param value2Name name of the second value for error message
14 Validates that one long value is less than or equal to another. @param value1 first numerical value @param value1Name name of the first value for error message @param value2 second numerical value @param value2Name name of the second value for error message
15 Validates that a long value is within a specified inclusive range. @param value the value to validate @param valueName name of the value for error message @param minValueInclusive minimum acceptable value (inclusive) @param maxValueInclusive maximum acceptable value (inclusive)
16 Validates that a double value is within a specified inclusive range. @param value the value to validate @param valueName name of the value for error message @param minValueInclusive minimum allowable value (inclusive) @param maxValueInclusive maximum allowable value (inclusive)
17 Validates paths for bulk deletion. @param paths collection of paths to validate @param pageSize maximum number of paths allowed per operation @param basePath parent directory under which paths must reside
18 Initializes with a file for upload. @param file the file to be uploaded
19 Casts a Serializable object to IOStatisticsSnapshot. @param snapshot the object to cast @return the casted IOStatisticsSnapshot
20 Maps enum constants to lowercase string keys with a prefix. @param prefix prefix to prepend to lowercase enum names @param enumClass class of the enum type @return map from prefixed lowercase strings to enum constants
21 Validates and processes file ranges for efficient vectored reads. @param input list of file ranges to process @return array of processed FileRange objects
22 Checks if a child path is a subdirectory of a parent path. @param parent parent directory path @param child child directory path @return true if child is a subdirectory of parent, false otherwise
23 Compares two paths for equality, ignoring schemes if both have schemes. @param qualPath1 first path to compare @param qualPath2 second path to compare @return true if paths are equal, false otherwise
24 Marks a file for deletion on exit. @param f file path to mark @return true if marking is successful, false otherwise
25 Deletes files scheduled for deletion on exit. Iterates through the list and attempts to delete each file, logging failures.
26 Checks if a file has both a name and a corresponding checksum file. @param file the Path object representing the file to check @return true if the file has a name and a .crc checksum file, false otherwise
27 Checks if a file path indicates a checksum file. @param file the Path object representing the file @return true if the file is a checksum file, false otherwise
28 Adjusts block locations for a specified range within an HAR file. @param locations array of BlockLocation objects to adjust @param start starting offset of the range @param len length of the range @param fileOffsetInHar offset of the file within the HAR archive @return adjusted BlockLocation array
29 Compares current file status with another. @param o FileStatus object to compare @return comparison result as an integer
30 Converts an array of FileStatus to an array of Paths. @param stats array of FileStatus objects @return array of Path objects or null if input is null
31 Resolves a file path to its target status. @param f the file or directory path @return FileStatus object representing the resolved file or directory @throws IOException if an I/O error occurs
32 @deprecated Use alternative method. Retrieves replication factor for a file path. @param src source file path @return block replication factor @throws IOException if an I/O error occurs
33 Retrieves block size of the specified file. @param f file path @return block size in bytes @throws IOException if an I/O error occurs
34 Calls getDefaultReplication() to get default file replication setting. @param path file path (not used in this method) @return Short value representing the default replication bitmask
35 Aggregates and updates statistics data. Locks on `Statistics` instance, aggregates data from `rootData`, and updates `allData`.
36 Validates parameters for reading bytes from a file. @param position starting position in the file @param buffer destination byte array @param offset start index in the buffer @param length number of bytes to read Throws exceptions if parameters are invalid
37 Validates the upload ID. @param uploadId unique identifier for an upload @throws IllegalArgumentException if uploadId is null or empty
38 Validates multipart upload parts. @param partHandles map of part handles to validate
39 Masks the capability for a given path. @param path file system path @param capability associated capability string @return masked capability string
40 Constructs an IrqHandler with a given name and handler. @param name unique identifier for the handler @param handler object to handle interruptions
41 Partitions a list into sublists of specified size. @param originalList the list to be partitioned @param pageSize the maximum size of each sublist @return a list of sublists, each containing up to pageSize elements
42 Constructs a JsonSerialization instance. @param classType Java class type for serialization/deserialization @param failOnUnknownProperties flag to throw exception on unknown properties during deserialization @param pretty flag to enable pretty JSON output
43 Initializes storage statistics with a specific name, scheme, and IO statistics. @param name unique identifier for the storage statistics @param scheme storage scheme type @param ioStatistics IO statistics to be encapsulated
44 Deprecated method to retrieve file system statistics. @return Map of statistics by scheme or null if not found
45 Creates a file with specified permissions and options. @param f file path @param permission file permissions @param flags creation flags @param bufferSize buffer size for data transfer @param replication number of replicas for the file @param blockSize block size for the file @param progress progress callback @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
46 Creates a file with specified permissions and options. @param f file path to create @param permission file permissions @param overwrite flag to overwrite existing file @param bufferSize buffer size for data transfer @param replication number of replicas @param blockSize block size for the file @param progress progress tracking object @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
47 Constructs a new PathAccessDeniedException with the specified file path. @param path the file path where access is denied
48 Constructs a new PathPermissionException with the specified file path. @param path the file path where the permission issue occurred
49 Constructs a PathNotFoundException with a specified path. @param path the file path where the exception occurred
50 Constructs a PathExistsException with the specified file path and default error message. @param path the existing file path causing the exception
51 Constructs a new PathIOException with the specified path and default error message. @param path the file path where the exception occurred
52 Constructs a ClosedIOException with a specified file path and error message. @param path the file path where the exception occurred @param message the error message describing the issue
53 Marks and returns the current builder instance. @return reference to this builder instance
54 @deprecated Use new permission handling methods. Retrieves the permission mask. @return Short representation of combined permissions
55 Generates a permission mask in octal format. @return short representation of the permission mask
56 Masks all strings in the input array using weak interning. @param strings array of original strings to be masked @return array of masked strings
57 Checks if the FileStatus represents a directory. @return true if it's a directory, false otherwise
58 Checks if a file exists and is not a directory. @param f the path to check @return true if file exists and is not a directory, false otherwise @throws IOException if an I/O error occurs @throws UnresolvedLinkException if a symbolic link could not be resolved
59 Checks if the given path represents a directory. @param item PathData object representing the file system item @return true if the item is a directory, false otherwise
60 Determines ACL entries for a given path. @param item PathData object representing the file or directory @return List of AclEntry objects based on conditions
61 Checks if a file is a directory. @param f the path to check @return true if the path is a directory, false otherwise @throws IOException if an I/O error occurs
62 Generates a permission mask for a file. @param file FileStatus object representing the file @return short value of the combined permissions
63 Determines if FileStatus is neither a directory nor a symbolic link. @return true if not a directory or symlink, false otherwise
64 Returns the target path of a symbolic link. @throws IOException if the FileStatus object does not represent a symbolic link
65 Retrieves or calculates the length of the file. @return Length of the file in bytes @throws IOException if an I/O error occurs
66 Deprecated method to get file length. @param f file path @return Length of the file in bytes
67 Retrieves storage policy for a given path. @param src source path @return BlockStoragePolicySpi object or throws IOException if unsupported
68 Sets extended attribute on a file or directory. @param path file or directory path @param name attribute name @param value attribute value
69 Constructs a PathIOException with specified path and underlying cause. @param path the file path where the exception occurred @param cause the underlying Throwable that caused this exception
70 Seeks to a specified position and resets buffer state for block compressed files. @param position target position in the input stream @throws IOException if an I/O error occurs
71 Reads and validates the next record length from input stream. @return Length of the next record or -1 if end is reached @throws IOException if an I/O error occurs or file corruption is detected
72 Retrieves the current position in the input stream. @return The current byte offset from the start of the file. @throws IOException if an I/O error occurs
73 Registers an expression class with the ExpressionFactory. @param expressionClass Class of the expression to register
74 Registers commands for the given class. @param registrarClass the class responsible for command registration
75 Reads data from a specified position in the HAR file. @param pos starting position to read from @param b byte array to store the read data @param offset offset within the buffer to start storing data @param length number of bytes to read @return number of bytes actually read or -1 if no more data is available @throws IOException if an I/O error occurs
76 Reads data from specified position into buffer. @param pos starting position in the stream @param b byte array to store the read data @param offset offset within the buffer to start storing data @param length number of bytes to read @throws IOException if an I/O error occurs or not enough bytes available
77 Expands file pattern with curly braces into alternative paths. @param filePatternWithOffset input file pattern and its offset @return list of expanded paths or null if no unclosed brace found
78 Fetches directory entries for a given path. @param f file path to list entries for @return DirectoryEntries object containing file status and pagination info @throws FileNotFoundException if the path does not exist @throws IOException if an I/O error occurs
79 Encodes byte array into a string based on specified encoding type. @param value byte array to encode @param encoding XAttrCodec specifying the encoding type (HEX, BASE64, or UTF-8) @return encoded string with appropriate prefix @throws IOException if encoding fails
80 Lists and filters file statuses. @param results list to store filtered FileStatus objects @param f directory path to list files from @param filter PathFilter to apply for file inclusion @throws FileNotFoundException if the specified file does not exist @throws IOException if an I/O error occurs
81 Initializes a new MetricsTag with given info and value. @param info MetricsInfo object containing tag details @param value current value of the metric tag
82 Initializes an AbstractMetric with given metrics information. @param info MetricsInfo object containing metric details
83 Renews a delegation token for a given URL. @param url target URL @param token Delegation token to renew @param renewer user allowed to renew the token @param doAsUser user on behalf of whom the action is performed @return renewed delegation token @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
84 Authenticates URL using delegation token. @param url target URL for authentication @param token token containing delegation information @param doAsUser user on behalf of whom to act @return timestamp of the token's expiration @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
85 Authenticates a URL using delegation tokens. @param url the target URL to authenticate @param token the delegation token for authentication @param doAsUser the user on behalf of whom to act @throws IOException if an I/O error occurs during authentication
86 Initializes a ValueQueue with specified parameters. @param numValues maximum number of tasks per key @param lowWatermark threshold for refilling tasks (0 < lowWatermark <= 1) @param expiry time before queue expiration in milliseconds @param numFillerThreads number of threads for task refilling @param policy synchronization generation policy @param refiller strategy for filling queues
87 Validates that an object is not null. @param obj object to validate @return original object if not null @throws NullPointerException with a default message if object is null
88 Retrieves or creates storage statistics by name. @param name unique identifier for the storage statistics @param provider factory to create StorageStatistics if not found @return StorageStatistics object associated with the given name @throws RuntimeException if provider returns null or mismatched stats
89 Resets global storage statistics. Synchronizes access to ensure thread safety.
90 Closes the block upload data by releasing resources. Marks the object as closed, cleans up streams/files, and resets internal state.
91 Copies a file from source to destination using native methods if available. @param src Source File object @param dst Destination File object @throws IOException if an I/O error occurs during the copy process
92 Safely closes a Closeable resource. @param stream the resource to be closed
93 Closes multiple Closeable resources safely. @param streams Varargs of Closeable objects to be closed
94 Deletes a file and checks for successful deletion. @param file the File object to be deleted @throws IOException if deletion fails or an I/O error occurs
95 Writes data to file and flushes buffer. @throws IOException if an I/O error occurs
96 Tracks and logs IO operation duration and failures. @param key unique identifier for the operation statistic
97 Updates buffer count and returns the old count. @param newCount new count value to set @return old count before update
98 Retrieves the socket address for a server connector. @param index index of the connector in the server array @return InetSocketAddress or null if invalid or unavailable
99 Initializes the GcTimeMonitor with specified parameters. @param observationWindowMs time window for GC monitoring in milliseconds @param sleepIntervalMs interval between checks in milliseconds @param maxGcTimePercentage maximum allowed GC time percentage @param alertHandler handler to manage GC alerts Validates input parameters and sets up internal buffers and configurations.
100 Masks the servlet name in the request URI. @param request HTTP request object @param servletName name of the servlet to mask @return masked servlet path
101 Compares two FileStatus objects for equality. @param o the object to compare with @return true if both FileStatus objects are equal, false otherwise
102 Retrieves the file or directory path. @return Path object representing the file or directory
103 Updates sample count and sum. @param sampleCount new number of samples, must be non-negative @param newSum new total sum value to be set
104 Merges another MeanStatistic into this instance. If the other is empty, returns this. Otherwise, adds its samples and sums. @param other MeanStatistic to merge @return this MeanStatistic with merged data
105 Appends formatted map entries to a StringBuilder. @param sb StringBuilder to append to @param type type of the map entries @param map map containing key-value pairs @param separator separator for entries
106 Converts map entry to masked string using key and value. @param entry map entry containing key-value pair @return masked string representation of the entry
107 Creates a duration tracker with specified key and count. @param key identifier for the duration tracking @param count number of occurrences to track @return DurationTracker instance using stub implementation
108 Converts a map entry to a LongStatistic. @param e map entry containing name and value @return LongStatistic object initialized with entry's key and value
109 Constructs an EvaluatingStatisticsMap with passthrough function.
110 Registers an evaluator function for a given key. @param key unique identifier for the evaluator @param eval function to evaluate data associated with the key
111 Registers an evaluation function for a gauge metric. @param key unique identifier for the metric @param eval function to evaluate the metric value
112 Registers a function to evaluate and track the minimum value for a given key. @param key unique identifier for the metric @param eval function to compute the metric value from input data
113 Registers an evaluator function to track maximum values for a given key. @param key unique identifier for the metric @param eval function to evaluate and compute the maximum value
114 Registers a function to calculate mean statistics for a given key. @param key unique identifier for the statistic @param eval function to compute mean values
115 Wraps given IOStatistics in a SourceWrappedStatistics. @param statistics IOStatistics object to wrap @return SourceWrappedStatistics instance
116 Returns the singleton instance of IOStatisticsStore. @return Singleton instance of IOStatisticsStore
117 Returns an instance of EmptyIOStatistics with default metrics. @return IOStatistics object initialized with empty values
118 Retrieves an atomic long counter by key. @param key identifier for the desired counter @return AtomicLong associated with the key or throws an exception if not found
119 Retrieves and returns an atomic long value associated with the given key from the maximum map. @param key identifier for the desired statistic @return AtomicLong object representing the maximum value or throws exception if not found
120 Returns an atomic long representing the minimum value for a given key. @param key identifier for the desired statistic @return AtomicLong with the minimum value or throws exception if not found
121 Retrieves and returns an atomic long gauge by key. @param key identifier for the desired gauge @return AtomicLong associated with the key or throws an exception if not found
122 Retrieves mean statistic by key. @param key identifier for the desired statistic @return MeanStatistic object or throws an exception if not found
123 Returns the duration from the primary tracker. @return Duration object representing the elapsed time
124 Sets the wrapped IOStatistics instance. @param wrapped IOStatistics object to wrap
125 Returns the built dynamic I/O statistics instance. @throws IllegalStateException if already built @return DynamicIOStatistics instance
126 Ensures the FlagSet is mutable before proceeding. Throws an IllegalStateException if the FlagSet is immutable.
127 Converts block data to byte array. Checks if block is closed, then reads from file or stream. @return byte array of the block data @throws IOException on I/O errors during conversion
128 Binds a signal handler to a specific signal. @throws IllegalStateException if a handler is already bound @throws IllegalArgumentException if unable to bind due to JVM settings
129 Checks if the resource is closed. @return true if the resource is closed, false otherwise
130 Converts a Map to a ConcurrentHashMap using a transformation function. @param source input map to convert from @param copyFn function to transform values during conversion @return ConcurrentHashMap with transformed values
131 Tracks duration of an operation and executes it. @param factory optional factory for creating duration trackers @param statistic name of the statistic to track @param input original callable task @return result of the callable execution @throws IOException if IO error occurs during execution
132 Combines two duration tracker factories. @param first local factory for creating local duration trackers @param second global factory for creating global duration trackers @return combined PairedDurationTrackerFactory
133 Retrieves the masked value of the RPC client backoff disconnected counter. @return The masked value as a long integer.
134 Retrieves the masked value of slow RPC calls. @return The masked count as a long integer.
135 Retrieves masked value of RPC requeue calls. @return Masked count as a long integer
136 Clears all IO statistics for the context. Logs the clearing action and resets statistical metrics.
137 Initializes a new IOStatisticsSnapshot instance. Resets statistical data structures to empty ConcurrentHashMap instances.
138 Checks if thread-level I/O statistics are enabled. @return true if enabled, false otherwise
139 Initializes the GZIP decompressor. Sets initial state and resets CRC checksum.
140 Prepares and applies encryption to the input stream. Calculates padding and initializes encryption parameters. @throws IOException if an I/O error occurs during processing
141 Adjusts buffer size to be a multiple of the algorithm's block size. @param codec cryptographic codec used for encryption/decryption @param bufferSize initial buffer size @return adjusted buffer size aligned with algorithm's block size
142 Creates a hard link from source to destination file. Uses native code if available; falls back to Java-based method otherwise. @param src source file @param dst destination file @throws IOException if an I/O error occurs
143 Constructs a new checksum for Gzip files using MD5 and CRC32. @param bytesPerCRC number of bytes per CRC segment @param crcPerBlock number of CRC segments per block @param md5 MD5 hash object for additional verification
144 Default constructor initializes checksum with no segments or blocks.
145 Constructs a new checksum with specified parameters. @param bytesPerCRC number of bytes per CRC segment @param crcPerBlock number of CRC segments per block @param md5 MD5 hash object for additional verification
146 Converts a glob pattern to a regex pattern. @param glob input glob pattern string Handles wildcards and character classes, throws errors on syntax issues.
147 Lists files in a directory. @param f path to the directory @return iterator over FileStatus objects @throws IOException if an I/O error occurs
148 Processes a file path. @param file the file to process @param makeCanonicalPath flag to determine canonical path usage @return processed file path as string @throws IOException if an I/O error occurs
149 Converts numeric mode to file permissions. @param mode numeric representation of permissions @return set of PosixFilePermissions
150 Validates and executes shell commands. Checks for null entries in the command list, throwing an exception if found. @throws IOException if a null entry is detected or execution fails
151 Masks shell commands to ensure they don't exceed Windows command line length. @param commands variable number of shell command strings @throws IOException if the combined command length exceeds the maximum allowed
152 Generates a PowerShell script to kill a process on a remote host. @param processName name of the process to terminate @param host target host where the process runs @return path to the generated PowerShell script file or null if creation fails
153 Calculates checksum size using sum's method. @return Size of the checksum type
154 Calculates the number of checksum chunks needed. @param dataSize size of the data to be checksummed @return number of checksum chunks required
155 Masks checksum value. @param sum Checksum object to process @param checksumSize size of the checksum array @return masked checksum as byte array
156 Updates total bytes read by adding new byte count. @param newBytes amount of bytes to add to bytesRead
157 Updates bytes written by current thread. @param newBytes amount of bytes to add
158 Increments read operations count by a specified amount. @param count number of read operations to add
159 Increments large read operations count. @param count number of operations to add
160 Increments write operation count by specified amount. @param count number of operations to add
161 Updates bytesReadErasureCoded with new bytes. @param newBytes amount of bytes to add
162 Updates byte read statistics based on distance. @param distance network distance of the read operation @param newBytes number of bytes read
163 Adds read operation duration to thread statistics. @param durationMS duration of the read operation in milliseconds
164 Aggregates statistics using a visitor pattern. @param visitor object to process statistics data @return aggregated result from the visitor
165 Constructs a ContentSummary instance using a Builder. @param builder Builder object containing content summary details
166 Initializes checksum options with default type and size.
167 Creates a checksum option with no checksum. @return ChecksumOpt object configured for no checksum
168 Validates file creation flags for Hadoop operations. @param flag set of creation flags to validate @throws HadoopIllegalArgumentException if flags are invalid
169 Validates URI scheme against a supported scheme. @param uri the URI to validate @param supportedScheme the expected scheme @throws HadoopIllegalArgumentException if URI has no scheme or doesn't match
170 Constructs an exception indicating an invalid file system path. @param path the invalid path that caused the error
171 Constructs an exception for invalid file system paths. @param path the invalid file path @param reason optional detailed reason for the error
172 Returns the first non-null element from the array. Throws an exception if all elements are null. @param inputs array of generic type T @return first non-null element of type T
173 Returns the first non-null element from the array. Throws an exception if all elements are null.
174 Validates byte array buffers for encoding. @param buffers array of input byte arrays to validate
175 Validates input buffers for decoding. @param buffers array of ByteBuffers to validate
176 Validates input buffers for decoding. @param buffers array of byte arrays to be validated @throws HadoopIllegalArgumentException if any buffer is null or invalid length
177 Validates ByteBuffer array for encoding. @param buffers array of ByteBuffers to validate
178 Closes the given proxy by invoking its close method. @param proxy the object to be closed @throws HadoopIllegalArgumentException if proxy is null or not closeable
179 Determines checksum options based on user and default configurations. @param defaultOpt default checksum configuration @param userOpt user-specified checksum configuration @param userBytesPerChecksum user-defined bytes per checksum segment @return configured ChecksumOpt object
180 Determines the function mask for a given file system. @param theFsImpl underlying file system implementation @return integer representing the function mask, using default if zero
181 Modifies a URI based on specific conditions. @param uri the original URI to be modified @return the modified or original URI
182 Sets the replication factor of a file. @param src path to the source file @param replication desired replication factor @return true if operation is successful @throws IOException if an I/O error occurs
183 Handles disconnection of the FTP client. @param client FTPClient instance to be disconnected @throws IOException if I/O operations fail
184 Closes the output stream. @throws IOException if an I/O error occurs
185 Deprecated constructor for ContentSummary. Initializes an instance with default values.
186 Deprecated constructor for ContentSummary. Initializes content summary with specified metrics. @param length total length of content @param fileCount number of files @param directoryCount number of directories @param quota storage quota @param spaceConsumed used space @param spaceQuota total available space
187 Calculates time left until token renewal in specified units. @param unit target time unit for conversion @return remaining time before renewal in the specified unit
188 Calculates and sets the next renewal time. @param delay the initial delay in nanoseconds
189 Updates the timestamp of the last activity using the current time.
190 Sleeps for a specified duration, handling interruptions gracefully. @param millis duration to sleep in milliseconds
191 Retrieves the current time in nanoseconds using a monotonic clock. @return Current time in nanoseconds
192 Awaits termination of all thread pools within a specified time limit. @param milliseconds maximum time to wait for termination in milliseconds @return true if all thread pools terminate within the timeout, false otherwise @throws InterruptedException if interrupted while waiting
193 Validates checksums for data blocks. @param sumsBytes buffer containing checksum values @param sumsOffset offset in checksum buffer @param data buffer containing file data @param dataOffset offset in data buffer @param bytesPerSum number of bytes per checksum segment @param file path to the file being checked @return original data buffer if validation passes @throws CompletionException with ChecksumException if validation fails
194 Opens an input stream for reading a file. @param f the path of the file to open @return FSDataInputStream for reading the file @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnresolvedLinkException if a symlink could not be resolved @throws IOException if an I/O error occurs
195 Calculates checksum buffer size for a file. @param file Path to the file @param fileSize Size of the file in bytes @return Calculated buffer size for checksums
196 Returns an FsStatus object with maximum capacity and available space. @param p file system path (not used in this implementation) @return FsStatus object indicating full capacity and no used space
197 Registers file system permission commands with the command factory. @param factory CommandFactory instance to register commands with
198 Registers Find class with command name "-find". @param factory CommandFactory instance to register with
199 Registers Count command with "-count" option. @param factory CommandFactory instance to register the command
200 Deprecated constructor for creating a command format. @param name command name (unused) @param min minimum number of required parameters @param max maximum number of allowed parameters @param possibleOpt array of optional parameter names; null indicates ignoring unknown options
201 Wraps and executes a callable task asynchronously. @param callable the task to execute @return CompletableFuture holding the result or exception
202 Validates mandatory keys against known keys. @param knownKeys collection of all possible keys @param extraErrorText additional error message text @throws IllegalArgumentException if a mandatory key is unknown
203 Retrieves a list of enabled capability names. @return List of strings representing enabled capabilities.
204 Constructs a masked HTTP referrer header for auditing. Handles attribute manipulation and URI construction, logging errors if necessary. @return constructed referrer header or empty string on failure
205 Constructs a new WeakReferenceMap with a value factory and an optional reference lost consumer. @param factory Function to create values for keys @param referenceLost Consumer to handle key loss events (nullable)
206 Checks if an OutputStream supports a specific capability. @param out the OutputStream to check capabilities for @param capability the capability to verify @return true if the OutputStream supports the capability, false otherwise
207 Checks if an InputStream supports a specific capability. @param in the InputStream to check capabilities for @param capability the capability to verify @return true if the InputStream supports the capability, false otherwise
208 Shuts down the executor service gracefully. @param logger Logger for logging shutdown status @param timeout Maximum time to wait for shutdown @param unit Time unit of the timeout
209 Acquires a resource from the pool with blocking enabled. @return acquired resource or null if not available and blocking is disabled
210 Acquires a resource from the pool without blocking. @return acquired resource or null if not available
211 Calculates available resources. @return Total count of available resources
212 Initializes the SingleFilePerBlockCache with given statistics, max block count, and duration tracker. @param prefetchingStatistics object to track prefetching stats @param maxBlocksCount maximum number of blocks in cache (must be > 0) @param trackerFactory factory for creating duration trackers (optional, defaults to stub if null)
213 Constructs a SemaphoredDelegatingExecutor. @param executorDelegatee underlying ExecutorService for task execution @param permitCount maximum number of concurrent tasks @param fair true if semaphore should grant permits in FIFO order @param trackerFactory factory for creating duration trackers, defaults to stub if null
214 Adds an entry to the cache and manages locks. @param entry the entry to be added to the cache
215 Marks the buffer as done and verifies checksum. Throws exception if checksum mismatch occurs.
216 Sets buffer size and returns current builder. @param bufSize desired buffer size in bytes @return FutureDataInputStreamBuilder instance
217 Returns the current builder instance. @return FutureDataInputStreamBuilder object
218 Retrieves value associated with current thread's mask. @return Value of type V or null if not found
219 Retrieves and processes the current thread's mask value. @return Processed value associated with the current thread
220 Updates thread-local value using weak reference. @param newVal new value to set @return updated value or existing one if unchanged
221 Checks and merges a file range if it meets criteria. @param otherOffset starting offset of the other range @param otherEnd ending position of the other range @param other FileRange to be merged @param minSeek minimum seek distance required @param maxSize maximum size allowed for merge @return true if merge is successful, false otherwise
222 Initiates a bulk delete operation for a specified path. @param path root directory path for deletions @return BulkDelete object configured with the given path and file system context
223 Registers the And expression with aliases. @param factory ExpressionFactory instance to register expressions @throws IOException if registration fails
224 Registers Print and Print0 classes with expression factory. @param factory ExpressionFactory instance to register classes with @throws IOException if registration fails
225 Masks expressions by registering them with given names. @param factory ExpressionFactory instance to register masks @throws IOException if registration fails
226 Initializes the Name class with specified case sensitivity. @param caseSensitive true for case-sensitive matching, false otherwise
227 Retrieves a CompressionCodec based on file path. @param file the Path object representing the file @return the corresponding CompressionCodec or null if not found
228 Masks SSL mode in template string. @param mode SSL configuration mode @param template input template string @return masked string with SSL mode replaced
229 Generates a configuration suffix by converting name parts to lowercase and joining them with dots. @return formatted configuration suffix string
230 Combines two results by performing a logical AND on their success and descending states. @param other the Result object to combine with @return a new Result with combined success and descending statuses
231 Inverts success status and maintains recursion flag. @return Result object with negated success status
232 Configures and returns FindOptions for file processing. @return FindOptions object with specified configurations
233 Checks if an expression is masked by name. @param expressionName name of the expression to check @return true if expression is masked, false otherwise
234 Adds a specified number of child expressions to the current expression. @param exprs Deque containing Expressions to be added @param count Number of Expressions to add
235 Processes a specified number of arguments from the deque. @param args deque containing expression arguments @param count number of arguments to process
236 Masks file paths for URI compatibility. @param pathString original file path @return URI object representing the masked path @throws IOException if invalid path is detected
237 Sets the comparator for ordering file paths based on size or time. Uses isOrderSize() to determine sorting criteria.
238 Checks if m1 is not null. @return true if m1 is non-null, false otherwise
239 Masks the command name if necessary. @return masked command name or original name
240 Configures file attributes preservation based on input flag. @param preserve true to preserve timestamps, ownership, and permissions; false otherwise
241 Initializes a new MetricsRecordBuilderImpl. @param parent the parent MetricsCollector @param info metrics information @param rf record filter @param mf metric filter @param acceptable flag indicating if metrics are acceptable
242 Constructs a new ChunkedArrayList with specified chunk capacities. @param initialChunkCapacity the initial capacity of each chunk @param maxChunkSize the maximum size a chunk can grow to
243 Finds the index of the first default ACL entry. @param aclBuilder list of ACL entries to search @return index of the first default entry, or PIVOT_NOT_FOUND if none exists
244 Creates a snapshot of the specified file or directory. @param path target file or directory path @return Path to the created snapshot @throws IOException if snapshot creation fails
245 Checks and registers command-line option. @param option the command-line option to process
246 Initializes a new TableBuilder with headers. @param headers column header data
247 Checks if the table has no data rows. @return true if table is empty, false otherwise
248 Constructs a new Shell instance with default error stream redirection. @param interval time interval in milliseconds
249 Constructs a Token object with specified properties. @param identifier token's unique identifier bytes @param password token's password bytes @param kind token type as Text @param service associated service as Text
250 Constructs an empty Token with default values.
251 Initializes a new Globber instance. @param fc FileContext for file operations @param pathPattern pattern to match files against @param filter optional PathFilter for additional filtering @param resolveSymlinks flag to resolve symbolic links
252 Constructs a detailed error message for file path operations. @return formatted error message string
253 Handles connection retries and exceptions. @param currRetries current retry count @param maxRetries maximum allowed retries @param ex exception encountered during connection @param rand random number generator for backoff @param ugi user group information for privileged actions @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
254 Checks if the given FileSystem is of type VIEWFS. @param fileSystem the FileSystem to check @return true if the FileSystem is of type VIEWFS, false otherwise
255 Masks a file path with specified quotas. @param src source file path to be masked @param namespaceQuota limit on the number of files and directories @param storagespaceQuota limit on storage space usage @throws IOException if an I/O error occurs
256 Masks a file path with specified storage type and quota. @param src source file path to be masked @param type desired storage type for the file @param quota storage quota limit for the file @throws IOException if an I/O error occurs
257 Initializes a multipart uploader builder. @param basePath root directory path for uploads @return MultipartUploaderBuilder instance or null if operation not supported @throws IOException on I/O errors during initialization
258 Lists file statuses from a given path using a default filter. @param f the base directory path @return RemoteIterator of LocatedFileStatus objects @throws FileNotFoundException if the specified path does not exist @throws IOException if an I/O error occurs
259 Lists file statuses from a given path using a default filter. @param f the base directory path @return RemoteIterator of LocatedFileStatus objects @throws IOException if an I/O error occurs
260 Computes checksum for a specified file. @param f Path to the file @return FileChecksum object or null if computation fails
261 Sets an extended attribute on a file with default flags. @param path the file path @param name the attribute name @param value the attribute value @throws IOException if operation fails
262 Opens a file for reading. @param path the file path to open @param parameters configuration options for opening the file @return CompletableFuture containing FSDataInputStream or exception @throws IOException if an I/O error occurs
263 Opens a file for reading with specified parameters. @param path the file path to open @param parameters configuration options for opening the file @return CompletableFuture containing FSDataInputStream or exception @throws IOException if an I/O error occurs
264 Opens a file for reading. @param path file path to open @param parameters file opening parameters @return CompletableFuture containing FSDataInputStream or exception @throws IOException if an I/O error occurs
265 Opens a file for reading. @param pathHandle handle to the file @param parameters open file parameters @return CompletableFuture containing FSDataInputStream or exception @throws IOException if an I/O error occurs
266 Retrieves all storage policies from the default file system. @return Collection of BlockStoragePolicySpi objects @throws IOException if an I/O error occurs while retrieving storage policies
267 Builds a map of file systems from mount points. @param mountPoints list of mount points with associated file systems @return map of mount paths to initialized FileSystem objects @throws RuntimeException if any FileSystem initialization fails
268 Constructs and returns a ResolveResult object for the given parameters. @param resultKind type of resolution result @param resolvedPathStr resolved path string @param targetOfResolvedPathStr target file system URI string @param remainingPath path that remains unresolved @return ResolveResult object or null if initialization fails
269 Returns a new ChildFsGetter instance with the root scheme. @return ChildFsGetter object initialized with the root scheme
270 Constructs an INodeLink with specified path, user info, and file system details. @param pathToNode full path to the node in the filesystem @param aUgi user group information for access control @param targetMergeFs target file system instance @param aTargetDirLinkList list of target directory links
271 Constructs an INodeLink with specified path, user info, and file system creation method. @param pathToNode full path to the node in the filesystem @param aUgi user group information for access control @param createFileSystemMethod function to initialize the target file system @param aTargetDirLink link to the target directory @throws URISyntaxException if the target directory link is invalid
272 Masks destination path by replacing regex groups. @param parsedDestPath Destination path with placeholders @param srcMatcher Matcher object for source path @param regexGroupNameOrIndexStr Group name or index to replace @param groupRepresentationStrSetInDest Set of placeholder names in dest path @return Updated destination path with replaced groups
273 Decrypts data from input buffer to output buffer using a decryptor. @param decryptor the decryptor instance to use for decryption @param inBuffer input buffer containing encrypted data @param outBuffer output buffer to store decrypted data @param padding number of bytes to pad in the output buffer @throws IOException if an I/O error occurs during decryption
274 Validates context is not zero. @param context application-specific context identifier
275 Checks if the working directory znode exists in ZooKeeper. @return true if znode exists, false otherwise @throws IOException on ZooKeeper operation failure @throws InterruptedException if thread is interrupted during execution
276 Retrieves configuration prefix for the default mount table. @return full configuration prefix string
277 Deserializes a string to create a RegexMountPointResolvedDstPathReplaceInterceptor. @param serializedString serialized representation of the interceptor @return interceptor instance or null if deserialization fails
278 Retrieves the readable byte channel from the socket input stream. @return SocketInputStream as ReadableByteChannel
279 Calculates checksum buffer size for a given file. @param file file path @param fileSize file size in bytes @return total buffer size including header and checksums
280 Determines file system path based on OS. @throws IOException if command execution fails or output is invalid
281 Determines disk mount point for a given directory. @throws IOException if specified path does not exist or command execution fails
282 Calculates the percentage of disk space used. @return Integer representing the percentage of used disk space
283 Initializes FSInputChecker with file path and retry settings. Configures checksum verification and data chunk sizes. @param file Hadoop file system path @param numOfRetries maximum number of read retries @param verifyChecksum flag to enable checksum verification @param sum checksum object for data integrity @param chunkSize max size of data chunks to read @param checksumSize size of the checksum
284 Checks if the InputStream can be wrapped with a ByteBuffer. @param stream input stream to check @return true if stream supports ByteBuffer reading, false otherwise
285 Masks the current thread ID in the audit context. @param PARAM_THREAD1 key for storing the masked thread ID
286 Masks the class name of a tool in the global audit context. @param tool the object whose class name is to be masked
287 Masks a configuration key with an integer value. @param key configuration key to mask @param value integer value associated with the key @return masked value of type B
288 Masks a configuration key with a float value. @param key configuration key to mask @param value float value associated with the key @return masked value of type B
289 Masks a configuration key with a long value. @param key configuration key to mask @param value long value associated with the key @return masked value of type B
290 Masks a configuration key with a double value. @param key configuration key to mask @param value double value associated with the key @return masked value of type B
291 Applies a mask to a configuration value. @param key configuration key @param value original configuration value @return masked configuration value as type B
292 Applies mask to configuration value. @param key config key @param value original float value @return masked value as type B
293 Applies a mask to a configuration value. @param key configuration key @param value original configuration value @return masked configuration value as type B
294 Applies a mask to a configuration value. @param key configuration key @param value original configuration value @return masked configuration value as type B
295 Formats a row value at the specified index. @param idx index of the row to format @return formatted row values as an array of strings
296 Masks output file path by delegating to FileSystem. @param fsOutputFile original file system output path @param tmpLocalFile temporary local file path @return the temporary local file path @throws IOException if an I/O error occurs
297 Masks effective permissions based on ACL entries. @param entry ACL entry to apply mask @param permArg permission argument for masking @return masked FsAction representing effective permissions
298 Constructs a new PermissionStatus instance. @param user username associated with the permission @param group group name associated with the permission @param permission file system access rights
299 Parses an ACL string and constructs an AclEntry. @param aclStr the ACL specification string @param includePermission whether to include permission in parsing @return AclEntry instance or throws exception if invalid
300 Generates string representation of ACL entry. @return formatted ACL entry as a string
301 Masks a string by splitting it into an array of substrings. @param str the input string to be masked @param delim the delimiter used for splitting the string @return array of masked substrings or null if no substrings found
302 Splits a string into a collection of substrings using a comma delimiter. @param str the input string to be split @return Collection of substrings resulting from the split operation
303 Initializes PermissionParser with a mode string and patterns. @param modeStr the permission mode string to parse @param symbolic regex pattern for symbolic permissions @param octal regex pattern for octal permissions @throws IllegalArgumentException if modeStr doesn't match any pattern
304 Closes the disk block, releasing resources and handling different states. @throws IOException if an I/O error occurs during closing
305 Checks if ByteBuffer is initialized. Throws FSException if not initialized.
306 Transitions data block to a new state. @param current current state of the data block @param next target state for the data block @throws IllegalStateException if current state does not match expected
307 Masks data in a buffer. @param buffer the byte array containing data @param offset starting index for masking @param length number of bytes to mask @return always returns 0 @throws IOException if I/O error occurs
308 Marks data block as writing and verifies state. @throws IOException if an I/O error occurs during state verification
309 Adds masked attribute to referrer header. @param key attribute name @param value attribute value, must not be null or empty
310 Masks and parses HTTP referrer header into a map of parameters. @param header original referrer header string @return Map containing parsed parameter names and values @throws URISyntaxException if the header is not a valid URI
311 Returns the data size or computes it if not available. @return integer representing data size
312 Resolves a symbolic link to its target path. @param f the path of the symbolic link @return the target path of the symbolic link @throws FileNotFoundException if the file does not exist @throws UnresolvedLinkException if the link cannot be resolved @throws AccessControlException if access is denied @throws IOException for other I/O errors
313 Calls unsupported method on default file system. @throws IOException if there is an I/O error @throws UnsupportedOperationException always thrown as this method is not supported
314 Calls AbstractFileSystem's m1 method to perform file system operations.
315 Retrieves or creates statistics for a given URI. @param uri the input URI for which statistics are needed @return Statistics object associated with the URI's scheme
316 Returns a multipart uploader builder for the specified base path. @param basePath root directory for file uploads @return MultipartUploaderBuilder instance or null if unsupported @throws IOException if an I/O error occurs
317 Retrieves or creates an AllocatorPerContext for a given configuration item. @param contextCfgItemName the name of the configuration item for the context @return AllocatorPerContext instance associated with the configuration item
318 Retrieves the current cached position in the output stream. @return long value representing the cached position
319 Deprecated function to mask data writing. Calls m1 on output stream if not null. @throws IOException if an I/O error occurs during masking
320 Masks a string by splitting it into a collection of unique, trimmed strings. @param str input string to be masked @return Collection of unique, non-empty strings
321 Default constructor initializes with default logger.
322 Constructs a ServiceStateException with a message. @param message the detail message
323 Constructs a ServiceStateException with an exit code, message, and cause. @param exitCode the error code associated with the exception @param message the detail message @param cause the underlying cause of the exception
324 Converts a general exception into a RuntimeException. @param text detail message for the exception @param fault underlying cause of the exception @return RuntimeException or wrapped ServiceStateException
325 Converts a Throwable to a RuntimeException. @param fault the underlying exception @return RuntimeException, either the original or wrapped in ServiceStateException
326 Initializes a new ServiceStateModel with NOTINITED state. @param name the name of the service
327 Checks if transitioning from current state to proposed state is valid. @param current the current service state @param proposed the proposed service state @return true if transition is valid, false otherwise
328 Generates a descriptive string for the service state. @return Concatenated string of state name and its description
329 Constructs a new HadoopUncaughtExceptionHandler with no delegate.
330 Handles a signal by updating count, logging, and notifying handlers. @param s the signal to process
331 Retrieves an IrqHandler based on signal name. @param signalName name of the signal to match @return matching IrqHandler or null if not found
332 Constructs a ServiceLaunchException with an exit code and underlying cause. @param exitCode status code indicating the launch outcome @param cause the Throwable that caused the exception
333 Constructs a ServiceLaunchException with an exit code and message. @param exitCode status code indicating service launch outcome @param message detailed error message for the exception
334 Constructs a ServiceLaunchException with an exit code and formatted message. @param exitCode status code indicating the service launch outcome @param format error message format string @param args arguments for the message format, optionally including a Throwable as the last element
335 Constructs a ServiceLaunchException with an exit code, formatted message, and cause. @param exitCode numeric status code indicating the launch outcome @param cause underlying Throwable that caused the exception @param format message format string @param args arguments for the message format
336 Handles service shutdown by invoking necessary cleanup operations. @return true if service stopped successfully, false otherwise
337 Initializes a new ServiceLauncher with specified service class name. @param serviceClassName fully qualified class name of the service
338 Handles service exit exceptions by logging details and setting exit codes. @param exitException exception containing exit information
339 Initializes command-line options for service configuration.
340 Loads and initializes configuration classes. @return Number of successfully loaded configuration classes
341 Adds a service state change listener. @param l listener to add
342 Adds a service state change listener to the global collection. @param l ServiceStateChangeListener to be added @return true if listener was successfully added, false otherwise
343 Notifies registered listeners of a service state change.
344 Notifies all registered listeners about a service event. Handles exceptions during notification and logs errors.
345 Initializes service configuration. @param conf Configuration object to set @throws Exception if initialization fails
346 Checks and processes an object as a service. @param object the object to check and process @return true if object is a Service, processed; false otherwise
347 Masks exceptions when stopping a service. @param log logger for logging errors @param service the Service instance to stop @return caught exception or null if successful
348 Masks exceptions when stopping a Hadoop service. @param log Logger for logging issues @param service Service instance to stop @return Exception if occurred, otherwise null
349 Checks if InputStream supports ByteBufferPositionedReadable. @param in input stream to check @return true if stream supports ByteBufferPositionedReadable, false otherwise
350 Checks if all required methods are loaded in DynamicWrappedIO. @return true if all necessary methods are available, false otherwise
351 Converts an object to its JSON string representation. @param instance object to be serialized @return JSON string or error message if conversion fails
352 Converts a function that may throw IOExceptions into an unchecked version. @param fun function raising IO exceptions @return unchecked function
353 Converts Java object to JSON string and back. @param instance Java object to convert @return Deserialized Java object of type T @throws IOException if I/O error occurs during conversion
354 Deserializes JSON byte array to Java object. @param bytes JSON data in byte format @return Java object of type T or throws exception if fails @throws IOException if an I/O error occurs during deserialization
355 Constructs a new UTF8 instance by copying another. @param utf8 source UTF8 object to copy from
356 Masks and writes a UTF-8 encoded string to the output stream. @param out DataOutput stream for writing bytes @param s String to encode and write @return Number of bytes written @throws IOException if string is too long or other I/O error occurs
357 Reads and skips specified number of bytes from DataInput stream. @param in DataInput stream to read from @throws IOException if reading fails
358 Updates key and processes it. @param n new value to set in key @throws IOException if an I/O error occurs
359 Sets key to specified position and writes value. @param n new key position @param value Writable object to write @return written Writable object @throws IOException if an I/O error occurs
360 Default constructor initializes an OutputBuffer with a new empty buffer.
361 Retrieves the current buffer content. @return byte array containing buffered data
362 Returns the current count of elements in the buffer. @return integer representing the number of elements
363 Resets and returns the output buffer. @return reference to the current OutputBuffer instance
364 Overrides to compare two WritableComparable objects. @param a first object to compare @param b second object to compare @return comparison result as an integer
365 Compares two byte arrays using a fast comparison method. @param b1 first byte array @param s1 start index in the first array @param l1 length of the segment to compare in the first array @param b2 second byte array @param s2 start index in the second array @param l2 length of the segment to compare in the second array @return result of comparison (-1, 0, or 1)
366 Computes hash code for a byte array segment. @param bytes source byte array @param length number of bytes in the segment @return computed hash code using offset 0
367 Masks and converts four bytes to a float. @param bytes array of bytes to process @param start index where the masking begins @return float result from masked byte conversion
368 Combines two integers from byte array into a single long. @param bytes source byte array @param start index to begin reading integers @return combined long value
369 Masks a byte array to extract an integer value. @param bytes source byte array @param start starting index in the byte array @return masked integer value @throws IOException if reading from the byte array fails
370 Initializes BytesWritable with specified byte array. @param bytes source byte array
371 Returns the raw byte array. @deprecated Use getBytes() instead. @return current byte array representation
372 Returns the masked value using an internal function. @deprecated Use alternative method instead. @return integer result of masking operation
373 Adjusts byte array capacity. @param capacity desired new capacity
374 Retrieves and processes ByteBuffers based on allocation preference. @param direct true for direct buffers, false for regular buffers @return processed result from the buffer tree
375 Submits a readahead request for file data. @param identifier unique request identifier @param fd file descriptor of the target file @param curPos current position in the file @param readaheadLength length of data to prefetch @param maxOffsetToRead maximum offset allowed for reading @param lastReadahead previous readahead request @return ReadaheadRequest object or null if not applicable
376 Appends a key-value pair to the SequenceFile with a null value. @param key key to be written to the SequenceFile @throws IOException if an I/O error occurs during writing
377 Checks if a specific key exists in the SequenceFile. @param key the key to search for @return true if key is found, false otherwise
378 Retrieves the masked value of the current key. @return The masked long value of the key @throws IOException if an I/O error occurs
379 Checks if file/directory has specified access rights. @param path file or directory path @param desiredAccess required access rights @return true if path has the desired access, false otherwise
380 Checks if native code and POSIX functionality are available. @return true if both native code is loaded and POSIX features are enabled, false otherwise
381 Checks if native code and loader are initialized. @return true if both conditions are met, false otherwise
382 Checks if native code is available and not running on SPARC. @return true if native code is loaded and system is not SPARC, false otherwise
383 Unmaps a MappedByteBuffer if unmapping is supported. @param buffer the MappedByteBuffer to be unmapped
384 Frees a ByteBuffer using platform-specific unmapping if supported. @param buffer the ByteBuffer to be freed
385 Writes data from input stream into buffer. @param in DataInput source to read from @param length number of bytes to read @throws IOException if an I/O error occurs
386 Constructs an EnumSetWritable by initializing with given EnumSet and element type. @param value EnumSet to be wrapped @param elementType Class of enum elements
387 Constructs a new DataInputBuffer with a default buffer.
388 Initializes buffer with input data. @param input byte array containing the data @param length number of bytes to use from the input array
389 Initializes buffer with input data. @param input byte array containing the data @param start starting index in the input array @param length number of bytes to use from the input array
390 Returns the current position in the buffer. @return Current position index
391 Returns the length of the data in the buffer. @return integer representing the number of elements in the buffer
392 Initializes ECSchema with provided options. @param allOptions map containing schema configuration options @throws IllegalArgumentException if required options are missing or invalid
393 Constructs an ECSchema with specified codec, data units, and parity units. @param codecName name of the erasure coding codec @param numDataUnits number of data units @param numParityUnits number of parity units
394 Returns the mask value from the erasure coding schema. @return Mask value indicating the schema configuration
395 Returns the mask value based on the ECSchema configuration. @return Mask value representing schema settings
396 Retrieves a specific raw erasure coder factory by codec and coder names. @param codecName the name of the codec @param coderName the name of the coder @return RawErasureCoderFactory object or null if not found
397 Creates and returns an ECBlockGroup from given data and parity blocks. @param dataBlocks array of data blocks @param parityBlocks array of parity blocks @return ECBlockGroup object containing organized data and parity blocks
398 Counts the number of erased blocks in data and parity sets. @return Total count of erased blocks
399 Counts the number of erased blocks in an ECBlock array. @param inputBlocks array of ECBlock objects representing data and parity units @return count of erased blocks
400 Converts an array of ECChunk objects to their ByteBuffer representations. @param chunks array of ECChunk objects @return array of ByteBuffers containing the data from each chunk, or null if the chunk is null
401 Identifies and returns erased blocks from a block group. @param blockGroup the block group to process @return array of erased ECBlock objects
402 Combines data and parity blocks from a block group. @param blockGroup the ECBlockGroup to process @return array of combined ECBlock objects
403 Computes XOR of two values within the field size. @param x first value in the field @param y second value in the field @return result of XOR operation between x and y
404 Computes multiplication result in Galois Field. @param x first element index @param y second element index @return product of elements at indices x and y using multiplication table
405 Computes division result in finite field. @param x dividend index @param y divisor index @return division result using precomputed table
406 Computes power of an element in the field. @param x base element in the field @param n exponent value @return result of x raised to the power of n in the finite field
407 Masks and prints ECChunk data. @param chunk the ECChunk object to process
408 Checks if changes to input data are allowed based on coding options. @return true if changes are allowed, false otherwise
409 Determines if changes to input data are allowed. @return true if changes are allowed, false otherwise
410 Checks if verbose output is enabled. @return true if verbose output is allowed, false otherwise
411 Checks if verbose output is enabled. @return true if verbose output is allowed, false otherwise
412 Masks a portion of the buffer with zeros. @param buffer ByteBuffer to be masked @param len length of the segment to mask @return modified ByteBuffer
413 Masks a portion of the buffer with zeros. @param buffer target byte array to be masked @param offset starting index for masking @param len length of the segment to mask @return modified buffer with specified segment zeroed out
414 Converts ByteBuffer state to ByteArrayEncodingState. Initializes offsets and data arrays for inputs and outputs. @return ByteArrayEncodingState instance with updated buffer states
415 Encodes input data using a mask function and returns a new encoding state. @return ByteBufferEncodingState object with encoded data
416 Creates a new decoding state with masked inputs and initialized outputs. @return ByteBufferDecodingState object for further processing
417 Converts ByteBuffer decoding state to ByteArrayDecodingState. Initializes new input and output buffers with calculated offsets. @return ByteArrayDecodingState object for further processing
418 Masks input array using Galois Field operations. @param a input byte array to be masked @param m total number of elements in the array @param k block size for masking
419 Performs matrix inversion using Galois Field arithmetic. @param inMatrix input matrix to be inverted @param outMatrix resulting inverse matrix @param n size of the square matrix @throws RuntimeException if matrix is not invertible
420 Applies Reed-Solomon encoding mask to inputs. @param gfTables precomputed Galois Field tables @param dataLen length of data to process @param inputs array of input byte arrays @param inputOffsets starting offsets for each input @param outputs array of output byte arrays @param outputOffsets starting offsets for each output
421 Applies Reed-Solomon encoding mask to inputs. @param gfTables GF tables for multiplication @param inputs Array of ByteBuffer inputs @param outputs Array of ByteBuffer outputs
422 Retrieves or creates a GaloisField instance with specified size and polynomial. @param fieldSize size of the finite field @param primitivePolynomial polynomial defining the field properties @return GaloisField object for given parameters
423 Solves Vandermonde system using input arrays and their length. @param x input array @param y input/output array, modified in place
424 Default constructor initializes an ECBlock with no parity and not erased.
425 Updates decompression progress by count. @param count number of bytes processed
426 Reads a byte from the input stream and updates processed count. @param inStream input stream to read from @return next byte or -1 if end of stream @throws IOException if an I/O error occurs
427 Initializes decoding tables for each group. @param alphaSize Size of the alphabet @param nGroups Number of groups
428 Implements Bzip2 sorting and partitioning of data. @param dataShadow Data object containing block and mapping info @param loSt Lower index for sorting range @param hiSt Upper index for sorting range @param dSt Offset for comparison
429 Checks stream and returns decompressed data length. @return Length of decompressed data or throws exception if invalid
430 Checks stream and returns decompressed size. @return Size of decompressed data in bytes or throws exception if invalid
431 Returns total bytes processed after decompression. Calls checkStream to validate input stream. @return Sum of user buffer length and bytes read from stream
432 Resets decompressor state and prepares for new data. @param conserveMemory flag to optimize memory usage
433 Constructs a Bzip2Compressor with default parameters. Initializes using default block size, work factor, and direct buffer size.
434 Checks stream and returns compressed data length. @return Length of compressed data or throws exception if stream is not initialized
435 Compresses data using Bzip2 algorithm. @return amount of compressed data written
436 Constructs a new CompressorStream. @param out underlying output stream to write compressed data
437 Constructs a new Snappy decompressor with default buffer size.
438 Masks and processes input buffer for decompression. @param b byte array containing compressed data @param off starting offset in the byte array @param len length of data to process
439 Determines if masking is necessary for decompression. @return true if no more data to process, false otherwise
440 Decompresses data into the specified buffer. @param b destination buffer @param off offset in buffer to start decompression @param len length of data to decompress @return number of bytes decompressed or 0 if no more data @throws IOException if an I/O error occurs during decompression
441 Initializes the SnappyCompressor with the default buffer size.
442 Compresses input data and writes to output buffer. @param b byte array containing input data @param off offset within the byte array to start compression @param len length of data to compress @return number of bytes written to output buffer @throws IOException if an I/O error occurs during compression
443 Initializes compressor with given configuration. @param conf Hadoop configuration settings
444 Initializes a DecompressorStream with the given input stream. @param in InputStream to read compressed data from
445 Calculates total bytes to consume from user buffer. @return Sum of userBufferBytesToConsume and remaining bytes
446 Prepares the decompressor for a new compression stream. Initializes buffers and resets state.
447 Returns the number of bytes written during compression. Validates the Zstandard stream before returning the count. @return Number of bytes written or throws if stream is invalid
448 Returns the number of bytes read during compression. Validates the Zstandard stream before returning the count. @return Number of bytes processed
449 Constructs an Lz4Decompressor with default buffer size. Initializes decompression utility with predefined settings.
450 Sets input data for decompression. Validates and stores the byte array, then prepares buffers. @param b byte array containing compressed data @param off starting offset in the byte array @param len length of data to use from the byte array
451 Checks if decompression is complete. @return true if no more data to decompress, false otherwise
452 Decompresses data into a byte array. @param b destination buffer @param off offset in the buffer @param len length of data to decompress @return number of bytes read or -1 if end of stream @throws IOException on I/O error
453 Constructs an Lz4Compressor with specified buffer size. @param directBufferSize size of the direct buffers for input/output data
454 Compresses data from input buffer to output buffer. Validates input parameters and handles compression logic. @param b byte array containing the data to compress @param off starting offset in the byte array @param len length of data to compress @return number of bytes written to output buffer or 0 if no data left @throws IOException on I/O errors during compression
455 Configures the compressor with provided settings. @param conf Configuration object containing compression parameters
456 Retrieves a compression codec by name. @param codecName the name of the codec @return CompressionCodec instance or null if not found
457 Returns usage count for a given codec. @param codec the compression codec to query @return integer representing the usage count of the codec
458 Determines the usage mask for a given compression codec. @param codec the CompressionCodec instance to evaluate @return an integer representing the usage count of the codec's decompressor class
459 Returns the appropriate compressor class based on native Zlib support. @param conf Hadoop configuration object (not used in this method) @return ZlibCompressor if native Zlib is available, otherwise BuiltInZlibDeflater
460 Determines the decompressor class based on native Zlib support. @param conf Hadoop configuration object @return ZlibDecompressor if native Zlib is available, else BuiltInZlibInflater
461 Initializes native Zlib library status. Sets `nativeZlibLoaded` based on availability and initialization of native code.
462 Initializes Zlib deflater with given configuration. @param conf Hadoop configuration object
463 Initializes a ZlibCompressor with specified compression settings. @param level desired compression level @param strategy compression strategy to use @param header configuration for windowBits @param directBufferSize size of direct buffers for data handling
464 Initiates compression process. @return length of compressed data
465 Initiates compression process. @return number of bytes compressed
466 Initializes a ZlibDecompressor with given header and buffer size. @param header CompressionHeader containing configuration details @param directBufferSize size of direct buffers for decompression
467 Checks stream and delegates to m2 with stream. @return result of m2(stream) call
468 Checks stream and returns decompression length. @return Length of decompressed data or throws exception if stream is null
469 Computes total buffer length. @return Sum of user buffer length and stream buffer length
470 Initializes decompression process. @throws NullPointerException if stream is null
471 Handles decompression trailer processing. Validates CRC and size, throws IOException on mismatch.
472 Writes an integer to a DataOutput stream using variable-length encoding. @param stream the output stream to write to @param i the integer to be written
473 Reads a variable-length integer from the input stream. @param stream DataInput source for reading bytes @return long value decoded from the stream @throws IOException if an I/O error occurs
474 Retrieves a ByteBuffer from the pool or creates a new one. @param direct true for direct buffers, false for heap buffers @param length desired buffer length @return ByteBuffer instance
475 Inserts a ByteBuffer into the appropriate map. @param buffer the ByteBuffer to be inserted
476 Masks a character at the specified position in UTF-8 encoded text. @param position index of the character to mask @return Unicode code point of the character or -1 if invalid position
477 Masks a string by encoding it to UTF-8 and storing byte data. @param string input text to be masked
478 Masks UTF-8 encoded text data. @param utf8 input byte array containing UTF-8 text @param start starting index in the byte array @param len length of the text to mask
479 Appends UTF-8 encoded bytes to the internal byte array. @param utf8 source byte array containing UTF-8 data @param start starting index in the source byte array @param len number of bytes to append
480 Reads UTF-8 encoded text from input stream. @param in data input source @param len number of bytes to read @throws IOException if reading fails
481 Decodes a UTF-8 encoded byte array to a string. @param utf8 byte array containing UTF-8 encoded data @return decoded string representation of the byte buffer @throws CharacterCodingException if decoding fails
482 Decodes a UTF-8 encoded byte array segment to a string. @param utf8 the byte array containing UTF-8 data @param start the starting index of the segment to decode @param length the number of bytes in the segment @param replace flag indicating whether to replace malformed input @return decoded string representation of the byte array segment @throws CharacterCodingException if decoding fails
483 Validates UTF-8 encoded byte array. @param utf8 byte array containing UTF-8 data @throws MalformedInputException if invalid UTF-8 sequence is found
484 Registers a class with a unique ID. @param clazz Java class to register @throws IndexOutOfBoundsException if adding another class exceeds the limit
485 Initializes the AbstractMapWritable with default class-ID mappings. Registers essential Hadoop Writable classes for serialization.
486 Creates a FileSystemOption. @param fs FileSystem instance @return FileSystemOption object
487 Constructs a Key with specified byte array and weight. @param value byte array representing the key data @param weight associated weight of the key
488 Overrides base class method to manage cleanup and resource preservation. Calls superclass methods for cleanup check and deletion. @throws IOException if an I/O error occurs during file operations
489 Converts a list to an array of specified type. @param list List containing elements to be converted @return Array of elements in the specified type
490 Constructs an InputBuffer with a new default Buffer.
491 Initializes the buffer with input data. @param input byte array containing data @param length number of bytes to use from the input array
492 Initializes the input buffer with provided data. @param input byte array containing data @param start starting index in the input array @param length number of bytes to use from the input array
493 Returns the current position in the input buffer. @return Current position index as an integer
494 Retrieves the current count value from the buffer. @return The count representing the number of elements processed in the buffer.
495 Reads and constructs an MD5 hash from a DataInput. @param in source containing hash data @return MD5Hash object initialized with the input data
496 Computes the MD5 hash of an input stream. @param in InputStream to compute hash from @return MD5Hash object representing the computed hash @throws IOException if an I/O error occurs while reading the stream
497 Computes an MD5 hash for a portion of a byte array. @param data the input byte array @param start starting index in the byte array @param len number of bytes to include in the hash @return MD5Hash object representing the computed hash
498 Computes the MD5 hash of a subset of byte arrays. @param dataArr array of byte arrays to hash @param start starting index for hashing @param len length of the data segment to hash @return MD5Hash object containing the computed hash
499 Returns an integer representation of the MD5 hash's first four bytes. @return Integer value from the quarterDigest method
500 Converts a hexadecimal string to an MD5 hash byte array. @param hex hexadecimal representation of the MD5 hash @throws IllegalArgumentException if the input length is incorrect
501 Deserializes a Protocol Buffers message from a DataInput stream. @param protoClass the class of the Protocol Buffers message @param dataIn input stream containing serialized data @return deserialized Message object @throws IOException if an I/O error occurs during deserialization
502 Synchronizes a file or directory. @param fileToSync the file or directory to synchronize @throws IOException if an I/O error occurs
503 Constructs a BooleanWritable instance with the specified boolean value. @param value the boolean value to initialize the instance with
504 Creates a retry policy based on default and exception-specific policies. @param defaultPolicy the base retry policy for general cases @param exceptionToPolicyMap mapping of exceptions to specific retry policies @return configured RemoteExceptionDependentRetry instance
505 Checks if the queue is empty beyond a specified time threshold. @param time time threshold in milliseconds @return true if queue is empty and exceeded the time threshold, false otherwise
506 Retrieves the current time in milliseconds using System.nanoTime(). @return Current time in milliseconds
507 Creates a retry policy excluding remote and SASL exceptions. @param defaultPolicy the default retry policy for unspecified exceptions @param exceptionToPolicyMap mapping of specific exceptions to their retry policies @return configured RetryPolicy instance
508 Retrieves connection ID for the first proxy. @return ConnectionId associated with the first proxy instance
509 Parses a string to create a MultipleLinearRandomRetry instance. @param s comma-separated string of retry parameters @return MultipleLinearRandomRetry object or null if invalid input
510 Creates an ExceptionDependentRetry policy. @param defaultPolicy the retry policy for general exceptions @param exceptionToPolicyMap specific policies for certain exceptions @return configured RetryPolicy instance
511 Converts a list of IOExceptions to a single exception. @param exceptions List of IOException instances @return Single IOException or null if list is empty or has one element
512 Retrieves a mask value from the data index. @return Integer representing the mask value
513 Retrieves the name of the default compression algorithm. @return Name of the default compression algorithm as a String
514 Reads a variable-length integer from DataInput. @param in source of data input @return decoded integer value @throws IOException if reading fails or number exceeds int range
515 Writes an integer value to DataOutput using variable-length encoding. @param out DataOutput stream to write to @param n integer value to encode and write @throws IOException if an I/O error occurs
516 Delegates call to check if string comparator does not match. @return true if comparator does not match, false otherwise
517 Returns the masked value from TFile metadata. @return long value representing the masked record count
518 Delegates to readerBCF's m1 method. @throws IOException if an I/O error occurs
519 Retrieves the comparator string for sorting records. @return Comparator string used for record sorting
520 Constructs a ByteArray from a BytesWritable object. @param other source BytesWritable object
521 Constructs a ByteArray from a full byte array. @param buffer source byte array
522 Finds the block region index for a given offset. @param offset file position to search for @return index of BlockRegion or -1 if not found
523 Searches for the insertion point of a key in the sorted index. @param key the key to search for @return index where key should be inserted, or -1 if not applicable
524 Searches for the insertion point of a key in the TFile index. @param key the RawComparable key to search for @return index where key should be inserted, or -1 if not applicable
525 Compares this location with another. @param other Location to compare with @return comparison result based on block and record indices
526 Masks key into buffer starting at offset 0. @param buf destination buffer @return length of masked key @throws IOException if an I/O error occurs
527 Masks buffer with data from input stream. @param buf target buffer for data @param offset starting position in buffer @return length of data read into buffer @throws IOException if an I/O error occurs
528 Retrieves the raw size of the block region. @return Raw size in bytes
529 Retrieves and returns the compressed size of the block. @return Compressed size in bytes
530 Retrieves the block's starting position. @return The offset of the block in the file
531 Wraps or returns an OutputStream from a DataOutput. @param out DataOutput to write byte data to @return OutputStream suitable for writing byte data
532 Compares two byte arrays using lexicographical order. @param buffer1 first byte array @param offset1 starting index in buffer1 @param length1 length of buffer1 to compare @param buffer2 second byte array @param offset2 starting index in buffer2 @param length2 length of buffer2 to compare @return negative if buffer1 is less, positive if greater, zero if equal
533 Constructs a new DataOutputBuffer with a default buffer.
534 Retrieves the current buffer content. @return byte array containing buffered data
535 Returns the current length of the data in the buffer. @return number of bytes currently stored in the buffer
536 Writes an integer value to the buffer at a specified offset. @param v integer value to write @param offset position in the buffer where writing starts @throws IOException if I/O error occurs during writing
537 Calculates the distance between two nodes in a network. @param node1 first node in the network @param node2 second node in the network @return distance between the two nodes or Integer.MAX_VALUE if invalid
538 Checks if a node is within a specified scope. @param node the Node to check @param scope the scope path to compare against @return true if node is within scope, false otherwise
539 Masks and splits the path of a given network node. @param node Node instance to process @return Array of masked path segments
540 Masks the current node's path. @return string representation of the masked path using getPath method
541 Removes a node from the network topology. @param node the Node to be removed @throws IllegalArgumentException if the node is an InnerNode
542 Fetches nodes in a specified location. @param loc network location path @return List of Node objects or empty list if no nodes found
543 Masks and retrieves a node from the network. @param loc network location path @return Node object or null if not found
544 Generates a string representation of the network topology. @return detailed description of racks and leaves in the network
545 Determines if two nodes share the same parent. @param node1 first node to compare @param node2 second node to compare @return true if both nodes have the same parent, false otherwise
546 Selects a random node within scope, excluding specified nodes. @param parentNode parent node for selection context @param excludedScopeNode node to exclude from immediate scope @param excludedNodes collection of nodes to exclude @param totalInScopeNodes total nodes in the current scope @param availableNodes number of available nodes to select from @return selected Node or null if none valid
547 Calculates the mask weight between two nodes. @param reader source node @param node target node @return integer weight representing the relationship between nodes
548 Updates the network topology by adding a node to its corresponding rack. Handles null nodes and ensures proper tracking of decommissioned nodes. @param node the node to be added or updated in the network
549 Transfers data from a file channel to the socket output stream. @param fileCh FileChannel source for data transfer @param position Starting position in the file channel @param count Number of bytes to transfer @param waitForWritableTime LongWritable to store total wait time @param transferToTime LongWritable to store total transfer time @throws IOException if an I/O error occurs during transfer
550 Masks a collection of hostnames or IP addresses. @param names collection of hostnames or IP addresses to mask @return list of masked hostnames or original if masking fails
551 Masks and formats local and destination host details. @param destHost destination hostname to mask @param destPort destination port number @param localHost local hostname to mask @return formatted string with masked host details
552 Retrieves IP addresses matching a given subnet. @param subnet CIDR notation of the subnet to match @param returnSubinterfaces if true, includes subinterface addresses @return List of matching InetAddress objects
553 Acquires a specified number of free socket ports. @param numOfPorts number of free ports to acquire (1-25) @return set of acquired port numbers
554 Default constructor for RawScriptBasedMapping.
555 Initializes the CachedDNSToSwitchMapping with a raw mapping. @param rawMapping underlying DNS-to-switch mapping to be cached
556 Constructs a NodeBase from a given network path. Initializes node with name and location, normalizing the path. @param path full network path for the node
557 Initializes a node with a given name and normalized location. @param name node's unique identifier, cannot contain '/' @param location node's network location to be normalized
558 Constructs a new node with specified attributes. @param name unique identifier for the node (cannot contain '/') @param location network location path to be normalized and masked @param parent reference to the parent node in the hierarchy @param level hierarchical level of the node
559 Handles sending callback for a file descriptor. @param caller method name invoking this function @param entries map of tracked entries @param fdSet set of file descriptors @param fd file descriptor to process @return true if FD is closed, false otherwise
560 Checks if the resource is open by querying the reference count. @return true if the resource is open, false otherwise
561 Masks and manages channel reference counts, shutting down resources if closed. @throws IOException on I/O errors during shutdown or interruption handling.
562 Trims idle selectors from the pool. @param now current timestamp in milliseconds
563 Fetches and caches dependencies for a given name. @param name the hostname or IP address to process @return list of dependencies or empty list if none found
564 Sets the read timeout for the socket input. @param timeoutMs timeout duration in milliseconds @throws SocketException if an error occurs while setting the timeout
565 Retrieves IP addresses for a network interface. @param strInterface the name of the network interface @param returnSubinterfaces whether to include subinterface IPs @return array of IP addresses as strings, or cached address if interface not found @throws UnknownHostException if no such interface exists
566 Retrieves IP addresses for a specified network interface. @param strInterface the name of the network interface @param returnSubinterfaces flag to include subinterface addresses @return list of InetAddress objects @throws UnknownHostException if the interface is not found
567 Determines the network location for a given path. @param loc the network location path @return the determined network location or ROOT if not applicable
568 Generates a string representation of the DNS-to-switch mapping. @return A formatted string detailing the mapping or lack thereof
569 Checks if DNS-to-switch mapping is valid and uses a specific strategy. @param mapping the DNSToSwitchMapping instance to validate @return true if mapping is valid and uses the specified strategy, false otherwise
570 Retrieves log statistics for a given recorder. @param recorderName name of the log recorder @param idx index of the statistic to retrieve @return SummaryStatistics object or null if no logs available
571 Prints generic command usage information. @param out PrintStream to output the usage info
572 Checks if the given class or its associated logger uses Log4j. @param clazz Class to check @return true if Log4j is used, false otherwise
573 Constructs a LogThrottlingHelper with default Timer. @param minLogPeriodMs minimum time in ms between logs for the same key @param primaryRecorderName name of the primary log recorder
574 Logs action with throttling. @param recorderName name of the logger @param currentTimeMs current timestamp in milliseconds @param values variable number of log values @return LogAction or DO_NOT_LOG if logging is suppressed
575 Checks if a string requires HTML quoting. @param str the input string to check @return true if any special HTML characters are found, false otherwise
576 Quotes HTML special characters in a string if necessary. @param item the input string to process @return quoted string or original if no quoting needed, null if input is null
577 Registers a Jersey resource package with default parameters. @param packageName name of the Java package containing resources @param pathSpec URL path specification for the resources
578 Registers a servlet with the HTTP server. @param name servlet name (optional) @param pathSpec URL pattern for servlet mapping @param clazz servlet class to register
579 Registers a servlet with the HTTP server without requiring authentication. @param name servlet name (optional) @param pathSpec URL pattern for servlet mapping @param clazz servlet class to register
580 Defines and maps a filter to a servlet context. @param ctx servlet context handler @param name filter name @param classname fully qualified class name of the filter @param parameters configuration parameters for the filter @param urls array of URL patterns to map the filter to
581 Binds a server connector to the specified port. Retries with incremented ports if binding fails. @param listener ServerConnector instance to bind @param port initial port number @throws Exception if binding fails and retries are exhausted
582 Parses X-Frame-Options string to corresponding enum. @param value XFrameOption string representation @return XFrameOption enum or throws exception if invalid
583 Constructs a FileMonitoringTimerTask. @param filePaths list of paths to monitor @param onFileChange action to perform on file change @param onChangeFailure action to handle change failures Initializes monitoring with given file paths and callbacks.
584 Retrieves and validates a non-negative integer property. @param key configuration property name @param defaultValue default value if property is not set @return validated property value @throws MetricsException if the property value is negative
585 Validates required configuration properties. @param key property name to validate @throws MetricsException if the property is missing
586 Throws MetricsException if error is not ignored and stream check fails. @param message error description
587 Throws a MetricsException with an error message if not ignoring errors. @param message description of the exception
588 Parses and converts the roll interval to milliseconds. @return Milliseconds equivalent of the roll interval @throws MetricsException if the interval is invalid or below minimum threshold
589 Throws a MetricsException with detailed error information. @param message descriptive error message @param t the original exception causing the error
590 Processes a metrics record, updating or creating a corresponding Record in the cache. @param mr MetricsRecord to process @param includingTags whether to include tags in the Record @return updated or created Record object
591 Encodes and writes a string to the buffer. @param s string to encode and write
592 Emits a metric to Ganglia with specified parameters. @param groupName name of the metric group @param name unique metric identifier @param type data type of the metric value @param value actual metric value @param gConf Ganglia configuration settings @param gSlope slope indicating metric trend @throws IOException if an I/O error occurs during emission
593 Emits a metric with specified details to Ganglia. Validates and logs metric data before transmission. @param groupName Group name of the metric @param name Metric name @param type Metric type @param value Metric value @param gConf Configuration settings for Ganglia @param gSlope Slope information for the metric @throws IOException if an I/O error occurs during emission
594 Retrieves and removes an element from the queue. Waits if the queue is empty until an element becomes available. @return the dequeued element @throws InterruptedException if interrupted while waiting
595 Constructs a MetricsRecordImpl with given details. @param info MetricsInfo object containing metadata @param timestamp Unix timestamp of the metrics record @param tags List of MetricsTag objects associated with the record @param metrics Iterable of AbstractMetric objects representing the metrics data
596 Records the enqueue time of an RPC. @param enQTime the time taken to enqueue the RPC
597 Records RPC queue time metrics. @param qTime the time taken in the RPC queue
598 Records RPC processing time metrics. @param processingTime duration of the RPC call in milliseconds
599 Records write latency metrics. @param writeLatency the time taken for a write operation in milliseconds
600 Records read latency metrics. @param readLatency the time taken to read a file in nanoseconds
601 Retrieves and initializes MetricsSystem with specified prefix. @param prefix metric name prefix @return configured MetricsSystem object
602 Retrieves the current MetricsSystem implementation. @return instance of MetricsSystem
603 Shuts down the metrics system instance. Calls shutdownInstance to update metric maps and synchronize access.
604 Adds all metrics and tags to the given builder. @param builder MetricsRecordBuilder to populate with metrics and tags @param all flag indicating whether to include all metrics
605 Computes rolling averages for metrics with sufficient samples. @param minSamples minimum number of samples required for averaging @return Map of metric names to their computed average values
606 Retrieves the number of RPC processing time samples. @return Total count of recorded processing time samples
607 Updates rolling averages for all metrics in the current snapshot. Initializes data structures if necessary and ensures proper resource management.
608 Creates and caches metrics information. @param name metric name @param description metric description @return cached MetricsInfo object
609 Creates and caches a metrics tag. @param info metrics information @param value tag value @return cached MetricsTag object
610 Updates metrics with new samples and performs additional processing. @param numSamples number of new samples @param sum sum of the new samples
611 Updates statistics with a new sample value. @param x the new sample value @return updated SampleStat instance
612 Calculates the mean RPC processing time. @return Mean processing time or 0 if no samples exist
613 Retrieves the minimum value from statistical data. @return the smallest number recorded so far
614 Retrieves the maximum value from the statistical data. @return The maximum value recorded so far.
615 Resets metrics by clearing min and max values.
616 Calculates the masked end time for retrying Kerberos authentication. @param tgtEndTime target end time for Kerberos ticket @param now current timestamp @param rp retry policy to determine delay @return masked end time adjusted by retry delay
617 Computes standard deviation using variance. @return standard deviation of samples or 0 if less than 2 samples
618 Merges adjacent samples if their combined error is within allowable limits.
619 Calculates the value for a given quantile. @param quantile target quantile value (0 to 1) @return estimated value at the specified quantile
620 Processes and inserts buffered samples into the sample set. Handles quantile calculations and updates internal state.
621 Returns a list of unique netgroup names. @return List of unique netgroup names
622 Checks if a netgroup is masked. @param group netgroup name to check @return true if netgroup is masked, false otherwise
623 Retrieves SASL properties for a given client address. @param clientAddress IP address of the client @param ingressPort port number (not used in this method) @return Map containing SASL properties
624 Retrieves SASL properties for a given server address. @param serverAddress the network address of the server @param ingressPort the port number (unused in this method) @return a map of SASL properties
625 Masks Kerberos principal name. @param principalName full Kerberos principal name @return masked version of the principal name
626 Retrieves group memberships for a user. @param user the username to fetch groups for @return set of group names associated with the user @throws IOException if no groups are found or an error occurs
627 Clears and refreshes the user-to-groups map cache. Handles exceptions during cache refresh and manages negative caching.
628 Formats and logs a diagnostic message. @param format message format string @param args arguments for the format string
629 Updates a BiMap with entries from shell command output. @param map the BiMap to update @param mapName name of the map being updated @param command shell command to execute @param regex pattern to parse command output lines @param staticMapping static mappings for ID conversion @return true if any entries were updated, false otherwise @throws IOException if an I/O error occurs during execution
630 Constructs a command array for executing a shell script. @param script the File object representing the script to be executed @return an array of strings representing the command and its arguments
631 Handles authentication exceptions by switching bind users. @param e the exception causing the switch
632 Writes data securely using SASL. @param inBuf input buffer containing data to write @param off offset within the buffer @param len length of data to write @throws IOException if an I/O error occurs
633 Initiates SASL negotiation and writes data to the output stream. @throws IOException if an I/O error occurs during negotiation or writing
634 Filters HTTP interactions to prevent CSRF attacks. @param httpInteraction encapsulates request and response details @throws IOException if an I/O error occurs during processing @throws ServletException if a servlet exception occurs during processing
635 Parses and maps group names to IDs. @param groupNames comma-separated group names @param groupIDs corresponding comma-separated group IDs @return set of valid group names @throws PartialGroupNameException if name and ID counts mismatch or invalid mapping
636 Generates a SecretKey from a byte array using HMAC algorithm. @param key byte array for secret key generation @return SecretKey instance for HMAC operations
637 Removes a delegation token from the SQL-based storage system. @param ident TokenIdent object containing token details
638 Resets delegation token sequence numbers and keys. Updates key ID and sequence number, then refreshes key and token stores.
639 Stores a delegation key with its ID. @param key DelegationKey to be stored
640 Removes a delegation key from the SQL-based storage. @param key DelegationKey object to be removed
641 Adds a delegation key to the system. @param key DelegationKey object to be added @throws IOException if the SecretManager is running or if there's an issue with key management
642 Masks and stores a delegation key. @param key DelegationKey to be masked and stored @throws IOException if an I/O error occurs during storage
643 Updates the secret manager and stops the token remover thread. @param secretManager new secret manager instance to use
644 Configures properties for authentication. @param configPrefix prefix for configuration keys @param filterConfig filter configuration object @return configured properties @throws ServletException if configuration fails
645 Retrieves UserGroupInformation using delegation token filter. @return UserGroupInformation object associated with current thread
646 Checks if delegation token operation is valid and not an OPTIONS request. @param request the HttpServletRequest object containing the query string @return true if operation is valid and not an OPTIONS request, false otherwise
647 Checks if the token can be renewed. @return true if renewal is possible, false otherwise @throws IOException if an I/O error occurs during the check
648 Retrieves token renewal period based on configuration. @param conf Hadoop configuration object @return Token renewal period in milliseconds @throws IOException if an I/O error occurs during retrieval @throws InterruptedException if the operation is interrupted
649 Invokes token renewal process. @param conf Configuration object containing settings for renewal @throws IOException if an I/O error occurs during renewal @throws InterruptedException if the operation is interrupted
650 Wraps input stream with SASL if QOP is not "auth". @param in original input stream @return wrapped input stream or original if no wrapping needed
651 Wraps output stream for SASL if necessary. @param out original output stream @return wrapped output stream or original if not needed @throws IOException on I/O errors
652 Reads and processes SASL token from input stream. @return Length of processed buffer or -1 on EOF @throws IOException if I/O error occurs
653 Closes the SASL input stream and releases resources. Resets read positions and marks stream as closed. @throws IOException if an error occurs during closing
654 Constructs an AuthorizationException with a specified cause. @param cause the underlying Throwable that caused this exception
655 Checks if the current login context is a HadoopLoginContext. @return true if it's a HadoopLoginContext, otherwise true (default)
656 Updates the last login time for the user. @param loginTime timestamp of the last login event
657 Constructs a UserGroupInformation object from a Subject. @param subject the security context containing user principals @throws IllegalStateException if the subject lacks a valid User principal
658 Returns the masked function name. @return The masked function name as a string
659 Checks if the user is authenticated using Kerberos. @return true if Kerberos authentication is used, false otherwise
660 Retrieves the authentication method used by the user. @return AuthenticationMethod object representing the user's authentication method
661 Retrieves the real user associated with the current user group. @return UserGroupInformation object representing the real user, or null if not found
662 Returns the masked version of the user's short name. @return Masked user short name as a String
663 Sets the authentication method for the current user. @param authMethod the authentication method to be applied
664 Initializes the ReloadingX509TrustManager with specified type, location, and password. @param type the truststore type (e.g., "JKS", "PKCS12") @param location the path to the truststore file @param password the password for accessing the truststore @throws IOException if there is an I/O error loading the truststore @throws GeneralSecurityException if there is a security issue during initialization
665 Initializes the keystore manager with specified parameters. @param type keystore type (e.g., JKS, PKCS12) @param location path to the keystore file @param storePassword password for the keystore @param keyPassword password for the private keys @throws IOException if there is an I/O error accessing the keystore @throws GeneralSecurityException if there is a security issue loading the keystore
666 Loads resource by name using class loader. @param name resource name @return URL of the resource or null if not found
667 Retrieves an input stream for a specified resource. @param name resource name to load @return InputStream of the resource or null if not found
668 Loads and returns a reader for the specified configuration resource. @param name resource name to load @return Reader object or null if resource not found
669 Creates and configures an SSLEngine for secure communication. @return configured SSLEngine instance @throws GeneralSecurityException if security setup fails @throws IOException if I/O error occurs during configuration
670 Configures SSL settings for a given HttpURLConnection. @param conn the connection to configure @return the configured connection @throws IOException if configuration fails due to security issues
671 Constructs a Configured object with the specified configuration. @param conf Configuration object to be set
672 Checks if shell command execution timed out. @param executor ShellCommandExecutor instance @param user User for whom groups are being fetched @return True if timeout occurred, false otherwise
673 Constructs a shell command string with proper quoting. @return Quoted shell command string
674 Deserializes an authentication method from input stream. @param in DataInput stream containing serialized auth method @return AuthMethod object or null if invalid code
675 Adds a user to the access control list. @param user the username to add Throws IllegalArgumentException if user cannot be added due to wildcard permissions.
676 Adds a group to the access control list. @param group name of the group to add @throws IllegalArgumentException if group cannot be added
677 Removes a user from the access control list. @param user the username to remove Throws IllegalArgumentException if user has wildcard permissions or all permissions are granted.
678 Removes a group from the access control list. @param group name of the group to remove Throws IllegalArgumentException if group has wildcard permissions or all permissions are granted.
679 Generates a comma-separated string of users. @return concatenated string of user identifiers
680 Generates a comma-separated string of group names. @return concatenated string of groups with commas
681 Checks if Kerberos ticket is associated with TGS principal. @param ticket KerberosTicket object to check @return true if ticket's principal is a krbtgt principal, false otherwise
682 Retrieves SASL properties based on client IP address. @param clientAddress the client's IP address @return SASL properties map; uses default if client is not whitelisted
683 Validates that the provided CryptoCodec supports AES/CTR/NoPadding or SM4/CTR/NoPadding. @param codec cryptographic codec to validate @throws UnsupportedCodecException if codec does not meet requirements
684 Returns the current position in the decrypted data stream. @return Current position as a long value @throws IOException if the underlying stream is closed
685 Reads and processes data from the input buffer. @param inBuffer ByteBuffer containing encrypted data @return Number of bytes read and processed @throws IOException if an I/O error occurs
686 Retrieves a CipherSuite by its name. @param name the name of the cipher suite to find @return the matching CipherSuite object @throws IllegalArgumentException if no matching cipher suite is found
687 Checks if a given protocol version is recognized. @param version the protocol version to check @return true if version is recognized, false otherwise
688 Generates a secure random integer with the specified number of bits. @param numBits number of bits for the generated integer @return randomly generated integer within the bit range
689 Creates a KeyProviderCryptoExtension instance. @param keyProvider the underlying key provider @return KeyProviderCryptoExtension object initialized with the appropriate CryptoExtension
690 Fetches the previous version of a key. @param name base key name @return KeyVersion object or null if no previous version exists
691 Generates a cryptographic key of specified size and algorithm. @param size the key size in bits @param algorithm the encryption algorithm to use @return the generated key as a byte array @throws NoSuchAlgorithmException if the algorithm is not available
692 Creates an EncryptedKeyVersion instance for decryption. @param keyName name of the encryption key @param encryptionKeyVersionName version identifier for the encryption key @param encryptedKeyIv initialization vector associated with the key @param encryptedKeyMaterial encrypted key material @return EncryptedKeyVersion object
693 Creates a KeyProviderDelegationTokenExtension instance. @param keyProvider the key provider to manage tokens for @return KeyProviderDelegationTokenExtension object initialized with the given key provider and token extension
694 Masks encryption key version and cleans up SSL factory. @throws IOException on failure to mask key or clean up resources
695 Retrieves read-write lock for a given key. @param keyName unique identifier for the key @return associated ReadWriteLock object
696 Validates and appends a field to the context. @param field the field to validate and append @return the Builder instance for method chaining
697 Adds a key-value pair to the context. Validates keys and values before appending. @param key unique identifier for the value @param value associated with the key @return Builder instance for chaining
698 Adds a key-value pair to the CallerContext if both are valid. @param key the key of the field @param value the value of the field @return the Builder instance for method chaining
699 Creates a successful refresh response. @return RefreshResponse object indicating success
700 Converts a byte array to a UUID string. @param clientId byte array representing the client ID @return UUID string or empty if input is invalid
701 Adds an element to the call queue. @param e element to be added @return true if successful, false otherwise
702 Returns the size of the call queue. @return integer representing the number of queued calls
703 Retrieves all interfaces extending VersionedProtocol. @param protocol the protocol class to process @return array of processed interface classes
704 Retrieves the connection address for an RPC proxy. @param proxy RPC proxy object @return InetSocketAddress of the connection
705 Retrieves the current time in milliseconds using the monotonic clock. @return Current time in milliseconds
706 Retrieves user group information from the current RPC call. @return UserGroupInformation object or null if no valid call exists
707 Generates an array of hash codes for given methods. @param methods array of Method objects to process @return int array containing hash codes or null if input is null
708 Processes refresh requests for a given identifier. @param identifier unique refresh request identifier @param args additional arguments for the refresh operation @return Collection of RefreshResponse objects from handlers
709 Constructs a RemoteException with class name and message. @param className the originating class name @param msg the error message
710 Instantiates and returns an IOException subclass based on lookup types. @param lookupTypes array of Class objects to check for matching exception type @return instantiated IOException or this instance if instantiation fails
711 Instantiates and returns an IOException subclass based on the current class. @return An instance of the specified IOException subclass or the current object if instantiation fails
712 Computes total processing cost based on timing and weights. @param details ProcessingDetails object containing timing information @return Calculated cost as a long value
713 Retrieves the number of dropped connections. @return Count of dropped connections
714 Returns the connection status mask value. @return integer representing connection status
715 Adds an element to the queue at the specified priority level. @param priority the priority of the task @param e the element to be added @throws InterruptedException if interrupted while waiting
716 Adds an element to the queue at the specified priority. @param priority queue priority level @param e element to add @return true if added successfully, false otherwise
717 Configures exception handling by adding terse logging. @param exceptionClass varargs of exception classes to be added
718 Adds exception classes to the suppressed logging category. @param exceptionClass variable number of exception class types to suppress
719 Constructs an UnexpectedServerException with the specified detail message. @param message the detail message (saved for later retrieval by getMessage())
720 Constructs an RpcServerException with the specified detail message. @param message the detail message (saved for later retrieval)
721 Constructs an RpcClientException with the specified detail message. @param message the detail message (which is saved for later retrieval by the getMessage() method)
722 Constructs an UnexpectedServerException with a specified message and underlying cause. @param message detailed error message describing the server exception @param cause the original throwable that caused this exception
723 Constructs an RpcServerException with a specified message and underlying cause. @param message error message describing the RPC exception @param cause the original throwable that caused this exception
724 Constructs an RpcClientException with a specified message and underlying cause. @param message error message describing the RPC exception @param cause the original throwable that caused this exception
725 Updates call costs for a given identity. @param identity the user or system identity @param costDelta the change in call cost to apply
726 Determines the priority level for an RPC based on cost and identity. @param cost the decayed call cost @param identity the user or service identity @return priority level, higher number indicates higher priority
727 Converts ServiceException to IOException. @param se the ServiceException to convert @return an IOException, either from the exception cause or directly from se
728 Executes an IPC call and handles ServiceException by converting it to IOException. @param call the IPC call to execute @return result of the IPC call @throws IOException if a ServiceException occurs during execution
729 Converts a string to a ByteString using caching. @param key input string to be converted @return ByteString representation of the input string
730 Converts byte array to ByteString using ProtobufHelper. @param bytes input byte array @return ByteString representation of the input or empty ByteString if null/empty
731 Sets call ID and retry count for an RPC call. Validates input parameters and updates state. @param cid unique call identifier @param rc number of retries allowed @param externalHandler callback for external calls
732 Retrieves the client's address from the accepted connection. @return InetSocketAddress representing the client's address
733 Retrieves addresses of all active auxiliary listeners. @return Set containing InetSocketAddress objects representing listener addresses
734 Stops and removes a client from the cache. @param client the client to be stopped and removed
735 Overrides default equality check. @param obj object to compare @return true if objects are equal based on call ID and client IDs, false otherwise
736 Initializes a ProtobufWrapperLegacy with a given message. @param message the protobuf message to wrap
737 Handles RPC response writing. @param response ByteArrayOutputStream to write the response @param call RpcCall instance containing call details @param rv Writable return value (not used in this method) @param errorClass Error class name @param error Error message @throws IOException if I/O operations fail
738 Checks if all requests are processed and moves to the next queue. @param requestsLeftVal remaining request count in current queue
739 Marks RPC call as errored and notifies handlers. @param error IOException representing the error encountered
740 Sets RPC response and marks call as complete. @param rpcResponse the response from the RPC call
741 Reads data from the input stream with timeout handling. @return number of bytes read @throws IOException if an I/O error occurs
742 Reads data from the input stream with timeout handling. @param buf destination buffer for read bytes @param off starting offset in the buffer @param len maximum number of bytes to read @return number of bytes read, or -1 if end of stream @throws IOException if an I/O error occurs
743 Retrieves the host's InetAddress from the current RPC call. @return InetAddress of the host or null if no active call
744 Retrieves function mask from current call. @return integer representing the function mask, or 0 if no call is present
745 Retrieves the Quality of Protection for an RPC call. @return QOP string or null if not applicable
746 Retrieves priority level of current RPC call. @return integer representing priority or 0 if no call is present
747 Converts user connection map to JSON string. @return JSON representation of the user-to-connection map or null on error
748 Initializes a MachineList with given host entries. @param hostEntries collection of IP addresses or hostnames @param addressFactory factory for creating InetAddress objects
749 Checks if the given IP address is allowed. @param ipAddress IP address to check @return true if allowed, false otherwise
750 Initializes system info gathering with specified file paths and jiffy length. @param procfsMemFile path to memory info file @param procfsCpuFile path to CPU info file @param procfsStatFile path to stat info file @param procfsNetFile path to network info file @param procfsDisksFile path to disks info file @param jiffyLengthInMillis duration of each CPU time interval in milliseconds
751 Reads and parses memory information from /proc/meminfo. @param readAgain flag to force re-reading if already processed
752 Returns the number of processors in the system. Calls readProcCpuInfoFile to update processor counts. @return Number of processors
753 Returns the number of CPU cores. Calls readProcCpuInfoFile to update core count. @return Number of CPU cores in the system
754 Returns CPU frequency mask after processing system files. @return Long representing CPU frequency
755 Reads and processes CPU time data from `/proc/stat`. Updates CPU time tracking with user, nice, and system times.
756 Returns network bytes read. Calls readProcNetInfoFile to update stats. @return Total bytes read from network interfaces
757 Returns total network bytes written. Calls readProcNetInfoFile to update stats. @return Number of network bytes written
758 Reads and processes disk I/O statistics from /proc filesystem. Updates total bytes read and written for non-loop/ram disks.
759 Retrieves the value associated with a key. @param k the key to search for @return the value if found, otherwise null
760 Removes and returns the value associated with a key. @param k key to remove @return removed value or null if not found
761 Removes an element by key from the set. @param index hash table index @param key key of the element to remove @return removed element or null if not found
762 Configures TransformerFactory to restrict external DTD and stylesheet access. @param transformerFactory instance to secure
763 Converts a size string with a binary prefix to a long value. @param s size string with optional binary prefix (e.g., "1k", "2M") @return long value representing the size in bytes @throws IllegalArgumentException if the input is invalid or exceeds Long range
764 Formats a long value with a binary unit prefix. @param n the long value to format @param unit optional unit string @param decimalPlaces number of decimal places for precision @return formatted string with size and unit
765 Formats a percentage value from a fraction. @param fraction numeric value to convert to percentage @param decimalPlaces number of decimal places for formatting @return formatted percentage string with specified decimal precision
766 Masks a byte array into a hexadecimal string. @param bytes source byte array @param start starting index (inclusive) @param end ending index (exclusive) @return masked hexadecimal string representation of the byte array
767 Masks a double value to two decimal places. @param d double value to format @return formatted string with two decimal places
768 Handles exit exception by logging and terminating the application. @param ee ExitException to be processed @throws ExitException if unable to handle the exit gracefully
769 Handles HaltException by logging and terminating the application. @param he HaltException to be handled @throws HaltException if system halt is disabled or an error occurs
770 Registers a shutdown hook with specified parameters. @param shutdownHook Runnable task to be executed on shutdown @param priority execution priority of the hook @param timeout maximum time allowed for the hook to complete @param unit time unit for the timeout duration
771 Removes a shutdown hook. @param shutdownHook Runnable task to be removed @return true if removal is successful, false otherwise @throws IllegalStateException if shutdown is in progress
772 Registers a shutdown hook with default priority and minimum timeout. @param shutdownHook Runnable task to be executed on shutdown @return true if registration is successful, false otherwise
773 Retrieves an input stream for a specified resource using the current thread's class loader. @param resourceName name of the resource to load @return InputStream for the resource or throws IOException if not found or class loader is null
774 Constructs a LineReader with default buffer size. @param in InputStream to read from
775 Executes shell command after specified interval. Checks timeout, sets process mechanism, and runs command.
776 Creates a named daemon thread factory with normal priority. @param prefix base name for threads in the pool @return ThreadFactory instance configured as daemon with normal priority
777 Ensures hash set does not exceed load factor by resizing. Calls resize if size exceeds threshold and max capacity is not reached.
778 Creates an ArrayList from an iterator. @param elements source of elements to add to the list @return ArrayList containing elements from the iterator
779 Adds all elements from an iterable to a collection. @param addTo collection to add elements to @param elementsToAdd source of elements to add @return true if the collection was modified, false otherwise
780 Creates an ArrayList with a specified initial capacity. @param initialArraySize the desired initial capacity of the list @return a new ArrayList with the given initial capacity
781 Serializes an object to JSON and writes it to an output stream. @param instance the object to serialize @param dataOutputStream the stream to write the serialized data to @throws IOException if serialization or writing fails
782 Initializes an OperationDuration with start and finish times set to current time.
783 Marks the operation as finished by capturing the current time.
784 Converts elapsed time to a Duration object. @return Duration representation of the operation time
785 Returns formatted operation duration. @return string in "MM:SS.mmm" format representing elapsed time
786 Computes the CRC mask for a given length in bytes. @param lengthBytes number of bytes to compute the mask for @param mod generator polynomial for CRC calculation @return computed CRC mask integer
787 Computes combined CRC mask using XOR operation. @param crcA first CRC value @param crcB second CRC value @param monomial polynomial coefficient @param mod modulus for Galois field operations @return combined CRC mask result
788 Masks an integer value into a byte array. @param value integer to mask @return byte array containing the masked value
789 Converts a 4-byte array to a hexadecimal string representing a CRC. @param bytes 4-byte array containing the CRC value @return Hexadecimal string of the CRC @throws IOException if byte array length is not 4
790 Converts byte array to hexadecimal string representation. @param bytes input byte array @return formatted hexadecimal string of the byte array @throws IOException if byte array length is not divisible by 4
791 Unpacks JAR entries matching a regex to a directory. @param inputStream source JAR input stream @param toDir target directory for unpacking @param unpackRegex regex pattern for entry names to unpack @throws IOException if I/O operations fail
792 Extracts files from a JAR to a directory based on regex pattern. @param jarFile source JAR file @param toDir target directory for extracted files @param unpackRegex regex pattern for filtering entries to extract @throws IOException if extraction fails
793 Finds the nth occurrence of a specified byte within a UTF-8 encoded byte array. @param utf the byte array containing UTF-8 encoded data @param start the starting index for the search @param length the number of bytes to consider from the start index @param b the byte to find @param n the occurrence number to find @return the index of the nth occurrence or -1 if not found
794 Stores a key-value pair using weak reference. @param key unique identifier for the value @param value object to be stored @return retrieved object from weak reference or null if not found
795 Retrieves value associated with key using weak reference. @param key unique identifier for the value @return referenced object or null if not found
796 Checks if a value exists for the given key. @param key the key to check @return true if a non-null value is associated with the key, false otherwise
797 Stores and retrieves a value using weak references. @param key unique identifier for the value @return strongly referenced value associated with the key
798 Cleans up null references and counts lost entries. @return number of cleaned entries
799 Creates and returns a snapshot of current statistics. Resets counters after snapshotting. @return SuppressedSnapshot containing stats
800 Masks time difference between finish and start times. @param finishTime end time in milliseconds @param startTime start time in milliseconds @return formatted time string (e.g., "1hrs, 30mins, 45sec")
801 Masks and maps string pairs. @param str input string to be processed @return map of masked key-value pairs or empty map if invalid
802 Splits a string by separator, handling escaped characters. @param str input string to split @param escapeChar character used for escaping @param separator character to split on @return array of split strings or null if input is null
803 Masks characters in a string by escaping them with a specified character. @param str input string to process @param escapeChar the character used for escaping @param charsToEscape array of characters to be escaped @return masked string with escaped characters or null if input is null
804 Masks characters in a string based on given criteria. @param str input string to process @param escapeChar character used for escaping @param charsToEscape array of characters that need to be escaped @return masked string or throws exception if illegal escaping is detected
805 Masks version information. @return Masked version string or "Unknown"
806 Retrieves masked version information. @return Masked version string or "Unknown" if not found
807 Returns masked version information. @return Masked version string or empty if unavailable
808 Retrieves formatted version information. @return String containing version details
809 Masks and returns user information from version details. @return Formatted string with masked user details
810 Masks version information URL. @return Masked URL string or "Unknown"
811 Masks source checksum. @return masked checksum string or "Unknown"
812 Returns masked version information. @return Masked version string from common version info
813 Retrieves masked version information. @return Masked version string or default if not found
814 Initializes a new FilteringRemoteIterator with a given RemoteIterator and a filter function. @param source the RemoteIterator to wrap and manage @param filter the function to apply for filtering elements
815 Constructs a new HaltableRemoteIterator. @param source the RemoteIterator to wrap and manage @param continueWork condition to determine if iteration should continue
816 Checks if there is a next valid element available. @return true if a valid element exists, false otherwise @throws IOException if an I/O error occurs during retrieval
817 Initializes a resource wrapper with automatic closure. @param o the object to manage
818 Executes a callable task asynchronously using a provided executor. @param executor the executor to run the task @param call the callable task to be executed @return CompletableFuture representing the task's result
819 Initializes a new instance with a callable constructor. @param constructor callable that may raise I/O exceptions to create the reference value
820 Creates a LazyAtomicReference with the given supplier. @param supplier provides the value to be lazily initialized @return LazyAtomicReference instance wrapping the supplier
821 Ensures reference is open and retrieves its value. @throws IOException if an I/O error occurs or reference is closed
822 Retrieves or initializes the lazily initialized value. @return the value of the atomic reference @throws IOException if an I/O error occurs during initialization
823 Executes callable task and handles IOExceptions. @param call functional interface with IO operations @return result of the callable task
824 Converts CallableRaisingIOE to Supplier by using unchecked method. @param call callable that may throw IOException @return Supplier wrapping the callable's result
825 Creates a new Builder instance with the given RemoteIterator. @param items RemoteIterator containing items to process @return Builder instance for managing asynchronous tasks
826 Consolidates exceptions into a single exception and throws it. @param exceptions collection of exceptions to process @throws E the consolidated exception
827 Initializes the Builder with an Iterable of items. Converts Iterable to RemoteIterator and passes it to the primary constructor. @param items source data collection
828 Configures exception handling behavior. @return this Builder instance with exceptions suppressed
829 Handles ExecutionException by unwrapping and rethrowing as IOException. @param e the ExecutionException to handle @throws IOException if an error occurs during exception handling
830 Handles CompletionException by rethrowing as IOException. @param e original CompletionException @throws IOException if handling fails
831 Configures an object using reflection if it implements JobConfigurable. @param theObject object to be configured @param conf configuration settings
832 Retrieves a Class object by name, throwing an exception if not found. @param name fully qualified class name @return Class object @throws ClassNotFoundException if the class is not found
833 Generates a thread dump and prints it to the specified stream. @param stream output stream for the thread dump @param title optional title for the thread dump
834 Constructs a new Configuration instance. @param loadDefaults flag to determine if default settings should be loaded
835 Sets HTTP response with JSON error details. @param response HttpServletResponse object to set the error response on @param status HTTP status code for the response @param ex Throwable exception to process and include in the response
836 Generates a masked HTTP error response. @param status the HTTP status code @param ex the throwable exception @return a JSON-formatted error response
837 Initializes CRC32C checksum to its default state.
838 Iterates over and modifies elements in the collection. Uses iterator to traverse and update elements.
839 Masks user input for shell commands. @param user the username to be processed @return array of command parts with masked user input
840 Constructs command to get user groups. @param user username for which to fetch group information @return array of strings representing the constructed command
841 Returns command arguments for listing files. @return Array of command arguments based on OS
842 Constructs command for setting file permissions. @param perm permission string to apply @param recursive true if applied recursively @return array of command arguments
843 Constructs command to change file ownership. @param owner user or group name for ownership @return Array of command parts suitable for execution
844 Constructs command for creating a symbolic link. @param target path to the target file or directory @param link path where the symlink should be created @return array of command arguments
845 Constructs command to mask a file link. @param link path of the file link to be masked @return array of command components, platform-specific
846 Constructs shell command for process management. @param code signal code for kill operation @param pid process ID to manage @return array of strings representing the shell command
847 Constructs a file object with OS-specific script extension. @param parent directory where the file is located @param basename base name of the script @return File object with appropriate extension
848 Determines Hadoop home directory from system property or environment variable. @return File object representing the Hadoop home directory @throws FileNotFoundException if Hadoop home is not found
849 Retrieves the Hadoop home directory file. Throws FileNotFoundException if initialization failed. @return File object representing Hadoop home directory
850 Locates an executable file within the Hadoop bin directory. @param hadoopHomeDir root directory of Hadoop installation @param executable name of the executable file to find @return File object representing the executable if found @throws FileNotFoundException if any directory or file is not found or accessible
851 Returns the WinUtils file or throws a FileNotFoundException. @return File object for WinUtils @throws FileNotFoundException if WinUtils retrieval fails
852 Terminates all child shells and clears the list. Synchronizes access to ensure thread safety.
853 Initiates shutdown of a thread with a default timeout. @param thread the thread to be shut down @return result of the shutdown attempt
854 Initiates shutdown of an ExecutorService with default timeout. @param service the ExecutorService to shut down @return true if shutdown successful, false otherwise
855 Creates and initializes a new progress phase. @return initialized Progress object representing a new phase
856 Creates and adds a new progress phase with specified weightage. @param weightage the weight of the new phase @return the newly created Progress instance
857 Calculates overall task progress. @return float representing total progress percentage
858 Marks task as complete and updates parent progress. @param none @return void
859 Retrieves and decodes data from a ZooKeeper path. @param path ZooKeeper node path @return Decoded string or null if path does not exist @throws Exception if an error occurs during retrieval
860 Retrieves and decodes data from a ZooKeeper node. @param path the path to the node @param stat optional Stat object to store node metadata @return decoded string from node data or null if not found
861 Updates node data in ZooKeeper. @param path ZooKeeper node path @param data Data to update the node with @param version Expected node version for atomic update @throws Exception if operation fails
862 Creates a persistent node in ZooKeeper if it doesn't exist. @param path ZooKeeper path for the new node @param zkAcl Access control list for the node @return true if node was created, false if it already exists
863 Checks node existence and performs operations if it exists. @param path ZooKeeper path to check @return true if operations succeed, false otherwise
864 Performs a masked operation on a ZooKeeper node. @param path the path of the node to operate on @param fencingACL list of ACLs for transaction node @param fencingNodePath path to the transaction node in ZooKeeper @throws Exception if operation fails
865 Registers a program with the driver. @param name unique identifier for the program @param mainClass class containing the main method @param description brief description of the program @throws Throwable if registration fails
866 Binds a method by name and argument types. @param targetClass the class containing the method @param methodName the name of the method @param argClasses the parameter types of the method @return this Builder instance for fluent chaining
867 Binds a method by name and argument types. @param targetClass the class containing the method @param methodName the name of the method @param argClasses the parameter types of the method @return the Builder instance for fluent chaining
868 Creates an unbound method for dynamic invocation. @param name method name to be bound @return UnboundMethod object configured for dynamic calls
869 Checks if none of the provided unbound methods are no-operations. @param methods variable number of DynMethods.UnboundMethod objects @return true if all methods are not no-ops, false otherwise
870 Determines if an unbound method is not a no-operation. @param method the unbound method to check @return true if the method is not a no-op, false otherwise
871 Binds an unbound method to a specific receiver. @param receiver target object to bind the method to @return BoundMethod representing the bound method
872 Creates a StaticMethod instance. Ensures the method is static before creation. @return StaticMethod object representing the method
873 Finds the JAR file containing a class. @param clazz Class to find the JAR for @return Path to the JAR file or null if not found
874 Masks class information by finding its containing resource. @param clazz Class to process @return Masked path of the resource or null if not found
875 Writes checksum to output stream. @param out DataOutputStream for writing checksum @param reset flag to reset checksum after writing @return size of written checksum or 0 if not applicable
876 Writes checksum to buffer. @param buf byte array to write checksum into @param offset starting position in the buffer @param reset flag to reset checksum after writing @return size of checksum written or 0 if invalid type @throws IOException if checksum type is unknown
877 Creates a rate limiting configuration based on capacity. @param capacity maximum number of requests allowed, or 0 for unlimited access @return RateLimiting instance with specified restrictions
878 Registers UNIX signal handlers for TERM, HUP, INT. @param log logger instance for logging registration events @throws IllegalStateException if signal handlers are already registered
879 Initializes a LightWeightGSet with a specified array length. @param recommended_length initial suggested array length
880 Updates included and excluded hosts. @param includes set of host names to include @param excludes set of host names to exclude
881 Updates host details with included and excluded hosts. @param includeHosts set to store unique included host names @param excludeHosts map to track excluded items and their counts
882 Computes Jenkins hash for a given byte array. @param key byte array to hash @param nbytes number of bytes in the array @param initval initial hash value @return computed hash value
883 Retrieves a Hash instance based on the specified type. @param type hash algorithm identifier (JENKINS_HASH or MURMUR_HASH) @return Hash instance for the given type, or null if invalid type
884 Protected constructor to prevent instantiation from outside the class.
885 Protected constructor to prevent instantiation from outside the class.
886 Default constructor initializes a new instance of DynamicBloomFilter.
887 Generates multiple hash values for a given key. @param k input key object @return array of hash values
888 Default constructor initializes an AutoCloseableLock with a new ReentrantLock.
889 Implements AutoCloseable interface to manage lock release. @param none @return none
890 Logs an error message and prints stack trace. @param e Throwable object to log @param text format string for the error message @param args arguments to be formatted into the message
891 Logs an error message with code and description. @param errorcode numeric error identifier @param text detailed error description
892 Logs class loading details. @param name class name @param clazz Class object to load
893 Retrieves current GC data. @return cloned instance of GcData with latest metrics
894 Constructs a new PureJavaCrc32 instance and resets the checksum.
895 Executes all registered shutdown hooks with timeout handling. @return Number of hooks that timed out during execution
896 Adds an element to the priority queue. @param element the new element to insert
897 Removes and returns the top element of the priority queue. @return The highest priority element or null if the queue is empty
898 Masks elements in the priority queue. Calls downHeap to maintain heap property after masking operation.
899 Creates and populates a new HashSet from an iterator. @param elements iterator providing the elements to add @return populated HashSet instance
900 Creates a HashSet with calculated capacity. @param expectedSize estimated number of elements in the set @return HashSet with optimized capacity for performance
901 Sets the current value to a new value if it's greater than or equal to the current value. @param newValue the new value to set @throws IllegalStateException if newValue is less than the current value
902 Constructs and returns a new TableListing instance. @return TableListing object configured with specified columns, header visibility, and text wrapping width
903 Checks if a configuration key is deprecated. @param key configuration property key to check @return true if the key is deprecated, false otherwise
904 Checks if a configuration key is deprecated and accessed. @param name the configuration key to check @return true if the key is deprecated and has been accessed, else false
905 Reloads all configurations by resetting and processing each.
906 Masks a configuration property by name. @param name the property name to mask
907 Converts a time value from one unit to another. @param name configuration property name @param vStr string representation of the time value @param defaultUnit default time unit if parsing fails @param returnUnit target time unit for conversion @return converted time value in the target unit
908 Retrieves and aggregates properties by a list of tags. @param tagList list of configuration tags @return aggregated Properties object containing settings for all provided tags
909 Masks sensitive configuration values. @param key configuration key @param value configuration value to mask @return redacted value if key is sensitive, otherwise original value
910 Masks sensitive configuration values. @param key config key to check for sensitivity @param value original config value @return redacted value if key is sensitive, else original value
911 Initiates a new reconfiguration task. @throws IOException if server is stopped or another task is running
912 Constructs a new DeprecationContext by merging another context and deltas. @param other the existing DeprecationContext to merge from @param deltas array of DeprecationDelta objects representing changes
913 Constructs a ReconfigurationException with detailed property change info. @param property name of the property being changed @param newVal new value of the property @param oldVal old value of the property @param cause underlying exception causing this one
914 Constructs a ReconfigurationException with detailed error message. @param property name of the property being changed @param newVal new value of the property @param oldVal old value of the property
915 Determines if manual HA state management is allowed. @param target the service target for HA management @return true if manual management is permitted, false otherwise
916 Executes a command on an SSH session and returns the exit status. @param session established SSH session @param cmd command to execute remotely @return exit status of the command execution @throws JSchException if there's an issue with the SSH session @throws InterruptedException if the thread is interrupted @throws IOException if there's an I/O error during execution
917 Checks if the local service can be a failover target. Throws ServiceFailedException if not healthy or in observer state.
918 Reads data from a file range into a ByteBuffer using a specified operation. @param range the FileRange object defining the read boundaries @param buffer the ByteBuffer to store the read data @param operation the function to perform the actual reading @throws IOException if an I/O error occurs during reading
919 Validates and sorts file ranges, ensuring they are disjoint. @param input list of FileRange objects to process @param fileLength optional total file length for validation @return sorted list of valid FileRange objects @throws EOFException if any range exceeds file bounds or overlaps
920 Constructs a new BlockManager with specified block data. @param blockData the block data to manage
921 Validates and processes buffer data. @param data BufferData object to be processed
922 Releases a resource back to the pool. @param item the resource to release
923 Validates and checks if the current buffer state matches any of the provided states. Throws an exception if the state does not match. @param states variable number of State objects to compare against
924 Validates that a string argument is neither null nor empty. @param arg the string to validate @param argName name of the argument for error messages
925 Validates a collection's size. @param collection the collection to check @param numElements expected number of elements @param argName name of the argument for error messages
926 Validates a file path for existence and nullity. @param path the Path object to validate @param argName name of the argument for error messages
927 Initializes a resource pool with a specified size. @param size maximum number of resources in the pool
928 Initializes the BufferPool with specified size and buffer size. Validates input sizes, sets up buffer allocation, and initializes statistics tracking. @param size number of buffers in the pool @param bufferSize size of each buffer @param prefetchingStatistics object to track prefetching operations
929 Validates and masks a block number. @param blockNumber the block identifier to validate
930 Initializes a new BufferData instance. @param blockNumber the block number for the data buffer @param buffer the ByteBuffer containing the data
931 Initializes a Retryer with specified delays and intervals. Validates input parameters to ensure they are positive and properly ordered. @param perRetryDelay delay between retries in milliseconds @param maxDelay maximum retry delay in milliseconds @param statusUpdateInterval interval for updating retry status in milliseconds
932 Validates an array is not null and has elements. @param array the array to validate @param argName name of the argument for error messages
933 Validates byte array is not null or empty. @param array byte array to validate @param argName name of the argument for error messages
934 Validates an array and its length. @param array short array to validate @param argName name of the array argument for error messages
935 Validates an integer array. @param array array to validate @param argName name of the array argument for error messages
936 Validates that an array is not null and has elements. @param array the array to validate @param argName name of the argument for error messages
937 Validates an iterable is not null or empty. @param iter the iterable to validate @param argName name of the argument for error messages
938 Deletes specified paths in batches. @param paths collection of file/directory paths to delete @return list of entries with deleted path and status message
939 Applies a function to a serialized IOStatisticsSnapshot. @param source the serialized snapshot @param fun the function to apply @return result of applying the function
940 Constructs a FlagSet with specified enum class and prefix. @param enumClass the enum type representing the flags @param prefix prefix for mapping enum names to lowercase strings @param flags initial set of flags, can be null
941 Closes the file system and updates cache. Logs closure details and ensures cache is updated on exit. @throws IOException if an I/O error occurs during close operations
942 Compares current file status with another. @param o Object to compare, must be a FileStatus instance @return comparison result as an integer
943 Overrides default comparison method. @param o FileStatus object to compare @return comparison result as an integer
944 Converts FileStatus array to Paths, adding a specified path. @param stats array of FileStatus objects @param path additional Path to include @return array of Path objects or single-element array with given path if stats is null
945 Masks the capability for a given HAR path. @param path file system path in HAR format @param capability associated capability string @return true if read-only, false otherwise
946 Creates a JsonSerialization instance for IOStatisticsSnapshot. @return JsonSerialization object configured for IOStatisticsSnapshot serialization
947 Creates and returns storage statistics from given parameters. @param name unique identifier for the storage statistics @param scheme storage scheme type @param source IO statistics to be encapsulated @return StorageStatistics object initialized with provided data
948 Creates an empty storage statistics object. @return EmptyStorageStatistics instance initialized with specific name
949 Constructs a new PathIsDirectoryException with specified file path. @param path the file path where the exception occurred
950 Constructs a PathIsNotDirectoryException. @param path the file path that is not a directory
951 Constructs a new PathOperationException with specified file path. @param path the file path where the exception occurred
952 Constructs an exception indicating a non-empty directory. @param path the file path of the non-empty directory
953 Sets buffer size and returns builder instance. @param bufSize buffer size to set @return reference to this builder instance
954 Sets the replication factor for the output stream. @param replica desired replication factor @return reference to this builder instance
955 Sets block size and returns builder instance. @param blkSize desired block size in bytes @return reference to this builder instance
956 Enables recursive mode and returns the builder instance.
957 Sets creation flag and returns builder instance. @return reference to this builder instance
958 Sets the overwrite flag for file creation. @param overwrite true to overwrite existing files, false otherwise @return reference to this builder instance
959 Sets append flag and returns builder instance. @return reference to this builder instance
960 Masks host strings using weak interning. @param hosts array of original host addresses
961 Masks host strings using weak interning. @param cachedHosts array of host strings to be masked
962 Masks block host names using weak interning. @param names array of original host names
963 Masks the provided array of topology paths using weak interning. @param topologyPaths array of file system paths to be masked
964 Checks if a file exists. @param f the path to the file @return true if the file exists and is not a directory or symlink, false otherwise
965 Masks an IOException with a custom message if not already masked. @param path file or directory path being processed @param methodName name of the method where the exception occurred @param exception original IOException to mask @return masked IOException or original if already masked
966 Seeks to the specified position and synchronizes with data block. @param position target position to seek @throws IOException if an I/O error occurs
967 Seeks to the first position in the MapFile. @throws IOException if an I/O error occurs during seeking
968 Registers expression classes with the given factory. @param factory ExpressionFactory instance to register expressions with
969 Registers various file system commands with the given factory. @param factory CommandFactory instance to register commands
970 Expands file pattern with curly braces into a list of paths. @param filePattern input file pattern containing curly braces @return List of fully resolved paths or null if no unclosed brace found
971 Retrieves filtered list of file statuses. @param f directory path to query @param filter criteria for file inclusion @return array of matching FileStatus objects
972 Filters and lists file statuses from given paths. @param files array of file paths to process @param filter PathFilter for file inclusion criteria @return array of filtered FileStatus objects @throws FileNotFoundException if a specified file does not exist @throws IOException if an I/O error occurs
973 Renews a delegation token for a specified URL. @param url target URL @param token Delegation token to renew @param renewer user allowed to renew the token @return renewed delegation token @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
974 Renews delegation token for a given URL. @param url target URL for authentication @param token token containing delegation information @return timestamp of the token's expiration @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
975 Cancels a delegation token at the specified URL. @param url target URL to cancel the token at @param token delegation token to be canceled @throws IOException if an I/O error occurs during cancellation
976 Initializes FileEncryptionInfo with encryption details. Validates non-null parameters and checks IV length compatibility.
977 Sets file permissions for the upload. @param perm file system permissions @return this builder instance for chaining
978 Sets checksum option and validates it. @param chksumOpt checksum option to be set @return this builder instance for method chaining
979 Wraps an underlying IOException with additional context. @param cause original IOException to wrap
980 Constructs an FsLinkResolution instance. @param fn function to resolve file system links
981 Constructs a GlobBuilder with the specified FileContext. @param fc FileContext instance to be used for file system operations
982 Constructs a new GlobBuilder instance. @param fs FileSystem object to use for file operations, cannot be null
983 Sets file permissions. @param perm file permissions to set @return reference to this builder instance
984 Sets progress callback and returns builder instance. @param prog progress callback object @return reference to this builder instance
985 Sets checksum option and returns builder instance. @param chksumOpt checksum option to configure @return reference to this builder instance
986 Masks data in a byte array. @param b byte array to mask @param off starting offset @param len length of bytes to mask @throws IOException if any I/O error occurs
987 Checks if one string contains another. @param s1 main string to search within @param s2 substring to find in s1 @return true if s1 contains s2, false otherwise
988 Checks if the provided context is the current ZooKeeper client. @param ctx context object to validate @return true if context is stale, false otherwise
989 Retrieves or creates statistics for a file system by scheme. @param scheme naming convention for the statistics @return Statistics object associated with the given scheme
990 Copies data between streams with optional closing. @param in source InputStream @param out destination OutputStream @param buffSize size of the buffer used for copying @param close flag to indicate if streams should be closed after operation @throws IOException if an I/O error occurs
991 Copies data from input stream to output stream with a specified count. @param in InputStream source @param out OutputStream destination @param count number of bytes to copy @param close whether to close streams after operation @throws IOException if an I/O error occurs
992 Checks and creates a file in the given directory with specified iterations. @param dir target directory for file creation @throws DiskErrorException if directory check fails or all attempts fail
993 Checks if any non-transient storage type has a quota set. @return true if at least one non-transient storage type has a positive quota, false otherwise
994 Checks if any non-transient storage types have consumed space. @return true if any type has consumed space, false otherwise
995 Compares current file status with another object. @param o object to compare @return true if equal, false otherwise
996 Overrides the default hashCode implementation. @return Hash code based on the file or directory path
997 Resets sample count and sum to zero.
998 Copies sample count and sum from another MeanStatistic instance. @param other source MeanStatistic to copy data from
999 Converts IOStatistics to a formatted string. @param statistics IOStatistics object containing various I/O metrics @return Formatted string representation of the statistics or empty string if null
1000 Converts and logs formatted map entries. @param sb StringBuilder to append to @param type type of the map entries @param map map containing key-value pairs @param isEmpty predicate to determine empty values
1001 Creates a duration tracker with default count of 1. @param key identifier for the duration tracking @return DurationTracker instance using stub implementation
1002 Generates an iterator for storage IO statistics. @return Iterator of LongStatistic objects representing IO metrics
1003 Updates I/O statistics for a given operation. @param prefix identifier prefix for the statistic @param durationMillis duration of the operation in milliseconds
1004 Builds and returns dynamic I/O statistics. @return IOStatistics object containing collected metrics
1005 Registers an evaluator function for a given key. @param key unique identifier for the evaluator @param eval function to evaluate data associated with the key @return DynamicIOStatisticsBuilder instance
1006 Adds a gauge function to evaluate I/O statistics. @param key unique identifier for the metric @param eval function to convert input string to long value @return updated DynamicIOStatisticsBuilder instance
1007 Registers a function to track minimum long values for a given metric. @param key unique identifier for the metric @param eval function to compute the metric value from input data @return DynamicIOStatisticsBuilder instance for method chaining
1008 Registers an evaluator function to track maximum values for a given key. @param key unique identifier for the metric @param eval function to evaluate and compute the maximum value @return DynamicIOStatisticsBuilder instance
1009 Registers a function to calculate mean statistics for a given key. @param key unique identifier for the statistic @param eval function to compute mean values @return DynamicIOStatisticsBuilder instance
1010 Registers an interruption handler for a specific signal. @param signalName name of the signal to handle
1011 Generates a snapshot of evaluators using a transformation function. @return ConcurrentHashMap of evaluators with transformed values
1012 Creates a snapshot of the input map. @param source original map to be snapshotted @return ConcurrentHashMap with unchanged values from the source map
1013 Returns a new instance of IOStatisticsSnapshot. @return An empty IOStatisticsSnapshot object
1014 Constructs an IOStatisticsContextImpl instance. @param threadId unique identifier for the thread @param id unique identifier for the context
1015 Creates and returns a new IOStatisticsSnapshot instance. Initializes statistical data structures to empty ConcurrentHashMap instances.
1016 Checks if thread-level I/O statistics are enabled. @return true if enabled, false otherwise
1017 Retrieves and returns I/O statistics from the output stream. @return IOStatistics object containing I/O metrics or null if not applicable
1018 Retrieves and returns IO statistics from the input source. @return IOStatistics object containing the statistics
1019 Retrieves and returns IO statistics from data sources. @return IOStatistics object containing I/O metrics
1020 Retrieves and returns IO statistics from data sources. @return IOStatistics object containing I/O metrics or null if not applicable
1021 Retrieves I/O statistics from input source. @return IOStatistics object containing statistics or null if not applicable
1022 Retrieves I/O statistics from the wrapped stream. @return IOStatistics object containing the statistics
1023 Retrieves and returns IO statistics from the output stream. @return IOStatistics object containing compression-related data or null if not applicable
1024 Retrieves and returns IO statistics from the input stream. @return IOStatistics object containing statistics or null if not applicable
1025 Retrieves and returns IO statistics from the input stream. @return IOStatistics object containing read data metrics
1026 Verifies checksums for data chunks. @param type checksum type @param algorithm checksum calculation algorithm @param data input data bytes @param dataOffset start offset in data array @param dataLength length of data to process @param bytesPerCrc number of bytes per CRC chunk @param crcs expected CRC values @param crcsOffset start offset in CRC array @param filename file being checked @param basePos base position for error reporting @throws ChecksumException if checksum does not match
1027 Masks position and initializes decryptor. @param decryptor used for decryption @param position original data position @param iv initialization vector @throws IOException if an I/O error occurs
1028 Writes encrypted data to the output stream. Handles buffer management and encryption processing. @throws IOException if an I/O error occurs during writing
1029 Default constructor initializes checksum with default values.
1030 Constructs a new checksum with default parameters.
1031 Constructs a new GlobPattern object from a glob pattern string. @param globPattern input glob pattern string
1032 Processes a file path without using canonical path. @param file the file to process @return processed file path as string @throws IOException if an I/O error occurs
1033 Masks a file path for use in shell commands. @param file the file to mask @return masked file path as string @throws IOException if an I/O error occurs
1034 Extracts files from a ZIP input stream to a target directory. @param inputStream source ZIP archive as InputStream @param toDir destination directory for extracted files @throws IOException if an I/O error occurs during extraction
1035 Unzips a file to a specified directory. @param inFile the input ZIP file @param unzipDir the target directory for unzipping @throws IOException if an I/O error occurs during the process
1036 Disconnects and returns an SFTP channel to the pool. @param channel the ChannelSftp object to disconnect
1037 Shuts down the SFTP connection pool. Closes all active connections and resets internal state.
1038 Initializes buffers and checksums. @param size buffer size to be allocated
1039 Initializes a new Statistics instance by copying from another. @param other the source Statistics object to copy data from
1040 Aggregates total bytes read from file system statistics. @return Total bytes read across all operations
1041 Aggregates total bytes written across all file system operations. @return Total bytes written as a long value
1042 Aggregates total read operations from file system statistics. @return Sum of read operations across all threads
1043 Aggregates large read operations from statistics. @return total count of large read operations
1044 Aggregates total write operations across all statistics. @return Sum of write operations from all statistics
1045 Aggregates total remote read time in milliseconds. @return aggregated remote read time in milliseconds
1046 Aggregates and returns file system statistics. Uses a visitor pattern to accumulate stats from all instances. @return Aggregated StatisticsData object
1047 Calculates total bytes read using erasure coding. @return Total bytes read via erasure coding operations
1048 Aggregates and processes file system statistics. Uses a visitor pattern to accumulate data and update root statistics.
1049 Validates flags for file creation or modification. @param path the file path to validate @param pathExists whether the file already exists @param flag set of creation flags to validate @throws IOException if validation fails
1050 Validates file creation flags for Hadoop operations, ensuring the APPEND flag is present. @param flag set of creation flags to validate
1051 Validates and constructs a URI with a specified scheme. @param uri the input URI to validate and modify @param supportedScheme the expected URI scheme @param authorityNeeded flag indicating if authority is required @param defaultPort default port to use if not specified in URI @return modified URI with validated scheme and port @throws URISyntaxException if URI construction fails
1052 Constructs an ArrayPrimitiveWritable with a specified component type. @param componentType the class representing the array's component type
1053 Converts a permission string to a bitmask. @param permString string representing permissions @return integer bitmask of permissions or throws exception for invalid characters
1054 Configures checksum options using default and user settings. @param defaultOpt default checksum configuration @param userOpt user-specified checksum configuration @return configured ChecksumOpt object
1055 Modifies and returns a canonicalized URI based on current conditions. @return modified or original URI after processing through m1 and m2
1056 Deprecated constructor for ContentSummary. Initializes content summary with specified metrics. @param length total length of content @param fileCount number of files @param directoryCount number of directories
1057 Retrieves file system status. @return FsStatus object with full capacity and no used space
1058 Constructs an HttpReferrerAuditHeader using a Builder. Initializes attributes and constructs the initial referrer header.
1059 Releases a buffer associated with given data. @param data buffer data to release
1060 Constructs a SemaphoredDelegatingExecutor with default duration tracker. @param executorDelegatee underlying ExecutorService for task execution @param permitCount maximum number of concurrent tasks @param fair true if semaphore should grant permits in FIFO order
1061 Masks buffers and releases the one with the highest masked value. @param blockNumber Block number to apply mask and compare
1062 Returns masked value of buffer. Validates buffer before operation. @return Masked integer value from buffer
1063 Checks if a given position is within the current buffer range. @param pos file position to check @return true if position is valid, false otherwise
1064 Returns the start offset of the buffer. Validates buffer integrity before returning. @return Start offset of the buffer as a long value
1065 Retrieves I/O statistics context based on thread stats enablement. @return Active IOStatisticsContext if enabled, else empty instance
1066 Updates I/O statistics context for the current thread. @param statisticsContext new context to set, or null to reset
1067 Merges and adjusts file ranges for efficient vectored reads. @param sortedRanges list of sorted FileRanges to process @param chunkSize size of data chunks @param minimumSeek minimum seek distance required @param maxSize maximum size allowed for merge @return List of CombinedFileRange objects representing merged and adjusted ranges
1068 Merges and processes file ranges for checksum validation. @param dataRanges list of FileRange objects to process @param bytesPerSum number of bytes per checksum segment @param minSeek minimum seek distance required @param maxSize maximum size allowed for merge @return List of CombinedFileRange objects with merged and validated ranges
1069 Constructs a Name object with case-sensitive matching enabled by default.
1070 Evaluates multiple expressions on a file system path. @param item the PathData object to evaluate @param depth current depth in the evaluation tree (unused) @return Result indicating overall success of all child evaluations
1071 Returns configured FindOptions. Initializes options if not already set. @return FindOptions object with specified configurations
1072 Parses command-line arguments and validates options. @param args list of command-line arguments
1073 Masks command description based on deprecation status. @return Deprecated message or masked description
1074 Logs an error message with masked command name. @param message additional error details
1075 Masks and constructs command string. @return masked command with optional usage
1076 Initializes ScopedAclEntries with given ACL entries. @param aclEntries list of ACL entries to manage
1077 Outputs table data to a PrintStream. Skips if table is empty. Formats columns based on width and alignment.
1078 Creates a new Location object with specified mutability. @param allow flag indicating if the location can be modified @return Location object initialized with the given mutability setting
1079 Creates a Data object to manage change allowance. @param allow flag indicating if changes are permitted @return Data object configured with the specified change permission
1080 Default constructor for Shell class. Initializes with no error stream redirection.
1081 Masks a delegation token for secure transmission. @param dToken the original delegation token to mask @return a new Token object with masked credentials
1082 Lists file statuses from a given path using default filter. @param f the base directory path @return RemoteIterator of LocatedFileStatus objects @throws FileNotFoundException if the specified path does not exist @throws IOException if an I/O error occurs
1083 Opens a file for reading using specified options. @param path the file path to open @param parameters configuration options for opening the file @return CompletableFuture containing FSDataInputStream or exception @throws IOException if an I/O error occurs
1084 Retrieves the underlying FileSystem instance from a ChRootedFileSystem. @return FileSystem object or null if initialization fails
1085 Encrypts data from input buffer to output buffer using OpenSSL. @param input source ByteBuffer containing plaintext @param output destination ByteBuffer for ciphertext @return number of bytes processed @throws ShortBufferException if output buffer is too small
1086 Encrypts data into the provided ByteBuffer. @param output destination buffer for encrypted data @return number of bytes written to output buffer @throws ShortBufferException if output buffer is too small @throws IllegalBlockSizeException if input block size is incorrect @throws BadPaddingException if padding is invalid
1087 Creates a RegexMountPointInterceptor from settings string. @param interceptorSettingsString configuration for the interceptor @return created interceptor or null if invalid configuration
1088 Masks and normalizes a file system path. Handles Windows-specific formatting and ensures valid URI paths. @param scheme URI scheme (e.g., "file", "hdfs") @param path file system path to be masked and normalized @return masked and normalized path string
1089 Determines if a path has a valid separator after the initial mask. @param pathString file system path to evaluate @param slashed indicates if path starts with a slash @return true if valid separator exists, false otherwise
1090 Determines if URI contains a separator after initial processing. @return true if separator exists, false otherwise
1091 Applies mask to extract specific bits from path. @param p file path @return masked integer value
1092 Validates that the given path is not null and is within the base directory. @param path the file path to validate @throws IllegalArgumentException if path is null or outside base directory
1093 Determines the next available ID for logging files. @param initial base path for file operations @param lastId current highest ID in use @return next unique ID to be used for new log file @throws IOException on file operation errors
1094 Masks a given position within the file. @param n position to be masked @return masked position or 0 if input is non-positive @throws IOException if an I/O error occurs during masking
1095 Reads data from an InputStream into a ByteBuffer using a pool. @param stream input stream to read from @param bufferPool pool for managing ByteBuffer allocation @param maxLength maximum length of data to read @return ByteBuffer containing the read data or null if unsuccessful @throws IOException if an I/O error occurs
1096 Masks current thread ID in audit context. Initializes and updates thread-specific audit entries.
1097 Initializes and masks the current thread ID in the audit context. @return CommonAuditContext object with masked thread ID
1098 Constructs file system permissions with default sticky bit. @param u action for user @param g action for group @param o action for others
1099 Constructs an FsPermission object with specified mode. @param mode permission mask value
1100 Reads and applies file permissions from input. @param in DataInput source for reading permissions @return FsPermission object with applied mask @throws IOException if an I/O error occurs
1101 Retrieves effective permissions for an ACL entry. @param entry ACL entry to evaluate @return masked FsAction with effective permissions
1102 Creates a masked PermissionStatus instance. @param user username associated with the permission @param group group name associated with the permission @param permission file system access rights @return immutable PermissionStatus object with overridden deserialization method
1103 Parses an ACL specification string and creates a list of AclEntry objects. @param aclSpec the ACL specification string @param includePermission whether to include permission in parsing @return List of AclEntry instances representing the parsed ACL entries
1104 Creates an FsCreateModes instance with specified permissions. @param masked the masked file system permission @param unmasked the unmasked file system permission @return FsCreateModes object with given permissions
1105 Masks and prints ACL entry permissions. @param aclStatus current ACL status @param fsPerm file system permission @param entry ACL entry to process
1106 Masks a string by splitting it into an array of substrings using a comma delimiter. @param str the input string to be masked @return array of masked substrings or null if no substrings found
1107 Reads and returns an integer from the ByteBuffer. Ensures the buffer is initialized before reading. @return integer value or throws FSException if buffer is not open
1108 Checks if ByteBuffer is open and reads from it. @return true if read operation succeeds, false otherwise
1109 Starts data block upload process. @param index unique identifier for the data block @return BlockUploadData object or null if not applicable @throws IOException if an I/O error occurs during the upload
1110 Closes the data block if not already closed. @return true if block was successfully closed, false if already closed
1111 Overrides base method to ensure proper resource management and data integrity. @throws IOException if an I/O error occurs during resource handling or state verification
1112 Retrieves file system statistics for a given URI. @param uri the input URI for which statistics are needed @return Statistics object associated with the URI's scheme
1113 Retrieves or creates an AllocatorPerContext and returns its directory index. @param contextCfgItemName the name of the configuration item for the context @return The last accessed directory index associated with the context
1114 Writes sync marker to output stream if position changed. @throws IOException if an I/O error occurs
1115 Retrieves the current position in the output stream. @return long value representing the cached position @throws IOException if an I/O error occurs
1116 Calculates total size of data written. @return Sum of cached position and buffered data count. @throws IOException if an I/O error occurs
1117 Computes content summary for a given file or directory. @param f path to the file or directory @return ContentSummary object summarizing file/directory details @throws IOException if an I/O error occurs
1118 Processes user and group strings for access control. @param userGroupStrings array containing user and group strings
1119 Converts a string to an EnumSet of enums. @param key configuration key for error messages @param valueString comma-separated list of values @param enumClass class of the enum type @param ignoreUnknown flag to skip invalid options @return EnumSet containing parsed enum constants @throws IllegalArgumentException if parsing fails and ignoreUnknown is false
1120 Checks if the current service state matches the expected state. @param expectedState the required state for the operation @throws ServiceStateException if the current state does not match the expected state
1121 Initializes an AbstractService with a given name. @param name unique identifier for the service
1122 Validates and transitions service state. @param name service identifier @param state current service state @param proposed new service state to transition to Throws ServiceStateException if transition is invalid
1123 Wraps an exception in a ServiceLaunchException. @param exception the original exception causing service creation failure @return ServiceLaunchException with specific exit code and cause
1124 Validates and logs configuration files. @param filenames array of configuration file paths Throws ServiceLaunchException if any file is missing
1125 Handles exceptions by creating a ServiceLaunchException. @param thrown the original Throwable causing the exception @return a configured ExitUtil.ExitException for service launch errors
1126 Constructs a new ServiceShutdownHook with a weak reference to the given service. @param service the service to manage during shutdown
1127 Handles service failure by logging and recording the cause. @param exception the exception causing the failure
1128 Records a lifecycle event. Captures current time and service state, then logs the event.
1129 Stops a specified number of services, handling exceptions gracefully. @param numOfServicesStarted Number of services to stop @param stopOnlyStartedServices Flag to stop only started services
1130 Stops a Hadoop service quietly by masking exceptions. @param service Service instance to stop @return Any exception that occurs during stopping
1131 Compares this UTF-8 string with another. @param o the other UTF8 object to compare @return result of comparison (-1, 0, or 1)
1132 Compares this UTF8 instance with another object for equality. @param o the object to compare with @return true if the objects are equal, false otherwise
1133 Compares this MD5 hash with another. @param that the other MD5Hash to compare with @return result of comparison (-1, 0, or 1)
1134 Compares this binary comparable to another. @param other the other BinaryComparable object to compare with @return result of comparison (-1, 0, or 1)
1135 Compares binary data with another byte array. @param other the byte array to compare against @param off the start index in the other array @param len the length of the segment to compare @return comparison result (-1, 0, or 1)
1136 Computes mask value based on binary comparison. @return computed mask using m1 and m2 values
1137 Converts byte array to double. @param bytes source byte array @param start index to begin reading bytes @return double value from byte array
1138 Adjusts the internal byte array capacity if needed. @param size desired new size for the byte array
1139 Checks if file has read access on Windows. @param f File object to check @return true if file is readable, false otherwise
1140 Checks if file has write access. @param f the File object to check @return true if file is writable, false otherwise
1141 Checks if a file has execute permission on Windows. @param f the File object to check @return true if file is executable, false otherwise
1142 Returns the singleton instance of ReadaheadPool. Initializes if not already created and native code is initialized. @return ReadaheadPool instance or null if initialization fails
1143 Returns a mask value based on native code availability. @return mask value from m2() if available, otherwise 0
1144 Computes checksum for data using CRC algorithm. @param data input data array @param dataOffset offset in the data array @param dataLength length of data to process @param sums array to store computed checksums @param sumsOffset offset in the sums array
1145 Opens a file for writing with specified permissions. @param f file to open @param permissions permission mode to set @return FileOutputStream object @throws IOException if an I/O error occurs or file already exists
1146 Frees all ByteBuffers from the buffer pool.
1147 Masks input and output buffers using encryption utilities. @param inBuffer buffer containing input data @param outBuffer buffer for encrypted output data
1148 Retrieves file status for a given FileDescriptor. @param fd the FileDescriptor to query @return Stat object containing file information @throws IOException if an I/O error occurs
1149 Retrieves file statistics for a given path. @param path the file path to query @return Stat object containing file information @throws IOException if an I/O error occurs or path is null
1150 Constructs a BoundedByteArrayOutputStream with specified capacity and limit. @param capacity total size of the buffer @param limit maximum number of bytes allowed to be written beyond offset
1151 Constructs an EnumSetWritable with given EnumSet and null element type. @param value EnumSet to be wrapped
1152 Writes data from InputStream to buffer. @param in the input stream to read from @param length the number of bytes to read @throws IOException if an I/O error occurs or premature EOF is reached
1153 Resets the data input stream with key buffer. @return the reset DataInputStream instance
1154 Updates a Writable object with a Base64-decoded value. @param obj the Writable object to update @param newValue Base64-encoded string to decode and set @throws IOException if decoding fails or input is invalid
1155 Compares two byte arrays using a WritableComparable objects. @param b1 first byte array @param s1 starting index in the first byte array @param l1 length of bytes to use from the first array @param b2 second byte array @param s2 starting index in the second byte array @param l2 length of bytes to use from the second array @return comparison result as an integer
1156 Checks if a block group is within the recoverable range. @param blockGroup the block group to check @return true if erased blocks are within recoverable limits, false otherwise
1157 Computes total number of erased blocks in a block group. @param blockGroup the ECBlockGroup to evaluate @return sum of erased data and parity blocks
1158 Identifies indexes of erased blocks. @param inputBlocks array of ECBlock objects representing data and parity units @return array of indexes for erased blocks or empty if none are erased
1159 Validates input buffers for decoding. @param buffers array of ByteBuffer objects to validate
1160 Validates input buffers for decoding. @param buffers array of byte arrays to be validated
1161 Initializes the erasure decoding step for data recovery. @param inputBlocks array of input EC blocks @param erasedIndexes indices of erased blocks @param outputBlocks array of output EC blocks @param rawDecoder decoder for processing raw data @param rawEncoder encoder for processing raw data
1162 Validates inputs for decoding process. @param inputs array of input elements @param erasedIndexes indices of erased elements @param outputs array to store decoded results
1163 Constructs an erasure encoding step for XOR operations. @param inputBlocks array of input EC blocks @param outputBlocks array of output EC blocks @param rsRawEncoder Reed-Solomon raw erasure encoder @param xorRawEncoder XOR raw erasure encoder
1164 Validates input and output array lengths for encoding. @param inputs array of input data @param outputs array for encoded data
1165 Computes element-wise addition of two integer arrays. @param p first integer array @param q second integer array @return resulting array from element-wise XOR of p and q, extended with remaining elements if lengths differ
1166 Multiplies two polynomials in a Galois Field. @param p coefficients of the first polynomial @param q coefficients of the second polynomial @return coefficients of the resulting polynomial
1167 Applies Gaussian elimination to a matrix over a finite field. @param matrix 2D array representing the matrix to be processed
1168 Masks and prints ECChunks with a header. @param header descriptive title for the output @param chunks array of ECChunk objects to process
1169 Masks specified segments of multiple ByteBuffers with zeros. @param buffers array of ByteBuffer objects to be masked @param dataLen length of the segment to mask in each buffer
1170 Masks ECChunks with zeros if all bits are zero. @param chunks array of ECChunk objects to process @return ByteBuffer array with masked data or null for null inputs
1171 Masks specified segments of multiple buffers with zeros. @param buffers array of byte arrays to be masked @param offsets starting indices for masking in each buffer @param dataLen length of the segment to mask in each buffer
1172 Creates a default GaloisField instance. @return GaloisField object with predefined size and polynomial
1173 Constructs a new BlockCompressorStream. @param out underlying output stream for compressed data @param compressor compression algorithm to use @param bufferSize size of the internal buffer @param compressionOverhead overhead bytes for compression
1174 Initializes a ZStandardDecompressor with the specified buffer size. @param bufferSize size of input and output buffers in bytes
1175 Constructs an Lz4Compressor with default buffer size.
1176 Retrieves the class of a compression codec by name. @param codecName the name of the codec @return Class instance of CompressionCodec or null if not found
1177 Acquires a compressor from the pool or creates a new one. @param codec compression codec to use @param conf configuration settings @return compressor instance for compression operations
1178 Retrieves a decompressor from the pool or creates a new one. @param codec compression codec to use @return Decompressor instance for the given codec
1179 Returns a compressor to the pool or disposes of it. @param compressor Compressor instance to be returned or disposed
1180 Releases a decompressor back to the pool. @param decompressor the Decompressor instance to release
1181 Returns compressor class for Zstandard. Checks native library availability before returning. @return ZStandardCompressor class
1182 Returns the decompressor class for Zstandard. Checks native library availability before returning.
1183 Default constructor initializes ZlibCompressor with default settings.
1184 Initializes a ZlibCompressor with settings from configuration. @param conf Hadoop configuration object
1185 Initializes Zlib compression settings from configuration. @param conf Hadoop configuration object
1186 Handles decompression of GZIP headers and transitions states. Processes user buffer data, validates headers, and updates CRC. Throws IOException for header validation failures.
1187 Writes text data to a DataOutput stream. @param out the output stream to write to
1188 Reads a variable-length integer from the input stream and casts it to an int. @param stream DataInput source for reading bytes @return int value decoded from the stream @throws IOException if an I/O error occurs or value is out of int range
1189 Reads and validates an integer within a specified range from the input stream. @param stream DataInput source for reading bytes @param lower minimum acceptable value @param upper maximum acceptable value @return validated integer value @throws IOException if out-of-range or invalid data is read
1190 Constructs a new Text object with UTF-8 encoded data. @param string input text to be encoded and stored
1191 Searches for a substring within the byte array. @param what substring to search for @param start starting index in the byte array @return position of the first occurrence or -1 if not found
1192 Writes a UTF-8 encoded string to a DataOutput stream. @param out the output stream to write to @param s the string to be written @return number of bytes written @throws IOException if writing fails
1193 Writes a UTF-8 encoded string to a DataOutput stream with variable-length encoding. @param out the output stream to write to @param s the input text to encode @param maxLength maximum allowed length of the encoded string in bytes @return number of bytes written @throws IOException if writing fails or string exceeds maxLength
1194 Processes UTF-8 encoded byte array. @param utf8 input byte array containing UTF-8 text
1195 Copies text data from another Text object. @param other source Text object to copy data from
1196 Reads a line from the input stream into a Text object. Handles custom delimiters and buffer sizes efficiently. @param str Text object to store the read line @param maxLineLength maximum length of the line to read @param maxBytesToConsume maximum bytes to consume before stopping @return number of bytes consumed or -1 if end of stream
1197 Reads text from input stream until a record delimiter is found. @param str Text object to store read data @param maxLineLength Maximum length of the line to read @param maxBytesToConsume Maximum number of bytes to consume @return Number of bytes consumed or -1 if end of stream
1198 Constructs an empty SortedMapWritable. Initializes with a TreeMap for sorted key-value pairs.
1199 Initializes a new MapWritable instance. Sets up internal storage using a HashMap for key-value pairs.
1200 Constructs a Key with specified byte array and default weight of 1.0. @param value byte array representing the key data
1201 Computes an MD5 hash from a full byte array. @param data input byte array @return MD5Hash object representing the computed hash
1202 Computes an MD5 hash from a UTF-8 encoded string. @param utf8 UTF8 object containing the encoded data @return MD5Hash object representing the computed hash
1203 Constructs an MD5Hash from a hexadecimal string. @param hex hexadecimal representation of the MD5 hash
1204 Creates an infinite retry policy with fixed sleep intervals. @param sleepTime duration to wait between retries @param timeUnit unit of time for the sleep interval @return RetryPolicy object configured for unlimited retries
1205 Creates a retry policy with fixed sleep intervals. @param maxRetries maximum number of retry attempts @param sleepTime duration to wait between retries @param timeUnit unit of time for the sleep interval @return RetryPolicy configured with fixed sleep strategy
1206 Creates an exponential backoff retry policy. @param maxRetries maximum number of retry attempts @param sleepTime duration to wait between retries @param timeUnit unit of time for the sleep interval @return ExponentialBackoffRetry instance configured with specified parameters
1207 Creates a retry policy with exponential backoff. @param maxRetries maximum number of retries allowed @param sleepTime base duration to wait between retries @param timeUnit unit for the sleep interval @return RetryPolicy object configured with specified parameters
1208 Records timestamp when a write lock is acquired. Updates `writeLockHeldTimeStamp` if the read-write lock is in write mode.
1209 Records the timestamp when a lock is acquired. @param lockAcquireTimestamp time of lock acquisition
1210 Records timestamp when a read lock is acquired. Checks if the read lock is held and logs the current time.
1211 Creates a retry proxy for the specified interface. @param iface target interface to implement @param proxyProvider manages failover proxies @param methodNameToPolicyMap method-specific retry policies @param defaultPolicy default retry policy @return dynamic proxy instance with retry capabilities
1212 Executes retry logic based on current parameters. @return Result of the operation or throws an exception if retries are exhausted
1213 Compares current policy with another for equality. @param obj object to compare against @return true if policies are equal, false otherwise
1214 Builds and returns a consolidated IOException from collected exceptions. @return Single IOException or null if no exceptions are present
1215 Retrieves supported compression algorithms. @return Array of algorithm names as Strings from Compression utility
1216 Retrieves the name of the compression algorithm used by the block. @return Name of the compression algorithm as a String
1217 Reads and decodes a variable-length string from DataInput. @param in source of data input @return decoded string or null if length is -1 @throws IOException if reading fails
1218 Reads and processes the remaining chunk size. @throws IOException if reading fails
1219 Retrieves a comparator for sorting based on the given name. @param name identifier for the comparator to retrieve @return Comparator instance or null if not found
1220 Encodes and writes a data chunk to the output stream. @param chunk byte array containing the data chunk @param offset starting index of the data in the chunk @param len length of the data to write @param last flag indicating if it's the last chunk @throws IOException if an I/O error occurs
1221 Encodes and writes data chunk to output stream. @param data byte array containing data to write @param offset starting index in the data array @param len length of data to write @throws IOException if an I/O error occurs
1222 Initializes a new SingleChunkEncoder with a specified output stream and chunk size. @param out DataOutputStream to write encoded data to @param size maximum size of the chunk @throws IOException if an I/O error occurs during initialization
1223 Returns a comparator for TFile entries if sorted. @throws RuntimeException if entries are not comparable due to unsorted TFiles
1224 Checks if current location is past or at end location. @return true if current location is not before end location, false otherwise
1225 Finds and returns a Location for the given offset. @param offset file position to search for @return Location object or 'end' if block index not found
1226 Creates a new Location with current block and record indices. @return a new Location instance
1227 Reads value into buffer starting at offset 0. @param buf target buffer for data @return length of data read into buffer @throws IOException if an I/O error occurs
1228 Masks and encodes a UTF-8 string, handling truncation and buffer management. @param string input string to be processed
1229 Serializes multiple Writable objects into a single byte array. @param writables array of Writable objects to serialize @return byte array containing serialized data
1230 Masks and encodes a string to UTF-8 bytes. @param string input string to encode @return byte array of masked UTF-8 encoded string
1231 Compresses and writes data to output stream. @param uncompressedDataBuffer holds raw data to compress
1232 Copies mappings from another Writable object. @param other source Writable object to copy from @throws IllegalArgumentException if source is null or I/O error occurs
1233 Writes a key-value pair to the output stream with compression. Validates key and value classes, serializes them, and writes to compressed output. @param key the key object to write @param val the value object to write @throws IOException if there is an I/O error or invalid class type
1234 Serializes token data into a byte array. @return serialized token data as a byte array
1235 Encodes a Writable object to a Base64 string. @param obj the Writable object to encode @return Base64 encoded string representation of the object @throws IOException if an I/O error occurs during encoding
1236 Transfers data from output buffer to input buffer.
1237 Computes the distance between two network nodes. @param node1 first node in the network @param node2 second node in the network @return integer representing the computed distance, or Integer.MAX_VALUE if one node is null
1238 Masks and retrieves a node from the network. @param node input Node object @return Node object or null if not found
1239 Retrieves and masks all leaf nodes within a specified scope. @param scope network location path @return List of masked Node objects
1240 Calculates the number of nodes in a given scope, excluding specified nodes. @param scope network location path @param excludedNodes collection of nodes to exclude from the count @return count of nodes within the scope, adjusted for exclusions
1241 Masks a node in the network topology. @param node the node to be masked
1242 Sorts and organizes nodes based on weights. @param reader source node for weight calculation @param nodes array of target nodes to sort @param activeLen length of active nodes @param secondarySort optional secondary sorting logic @param nonDataNodeReader flag indicating special weight calculation
1243 Removes a node from the network topology. @param node the Node instance to be removed Throws IllegalArgumentException if the node is an InnerNode
1244 Transfers data from a file channel to the socket output stream. @param fileCh FileChannel source for data transfer @param position Starting position in the file channel @param count Number of bytes to transfer @throws IOException if an I/O error occurs during transfer
1245 Masks and formats network-related exceptions with details. @param destHost destination hostname @param destPort destination port number @param localHost local hostname @param localPort local port number @param exception original IOException to mask @return masked IOException with detailed message
1246 Default constructor for RawScriptBasedMappingWithDependency.
1247 Initializes ScriptBasedMapping with a raw DNS-to-switch mapping. @param rawMap underlying DNS-to-switch mapping to be managed
1248 Constructs an InnerNodeImpl from a given network path. Initializes node with name and location by calling superclass constructor. @param path full network path for the node
1249 Constructs an InnerNodeImpl with specified attributes. @param name unique identifier for the node @param location network location path @param parent reference to the parent node @param level hierarchical level of the node
1250 Writes a byte to the first notification socket. @throws IOException if I/O error occurs during writing
1251 Creates a DomainSocket instance for the specified path. @param path Unix domain socket path @return DomainSocket object @throws IOException if an I/O error occurs or initialization fails
1252 Creates an array of anonymous DomainSockets using file descriptors. @return Array containing two initialized DomainSocket objects @throws IOException if socket creation fails
1253 Creates a DomainSocket for communication. @param path Unix domain socket path @return DomainSocket instance @throws IOException if initialization fails
1254 Handles processing of a file descriptor. @param caller method name invoking this function @param entries map of tracked entries @param fdSet set of file descriptors @param fd file descriptor to process
1255 Closes the domain socket watcher and associated resources. Ensures thread safety and proper resource management. @throws IOException on I/O errors during closure
1256 Retrieves or creates a SelectorInfo for the given channel. @param channel the selectable channel to handle @return SelectorInfo object associated with the channel @throws IOException if an I/O error occurs
1257 Updates selector info and trims idle selectors. @param info SelectorInfo object to update
1258 Retrieves IP addresses for a network interface including subinterfaces. @param strInterface the name of the network interface @return array of IP addresses as strings @throws UnknownHostException if no such interface exists
1259 Retrieves hostnames for a network interface. @param strInterface name of the network interface @param nameserver optional DNS server to query @param tryfallbackResolution flag to attempt fallback hostname resolution @return array of hostnames or cached hostname if none found @throws UnknownHostException if interface is not found
1260 Constructs a LogThrottlingHelper with default Timer. @param minLogPeriodMs minimum time in ms between logs for the same key
1261 Records log action with default logger and current time. @param values variable number of log values @return LogAction or DO_NOT_LOG if logging is suppressed
1262 Retrieves and quotes parameter value by name. @param name parameter name to fetch @return quoted parameter value or null if not found
1263 Encodes the request URL by quoting HTML special characters. @return StringBuffer containing encoded URL
1264 Quotes HTML special characters in the request URL. @return quoted request URL or original if no quoting needed, null if input is null
1265 Constructs a FileMonitoringTimerTask for a single file path. @param filePath path to monitor @param onFileChange action to perform on file change @param onChangeFailure action to handle change failures
1266 Updates metrics record without tags. @param mr MetricsRecord to process @return updated or created Record object
1267 Processes an element from the queue using a consumer. @param consumer function to process the element @throws InterruptedException if interrupted while waiting for an element
1268 Processes elements in the queue using a consumer. @param consumer function to process each element @throws InterruptedException if interrupted while waiting
1269 Records a cache hit event in the retry cache metrics.
1270 Increments the counter for cache clears.
1271 Records an update in the retry cache metrics. @param none @return none
1272 Increments the backoff counter for disconnected RPC clients.
1273 Increments the counter for slow RPC calls.
1274 Marks an RPC call as requeued.
1275 Increments the counter for successful RPC calls.
1276 Transfers data from a ByteBuffer to a channel with optional masking. @param channel destination channel for data transfer @param buffer source buffer containing data to transfer @return number of bytes transferred @throws IOException on I/O error
1277 Reads data from a channel into a buffer and updates metrics. @param channel source channel to read from @param buffer destination buffer for data @return number of bytes read @throws IOException on I/O error
1278 Increments failure count and records last failure time.
1279 Fetches and caches group information for a user. @param user username of the user @return set of group names linked to the user @throws IOException if an I/O error occurs while fetching group data
1280 Registers metrics with the MetricsSystem. @param name metric identifier
1281 Adds quantile metrics information. @param ucName upper case name prefix @param uvName upper case value suffix @param desc description of the metric @param lvName lower case name @param pDecimalFormat formatter for percentile values
1282 Generates and configures quantile metrics. @param ucName upper case name prefix @param uvName upper case value suffix @param desc metric description @param lvName lower case name @param df DecimalFormat instance for formatting
1283 Initializes a new MetricsRegistry with a given name. @param name unique identifier for the registry
1284 Creates and caches a metric tag. @param name metric name @param description metric description @param value tag value @return cached MetricsTag object
1285 Initializes a MutableStat instance with specified metric details. @param name metric name @param description metric description @param sampleName sample name @param valueName value name @param extended flag for extended statistics
1286 Adds or updates a metric tag. @param info metrics information @param value tag value @param override flag to allow overriding existing tags @return current MetricsRegistry instance
1287 Updates metric with new sample value. @param value new numerical value to process
1288 Calculates standard deviation of RPC processing times. @return standard deviation value
1289 Adds a sample value to the buffer and updates counts. Triggers compression when buffer is full. @param v the sample value to add
1290 Generates a map of quantiles with their corresponding sample counts. Calls query methods to update samples and calculate quantile values. @return Map of Quantile to Long, or null if no samples are present
1291 Generates a sorted list of top N token owners by count. @param n maximum number of entries to include @return List of NameValuePair with owner names and counts
1292 Masks specified groups and updates netgroup cache. @param groups list of group names to mask
1293 Returns all tokens associated with the current subject. @return Collection of Token objects managed by the system
1294 Retrieves and masks group memberships for a user. @param user the username to fetch groups for @return list of masked group names associated with the user @throws IOException if an error occurs while fetching groups
1295 Retrieves group memberships for a user. @param user the username to fetch groups for @return set of group names associated with the user @throws IOException if no groups are found or an error occurs
1296 Retrieves netgroups for a specified user. @param user username to fetch netgroups for @return list of netgroup names associated with the user @throws IOException if an I/O error occurs during retrieval
1297 Calls m1 with an empty string argument. @param format message format string
1298 Logs the value of a specified system property. @param property name of the system property to log
1299 Logs the value of a given environment variable. @param variable name of the environment variable to log
1300 Reads and logs each line from the specified file. @param file the file to read
1301 Logs an error message with category and formatted details. @param category the error category @param message the error message format @param args arguments for the message format
1302 Logs a warning message with category and formatted details. @param category the diagnostic category @param message the message to log @param args arguments for formatting the message
1303 Masks and sets the authentication method for the user. @param authMethod the authentication method to mask and set
1304 Writes a single byte securely using SASL. @param b byte to write @throws IOException if an I/O error occurs
1305 Writes data securely using SASL. @param b input buffer containing data to write @throws IOException if an I/O error occurs
1306 Validates a delegation token by identifier. @param identifier unique token identifier @return DelegationTokenInformation object if valid @throws InvalidToken if token is not found or has expired
1307 Updates the external delegation token secret manager. @param secretManager new secret manager instance to use
1308 Updates the master key for delegation tokens. Generates a new DelegationKey and updates internal state. @throws IOException if an I/O error occurs during key storage
1309 Default constructor initializes an empty DelegationKey. Sets ID and expiry to zero, cryptographic key to null.
1310 Constructs a new instance of DelegationTokenAuthenticatedURL. @param authenticator existing authenticator instance or null @param connConfigurator connection configuration settings
1311 Attempts to renew a delegation token. @return true if renewal is successful, false otherwise @throws IOException if an I/O error occurs during token renewal or retrieval @throws InterruptedException if the operation is interrupted
1312 Reads and returns the next byte of data from the SASL input stream. @return Next byte of data or -1 if end of stream is reached @throws IOException if I/O error occurs
1313 Reads data from the input stream and processes it using SASL. @param b buffer to store read data @param off offset within buffer @param len number of bytes to read @return number of bytes read or -1 on EOF @throws IOException if I/O error occurs
1314 Validates user authorization based on user info and IP address. @param user UserGroupInformation object representing the user @param remoteAddress String representation of the user's remote IP address @throws AuthorizationException if validation fails or an error occurs
1315 Checks if Kerberos authentication is enabled. @return true if Kerberos login context is available, false otherwise
1316 Creates a UserGroupInformation object for proxy user authentication. @param user the username to impersonate @param realUser the actual user performing the action @return UserGroupInformation object configured with proxy settings
1317 Retrieves the real user associated with the given user group. @param user UserGroupInformation object representing the current user @return Real UserGroupInformation object or the original if none found
1318 Constructs a detailed user information string. @return String representation of user info including auth method and real user if applicable
1319 Retrieves the authentication method for the current user. Uses real user if available, otherwise defaults to self. @return AuthenticationMethod object representing the user's authentication method
1320 Determines the authentication method for a user group. @param ugi UserGroupInformation object representing the user group @return AuthenticationMethod used by the user or proxy user
1321 Creates an IPC connection context for RPC communication. @param protocol the name of the protocol being used @param ugi user group information object @param authMethod authentication method to be used @return IpcConnectionContextProto representing the connection context
1322 Verifies SSL session against a hostname. @param host hostname to validate @param session SSL session to verify @return true if verification is successful, false otherwise
1323 Attempts to locate a resource by name and logs the result. @param name resource name to find @return SUCCESS if found, E_NOT_FOUND otherwise
1324 Constructs a Command object with the specified configuration. @param conf Configuration object to be set
1325 Constructs a CommandFactory with the specified configuration. @param conf Configuration object to be set
1326 Constructs an FsShell object with the specified configuration. @param conf Configuration object to initialize the shell
1327 Constructs a new FindClass instance with the given configuration. @param conf Configuration object to be used by the class
1328 Initializes GetGroupsBase with configuration and output stream. @param conf Hadoop configuration settings @param out Stream for outputting results
1329 Default constructor initializes Configured with null configuration.
1330 Generates a string representation of access permissions. @return formatted string indicating allowed users or wildcard permission
1331 Retrieves the original Kerberos TGT ticket from the subject. @return KerberosTicket object or null if not found
1332 Configures SSL/TLS for ZooKeeper client with default X509 utility. @param zkClientConfig configuration object for ZooKeeper client @param truststoreKeystore keystore and truststore details @throws ConfigurationException if SSL configuration fails
1333 Initializes an OpenSSL cipher with a specified transformation and engine. @param transformation encryption algorithm, mode, and padding @param engineId identifier for the cryptographic engine @return OpensslCipher object configured with the given parameters @throws NoSuchAlgorithmException if the transformation is invalid @throws NoSuchPaddingException if the padding type is not supported
1334 Generates a new key version with specified options. @param name the name of the key @param options configuration options for key generation @return KeyVersion object representing the new key version @throws NoSuchAlgorithmException if the algorithm is not available @throws IOException if an I/O error occurs
1335 Generates a new KeyVersion using existing metadata. @param name the key identifier @return KeyVersion object @throws NoSuchAlgorithmException if algorithm is unavailable @throws IOException if metadata retrieval fails
1336 Handles scheduling of an RPC call with backoff and failover. @param e schedulable task to be processed
1337 Initializes writable RPC engine. Registers protocol and sets initialization flag.
1338 Starts the stopwatch. @throws IllegalStateException if stopwatch is already running @return current StopWatch instance
1339 Stops the stopwatch and updates elapsed time. @throws IllegalStateException if stopwatch is already stopped @return updated StopWatch instance
1340 Returns the elapsed time in nanoseconds. @return Elapsed time in nanoseconds, considering if the stopwatch is running or stopped
1341 Generates and masks fingerprint for given methods. @param methods array of Method objects to process @return masked fingerprint as an integer
1342 Generates a masked protocol signature fingerprint. @param protocol the protocol interface class @param serverVersion version of the server protocol @return ProtocolSigFingerprint object with masked method hashcodes
1343 Creates a RemoteException from Attributes. @param attrs object containing class name and message @return RemoteException instance with extracted details
1344 Returns the list of file system items or throws an exception. @return List of file system items @throws IOException if an error occurred during listing
1345 Records RPC response times using deprecated method. @param callName name of the RPC function @param schedulable object containing scheduling information @param details object holding timing details for processing and queuing
1346 Attempts to add an element to the queue within a specified priority range. @param priority starting priority level for adding the element @param e element to add to the queue @param includeLast whether to include the last priority level in the attempt @return true if the element is successfully added, false otherwise
1347 Handles error processing for RPC responses. @param t Throwable exception to process @param responseParams ResponseParams object to populate with error details
1348 Constructs a VersionMismatch exception with details about interface and version discrepancies. @param interfaceName name of the interface with version conflict @param clientVersion version of the client @param serverVersion version of the server
1349 Updates priority levels for RPCs based on decayed call costs. @param none @return void
1350 Computes and returns the priority level for a given RPC identity. Uses cached priority if available; otherwise, calculates based on call cost. @param identity the user or service identity @return computed priority level
1351 Returns hash code based on client and call IDs. @return computed hash code
1352 Retrieves and updates the current queue index mask. @return Current queue index mask value
1353 Retrieves and masks the remote IP address. @return Masked IP string or null if no active call
1354 Initializes a MachineList with given host entries using default InetAddressFactory. @param hostEntries collection of IP addresses or hostnames
1355 Calls readProcMemInfoFile with false to avoid re-reading.
1356 Calculates total free memory size. Reads and processes memory info, includes inactive file size. @return Total free memory in bytes
1357 Updates CPU time tracking and retrieves cumulative CPU time. @return Cumulative CPU time as a long value
1358 Calculates overall CPU usage. Updates CPU time and retrieves usage percentage. Adjusts for number of processors if not unavailable. @return Overall CPU usage as a percentage or UNAVAILABLE if data is incomplete
1359 Calculates overall CPU usage percentage. @return CPU usage as a float, normalized to 100 if available
1360 Inserts a key-value pair into the hash store. Handles null keys and resizes buffer if necessary. @param k key object to insert @param v value object associated with the key
1361 Creates a secure TransformerFactory instance. @return configured TransformerFactory with security features enabled
1362 Creates a secure SAXTransformerFactory. @return configured SAXTransformerFactory with security features enabled
1363 Converts file size to a formatted string. @param size the size in bytes @param humanReadable true for human-readable format, false for raw bytes @return formatted size string
1364 Formats storage size. @param size storage size in bytes @param humanReadable true for human-readable format, false for raw value @return formatted size string
1365 Masks a long number with binary unit prefix. @param number the number to mask @return masked string representation of the number
1366 Formats a long length value with binary unit prefix. @param len the length value to format @return formatted string with size and 'B' unit
1367 Adds filesystem usage data to the table. @param uri URI of the filesystem @param fsStatus object containing filesystem status @param mountedOnPath path where the filesystem is mounted
1368 Converts byte array to hexadecimal string. @param bytes source byte array @return masked hexadecimal string representation of the byte array
1369 Sorts elements in a sortable structure using heap sort. @param s sortable structure to be sorted @param p starting index of the range to sort @param r ending index of the range to sort (exclusive)
1370 Handles exit exception by delegating to ExitUtil. @param ee ExitException to be processed
1371 Handles service launch termination. @param status exit code indicating service outcome @param message error message for the exception
1372 Handles exit by creating and processing an ExitException. @param status exit status code @param t Throwable causing the exit @throws ExitException if unable to handle exit gracefully
1373 Handles application exit with specified status and message. @param status exit status code @param msg error message for termination @throws ExitException if unable to handle the exit gracefully
1374 Handles application termination by throwing a HaltException. @param status exit status code @param t the underlying cause of the exception @throws HaltException if system halt is disabled or an error occurs
1375 Handles application termination with specified status and message. @param status exit status code @param message error message @throws HaltException if system halt is disabled or an error occurs
1376 Unregisters the service as a shutdown hook. Handles exceptions if shutdown is in progress.
1377 Converts Iterable to ArrayList. @param elements source iterable @return ArrayList containing elements from the iterable
1378 Creates and populates a LinkedList from an iterable. @param elements source of elements to add to the list @return populated LinkedList instance
1379 Constructs minimal ACLs based on given permissions and entries. @param perm FsPermission object representing file permissions @param entries list of existing AclEntry objects @return List of AclEntry with updated ACL structure
1380 Creates an ArrayList from varargs with computed initial capacity. @param elements the elements to be added to the list @return a new ArrayList containing the specified elements
1381 Creates an ArrayList with a capacity mask. @param estimatedSize initial size estimate @return ArrayList with computed capacity
1382 Serializes an object to JSON and writes it to a file. @param file the target file for writing @param instance the object to serialize @throws IOException if serialization or file operations fail
1383 Constructs a StatisticDurationTracker. @param iostats IOStatisticsStore to update statistics @param key unique identifier for the statistic @param count number of operations to increment counter by
1384 Initializes DurationInfo with logging and formatting. @param log Logger instance for logging messages @param logAtInfo Flag to determine if logs should be at info level @param format String format for the duration text @param args Arguments for the format string
1385 Returns formatted operation duration as a string. @return duration in "MM:SS.mmm" format
1386 Creates a CrcComposer for CRC computation. @param type checksum type (CRC32 or CRC32C) @param bytesPerCrcHint number of bytes per CRC segment @param stripeLength total length of the data stripe @return configured CrcComposer instance @throws IOException if an unsupported checksum type is provided
1387 Computes combined CRC mask for given lengths and modulus. @param crcA first CRC value @param crcB second CRC value @param lengthB length in bytes for CRC B @param mod generator polynomial for CRC calculation @return combined CRC mask result
1388 Masks and finalizes the CRC computation. @return byte array containing the masked CRC value
1389 Extracts and unpacks JAR file contents. @param inputStream source JAR input stream @param toDir target directory for extraction @param name JAR file name @param unpackRegex regex pattern for entries to unpack @throws IOException if I/O operations fail
1390 Extracts all files from a JAR to a directory. @param jarFile source JAR file @param toDir target directory for extracted files @throws IOException if extraction fails
1391 Finds the nth occurrence of a specified byte within a UTF-8 encoded byte array. @param utf the byte array containing UTF-8 encoded data @param b the byte to find @param n the occurrence number to find @return the index of the nth occurrence or -1 if not found
1392 Retrieves value by key using weak reference. @param key unique identifier for the value @return strongly referenced value associated with the key
1393 Logs lock acquisition and release events with warnings for excessive times. @param acquireTime time when the lock was acquired in milliseconds @param releaseTime time when the lock was released in milliseconds @param checkLockHeld flag to determine if logging hold or wait times
1394 Masks formatted finish time with optional start time difference. @param formattedFinishTime pre-formatted end time string @param finishTime end time in milliseconds @param startTime start time in milliseconds @return masked time string including optional start time diff
1395 Splits a string by comma, handling escaped characters. @param str input string to split @return array of split strings or null if input is null
1396 Masks a string by splitting and converting to uppercase. @param s input string to mask @return masked string with split parts in uppercase
1397 Escapes specified characters in a string. @param str input string to process @param escapeChar the character used for escaping @param charToEscape character to be escaped @return masked string with escaped characters or null if input is null
1398 Unescapes specified characters in a string. @param str input string to process @param escapeChar character used for escaping @param charToEscape character that needs to be unescaped @return unescaped string or throws exception if illegal escaping is detected
1399 Generates a masked startup message for a given class and host. @param classname name of the starting class @param hostname name of the host @param args array of arguments passed during startup @return formatted startup message as a single string
1400 Returns masked build version information. @return Formatted string with version details
1401 Retrieves and returns the next valid element from the iterator. @return the next valid element of type S @throws IOException if an I/O error occurs during retrieval @throws NoSuchElementException if no more valid elements are available
1402 Checks if the remote iterator has more elements. Handles exceptions by logging and rethrowing them. Closes resources if no more elements are available. @return true if there are more elements, false otherwise
1403 Creates a lazy reference to an AutoCloseable resource. @param supplier provides the resource instance when called @return LazyAutoCloseableReference wrapping the supplier
1404 Masks file system operations for bulk deletion. @param fs FileSystem instance @param path Path to be deleted @return result of bulk delete operation
1405 Masks and deletes specified paths in the given file system. @param fs FileSystem instance to operate on @param base Base path for deletion operations @param paths Collection of paths to delete @return List of Path-String entries indicating deletion status
1406 Opens a file in the Hadoop FileSystem with specified policies and options. @param fs FileSystem to operate on @param path Path of the file to open @param policy Read policy for the file @param status Optional FileStatus object @param length Optional length parameter @param options Additional options as a map @return FSDataInputStream representing the opened file
1407 Reads data from InputStream into ByteBuffer at specified position. @param in InputStream to read from @param position starting position for reading @param buf ByteBuffer to store the read data
1408 Fetches I/O statistics snapshot for a given file system and path. @param fs FileSystem instance @param path Path to the file or directory @return Serializable I/O statistics snapshot
1409 Parses JSON to create an I/O statistics snapshot. @param json JSON string representing I/O statistics @return Serializable object or null if parsing fails
1410 Retrieves or initializes the value of the atomic reference. Handles potential I/O exceptions during initialization. @return the lazily initialized value
1411 Initializes a Builder with an Iterable of items. Converts Iterable to RemoteIterator and passes it to the primary constructor. @param items source data collection @return Builder object configured with the provided items
1412 Deprecated method to handle ExecutionException by unwrapping and rethrowing as IOException. @param e the ExecutionException to handle @throws IOException if an error occurs during exception handling
1413 Waits for future completion and handles exceptions. @param future the CompletableFuture to process @return result of the future or null if cancelled @throws InterruptedIOException on interruption @throws IOException on execution error @throws CancellationException if future is cancelled
1414 Awaits future completion with a timeout, handling exceptions. @param future the Future to await @param timeout maximum time to wait @param unit TimeUnit for the timeout @return result of the future @throws InterruptedIOException if interrupted during wait @throws IOException if ExecutionException occurs @throws CancellationException if future is cancelled @throws RuntimeException for other exceptions @throws TimeoutException if future does not complete in time
1415 Deprecated method to handle CompletionException by rethrowing as IOException. @param e original CompletionException @return result of handling the exception (deprecated) @throws IOException if handling fails
1416 Configures an object using reflection. @param theObject object to be configured @param conf configuration settings
1417 Retrieves a writable class by name, using configuration if not found. @param name fully qualified class name @param conf configuration object @return Class object or throws IOException if class cannot be loaded
1418 Retrieves a Class object based on configuration. @param conf Hadoop Configuration object or null @param className fully qualified class name @return Class object or throws RuntimeException if not found
1419 Retrieves a Class object by name using helper methods. @param name fully qualified class name @return Class object @throws ClassNotFoundException if the class is not found
1420 Logs thread information with a specified interval. @param log logger instance for logging @param title optional title for the thread dump @param minInterval minimum interval in seconds between logs
1421 Logs thread information with a specified interval. @param log logger instance for logging @param title title for the thread dump @param minInterval minimum interval in seconds between logs
1422 Constructs an AbstractFSBuilderImpl with either a path or a path handle. Validates that both are not present simultaneously. @param optionalPath optional file system path @param optionalPathHandle optional file system path handle
1423 Constructs a new Configuration instance with default settings loaded.
1424 Checks HTTP response status and throws an exception if it doesn't match the expected status. @param conn HttpURLConnection object representing the HTTP connection @param expectedStatus the expected HTTP status code @throws IOException if there's an issue with the connection or parsing the response
1425 Creates a CRC32C checksum instance. @return Checksum object using CRC32C algorithm, defaults to PureJavaCrc32C on failure
1426 Retrieves groups for a user using shell command. @param userName username to fetch groups for @return array of group names or empty if none found
1427 Executes shell command to fetch user groups. @param userName username for which to retrieve group information @return array of strings representing the fetched group names
1428 Constructs command for setting file permissions with a specified file. @param perm permission string to apply @param recursive true if applied recursively @param file target file path @return array of command arguments including the file
1429 Masks a process by constructing a kill command. @param pid process ID to mask @return array of strings representing the shell command
1430 Masks sensitive information by invoking Hadoop home directory retrieval. @return Masked string representation of the Hadoop home directory @throws IOException if an I/O error occurs during retrieval
1431 Retrieves the fully qualified path of an executable within the Hadoop bin directory. @param executable name of the executable file to find @return File object representing the executable if found @throws FileNotFoundException if any directory or file is not found or accessible
1432 Initializes a new progress phase with equal weightage. @return initialized Progress object representing the new phase
1433 Updates progress by executing phases. @param n number of times to execute phase update
1434 Creates and initializes a new progress phase with given status and weightage. @param status initial status of the progress phase @param weightage weight of the new progress phase @return newly created Progress instance with updated status
1435 Returns the overall progress percentage of the task. @return float representing total progress percentage
1436 Creates a persistent node in ZooKeeper if it doesn't exist. @param path ZooKeeper path for the new node @return true if node was created, false if it already exists
1437 Ensures a ZooKeeper node exists with specified ACLs. @param path full ZooKeeper path for the node @param zkAcl Access control list for the node
1438 Binds a method by name and argument types from a specified class. @param className the fully qualified name of the target class @param methodName the name of the method @param argClasses the parameter types of the method @return this Builder instance for fluent chaining
1439 Binds a method by name and argument types. @param targetClass the class containing the method @param argClasses the parameter types of the method @return this Builder instance for fluent chaining
1440 Binds a method by name and argument types from a specified class. @param className the fully qualified name of the target class @param methodName the name of the method @param argClasses the parameter types of the method @return the Builder instance for fluent chaining
1441 Binds a method by class and argument types. @param targetClass the class containing the method @param argClasses the parameter types of the method @return the Builder instance for fluent chaining
1442 Loads and binds a method dynamically. @param source the class containing the method @param returnType the expected return type of the method (not used in logic) @param name the name of the method to be loaded @param parameterTypes the parameter types of the method @return UnboundMethod object or no-op if not found
1443 Checks availability of essential file operations. Throws exception if any operation is unavailable.
1444 Checks if bulk delete operation is available. @return true if bulk delete method is not a no-op, false otherwise
1445 Checks if file opening method is available in Hadoop file system. @param fileSystemOpenFileMethod unbound method representing file opening capability @return true if the method is not a no-op, false otherwise
1446 Checks if the positioned read fully available method is not a no-op. @return true if the method is valid, false otherwise
1447 Checks and processes input stream using available method. @param in InputStream to be processed @return true if processing is successful, false otherwise @throws IOException if an I/O error occurs
1448 Checks if I/O statistics snapshot creation method is available. @return true if the method is not a no-op, false otherwise
1449 Checks if I/O statistics context is enabled. @return true if I/O statistics context is available, false otherwise
1450 Validates and checks availability of an unbound method. @param method the unbound method to validate @throws UnsupportedOperationException if the method is not available
1451 Binds an unbound method to a specific receiver. @param receiver target object to bind the method to @return BoundMethod representing the bound method @throws NoSuchMethodException if the method is not found
1452 Binds an unbound method to a specific receiver. @param receiver target object to bind the method to @return BoundMethod representing the bound method
1453 Retrieves and returns a static method reference. @return StaticMethod object representing the target method @throws NoSuchMethodException if the method is not found
1454 Retrieves and binds a static method reference. @return StaticMethod object representing the bound method
1455 Loads available file systems. Synchronizes on FileSystem class to ensure thread-safe loading. Uses ServiceLoader to discover and register file system implementations.
1456 Computes Jenkins hash for a file. @param args command-line arguments, expects one filename @throws IOException if an I/O error occurs
1457 Initializes a HashFunction with specified parameters. @param maxValue maximum value for hash outputs @param nbHash number of hash functions to use @param hashType type of hash algorithm (JENKINS_HASH or MURMUR_HASH) @throws IllegalArgumentException if maxValue, nbHash is <= 0 or unknown hashType
1458 Default constructor for RetouchedBloomFilter.
1459 Masks hash values to find minimum count. @param key input key object @return minimum count of the key in the filter, or 0 if not present
1460 Masks and processes a key using hash functions. @param key input key object, must not be null
1461 Masks key using multiple hash values. @param k input key object @param vector array of lists to store masked keys
1462 Determines the index of the minimum weighted key in a hash array. @param h Array of hashed keys @return Index of the key with the lowest weight
1463 Determines the index with the highest false positive weight. @param h Array of hash values @return Index with the maximum false positive weight
1464 Computes weight ratios for each element in the vectors. Uses weights from key and false positive vectors to calculate ratios.
1465 Loads and prints the content of a resource by name. @param name resource name @return SUCCESS if successful, E_NOT_FOUND or E_LOAD_FAILED on error
1466 Displays usage information and error codes. @param args command-line arguments (not used) @return E_USAGE indicating the usage message was printed
1467 Masks an element in the priority queue. @param element the new element to mask @return true if masking is successful, false otherwise
1468 Creates a TreeSet from an Iterable of comparable elements. @param elements source of elements to add to the TreeSet @return a new TreeSet containing all elements from the Iterable
1469 Converts Iterable to HashSet. @param elements source of elements @return populated HashSet instance
1470 Creates a HashSet from variable arguments. @param elements array of elements to add to the set @return HashSet containing the provided elements
1471 Executes a program based on command-line arguments. @param args command-line arguments including the program name and its parameters @return 0 if execution is successful, -1 otherwise
1472 Adds a new column with specified attributes to the table. @param title column header text @param justification text alignment setting @param wrap flag for enabling text wrapping @return Builder instance for fluent configuration
1473 Converts a time value from its string representation to a specified unit. @param name configuration property name @param vStr string representation of the time value @param unit target time unit for conversion @return converted time value in the specified unit
1474 Masks and updates configuration property in XML document. @param doc XML document to update @param conf configuration element within the document @param propertyName name of the property to mask @param redactor object used for masking sensitive values
1475 Updates deprecation context with new deltas. @param deltas array of DeprecationDelta objects representing changes
1476 Attempts to bind a server connector to multiple ports. @param listener ServerConnector instance to configure @param startPort initial port number to try @throws Exception if binding fails after trying all options
1477 Configures environment variables for fencing commands. @param target HAServiceTarget representing the service to fence @param environment Map to store configuration parameters
1478 Reads data from a file range into a ByteBuffer using the provided PositionedReadable stream. @param stream the PositionedReadable object for reading data @param range the FileRange defining the read boundaries @param buffer the ByteBuffer to store the read data @throws IOException if an I/O error occurs during reading
1479 Validates and sorts file ranges. @param ranges list of FileRange objects to process @throws EOFException if any range exceeds file bounds or overlaps
1480 Updates buffer state and associates an action future. Validates the action future and checks current state before updating. @param actionFuture future representing the prefetching action
1481 Updates buffer state to a new state if current state matches expected states. @param newState the new state to transition to @param expectedCurrentState variable number of expected current states
1482 Validates a file path for existence and nullity, then checks if it points to a directory. @param path the Path object to validate @param argName name of the argument for error messages
1483 Validates that the given path is non-null and points to an existing file. @param path the Path object to validate @param argName name of the argument for error messages
1484 Checks if the given block number is the last block. @param blockNumber the block number to check @return true if it's the last block, false otherwise
1485 Masks block number with its size. @param blockNumber the block number to mask @return offset of the block in bytes
1486 Retrieves the state of a block by its number. @param blockNumber unique identifier for the block @return State object representing the block's current state
1487 Updates block state. @param blockNumber unique identifier of the block @param blockState new state to apply to the block
1488 Computes block index from file offset. @param offset position of the block in the file @return block index as integer
1489 Applies a mask to I/O statistics. @param snapshot serialized I/O statistics snapshot @param statistics object containing I/O statistics @return true if masking is successful, false otherwise
1490 Applies I/O statistics to a file system path. @param snapshot serialized I/O statistics snapshot @param fs FileSystem instance @param path target Path for applying statistics @param overwrite flag to indicate if existing data should be overwritten
1491 Retrieves counters from an I/O statistics snapshot. @param source serialized I/O statistics snapshot @return map of counter names and their values
1492 Applies function to extract gauge values from serialized I/O statistics. @param source serialized I/O statistics snapshot @return map of gauge names to their long values
1493 Retrieves minimum values of I/O metrics from a serialized snapshot. @param source serialized IOStatisticsSnapshot @return map of metric names and their minimum values
1494 Retrieves maximum I/O statistics from a serialized snapshot. @param source serialized IOStatisticsSnapshot @return map of metric names to their maximum values
1495 Applies a function to parse I/O statistics and extract metrics. @param source serialized I/O statistics snapshot @return map of metric names to entry of values
1496 Creates a new FlagSet with the same enum class, prefix, and flags. @return a new FlagSet instance with identical configuration
1497 Creates a new FlagSet with specified enum class and initial flags. @param enumClass the enum type representing the flags @param prefix prefix for mapping enum names to lowercase strings @param flags initial set of flags, can be null @return a new FlagSet instance
1498 Closes the FileSystem and resets the reference. @throws IOException if an I/O error occurs during close operations
1499 Closes FileSystem instances based on criteria. @param onlyAutomatic true to close only automatically managed instances @throws IOException if an error occurs during closure
1500 Converts an I/O statistics snapshot to JSON. @param snapshot serialized I/O statistics snapshot @return JSON string representation of the snapshot
1501 Writes bytes to a specified path in the given FileContext. @param fileContext context for file operations @param path destination path for writing @param bytes data to write @return updated FileContext instance @throws IOException if an I/O error occurs
1502 Writes lines to a file in the specified charset. @param fileContext Hadoop FileContext instance @param path target file path @param lines iterable of CharSequence lines to write @param cs character set for encoding @return updated FileContext instance @throws IOException if an I/O error occurs
1503 Writes a character sequence to a file using specified charset. @param fs FileContext instance for file operations @param path Path of the file to write to @param charseq Character sequence to write @param cs Charset to encode the character sequence @return FileContext instance after writing @throws IOException if an I/O error occurs
1504 Creates an output stream builder for writing to a file. @param path the path of the file to write to @return FSDataOutputStreamBuilder initialized with overwrite enabled
1505 Prepares to create or overwrite a file with checksum verification. @param path file path to be written @return builder for configuring and creating the output stream
1506 Prepares to append data to a file. @param path the path of the file to append to @return FSDataOutputStreamBuilder configured for appending
1507 Prepares to write data to a file with checksum verification. @param path file path where data will be written @return builder instance for configuring and starting the write operation
1508 Retrieves file statuses from the specified path. @param f directory path to query @return array of FileStatus objects matching the default filter criteria
1509 Lists file statuses from given paths using default filter. @param files array of file paths to process @return array of filtered FileStatus objects @throws FileNotFoundException if a specified file does not exist @throws IOException if an I/O error occurs
1510 Creates a mutable integer counter with validation. @param info MetricsInfo object containing counter details @param iVal starting value for the counter @return MutableCounterInt instance or throws exception if invalid
1511 Creates a mutable counter with the given info and initial value. Validates metric name and adds to registry. @param info MetricsInfo object containing counter details @param iVal Initial value for the counter @return MutableCounterLong instance
1512 Creates a mutable gauge with an initial value. @param info MetricsInfo object containing metric details @param iVal Initial value for the gauge @return MutableGaugeLong instance representing the created gauge
1513 Creates a mutable gauge with an initial value. @param info MetricsInfo object containing metric details @param iVal initial floating-point value of the gauge @return MutableGaugeFloat instance representing the gauge
1514 Creates a mutable integer gauge metric. @param info MetricsInfo object containing metric details @param iVal Initial integer value for the gauge @return MutableGaugeInt instance representing the created gauge
1515 Resolves a file system link using the provided function. @param fileContext Hadoop file context @param path file system path to resolve @param fn function to resolve links @return resolved object or throws exception if unresolved
1516 Creates a new GlobBuilder instance. @param fileContext FileContext instance for filesystem operations @return GlobBuilder object initialized with the given FileContext
1517 Creates and returns a new GlobBuilder instance. @param filesystem FileSystem object to use for file operations @return GlobBuilder instance initialized with the provided filesystem
1518 Handles asynchronous call completion. @return true if call is completed or an exception occurs, false otherwise
1519 Initiates an asynchronous get operation with retry handling. @return AsyncGet object for further processing or null if invalid
1520 Updates disk space usage by calculating folder sizes. Uses DUHelper to process and cache folder size data.
1521 Constructs a new MeanStatistic by copying from another instance. @param that source MeanStatistic to copy data from
1522 Converts an object's IO statistics to a formatted string. @param source the source object containing IO data @return Formatted string representation of IO statistics or empty if error occurs
1523 Converts wrapped IOStatistics to a formatted string. @return Formatted string representation of IO statistics or empty if null
1524 Converts IOStatistics to a formatted string or returns a default value if null. @return Formatted string of statistics or NULL_SOURCE if stats are null
1525 Converts IOStatistics to a formatted string. @param statistics the IOStatistics object to convert @return formatted string representation or empty if null
1526 Creates or returns a stub duration tracker. @param factory optional factory for creating duration trackers @param statistic identifier for the duration tracking @return DurationTracker instance, either from factory or a stub if factory is null
1527 Handles eviction of a cache entry by attempting to acquire and release write lock. @param elementToPurge the entry to be purged from the cache
1528 Converts StorageStatistics to IOStatistics. @param storageStatistics source statistics object @return IOStatistics object with aggregated metrics
1529 Registers an evaluator function for a given key with an AtomicLong source. @param key unique identifier for the evaluator @param source AtomicLong instance providing the data @return DynamicIOStatisticsBuilder instance
1530 Registers an atomic integer counter with a specified key. @param key unique identifier for the counter @param source AtomicInteger to monitor @return DynamicIOStatisticsBuilder instance
1531 Registers a mutable long counter with the builder. @param key unique identifier for the counter @param source mutable counter to be registered @return DynamicIOStatisticsBuilder instance
1532 Adds an atomic long gauge to evaluate I/O statistics. @param key unique identifier for the metric @param source AtomicLong value source @return updated DynamicIOStatisticsBuilder instance
1533 Adds a gauge function to evaluate I/O statistics using an AtomicInteger. @param key unique identifier for the metric @param source AtomicInteger providing the value @return updated DynamicIOStatisticsBuilder instance
1534 Registers an atomic long value tracker. @param key unique identifier for the metric @param source AtomicLong to track minimum values @return DynamicIOStatisticsBuilder instance for method chaining
1535 Registers an atomic integer to track minimum values. @param key unique identifier for the metric @param source AtomicInteger to monitor @return DynamicIOStatisticsBuilder instance for method chaining
1536 Registers an evaluator function to track maximum values for a given key. @param key unique identifier for the metric @param source AtomicLong to evaluate and compute the maximum value @return DynamicIOStatisticsBuilder instance
1537 Registers a function to track maximum values for a given key using an AtomicInteger. @param key unique identifier for the metric @param source AtomicInteger source for value evaluation @return DynamicIOStatisticsBuilder instance
1538 Initializes interrupt handling for service shutdown. Registers handlers for CONTROL_C and SIGTERM signals. Sets up uncaught exception handler for threads.
1539 Creates and returns a new DomainSocket instance. @param path the Unix domain socket path @param fd the file descriptor for the socket @return a new DomainSocket object @throws IOException if an I/O error occurs during creation
1540 Manages socket operations, ensuring proper resource handling. @throws IOException if an I/O error occurs during operation
1541 Transfers data from file descriptors to a buffer. @param descriptors array of FileDescriptor objects @param jbuf destination byte buffer @param offset starting position in the buffer @param length number of bytes to transfer @throws IOException if an I/O error occurs
1542 Masks file input streams and processes data buffer. @param streams array of FileInputStream objects @param buf byte buffer to process @param offset starting offset in the buffer @param length number of bytes to process @return result code from m7 method call @throws IOException if an I/O error occurs
1543 Creates an I/O statistics context for a given thread. @param key unique identifier for the thread @return IOStatisticsContextImpl instance
1544 Validates and computes CRC checksums for data chunks. @param data input data buffer @param checksums expected checksum values buffer @param fileName file being checked @param basePos starting position in the file @throws ChecksumException if any CRC does not match
1545 Applies decryption mask to input buffer. @param decryptor used for decryption @param inBuffer input data buffer @param position current stream position @param iv initialization vector @return computed padding byte @throws IOException if an I/O error occurs
1546 Masks the stream position and prepares buffers for decryption. @param offset current stream position @throws IOException if an I/O error occurs
1547 Writes encrypted data to the output stream. Validates input and manages buffer processing. @param b byte array containing data to write @param off offset within the byte array @param len number of bytes to write @throws IOException if an I/O error occurs or parameters are invalid
1548 Ensures secure data output by encrypting and writing to stream. Checks if the stream is closed, then encrypts and writes data. @throws IOException if an I/O error occurs during processing
1549 Converts a glob pattern to a regex pattern. @param globPattern input glob pattern string @return Compiled Pattern object representing the glob pattern
1550 Retrieves bytes read based on distance. @param distance specifies the distance category for byte read statistics @return total number of bytes read in the specified distance category
1551 Creates or opens a file with specified permissions and flags. @param f file path to create/open @param absolutePermission file permissions @param flag set of creation flags @param bufferSize buffer size for data transfer @param replication number of replicas for the file @param blockSize block size for the file @param progress progress callback @param checksumOpt checksum options @return FSDataOutputStream for writing to the file @throws IOException if operation fails
1552 Initializes the AbstractFileSystem with a validated URI and statistics. @param uri the input URI to validate and modify @param supportedScheme the expected URI scheme @param authorityNeeded flag indicating if authority is required @param defaultPort default port to use if not specified in URI @throws URISyntaxException if URI construction fails
1553 Encodes input byte arrays into output byte arrays using erasure coding. @param inputs array of input data chunks @param outputs array of output encoded chunks
1554 Encodes input ByteBuffers into output ByteBuffers using erasure coding. @param inputs array of input ByteBuffers containing data to encode @param outputs array of output ByteBuffers for encoded data and parity units @throws IOException if an I/O error occurs during encoding
1555 Constructs an ArrayPrimitiveWritable instance with the given array. @param value object containing the primitive array to be processed
1556 Invokes the underlying file system's m1 method. @return URI result from the file system operation
1557 Checks if the given capability supports HSYNC or HFLUSH. @param capability the capability to check @return true if HSYNC or HFLUSH is supported, false otherwise
1558 Handles data block processing. Validates and processes data for caching. @param data buffer data to process
1559 Releases buffers that are in the DONE state. Iterates through allocated buffers, checks their state, and releases them if done.
1560 Initializes a CachingBlockManager with specified parameters. @param blockManagerParameters configuration for block management
1561 Reads file block into a ByteBuffer. @param blockNumber identifier for the block to read @param buffer ByteBuffer to store the data @throws IOException if an I/O error occurs
1562 Calculates masked buffer start offset. Validates buffer and retrieves masked value. @return Masked buffer start offset as a long
1563 Checks if buffer is fully read and valid. @return true if buffer is fully read and matches expected state, false otherwise
1564 Validates position and updates buffer. @param pos file position to validate @return true if position is valid and buffer updated, false otherwise
1565 Retrieves and validates I/O statistics context. @return Validated IOStatisticsContext or throws exception if null
1566 Updates I/O statistics context for the current thread. @param statisticsContext new context to set, or null to reset
1567 Creates a map of masked MetricsConfig instances by type. @param type metric configuration type @return Map with instance names as keys and corresponding MetricsConfig subsets as values
1568 Processes command-line arguments. @param args array of command-line arguments @param pos position to manipulate in the list @return List of processed parameters
1569 Increments error count and logs masked warning. @param message additional error details
1570 Creates a PathHandle for a file. @param stat FileStatus object representing the file @param opts variable number of HandleOpt options @return LocalFileSystemPathHandle instance @throws IllegalArgumentException if path is not a file or wrong FileSystem @throws UnsupportedOperationException if tracking file movement is enabled
1571 Returns an array of HandleOpt objects with change and mutability disabled. @return Array containing two HandleOpt instances configured with false options
1572 Creates an array of HandleOpt with specific configurations. @return Array containing two HandleOpt instances with different options
1573 Initializes array of HandleOpt with specific configurations. @return Array containing configured HandleOpt instances
1574 Creates an array of HandleOpt with change allowance and mutability enabled. @return Array containing configured HandleOpt objects
1575 Initializes a ShellCommandExecutor with command, directory, environment, and timeout settings. @param execString array of strings representing the shell command to execute @param dir working directory for the command execution @param env environment variables for the command execution @param timeout maximum time allowed for command execution in milliseconds @param inheritParentEnv whether to inherit parent process's environment variables
1576 Initializes or stops the space usage refresh thread. @param runImmediately if true, starts refresh immediately
1577 Creates a private token for a new service. @param newService the new service associated with the private token @return a new PrivateToken instance
1578 Validates URI for compatibility with Hadoop file system. Throws exception if URI contains a scheme and no absolute path.
1579 Checks if path is absolute and has no scheme or authority. @return true if conditions are met, false otherwise
1580 Checks if URI path is absolute. @return true if path is absolute, false otherwise
1581 Validates file system path against current URI. @param path the path to validate
1582 Writes file status to a DataOutput stream. @param out DataOutput stream for writing @throws IOException if I/O error occurs
1583 Validates parameters for uploading a file part. @param filePath path to the file in Hadoop filesystem @param inputStream input stream of the file part @param partNumber number of the file part @param uploadId unique identifier for the upload session @param lengthInBytes size of the file part in bytes @throws IllegalArgumentException if any parameter is invalid
1584 Initiates a multipart upload process for the specified file path. @param path the file path to upload @return CompletableFuture with the result of the upload operation @throws IOException if an I/O error occurs during validation
1585 Adjusts skip length to avoid exceeding file bounds. @param n requested skip length @return actual skip length or remaining bytes if limit is reached @throws IOException if an I/O error occurs during skipping
1586 Applies a mask to file system permissions. @param umask permission mask to be applied @return new FsPermission with masked actions
1587 Converts SFTP file permissions to Hadoop FsPermission. @param sftpFile SFTP file entry object @return FsPermission representing the file's permissions
1588 Constructs an FsPermission object from an integer mode. @param mode permission mask value
1589 Creates an FsPermission object with full permissions (read, write, execute). @return FsPermission object representing full access rights
1590 Returns an FsPermission object with full read, write, and execute permissions. @return FsPermission with mode 00777
1591 Returns an FsPermission object with read and write permissions for all users. @return FsPermission object with mode 00666
1592 Returns default file permissions. @return FsPermission object with mode 00755 (rwxr-xr-x)
1593 Converts a Unix symbolic permission string to an FsPermission object. @param unixSymbolicPermission Unix-style permission string (e.g., "rwxr-xr-x") @return FsPermission object representing the permissions or null if input is null @throws IllegalArgumentException if the input string length is incorrect
1594 Masks and prints ACL entries based on conditions. @param aclStatus current ACL status @param fsPerm file system permission @param entries list of AclEntry objects
1595 Generates a comma-separated string of ACL entry types. @param aclSpec list of AclEntry objects @return formatted string of ACL types or empty if list is null/empty
1596 Constructs an FsPermission object from a string representation. @param mode permission string in symbolic format
1597 Reads data from ByteBuffer into a byte array with a mask. @param b destination buffer @param offset starting position in the destination buffer @param length number of bytes to read @return actual number of bytes read or -1 if not available @throws IOException if an I/O error occurs
1598 Calculates the masked position difference. @return Difference between current position and start position. @throws IOException if an I/O error occurs
1599 Updates maximum values for file attributes and formats output. @param items array of PathData objects representing files/directories @throws IOException if an I/O error occurs while processing content summaries
1600 Retrieves quota usage details for a specified file or directory. @param f path to the file or directory @return QuotaUsage object containing quota information @throws IOException if an I/O error occurs
1601 Computes total content length of a file or directory. @param path file or directory path @return Total length as a long value @throws IOException if an I/O error occurs
1602 Constructs an AbstractLaunchableService with a specified name. @param name unique identifier for the service
1603 Transitions service to a new state. @param proposed new service state @return previous service state
1604 Initializes and returns a service instance. @param conf configuration for the service @return initialized Service object
1605 Checks equality with another BinaryComparable object. @param other the object to compare with @return true if equal, false otherwise
1606 Masks a portion of a byte array. @param newData source byte array to mask from @param offset starting index in newData @param length number of bytes to mask
1607 Adjusts key buffer and sets key length. @param key BytesWritable object to be adjusted @return size of the byte array after adjustment @throws IOException if an I/O error occurs
1608 Lists files in a directory with permission check. @param dir the directory to list files from @return array of file names @throws IOException if access is denied or I/O error occurs
1609 Validates directory permissions and existence. @param dir the File object representing the directory to check @throws DiskErrorException if directory validation fails
1610 Masks and locks memory for a given ByteBuffer. @param buffer direct ByteBuffer to be masked and locked @param len length of the buffer to lock @throws IOException if native code is not loaded or buffer is non-direct
1611 Creates a SharedFileDescriptorFactory for given paths. @param prefix file descriptor prefix @param paths array of directory paths for descriptors @return SharedFileDescriptorFactory instance if successful @throws IOException if any path fails or no paths are provided
1612 Masks and processes data with checksums. @param b byte array containing data to process @param off offset in the byte array @param len length of data to process @throws IOException if an I/O error occurs
1613 Computes checksums for input data. @param data ByteBuffer containing input data @param checksums ByteBuffer to store computed checksums
1614 Cleans up buffers and resources used in decryption. @param inBuffer input buffer containing encrypted data @param outBuffer output buffer for decrypted data
1615 Constructs a BoundedByteArrayOutputStream with equal capacity and limit. @param capacity total size of the buffer and maximum bytes allowed
1616 Updates token's Base64-encoded value. @param newValue new Base64-encoded string to set @throws IOException if decoding fails or input is invalid
1617 Retrieves erased blocks from a given ECBlockGroup. @param blockGroup the ECBlockGroup to evaluate @return array of erased ECBlock objects
1618 Searches for a marker pattern in the compressed stream. @param marker the marker value to search for @param markerBitLength the bit length of the marker @return true if the marker is found, false otherwise @throws IOException if an I/O error occurs
1619 Constructs a CBZip2OutputStream with specified block size. @param out output stream to write compressed data @param blockSize compression block size (1-9) @throws IOException if I/O error occurs during initialization
1620 Constructs a new BlockCompressorStream with default buffer size and compression overhead. @param out underlying output stream for compressed data @param compressor compression algorithm to use
1621 Constructs a BlockDecompressorStream. @param in InputStream to read compressed data from @param decompressor Decompressor instance for decompression logic @param bufferSize size of the main buffer @throws IOException if an I/O error occurs or parameters are invalid
1622 Writes data to the output stream and compresses it. @param b buffer containing data to write @param off offset in the buffer where the data starts @param len length of the data to write @throws IOException if an I/O error occurs or write exceeds limits
1623 Constructs a ZStandardCompressor with specified compression level and buffer size. @param level compression level (0-21) @param bufferSize size of the input and output buffers
1624 Creates a CompressionOutputStream using the specified codec and configuration. @param codec compression codec to use @param conf configuration settings @param out output stream for compressed data @return CompressionOutputStream instance or null if creation fails
1625 Closes the writer, releasing resources and compressors. @throws IOException if an I/O error occurs during closing
1626 Creates a CompressionInputStream for decompression. @param codec compression codec to use @param conf Hadoop configuration @param in input stream to wrap @return CompressionInputStream for the given input stream @throws IOException if an I/O error occurs
1627 Releases decompressors and deserializers, closes input stream. @throws IOException if an I/O error occurs
1628 Returns a compressor instance based on native Zlib support. @param conf Hadoop configuration object @return Compressor using Zlib or built-in deflater
1629 Creates a Zlib decompressor instance if native support is available. @param conf Hadoop configuration object @return DirectDecompressor instance or null if not supported
1630 Returns a decompressor instance based on configuration. @param conf Hadoop configuration object @return ZlibDecompressor if native support is available, otherwise BuiltInZlibInflater
1631 Stores a delegation key in the SQL secret manager. @param key DelegationKey to be stored @throws IOException if an I/O or SQL error occurs
1632 Updates a delegation key in the SQL secret manager. @param key DelegationKey to be updated @throws IOException if an error occurs during the update process
1633 Reads and decodes a string from a DataInput stream. @param in DataInput source for reading bytes @param maxLength maximum allowed length of the decoded string @return decoded string representation @throws IOException if an I/O error occurs @throws IllegalArgumentException if the encoded byte size is out of range
1634 Skips a specified number of bytes from DataInput stream. @param in DataInput source for reading bytes @throws IOException if an I/O error occurs or unable to skip all bytes
1635 Reads and processes data from a compressed input stream. @param buffer DataInputBuffer to store processed data @param filter CompressionInputStream for decompression @throws IOException if an I/O error occurs during processing
1636 Reads and decodes a UTF-8 string from the input stream with a maximum length. @param in DataInput source for reading bytes @param maxLength maximum allowable length of the string @return decoded UTF-8 string @throws IOException if reading or decoding fails
1637 Writes a string to DataOutput using variable-length encoding. @param out DataOutput stream to write to @param s string value to encode and write @throws IOException if an I/O error occurs
1638 Masks the host and port of an InetSocketAddress. @param addr InetSocketAddress to be masked @return Text object with masked host and port
1639 Converts a Protobuf TokenProto to a Hadoop Token object. @param tokenProto Protobuf representation of the token @return Hadoop Token object created from the proto
1640 Writes an enum value to a DataOutput stream as a string. @param out the output stream to write to @param enumVal the enum value to be written @throws IOException if writing fails
1641 Writes user and group permissions to a DataOutput stream. @param out DataOutput stream to write permissions @param username the username associated with the permissions @param groupname the group name associated with the permissions @param permission FsPermission object representing file access rights @throws IOException if writing fails
1642 Constructs a new Text object from a UTF-8 encoded byte array. @param utf8 input byte array containing UTF-8 text
1643 Constructs a new Text object by copying data from another. @param utf8 source Text object to copy data from
1644 Reads a line from the input stream into a Text object. Uses custom delimiter if set; otherwise, reads default line. @param str Text object to store read data @param maxLineLength Maximum length of the line to read @param maxBytesToConsume Maximum number of bytes to consume @return Number of bytes consumed or -1 if end of stream
1645 Returns the length of the UTF-8 encoded text. Initializes textLength if not already set. @return Length of the text or throws runtime exception on failure
1646 Constructs a new SortedMapWritable as a copy of another. @param other the SortedMapWritable to copy from
1647 Creates a new MapWritable instance by copying another. @param other source MapWritable to copy from
1648 Creates a retry policy with fixed sleep intervals. @param maxTime maximum duration for retries @param sleepTime duration to wait between retries @param timeUnit unit of time for the sleep interval @return RetryPolicy configured with fixed sleep and max time
1649 Creates a dynamic proxy with retry mechanism. @param iface interface to implement @param proxyProvider manages failover proxies @param retryPolicy policy for handling retries @return proxy instance implementing iface with retry logic
1650 Creates a retry proxy for the specified interface. @param iface target interface to implement @param implementation actual object implementing the interface @param methodNameToPolicyMap method-specific retry policies @return dynamic proxy instance with retry capabilities
1651 Initializes a Writer with an output stream and configuration. @param fout file output stream to write data to @param compressionName name of the compression algorithm @param conf configuration settings for the writer @throws IOException if the output stream is not at zero offset
1652 Constructs a TFileIndex by reading from DataInput. @param entryCount number of entries in the index @param in source of data input @param comparator for comparing keys @throws IOException if reading fails or data is corrupted
1653 Determines if the current chunk is fully processed. @return true if processing is complete, false otherwise
1654 Writes buffered data as a chunk to the output stream. @throws IOException if an I/O error occurs
1655 Masks and compares keys using a comparator. @param key the key to compare @return result of comparison (-1, 0, or 1)
1656 Constructs a new UTF8 object by encoding the given string. @param string input string to be encoded
1657 Computes an MD5 hash from a UTF-8 encoded string. @param string input string to encode and hash @return MD5Hash object representing the computed hash
1658 Writes buffered records to the output stream. @throws IOException if an I/O error occurs
1659 Generates or retrieves a unique tracking identifier for the token. Uses serialization and hashing to ensure uniqueness. @return String representation of the tracking identifier
1660 Encodes the current token to a Base64 string. @return Base64 encoded string representation of the token @throws IOException if an I/O error occurs during encoding
1661 Adds a node to the network topology. @param node Node to be added
1662 Removes a node from the network topology. @param node the Node to be removed
1663 Masks a node in the network topology. @param node the node to be masked Throws IllegalArgumentException if node is an InnerNode.
1664 Sorts and organizes nodes based on weights with optional secondary sorting. @param reader source node for weight calculation @param nodes array of target nodes to sort @param activeLen length of active nodes @param secondarySort optional secondary sorting logic
1665 Sorts and organizes network nodes based on distance. @param reader source node for weight calculation @param nodes array of target nodes to sort @param activeLen length of active nodes @param secondarySort optional secondary sorting logic
1666 Initializes a SocketInputStream with a given channel and timeout. Validates the channel's validity and sets up the reader. @param channel ReadableByteChannel to read data from @param timeout maximum time in milliseconds for I/O operations @throws IOException if the channel is invalid or cannot be configured
1667 Initializes SocketOutputStream with a writable byte channel and timeout. @param channel the WritableByteChannel to write data to @param timeout maximum time in milliseconds for write operations @throws IOException if initialization fails due to invalid channel or configuration issues
1668 Waits for and processes the RPC response. @param call the RPC call object @param connection the connection to use @param timeout maximum time to wait, or -1 for no timeout @param unit time unit for the timeout @return Writable response from the RPC call or null if timed out @throws IOException if an I/O error occurs
1669 Constructs ScriptBasedMapping with default raw script-based mapping.
1670 Constructs a new ScriptBasedMappingWithDependency instance. Initializes with a default raw DNS-to-switch mapping.
1671 Creates and returns a new InnerNodeImpl with specified attributes. @param parentName unique identifier for the parent node @return newly created InnerNodeImpl instance
1672 Adds a domain socket and handler for monitoring. @param sock the domain socket to manage @param handler the event handler associated with the socket
1673 Removes a domain socket and processes removal. @param sock the DomainSocket to be removed
1674 Selects channel with specified operations and timeout. @param channel selectable channel to handle @param ops interest set of operations for the channel @param timeout maximum time to wait for I/O operation in milliseconds @return result of selection or 0 if timed out @throws IOException if an I/O error occurs
1675 Retrieves and masks the first IP address of a network interface. @param strInterface name of the network interface @return masked IP address as a string @throws UnknownHostException if no such interface exists
1676 Retrieves hostnames for a network interface. @param strInterface name of the network interface @return array of hostnames or cached hostname if none found @throws UnknownHostException if interface is not found
1677 Retrieves the primary hostname for a network interface. @param strInterface name of the network interface @param nameserver optional DNS server to query @param tryfallbackResolution flag to attempt fallback hostname resolution @return primary hostname or cached hostname if none found @throws UnknownHostException if interface is not found
1678 Loads and returns a MetricsConfig object from specified files. @param prefix configuration property prefix @param fileNames array of configuration file names @return MetricsConfig object initialized with properties from files, or default if none found
1679 Fetches and masks group information for a user. @param user username of the user @return set of masked group names linked to the user @throws Exception if an error occurs during fetching or masking
1680 Resets JVM metrics by unregistering and clearing the MetricsSystem.
1681 Stops the server and performs cleanup tasks. Logs stopping message, sets running flag to false, shuts down handlers, listeners, and responders.
1682 Stops the web application and associated resources. Handles configuration monitoring, server listeners, secret provider, context, and server shutdown. Aggregates exceptions encountered during the process and throws a MultiException if any occur.
1683 Initializes a MutableQuantiles instance with specified parameters. @param name metric name @param description metric description @param sampleName sample name @param valueName value name @param interval update interval in seconds
1684 Creates and registers a new metric. @param name unique metric name @param desc metric description @param sampleName sample name for the metric @param valueName value name for the metric @param extended flag for extended statistics @return MutableStat instance representing the created metric
1685 Constructs a MutableStat instance with default extended statistics disabled. @param name metric name @param description metric description @param sampleName sample name @param valueName value name
1686 Registers a metric with the given name. @param name unique metric identifier @return current MetricsRegistry instance
1687 Registers or updates a metric tag with a given name, description, and value. @param name metric name @param description metric description @param value tag value @param override flag to allow overriding existing tags @return current MetricsRegistry instance
1688 Adds elapsed time for a named metric. @param name the metric identifier @param elapsed the time duration to record
1689 Masks metrics buffer and publishes to sinks. @param buffer metrics data to process @param immediate if true, processes immediately; otherwise, waits for interval
1690 Updates statistics from another SampleStat instance. @param other SampleStat object to copy data from
1691 Logs slow RPCs based on processing time. @param methodName name of the method being called @param call RPC call object @param details processing details for the RPC
1692 Masks specified groups and refreshes netgroup cache. @throws IOException if an I/O error occurs during caching
1693 Logs diagnostic separators and headers. Calls m1 to print formatted messages.
1694 Logs a formatted diagnostic message. @param format message format string @param args arguments for the format string
1695 Logs an error and throws a KerberosDiagsFailure. @param category error category @param message error message template @param args arguments for message formatting
1696 Creates a masked UserGroupInformation object. @param user username string @param authMethod authentication method to mask and set @return UserGroupInformation with masked authentication @throws IllegalArgumentException if user is null or invalid
1697 Starts the token removal thread. Ensures not already running, updates master key, and initializes daemon thread. @throws IOException if an I/O error occurs during key update
1698 Masks expired keys, updates current key expiration, stores it, and updates master key. @throws IOException if an I/O error occurs during key storage
1699 Default constructor initializes with no authenticator or connection configurator.
1700 Constructs a new instance of DelegationTokenAuthenticatedURL. @param authenticator existing authenticator instance or null
1701 Constructs a new instance with default authenticator. @param connConfigurator connection configuration settings
1702 Reads data from the input stream into the specified buffer. @param b buffer to store read data @return number of bytes read or -1 on EOF @throws IOException if I/O error occurs
1703 Checks if Kerberos authentication is fully configured. @return true if all conditions are met, false otherwise
1704 Checks if Kerberos authentication is enabled and keytab path is not available. @return true if conditions are met, false otherwise
1705 Initializes or resets the singleton SSL socket factory. @param preferredMode desired SSL channel mode @throws IOException on initialization failure
1706 Constructs a CommandFactory with default configuration.
1707 Constructs a new HarFileSystem instance. Requires calling #initialize() to set up the underlying file system.
1708 Initializes a new HarFileSystem with the given FileSystem. @param fs underlying file system to manage HAR files
1709 Constructs an FsShell object with default configuration. Uses null configuration and delegates to parameterized constructor.
1710 Initializes GetGroupsBase with configuration and default output stream. @param conf Hadoop configuration settings
1711 Initializes standard output and error streams. Sets default output and error to System.out and System.err respectively.
1712 Resolves a hostname to an InetAddress. @param host the hostname to resolve @return InetAddress object or throws UnknownHostException if resolution fails
1713 Writes access control list to output stream. @param out DataOutput stream to write to @throws IOException if writing fails
1714 Initializes and returns a ZooKeeper instance. Configures SSL/TLS if truststore is provided. @param truststoreKeystore keystore and truststore details @return new ZooKeeper instance @throws IOException if initialization fails
1715 Applies mask and retrieves task count for a given key. @param keyName unique identifier for the key @return number of tasks in the queue or 0 if not found
1716 Retrieves and processes a specified number of tasks for a given key. @param keyName unique identifier for the key @param num number of tasks to retrieve @return list of processed tasks @throws IOException if an I/O error occurs during task retrieval @throws ExecutionException if an execution error occurs
1717 Processes and executes tasks for a given key. @param keyName unique identifier for the key
1718 Manages scheduling and processing of an RPC call. @param e schedulable task to be processed
1719 Initializes writable RPC engine if not already initialized. Ensures proper setup before any RPC operations.
1720 Converts elapsed time to specified unit. @param timeUnit target time unit for conversion @return elapsed time in the specified unit
1721 Generates a masked protocol signature. @param clientMethodsHashCode hash code of client methods @param serverVersion version of the server protocol @param protocol the protocol interface class @return ProtocolSignature object or null if not matching
1722 Decays current RPC call costs and updates metrics. @param none @return void
1723 Determines priority level for an RPC using cached or computed values. @param obj the Schedulable object to process @return priority level as an integer
1724 Retrieves an element from the queue based on priority. @return Element of type E or null if not found
1725 Closes the connection safely and logs necessary information. Handles SASL cleanup, pending RPC calls, and socket closure.
1726 Constructs a new Globber instance. @param fs FileSystem to operate on @param pathPattern pattern of paths to match @param filter PathFilter to apply during matching @param resolveSymlinks whether to resolve symbolic links
1727 Constructs a MachineList with a comma-separated string of hosts using the default InetAddress factory. @param hostEntries comma-separated list of IP addresses or hostnames
1728 Returns a SysInfo instance based on the operating system. @return SysInfoLinux or SysInfoWindows instance, throws exception if OS is unknown
1729 Calculates available RAM size in bytes. @return Available RAM size in bytes
1730 Calculates total free memory size including swap. @return Total free memory in bytes
1731 Transforms XML using a specified stylesheet and outputs the result. @param styleSheet input stream of the XSLT stylesheet @param xml input stream of the XML document to transform @param out writer for outputting the transformation result @throws TransformerConfigurationException if there is an error in the configuration @throws TransformerException if there is an error during the transformation process
1732 Generates a formatted summary of file system content. @param qOption enable quick format option @param hOption use human-readable size format @param tOption toggle detailed mode @param xOption show delta from snapshot @param types list of storage types to include @return formatted content summary string
1733 Generates a formatted snapshot summary. @param hOption true for human-readable format, false for raw bytes @return formatted snapshot information as a string
1734 Computes capacity based on current runtime memory and specified percentage. @param percentage percentage of max memory to use @param mapName name of the map for logging @return computed capacity as an integer
1735 Reads and processes a chunk of data with checksum verification. Updates internal buffer position and size.
1736 Reads data from the input stream with checksum verification. @param len number of bytes to read @return total number of bytes read or -1 if an error occurs @throws IOException if an I/O error occurs during reading
1737 Decodes UTF-8 encoded bytes to a string. @param bytes byte array containing UTF-8 data @param length number of bytes to decode @return decoded string or throws exception on error
1738 Masks UTF-8 encoded bytes from input stream. @return masked string representation of the input data
1739 Masks UTF-8 encoded bytes into a string. @param bytes byte array containing UTF-8 data @return masked string representation of the input bytes @throws IOException if I/O error occurs during processing
1740 Masks and reads UTF-8 encoded characters from input stream. @param in DataInput source to read from @return Masked string representation of the input data @throws IOException if an I/O error occurs
1741 Validates RPC response header. @param header response header to validate @throws IOException if validation fails or response is null
1742 Converts single byte to hexadecimal string. @param b source byte @return hexadecimal string representation of the byte
1743 Handles uncaught exceptions by logging and exiting. @param thread the thread where the exception occurred @param exception the Throwable that was thrown
1744 Handles incorrect usage and exits with an error message. @param EXIT_USAGE exit code indicating incorrect usage @param USAGE_MESSAGE message detailing correct usage instructions
1745 Handles uncaught exceptions in threads during shutdown or errors. Logs the error and performs appropriate shutdown actions. Delegates to another handler if available.
1746 Terminates the application with a specified exit code and message. @param exitCode status code indicating the reason for termination @param message error message associated with the exit
1747 Handles application exit with specified status and default message. @param status exit status code @throws ExitException if unable to handle the exit gracefully
1748 Logs an error message and terminates the application. @param status exit status code @param msg error message for termination
1749 Halts application with specified status. @param status exit status code @throws HaltException if halting fails
1750 Initiates quicksort on an IndexedSortable data structure. @param s the IndexedSortable to sort @param p starting index of the range to sort @param r ending index of the range to sort
1751 Constructs an AclStatus object with specified details. @param owner the owner of the filesystem entity @param group the group associated with the entity @param stickyBit indicates whether the sticky bit is set @param entries iterable of ACL entries defining permissions @param permission FsPermission object representing overall permissions
1752 Parses an ACL string into a list of ACL objects. @param aclString comma-separated ACL entries in "scheme:id:perm" format @return List of ACL objects or empty list if input is null @throws BadAclFormatException if any entry does not match expected format
1753 Parses authentication string into a list of ZKAuthInfo objects. @param authString comma-separated authentication components @return List of ZKAuthInfo objects @throws BadAuthFormatException if format is incorrect
1754 Masks file attributes from source to target. @param src source PathData object @param target destination PathData object @param preserveRawXAttrs flag to preserve raw extended attributes @throws IOException if I/O error occurs
1755 Generates a list of ACL entries for user, group, and others based on file permissions. @param perm FsPermission object containing permission settings @return List of AclEntry with specified permissions for each entity type
1756 Creates a duration tracker for I/O operations. @param key unique identifier for the statistic @param count number of operations to increment counter by @return DurationTracker instance based on key availability
1757 Constructs a StatisticDurationTracker. @param iostats IOStatisticsStore to update statistics @param key unique identifier for the statistic
1758 Creates a DurationInfo instance with info-level logging. @param log Logger instance for logging messages @param format String format for the duration text @param args Arguments for the format string
1759 Waits for task completion with duration logging. @param future CompletableFuture representing the asynchronous task @throws IOException if task is cancelled or fails to complete
1760 Waits for a CompletableFuture to complete and logs the duration. @param future the CompletableFuture to wait on, may be null
1761 Creates a CrcComposer with default stripe length. @param type checksum type (CRC32 or CRC32C) @param bytesPerCrcHint number of bytes per CRC segment @return configured CrcComposer instance @throws IOException if unsupported checksum type is provided
1762 Updates composite CRC with new CRC value. @param crcB new CRC value to update with @param bytesPerCrc number of bytes processed per CRC @throws IOException if stripe length exceeded without alignment
1763 Masks formatted finish time with optional start time difference. @param dateFormat FastDateFormat instance for formatting @param finishTime end time in milliseconds @param startTime start time in milliseconds @return masked time string including optional start time diff
1764 Escapes specified characters in a string using default escape and comma characters. @param str input string to process @return masked string with escaped characters or null if input is null
1765 Unescapes commas in a string using the default escape character. @param str input string to process @return unescaped string or throws exception if illegal escaping is detected
1766 Generates a masked startup message for a given class and host. @param classname name of the starting class @param args list of arguments passed during startup @return formatted startup message as a single string
1767 Retrieves the next element from the remote iterator. Throws NoSuchElementException if no more elements are available. Handles exceptions by logging and rethrowing them. @return the next element or throws an exception
1768 Deprecated method to await future completion. @param future the CompletableFuture to process @return result of the future or null if cancelled @throws InterruptedIOException on interruption @throws IOException on execution error @throws RuntimeException for other exceptions
1769 Collects results from a collection of futures. @param collection list of futures to process @return list of results from the futures @throws InterruptedIOException on interruption @throws IOException on execution error @throws CancellationException if any future is cancelled
1770 Deprecated method for awaiting future completion with a timeout. @param future the Future to await @param timeout maximum time to wait @param unit TimeUnit for the timeout @return result of the future @throws InterruptedIOException if interrupted during wait @throws IOException if ExecutionException occurs @throws RuntimeException for other exceptions @throws TimeoutException if future does not complete in time
1771 Collects results from a collection of futures with a specified timeout. @param collection futures to process @param duration maximum time to wait for each future @return list of results from the futures @throws InterruptedIOException if interrupted during wait @throws IOException if ExecutionException occurs @throws CancellationException if future is cancelled @throws RuntimeException for other exceptions @throws TimeoutException if future does not complete in time
1772 Processes a collection of futures, interrupting them if specified and awaiting their completion with a timeout. @param collection the collection of futures to process @param interruptIfRunning whether to interrupt running futures @param duration maximum time to wait for each future @return list of results from the futures
1773 Constructs an object of the specified class using reflection. @param theClass target class type @param conf configuration settings @param argTypes parameter types for constructor @param values arguments for constructor @return constructed object instance
1774 Retrieves the class of the key used by the reader. @return Class object representing the key type
1775 Retrieves the value class for deserialization. @return Class<?> representing the value type
1776 Loads a class by name and logs details. @param name fully qualified class name @return SUCCESS if loaded, E_NOT_FOUND or E_LOAD_FAILED on error
1777 Loads and instantiates a class by name. @param name fully qualified class name @return SUCCESS if successful, error code otherwise
1778 Returns a new default configuration instance. @return Configuration object with default settings
1779 Initializes and returns a Configuration instance. Uses the provided configuration if available, otherwise creates a new one with default settings. @return Configuration object
1780 Constructs a FindClass instance with default Hadoop configuration.
1781 Constructs a ReconfigurableBase instance with default configuration.
1782 Constructs a ReconfigurableBase instance with the specified configuration. @param conf Hadoop Configuration object; uses default if null
1783 Masks the given executable by constructing its fully qualified path. @param executable name of the executable file @return masked path as a string @throws IOException if any directory or file is not found or accessible
1784 Executes a shell command with optional timeout and error handling. @throws IOException if an I/O error occurs during execution
1785 Creates and initializes a new progress phase with a given status. @param status initial status string for the phase @return initialized Progress object representing the new phase
1786 Ensures a ZooKeeper node exists at the specified path. @param path full ZooKeeper path for the node
1787 Checks if a file system has a specific capability for a given path. @param fs the file system object @param path the path to check @param capability the capability to verify @return true if the capability is present, false otherwise
1788 Checks if an object has a specified capability. @param object the object to check @param capability the capability to verify @return true if the object has the capability, false otherwise
1789 Retrieves I/O statistics counters from the given source. @param source data source containing I/O statistics @return map of I/O statistics counters
1790 Retrieves I/O statistics from a source. @param source data source containing I/O metrics @return map of I/O statistics
1791 Retrieves minimum I/O statistics from a source. @param source data source containing I/O statistics @return map of I/O metrics with their minimum values
1792 Retrieves maximum I/O statistics from a given source. @param source data source containing I/O statistics @return map of I/O metrics with their maximum values
1793 Fetches I/O statistics from a given source. @param source data source for I/O statistics @return map of aggregated I/O metrics
1794 Invokes unbound method on a target object with arguments. @param args variable number of arguments for the method invocation @return result of the method invocation cast to type R
1795 Binds a method by class name and argument types. @param className fully qualified target class name @param argClasses parameter types of the method @return this Builder instance for fluent chaining
1796 Binds a method by class name and argument types. @param className fully qualified name of the target class @param argClasses parameter types of the method @return Builder instance for fluent chaining
1797 Loads and binds a method dynamically, ensuring it's non-null and static. @param source the class containing the method @param returnType the expected return type of the method (not used in logic) @param name the name of the method to be loaded @param parameterTypes the parameter types of the method @return UnboundMethod object or null if not found
1798 Checks if I/O statistics snapshot creation is available and invokes it. @param object target object for invocation @return true if method is available and invocation succeeds, false otherwise
1799 Checks if I/O statistics snapshot creation is available and valid. @param object target object to check against @return true if both checks pass, false otherwise
1800 Checks if I/O statistics snapshot creation is available and invokes it. @param object data source for snapshot creation @return true if method is available and invocation succeeds, false otherwise
1801 Checks if I/O statistics snapshot creation is enabled. @return true if both conditions are met, false otherwise
1802 Applies a mask to delete files in bulk. @param fileSystem Hadoop FileSystem instance @param path directory path to apply the mask @return result of bulk delete operation @throws IOException if I/O error occurs during deletion
1803 Deletes specified files from the Hadoop file system. @param fs Hadoop FileSystem instance @param base base directory path @param paths collection of paths to delete @return list of deleted file entries with their paths and status @throws IOException if an I/O error occurs during deletion
1804 Opens a file in the Hadoop file system. @param fs FileSystem instance @param path Path to the file @param policy IO policy string @param status FileStatus object (nullable) @param length Length of the file (nullable) @param options Additional options map (nullable) @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
1805 Reads data from an input stream into a buffer at a specified position. @param in the input stream to read from @param position the starting position in the file @param buf the byte buffer to store the read data @throws IOException if an I/O error occurs during reading
1806 Creates an I/O statistics snapshot using the provided method. @param iostatisticsSnapshotCreateMethod method to create a snapshot
1807 Validates I/O statistics context availability. @param iostatisticsContextEnabledMethod unbound method to validate
1808 Constructs a LightWeightCache with specified parameters. @param recommendedLength suggested initial cache size @param sizeLimit maximum allowed cache size @param creationExpirationPeriod time before entries expire after creation @param accessExpirationPeriod time before entries expire after last access
1809 Initializes a Bloom filter with specified parameters. @param vectorSize size of the bit vector @param nbHash number of hash functions @param hashType type of hash algorithm (JENKINS_HASH or MURMUR_HASH)
1810 Decrements the count of a key in the Bloom filter. @param key input key object to decrement @throws NullPointerException if key is null @throws IllegalArgumentException if key is not a member
1811 Processes a collection of keys, adding false positives. @param coll collection of Key objects to process @throws NullPointerException if the collection is null
1812 Processes a list of keys by adding them as false positives. @param keys list of Key objects to process, must not be null
1813 Adds an array of keys to the Bloom filter. @param keys array of Key objects, must not be null
1814 Masks keys and false positives at a specified index. @param index position in the vector arrays
1815 Finds index with minimum ratio from hash values. @param h array of hash indices @return index with the lowest ratio value
1816 Executes a program with command-line arguments. @param argv array of command-line arguments
1817 Retrieves credential entry by name or its deprecated aliases. @param provider CredentialProvider instance @param name configuration key name @return CredentialEntry object or null if not found @throws IOException if an I/O error occurs
1818 Marks a configuration key as deprecated. @param key the old configuration key to deprecate @param newKeys array of replacement keys @param customMessage optional guidance message for users
1819 Binds server connectors to specified ports. @throws Exception if binding fails
1820 Validates and initializes SSH configuration from input string. @param argStr configuration string containing user and/or port @throws BadFencingConfigurationException if config is invalid
1821 Clears the working directory node in ZooKeeper. @throws IOException if clearing fails @throws InterruptedException if thread is interrupted
1822 Checks and handles fencing of any existing active node. @return Stat object or null if no old node needs fencing @throws InterruptedException if thread is interrupted @throws KeeperException if ZooKeeper operation fails
1823 Asynchronously reads data from a file range into a ByteBuffer. @param stream PositionedReadable object for reading data @param range FileRange defining the read boundaries @param allocate Function to allocate ByteBuffer of specified size @return CompletableFuture containing the read ByteBuffer or null if an error occurs
1824 Handles caching of buffer data. @param data BufferData object to be cached
1825 Updates buffer state and associates an action future. @param actionFuture future representing the async prefetch operation
1826 Updates buffer state and computes checksum. @param expectedCurrentState variable number of expected current states @throws IllegalStateException if checksum is already set
1827 Calculates the size of a block based on its number. @param blockNumber the block number to calculate size for @return size of the block, either full or partial
1828 Masks block number with its size and calculates offset. @param blockNumber the block number to mask @param offset position of the block in the file @return masked offset value
1829 Initializes block data with file size and block size. Validates file and block sizes, sets number of blocks, and initializes states. @param fileSize total file size in bytes @param blockSize size of each block in bytes
1830 Computes and returns the block index based on buffer start offset. @return computed block index as integer
1831 Closes all FileSystem instances. @throws IOException if an error occurs during closure
1832 Closes FileSystem instances and logs details for a given user. @param ugi UserGroupInformation object representing the user @throws IOException if an I/O error occurs during operations
1833 Writes a character sequence to a file using UTF-8 encoding. @param fileContext FileContext instance for file operations @param path Path of the file to write to @param charseq Character sequence to write @return FileContext instance after writing @throws IOException if an I/O error occurs
1834 Writes bytes to a file in the specified Hadoop FileSystem. @param fs Hadoop FileSystem instance @param path target file path @param bytes data to write @return the FileSystem instance @throws IOException if an I/O error occurs
1835 Writes lines to a file in the specified character set. @param fs FileSystem instance @param path Path of the file to write to @param lines Iterable of CharSequence to write @param cs Character set for encoding @return FileSystem instance @throws IOException if an I/O error occurs
1836 Writes a character sequence to a file in the specified charset. @param fs FileSystem instance @param path target file path @param charseq characters to write @param cs character set for encoding @return the FileSystem instance @throws IOException if an I/O error occurs
1837 Constructs a BlockLocation with specified metadata. @param names array of block names, null if none @param hosts array of host names storing the block, null if none @param topologyPaths array of network paths, null if none @param offset block's starting position in the file @param length block's length @param corrupt indicates if the block is corrupted
1838 Creates and returns a mutable integer counter. @param name metric name @param desc metric description @param iVal starting value for the counter @return MutableCounterInt instance or throws exception if invalid
1839 Creates and registers a new counter metric. @param name metric name @param desc metric description @param iVal initial value for the counter @return MutableCounterLong instance representing the counter
1840 Creates and registers a mutable gauge with initial value. @param name metric name @param desc metric description @param iVal initial value for the gauge @return MutableGaugeLong instance representing the created gauge
1841 Creates and registers a mutable gauge with an initial value. @param name metric name @param desc metric description @param iVal initial floating-point value of the gauge @return MutableGaugeFloat instance representing the gauge
1842 Creates and registers an integer gauge metric. @param name metric name @param desc metric description @param iVal initial integer value for the gauge @return MutableGaugeInt instance representing the created gauge
1843 Creates a copy of this MeanStatistic instance. @return a new MeanStatistic with copied data
1844 Logs I/O statistics with a given message. @param log Logger instance for logging @param message Custom log message @param source Object containing IO data
1845 Extends the base class method to include IO statistics. @return String representation with IO stats if applicable
1846 Converts I/O statistics to a formatted string. @param statistics IO statistics object (can be null) @return formatted string or empty if input is null
1847 Tracks duration of an operation with exception handling. @param factory optional factory for creating duration trackers @param statistic identifier for the duration tracking @param input object containing the operation to be tracked @return Duration representing the elapsed time @throws IOException if an I/O error occurs during the operation
1848 Executes a task with duration tracking. @param factory optional factory for creating duration trackers @param statistic identifier for the duration tracking @param input task to execute @return result of the executed task
1849 Adds an entry to the cache and evicts if necessary. @param entry the entry to be added
1850 Initializes I/O statistics with specified metrics. @param counters list of counter keys @param gauges list of gauge keys @param minimums list of minimum value keys @param maximums list of maximum value keys @param meanStatistics list of mean statistic keys
1851 Reads decrypted data into a byte array. @param b destination buffer @param off offset in the buffer @param len number of bytes to read @return number of bytes read, or -1 if end of stream @throws IOException if an I/O error occurs
1852 Decrypts data from a specified position into a buffer. @param position starting position in the stream @param buffer destination buffer for decrypted data @param offset offset within the buffer to start writing @param length number of bytes to decrypt @throws IOException if an I/O error occurs during decryption
1853 Decrypts data from a specified position into a buffer. @param filePosition starting position in the encrypted file @param buf buffer to store decrypted data @param length number of bytes to decrypt @param start offset within the buffer to begin storing data @throws IOException if an I/O error occurs during decryption
1854 Decrypts and reads data from a ByteBuffer. @param buf buffer containing encrypted data @param length number of bytes to decrypt @param start starting position in the buffer @throws IOException if an I/O error occurs during decryption
1855 Seeks to the specified position in the stream. @param pos target position for seeking @throws IOException if an I/O error occurs or seek is unsupported
1856 Skips specified number of bytes in the stream. @param n number of bytes to skip @return actual number of bytes skipped @throws IOException if an I/O error occurs
1857 Constructs a GlobFilter with a specified glob pattern. @param filePattern the glob pattern string for matching files @throws IOException if the file pattern is invalid
1858 Constructs a new GlobFilter with specified pattern and additional filter. @param filePattern glob pattern for matching files @param filter additional PathFilter for more specific criteria @throws IOException if the file pattern is invalid
1859 Extracts files from a tar archive to the specified directory. @param inputStream input stream containing the tar archive @param untarDir target directory for extraction @param gzipped indicates if the tar is gzip compressed @throws IOException if an I/O error occurs during extraction @throws InterruptedException if the process is interrupted @throws ExecutionException if execution fails
1860 Retrieves statistics for all file systems. @return Map containing URI to Statistics mappings
1861 Clears file system statistics by invoking clearStatistics method of AbstractFileSystem.
1862 Converts ECChunk arrays to ByteBuffers and delegates encoding. @param inputs array of input ECChunks containing data to encode @param outputs array of output ECChunks for encoded data and parity units @throws IOException if an I/O error occurs during encoding or conversion
1863 Creates a BlockingThreadPoolExecutorService with specified parameters. @param activeTasks maximum number of concurrent tasks @param waitingTasks capacity for waiting tasks @param keepAliveTime time to wait before terminating idle threads @param unit time unit for keepAliveTime @param prefixName base name for threads in the pool @return BlockingThreadPoolExecutorService instance configured with given parameters
1864 Initializes file position with buffer and offsets. @param bufferData data associated with the buffer @param startOffset starting offset of the buffer @param readOffset current read offset within the buffer
1865 Returns an object by invoking m1. @return Result of m1 invocation
1866 Masks functionality by invoking nested methods.
1867 Masks I/O statistics by retrieving and processing current context. @return Serializable masked statistics or null if context is invalid
1868 Processes I/O statistics from the source. @param source the source object containing IO data @return true if processing is successful, false otherwise
1869 Executes tasks on a collection of items, handling exceptions and managing statistics. @param task the task to be executed on each item @return true if all tasks succeed, false otherwise @throws E if an exception occurs during task execution @throws IOException if an I/O error occurs while iterating through items
1870 Updates I/O statistics context for the current thread. @param statisticsContext new context to set, or null to reset
1871 Updates I/O statistics context if available. @param ioStatisticsContext current I/O statistics context to update
1872 Resets I/O statistics context if set.
1873 Handles exceptions by logging and possibly masking details. @param e the Throwable to process
1874 Masks file status and creates a path handle. @param stat FileStatus object to be masked @param opt Optional handle options @return PathHandle instance representing the masked file status
1875 Masks a token under a given alias. @param alias the alias for masking the token @param t the token to be masked
1876 Encrypts data using OpenSSL library. @param inBuffer source ByteBuffer containing plaintext @param outBuffer destination ByteBuffer for ciphertext @throws IOException if encryption fails
1877 Encrypts data from input buffer to output buffer. @param inBuffer source ByteBuffer containing plaintext @param outBuffer destination ByteBuffer for ciphertext @throws IOException if encryption fails
1878 Initializes regex patterns and interceptors for source and destination paths. @throws IOException if there's an issue with regex initialization or configuration
1879 Constructs a Path by resolving a child path against a parent path. @param parent the parent directory path @param child the child path to resolve
1880 Constructs a Path object from a given file system path. @param pathString file system path as a string @throws IllegalArgumentException if the path is invalid or null
1881 Constructs a Path object. @param scheme URI scheme (e.g., "file", "hdfs") @param authority URI authority @param path file system path
1882 Converts URI to string format. @param uri URI object containing scheme and path @param inferredSchemeFromPath flag indicating if scheme is inferred @return formatted URI string
1883 Masks and validates file path. @param p file system path to process @return masked path component or throws exception if invalid
1884 Masks and returns the path after validation. @param p the input file or directory path @return Path object representing the masked path @throws FileNotFoundException if the file does not exist @throws UnresolvedLinkException if a symlink cannot be resolved @throws AccessControlException if access is denied @throws IOException for other I/O errors
1885 Creates a file output stream for writing to a specified path. @param f the path where the file will be created @param createFlag specifies how to handle file creation @param opts additional options for file creation @return FSDataOutputStream for writing to the file @throws various exceptions if operations fail or invalid parameters are provided
1886 Applies a mask to file system permissions. @param mode original file system permission @param umask permission mask to be applied @return new FsPermission with masked actions
1887 Checks file permissions using default settings. @param f file path to check @return true if permissions are as expected, false otherwise
1888 Sets file permissions, defaulting to read/write if none provided. @param permission desired FsPermission or null for default
1889 Creates a file with default permissions. @param f file path to create @param overwrite flag to overwrite existing file @param bufferSize buffer size for data transfer @param replication number of replicas @param blockSize block size for the file @param progress progress tracking object @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
1890 Creates an immutable file system permission. @param permission short value representing the permission mask @return FsPermission object with specified permissions
1891 Writes a key-value pair to the sequence file. Validates key and value classes, serializes them, and handles compression if enabled. @param key key object to write @param val value object to write @throws IOException if I/O error occurs or class validation fails
1892 Delegates to calculate compressed size. @return Compressed size of the block. @throws IOException if an I/O error occurs
1893 Adjusts skip length to stay within file bounds. @param n bytes to skip @return actual number of bytes skipped @throws IOException if an I/O error occurs
1894 Computes total content length of a file or directory in HAR format. @param path file or directory path @return Total length as a long value @throws IOException if an I/O error occurs
1895 Computes total content length of a file or directory. @param path file or directory path @return Total length as a long value @throws IOException if an I/O error occurs
1896 Initializes and runs JVM pause monitoring. @param args command line arguments (not used)
1897 Starts the service if not already started. Handles state transitions and logs start events.
1898 Transitions the service to a new state. @param newState desired new state for the service @return previous state of the service
1899 Masks exception details and logs Kerberos configuration issues. @throws KerberosDiagsFailure if invocation fails
1900 Compares this BytesWritable with another object. @param right_obj the object to compare with @return true if equal, false otherwise
1901 Overrides equality check. @param o object to compare with @return true if o is an instance of Text and equals, otherwise false
1902 Masks the entire byte array of BytesWritable. @param newData BytesWritable object containing data to mask
1903 Decodes erasure-coded ByteBuffer data. @param inputs array of ByteBuffer containing input data @param erasedIndexes indices of erased blocks @param outputs array of ByteBuffer for decoded output @throws IOException if decoding fails
1904 Initiates erasure decoding for byte arrays. @param inputs array of input byte arrays @param erasedIndexes indices of erased data blocks @param outputs array of output byte arrays @throws IOException if an I/O error occurs during decoding
1905 Checks for block delimiter in compressed stream. @return true if delimiter is found, false otherwise @throws IOException if an I/O error occurs
1906 Constructs a CBZip2OutputStream with default block size. @param out output stream to write compressed data @throws IOException if I/O error occurs during initialization
1907 Constructs a BlockDecompressorStream. @param in InputStream to read compressed data from @param decompressor Decompressor instance for decompression logic @throws IOException if an I/O error occurs or parameters are invalid
1908 Creates a compression output stream. @param out original output stream @return CompressionOutputStream instance or null if creation fails
1909 Creates an output stream for BZip2 compression. @param out original output stream @return CompressionOutputStream instance or null if creation fails
1910 Creates a Zstandard compression output stream. @param out underlying output stream for compressed data @return CompressionOutputStream instance or null if creation fails
1911 Creates a CompressionOutputStream using Snappy codec. @param out output stream for compressed data @return CompressionOutputStream instance or null if creation fails
1912 Writes key-value pairs to MapFile and updates index. @throws IOException if an I/O error occurs during writing
1913 Finalizes the writable block by flushing and closing resources. @throws IOException if an I/O error occurs during finalization
1914 Creates a decompression input stream using LZ4 codec. @param in input stream to wrap @return CompressionInputStream for decompression @throws IOException if an I/O error occurs
1915 Creates a BZip2 decompression input stream. @param in input stream to wrap @return CompressionInputStream for decompression @throws IOException if an I/O error occurs
1916 Creates a Zstandard decompression input stream. @param in input stream to wrap @return CompressionInputStream for decompression @throws IOException if an I/O error occurs
1917 Creates a CompressionInputStream for decompression using Snappy. @param in input stream to wrap @return CompressionInputStream for the given input stream @throws IOException if an I/O error occurs
1918 Closes resources used by the Reader. Ensures proper closure of index and data streams. @throws IOException if an I/O error occurs during closure
1919 Closes input and nullifies reference. @throws IOException if an I/O error occurs during closure
1920 Retrieves a Zlib decompressor instance. @return DirectDecompressor object or null if not supported
1921 Writes sequence file header with metadata and compression info. @throws IOException if writing fails
1922 Serializes token and secret key maps to a DataOutput stream. @param out the output stream to serialize data into @throws IOException if an I/O error occurs during serialization
1923 Synchronizes and reads data from SequenceFile. Handles decompression and buffer resets. @throws IOException if an I/O error occurs or file is corrupt
1924 Handles reading and decompression of values from a SequenceFile. @throws IOException if an I/O error occurs during processing
1925 Reads and decodes a UTF-8 string from the input stream with no length restriction. @param in DataInput source for reading bytes @return decoded UTF-8 string @throws IOException if reading or decoding fails
1926 Retrieves a delegation key by ID, deserializing it if not found. @param keyId unique identifier for the delegation key @return DelegationKey object or null if retrieval fails
1927 Retrieves a masked delegation token for the given URL. @param url target URL @param creds credentials containing tokens @return Token object or null if not found
1928 Retrieves and masks a token for the specified authentication type. @param authType the SASL authentication type @return Token object or null if not found @throws IOException if an I/O error occurs during token retrieval
1929 Masks the host and port of an InetSocketAddress and updates the token's service. @param token Kerberos or delegation token @param addr InetSocketAddress to be masked
1930 Converts a Protobuf TokenProto to a Hadoop Token object. @param tokenProto Protobuf representation of the token @return Hadoop Token object created from the proto
1931 Masks and caches a Text key as ByteString. @param key the input Text object to be masked @return the masked ByteString representation of the key
1932 Constructs a deep copy of the given Token. @param other the Token to be copied
1933 Reads a line from the input stream into a Text object. @param str Text object to store read data @param maxLineLength Maximum length of the line to read @return Number of bytes consumed or -1 if end of stream
1934 Reads a line from the input stream into a Text object. @param str Text object to store read data @return Number of bytes consumed or -1 if end of stream
1935 Constructs an InstrumentedLock with a default ReentrantLock. @param name unique identifier for the lock @param logger for logging lock events @param minLoggingGapMs minimum time between log entries @param lockWarningThresholdMs threshold for warning on long hold times
1936 Creates a dynamic proxy with retry mechanism for specified interface. @param iface interface class to implement @param implementation actual implementation object @param retryPolicy policy for handling retries @return proxy instance implementing iface with retry logic
1937 Processes retry logic for a method call. Waits if necessary and handles interruptions. @return CallReturn.RETRY to indicate retry action @throws InterruptedIOException if retry is interrupted
1938 Initializes a Writer for TFile operations. @param fsdos output stream for writing to HDFS @param minBlockSize minimum block size for data storage @param compressName compression algorithm name @param comparator key comparator class name @param conf configuration settings @throws IOException if an I/O error occurs during initialization
1939 Checks if the current chunk is fully processed. @return true if processing is complete, false otherwise
1940 Checks if EOF reached and returns remaining data length. @return Length of remaining data or throws IOException on error
1941 Compares entry with another using byte array. @param buf source byte array @param offset starting index of the segment @param length length of the segment @return result of comparison (-1, 0, or 1)
1942 Ensures proper closure of the writer by flushing buffers and releasing resources. @throws IOException if an I/O error occurs during closing operations
1943 Writes a key-value pair to the compressed output. @param key the key object to write @param val the value object to write @throws IOException if an I/O error occurs or class types are incorrect
1944 Writes a key-value pair to the SequenceFile. @param keyData byte array containing the key data @param keyOffset offset of the key in the byte array @param keyLength length of the key @param val ValueBytes object representing the value @throws IOException if an I/O error occurs
1945 Deprecated method to clone data from source Writable to destination. @param dst Destination Writable object @param src Source Writable object @throws IOException if an I/O error occurs during copying
1946 Selects a random node within a specified scope. @param scope network location path for selection @param excludedNodes collection of nodes to explicitly exclude @return selected Node or null if none valid
1947 Sorts and organizes nodes based on weights. @param reader source node for weight calculation @param nodes array of target nodes to sort @param activeLen length of active nodes
1948 Sorts and organizes network nodes based on distance. @param reader source node for weight calculation @param nodes array of target nodes to sort @param activeLen length of active nodes
1949 Constructs a SocketInputStream from a Socket. @param socket the Socket to read data from @param timeout maximum time in milliseconds for I/O operations @throws IOException if the socket channel is invalid or cannot be configured
1950 Initializes a SocketInputStream from a given socket. Sets up the input stream with the socket's channel and timeout. @param socket the source socket for reading data @throws IOException if initialization fails due to invalid channel or configuration issues
1951 Initializes SocketOutputStream with a socket and timeout. @param socket the Socket to write data to @param timeout maximum time in milliseconds for write operations @throws IOException if initialization fails due to invalid channel or configuration issues
1952 Adds a node to the network topology. Validates and organizes nodes into racks and groups. @param node Node to be added
1953 Performs I/O operations on buffer with timeout handling. @param buf ByteBuffer to read/write data @param ops operation set for channel (e.g., OP_READ, OP_WRITE) @return number of bytes processed or -1 if closed @throws IOException if an I/O error occurs
1954 Connects a socket channel to an endpoint with a timeout. @param channel the socket channel to connect @param endpoint the target address for connection @param timeout maximum time to wait for connection in milliseconds @throws IOException if an I/O error occurs during connection
1955 Initiates I/O operation with timeout. @param ops interest set of operations for the channel @throws IOException if an I/O error occurs or operation times out
1956 Retrieves default hostname for a network interface. @param strInterface name of the network interface @return primary hostname or cached hostname if none found @throws UnknownHostException if interface is not found
1957 Retrieves primary hostname for a network interface. @param strInterface name of the network interface @param nameserver optional DNS server to query @return primary hostname or cached hostname if none found @throws UnknownHostException if interface is not found
1958 Initializes metrics tracking for user group information.
1959 Initializes a MutableInverseQuantiles instance with specified parameters. @param name metric name @param description metric description @param sampleName sample name @param valueName value name @param intervalSecs update interval in seconds
1960 Creates a new MutableQuantiles instance with specified parameters. @param name metric name @param desc metric description @param sampleName sample name @param valueName value name @param interval update interval in seconds @return MutableQuantiles object
1961 Creates and registers a new metric with basic statistics. @param name unique metric name @param desc metric description @param sampleName sample name for the metric @param valueName value name for the metric @return MutableStat instance representing the created metric
1962 Registers or updates a metric tag with default override set to false. @param name metric name @param description metric description @param value tag value @return current MetricsRegistry instance
1963 Records elapsed time for a named metric. @param name the metric identifier @param value the time duration to record
1964 Records queue time metric for a given priority level. @param priority the scheduling priority level @param queueTime the elapsed time in the queue
1965 Records processing time for a given priority level. @param priority the priority level of the RPC @param processingTime the elapsed processing time in milliseconds
1966 Records overall processing time for an RPC call. @param rpcCallName name of the RPC call @param overallProcessingTime total time taken for the call
1967 Locates and logs the Kerberos configuration file path. Prioritizes JVM system property over environment variable. Logs warnings for conflicting settings.
1968 Checks a condition and logs an error if it fails. @param condition the boolean condition to check @param category error category @param message error message template @param args arguments for message formatting @return true if condition is met, false otherwise @throws KerberosDiagsFailure if condition fails and nofail is false
1969 Logs an error and throws exception if condition is true. @param condition boolean condition to check @param category error category @param message error message template @param args arguments for message formatting
1970 Creates a masked UserGroupInformation object. @param user username string @return UserGroupInformation with masked authentication
1971 Masks a delegation token and validates its password. @param identifier unique token identifier @param password token password to validate @throws InvalidToken if the token or password is invalid
1972 Schedules Kerberos credential renewal for the current user. Checks if Kerberos is enabled and keytab path is not available. Retrieves the original Kerberos TGT ticket and calculates its renewal time. Schedules a task to renew credentials if all checks pass.
1973 Deprecated constructor for Count class. Initializes with command-line arguments and configuration. @param cmd array of command-line arguments @param pos starting position in the args array @param conf Hadoop Configuration object
1974 Initializes and returns a ZooKeeper instance with authentication. @return new ZooKeeper instance @throws IOException if initialization fails @throws KeeperException for ZooKeeper errors
1975 Retrieves and processes one task for a given key. @param keyName unique identifier for the key @return processed task @throws IOException if an I/O error occurs during task retrieval @throws ExecutionException if an execution error occurs
1976 Resolves the IP address of a given hostname. @param hostname the hostname to resolve @return InetAddress object for the hostname @throws UnknownHostException if the hostname cannot be resolved
1977 Generates a protocol signature for compatibility checks. @param server the server protocol instance @param protocol the name of the protocol interface @param clientVersion version of the client protocol @param clientMethodsHash hash code of client methods @return ProtocolSignature object or null if not matching
1978 Checks if a method is supported on the server. @param methodName name of the method to check @param parameterTypes types of parameters for the method @return true if method is supported, false otherwise @throws IOException if communication fails
1979 Validates RPC request header. Throws exception if header is invalid. @param header RPC request header to validate
1980 Processes and decodes a message using RPC buffer. @param <T> generic type extending Message @param message the input message to be processed @param buffer the RPC buffer for decoding @return decoded message of type T @throws RpcServerException if an error occurs during decoding
1981 Retrieves and removes the next prioritized element from the queue. @return Element of type E or null if not available
1982 Handles version mismatch between server and client. @param clientVersion the version of the connecting client @throws IOException if an I/O error occurs during processing
1983 Calculates total memory size by adding physical memory and swap space. @return Total memory size in bytes
1984 Constructs a HarFSDataInputStream for reading HAR file data. @param fs Hadoop FileSystem instance @param p Path to the HAR file @param start Starting byte position in the file @param length Number of bytes to read from the file @param bufsize Buffer size for input operations @throws IOException if an I/O error occurs
1985 Evicts expired entries from the cache up to a limit. Uses current time and queue operations to manage eviction.
1986 Ensures cache size does not exceed limit. Evicts entries until size is within limits.
1987 Generates a formatted content summary with specified options. @param qOption enable quick format option @param hOption use human-readable size format @param xOption show delta from snapshot @return formatted content summary string
1988 Generates a formatted summary of file system content. @param qOption enable quick format option @param hOption use human-readable size format @param tOption toggle detailed mode @param types list of storage types to include @return formatted content summary string
1989 Generates a formatted summary of storage quotas. @param hOption true for human-readable format, false for raw values @param tOption true to include specific storage types, false for general summary @param types list of StorageType to include if tOption is true @return formatted quota summary as a String
1990 Waits for all futures to complete, throwing IOException if any fail. @param futures list of CompletableFutures to wait on
1991 Waits for task completion with duration logging. @param future CompletableFuture representing the asynchronous task @throws IOException if task is cancelled or fails to complete
1992 Updates CRC from byte array. @param crcBuffer source byte array containing CRC values @param offset starting index in the byte array @param length number of bytes to process @param bytesPerCrc number of bytes processed per CRC @throws IOException if length is not a multiple of CRC size or offset is out of bounds
1993 Reads and processes CRC values from input stream. @param checksumIn input stream for reading CRC values @param numChecksumsToRead number of CRC values to read @param bytesPerCrc number of bytes processed per CRC @throws IOException if an I/O error occurs
1994 Creates an instance of the specified class using reflection with default arguments. @param theClass target class type @param conf configuration settings @return constructed object instance
1995 Retrieves the class of the key used by the reader. @return Class object representing the key type
1996 Returns the value class for deserialization. @return Class<?> representing the value type
1997 Handles class and resource operations based on command-line arguments. @param args command-line arguments (action, name) @return SUCCESS or error code indicating operation result
1998 Constructs a FutureDataInputStreamBuilderImpl with specified file context and path. @param fc mandatory file context for file system operations @param path mandatory file system path @throws IOException if an I/O error occurs
1999 Creates a DataChecksum instance from a byte array. @param bytes input data as a byte array @param offset starting index in the byte array @return DataChecksum object or null if invalid parameters @throws IOException if checksum creation fails
2000 Creates a DataChecksum instance from input stream. @param in DataInputStream containing checksum configuration @return DataChecksum object or throws exception if invalid
2001 Executes shell command with interval check and error handling. @throws IOException if an I/O error occurs during execution
2002 Aggregates I/O statistics into a snapshot. @param snapshot existing I/O statistics snapshot @param statistics new statistics to aggregate (nullable) @return true if aggregation successful @throws UnsupportedOperationException if operation is not supported
2003 Creates an I/O statistics snapshot. @return Serializable object containing the snapshot @throws UnsupportedOperationException if operation is not supported
2004 Creates an I/O statistics snapshot from a given source. @param source the data source to create a snapshot from @return Serializable object containing the snapshot @throws UnsupportedOperationException if operation is not supported @throws ClassCastException if casting fails
2005 Converts I/O statistics snapshot to JSON string. @param snapshot the I/O statistics snapshot (nullable) @return JSON representation of the snapshot @throws UncheckedIOException if IO error occurs during conversion @throws UnsupportedOperationException if operation is not supported
2006 Creates an I/O statistics snapshot from JSON. @param json JSON string representing I/O statistics @return Serializable object of the created snapshot @throws UncheckedIOException if IO operation fails @throws UnsupportedOperationException if method is not supported
2007 Loads I/O statistics snapshot for a given file system and path. @param fs FileSystem object representing the file system @param path Path object representing the file or directory @return Serializable I/O statistics snapshot @throws UncheckedIOException if an I/O error occurs @throws UnsupportedOperationException if operation is not supported
2008 Retrieves I/O statistics snapshot from the provided source. @param source the data source to retrieve statistics from @return Serializable I/O statistics or null if not applicable
2009 Saves I/O statistics snapshot to a specified file system path. @param snapshot Serializable object containing I/O statistics @param fs FileSystem where the snapshot will be saved @param path Path in the file system for saving the snapshot @param overwrite Flag indicating whether to overwrite existing data at the path @throws UncheckedIOException if an I/O error occurs during saving @throws UnsupportedOperationException if operation is not supported
2010 Converts I/O statistics to a formatted string. @param statistics object containing I/O statistics @return pretty-printed string of I/O statistics
2011 Checks and retrieves current I/O statistics context. @throws UnsupportedOperationException if operation is not supported
2012 Sets I/O statistics context. @param statisticsContext nullable object representing the statistics context @throws UnsupportedOperationException if operation is not supported
2013 Resets I/O statistics context. @throws UnsupportedOperationException if operation is not supported
2014 Retrieves I/O statistics snapshot. @return Serializable snapshot of I/O statistics or null if not available
2015 Validates and retrieves I/O statistics context. @param source data source to check @return true if context is valid and available, false otherwise
2016 Compares two version strings. @param version1 first version string @param version2 second version string @return comparison result (-1, 0, or 1)
2017 Constructs a Counting Bloom Filter. @param vectorSize size of the bit vector @param nbHash number of hash functions @param hashType type of hash algorithm (JENKINS_HASH or MURMUR_HASH)
2018 Constructs a Bloom filter with specified parameters. @param vectorSize size of the bit vector @param nbHash number of hash functions @param hashType type of hash algorithm (JENKINS_HASH or MURMUR_HASH)
2019 Checks if a key is possibly in the Bloom filter. @param key input key object @return true if key might be present, false otherwise
2020 Masks keys and false positives based on a specified scheme. @param k the key to be masked @param scheme the masking strategy (RANDOM, MINIMUM_FN, MAXIMUM_FP, RATIO)
2021 Marks a configuration key as deprecated with a single replacement. @param key the old configuration key to deprecate @param newKey the replacement key @param customMessage optional guidance message for users
2022 Marks a configuration key as deprecated. @param key the old configuration key to deprecate @param newKeys array of replacement keys
2023 Marks a configuration key as deprecated with a single replacement. @param key the old configuration key to deprecate @param newKey the replacement key for the deprecated one
2024 Starts the HTTP server and initializes metrics. @throws IOException if there is an issue starting the server or initializing metrics
2025 Writes a znode to indicate the local node is active. @param oldBreadcrumbStat existing znode stat or null if new @throws KeeperException if ZooKeeper operation fails @throws InterruptedException if thread is interrupted
2026 Deletes active node's breadcrumb and asserts correct data. @throws IllegalStateException if data mismatch occurs
2027 Reads data from specified file ranges into buffers. @param stream PositionedReadable object for reading data @param ranges list of FileRange objects defining read boundaries @param allocate Function to allocate ByteBuffer of specified size @throws EOFException if any range exceeds file bounds or overlaps
2028 Handles prefetching and caching of data blocks. Iterates through buffer pool, caches ready or prefetching data, then masks the operation.
2029 Creates a BufferData instance for a given block number. @param blockNumber the block number to process @return BufferData object containing block data
2030 Initializes FilePosition with given file and block sizes. Validates parameters and sets up buffer state. @param fileSize total file size in bytes @param blockSize size of each block in bytes
2031 Determines if the current buffer position is valid. @return true if valid, false otherwise
2032 Logs and closes all FileSystem instances. @throws IOException if an error occurs during closure
2033 Writes a character sequence to a file using UTF-8 encoding. @param fs FileSystem instance @param path target file path @param charseq characters to write @return the FileSystem instance @throws IOException if an I/O error occurs
2034 Constructs a BlockLocation with specified metadata. @param names array of block names, null if none @param hosts array of host names storing the block, null if none @param offset block's starting position in the file @param length block's length @param corrupt indicates if the block is corrupted
2035 Constructs a non-corrupted BlockLocation with specified metadata. @param names array of block names, null if none @param hosts array of host names storing the block, null if none @param topologyPaths array of network paths, null if none @param offset block's starting position in the file @param length block's length
2036 Merges two MeanStatistic instances. @param l first MeanStatistic instance @param r second MeanStatistic instance @return new MeanStatistic with merged data from both inputs
2037 Updates statistics from a source snapshot. @param source IOStatistics object to copy data from
2038 Logs I/O statistics with a given message. @param message Custom log message @param source Object containing IO data
2039 Logs IO statistics based on the specified level. @param log Logger instance for logging @param level Logging level (info/error/warn) @param source Object containing IO data
2040 Logs statistics and safely closes a RemoteIterator. @param source RemoteIterator to process
2041 Measures and tracks the duration of an I/O operation. @param factory optional factory for creating duration trackers @param statistic identifier for the duration tracking @param input object containing the operation to be tracked @throws IOException if an I/O error occurs during the operation
2042 Reads and decrypts data from a specified position. @param position starting position in the stream @param buffer destination buffer for decrypted data @param offset offset within the buffer to start writing @param length number of bytes to read and decrypt @return number of bytes actually read @throws IOException if an I/O error occurs or positioned read is unsupported
2043 Reads and decrypts data from a specified position. @param position starting position in the stream @param buffer destination buffer for decrypted data @param offset offset within the buffer to start writing @param length number of bytes to read and decrypt @throws IOException if an I/O error occurs or positioned read is unsupported
2044 Reads decrypted data from a specified position into a buffer. @param position starting position in the encrypted file @param buf buffer to store decrypted data @return number of bytes read or -1 if end of stream is reached @throws IOException if an I/O error occurs during reading
2045 Reads decrypted data from a specified position into a buffer. @param position starting position in the encrypted file @param buf buffer to store decrypted data @throws IOException if an I/O error occurs during reading or decryption
2046 Reads decrypted data from a ByteBuffer. @param buf buffer containing encrypted data @return number of bytes read, or -1 if end of stream @throws IOException if an I/O error occurs during decryption
2047 Writes an object to a DataOutput stream, handling various data types. @param out DataOutput stream for writing bytes @param instance object to serialize @param declaredClass class of the object @param conf configuration settings @param allowCompactArrays flag to enable compact array serialization @throws IOException if an I/O error occurs
2048 Acquires buffer data for a given block number without blocking. @param blockNumber unique identifier for the buffer block @return BufferData object or null if not available
2049 Returns the current number of available buffers in the pool. @return Number of remaining buffers after releasing completed ones
2050 Executes a task on a collection of items. @param task the task to be executed @return true if no exceptions occur, false otherwise @throws E if an exception occurs during task execution @throws IOException if there is an error iterating through items
2051 Masks specified file or directory items under a parent path. @param parent PathData object representing the parent directory @param items variable number of PathData objects to mask @throws IOException if an I/O error occurs during masking
2052 Generates a function to create path handles from file statuses. @param fs FileSystem instance for path handle retrieval @param opt optional HandleOpt parameters @return Function that maps FileStatus to PathHandle
2053 Executes shell command to fetch groups for a user. @param userName username to retrieve groups for @return ShellCommandExecutor instance configured with the command and timeout
2054 Executes shell command to fetch user groups. @param userName username for which to retrieve group information @return ShellCommandExecutor instance configured with the command and timeout
2055 Deserializes and processes credentials from a DataInput stream. @param in input stream containing serialized credential data
2056 Issues delegation token for a service. @param issuer DelegationTokenIssuer instance @param renewer entity that can renew the token @param credentials user credentials to add the token to @param tokens list of tokens to update @throws IOException if an I/O error occurs during token issuance
2057 Adds a token to user credentials under an alias. @param alias the alias for masking the token @param token the token to be added @return true if successful
2058 Masks a given path within a working directory. @param workDir the working directory path @param path the original file or directory path @return masked path if relative; otherwise, the original path
2059 Masks a given path within a working directory. @param workDir the working directory path @param path the path to mask or resolve @return the masked or resolved path
2060 Converts a given Path to a File, ensuring it's absolute. @param path the input file path @return File object representing the path
2061 Masks the given path by resolving it against a base path. @param p input path to be masked @return resolved path or original if already valid
2062 Masks and normalizes the current path using a default URI. @param defaultUri default URI for scheme and authority if not specified @param workingDir working directory to use if path is relative @return new Path with masked and normalized URI
2063 Returns a masked path from the URI. @return Path object representing the masked path
2064 Returns a masked path from the URI. @return Path object representing the masked path
2065 Converts SFTP channel to a Path object. @param channel SFTP channel instance @return Path object or null if conversion fails
2066 Retrieves file status from the given path. @param fs FileSystem instance to interact with @param pathString file path as a string @param ignoreFNF flag to ignore FileNotFoundException @return FileStatus object or null if not found and ignored
2067 Returns a Path object representing the file path. @return Path object created from the stored path string
2068 Returns a Path object for the target path. @return Path object or null if targetPath is null
2069 Computes total content length of the root directory. @return Total length as a long value @throws IOException if an I/O error occurs
2070 Constructs a ChRootedFileSystem with a specified underlying file system and root URI. @param fs underlying FileSystem instance @param uri root URI for the chroot environment @throws IOException if an I/O error occurs during initialization
2071 Constructs a Path object from the remaining elements of the path array. @param path array containing file system path components @param startIndex index to start constructing the path from @return constructed Path object or SlashPath if startIndex exceeds array length
2072 Constructs a Path from concatenated directory links. @return Path object representing the combined directory paths
2073 Constructs a Path by resolving a child path against a parent path. @param parent the parent directory path as a string @param child the child path to resolve as a string
2074 Constructs a Path by resolving a child path against a parent path. @param parent the parent directory path @param child the child path as a string to resolve
2075 Constructs a Path by resolving a child path against a parent string. @param parent the parent directory as a string @param child the child path to resolve
2076 Renames a directory in the specified file system. @param fs FileSystem object representing the file system @param oldName current name of the directory @param newName new name for the directory @throws IOException if renaming fails
2077 Converts a File to a Hadoop Path. @param f input File object @return Path representing the file's path in Hadoop
2078 Constructs a Path object from a URI, masking sensitive information. @param nestedUri the input URI to process @return Path object representing the masked URI
2079 Converts an array of strings to an array of Path objects. @param str array of file system paths as strings @return array of Path objects or null if input is null
2080 Masks a given file system path. @param path original file system path @return masked Path object or original if no masking needed
2081 Constructs a masked and combined path. @param path1 base file system path @param path2 path to be masked and appended @return new Path object with masked and combined paths
2082 Validates file existence and type based on requirement. @param typeRequirement specifies the expected file type (directory or not) @throws PathIOException if file does not exist or does not match the required type
2083 Masks the given child path. @param childPath path to be masked @return masked path as a string
2084 Throws PathNotFoundException when processing a file path. @param item PathData object representing the file item
2085 Retrieves or creates an AbstractFileSystem for a given path. @param absOrFqPath absolute or fully qualified file system path @return AbstractFileSystem instance @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException if an I/O error occurs
2086 Checks and sets directory permissions. @param fs FileSystem instance @param dir directory path to modify @param permission new directory permissions @return true if initial check passes, otherwise false after setting permissions
2087 Constructs a LocatedFileStatus object with specified attributes and block locations. @param length size of the file or directory in bytes @param isdir true if this represents a directory, false otherwise @param block_replication replication factor for blocks @param blocksize size of each block in bytes @param modification_time time of last modification in milliseconds since epoch @param access_time time of last access in milliseconds since epoch @param permission FsPermission object representing file permissions @param owner username of the file or directory owner @param group name of the group associated with the file or directory @param symlink Path to the target if this is a symbolic link, null otherwise @param path full Path of the file or directory @param attr set of attribute flags for additional metadata @param locations array of BlockLocation objects representing block locations
2088 Writes a key-value pair to the sequence file. @param key key object to write @param val value object to write @throws IOException if I/O error occurs or class validation fails
2089 Writes sorted key-value pairs from iterator to output. @param records RawKeyValueIterator containing input data @param writer Writer object for outputting sorted data @throws IOException if an I/O error occurs during processing
2090 Initializes the service with a configuration. @param conf Configuration object for the service @throws ServiceStateException if initialization fails or config is null
2091 Stops the service if not already stopped. Handles exceptions and notifications on failure.
2092 Checks equality with another Text object. @param thePublicService object to compare with @return true if equal, otherwise false
2093 Checks if token matches alias or has no alias. @param token delegation token to check @param alias service alias text @return true if token matches alias or alias is null, false otherwise
2094 Checks if the given service or URL matches the fetched service name. @param fetcher DtFetcher instance to retrieve service name @param service Text object representing the service to check @param url String representing the URL to validate @return true if service matches, false otherwise
2095 Validates and ensures directory accessibility. @param dir the directory to be checked @throws DiskErrorException if validation fails
2096 Validates and creates directory with file checks. @param dir target directory to validate and create @throws DiskErrorException if any disk operation fails
2097 Flushes buffer without retaining partial data or flushing partial chunks. @throws IOException if an I/O error occurs during flush operation
2098 Masks and decodes input buffers, handling erased segments. @param inputs array of ByteBuffer containing input data @param erasedIndexes indices of erased blocks @param outputs array of ByteBuffer for decoded output @throws IOException if decoding fails
2099 Decodes erasure-coded data with input masking. @param inputs array of ECChunk containing input data @param erasedIndexes indices of erased blocks @param outputs array of ECChunk for decoded output @throws IOException if decoding fails
2100 Masks and registers the current writable block. @throws IOException if an I/O error occurs during processing
2101 Closes segment and cleans up resources. @throws IOException if an I/O error occurs during closure
2102 Closes the block reader, releasing resources. Ensures proper cleanup after data access. @throws IOException if an I/O error occurs during resource release
2103 Reads and deserializes credentials from input stream. @param in DataInput source for reading bytes @throws IOException if I/O error occurs during reading
2104 Reads and processes the next key from a SequenceFile. Handles both block-compressed and non-block compressed formats. @param key DataOutputBuffer to store the read key @return Length of the key or -1 if end of file is reached @throws IOException if an I/O error occurs
2105 Processes and reads a writable value from the input stream. Handles configuration, deserialization, and checks for data integrity. @param val Writable object to be processed @throws IOException if an I/O error occurs during processing
2106 Processes and deserializes an object from a SequenceFile. @param val the input object to process @return deserialized object @throws IOException if I/O error occurs during processing
2107 Reads and processes the next key-value pair from a SequenceFile. Handles both block and non-block compressed formats. @param key buffer to store the read key @param val object to store the read value @return length of the record or -1 if end is reached @throws IOException if an I/O error occurs
2108 Reads and processes value bytes from a SequenceFile. @param val ValueBytes object to read into @return Length of the value in bytes @throws IOException if an I/O error occurs during processing
2109 Retrieves delegation token information. @param ident token identifier @return DelegationTokenInformation object @throws NoSuchElementException if token not found @throws RuntimeException for SQL or I/O errors
2110 Deserializes and creates a PermissionStatus instance. @param in DataInput source for reading bytes @return PermissionStatus object with deserialized data @throws IOException if an I/O error occurs
2111 Reads an enum value from input stream. @param in DataInput source for reading bytes @param enumType class of the enum type to read @return enum value corresponding to the string read @throws IOException if reading fails
2112 Reads an ACL from input and processes it. @param in DataInput source for reading bytes @throws IOException if reading or processing fails
2113 Masks and caches a Text key as ByteString. @param key the input Text object to be masked @return the masked ByteString representation of the key
2114 Converts a Token to its Protobuf representation. @param tok the input Token object @return TokenProto object representing the token
2115 Constructs a delegation token identifier. @param kind type of the delegation token @param owner token's owner @param renewer principal name that can renew the token @param realUser actual user performing operations
2116 Executes method with RPC setup and retry logic. Handles exceptions and retries based on policy. @return CallReturn instance containing result or exception details
2117 Reads next key-value pair from the block. Initializes key and value lengths, buffers, and checks for EOF. @throws IOException on I/O errors or if no data to read
2118 Reads and processes value data from input stream into BytesWritable. @param value object to store processed data @return length of the processed value @throws IOException if an I/O error occurs
2119 Writes value to output stream. @param out OutputStream to write data to @return Total bytes written or throws IOException on error
2120 Compares entry with byte array using default offset and length. @param buf source byte array @return result of comparison (-1, 0, or 1)
2121 Compares this entry with another object. @param other object to compare @return true if entries are equal, false otherwise
2122 Retrieves and masks a delegation token. @param url target URL for the operation @param token authentication token @param renewer user allowed to renew the token @param doAsUser user on behalf of whom the operation is performed @return Token object with masked service information @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2123 Renews a delegation token. @param url target URL for the operation @param token authentication token @param dToken delegation token object @param doAsUser user on behalf of whom the operation is performed @return expiration time of the renewed token in milliseconds @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2124 Cancels a delegation token. @param url target URL for the operation @param token authentication token @param dToken delegation token object @param doAsUser user on behalf of whom the operation is performed @throws IOException if an I/O error occurs or authentication fails unexpectedly
2125 Selects a random node within a specified network scope. @param scope network location path for selection @return selected Node or null if none valid
2126 Adjusts the reader node and delegates to superclass method. @param reader source node for weight calculation @param nodes array of target nodes to sort @param activeLen length of active nodes
2127 Creates a SocketInputWrapper with specified timeout. @param socket underlying network socket @param timeout read timeout in milliseconds @return SocketInputWrapper initialized with socket and input stream @throws IOException if an I/O error occurs
2128 Returns an OutputStream for the given socket. Uses SocketOutputStream if socket is not closed; otherwise, returns socket's default output stream. @param socket the Socket to get the OutputStream from @param timeout maximum time in milliseconds for write operations @return OutputStream for the socket @throws IOException if issues occur during stream creation or socket closure check
2129 Establishes a socket connection with timeout and address validation. @param socket the socket to connect @param endpoint the target address for connection @param localAddr the local address to bind, if any @param timeout maximum time to wait for connection in milliseconds @throws IOException if an I/O error occurs during connection
2130 Registers an MBean with the specified service and properties. @param serviceName name of the service @param nameName base metric name @param properties additional attributes for the MBean @param theMbean the MBean instance to register @return ObjectName if registration is successful, null otherwise
2131 Registers a mutable quantile metric with specified parameters. @param name metric name @param desc metric description @param sampleName sample name @param valueName value name @param interval update interval in seconds @return MutableQuantiles instance or throws MetricsException if invalid
2132 Constructs a RetryCache with specified parameters. @param cacheName name of the cache @param percentage memory usage percentage for capacity calculation @param expirationTime time before entries expire
2133 Initializes and processes metrics for a given protocol. @param protocol the class representing the protocol to process
2134 Processes an array of metric names by adding each to the global mutable rates. @param names array of metric names to be processed
2135 Aggregates local metrics to global mutable rates. @param localStats map of local sample statistics
2136 Retrieves or creates a MutableRate metric. @param name metric name @param desc metric description @param extended flag for extended statistics @return MutableRate instance
2137 Initializes mutable rate metrics for a given protocol. @param protocol the protocol class to initialize metrics for
2138 Registers metrics for annotated methods. @param source object containing the method @param method annotated method to track
2139 Validates Kerberos authentication for a given user. @param messagePrefix prefix for log messages @param user UserGroupInformation object representing the user
2140 Validates a file's existence, type, size, and readability. @param file the File object to validate @param category error category @param text descriptive text for error messages @return true if all checks pass, false otherwise
2141 Validates Kerberos principal short name. @throws KerberosDiagsFailure if validation fails or an IO exception occurs
2142 Masks the owner's authentication details. @return masked UserGroupInformation or null if owner is invalid
2143 Default constructor initializes recursive search to true.
2144 Default constructor initializes standard output and error streams.
2145 Initiates user re-login process with Kerberos. @throws IOException if an I/O error occurs during the process
2146 Handles user re-login process with Kerberos authentication. @throws IOException if an I/O error occurs during the process
2147 Initiates user re-login process with Kerberos authentication. @throws IOException if an I/O error occurs during the process
2148 Masks and resolves hostname to create a network socket address. @param host original hostname @param port network port number @return InetSocketAddress object with masked or resolved hostname
2149 Resolves and validates the IP address of a given hostname. @param host the hostname to resolve @return InetAddress object if valid, otherwise null @throws SocketException if an error occurs in network operations
2150 Masks and queues an RPC call for transmission. @param call the RPC call to be processed @throws InterruptedException if interrupted during processing @throws IOException if I/O error occurs
2151 Processes incoming RPC request. @param header RPC request header @param buffer buffer containing request data @throws RpcServerException if server error occurs @throws InterruptedException if thread is interrupted
2152 Handles RPC response processing. @param call RPC call object @param status RPC status @param erCode error code if applicable @param rv response value @param errorClass class name of the error @param error error message @throws IOException if serialization fails
2153 Updates the IP list and cache expiry time. Initializes with IPs from file and sets cache timeout.
2154 Prints Linux system information including memory, CPU, and network stats. Initializes SysInfoLinux, retrieves metrics, prints them, and waits briefly.
2155 Generates a formatted summary of file system content. @param qOption enable quick format option @param hOption use human-readable size format @return formatted content summary string
2156 Reads data from the input stream into a byte array. Validates offsets and lengths, handles partial reads with retry logic. @param b destination byte array @param off offset in the byte array @param len number of bytes to read @return total number of bytes read or -1 if end of stream @throws IOException if an I/O error occurs
2157 Creates an instance of the specified Expression class using reflection. @param expressionClass the Expression subclass to instantiate @param conf configuration settings for the instance @return a new Expression instance or null if expressionClass is null
2158 Retrieves or creates a command instance by name. @param cmdName unique command identifier @param conf configuration settings @return Command object or null if not found
2159 Returns an instance of keyClass using reflection. @return WritableComparable object instance
2160 Creates a new Writable instance using the associated factory or reflection. @param c the Writable class type @param conf configuration settings @return a new Writable instance configured with provided settings
2161 Creates a SocketFactory instance from configuration. @param conf Hadoop configuration settings @param propValue property value specifying the factory class @return configured SocketFactory instance @throws RuntimeException if the specified class is not found
2162 Decodes the token identifier from the given identifier bytes. @return decoded TokenIdentifier object or null if decoding fails
2163 Retrieves or creates a DiskValidator instance. @param clazz class type of the DiskValidator @return DiskValidator object for validation tasks
2164 Constructs a DynamicBloomFilter with specified parameters. @param vectorSize size of the bit vector @param nbHash number of hash functions @param hashType type of hash algorithm (JENKINS_HASH or MURMUR_HASH) @param nr initial number of Bloom filters in the matrix
2165 Expands the filter matrix by adding a new Bloom filter. Initializes a new Bloom filter and appends it to the existing matrix.
2166 Initializes a Retouched Bloom Filter with specified parameters. @param vectorSize size of the bit vector @param nbHash number of hash functions @param hashType type of hash algorithm (JENKINS_HASH or MURMUR_HASH)
2167 Masks and updates configuration properties. @param props configuration properties to update @param startIdx index to start processing resources @param fullReload flag indicating if default resources should be loaded
2168 Yields from the election process. @param needFence indicates whether fencing is required
2169 Initiates vectorized read from file ranges. @param ranges list of FileRange objects defining read boundaries @param allocate Function to allocate ByteBuffer of specified size @throws IOException if an I/O error occurs during reading
2170 Constructs a non-corrupted BlockLocation with specified metadata. @param names array of block names, null if none @param hosts array of host names storing the block, null if none @param offset block's starting position in the file @param length block's length
2171 Initializes a new DurationStatisticSummary with provided statistics. @param key unique identifier for the statistic @param success indicates if the operation was successful @param count number of operations @param max maximum duration of an operation @param min minimum duration of an operation @param mean MeanStatistic object representing average duration, cloned if provided
2172 Merges statistics from a source into the current snapshot. @param source IOStatistics to merge from @return true if successful, false if source is null
2173 Constructs an IOStatisticsSnapshot from a source or initializes empty maps. @param source IOStatistics object to copy data from, can be null
2174 Processes and consumes elements from a RemoteIterator. @param source RemoteIterator to process @param consumer ConsumerRaisingIOE to apply to each element @return Count of processed elements
2175 Writes an object to a DataOutput stream. @param out DataOutput stream for writing bytes @param instance object to serialize @param declaredClass class of the object @param conf configuration settings @throws IOException if an I/O error occurs
2176 Initiates prefetching for a specified block. @param blockNumber identifier of the block to prefetch
2177 Acquires buffer data for a specified block number with retry logic. @param blockNumber unique identifier for the buffer block @return BufferData object or throws exception if acquisition fails
2178 Masks specified file or directory. @param item PathData object representing the file or directory to mask @throws IOException if an I/O error occurs during masking
2179 Recursively processes and groups file system items. @param parent PathData object representing the parent directory @param itemsIterator RemoteIterator for iterating over PathData items @throws IOException if an I/O error occurs during processing
2180 Resolves and masks group names for a given user. @param userName username to resolve groups for @param errMessage error message if resolution fails @param groupNames comma-separated group names @return set of masked group names @throws PartialGroupNameException if resolution fails or is not supported on Windows
2181 Executes a shell command with default settings. @param cmd array of strings representing the shell command to execute @return masked output string from executed command @throws IOException if command execution fails
2182 Executes a shell command with specified environment variables. @param env environment variables for the command execution @param cmd array of strings representing the shell command to execute @return masked output string from executed command @throws IOException if command execution fails
2183 Merges credentials from another instance with overwrite enabled. @param other Credentials instance to merge from
2184 Merges credentials from another instance without overwriting existing entries. @param other Credentials instance to merge from
2185 Collects and issues delegation tokens for a given renewer. @param renewer entity that can renew the token @param credentials user credentials to add tokens to (optional) @return array of issued delegation tokens @throws IOException if an I/O error occurs during token issuance
2186 Adds a token to user credentials. @param token the token to be added @return true if successful, false otherwise
2187 Sets the working directory to a masked path. @param newDir new directory path to mask and set as working directory
2188 Sets modification and access times for a file. @param p the file path @param mtime the last modified time in milliseconds, or -1 to leave unchanged @param atime the last accessed time in milliseconds, or -1 to leave unchanged @throws IOException if an I/O error occurs
2189 Converts a Hadoop Path to a local File. @param path Hadoop file path to be converted @return Local File object representing the path
2190 Masks and converts file path to URI. @param p input file path @return masked URI string
2191 Deprecated method to create a qualified path. @param fs FileSystem instance @return Path with masked and normalized URI
2192 Makes the given path qualified using default URI and working directory. @param path the input path to qualify @return qualified Path object
2193 Qualifies and validates file system path. @param path the path to process @return qualified Path object
2194 Retrieves file statuses for a given path. @param f input path to check @return array of FileStatus objects or throws exceptions on error
2195 Checks if a file or directory exists. @param f path to check @param recursive whether to check recursively for directories @return true if the file exists, false otherwise
2196 Opens an input stream for reading a file. @param f file path to open @return FSDataInputStream object for the file @throws IOException if an I/O error occurs
2197 Opens a file for reading. @param f path to the file @param bufferSize size of the buffer used for reading @return FSDataInputStream object for reading the file @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException if an I/O error occurs
2198 Sets the length of a file. @param f file path to modify @param newLength new length for the file @return true if operation is successful, false otherwise @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if file system is unsupported @throws IOException for other I/O errors
2199 Sets file replication factor. @param f file path @param replication desired replication factor @return true if successful, false otherwise @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws IOException for other I/O errors
2200 Sets file permissions for a specified path. @param f the path to set permissions on @param permission the new file permissions @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException if an I/O error occurs
2201 Sets ownership for a file. @param f path to the file @param username new owner's name @param groupname new group's name @throws AccessControlException if access is denied @throws UnsupportedFileSystemException if file system is not supported @throws FileNotFoundException if file does not exist @throws IOException for other I/O errors
2202 Sets modification and access times for a file. @param f path of the file @param mtime new modification time in milliseconds since epoch @param atime new access time in milliseconds since epoch @throws AccessControlException if permission is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the operation is not supported @throws IOException for other I/O errors
2203 Computes the checksum of a file. @param f file path to compute checksum for @return FileChecksum object @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws IOException other I/O errors
2204 Retrieves file status for a given path. @param f input file path @return FileStatus object representing the file's metadata @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException if an I/O error occurs
2205 Applies file permissions to a specified path. @param path target file or directory path @param mode access control mode to apply @throws AccessControlException if permission is denied @throws FileNotFoundException if the path does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException for other I/O errors
2206 Retrieves file status for a given path. @param f input file path @return FileStatus object representing the file's metadata @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException if an I/O error occurs
2207 Resolves the absolute path of a given file. @param f input file path to resolve @return resolved absolute path @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if filesystem is unsupported @throws IOException for other I/O errors
2208 Retrieves block locations for a given file path. @param f file path to query @param start starting byte offset @param len length of the range in bytes @return array of BlockLocation objects representing file blocks @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException for other I/O errors
2209 Retrieves file status for a given path. @param f input file path @return FsStatus object representing the file's status @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws UnsupportedFileSystemException if file system is unsupported @throws IOException for other I/O errors
2210 Creates a symbolic link to a target file. @param target path to the target file @param link path where the symlink should be created @param createParent if true, parent directories are created if they don't exist @throws IOException if an I/O error occurs
2211 Retrieves file statuses for a given path. @param f input path to resolve and query @return iterator of FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if the path does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException if an I/O error occurs
2212 Resolves and lists paths recursively. @param path input path to start listing from @return RemoteIterator of resolved Path objects @throws IOException if an I/O error occurs
2213 Retrieves file status iterator for a given path. @param f input file path @return RemoteIterator of LocatedFileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the filesystem is unsupported @throws IOException for other I/O errors
2214 Resolves and collects file systems associated with a given path. @param f input file path @return set of AbstractFileSystem instances @throws IOException if an I/O error occurs
2215 Applies ACL entries to a file path. @param path the target file path @param aclSpec list of ACL entries to apply @throws IOException if an I/O error occurs
2216 Sets ACLs for a given file path. @param path the target file or directory path @param aclSpec list of ACL entries to apply @throws IOException if an I/O error occurs
2217 Resolves and processes a file path within the Hadoop filesystem. @param path input file path to process
2218 Resolves and processes a file path within the Hadoop file system. @param path input path to be processed
2219 Sets ACL for a specified path. @param path file or directory path @param aclSpec list of ACL entries to apply @throws IOException if an I/O error occurs
2220 Retrieves ACL status for a given path. @param path file or directory path @return AclStatus object representing the access control list @throws IOException if an I/O error occurs
2221 Sets an extended attribute on a file. @param path the file path @param name the attribute name @param value the attribute value @param flag the set flags for the attribute @throws IOException if an I/O error occurs
2222 Resolves and retrieves a link's content by path. @param path input file path @param name link name to resolve @return byte array of the link content or null if not found @throws IOException on I/O errors during resolution
2223 Resolves and retrieves metadata for a given file path. @param path the input file path @return a map of metadata key-value pairs @throws IOException if an I/O error occurs
2224 Resolves and fetches file attributes from a given path. @param path input file path @param names list of attribute names to retrieve @return map of attribute names to their byte values @throws IOException if an I/O error occurs
2225 Resolves and links a path with a given name. @param path input path to resolve @param name name to link the resolved path with
2226 Resolves and returns a list of file names from the specified path. @param path input path to resolve and list files from @return List of file names or empty list if no files found
2227 Resolves and processes a path within a specified snapshot. @param path the input file path to resolve @param snapshotName name of the snapshot to use @return processed Path object @throws IOException if an I/O error occurs
2228 Renames a snapshot of a file or directory. @param path the path to the file or directory containing the snapshot @param snapshotOldName current name of the snapshot @param snapshotNewName new name for the snapshot @throws IOException if an I/O error occurs
2229 Creates a snapshot for the specified file path. @param path the target file or directory path @param snapshotName name of the snapshot to create @throws IOException if an I/O error occurs
2230 Resolves and processes a file path within the Hadoop filesystem. @param path input file path to process @throws IOException if an I/O error occurs during processing
2231 Applies a storage policy to a file path. @param path the file path to apply the policy to @param policyName the name of the storage policy @throws IOException if an I/O error occurs
2232 Resolves and processes a source file path within the Hadoop file system. @param src source file path to process
2233 Retrieves block storage policy for a given path. @param path the input file path @return BlockStoragePolicySpi object representing storage policy @throws IOException if an I/O error occurs
2234 Checks file system capability after resolving the given path. @param path file system path to check @param capability required capability string @return true if capability is granted, false otherwise @throws IOException on I/O errors during resolution
2235 Retrieves server defaults for a given file system path. @param path the file system path to query @return FsServerDefaults object containing default settings @throws IOException if an I/O error occurs during resolution
2236 Prepares a multipart uploader builder for the given base path. @param basePath root directory path @return MultipartUploaderBuilder instance @throws IOException if an I/O error occurs
2237 Retrieves the home directory path from an SFTP client. @param client SFTP client instance @return Path object representing the home directory or null if conversion fails
2238 Retrieves and updates file status. @return FileStatus object or null if not found @throws IOException on I/O errors
2239 Retrieves the total content length of the root directory. @return Total length as a long value @throws IOException if an I/O error occurs
2240 Resolves source path using regex mount point and interceptors. @param srcPath full source path as a string @param resolveLastComponent flag to determine if the last component should be resolved @return ResolveResult object or null if no match found
2241 Checks if a file exists in the local directories of the current context. @param pathStr relative path of the file to check @param conf Hadoop configuration object @return true if file exists in any local directory, false otherwise
2242 Marks MapFile data, index, and directory as deleted. @param fs FileSystem instance @param name directory name containing MapFile components
2243 Generates log file path based on current date and roll interval. @param now current date @return Path to the log file directory
2244 Creates a secure FileOutputStream for a file with specified permissions. @param f the File object to be created @param permissions permission mask value @return FileOutputStream for the newly created file @throws IOException if file creation or permission setting fails
2245 Checks and enforces raw reservation constraints for source and target paths. Throws exception if both or neither path is not in RESERVED_RAW. @param src source file path @param target destination file path @return true if raw xattrs should be preserved, false otherwise
2246 Returns the parent directory path. @return Path object representing the parent directory or null if invalid
2247 Retrieves the parent directory of the current path. @return Optional containing Path object of the parent or empty if no parent exists
2248 Lists directory contents and converts to PathData objects. @return iterator over PathData objects representing files in the directory @throws IOException if an I/O error occurs or directory does not exist
2249 Constructs a new FSDataOutputStreamBuilder. @param fc FileContext instance @param p Path to the file system @throws IOException if an I/O error occurs
2250 Verifies checksum for a file. @param verifyChecksum flag to enable or disable checksum verification @param f path of the file to verify @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException for other I/O errors
2251 Reads and sets file status attributes from input. @param in DataInput stream containing file status data @throws IOException if reading fails or data is invalid
2252 Constructs a LocatedFileStatus object with specified attributes and block locations. @param length size of the file or directory in bytes @param isdir true if this represents a directory, false otherwise @param block_replication replication factor for blocks @param blocksize size of each block in bytes @param modification_time time of last modification in milliseconds since epoch @param access_time time of last access in milliseconds since epoch @param permission FsPermission object representing file permissions @param owner username of the file or directory owner @param group name of the group associated with the file or directory @param symlink Path to the target if this is a symbolic link, null otherwise @param path full Path of the file or directory @param hasAcl true if ACLs are present @param isEncrypted true if the file is encrypted @param isErasureCoded true if the file uses erasure coding @param locations array of BlockLocation objects representing block locations
2253 Appends a key-value pair to the MapFile. Writes key and value, updates index if interval is reached. @param key WritableComparable key to append @param val Writable value to append @throws IOException if I/O error occurs
2254 Stops the service if not already stopped. Handles exceptions and notifications on failure.
2255 Writes a byte to the buffer and flushes if full. @param b byte to write @throws IOException if an I/O error occurs during flush
2256 Masks and processes data with checksums. @param b byte array containing data to process @param off offset in the byte array @param len length of data to process @return number of bytes processed @throws IOException if an I/O error occurs
2257 Validates and decodes input ECChunks. @param inputs array of ECChunk containing input data @param erasedIndexes indices of erased blocks @param outputs array of ECChunk for decoded output @throws IOException if decoding fails
2258 Masks and finalizes the current block if conditions are met. @param bForceFinish flag to force block finalization @throws IOException if an I/O error occurs during processing
2259 Reads and processes token storage data. @param in DataInputStream containing serialized credential data @throws IOException if I/O error occurs or unsupported format is found
2260 Retrieves and processes candidates for delegation token cleanup. @return Map of TokenIdent to DelegationTokenInformation for cleanup
2261 Reads and processes value bytes from a SequenceFile. @param rawValue ValueBytes object to read into @return Length of the value in bytes @throws IOException if an I/O error occurs during processing
2262 Serializes credentials to a DataOutput stream. @param out destination for serialized data @throws IOException if serialization fails
2263 Converts a Token to its Protobuf representation. @param tok the input Token object @return TokenProto object representing the token
2264 Masks and retrieves an entry from the current block. @throws IOException on I/O errors during key checking
2265 Compares current key with another RawComparable. @param other the RawComparable to compare against @return result of comparison (-1, 0, or 1) @throws IOException on I/O errors during comparison
2266 Adjusts key buffer and reads value data. @param key BytesWritable object to adjust @param value BytesWritable object to store processed value data @throws IOException if an I/O error occurs
2267 Advances cursor by 'n' records in TFile. @param n number of records to skip @throws IOException on I/O errors or if stream is closed
2268 Retrieves and masks a delegation token. @param url target URL for the operation @param token authentication token @param renewer user allowed to renew the token @return Token object with masked service information @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2269 Renews a delegation token. @param url target URL for the operation @param token authentication token @param dToken delegation token object @return expiration time of the renewed token in milliseconds @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2270 Cancels a delegation token without specifying a user. @param url target URL for the operation @param token authentication token @param dToken delegation token object @throws IOException if an I/O error occurs or authentication fails unexpectedly
2271 Wraps a socket with a specified timeout. @param socket underlying network socket @return SocketInputWrapper initialized with socket and input stream @throws IOException if an I/O error occurs
2272 Retrieves an output stream for the given socket with no timeout. @param socket the Socket to get the OutputStream from @return OutputStream for the socket @throws IOException if issues occur during stream creation or socket closure check
2273 Establishes a socket connection with specified timeout. @param socket the socket to connect @param address the target address for connection @param timeout maximum time to wait for connection in milliseconds
2274 Collects and returns metrics data. @return MetricsBuffer containing aggregated metric data
2275 Registers an MBean with default properties. @param serviceName name of the service @param nameName base metric name @param theMbean the MBean instance to register @return ObjectName if registration is successful, null otherwise
2276 Retrieves or creates metrics for a specified directory. @param dirName name of the directory to monitor @return ReadWriteDiskValidatorMetrics instance for the directory
2277 Initializes RPC stats for specified priority levels. @param numLevels number of priority levels to initialize
2278 Aggregates local metrics to global mutable rates. @param localStats map of local sample statistics
2279 Creates or retrieves a MutableRate metric with default settings. @param name metric name and description @return MutableRate instance
2280 Retrieves or creates a MutableRate metric with basic statistics. @param name metric name @param description metric description @return MutableRate instance
2281 Examines a Kerberos keytab file for diagnostics. @param keytabFile the File object representing the keytab
2282 Checks and validates JAAS configuration. @param jaasRequired flag indicating if JAAS is required @throws IOException if file operations fail
2283 Masks the user associated with a delegation token. @param id TokenIdent object containing user information @return Masked username as a string
2284 Ensures the existence of a ZooKeeper path with proper ACLs. @throws IOException if connection fails or is interrupted @throws InterruptedException if thread is interrupted @throws KeeperException for ZooKeeper errors
2285 Retrieves lock file data from ZooKeeper. @throws ActiveNotFoundException if active node is not found @throws KeeperException for ZooKeeper errors @throws InterruptedException if thread is interrupted @throws IOException if connection fails or is interrupted
2286 Initiates user re-login process with Kerberos. @param checkTGT flag to check TGT validity @throws IOException if an I/O error occurs during the process
2287 Initiates user re-login process with Kerberos. @throws IOException if an I/O error occurs during the process
2288 Masks and resolves the hostname in the given InetSocketAddress. @param addr original socket address @return masked or resolved InetSocketAddress, defaulting to localhost if resolution fails
2289 Updates the connection address and logs if changed. @return true if the address was updated, false otherwise @throws IOException if there's an I/O error during processing
2290 Normalizes a URI by resolving its host and setting a default port if needed. @param uri the original URI to normalize @param defaultPort the default port to use if not specified in the URI @return normalized URI with resolved host and correct port
2291 Initiates an RPC call and handles asynchronous processing. @param rpcKind type of RPC kind @param rpcRequest request data for the RPC call @param remoteId unique identifier of the remote server @param serviceClass class of the service @param fallbackToSimpleAuth flag to allow fallback to simple authentication @param alignmentContext context for alignment @return response from the RPC call or null if asynchronous @throws IOException if an I/O error occurs
2292 Handles cache entry for retry operations. @param newEntry new cache entry to process @return processed cache entry
2293 Updates the retry cache with a new entry. @param clientId byte array representing the client ID @param callId unique identifier for the call
2294 Generates a formatted summary of file system content. @param qOption enable quick format option @return formatted content summary string with default human-readable size format disabled
2295 Creates an expression instance by name using the provided configuration. @param expressionName unique identifier for the expression type @param conf configuration settings for the expression @return Expression object or null if creation fails
2296 Creates an Expression instance by class name. @param expressionClassname fully qualified class name of the Expression subclass @param conf configuration settings for the instance @return a new Expression instance or throws IllegalArgumentException if invalid class name
2297 Generates a help string listing recognized expressions. @param factory ExpressionFactory to create expression instances @return formatted help string with operators and primaries
2298 Creates an Expression instance using factory and configuration. @param expressionClass the Expression subclass to instantiate @return a new Expression instance or null if expressionClass is null
2299 Retrieves or creates a command instance by name using default configuration. @param cmd unique command identifier @return Command object or null if not found
2300 Deserializes an object from a DataInput stream. @param in DataInput stream containing serialized object @param objectWritable ObjectWritable to store deserialized data (optional) @param conf Hadoop Configuration settings @return Deserialized Java object @throws IOException if deserialization fails
2301 Creates a new Writable instance using the default configuration. @param c the Writable class type @return a new Writable instance
2302 Decodes and retrieves the TokenIdentifier from the given token. @param token input token containing encoded identifier @return decoded TokenIdentifier object or null if decoding fails @throws IOException if an I/O error occurs during decoding
2303 Prints delegation tokens matching the alias to the output stream. @param creds Credentials object containing tokens @param alias service alias text @param out PrintStream for output @throws IOException if an I/O error occurs during token processing
2304 Retrieves or creates a DiskValidator instance by name. @param diskValidator name of the DiskValidator @return DiskValidator object for validation tasks @throws DiskErrorException if the class is not found
2305 Constructs an empty BlockLocation with default values.
2306 Retrieves block locations for a file segment. @param file FileStatus object representing the file @param start Starting offset of the segment @param len Length of the segment @return Array of BlockLocation objects or empty array if no blocks found
2307 Creates a DurationStatisticSummary from IOStatistics. @param source IOStatistics object containing duration data @param key unique identifier for the statistic @param success indicates if the operation was successful @return DurationStatisticSummary encapsulating the statistical data
2308 Takes a snapshot of the current IO statistics context. @return IOStatisticsSnapshot containing the current stats
2309 Creates an IOStatisticsSnapshot from given statistics. @param statistics source IOStatistics object @return new IOStatisticsSnapshot instance
2310 Creates an IOStatisticsSnapshot from a given source. @param source IOStatistics object to copy data from, can be null @return Serializable IOStatisticsSnapshot instance
2311 Converts a RemoteIterator to a List. @param source RemoteIterator to convert @return List containing elements from the iterator @throws IOException if an I/O error occurs while processing the iterator
2312 Masks or processes a file or directory based on its existence. @param item PathData object representing the file or directory to process @throws IOException if an I/O error occurs during processing
2313 Resolves and masks group names for a given user. @param user username to resolve groups for @return Set of masked group names or empty set if resolution fails @throws IOException if an I/O error occurs during command execution
2314 Executes a script with arguments and returns masked output. @param args list of command arguments @param commandScriptName name of the script to execute @return masked output string or null if execution fails
2315 Masks a symbolic link file. @param f File object representing the symbolic link @return Masked output string or empty if null or exception occurs
2316 Sets file permissions for a given path. @param p file or directory path @param permission new file permissions to apply @throws IOException if an I/O error occurs
2317 Masks user data for a specified netgroup. @param netgroup name of the network group @return masked output string from executed command or empty string if error occurs
2318 Creates a new Credentials instance by copying another. @param credentials existing Credentials instance to copy from
2319 Merges provided credentials into the current subject's credentials. @param credentials Credentials to be merged
2320 Converts Hadoop Path to local File, ensuring it's on a LocalFileSystem. @return Local File object or throws exception if not local
2321 Ensures a directory has the correct permissions. Creates directory if it doesn't exist and sets permissions accordingly. @param localFS LocalFileSystem instance for file operations @param dir Hadoop Path representing the directory @param expected FsPermission object with desired permissions @throws IOException if an I/O error occurs
2322 Retrieves file status for a given path. @param f file path to analyze @param dereference whether to resolve symbolic links @return FileStatus object containing file details @throws IOException if an I/O error occurs
2323 Masks a file system path. @param path the original file system path @return masked Path object @throws IOException if an I/O error occurs
2324 Deletes files marked for deletion on exit. Synchronizes access to the DELETE_ON_EXIT set, iterates through entries, and attempts to delete each path using FileContext's delete method. Logs any IOExceptions encountered during deletion.
2325 Checks if a file exists at the specified path. @param f input file path @return true if file exists, false otherwise
2326 Sets the current working directory to a new path. @param newWDir the new working directory path @throws IOException if an I/O error occurs or if the path is a file
2327 Handles file copy logic considering target path and overwrite flag. @param srcName source file name @param dst destination path @param overwrite flag to allow overwriting existing files @throws AccessControlException if access is denied @throws IOException if an I/O error occurs
2328 Recursively calculates the content summary for a given file or directory. @param f input path to summarize @return ContentSummary object representing total size, file count, and directory count @throws AccessControlException if access is denied @throws FileNotFoundException if the path does not exist @throws UnsupportedFileSystemException if the file system is unsupported @throws IOException if an I/O error occurs
2329 Retrieves delegation tokens for a given path. @param p input file path @param renewer user or application requesting token renewal @return list of delegation tokens or empty if none available @throws IOException if an I/O error occurs
2330 Sets an extended attribute on a file. @param path the file path @param name the attribute name @param value the attribute value @throws IOException if an I/O error occurs
2331 Creates a snapshot of the specified file path. @param path the input file path to process @return processed Path object from snapshot creation @throws IOException if an I/O error occurs
2332 Initializes a multipart uploader builder with file context and path. @param fc FileContext for the upload @param p Path to the target file system location @throws IOException if an I/O error occurs during initialization
2333 Waits for and truncates files in the wait list. @throws IOException on I/O errors
2334 Resolves source path using registered regex mount points. @param srcPath full source path as a string @param resolveLastComponent flag to determine if the last component should be resolved @return ResolveResult object or null if no match found
2335 Checks if a file exists in local directories for a specific configuration. @param pathStr relative path of the file to check @param conf Hadoop configuration object @return true if file exists, false otherwise
2336 Masks the given path within an archive. @param path original file system path @return masked path or null if invalid
2337 Generates checksum path for a given file. @param file original file path @return Path object representing the checksum file
2338 Checks if path exists, preferring parent directory if special. @return true if path or its parent exists; false otherwise
2339 Masks file permissions and creates parent directory if specified. @param f target file path @param absolutePermission desired file permissions @param createParent flag to create parent directory if missing @throws IOException if operation fails or parent is not a directory
2340 Renames a file or directory. @param src source path @param dst destination path @param options rename options (e.g., OVERWRITE) @throws IOException if an I/O error occurs
2341 Generates checksum path for a given file. @param file original file path @return Path object representing the checksum file
2342 Checks if a path is under the specified base directory. @param p Path to validate @param basePath Designated parent directory @return true if p is under basePath, false otherwise
2343 Checks if the parent directory path is invalid. @return true if parent directory is null, false otherwise
2344 Constructs a new path by appending a suffix to the current path. @param suffix string to append as suffix @return new Path object with appended suffix
2345 Masks and qualifies a file system path. @param pathURI URI of the original path @param pathWithLink Path containing symbolic links @param target Target path to be masked @return Qualified Path object or original target if scheme and auth are null
2346 Renames a file or directory. @param src source path to rename from @param dst destination path to rename to @param overwrite flag indicating if destination can be overwritten @throws various exceptions for invalid operations or access issues
2347 Constructs a FileStatus object for a non-symbolic link file or directory. @param length size of the file or directory in bytes @param isdir true if this represents a directory, false otherwise @param block_replication replication factor for blocks @param blocksize size of each block in bytes @param modification_time time of last modification in milliseconds since epoch @param access_time time of last access in milliseconds since epoch @param permission FsPermission object representing file permissions @param owner username of the file or directory owner @param group name of the group associated with the file or directory @param path full Path of the file or directory
2348 Creates a new FileStatus object by copying attributes from another. @param other source FileStatus object to copy from
2349 Constructs a LocatedFileStatus object with specified attributes and block locations. Handles symbolic links by setting the symlink path if applicable. @param stat FileStatus object containing file metadata @param locations array of BlockLocation objects representing block locations
2350 Deprecated constructor for LocatedFileStatus. @deprecated Use the preferred constructor instead.
2351 Appends a Writable value to the MapFile and updates the count. @param value the Writable object to append @throws IOException if I/O error occurs during appending
2352 Masks and writes data with checksums. @param b byte array containing data to process @param off offset in the byte array @param len length of data to process @throws IOException if an I/O error occurs or invalid parameters are provided
2353 Overrides and extends base class method to include additional processing. Calls m1() for custom logic before delegating to superclass implementation.
2354 Resets scanner state and closes resources. @throws IOException if an I/O error occurs during resource closure
2355 Marks the current position and handles I/O operations. @throws IOException if an I/O error occurs
2356 Reads and deserializes credentials from a file. @param filename File containing serialized credential data @param conf Configuration object (not used in this method) @return Credentials object populated with deserialized data @throws IOException if I/O error occurs during reading or processing
2357 Searches for a key within the current block. @param key the key to search for @param greater flag indicating if searching for greater or equal key @return true if key is found, false otherwise @throws IOException on I/O errors during search
2358 Publishes metrics immediately if sinks are active. Checks if there are active sinks, then publishes metrics data.
2359 Initializes metrics for a given RPC protocol. @param protocol the class representing the RPC protocol to process
2360 Updates metrics by aggregating local states to global rates.
2361 Updates a MutableStat metric with a given value. @param name metric name @param value new numerical value to add
2362 Masks the owner of a delegation token and updates statistics. @param id TokenIdent object containing user information
2363 Masks and updates token owner statistics. @param id TokenIdent object containing user information
2364 Retrieves and processes active service target. @return HAServiceTarget object or null if active node not found @throws IOException for ZooKeeper errors or connection issues @throws InterruptedException if thread is interrupted
2365 Initializes an ActiveStandbyElector with ZooKeeper configuration. @param zookeeperHostPorts comma-separated list of ZooKeeper host:port pairs @param zookeeperSessionTimeout session timeout in milliseconds @param parentZnodeName parent ZNode name for election @param acl access control list for ZNodes @param authInfo authentication information for ZooKeeper @param app callback for application-specific logic @param maxRetryNum maximum number of retries for connection establishment @param failFast if true, attempt to create a connection immediately; otherwise, re-establish session @param truststoreKeystore truststore and keystore configuration @throws IOException if connection fails or is interrupted @throws HadoopIllegalArgumentException for invalid arguments @throws KeeperException for ZooKeeper errors
2366 Creates a network socket address by resolving the hostname. @param target URI target string @param defaultPort default port number if not specified in target @param configName configuration property name for error messages @param useCacheIfPresent whether to use cached URI if available @return InetSocketAddress object with resolved hostname
2367 Retrieves client's address from the given server. @param server instance of Server class @return InetSocketAddress representing the client's address
2368 Initiates an RPC call with default service class. @param rpcKind type of RPC kind @param rpcRequest request data for the RPC call @param remoteId unique identifier of the remote server @param fallbackToSimpleAuth flag to allow fallback to simple authentication @return response from the RPC call or null if asynchronous @throws IOException if an I/O error occurs
2369 Creates a new CacheEntry with adjusted expiration time. @param cache RetryCache instance to manage entries @param clientId unique client identifier as byte array @param callId unique call identifier @return CacheEntry instance or null if retry should be skipped
2370 Creates and returns a new cache entry with the given payload. Skips creation if retry should be skipped based on client ID and call ID. @param cache RetryCache instance to use for caching @param payload data to be cached @param clientId unique identifier for the client @param callId unique identifier for the call @return CacheEntryWithPayload object or null if retry is skipped
2371 Retrieves an Expression instance by name using factory configuration. @param expressionName unique identifier for the expression type @return Expression object or null if creation fails
2372 Retrieves or creates a comparator for a given class. @param c the class of keys to be compared @param conf configuration settings @return WritableComparator instance for the specified class
2373 Constructs a WritableComparator without configuration or instance creation. @param keyClass the class of keys to be compared
2374 Initializes LocalDirAllocator with a configuration item name. @param contextCfgItemName the configuration item name for disk validation
2375 Masks deprecated configuration keys. Updates properties with new key values if available.
2376 Copy constructor for Configuration. Clones properties and resources from the provided Configuration instance. @param other Configuration instance to copy from
2377 Masks and processes configuration resources. @param conf Configuration object containing settings and restrictions
2378 Retrieves alternative configuration keys for a deprecated key. @param name original configuration key @return array of alternative keys or null if none exist
2379 Masks configuration properties by name. Initializes properties if not already set. @param name property key to mask @return masked string array or null if not found
2380 Retrieves and processes configuration properties. @return processed integer value from configuration
2381 Updates configuration settings by applying overlays. Calls methods to retrieve and manipulate properties.
2382 Retrieves and converts configuration properties to a map of strings. @return Iterator over entries with string keys and values
2383 Masks configuration properties matching a regex pattern. @param regex regular expression to match property keys @return Map of masked property keys and their values
2384 Processes file ranges for checksum validation and data reading. @param ranges list of FileRange objects defining read boundaries @param allocate Function to allocate ByteBuffer of specified size @throws IOException if an I/O error occurs during processing
2385 Acquires buffer data for a specified block number with retry logic. @param blockNumber unique identifier for the buffer block @return BufferData object or throws exception if acquisition fails
2386 Waits for files in waitList to reach the specified replication count. @throws IOException on I/O errors
2387 Retrieves block locations for a specified file path segment. @param p Path object representing the file @param start Starting offset of the segment @param len Length of the segment @return Array of BlockLocation objects or empty array if no blocks found @throws IOException if an I/O error occurs
2388 Creates a DurationStatisticSummary from IOStatistics for successful operations. @param source IOStatistics object containing duration data @param key unique identifier for the statistic @return DurationStatisticSummary encapsulating the statistical data
2389 Creates an IOStatisticsSnapshot with default settings. @return Serializable IOStatisticsSnapshot instance
2390 Creates a serializable I/O statistics snapshot from a given source. @param source the source object containing IO data, can be null @return Serializable IOStatisticsSnapshot or null if stats are unavailable
2391 Converts a RemoteIterator to an array. @param source RemoteIterator to convert @param a target array for conversion @return array containing elements from the iterator @throws IOException if an I/O error occurs while processing the iterator
2392 Renews a delegation token. @param token the token to be renewed @param renewer entity allowed to renew the token @return new renewal time in milliseconds @throws InvalidToken if token is invalid or expired @throws IOException on I/O errors
2393 Cancels a delegation token. @param token the token to cancel @param canceller the entity attempting to cancel the token @return TokenIdent object of the canceled token @throws IOException if an I/O error occurs or cancellation is unauthorized
2394 Processes a list of file or directory paths. @param args LinkedList of PathData objects representing the files/directories to process @throws IOException if an I/O error occurs during processing
2395 Masks and retrieves group names for a specified user. @param userName username to resolve groups for @return List of masked group names or empty list if resolution fails @throws IOException if an I/O error occurs during command execution
2396 Retrieves the hard link count for a given file. @param fileName the file to check @return number of hard links or throws IOException if an error occurs
2397 Creates a symbolic link from target to linkname. @param target path to the target file or directory @param linkname path where the symlink should be created @return exit code of the command execution, 0 if successful @throws IOException if an I/O error occurs during execution
2398 Changes file permissions recursively. @param filename path of the file to change permissions for @param perm permission string to apply @param recursive true if applied recursively @return exit code from the command execution @throws IOException if an I/O error occurs during execution
2399 Checks if 'setsid' is supported on the current system. @return true if 'setsid' is available and usable, false otherwise
2400 Changes file ownership to specified user and/or group. @param file target file for ownership change @param username new owner's username (optional) @param groupname new group name (optional) @throws IOException if operation fails or both username and groupname are null
2401 Masks and retrieves users for a specified netgroup. @param netgroup name of the network group @return list of masked usernames or empty if none found
2402 Retrieves and filters user credentials. @return Credentials object with filtered tokens
2403 Lists files matching a filter in a directory. @param f directory path to search @param filter criteria for file selection @return array of matched FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if the directory does not exist @throws IOException on other I/O errors
2404 Lists file statuses for given paths matching a filter. @param files array of file/directory paths to check @param filter criteria for file selection @return array of matched FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if a directory does not exist @throws IOException on other I/O errors
2405 Resolves a file system path to determine its target location. @param p full file system path as a string @param resolveLastComponent flag to resolve the last component of the path @return ResolveResult object with resolved path details or null if not found @throws IOException if an I/O error occurs during resolution
2406 Copies a file with checksum verification. @param src source file path @param replication desired replication factor @return true if copy and checksum checks succeed, false otherwise
2407 Checks file existence and handles checksum verification. @param f file path to check @param recursive flag for recursive directory checks @return true if file exists with valid checksum, false otherwise
2408 Renames a file or directory from src to dst. Handles checksums for data integrity. @param src source path @param dst destination path @return true if rename is successful, false otherwise
2409 Deletes a file or directory. @param f file path to delete @param recursive whether to delete recursively for directories @return true if deletion is successful, false otherwise
2410 Checks if the target path is a descendant of any ancestor of the source path. @param source PathData representing the starting point in the hierarchy @param target PathData representing the path to check for ancestry @return true if target is a descendant of any ancestor of source, false otherwise
2411 Masks a given path within the chroot environment. @param path original file system path @return masked path relative to chroot root
2412 Masks the given path to ensure it is relative to the root directory. @param p input file path @return masked path or empty string if already rooted
2413 Masks the given path to ensure it is within the chroot environment. @param p file or directory path @return masked path string, empty if already rooted @throws IOException if path validation fails
2414 Resolves file system paths with symlinks. @param fc FileContext instance @param path Path to resolve @return Resolved path object @throws IOException if symlink resolution fails or exceeds max links
2415 Renames a file or directory. @param src source path to rename from @param dst destination path to rename to @param options optional Rename options @throws various exceptions for invalid operations or access issues
2416 Generates FileStatus for a Hadoop Archive entry. @param h HarStatus object representing archive metadata @return FileStatus object with masked path and adjusted modification time @throws IOException if an I/O error occurs during metadata retrieval
2417 Constructs a FileStatus object for an FTP file. @param ftpFile the FTP file object to process @param parentPath the parent directory path @return FileStatus representing the FTP file's metadata
2418 Validates token file and logs errors. @param tokenFile File containing Kerberos tokens @param conf Configuration object @param category Error category @param message Error message template @return True if validation passes, false otherwise
2419 Prints delegation tokens from a file for a given alias. @param tokenFile File containing serialized credential data @param alias service alias text @param conf Configuration object (not used in this method) @param out PrintStream for output @throws IOException if an I/O error occurs during reading or processing
2420 Updates local cache of delegation tokens. @param ident TokenIdent object representing the token to update
2421 Constructs a MetricsSystemImpl instance with the given prefix. Initializes various maps and lists for managing metrics sources, sinks, and configurations. Calls initSystemMBean if prefix is not null to set up MBean registration. @param prefix unique identifier prefix for the metrics system
2422 Handles RPC requests by invoking specified method on a service. @param server RPC server instance @param connectionProtocolName name of the connection protocol @param request buffer containing the request data @param methodName name of the method to invoke @param protocolImpl implementation of the RPC protocol @return RpcWritable result or null if deferred @throws Exception if an error occurs during processing
2423 Updates a MutableStat metric with elapsed time. @param name metric name @param elapsed time duration to add
2424 Adds a masked delegation token with a specified renewal date. @param identifier TokenIdent object for the token to be added @param renewDate timestamp for token renewal @throws IOException if adding to a running SecretManager or duplicate token is added
2425 Masks owners of all current delegation tokens and updates statistics. Iterates through active tokens, invoking masking and stats update methods.
2426 Masks and removes expired delegation tokens. @throws IOException if an I/O error occurs during masking or removal
2427 Constructs an ActiveStandbyElector with ZooKeeper configuration. @param zookeeperHostPorts comma-separated list of ZooKeeper host:port pairs @param zookeeperSessionTimeout session timeout in milliseconds @param parentZnodeName parent ZNode name for election @param acl access control list for ZNodes @param authInfo authentication information for ZooKeeper @param app callback for application-specific logic @param maxRetryNum maximum number of retries for connection establishment @param truststoreKeystore truststore and keystore configuration @throws IOException if connection fails or is interrupted @throws HadoopIllegalArgumentException for invalid arguments @throws KeeperException for ZooKeeper errors
2428 Initiates the election process with provided data. @param data application-specific data for the election @throws HadoopIllegalArgumentException if data is null
2429 Creates a network socket address by resolving the hostname. @param target URI target string @param defaultPort default port number if not specified in target @param configName configuration property name for error messages @return InetSocketAddress object with resolved hostname
2430 Handles RPC invocation for a masked function. @param proxy the proxy object @param method the Method to invoke remotely @param args arguments for the remote method @return Message response from the RPC call or null if asynchronous @throws ServiceException if an error occurs during RPC processing
2431 Handles RPC call with parameter masking. @param proxy client-side proxy object @param method remote method to invoke @param args arguments for the remote method @return response from the server or null if asynchronous @throws ServiceException if an error occurs during processing
2432 Parses expressions from arguments and constructs a query. @param args deque of expression arguments @return Expression representing the parsed query @throws IOException if parsing fails
2433 Retrieves or creates a comparator for a given class with default configuration. @param c the class of keys to be compared @return WritableComparator instance for the specified class
2434 Authenticates user using delegation token or fallback method. @param request HTTP servlet request object @param response HttpServletResponse object for error responses @return AuthenticationToken if successful, null otherwise
2435 Masks deprecated configuration keys with new names. @param deprecations context for handling deprecated keys @param name original configuration property name @return array of masked configuration property names
2436 Masks sensitive environment variables. @param env map of environment variables to be masked
2437 Cancels a delegation token and returns its identifier. @param token the token to cancel @param canceller the entity attempting to cancel the token @return TokenIdent object of the canceled token @throws IOException if an I/O error occurs or cancellation is unauthorized
2438 Fetches and updates netgroups for a specified user. @param user unique user identifier @return List of netgroups associated with the user @throws IOException if an error occurs during command execution or cache update
2439 Extracts a tar archive to a specified directory. @param inFile input file containing the tar archive @param untarDir target directory for extraction @throws IOException if an I/O error occurs during extraction
2440 Changes file permissions. @param filename path of the file to change permissions for @param perm permission string to apply @return exit code from the command execution @throws IOException if an I/O error occurs during execution
2441 Sets file readability on Windows. @param f File to modify permissions for @param readable true to make file readable, false otherwise @return true if operation is successful, false otherwise
2442 Sets file write permission on Windows. @param f File object to modify permissions for @param writable true to make file writable, false otherwise @return true if operation succeeds, false otherwise
2443 Sets file executable permission on Windows. @param f File object to modify permissions for @param executable true to set executable, false to unset @return true if operation succeeds, false otherwise
2444 Masks file permission information. Uses native IO for metadata update if conditions are met, otherwise falls back to shell commands. Logs errors from native call failures.
2445 Changes file ownership to specified user and/or group. @param p target path for ownership change @param username new owner's username (optional) @param groupname new group name (optional) @throws IOException if operation fails or both username and groupname are null
2446 Sets file permissions for a given file. @param f target file @param permission desired file permissions @throws IOException if an I/O error occurs during operation
2447 Masks specified netgroups and caches user data. @param groups list of netgroup names to mask @throws IOException if an I/O error occurs during processing
2448 Logs Kerberos token information for a given user. @param ugi UserGroupInformation object representing the user
2449 Logs user group information and associated tokens. @param log Logger instance for logging @param caption Description of the log entry @param ugi UserGroupInformation object containing user credentials
2450 Validates and sets directory permissions. @param localFS LocalFileSystem instance for file operations @param dir Hadoop Path representing the directory @param expected FsPermission object with desired permissions @throws DiskErrorException if directory validation fails @throws IOException if an I/O error occurs
2451 Validates directory permissions and ensures existence. @param localFS LocalFileSystem instance for file operations @param dir Hadoop Path representing the directory @param expected FsPermission object with desired permissions @throws DiskErrorException if validation or creation fails @throws IOException if an I/O error occurs
2452 Lists file statuses for given paths using a default filter. @param files array of file/directory paths to check @return array of matched FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if a directory does not exist @throws IOException on other I/O errors
2453 Computes total content length of the root directory. @return Total length as a long value @throws IOException if an I/O error occurs or operation is outside mount point
2454 Adjusts block locations for a specified range within an HAR file. @param file FileStatus object representing the file @param start Starting offset of the segment @param len Length of the segment @return adjusted BlockLocation array
2455 Opens an input stream for reading a file from the HAR archive. @param f path to the file within the archive @param bufferSize buffer size for input operations @return FSDataInputStream for reading the file data @throws FileNotFoundException if the specified path is not a file @throws IOException if an I/O error occurs
2456 Returns an input stream for reading a file with checksum verification. @param f the path to the file @param bufferSize size of the buffer used for reading @return FSDataInputStream with checksum validation
2457 Opens a file for reading with checksum verification. @param f path to the file @param bufferSize size of the buffer @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2458 Renames a file or directory with checksum handling. @param src source path to rename from @param dst destination path to rename to @throws IOException if an I/O error occurs @throws UnresolvedLinkException if a symbolic link could not be resolved
2459 Renames a file or directory across file systems. @param src source path to rename from @param dst destination path to rename to @param options optional Rename options @throws various exceptions for invalid operations or access issues
2460 Populates a list of FileStatus objects for children in a HAR archive. @param parent HarStatus object representing the parent directory @param statuses List to store generated FileStatus objects @throws IOException if an I/O error occurs during metadata retrieval
2461 Masks file status path and adjusts modification time. @param f file path to process @return masked FileStatus object or throws IOException if invalid
2462 Retrieves FileStatus for a given SFTP file. @param client SFTP client instance @param file path of the file to check @return FileStatus object or throws FileNotFoundException if not found
2463 Retrieves FileStatus for a specified file on an FTP server. @param client FTPClient instance connected to the server @param file Path of the file to retrieve status for @return FileStatus object representing the file's metadata @throws IOException if an I/O error occurs
2464 Default constructor for MetricsSystemImpl. Delegates to the parameterized constructor with null prefix.
2465 Initializes a MutableRollingAverages instance. @param metricValueName name of the metric to track
2466 Configures rolling averages with specified parameters. @param windows number of windows for averaging @param interval time interval between updates @param timeUnit unit of the time interval
2467 Handles election logic based on health state and delay. @param elector used for managing elections @param localTarget target service for election @param lastHealthState current health status of the service @param serviceState current state of the HA service @param quitElectionOnBadState flag to quit election on bad state @param delayJoiningUntilNanotime time until joining is allowed
2468 Handles failure to become active by attempting to re-join the election. @param SLEEP_AFTER_FAILURE_TO_BECOME_ACTIVE time to wait before retrying
2469 Handles ZooKeeper watcher events and manages state transitions. @param zk ZooKeeper client instance @param event WatchedEvent received from ZooKeeper
2470 Creates a network socket address by resolving the hostname. @param target URI target string @param defaultPort default port number if not specified in target @return InetSocketAddress object with resolved hostname
2471 Handles authentication using delegation tokens. @param request HTTP servlet request object @param response HttpServletResponse object for error responses @return AuthenticationToken if successful, null otherwise @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
2472 Checks if a configuration property is valid after masking deprecated keys. @param name original configuration property name @return true if the masked property is valid, false otherwise
2473 Masks deprecated configuration key with new name. @param name original configuration property name @return masked configuration property name or null if not found
2474 Masks a configuration property by name and value. Handles deprecation, updates sources, and manages alternative keys. @param name the configuration property key @param value the value to set for the key @param source the source of the configuration update
2475 Masks deprecated configuration keys. Handles key deprecation and overlays properties. @param name original configuration property name
2476 Returns virtual memory size. Calls refreshIfNeeded to update metrics if necessary. @return Virtual memory size in bytes
2477 Returns memory size after refreshing metrics if needed. @return current memory size in bytes
2478 Returns available virtual memory. Refreshes metrics if needed before returning. @return Available virtual memory in bytes
2479 Returns available memory in bytes. Refreshes metrics if needed before retrieval. @return available memory in bytes
2480 Returns the number of processors. Refreshes metrics if needed before retrieval. @return Number of processor cores
2481 Retrieves CPU frequency in kHz. Refreshes metrics if needed before returning the value. @return CPU frequency in kHz
2482 Returns cumulative CPU time in milliseconds. Calls refreshIfNeeded to update metrics if necessary. @return Cumulative CPU time in milliseconds
2483 Returns CPU usage normalized by the number of processors. @return Normalized CPU usage percentage or -1 if unavailable
2484 Returns CPU usage percentage. @return CPU usage as a float between 0 and 1, or -1 if not available
2485 Returns network bytes read. Calls refreshIfNeeded to update metrics if necessary. @return Total network bytes read since last reset
2486 Returns network bytes written. Refreshes metrics if needed before returning the value. @return Total network bytes written
2487 Masks specified netgroups and caches user data. @throws IOException if an I/O error occurs during processing
2488 Updates the file system status for a specified mount point. @param viewFileSystem ViewFileSystem instance to interact with @param mountPointMap map of MountPoint to FsStatus @param mountPoint the specific mount point to update @param path the file system path, defaults to root if null
2489 Masks and retrieves file status for a given path. @param f original file system path @return array of masked FileStatus objects @throws IOException if an I/O error occurs
2490 Retrieves file status for a given path. @param f file path to analyze @param dereference whether to resolve symbolic links @return FileStatus object containing file details @throws IOException if an I/O error occurs
2491 Retrieves file status for a given path. @param f the path of the file or directory @return FileStatus object representing the file's metadata @throws AccessControlException if access is denied @throws FileNotFoundException if the file does not exist @throws UnresolvedLinkException if a symlink cannot be resolved @throws IOException for other I/O errors
2492 Lists file statuses in the specified path. @param f directory path to list files from @return array of FileStatus objects representing the files and directories @throws AccessControlException if access is denied @throws FileNotFoundException if the path does not exist @throws UnresolvedLinkException if a symlink cannot be resolved @throws IOException for other I/O errors
2493 Checks if a file exists on the SFTP server. @param channel SFTP client instance @param file path of the file to check @return true if file exists, false otherwise
2494 Retrieves SFTP file status. @param channel SFTP channel instance @param sftpFile SFTP file entry object @param parentPath parent directory path @return FileStatus object for the SFTP file @throws IOException if an I/O error occurs
2495 Checks if a given SFTP file is not a directory. @param channel SFTP client channel @param file path of the file to check @return true if the file is not a directory, false otherwise or on error
2496 Checks if a file exists on the FTP server. @param client connected FTPClient instance @param file Path of the file to check @return true if file exists, false otherwise
2497 Retrieves file status for a given path on an FTP server. @param client FTPClient instance connected to the server @param file Path object representing the target file or directory @return Array of FileStatus objects, each representing metadata of a file or subdirectory @throws IOException if an I/O error occurs during communication with the server
2498 Checks if a file is neither a directory nor a symlink. @param client FTPClient instance connected to the server @param file Path of the file to check @return true if not a directory or symlink, false otherwise
2499 Constructs a CBZip2InputStream for decompression. @param in input stream containing BZip2 compressed data @param readMode mode of reading (CONTINUOUS or BYBLOCK) @throws IOException on I/O errors during initialization
2500 Skips BZip2 decompression and returns the number of bytes read. @param in input stream containing BZip2 compressed data @return Number of bytes processed from the input stream
2501 Handles the result of creating a ZooKeeper node. @param rc Result code from ZooKeeper operation @param path Path of the created node @param ctx Context object for validation @param name Name associated with the operation
2502 Handles ZooKeeper node state changes during election process. @param rc operation result code @param path affected node path @param ctx context object @param stat node statistics
2503 Creates a network socket address by resolving the hostname. @param target URI target string @return InetSocketAddress object with resolved hostname
2504 Parses server address specifications into a list of InetSocketAddress objects. @param specs comma-separated server address specifications @param defaultPort default port number if not specified in specs @return List of InetSocketAddress objects
2505 Masks the host and port of a given URI. @param uri target URI to mask @param defPort default port number if not specified in URI @return masked URI string or null if authority is missing
2506 Generates a masked XML document of configuration properties. @param propertyName specific property to mask or null for all @param redactor object used for masking sensitive values @return XML Document with masked properties @throws IOException if parsing fails @throws IllegalArgumentException if specified property is not found
2507 Substitutes variables in expression with corresponding values. @param expr input expression with variables @return string with substituted variables or original if no substitutions made
2508 Handles reconfiguration of a Reconfigurable object based on HTTP request parameters. @param out PrintWriter for HTML output @param reconf the Reconfigurable object to be reconfigured @param req HTTP servlet request containing configuration changes @throws ReconfigurationException if an error occurs during reconfiguration
2509 Masks a configuration property by name and value. @param name the configuration property key @param value the value to set for the key
2510 Logs and sets a configuration property. @param name the configuration property key @param value the value to set for the key @param source the source of the configuration update
2511 Masks a directory by deleting it and optionally granting permissions. @param dir the directory to mask @param tryGrantPermissions whether to attempt granting permissions before deletion @return true if masking is successful, false otherwise
2512 Returns the function mask value. @return integer representing the function mask
2513 Masks and updates file system status for given path. @param fileSystem the FileSystem to interact with @param path the file system path @return Map of MountPoint to FsStatus @throws IOException if an I/O error occurs
2514 Masks and qualifies a file system path, handling symbolic links. @param f file path to analyze @return FileStatus object with masked path if it's a symlink @throws IOException if an I/O error occurs
2515 Renames a file on the SFTP server. @param channel SFTP client instance @param src source file path @param dst destination file path @return true if rename is successful, false otherwise @throws IOException if an I/O error occurs or paths are invalid
2516 Retrieves the status of a file or directory in an SFTP filesystem. @param client SFTP client instance @param file path to the file or directory @return array of FileStatus objects representing the file or its contents @throws IOException if an I/O error occurs
2517 Recursively creates directories on an SFTP server. @param client SFTP channel for file operations @param file path of the directory to create @param permission permissions for the new directory @return true if directories were successfully created, false otherwise
2518 Lists file statuses matching a given pattern. @param pathPattern the pattern to match file paths @return array of FileStatus objects or null if no matches found @throws AccessControlException on access control failure @throws UnsupportedFileSystemException on unsupported file system operations @throws IOException on I/O errors
2519 Lists file statuses matching a pattern with a filter. @param pathPattern the pattern to match file paths @param filter PathFilter to apply during matching @return array of FileStatus objects or null if no matches found @throws AccessControlException on access control issues @throws UnsupportedFileSystemException on unsupported file system operations @throws IOException on I/O errors
2520 Finds files matching a given path pattern. @param pathPattern the file path pattern to search for @return array of FileStatus objects or null if no matches found @throws IOException on I/O errors
2521 Expands file patterns into actual file statuses. @param pathPattern Path pattern to match and expand @param filter PathFilter to apply during expansion @return array of FileStatus objects or null if no matches found @throws IOException on I/O errors
2522 Renames a file on the FTP server. @param client connected FTPClient instance @param src source file path @param dst destination file path @return true if rename is successful, false otherwise
2523 Deletes a file or directory on an FTP server. @param client FTPClient instance connected to the server @param file Path of the file or directory to delete @param recursive true if deleting directories recursively, false otherwise @return true if deletion is successful, false otherwise @throws IOException if an I/O error occurs during deletion
2524 Creates a directory on the FTP server with specified permissions. @param client connected FTPClient instance @param file Path of the directory to create @param permission FsPermission for the new directory @return true if directory is successfully created, false otherwise
2525 Masks the IP and port from a given string. @param ipPort input string containing IP and port @return masked "address:port" string or original if invalid
2526 Generates an InetSocketAddress from a token's service name. @param token security token object @return InetSocketAddress with resolved hostname or null if invalid
2527 Generates a masked token service from a URI. @param uri target URI @return Text object with masked host and port
2528 Masks the host and port of a URI, returning null if m1 is not null. @return Masked URI string or null if m1 is non-null
2529 Masks file system URI by host and port. @return masked URI string or null if authority is missing
2530 Masks variables in expression by substituting them with corresponding values. @param expr input expression with variables @return string with masked variables or original if no substitutions made
2531 Retrieves and processes a configuration property by name. Handles deprecated keys and variable substitutions. @param name original configuration property name @return processed configuration value or null if not found
2532 Retrieves configuration property value with variable substitution. @param name original configuration property name @param defaultValue default value if property not found @return final masked and substituted configuration value
2533 Masks a configuration property by key and value. Validates and sets the property in both mandatory and optional keys. @param key the configuration property key @param value the value to set for the key @return current builder instance cast to type B
2534 Masks a configuration property and sets its value. Validates the key as mandatory and applies the value. @param key the configuration property key @param value the value to set for the key @return current builder instance cast to type B
2535 Masks the default file system name in configuration. @param conf Configuration object to update @param uri URI containing the new file system name
2536 Masks a view file system link in the configuration. @param conf Configuration object to update @param mountTableName Name of the mount table @param src Source path for the link @param target Target URI for the link
2537 Masks a configuration property for a mount table. @param conf Configuration object to set the property in @param mountTableName Name of the mount table @param target Target URI for the link
2538 Masks a configuration property for a mount table. @param conf Configuration object to modify @param mountTableName Name of the mount table @param target Target URI for the fallback link
2539 Masks a configuration property for merging viewfs links. @param conf Configuration object to modify @param mountTableName name of the mount table @param targets array of target URIs for merging
2540 Masks a configuration property for a view file system link. @param conf Configuration object to set the property in @param mountTableName Name of the mount table @param src Source path for the link @param settings Additional settings for the link @param targets Target paths for the link
2541 Masks a configuration property for a view file system mount table. @param conf Configuration object to modify @param mountTableName name of the mount table @param srcRegex source regex pattern @param targetStr target string for mapping @param interceptorSettings optional interceptor settings
2542 Masks the home directory configuration for a specified mount table. @param conf Configuration object to apply settings @param mountTableName Name of the mount table @param homedir Home directory path, must start with '/'
2543 Applies a file system permission mask to a configuration. @param conf Configuration object to apply the mask to @param umask FsPermission object representing the mask
2544 Masks a list of classes in the configuration for compression codecs. @param conf Configuration object to update @param classes List of Class objects representing codecs
2545 Configures compression type for SequenceFiles. @param job Hadoop Configuration object @param val desired CompressionType value
2546 Configures and masks proxy user settings from FilterConfig. @param filterConfig configuration settings for the filter @return Configuration object with masked proxy user properties
2547 Parses and processes credential management commands. @param args command-line arguments @return exit code (0 for success, 1 for error)
2548 Masks a configuration property by name and integer value. @param name the configuration property key @param value the integer value to set for the key
2549 Masks a configuration property by name and numeric value. @param name the configuration property key @param value the numeric value to set for the key
2550 Masks a configuration property by name and float value. @param name the configuration property key @param value the float value to set for the key
2551 Masks a configuration property by name and numeric value. @param name the configuration property key @param value the numeric value to set for the key
2552 Masks a configuration property by converting boolean to string. @param name the configuration property key @param value the boolean value to set for the key
2553 Masks a configuration property with a time-based value. @param name the configuration property key @param value the base time value @param unit the time unit for conversion
2554 Masks a configuration property with a value and storage unit. @param name the configuration property key @param value the numeric value to set for the key @param unit the storage unit to apply to the value
2555 Masks a configuration property based on a regex pattern. @param name the configuration property key @param pattern the regex pattern to match against
2556 Masks configuration properties by joining multiple values. @param name property key to mask @param values array of strings representing property values
2557 Masks a configuration property with an InetSocketAddress. @param name the configuration property key @param addr the InetSocketAddress to mask
2558 Masks a configuration property with validation. @param name the configuration property key @param theClass the class associated with the property @param xface interface for validation
2559 Masks a directory by deleting it without granting permissions. @param dir the directory to mask @return true if masking is successful, false otherwise
2560 Masks a directory by deleting its contents and optionally granting permissions. @param dir the directory to mask @param tryGrantPermissions whether to attempt granting permissions before deletion @return true if masking is successful, false otherwise
2561 Lists file statuses in a directory or returns status for a single file. @param f path to the file or directory @return array of FileStatus objects @throws IOException if an I/O error occurs or file does not exist
2562 Masks a symbolic link file and returns its status. @param f Path of the file to analyze @return FileStatus object with masked details or default if not found @throws IOException if an I/O error occurs
2563 Deletes a file or directory in the SFTP filesystem. @param channel SFTP client instance @param file path to the file or directory to delete @param recursive true if directories should be deleted recursively @return true if deletion is successful, false otherwise @throws IOException if an I/O error occurs
2564 Creates a split compression input stream for BZip2. @param seekableIn source input stream that must be Seekable @param decompressor unused parameter in this method @param start starting position in the stream @param end ending position in the stream @param readMode mode of reading (CONTINUOUS or BYBLOCK) @return SplitCompressionInputStream for BZip2 decompression @throws IOException on I/O errors or if seekableIn is not Seekable
2565 Processes annotated fields to register metrics. @param source the object containing metric annotations @param field the field being processed
2566 Fetches configuration value for a specific storage type and property. @param conf Hadoop configuration object @param t storage type @param name property name @return configuration value or null if not found
2567 Determines the FTP transfer mode based on configuration. @param conf Configuration object containing FTP settings @return Transfer mode constant (BLOCK, STREAM, or COMPRESSED)
2568 Configures FTP client data connection mode based on configuration. @param client FTPClient instance to configure @param conf Configuration object containing settings
2569 Constructs configuration key for home directory in a specified mount table. @param conf Hadoop configuration object @param mountTableName name of the mount table @return full configuration key string
2570 Retrieves and applies the file system umask from configuration. @param conf Configuration object containing user settings @return FsPermission object with applied umask
2571 Retrieves and configures compression codecs from configuration. @param conf Configuration object containing codec settings @return List of configured CompressionCodec classes
2572 Determines compression type for SequenceFiles. @param job Configuration object containing settings @return CompressionType based on configuration or default RECORD
2573 Masks a configuration property by combining its value and related configuration. @param property name of the configuration property to mask @return masked property string with original and related values, or "<NOT SET>" if not found
2574 Masks Kerberos token files and validates their existence. @param conf Hadoop configuration object @throws ClassNotFoundException if class not found @throws KerberosDiagsFailure for Kerberos diagnostics failure @throws NoSuchMethodException if method does not exist @throws SecurityException if security issue occurs
2575 Loads and initializes the key store with credentials. @throws IOException if key store operations fail
2576 Retrieves and returns the primary hostname for security configuration. @param conf Configuration object containing DNS settings @return Primary hostname or local host if config is missing @throws UnknownHostException if network interface is not found
2577 Retrieves and masks the Kerberos principal for a given protocol. @param protocol the class representing the protocol @param conf the Hadoop configuration object @return masked Kerberos principal or null if not found
2578 Masks configuration property by name. @param name configuration property name @return masked value or null if not found
2579 Masks a configuration property by name and value. @param name the configuration property key @param value the value to set for the key
2580 Converts a configuration property to a specified time unit. @param name configuration property name @param defaultValue default value if property is not found @param defaultUnit default time unit for the value @param returnUnit target time unit for conversion @return converted time value in the target unit or default value if not found
2581 Retrieves and converts a storage size configuration value. @param name config property name @param defaultValue default value if not found @param targetUnit target storage unit @return converted storage size in target unit
2582 Converts a storage size configuration to a specified unit. @param name config property name @param defaultValue default value if config is missing or invalid @param targetUnit desired storage unit @return size in target unit, or default value if conversion fails
2583 Retrieves and compiles a regex pattern from configuration. @param name config property name @param defaultValue fallback pattern if invalid or missing @return compiled Pattern object or default if unable to compile
2584 Retrieves and splits a configuration property by name. @param name original configuration property name @return Collection of substrings from the processed configuration value
2585 Retrieves and splits a configuration property by name. @param name configuration property name @return array of masked substrings or null if not found
2586 Retrieves and splits a configuration property by name. @param name original configuration property name @param defaultValue default values to return if property is not found @return array of split substrings or default values if property is null
2587 Retrieves and processes a configuration property by name. Handles deprecated keys and variable substitutions. @param name original configuration property name @return Collection of processed strings or empty collection if not found
2588 Retrieves and processes a configuration property by name. @param name original configuration property name @return processed configuration value as an array of strings or empty array if conditions met
2589 Retrieves a configuration property and processes it. @param name original configuration property name @param defaultValue default values to use if property is not found @return processed array of strings or default values if property is null
2590 Masks and retrieves configuration properties with a given prefix. @param confPrefix prefix for filtering configuration keys @return Map of masked configuration key-value pairs
2591 Writes configuration key-value pair to JSON, applying redaction if necessary. @param jsonGen JSON generator for outputting data @param config Configuration object containing settings @param name Configuration property name @param redactor Redactor instance for sensitive value handling @throws IOException if an I/O error occurs during JSON generation
2592 Masks a configuration property with a new value. @param property name of the property to mask @param newVal new value for the property @throws ReconfigurationException if property cannot be reconfigured
2593 Retrieves and logs a configuration property by name. @param name property name to fetch @return property value or null if not found
2594 Masks and retrieves configuration value for default mount table. @param conf Hadoop configuration object @return masked configuration value or default if not found
2595 Initializes Bzip2 library based on configuration. @param conf Hadoop Configuration object @return true if native library is loaded, false otherwise
2596 Retrieves and creates a socket factory from configuration. @param conf Hadoop configuration settings @return configured SocketFactory instance or default if not specified
2597 Retrieves static username from configuration. @param conf Configuration object containing user settings @return Username as a String
2598 Logs the value of a configuration option after masking. @param option name of the configuration option
2599 Initializes keystore and truststore configurations from Hadoop configuration. @param conf Hadoop Configuration object containing security settings
2600 Schedules Kerberos ticket renewal if conditions are met. @param force whether to force renewal regardless of checks
2601 Initializes KeyProvider with configuration. @param conf Configuration instance for key management
2602 Parses and retrieves ZooKeeper ACLs from configuration. @param conf Configuration object containing ZK settings @return List of parsed ACL objects @throws IOException if file reading fails or ACL format is invalid
2603 Retrieves and processes hash type from configuration. @param conf Configuration object containing settings @return Hash constant or INVALID_HASH if unrecognized
2604 Converts a masked configuration property to an EnumSet. @param key config key for error messages @param enumClass class of the enum type @param ignoreUnknown flag to skip invalid options @return EnumSet containing parsed enum constants @throws IllegalArgumentException if parsing fails and ignoreUnknown is false
2605 Retrieves and parses configuration property as integer ranges. @param name config property name @param defaultValue default value if property not found @return IntegerRanges object or null if parsing fails
2606 Retrieves and logs configuration property. @param name original configuration property name @param defaultValue default value if property not found @return final configuration value
2607 Sets a configuration property by key and boolean value. @param key the configuration property key @param value the boolean value to set for the key @return current builder instance cast to type B
2608 Masks a configuration property by key and value. @param key the configuration property key @param value the value to set for the key @return current builder instance cast to type B
2609 Sets a configuration property with a boolean value. @param key the configuration property key @param value the boolean value to set for the key @return current builder instance cast to type B
2610 Masks and sets a configuration property with a double value. @param key the configuration property key @param value the double value to set for the key @return current builder instance cast to type B
2611 Updates default URI in configuration. @param conf Configuration object to update @param uri New file system URI as a string
2612 Adds a view file system link with specified configurations. @param conf Configuration object to set the property in @param mountTableName Name of the mount table @param src Source path for the link @param settings Additional settings for the link @param targets Target URIs for the link
2613 Sets the index interval configuration. @param conf Configuration object to modify @param interval new index interval value
2614 Masks the IPC ping interval configuration. @param conf Configuration object to modify @param pingInterval new value for the ping interval in milliseconds
2615 Sets IPC client connection timeout. @param conf Configuration object to update @param timeout Timeout value in milliseconds
2616 Masks nested mount point support in configuration. @param conf Hadoop configuration object @param isNestedMountPointSupported flag indicating support for nested mount points
2617 Masks configuration properties by joining multiple values. Validates and sets keys as mandatory or optional. @param key property key to mask @param values array of strings representing property values @return Current instance cast to type B
2618 Masks configuration properties by joining multiple values. Validates and sets keys as mandatory or optional. @param key property key to mask @param values array of strings representing property values @return current instance cast to type B
2619 Masks and resolves a configuration property with an InetSocketAddress. @param name the configuration property key @param addr the original InetSocketAddress @return masked or resolved InetSocketAddress
2620 Masks a configuration property for an RPC protocol. @param conf Configuration object to modify @param protocol Protocol class associated with the configuration @param engine Engine class to mask in the configuration
2621 Deletes a file or directory. @param p the path to delete @param recursive true to delete directories recursively @return true if deletion is successful, false otherwise @throws IOException if an I/O error occurs
2622 Masks a directory by deleting its contents. @param dir the directory to mask @return true if masking is successful, false otherwise
2623 Retrieves file status for a given path. @param f file path @return FileStatus object @throws AccessControlException if access is denied @throws FileNotFoundException if file does not exist @throws IOException if an I/O error occurs
2624 Lists file statuses in a directory. @param f directory path @return array of FileStatus objects @throws AccessControlException if access is denied @throws FileNotFoundException if the directory does not exist @throws IOException if an I/O error occurs
2625 Creates a new file output stream for writing data to a specified path. @param f file path where the data will be written @param overwrite if true, existing files will be overwritten @param bufferSize size of the buffer used for writing data @param replication desired number of replicas for the file @param blockSize block size for the file @param progress callback for reporting write progress @return FSDataOutputStream for writing to the specified path @throws IOException if an I/O error occurs during file creation
2626 Retrieves file system permissions with applied umask. @return FsPermission object with or without umask applied
2627 Creates a BlockFactory based on the specified type. @param keyToBufferDir key for the buffer directory @param configuration Hadoop configuration settings @param name type of block factory to create @return BlockFactory instance or throws IllegalArgumentException if unsupported
2628 Initializes the CompressionCodecFactory with codecs from configuration. @param conf Configuration object containing codec settings
2629 Retrieves configuration property value with default. @param name property name @param defaultValue value to return if property is not found @return property value or default value if not found
2630 Masks and converts configuration property to integer. @param name property name @param defaultValue default value if conversion fails @return masked integer value or default
2631 Masks and converts configuration property to long. @param name configuration property name @param defaultValue default value if conversion fails @return masked and converted long value or default
2632 Masks and converts a configuration property to a long value. @param name configuration property name @param defaultValue default value to return if property is not found or invalid @return masked and converted long value, or default value if conversion fails
2633 Retrieves and masks a configuration property as a float. @param name configuration property name @param defaultValue default float value if property is not found @return masked float value or default if not found
2634 Retrieves and masks a configuration property by name. @param name configuration property name @param defaultValue default value to return if property is not found @return masked double value or default if not found
2635 Masks and retrieves boolean configuration property. @param name property name to mask and retrieve @param defaultValue default boolean value if property is invalid or not found @return masked boolean value or default if invalid
2636 Masks and retrieves a configuration property class by name. @param name configuration property name @param defaultValue default Class object if not found @return masked Class object or default if not found
2637 Masks a configuration property by name and boolean value. @param name the configuration property key @param value the boolean value to set for the key
2638 Retrieves and converts a configuration property to a specified time unit. @param name configuration property name @param defaultValue default value if property is not found @param unit target time unit for conversion @return converted time value in the target unit or default value if not found
2639 Resolves SASL properties with specified QOP and default settings. @param conf configuration object containing security properties @param configKey key for retrieving QOP values from configuration @param defaultQOP default Quality of Protection setting @return map of SASL properties including QOP and server authentication
2640 Converts configuration property to integer array. @param name property name @return array of integers or empty if conditions met
2641 Masks deprecated configuration key and retrieves associated Class objects. @param name original configuration property name @param defaultValue default Class array if retrieval fails @return array of Class objects or default value if not found
2642 Determines a valid directory for storing a file. @param dirsProp configuration property name for directories @param path relative file path @return File object pointing to a writable directory @throws IOException if no valid directory is found
2643 Initializes SerializationFactory with configuration. @param conf Hadoop configuration settings
2644 Masks and retrieves configuration properties with a given prefix. @param conf Configuration object containing settings @param confPrefix prefix for filtering configuration keys @return Map of masked configuration key-value pairs
2645 Masks and retrieves configuration properties with a given prefix. @param conf Configuration object containing settings @param confPrefix prefix for filtering configuration keys @return Map of masked configuration key-value pairs
2646 Masks and applies configuration properties to a builder. @param builder FSBuilder instance to apply properties @param conf Configuration object containing key-value pairs @param prefix Property prefix for filtering @param mandatory Flag indicating if properties are mandatory
2647 Generates a form for displaying and applying configuration changes. @param out PrintWriter to output HTML content @param reconf Reconfigurable object to manage configurations
2648 Adds a masked link to the configuration. @param conf Hadoop configuration object @param src Source path for the link @param target Target URI for the link
2649 Adds a link with merged slash using default mount table configuration. @param conf Hadoop configuration object @param target Target URI for the link
2650 Adds a fallback link to the default mount table. @param conf Hadoop configuration object @param target Target URI for the fallback link
2651 Adds merged links to configuration. @param conf Hadoop configuration object @param targets array of target URIs for merging
2652 Sets home directory configuration using default mount table. @param conf Hadoop configuration object @param homedir Home directory path, must start with '/'
2653 Retrieves home directory configuration value. @param conf Hadoop configuration object @return masked configuration value or default if not found
2654 Creates an ErasureEncoder from configuration and options. @param conf Hadoop configuration object @param options codec-specific options @return ErasureEncoder instance
2655 Creates an ErasureDecoder instance from configuration and options. @param conf Hadoop configuration object @param options codec-specific options @return ErasureDecoder instance
2656 Returns the appropriate compressor class based on native library availability. @param conf Hadoop Configuration object @return Bzip2Compressor if native library is loaded, else BZip2DummyCompressor
2657 Determines decompressor class based on native library availability. @param conf Hadoop Configuration object @return Bzip2Decompressor if native library is loaded, otherwise BZip2DummyDecompressor
2658 Returns a Bzip2 decompressor based on native library availability. @param conf Hadoop Configuration object @return Bzip2Decompressor if native library is loaded, else BZip2DummyDecompressor
2659 Creates a SocketFactory for a given class using configuration. @param conf Hadoop configuration settings @param clazz target class for socket factory @return configured SocketFactory or default if not specified
2660 Constructs a HadoopZookeeperFactory with default SSL disabled and empty truststore/keystore. @param zkPrincipal ZooKeeper principal @param kerberosPrincipal Kerberos principal @param kerberosKeytab Path to Kerberos keytab file
2661 Initializes SSL configuration for client or server mode. Configures SSL context, keystore, and hostname verifier. @throws GeneralSecurityException if security settings fail @throws IOException if I/O operations fail
2662 Checks if Kerberos authentication is disabled. @param conf Configuration object containing security settings @return true if SIMPLE authentication is used, indicating Kerberos is masked
2663 Configures Kerberos authentication rules in Hadoop. @param conf Configuration object containing security settings @throws IOException if Kerberos realm cannot be retrieved
2664 Retrieves and initializes a CryptoCodec instance based on configuration and cipher suite. @param conf Hadoop configuration settings @param cipherSuite specifies the cryptographic suite to use @return CryptoCodec object or null if none suitable is found
2665 Retrieves and returns a Hash instance based on configuration. @param conf Configuration object containing settings @return Hash instance for the specified type, or null if invalid
2666 Creates a FlagSet from configuration. @param enumClass enum type for the flags @param conf configuration source @param key config key for flags @param ignoreUnknown flag to skip invalid options @return FlagSet instance with parsed flags
2667 Masks sensitive configuration properties and writes them to a Writer. @param propertyName specific property to mask or null for all @param out Writer to output the masked XML document @param config Hadoop Configuration object @throws IOException if parsing fails @throws IllegalArgumentException if specified property is not found
2668 Masks and outputs configuration properties as JSON. @param config Hadoop Configuration object @param out Writer for outputting JSON @throws IOException if an I/O error occurs during processing
2669 Masks and sets a configuration property by key and integer value. @param key the configuration property key @param value the integer value to set for the key @return current builder instance cast to type B
2670 Masks and sets a configuration property by key and float value. @param key the configuration property key @param value the float value to set for the key @return current builder instance cast to type B
2671 Masks and sets a configuration property by key and double value. @param key the configuration property key @param value the double value to set for the key @return current builder instance cast to type B
2672 Masks and sets a configuration property with an integer value. @param key the configuration property key @param value the integer value to set for the key @return current builder instance cast to type B
2673 Creates a MetricsSource instance from a given source object. @param source object to extract metrics from @return configured MetricsSource object
2674 Creates a new file output stream for writing data to a specified path. @param f file path where the data will be written @param overwrite if true, existing files will be overwritten @param bufferSize size of the buffer used for writing data @param replication desired number of replicas for the file @param blockSize block size for the file @return FSDataOutputStream for writing to the specified path @throws IOException if an I/O error occurs during file creation
2675 Creates a file with specified options and permissions. @param f path to the file @param createFlag flags for creating or opening the file @param opts additional options for creation @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
2676 Creates a directory with specified permissions. @param dir target directory path @param permission file system permissions for the directory @param createParent flag to create parent directories if necessary @throws various exceptions related to file operations
2677 Handles compression and decompression based on command line arguments. @param args command line arguments specifying input/output files and operations @throws Exception if an error occurs during processing
2678 Masks sensitive information in the principal configuration. @param principalConfig original principal configuration string @param hostname optional hostname for masking, defaults to local host if null or invalid @return masked principal configuration or original if not applicable @throws IOException if unable to retrieve primary hostname
2679 Masks sensitive information in the principal configuration. @param principalConfig original principal configuration string @param addr IP address of the client @return masked principal configuration or original if not applicable @throws IOException if unable to replace pattern or resolve domain name
2680 Registers an RPC protocol and its implementation. @param rpcKind type of RPC communication @param protocolClass the protocol class to handle @param protocolImpl the implementation of the protocol @return Server instance for method chaining
2681 Creates a KeyProvider using the specified configuration key. @param conf Configuration object containing settings @param configKeyName Key name to fetch and mask @return KeyProvider object or null if URI is invalid @throws IOException if instantiation or validation fails
2682 Masks and normalizes the default filesystem URI. @param conf configuration object containing file system settings @return normalized URI with corrected scheme or throws exception if invalid
2683 Validates Kerberos kinit command configuration. Logs and checks executable properties.
2684 Retrieves and resolves a network socket address from configuration. @param name property name for the address @param defaultAddress default address if not found in config @param defaultPort default port number @return InetSocketAddress object with resolved hostname or null if invalid
2685 Resolves and creates an InetSocketAddress for a given host and address property. Handles null or empty values by using defaults. Masks and resolves hostnames. @param hostProperty key for the host configuration @param addressProperty key for the address configuration @param defaultAddressValue default address if not found @param addr original InetSocketAddress @return resolved InetSocketAddress or null if invalid
2686 Asynchronously builds and returns a FSDataInputStream for a specified file path. @return CompletableFuture representing the FSDataInputStream or an exception if failed
2687 Builds and opens an FSDataInputStream for file reading. @return CompletableFuture containing FSDataInputStream or exception @throws IOException if an I/O error occurs
2688 Masks and configures SFTP settings from URI and Configuration. Handles host, port, user, and password retrieval and masking. Initializes the connection pool with configured max connections. @param uriInfo URI containing SFTP connection details @param conf configuration object for SFTP settings
2689 Establishes an SFTP connection using configuration properties. @return ChannelSftp object for the established connection @throws IOException if connection fails or configuration is invalid
2690 Sets buffer size from configuration. Uses FileSystem to fetch and mask buffer size property.
2691 Opens an input stream for reading from a file. @param f file path @return FSDataInputStream for the specified file @throws IOException if an I/O error occurs
2692 Opens a file for reading with a specified buffer size. @param fd PathHandle representing the file to read @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2693 Opens a file for writing in the distributed file system. @param f path to the file @return FSDataOutputStream for writing data @throws IOException if an I/O error occurs
2694 Opens an output stream for writing to a file with specified buffer size. @param f path of the file to write to @param appendToNewBlock flag indicating whether to append data to a new block @return FSDataOutputStream for writing data
2695 Initializes the Cache with configuration settings. @param conf Hadoop configuration object
2696 Initializes a Sorter with specified parameters. @param fs FileSystem for file operations @param comparator Comparator for sorting key-value pairs @param keyClass Class of the keys @param valClass Class of the values @param conf Configuration settings @param metadata Metadata attributes
2697 Creates a compressed output stream using LZ4 algorithm. @param out underlying output stream for compressed data @param compressor compression algorithm to use @return CompressionOutputStream configured with LZ4 settings
2698 Creates a BlockDecompressorStream for LZ4 decompression. @param in InputStream containing compressed data @param decompressor Decompressor instance for LZ4 logic @return CompressionInputStream configured with buffer size from config
2699 Creates and returns a new Lz4Decompressor instance. @return configured Lz4Decompressor object for decompression tasks
2700 Creates a BZip2 compression output stream. @param out underlying output stream for compressed data @param compressor compressor to use for compression @return CompressionOutputStream configured for BZip2
2701 Creates a compression input stream for BZip2. @param in source input stream @param decompressor decompressor to use @return CompressionInputStream for reading compressed data @throws IOException on I/O errors during initialization
2702 Creates a Snappy compression output stream. @param out underlying output stream for compressed data @param compressor compression algorithm to use @return CompressionOutputStream configured with Snappy settings
2703 Creates a Snappy compressor with configured buffer size. @return SnappyCompressor instance for data compression
2704 Creates a compression input stream for Snappy decompression. @param in InputStream containing compressed data @param decompressor Decompressor instance for handling Snappy decompression @return CompressionInputStream configured with buffer size from configuration @throws IOException if an I/O error occurs during setup
2705 Creates a new Snappy decompressor. @return configured SnappyDecompressor instance
2706 Copies data between input and output streams using buffer size from configuration. @param in source InputStream @param out destination OutputStream @param conf Configuration object containing file buffer size settings @throws IOException if an I/O error occurs
2707 Copies data between input and output streams with buffer size from configuration. @param in source InputStream @param out destination OutputStream @param conf Configuration object containing I/O settings @param close flag to indicate if streams should be closed after operation @throws IOException if an I/O error occurs
2708 Masks and retrieves file buffer size from configuration. @param conf Hadoop Configuration object @return masked integer value for buffer size or default if not set
2709 Initializes configuration for script-based mapping. @param conf Configuration object containing settings
2710 Retrieves and masks the cryptographic buffer size from configuration. @param conf Configuration object containing security settings @return Masked integer value of the buffer size or default if not found
2711 Masks and retrieves the number of priority levels from configuration. @param ns namespace prefix @param conf configuration object @return number of priority levels or throws exception if invalid
2712 Retrieves and masks RPC timeout from configuration. @param conf Configuration object containing settings @return Masked integer value of the RPC timeout or default if not found
2713 Retrieves and masks IPC ping interval from configuration. @param conf Configuration object @return Masked integer value of the ping interval or default if not found
2714 Retrieves and masks RPC timeout from configuration. @param conf Configuration object @return Masked timeout value or default if negative
2715 Initializes a LineReader with an input stream and buffer size from configuration. @param in InputStream to read from @param conf Configuration object containing file buffer size @throws IOException if initialization fails
2716 Constructs a LineReader with specified input stream and configuration. @param in input stream to read from @param conf configuration for reading settings @param recordDelimiterBytes byte array representing the record delimiter @throws IOException if an I/O error occurs
2717 Retrieves and logs integer property. @param name property name @param defaultValue default value if conversion fails @return masked integer value or default
2718 Sets FTP client timeout from configuration. @param client FTP client instance @param conf Hadoop configuration object
2719 Retrieves and converts configuration property to long. @param key configuration property name @param defVal default value if conversion fails @return converted long value or default if invalid
2720 Retrieves and masks the local block size configuration. @return masked long value representing the local block size or default if conversion fails
2721 Retrieves a configuration property as a long. @param name property name @param defaultValue default value if conversion fails @return masked and converted long value or default
2722 Retrieves and logs a configuration property as a float. @param name configuration property name @param defaultValue default float value if property is not found @return float value or default if not found
2723 Initializes trash policy settings from configuration. @param conf Hadoop configuration object @param fs FileSystem instance @param home Home directory path
2724 Determines if nested mount points are supported. @param conf Hadoop configuration object @return true if nested mount points are supported, false otherwise
2725 Creates and returns an Lz4Compressor instance. Configures buffer size and compression mode from configuration settings. @return configured Lz4Compressor object
2726 Retrieves retry policy from configuration. @param conf Hadoop configuration object @param retryPolicyEnabledKey key for enabling retry policy @param defaultRetryPolicyEnabled default value for retry policy enabled @param retryPolicySpecKey key for retry policy specification @param defaultRetryPolicySpec default retry policy specification @return configured RetryPolicy or null if invalid
2727 Configures log and static contexts for the HTTP server. @param parent parent context handler collection @param appDir application directory path @param conf Hadoop configuration object @throws IOException if an I/O error occurs during setup
2728 Registers servlets for monitoring and configuration. @param configuration server configuration settings
2729 Determines server failover enablement for a given namespace. @param namespace configuration namespace @param conf configuration object @return boolean indicating if server failover is enabled
2730 Initializes a new Client for RPC communication. @param valueClass the class type of writable values @param conf configuration settings for the client @param factory socket factory for creating connections
2731 Deprecated function to mask and retrieve IPC backoff configuration. @param prefix configuration key prefix @param conf Configuration object @return masked boolean value or default if invalid
2732 Determines if IPC backoff is enabled for a given namespace and port. @param namespace configuration namespace @param port service port number @param conf Configuration object @return true if backoff is enabled, false otherwise
2733 Masks and retrieves a configuration property value. @param name the configuration property name to mask and retrieve @return masked character array of the password or null if not found
2734 Retrieves and logs a boolean configuration property. @param name property name to retrieve @param defaultValue default boolean value if property is invalid or not found @return retrieved boolean value
2735 Retrieves the FileSystem class for a given scheme. @param scheme URI scheme of the file system @param conf configuration object @return FileSystem class or throws UnsupportedFileSystemException if not found
2736 Constructs an AbstractFileSystem instance for a given URI and configuration. @param uri URI of the file system @param conf configuration settings @return AbstractFileSystem instance @throws UnsupportedFileSystemException if implementation class is not found
2737 Retrieves and masks the call queue class for a given namespace and port. @param namespace configuration namespace @param port server port number @param conf configuration object @return BlockingQueue class for calls or default LinkedBlockingQueue if not found
2738 Determines the RPC scheduler class based on configuration. @param namespace configuration namespace @param port service port @param conf Hadoop configuration @return RpcScheduler subclass determined by config or default
2739 Retrieves and validates a configuration class by name. @param name configuration property name @param defaultValue default Class object if not found @param xface interface to validate against @return validated Class object or null if invalid
2740 Retrieves or creates a FileSystem instance for the given URI and configuration. @param uri file system URI @param conf Hadoop configuration @param key unique identifier for caching @return FileSystem object, possibly newly created @throws IOException if an I/O error occurs during retrieval or creation
2741 Retrieves shutdown timeout duration from configuration. @param conf Configuration object @return Shutdown timeout in milliseconds, with minimum enforced
2742 Retrieves and masks a credential by name. @param name configuration key name @return char[] representing the masked credential or null if not found @throws IOException if an error occurs during retrieval
2743 Determines call queue capacity weights. @param priorityLevels number of priority levels @param ns namespace string @param conf configuration object @return array of weights for each priority level @throws IllegalArgumentException if invalid weights are provided
2744 Initializes filter initializers from configuration. @param conf server configuration settings @return array of FilterInitializer objects or null if not found
2745 Masks deprecated configuration key and retrieves associated Class objects. @param name original configuration property name @param xface target class type to check implementation against @return list of constructed object instances implementing the specified interface
2746 Initializes and configures the Writer for sequence file operations. @param config Hadoop configuration settings @param outStream output stream to write data @param ownStream flag indicating if the stream is owned by this writer @param key class of the key in the key-value pair @param val class of the value in the key-value pair @param compCodec compression codec for compressing values @param meta metadata to include in the file header @param syncIntervalVal interval between sync markers @throws IOException if initialization fails
2747 Deprecated method to propagate configuration options. @param builder FSBuilder instance to apply properties @param conf Configuration object containing key-value pairs @param prefix Property prefix for filtering @param mandatory Flag indicating if properties are mandatory
2748 Applies configuration options to a FSBuilder instance. @param builder FSBuilder instance to configure @param conf Configuration object containing key-value pairs @param optionalPrefix Prefix for optional properties @param mandatoryPrefix Prefix for mandatory properties @return Configured FSBuilder instance
2749 Checks availability of native libraries in Hadoop ecosystem. @param args command-line arguments for options like checking all libraries or help
2750 Returns the compressor class based on configuration. @return Class of compressor to be used
2751 Returns decompressor class based on configuration. @return Class of decompressor to be used
2752 Returns a BZip2 decompressor. @return Bzip2Decompressor instance based on configuration
2753 Constructs a HadoopZookeeperFactory with default SSL disabled and empty truststore/keystore. @param zkPrincipal ZooKeeper principal
2754 Processes LDAP search results to extract user group memberships. @param result LDAP search result containing user data @param c directory context for LDAP operations @param goUpHierarchy levels to traverse up the group hierarchy @return set of group names associated with the user @throws NamingException if LDAP operations fail
2755 Retrieves a CryptoCodec instance based on the specified configuration. @param conf Hadoop configuration settings @return CryptoCodec object or null if none suitable is found
2756 Binds server socket to specified address or range of ports. @param socket ServerSocket instance to bind @param address InetSocketAddress specifying host and port @param backlog maximum number of queued incoming connections
2757 Generates JSON output for a specific configuration property. @param config Hadoop Configuration object @param propertyName name of the configuration property @param out Writer for outputting JSON @throws IOException if an I/O error occurs during processing
2758 Creates a directory without specified permissions. @param f Hadoop Path object representing the directory to create @return true if directory creation is successful or already exists, false otherwise @throws IOException if an I/O error occurs during directory creation
2759 Validates and retrieves the server's Kerberos principal. @param authType authentication type object @return validated server principal or throws exception if invalid
2760 Masks and normalizes a given HAR URI. @param rawURI the original HAR URI to process @param conf configuration object containing file system settings @return normalized URI with corrected scheme or throws exception if invalid
2761 Initializes and returns a FileSystem instance using the provided configuration. @param conf configuration object containing file system settings @return FileSystem object initialized with the given configuration @throws IOException if an I/O error occurs during initialization
2762 Initializes file system with given URI and configuration. @param name file system URI @param conf configuration settings @throws IOException if initialization fails
2763 Initializes and returns a FileSystem instance. @param conf configuration object containing file system settings @return FileSystem object configured with provided settings
2764 Masks and validates the file system path. @param path the Path object to be masked @throws IllegalArgumentException if the path does not match expected conditions
2765 Creates a network socket address with resolved hostname. @param hostProperty configuration property for the hostname @param addressProperty configuration property for the address @param defaultAddressValue default address if not found in config @param defaultPort default port number @return InetSocketAddress object with resolved hostname or null if invalid
2766 Opens an output stream for writing a file on the SFTP server. Handles file existence, overwriting, and directory creation. @param f path of the file to write @param permission permissions for the new file @param overwrite flag to overwrite existing file @param bufferSize buffer size for data transfer @param replication replication factor (not used) @param blockSize block size (not used) @param progress progress callback (not used) @return FSDataOutputStream for writing to the file @throws IOException if an I/O error occurs
2767 Initializes a FutureDataInputStreamBuilderImpl with given file system and path. @param fileSystem mandatory file system instance @param path mandatory file system path
2768 Initializes a FutureDataInputStreamBuilderImpl with given file system and path handle. @param fileSystem mandatory file system instance @param pathHandle mandatory file system path handle
2769 Opens a file in the Hadoop file system using specified policies. @param instance DynamicWrappedIO instance @param fs FileSystem instance @param status FileStatus object @param readPolicies IO policy string @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2770 Checks if the file system supports appending to files. @param fs FileSystem instance @return true if append is supported, false otherwise
2771 Constructs a Sorter with default metadata. @param fs FileSystem for file operations @param comparator Comparator for sorting key-value pairs @param keyClass Class of the keys @param valClass Class of the values @param conf Configuration settings
2772 Initializes Bzip2Compressor with configuration settings. @param conf Hadoop configuration object containing compression parameters
2773 Reinitializes the Bzip2 compression settings. @param conf Hadoop configuration object for compression parameters
2774 Initializes SequenceFile reader by verifying version and reading metadata. @param tempReader flag indicating temporary reader usage @throws IOException if file is not a valid SequenceFile or I/O error occurs
2775 Initializes the compressor with a new configuration. @param conf Hadoop Configuration object containing compression settings
2776 Prepares a DataOutputStream for writing values. @param length expected value length or -1 if unknown @return DataOutputStream for value writing @throws IOException if an I/O error occurs during setup
2777 Initializes a WBlockState for writing compressed data. @param compressionAlgo compression algorithm to use @param fsOut file system output stream @param fsOutputBuffer buffer for output stream @param conf Hadoop configuration @throws IOException if an I/O error occurs during initialization
2778 Initializes configuration and sets up raw script-based mapping. @param conf Configuration object containing settings
2779 Initializes script dependencies from configuration. @param conf Configuration object containing settings
2780 Creates and returns an Options object initialized with configuration. @param conf Hadoop Configuration object @return Options instance configured by the provided settings
2781 Masks and retrieves RPC timeout or ping interval from configuration. @param conf Configuration object @return Masked timeout value or ping interval, or -1 if not applicable
2782 Establishes an FTP connection using provided configuration. @return configured and connected FTPClient instance @throws IOException if connection fails or login is unsuccessful
2783 Retrieves long configuration value with validation. @param key configuration property name @param defVal default value if conversion fails or value is negative @return validated long value or default if invalid
2784 Deprecated method to create and configure FsServerDefaults. @return Configured FsServerDefaults instance @throws IOException if configuration fails
2785 Retrieves and masks the local block size configuration. @param f file path (unused in current implementation) @return masked long value representing the local block size or default if conversion fails
2786 Moves a corrupted file to a 'bad_files' directory. @param p path of the corrupted file @param in input stream for the corrupted file @param inPos position in the input stream @param sums checksum input stream @param sumsPos position in the checksum stream @return false, always
2787 Constructs a new instance using a Builder. @param builder configuration builder for space usage tracking @throws IOException if canonical path cannot be determined
2788 Reads next record into buffer. @param buffer DataOutputBuffer to store record data @return Length of key or -1 if end reached @throws IOException on I/O error or unsupported operation
2789 Retrieves and wraps a retry policy for specified exceptions. @param conf Hadoop configuration object @param retryPolicyEnabledKey key for enabling retry policy @param defaultRetryPolicyEnabled default value for retry policy enabled @param retryPolicySpecKey key for retry policy specification @param defaultRetryPolicySpec default retry policy specification @param remoteExceptionToRetry exception to trigger retries @return configured RetryPolicy or TRY_ONCE_THEN_FAIL if none found
2790 Constructs a new RPC client with default socket factory. @param valueClass the class type of writable values @param conf configuration settings for the client
2791 Retrieves or creates a cached client for RPC communication. @param conf configuration settings for the client @param factory socket factory for creating connections @param valueClass class type of writable values @return Client instance for communication
2792 Filters credential providers by file system compatibility. @param config original Hadoop configuration @param fileSystemClass target FileSystem class @return new Configuration with filtered provider paths
2793 Constructs an AbstractFileSystem instance for a given URI and configuration. @param uri URI of the file system @param conf configuration settings @return AbstractFileSystem instance @throws UnsupportedFileSystemException if implementation class is not found
2794 Constructs and returns a configured Hadoop server instance. Validates required parameters: conf, protocol, and instance. @return Server instance configured with specified settings @throws IOException if an I/O error occurs during construction @throws HadoopIllegalArgumentException if any required parameter is not set
2795 Creates a new instance of TrashPolicy based on configuration. @param conf Hadoop configuration settings @param fs FileSystem instance @param home User's home directory path @return Configured TrashPolicy object
2796 Creates and initializes a TrashPolicy instance based on configuration. @param conf Hadoop configuration settings @param fs file system instance @return configured TrashPolicy object
2797 Creates a DomainNameResolver instance based on configuration. @param conf system configuration settings @param configKey key for resolver class in config @return configured DomainNameResolver or default if not specified
2798 Creates a new instance of SaslPropertiesResolver based on configuration. @param conf Hadoop configuration settings @return configured SaslPropertiesResolver instance
2799 Masks and validates SASL property resolver. @param saslPropsResolverKey key for SASL property resolver
2800 Retrieves and instantiates an impersonation provider class. @param conf Hadoop configuration settings @return ImpersonationProvider instance or default if not specified
2801 Initiates the shutdown process with a timeout. @param conf Configuration object containing shutdown settings
2802 Masks and retrieves a configuration property value. @param name the configuration property name to mask and retrieve @return masked character array of the password or null if not found @throws IOException if an error occurs during retrieval
2803 Creates a raw erasure encoder with validation. @param conf Hadoop configuration object @param codec name of the codec @param coderOptions configuration options for the encoder @return RawErasureEncoder instance or throws exception if creation fails
2804 Creates a raw erasure decoder with null checks. @param conf Hadoop configuration object @param codec name of the codec @param coderOptions options for the coder @return RawErasureDecoder instance or throws exception if creation fails
2805 Initializes a new call queue and scheduler with specified configurations. @param schedulerClass Class type of RpcScheduler to use @param queueClassToUse Class type of BlockingQueue to instantiate @param maxSize Maximum size for the queue @param ns Namespace string for configuration @param conf Configuration object
2806 Initializes a FairCallQueue with specified priority levels and capacities. @param priorityLevels number of priority levels for task scheduling @param capacity total capacity for all queues combined @param ns namespace for configuration properties @param capacityWeights weights for each queue's capacity @param serverFailOverEnabled flag to enable server failover @param conf configuration object containing settings
2807 Masks an item in the configuration by serializing it to Base64. @param conf Configuration object @param item the item to serialize and mask @param keyName the configuration property key @throws IOException if serialization fails
2808 Deserializes a configuration property to an object. @param conf Configuration object @param keyName property name @param itemClass class type of the object @return deserialized object or null if not found @throws IOException if deserialization fails
2809 Masks an array of items in the configuration. @param conf Configuration object @param items array of items to mask @param keyName key for storing masked items @throws IOException if serialization fails
2810 Deserializes an array of objects from a Base64 encoded configuration property. @param conf Configuration object @param keyName property name containing the serialized data @param itemClass class type of the objects to be deserialized @return array of deserialized objects or empty array if none found @throws IOException if deserialization fails
2811 Deprecated constructor for creating a Writer. @param fs FileSystem object @param conf Hadoop configuration settings @param name file path where the data will be written @param keyClass class of the key in the key-value pair @param valClass class of the value in the key-value pair @param bufferSize size of the buffer used for writing data @param replication desired number of replicas for the file @param blockSize block size for the file @param progress callback for reporting write progress @param metadata metadata to include in the file header @throws IOException if an I/O error occurs during initialization
2812 Serializes and deserializes an object using reflection. @param conf Hadoop configuration settings @param src source object to serialize @param dst destination object to deserialize into @return deserialized object
2813 Deprecated method to propagate configuration options to a FSBuilder. @param builder FSBuilder instance to configure @param conf Configuration object containing key-value pairs @param optionalPrefix Prefix for optional properties @param mandatoryPrefix Prefix for mandatory properties @return Configured FSBuilder instance
2814 Retrieves group memberships for a given user from LDAP. @param user username to find groups for @param goUpHierarchy levels to traverse up the group hierarchy @return set of group names associated with the user @throws NamingException if LDAP operations fail
2815 Masks and outputs configuration properties in JSON or XML format. @param conf Hadoop Configuration object @param out Writer for outputting the masked configuration @param format desired output format ("json" or "xml") @param propertyName specific property to mask or null for all @throws IOException if an I/O error occurs during processing @throws IllegalArgumentException if specified property is not found @throws BadFormatException if the format is neither JSON nor XML
2816 Initializes authentication filter with configuration. @param container FilterContainer to hold the filter @param conf Hadoop configuration object
2817 Creates a SASL client for authentication. @param authType authentication type object @return SaslClient instance or null if authentication fails @throws SaslException if SASL setup fails @throws IOException if I/O error occurs during token retrieval
2818 Creates a FileSystem instance for a given URI and configuration. @param uri file system URI @param conf configuration settings @return initialized FileSystem object @throws IOException if initialization fails
2819 Initializes the view file system with a given URI and configuration. @param theUri URI of the file system to initialize @param conf configuration settings for the file system @throws IOException if initialization fails
2820 Initializes the file system with specified URI and configuration. @param name file system URI @param conf configuration settings @throws IOException if initialization fails or operations are invalid
2821 Normalizes and validates a file system path. @param path the Path object to be processed @return normalized and validated Path
2822 Masks and validates a file system path. @param p the Path object to be masked @return the masked Path object @throws IOException if an I/O error occurs during masking
2823 Overrides and delegates the operation to the underlying FileSystem. @param path the Path object to be processed
2824 Initializes an AvroFSInput for reading a file. @param fc FileContext for the Hadoop file system @param p Path to the file @throws IOException if an I/O error occurs
2825 Copies a file or directory from source to destination. @param src source path @param dst destination path @param deleteSource flag to delete the source after copy @param overwrite flag to overwrite the destination if it exists @return true if operation is successful, false otherwise
2826 Constructs an FSDataInputStreamBuilder with specified file system and path. @param fileSystem mandatory Hadoop file system instance @param path mandatory file system path to the target file
2827 Constructs an FSDataInputStreamBuilder with specified file system and path handle. @param fileSystem mandatory Hadoop file system instance @param pathHandle mandatory file system path handle
2828 Opens a file in the Hadoop file system using specified policies. @param fs FileSystem instance @param status FileStatus object @param readPolicies IO policy string @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2829 Masks file permissions for a given path using a keystore. Handles key recovery from backup if the primary keystore is corrupted. @param path file path to mask @param backupPath backup file path @return FsPermission object representing masked permissions @throws NoSuchAlgorithmException if no algorithm is available @throws CertificateException if there's a certificate issue @throws IOException if an I/O error occurs
2830 Constructs a Sorter with specified FileSystem and configuration. @param fs FileSystem for file operations @param keyClass Class of the keys @param valClass Class of the values @param conf Configuration settings
2831 Returns a Bzip2 compressor instance. @param conf Hadoop configuration object @return Bzip2Compressor if native library is available, else BZip2DummyCompressor
2832 Initializes SequenceFile reader for a specified range. @param filename path to the file @param in input stream from which to read @param start starting position in the file @param length number of bytes to read @param conf Hadoop configuration @param tempReader flag indicating temporary reader usage @throws IOException if initialization fails or I/O error occurs
2833 Creates a compression output stream using Zstandard. @param out underlying output stream for compressed data @param compressor compression algorithm to use @return CompressionOutputStream configured with specified parameters @throws IOException if initialization fails or native libraries are unavailable
2834 Initializes and returns a ZStandardCompressor. @return ZStandardCompressor instance for compression operations
2835 Creates a compression input stream using Zstandard. @param in InputStream of compressed data @param decompressor Decompressor instance for decompression @return CompressionInputStream for reading decompressed data @throws IOException if I/O error occurs or parameters are invalid
2836 Creates a ZStandard decompressor. @return ZStandardDecompressor instance configured with buffer size from Hadoop config
2837 Creates a new Data Block for writing. @throws IllegalStateException if previous block is not closed or Meta Blocks have been created @return BlockAppender instance for the new Data Block
2838 Constructs ScriptBasedMapping with provided configuration. @param conf Configuration object containing settings
2839 Configures script dependencies and mapping. @param conf Configuration object containing settings
2840 Parses command-line arguments for key management operations. @param args command-line arguments array @return exit code (0 for success, 1 for error)
2841 Creates a ConnectionId with specified parameters and configuration. @param addr network address for the connection @param protocol class representing the IPC protocol @param ticket user credentials for authentication @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy policy for handling connection retries @param conf Hadoop configuration object @return ConnectionId instance configured with given parameters @throws IOException if there's an error in configuration or initialization
2842 Creates a file on the FTP server with specified permissions. @param file path of the file to create @param permission fsPermission for the new file @param overwrite whether to overwrite if the file exists @param bufferSize buffer size for data transfer @param replication replication factor (not used) @param blockSize block size for data storage @param progress progressable object for tracking progress @return FSDataOutputStream for writing to the created file @throws IOException if an I/O error occurs during creation
2843 Retrieves server defaults configuration. @param p file path (unused in current implementation) @return configured FsServerDefaults instance @throws IOException if configuration fails
2844 Creates a new file output stream for writing data. @param f file path where the data will be written @param overwrite if true, existing files will be overwritten @return FSDataOutputStream for writing to the specified path @throws IOException if an I/O error occurs during file creation
2845 Creates a new file output stream for writing data. @param f file path where the data will be written @param progress callback for reporting write progress @return FSDataOutputStream for writing to the specified path @throws IOException if an I/O error occurs during file creation
2846 Creates a new file output stream for writing data. @param f file path where the data will be written @param replication desired number of replicas for the file @return FSDataOutputStream for writing to the specified path @throws IOException if an I/O error occurs during file creation
2847 Creates a new file output stream for writing data to a specified path with default parameters. @param f file path where the data will be written @param replication desired number of replicas for the file @param progress callback for reporting write progress @return FSDataOutputStream for writing to the specified path @throws IOException if an I/O error occurs during file creation
2848 Creates a new file output stream with specified parameters. @param f file path where data will be written @param overwrite if true, existing files will be overwritten @param bufferSize size of the buffer used for writing data @return FSDataOutputStream for writing to the specified path @throws IOException if an I/O error occurs during file creation
2849 Creates a new file output stream for writing data to a specified path. @param f file path where the data will be written @param overwrite if true, existing files will be overwritten @param bufferSize size of the buffer used for writing data @param progress callback for reporting write progress @return FSDataOutputStream for writing to the specified path @throws IOException if an I/O error occurs during file creation
2850 Initializes FSDataOutputStreamBuilder with given FileSystem and Path. @param fileSystem Hadoop FileSystem instance @param p file path to be written
2851 Reads and deserializes a key from the SequenceFile. @param key Writable object to store the read key @return true if successful, false if end of file or error @throws IOException on I/O errors or class mismatch
2852 Reads and deserializes a key from the input stream. @param key object representing the key to be read @return deserialized key object or null if end of file is reached @throws IOException on I/O error or key class mismatch
2853 Constructs an Invoker for making RPC calls. @param protocol the remote service interface class @param connId connection ID for the RPC communication @param conf configuration settings for the client @param factory socket factory for creating connections @param alignmentContext context for data alignment
2854 Retrieves or creates a cached client for RPC communication. @param conf configuration settings for the client @return Client instance for communication
2855 Retrieves or creates a cached client for RPC communication. @param conf configuration settings for the client @param factory socket factory for creating connections @return Client instance for communication
2856 Constructs an Invoker for handling RPCs. @param protocol the protocol interface class @param connId connection identifier for remote service @param conf configuration settings for the client @param factory socket factory for creating connections @param alignmentContext context for data alignment
2857 Checks if a method is supported in the specified RPC protocol version. @param rpcProxy RPC proxy object @param protocol protocol class @param rpcKind RPC kind @param version protocol version to check against @param methodName name of the method to check @return true if method is supported, false otherwise
2858 Constructs a Trash instance. @param fs file system object @param conf configuration settings Initializes the trash policy based on configuration.
2859 Initializes network topology with default node factory. @param conf configuration settings @return updated NetworkTopology instance
2860 Constructs a new SaslRpcClient instance. @param ugi UserGroupInformation for authentication @param protocol the RPC protocol class @param serverAddr address of the server to connect to @param conf Hadoop configuration settings
2861 Initializes impersonation settings with a given configuration and proxy user prefix. @param conf Hadoop configuration settings @param proxyUserPrefix prefix for proxy users
2862 Registers a shutdown hook with a specified priority. @param shutdownHook Runnable task to be executed on shutdown @param priority execution priority of the hook Throws IllegalArgumentException if shutdownHook is null Throws IllegalStateException if shutdown is in progress
2863 Masks and retrieves a configuration property value. @param conf Configuration object @param name the configuration property name to mask and retrieve @return masked password as a string or null if not found @throws IOException if an error occurs during retrieval
2864 Retrieves and masks a password from configuration. @param conf Configuration object containing sensitive data @param alias Key used to fetch the password from configuration @param defaultPass Default password to use if retrieval fails @return Masked password string or default password if not found @deprecated Use getPassword method instead
2865 Parses and masks authentication configuration. @param conf Hadoop configuration object @param configKey key for the authentication configuration @return List of ZKAuthInfo objects or empty list if none found @throws IOException if I/O error occurs during parsing
2866 Initializes a DecayRpcScheduler with configuration settings. @param numLevels number of priority levels for scheduling @param ns namespace identifier @param conf Configuration object containing settings
2867 Clones a Writable object using reflection. @param orig original Writable object to clone @param conf Hadoop configuration settings @return cloned Writable object
2868 Writes configuration properties to an OutputStream in UTF-8 encoding. @param out OutputStream to write the configuration data @throws IOException if writing fails
2869 Selects a suitable SASL authentication type. @param authTypes list of available authentication types @return chosen SaslAuth object @throws SaslException if SASL setup fails @throws AccessControlException if no valid auth type is found @throws IOException if I/O error occurs during token retrieval
2870 Initializes an FtpFs instance with a given URI and configuration. @param theUri file system URI @param conf configuration settings @throws IOException if initialization fails @throws URISyntaxException if URI construction fails
2871 Initializes a local file system with specified URI and configuration. @param theUri file system URI @param conf configuration settings @throws IOException if initialization fails @throws URISyntaxException if URI construction fails
2872 Initializes and configures the chrooted file system. @param name root URI for the chroot environment @param conf Hadoop configuration settings @throws IOException if initialization or configuration fails
2873 Initializes a new MultipartUploaderBuilderImpl with specified file system and path. @param fileSystem Hadoop FileSystem instance @param p Path to the file
2874 Constructs a PathData instance. @param fs FileSystem object for path operations @param pathString original file path string @param stat FileStatus object representing file metadata @throws IOException if path validation fails
2875 Masks file system capabilities based on path and capability. @param path file system path @param capability associated capability string @return true if masked, false otherwise
2876 Applies mask to a given file system path. @param path the original Path object @return normalized and masked Path object @throws IOException if an I/O error occurs
2877 Converts a file path to a fully qualified path. @param path the input file path @return fully qualified Path object, possibly with scheme swapped
2878 Retrieves FileStatus for a given path, handling symbolic links if enabled. @param item PathData object containing file path information @param depth current directory depth in traversal @return updated FileStatus after processing symbolic links @throws IOException if an I/O error occurs during processing
2879 Masks the given path to ensure it is within the chroot environment. @param path original file system path @return masked Path object adjusted for chroot constraints
2880 Copies a file or directory from source to destination without deleting the source or overwriting the destination. @param src source path @param dst destination path @return true if operation is successful, false otherwise
2881 Initializes a builder for an input stream with specified file system and path. @param fileSystem mandatory Hadoop file system instance @param path mandatory file system path to the target file @return FSDataInputStreamBuilder object configured with given parameters
2882 Creates an FSDataInputStreamBuilder for specified Hadoop file system and path handle. @param fileSystem mandatory Hadoop file system instance @param pathHandle mandatory file system path handle @return FSDataInputStreamBuilder object initialized with provided parameters
2883 Masks permissions for keystore files. @param oldPath original keystore file path @param newPath new keystore file path @return FsPermission object representing masked permissions @throws IOException if an I/O error occurs @throws NoSuchAlgorithmException if no algorithm is available @throws CertificateException if there's a certificate issue
2884 Returns a BZip2 compressor instance. @return Compressor object configured with the given Hadoop configuration
2885 Retrieves a BlockReader for the specified metadata block. @param name unique identifier of the metadata block @return BlockReader instance for reading data @throws IOException if an I/O error occurs @throws MetaBlockDoesNotExist if the metadata block does not exist
2886 Retrieves a BlockReader for the specified block index. @param blockIndex index of the block to read @return BlockReader instance for reading data @throws IOException if an I/O error occurs or blockIndex is out of bounds
2887 Closes the writer, finalizing metadata and writing magic bytes. @throws IOException if an I/O error occurs during processing
2888 Prepares a metadata block with specified compression. @param name unique identifier of the metadata block @param compressionName name of the compression algorithm @return BlockAppender object initialized for writing @throws IOException if an I/O error occurs @throws MetaBlockAlreadyExists if the metadata block already exists
2889 Prepares a metadata block with default compression. @param name unique identifier of the metadata block @return BlockAppender object initialized for writing @throws IOException if an I/O error occurs @throws MetaBlockAlreadyExists if the metadata block already exists
2890 Initializes block appender if not already set. @throws IOException on I/O errors during initialization
2891 Creates a new file output stream for writing data with overwrite enabled. @param f file path where the data will be written @return FSDataOutputStream for writing to the specified path @throws IOException if an I/O error occurs during file creation
2892 Initializes output stream for logging. @param initial base path for log file @throws IOException if file operations fail
2893 Opens a file for writing metrics data. @param targetFile path to the log file @throws IOException if an I/O error occurs during file operations
2894 Serializes an object to JSON and writes it to a file. @param fs FileSystem where the file will be written @param path file path for the output @param instance object to serialize @param overwrite if true, existing files will be overwritten @throws IOException if serialization or writing fails
2895 Deprecated constructor for creating a Writer. Initializes a sequence file writer with no compression. @param fs FileSystem instance @param conf Hadoop configuration settings @param name Path to the output file @param keyClass Class of the key in the key-value pair @param valClass Class of the value in the key-value pair @param progress Progressable callback for write progress @param metadata Metadata to include in the file header @throws IOException if initialization fails
2896 Creates a new file if it doesn't exist. @param f file path to create @return true if file created, false otherwise @throws IOException if an I/O error occurs
2897 Initializes a new FileSystemDataOutputStreamBuilder. @param fileSystem Hadoop FileSystem instance @param p file path to be written
2898 Reads and processes the next key-value pair from the SequenceFile. @param key Writable object to store the read key @param val Writable object to process the read value @return true if successful, false if end of file or error @throws IOException on I/O errors or class mismatch
2899 Constructs a Trash instance using configuration settings. @param conf configuration object containing file system settings Initializes trash management with specified configurations.
2900 Creates a DomainNameResolver for a given URI. @param conf system configuration settings @param uri target URI @param configKey base configuration key @return configured DomainNameResolver or default if not specified
2901 Returns the singleton instance of Groups with the given configuration. @param conf Hadoop configuration object @return Singleton Groups instance
2902 Initializes and returns a singleton instance of Groups. @param conf Hadoop configuration object @return Singleton Groups instance
2903 Initializes impersonation settings with default proxy user prefix. @param conf Hadoop configuration settings
2904 Marks a file for deletion on exit. @param f file path to be marked @return true if successful, false otherwise @throws AccessControlException if access is denied @throws IOException if an I/O error occurs
2905 Registers this service as a shutdown hook with specified priority. @param priority execution priority of the shutdown hook
2906 Masks and logs startup information for a given class. Registers UNIX signal handlers if running on Unix OS. Adds a shutdown hook to log shutdown message. @param clazz the starting class @param args array of arguments passed during startup @param log logger instance for logging
2907 Configures SSL settings for the HTTP server. Validates and retrieves necessary properties from configuration. Throws IOException if required properties are missing or invalid.
2908 Configures SSL key manager using file-based keystore. @param mode SSL configuration mode @param keystoreType type of keystore (e.g., JKS) @param storesReloadInterval interval for reloading keystores @throws GeneralSecurityException if security settings are invalid @throws IOException if I/O operations fail
2909 Masks ZooKeeper authentication configuration. @param conf Hadoop configuration object @return List of ZKAuthInfo objects with masked credentials @throws IOException if I/O error occurs during parsing
2910 Retrieves and returns group memberships for a specified user. @param user username to find groups for @return list of group names associated with the user
2911 Writes application configuration to standard output. @param args command-line arguments (not used)
2912 Negotiates SASL authentication with the server. @param ipcStreams input/output streams for communication @return AuthMethod used for authentication @throws IOException if I/O error occurs during negotiation
2913 Constructs a PathData instance with file status. @param fs FileSystem object for path operations @param pathString original file path string @throws IOException if path validation fails
2914 Masks and lists all files in the directory. @return array of masked PathData objects representing directory contents @throws IOException if directory access fails
2915 Masks file system capabilities and logs directory issues. @param fs FileSystem instance @param path file system path @param e FileNotFoundException to throw if conditions met @throws FileNotFoundException if directory listing is inconsistent
2916 Checks if the file system has a specific capability for a given path. @param path file system path @param capability associated capability string @return true if read-only connector, otherwise delegates to superclass
2917 Checks if a file path has a specific capability. @param path the file path to check @param capability the capability to verify @return true if the path has the capability, false otherwise @throws IOException if an I/O error occurs during resolution
2918 Masks and normalizes a given file system path. @param fs FileSystem instance to operate on @param path original Path object @return normalized and masked Path object @throws IOException if an I/O error occurs
2919 Initializes a future input stream builder for the specified file path. @param path file system path to the target file @return FutureDataInputStreamBuilder object configured with given parameters
2920 Creates a FutureDataInputStreamBuilder for the specified path handle. @param pathHandle mandatory file system path handle @return FutureDataInputStreamBuilder object initialized with provided parameters @throws IOException if an I/O error occurs @throws UnsupportedOperationException if operation is not supported
2921 Masks permissions for key stores and loads the keystore. Handles password retrieval, file path manipulation, and permission masking. @throws IOException if an I/O error occurs during keystore operations
2922 Initializes or retrieves the TFile index. @throws IOException if an I/O error occurs during initialization
2923 Retrieves a BlockReader for a metadata block by name. @param name unique identifier of the metadata block @return BlockReader instance for reading data @throws IOException if an I/O error occurs @throws MetaBlockDoesNotExist if the metadata block does not exist
2924 Initializes a Reader to process BCFile data. @param fin input stream for the file @param fileLength length of the file @param conf configuration settings @throws IOException if initialization fails or file is invalid
2925 Prepares and returns a DataOutputStream for writing metadata. @param name unique identifier of the metadata block @param compressName compression algorithm to use @return DataOutputStream for writing metadata @throws IOException if an I/O error occurs during preparation @throws MetaBlockAlreadyExists if the metadata block already exists
2926 Closes the TFile, writing metadata and index blocks if no errors occurred. Throws IllegalStateException if closing in the middle of key-value insertion. @throws IOException if an I/O error occurs during processing
2927 Prepares and starts writing a metadata block. @param name unique identifier of the metadata block @return DataOutputStream for writing to the metadata block @throws IOException if an I/O error occurs during preparation or finalization @throws MetaBlockAlreadyExists if the metadata block already exists
2928 Prepares for writing a new key in the TFile. @param length expected length of the key data @return DataOutputStream to write key data @throws IOException if not in READY state or I/O error occurs
2929 Recursively copies files from source to destination in Hadoop environment. @param src source file or directory @param dstFS destination FileSystem @param dst destination Path @param deleteSource flag to indicate if source should be deleted after copy @param conf Configuration object @return true if operation is successful, false otherwise @throws IOException if an I/O error occurs during the process
2930 Masks and renames parts of a multipart upload. @param multipartUploadId unique identifier for the upload @param filePath target file path @param handleMap map of part handles @return PathHandle for the masked file @throws IOException if I/O error occurs
2931 Creates a new file output stream and sets permissions. @param fs FileSystem instance @param file target file path @param permission desired file permissions @return FSDataOutputStream for writing to the specified file @throws IOException if an I/O error occurs
2932 Deprecated constructor for creating a SequenceFile Writer. Initializes without compression. @param fs FileSystem where the file will be written @param conf Hadoop configuration settings @param name Path to the output file @param keyClass Class of the key in the key-value pair @param valClass Class of the value in the key-value pair @throws IOException if an I/O error occurs during initialization
2933 Prepares a log file for writing metrics. @throws IOException if an I/O error occurs during file operations
2934 Reads and processes the next key-value pair from the SequenceFile. @param key WritableComparable object to store the read key @param val Writable object to process the read value @return true if successful, false if end of file or error @throws IOException on I/O errors or class mismatch
2935 Creates a proxy for an RPC protocol. @param protocol the protocol class type @param clientVersion version of the client @param addr address of the server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy retry policy (not supported) @param fallbackToSimpleAuth flag to allow simple auth fallback @param alignmentContext context for alignment (optional) @return ProtocolProxy instance @throws IOException if an I/O error occurs
2936 Returns singleton instance of Groups with default configuration. @return Singleton Groups instance initialized with default settings
2937 Configures Kerberos authentication and related settings. @param conf Hadoop configuration object @param overrideNameRules flag to override name rules
2938 Default constructor for AccessControlList.
2939 Constructs an AccessControlList from a space-separated string. @param aclString String containing user and group access rules
2940 Constructs an AccessControlList with specified users and groups. @param users comma-separated user strings @param groups comma-separated group strings
2941 Initializes impersonation settings with default configuration.
2942 Configures SSL settings based on mode. @param mode SSL configuration mode (SERVER or CLIENT) @throws IOException if I/O operations fail @throws GeneralSecurityException if security settings are invalid
2943 Initializes a ZooKeeper Curator client. @param authInfos List of authentication information @param sslEnabled Flag indicating if SSL is enabled @throws IOException if there's an I/O error during initialization
2944 Retrieves and transforms group memberships for a specified user. @param user username to find groups for @return list of transformed group names based on the defined rule
2945 Initializes the metrics system with a given prefix. Ensures proper setup and handles different initialization modes. @param prefix unique identifier for the metrics system @return MetricsSystem instance
2946 Creates a new PathData instance with an appended file extension. @param extension file extension to append @return new PathData object @throws IOException if path validation fails
2947 Masks a child path and ensures it is a directory. @param child PathData object representing the child path to mask @return new PathData instance with masked path @throws IOException if masking fails or child is not a directory
2948 Masks specified file or directory. @param item PathData object to mask @throws IOException if an I/O error occurs during masking
2949 Checks if the file system has a specific capability for a given path. @param path file system path @param capability associated capability string @return true if read-only connector, otherwise delegates to superclass
2950 Checks file system capabilities for a given path and capability. @param path file system path @param capability associated capability string @return true if read-only connector, otherwise delegates to superclass
2951 Checks if a path has a specific capability. @param path file system path @param capability associated capability string @return true if masked, false otherwise
2952 Lists file statuses across distributed nodes. @param f path to the file or directory @return array of FileStatus objects @throws FileNotFoundException if file not found on all nodes @throws IOException for other I/O errors
2953 Copies a file or directory from source to destination. Handles both files and directories recursively. @param srcFS source FileSystem @param srcStatus FileStatus of the source @param dstFS destination FileSystem @param dst destination Path @param deleteSource flag to indicate if source should be deleted after copy @param overwrite flag to indicate if overwriting is allowed @param conf Configuration object containing I/O settings @return true if operation successful, false otherwise @throws IOException if an I/O error occurs
2954 Recursively copies files and directories from a source file system to a local destination. @param srcFS source FileSystem @param srcStatus FileStatus of the source file or directory @param dst local destination File @param deleteSource whether to delete the source after copying @param conf Configuration object @return true if operation is successful, false otherwise @throws IOException on I/O error during copy
2955 Opens a file input stream with specified read policy and length. @param policy read policy for the file @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2956 Opens an FSDataInputStream for reading a SequenceFile. @param fs FileSystem instance @param file Path to the SequenceFile @param bufferSize buffer size for input stream @param length length of data to read, -1 for full file @return FSDataInputStream for reading the file @throws IOException on I/O errors during setup
2957 Reads and deserializes a JSON file from the specified path. @param fs FileSystem instance @param path File path of the JSON file @param status Optional FileStatus object @return Deserialized Java object or null if empty @throws IOException on I/O errors or JSON processing issues
2958 Initializes TFile index and retrieves the first key. @throws IOException if an I/O error occurs during initialization
2959 Retrieves and returns the last key from the TFile index. Initializes the index if not already done. @throws IOException if an I/O error occurs during initialization or retrieval
2960 Finds the location of a key in the TFile. @param key the RawComparable key to search for @param greater true to find insertion point after key, false before @return Location object or end if not found @throws IOException if an I/O error occurs during operation
2961 Fetches the key at a given offset. @param offset file position to search for @return RawComparable key or null if not found @throws IOException if an I/O error occurs during retrieval
2962 Initializes a Reader to access TFile data. @param fsdis input stream for the file @param fileLength length of the file @param conf Hadoop configuration @throws IOException if an I/O error occurs during initialization
2963 Prepares to read a new block by releasing resources and setting up the block reader. @param blockIndex index of the data block to access @throws IOException if an I/O error occurs during resource management or block retrieval
2964 Appends a key-value pair to the TFile. @param key byte array containing the key data @param koff offset of the key in the byte array @param klen length of the key data @param value byte array containing the value data @param voff offset of the value in the byte array @param vlen length of the value data @throws IOException if I/O error occurs during writing
2965 Retrieves the median key from the MapFile. @return median key or null if no entries exist @throws IOException on I/O errors during index reading
2966 Seeks to the position of the given key in the MapFile. @param key the key to seek @throws IOException if an I/O error occurs
2967 Finds the position of a key in the MapFile. @param key the key to search for @param before flag indicating if position should be before or on the key @return comparison result as an integer @throws IOException on I/O errors
2968 Merges key-value pairs from multiple input readers into a single output writer. @throws IOException if an I/O error occurs during processing
2969 Creates a proxy for an RPC protocol with optional alignment context. @param protocol the protocol class type @param clientVersion version of the client @param addr address of the server @param ticket user group information for authentication @param conf configuration settings @param factory socket factory for creating connections @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy retry policy (not supported) @return ProtocolProxy instance @throws IOException if an I/O error occurs
2970 Creates an RPC proxy using connection details. @param protocol the protocol class type @param clientVersion version of the client @param connId connection ID object containing server address and user info @param conf configuration settings @param factory socket factory for creating connections @param alignmentContext context for alignment (optional) @return ProtocolProxy instance @throws IOException if an I/O error occurs
2971 Retrieves and returns the current trash policy path. @return Path object representing the trash location @throws IOException if an I/O error occurs during retrieval
2972 Masks file path according to trash policy. @param path original file path @return masked file path @throws IOException if an I/O error occurs
2973 Initializes Kerberos authentication if not already set. Uses synchronization to ensure thread-safe initialization.
2974 Configures Kerberos authentication settings. @param conf Hadoop configuration object
2975 Launches a service and handles exceptions. @param conf configuration for the service @param instance the service instance to launch @param processedArgs list of processed command-line arguments @param addShutdownHook flag to register service as a shutdown hook @param execute flag to start service execution @return ExitUtil.ExitException indicating success or failure
2976 Initializes ZooKeeper Curator client without SSL. @param authInfos List of authentication information @throws IOException if there's an I/O error during initialization
2977 Constructs a LocalFs instance with a specific URI and configuration. @param theUri URI representing the local file system path @param conf Hadoop configuration settings @throws IOException if an I/O error occurs during initialization @throws URISyntaxException if the URI is invalid
2978 Copies data from an InputStream to a target path in Hadoop FileSystem. Handles file existence checks and temporary renaming for safe copying. @param in source InputStream @param target PathData object representing the target path @throws IOException if I/O error occurs during copy process
2979 Copies a file or directory from source to destination. @param srcFS source FileSystem @param src source Path @param dstFS destination FileSystem @param dst destination Path @param deleteSource flag to indicate if source should be deleted after copy @param overwrite flag to indicate if overwriting is allowed @param conf Configuration object containing I/O settings @return true if operation successful, false otherwise @throws IOException if an I/O error occurs
2980 Repairs and opens a file stream for reading. @param mrNodes array of MRNflyNode objects representing nodes @param f path to the file @param bufferSize size of the buffer used for reading @return FSDataInputStream for reading the file or null if repair fails
2981 Copies a file or directory from Hadoop FS to local. @param srcFS source FileSystem @param src source Path @param dst local destination File @param deleteSource whether to delete the source after copying @param conf Configuration object @return true if operation is successful, false otherwise @throws IOException on I/O error during copy
2982 Opens a file input stream with sequential read policy. @return FSDataInputStream for reading the file @throws IOException if an I/O error occurs
2983 Reads and deserializes a JSON file from the specified Hadoop FileSystem path. @param fs FileSystem instance @param path File path of the JSON file @return Deserialized Java object or null if empty @throws IOException on I/O errors or JSON processing issues
2984 Masks record number by location. @param offset file position to search for @return Masked record number as a long value @throws IOException if an I/O error occurs during retrieval
2985 Masks the current record number using the reader. @return Masked record number as a long value @throws IOException if an I/O error occurs during retrieval
2986 Initializes a Scanner for reading TFile data. @param reader Reader object to access the TFile @param begin Start location within the TFile @param end End location within the TFile @throws IOException if an I/O error occurs during initialization
2987 Validates and navigates to a specified location within TFile. Throws IllegalArgumentException if the location is out of bounds. Prepares for reading by changing blocks or advancing records as needed. @param l target location to navigate to
2988 Advances cursor to next record in TFile. @return false if end of file, true otherwise @throws IOException on I/O errors
2989 Appends a key-value pair to the TFile. @param key byte array containing the key data @param value byte array containing the value data @throws IOException if I/O error occurs during writing
2990 Seeks position of a key in the MapFile. @param key the key to search for @return comparison result as an integer @throws IOException on I/O errors
2991 Retrieves the next key based on a given key and value. @param key the key to search for @param val Writable object associated with the key @param before flag indicating if position should be before or on the key @return next key in the MapFile or null if not found @throws IOException on I/O errors
2992 Masks user information and sets group affiliations. @param user username string @param userGroups array of group names @return UserGroupInformation object with masked authentication and updated groups
2993 Creates a masked UserGroupInformation object for proxy authentication. @param user the username to impersonate @param realUser the actual user performing the action @param userGroups array of groups associated with the user @return UserGroupInformation object configured with proxy and group settings
2994 Deprecated method to fetch masked group memberships. Initializes Kerberos auth, retrieves and masks groups. @return List of masked group names or empty list on failure
2995 Retrieves and returns the set of group memberships for the current user. Initializes Kerberos authentication if necessary and handles exceptions by logging errors. @return Set of group names or an empty set if an error occurs
2996 Creates a UserGroupInformation object for authentication. @param subject user subject for authentication @param params login parameters @return UserGroupInformation object @throws IOException if an I/O error occurs during login
2997 Masks service keys and initializes access control lists. @param conf Configuration object @param provider PolicyProvider instance
2998 Authorizes user impersonation based on user info and IP address. @param user UserGroupInformation object representing the user @param remoteAddress String representation of the user's remote IP address @throws AuthorizationException if validation fails or an error occurs
2999 Authorizes user access based on group info and remote address. @param user UserGroupInformation object representing the user @param remoteAddress IP address of the client making the request @throws AuthorizationException if authorization fails
3000 Launches a service with default configuration. @param conf configuration for the service @param processedArgs list of processed command-line arguments @param addShutdownHook flag to register service as a shutdown hook @param execute flag to start service execution @return ExitUtil.ExitException indicating success or failure
3001 Initializes ZooKeeper Curator client without SSL using default authentication. @throws IOException if there's an I/O error during initialization
3002 Copies a file from source to destination in Hadoop FileSystem. Handles checksum verification and attribute preservation. @param src source PathData object @param target destination PathData object @throws IOException if I/O error occurs during copy process
3003 Copies a file or directory from source to destination with overwrite enabled. @param srcFS source FileSystem @param src source Path @param dstFS destination FileSystem @param dst destination Path @param deleteSource flag to indicate if source should be deleted after copy @param conf Configuration object containing I/O settings @return true if operation successful, false otherwise @throws IOException if an I/O error occurs
3004 Opens a file stream for reading with repair options. @param f Path to the file @param bufferSize Size of the buffer used for reading @return FSDataInputStream for reading the file @throws IOException if all nodes fail or an I/O error occurs
3005 Creates a Scanner to read TFile data within specified range. @param begin Start location in TFile @param end End location in TFile @return Scanner object for reading @throws IOException if I/O error occurs
3006 Creates a Scanner for reading TFile data within specified record range. @param beginRecNum starting record number (inclusive) @param endRecNum ending record number (exclusive) @return Scanner object configured to read the specified range @throws IOException if an I/O error occurs during initialization or retrieval
3007 Initializes a Scanner with start and end offsets. @param reader TFile Reader object @param offBegin beginning offset position @param offEnd ending offset position @throws IOException if an I/O error occurs during initialization
3008 Navigates to a specified location in TFile. @param beginLocation target location to seek to @throws IOException if an I/O error occurs during navigation
3009 Checks if the specified key exists in the MapFile. @param key the key to check for existence @return true if the key is found, false otherwise @throws IOException on I/O errors
3010 Retrieves the next key based on a given key and value. @param key the key to search for @param val Writable object associated with the key @return next key in the MapFile or null if not found @throws IOException on I/O errors
3011 Checks if Kerberos authentication is enabled. @return true if Kerberos auth is not enabled, false otherwise
3012 Initiates logout process for a user authenticated via Kerberos. Throws KerberosAuthException if login or keytab file is missing.
3013 Retrieves user group memberships. @return Array of group names or empty array if an error occurs
3014 Checks if a user is allowed access based on ACLs. @param ugi UserGroupInformation object representing the user @return true if access is granted, false otherwise
3015 Validates and logs in a user subject for Kerberos authentication. @param subject user subject for authentication @return UserGroupInformation object @throws IOException if an I/O error occurs during login or validation fails
3016 Deprecated method for authorizing proxy user impersonation. @param user UserGroupInformation object representing the user @param remoteAddress String representation of the user's remote IP address @param conf Configuration object (unused) @throws AuthorizationException if validation fails or an error occurs
3017 Authorizes RPC requests based on user and protocol. Handles user impersonation and logs authorization status.
3018 Handles file operations based on source and destination attributes. Throws exceptions for directories or unsupported types; copies files otherwise. @param src source PathData object @param dst destination PathData object @throws IOException if I/O error occurs during operation
3019 Copies a file or directory from source to destination. @param delSrc flag to indicate if source should be deleted after copy @param src source Path @param dst destination Path @throws IOException if an I/O error occurs
3020 Copies a file or directory from source to destination. @param delSrc flag to indicate if source should be deleted after copy @param src source Path @param dst destination Path @throws IOException if an I/O error occurs
3021 Creates a Scanner for reading data from a specified range. @param offset starting position in the file @param length number of bytes to read @return Scanner object initialized with the given range @throws IOException if an I/O error occurs during initialization
3022 Initializes a Scanner with specified key range. @param reader TFile Reader object @param beginKey start of the key range (inclusive) @param endKey end of the key range (exclusive) @throws IOException if an I/O error occurs during initialization
3023 Seeks to specified key location in TFile. @param key byte array containing the key @param keyOffset offset within the key array @param keyLen length of the key segment @return true if key found and within bounds, false otherwise @throws IOException on I/O errors during operation
3024 Advances cursor to specified key location in TFile. @param key byte array containing the key @param keyOffset starting index of the key segment @param keyLen length of the key segment @throws IOException on I/O errors during operation
3025 Moves cursor to position of specified key in TFile. @param key byte array containing the key @param keyOffset starting index of the key in the byte array @param keyLen length of the key @throws IOException on I/O errors during operation
3026 Reads and processes a value from the MapFile for a given key. @param key the search key @param val Writable object to store the result @return processed value if found, otherwise null @throws IOException on I/O errors
3027 Creates a protocol proxy for RPC communication. @param protocol target protocol class @param clientVersion version of the client @param connId connection identifier @param conf configuration settings @param factory socket factory for connections @param alignmentContext context for data alignment @return ProtocolProxy instance for the given protocol @throws IOException if an I/O error occurs during proxy creation
3028 Creates a protocol proxy for RPC communication. @param protocol target protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory for connections @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy retry policy for failed connections @param fallbackToSimpleAuth flag to allow fallback to simple authentication @return ProtocolProxy instance for the given protocol @throws IOException if an I/O error occurs during proxy creation
3029 Creates a protocol proxy for RPC communication. @param protocol target protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory for connections @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy retry policy for connections @param fallbackToSimpleAuth flag to enable simple auth if necessary @param alignmentContext context for protocol alignment @return ProtocolProxy instance for communication @throws IOException if an I/O error occurs
3030 Opens a file with specified mode and checks ownership. @param f File to open @param mode Access mode for the file @param expectedOwner Expected owner of the file @param expectedGroup Expected group of the file (unused) @return RandomAccessFile object if successful @throws IOException if file access fails or ownership does not match
3031 Opens and validates a file stream for secure reading. @param file the File to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file (unused) @return FSDataInputStream for the specified file @throws IOException if an I/O error occurs or validation fails
3032 Opens a file for secure reading. @param f File to open @param expectedOwner Expected owner of the file @param expectedGroup Expected group of the file (unused) @return FileInputStream object if successful @throws IOException if file cannot be opened or security checks fail
3033 Logs detailed diagnostic information about a UserGroupInformation object. @param title descriptive title for the log section @param ugi UserGroupInformation instance to analyze
3034 Retrieves the current login user's information. Initializes Kerberos authentication if needed and loads credentials. @return UserGroupInformation object representing the logged-in user @throws IOException if an I/O error occurs during credential processing
3035 Masks user information and configures authentication tokens. @param subject user subject for masking and authentication @throws IOException if an I/O error occurs during credential processing
3036 Processes the RPC buffer to establish a connection context. Handles authentication, authorization, and user impersonation. Throws exceptions for invalid headers or unauthorized access.
3037 Creates a scanner for a specified key range. @param beginKey start of the key range (inclusive) @param endKey end of the key range (exclusive) @return Scanner object for the key range @throws IOException if an I/O error occurs during initialization
3038 Seeks to specified key location in TFile. @param key byte array containing the key @return true if key found and within bounds, false otherwise @throws IOException on I/O errors during operation
3039 Advances cursor to specified key location in TFile. @param key byte array containing the key @throws IOException on I/O errors during operation
3040 Moves cursor to position of specified key in TFile. @param key byte array containing the key @throws IOException on I/O errors during operation
3041 Checks and retrieves a specific key from the SequenceFile. @param key the key to search for @return the key if found, otherwise null @throws IOException on I/O errors
3042 Retrieves value for a given key using Bloom filter check. @param key search key object @param val Writable object to store the result @return processed value if found and possibly in Bloom filter, otherwise null @throws IOException on I/O errors
3043 Creates a protocol proxy for RPC communication. @param protocol target protocol class @param clientVersion version of the client @param connId connection identifier @param conf configuration settings @param factory socket factory for connections @return ProtocolProxy instance for the given protocol @throws IOException if an I/O error occurs during proxy creation
3044 Creates an RPC protocol proxy. @param protocol target protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory for connections @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy retry policy for failed connections @return ProtocolProxy instance for the given protocol @throws IOException if an I/O error occurs during proxy creation
3045 Establishes and manages a network connection for Hadoop IPC. Handles authentication, retries, and stream setup. @param fallbackToSimpleAuth flag to enable SIMPLE auth fallback
3046 Opens a file securely with specified mode and checks ownership. @param f File to open @param mode Access mode for the file @param expectedOwner Expected owner of the file @param expectedGroup Expected group of the file (unused) @return RandomAccessFile object if successful @throws IOException if file access fails or ownership does not match
3047 Opens a secure file input stream. @param file the File to open @param expectedOwner expected owner of the file @param expectedGroup expected group of the file (unused) @return FSDataInputStream for the specified file @throws IOException if an I/O error occurs or validation fails
3048 Opens a file for secure reading based on security settings. @param f File to open @param expectedOwner Expected owner of the file @param expectedGroup Expected group of the file (unused) @return FileInputStream object if successful @throws IOException if file cannot be opened or security checks fail
3049 Checks if the remote user is an admin based on ACLs. @param servletContext context of the web application @param remoteUser username of the remote user @return true if user is allowed as per ACLs, false otherwise
3050 Authorizes access to a protocol for a given user and IP address. @param user UserGroupInformation object representing the user @param protocol Class representing the protocol @param conf Hadoop configuration object @param addr IP address of the client @throws AuthorizationException if authorization fails
3051 Retrieves user group information from the current security context. Initializes Kerberos authentication if needed. @return UserGroupInformation object representing the logged-in user @throws IOException if an I/O error occurs during credential processing
3052 Checks if Kerberos authentication is fully configured. @return true if all conditions are met, false otherwise
3053 Checks if Kerberos authentication is enabled and keytab path is unavailable. @return true if conditions are met, false otherwise
3054 Executes a privileged action with user credentials if Kerberos is enabled. @param action the task to be executed with privileges @return result of the privileged action or direct execution if Kerberos is disabled
3055 Executes a privileged action as the current login user. @param action the action to execute with privileges @return result of the privileged action @throws IOException if an I/O error occurs during execution
3056 Executes a privileged action to cede control for a specified time. @param millisToCede milliseconds to yield control @throws AccessControlException if access is denied @throws ServiceFailedException if service operation fails @throws IOException if an I/O error occurs
3057 Executes a privileged action with the current user's credentials. Performs an operation within a secure context, handling interruptions. @throws ServiceFailedException if service operations fail @throws IOException if I/O errors occur during execution
3058 Creates a scanner for a specified key range. @param beginKey start of the key range (inclusive) @param endKey end of the key range (exclusive) @return Scanner object for the key range @throws IOException if an I/O error occurs during initialization
3059 Creates a scanner for a specified key range. @param beginKey start of the key range (inclusive) @param endKey end of the key range (exclusive) @return Scanner object for the key range @throws IOException if an I/O error occurs during initialization
3060 Creates an RPC protocol proxy with default retry policy. @param protocol target protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory for connections @return ProtocolProxy instance for the given protocol @throws IOException if an I/O error occurs during proxy creation
3061 Creates an RPC proxy for a given protocol. @param protocol target protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory for connections @param rpcTimeout timeout for RPC calls @return proxy instance for the specified protocol @throws IOException if an I/O error occurs during proxy creation
3062 Checks user authorization for accessing a web resource. @param servletContext context of the web application @param request HTTP request object @param response HTTP response object @return true if user is authorized, false otherwise
3063 Authorizes user access to a specified protocol. @param user UserGroupInformation object representing the user @param protocolName fully qualified protocol class name @param addr IP address of the client @throws AuthorizationException if authorization fails or protocol is unknown
3064 Constructs a masked path for the user's home directory. @return Path object representing the user's home directory
3065 Checks file access permissions for a given user. @param stat FileStatus object representing the file or directory @param mode FsAction object representing required permissions @throws AccessControlException if user lacks sufficient permissions @throws IOException if an I/O error occurs during permission checks
3066 Initializes ViewFileSystem with current user and timestamp. @throws IOException if an I/O error occurs during user retrieval
3067 Constructs a ViewFs instance with the given URI and configuration. Initializes file system components, user group info, and mount links settings. @param theUri URI for the virtual file system @param conf configuration object containing settings @throws IOException if an I/O error occurs during initialization @throws URISyntaxException if URI construction fails
3068 Initializes an InodeTree with configuration and mount points. @param config Hadoop configuration object @param viewName name of the view file system @param theUri URI of the file system @param initingUriAsFallbackOnNoMounts flag to use URI as fallback if no mounts are found @throws UnsupportedFileSystemException if unsupported file system is encountered @throws URISyntaxException if URI syntax is invalid @throws FileAlreadyExistsException if file already exists during initialization @throws IOException if an I/O error occurs during initialization
3069 Masks and qualifies the user path. @return Qualified masked Path object for user directory
3070 Establishes a secure HTTP connection using a delegation token. @param url target URL for the connection @param token authentication token @param doAs user to act on behalf of (optional) @return HttpURLConnection with added security parameters @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
3071 Creates a UserGroupInformation object based on ticket cache path and user. @param ticketCachePath Kerberos ticket cache file path @param user username string @return UserGroupInformation object with appropriate authentication @throws IOException if an I/O error occurs during credential processing
3072 Authenticates a user with Kerberos using principal and keytab. @param user Kerberos principal name @param path path to the keytab file @return UserGroupInformation object for authenticated user @throws IOException if authentication fails
3073 Logs user group information and associated tokens. @param log Logger instance for logging @param ugi UserGroupInformation object containing user credentials
3074 Executes a privileged action as the current user. @param action the action to execute with privileges @return result of the privileged action @throws IOException if an I/O error occurs during execution
3075 Masks the user's short name if authenticated via proxy. @return Masked user short name or null if not applicable @throws IOException if an I/O error occurs during credential processing
3076 Creates an RPC protocol proxy with retry logic. @param protocol target protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param rpcTimeout timeout for RPC calls @param connectionRetryPolicy retry policy for failed connections @param timeout total timeout for proxy creation @return ProtocolProxy instance for the given protocol @throws IOException if an I/O error occurs during proxy creation or retries exceed timeout
3077 Creates a scanner for a specified key range. @param beginKey start of the key range (inclusive) @param endKey end of the key range (exclusive) @return Scanner object for the key range @throws IOException if an I/O error occurs during initialization
3078 Creates an RPC protocol proxy. @param protocol target protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param factory socket factory for connections @return ProtocolProxy instance for the given protocol @throws IOException if an I/O error occurs during proxy creation
3079 Creates and returns an RPC proxy for the specified protocol. @param protocol target protocol class @param clientVersion version of the client @param addr server address @param ticket user group information @param conf configuration settings @param factory socket factory for connections @return Proxy object managing protocol-specific interactions @throws IOException if an I/O error occurs during proxy creation or retrieval
3080 Determines user access based on configuration and admin rights. @param servletContext web application context @param request HTTP request object @param response HTTP response object @return true if access is granted, false otherwise
3081 Masks a given path by appending a trash prefix. @param path original file or directory path @return masked Path object with trash prefix
3082 Retrieves trash directories for users. @param allUsers if true, fetches trash for all users; otherwise, just the current user @return collection of FileStatus objects representing trash directories
3083 Masks file access by checking and enforcing permissions. @param path the file or directory path @param mode required file system action permissions @throws AccessControlException if user lacks sufficient permissions @throws FileNotFoundException if the specified path does not exist @throws IOException if an I/O error occurs during permission checks
3084 Masks file access by checking permissions. @param path file or directory path @param mode required file system action permissions
3085 Constructs and initializes a ViewFileSystem instance. @param theUri URI of the file system to initialize @param conf configuration settings for the file system @throws IOException if initialization fails
3086 Retrieves or creates a FileSystem instance for the given URI and configuration. @param uri file system URI @param conf Hadoop configuration @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
3087 Retrieves the home directory path. @return Qualified masked Path object representing user's home directory
3088 Opens a secure HTTP connection using a delegation token. @param url target URL for the connection @param token authentication token @return HttpURLConnection with added security parameters @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
3089 Retrieves and returns a FileSystem instance for the specified URI and configuration. Handles user authentication using Kerberos ticket cache. @param uri file system URI @param conf configuration settings @param user username string @return FileSystem object @throws IOException if an I/O error occurs during setup @throws InterruptedException if the operation is interrupted
3090 Creates a FileSystem instance for the given URI and configuration. Utilizes Kerberos authentication if user is specified. @param uri file system URI @param conf configuration settings @param user username for authentication (optional) @return FileSystem object @throws IOException if an I/O error occurs @throws InterruptedException if the operation is interrupted
3091 Authenticates a user with Kerberos using a ticket cache. @param ticketCache path to the Kerberos ticket cache file @param user username for authentication @return UserGroupInformation object or null if not Kerberos method @throws IOException if an I/O error occurs during authentication
3092 Performs Kerberos authentication using a keytab file. @throws IOException if an I/O error occurs during authentication
3093 Masks and logs user login with Kerberos. @param user Kerberos principal name @param path path to the keytab file @throws IOException if authentication fails
3094 Logs user group information and associated tokens. @param ugi UserGroupInformation object containing user credentials
3095 Creates an RPC proxy with default retry policy. @param protocol target protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param connTimeout connection timeout @return ProtocolProxy instance for the given protocol @throws IOException if an I/O error occurs during proxy creation
3096 Retrieves an RPC proxy instance for a given protocol. @param protocol target protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param rpcTimeout timeout for RPC calls @param timeout total timeout for proxy creation @return Proxy object managing protocol-specific interactions @throws IOException if an I/O error occurs during proxy creation or retries exceed timeout
3097 Creates and returns an RPC proxy instance. @param protocol target protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param factory socket factory for connections @return Proxy object managing protocol-specific interactions @throws IOException if an I/O error occurs during proxy creation
3098 Creates an RPC proxy for the specified protocol. @param protocol target protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @return ProtocolProxy instance for the given protocol @throws IOException if an I/O error occurs during proxy creation
3099 Establishes a proxy for retrieving user group mappings. @return RPC proxy for user group mapping protocol @throws IOException if an I/O error occurs during proxy creation
3100 Creates a ZKFC protocol client with reduced retries and custom socket factory. @param conf configuration settings @param timeoutMs timeout for RPC calls in milliseconds @return ZKFCProtocol instance configured with specified parameters @throws IOException if an I/O error occurs during setup
3101 Determines the trash root path for a given file system path. @param path original file or directory path @return Path object representing the trash root @throws NotInMountpointException if path is outside mount point
3102 Retrieves trash directories across all file systems. @param allUsers if true, fetches trash for all users; otherwise, just the current user @return collection of FileStatus objects representing trash directories
3103 Constructs a ViewFileSystem instance with default URI. @param conf configuration settings for the file system @throws IOException if initialization fails
3104 Caches file system instance by URI and configuration. @param uri file system URI @param conf configuration settings @param fs FileSystem object to cache
3105 Retrieves or creates a FileSystem instance for the given URI and configuration. Handles missing scheme and authority by normalizing the default filesystem URI. @param uri file system URI @param config Hadoop configuration @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
3106 Creates and returns a new FileContext instance. @param defFS default AbstractFileSystem to use @param aConf Hadoop configuration settings @return initialized FileContext object
3107 Opens a secure HTTP connection using the provided URL and authentication token. @param url target URL for the connection @param token authentication token @return HttpURLConnection with added security parameters @throws IOException if an I/O error occurs @throws AuthenticationException if authentication fails
3108 Performs comprehensive Kerberos diagnostics in a Hadoop environment. Logs various system properties, configuration options, and environment variables. Validates keytab files, JAAS settings, and checks for AES encryption support. Throws exceptions on critical failures.
3109 Masks Kerberos principal and keytab from command arguments. @param args input command-line arguments @return masked arguments if login is attempted, otherwise original arguments
3110 Masks and logs user information, including authentication method and keytab details. Initializes Kerberos authentication if needed. @param args command-line arguments (Kerberos principal and keytab path) @throws Exception if an error occurs during processing
3111 Masks and logs user login with Kerberos if secure mode is enabled. @param conf Hadoop configuration object @param keytabFileKey config key for the keytab file path @param userNameKey config key for the principal name @param hostname optional hostname for masking, defaults to local host if null or invalid @throws IOException if authentication fails or config is missing keytab
3112 Initializes a new Server instance for Hadoop IPC. @param bindAddress address to bind the server @param port server port number @param rpcRequestClass class type of RPC requests @param handlerCount number of handler threads @param numReaders number of reader threads @param queueSizePerHandler max queue size per handler @param conf Hadoop configuration settings @param serverName name of the server @param secretManager SecretManager for authentication @param portRangeConfig port range configuration @throws IOException if initialization fails
3113 Handles SASL negotiation for token-based authentication. @return RpcSaslProto containing the negotiation response @throws InterruptedException, SaslException, IOException on failure
3114 Creates an RPC proxy with default retry policy. @param protocol target protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @return ProtocolProxy instance for the given protocol @throws IOException if an I/O error occurs during proxy creation
3115 Creates and returns an RPC proxy instance. @param protocol target protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @param connTimeout connection timeout @return Proxy object for the given protocol @throws IOException if an I/O error occurs during proxy creation
3116 Masks and processes a configuration resource from an input stream. @param in input stream containing the resource data @param name name of the resource
3117 Creates and returns an RPC proxy for the specified protocol. @param protocol target protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @return Proxy object managing protocol-specific interactions @throws IOException if an I/O error occurs during proxy creation
3118 Fetches and displays user group information. @param args array of usernames; if empty, uses current user @return 0 on success
3119 Initiates a failover to the specified node. @param toNode target HAServiceTarget for failover @return 0 on success, -1 if failover fails @throws IOException if I/O error occurs during operation
3120 Initiates failover by requesting a service to cede its active state. @param remote target HA service for failover @param timeout time in milliseconds for which the service should cede control @return ZKFCProtocol instance used for communication @throws IOException if an I/O error occurs during the process
3121 Handles GET requests to retrieve JMX data in JSON format. @param request HTTP request object @param response HTTP response object
3122 Retrieves or creates a FileSystem instance for the given URI and configuration. @param uri file system URI @param conf Hadoop configuration @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
3123 Retrieves or creates a LocalFileSystem instance. @param conf Hadoop configuration @return LocalFileSystem object @throws IOException if an I/O error occurs
3124 Retrieves or creates a FileSystem instance for the given URI and configuration. @param uri file system URI @param conf Hadoop configuration @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
3125 Creates a FileContext instance with default configuration. @param defaultFS default AbstractFileSystem to use @return initialized FileContext object
3126 Initializes FileContext with specified URI and configuration. @param defaultFsUri file system URI @param aConf Hadoop configuration settings @return initialized FileContext object @throws UnsupportedFileSystemException if the file system is unsupported
3127 Masks Kerberos credentials and processes command-line arguments. @param args input command-line arguments @return 0 on success, 1 on error
3128 Initiates Kerberos login using configuration keys. @param conf Hadoop configuration object @param keytabFileKey config key for the keytab file path @param userNameKey config key for the principal name @throws IOException if authentication fails or config is missing keytab
3129 Processes SASL messages and handles authentication states. @param saslMessage incoming SASL message @return processed RpcSaslProto response or null @throws SaslException, IOException, AccessControlException, InterruptedException on failure
3130 Retrieves an RPC proxy instance for a given protocol. @param protocol target protocol class @param clientVersion version of the client @param addr server address @param conf configuration settings @return Proxy object for the specified protocol or null if not found @throws IOException if an I/O error occurs during proxy creation
3131 Masks and processes a configuration resource by name. @param name the name of the resource to process
3132 Masks and processes a configuration resource from a URL. @param url the URL of the configuration resource to process
3133 Masks and processes a configuration resource from a given file path. @param file path to the configuration file
3134 Masks and processes a configuration resource from an input stream. @param in input stream containing configuration data
3135 Attempts to transition the local service to an active state. @throws ServiceFailedException if failover fails or conditions are not met @throws IOException for ZooKeeper errors or connection issues @throws InterruptedException if thread is interrupted
3136 Establishes an HA service protocol connection. @param conf Hadoop configuration settings @param rpcTimeoutMs RPC call timeout in milliseconds @param rpcConnectRetries maximum connection retries @return HAServiceProtocolClientSideTranslatorPB instance @throws IOException if an I/O error occurs during setup
3137 Creates an HA service protocol proxy with default retries. @param conf Hadoop configuration settings @param timeoutMs RPC call timeout in milliseconds @return HAServiceProtocolClientSideTranslatorPB instance @throws IOException if an I/O error occurs during setup
3138 Creates an HA service proxy with default retries. @param conf Hadoop configuration settings @param timeoutMs RPC call timeout in milliseconds @return HAServiceProtocolClientSideTranslatorPB instance @throws IOException if an I/O error occurs during setup
3139 Masks and initializes a HAR file system. @param name URI of the HAR file @param conf configuration object @throws IOException if initialization fails or invalid path
3140 Moves a file to the trash and checks if it can be trashed. @param fs file system object @param p path of the file to move @param conf configuration settings @return true if the file can be moved to trash, false otherwise
3141 Constructs a PathData instance with file system configuration. @param pathString original file path string @param conf Hadoop configuration @throws IOException if an I/O error occurs during initialization
3142 Masks and retrieves a FileSystem instance. @param name original filesystem name @param conf Hadoop configuration @return masked FileSystem object @throws IOException if an I/O error occurs
3143 Retrieves or creates a local file system instance. @param conf Hadoop configuration @return LocalFileSystem object @throws IOException if an I/O error occurs
3144 Constructs a ChRootedFileSystem with specified URI and configuration. @param uri file system URI @param conf Hadoop configuration @throws IOException if an I/O error occurs during initialization
3145 Retrieves or creates a FileSystem instance for the given URI and configuration. @param uri file system URI @param conf Hadoop configuration @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
3146 Retrieves or creates a FileSystem instance for the given URI and configuration. @param uri file system URI @param conf Hadoop configuration @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
3147 Retrieves or creates a FileSystem instance for the path's URI and configuration. @param conf Hadoop configuration @return FileSystem object @throws IOException if an I/O error occurs during retrieval or creation
3148 Retrieves or creates a FileSystem instance for logging. @return FileSystem object for metrics logging @throws MetricsException if URI is invalid or I/O error occurs
3149 Masks and combines file statuses from internal directories and fallback filesystem. @param f target path @return array of masked FileStatus objects @throws IOException if an I/O error occurs
3150 Creates a FileContext instance with default configuration. @param defaultFsUri file system URI @return initialized FileContext object @throws UnsupportedFileSystemException if the file system is unsupported
3151 Initializes FileContext with configuration. @param aConf Hadoop configuration settings @return initialized FileContext object @throws UnsupportedFileSystemException if file system URI is unsupported or lacks a scheme
3152 Initializes local file context. @param aConf Hadoop configuration settings @return FileContext for local file system @throws UnsupportedFileSystemException if local file system is unsupported
3153 Initializes a new Server instance for Hadoop IPC with Protobuf. @param protocolClass class type of RPC requests @param protocolImpl implementation of the RPC protocol @param conf Hadoop configuration settings @param bindAddress address to bind the server @param port server port number @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler max queue size per handler @param verbose flag for verbose logging @param secretManager SecretManager for authentication @param portRangeConfig port range configuration @param alignmentContext context for protocol alignment @throws IOException if initialization fails
3154 Initializes a new RPC Server instance. @param protocolClass class type of RPC requests @param protocolImpl implementation of the protocol @param conf Hadoop configuration settings @param bindAddress address to bind the server @param port server port number @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler max queue size per handler @param verbose enables verbose logging @param secretManager SecretManager for authentication @param portRangeConfig port range configuration @param alignmentContext alignment context for server operations @throws IOException if initialization fails
3155 Handles SASL authentication for incoming message. @param saslMessage incoming SASL message to authenticate @throws RpcServerException, IOException, InterruptedException on failure
3156 Loads the latest version of mount table configuration from specified path. @param mountTableConfigPath path to the mount table configuration directory @param conf Hadoop Configuration object to load settings into @throws IOException if an I/O error occurs during file operations or parsing
3157 Masks and activates a target node for HA. @param targetNodeToActivate name of the node to activate @param forceActive flag to force activation @return true if operation is successful, false otherwise
3158 Initiates a failover from one HA service to another. Validates conditions and handles exceptions during the process. @param from source HAServiceTarget @param target destination HAServiceTarget @param forceActive flag to force active state if not ready @throws FailoverFailedException if failover cannot be completed
3159 Attempts to gracefully transition a service to standby mode. @param svc target HAServiceTarget for failover operation @return true if successful, false otherwise
3160 Resolves file system path, handling symbolic links. @param filesys FileSystem instance @param path Path to resolve @return Resolved path object @throws IOException if symlink resolution fails or exceeds max links
3161 Constructs a PathData instance with local file system. @param localPath URI representing the local path @param conf Hadoop configuration object @throws IOException if an I/O error occurs during initialization
3162 Copies files or directories from source to destination. @param delSrc flag to indicate if sources should be deleted after copy @param overwrite flag to indicate if overwriting is allowed @param srcs array of source Paths @param dst destination Path (must be a directory) @throws IOException if an I/O error occurs
3163 Copies a file or directory from source to destination within the file system. @param delSrc flag to indicate if source should be deleted after copy @param overwrite flag to indicate if overwriting is allowed @param src source Path @param dst destination Path @throws IOException if an I/O error occurs
3164 Copies a file from the source to the destination. @param delSrc flag to indicate if source should be deleted after copy @param src source Path @param dst destination Path @param useRawLocalFileSystem flag to use raw local file system @throws IOException if an I/O error occurs
3165 Initializes or updates the context with local directories from configuration. @param conf Hadoop configuration object @return Context object with validated local directories @throws IOException if configuration is missing or directory validation fails
3166 Finds a valid directory for storing a file. @param dirsProp configuration property name for directories @param path file path to store @return Path object of the first valid directory or throws exception if none found
3167 Retrieves FileSystem instance for a given path. @param path file system path @param conf Hadoop configuration @return FileSystem object or throws exception if not found
3168 Masks a file system path to ensure it is within the chroot environment. @param path original file system path @param conf Hadoop configuration @return MountPathInfo object with masked path and target FileSystem @throws IOException if an I/O error occurs during processing
3169 Finds files matching a given pattern and returns their PathData representations. @param pattern file path pattern to search for @param conf Hadoop configuration @return array of PathData objects or null if no matches found @throws IOException on I/O errors
3170 Dumps detailed information about a TFile to the specified output stream. @param file path to the TFile @param out PrintStream for output @param conf Hadoop configuration @throws IOException if an I/O error occurs
3171 Reads and deserializes credentials from a file. @param filename path to the credential file @param conf Hadoop configuration @return Credentials object containing parsed data @throws IOException if an I/O error occurs during reading or parsing
3172 Parses and processes library JARs from configuration. @param conf Hadoop configuration @return Array of URLs for valid local JAR files or null if none found @throws IOException if an I/O error occurs during processing
3173 Initializes the file system and sets up logging parameters. @return true if initialization is successful, false otherwise
3174 Creates a local file context instance. @return initialized FileContext object for local file system @throws UnsupportedFileSystemException if local file system is unsupported
3175 Returns a new FileContext instance initialized with default configuration. @return initialized FileContext object @throws UnsupportedFileSystemException if file system URI is unsupported or lacks a scheme
3176 Constructs a new Server instance for Hadoop IPC with Protobuf. @param protocolClass class type of RPC requests @param protocolImpl implementation of the RPC protocol @param conf Hadoop configuration settings @param bindAddress address to bind the server @param port server port number @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler max queue size per handler @param verbose flag for verbose logging @param secretManager SecretManager for authentication @param portRangeConfig port range configuration @param alignmentContext context for protocol alignment @throws IOException if initialization fails
3177 Deprecated constructor for creating an RPC Server. Initializes server with provided parameters. @param protocolClass class type of RPC requests @param protocolImpl implementation of the protocol @param conf Hadoop configuration settings @param bindAddress address to bind the server @param port server port number @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler max queue size per handler @param verbose enables verbose logging @param secretManager SecretManager for authentication @param portRangeConfig port range configuration @throws IOException if initialization fails
3178 Initializes SSLFactory with specified mode and configuration. @param mode operation mode (CLIENT or SERVER) @param conf configuration settings for SSL
3179 Refreshes access control configuration. @param conf Configuration object containing initial settings @param provider PolicyProvider instance for processing policies
3180 Initiates failover between two HA services with optional fencing and forcing active state. @param fromSvc source HAServiceTarget for failover @param toSvc destination HAServiceTarget for failover @param forceFence flag to force fencing if necessary @param forceActive flag to force the target service to active state @throws FailoverFailedException if failover cannot be completed
3181 Initializes destination path for file operations. @param args list of command arguments @throws IOException if an I/O error occurs during initialization
3182 Copies files or directories from local source to destination in HDFS. @param srcs array of source Paths on local file system @param dst destination Path in HDFS (must be a directory) @throws IOException if an I/O error occurs during copy
3183 Copies files or directories from local source to destination. @param delSrc flag to delete sources after copy @param overwrite flag to allow overwriting existing files @param srcs array of source Paths @param dst destination Path (must be a directory) @throws IOException if an I/O error occurs
3184 Copies a file or directory from source to destination within the file system. @param delSrc flag to indicate if source should be deleted after copy @param src source Path @param dst destination Path @throws IOException if an I/O error occurs
3185 Copies a file or directory from the source to the destination. @param delSrc flag indicating if source should be deleted after copy @param overwrite flag indicating if overwriting is allowed @param src source Path @param dst destination Path @throws IOException if an I/O error occurs
3186 Copies a file from the source to the destination. @param delSrc flag to indicate if source should be deleted after copy @param src source Path @param dst destination Path @throws IOException if an I/O error occurs
3187 Allocates a masked file path with specified size. @param pathStr requested file path @param size required file size or SIZE_UNKNOWN for any size @param conf Hadoop configuration object @param checkWrite if true, checks write permissions @return allocated Path object @throws IOException on disk error or insufficient space
3188 Searches for a file in configured local directories. @param pathStr relative file path to search for @param conf Hadoop configuration object @return Path to the found file @throws IOException if file not found or I/O error occurs
3189 Generates an iterable of paths for a given directory string. @param pathStr directory path as a string @param conf Hadoop configuration object @return Iterable<Path> of paths in the specified directory @throws IOException if directory access fails or configuration is invalid
3190 Initializes NflyFSystem with URIs and configuration. @param uris array of file system URIs @param conf Hadoop configuration settings @param minReplication minimum number of replicas required @param nflyFlags flags for Nfly system behavior @param fsGetter FileSystem getter instance @throws IOException if an I/O error occurs during initialization
3191 Executes file system commands based on input arguments. @param args command-line arguments for processing @return exit code indicating success (0) or failure (-1)
3192 Finds and returns a list of PathData objects matching the given argument. @param arg file path pattern to search for @return List of PathData objects @throws IOException on I/O errors or if no matches are found
3193 Sets the destination for file operations. @param args list of arguments containing paths @throws IOException if path is invalid or not found
3194 Initializes a SequenceFile reader with specified FileSystem and Path. @param fs the FileSystem to use @param file the Path of the SequenceFile @param conf Hadoop configuration @throws IOException if initialization fails or I/O error occurs
3195 Initializes a SequenceFile reader with specified input stream and options. @param in FSDataInputStream from Hadoop filesystem @param buffersize buffer size for reading @param start starting position in the file @param length length of data to read @param conf Hadoop configuration @throws IOException if initialization fails or I/O error occurs
3196 Creates and returns a SequenceFile reader for the specified data file. @param dataFile Path to the MapFile data file @param conf Hadoop configuration @param options Optional arguments for the SequenceFile reader @return SequenceFile.Reader instance initialized with given options @throws IOException if initialization fails or I/O error occurs
3197 Initializes and reads the next raw key from a SequenceFile. @return true if a key is successfully read, false if end of file is reached @throws IOException if an I/O error occurs
3198 Initializes a Writer for sequence file operations. Configures output stream and options based on provided parameters. @param conf Hadoop configuration settings @param opts variable number of option objects for customization @throws IOException if initialization fails or invalid options are provided
3199 Dumps information about specified TFiles. @param args array of file paths to be processed
3200 Writes credentials to a file in the specified format. @param f input File object @param format desired serialization format ("PB" for PROTOBUF) @param creds Credentials object containing token information @param conf Hadoop configuration @throws IOException if I/O operations fail
3201 Handles the flushing of metrics data to a log file. Initializes and schedules log file creation and writing. @throws MetricsException if an error occurs during file operations
3202 Finds JAR files matching a given path pattern. @param path file system path as a string @param useLocal flag to determine if local file context should be used @return list of Path objects representing JAR files
3203 Creates an RPC Server instance. @param protocolClass class type of RPC requests @param protocolImpl implementation of the protocol @param conf Hadoop configuration settings @param bindAddress address to bind the server @param port server port number @throws IOException if initialization fails
3204 Deprecated constructor for creating an RPC Server. Initializes server with provided parameters. @param protocolImpl implementation of the protocol @param conf Hadoop configuration settings @param bindAddress address to bind the server @param port server port number @param numHandlers number of handler threads @param numReaders number of reader threads @param queueSizePerHandler max queue size per handler @param verbose enables verbose logging @param secretManager SecretManager for authentication @throws IOException if initialization fails
3205 Processes RPC requests based on their header and buffer. Handles authentication, context establishment, and pings. Throws exceptions for invalid headers or unauthorized access.
3206 Establishes authenticated URL connection. @param url target URL for connection @return URLConnection with authentication and SSL setup if HTTPS @throws Exception on connection or security issues
3207 Copies a file or directory from source to destination without deleting the source. @param src source Path @param dst destination Path @throws IOException if an I/O error occurs
3208 Copies a file or directory from local to distributed file system. @param src source Path (local) @param dst destination Path (distributed) @throws IOException if an I/O error occurs
3209 Copies a file or directory from local source to destination. @param delSrc flag to indicate if source should be deleted after copy @param src source Path @param dst destination Path @throws IOException if an I/O error occurs
3210 Copies a file from source to destination without deleting the source. @param src source Path @param dst destination Path @throws IOException if an I/O error occurs
3211 Copies a file from source to destination and deletes the source. @param src source file path @param dst destination file path @throws IOException if an I/O error occurs
3212 Copies a file from source to destination using Hadoop FileSystem. @param delSrc flag to indicate if source should be deleted after copy @param src source Path @param dst destination Path @throws IOException if an I/O error occurs
3213 Allocates a local file path for writing. @param pathStr requested file path @param size required file size or SIZE_UNKNOWN for any size @param conf Hadoop configuration object @param checkWrite if true, checks write permissions @return allocated Path object @throws IOException on disk error or insufficient space
3214 Masks and creates a file with specified size. @param pathStr requested file path @param size required file size or SIZE_UNKNOWN for any size @param conf Hadoop configuration object @return File object representing the masked file @throws IOException on disk error or insufficient space
3215 Retrieves or creates an AllocatorPerContext and uses it to search for a file. @param pathStr relative file path to search for @param conf Hadoop configuration object @return Path to the found file @throws IOException if file not found or I/O error occurs
3216 Retrieves local paths for reading from a specified directory. @param pathStr directory path as a string @param conf Hadoop configuration object @return Iterable<Path> of readable paths in the directory @throws IOException if directory access fails or configuration is invalid
3217 Constructs an NflyFSystem instance. @param uris array of file system URIs @param conf Hadoop configuration settings @param minReplication minimum number of replicas required @param nflyFlags flags for Nfly system behavior @throws IOException if an I/O error occurs during initialization
3218 Initializes and returns a FileSystem instance with custom settings. @param uris array of file system URIs @param conf Hadoop configuration settings @param settings string containing key-value pairs for customization @param fsGetter FileSystem getter instance @return FileSystem object configured according to the provided settings @throws IOException if an I/O error occurs during initialization or parsing
3219 Expands command arguments into PathData objects. @param args list of file path arguments @return LinkedList of PathData objects @throws IOException on I/O errors during expansion
3220 Masks a delegation token in a specified file. @param tokenFile File containing token information @param fileFormat Serialization format for the token file @param alias Alias to mask the token under (optional) @param service Service associated with the token @param url URL related to the token @param renewer User allowed to renew the token @param conf Hadoop configuration @throws Exception if any operation fails
3221 Masks tokens in a specified file under given aliases. @param tokenFile File containing token information @param fileFormat Serialization format ("PB" for PROTOBUF) @param alias Alias to mask the token with @param service Service associated with the token @param conf Hadoop configuration @throws Exception if operations fail
3222 Masks tokens in multiple files. @param tokenFiles list of token files to process @param fileFormat serialization format for output @param conf Hadoop configuration @throws IOException if I/O operations fail
3223 Masks or cancels tokens in a credential file. @param cancel true to cancel tokens, false to mask @param tokenFile file containing credentials @param fileFormat serialization format ("PB" for PROTOBUF) @param alias service alias text @param conf Hadoop configuration @throws IOException if I/O operations fail @throws InterruptedException if operation is interrupted
3224 Renews delegation tokens in a specified file. @param tokenFile File containing token data @param fileFormat Serialization format of the credentials file ("PB" for PROTOBUF) @param alias Service alias text or null to match any alias @param conf Hadoop configuration object @throws IOException if I/O operations fail @throws InterruptedException if operation is interrupted
3225 Masks a token in the specified file. @param tokenFile File containing token information @param fileFormat Serialization format for credentials ("PB" for PROTOBUF) @param alias Alias for masking the token (optional) @param base64 Base64-encoded string of the token's value @param conf Hadoop configuration object @throws IOException if I/O operations fail
3226 Finds JAR files in a directory using local file context. @param path file system path as a string @return list of Path objects representing JAR files
3227 Deprecated constructor for creating an RPC Server. @param instance implementation of the protocol @param conf Hadoop configuration settings @param bindAddress address to bind the server @param port server port number @throws IOException if initialization fails
3228 Processes incoming RPC request data. @param bb ByteBuffer containing the request data @throws IOException if an I/O error occurs @throws InterruptedException if thread is interrupted
3229 Connects to a specified URL, reads log level responses, and processes lines containing a marker. @param urlString target URL for connection @throws Exception on connection or reading issues
3230 Moves file from local to distributed file system. @param fsOutputFile destination Path in distributed FS @param tmpLocalFile source Path in local FS
3231 Copies a file or directory from source to destination. Handles checksum copying if enabled. @param src source path @param dst destination path @param copyCrc flag to indicate if checksum should be copied @throws IOException if an I/O error occurs
3232 Allocates a local file path for writing with write permission check. @param pathStr requested file path @param size required file size or SIZE_UNKNOWN for any size @param conf Hadoop configuration object @return allocated Path object @throws IOException on disk error or insufficient space
3233 Allocates a temporary file for writing. @param pathStr requested file path @param size required file size or SIZE_UNKNOWN for any size @param conf Hadoop configuration object @return File object representing the allocated file @throws IOException on disk error or insufficient space
3234 Processes and expands command-line arguments. @param args LinkedList of file path arguments @throws IOException on I/O errors during processing or expansion
3235 Creates a SequenceFile writer with specified configuration and options. @param conf Hadoop Configuration object @param opts additional options for the writer @return Writer instance based on compression type @throws IOException if an I/O error occurs during setup
3236 Masks and processes input class path entries. @param inputClassPath original class path string @param pwd working directory path @param targetDir target directory for processing @param callerEnv environment variables map @return array containing processed JAR path and unexpanded wildcard paths @throws IOException if an I/O error occurs during processing
3237 Masks and processes file paths, handling wildcards. @param files comma-separated list of file paths @param expandWildcard flag to enable wildcard expansion @return masked and processed file paths as a single string @throws IOException if an I/O error occurs
3238 Processes incoming RPC data and handles authentication. @return count of processed bytes or -1 on error @throws IOException if I/O error occurs @throws InterruptedException if thread is interrupted
3239 Processes incoming RPC data through SASL server and handles request processing. @param inBuf input buffer containing the data to be processed @throws IOException if an I/O error occurs during processing @throws InterruptedException if thread is interrupted while processing
3240 Sets log level for a specified class. @throws Exception on connection or processing issues
3241 Sets log level for a specified class. @throws Exception on operation failure
3242 Creates a KeyProvider for the specified URI and configuration. @param providerUri URI of the KMS service @param conf Hadoop configuration settings @return KeyProvider instance or null if scheme is not supported @throws IOException if there's an issue parsing the URI or creating providers
3243 Moves file from local to distributed file system. @param fsOutputFile destination Path in distributed FS @param tmpLocalFile source Path in local FS
3244 Creates a temporary file for writing. @param pathStr requested file path @param size required file size or SIZE_UNKNOWN for any size @param conf Hadoop configuration object @return created File object @throws IOException on disk error or insufficient space
3245 Allocates a local file path for writing. @param pathStr requested file path @param conf Hadoop configuration object @return allocated Path object @throws IOException on disk error or insufficient space
3246 Processes command-line arguments and executes file system operations. @param argv command-line arguments @return exit code indicating success or failure
3247 Initializes a new Reader to access an ArrayFile. @param fs FileSystem instance @param file path to the ArrayFile @param conf Hadoop configuration @throws IOException if initialization fails
3248 Initializes a SequenceFile reader. @param fs filesystem to read from @param dirName directory name containing the SequenceFile @param comparator key comparator for sorting @param conf Hadoop configuration @throws IOException if initialization fails or I/O error occurs
3249 Deprecated constructor for initializing a Reader. @param fs FileSystem instance (unused) @param dirName directory name of the MapFile @param conf Hadoop configuration @throws IOException if initialization fails or I/O error occurs
3250 Creates a Reader for a MapFile directory. @param fs FileSystem instance @param dirName path to the MapFile directory @param comparator WritableComparator for key comparison @param conf Hadoop configuration @throws IOException if initialization fails or I/O error occurs
3251 Initializes a SequenceFile writer for sorting and merging. @param inputFile path to the input SequenceFile @param outputFile path to the output SequenceFile @param prog Progressable object for tracking progress @return Writer instance configured for writing sorted data @throws IOException if an I/O error occurs during setup
3252 Fixes missing indexes in a MapFile directory. @param fs FileSystem instance for file operations @param dir Path to the MapFile directory @param keyClass Class of the keys in the SequenceFile @param valueClass Class of the values in the SequenceFile @param dryrun true if running in dry mode, false otherwise @param conf Hadoop Configuration object @return Number of entries processed or -1 if index already exists @throws Exception if an error occurs during processing
3253 Creates a SequenceFile writer for the specified file system and path. @param fs FileSystem instance @param conf Hadoop Configuration object @param name Path where the SequenceFile will be created @param keyClass Class type for keys in the SequenceFile @param valClass Class type for values in the SequenceFile @return Writer instance configured with specified parameters @throws IOException if an I/O error occurs during writer creation
3254 Creates a SequenceFile writer with specified configuration and options. @param fs FileSystem instance @param conf Hadoop Configuration object @param name file path for the SequenceFile @param keyClass class type for keys @param valClass class type for values @param compressionType compression type for the file @return Writer instance configured with given parameters @throws IOException if an I/O error occurs during setup
3255 Creates a SequenceFile writer for specified parameters. @param fs FileSystem instance @param conf Hadoop Configuration object @param name file path for the SequenceFile @param keyClass class type for keys @param valClass class type for values @param compressionType compression type to use @param progress Progressable object for tracking progress @return Writer instance configured with provided parameters @throws IOException if an I/O error occurs during setup
3256 Creates a SequenceFile writer with specified configuration and options. @param fs FileSystem object @param conf Hadoop Configuration object @param name file path for the SequenceFile @param keyClass class type for keys @param valClass class type for values @param compressionType compression type to use @param codec compression codec, defaults to DefaultCodec if none specified and type is not NONE @return Writer instance based on configuration @throws IOException if an I/O error occurs during setup
3257 Creates a SequenceFile writer with specified options. @param fs FileSystem instance @param conf Hadoop Configuration object @param name Path for the SequenceFile @param keyClass Class type for keys @param valClass Class type for values @param compressionType Compression type for file @param codec Compression codec, defaults to DefaultCodec if none specified and type is not NONE @param progress Progressable object to monitor progress @param metadata Metadata to include in the file @return Writer instance configured with provided options @throws IOException if an I/O error occurs during setup
3258 Creates a SequenceFile writer with specified configurations. @param fs FileSystem instance for file operations @param conf Hadoop Configuration object @param name Path to the SequenceFile @param keyClass Class type for keys @param valClass Class type for values @param bufferSize Buffer size for writing @param replication Replication factor for the file @param blockSize Block size in bytes @param compressionType Compression type for the file @param codec Compression codec to use @param progress Progressable object for tracking progress @param metadata Metadata for the SequenceFile @return Writer instance configured with specified options @throws IOException if an I/O error occurs during setup
3259 Creates a SequenceFile writer with specified configuration and options. @param fs FileSystem object for the file system @param conf Hadoop Configuration object @param name Path to the SequenceFile @param keyClass Key class type @param valClass Value class type @param compressionType Type of compression to use @param codec Compression codec, defaults if null and compressionType not NONE @param progress Progressable for tracking file operations @return Writer instance configured with the provided parameters @throws IOException if an I/O error occurs during setup
3260 Creates a SequenceFile writer with specified configuration and options. @param conf Hadoop Configuration object @param out FSDataOutputStream for writing the file @param keyClass class type for keys @param valClass class type for values @param compressionType type of compression to use @param codec compression codec, defaults to DefaultCodec if none specified and type is not NONE @param metadata additional metadata for the SequenceFile @return Writer instance configured with provided parameters @throws IOException if an I/O error occurs during setup
3261 Creates a SequenceFile writer with specified configuration and options. @param conf Hadoop Configuration object @param out FSDataOutputStream for the file @param keyClass class type for keys @param valClass class type for values @param compressionType type of compression to use @param codec compression codec, defaults if null and type is not NONE @return Writer instance configured with specified parameters @throws IOException if an I/O error occurs during setup
3262 Validates and processes file paths without wildcard expansion. @param files comma-separated list of file paths @return masked and processed file paths as a single string @throws IOException if an I/O error occurs
3263 Handles log level operations based on the command. @throws HadoopIllegalArgumentException if operation is not recognized @throws Exception on connection or processing issues
3264 Creates a temporary data block for writing. @param index unique identifier of the data block @param limit maximum size of the data block @param statistics upload statistics for monitoring @return DataBlock instance for file operations @throws IOException on disk error or insufficient space
3265 Allocates a temporary file path for caching. @param conf Hadoop configuration object @param localDirAllocator allocator for local directories @return Path to the allocated temporary file @throws IOException on disk error or insufficient space
3266 Executes a command with given arguments. @param argv command-line arguments @return exit code indicating success or failure
3267 Deprecated constructor for initializing a Reader. @param fs FileSystem instance (unused) @param dirName directory name of the MapFile @param conf Hadoop configuration @throws IOException if initialization fails or I/O error occurs
3268 Merges sorted segments into a single output file. @return RawKeyValueIterator for merged data @throws IOException if an I/O error occurs during merging
3269 Initializes a SequenceFile Writer for Hadoop. @param conf Hadoop Configuration object @param fs FileSystem instance @param dirName directory path for the SequenceFile @param comparator WritableComparator for key sorting @param compress Compression type for the file @throws IOException if an I/O error occurs during setup
3270 Initializes a new Writer for writing Writable objects to a Hadoop file. @param conf Hadoop configuration settings @param fs FileSystem instance representing the distributed file system @param file Path to the output file @param valClass Class of the Writable value type to be written @throws IOException if an I/O error occurs during initialization
3271 Initializes a new Writer for Hadoop file I/O. @param conf configuration settings for the writer @param fs FileSystem instance to write to @param file path of the target file @param valClass class type of Writable values @param compress compression type for data @param progress Progressable object for tracking progress @throws IOException if an I/O error occurs during initialization
3272 Deprecated constructor for Writer. Initializes a MapFile writer with specified configuration and directory. @param conf Hadoop Configuration object @param fs FileSystem instance @param dirName directory path for the MapFile @param keyClass key class type @param valClass value class type @throws IOException if an I/O error occurs during setup
3273 Initializes a MapFile Writer with specified configurations. @param conf Hadoop Configuration object @param fs FileSystem instance @param dirName directory path for the MapFile @param keyClass class type of keys in the MapFile @param valClass class type of values in the MapFile @param compress compression type to apply @param progress Progressable object for monitoring progress @throws IOException if an I/O error occurs during setup
3274 Deprecated constructor for creating a MapFile Writer. @param conf Hadoop Configuration object @param fs FileSystem instance @param dirName directory path for the MapFile @param keyClass class type for keys in the MapFile @param valClass class type for values in the MapFile @param compress compression type to use @param codec compression codec, defaults to DefaultCodec if none specified and compress is not NONE @param progress Progressable object to monitor progress @throws IOException if an I/O error occurs during setup
3275 Deprecated constructor for creating a MapFile Writer. @param conf Hadoop Configuration object @param fs FileSystem instance @param dirName directory path for the MapFile @param keyClass class type for keys @param valClass class type for values @param compress compression type @throws IOException if an I/O error occurs during setup
3276 Deprecated constructor for Writer. Initializes a MapFile writer. @param conf Hadoop Configuration object @param fs FileSystem instance @param dirName directory path for the MapFile @param comparator WritableComparator for key comparison @param valClass class type for values @throws IOException if an I/O error occurs during setup
3277 Deprecated constructor for creating a MapFile Writer. @param conf Hadoop Configuration object @param fs FileSystem instance @param dirName directory path for the MapFile @param comparator WritableComparator for key comparison @param valClass class type for values @param compress compression type for the file @throws IOException if an I/O error occurs during setup
3278 Deprecated constructor for creating a MapFile Writer. Initializes with specified configuration, file system, directory, comparator, value class, compression type, and progress tracker. @param conf Hadoop Configuration object @param fs FileSystem instance @param dirName directory path for the MapFile @param comparator WritableComparator for key comparison @param valClass class type for values @param compress CompressionType for data compression @param progress Progressable object to monitor progress @throws IOException if an I/O error occurs during setup
3279 Initializes a MapFile Writer. @param conf Hadoop Configuration object @param fs FileSystem instance @param dirName directory path for the MapFile @param comparator WritableComparator for key ordering @param valClass value class type @param compress compression type for the file @param codec compression codec, optional @param progress Progressable object to track progress @throws IOException if an I/O error occurs during setup
3280 Creates a SequenceFile writer with specified configuration and options. @param fc FileContext for file system operations @param conf Hadoop Configuration object @param name path to the SequenceFile @param keyClass class type for keys @param valClass class type for values @param compressionType type of compression to use @param codec compression codec, defaults to DefaultCodec if none specified and type is not NONE @param metadata additional metadata for the SequenceFile @param createFlag flags for creating or opening the file @param opts additional options for creation @return Writer instance configured with provided parameters @throws IOException if an I/O error occurs during setup
3281 Parses command-line arguments and processes classpath options. @param args list of command-line arguments
3282 Creates a ClassLoader for executing JAR files. @param file the JAR file to be executed @param workDir working directory for classpath elements @return configured ClassLoader for the JAR execution @throws MalformedURLException if malformed URLs are encountered
3283 Parses and processes command-line options for Hadoop. Handles file system, job tracker, configuration files, properties, library JARs, and security tokens. Updates configuration accordingly. @param line CommandLine object containing parsed command-line arguments @throws IOException if I/O operations fail during processing
3284 Generates a temporary file path for caching. @param conf Hadoop configuration object @param localDirAllocator allocator for local directories @return Path to the allocated temporary file @throws IOException on disk error or insufficient space
3285 Checks if sufficient cache space is available for a file. @param fileSize size of the file to be cached @param conf Hadoop configuration object @param localDirAllocator allocator for local directories @return true if cache has enough space, false otherwise
3286 Initializes and executes a merge operation on given segments. @param segments list of segment descriptors to be merged @param tmpDir temporary directory for intermediate files @return RawKeyValueIterator for the merged data @throws IOException if an I/O error occurs during merging
3287 Merges multiple input files into a single output iterator. @param inNames array of input file paths @param deleteInputs flag to delete input files after processing @param factor merge factor @param tmpDir temporary directory for intermediate files @return RawKeyValueIterator for merged data @throws IOException if an I/O error occurs during merging
3288 Merges multiple input files into a single output file. @param inNames array of input file paths @param tempDir temporary directory for intermediate files @param deleteInputs flag to delete input files after merging @return RawKeyValueIterator for merged data @throws IOException if an I/O error occurs during merging
3289 Merges sorted segments from a SequenceFile. @param inName input file path @param indexIn index file path @param tmpDir temporary directory for intermediate files @return iterator over merged key-value pairs @throws IOException if an I/O error occurs during merging
3290 Initializes a SequenceFile Writer for Hadoop. @param conf Hadoop Configuration object @param fs FileSystem instance @param dirName directory path for the SequenceFile @param keyClass class of keys to be written @param compress Compression type for the file @throws IOException if an I/O error occurs during setup
3291 Initializes a SequenceFile writer. @param fs FileSystem instance @param dirName directory path for the SequenceFile @param keyClass key class type @throws IOException if an I/O error occurs during setup
3292 Merges input map files into a single output file. @param inMapFiles array of input map file paths @param deleteInputs flag to delete original input files after merging @param outMapFile path for the merged output map file @throws IOException if an I/O error occurs during processing
3293 Creates a SequenceFile writer with specified configurations. @param fs FileSystem instance for file operations @param conf Hadoop Configuration object @param name path to the SequenceFile @param keyClass class type for keys @param valClass class type for values @param bufferSize buffer size for writing @param replication replication factor for file blocks @param blockSize block size for file storage @param createParent flag to create parent directories if needed @param compressionType type of compression to use @param codec compression codec, defaults to DefaultCodec if none specified and type is not NONE @param metadata additional metadata for the SequenceFile @return Writer instance configured with provided parameters @throws IOException if an I/O error occurs during setup
3294 Masks and parses command-line arguments for Hadoop. @param opts Options object to configure @param args original command-line arguments @return true if parsing is successful, false otherwise @throws IOException if I/O operations fail during processing
3295 Handles caching of a file block. @param blockNumber unique identifier of the file block @param buffer data buffer containing block content @param conf Hadoop configuration object @param localDirAllocator allocator for local directories @throws IOException on I/O errors or invalid state
3296 Merges input files into a single output iterator. @param inNames array of input file paths @param deleteInputs flag to delete input files after processing @param tmpDir temporary directory for intermediate files @return RawKeyValueIterator for merged data @throws IOException if an I/O error occurs during merging
3297 Executes a merge pass for sorted key-value pairs. @param tmpDir temporary directory for intermediate files @return 0 on success @throws IOException if an I/O error occurs during processing
3298 Executes a JAR file with specified arguments. @param args command-line arguments including the JAR file and main class @throws Throwable if execution fails
3299 Initializes and parses command-line options. @param conf Configuration object for Hadoop @param options Command-line options to be parsed @param args Array of original command-line arguments @throws IOException if I/O operations fail during parsing
3300 Merges input files into a single output iterator. @param inFiles array of input file paths @param tempDir temporary directory for intermediate files @param deleteInput flag to delete input files after processing @return RawKeyValueIterator for merged data or null if no segments @throws IOException if I/O error occurs during merging
3301 Sorts and merges input files into a single output file. @param inFiles array of input file paths @param outFile path to the output file @throws IOException if an I/O error occurs during processing
3302 Sorts and merges input files into an output file. @param inFiles array of input file paths @param outFile path for the output file @param deleteInput flag to delete input files after processing @throws IOException if I/O error occurs during sorting or merging
3303 Constructs a parser with default Hadoop configuration. @param opts Command-line options to be parsed @param args Array of original command-line arguments @throws IOException if I/O operations fail during parsing
3304 Parses command-line options using default configuration and options. @param args Array of original command-line arguments @throws IOException if I/O operations fail during parsing
3305 Parses command-line options using default Hadoop configuration. @param conf Hadoop configuration object @param args Command-line arguments array @throws IOException if I/O operations fail during parsing
3306 Sorts and merges a single input file into an output file. @param inFile path to the input file @param outFile path for the output file @throws IOException if I/O error occurs during sorting or merging
3307 Initializes and returns a parser for generic options. @param conf Configuration object for Hadoop settings @param argArray Array of original command-line arguments @return GenericOptionsParser instance @throws IOException if I/O operations fail during parsing
3308 Executes a Hadoop tool with command-line arguments. @param conf Hadoop configuration object @param tool Tool to be executed @param args Command-line arguments array @return Exit status code from the tool execution
3309 Masks and processes command-line arguments for service launch. @param conf Hadoop configuration object @param args list of original command-line arguments @return list of remaining arguments after processing
3310 Executes Kerberos diagnostics with given configuration and arguments. @param conf Hadoop configuration object @param argv Command-line arguments array @return Exit status code from the diagnostic tool execution
3311 Executes CredentialShell tool with command-line arguments. @param args Command-line arguments for the tool @throws Exception if an error occurs during execution
3312 Executes key management commands. @param args command-line arguments for key operations @throws Exception if execution fails
3313 Executes a Hadoop tool with command-line arguments. @param tool Tool to be executed @param args Command-line arguments array @return Exit status code from the tool execution
3314 Masks and processes command-line arguments for service launch. @param conf Hadoop configuration object @param args list of original command-line arguments @return list of remaining arguments after processing
3315 Executes Kerberos diagnostics with provided arguments. Handles exceptions and logs errors appropriately.
3316 Executes Hadoop file system commands from the command line. @param argv command-line arguments array @throws Exception if an error occurs during execution
3317 Executes the LogLevel tool with command-line arguments. @param args Command-line arguments for the tool
3318 Executes the FindClass tool with command-line arguments. @param args Command-line arguments for the tool
3319 Launches a service with provided arguments. @param args list of command-line arguments
3320 Parses command-line arguments and launches Hadoop service. @param args command-line arguments array
3321 Launches Hadoop services with provided arguments. @param args variable number of command-line arguments
