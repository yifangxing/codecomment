1 Creates a FileRange with the given offset and length. @param offset Starting byte offset in the file. @param length Number of bytes in the range. @return A FileRange object.
2 Creates a FileRangeImpl with given offset, length, and reference.
3 Validates a FileRange, throwing exceptions for null, negative length, or negative position.
4 Checks if the object is null; throws exception if null. @param obj The object to check. @param argName Name of the argument being validated.
5 Validates that value is positive. @param value value to validate @param argName name of the argument
6 Checks if value is non-negative. Throws IAE if negative. @param value value to check @param argName name of the argument
7 Validates if a value is present, throws exception if not. @param isPresent True if value is present, false otherwise. @param argName Name of the argument being validated.
8 Validates a boolean argument and throws exception on failure. @param isValid boolean value to validate @param argName name of the argument being validated
9 Validates a boolean and throws exception if false. @param isValid boolean to validate @param argName name of the argument @param validValues valid values for the argument
10 Checks if two long values are equal, throwing exception if not. @param value1 First long value. @param value1Name Name of the first value. @param value2 Second long value. @param value2Name Name of the second value.
11 Checks if value1 is an integer multiple of value2. @param value1 First value. @param value1Name Name of the first value. @param value2 Second value. @param value2Name Name of the second value.
12 Checks if value1 is greater than value2, throws exception if not. @param value1 First value. @param value1Name Name of the first value. @param value2 Second value. @param value2Name Name of the second value.
13 Checks if value1 is greater than or equal to value2. @param value1 First value. @param value1Name Name of the first value. @param value2 Second value. @param value2Name Name of the second value.
14 Checks if value1 is less than or equal to value2. @param value1 First value to compare. @param value1Name Name of the first value. @param value2 Second value to compare. @param value2Name Name of the second value.
15 Validates that value is within the specified inclusive range. @param value The value to validate. @param valueName Name of the value being validated. @param minValueInclusive Lower bound of the range. @param maxValueInclusive Upper bound of the range.
16 Validates that a value falls within a specified inclusive range. @param value Value to validate. @param valueName Name of the value being validated. @param minValueInclusive Minimum allowed value. @param maxValueInclusive Maximum allowed value.
17 Validates paths for bulk deletion, ensuring they are absolute and under the base path, with pagination.
18 Initializes BlockUploadData with a file. @param file The file to upload; must exist.
19 Casts a Serializable object to IOStatisticsSnapshot. @param snapshot The object to cast. @return The casted IOStatisticsSnapshot.
20 Creates a map of lowercase enum names to enum constants. @param prefix Prefix to prepend to enum names. @param enumClass Enum class to map. @return Map of lowercase enum names to enum constants.
21 Converts a list of FileRange objects to a FileRange array. @param input List of FileRange objects to convert. @return FileRange array representation of the input list.
22 Checks if a child path is within a parent path. @param parent The parent path. @param child The child path to check.
23 Checks if paths share a scheme and authority, but not detailed paths. @param qualPath1 First path object @param qualPath2 Second path object @return True if paths share scheme and authority.
24 Attempts to delete a file. Returns false if file doesn't exist. @param f the path to delete @throws IOException if an I/O error occurs
25 Deletes files marked for deletion, ignoring IO exceptions.
26 Checks if the file name ends with ".crc". @param file Path object representing the file. @return True if file name ends with ".crc", false otherwise.
27 Checks if a file name ends with ".crc". @param file Path object representing the file. @return True if the file name ends with ".crc", false otherwise.
28 Adjusts BlockLocation ranges based on file offset and length. @param locations BlockLocation array to adjust.
29 Compares this FileStatus with another. @param o The other FileStatus object to compare to. @return An integer indicating the comparison result.
30 Converts FileStatus array to Path array. @param stats array of FileStatus objects @return array of Path objects corresponding to the input
31 Resolves a symbolic link to its target path. @param f The Path object representing the symbolic link. @return The resolved Path object.
32 Gets the block replication factor for a given path. @param src The path to get the replication factor for. @return The replication factor.
33 Gets the block size of a file. @param f Path to the file. @return The block size of the file.
34 Returns a deprecated mask value. Returns 1.
35 Adds statistics data to the root and all data accumulators.
36 Validates read parameters: position, buffer, offset, length. @param position byte offset from the beginning of the file @param buffer byte array to read into @param offset offset into the buffer @param length number of bytes to read
37 Validates the provided upload ID. @param uploadId The upload identifier as a byte array. @throws IllegalArgumentException if uploadId is invalid.
38 Validates part handles and checks for invalid indices. @param partHandles Map of part handles, must not be empty.
39 Validates and normalizes the capability string. @param path Path object (unused) @param capability Capability string to normalize
40 Constructs an IrqHandler with a name and associated handler. @param name handler name @param handler interrupted handler
41 Partitions a list into sublists of specified page size. @param originalList list to partition @param pageSize size of each sublist @return list of sublists
42 Constructs a JsonSerialization instance. @param classType Class to serialize/deserialize. @param failOnUnknownProperties Whether to fail on unknown props. @param pretty Whether to pretty-print JSON output.
43 Constructs StorageStatisticsFromIOStatistics with name, scheme, and IOStats. @param name Statistics name. @param scheme Scheme. @param ioStatistics IO statistics.
44 Creates a map of statistics, transferring data from statisticsTable. @return A map containing statistics.
45 Creates an FSDataOutputStream. @param f Path of the file @param permission File permissions @return FSDataOutputStream
46 Creates a data output stream for writing to a file. @param f Path to the file. @param permission File permissions.
47 Constructs a PathAccessDeniedException with the given path. @param path The file path that caused the exception.
48 Constructs a PathPermissionException with the given file path. @param path The file path that caused the permission exception.
49 Constructs a PathNotFoundException for a missing file path. @param path The path that was not found.
50 Constructs PathExistsException with given path, "File exists" as message. @param path The file path that exists.
51 Constructs a PathIOException with the given path and default error. @param path The file path that caused the exception.
52 Constructs a ClosedIOException with the given path and message. @param path The file path. @param message The error message.
53 Returns a masked builder instance. Used for internal operations.
54 Returns the permission mask value. @return short representing the permission mask
55 Converts the internal representation to an octal permission mask.
56 Masks each string in the array using weak interning. @param strings Array of strings to mask. @return Masked string array.
57 Returns the result of calling the internal method m1.
58 Checks if a file exists and is a directory. @param f The Path object representing the file to check. @return True if the file exists and is a directory.
59 Checks if the path data item represents a directory. @param item PathData object to check. @return True if it's a directory, false otherwise.
60 Returns ACL entries based on internal state; uses PathData.
61 Checks if path exists and is a directory. @param f Path to check. @return True if path exists and is a directory.
62 Calculates a permission mask for a FileStatus, considering directory status. @param file The FileStatus to determine permissions for.
63 Checks if the FileStatus is neither a symlink nor a directory.
64 Returns the path pointed to by the symbolic link. Throws IOException if not a symbolic link.
65 Gets the file length. Caches the length if not already known.
66 Returns the length of the file or directory at the given path. @param f Path to the file or directory. @return Length in bytes.
67 Retrieves the BlockStoragePolicy for a given path. @param src The path for which the policy is requested. @throws IOException if an I/O error occurs.
68 Sets an XAttr on a path. Throws UnsupportedOperationException. @param path Path for the file. @param name XAttr name. @param value XAttr value.
69 Constructs PathIOException with path, error, and cause. @param path The file path. @param cause The underlying Throwable cause.
70 Seeks to a specific position in the input stream. @param position The offset to seek to.
71 Reads the next record length, handling synchronization checks. @return Record length or -1 if at end. @throws IOException If file is corrupt or I/O error occurs.
72 Delegates seek operation to the input stream. @return The new seek position. @throws IOException If an I/O error occurs.
73 Registers an expression class. @param expressionClass Class to register.
74 Registers commands using a provided registrar class. @param registrarClass Class responsible for command registration.
75 Reads up to length bytes from the stream, adjusting length if needed. @param pos offset in stream @param b buffer to read into @param offset offset in buffer @param length number of bytes to read @return number of bytes read
76 Reads bytes from the stream at specified position. @param pos Offset in stream. @param b Buffer to read into. @param offset Offset in buffer. @param length Number of bytes to read.
77 Expands a file pattern with curly brace expansions. @param filePatternWithOffset Pattern to expand, with offset. @return List of expanded StringWithOffset objects.
78 Retrieves directory entries for a given path. @param f The path to the directory. @param token Pagination token (unused). @return DirectoryEntries object.
79 Converts byte array to string based on encoding. @param value Byte array to convert. @param encoding Encoding type (HEX, BASE64, etc.) @return String representation of the byte array.
80 Filters file statuses based on a provided filter. @param results Accumulates matching FileStatus objects. @param f The path to list. @param filter Filter to apply to each status.
81 Constructs a MetricsTag with provided info and value. @param info MetricsInfo object; cannot be null. @param value The tag value.
82 Constructs an AbstractMetric with provided MetricsInfo. @param info MetricsInfo object; must not be null.
83 Renews a delegation token and updates the provided token object. @param url URL for renewal request. @param token The token to update.
84 Obtains a delegation token authentication ticket. @param url URL to authenticate. @param token Token containing delegation token. @param doAsUser User to act on behalf of. @return Authentication ticket.
85 Delegates URL access using a delegation token and user. @param url URL to access. @param token Token containing the delegation token. @param doAsUser User to act on behalf of.
86 Constructs a ValueQueue with specified parameters. @param numValues Initial queue size. @param lowWatermark Low watermark for queue refill.
87 Returns the object if not null; otherwise, throws NullPointerException. @param obj The object to check.
88 Retrieves StorageStatistics by name, creating if necessary. @param name Statistics name. @param provider Provider for creating statistics.
89 Resets global storage statistics via the singleton instance.
90 Closes the upload stream and deletes the associated file. @throws IOException if an I/O error occurs during cleanup.
91 Copies a file from src to dst, using native code if available. @param src Source file. @param dst Destination file.
92 Closes the provided stream, using a helper method for cleanup. @param stream The Closeable stream to close.
93 Closes an array of Closeable resources, using a helper method. @param streams Array of Closeable resources to close.
94 Writes a single byte to a file and attempts deletion. @param file The file to write to and attempt to delete. @throws IOException If writing or deletion fails.
95 Writes data and flushes the output stream. Delegates to m1() and fos.m2().m3() for the operation.
96 Tracks IO operation duration; updates statistics based on success/failure. @param key Operation key; used for naming statistics.
97 Updates buffer count and returns the old count. @param newCount The new buffer count (0 <= newCount <= buf.length) @return The previous buffer count.
98 Gets the InetSocketAddress for a connector at the given index. @param index index of the connector @return InetSocketAddress or null if not found/invalid
99 Constructs a GcTimeMonitor with specified observation window, interval, max GC time, and alert handler, validating input parameters.
100 Extracts URL path for servlet, throws exception if invalid. @param request HTTP request object @param servletName Servlet name @return URL path string
101 Checks if this FileStatus object is equal to another. @param o Object to compare; must be a FileStatus. @return True if equal, false otherwise.
102 Delegates to the underlying URI's m2() method.
103 Updates sample count and sum. @param sampleCount New sample count. @param newSum New sum value.
104 Copies data from another MeanStatistic instance. Returns this instance if the other is empty.
105 Appends formatted map entries to StringBuilder, separated by separator. @param sb StringBuilder to append to @param type Type string @param map Map of string keys and generic values @param separator Separator string
106 Formats an entry's key and value into a string. @param entry Map.Entry with key and value to format @return Formatted string representation of the entry
107 Creates a DurationTracker instance using a key and count. @param key Identifier for tracking duration. @param count Number of times to track duration.
108 Creates a LongStatistic from a map entry's key and value.
109 Constructs an empty map using the passthrough function for key copying.
110 Adds an evaluation function for a given key. @param key Key for the evaluation. @param eval Function to evaluate.
111 Adds a gauge statistic with a given key and evaluation function. @param key Gauge key. @param eval Function to evaluate the gauge value.
112 Adds an evaluator for a given key to the minimums map. @param key Key for the evaluation. @param eval Function to evaluate.
113 Adds a maximum evaluation function for a given key. @param key Key for the maximum evaluation. @param eval Function to calculate the maximum.
114 Adds a mean statistic evaluator for a given key. @param key Key for the mean statistic. @param eval Function to calculate the mean.
115 Wraps IOStatistics in a SourceWrappedStatistics. @param statistics The IOStatistics to wrap. @return A SourceWrappedStatistics instance.
116 Returns the singleton EmptyIOStatisticsStore instance.
117 Returns an empty IOStatistics object.
118 Retrieves a counter from the counter map. @param key the key for the counter @return AtomicLong representing the counter value
119 Retrieves the maximum value associated with the given key. @param key Key to look up in the maximumMap. @return AtomicLong representing the maximum value.
120 Retrieves an AtomicLong value associated with the given key.
121 Retrieves a gauge value by key. @param key The key for the gauge value. @return AtomicLong representing the gauge value.
122 Retrieves the mean statistic for the given key. @param key Key to identify the mean statistic. @return MeanStatistic object or null if not found.
123 Returns the duration from the first duration tracker.
124 Sets the wrapped IOStatistics instance. @param wrapped The IOStatistics to wrap; must be non-null.
125 Returns the singleton DynamicIOStatistics instance. @throws IllegalStateException if already built.
126 Throws exception if the FlagSet is immutable.
127 Returns the block data as a byte array. Reads from file or stream if available. @return byte array containing the block data @throws IOException if an I/O error occurs
128 Binds a signal handler for the signal name. @throws IllegalArgumentException if handler is already bound.
129 Checks if the resource is closed based on its status. @return True if the resource is closed, false otherwise.
130 Copies entries from source map to dest, applying copyFn. @param source Source map to copy from. @param copyFn Function to apply to values during copy. @return A ConcurrentHashMap containing copied entries.
131 Executes a CallableRaisingIOE with duration tracking. @param factory DurationTrackerFactory @param statistic Statistic name @param input CallableRaisingIOE @return Result of the CallableRaisingIOE
132 Creates a PairedDurationTrackerFactory with two trackers. @param first The first DurationTrackerFactory. @param second The second DurationTrackerFactory.
133 Returns the backoff time for disconnected RPC clients.
134 Returns the count of slow RPC calls.
135 Returns the number of RPC requeue calls.
136 Clears IO statistics for the current context, resetting all counters.
137 Constructs a new IOStatisticsSnapshot, initializing internal maps.
138 Checks if thread I/O statistics tracking is enabled.
139 Initializes a new BuiltInGzipDecompressor instance. Sets initial state and resets the CRC checksum.
140 Updates internal state based on stream offset and codec.
141 Adjusts buffer size to be a multiple of the codec's block size. @param codec The codec to use for block size. @param bufferSize The initial buffer size.
142 Creates a hard link from src to dst, using native code if available.
143 Constructs a checksum object with given parameters. @param bytesPerCRC CRC bytes per checksum. @param crcPerBlock CRC bytes per block. @param md5 The MD5 hash object.
144 Constructs a default MD5MD5CRC32FileChecksum object.
145 Constructs a checksum object with given parameters. @param bytesPerCRC CRC bytes per checksum. @param crcPerBlock CRC bytes per block. @param md5 The MD5 hash object.
146 Converts a glob pattern to a regex pattern. @param glob The glob pattern to convert.
147 Lists status of files/directories under the given path. @param f The path to list contents of. @return RemoteIterator of FileStatus objects.
148 Gets file path. Uses canonical path if specified. @param file The file object. @param makeCanonicalPath Whether to use canonical path.
149 Calculates PosixFilePermissions based on the provided mode. @param mode Integer representing file mode @return Set of PosixFilePermissions
150 Validates command entries and executes the shell command. Throws IOException if any command entry is null.
151 Checks command length against Windows limit. @param commands Array of commands to check. @throws IOException if command length exceeds limit.
152 Generates a PowerShell script to terminate a process on a host. @param processName Process name to terminate. @param host Hostname where the process runs. @return PowerShell script string or null on failure.
153 Delegates to the sum's m1 method and returns the result.
154 Calculates a value based on data size and checksum size. @param dataSize size of the data @return calculated value
155 Converts checksum value to bytes. @param sum Checksum object to convert. @param checksumSize Size of the byte array. @return Byte array representing the checksum.
156 Increments the total bytes read by the specified amount. @param newBytes The number of bytes to add to the total.
157 Increments the total bytes written by the specified amount. @param newBytes The number of bytes to add to the total.
158 Increments the read operations count by the given amount. @param count The number of read operations to add.
159 Increments the count of large read operations by the given value. @param count The amount to increment the largeReadOps by.
160 Increments the write operations count by the given amount. @param count The number of write operations to add.
161 Updates bytesReadErasureCoded by adding the provided value. @param newBytes The number of bytes to add to the counter.
162 Updates bytes read based on distance. @param distance Distance value to determine byte read category. @param newBytes Number of bytes read.
163 Updates remote read time by adding the given duration. @param durationMS Duration in milliseconds to add.
164 Applies aggregator to root and all data, then returns result.
165 Constructs a ContentSummary from a Builder, initializing its fields. @param builder Builder object containing ContentSummary details.
166 Constructs a ChecksumOpt with default type and size.
167 Creates a ChecksumOpt with NULL type and size -1.
168 Validates CreateFlag options; throws exception if invalid. @param flag EnumSet of CreateFlag values to validate.
169 Validates URI scheme against a supported scheme. @param uri The URI to validate. @param supportedScheme The expected scheme.
170 Constructs an InvalidPathException with the given invalid path. @param path The invalid file system path.
171 Constructs InvalidPathException with path and optional reason. @param path The invalid file path. @param reason Optional reason for the invalid path.
172 Returns the first non-null element from the input array. @param inputs Array of elements to check. @return The first non-null element, or throws exception.
173 Returns the first non-null element from the input array. @param inputs Array of elements to check. @return First non-null element, or throws exception if all null.
174 Validates input buffers, ensuring they are non-null and of correct length. @param buffers Array of byte arrays to validate.
175 Validates input buffers, throwing IllegalArgumentException on failure. @param buffers Array of ByteBuffers to validate.
176 Validates input buffers, ensuring they are non-null and of correct length. @param buffers Array of byte arrays to validate.
177 Validates input buffers, ensuring they are non-null and meet encoding criteria. @param buffers Array of ByteBuffers to validate.
178 Closes a proxy, throwing an exception if it cannot be closed. @param proxy The proxy object to close.
179 Selects checksum options, prioritizing user-defined settings. @param defaultOpt Default checksum options. @param userOpt User-defined checksum options. @param userBytesPerChecksum User-specified bytes per checksum. @return ChecksumOpt object with merged settings.
180 Returns default port, using FS implementation or default.
181 Normalizes a URI, potentially re-parsing it with a mask. @param uri The URI to normalize. @return The normalized URI.
182 Sets the replication factor for a file. @param src The path of the file. @param replication The desired replication factor.
183 Disconnects the FTP client, ensuring proper logout and handling errors.
184 Delegates output stream closing to the underlying stream.
185 Default constructor. Deprecated and provides no functionality.
186 Constructs a ContentSummary with specified metadata values. @param length Total length of content. @param fileCount Number of files. @param directoryCount Number of directories.
187 Calculates time remaining for renewal in specified units. @param unit Time unit (e.g., TimeUnit.SECONDS) @return Remaining time in the given time unit.
188 Calculates the renewal time based on a delay. @param delay Renewal delay in milliseconds.
189 Updates the last activity time to the current time.
190 Sleeps for the specified duration, handling interruptions. @param millis milliseconds to sleep; handles InterruptedException
191 Returns the monotonic time in milliseconds.
192 Awaits termination of all thread pools, up to the given time. @param milliseconds max time to wait, in milliseconds @return true if all executors terminated, false otherwise
193 Validates checksums of data against provided sums. @param sumsBytes Byte buffer containing checksums. @return Data buffer after checksum validation.
194 Opens a file for reading. @param f Path to the file @return FSDataInputStream for reading the file
195 Calculates a mask value for checksum operations. @param file Path to the file. @param fileSize File size in bytes.
196 Returns a dummy FsStatus object; capacity and remaining are max value.
197 Registers Chmod, Chown, and Chgrp commands with the factory. @param factory CommandFactory instance to register commands.
198 Registers the Find class with the CommandFactory. @param factory CommandFactory instance to register with.
199 Registers the Count class with the command factory. @param factory CommandFactory instance to register with.
200 Constructs a CommandFormat with a name, min/max params & options. @param name Command name. @param min Minimum params. @param max Max params.
201 Executes a CallableRaisingIOE asynchronously. @param callable Callable to execute. @return CompletableFuture representing the result.
202 Validates mandatory keys against known keys, adding errors if missing. @param knownKeys Set of known keys. @param extraErrorText Additional error text for error messages.
203 Extracts capability names based on enabled flags.
204 Constructs a masked HTTP referrer header string. Returns an empty string if URI creation fails.
205 Constructs a WeakReferenceMap with a factory and optional referenceLost consumer. @param factory Function to create values for keys. @param referenceLost Consumer called when a key's reference is lost.
206 Checks if the output stream supports the given capability. @param out Output stream to check. @param capability Capability string to verify.
207 Checks if the input stream supports the given capability. @param in Input stream to check. @param capability Capability string to verify.
208 Shuts down the executor service gracefully with a timeout. @param logger Logger for logging shutdown events. @param timeout Timeout duration for graceful shutdown. @param unit TimeUnit of the timeout duration.
209 Acquires a resource, blocking if necessary. Returns resource or null if unavailable/blocking disabled.
210 Acquires a resource non-blockingly. @return Resource object or null if unavailable.
211 Calculates available resources: size - created + items.
212 Constructs a SingleFilePerBlockCache with given parameters. @param prefetchingStatistics Statistics for prefetching. @param maxBlocksCount Maximum number of blocks to cache. @param trackerFactory Factory for creating DurationTrackers.
213 Constructs a SemaphoredDelegatingExecutor with specified limits. @param executorDelegatee Executor to delegate tasks to. @param permitCount Semaphore permit count.
214 Adds an entry to the cache, acquiring and releasing the lock. @param entry The cache entry to add.
215 Verifies checksum, transitions state to DONE, and clears action.
216 Sets the buffer size for the future data input stream. @param bufSize The desired buffer size in bytes. @return The builder instance for chaining.
217 Returns the current builder instance for chaining.
218 Retrieves a value using the current thread ID. @return The retrieved value.
219 Retrieves a value using the thread ID. @return The retrieved value.
220 Updates the value for the current thread; returns the value.
221 Adds a range if it fits within seek and size constraints. @param otherOffset Offset of the range to add. @param otherEnd End of the range to add.
222 Creates a BulkDeleteOperation for deleting files under a path. @param path The path for the bulk delete operation. @return A DefaultBulkDeleteOperation object.
223 Registers And expression classes with the factory. @param factory ExpressionFactory instance to register with
224 Registers Print and Print0 expression classes with the factory. @param factory Expression factory to register classes with.
225 Registers name and iname expression classes with the factory. @param factory Expression factory to register classes with.
226 Constructs a Name object with the given case sensitivity. @param caseSensitive Flag to enable/disable case-sensitive matching.
227 Finds a CompressionCodec for the given file path. @param file The path of the file. @return CompressionCodec or null if not found.
228 Masks a template string using the mode's name. @param mode SSLFactory.Mode to use for masking. @param template Template string to mask.
229 Generates a configuration suffix from the cipher suite name.
230 Combines two Result objects using logical AND. @param other The other Result object to combine with. @return A new Result representing the combined result.
231 Creates a new Result with inverted success and recurse flags.
232 Creates and configures FindOptions with streams and factory. @return FindOptions object with configured streams/factory.
233 Checks if an expression exists. @param expressionName Name of the expression to check.
234 Processes a specified number of expressions from the deque. @param exprs Deque of expressions to process. @param count Number of expressions to process.
235 Processes arguments from a deque a specified number of times. @param args Deque of arguments to process. @param count Number of times to process the arguments.
236 Parses a path string and constructs a URI object. @param pathString The path to parse. @return A URI representing the parsed path.
237 Sets order comparator based on time, size, or default. Uses m1, m2, and m4 to determine sorting logic.
238 Checks if a replacement command exists (not null).
239 Returns a masked name based on conditions. Uses m3 if name is null.
240 Preserves file timestamps, ownership, and permissions if preserve is true.
241 Constructs a MetricsRecordBuilderImpl with provided metrics info, filters, and acceptable flag.
242 Constructs a ChunkedArrayList with given initial capacity and max size. @param initialChunkCapacity Initial capacity of chunks. @param maxChunkSize Maximum size of each chunk.
243 Finds the first default AclEntry in the list. @param aclBuilder List of AclEntry objects to search. @return Index of the first default entry, or PIVOT_NOT_FOUND.
244 Delegates to overloaded method with a null suffix. @param path The path to be processed. @return The path object.
245 Throws exception if option is duplicated; otherwise, adds it. @param option The command-line option to check/add.
246 Creates a TableBuilder with headers. @param headers Array of header values for the table.
247 Checks if the table has no data rows. @return True if the table is empty, false otherwise.
248 Constructs a Shell instance with a specified interval. @param interval execution interval in milliseconds
249 Constructs a Token with identifier, password, kind, and service. Uses default values if any input is null.
250 Default constructor. Initializes a new Token object with empty values.
251 Constructs a Globber with a FileContext, path pattern, filter, and symlink resolution flag.
252 Formats an error message including path, operation, and cause.
253 Retries connection setup with backoff if failed, logs exceptions. @param currRetries Current retry count. @param maxRetries Max retry attempts.
254 Checks if the FileSystem uses the ViewFS scheme. @param fileSystem The FileSystem instance to check. @return True if the scheme is VIEWFS_SCHEME, false otherwise.
255 Sets quotas for a namespace and storage space. @param src Path to the namespace. @param namespaceQuota Namespace quota. @param storagespaceQuota Storage space quota.
256 Sets storage type and quota for a file. @param src Path to the file. @param type Storage type. @param quota Quota for the file.
257 Creates a MultipartUploaderBuilder for the given base path. @param basePath The base path for the multipart upload. @throws IOException If an I/O error occurs.
258 Lists file statuses for a path. @param f The path to list statuses for. @return RemoteIterator of LocatedFileStatus objects.
259 Lists file statuses for a path, using the default filter. @param f The path to list statuses for. @return RemoteIterator of LocatedFileStatus objects.
260 Gets the checksum for a file. @param f The path to the file. @return FileChecksum object.
261 Sets an XAttr on a file. @param path Path of the file. @param name XAttr name. @param value XAttr value.
262 Opens a file stream with specified parameters. @param path Path to the file. @param parameters OpenFileParameters object. @return CompletableFuture containing FSDataInputStream.
263 Opens a file with provided parameters, validating options. @param path Path to open @param parameters Parameters for file opening @return CompletableFuture<FSDataInputStream>
264 Opens a file using provided parameters. @param path Path to the file to open. @param parameters Parameters for opening the file. @return CompletableFuture representing the file input stream.
265 Asynchronously opens a file and returns an FSDataInputStream. @param pathHandle PathHandle for the file. @param parameters Parameters for opening the file.
266 Retrieves default block storage policies from the file system.
267 Creates a map of mount points to FileSystem objects. @param mountPoints List of mount points to process. @return Map of mount point strings to FileSystem objects.
268 Resolves a path and creates a ResolveResult. @param resultKind ResultKind, @param resolvedPathStr Resolved path
269 Returns a ChildFsGetter for handling child file system operations.
270 Constructs an INodeLink with path, Ugi, target FS, and links. @param pathToNode Node path @param aUgi UserGroupInformation @param targetMergeFs Target file system @param aTargetDirLinkList Target directory links
271 Constructs an INodeLink with target file system and link details. @param pathToNode Node path @param aUgi UserGroupInformation @param createFileSystemMethod Method to create file system @param aTargetDirLink Target directory link
272 Replaces variable placeholders in the destination path. @param parsedDestPath Destination path with variables. @param srcMatcher Matcher object from regex. @param regexGroupNameOrIndexStr Group name/index for value. @param groupRepresentationStrSetInDest Set of variable names.
273 Decrypts data from input buffer to output buffer using decryptor. @param decryptor Decryptor object for decryption.
274 Asserts that the context is not zero; throws exception if false.
275 Checks if the working directory znode exists in ZooKeeper. @return True if znode exists, false otherwise.
276 Returns config prefix for default mount table.
277 Creates an interceptor from a serialized string. @param serializedString Serialized interceptor data. @return RegexMountPointResolvedDstPathReplaceInterceptor or null.
278 Returns the socket input stream as a ReadableByteChannel. @param hasChannel boolean to check if channel exists
279 Calculates checksum metadata size. @param file Path to the file. @param fileSize File size.
280 Gets filesystem name based on OS. Returns name or null.
281 Retrieves the mount point of the directory. Throws FileNotFoundException if directory doesn't exist.
282 Calculates disk usage percentage. Uses m1() for capacity, m2() for used space.
283 Constructs an FSInputChecker with file, retries, checksum params. @param file File path @param numOfRetries Retry attempts @param verifyChecksum Whether to verify checksums @param sum Checksum object @param chunkSize Chunk size @param checksumSize Checksum size
284 Checks if an InputStream supports ByteBuffer reading. @param stream Input stream to check. @return True if stream supports ByteBuffer reading.
285 Adds current thread ID to the audit context. @param PARAM_THREAD1 Key for storing thread ID.
286 Sets the command in global context if tool and command are valid. @param tool Object used to extract class name and command.
287 Returns a B object with the given key and value. @param key the key for the value @param value the value to be associated with the key
288 Retrieves a B object with the given key and float value. @param key the key for the value @param value the float value to be associated with the key @return A B object
289 Returns a B object with a default value for the given key. @param key the key for the value @param value the default value to be associated with the key
290 Returns a B object with the given key and double value. @param key the key for the value @param value the double value to be associated with the key
291 Returns a B object with the given key and value. @param key Configuration key. @param value Value to associate with the key. @return A B object.
292 Creates a B object with key and value. @param key The configuration key. @param value The value to be associated with the key.
293 Retrieves a B object with the given key and value. @param key The configuration key. @param value The value to be associated with the key.
294 Creates a B object with key and value. @param key The configuration key. @param value The value to be associated with the key.
295 Retrieves formatted row strings for a given index. @param idx Row index to format and retrieve. @return Array of formatted row strings.
296 Delegates file system m1 operation to the underlying FS. @param fsOutputFile Unused file system output path. @param tmpLocalFile Temporary local file path. @return Path object representing the result.
297 Calculates effective permission by masking with entry/default permission. @param entry The AclEntry to evaluate. @param permArg The base permission to mask with.
298 Creates a PermissionStatus instance with user, group, and permission. @param user Username associated with the permission. @param group Groupname associated with the permission. @param permission The FsPermission object.
299 Parses an ACL string and creates an AclEntry. @param aclStr ACL string to parse. @param includePermission Whether to include permission. @return AclEntry object created from the string.
300 Builds a string representation of the ACL entry. Includes scope, type, name, and permission details.
301 Splits a string by delimiter into a string array. @param str The string to split. @param delim The delimiter string.
302 Splits a string by comma into a collection of strings. @param str The string to split. @return A Collection of strings.
303 Parses permission string, applying symbolic or octal patterns. @param modeStr Permission string to parse. @param symbolic Pattern for symbolic permissions. @param octal Pattern for octal permissions.
304 Closes the data block, handling buffer file deletion/closing.
305 Checks if stream is open; throws exception if closed. Uses Preconditions.m2 to validate stream state.
306 Transitions the data block to the specified state. @param current Current state of the data block. @param next The next state to transition to. @throws IllegalStateException if state verification fails.
307 Writes data to the data block. @param buffer The buffer containing the data to write. @param offset Start offset in the buffer. @param length Number of bytes to write.
308 Transitions the data block to the 'Writing' state. @throws IOException if an error occurs during the transition.
309 Adds an attribute to the referrer header. @param key Attribute key. @param value Attribute value.
310 Parses a header string into a map of name-value pairs. @param header The header string to parse. @return A map containing the parsed name-value pairs.
311 Returns the data size, or masked value from m1 if null.
312 Resolves a symbolic link to its target path. @param f the path to resolve @return the resolved path
313 Delegates m1 operation to the default FileSystem.
314 Delegates file system operation to AbstractFileSystem.
315 Retrieves or creates Statistics for the given URI. @param uri The URI to get or create statistics for. @return Statistics object associated with the URI.
316 Creates a MultipartUploaderBuilder with the given base path. @param basePath The base path for the multipart upload. @throws IOException If an I/O error occurs.
317 Gets or creates an AllocatorPerContext for the given context name. @param contextCfgItemName Context configuration item name.
318 Delegates position retrieval to the internal PositionCache. @return The current cached position as a long value.
319 Flushes the output stream. Calls m1 on the wrapped stream.
320 Extracts unique, trimmed strings from a comma-separated string. @param str The input string to process. @return A collection of unique, trimmed strings.
321 Initializes the listener with the default logger (LOG).
322 Constructs a ServiceStateException with a message. Uses default exit code if cause is not provided.
323 Constructs ServiceStateException with exit code, message, and cause. @param exitCode Exit code for the exception. @param message Exception message. @param cause Underlying exception cause.
324 Converts a fault to a RuntimeException, or creates a ServiceStateException. @param text Error message. @param fault The exception to wrap or return.
325 Converts a Throwable to a RuntimeException, ServiceStateException if needed. @param fault The exception to convert. @return A RuntimeException.
326 Constructs a ServiceStateModel with the given name, initially NOTINITED. @param name Service name.
327 Checks if a state transition is valid based on the state map. @param current Current service state. @param proposed Proposed service state.
328 Concatenates a prefix based on the name and the state string. @return Combined string representing the service state.
329 Constructs a HadoopUncaughtExceptionHandler with no delegate.
330 Handles a signal, increments the count, logs, and notifies handler. @param s The signal that was received.
331 Finds IrqHandler by signal name. @param signalName The signal name to search for. @return Matching IrqHandler or null if not found.
332 Constructs a ServiceLaunchException with an exit code and cause. @param exitCode Exit status code. @param cause Throwable that caused the exception.
333 Constructs a ServiceLaunchException with an exit code and message. @param exitCode the exit status code @param message the exception message
334 Constructs ServiceLaunchException with exit code, format, and args. @param exitCode the exit status code @param format format string @param args arguments for formatting
335 Constructs ServiceLaunchException with exit code, cause, & format string. @param exitCode Exit status code. @param cause Underlying Throwable cause. @param format Format string for error message.
336 Performs a masked function, calling m1 for execution.
337 Constructs a ServiceLauncher with service name equal to class name. @param serviceClassName Class name of the service to launch.
338 Handles an ExitUtil.ExitException, logs details, and sets service exit code.
339 Initializes commandOptions using the configuration options.
340 Loads and creates Configuration classes. @return Number of successfully loaded Configuration classes.
341 Adds a ServiceStateChangeListener to the global listener list. @param l The listener to add.
342 Removes a ServiceStateChangeListener. @param l The listener to remove.
343 Clears all registered service state change listeners.
344 Notifies listeners about service state change. Catches exceptions during listener notification.
345 Initializes service configuration. Overrides if different. @param conf Hadoop configuration object.
346 Checks if the object is a Service and processes it. @param object The object to check. Returns true if Service.
347 Stops a service and logs exceptions. @param log Logger instance. @param service Service to stop. Returns exception if any.
348 Stops the given service and logs exceptions. @param log Logger instance for error reporting. @param service Service to be stopped. @return Exception if stopping fails, null otherwise.
349 Checks if an InputStream supports pread byte buffer capability. @param in Input stream to check. @return True if stream supports pread byte buffer, false otherwise.
350 Checks if dynamic capabilities are loaded. Uses loaded() methods to determine availability.
351 Serializes an object to a JSON string. @param instance The object to serialize. @return JSON string or error message if serialization fails.
352 Adapts a FunctionRaisingIOE to a Function, using unchecked. @param fun The function to adapt. @return A Function with IOExceptions wrapped.
353 Serializes an object to a JSON string. @param instance The object to serialize. @return JSON string representation of the object.
354 Parses JSON bytes to object. @param bytes JSON data as bytes. @return Object of type T. @throws IOException if an I/O error occurs.
355 Copies data from another UTF8 object into this one. @param utf8 The UTF8 object to copy from.
356 Encodes a string to a DataOutput as UTF-8. @param out Output stream. @param s String to encode. @return Number of bytes written.
357 Reads length from input and skips that many bytes. @param in DataInput stream to read length and skip.
358 Seeks to a position in the file using the provided key. @param n the position to seek to
359 Sets the key to 'n' and calls m2(key, value) to update.
360 Constructs an OutputBuffer using the default buffer.
361 Returns the internal byte array from the buffer.
362 Delegates buffer size retrieval to the internal buffer.
363 Resets the internal buffer.
364 Delegates comparison to the WritableComparable's m1 method. @param a The first WritableComparable object. @param b The second WritableComparable object.
365 Compares two byte array segments using FastByteComparisons. @param b1,s1,l1 First array, start index, length @param b2,s2,l2 Second array, start index, length @return int comparison result
366 Calculates hash code for a byte array segment. @param bytes Array of bytes. @param length Length of the segment.
367 Extracts a float value from a byte array at a given start index. @param bytes byte array containing the float data @param start starting index of the float data @return float value extracted from the byte array
368 Combines two integers from a byte array into a long. @param bytes byte array containing the integers @param start starting index
369 Extracts an integer value from a byte array. @param bytes byte array to read from @param start start index in the array @return integer value extracted from the array
370 Constructs a BytesWritable from a byte array. @param bytes the byte array to wrap
371 Returns the underlying byte array.
372 Returns the value of the masked field. @return The masked value, obtained from m1().
373 Resizes the BytesWritable to the specified capacity. @param capacity new capacity for the byte array
374 Returns the size of the buffer pool. @param direct if true, returns direct buffer pool size.
375 Submits a readahead request or returns the last one. @param identifier request identifier, fd file descriptor, @param curPos current position, readaheadLength length @return ReadaheadRequest object or null if not submitted.
376 Appends a key-value pair to the SequenceFile. @param key The key to write.
377 Checks if a key exists in the SequenceFile. @param key The key to check for. @return True if the key exists, false otherwise.
378 Returns the long value associated with the current key.
379 Checks if the given path has the desired access right. @param path file or directory path @param accessRight access right level @return true if access is allowed, false otherwise
380 Checks if native code is loaded. Returns true if NativeCodeLoader.m1() returns true.
381 Checks if native code is loaded and available. Returns true if both conditions are met.
382 Returns false if Sparc, otherwise delegates to NativeCodeLoader.
383 Unmaps the given buffer if unmapping is supported. Logs a message if unmapping is not supported.
384 Frees the provided ByteBuffer, unmapping if supported. Logs a message if unmapping is not supported.
385 Extends buffer by `length` bytes from input `in`.
386 Constructs an EnumSetWritable with the given EnumSet and element type. @param value The EnumSet to wrap. @param elementType The class of elements in the EnumSet.
387 Constructs a DataInputBuffer using a default internal buffer.
388 Initializes the buffer with data from the input array. @param input The byte array to be used as the buffer. @param length The number of bytes to include.
389 Initializes the buffer with data from the input array. @param input The byte array to be used as the buffer. @param start The starting index in the array. @param length The number of bytes to include.
390 Delegates buffer size retrieval to the underlying buffer.
391 Delegates to the underlying buffer's m1 method.
392 Constructs an ECSchema from a map of options. @param allOptions map containing schema configuration options
393 Constructs an ECSchema with codec name, data/parity units. Delegates to the primary constructor with null options.
394 Returns the number of data units in the erasure coding schema.
395 Returns the number of parity units in the schema.
396 Finds a RawErasureCoderFactory by codec and coder name. @param codecName Codec name. @param coderName Coder name. @return RawErasureCoderFactory or null if not found.
397 Creates an ECBlockGroup from provided data and parity blocks. @param dataBlocks Array of data blocks. @param parityBlocks Array of parity blocks.
398 Counts the total number of erased data and parity blocks.
399 Counts the number of erased blocks in the input array. @param inputBlocks Array of EC blocks to check for erasure. @return The number of erased blocks.
400 Converts an array of ECChunks to an array of ByteBuffers. @param chunks Array of ECChunk objects to convert. @return An array of ByteBuffers.
401 Retrieves erased EC blocks from a block group. @param blockGroup The EC block group to process. @return Array of erased EC blocks.
402 Combines data and parity blocks into a single array. @param blockGroup The block group containing data and parity. @return An array containing all blocks from the group.
403 Calculates the bitwise XOR of two field elements. @param x First field element. @param y Second field element. @return The XOR result.
404 Returns the product of x and y using the multiplication table. @param x Index for the first element. @param y Index for the second element.
405 Returns the division table value for indices x and y. @param x Index for division table lookup. @param y Index for division table lookup.
406 Calculates a power within the Galois field. @param x Base value. @param n Exponent. @return Result of x^n in the field.
407 Prints a string representation of the ECChunk, or "<EMPTY>" if null. @param chunk The ECChunk to display.
408 Delegates to coderOptions.m1().
409 Delegates check to coderOptions. @return True if the underlying option is enabled.
410 Delegates to the coder options to determine a boolean value.
411 Delegates to coderOptions.m1().
412 Resets a portion of the buffer to empty bytes, then restores position. @param buffer the buffer to reset @param len the length of the portion to reset
413 Copies data from buffer to itself, starting at offset. @param buffer The byte array to copy from and to. @param offset The starting offset in the buffer. @param len The number of bytes to copy.
414 Creates a ByteArrayEncodingState with encoded data and offsets.
415 Creates a new ByteBufferEncodingState with new input/output buffers. @return ByteBufferEncodingState object with updated buffers.
416 Creates a ByteBufferDecodingState with new input/output buffers. @return ByteBufferDecodingState object with prepared buffers
417 Creates a ByteArrayDecodingState with calculated offsets and buffers. @return New ByteArrayDecodingState instance.
418 Masks a byte array using GF(2^8) operations. @param a The byte array to mask. @param m The size of the array. @param k The masking size.
419 Masks input matrix using Galois Field arithmetic. @param inMatrix Input matrix to be masked. @param outMatrix Output matrix for masked data. @param n Size of the matrix (n x n).
420 Masks input data using Galois Field tables. @param gfTables Galois Field multiplication table.
421 Masks input data using Galois Field tables and ByteBuffer operations. @param gfTables Galois Field tables for masking. @param inputs Input ByteBuffers to be masked. @param outputs Output ByteBuffers to store masked data.
422 Returns a GaloisField instance for the given size and polynomial. @param fieldSize size of the field @param primitivePolynomial the primitive polynomial
423 Applies a masking function to arrays x and y. @param x Input array. @param y Output array.
424 Constructs an ECBlock as a data block (not parity, not erased).
425 Updates reported bytes read and calls m1. @param count Number of bytes read from stream.
426 Reads a byte from the input stream. @param inStream The input stream to read from. @return The byte read, or -1 if end of stream.
427 Calculates min/max lengths for each group and initializes tables. @param alphaSize Alphabet size, nGroups Number of groups.
428 Partitions the fmap array based on dataShadow and stack values. @param dataShadow data structure containing arrays to partition.
429 Decompresses data and returns the number of bytes written.
430 Decompresses data and returns the number of bytes written.
431 Decompresses data and returns the buffer length. Calls m1() and uses stream to calculate buffer length.
432 Initializes the decompressor, setting up buffers and streams.
433 Constructs a Bzip2Compressor with default compression parameters.
434 Retrieves a long value, calling m1() first.
435 Compresses data and returns the compressed size. Calls m1().
436 Initializes CompressorStream with an OutputStream. @param out The underlying OutputStream.
437 Initializes the SnappyDecompressor using the default buffer size.
438 Decompresses data from input array. @param b input byte array @param off start index in the array @param len number of bytes to decompress
439 Checks if decompression is complete. Returns true if so.
440 Decompresses data into the provided byte array. @param b buffer to write decompressed data to @param off offset within the buffer to start writing @param len maximum number of bytes to decompress @return Number of bytes decompressed.
441 Default constructor, initializes with the default buffer size.
442 Compresses data from byte array to compressed buffer. @param b byte array to compress, @param off offset, @param len length @return number of bytes written to output buffer
443 Initializes the compressor using the provided configuration.
444 Initializes a new DecompressorStream with the given input stream. @param in The input stream to decompress. @throws IOException if an I/O error occurs.
445 Calculates the total bytes to consume from the buffers.
446 Resets the decompressor to its initial state for reuse.
447 Returns the number of bytes written during compression.
448 Returns the number of bytes read during compression.
449 Constructs a Lz4Decompressor with the default direct buffer size.
450 Sets input data and initializes decompression buffers. @param b Input byte array @param off Start offset in the byte array @param len Length of data to be decompressed
451 Checks if decompression is complete. Returns true if done.
452 Decompresses data into the provided byte array. @param b buffer to write uncompressed data @param off offset in buffer to start writing @param len max number of bytes to write @return number of bytes decompressed
453 Creates a new Lz4Compressor with specified buffer size. @param directBufferSize Size of the direct buffer for compression.
454 Compresses data from input buffer and writes to output. Handles input validation and manages buffer states.
455 Initializes the compressor with the given configuration. @param conf Hadoop configuration object.
456 Retrieves a compression codec by name, falling back to lowercase. @param codecName Name of the codec to retrieve. @return CompressionCodec instance or null if not found.
457 Gets the usage count for a codec. @param codec The compression codec. @return Usage count, 0 if codec is null.
458 Gets the usage count for a codec. @param codec The compression codec. @return The usage count, 0 if codec is null.
459 Returns the compressor class based on native Zlib availability. @param conf Hadoop configuration object. @return Compressor class.
460 Selects Decompressor class based on native Zlib availability. @param conf Hadoop configuration object. @return Decompressor class.
461 Checks and initializes native Zlib if available. Logs success or failure based on initialization status.
462 Initializes the compressor with configuration from Hadoop. @param conf Hadoop configuration object.
463 Initializes the ZlibCompressor with provided compression settings. @param level Compression level. @param strategy Compression strategy. @param header Compression header. @param directBufferSize Direct buffer size.
464 Compresses data and returns the compressed size. Calls m1().
465 Compresses data and returns the compressed size. Calls m1() first, then calculates compressed size.
466 Creates a ZlibDecompressor with a header and direct buffer size. @param header Compression header object @param directBufferSize Size of the direct buffer
467 Decompresses data from the stream and returns the length.
468 Decompresses data from the stream and returns the length.
469 Decompresses data and returns the resulting length.
470 Initializes the decompressor state for a new decompression cycle.
471 Processes GZIP trailer data, verifying CRC and size. Handles state transitions based on verification results.
472 Writes a variable-length integer to the output stream. @param stream output stream @param i integer value to write
473 Reads a variable-length integer from the input stream. @param stream Input stream to read from. @return The variable-length integer value.
474 Retrieves a buffer from the pool, or allocates a new one. @param direct if true, allocates a direct buffer; otherwise, a heap buffer @param length buffer length in bytes @return ByteBuffer from the pool or a newly allocated buffer
475 Adds a buffer to the pool, tracking it with a weak reference. @param buffer The ByteBuffer to add to the pool.
476 Decodes a UTF-8 code point at the given position. @param position Index of the code point to decode. @return The decoded code point, or -1 if out of bounds.
477 Encodes a string to bytes and updates internal state. @param string String to encode; throws exception on failure.
478 Copies UTF-8 bytes to internal buffer. @param utf8 The UTF-8 byte array. @param start Start index in the byte array. @param len Number of bytes to copy.
479 Copies UTF-8 bytes to internal buffer, extending the text. @param utf8 The UTF-8 encoded byte array to copy. @param start Start index in utf8. @param len Number of bytes to copy.
480 Reads len bytes from DataInput into the internal byte array. @param in Input stream to read from. @param len Number of bytes to read.
481 Decodes a byte array to a String, replacing invalid chars. @param utf8 Byte array containing UTF-8 encoded data. @return Decoded String.
482 Decodes a byte array to a String, handling encoding errors. @param utf8 Byte array to decode. @param replace Whether to replace invalid chars.
483 Validates a UTF-8 byte array. @param utf8 byte array to validate @throws MalformedInputException if input is invalid
484 Registers a class with a unique ID, throwing an exception if limits are exceeded. @param clazz Class to register.
485 Initializes the AbstractMapWritable with default class-ID mappings. Registers common Hadoop Writable classes with specific IDs.
486 Creates a FileSystemOption for SequenceFile writer. @param fs The FileSystem instance to use. @return A FileSystemOption object.
487 Constructs a Key object with a given byte array and weight. @param value The byte array. @param weight The associated weight.
488 Cleans up segments; returns if input preservation is enabled.
489 Converts a List to an array of type T. @param list List to be converted to an array. @return Array of type T containing list elements.
490 Constructs an InputBuffer using a default Buffer.
491 Copies data to the internal buffer. @param input Input byte array. @param length Number of bytes to copy.
492 Copies data to the internal buffer. @param input Input byte array. @param start Start index in the array. @param length Number of bytes to copy.
493 Delegates to the underlying buffer's m1() method.
494 Delegates buffer length retrieval to the internal buffer.
495 Creates an MD5Hash from a DataInput. @param in DataInput object containing the MD5 hash data. @return MD5Hash object constructed from the input data.
496 Computes MD5 hash of an input stream. @param in Input stream to hash. @return MD5Hash object representing the hash. @throws IOException if an I/O error occurs.
497 Computes MD5 hash of a byte array slice. @param data The byte array. @param start The starting index. @param len The number of bytes to hash. @return MD5Hash object containing the computed hash.
498 Computes MD5 hash of data array. @param dataArr Array of byte arrays to hash. @param start Start index in each byte array. @param len Length of data to hash from each array. @return MD5Hash object representing the hash.
499 Returns the value of m1.
500 Parses a hex string and sets the internal digest array. @param hex Hexadecimal representation of the MD5 digest.
501 Parses a Message object from a DataInput stream. @param protoClass Class of the Message to parse. @param dataIn Input stream containing the Message data.
502 Attempts to fsync a file or directory. Throws IOException if fails.
503 Constructs a BooleanWritable with the given boolean value. @param value The boolean value to initialize with.
504 Creates a RemoteExceptionDependentRetry with provided policies. @param defaultPolicy Default retry policy. @param exceptionToPolicyMap Exception to policy mapping.
505 Checks if the queue is empty for longer than the given time. @param time Time threshold in milliseconds. @return True if queue is empty for longer than the time.
506 Returns the current time in milliseconds using monotonic clock.
507 Creates a RetryPolicy excluding RemoteException and SaslException. @param defaultPolicy Default retry policy. @param exceptionToPolicyMap Exception-specific retry policies.
508 Gets the ConnectionId for the first proxy. @return ConnectionId associated with the first proxy.
509 Parses retry parameters from a string. @param s String containing comma-separated retry parameters. @return MultipleLinearRandomRetry object or null if parsing fails.
510 Creates an ExceptionDependentRetry with given policy and exception map. @param defaultPolicy Default retry policy. @param exceptionToPolicyMap Maps exceptions to specific policies.
511 Creates an IOException from a list of exceptions. @param exceptions List of IOExceptions to consolidate. @return IOException or null if the list is empty/invalid.
512 Retrieves a masked value from the data index.
513 Returns the compression algorithm name from the data index.
514 Reads a variable-length long from input, casts to int. @param in DataInput stream to read from. @throws RuntimeException if value exceeds Integer bounds.
515 Writes an integer 'n' to the DataOutput using variable-length encoding. @param out DataOutput to write to @param n integer value to write
516 Delegates sorting check to TFileMeta. @return True if sorting is disabled, false otherwise.
517 Retrieves the number of records from the TFile metadata.
518 Delegates m1() call to the readerBCF object.
519 Returns the string comparator from the TFile meta.
520 Constructs a ByteArray from a BytesWritable object. @param other The BytesWritable to copy from.
521 Constructs a ByteArray from a byte array. @param buffer The byte array to wrap.
522 Finds the index of the BlockRegion containing the given offset. @param offset The offset to search for. @return Index of BlockRegion or -1 if not found.
523 Finds index of key in sorted index. @param key Key to search for. Returns -1 if not found.
524 Finds the index of a key in the index list. @param key The key to search for. @return The index or -1 if not found.
525 Compares this location with another based on indices. @param other The location to compare with. @return int Comparison result.
526 Delegates to overloaded m1, using offset 0. @param buf buffer to copy to
527 Reads value into buffer, checking for sufficient space. @param buf buffer to read value into, @param offset offset @return number of bytes read, or bytes read up to buffer end
528 Retrieves the block region size from the associated state.
529 Returns the compressed size of the block region.
530 Returns a calculated value from the block state.
531 Returns an OutputStream, either the input or a wrapped DataOutput. @param out The DataOutput to wrap or return as is. @return An OutputStream instance.
532 Compares two byte arrays lexicographically. @param buffer1 First byte array. @param buffer2 Second byte array.
533 Constructs a DataOutputBuffer using a default internal buffer.
534 Returns the internal byte array from the buffer.
535 Delegates to the underlying buffer's m1() method.
536 Writes an integer to the buffer at the given offset. @param v integer value to write @param offset offset in the buffer to write to
537 Calculates distance between nodes, handling nulls and locks. @param node1 First node. @param node2 Second node. @return Distance or Integer.MAX_VALUE if nodes are invalid.
538 Checks if a node's location falls within a given scope. @param node The Node object to check. @param scope The scope string to check against.
539 Constructs a string array based on node information. @param node The Node object to process. @return String array derived from node attributes.
540 Returns a masked string representation using m1. @return Masked string.
541 Removes a node from the network topology. @param node The node to remove. Throws IllegalArgumentException if inner node.
542 Retrieves a list of nodes from the cluster map at the given location. @param loc Location string to retrieve nodes from. @return List of nodes or an empty list if not found.
543 Retrieves a node from the cluster map by location. @param loc Node location string. @return Node object or null if not found.
544 Generates a string representation of the network topology. Includes rack count, expected leaves, and leaf details.
545 Checks if two nodes are masked. @param node1 The first node. @param node2 The second node. @return True if nodes are masked, false otherwise.
546 Selects a node within scope, excluding specified nodes. @param parentNode Parent node. @return Node or null if selection fails.
547 Calculates a weight based on node paths, 0 if same rack. Uses `m2` to normalize paths; returns weight based on levels.
548 Adds a node to its rack's node list, updating the rack map. @param node The node to add.
549 Transfers data from a FileChannel, tracking wait/transfer times. @param fileCh FileChannel to read from, position, count, times.
550 Resolves a collection of hostnames to their IP addresses. @param names Collection of hostnames to resolve. @return List of resolved IP addresses.
551 Constructs a string detailing the local and destination host/port. @param destHost Destination host. @param destPort Destination port. @param localHost Local host.
552 Resolves InetAddresses within a subnet. @param subnet Subnet string (e.g., "192.168.1.0/24") @param returnSubinterfaces Whether to include subinterfaces. @return List of InetAddress objects matching the subnet.
553 Acquires a set of free ports. @param numOfPorts The number of free ports to acquire. @return A set of free ports, or throws exception if failed.
554 Default constructor for RawScriptBasedMapping.
555 Initializes a `CachedDNSToSwitchMapping` with a raw mapping. @param rawMapping The raw DNS-to-switch mapping.
556 Creates a NodeBase from a path string. Normalizes the path and sets name/location based on it.
557 Constructs a NodeBase with a normalized location. @param name Node name. @param location Node location, normalized during construction.
558 Constructs a NodeBase with a normalized location. @param name Node name, @param location Normalized location, @param parent Parent node, @param level Node level in hierarchy
559 Sends a callback for a file descriptor, closing it if needed. @param caller Caller of the method. @param entries TreeMap of entries. @param fdSet Set of file descriptors. @param fd File descriptor. @return True if the socket was closed, false otherwise.
560 Checks if the socket is open by checking the reference count.
561 Shuts down the socket, handling closed states and interruptions.
562 Trims idle selectors from the pool based on activity timeout. @param now Current timestamp used to determine idle selectors.
563 Retrieves dependency scripts for a given name, caching results. @param name The name to search for dependencies.
564 Sets a timeout for the socket input stream. @param timeoutMs Timeout in milliseconds.
565 Resolves IP addresses for a network interface. @param strInterface Interface name. @param returnSubinterfaces Whether to include subinterface IPs. @return String array of IP addresses.
566 Resolves InetAddresses for a given interface, optionally including subinterfaces. @param strInterface Interface name. @param returnSubinterfaces Whether to include subinterface addresses. @return List of InetAddress objects.
567 Retrieves a location string, recursing through node groups. @param loc The initial location string.
568 Generates a string representation of DNS to switch mappings. Returns a formatted string detailing the switch mapping.
569 Checks if mapping is valid AbstractDNSToSwitchMapping. @param mapping DNS to switch mapping object @return True if valid, false otherwise.
570 Gets summary statistics for a recorder. @param recorderName Recorder name. @param idx Index of statistics to retrieve. @return SummaryStatistics or null if recorder not found.
571 Prints generic options usage information to the provided PrintStream.
572 Checks if a class's class is a Log4j logger. @param clazz Class to check. Returns false if null.
573 Constructs a LogThrottlingHelper with a default Timer. @param minLogPeriodMs Minimum time between logs (ms) @param primaryRecorderName Name of the primary recorder
574 Records a log action, potentially triggering log suppression. @param recorderName Name of the recorder. @param currentTimeMs Current timestamp in milliseconds. @param values Values to be logged. @return LogAction object or DO_NOT_LOG if not logged.
575 Checks if a string requires HTML quoting. @param str String to check; null strings return false.
576 Quotes HTML special characters in a string. @param item String to be processed, returns null if null.
577 Adds a Jersey resource package. @param packageName Package name. @param pathSpec Servlet path specifier.
578 Registers a servlet with the web application context. @param name Servlet name, @param pathSpec mapping path, @param clazz servlet class
579 Registers a servlet. Calls overloaded method with auth=false. @param name Servlet name, pathSpec mapping path, clazz servlet class
580 Registers a filter with the ServletContextHandler. @param ctx Handler context, name, class, params, URL patterns
581 Attempts to bind a ServerConnector to a port, retrying if needed. @param listener ServerConnector to bind. @param port Initial port to try.
582 Finds XFrameOption by value. @param value The value to search for. @return The matching XFrameOption or throws exception.
583 Initializes FileMonitoringTimerTask with file paths and callbacks. @param filePaths List of file paths to monitor. @param onFileChange Callback for file change events. @param onChangeFailure Callback for failure events.
584 Retrieves the flush offset interval in milliseconds. @param key Property key. @param defaultValue Default value if not found. @return Flush interval in milliseconds.
585 Throws exception if the specified key is missing from properties. @param key The configuration key to check.
586 Throws a MetricsException if an error occurs during output. @param message Error message to include in exception.
587 Throws a MetricsException if ignoreError is false. @param message Error message to include in the exception.
588 Parses the flush interval from properties and returns millis. @return Flush interval in milliseconds.
589 Throws a MetricsException if ignoreError is false. @param message Error message. @param t The exception that caused the error.
590 Retrieves or creates a Record for a MetricsRecord. @param mr The MetricsRecord to process. @param includingTags Whether to include tags in the Record.
591 Writes string to buffer, ensuring 4-byte alignment. @param s String to be written to the buffer.
592 Emits a metric to Ganglia, handling null checks and logging. @param groupName Metric group name.
593 Emits a metric to Ganglia. @param groupName Metric group name. @param name Metric name.
594 Retrieves an element from the queue, waiting if empty. Waits until the queue is not empty, then dequeues an element. @return Dequeued element of type T.
595 Constructs a MetricsRecordImpl with given info, timestamp, tags, and metrics. @param info MetricsInfo object @param timestamp Timestamp of the record @param tags List of MetricsTag objects @param metrics Iterable of AbstractMetric objects
596 Updates RPC enqueue time metrics. @param enQTime Enqueue time to record.
597 Updates RPC queue time metrics. @param qTime The RPC queue processing time.
598 Records RPC processing time. @param processingTime The processing time in milliseconds.
599 Updates quantile estimators with the given write latency. @param writeLatency The latency of the file write operation.
600 Updates read latency quantiles for each file. @param readLatency The read latency value to update.
601 Creates a MetricsSystem instance with the given prefix. @param prefix Prefix for the metrics system name. @return MetricsSystem instance.
602 Returns the MetricsSystem instance. Delegates to implementation.
603 Initiates a metric system shutdown via the INSTANCE.
604 Adds metrics and tags to the builder. Iterates through tags and metrics, adding them to the builder.
605 Calculates rolling averages for metrics with at least minSamples. @param minSamples Minimum number of samples required for an average. @return Map of metric names to their rolling averages.
606 Returns the RPC processing time. Uses m1() and m2() to get the value.
607 Processes current snapshot, updates rolling averages. Iterates through rates, adds samples to dequeues.
608 Caches a MetricsInfo object using the provided name and description. @param name Metric name. @param description Metric description. @return Cached MetricsInfo object.
609 Caches a tag for a given metrics info and value. @param info MetricsInfo object @param value Tag value @return Tag object
610 Updates interval statistics and triggers a subsequent action. @param numSamples Number of samples. @param sum Sum of the samples.
611 Adds a single sample to the statistics. @param x The value of the sample to add. @return The updated SampleStat object.
612 Returns the mean RPC processing time.
613 Returns the minimum value from the internal minmax tracker.
614 Returns the minimum value tracked.
615 Resets the minimum and maximum values to their default.
616 Calculates the next retry time based on target end time and policy. @param tgtEndTime Target end time. @param now Current time. @param rp Retry policy. @return Next retry time in milliseconds.
617 Returns the masked variance, calculated using the internal variance.
618 Adjusts sample values based on neighboring item comparisons.
619 Finds the sample value at or below the given quantile. @param quantile The quantile to search for. @return The sample value at the quantile.
620 Inserts buffered samples into the sorted sample list. Resets the buffer count after processing.
621 Returns a list of unique netgroup names. Uses `getGroups()` to populate the list.
622 Checks if a group exists. @param group The group name to check. @return True if the group exists, false otherwise.
623 Gets SASL properties for a client address. @param clientAddress The client's InetAddress. @return Map of SASL properties.
624 Gets SASL properties for a server address. @param serverAddress Server InetAddress. @return Map of SASL properties.
625 Extracts a masked identifier from a Kerberos principal name. @param principalName Kerberos principal name to mask. @return Masked identifier string.
626 Retrieves user groups; throws exception if not found & negative cache enabled. @param user The user whose groups are being retrieved. @return Set of group names for the user.
627 Clears and refreshes the user-to-group cache. Refreshes group cache, clears cache and updates negative cache.
628 Logs a formatted message to the configured output or System. @param format Format string for the message. @param args Arguments to be formatted into the message.
629 Updates a BiMap with entries from a shell command's output. @param map BiMap to update, key=ID, value=name @param mapName Name of the map being updated @param command Shell command to execute @param regex Regex to parse command output @param staticMapping Static mapping of IDs to integers @return True if map was updated, false otherwise.
630 Constructs a command array based on the OS, using script path. @param script The script file. @return String array representing the command.
631 Switches to a new bind user after an authentication error. @param e AuthenticationException thrown during authentication.
632 Writes data to the stream, handling SASL token processing. Writes data, possibly wrapping with SASL tokens if configured.
633 Flushes the output stream and calls disposeSasl().
634 Handles CSRF protection: ignores if browser, method ignored, or header exists. @param httpInteraction The HTTP interaction to process.
635 Parses group names and IDs, returning a set of valid group names. @param groupNames Comma-separated group names. @param groupIDs Comma-separated group IDs. @return Set of valid group names.
636 Creates a SecretKey from a byte array. @param key The byte array representing the key.
637 Removes a token from the SQL secret store. @param ident Token identifier containing sequence number. @throws IOException if an IO error occurs.
638 Refreshes delegation tokens and sequences. Updates token sequences and refreshes token lists.
639 Adds a delegation key to the store, associating it with a key ID. @param key The delegation key to add. @throws IOException if an I/O error occurs.
640 Removes a delegation key from the SQL secret store. @param key The delegation key to remove.
641 Adds a delegation key. @param key The delegation key to add. @throws IOException if the SecretManager is running.
642 Adds a new delegation key and stores it. @param key The DelegationKey to add. @throws IOException if an I/O error occurs.
643 Sets the secret manager and resets the managed flag. @param secretManager The new secret manager instance.
644 Initializes authentication properties. @param configPrefix Configuration prefix. @param filterConfig Filter configuration. @return Properties object with authentication settings.
645 Retrieves the UserGroupInformation using DelegationTokenAuthenticationFilter.
646 Checks if delegation token operation is allowed. @param request HTTP request object @return True if operation is allowed, false otherwise.
647 Delegates renewal logic to TokenRenewer. @throws IOException if renewal fails
648 Delegates token renewal to the TokenRenewer. @param conf Hadoop configuration object @return Renewal status (long value)
649 Delegates token renewal to the TokenRenewer. @param conf Hadoop configuration object.
650 Wraps input stream if server supports a QOP != \"auth\". @param in Input stream to be wrapped. @return Wrapped input stream.
651 Wraps the output stream with buffering and SASL wrapping if supported. @param out The output stream to wrap. @return The wrapped output stream.
652 Reads SASL token, unwraps data, and returns the length. Returns -1 if EOF is reached, throws SaslException on error.
653 Closes the SASL input stream, releasing resources.
654 Constructs AuthorizationException with a cause. @param cause The underlying Throwable that caused this.
655 Checks login status, delegates to HadoopLoginContext if applicable.
656 Updates user's last login time. @param loginTime Timestamp of the user's last login.
657 Constructs a UserGroupInformation from a Subject. @param subject The Subject containing user credentials.
658 Returns the user's name.
659 Checks if user authentication is Kerberos. Uses user's authentication method.
660 Gets the authentication method associated with the user. @return AuthenticationMethod object for the user.
661 Returns the UserGroupInformation for the first RealUser found. Returns null if no RealUser is found.
662 Returns the user's short name.
663 Sets the authentication method for the user. @param authMethod The authentication method to set.
664 Constructs a `ReloadingX509TrustManager` with type, location, and password. @param type Truststore type. @param location Truststore location. @param password Truststore password.
665 Constructs a `ReloadingX509KeystoreManager` with given parameters. @param type Keystore type. @param location Keystore location. @param storePassword Keystore password. @param keyPassword Key password.
666 Retrieves a URL resource by name using the class loader. @param name resource name @return URL object representing the resource
667 Opens an input stream for a resource. @param name resource name @return InputStream or null if resource not found/error
668 Creates a Reader from a resource URL. @param name resource name; returns null if not found/error.
669 Creates an SSLEngine based on the SSL context, configuring it based on the connection mode and protocol requirements. @return Configured SSLEngine.
670 Configures an HttpURLConnection for SSL/TLS if it's an HttpsURLConnection. @param conn The HttpURLConnection to configure. @return The configured HttpURLConnection.
671 Constructs a Configured object with the given configuration. @param conf The Hadoop Configuration object to initialize with.
672 Checks if group lookup timed out. @param executor ShellCommandExecutor instance. @param user User for whom groups are being looked up. @return True if lookup timed out, false otherwise.
673 Constructs a formatted string from the command array. @return Formatted string representation of the command.
674 Reads AuthMethod from input stream. @param in DataInput stream to read from @return AuthMethod object or null if invalid
675 Adds a user if not already present; throws exception if blocked. @param user The user to add.
676 Adds a group, throwing exception if group already exists. @param group The group to add.
677 Removes a user if not allowed to be removed and ACL allows. @param user The user to remove.
678 Removes a group if not protected by wildcard permissions. @param group The group to remove.
679 Constructs a comma-separated string of users.
680 Returns a comma-separated string of groups.
681 Checks if a Kerberos ticket's principal is a krbtgt. @param ticket KerberosTicket object to check @return True if principal is a krbtgt, false otherwise.
682 Returns server props based on client IP. @param clientAddress Client's InetAddress. @return Server properties or default props.
683 Throws an exception if the codec is not AES/CTR/NoPadding or SM4/CTR/NoPadding. @param codec The crypto codec to validate.
684 Calculates the current stream offset relative to the output buffer.
685 Reads data into a buffer and updates the buffer's position. @param inBuffer ByteBuffer to read data into @return Number of bytes read
686 Finds a CipherSuite by name. @param name The name of the CipherSuite to find. @throws IllegalArgumentException if no matching suite is found.
687 Checks if a version is known, returning false if unknown. @param version The CryptoProtocolVersion to check. @return True if the version is known, false otherwise.
688 Generates a random integer with a specified number of bits. @param numBits The number of random bits to generate (0-32) @return A random integer with the requested number of bits.
689 Creates a KeyProviderCryptoExtension from a KeyProvider. @param keyProvider The KeyProvider instance. @return A KeyProviderCryptoExtension object.
690 Retrieves a key version by name. @param name The name of the key version to retrieve. @return KeyVersion object or null if not found.
691 Generates a cryptographic key of specified size and algorithm. @param size key size in bits @param algorithm key generation algorithm @return generated key as byte array
692 Creates an EncryptedKeyVersion with provided key details. @param keyName Key name @param encryptionKeyVersionName Version name @param encryptedKeyIv Encrypted key IV @param encryptedKeyMaterial Encrypted key material @return EncryptedKeyVersion object
693 Creates a KeyProviderDelegationTokenExtension with given provider. @param keyProvider The key provider to use. @return A KeyProviderDelegationTokenExtension instance.
694 Processes encryption key versions and cleans up SSL factory.
695 Retrieves a ReadWriteLock for the given key name. @param keyName The key name for which to get the lock. @return ReadWriteLock object.
696 Appends a field to the signature builder if valid. @param field The field to append. @return The Builder instance for chaining.
697 Adds a key-value pair to the context, validating inputs. @param key the key to add @param value the value associated with the key @return this Builder instance
698 Appends key-value pair to the context string buffer if valid. @param key The key to append. @param value The value to append.
699 Creates a successful RefreshResponse with a code of 0 and "Success" message.
700 Generates a UUID string from a client ID byte array. @param clientId Client ID as a byte array. @return UUID string representation.
701 Delegates to the underlying reference to process the element. @param e The element to be processed. @return True if successful, false otherwise.
702 Returns the size of the call queue.
703 Retrieves protocol interfaces. @param protocol The protocol class. @return An array of protocol interfaces.
704 Gets the address of a proxy. @param proxy The proxy object. @return InetSocketAddress of the proxy.
705 Returns the monotonic time in milliseconds.
706 Gets UserGroupInformation from current call, or null if no call.
707 Calculates hash codes for an array of methods. @param methods array of methods to hash @return array of hash codes or null if input is null
708 Executes refresh handlers for a given identifier. @param identifier Identifier for the refresh operation. @param args Arguments passed to the handlers. @return Collection of RefreshResponse objects.
709 Constructs a RemoteException with class name and message. @param className Class name where the error occurred. @param msg Error message.
710 Attempts to instantiate an IOException based on lookup types. @param lookupTypes Class array to check for IOException instantiation. @return An IOException or this RemoteException instance.
711 Creates an IOException based on the exception class name. @return Configured IOException instance or this RemoteException.
712 Calculates total cost based on processing details and weights. @param details ProcessingDetails object containing timing info. @return Total cost as a long value.
713 Returns the number of dropped connections.
714 Returns the number of connections managed.
715 Adds an element to the queue with the given priority. @param priority The priority of the element to add. @param e The element to add to the queue.
716 Adds an element to the queue with the given priority. @param priority Element priority level. @param e Element to be added to the queue. @return True if added successfully, false otherwise.
717 Adds exception classes to the terseExceptions set. @param exceptionClass array of exception classes to add
718 Adds exception classes to the exceptions handler. @param exceptionClass array of exception classes to add
719 Constructs an UnexpectedServerException with the given error message. @param message The error message associated with the exception.
720 Constructs a new RpcServerException with the given error message. @param message The error message associated with the exception.
721 Constructs a new RpcClientException with the given error message. @param message The error message associated with the exception.
722 Constructs UnexpectedServerException with a message and cause. @param message Error message @param cause Underlying exception
723 Constructs a new RpcServerException with a message and cause. @param message Error message @param cause Underlying exception
724 Constructs a new RpcClientException with a message and cause. @param message Error message @param cause Underlying exception
725 Updates call costs based on identity and delta. @param identity User identity. @param costDelta Cost adjustment value.
726 Calculates RPC priority based on cost, identity, and thresholds.
727 Converts a ServiceException to an IOException. Delegates to ShadedProtobufHelper for actual conversion.
728 Executes an IpcCall, handling ServiceExceptions and re-throwing as IOException. @param call The IpcCall to execute. @return The result of the IpcCall.
729 Retrieves a ByteString value for a given key. @param key The key to retrieve the ByteString for.
730 Creates a ByteString from a byte array.
731 Sets call ID, retry count, and external handler. @param cid Call identifier. @param rc Retry count.
732 Gets the address of the listener. @return InetSocketAddress of the listener.
733 Returns a set of auxiliary listener addresses. Returns addresses from auxiliary listeners if available.
734 Stops a client and removes it from the cache if no references exist. @param client The client to stop and remove.
735 Delegates the method call to the superclass implementation. @param obj The object used for comparison. @return The result of the superclass's method call.
736 Constructs a ProtobufWrapperLegacy with the given message. @param message The protobuf message to wrap. @throws IllegalArgumentException if message is not a protobuf.
737 Sends an error response to a client after an RPC call fails. @param response Response buffer. @param call RPC call context.
738 Advances to the next queue if no requests are left. Calls moveToNextQueue() when requestsLeft is zero.
739 Sets the error and completes the call. @param error The exception encountered during the call.
740 Sets the RPC response and completes the call. @param rpcResponse The RPC response received from the server.
741 Repeatedly calls super.m2() until successful, handling SocketTimeoutException.
742 Reads data into a buffer, retrying on socket timeout. Retries reading until successful or throws an IOException.
743 Gets the host address from the current call, or null.
744 Retrieves a value from the current call, or 0 if null.
745 Returns QOP if RPC call is established, otherwise null. @return Quality of Protection string or null if not established.
746 Gets priority level from current RPC call. Returns 0 if no call is active.
747 Converts connection data to a string using ObjectMapper. @return String representation of connection data, or null.
748 Creates a MachineList with host entries and an address factory. @param hostEntries Collection of host entries. @param addressFactory Factory for resolving hostnames.
749 Checks if an IP address is allowed. @param ipAddress The IP address to check. Returns true if allowed.
750 Constructs SysInfoLinux with file paths and jiffy length. @param jiffyLengthInMillis Jiffy length in milliseconds.
751 Reads /proc/meminfo to populate memory statistics. @param readAgain Forces a fresh read of the meminfo file.
752 Returns the number of processors available on the system. Uses `m1()` to determine the processor count.
753 Returns the number of CPU cores detected on the system.
754 Returns the CPU frequency. Calls m1() to initialize.
755 Reads CPU time statistics from /proc/stat and updates tracker. Handles IOExceptions and closes streams in a finally block.
756 Calculates total network bytes read. Calls m1() and returns the result.
757 Returns the number of network bytes written. Reads and returns the total bytes written via network.
758 Reads disk I/O statistics from procfsDisksFile and updates counters.
759 Retrieves value associated with key 'k'. Returns null if key not found.
760 Removes and returns the value associated with key 'k'. Returns null if the key is not found.
761 Removes and returns the element associated with the given key. @param index index of the element @param key key of the element to remove @return the removed element or null if not found
762 Sets TransformerFactory attributes for external DTD and stylesheet access. @param transformerFactory TransformerFactory instance to configure.
763 Converts a string with a binary prefix to a long value. @param s The string to convert, e.g., "10k" @return The long value of the string.
764 Formats a long value with binary prefixes and units. @param n value to format @param unit unit symbol @param decimalPlaces decimal places for formatting
765 Formats a fraction as a string with specified decimal places. @param fraction The fraction to format. @param decimalPlaces Number of decimal places.
766 Converts byte array to hex string. @param bytes byte array to convert @param start start index @param end end index @return hex string representation
767 Masks a double to two decimal places using a format string. @param d The double to mask. @return Formatted string representation of the double.
768 Exits application with status, logs error, and handles exceptions. @param ee ExitException containing status and message.
769 Handles HaltException, logs error, and either halts or propagates. @param he HaltException to handle @throws HaltException if caught error needs to be re-thrown
770 Adds a shutdown hook with priority and timeout. @param shutdownHook Runnable to execute during shutdown @param priority Hook priority @param timeout Timeout for hook execution @param unit TimeUnit of timeout
771 Registers a shutdown hook. @param shutdownHook Runnable to execute during shutdown. @return True if hook was added, false otherwise.
772 Registers a shutdown hook. @param shutdownHook Runnable to execute during shutdown. @return True if hook was successfully added, false otherwise.
773 Gets an input stream for a resource using the current thread's CL. @param resourceName Resource name. @throws IOException if resource cannot be read.
774 Constructs a LineReader with the given input stream. Uses the default buffer size. @param in The input stream to read from.
775 Executes command if enough time has passed since last execution.
776 Creates a ThreadFactory with a prefix for thread names. @param prefix Prefix for the created threads' names.
777 Doubles capacity if size exceeds threshold and capacity is below max.
778 Creates an ArrayList and adds elements from the iterator. @param elements Iterator of elements to add to the list. @return ArrayList containing elements from the iterator.
779 Adds elements from an iterable to a collection. @param addTo Collection to add elements to. @param elementsToAdd Iterable of elements to add. @return True if the collection was modified.
780 Creates an ArrayList with the specified initial capacity. @param initialArraySize Initial size of the ArrayList. @return An ArrayList with the given initial capacity.
781 Serializes an object to an output stream. @param instance Object to serialize. @param dataOutputStream Output stream to write to.
782 Initializes a new `OperationDuration` with start and finish times.
783 Sets the finished time using System.m1().
784 Creates a Duration object from the operation's duration in milliseconds.
785 Formats operation duration as human-readable string.
786 Calculates a masked summation based on lengthBytes and mod. @param lengthBytes number of bytes @param mod the modulus @return the resulting product
787 Combines two CRC values using XOR and a masked summation. @param crcA First CRC value. @param crcB Second CRC value. @param monomial Monomial value for masked summation. @param mod Modulus value.
788 Converts an integer value to a byte array. @param value integer to convert @return byte array representation of the integer
789 Converts a 4-byte CRC result to a hex string. @param bytes byte array containing the CRC value @return hex string representation of the CRC
790 Formats byte array as hex string, separated by commas. @param bytes byte array to format @return formatted hex string representation
791 Extracts files from a JAR stream to a directory, filtering by regex. @param inputStream input stream @param toDir destination directory @param unpackRegex regex pattern for file extraction
792 Extracts files from a JAR to a directory, filtering by regex. @param jarFile JAR file to extract from. @param toDir Directory to extract files to.
793 Finds the nth occurrence of byte 'b' in 'utf' within [start, end]. Returns index or -1 if not found.
794 Stores a value associated with a key using a WeakReference. @param key The key for the entry. @param value The value to store (held weakly). @return The value stored (held weakly).
795 Retrieves value associated with key from WeakReferenceMap. @param key key to look up @return Value or null if key is not found.
796 Checks if a value exists for the given key. @param key The key to check for existence. @return True if a value exists, false otherwise.
797 Retrieves or creates a value for the given key. @param key The key to retrieve or create a value for. @return The resolved value associated with the key.
798 Counts and removes entries with null values in the map. Increments lost count and notifies listener for removed keys.
799 Creates a snapshot of current suppressed stats, resets counters. @return SuppressedSnapshot object with current stats.
800 Calculates time difference and formats it. @param finishTime Finish time in milliseconds. @param startTime Start time in milliseconds.
801 Parses string into key-value pairs. @param str Input string to parse. @return Map of key-value pairs.
802 Splits a string by a separator, handling escape characters. @param str String to split, escapeChar, separator. @return Array of split strings.
803 Masks characters in a string based on escapeChar and charsToEscape. @param str String to mask, returns null if null.
804 Masks characters in a string based on escape and escape chars. @param str input string @param escapeChar escape character @param charsToEscape chars to escape @return masked string
805 Retrieves the common version info string.
806 Returns the masked version info string.
807 Retrieves the masked version info.
808 Retrieves masked version info from the common version info.
809 Returns masked version information. Uses the default value if unavailable.
810 Retrieves the masked version info. Delegates to m1() for the actual value.
811 Returns the masked version information.
812 Returns the common version info string.
813 Returns the masked version info from the common version info.
814 Constructs a FilteringRemoteIterator with a source iterator and filter. @param source The iterator to filter. @param filter Filter function, must not be null.
815 Constructs a HaltableRemoteIterator. @param source The iterator to wrap. @param continueWork Callable to check if iteration should continue.
816 Checks if there's a next element. Returns true if available, otherwise delegates to m1().
817 Creates a MaybeClose instance, enabling automatic resource closing. @param o Resource object to manage.
818 Executes a Callable using an executor and returns a CompletableFuture. @param executor Executor for asynchronous task execution. @param call The Callable task to be executed.
819 Constructs a LazyAutoCloseableReference with a constructor. @param constructor Callable to create the resource.
820 Creates a LazyAtomicReference from a Supplier. @param supplier Supplier to provide the atomic reference value.
821 Gets the value, throws exception if closed. @throws IOException if the reference is closed
822 Gets the value, initializing it if necessary. @return The value or null if initialization fails.
823 Executes a CallableRaisingIOE and returns the result. @param call Callable that may raise an IOException. @return Result of the callable.
824 Adapts a CallableRaisingIOE to a Supplier, using unchecked. @param call Callable that may raise IOE @return Supplier that wraps the callable
825 Creates a Builder instance for processing a RemoteIterator. @param items Iterator of items to be processed.
826 Propagates the first exception from a collection, re-throwing it.
827 Creates a Builder with a RemoteIterator from the given Iterable. @param items The Iterable to wrap in a RemoteIterator.
828 Returns the Builder with exception suppression enabled.
829 Re-throws an ExecutionException after wrapping it in an IOException.
830 Rethrows a CompletionException as an IOException after processing.
831 Configures an object using JobConf and JobConfigurable classes. @param theObject object to configure @param conf Hadoop configuration
832 Retrieves a class by name. Throws ClassNotFoundException if not found. @param name class name to retrieve
833 Prints thread dump information to a stream with a title. @param stream Output stream for the thread dump. @param title Title of the thread dump.
834 Constructs a Configuration object, optionally loading defaults. @param loadDefaults whether to load default configuration properties
835 Sends an HTTP error response with masked exception details. @param response HTTP response object @param status HTTP status code @param ex Throwable exception to mask
836 Creates a Response object with error details from an exception. @param status HTTP status code for the response @param ex The exception to extract error information from @return A Response object containing error details in JSON format
837 Initializes the CRC32C object by resetting the CRC value.
838 Iterates through the collection, removing each element.
839 Gets user's groups on Windows or via bash id commands. @param user The username to query. @return An array of strings representing the command.
840 Gets user groups. Returns different commands based on OS. @param user The username to query. @return Array of strings representing the shell command.
841 Returns shell command based on OS: Windows uses m1(), ls -F; else ls -ld.
842 Constructs a chmod command string based on recursive flag. @param perm permission string @param recursive whether to apply recursively @return String array representing the chmod command
843 Constructs a chown command based on the OS. @param owner The owner to set for the file. @return An array representing the chown command.
844 Constructs a shell command for creating a symbolic link. @param target The target file/directory. @param link The link name.
845 Constructs readlink command based on OS. @param link The link to read. @return Array of command strings.
846 Executes kill command based on code and PID. @param code kill signal code @param pid process ID to kill @return Array of strings representing the command
847 Creates a file with OS-specific extension in the parent directory. @param parent Parent directory for the file. @param basename Base filename string. @return File object with the constructed path.
848 Resolves Hadoop home directory from system properties/env. @return Hadoop home directory as a File object.
849 Returns Hadoop home file, throws exception if failure cause exists.
850 Resolves the path to an executable within the Hadoop bin directory. @param hadoopHomeDir Hadoop home directory @param executable Executable file name @return File object representing the executable
851 Returns WINUTILS_FILE if not null, otherwise throws exception.
852 Iterates through shells, signals processes, and clears the list.
853 Shuts down a thread with default timeout. @param thread The thread to shutdown.
854 Shuts down an ExecutorService with default timeout. @param service ExecutorService to shutdown, null safe.
855 Creates a new phase Progress object, links it, and returns.
856 Creates a new phase with the given weightage and links it. @param weightage Phase's weightage, must be within 0.0 to 1.0 @return The newly created Progress phase object
857 Calculates overall progress based on phases and weightages.
858 Updates progress and notifies parent if available. Updates local progress and calls parent's m1() method.
859 Retrieves data from ZooKeeper node as a String. @param path Node path to retrieve data from. @return String data or null if not found.
860 Retrieves data from ZooKeeper node as a String. @param path Node path. @return String data or null if not found.
861 Writes data to a ZooKeeper node. @param path node path @param data data to write @param version optimistic lock version
862 Creates a ZooKeeper node if it doesn't exist, with specified ACLs. @param path ZK node path. @param zkAcl Access control list for the node. @return True if node was created, false otherwise.
863 Checks if node exists, then deletes it from ZooKeeper. @param path ZK node path to delete. Returns true on success.
864 Performs a safe transaction if a ZK node exists. @param path ZK node path @param fencingACL ACLs for the transaction @param fencingNodePath Path for the transaction
865 Registers a program with the given name and description. @param name Program name. @param mainClass Class containing the main method. @param description Program description.
866 Binds a method to the builder. @param targetClass Class containing the method. @param methodName Method name. @param argClasses Method argument types.
867 Binds a method to the builder. @param targetClass Class containing the method. @param methodName Method name. @param argClasses Method argument types.
868 Creates an UnboundMethod object for the given method name. @param name The name of the unbound method. @return An UnboundMethod object.
869 Checks if all unbound methods are not no-ops. @param methods Array of UnboundMethod instances to check. @return True if all methods are not no-ops, false otherwise.
870 Checks if the unbound method is not a no-op. @param method The unbound method to check. @return True if the method is not a no-op.
871 Binds the method to a receiver, checking if it's static. @param receiver The object to bind the method to. @return A BoundMethod instance with the receiver bound.
872 Creates a StaticMethod instance, invoking m2 and checking state.
873 Finds JAR path containing the given class. @param clazz Class to find JAR path for. @return JAR path or null if not found.
874 Finds resource path for a class. @param clazz Class to find resource for. @return Resource path or null if not found.
875 Writes checksum to output stream and resets if specified. @param out output stream to write checksum @param reset resets checksum if true @return checksum size
876 Calculates and writes checksum to buffer, resets if specified. @param buf data buffer, offset to write checksum @param offset offset in buffer @param reset if true, resets the checksum calculation @return size of checksum
877 Creates a rate limiter: unlimited if capacity is 0, restricted otherwise.
878 Registers signal handlers for TERM, HUP, INT signals. Logs registered signals; throws exception if already registered.
879 Constructs a LightWeightGSet with a recommended size. @param recommended_length suggested size for the set
880 Populates include/exclude sets from current host details. @param includes Set to populate with included hosts. @param excludes Set to populate with excluded hosts.
881 Populates include/exclude host sets from current host details. @param includeHosts Set to populate with included hosts. @param excludeHosts Map to populate with excluded hosts & counts.
882 Computes a hash value from a byte array. @param key The byte array to hash. @param nbytes Length of the key. @param initval Initial hash value.
883 Creates a Hash instance based on the provided hash type. @param type Hash type identifier. @return Hash instance or null if type is invalid.
884 Default constructor for the CountingBloomFilter.
885 Default constructor. Calls superclass constructor.
886 Default constructor for DynamicBloomFilter.
887 Generates multiple hash values from a Key. @param k Key object to hash; throws exception if null/empty. @return int[] array of hash values.
888 Constructs an AutoCloseableLock using a ReentrantLock.
889 Acquires the lock using the lock's m1() method.
890 Logs an error message and stack trace. @param e Throwable object. @param text Error message. @param args Arguments for message formatting.
891 Logs an error message with code and text. @param errorcode Error code for logging. @param text Error message text.
892 Logs class loading information, including name and source URL. @param name Class name @param clazz Loaded class
893 Retrieves the current GC data. @return GcData object containing GC metrics.
894 Initializes the CRC32 object by resetting the CRC value.
895 Executes shutdown hooks, tracks timeouts. Iterates through hooks, executes them with timeouts. @return Number of shutdown hooks that timed out.
896 Adds an element to the priority queue and maintains heap order. @param element The element to add.
897 Removes and returns the highest priority element. Returns null if the queue is empty.
898 Calls m1.
899 Creates a HashSet and populates it with elements from an iterator. @param elements Iterator providing elements to add to the set. @return A HashSet containing the elements from the iterator.
900 Creates a HashSet with a mask calculated from expectedSize.
901 Skips to a new value, throwing an exception if it's too small. @param newValue The new value to skip to. @throws IllegalStateException if newValue is less than current value.
902 Creates a TableListing instance using configured columns, header visibility, and wrap width.
903 Checks if a configuration key is deprecated. @param key The configuration key to check.
904 Checks if a key is deprecated and accessed. @param name The configuration key name to check. @return True if the key is deprecated and accessed, false otherwise.
905 Reloads configurations from the registry. Logs the action.
906 Loads default configuration resources if not already loaded. @param name resource name
907 Converts a duration string to a value in the specified unit. @param name Duration name, @param vStr Duration string, @param unit Unit.
908 Gathers properties for each tag in the list. @param tagList List of tags to retrieve properties for. @return Properties object containing properties for each tag.
909 Redacts configuration value if key is sensitive. @param key Config key. @param value Config value.
910 Redacts a configuration value if the key is sensitive. @param key Configuration key. @param value Configuration value.
911 Starts a reconfiguration task if conditions are met. Checks if server is running and no task is already running.
912 Creates a new DeprecationContext from another and deltas. @param other source DeprecationContext, may be null @param deltas array of delta changes to apply
913 Constructs a ReconfigurationException with property change details & cause. @param property Property name. @param newVal New value. @param oldVal Old value. @param cause The underlying cause.
914 Constructs a ReconfigurationException with property change details. @param property Property name. @param newVal New value. @param oldVal Old value.
915 Checks if manual HA state management is allowed. Returns false if auto-failover is enabled & not forced.
916 Executes a command via SSH and returns the exit status. @param session SSH session @param cmd Command to execute @return Exit status of the command
917 Checks health and state; throws exception if not healthy/target.
918 Reads file range into a buffer using provided operation. @param range FileRange to read. @param buffer ByteBuffer to write to. @param operation Function to read bytes from the range.
919 Sorts and validates FileRange objects, throwing EOFException if out of bounds. @param input List of FileRange objects to process. @param fileLength Optional file length for bounds checking.
920 Constructs a BlockManager with the provided block data. @param blockData The BlockData to manage; cannot be null.
921 Validates the input data; throws exception if null. @param data The BufferData object to validate.
922 Adds an item to the pool, validating its origin. @param item The item to add; must be part of this pool.
923 Throws exception if buffer state is not one of the expected states. @param states array of expected State objects
924 Validates that the argument is not empty. @param arg The argument to validate. @param argName Name of the argument being validated.
925 Validates a collection has a specific number of elements. @param collection Collection to validate. @param numElements Expected number of elements. @param argName Name of the collection argument.
926 Checks if a path exists; throws exception if not. @param path The path to check. @param argName Name of the argument being validated.
927 Creates a new BoundedResourcePool with the specified size. @param size the maximum number of resources in the pool
928 Constructs a BufferPool with specified size and buffer size. @param size maximum number of buffers in the pool @param bufferSize size of each buffer in bytes
929 Validates blockNumber; throws IAE if negative. @param blockNumber The block number to validate.
930 Constructs a BufferData instance with given block number and buffer. @param blockNumber Block number for the buffer. @param buffer The ByteBuffer to manage.
931 Initializes a Retryer with delay and interval parameters. @param perRetryDelay Delay between retries. @param maxDelay Maximum delay. @param statusUpdateInterval Interval for status updates.
932 Validates array: checks for null/empty and size > 0. @param array The array to validate. @param argName Name of the argument being validated.
933 Validates byte array; checks for null/empty and array size. @param array The byte array to validate. @param argName Name of the argument being validated.
934 Validates short array; checks for null/empty and size. @param array The short array to validate. @param argName Name of the argument being validated.
935 Validates array; checks for null/empty and size > 0. @param array The array to validate. @param argName Name of the argument being validated.
936 Validates array: checks for null/empty and size > 0. @param array The array to validate. @param argName Name of the argument being validated.
937 Validates the Iterable has at least one element. @param iter Iterable to validate; throws IAE if empty. @param argName Name of the argument being validated.
938 Deletes paths, handling exceptions and adding to result list. @param paths Collection of paths to delete. @return List of deletion results (Path, Exception).
939 Applies a function to an IOStatisticsSnapshot, handling IOEs. @param source Serializable source object. @param fun Function to apply. @return Result of the function.
940 Constructs a FlagSet with specified enum class, prefix, and flags. @param enumClass Enum class for the flags. @param prefix Prefix for enum names. @param flags Initial set of flags, or null for an empty set.
941 Closes the file system, logs execution, and removes from cache.
942 Compares this FileStatus with another. @param o The other FileStatus object to compare to.
943 Delegates comparison to the superclass. @param o The other FileStatus object to compare to.
944 Converts FileStatus array to Path array, or returns path if null. @param stats array of FileStatus objects @param path a Path object @return array of Path objects
945 Checks if the path capability is FS_READ_ONLY_CONNECTOR. @param path Path object. @param capability Capability string.
946 Creates a JsonSerialization instance for IOStatisticsSnapshot. @return JsonSerialization object with specific configuration.
947 Creates a StorageStatisticsFromIOStatistics. @param name Statistics name. @param scheme Scheme. @param source IOStatistics source.
948 Returns StorageStatistics object using EmptyStorageStatistics. Uses result of m1().m2() for initialization.
949 Constructs a PathIsDirectoryException with the given path. @param path The path that is a directory.
950 Constructs a PathIsNotDirectoryException with a path. @param path The path that is not a directory.
951 Constructs a PathOperationException for unsupported path operations. @param path The file path associated with the error.
952 Constructs PathIsNotEmptyDirectoryException with a directory path. @param path The path of the non-empty directory.
953 Sets the buffer size for the output stream. @param bufSize Size of the buffer in bytes. @return Masked builder instance for chaining.
954 Sets the replication factor for the output stream. @param replica the desired replication factor @return Masked builder instance for chaining.
955 Sets the block size for the output stream. @param blkSize block size in bytes @return Masked builder instance for chaining.
956 Sets recursive mode to true and returns the masked builder.
957 Sets the CREATE flag and returns a masked builder instance.
958 Sets the overwrite flag and returns a masked builder instance. @param overwrite true to overwrite, false to prevent overwrite @return Masked builder instance.
959 Sets the APPEND flag and returns a masked builder instance.
960 Sets the hosts array, using weak interning if provided. @param hosts Array of host strings to set.
961 Sets cached hosts, interning strings if provided. @param cachedHosts Array of host strings to cache.
962 Masks the input string array using weak interning. @param names Array of strings to mask; null if empty.
963 Sets topology paths, interning strings for efficiency. @param topologyPaths Array of topology paths to set.
964 Checks if a file exists. Returns false if file not found.
965 Handles exceptions, returning them or wrapping with a message. @param path File path. @param methodName Method name. @param exception Exception to handle.
966 Seeks to a position and verifies sync marker. @param position The offset to seek to in the file.
967 Seeks to the first position within the data stream.
968 Registers expression classes with the given factory. @param factory ExpressionFactory to register expressions with.
969 Registers various file system commands with the given factory. @param factory CommandFactory to register commands with.
970 Expands a file pattern into a list of fully resolved paths. @param filePattern File pattern to expand. @return List of expanded file paths.
971 Lists file statuses under a path, filtered by a provided filter. @param f The path to list. @param filter Filter to apply to each status. @return Array of FileStatus objects matching the filter.
972 Lists file statuses for given paths, filtered by a provided filter. @param files Paths to list statuses for. @param filter Filter to apply. @return Array of FileStatus objects matching the filter.
973 Renews a delegation token. @param url URL for renewal request. @param token The token to update. @param renewer The renewer principal.
974 Obtains a delegation token authentication ticket. @param url URL to authenticate. @param token Token containing token.
975 Delegates URL access using a delegation token and user. @param url URL to access. @param token Token containing the delegation token.
976 Creates a FileEncryptionInfo object with the provided details. @param suite CipherSuite, version, edek, iv, keyName, ezKeyVersionName
977 Sets the file permissions and returns the builder. @param perm The file system permission to set.
978 Sets checksum option and returns the builder. @param chksumOpt Checksum option to set.
979 Constructs a WrappedIOException with a given IOException cause. @param cause The IOException to wrap. Must not be null.
980 Initializes with a function for resolving file system links. @param fn The function to resolve links; cannot be null.
981 Constructs a GlobBuilder with a FileContext. @param fc The FileContext to use; cannot be null.
982 Constructs a GlobBuilder with a provided FileSystem. @param fs The FileSystem to use for path operations.
983 Sets the file permission and returns the builder. @param perm The file permission to set. @return The builder instance with updated permission.
984 Sets the progressable object and returns a masked builder. @param prog The progressable object to set. @return Masked builder instance.
985 Sets checksum option and returns a masked builder instance. @param chksumOpt Checksum option to set. @return Masked builder instance.
986 Validates byte array parameters for writing; throws exception if invalid. @param b The byte array to validate. @param off The starting offset. @param len The number of bytes to write.
987 Checks if s1 contains s2. @param s1 The string to search within. @param s2 The string to search for.
988 Checks context and returns true if stale; otherwise, false. @param ctx The ZooKeeper context object to evaluate.
989 Retrieves Statistics for a file system scheme, creating if needed. @param scheme File system scheme. @param cls Class of the file system. @return Statistics object.
990 Copies data from an input stream to an output stream. @param in Input stream to read from. @param out Output stream to write to. @param buffSize Buffer size for copying. @param close Whether to close streams after copying.
991 Copies data from an InputStream to an OutputStream. @param in Input stream to read from. @param out Output stream to write to. @param count Number of bytes to copy. @param close Whether to close streams after copying.
992 Checks directory accessibility by writing to and deleting a file. @param dir Directory to check; throws DiskErrorException on failure.
993 Checks if any storage type quota is greater than zero. Uses StorageType.m2() to iterate through storage types.
994 Checks if any storage type has consumed quota. Uses StorageType.m2() to iterate and check consumption.
995 Delegates equality check to the superclass. @param o Object to compare; must be a FileStatus.
996 Delegates hash code calculation to the superclass.
997 Resets the sample count and sum to initial values.
998 Copies data from another MeanStatistic instance. @param other The MeanStatistic to copy data from.
999 Formats IOStatistics into a string. @param statistics IOStatistics object to format, null returns "" @return Formatted string representation of statistics
1000 Appends a filtered and sorted map to StringBuilder, formatted by type. @param sb StringBuilder to append to @param type Type string @param map Map to filter and sort @param isEmpty Predicate to check for empty values
1001 Creates a DurationTracker instance with a key and a count of 1. @param key Identifier for tracking duration.
1002 Returns an iterator of LongStatistic objects from IO counters.
1003 Records I/O statistics (mean, min, max) for a given prefix. @param prefix Statistic prefix. @param durationMillis Duration value.
1004 Returns a DynamicIOStatistics instance. Resets the instance.
1005 Adds a counter function for a given key. @param key Counter key. @param eval Function to evaluate the counter value.
1006 Adds a long-typed gauge statistic with a given key and function. @param key Gauge key. @param eval Function to evaluate the gauge value.
1007 Adds a minimum function evaluator for a given key. @param key Key for the evaluation. @param eval Function to evaluate.
1008 Adds a maximum evaluation function for a given key. @param key Key for the maximum evaluation. @param eval Function to calculate the maximum.
1009 Adds a mean statistic evaluator for a given key. @param key Key for the mean statistic. @param eval Function to calculate the mean.
1010 Registers an interrupt handler for the given signal name. @param signalName Name of the interrupt signal.
1011 Returns a map of statistics, applying a copy function. @param copyFn Function to apply during map copying. @return A map containing the statistics.
1012 Copies entries from source map to a new map. @param source Source map to copy from.
1013 Returns a new, empty IOStatisticsSnapshot.
1014 Constructs an IOStatisticsContextImpl with a thread ID and context ID. @param threadId Thread identifier. @param id Unique context identifier.
1015 Creates a new, empty IOStatisticsSnapshot.
1016 Checks if thread I/O statistics tracking is enabled.
1017 Retrieves IO statistics for the output stream.
1018 Retrieves IO statistics from the input stream.
1019 Calculates IO statistics for the data. @return IOStatistics object representing data access stats.
1020 Calculates IO statistics for the data chunks. @return IOStatistics object representing data IO.
1021 Retrieves IO statistics for the input stream.
1022 Retrieves IO statistics for the wrapped stream.
1023 Retrieves IO statistics for the output stream.
1024 Retrieves IO statistics for the input stream.
1025 Retrieves IO statistics for the input stream.
1026 Verifies CRC checksums against provided data and expected values. @param type Checksum type.
1027 Decrypts data using provided decryptor, position, and IV. @param decryptor Decryptor object for decryption. @param position Byte offset in the encrypted data. @param iv Initialization vector for decryption.
1028 Encrypts data from the input buffer to the output buffer.
1029 Constructs an MD5MD5CRC32GzipFileChecksum object with default values.
1030 Constructs a checksum object with default parameters.
1031 Constructs a GlobPattern object from a glob pattern. @param globPattern The glob pattern to be used.
1032 Gets file path. Uses canonical path if specified. @param file The file object.
1033 Gets file path, throws UnsupportedOperationException on Windows. @param file The file object.
1034 Extracts files from a zip archive to the specified directory. @param inputStream Zip archive input stream @param toDir Directory to extract files to
1035 Unzips a file to a directory, handling permissions. @param inFile Zip file to unzip. @param unzipDir Directory to extract files to.
1036 Releases the SFTP channel to the connection pool. @param channel The SFTP channel to release.
1037 Shuts down the SFTP connection pool, releasing all channels.
1038 Initializes the buffer and checksum array with specified size. @param size size of the buffer to be created
1039 Copies statistics from another Statistics object. @param other The Statistics object to copy from.
1040 Calculates total bytes read using a custom aggregator. @return Total bytes read as a long value.
1041 Returns total bytes written, aggregating from StatisticsData.
1042 Calculates total read operations using a custom aggregator. Returns the sum of read and large read operations.
1043 Returns the total number of large read operations. Uses an aggregator to sum largeReadOps from StatisticsData.
1044 Returns the total number of write operations. Uses an aggregator to sum write operation counts.
1045 Calculates total remote read time MS using an aggregator. @return Total remote read time in milliseconds.
1046 Calculates total statistics by aggregating data. Returns a StatisticsData object containing the aggregated data.
1047 Calculates total bytes read erasure coded. Uses StatisticsAggregator to sum bytesReadErasureCoded.
1048 Aggregates statistics data using a custom StatisticsAggregator.
1049 Validates CreateFlag options; throws exception if invalid. @param flag EnumSet of CreateFlag values to validate.
1050 Validates CreateFlag options, ensuring APPEND is present. @param flag EnumSet of CreateFlag values to validate.
1051 Normalizes a URI, handling authority and port based on flags. @param uri The URI to normalize. @param supportedScheme The expected URI scheme.
1052 Constructs an ArrayPrimitiveWritable with the given component type. @param componentType The class of the array's primitive component.
1053 Converts a permission string to a bitmask representation. @param permString Permission string (e.g., "rwca") @return Integer bitmask representing the permissions
1054 Selects checksum options, prioritizing user-defined settings. @param defaultOpt Default checksum options. @param userOpt User-defined checksum options.
1055 Applies a mask to a URI. @return URI with applied mask.
1056 Constructs ContentSummary with length, file, and directory counts. Delegates to the primary constructor.
1057 Returns a dummy FsStatus object; capacity and remaining are max.
1058 Initializes the HttpReferrerAuditHeader from a builder. Copies builder data, adds attributes, and builds initial header.
1059 Releases a buffer associated with the given data. @param data The BufferData object whose buffer is released.
1060 Constructs a SemaphoredDelegatingExecutor with limits. @param executorDelegatee Executor to delegate tasks to. @param permitCount Semaphore permit count. @param fair Whether the semaphore is fair.
1061 Releases a READY buffer with highest mask value for block. @param blockNumber The block number associated with the buffer.
1062 Retrieves a masked value from the buffer. Calls m1().
1063 Checks if the given position is within the buffer's bounds. @param pos The position to check. @return True if within bounds, false otherwise.
1064 Returns the buffer's starting offset.
1065 Returns the IO statistics context based on thread stats enablement. Returns active context if enabled, otherwise returns an empty one.
1066 Sets the I/O statistics context for the current thread. @param statisticsContext The context to set, or null.
1067 Combines overlapping file ranges into CombinedFileRanges. @param sortedRanges List of sorted file ranges. @param chunkSize Chunk size for alignment. @param minimumSeek Minimum seek distance. @param maxSize Maximum size. @return List of combined file ranges.
1068 Combines file ranges into checksummed ranges. @param dataRanges Ranges to combine. @param bytesPerSum Bytes per checksum. @param minSeek Minimum seek distance. @param maxSize Maximum size.
1069 Constructs a Name object with default case sensitivity (true).
1070 Evaluates expressions for a path, returning a combined Result. @param item PathData object to evaluate against. @param depth Depth of evaluation (unused). @return Combined Result of all child expression evaluations.
1071 Gets the FindOptions object, creating it if it doesn't exist.
1072 Parses command-line arguments, handling options and values.
1073 Returns a description string, handling deprecation. Returns description from field or deprecated message.
1074 Logs an error message using the masked name. @param message The error message to log.
1075 Masks the command based on usage. Returns masked command or command with usage if usage exists.
1076 Initializes ScopedAclEntries with ACL entries, separating access/default. @param aclEntries List of AclEntry objects to process.
1077 Prints table rows to the output stream using formatted strings. @param out PrintStream to write the formatted table rows to.
1078 Creates a Location object. @param allow whether location properties can be changed
1079 Creates a Data object with the specified allowChanged flag. @param allow boolean indicating whether changes are allowed @return A new Data object
1080 Constructs a Shell instance with default interval (0).
1081 Creates a DelegationTokenAuthenticatedURL.Token from a Token. @param dToken The input token to create the new token from. @return A DelegationTokenAuthenticatedURL.Token object.
1082 Lists file statuses for a path, delegating to the underlying FS. @param f The path to list statuses for. @return RemoteIterator of LocatedFileStatus objects.
1083 Opens a file stream with specified parameters. @param path Path to the file. @param parameters OpenFileParameters object. @return CompletableFuture containing FSDataInputStream.
1084 Gets the fallback filesystem. Returns null if unavailable.
1085 Encrypts/decrypts data using OpenSSL. @param input Input buffer. @param output Output buffer. @return Number of bytes processed.
1086 Decrypts data to the provided ByteBuffer. @param output ByteBuffer to store decrypted data @return Number of bytes decrypted
1087 Creates an interceptor from settings string. @param interceptorSettingsString Interceptor configuration. @return RegexMountPointInterceptor or null if invalid.
1088 Normalizes the path, replacing Windows separators with forward slashes. @param scheme The scheme of the path (e.g., "file"). @param path The path string to normalize.
1089 Checks if a path string starts with a separator. @param pathString Path string to check. @param slashed Whether the path is slashed. @return True if the path starts with a separator.
1090 Checks if the path starts with a separator. @param uri The URI object representing the path. @return True if the path starts with a separator.
1091 Masks the integer value of a Path's m1 result. @param p The Path object to process. @return Masked integer value.
1092 Checks if the given path is under the base path. @param path The path to check.
1093 Finds the next available ID for a file, incrementing lastId. @param initial The initial path. @param lastId The last known ID. @return The next available ID.
1094 Calculates a masked position based on input. @param n The input value; returns 0 if <= 0.
1095 Reads data from an InputStream into a ByteBuffer from a pool. @param stream Input stream to read from. @param bufferPool ByteBuffer pool to allocate from. @param maxLength Maximum number of bytes to read.
1096 Processes evaluated entries and performs associated actions.
1097 Creates and initializes a new CommonAuditContext object. Initializes the audit context with thread information.
1098 Constructs an FsPermission with user, group, and other actions. @param u User action @param g Group action @param o Other action
1099 Sets file system permissions from a short value. @param mode short value representing permissions
1100 Reads file system permissions from input stream. @param in Input stream to read permission bits from. @return FsPermission object initialized from the input.
1101 Gets action for an AclEntry, using default permission. @param entry The AclEntry to evaluate.
1102 Creates a PermissionStatus instance with user, group, and permission. @param user Username. @param group Groupname. @param permission FsPermission.
1103 Parses an ACL specification string into a list of AclEntry objects. @param aclSpec ACL specification string, comma-separated. @param includePermission Whether to include permission details.
1104 Creates an FsCreateModes instance with the given masked/unmasked permissions. @param masked The masked FsPermission. @param unmasked The unmasked FsPermission.
1105 Prints ACL entry details, showing effective permissions if different. @param aclStatus ACL status object. @param fsPerm Base permission. @param entry The ACL entry to process.
1106 Splits a string by comma into a string array. @param str The string to split.
1107 Reads a byte from the buffer. Calls m1() first. Returns the byte or -1 if EOF.
1108 Delegates to the underlying ByteBuffer's {@code m2()} method. Returns true if the buffer has remaining bytes.
1109 Starts a block upload and transitions to the Upload state. @throws IOException if an I/O error occurs during the transition
1110 Transitions to Closed state if not already closed. @return True if transitioned, false otherwise.
1111 Calls super.m1() and then calls out.m1().
1112 Retrieves or creates Statistics for the given URI. @param uri The URI to get or create statistics for.
1113 Delegates m2() call to the AllocatorPerContext instance. @param contextCfgItemName Context configuration item name
1114 Writes sync data if needed, updating lastSyncPos. Sync data is written to the output stream.
1115 Retrieves the current output position. @return Current position as a long value.
1116 Calculates total output size: cached position + buffered bytes.
1117 Calculates content summary for a file or directory. @param f The Path object representing the file/directory.
1118 Processes user/group strings, populating users/groups sets. @param userGroupStrings Array of strings representing user/group data.
1119 Parses a comma-separated string into an EnumSet. @param key Key associated with the enum values. @param valueString Comma-separated string of enum values. @param enumClass Enum class to parse. @param ignoreUnknown Whether to ignore unknown values. @return EnumSet of parsed enum values.
1120 Checks if the current state matches the expected state. @param expectedState The state expected for the operation. @throws ServiceStateException if states do not match.
1121 Constructs an AbstractService with the given name. @param name Service name.
1122 Throws exception if state transition is invalid. @param name Service name. @param state Current state. @param proposed Proposed state.
1123 Creates a ServiceLaunchException with a failure code and cause. @param exception The exception that caused the failure.
1124 Validates existence of configuration files. @param filenames array of configuration file names
1125 Creates a ServiceLaunchException from a Throwable, setting exit code. @param thrown The exception to wrap. @return A ServiceLaunchException containing the original exception.
1126 Constructs a ServiceShutdownHook, holding a weak reference to the service.
1127 Records service failure, updating failure state if not already set. @param exception The exception that caused the failure.
1128 Records a lifecycle event with timestamp and current state.
1129 Stops a specified number of services, handling exceptions. @param numOfServicesStarted Number of services to stop. @param stopOnlyStartedServices Whether to stop only started services.
1130 Stops a service and logs exceptions. @param service Service to be stopped. @return Exception if stopping fails, null otherwise.
1131 Compares this UTF8 with another using byte-wise comparison. @param o The other UTF8 object to compare with. @return int comparison result.
1132 Checks if two UTF8 objects are equal by comparing their bytes. @param o The object to compare with. @return True if objects are equal, false otherwise.
1133 Compares this MD5 hash with another. @param that The MD5Hash to compare to. @return int comparison result.
1134 Compares this BinaryComparable with another. @param other The other BinaryComparable to compare to. @return int comparison result.
1135 Compares this object with another byte array segment. @param other,off,len Other array, offset, length @return int comparison result
1136 Compares two binary objects using WritableComparator. @return int result of comparison.
1137 Calculates a double value from a byte array at a given start index. @param bytes byte array to read from @param start starting index in the byte array
1138 Resizes the underlying byte array if the requested size exceeds capacity. @param size the new size for the byte array
1139 Checks if a file is readable. Uses NativeIO on Windows. @param f The file to check. @return True if readable, false otherwise.
1140 Checks if a file has write access on Windows. @param f file to check @return true if write access exists, false otherwise
1141 Checks if a file has execute permission. Windows uses NativeIO. @param f The file to check. @return True if executable, false otherwise.
1142 Returns the singleton ReadaheadPool instance, creating it if needed. Uses NativeIO.m1() to determine if native code is available.
1143 Returns m2 if native code is available, otherwise 0.
1144 Calculates checksums for data, using native code if available. @param data Data to checksum. @param dataOffset Offset into data. @param dataLength Length of data. @param sums Checksum array. @param sumsOffset Offset into sums array.
1145 Opens a file for writing, creating it if it doesn't exist. @param f The file to open. @param permissions File permissions to set. @return A FileOutputStream object.
1146 Drains the buffer pool, freeing each buffer using CryptoStreamUtils.
1147 Releases resources held by input and output buffers.
1148 Gets file status. @param fd File descriptor @return Stat object containing file status
1149 Gets file stat, resolving user/group names if not Windows. @param path The file path to get stat for. @return Stat object containing file metadata.
1150 Initializes the stream with a new byte array of given capacity. @param capacity The capacity of the underlying byte array. @param limit The maximum number of bytes allowed.
1151 Constructs an EnumSetWritable with an EnumSet. @param value The EnumSet to wrap.
1152 Extends the buffer with data from input stream. @param in Input stream. @param length Number of bytes to read.
1153 Initializes keyDataInputStream with keyBuffer data. @return keyDataInputStream, initialized with key data.
1154 Sets the Writable object's data from a Base64-decoded string. @param obj The Writable object to set. @param newValue Base64 encoded string.
1155 Compares two byte array representations using internal keys. @param b1, s1, l1 First byte array and its offset/length. @param b2, s2, l2 Second byte array and its offset/length.
1156 Checks if the block group has recoverable data. @param blockGroup ECBlockGroup to check. @return True if recoverable, false otherwise.
1157 Calculates the total number of erased blocks in a block group. @param blockGroup ECBlockGroup object to analyze. @return The total number of erased blocks.
1158 Finds indices of erased blocks in the input array. @param inputBlocks EC blocks to check for erasure. @return Array of indices of erased blocks.
1159 Validates input buffers, ensuring correct length and directness. @param buffers Array of ByteBuffers to validate.
1160 Validates input buffers; throws exception if invalid or insufficient. @param buffers Array of byte buffers to validate.
1161 Constructs an `HHXORErasureDecodingStep` with provided blocks and decoders. @param inputBlocks Input EC blocks. @param erasedIndexes Indexes of erased blocks.
1162 Validates input lengths for decoding; throws exception if invalid. @param inputs Array of inputs to be decoded. @param erasedIndexes Indices of erased elements. @param outputs Array to store decoded results.
1163 Constructs an HHXORErasureEncodingStep with provided encoders. @param inputBlocks Input EC blocks. @param outputBlocks Output EC blocks. @param rsRawEncoder Reed-Solomon encoder. @param xorRawEncoder XOR encoder.
1164 Validates input and output array lengths against encoder settings. @param inputs Input array. @param outputs Output array.
1165 Combines two arrays element-wise, padding with the longer array. @param p First array. @param q Second array. @return Combined array.
1166 Multiplies two arrays in a Galois field. @param p First array. @param q Second array. @return Product of p and q as a new array.
1167 Performs Gaussian elimination on a matrix. @param matrix Input matrix to be transformed.
1168 Prints a header, then ECChunk representations, and a footer. @param header Header string to print. @param chunks Array of ECChunk objects to display.
1169 Resets each buffer to empty bytes, then restores position. @param buffers array of buffers to reset @param dataLen length of data to reset
1170 Converts ECChunks to ByteBuffer[], handling null chunks and zeroing. @param chunks array of ECChunks to convert @return ByteBuffer[] containing the converted buffers
1171 Copies dataLen bytes to each buffer at specified offset. @param buffers Array of buffers to copy data into. @param offsets Offsets for data copy in each buffer. @param dataLen Number of bytes to copy.
1172 Returns a GaloisField instance with default size and polynomial.
1173 Initializes a BlockCompressorStream with overhead. @param out Output stream. @param compressor Compressor. @param bufferSize Buffer size. @param compressionOverhead Overhead.
1174 Creates a ZStandardDecompressor with a specified buffer size. @param bufferSize Size of the direct buffers to allocate.
1175 Creates a new Lz4Compressor using the default direct buffer size.
1176 Retrieves the codec class by name. @param codecName Name of the codec class to retrieve. @return Class extending CompressionCodec or null if not found.
1177 Obtains a compressor for the given codec. @param codec The codec to get a compressor for. @return A compressor instance.
1178 Retrieves a Decompressor from the pool or creates a new one. @param codec The codec to get a decompressor for. @return A Decompressor instance.
1179 Releases a compressor back to the pool, if it's releasable. @param compressor Compressor instance to release.
1180 Releases a Decompressor back to the pool, avoiding pooling if needed. @param decompressor The decompressor to release.
1181 Returns the Class object representing the ZStandardCompressor.
1182 Returns the ZStandardDecompressor class. Relies on m1() to initialize; see its documentation.
1183 Default constructor, initializes with default compression settings.
1184 Creates a ZlibCompressor with default compression settings. @param conf Hadoop configuration object.
1185 Reinitializes the Zlib compressor with new configuration. @param conf Hadoop configuration object
1186 Processes GZIP header fields, advancing state based on flags. Handles basic, extra, filename, comment, and CRC fields.
1187 Writes the length and bytes to the output stream. @param out output stream to write to
1188 Reads a variable-length long from stream, casts to int. @param stream Input stream to read from. @throws IOException if value exceeds integer range.
1189 Reads a variable-length int from stream, validates range. @param stream Input stream. @param lower Lower bound. @param upper Upper bound.
1190 Constructs a Text object from a string, encoding it to bytes. @param string The string to encode; throws exception on failure.
1191 Finds the first occurrence of a string within a byte array. @param what String to search for @param start Start index in the byte array @return Index of the string or -1 if not found
1192 Writes a string to the output stream as a variable-length int followed by the string's bytes. @param out output stream @param s string to write @return length of the written string
1193 Writes a string to a DataOutput, ensuring it's within maxLength. @param out output stream @param s string to write @param maxLength max length of string @return actual length of written string
1194 Initializes Text with a byte array. If empty, resets to empty state. @param utf8 The UTF-8 byte array to initialize with.
1195 Copies text data from another Text object. @param other The Text object to copy from.
1196 Reads lines from input, appending to Text object. @param str Text object to append lines to. @param maxLineLength Max line length. @param maxBytesToConsume Max bytes to consume. @return Number of bytes consumed.
1197 Reads data into Text object until delimiter or max length. @param str Text object to append data to @param maxLineLength Max line length @param maxBytesToConsume Max bytes to consume @return Number of bytes consumed
1198 Constructs a new SortedMapWritable. Initializes the internal TreeMap to store sorted key-value pairs.
1199 Constructs a new MapWritable. Initializes the internal HashMap.
1200 Constructs a Key object with a given byte array and default weight of 1.0. @param value The byte array.
1201 Computes MD5 hash of a byte array. @param data The byte array to hash. @return MD5Hash object containing the computed hash.
1202 Computes MD5 hash of a UTF8 string. @param utf8 The UTF8 object to hash. @return MD5Hash object containing the computed hash.
1203 Creates an MD5Hash object from a hexadecimal string. @param hex Hexadecimal representation of the MD5 digest.
1204 Creates a RetryPolicy with max retries and fixed sleep. @param sleepTime Sleep time between retries. @param timeUnit Time unit for sleepTime.
1205 Creates a RetryUpToMaximumCountWithFixedSleep policy. @param maxRetries Max retry attempts. @param sleepTime Sleep time between retries. @param timeUnit Time unit for sleepTime.
1206 Creates an ExponentialBackoffRetry policy with given params. @param maxRetries Max retry attempts. @param sleepTime Sleep time between retries. @param timeUnit Time unit for sleepTime.
1207 Creates a RetryUpToMaximumCountWithProportionalSleep policy. @param maxRetries Max retry attempts. @param sleepTime Initial sleep time. @param timeUnit Time unit for sleepTime.
1208 Records write lock held timestamp if lock is held. Uses monotonic clock for accurate timing.
1209 Records the lock acquisition timestamp using the monotonic clock.
1210 Records read lock held timestamp if lock is held.
1211 Creates a dynamic proxy implementing the given interface with retry logic. @param iface Interface to proxy. @param proxyProvider Failover proxy provider.
1212 Delegates retry count retrieval to the underlying strategy.
1213 Checks if two WrapperRetryPolicy objects are equal. Compares instances and recursively checks retry configurations.
1214 Creates an IOException from the collected exceptions. @return IOException containing all collected exceptions.
1215 Retrieves supported compression algorithm names.
1216 Delegates retrieval of block state to the wrapped object.
1217 Reads a masked string from input. @param in DataInput stream to read from. @return Masked string or null if length is -1.
1218 Updates remain based on input stream. Sets lastChunk if positive.
1219 Creates a comparator for RawComparable objects. @param name Comparator name. @return Comparator instance.
1220 Writes a chunk to the output stream, handling last chunk logic. @param chunk Data to write @param offset Start index in chunk @param len Number of bytes to write @param last True if this is the last chunk
1221 Writes data to the output stream, handling variable-length encoding. @param data data to write @param offset start index in data @param len number of bytes to write
1222 Initializes encoder with output stream and chunk size. @param out Output stream to write to. @param size Maximum chunk size.
1223 Returns a comparator for Scanner entries, throws exception if unsorted.
1224 Checks if the current location is before the end location.
1225 Finds the block index for a given offset. @param offset Offset to locate the block index for. @return Location object containing the block index.
1226 Creates a new Location object using the current block/record indices.
1227 Delegates to overloaded method with offset 0. @param buf buffer to read into
1228 Encodes a string to a byte array using UTF-8. Truncates long strings and throws exception if too long.
1229 Converts a variable number of Writables to a byte array. @param writables Writables to be converted. @return Byte array representation of the Writables.
1230 Encodes a string to a byte array using UTF-8 encoding. @param string The string to encode. @return Byte array representing the UTF-8 encoded string.
1231 Compresses data from the buffer and writes it to the output. @param uncompressedDataBuffer buffer containing data to compress
1232 Copies a Writable object's data. @param other The Writable object to copy from. @throws IllegalArgumentException if other is null.
1233 Writes a key-value pair to the output stream, compressing the value. @param key The key object. @param val The value object.
1234 Serializes token data to a byte array. @return byte array representing the token's data.
1235 Masks a Writable object to a Base64 encoded string. @param obj The Writable object to mask. @return Base64 encoded string representation of the object.
1236 Copies data from the output buffer to the input buffer.
1237 Calculates distance between nodes based on path components. @param node1 First node. @param node2 Second node. @return Distance between nodes, Integer.MAX_VALUE if null.
1238 Retrieves a node based on the provided node's identifier. @param node The node whose identifier is used. @return Node object retrieved by the identifier.
1239 Gets leaf nodes within a given scope. @param scope The scope string to search for leaf nodes.
1240 Calculates node count within a scope, excluding specified nodes. @param scope Scope string. @param excludedNodes Collection of nodes to exclude.
1241 Updates node's rack membership and rack map. @param node The node to update.
1242 Sorts nodes based on weight and applies secondary sort. @param reader Starting node for weight calculation. @param nodes Array to store sorted nodes.
1243 Removes a node from the network topology. @param node The node to remove; throws exception if inner node.
1244 Transfers data from a FileChannel. @param fileCh FileChannel to read from @param position Starting position @param count Number of bytes to transfer
1245 Wraps an exception with a more informative message. @param exception The exception to wrap.
1246 Default constructor for RawScriptBasedMapping.
1247 Initializes the `ScriptBasedMapping` with a raw mapping. @param rawMap The raw DNS-to-switch mapping.
1248 Constructs an InnerNodeImpl using the provided path string.
1249 Constructs an InnerNodeImpl with a normalized location. @param name Node name, @param location Normalized location
1250 Writes a notification to the first notification socket. Handles IOExceptions and sets kicked to true on success.
1251 Creates a DomainSocket instance with the given path. @param path Unix domain socket path. @return A new DomainSocket object. @throws IOException If an I/O error occurs.
1252 Creates and returns an array of DomainSockets using file descriptors.
1253 Creates a DomainSocket instance using the given path. @param path Socket path. @throws IOException If an I/O error occurs.
1254 Sends callback and removes entry if the socket was closed. @param caller Caller of the method. @param entries TreeMap of entries. @param fdSet Set of file descriptors. @param fd File descriptor.
1255 Closes the socket and notifies the watcher thread.
1256 Retrieves a SelectorInfo for the given channel. Creates one if not present.
1257 Updates selector activity time and registers it with the provider. @param info SelectorInfo object containing activity details.
1258 Resolves IP addresses for a network interface. @param strInterface Interface name. @return String array of IP addresses.
1259 Resolves hostnames for a given interface, using reverse DNS. @param strInterface Interface name. @param nameserver DNS server (optional). @param tryfallbackResolution Fallback resolution flag. @return Array of hostnames.
1260 Constructs a LogThrottlingHelper with a default recorder name. @param minLogPeriodMs Minimum time between logs (ms)
1261 Records a log action with default recorder and current time. @param values Values to be logged. @return LogAction object or DO_NOT_LOG if not logged.
1262 Quotes a name by first unquoting and then quoting HTML chars. @param name The name to be quoted. @return The quoted name.
1263 Converts the request URL to a StringBuffer with HTML-quoted characters.
1264 Quotes HTML special characters in the request URL.
1265 Creates a FileMonitoringTimerTask for a single file. @param filePath File path to monitor. @param onFileChange Callback for file change events. @param onChangeFailure Callback for failure events.
1266 Retrieves or creates a Record for a MetricsRecord. @param mr The MetricsRecord to process.
1267 Processes an element from the queue using the provided consumer. @param consumer Consumer to process the dequeued element. @throws InterruptedException If interrupted while waiting.
1268 Processes queue elements using the provided consumer. @param consumer Consumes elements from the queue. @throws InterruptedException If interrupted while waiting.
1269 Increments the cache hit counter.
1270 Increments the cacheCleared counter, tracking cache clear events.
1271 Increments the cache updated counter.
1272 Increments the counter for RPC client backoff due to disconnection.
1273 Increments the counter for slow RPC calls.
1274 Increments the RPC requeue calls counter.
1275 Increments the RPC call success counter.
1276 Transfers data from a buffer to a channel, tracking bytes sent. @param channel The WritableByteChannel to write to. @param buffer The ByteBuffer to read from. @return Number of bytes transferred.
1277 Reads data from a channel into a buffer, or uses fallback. @param channel ReadableByteChannel to read from. @param buffer ByteBuffer to write to. @return Number of bytes read.
1278 Records a failure event and updates the last failure timestamp.
1279 Retrieves group names for a user and logs performance. @param user User identifier. @return Set of group names.
1280 Registers the metrics name with the MetricsSystem. @param name The name of the metric to register.
1281 Adds quantile metrics with formatted names and descriptions. @param ucName Unit name prefix. @param uvName Unit value suffix.
1282 Calculates and registers inverse quantile metrics. @param ucName Unit code name. @param uvName Unit value name.
1283 Creates a MetricsRegistry with the given name. @param name Name of the registry.
1284 Caches a MetricsTag object with name, description, and value. @param name Tag name. @param description Tag description. @param value Tag value.
1285 Creates a MutableStat with capitalized names & descriptions. @param name Metric name. @param description Metric description.
1286 Registers a tag with the registry, optionally overriding existing tags. @param info MetricsInfo object @param value Tag value @param override Whether to override existing tags @return The MetricsRegistry instance
1287 Updates internal statistics and triggers a related action. @param value The value to use for updating the statistics.
1288 Returns masked RPC processing time variance.
1289 Adds a value to the buffer and increments the count. Compresses and adjusts if the buffer is full.
1290 Calculates and returns a map of quantiles to their corresponding values. @return Map of quantile values, or null if no samples exist.
1291 Returns the top N token owners based on usage stats. @param n The number of top owners to retrieve.
1292 Processes a list of groups, caching netgroups if they don't exist. @param groups List of group names to process.
1293 Returns a copy of the user's tokens. @return Collection of Token objects.
1294 Returns a list of user's groups. @param user User whose groups are to be retrieved. @return List of group names for the user.
1295 Retrieves user groups. @param user The user whose groups are being retrieved. @return Set of group names for the user.
1296 Retrieves netgroups for a user, adding them to the provided list. @param user The username to fetch netgroups for. @return List of netgroup names for the user.
1297 Calls m1 with an empty string as the argument.
1298 Logs the value of a property, or "UNSET" if not found. @param property The property to log.
1299 Logs the value of an environment variable. @param variable Environment variable name.
1300 Reads and logs each line from the given file. @param file File to read and log lines from.
1301 Logs an error message with a given category and formatted arguments. @param category Error category. @param message Message to log. @param args Arguments for message formatting.
1302 Logs a warning message with a specified category. @param category Warning category. @param message Warning message with arguments.
1303 Delegates authentication method setting to the user object. @param authMethod The authentication method to set.
1304 Writes a byte to the stream, optionally wrapping with tokens. @param b The byte to write. @throws IOException if an I/O error occurs.
1305 Writes data to the stream, handling SASL token processing. @param b byte array to write @throws IOException if an I/O error occurs
1306 Retrieves delegation token info by identifier, throws InvalidToken if not found or expired. @param identifier TokenIdent object @return DelegationTokenInformation object
1307 Sets the delegation token secret manager. @param secretManager The new secret manager instance.
1308 Updates the master key for generating delegation tokens. Generates a new key and stores it for token creation.
1309 Default constructor. Initializes a DelegationKey with default values.
1310 Constructs a DelegationTokenAuthenticatedURL. @param authenticator DelegationTokenAuthenticator @param connConfigurator Connection configurator
1311 Attempts to renew the delegation token, or obtains a new one. Handles failures and updates renewal time.
1312 Reads a byte from the input stream, handling SASL wrapping. Returns -1 if EOF is reached.
1313 Reads data into a byte array, handling SASL unwrapping. @param b buffer to read into, off offset, len length @return number of bytes read, or -1 if EOF
1314 Authorizes access based on user and remote address. @param user UserGroupInformation object @param remoteAddress Remote IP address string @throws AuthorizationException if authorization fails
1315 Checks if a login context exists.
1316 Creates a UserGroupInformation with provided user and real user. @param user User name. @param realUser Existing UserGroupInformation. @return New UserGroupInformation object.
1317 Returns the RealUser or the original user if RealUser is null. @param user The UserGroupInformation to check. @return UserGroupInformation
1318 Constructs a user-friendly string representation of the UGI. Includes authentication method and delegation token details.
1319 Gets the authentication method for the user. Returns null if no authentication method is found.
1320 Gets the authentication method for the user. @param ugi UserGroupInformation object @return AuthenticationMethod for the user or proxy user
1321 Creates an IpcConnectionContextProto based on protocol, user, and auth.
1322 Validates hostname against certificate. @param host Hostname to validate. @param session SSL session containing certificate. @return True if hostname matches, false otherwise.
1323 Loads a resource by name, logs success/failure. @param name Resource name to load. @return SUCCESS or E_NOT_FOUND based on resource availability.
1324 Constructs a Command object with the provided Hadoop configuration. @param conf The Hadoop Configuration object.
1325 Constructs a CommandFactory with the provided Hadoop configuration. @param conf The Hadoop Configuration object.
1326 Constructs a FsShell object using the provided Hadoop configuration. @param conf Hadoop Configuration object.
1327 Constructs FindClass with a Hadoop Configuration object. @param conf The Hadoop Configuration object to use.
1328 Initializes GetGroupsBase with a Configuration and PrintStream. @param conf Hadoop configuration. @param out Output stream for displaying results.
1329 Constructs a Configured object with a null configuration.
1330 Constructs an ACL string based on allowed users/groups.
1331 Finds the first Kerberos ticket with a krbtgt principal. @return KerberosTicket or null if no krbtgt ticket exists.
1332 Configures ZooKeeper client for SSL/TLS using provided parameters. @param zkClientConfig Client configuration object @param truststoreKeystore Truststore/keystore parameters
1333 Creates an OpensslCipher instance using the given transformation and engine ID. @param transformation Transformation string (algorithm/mode/padding) @param engineId Engine identifier, or null for default engine @return OpensslCipher instance @throws NoSuchAlgorithmException, NoSuchPaddingException
1334 Creates a new key version with specified name and material. @param name Key version name. @param options Key generation options. @return New KeyVersion object.
1335 Creates a new key version for the given key name. @param name Key name @return New KeyVersion object
1336 Schedules an element, handling backoff, overflow, and failover. @param e Element to schedule. May throw exceptions.
1337 Registers the WritableRpcInvoker and marks the engine as initialized.
1338 Starts the stopwatch. Throws exception if already running.
1339 Stops the stopwatch, calculates elapsed time, and returns it.
1340 Returns the elapsed time in nanoseconds. Uses monotonic time if started, otherwise returns current elapsed.
1341 Calculates a fingerprint from an array of methods. @param methods array of methods to process @return An integer representing the fingerprint.
1342 Gets ProtocolSigFingerprint for a protocol class and server version. @param protocol Protocol class. @param serverVersion Server protocol version.
1343 Creates a RemoteException with class and message from attributes. @param attrs Attributes object containing class and message.
1344 Returns the list of items or throws an exception if present.
1345 Records RPC timings for a schedulable task. @param callName RPC call name, schedulable task, queue/proc time.
1346 Attempts to add an element to the queue at a specified priority. @param priority Element priority level. @param e Element to be added. @param includeLast Whether to include the last priority. @return True if successful, false otherwise.
1347 Handles exceptions, sets RPC status, and populates response parameters. @param t The exception to handle. @param responseParams Parameters to set with error details.
1348 Constructs a VersionMismatch exception with interface name and versions. @param interfaceName Name of the protocol interface. @param clientVersion Client's protocol version. @param serverVersion Server's protocol version.
1349 Updates RPC priority cache with computed levels based on call costs.
1350 Retrieves RPC priority, using cache if available, else computes.
1351 Delegates the call to the superclass's m1 method.
1352 Gets the current queue index. Retrieves index and advances queue.
1353 Gets the address string from the remote InetAddress. @return Address string or null if address is null.
1354 Creates a MachineList from a collection of host entries. @param hostEntries Collection of host entries to add.
1355 Calls m1(false) to refresh memory statistics.
1356 Calculates total free memory (RAM + inactive files) in KB. Uses `readProcMemInfoFile` to update memory stats.
1357 Gets the system CPU time. Calls m1() and returns CPU time.
1358 Calculates overall CPU usage percentage. Uses `m1()`, `m2()`, and `m3()` to determine the value.
1359 Calculates and returns the overall vCores usage percentage.
1360 Inserts a key-value pair into the store, resizing if needed. @param k The key to insert. @param v The value associated with the key.
1361 Creates a secure TransformerFactory instance. Sets secure processing feature and configures attributes. @return TransformerFactory with secure processing enabled.
1362 Creates a SAXTransformerFactory with secure processing enabled. @return SAXTransformerFactory instance configured for security.
1363 Formats file size. @param size size in bytes @param humanReadable use human-readable format @return formatted size string
1364 Formats size as human-readable string or raw value. @param size size value @param humanReadable flag to format as human-readable
1365 Masks a number using traditional binary prefixes. @param number The number to mask.
1366 Formats a length value with binary prefixes and units. @param len length value to format
1367 Adds filesystem usage data to the table. @param uri filesystem URI @param fsStatus filesystem status object @param mountedOnPath mounted path string
1368 Converts byte array to hex string. @param bytes byte array to convert @return hex string representation
1369 Sorts a portion of the sortable structure using heap sort. @param s sortable structure, p start, r end
1370 Logs an exit exception and terminates the application. @param ee ExitException to log and exit with.
1371 Exits application with status and message. @param status Exit status code. @param message Exception message.
1372 Handles application exit based on status and throwable. @param status Exit status code. @param t Throwable that caused the exit.
1373 Exits application with status, logs error, and handles exceptions. @param status The exit status code. @param msg The exception message.
1374 Handles HaltException, logs error, and either halts or propagates. @param status Exit status code. @param t The Throwable cause.
1375 Handles HaltException, logs error, and either halts or propagates. @param he HaltException to handle @throws HaltException if caught error needs to be re-thrown
1376 Unregisters the shutdown hook. Handles IllegalStateException during unregistration.
1377 Converts an Iterable to an ArrayList. Throws NullPointerException if null.
1378 Creates a LinkedList and adds all elements from the iterable. @param elements Iterable containing elements to add to the list. @return A LinkedList containing the elements from the iterable.
1379 Constructs an ACL list from a permission and existing entries. @param perm FsPermission to base ACL on. @param entries Existing ACL entries to incorporate.
1380 Creates an ArrayList from a variable number of elements. @param elements Elements to add to the ArrayList. @return An ArrayList containing the provided elements.
1381 Creates an ArrayList with a calculated capacity. @param estimatedSize Estimated initial size of the list.
1382 Serializes an object to a file. @param file File to write JSON to. @param instance Object to serialize.
1383 Initializes the tracker with IO statistics store, key, and initial count. @param iostats IO statistics store @param key Identifier for the tracked operation @param count Initial counter value
1384 Creates a `DurationInfo` instance, logs start message. @param log Logger instance for logging. @param logAtInfo Whether to log at info level. @param format Format string for duration. @param args Arguments for the format string.
1385 Returns a masked value, likely for security or privacy.
1386 Creates a CrcComposer with specified CRC type, hint, and stripe length. @param type CRC type (DataChecksum.Type) @param bytesPerCrcHint bytes per CRC hint @param stripeLength stripe length @return CrcComposer instance
1387 Combines two CRC values with a monomial, given length and modulus. @param crcA First CRC value. @param crcB Second CRC value. @param lengthB Length in bytes. @param mod Modulus value.
1388 Finalizes CRC calculation, resets state, and returns digest.
1389 Extracts files from a JAR stream to a directory, filtering by regex. @param inputStream input stream @param toDir destination directory @param name file name @param unpackRegex regex pattern for file extraction
1390 Extracts files from a JAR to a directory. @param jarFile JAR file to extract from. @param toDir Directory to extract files to.
1391 Finds the nth occurrence of byte 'b' in 'utf' from start to end. @param utf byte array @param b byte to search for @param n occurrence number (1-based) @return Index of nth occurrence or -1 if not found
1392 Resolves a value by key, retrieving or creating if needed. @param key The key to resolve. @return The resolved value or null if not found.
1393 Logs lock held time if it exceeds the warning threshold. @param acquireTime Lock acquisition time. @param releaseTime Lock release time. @param checkLockHeld Flag indicating if it's a hold warning.
1394 Masks a time string with a formatted finish time and time diff. @param formattedFinishTime Formatted finish time string. @param finishTime Finish time in milliseconds. @param startTime Start time in milliseconds.
1395 Splits a string by comma, handling escape characters. @param str String to split, escapeChar, separator. @return Array of split strings.
1396 Masks the input string by splitting and formatting words. @param s The string to mask. @return The masked string.
1397 Masks characters in a string. @param str String to mask, returns null if null. @param escapeChar Character used for escaping.
1398 Masks characters in a string. @param str input string @param escapeChar escape character
1399 Constructs a masked startup message string. @param classname Class name. @param hostname Hostname. @param args Arguments.
1400 Returns a masked version string.
1401 Returns the next element if available, otherwise throws exception.
1402 Checks if the wrapped iterator has a next element. Throws IOException if an error occurs during the check. @return True if a next element exists, false otherwise.
1403 Creates a LazyAutoCloseableReference from a supplier. @param supplier Supplier that provides the AutoCloseable resource.
1404 Deletes files in a path using BulkDelete. @param fs FileSystem instance. @param path Path to delete files from. @return Number of files deleted.
1405 Deletes specified paths using BulkDelete. @param fs FileSystem instance. @param base Base path for deletion. @param paths Paths to delete. @return List of deleted path entries.
1406 Opens a file stream with specified options. @param fs FileSystem object. @param path Path to open. @return FSDataInputStream object.
1407 Reads data into a ByteBuffer at a specified position. @param in Input stream implementing ByteBufferPositionedReadable. @param position Byte offset to read from. @param buf ByteBuffer to hold the read data.
1408 Retrieves an IOStatisticsSnapshot for the given path. @param fs FileSystem object. @param path Path to retrieve statistics for. @return IOStatisticsSnapshot object.
1409 Parses a JSON string into an IOStatisticsSnapshot. @param json JSON string representing the snapshot. @return IOStatisticsSnapshot object.
1410 Gets the value, initializing it if necessary. Returns the value or throws UncheckedIOException if fails.
1411 Creates a Builder for processing items from an Iterable. @param items The Iterable of items to process.
1412 Delegates exception handling to FutureIO. @param e The ExecutionException to handle. @return The result of FutureIO.m1(e).
1413 Executes a Future, handling exceptions and cancellation. @param future Future to execute, returns result or throws exception.
1414 Awaits Future completion with timeout, handling exceptions. @param future Future to await. @param timeout Timeout duration. @param unit Timeout unit (e.g., SECONDS). @return Result of the Future.
1415 Delegates exception handling to FutureIO. @param e CompletionException to handle. @return Result of FutureIO's exception handling.
1416 Configures an object if it's Configurable, then calls m2. @param theObject object to configure, may implement Configurable @param conf Hadoop configuration
1417 Retrieves a class by name, using cached or configuration values. @param name class name to retrieve @param conf Hadoop configuration object @return Class object or throws IOException if not found
1418 Retrieves a class by name, using configuration if available. @param conf Hadoop configuration; null uses default class loading. @param className Name of the class to retrieve.
1419 Retrieves a class by name. @param name class name to retrieve @throws ClassNotFoundException if class is not found
1420 Logs thread dump if interval has passed. @param log Logger instance. @param title Title for the thread dump. @param minInterval Minimum interval in seconds.
1421 Logs thread dump if a minimum time interval has passed. @param log Logger instance for logging. @param title Title for the thread dump. @param minInterval Minimum time interval in seconds.
1422 Constructs builder, ensuring only path or pathHandle is present. @param optionalPath Optional path to use; null allowed. @param optionalPathHandle Optional path handle; null allowed.
1423 Constructs a Configuration object, loading default properties.
1424 Handles HTTP connection errors, extracting and re-throwing exceptions. @param conn HttpURLConnection to check @param expectedStatus Expected HTTP status code
1425 Creates and returns a CRC32C checksum instance. Falls back to PureJavaCrc32C on creation failure.
1426 Retrieves group names for a user via shell command. @param userName The username to query. @return Array of group names.
1427 Gets user groups command. Uses Shell utility. @param userName User name to query. @return Array of shell commands.
1428 Constructs a chmod command with a file path. @param perm permission string @param recursive recursive flag @param file file path @return String array representing the chmod command
1429 Kills process with specified PID. @param pid process ID to kill @return Array of strings representing the kill command
1430 Returns a value obtained by chaining m1() and m2().
1431 Resolves the path to a Hadoop executable. @param executable Executable file name @return File object representing the executable
1432 Returns a Progress phase object, calculates weightage.
1433 Executes m1 'n' times, updates progress, and sets flags. @param n number of times to execute m1
1434 Creates a new phase with given status and weightage. @param status Phase's status. @param weightage Phase's weightage (0.0 to 1.0). @return The newly created Progress phase object.
1435 Returns the overall progress, calculated internally.
1436 Creates a ZooKeeper node at the given path, if it doesn't exist. @param path ZK node path.
1437 Creates ZooKeeper nodes along a path, setting ACLs for each. @param path ZK path to create nodes for. @param zkAcl ACLs to apply to each created node.
1438 Binds a method to the builder using class name & method name. @param className Class name of the method. @param methodName Method name to bind. @param argClasses Method argument types.
1439 Binds a method to the builder with provided argument types. @param targetClass Class containing the method. @param argClasses Method argument types.
1440 Binds a method to the builder. @param className Class name. @param methodName Method name. @param argClasses Method argument types.
1441 Binds a method to the builder. @param targetClass Class containing the method. @param argClasses Method argument types.
1442 Creates and validates an UnboundMethod. @param source Class containing the method. @param name Method name. @param parameterTypes Method argument types.
1443 Checks if specified methods are supported; throws exception if not.
1444 Checks if bulk delete method is available. @param bulkDeleteDeleteMethod Method for bulk deletion. @return True if the bulk delete method is available.
1445 Checks if the file system open file method is available.
1446 Checks if the positioned readable read-fully available method exists.
1447 Checks if a method exists and executes it with an InputStream. @param in The input stream to pass to the method. @return True if the method executes successfully, false otherwise.
1448 Checks if the I/O statistics snapshot create method is available.
1449 Checks if I/O statistics context is enabled. @return True if enabled, false otherwise.
1450 Throws UnsupportedOperationException if the unbound method is a no-op. @param method The unbound method to check.
1451 Binds a method to a receiver, handling static method checks. @param receiver The object to bind the method to. @return A BoundMethod instance with the receiver bound.
1452 Binds method to receiver, checking for static methods. @param receiver The object to bind the method to. @return A BoundMethod instance with the receiver bound.
1453 Creates a StaticMethod instance by chaining m1 and m2.
1454 Creates a StaticMethod instance by chaining m1 and m2.
1455 Loads available file systems using ServiceLoader. Populates SERVICE_FILE_SYSTEMS with loaded file systems.
1456 Computes and prints the Jenkins hash of a file. @param args Command-line arguments: filename
1457 Constructs a HashFunction with specified parameters. @param maxValue Max value for hash outputs. @param nbHash Number of hash functions to use. @param hashType Type of hash function to use.
1458 Default constructor. Initializes a new RetouchedBloomFilter instance.
1459 Finds the minimum bucket value for a given key. @param key Key object used to calculate bucket values. @return Minimum bucket value or 0 if not found.
1460 Adds a key to the filter; throws NullPointerException if key is null. @param key The key to add.
1461 Adds a key to the bloom filter's vector. @param k Key to add; throws NullPointerException if null. @param vector Array to insert the key into.
1462 Finds the index of the minimum weight hash value. @param h Array of hash values. @return Index of the minimum weight hash value.
1463 Finds the index of the maximum false positive weight. @param h Array of hash values to check. @return Index of the maximum false positive weight.
1464 Calculates ratios based on key and false positive weights.
1465 Reads and prints resource content to stdout. @param name Resource name to read and print. @return SUCCESS, E_NOT_FOUND, or E_LOAD_FAILED.
1466 Prints usage instructions and returns E_USAGE. Explains available commands and return codes.
1467 Adds an element to the queue if possible. @param element The element to add. Returns true if added.
1468 Creates a TreeSet and adds elements from the iterable. @param <E> Type of elements in the TreeSet. @param elements Iterable of elements to add. @return A new TreeSet containing the elements.
1469 Creates a HashSet from an Iterable. Handles Collection/Iterator cases.
1470 Creates a HashSet from the given elements. @param elements elements to add to the HashSet @return A HashSet containing the provided elements
1471 Executes a program based on the first command-line argument. @param args Command-line arguments; first arg is program name. @throws Throwable if an exception occurs during program execution.
1472 Adds a column to the table listing. @param title Column title @param justification Text justification @param wrap Whether to wrap text @return this
1473 Converts duration string to a value in specified unit. @param name Duration name, @param vStr Duration string, @param unit Unit.
1474 Adds a configuration property to the XML document. @param doc XML document, property name, redactor
1475 Applies deprecation deltas to the current deprecation context. @param deltas Array of deprecation changes to apply.
1476 Attempts to bind a ServerConnector to an available port. @param listener The connector to bind. @param startPort Port to avoid when binding.
1477 Sets environment variables based on the target HA service state. @param target The HA service target. @param environment The environment map to update.
1478 Reads a file range into a buffer, using direct buffer if available. @param stream PositionedReadable stream to read from. @param range FileRange to read. @param buffer ByteBuffer to write to.
1479 Processes a list of file ranges, validating and sorting them. @param ranges List of FileRange objects to process.
1480 Transitions buffer state to CACHING and associates a future. @param actionFuture Future representing the caching action.
1481 Transitions buffer state to newState, validating inputs. @param newState The new state to transition to. @param expectedCurrentState Expected current state(s).
1482 Checks if path exists and is a directory; throws exception if not. @param path The path to validate. @param argName Name of the argument being validated.
1483 Checks if path exists and is a file; throws exception if not. @param path The path to check. @param argName Name of the argument being validated.
1484 Checks if the blockNumber is the last block. @param blockNumber The block number to check.
1485 Calculates the offset for a given block number. @param blockNumber The block number to calculate the offset for.
1486 Retrieves the state of a block. @param blockNumber The block number to retrieve state for.
1487 Updates block state. @param blockNumber Block number to update. @param blockState New state for the block.
1488 Calculates the block index for a given offset. @param offset The offset within the file. @return The block index.
1489 Checks if snapshot can be applied to statistics. @param snapshot Snapshot to apply. @param statistics Statistics object. @return True if snapshot can be applied, false otherwise.
1490 Saves an IOStatisticsSnapshot to a file system path. @param snapshot Snapshot to save. @param fs FileSystem to write to. @param path Path to save the snapshot. @param overwrite Whether to overwrite existing files.
1491 Returns the counters map from an IOStatisticsSnapshot. @param source The IOStatisticsSnapshot source. @return A map of string keys to long values.
1492 Extracts gauges from an IOStatisticsSnapshot. @param source The IOStatisticsSnapshot to extract from. @return A map of gauge names to their values.
1493 Retrieves minimum values for tracked metrics from a source. @param source The source object containing IOStatisticsSnapshot. @return A map of metric names to minimum values.
1494 Retrieves maximum IO statistics values from a snapshot. @param source The IOStatisticsSnapshot source. @return Map of maximum values for each statistic.
1495 Transforms IO statistics to a Map<String, Map.Entry<Long, Long>>. @param source The source IOStatisticsSnapshot. @return A map of String to Map.Entry<Long, Long>.
1496 Creates a new FlagSet instance with the configured enum class, prefix, and flags.
1497 Creates a new FlagSet with the given enum class, prefix, and flags. @param enumClass Enum class for the flags. @param prefix Prefix for enum names. @param flags Initial set of flags.
1498 Executes a command on the FileSystem, then resets fs.
1499 Closes all FileSystem instances, skipping automatic ones if specified. @param onlyAutomatic If true, closes only automatically closed FileSystems. @throws IOException if any FileSystem fails to close.
1500 Serializes an IOStatisticsSnapshot to a JSON string. @param snapshot The snapshot to serialize.
1501 Writes byte array to a file using FileContext. @param fileContext Hadoop FileContext object @param path Path to the file to be written @param bytes Byte array to be written @return The provided FileContext object
1502 Writes lines to a file using the provided charset. @param fileContext Hadoop file context. @param path Path to write to. @param lines Lines to write. @param cs Charset to use.
1503 Writes a CharSequence to a file using the given charset. @param fs FileContext for file operations @param path Path to write to @param charseq CharSequence to write @param cs Charset to use for encoding @return FileContext
1504 Creates a masked FSDataOutputStreamBuilder for the given path. @param path The path for the output stream.
1505 Creates an FSDataOutputStreamBuilder for the given path. @param path The path to create the output stream for. @return An FSDataOutputStreamBuilder instance.
1506 Creates an FSDataOutputStreamBuilder for appending to a file. @param path The path to append to. @return An FSDataOutputStreamBuilder.
1507 Creates a builder for writing data to a file at the given path. @param path Path to the file; @return FSDataOutputStreamBuilder instance.
1508 Lists file statuses under a path, using the default filter. @param f The path to list. @return Array of FileStatus objects.
1509 Lists file statuses for given paths using the default filter. @param files Paths to list statuses for. @return Array of FileStatus objects.
1510 Creates a MutableCounterInt, registers it, and returns it. @param info MetricsInfo object @param iVal Initial counter value @return MutableCounterInt object
1511 Creates a MutableCounterLong metric. @param info MetricsInfo object @param iVal Initial value for the counter @return MutableCounterLong object
1512 Creates and registers a MutableGaugeLong metric. @param info Metrics info; validates metric name. @param iVal Initial value for the gauge. @return Registered MutableGaugeLong object.
1513 Creates a MutableGaugeFloat metric. @param info MetricsInfo for the gauge. @param iVal Initial float value. @return The newly created MutableGaugeFloat.
1514 Creates a MutableGaugeInt with given info and initial value. @param info MetricsInfo for the gauge @param iVal Initial integer value for the gauge
1515 Resolves a file system path using the provided function. @param fileContext FileContext for the file system. @param path Path to resolve. @param fn Function to resolve the path. @return Resolved object of type T.
1516 Creates a GlobBuilder instance with the given FileContext. @param fileContext Hadoop FileContext for path operations. @return A new GlobBuilder object.
1517 Creates a new GlobBuilder instance with the given FileSystem. @param filesystem Hadoop FileSystem to use. @return A new GlobBuilder object.
1518 Processes the result of an asynchronous call. Handles return, exception, and retry states.
1519 Creates and returns an AsyncGet object, prioritizing ASYNC_RETURN.m1().
1520 Updates used space by calculating folder size. Uses DUHelper to get size of m1() and sets used.m3.
1521 Copies data from another MeanStatistic instance. @param that The MeanStatistic to copy data from.
1522 Converts a source to a string representation, handling exceptions. @param source Object to convert, null is allowed. @return String representation or "" if an error occurs.
1523 Formats IOStatistics into a string. @return Formatted string representation of statistics.
1524 Formats IO statistics to a string, handles null statistics. @return Formatted string or NULL_SOURCE if statistics is null.
1525 Formats IOStatistics into a string. @param statistics The statistics to format, or null. @return Formatted string or empty string if null.
1526 Creates a DurationTracker, using factory or STUB_DURATION_TRACKER. @param factory DurationTracker factory, or null. @param statistic Statistic identifier.
1527 Purges a cache entry, deleting the file if lock acquired. @param elementToPurge Entry to purge from the cache.
1528 Creates IOStatistics from StorageStatistics. @param storageStatistics Statistics to create IOStatistics from. @return IOStatistics object.
1529 Adds a counter for a given key using an AtomicLong source. @param key Counter key. @param source AtomicLong value to count. @return DynamicIOStatisticsBuilder instance.
1530 Adds an atomic integer counter for a key. @param key Counter key. @param source AtomicInteger source.
1531 Adds a mutable long counter for a key, using a provided source. @param key Counter key. @param source MutableCounterLong to evaluate.
1532 Adds a gauge statistic from an AtomicLong. @param key Gauge key. @param source AtomicLong to monitor.
1533 Adds an atomic integer gauge statistic with a given key. @param key Gauge key. @param source AtomicInteger to monitor.
1534 Adds a minimum function evaluator for a key using an AtomicLong. @param key Key for the evaluation. @param source AtomicLong source.
1535 Adds a minimum function evaluator for an AtomicInteger. @param key Key for the evaluation. @param source AtomicInteger to evaluate.
1536 Adds a maximum evaluation function for an AtomicLong source. @param key Key for the maximum evaluation. @param source AtomicLong to evaluate.
1537 Adds a maximum evaluation function for an AtomicInteger. @param key Key for the maximum evaluation. @param source AtomicInteger to evaluate.
1538 Initializes interrupt handling and sets uncaught exception handler.
1539 Constructs a DomainSocket with given path and file descriptor.
1540 Releases resources, potentially closing the socket. @param exc boolean indicating if an exception occurred
1541 Sends data to a Unix domain socket. @param descriptors file descriptors, jbuf data buffer, offset start index, length data length @throws IOException if an I/O error occurs
1542 Reads data from multiple domain sockets into a buffer. @param streams Input streams for data reading @param buf Buffer to store read data @param offset Offset in buffer for writing @param length Number of bytes to read @return Number of bytes read
1543 Creates and returns an IOStatisticsContextImpl for a given key. @param key Key used to identify the context. @return IOStatisticsContextImpl instance.
1544 Computes/verifies checksums for data, using native code if available. @param data Data buffer. @param checksums Checksum buffer. @param fileName File name. @param basePos Base position.
1545 Decrypts a byte based on decryptor state, position, and IV. @param decryptor Decryptor object @param inBuffer Input buffer @param position File position @param iv Initialization vector @return Decrypted byte
1546 Initializes stream offset and buffers for decryption. @param offset The offset from the beginning of the stream.
1547 Writes data to the stream, encrypting it. @param b data to write @param off start offset in the data array @param len number of bytes to write @throws IOException if an I/O error occurs
1548 Writes data, encrypts, and calls super.m2(), if not closed.
1549 Compiles a glob pattern into a regex Pattern. @param globPattern The glob pattern to compile. @return A Pattern object representing the compiled pattern.
1550 Returns bytes read based on the provided distance. @param distance distance to determine bytes read from @return total bytes read
1551 Creates a data output stream for writing to a file. @param f Path to the file; @param flag CreateFlag options
1552 Constructs an AbstractFileSystem with a normalized URI and statistics. @param uri The file system URI. @param supportedScheme The expected URI scheme.
1553 Encodes input byte arrays into output arrays using ByteArrayEncodingState. @param inputs Input byte arrays to be encoded. @param outputs Output byte arrays for encoded data.
1554 Encodes data into output buffers using erasure coding. @param inputs Input buffers to be encoded. @param outputs Output buffers for encoded data.
1555 Initializes ArrayPrimitiveWritable with a primitive array. @param value The primitive array to be wrapped.
1556 Delegates URI retrieval to the underlying file system.
1557 Checks if capability is supported, otherwise delegates to data. @param capability Capability string to check. @return True if capability is not supported.
1558 Releases a buffer from the pool after processing. @param data The BufferData object to release.
1559 Releases buffers for completed BufferData objects. Iterates through buffers and releases those in DONE state.
1560 Constructs a CachingBlockManager with provided parameters. @param blockManagerParameters Parameters for block caching.
1561 Reads a file block into buffer, acquires/releases read lock. @param blockNumber Block number to read. @param buffer Buffer to store the block data.
1562 Calculates a masked offset based on buffer start and a delta.
1563 Checks buffer integrity: start offset, bytes read, and buffer value.
1564 Advances buffer position if within bounds. @param pos The position to advance to. @return True if advanced, false otherwise.
1565 Retrieves an IOStatisticsContext, defaulting to "Null IOStatisticsContext".
1566 Delegates setting the thread's I/O statistics context. @param statisticsContext The context to set, or null.
1567 Creates a map of MetricsConfig instances based on a type. @param type Type used to filter metric configurations. @return Map of MetricsConfig instances.
1568 Extracts and modifies command parameters from args. @param args Command-line arguments. @param pos Start position for parameter extraction. @return Modified list of parameters.
1569 Logs an error message. Increments error count. @param message The error message to log.
1570 Creates a PathHandle for a file, validating file system and options. @param stat The FileStatus object. @param opts HandleOpt options. @return A LocalFileSystemPathHandle object.
1571 Creates an array of HandleOpt objects. Returns two HandleOpt objects, both with changes disallowed.
1572 Creates an array of HandleOpt objects. Returns two HandleOpt objects based on internal calls.
1573 Creates an array of HandleOpt objects. Returns two HandleOpt instances with different flags.
1574 Creates an array of HandleOpt objects. Returns a new array containing m1(true) and m2(true).
1575 Constructs a ShellCommandExecutor with command, directory, env, timeout, and inheritParentEnv.
1576 Starts or stops the refresh thread for used space. @param runImmediately Flag to start refreshing immediately.
1577 Creates a private token from this public token for a new service. @param newService The new service for the private token. @return PrivateToken object.
1578 Throws exception if path has scheme but relative path-part.
1579 Checks if the path is absolute, has no scheme, and no authority.
1580 Returns true if the path is absolute, based on URI.
1581 Validates a Path object's scheme, authority, and port. @param path The Path object to validate.
1582 Writes the FileStatus to an output stream. @param out Output stream to write to.
1583 Validates upload parameters: path, stream, part number, ID, length. @param filePath Path of the file being uploaded. @param inputStream Input stream for the file part. @param partNumber Part number of the upload. @param uploadId Upload handle. @param lengthInBytes Length of the file part in bytes.
1584 Creates a CompletableFuture and sets its result to -1. @param path The path to process (unused in this method). @return A CompletableFuture with a result of -1.
1585 Calculates the masked position to skip. @param n The number of bytes to skip; adjusted if too large.
1586 Masks this permission with a umask. @param umask The umask to apply. @return A new permission with masked actions.
1587 Creates an FsPermission object from an LsEntry. @param sftpFile LsEntry containing permission data @return FsPermission object representing file permissions
1588 Creates an FsPermission object from an integer mode. @param mode integer representing file system permissions
1589 Returns a new FsPermission with all permissions set (0777).
1590 Returns a FsPermission object representing full access (777).
1591 Returns a new FsPermission with default file creation permissions.
1592 Returns the FUNC_MASK permission, representing 00755.
1593 Parses a symbolic Unix permission string into an FsPermission. @param unixSymbolicPermission Symbolic permission string @return FsPermission object or null if input is null
1594 Prints ACL entries; short-circuits if empty. Prints extended entries if mask equals 3, otherwise calls m3. @param aclStatus ACL status object. @param fsPerm Base permission. @param entries List of AclEntry objects.
1595 Masks a list of ACL entries into a comma-separated string. @param aclSpec List of AclEntry objects to mask.
1596 Creates a FsPermission object from a string representation. @param mode String representing file system permissions
1597 Reads up to `length` bytes from the buffer into the byte array. @param b buffer to read into, offset start index, length number of bytes to read @return number of bytes read, or -1 if end of stream
1598 Calculates current position relative to the block start. @return The offset from the block's starting position.
1599 Updates max values for replication, length, owner, group, and EC policy. @param items Array of PathData objects to process.
1600 Gets quota usage for a path. @param f The Path object representing the file/directory.
1601 Gets the content length of a file or directory. @param path Path object representing the file/directory @return Total length as a long value.
1602 Constructs an AbstractLaunchableService with the given name. @param name Service name.
1603 Transitions service to a new state, validates transition. @param proposed The proposed new state. @return The previous state of the service.
1604 Creates and returns a Service instance based on the config. @param conf Hadoop configuration object @return Service instance of type S
1605 Checks if this BinaryComparable is equal to another. @param other The object to compare to. @return True if equal, false otherwise.
1606 Copies bytes from newData to the internal byte array. @param newData source byte array @param offset offset in newData @param length number of bytes to copy
1607 Copies key bytes to buffer, updates value length, returns key length.
1608 Lists file names in a directory. @param dir The directory to list. @return String array of file names.
1609 Checks if a directory exists, is readable, writable, and executable. @param dir The directory to check. @throws DiskErrorException if any check fails.
1610 Locks a direct ByteBuffer into memory. @param buffer The ByteBuffer to lock. @param len Length of the buffer in bytes.
1611 Creates a SharedFileDescriptorFactory, throwing exception on failure. @param prefix File descriptor prefix. @param paths Array of paths to try. @throws IOException if factory creation fails in all paths.
1612 Calculates checksums for data in chunks, using tracing. @param b Data array. @param off Start offset in the data array. @param len Length of data to checksum.
1613 Calculates and updates checksums for data using native or fallback methods. @param data ByteBuffer containing data. @param checksums ByteBuffer to store checksums.
1614 Cleans input and output buffers, draining the buffer pool.
1615 Initializes the stream with a byte array of given capacity. @param capacity The capacity of the underlying byte array.
1616 Sets the token's data from a Base64-decoded string. @param newValue Base64 encoded string representing the new data.
1617 Retrieves erased data blocks from a block group. @param blockGroup ECBlockGroup containing data and parity blocks. @return Array of ECBlocks representing erased data blocks.
1618 Skips to the next marker in the compressed stream. @param marker Marker value to search for. @param markerBitLength Length of the marker in bits.
1619 Creates a new CBZip2OutputStream, validating blockSize. @param out output stream to write compressed data @param blockSize block size (1-9) @throws IOException if an I/O error occurs
1620 Constructs a BlockCompressorStream with default overhead. @param out Output stream. @param compressor Compressor.
1621 Creates a BlockDecompressorStream with input, decompressor, buffer size. @param in Input stream @param decompressor Decompressor @param bufferSize Buffer size @throws IOException If an I/O error occurs
1622 Writes data to the stream, compressing it if possible. Handles input validation and limits data size.
1623 Initializes the compressor with specified level and buffer size. @param level Compression level @param bufferSize Buffer size for input and output.
1624 Creates a compression output stream using the given codec. @param codec The compression codec to use. @param conf Hadoop configuration. @param out The output stream to wrap. @return CompressionOutputStream
1625 Closes all serializers and the output stream, releasing resources.
1626 Creates a CompressionInputStream using the codec and input stream. @param codec Compression codec. @param conf Hadoop configuration. @param in Input stream to compress. @return CompressionInputStream instance.
1627 Releases resources used for decompression and deserialization.
1628 Creates a Zlib compressor based on configuration. @param conf Hadoop configuration object. @return ZlibCompressor or BuiltInZlibDeflater instance.
1629 Returns a DirectDecompressor if native Zlib is loaded, null otherwise. @param conf Hadoop configuration object
1630 Returns a Decompressor instance based on native Zlib availability. @param conf Hadoop configuration object.
1631 Stores a delegation key to the SQL secret manager. @param key The DelegationKey to store. @throws IOException if storage fails.
1632 Updates a delegation key in the SQL secret manager. @param key The delegation key to update. @throws IOException if an I/O or SQL error occurs.
1633 Reads a string of max length from input. @param in Input stream to read from. @param maxLength Maximum length of the string. @return Decoded string.
1634 Reads length from stream and skips that many bytes. @param in Input stream to read length and skip from.
1635 Copies data from input to buffer, then to the filter. @param buffer Destination buffer. @param filter Compression filter.
1636 Reads a UTF-8 encoded string from input, up to maxLength. @param in Input stream. @param maxLength Max length of string. @return Decoded string.
1637 Writes a string to the DataOutput, or -1 if null. @param out Output stream to write to @param s String to write
1638 Creates a Text object representing an InetSocketAddress. @param addr The InetSocketAddress to represent.
1639 Creates a Token from a TokenProto, using values from its fields. @param tokenProto TokenProto object to create Token from @return Token object
1640 Writes an enum value to the output stream using its textual representation. @param out output stream @param enumVal enum value to write
1641 Writes permission data (username, groupname, permission) to output. @param out output stream @param username username @param groupname groupname @param permission file system permission
1642 Initializes Text with a UTF-8 byte array. @param utf8 The UTF-8 byte array to initialize with.
1643 Initializes a new Text object with a copy of the given Text. @param utf8 The Text object to copy from.
1644 Reads a line from the input stream, using record delimiter if set. @param str Text object to append the line to @param maxLineLength Max line length @param maxBytesToConsume Max bytes to consume @return Number of bytes consumed
1645 Returns the length of the text. Updates length if negative.
1646 Constructs a SortedMapWritable by copying another. @param other The SortedMapWritable to copy from.
1647 Constructs a new MapWritable as a copy of an existing one.
1648 Creates a RetryUpToMaximumTimeWithFixedSleep policy. @param maxTime Max retry time. @param sleepTime Sleep time between retries. @param timeUnit Time unit for sleepTime.
1649 Creates a dynamic proxy implementing the given interface with retry logic. @param iface Interface to implement. @param proxyProvider Failover proxy provider. @param retryPolicy Retry policy to use.
1650 Creates a dynamic proxy with retry logic. @param iface Interface to proxy. @param implementation Initial implementation. @param policyMap Retry policies for methods.
1651 Initializes a Writer with an output stream, compression name, and config. @param fout Output stream; must be at zero offset. @param compressionName Compression algorithm name. @param conf Hadoop configuration.
1652 Constructs a TFileIndex with entries from input stream. @param entryCount Number of entries in the index. @param in Input stream to read index data from. @param comparator Comparator for byte array comparisons.
1653 Decodes data chunks. Returns true if end reached, false otherwise.
1654 Writes buffered data to the output stream if available. @param buf The buffer containing the data to write.
1655 Compares the entry's key with the provided key. @param key The key to compare against. @return Comparison result.
1656 Initializes UTF8 object with a string, encoding it to UTF-8.
1657 Computes MD5 hash of a string. @param string The string to hash. @return MD5Hash object containing the computed hash.
1658 Writes buffered records to the output stream. Writes key/value lengths and buffers if records exist.
1659 Returns the tracking ID, generating it if null. @return String representing the tracking identifier.
1660 Masks the token using the provided encoder. @return Base64 encoded string representation of the token.
1661 Adds a node to the network topology, validating its placement. @param node The node to add, must not be an inner node.
1662 Removes a node from the network topology. @param node The node to remove. Throws exception if inner node.
1663 Removes a node from the network topology. @param node The node to remove; must not be an inner node.
1664 Sorts nodes based on weight, applies secondary sort. @param reader Starting node. @param nodes Array of nodes.
1665 Sorts nodes based on distance, applying secondary sort. @param reader Starting node. @param nodes Nodes array.
1666 Constructs a SocketInputStream with a channel and timeout. @param channel ReadableByteChannel for reading data. @param timeout Timeout duration in milliseconds. @throws IOException if the channel is invalid.
1667 Creates a SocketOutputStream with a channel and timeout. @param channel WritableByteChannel to write to. @param timeout Timeout duration in milliseconds. @throws IOException if channel is invalid.
1668 Waits for call completion, handles errors, and returns result. @param call The RPC call object. @return Writable result or throws exception on error.
1669 Default constructor, initializes with a new RawScriptBasedMapping.
1670 Constructs a `ScriptBasedMappingWithDependency` using a raw mapping.
1671 Creates a new InnerNodeImpl as a child of the given parent. @param parentName Name of the parent node.
1672 Adds a domain socket with a handler for processing. @param sock The domain socket to add. @param handler The handler for socket events.
1673 Removes a socket and notifies listeners. @param sock The socket to remove.
1674 Selects on a channel with specified operations and timeout. @param channel SelectableChannel to select on. @param ops Operations to select for. @param timeout Timeout in milliseconds. @return Selection status or 0 on timeout/interruption.
1675 Retrieves the first IP address for a given network interface. @param strInterface Interface name. @return First IP address or null if none found.
1676 Resolves hostnames for a given interface. @param strInterface Interface name. @return Array of hostnames.
1677 Resolves hostname for an interface, returning the first result. @param strInterface Interface name. @param nameserver DNS server (optional). @param tryfallbackResolution Fallback resolution flag.
1678 Loads metrics configuration from files, creating a MetricsConfig. @param prefix Configuration prefix. @param fileNames Files to load. @return MetricsConfig object.
1679 Fetches group names for a user, traces execution, and handles errors. @param user User identifier. @return Set of group names, or throws exception on failure.
1680 Executes a task via the Singleton instance.
1681 Stops the server: shuts down handlers, listeners, and responders.
1682 Stops the web application context and associated components. Handles exceptions and aggregates them into a MultiException.
1683 Constructs MutableQuantiles with name, description, and interval. @param name Metric name. @param description Metric description.
1684 Creates and registers a MutableStat. @param name Metric name. @param desc Description.
1685 Creates a MutableStat with capitalized names & descriptions. @param name Metric name. @param description Metric description.
1686 Registers a tag with the registry, overriding if necessary. @param name The tag name to register. @return The MetricsRegistry instance.
1687 Registers a tag with the registry, allowing override. @param name Metric name. @param description Metric description. @param value Tag value. @param override Whether to override. @return The MetricsRegistry instance.
1688 Records elapsed time for a given metric name. @param name Metric name. @param elapsed Elapsed time in milliseconds.
1689 Publishes metrics to registered sinks, optionally immediate. @param buffer MetricsBuffer to publish. @param immediate If true, publishes immediately.
1690 Copies statistical data from another SampleStat instance. @param other The SampleStat instance to copy from.
1691 Logs slow RPC calls and increments the slow RPC counter. @param methodName RPC method name. @param call RPC call object. @param details Processing details.
1692 Refreshes the netgroup cache. Fetches groups, updates internal state, and caches them.
1693 Calls m1 with and without a parameter.
1694 Logs formatted messages with separators. @param format Format string. @param args Arguments for formatting.
1695 Logs an error and throws a KerberosDiagsFailure. @param category Error category. @param message Error message.
1696 Creates a UserGroupInformation object for a given user. @param user User's name. @param authMethod Authentication method to use.
1697 Starts the expired token removal process in a daemon thread.
1698 Updates the current delegation key with a new expiry time.
1699 Constructs a DelegationTokenAuthenticatedURL with null parameters.
1700 Constructs a DelegationTokenAuthenticatedURL with an authenticator. @param authenticator DelegationTokenAuthenticator
1701 Constructs a DelegationTokenAuthenticatedURL with a null authenticator. @param connConfigurator Connection configurator
1702 Reads data into a byte array. @param b byte array to read into @return number of bytes read, or -1 if EOF
1703 Checks if keytab exists, login context exists, and keytab path is set.
1704 Checks authentication status based on keytab and login context.
1705 Creates and initializes the DelegatingSSLSocketFactory instance. @param preferredMode Preferred SSL channel mode. @throws IOException if initialization fails.
1706 Constructs a CommandFactory with default configuration.
1707 Default constructor. Must call initialize() to setup FS.
1708 Initializes a HarFileSystem with a given FileSystem. @param fs The underlying FileSystem to use.
1709 Constructs a FsShell object with a null configuration.
1710 Initializes GetGroupsBase with a Configuration and default output. @param conf Hadoop configuration.
1711 Default constructor. Initializes standard output and error streams.
1712 Resolves a hostname to an InetAddress, handling various formats. @param host The hostname to resolve. @return The resolved InetAddress or throws UnknownHostException.
1713 Writes the ACL string to the output stream. @param out output stream to write ACL to
1714 Creates a ZooKeeper instance configured with SSL/TLS. @return ZooKeeper instance @throws IOException if ZooKeeper connection fails
1715 Gets the size of the queue for a given key name. @param keyName The key name for which to retrieve the queue size.
1716 Retrieves a list of values from a key queue. @param keyName Key name. @param num Number of values to retrieve.
1717 Processes tasks for a key, executes them, and releases the lock. @param keyName The key associated with the task queue.
1718 Schedules an element, conditionally handling backoff/failover. @param e Element to schedule.
1719 Initializes the engine if not already initialized. Calls m1() to perform initialization steps.
1720 Returns the elapsed time in the specified time unit. @param timeUnit the time unit to convert to @return the elapsed time in the given unit
1721 Returns a ProtocolSignature based on client and server versions. @param clientMethodsHashCode Client method hashcode. @param serverVersion Server protocol version. @param protocol Protocol class.
1722 Decays RPC costs and updates related metrics. Applies decay factor to costs and logs results.
1723 Calculates a priority level for a schedulable object. @param obj The schedulable object to determine priority. @return Priority level, bounded between 0 and the max value.
1724 Retrieves an element from the queue based on priority. Returns null if no element is found.
1725 Closes the connection, releasing resources and handling exceptions.
1726 Constructs a Globber instance with given file system, path, filter, and symlink resolution.
1727 Creates a MachineList from a comma-separated string of hosts. @param hostEntries Comma-separated string of host entries.
1728 Returns a SysInfo instance based on the OS. Returns SysInfoLinux on Linux, SysInfoWindows on Windows.
1729 Calculates available RAM in kilobytes. Calls m1() to update stats.
1730 Calculates total free memory (KB) including free swap space.
1731 Transforms XML using a stylesheet, writing output to a Writer. @param styleSheet Stylesheet input stream. @param xml XML input stream. @param out Writer to write transformed XML.
1732 Formats content summary string based on options and types. @param qOption, hOption, tOption, xOption flags for formatting @param types list of storage types @return formatted summary string
1733 Formats content summary with human-readable sizes. @param hOption flag to use human-readable format @return formatted content summary string
1734 Calculates map capacity based on percentage and name. @param percentage Percentage of memory to use. @param mapName Name of the map.
1735 Reads a chunk of data, updating the internal count. Uses readChecksumChunk to populate the buffer.
1736 Reads data from stream, up to 'len' bytes, with retries. @param len Maximum number of bytes to read. @return Number of bytes actually read.
1737 Decodes UTF-8 bytes from IBUF to a String. @return Decoded String from IBUF.
1738 Decodes UTF-8 bytes from input to a String. @param bytes Input byte array @param length Number of bytes to decode @return Decoded String
1739 Decodes UTF-8 bytes from a byte array into a String. @param bytes Byte array containing UTF-8 encoded data. @return Decoded String.
1740 Decodes UTF-8 bytes from DataInput to a String. @param in Input stream of bytes to decode. @return Decoded String.
1741 Validates RPC response header and throws exception if invalid. @param header RPC response header to validate
1742 Converts a single byte to a hex string. @param b the byte to convert @return hex string representation of the byte
1743 Handles uncaught exceptions in a thread, logs, and exits. @param thread The thread where the exception occurred. @param exception The exception that was caught.
1744 Displays usage information and exits the application.
1745 Handles uncaught thread exceptions, logs errors, and shuts down. @param thread The thread that threw the exception. @param exception The exception that was thrown.
1746 Exits application with status and message. @param exitCode Exit status code. @param message Error message to log.
1747 Exits application with status, logs error, handles exceptions. @param status The exit status code.
1748 Logs error message and terminates the application. @param status Exit status code. @param msg Error message to log.
1749 Handles HaltException, logs error, and either halts or propagates. @param status Halt status code @throws HaltException if caught error needs to be re-thrown
1750 Sorts a portion of IndexedSortable data using quicksort. @param s data to sort, p start, r end
1751 Constructs an AclStatus with provided owner, group, sticky bit, entries, and permission.
1752 Parses an ACL string into a list of ACL objects. @param aclString Comma-separated ACL string. @return List of ACL objects.
1753 Parses an authentication string into a list of ZKAuthInfo objects. @param authString Comma-separated auth string (scheme:auth) @return List of ZKAuthInfo objects
1754 Copies file attributes from source to target path. @param src Source path data. @param target Target path data. @param preserveRawXAttrs Whether to preserve raw XAttrs.
1755 Creates AclEntries for user, group, and other based on permission. @param perm FsPermission to use for creating the entries. @return List of AclEntry objects.
1756 Creates or returns a DurationTracker. @param key Identifier for the tracked operation @param count Initial counter value
1757 Initializes the tracker with IO statistics store and key. @param iostats IO statistics store @param key Identifier for the tracked operation
1758 Constructs a `DurationInfo` instance with default logging level. @param log Logger instance for logging. @param format Format string for duration. @param args Arguments for the format string.
1759 Waits for a CompletableFuture to complete, handling exceptions. @param future The CompletableFuture to wait for. @throws IOException if a CancellationException occurs.
1760 Waits for a CompletableFuture to complete, ignoring exceptions. @param future The CompletableFuture to wait for.
1761 Creates a CrcComposer with specified CRC type and hint. @param type CRC type (DataChecksum.Type) @param bytesPerCrcHint bytes per CRC hint @return CrcComposer instance
1762 Updates composite CRC based on bytesPerCrc and hint. @param crcB Current CRC value. @param bytesPerCrc Bytes per CRC unit.
1763 Masks a time string with a formatted finish time & diff. @param dateFormat DateFormat object for formatting. @param finishTime Finish time in milliseconds. @param startTime Start time in milliseconds.
1764 Masks characters in a string using a specified escape char. @param str String to mask, returns null if null.
1765 Masks characters in a string using a specified escape and comma. @param str input string
1766 Masks the startup message with hostname and arguments. @param classname Class name. @param args Arguments to mask. @return Masked startup message string.
1767 Retrieves the next element from the wrapped iterator. @throws IOException if an I/O error occurs @throws NoSuchElementException if no more elements exist
1768 Executes a Future, handling exceptions and cancellation. @param future Future to execute, returns result or throws exception.
1769 Collects results from a collection of Futures. @param collection Futures to evaluate, returns list of results.
1770 Awaits Future completion with timeout, re-throwing exceptions. @param future Future to await. @param timeout Timeout duration. @param unit Timeout unit.
1771 Collects results from a collection of Futures with a timeout. @param collection Futures to await results from. @param duration Timeout duration for awaiting each Future. @return List of results from completed Futures.
1772 Collects results from a collection of Futures, handling exceptions. @param collection Futures to collect results from. @return List of results from completed Futures.
1773 Creates an instance of the class using a constructor and configures it. @param theClass class to instantiate @param conf Hadoop configuration @return Instance of the class
1774 Gets the key class from SequenceFile. Caches for reuse. @return Class of the key in the SequenceFile.
1775 Gets the class of the value object, caching the result. @return Class object of the value, or throws RuntimeException.
1776 Loads a class by name. Returns SUCCESS, E_NOT_FOUND, or E_LOAD_FAILED. @param name Class name to load.
1777 Creates a class instance by name. @param name Class name to instantiate. @return SUCCESS, E_NOT_FOUND, or E_CREATE_FAILED.
1778 Creates a new Configuration object with default properties.
1779 Returns the Configuration object, using suppliedConf if available.
1780 Constructs a FindClass object, initializing it with a Hadoop Configuration.
1781 Constructs a `ReconfigurableBase` with a new Hadoop Configuration.
1782 Constructs a ReconfigurableBase with the given Configuration. @param conf The Hadoop Configuration object to use.
1783 Executes a shell command and returns its output. @param executable Command to execute @return Output of the executed command
1784 Executes a shell command with configured parameters. Handles timeout, error stream, and process completion.
1785 Creates a new phase, sets its status. @param status The status string for the new phase. @return Progress phase object.
1786 Calls overloaded method with null ACL list. @param path ZK path to create nodes for.
1787 Checks if a path has a capability and invokes the method. @param fs Hadoop file system. @param path Path to check. @param capability Capability to check for. @return True if the path has the capability.
1788 Checks if stream capabilities has the specified capability. @param object The stream capabilities object. @param capability Capability to check for. @return True if the capability exists, false otherwise.
1789 Retrieves I/O statistics counters from a source. @param source The source object to fetch counters from. @return A map of statistics counters.
1790 Retrieves I/O statistics from a source. @param source The source of I/O statistics. @return A map of statistic names to long values.
1791 Retrieves minimum I/O statistics from the source. @param source The source for retrieving statistics. @return A map of string keys to long values.
1792 Retrieves maximum I/O statistics from the source. @param source The source object for statistics. @return A map of statistic names to maximum values.
1793 Retrieves I/O statistics means from a source. @param source The source object to fetch statistics from. @return A map containing the statistics means.
1794 Invokes the method with arguments, logging a message if not static. @param args Arguments to pass to the method. @return Result of the method invocation.
1795 Binds a method to the builder. @param className Class name of the method. @param argClasses Method argument types.
1796 Binds a method to the builder. @param className Class name. @param argClasses Method argument types.
1797 Creates an UnboundMethod, logs if not found, and checks if static. @param source Class containing the method. @param returnType Method return type. @param name Method name. @param parameterTypes Method argument types. @return UnboundMethod object.
1798 Checks if I/O statistics snapshot creation is available. @param object Object used to determine availability. @return True if snapshot creation is available, false otherwise.
1799 Checks if IO statistics method is available on the object. @param object The object to check. @return True if the method is available, false otherwise.
1800 Checks if creating an I/O statistics snapshot is supported. @param object Object used to determine snapshot availability.
1801 Checks if I/O statistics are enabled and available.
1802 Deletes files in a page. @param fileSystem Hadoop file system instance. @param path Path to delete files from. @return Number of files deleted.
1803 Deletes files in bulk. @param fs FileSystem instance. @param base Base path for deletion. @param paths Paths to delete. @return List of deleted file entries.
1804 Opens a file stream with specified parameters. @param fs FileSystem instance @param path Path to the file @return FSDataInputStream for file access
1805 Reads data from an InputStream into a ByteBuffer at a specific position. @param in Input stream to read from. @param position File position to read at. @param buf Buffer to write data into.
1806 Creates an I/O statistics snapshot using the provided method.
1807 Checks if the statistics context is enabled. @param iostatisticsContextEnabledMethod The method to check.
1808 Constructs a LightWeightCache with specified parameters. @param recommendedLength recommended size, sizeLimit, expiration periods
1809 Constructs a Filter with specified vector size, hash functions, and type. @param vectorSize Size of the bit vector. @param nbHash Number of hash functions. @param hashType Type of hash function.
1810 Decrements the count for a key if it's a member. @param key The key whose count is decremented.
1811 Adds all keys from the collection to the filter. @param coll A collection of keys to add.
1812 Adds multiple keys to the filter. @param keys List of keys to add; throws NullPointerException if null.
1813 Adds multiple keys to the filter. Throws NullPointerException if keys is null. @param keys Array of keys to add.
1814 Processes a vector index, handling keys and false positives. @param index Index of the vector to process.
1815 Finds the index with the minimum ratio value from the hash array.
1816 Executes a program or prints an error if execution fails. @param argv Command-line arguments; program name is expected. @throws Throwable if an exception occurs during execution.
1817 Retrieves a credential entry, handling deprecated key mappings. @param provider Credential provider to fetch from. @param name Credential entry name.
1818 Adds a deprecation delta to the configuration. @param key Deprecated key. @param newKeys Replacement keys. @param customMessage Custom deprecation message.
1819 Configures server connectors, attempting to bind them to ports. Uses `m4` or `m5` based on port range configuration.
1820 Parses the configuration string to initialize fencing arguments. @param argStr Config string containing user and port info. @throws BadFencingConfigurationException if config is invalid.
1821 Recursively deletes the parent ZNode from ZooKeeper. Throws IOException if deletion fails.
1822 Checks for old active node and fences it if necessary. @return Stat object or null if no old node exists. @throws KeeperException, InterruptedException
1823 Reads a file range into a buffer asynchronously. @param stream Readable stream to read from. @param range FileRange to read. @param allocate Allocates ByteBuffer based on range size.
1824 Caches data; skips if closed or caching disabled. @param data BufferData to cache; must not be null.
1825 Transitions buffer to PREFETCHING state, validates future. @param actionFuture Future representing the prefetch action
1826 Transitions to READY state, calculates checksum, and updates buffer. @param expectedCurrentState Expected current state(s).
1827 Returns block size; returns last block size if last block. @param blockNumber The block number.
1828 Calculates the actual offset based on block number and offset. @param blockNumber The block number. @param offset The initial offset. @return The calculated actual offset.
1829 Constructs a BlockData object with given file size and block size. @param fileSize Size of the file. @param blockSize Size of each block.
1830 Calculates the block index for the given buffer start offset.
1831 Closes all FileSystem instances, skipping automatic ones. @throws IOException if any FileSystem fails to close.
1832 Closes FileSystems associated with a UserGroupInformation. @param ugi UserGroupInformation to check for FS association @throws IOException if closing FileSystems fails
1833 Writes a CharSequence to a file using UTF-8 encoding. @param fileContext FileContext for file operations @param path Path to write to @param charseq CharSequence to write @return FileContext
1834 Writes byte array to a file and returns the filesystem. @param fs Hadoop filesystem object @param path Path to write to @param bytes Byte array to write @throws IOException if an I/O error occurs
1835 Writes lines to a file using the provided charset. @param fs FileSystem to write to. @param path Path to the file. @param lines Lines to write. @param cs Charset to use for encoding.
1836 Writes a CharSequence to a file using a specified charset. @param fs FileSystem to write to. @param path Path to write the CharSequence to. @param charseq CharSequence to write. @param cs Charset to use for encoding.
1837 Constructs a BlockLocation with provided data, interns strings. @param names Block names, interns them.
1838 Creates a counter with given name, description, and initial value. @param name Counter name. @param desc Counter description. @param iVal Initial counter value. @return MutableCounterInt object.
1839 Creates a MutableCounterLong metric with given name, description, and initial value. @param name Metric name. @param desc Metric description. @param iVal Initial value for the counter. @return MutableCounterLong object.
1840 Creates a MutableGaugeLong metric with given name/desc. @param name Metric name. @param desc Metric description. @param iVal Initial value.
1841 Creates a MutableGaugeFloat metric with given name, desc, and initial value. @param name Metric name. @param desc Metric description. @param iVal Initial value.
1842 Creates a MutableGaugeInt with name, description, and initial value. @param name Metric name. @param desc Description. @param iVal Initial value.
1843 Creates a new MeanStatistic, copying data from this instance.
1844 Logs statistics as a string if the source converts successfully. @param log Logger instance for logging. @param message Message to log. @param source Source object to convert to string.
1845 Appends IO statistics to the superclass's string representation. Uses m3 to format the statistics if the instance is IOStatisticsSource.
1846 Converts statistics to a string. @param statistics The statistics object, or null. @return Formatted string or empty string if null.
1847 Tracks duration of an operation, handling exceptions. @param factory DurationTracker factory, or null. @param statistic Statistic identifier. @param input Input object to execute. @return Duration object representing the tracked duration.
1848 Executes a supplier, tracking duration; rethrows exceptions. @param factory Tracker factory, or null. @param statistic Statistic name.
1849 Adds an entry to the cache, potentially evicting the tail. @param entry The entry to add to the cache.
1850 Constructs IOStatisticsStore with initial counters, gauges, etc. @param counters List of counter keys. @param gauges List of gauge keys.
1851 Reads up to len bytes of encrypted data into the provided buffer. @param b Destination byte array @param off Offset within the byte array @param len Maximum number of bytes to read @return Number of bytes read
1852 Decrypts data into buffer using decryptor and IV. @param position File position @param buffer Data buffer @param offset Offset in buffer @param length Number of bytes to decrypt
1853 Decrypts data from input buffer to output buffer. @param filePosition File position for decryption.
1854 Decrypts a portion of the input buffer. @param buf Input buffer to decrypt @param length Length of data to decrypt @param start Starting position in the buffer
1855 Seeks to a specific position in the input stream. @param pos The position to seek to.
1856 Skips a specified number of bytes from the input stream. @param n The number of bytes to skip. @return The actual number of bytes skipped.
1857 Initializes the filter with a file pattern and default filter. @param filePattern Glob pattern for filtering.
1858 Constructs a GlobFilter with a file pattern and PathFilter. @param filePattern Glob pattern for filtering. @param filter PathFilter to apply.
1859 Extracts a tar archive to a directory, handling gzip if needed. @param inputStream Input stream for the archive. @param untarDir Directory to extract to. @param gzipped True if the archive is gzipped.
1860 Returns file system statistics. Delegates to AbstractFileSystem.
1861 Resets file system statistics by calling the AbstractFileSystem's implementation.
1862 Encodes ECChunks to ByteBuffers and performs erasure coding. @param inputs Input ECChunk array @param outputs Output ECChunk array
1863 Creates a BlockingThreadPoolExecutorService with configured limits. @param activeTasks Active thread count. @param waitingTasks Waiting task queue size.
1864 Initializes buffer state with provided offsets and data. @param bufferData Buffer data to use. @param startOffset Starting offset. @param readOffset Current read offset.
1865 Delegates to m1() and returns its result.
1866 Executes a task using m1 and its m2 method.
1867 Returns a serializable object resulting from chained method calls.
1868 Processes stats from source. Returns true if stats are valid.
1869 Executes a task on items, handling exceptions and reverts. @param task The task to execute on each item. @return True if all tasks succeeded, false otherwise.
1870 Sets the thread's I/O statistics context. @param statisticsContext The context to set, or null.
1871 Sets the thread's I/O statistics context if available.
1872 Updates thread I/O statistics if a context exists.
1873 Handles an exception, logs details, and propagates a message. @param e The exception to process.
1874 Creates a PathHandle, using default options if none are provided. @param stat FileStatus object. @param opt Handle options. @return PathHandle object.
1875 Adds a token for an alias, updating existing tokens if needed. @param alias Token alias. @param t The token to add or update.
1876 Encrypts/decrypts data from inBuffer to outBuffer using OpenSSL. @param inBuffer Input buffer. @param outBuffer Output buffer.
1877 Encrypts/decrypts data from inBuffer to outBuffer using OpenSSL. @param inBuffer Input buffer. @param outBuffer Output buffer.
1878 Initializes the source pattern and variable map for the mount point. @throws IOException if the regex is invalid or interceptors fail.
1879 Creates a Path by resolving a child path relative to a parent. @param parent The parent Path. @param child The child Path to resolve.
1880 Constructs a Path object from a string representation. @param pathString The path string to be parsed. @throws IllegalArgumentException if pathString is invalid.
1881 Constructs a Path object from scheme, authority, and path. Normalizes the path for Windows and Linux systems.
1882 Formats the URI remainder, handling scheme presence. @param uri The URI object. @param inferredSchemeFromPath Whether scheme is inferred.
1883 Extracts a filename from a Path, validating its format. @param p The Path object from which to extract the filename.
1884 Resolves a Path object. @param p The Path object to resolve. @return Resolved Path object.
1885 Creates a file with specified options. @param f Path to create the file. @param createFlag CreateFlag enum. @param opts CreateOpts options.
1886 Applies a umask to a permission and returns the masked result. @param mode The base permission. @param umask The umask to apply.
1887 Checks if a file exists with the given permissions. @param f Path to the file. @return True if file exists with specified permissions.
1888 Sets the file/directory permission. Uses default if null.
1889 Creates a data output stream for writing to a file. @param f Path to the file @param overwrite Overwrite if file exists @return FSDataOutputStream object
1890 Creates an ImmutableFsPermission from a short value. @param permission short value representing file permissions
1891 Writes a key-value pair to the output stream, validating types. @param key The key to write. @param val The value to write.
1892 Retrieves the current block size. @return The current size of the block.
1893 Skips bytes, ensuring the skip doesn't exceed file length. @param n number of bytes to skip @return number of bytes actually skipped
1894 Gets the content length of a file or directory. @param path Path object representing the file/directory @return Total length as a long value.
1895 Delegates to the underlying FileSystem to get content length. @param path Path object representing the file/directory @return Total length as a long value
1896 Continuously adds incrementing strings to a list.
1897 Attempts to start the service, transitioning to STARTED state. Handles exceptions and notifies listeners on success.
1898 Transitions service to a new state. @param newState The proposed new state. @return The previous state of the service.
1899 Retrieves the default Kerberos realm; logs errors if retrieval fails.
1900 Compares this BytesWritable with another. @param right_obj The object to compare to. @return True if equal, false otherwise.
1901 Checks if this Text object is equal to another. @param o The object to compare to. @return True if equal, false otherwise.
1902 Copies bytes from BytesWritable to internal array. @param newData BytesWritable containing data to copy
1903 Decodes data from input buffers and writes to output buffers. @param inputs Input buffers containing encoded data. @param erasedIndexes Indexes of erased data units. @param outputs Output buffers for decoded data.
1904 Decodes data using ByteArrayDecodingState and recovers erased blocks. @param inputs Input byte arrays. @param erasedIndexes Indices of erased data blocks. @param outputs Output byte arrays.
1905 Skips to the next block delimiter in the compressed stream.
1906 Creates a CBZip2OutputStream with the default block size. @param out output stream to write compressed data @throws IOException if an I/O error occurs
1907 Creates a BlockDecompressorStream with input and decompressor. @param in Input stream to decompress @param decompressor Decompressor to use @throws IOException If an I/O error occurs
1908 Creates a compression output stream using the codec pool. @param out The output stream to wrap.
1909 Creates a compression output stream using the codec pool. @param out The output stream to wrap. @return CompressionOutputStream
1910 Creates a compression output stream using the codec pool. @param out The output stream to wrap. @return CompressionOutputStream
1911 Creates a compression output stream using the codec pool. @param out The output stream to wrap. @return CompressionOutputStream
1912 Writes data and index to the MapFile. Delegates to data and index writers.
1913 Releases compression resources and closes the output stream.
1914 Creates a CompressionInputStream using the codec and input stream. @param in Input stream to compress. @return CompressionInputStream instance.
1915 Creates a CompressionInputStream using the codec and input stream. @param in Input stream to compress. @return CompressionInputStream instance.
1916 Creates a CompressionInputStream using the codec and input stream. @param in Input stream to compress. @return CompressionInputStream instance.
1917 Creates a CompressionInputStream using the codec and input stream. @param in Input stream to compress. @return CompressionInputStream instance.
1918 Calls m1() on the index and data objects, if index is open.
1919 Delegates close operation to input stream and clears reference.
1920 Gets a DirectDecompressor using the provided configuration. @param conf Hadoop configuration object @return DirectDecompressor or null if native Zlib is unavailable
1921 Writes sequence file metadata to the output stream.
1922 Writes credential data (tokens & secret keys) to output. @param out output stream for writing credential data
1923 Initializes reader, checks sync, and reads record counts.
1924 Reads data based on compression status, seeking or decompressing.
1925 Reads a UTF-8 string from input. @param in Input stream.
1926 Retrieves a delegation key by ID, fetching from SQL if missing. @param keyId The ID of the delegation key to retrieve.
1927 Retrieves a delegation token for a given URL and credentials. @param url URL to fetch token for @param creds Credentials to use for token retrieval @return Delegation token
1928 Obtains a Token for SASL authentication. @param authType SASL authentication type @return Token object or null if token retrieval fails
1929 Acquires a token for a given service address. @param token The token to update, or null if not found. @param addr The InetSocketAddress representing the service.
1930 Creates a Token from a TokenProto. @param tokenProto TokenProto object to create Token from @return Token object
1931 Retrieves or creates a ByteString from a Text key. @param key The Text key to look up or create a ByteString for. @return The corresponding ByteString.
1932 Creates a new Token by cloning another Token. @param other The Token to clone from.
1933 Reads a line from the input stream. @param str Text object to append to. @param maxLineLength Max line length. @return Number of bytes consumed.
1934 Reads a line into the provided Text object. @param str Text object to append the line to
1935 Constructs an InstrumentedLock with a ReentrantLock. @param name Lock name, @param logger Logger, @param minLoggingGapMs, @param lockWarningThresholdMs
1936 Creates a dynamic proxy with retry logic. @param iface Interface to implement. @param implementation Initial implementation. @param retryPolicy Retry policy to use.
1937 Waits before retry, handles interruption, and increments counters. @return RETRY if wait time exists, otherwise performs next step.
1938 Creates a Writer with given stream, block size, compression, and comparator. @param fsdos Output stream for writing data.
1939 Checks if the last chunk has been processed. Returns true if last chunk, false otherwise.
1940 Returns the number of bytes remaining to be read.
1941 Compares the entry's key with a ByteArray. @param buf Byte array. @param offset Offset. @param length Length.
1942 Flushes buffer and calls super.m2(). Closes output if open.
1943 Writes a key-value pair to the buffer, checking types and size. @param key The key to write. @param val The value to write.
1944 Writes key/value to buffer, increments record count. @param keyData Key data bytes @param val Value bytes
1945 Copies data from src Writable to dst Writable using reflection.
1946 Selects a node within a scope, excluding specified nodes. @param scope Node scope string. @param excludedNodes Nodes to exclude from selection.
1947 Sorts nodes by distance from a starting node. @param reader Starting node. @param nodes Array of nodes.
1948 Calls overloaded method with null consumer. @param reader Starting node. @param nodes Nodes array. @param activeLen Length.
1949 Constructs SocketInputStream from a Socket with a timeout. @param socket The socket to read from. @param timeout Timeout duration in milliseconds. @throws IOException if an I/O error occurs.
1950 Constructs a SocketInputStream using a Socket. @param socket Socket to read data from. @throws IOException if an I/O error occurs.
1951 Creates a SocketOutputStream using a socket and timeout. @param socket Socket to write to. @param timeout Timeout duration in milliseconds. @throws IOException if an I/O error occurs.
1952 Adds a node to the network topology, validating its location. @param node The node to add.
1953 Reads data from a ByteBuffer, handling timeouts and closed channels. @param buf ByteBuffer to read from. @param ops Selectable channel operations. @return Number of bytes read or -1 if closed, throws IOException on timeout.
1954 Connects to a socket with a timeout. @param channel SocketChannel to connect. @param endpoint Remote address to connect to. @param timeout Timeout in milliseconds.
1955 Selects on the channel with specified operations and timeout. @param ops Selection operations to perform. @throws IOException if an I/O error occurs.
1956 Resolves hostname for an interface. @param strInterface Interface name. @throws UnknownHostException if resolution fails.
1957 Resolves hostname for an interface. @param strInterface Interface name. @param nameserver DNS server (optional).
1958 Initializes UgiMetrics.
1959 Constructs MutableInverseQuantiles with name, description, and interval. @param name Metric name. @param description Metric description.
1960 Creates a MutableQuantiles object, validates name, and registers it. @param name Quantiles name. @param desc Quantiles description. @param interval Quantiles interval. @return Newly created MutableQuantiles object.
1961 Creates a MutableStat with the given name, description, and values. @param name Metric name. @param desc Description.
1962 Registers a tag with the registry. @param name Metric name. @param description Description. @param value Tag value.
1963 Records elapsed time for a given metric name and value. @param name Metric name. @param value Elapsed time in milliseconds.
1964 Records queue time for a specific priority level. @param priority Priority level. @param queueTime Queue time in milliseconds.
1965 Records processing time for a specific priority level. @param priority Priority level. @param processingTime Processing time in milliseconds.
1966 Records overall RPC processing time for a given call. @param rpcCallName Name of the RPC call. @param overallProcessingTime Processing time in milliseconds.
1967 Determines Kerberos configuration file path, prioritizing system properties & env vars.
1968 Checks a condition; logs error if false. @param condition Condition to evaluate. @param category Error category if condition fails.
1969 Logs a diagnostic message if the condition is true. @param condition Flag to determine if logging occurs. @param category Diagnostic category. @param message Message to log.
1970 Creates a UserGroupInformation object for a user. @param user User's name.
1971 Validates token password. @param identifier TokenIdent object @param password Password to validate against stored value. @throws InvalidToken if password doesn't match stored value.
1972 Renews Kerberos ticket for a user, scheduling a renewal task.
1973 Constructs Count object with command arguments and config. @param cmd Command-line arguments. @param pos Starting position in the command array. @param conf Hadoop configuration.
1974 Creates and configures a ZooKeeper instance with authentication. @return ZooKeeper instance configured with auth info. @throws IOException, KeeperException on connection or auth failure
1975 Retrieves a single value from the key queue. @param keyName Key name.
1976 Resolves a hostname to an InetAddress, logs slow lookups. @param hostname the hostname to resolve @return InetAddress object
1977 Retrieves a ProtocolSignature based on client and server info. @param server VersionedProtocol instance @param protocol Protocol name @param clientVersion Client protocol version @param clientMethodsHash Client method hashcode @return ProtocolSignature object
1978 Checks if the server supports the specified method. @param methodName Method name to check. @param parameterTypes Method parameter types. @return True if the method is supported, false otherwise.
1979 Validates RPC request header; throws exception on failure. Checks for RPC operation, final packet, and RPC kind.
1980 Decodes a message and returns it. Throws exception on failure. @param message The message to decode. @param buffer Buffer for decoding. @return Decoded message of type T.
1981 Retrieves the next element based on semaphore state. Returns null if semaphore is false.
1982 Handles version mismatch errors based on client version. @param clientVersion Client's version; triggers error handling. @throws IOException if an I/O error occurs during response setting.
1983 Calculates total memory size (RAM + swap) in KB. Uses m1() to fetch RAM, adds swap space.
1984 Constructs HarFSDataInputStream with given FS, path, start, length, bufsize.
1985 Evicts expired entries from the cache up to EVICTION_LIMIT.
1986 Evicts entries until the cache size is within the limit. @param sizeLimit Maximum allowed size of the cache.
1987 Formats content summary string with specified options. @param qOption, hOption, xOption flags for formatting
1988 Formats content summary string with options and storage types. @param qOption, hOption, tOption, types formatting options
1989 Generates quota usage summary. @param hOption Human-readable format flag @param tOption Option to include all types @param types List of storage types to include
1990 Executes a list of CompletableFutures concurrently. @param futures List of CompletableFutures to execute. @throws IOException if a CancellationException occurs.
1991 Waits for CompletableFuture completion, if provided. @param future The CompletableFuture to wait for, or null. @throws IOException if a CancellationException occurs.
1992 Updates CRC value from byte array. @param crcBuffer Byte array containing CRC data. @param offset Starting offset in the array. @param length Length of data to process. @param bytesPerCrc Bytes per CRC unit.
1993 Reads checksums and updates composite CRC. @param checksumIn Input stream for checksums. @param numChecksumsToRead Number of checksums to read. @param bytesPerCrc Bytes per CRC unit.
1994 Creates an instance of the class using configuration. @param theClass class to instantiate @param conf Hadoop configuration @return Instance of the class
1995 Delegates key class retrieval to the underlying data structure.
1996 Gets the value class from the underlying data structure.
1997 Processes command-line arguments to perform actions on classes/resources. @param args Command-line arguments; action and name. @return Result code based on action.
1998 Constructs a builder with a file context and path. @param fc The file context to use. @param path The path for the data input stream.
1999 Creates a DataChecksum from a byte array, extracting parameters. @param bytes byte array containing checksum information @param offset offset into the byte array @return DataChecksum object or throws exception on error
2000 Reads checksum type and size from input stream, creates DataChecksum. @param in input stream to read checksum parameters from @return DataChecksum object or throws exception on failure
2001 Executes a command if the execution interval has passed. Uses `m3()` to perform the command execution.
2002 Aggregates I/O statistics into a snapshot. @param snapshot The snapshot to aggregate into. @param statistics Additional statistics to use.
2003 Creates an I/O statistics snapshot. Uses `m1` and `m2` to create the snapshot. @return I/O statistics snapshot
2004 Creates an I/O statistics snapshot from a source object. @param source The source object for the snapshot. @return An I/O statistics snapshot.
2005 Converts a snapshot to a JSON string. @param snapshot The I/O statistics snapshot. @return JSON string representation of the snapshot.
2006 Creates an I/O statistics snapshot from a JSON string. @param json JSON string containing snapshot data. @return I/O statistics snapshot object.
2007 Loads an I/O statistics snapshot for the given path. @param fs FileSystem object. @param path Path for which to load statistics. @return I/O statistics snapshot.
2008 Retrieves an I/O statistics snapshot from the source. @param source The source object to retrieve statistics from. @return An I/O statistics snapshot.
2009 Saves an I/O statistics snapshot. @param snapshot Snapshot to save, null to create new. @param fs Filesystem to save to.
2010 Converts statistics to a pretty string representation. @param statistics The statistics object to format. @return A formatted string representing the statistics.
2011 Gets the current statistics context method. Uses `m2` to retrieve the method.
2012 Sets the thread context for I/O statistics. @param statisticsContext Statistics context object.
2013 Resets the statistics context. Calls m1() and resets the statistics context using m2.
2014 Retrieves a snapshot of I/O statistics context. Uses internal method to fetch the snapshot.
2015 Checks if I/O statistics aggregation is enabled for the source. @param source The source object for aggregation. @return True if aggregation is enabled, false otherwise.
2016 Compares two version strings. @param version1 First version string. @param version2 Second version string. @return Comparison result.
2017 Creates a CountingBloomFilter with specified size, hashes, and type. @param vectorSize Bit vector size. @param nbHash Number of hash functions. @param hashType Type of hash function.
2018 Constructs a BloomFilter with specified vector size, hash functions, and type. @param vectorSize Size of the bit vector. @param nbHash Number of hash functions. @param hashType Type of hash function.
2019 Checks if a key is possibly present in the Bloom filter. @param key The key to check for possible existence.
2020 Clears a bit at a calculated index based on the provided scheme. @param k The key to process; throws exception if null. @param scheme Clearing scheme to use.
2021 Adds a deprecation delta to the configuration. @param key Deprecated key. @param newKey Replacement key. @param customMessage Custom deprecation message.
2022 Adds a deprecation delta to the configuration. @param key Deprecated key. @param newKeys Replacement keys.
2023 Adds a deprecation delta to the configuration. @param key Deprecated key. @param newKey Replacement key.
2024 Starts the HTTP server, configuring connectors and metrics. Handles exceptions during initialization and server startup.
2025 Updates ZNode to indicate active node status. @param oldBreadcrumbStat ZNode stat from previous update
2026 Deletes the active node's breadcrumb from ZooKeeper. Verifies data integrity and sets the node version.
2027 Reads file ranges into buffers asynchronously. @param stream Readable stream. @param ranges List of FileRange objects. @param allocate Allocates ByteBuffer based on range size.
2028 Processes prefetched buffer data; caches ready buffers. Uses ops to manage prefetch operations.
2029 Retrieves a BufferData instance for the given block number. @param blockNumber The block number to retrieve.
2030 Constructs a FilePosition with file size and block size. @param fileSize Size of the file. @param blockSize Size of each block.
2031 Delegates a check to the block data, using the computed offset.
2032 Closes all FileSystem instances and updates the cache. @throws IOException if closing fails.
2033 Delegates to overloaded method with explicit charset. @param fs FileSystem to use. @param path Path to write to. @param charseq CharSequence to write.
2034 Constructs a BlockLocation with provided data, interns strings. @param names Block names, interns them.
2035 Constructs a BlockLocation with provided data and default integrity status. @param names Block names @param hosts Hostnames @param topologyPaths Topology paths @param offset Block offset @param length Block length
2036 Combines two MeanStatistic instances. @param l Left MeanStatistic to combine. @param r Right MeanStatistic to combine.
2037 Copies IO statistics from source, updating counters, gauges, etc. @param source Source IOStatistics object to copy from
2038 Logs a message and source object using a default logger. @param message Message to log. @param source Source object to convert to string.
2039 Logs IO statistics based on level. @param log Logger instance. @param level Logging level. @param source Statistics source.
2040 Logs stats and closes the iterator if it's Closeable. @param source RemoteIterator to process.
2041 Tracks operation duration using a DurationTrackerFactory. @param factory Tracker factory, or null. @param statistic Statistic identifier. @param input Input object to execute.
2042 Reads encrypted data from stream at given position. @param position File position @param buffer Data buffer @param offset Offset in buffer @param length Number of bytes to read @return Number of bytes read
2043 Reads data from the input stream at a specific position. @param position File position @param buffer Data buffer @param offset Offset in buffer @param length Number of bytes to read
2044 Reads data from the stream into the provided buffer. @param position File position for reading. @param buf ByteBuffer to store the read data. @return Number of bytes read.
2045 Reads data into a buffer at a specified position. @param position File position to read from. @param buf Buffer to store the read data.
2046 Reads data into the provided ByteBuffer. @param buf The destination ByteBuffer. @return Number of bytes read, or -1 if EOF.
2047 Serializes an object to a DataOutput stream. @param out Output stream. @param instance Object to serialize.
2048 Acquires a buffer for a block, non-blocking. @param blockNumber Block number for the buffer.
2049 Acquires a buffer from the pool. Delegates to the buffer pool's m1() method.
2050 Executes a task, either single-threaded or via service. @param task The task to execute. Returns true if exceptions occurred.
2051 Processes path data items, handling exceptions during processing. @param parent Parent path data. @param items PathData objects to process.
2052 Creates a Function to get PathHandle from FileStatus. @param fs FileSystem object @param opt Handle options @return Function from FileStatus to PathHandle
2053 Creates a ShellCommandExecutor for retrieving group names. @param userName The username to query group names for.
2054 Creates a ShellCommandExecutor for user group commands. @param userName User name to query for group information.
2055 Restores credentials from a DataInput stream. @param in Input stream containing serialized credentials.
2056 Adds delegation tokens to credentials, fetching if needed. @param issuer Token issuer. @param renewer Token renewer. @param credentials User credentials. @param tokens List of tokens to add.
2057 Adds a token for an alias, synchronizing access to the subject. @param alias Token alias. @param token The token to add. @return true
2058 Resolves a path, returning it if absolute, otherwise relative to workDir. @param workDir Base directory for relative paths. @param path The path to resolve. @return Resolved Path object.
2059 Resolves a path, returning it if absolute, otherwise relative to workDir. @param workDir Base directory for relative paths. @param path The path to resolve. @return Resolved Path object.
2060 Creates a File object from a Path, resolving it if relative. @param path The Path to create a File from.
2061 Resolves a Path, returning it if absolute, otherwise resolving it. @param p The Path to resolve. @return A resolved Path object.
2062 Constructs a Path object, handling URI scheme and authority. @param defaultUri Default URI to use if scheme/authority is missing. @param workingDir Working directory for path construction.
2063 Creates a Path object from the URI's m1() value.
2064 Creates a Path object representing the HAR file's URI. @return Path object representing the URI.
2065 Creates a Path object from the SFTP channel's m1 result. @param channel The SFTP channel to extract the path from. @return Path object or null if an error occurs.
2066 Retrieves a FileStatus for the given path, throwing PathNotFoundException if not found and ignoreFNF is false.
2067 Creates a Path object from the internal path string.
2068 Returns a Path object from targetPath, or null if targetPath is null.
2069 Gets the used space of the root directory. @return Used space as a long value.
2070 Constructs a ChRootedFileSystem with a specified root URI. @param fs The underlying FileSystem. @param uri The root URI for the chrooted file system.
2071 Creates a Path object representing the remaining path segments. @param path Array of path segments. @param startIndex Starting index for path segments. @return Path object representing the remaining path.
2072 Constructs a Path representing the concatenated target directory links.
2073 Creates a Path by resolving a child path relative to a parent. @param parent The parent Path. @param child The child Path to resolve.
2074 Creates a Path by resolving a child path relative to a parent. @param parent The parent Path. @param child The child Path to resolve.
2075 Creates a Path by resolving a child path relative to a parent. @param parent The parent Path. @param child The child Path to resolve.
2076 Renames a file or directory. @param fs FileSystem object. @param oldName Original path. @param newName New path.
2077 Creates a Path object from the file's m1() and m2() paths. @param f The input file. @return A Path object representing the combined paths.
2078 Extracts a masked URI from a nested URI. @param nestedUri The URI to mask. @return A Path object representing the masked URI.
2079 Converts an array of strings to an array of Path objects. @param str Array of strings to convert. Returns null if null.
2080 Returns a new Path object, normalizing the path if needed. @param path The Path object to normalize. @return A normalized Path object.
2081 Combines two paths, constructing a new Path object. Uses scheme, authority, and combines paths.
2082 Checks if path meets file type requirement. @param typeRequirement FileTypeRequirement to check against.
2083 Constructs a masked path string from a child path. @param childPath The child path to mask.
2084 Throws a PathNotFoundException if the PathData item is missing. @param item The PathData object to check. @throws IOException If the path is not found.
2085 Gets an AbstractFileSystem for the given path. @param absOrFqPath Path object @return AbstractFileSystem object @throws IOException, UnsupportedFileSystemException
2086 Sets permissions on a directory. @param fs FileSystem object. @param dir Path to the directory. @param permission FsPermission to apply.
2087 Constructs a LocatedFileStatus with specified attributes and block locations. @param locations Array of BlockLocation objects
2088 Writes a key-value pair to the output stream. @param key The key to write. @param val The value to write.
2089 Processes records, writing key-value pairs to the writer. @param records Iterator for raw key-value records. @param writer Writer to write the processed records.
2090 Initializes the service with the given configuration. @param conf Hadoop configuration object.
2091 Stops the service, handling state transitions and failures. Transitions service to STOPPED state if not already stopped.
2092 Checks if this PrivateToken is derived from the given public token. @param thePublicService The public token to check against. @return True if derived, false otherwise.
2093 Checks if token's alias matches given alias. @param token The token to check. @param alias The alias to compare against. @return True if alias matches, false otherwise.
2094 Checks URL/service against fetcher's hostname. @param fetcher DtFetcher object. @param service Service Text object. @param url URL String. @return True if URL/service matches hostname.
2095 Creates a directory. Throws DiskErrorException if creation fails. @param dir The directory to create
2096 Checks if a directory exists and is accessible. @param dir The directory to validate.
2097 Calls m1 with false arguments.
2098 Decodes data, handles erased indexes, and validates results. @param inputs Input buffers, erasedIndexes, outputs
2099 Decodes ECChunks to ByteBuffers and writes to output array. @param inputs ECChunk array to decode. @param erasedIndexes Indexes of erased data units. @param outputs Output array for decoded data.
2100 Finalizes the current block, registers it, and closes resources.
2101 Preserves input if needed; otherwise, deletes segment path.
2102 Reads and processes a block; ensures proper cleanup.
2103 Reads token and secret key data from input stream. @param in Input stream containing serialized credential data.
2104 Reads key length from buffer or input stream. @param key Key buffer to populate. @return Key length or -1 if end of file.
2105 Configures value, reads data, and handles compression. @param val Writable value to configure and read. @throws IOException if an I/O error occurs.
2106 Processes a value, configuring it and handling compression. @param val The value to process. @return The processed value.
2107 Reads a key-value pair from the input stream. @param key DataOutputBuffer for the key. @param val ValueBytes for the value. @return Length of the record or -1 if at end.
2108 Reads value length, decompresses if needed, returns length. @param val ValueBytes object containing data @return Value length as an integer
2109 Retrieves a DelegationTokenInformation by token identifier. @param ident Token identifier @return DelegationTokenInformation object
2110 Creates a PermissionStatus object from a DataInput stream. @param in Input stream containing permission data. @return Populated PermissionStatus object.
2111 Reads an enum value from input. @param in Input stream. @param enumType Enum type.
2112 Reads ACL string from input and processes its components. @param in Input stream containing the ACL string.
2113 Retrieves a ByteString from a Text key. @param key The Text key to look up. @return The corresponding ByteString.
2114 Converts a Token object to a TokenProto. @param tok The Token object to convert. @return TokenProto representation of the Token.
2115 Constructs a DelegationTokenIdentifier with kind, owner, renewer, and user. @param kind Token kind. @param owner Token owner. @param renewer Token renewer. @param realUser The real user.
2116 Executes method with retry logic, returns CallReturn or exception. Returns CallReturn with result or exception if failure occurs.
2117 Reads key and value data; throws EOF if none remain. @throws IOException if an I/O error occurs.
2118 Writes value data to DataInputStream, updating value size. @param value The BytesWritable value to write. @return The size of the written value.
2119 Writes the entry value to the output stream. @param out the output stream to write to @return the number of bytes written
2120 Calls overloaded m1 with full buffer. @param buf Byte array to process.
2121 Checks if two Entry objects are equal by comparing keys. Compares keys using the callee's compareTo method.
2122 Retrieves a delegation token. @param url Operation URL. @param token Authentication token. @return Delegation token.
2123 Renews a delegation token and returns the renewal count. @param url Operation URL @param token Authentication token @param dToken Delegation token to renew @param doAsUser User to renew the token as @return Renewal count as a long
2124 Cancels a delegation token. @param url URL for cancellation. @param token Authentication token. @param dToken Delegation token to cancel. @param doAsUser User to execute as.
2125 Selects a random node within a scope, excluding none. @param scope Node scope string.
2126 Sorts nodes based on proximity, potentially adjusting the reader. @param reader Starting node. @param nodes Array of nodes.
2127 Creates a SocketInputWrapper with a socket and timeout. @param socket The socket to wrap. @param timeout Timeout in milliseconds.
2128 Creates an OutputStream for the socket, using SocketOutputStream if hostname is null. @param socket Socket to create OutputStream for. @param timeout Timeout duration in milliseconds. @return OutputStream object.
2129 Connects a socket with a timeout, handling address families and loopback detection. @param socket Socket to connect @param endpoint Remote address @param timeout Timeout in milliseconds
2130 Registers an MBean with the MBeanServer. @param serviceName Service name. @param nameName Metric name. @param properties Additional properties. @param theMbean The MBean to register.
2131 Creates and registers a MutableQuantiles object. @param name Metric name, validates it. @param interval Interval value, must be positive.
2132 Constructs a RetryCache with specified name, percentage, and expiration. @param cacheName Cache name. @param percentage Capacity percentage. @param expirationTime Cache expiration time.
2133 Processes a protocol class, adding metrics for each method. @param protocol Class to process, containing methods to track.
2134 Adds metrics for each name in the input array. @param names Array of metric names to add.
2135 Aggregates local stats into global metrics. @param localStats Map of local stat names to ThreadSafeSampleStat
2136 Gets or creates a MutableRate. Returns existing if specified. @param name Rate name. @param desc Description. @param extended Extended flag.
2137 Registers rate metrics for methods within a protocol class. @param protocol Class containing methods to be instrumented.
2138 Processes method annotations, registers metrics, and tracks usage. @param source Object source. @param method Method to process.
2139 Checks Kerberos authentication; logs errors if issues are found. @param messagePrefix Prefix for error messages. @param user UserGroupInformation object.
2140 Checks file existence, type, emptiness, and readability. @param file File to check. @param category Error category if any check fails.
2141 Gets Kerberos short name; logs errors if principal is null or invalid. @param principal Kerberos principal name.
2142 Creates a UserGroupInformation object based on owner and realUser. Returns null if owner is invalid.
2143 Default constructor. Initializes the Find object with recursion enabled.
2144 Default constructor. Provides no-op initialization.
2145 Relogins the HadoopLoginContext, potentially re-authenticating.
2146 Relogins the HadoopLoginContext, re-authenticating if needed.
2147 Relogins the HadoopLoginContext, re-authenticating if needed.
2148 Creates an InetSocketAddress from a host and port, resolving hostname. @param host Hostname or IP address. @param port Port number. @return InetSocketAddress object.
2149 Resolves a host string to an InetAddress, returns null if null. @param host the hostname to resolve @return InetAddress object or null if resolution fails
2150 Sends RPC request. Closes connection if needed. @param call The RPC call to send.
2151 Processes an RPC request, handling deserialization and tracing. @param header RPC request header @param buffer Buffer containing request data
2152 Sends RPC response with header and status. @param call RPC call context. @param status RPC status.
2153 Refreshes the IP list and updates the cache expiry time.
2154 Prints system information to stdout. Uses SysInfoLinux to retrieve and display stats.
2155 Formats content summary string with options. @param qOption, hOption formatting options
2156 Reads data into a buffer, validating input parameters. @param b Data buffer. @param off Offset. @param len Length.
2157 Creates and returns an Expression instance of the given class. @param expressionClass Class of the expression to create @param conf Hadoop configuration @return Expression instance or null if class is null
2158 Retrieves a command instance by name. @param cmdName Command name to retrieve. @param conf Hadoop configuration. @return Command instance or null if not found.
2159 Creates a WritableComparable instance using reflection. @return A WritableComparable object.
2160 Creates a Writable instance of the given class, using config. @param c Writable class to instantiate @param conf Hadoop configuration @return Writable instance or created via reflection.
2161 Creates a SocketFactory instance from a class name in configuration. @param conf Hadoop configuration @param propValue Class name of the SocketFactory @return SocketFactory instance or throws RuntimeException
2162 Creates a token instance for a given token kind. @return TokenIdentifier object or null if kind not found
2163 Gets a DiskValidator instance, either from cache or by creating it. @param clazz The DiskValidator class to retrieve or create.
2164 Constructs a DynamicBloomFilter with initial filter and record count. @param vectorSize Bit vector size. @param nbHash Number of hash functions. @param hashType Hash function type. @param nr Initial number of filters.
2165 Expands the Bloom filter matrix by creating a new filter.
2166 Constructs a RetouchedBloomFilter with specified size, hash functions, and type.
2167 Applies properties and resources, potentially updating configurations. @param props Configuration properties.
2168 Yields the election, resets active node if needed, and stops election. @param needFence Whether to fence the election.
2169 Reads file ranges using vectored reads. @param ranges List of FileRange objects to read. @param allocate Allocates ByteBuffer based on range size.
2170 Constructs a BlockLocation with provided data, interns strings. @param names Block names, interns them. @param hosts Hostnames associated with the block. @param offset Block offset. @param length Block length.
2171 Constructs a DurationStatisticSummary with given data. @param key Summary key. @param success Success status. @param count Operation count. @param max Maximum duration. @param min Minimum duration. @param mean Mean duration, cloned if not null.
2172 Merges IO statistics from source into this instance. @param source The IOStatistics object to merge from. @return True if source is not null, false otherwise.
2173 Constructs a new IOStatisticsSnapshot from a source. @param source Source IOStatistics object, or null to create empty.
2174 Iterates over a RemoteIterator, applying a consumer, and returns the count. @param source RemoteIterator to iterate over. @param consumer Consumer to apply to each element. @return Number of elements processed.
2175 Serializes an object to a DataOutput stream. @param out Output stream. @param instance Object to serialize.
2176 Prefetches a data block. @param blockNumber Block number to prefetch.
2177 Acquires a BufferData for a block, retrying if necessary. @param blockNumber Block number for the buffer. @return BufferData object or throws IllegalStateException.
2178 Recursively processes a path data item. @param item PathData object to process. @throws IOException if an I/O error occurs.
2179 Recursively processes path data items from an iterator. @param parent Parent PathData. @param itemsIterator Iterator of PathData.
2180 Resolves partial group names for a user. @param userName User name. @param errMessage Error message. @param groupNames Comma-separated group names. @return Set of valid group names.
2181 Executes a shell command with optional environment and timeout. @param cmd Command to execute. @return Command output.
2182 Executes a shell command with given environment and timeout. @param env Environment variables for the command. @param cmd Command to execute.
2183 Merges credentials from another Credentials object. @param other The Credentials object to merge from.
2184 Merges credentials from another Credentials object, without overwriting. @param other The Credentials object to merge from.
2185 Issues delegation tokens for a renewer and adds them to credentials. @param renewer Token renewer. @param credentials User credentials.
2186 Adds a token and returns true if successful, false otherwise. @param token The token to add. @return True if token added, false if null.
2187 Changes the working directory to the specified path. @param newDir The new working directory path.
2188 Sets file access and modification times. @param p The file path. @param mtime Modification time in seconds. @param atime Access time in seconds.
2189 Delegates File creation to the underlying RawLocalFileSystem. @param path The Path for which to create a File object.
2190 Returns a string representation of the Path. @param p The Path object to represent.
2191 Creates a qualified Path using the FileSystem's URI and working dir. @param fs FileSystem object @return Qualified Path object
2192 Qualifies a Path object using the default FS and working dir. @param path The path to qualify. @return A qualified Path object.
2193 Qualifies a Path object using the file system's URI. @param path The Path object to qualify. @return The qualified Path object.
2194 Resolves symbolic links to get FileStatus array. @param f Path to resolve symbolic links from. @return FileStatus array representing resolved links.
2195 Resolves symbolic links recursively. @param f The path to resolve. @param recursive Whether to resolve recursively. @return True if resolved, false otherwise.
2196 Opens a file for input stream. @param f The path to the file. @return FSDataInputStream for reading the file.
2197 Opens a file for reading. @param f The file to open. @param bufferSize The buffer size. @return FSDataInputStream object.
2198 Sets the length of a file. @param f The file path. @param newLength The new length of the file. @throws Various IO and access control exceptions.
2199 Resolves a path and sets the replication factor. @param f The path to resolve. @param replication The desired replication factor. @return True if successful, false otherwise.
2200 Sets file permissions using a link resolver. @param f The path to the file. @param permission The desired file permissions.
2201 Sets owner for a file. @param f The file path. @param username The username. @param groupname The groupname.
2202 Updates file access times. @param f The file path. @param mtime Modification time. @param atime Access time.
2203 Calculates the checksum for a file. @param f The path to the file. @return FileChecksum object.
2204 Resolves a file's status using a link resolver. @param f The file path to resolve. @return FileStatus object representing the file's status.
2205 Executes a file system action on a resolved path. @param path Path to operate on. @param mode The file system action to perform.
2206 Retrieves a FileStatus object for the given path. @param f The path to resolve. @return FileStatus object.
2207 Resolves symbolic links in a path. @param f The path to resolve links in. @return Resolved Path object.
2208 Retrieves block locations for a file range. @param f The file path. @param start Start offset in bytes. @param len Length of the range in bytes. @return Array of BlockLocation objects.
2209 Gets file status. Returns default FS status if path is null. @param f The path to get status for. @return FsStatus object.
2210 Creates a symbolic link. @param target The path of the link target. @param link The link path to create. @param createParent Whether to create parent directories.
2211 Resolves a path and retrieves its RemoteIterator of FileStatus. @param f The path to resolve. @return RemoteIterator of FileStatus objects.
2212 Resolves links in a directory. @param path The path to the directory. @return RemoteIterator of resolved paths.
2213 Resolves a path and retrieves located file statuses. @param f The path to resolve and retrieve statuses for. @return RemoteIterator of LocatedFileStatus objects.
2214 Resolves links in a path and collects involved file systems. @param f The path to resolve links in. @return Set of AbstractFileSystem objects involved.
2215 Sets ACL entries for a file or directory. @param path The path to the file or directory. @param aclSpec List of ACL entries to set.
2216 Sets ACL entries for a file or directory. @param path The path to the file or directory. @param aclSpec List of ACL entries to set.
2217 Resolves and executes a file system operation on a path. @param path The path to operate on.
2218 Resolves and executes a file system operation on a path. @param path The path to operate on.
2219 Sets ACL entries on a file system path. @param path The path to set ACLs on. @param aclSpec List of ACL entries to apply.
2220 Resolves AclStatus for a given path. @param path The path to resolve. @return AclStatus object.
2221 Sets an extended attribute on a file or directory. @param path Path to the file/directory. @param name Attribute name. @param value Attribute value. @param flag Attribute set flags.
2222 Resolves a symbolic link to bytes. @param path The path to the symbolic link. @param name The name to use for resolution. @return Byte array representing the resolved link.
2223 Resolves symbolic links in a path. @param path The path to resolve symbolic links for. @return Map containing resolved link data.
2224 Resolves symbolic links to get file content. @param path The path to resolve. @param names List of link names. @return Map of link names to byte arrays.
2225 Resolves a path and creates a link with the given name. @param path The path to resolve. @param name The name of the link.
2226 Resolves symbolic links in a path. @param path The path to resolve. @return List of resolved path components.
2227 Resolves a path to its snapshot link. @param path The path to resolve. @param snapshotName Snapshot name. @return Resolved Path object.
2228 Renames a snapshot. @param path The snapshot path. @param snapshotOldName Old snapshot name. @param snapshotNewName New snapshot name.
2229 Resolves a path and creates a snapshot with the given name. @param path The path to resolve. @param snapshotName Name of the snapshot to create.
2230 Resolves and executes a file system operation on the given path. @param path The path to operate on.
2231 Applies a storage policy to a file or directory. @param path The path to the file/directory. @param policyName The name of the storage policy.
2232 Resolves and processes a file path. @param src The source Path object to be processed.
2233 Resolves the block storage policy for a given path. @param path The path to resolve the policy for. @return BlockStoragePolicySpi object.
2234 Checks if a file exists with a given capability. @param path Path to check. @param capability Capability string. @return True if the file exists; otherwise, false.
2235 Resolves file system defaults for a given path. @param path Path to resolve defaults for. @return FsServerDefaults object.
2236 Creates a MultipartUploaderBuilder for the given base path. @param basePath Base path for the multipart upload. @return MultipartUploaderBuilder object.
2237 Retrieves the home directory path from the SFTP client. @param client The SFTP channel to get the home directory from. @return Path object representing the home directory.
2238 Retrieves a FileStatus for the path, handling errors. @return FileStatus object or null if not found @throws IOException if an I/O error occurs
2239 Delegates to the underlying FileSystem's m1() method.
2240 Resolves a path using regex mount points and interceptors. @param srcPath Source path string to resolve. @param resolveLastComponent Flag to resolve last component.
2241 Checks if a file exists in any of the configured local directories. @param pathStr File path to check. @param conf Hadoop configuration. @return True if file exists, false otherwise.
2242 Deletes data, index, and directory files in the file system. @param fs The FileSystem object. @param name The directory name.
2243 Creates a file system path for a log file based on the current time. @param now Current date to determine the log file directory.
2244 Opens a file for writing, using secure or insecure methods. @param f The file to open. @param permissions File permissions to set. @return A FileOutputStream object.
2245 Checks if source and target paths are both RESERVED_RAW. @param src Source path. @param target Target path. @return True if both are RESERVED_RAW, otherwise false.
2246 Returns the parent directory path.
2247 Returns the parent directory as an Optional Path.
2248 Lists paths within a directory, wrapping each in a PathData. @return RemoteIterator of PathData objects.
2249 Constructs a FSDataOutputStreamBuilder with a FileContext and Path. @param fc The FileContext to use. @param p The Path to build the stream for.
2250 Verifies checksum for a file. @param verifyChecksum Flag to verify checksum @param f Path of the file
2251 Reads FileStatus from input stream. @param in DataInput stream containing FileStatusProto
2252 Constructs a LocatedFileStatus with file attributes and locations. @param locations Array of BlockLocation objects
2253 Writes a key-value pair to data, updates index if needed. @param key The key to write. @param val The value to write.
2254 Executes a masked function, potentially involving side effects.
2255 Adds a byte to the buffer, flushing if full. @param b The byte to add. @throws IOException if an I/O error occurs.
2256 Copies data to the buffer, updating the buffer count. @param b Input byte array. @param off Start offset in the input array. @param len Number of bytes to copy. @return Number of bytes copied.
2257 Decodes data into output chunks using provided inputs and erased indexes. @param inputs ECChunk array to decode from @param erasedIndexes Indexes of erased chunks @param outputs ECChunk array to store decoded results
2258 Finalizes the block if forced or size is sufficient. @param bForceFinish Forces block finalization, if true.
2259 Restores credentials from a DataInputStream, handling different formats. @param in Input stream containing serialized credential data.
2260 Retrieves candidate delegation tokens for cleanup from SQL. @return Map of TokenIdent to DelegationTokenInformation.
2261 Reads value length from input stream. @param rawValue ValueBytes object containing data @return Value length as an integer
2262 Serializes credentials to an output stream. @param out DataOutput to write the serialized credentials to.
2263 Converts a Token object to a TokenProto. @param tok The Token object to convert.
2264 Creates a new Entry object after calling m1().
2265 Compares this RawComparable with another. @param other The RawComparable to compare to. @return Comparison result.
2266 Writes key and value to the entry. @param key The key to write. @param value The value to write.
2267 Reads and processes records up to n times. Reads data, checks stream closure, increments index.
2268 Renews a delegation token. @param url Operation URL. @param token Authentication token. @param renewer Renewal principal.
2269 Renews a delegation token. @param url Operation URL @param token Authentication token @param dToken Delegation token to renew
2270 Cancels a delegation token. @param url URL for cancellation. @param token Authentication token. @param dToken Delegation token to cancel.
2271 Creates a SocketInputWrapper with a socket and timeout. @param socket The socket to wrap.
2272 Creates an OutputStream for the socket. @param socket Socket to create OutputStream for. @return OutputStream object.
2273 Connects a socket with a timeout. @param socket Socket to connect @param address Remote address @param timeout Timeout in milliseconds
2274 Creates a MetricsBuffer containing metrics from configured sources. Filters sources based on sourceFilter.
2275 Registers an MBean with the MBeanServer using provided data. @param serviceName Service name. @param nameName Metric name. @param theMbean The MBean to register. @return ObjectName of the registered MBean.
2276 Retrieves or creates a ReadWriteDiskValidatorMetrics for a directory. @param dirName Directory name for metrics. @return ReadWriteDiskValidatorMetrics instance.
2277 Initializes RPC metrics for specified priority levels. @param numLevels Number of priority levels to initialize.
2278 Aggregates local metrics and updates global metrics. Uses threadLocalMetricsMap to get local stats, then aggregates.
2279 Gets or creates a MutableRate. Returns existing if specified. @param name Rate name.
2280 Gets or creates a MutableRate. Returns existing if specified. @param name Rate name. @param description Description.
2281 Examines a keytab file, extracts principals and entries. @param keytabFile Keytab file to examine.
2282 Checks JAAS configuration. @param jaasRequired Whether JAAS is required. @throws IOException If an IO error occurs.
2283 Extracts the real user associated with a TokenIdent. Returns the user from id.m1() or falls back to id.m4().
2284 Creates parent ZNodes in ZK, ensuring their existence. Creates parent nodes recursively, handling ACL setup. @throws IOException, InterruptedException, KeeperException
2285 Retrieves data from ZooKeeper; throws ActiveNotFoundException if node missing.
2286 Relogins the HadoopLoginContext, checking TGT validity.
2287 Relogins the HadoopLoginContext. @param checkTGT Checks TGT validity.
2288 Normalizes an InetSocketAddress, resolving hostname if necessary. @param addr The InetSocketAddress to normalize. @return Normalized InetSocketAddress.
2289 Checks and updates connection address, logs changes, and refreshes user info.
2290 Normalizes URI host to FQDN, updates port if necessary. @param uri The URI to normalize. @param defaultPort Default port to use if not specified.
2291 Sends RPC request, handles async mode, and returns result. @param rpcKind RPC kind, request, remote ID, service class, etc.
2292 Adds or updates a cache entry, handling retry logic. @param newEntry The entry to add or update. @return The updated cache entry.
2293 Adds a new cache entry for a retry request. @param clientId Client identifier. @param callId Call identifier.
2294 Formats content summary string with options. @param qOption formatting option
2295 Creates and returns an Expression instance by name. @param expressionName Name of the expression to create @param conf Hadoop configuration @return Expression instance or null if not found
2296 Creates and returns an Expression instance by class name. @param expressionClassname Class name of the expression to create @param conf Hadoop configuration @return Expression instance or throws IllegalArgumentException
2297 Generates a help string describing recognized expressions. @param factory ExpressionFactory to create Expression instances.
2298 Creates an Expression instance using the ExpressionFactory. @param expressionClass Class of the expression to create @return Expression instance
2299 Retrieves a command instance by name, using the default configuration. @param cmd Command name to retrieve. @return Command instance or null if not found.
2300 Reads an object from a DataInput stream, handling primitives, arrays, and custom Writable types. @param in Input stream to read from. @param objectWritable Optional ObjectWritable to update. @param conf Hadoop configuration. @return Object read from the stream.
2301 Gets a Writable instance of the given class, using default config. @param c Writable class to instantiate @return Writable instance
2302 Extracts the token identifier from the given token. @param token The token to extract identifier from. @return TokenIdent object.
2303 Prints matching delegation tokens to the output stream. @param creds Credentials object containing tokens. @param alias Token alias to filter by. @param out Output stream to write the formatted tokens.
2304 Creates a DiskValidator instance based on the provided name. @param diskValidator Validator name or class name. @return DiskValidator instance. @throws DiskErrorException if class not found.
2305 Default constructor. Initializes BlockLocation with default values.
2306 Returns a BlockLocation array for a file, or an empty array if invalid. @param file FileStatus object @param start Start offset @param len Length @return BlockLocation array
2307 Creates a DurationStatisticSummary based on IOStatistics. @param source IOStatistics object to extract data from. @param key Summary key. @param success Success status.
2308 Creates an IOStatisticsSnapshot from the current context's stats.
2309 Creates an IOStatisticsSnapshot from the given statistics. @param statistics Source IOStatistics object. @return New IOStatisticsSnapshot.
2310 Creates an IOStatisticsSnapshot from a given IOStatistics object. @param source The source IOStatistics object. @return An IOStatisticsSnapshot.
2311 Converts a RemoteIterator to a List. @param source RemoteIterator to convert. @return List containing elements from the iterator.
2312 Processes a path data item, executing different logic based on existence. @param item PathData object to process. @throws IOException if an I/O error occurs.
2313 Retrieves a user's group names. Handles exceptions and timeouts. @param user User name. @return Set of group names, or empty set on error.
2314 Executes script commands with arguments and returns combined output. @param args List of arguments for the script. @param commandScriptName Script name to execute.
2315 Reads the target of a symbolic link. Returns "" on error or null link.
2316 Sets file permissions using native or shell commands. @param p Path to the file. @param permission File permissions to set.
2317 Masks a netgroup using m4. @param netgroup The netgroup name to mask. @return Masked netgroup string.
2318 Constructs a new Credentials object by merging from another. @param credentials The Credentials object to merge from.
2319 Adds credentials to the subject. @param credentials Credentials object to add.
2320 Creates a File object for a local path. @param path The Path for which to create a File object. @return File object representing the path.
2321 Sets directory permissions if they don't match expected. @param localFS FileSystem object. @param dir Path to directory. @param expected Expected FsPermission.
2322 Gets a file status. @param f The file path. @param dereference Dereference flag. @return FileStatus object.
2323 Returns a Path object representing the root directory. @param path The input Path object (unused). @return A Path object representing the root directory.
2324 Deletes files marked for deletion on exit, ignoring errors.
2325 Checks if a file exists. @param f The file path to check. @return True if file exists, false otherwise.
2326 Sets the working directory to the given path. @param newWDir The new working directory path.
2327 Renames a file or directory. @param srcName Source path, null for directories. @param dst Destination path. @param overwrite Whether to overwrite existing files.
2328 Calculates content summary for a path, recursively. @param f The path to calculate summary for.
2329 Retrieves delegation tokens for a path across multiple file systems. @param p The path to fetch tokens for. @param renewer The renewer for the tokens. @return List of delegation tokens.
2330 Sets an extended attribute on a file/directory. @param path Path to the file/directory. @param name Attribute name. @param value Attribute value.
2331 Resolves a path to its snapshot link. @param path The path to resolve.
2332 Initializes the builder with a file context and path. @param fc FileContext for upload operations. @param p Path for the upload. @throws IOException if an I/O error occurs.
2333 Truncates files in the waitList to the specified newLength.
2334 Resolves path using regex mount points. @param srcPath Path to resolve. @param resolveLastComponent Resolve last component flag.
2335 Checks if a file exists locally, using AllocatorPerContext. @param pathStr File path to check. @param conf Hadoop configuration.
2336 Extracts a HAR path from a given path. @param path The input path to process. @return A Path object representing the HAR path.
2337 Creates a CRC file path by appending ".crc" to the filename. @param file The input file path. @return Path object representing the CRC file.
2338 Checks if a file or directory exists. @return True if exists, false otherwise.
2339 Creates a directory. Checks parent exists and is a directory. @param f The path of the directory to create. @param absolutePermission Permissions for the directory. @param createParent Whether to create parent directories.
2340 Renames a file or directory from src to dst, handling overwrite. @param src Source path @param dst Destination path @param options Rename options
2341 Creates a checksum file path based on the input file path. @param file The original file path. @return Path object representing the checksum file.
2342 Checks if a path is a descendant of a base path. @param p Path to check; null terminates the search. @param basePath Base path to compare against.
2343 Checks if the path is null.
2344 Creates a Path by appending a suffix. @param suffix The suffix to append to the path.
2345 Resolves a target path, qualifying it if scheme/auth are missing. @param pathURI URI context for path resolution. @param pathWithLink Path with symbolic link. @param target Target path to resolve. @return Resolved target path.
2346 Renames a file or directory from src to dst. @param src Source path. @param dst Destination path. @param overwrite Overwrite if destination exists.
2347 Constructs a FileStatus with specified attributes and null group. @param path Path to the file or directory
2348 Constructs a FileStatus by copying attributes from another. Uses getters to allow subclasses to override attribute retrieval.
2349 Constructs a LocatedFileStatus from a FileStatus and block locations. @param stat The FileStatus to copy attributes from. @param locations Block locations for the file.
2350 Constructs a LocatedFileStatus with file attributes and locations. @param locations Array of BlockLocation objects
2351 Writes a Writable object to the data and increments the count. @param value The Writable object to write.
2352 Writes data to the buffer, performing checks and looping. @param b Input byte array. @param off Start offset in the input array. @param len Number of bytes to copy.
2353 Completes the current compression block. Calls m1() and super.m2() for cleanup.
2354 Executes m1, potentially performing an internal operation.
2355 Executes m1, potentially releasing block reader resources.
2356 Reads credentials from a file. @param filename File containing serialized credentials. @param conf Configuration object. @return Credentials object.
2357 Searches for a key within a data block. @param key The key to search for. @param greater True for greater-than search. @throws IOException if an I/O error occurs.
2358 Publishes metrics if sinks are configured. @param buffer MetricsBuffer to publish. @param immediate If true, publishes immediately.
2359 Records RPC rates for a given protocol class. @param protocol Class containing RPC methods to track.
2360 Delegates metric collection to the innerMetrics object.
2361 Adds a value to a metric, creating it if it doesn't exist. @param name Metric name. @param value Value to add.
2362 Records token ownership. @param id TokenIdent object to extract real owner from.
2363 Updates token owner statistics based on the token's real owner. @param id TokenIdent object containing token information.
2364 Retrieves the current active HAServiceTarget from ZooKeeper. Returns null if no active node is found.
2365 Constructs an `ActiveStandbyElector` with provided parameters. @param zookeeperHostPorts Zookeeper host ports.
2366 Creates an InetSocketAddress, resolving hostname if needed. @param target Hostname or IP address. @param defaultPort Default port.
2367 Gets the address of the listener from the server. @param server The server object. @return InetSocketAddress of the listener.
2368 Delegates RPC call to overloaded method with default service class. @param rpcKind RPC kind, request, remote ID, auth fallback @return RPC result
2369 Gets a CacheEntry, skips retry if already completed. @param cache RetryCache instance. @param clientId Client ID. @param callId Call identifier.
2370 Creates and returns a CacheEntryWithPayload, or null if skipped. @param cache Cache instance @param payload Payload to cache
2371 Retrieves an Expression instance by name using the ExpressionFactory. @param expressionName Name of the expression to retrieve.
2372 Gets a WritableComparator for the given class, creating it if needed. @param c WritableComparable class. @param conf Hadoop configuration.
2373 Constructs a WritableComparator with a key class. @param keyClass The class of the WritableComparable.
2374 Initializes LocalDirAllocator with a disk validator. @param contextCfgItemName Name of the configuration item.
2375 Migrates deprecated keys to new keys based on deprecation info.
2376 Creates a new Configuration by cloning another Configuration. Copies resources, properties, and other configuration data.
2377 Adds a resource and loads its properties into the configuration. @param conf Hadoop configuration object.
2378 Retrieves alternative names for a given name, handling deprecations. @param name The name to check for deprecation. @return Array of alternative names, or null if none exist.
2379 Retrieves a masked string array by name. Returns null if unavailable.
2380 Delegates to the underlying Properties object's integer value.
2381 Executes configurations from overlay and core properties.
2382 Converts Hadoop properties to a map of String entries. Uses getProps() to retrieve properties.
2383 Filters properties matching regex and stores them in a map. @param regex Regular expression to filter properties. @return Map of filtered properties.
2384 Reads data and checksums from file ranges. @param ranges List of FileRange objects to read. @param allocate Allocates ByteBuffer based on range size.
2385 Retrieves a BufferData for a block, retrying on failure. @param blockNumber Block number to retrieve. @return BufferData object. @throws IOException If stream is closed. @throws IllegalStateException If wait fails.
2386 Waits for file replication to reach the desired number. Iterates through waitList, checks block locations.
2387 Gets BlockLocations for a file given a path, start, and len. @param p Path object @param start Start offset @param len Length @return BlockLocation array
2388 Creates a DurationStatisticSummary for the given key. @param source IOStatistics object. @param key Summary key.
2389 Calls m1 with a null argument. @return Serializable object returned by m1(null).
2390 Creates an IOStatisticsSnapshot from a source object. @param source The source object to create snapshot from. @return IOStatisticsSnapshot or null if source is invalid.
2391 Converts a RemoteIterator to an array. @param source Iterator to convert. @param a Array to populate. @return Array containing elements from the iterator.
2392 Renews a delegation token. @param token Token to renew, renewer for authentication.
2393 Retrieves and validates a TokenIdent for token cancellation. @param token The delegation token to process. @param canceler Canceler principal for authorization. @return The TokenIdent object.
2394 Processes a list of PathData objects, handling potential IO errors. @param args List of PathData objects to process. @throws IOException if an I/O error occurs during processing.
2395 Retrieves a list of Unix groups for a given user. @param userName The username to lookup. @return List of group names.
2396 Gets the count of hard links for a file. @param fileName The file to check. @throws IOException if file is invalid or operation fails.
2397 Creates a symbolic link. @param target The target file/directory. @param linkname The link name.
2398 Changes file permissions using a shell command. @param filename File to modify. @param perm Permission string. @param recursive Recursive flag. @return Exit code of the shell command.
2399 Checks if setsid is supported on the system. Returns true if setsid is supported, false otherwise.
2400 Changes file owner to specified user and group. @param file File object. @param username User to set as owner. @param groupname Group to set as owner.
2401 Extracts user names from a netgroup using shell commands. @param netgroup The netgroup name to process. @return List of user names found in the netgroup.
2402 Returns a Credentials object for the subject, removing invalid tokens.
2403 Lists file statuses matching the filter. @param f Path to check. @param filter Filter to apply. @return Array of matching FileStatus objects.
2404 Filters file statuses for given paths and returns an array. @param files Paths to check. @param filter Filter to apply. @return Array of filtered FileStatus objects.
2405 Resolves a path, returning a ResolveResult. @param p The path to resolve. @param resolveLastComponent Resolve last component flag.
2406 Copies a file with replication, verifies checksum, and copies CRC. @param src Source Path. @param replication Replication factor. @return True if copy and checksum operations succeed.
2407 Checks if a file or directory exists and has a valid checksum. @param f The file or directory path. @param recursive True for recursive checking. @return True if the file/directory exists and checksum is valid.
2408 Moves a file or directory from src to dst, verifying checksums. @param src Source Path. @param dst Destination Path. @return True if move successful, false otherwise.
2409 Deletes a file or directory, recursively if needed. @param f the path to delete @param recursive if true, delete recursively @throws IOException if an I/O error occurs
2410 Checks if any parent of source's path matches target's path. Returns true if a match is found, false otherwise.
2411 Constructs a Path object, prepending the chroot path. @param path The Path object to modify. @return A new Path object with the chroot path prepended.
2412 Masks a path, returning "" if it's the root, otherwise modifies it. @param p The Path object to mask.
2413 Masks the path, adjusting it based on the chroot path. @param p The path to mask. @throws IOException If an internal error occurs with the path.
2414 Resolves a path, following symlinks up to a limit. @param fc FileContext object @param path Path to resolve @return Resolved input stream or null if error @throws IOException if symlink resolution fails
2415 Renames a file or directory. @param src Source path. @param dst Destination path. @param options Rename options, including overwrite.
2416 Creates a FileStatus for a HAR file component. @param h HarStatus object containing component details @return FileStatus object representing the component
2417 Creates a FileStatus from an FTPFile, extracting file attributes. @param ftpFile FTPFile object containing file details @param parentPath Parent path for the file status @return FileStatus representing the FTP file's metadata
2418 Validates token file credentials. @param tokenFile Token file to validate. @param conf Hadoop configuration. @return True if validation succeeds, false otherwise.
2419 Prints matching delegation tokens to a stream. @param tokenFile Token file to read from. @param alias Token alias to filter by. @param conf Hadoop configuration. @param out Output stream.
2420 Updates token information or removes token if not found in ZK. @param ident TokenIdent containing token identifier
2421 Constructs a MetricsSystemImpl with a given prefix. @param prefix Metric prefix, used for MBean initialization.
2422 Executes RPC method and returns result or null if deferred. @param server RPC server, request, method name, protocol.
2423 Adds elapsed time to a metric in the registry. @param name Metric name. @param elapsed Elapsed time value.
2424 Adds a persisted delegation token. @param identifier Token identifier. @param renewDate Token renewal date.
2425 Updates token owner stats for each current token. Iterates through current tokens and records ownership.
2426 Removes expired tokens, logs removal, and updates statistics. @throws IOException if an I/O error occurs during processing.
2427 Constructs an `ActiveStandbyElector` with provided configuration. @param truststoreKeystore TruststoreKeystore object
2428 Initiates an election if not already in one, using provided data. @param data Application data used for election. @throws HadoopIllegalArgumentException If data is null.
2429 Creates an InetSocketAddress, resolving hostname if needed. @param target Hostname or IP address. @param defaultPort Default port.
2430 Invokes a remote method and returns a response message. Handles tracing, exception handling, and async calls.
2431 Invokes a remote method and returns a response message. Handles exceptions and tracing for RPC calls.
2432 Parses arguments to build an Expression tree. @param args Arguments to parse, supports nested expressions. @return The root Expression of the parsed tree.
2433 Gets a WritableComparator for the given class. @param c WritableComparable class.
2434 Authenticates a request using a delegation token or fallback. @param request HTTP request object @param response HTTP response object @return AuthenticationToken object or null on failure
2435 Processes a key name, handles deprecations, and returns names. @param deprecations Deprecation context for key mapping. @param name Key name to process.
2436 Adds property-derived environment variables to the given map. Uses m5() to iterate; transforms keys using '.' to '_'.
2437 Cancels a delegation token, retrieves TokenIdent, and calls super. @param token Token to cancel. @param canceller Canceler principal. @return TokenIdent object.
2438 Retrieves a list of Unix groups for a given user. @param user The username to lookup. @return List of Unix group names.
2439 Extracts a tar archive to a directory, handling gzipped archives. @param inFile File to untar @param untarDir Directory to extract to
2440 Changes file permissions using a shell command. @param filename File to modify. @param perm Permission string.
2441 Sets file read permission on Windows; otherwise, delegates to File.setReadable. @param f The file to modify. @param readable Whether the file should be readable.
2442 Changes file write permission on non-Windows systems. @param f File to modify. @param writable Whether to set write permission. @return True if successful, false otherwise.
2443 Sets file executable permission on non-Windows systems. @param f File to modify. @param executable Whether to set executable permission. @return True if successful, false otherwise.
2444 Attempts to load file permissions using native IO if possible.
2445 Changes file owner to specified user and group. @param p The Path object. @param username User to set as owner. @param groupname Group to set as owner.
2446 Sets file permissions based on group settings. @param f File object @param permission FsPermission object
2447 Processes a list of groups, caching netgroups if they don't exist. @param groups List of group names to process.
2448 Lists Kerberos tokens for a user. @param ugi UserGroupInformation object.
2449 Logs user group information, including tokens, for debugging. @param log Logger instance for logging. @param caption Descriptive caption for the log entry. @param ugi UserGroupInformation object to log.
2450 Sets directory permissions and creates a file object. @param localFS FileSystem object. @param dir Path to directory. @param expected Expected FsPermission.
2451 Checks directory existence and permissions. @param localFS FileSystem object. @param dir Path to check. @param expected Expected FsPermission.
2452 Filters file statuses for given paths using the default filter. @param files Paths to check. @return Array of filtered FileStatus objects.
2453 Gets the used space of the root directory. Throws NotInMountpointException if not in a mount point.
2454 Gets BlockLocations for a file within the HAR archive. @param file FileStatus object @param start Start offset @param len Length @return BlockLocation array
2455 Opens an input stream for a file within the HAR archive. @param f The path to the file. @param bufferSize The buffer size. @return FSDataInputStream for reading the file.
2456 Creates an FSDataInputStream for reading with checksum verification. @param f Path to the file @param bufferSize buffer size @return FSDataInputStream with checksums enabled
2457 Opens a file for reading. @param f The path to the file. @param bufferSize The buffer size. @return FSDataInputStream object.
2458 Moves a file or directory, handling checksum verification. @param src Source path. @param dst Destination path.
2459 Renames a file or directory from src to dst. @param src Source path. @param dst Destination path. @param options Rename options.
2460 Lists file statuses for HAR archive components. @param parent Parent HarStatus object. @param statuses List to store FileStatus objects.
2461 Gets the FileStatus for a path within the HAR archive. @param f The path to get the status for. @return FileStatus object representing the path's status.
2462 Retrieves a FileStatus for a given file on the SFTP server. @param client SFTP client channel @param file Path to the file @return FileStatus object or throws FileNotFoundException
2463 Retrieves a FileStatus for a given path on the FTP server. @param client FTP client connection @param file Path to the file or directory @return FileStatus object representing the file metadata
2464 Constructs a MetricsSystemImpl with a null prefix.
2465 Creates a new RatesRoller with a given metric value name. @param metricValueName Name of the metric value.
2466 Initializes the rolling average scheduler. @param windows Number of windows for the rolling average. @param interval Interval for the scheduler. @param timeUnit Time unit for the interval.
2467 Resumes or initiates master election based on health state. Handles delays, state transitions, and election management.
2468 Re-establishes ZK session, joins election after failure. @param SLEEP_AFTER_FAILURE_TO_BECOME_ACTIVE Sleep duration.
2469 Handles ZooKeeper watch events, transitioning states as needed. @param zk The ZooKeeper instance. @param event The watch event received.
2470 Creates an InetSocketAddress, resolving hostname if needed. @param target Hostname or IP address. @param defaultPort Default port.
2471 Authenticates request, returns token or null if unauthorized. @param request HTTP request object @param response HTTP response object
2472 Checks if any property name matches a defined check. @param name The property name to check. @return True if a matching property is found, false otherwise.
2473 Retrieves a property value by name, handling deprecations. @param name The property name to retrieve.
2474 Sets a property value, handles deprecations, and updates names. @param name Property name. @param value Property value. @param source Source of the property.
2475 Processes a configuration name, handling deprecations. @param name Configuration name to process and register.
2476 Returns the virtual memory size. Refreshes metrics if needed.
2477 Returns the current memory size. Calls m1() to update.
2478 Returns the available virtual memory. Calls m1() first.
2479 Retrieves the amount of available memory. Calls m1() to update, then returns the current value.
2480 Returns the number of processors available on the system.
2481 Returns the current CPU frequency in kHz. Calls m1() to update frequency.
2482 Calculates cumulative CPU time in milliseconds. Calls m1() and returns the value.
2483 Calculates average CPU usage per processor. Returns -1 if CPU usage is unavailable.
2484 Returns CPU usage as a float, normalized to a percentage.
2485 Returns the total bytes read from the network. Calls m1() to update the value.
2486 Returns the total number of bytes written. Calls m1() to update the value.
2487 Refreshes netgroup cache, fetches groups, and processes them.
2488 Updates mount point status in the map. @param viewFileSystem ViewFileSystem instance. @param mountPointMap Map to store mount point statuses. @param mountPoint Mount point to update. @param path Path associated with the mount point.
2489 Lists file statuses within a HAR archive component. @param f Path to the HAR archive component. @return Array of FileStatus objects.
2490 Gets a FileStatus, using deprecated methods if needed. @param f The path. @param dereference Dereference flag. @throws IOException if an I/O error occurs.
2491 Gets the FileStatus for a given path. @param f The path to get the FileStatus for. @return FileStatus object representing the path.
2492 Lists file statuses for a path, potentially modifying paths. @param f The path to list statuses for. @return Array of FileStatus objects.
2493 Checks if a file exists on the SFTP server. @param channel SFTP channel @param file Path to the file @throws IOException if an I/O error occurs
2494 Creates a FileStatus from an LsEntry, handling symbolic links. @param channel SFTP channel @param sftpFile LsEntry containing file attributes @param parentPath Parent path for the file @return FileStatus object
2495 Checks if a file exists on the SFTP server. @param channel SFTP channel @param file Path to the file @return True if file exists, false otherwise.
2496 Checks if a file exists on the FTP server. @param client FTP client connection @param file Path to the file @return True if file exists, false otherwise.
2497 Gets FileStatus for a file or directory on the FTP server. @param client FTP client connection @param file Path to the file or directory @return Array of FileStatus objects
2498 Checks if a file exists on the FTP server. @param client FTP client connection @param file Path to the file @return True if the file exists, false otherwise.
2499 Initializes the CBZip2InputStream with an input stream and read mode. @param in Input stream for decompression @param readMode Read mode (CONTINUOUS or BYBLOCK) @throws IOException if an I/O error occurs
2500 Decompresses data from an InputStream and returns processed bytes. @param in Input stream for BZip2 decompression @return Number of bytes processed during decompression
2501 Handles ZK node creation errors, retries, and transitions. @param rc ZK result code, @param path ZK path, @param ctx Context, @param name Name
2502 Handles ZK stat node results, transitioning state as needed. @param rc ZK result code, @param path ZK path, @param ctx Context, @param stat Stat object
2503 Creates an InetSocketAddress, resolving hostname if needed. @param target Hostname or IP address.
2504 Parses server address specifications into a list of InetSocketAddresses. @param specs Comma-separated server address strings. @param defaultPort Default port to use if hostname is not specified.
2505 Extracts authority from URI, resolves to InetSocketAddress, and returns its string representation.
2506 Creates XML document containing configuration properties. @param propertyName Property name or null for all properties @param redactor ConfigRedactor for property redaction @return XML Document
2507 Performs variable substitution in a string expression. @param expr Input string expression to process.
2508 Applies configuration changes from request. @param out Output writer for HTML. @param reconf Reconfigurable object. @param req HTTP request object.
2509 Sets a property value, handles deprecations, and updates names. @param name Property name. @param value Property value.
2510 Sets a property, logs the change with redaction, and calls super. @param name Property name. @param value Config value. @param source Source of property.
2511 Attempts to delete a directory, granting permissions if needed. @param dir The directory to delete. @param tryGrantPermissions Whether to try granting permissions.
2512 Delegates to m1() to retrieve a value.
2513 Gets status of mount points for a given path. @param fileSystem The FileSystem to check. @param path The path to check. @return Map of MountPoint and FsStatus.
2514 Gets FileStatus, resolving symbolic links if present. @param f The path to check. @return FileStatus object.
2515 Renames a file or directory on the SFTP server. @param channel SFTP channel @param src Source path @param dst Destination path @return True if rename was successful, false otherwise.
2516 Lists files in a directory on the SFTP server. @param client SFTP client connection @param file Path to the directory to list @return Array of FileStatus objects for files in the directory
2517 Creates a file on the SFTP server, creating parent directories if needed. @param client SFTP channel @param file Path to the file to create @param permission FsPermission for the file @throws IOException if an I/O error occurs
2518 Globbs a path pattern into an array of FileStatus objects. @param pathPattern Path pattern to glob. @return Array of FileStatus objects matching the pattern.
2519 Globbs a path pattern into an array of FileStatus objects. @param pathPattern Path pattern to glob. @param filter Path filter to apply. @return Array of FileStatus objects matching the pattern.
2520 Globbs a path pattern into an array of FileStatus objects. @param pathPattern The glob pattern to apply. @return Array of FileStatus objects matching the pattern.
2521 Globbs a path pattern into an array of FileStatus objects. @param pathPattern Path pattern to glob. @param filter Path filter to apply. @return Array of FileStatus objects matching the pattern.
2522 Renames a file on the FTP server. @param client FTP client connection @param src Source Path object @param dst Destination Path object
2523 Recursively deletes a file or directory on the FTP server. @param client FTP client @param file Path to delete @param recursive Whether to delete recursively
2524 Creates a directory on the FTP server. @param client FTP client connection @param file Path to the directory to create @param permission FsPermission for the directory @return True if directory created, false otherwise
2525 Masks an IP address and port string. @param ipPort The IP address and port string to mask. @return The masked IP address and port string.
2526 Resolves a Token to an InetSocketAddress. @param token Token containing service name. @return InetSocketAddress representing the resolved address.
2527 Creates a Text object from a URI, using resolved InetSocketAddress. @param uri The URI to resolve and create a Text from.
2528 Returns the function mask, or null if m1() returns null.
2529 Masks the file system name using a security utility. @return Masked file system name string.
2530 Masks a string expression by substituting variables. @param expr String expression to mask.
2531 Resolves a configuration key name. @param name The configuration key name to resolve.
2532 Retrieves a configuration property value. @param name Property name to retrieve. @param defaultValue Default value if property is not found.
2533 Sets a mandatory/optional key-value pair and returns builder. @param key Key to set. @param value Value for the key.
2534 Sets a mandatory key-value pair and updates options. @param key The mandatory key to set. @param value The value associated with the key. @return The builder instance for fluent API.
2535 Sets the default file system name in the configuration. @param conf Configuration object. @param uri URI containing the file system name.
2536 Adds a view link to the configuration. @param conf Hadoop configuration object. @param mountTableName Mount table name. @param src Source path. @param target Target URI.
2537 Adds a view file system link to the configuration. @param conf Hadoop configuration object. @param mountTableName Mount table name. @param target URI of the view file system.
2538 Adds a view file system link to the configuration. @param conf Hadoop configuration object. @param mountTableName Mount table name. @param target URI of the target file system.
2539 Adds viewfs links to configuration using mount table name and targets. @param conf Configuration object. @param mountTableName Mount table name. @param targets Array of target URIs.
2540 Configures a view file system link with specified targets. @param conf Hadoop configuration object. @param mountTableName Mount table name. @param src Source path.
2541 Sets a viewfs link regex configuration property. @param conf Configuration object. @param mountTableName Mount table name. @param srcRegex Source regex. @param targetStr Target string.
2542 Sets the viewfs.homedir property in the configuration. @param conf Hadoop configuration object. @param mountTableName Mount table name. @param homedir Home directory path.
2543 Sets the umask property in the configuration. @param conf Hadoop configuration object. @param umask FsPermission object representing the umask.
2544 Sets compression codecs in the configuration. @param conf Configuration object to update. @param classes List of codec classes to configure.
2545 Sets the SequenceFile compression type in the given Configuration. @param job Hadoop job configuration. @param val CompressionType enum value.
2546 Creates a Configuration object from filter init parameters. @param filterConfig Servlet Filter configuration. @return Configuration object with delegation token settings.
2547 Parses command-line arguments and executes corresponding actions. Handles unknown arguments by displaying usage info.
2548 Sets an integer property value, handling deprecations. @param name Property name. @param value Integer value.
2549 Sets a property value to a long value. @param name Property name. @param value Long value to set.
2550 Sets a property value with a converted float value. @param name Property name. @param value Property value (converted to Float).
2551 Sets a configuration property with a double value. @param name Property name. @param value Double property value.
2552 Sets a boolean property value, handling deprecations. @param name Property name. @param value Boolean value.
2553 Sets a property value with adjusted duration. @param name Property name. @param value Base value. @param unit Time unit for duration adjustment.
2554 Sets a property with a value adjusted by the unit's factor. @param name Property name. @param value Property value. @param unit Unit of the value.
2555 Sets a property value using a pattern. @param name Property name. @param pattern Pattern to apply.
2556 Sets a property with comma-separated values, handling deprecations. @param name Property name. @param values Values to set, separated by commas.
2557 Sets a property with formatted address. @param name Property name. @param addr InetSocketAddress to format.
2558 Validates class relationship and sets a property. @param name Property name. @param theClass Class to validate.
2559 Attempts to delete a directory. @param dir The directory to delete.
2560 Attempts to delete a directory, granting permissions if needed. @param dir Directory to delete. @param tryGrantPermissions Whether to try granting permissions.
2561 Gets FileStatus objects for files within a directory. @param f The path to the directory. @return Array of FileStatus objects.
2562 Creates a FileStatus, handling symbolic links and errors. @param f Path to the file or directory. @throws IOException if an I/O error occurs.
2563 Deletes a file or directory recursively on the SFTP server. @param channel SFTP channel @param file Path to delete @param recursive Whether to delete recursively @throws IOException if an error occurs
2564 Creates a SplitCompressionInputStream for BZip2 decompression. @param seekableIn Seekable input stream @param start Start position @param end End position @param readMode Read mode @return SplitCompressionInputStream instance
2565 Processes field annotations to create and set metrics. @param source Object from which metrics are derived. @param field Field to process for metrics.
2566 Retrieves a configuration value for a storage type and name. @param conf Hadoop configuration. @param t StorageType. @param name Name of the configuration key.
2567 Determines the FTP transfer mode based on configuration. @param conf Hadoop configuration object. @return FTP transfer mode constant.
2568 Configures FTP data connection mode based on configuration. @param client FTP client to configure. @param conf Hadoop configuration object.
2569 Constructs a configuration prefix for homedir. @param conf Hadoop configuration. @param mountTableName Mount table name. @return Configuration prefix string.
2570 Retrieves file system permissions from configuration. @param conf Hadoop configuration object; null to use default. @return FsPermission object representing the permissions.
2571 Retrieves a list of available compression codecs. @param conf Hadoop configuration object. @return List of CompressionCodec classes.
2572 Gets the compression type from the configuration. @param job Hadoop job configuration object. @return CompressionType based on configuration.
2573 Masks a property value with configuration details. @param property The property to mask. @return Masked property string.
2574 Locates and validates Hadoop token files based on configuration. @param conf Hadoop configuration object.
2575 Loads the key store, using password from config or default.
2576 Resolves hostname, using configuration or default. @param conf Hadoop configuration object. @return Hostname string.
2577 Retrieves user principal from Kerberos info, using config. @param protocol Protocol class. @param conf Hadoop configuration. @return User principal or null if not found.
2578 Retrieves and transforms a configuration value. @param name Configuration key name. @return Transformed value or null if not found.
2579 Sets a property if it doesn't exist, using name resolution. @param name Property name to set. @param value Property value.
2580 Resolves a duration value from configuration. @param name Duration name, @param defaultValue Default value.
2581 Gets a storage size value, converting to target unit. @param name Config key name. @param defaultValue Default value if key is missing/invalid. @param targetUnit Unit to convert the size to.
2582 Gets storage size for a given name, defaulting to provided value. @param name Config name. @param defaultValue Default size. @param targetUnit Unit to convert to.
2583 Retrieves a Pattern configuration value, using default if invalid. @param name Configuration key name. @param defaultValue Default Pattern value.
2584 Splits a configuration value string by comma. @param name Configuration key name. @return Collection of strings from the value.
2585 Splits a configuration value string by comma. @param name Configuration key name. @return String array of split values.
2586 Retrieves configuration values. @param name Config key name. @param defaultValue Default values if key is not found. @return String array of config values.
2587 Resolves a configuration value to a collection of strings. @param name The configuration key name to resolve. @return A collection of strings, or an empty collection if null.
2588 Splits a configuration value string by commas. @param name Configuration key name. @return String array of comma-separated values.
2589 Retrieves comma-separated values from config or uses default. @param name Config key name. @param defaultValue Default values if key is not found. @return String array of values.
2590 Extracts configuration properties matching a prefix. @param confPrefix Configuration prefix to filter by. @return Map of configuration properties with the prefix.
2591 Writes configuration key details to a JSON generator. @param jsonGen JSON generator for output. @param config Configuration object. @param name Key name. @param redactor Redactor for sensitive values.
2592 Changes a property value if reconfigurable; throws exception if not. @param property Property name to change. @param newVal New value for the property.
2593 Retrieves configuration value by name, logs access with redaction. @param name Configuration key name. @return Configuration value.
2594 Retrieves the default viewfs mount table name from config. @param conf Hadoop configuration object. @return Default mount table name.
2595 Checks for and loads the native Bzip2 library. @param conf Hadoop configuration object. @return True if native library is loaded, false otherwise.
2596 Gets the socket factory from the configuration. @param conf Hadoop configuration @return SocketFactory instance
2597 Gets the static user, either from deprecated config or setting. @param conf Configuration object to retrieve static user from.
2598 Logs the value of a configuration option. @param option Option name to log its value from config.
2599 Initializes TruststoreKeystore with configuration properties. @param conf Hadoop configuration object.
2600 Renews Kerberos ticket cache if force is true or auto-renewal is enabled.
2601 Constructs a KeyProvider with a Configuration. @param conf The configuration to use.
2602 Retrieves ZooKeeper ACLs from configuration. @param conf Hadoop configuration object @return List of ACL objects or throws IOException
2603 Gets the hash type code from the configuration. @param conf Hadoop configuration object. @return Hash type code.
2604 Parses a configuration key into an EnumSet. @param key Configuration key to parse. @param enumClass Enum class to parse into. @param ignoreUnknown Whether to ignore unknown enum values.
2605 Parses integer ranges from a configuration property. @param name Property name. @param defaultValue Default value. @return IntegerRanges object representing parsed ranges.
2606 Retrieves a configuration property value, logs access. @param name Property name. @param defaultValue Default value.
2607 Sets a key-value pair, wrapping the value as a Boolean. @param key Key to set.\n@param value Boolean value to set.
2608 Sets a key-value pair and returns the builder. @param key Key to set. @param value Value for the key.
2609 Sets a boolean key-value pair and updates options. @param key The key to set. @param value The boolean value.
2610 Sets a key-value pair and returns the builder. @param key The key to set. @param value The value associated with the key.
2611 Sets the default URI in the configuration using a normalized URI. @param conf Configuration object. @param uri URI string to normalize.
2612 Adds a view file system link with specified targets. @param conf Hadoop configuration; @param targets URIs to add
2613 Sets the index interval in the configuration. @param conf Hadoop configuration object. @param interval Index interval value.
2614 Sets the IPC ping interval in the configuration. @param conf Configuration object. @param pingInterval Ping interval.
2615 Sets the client connect timeout in the configuration. @param conf Hadoop configuration object. @param timeout Timeout value.
2616 Sets the nested mount point support property in the configuration. @param conf Hadoop configuration object. @param isNestedMountPointSupported Boolean indicating support.
2617 Sets mandatory and optional keys, then sets options. @param key Key to set. @param values Values associated with key. @return The builder instance for fluent API.
2618 Sets key and values, then returns the builder instance. @param key Key to set. @param values Values to associate with the key. @return The builder instance for fluent API.
2619 Formats and sets a property with a normalized address. @param name Property name. @param addr InetSocketAddress. @return Normalized InetSocketAddress.
2620 Sets RPC engine class if not already configured. @param conf Hadoop configuration. @param protocol Protocol class.
2621 Deletes a file or directory, optionally recursively. @param p The path to delete. @param recursive If true, deletes directories recursively. @throws IOException If deletion fails or directory not empty.
2622 Deletes directory contents. Grants permissions if needed. @param dir Directory to delete.
2623 Retrieves a FileStatus for the given path. @param f The path to retrieve the FileStatus for. @return FileStatus object or null if not found.
2624 Retrieves FileStatus objects for a given path. @param f The path to retrieve FileStatus for. @return An array of FileStatus objects.
2625 Creates a data output stream for writing to a file. @param f Path to the file. @param overwrite Overwrite if exists.
2626 Gets the umask. Uses configured umask or default if null.
2627 Creates a BlockFactory based on the provided name. @param keyToBufferDir Key used to determine buffer directory. @param configuration Hadoop configuration object. @param name Factory type name. @return BlockFactory instance.
2628 Constructs a CompressionCodecFactory using the provided configuration. @param conf Hadoop configuration object.
2629 Retrieves configuration value, returns default if null. @param name Configuration key name. @param defaultValue Value to return if key is not found.
2630 Parses an integer configuration value, using hex if possible. @param name Configuration key name. @param defaultValue Default integer value if parsing fails.
2631 Parses a configuration value as a long. @param name Configuration key name. @param defaultValue Default value if parsing fails. @return Long value or default if parsing fails.
2632 Retrieves a configuration value, converting it to a long. @param name Configuration key name. @param defaultValue Value if key is not found. @return Long value of configuration or default.
2633 Retrieves a float configuration value, using default if absent. @param name Configuration key name. @param defaultValue Default value if key is not found.
2634 Retrieves a configuration value as a double. @param name Configuration key name. @param defaultValue Default value if not found.
2635 Parses a boolean configuration value, returning default if invalid. @param name Config key name. @param defaultValue Default boolean value.
2636 Resolves a class name from configuration; returns default if absent. @param name Class name to resolve. @param defaultValue Default class to return if not found.
2637 Sets a property to a boolean value if it's not already set. @param name Property name. @param value Boolean value to set.
2638 Resolves a duration value from configuration. @param name Duration name, @param defaultValue Default value.
2639 Retrieves SASL properties, including QOP, from configuration. @param conf Hadoop configuration. @param configKey Key to retrieve QOP from. @param defaultQOP Default Quality of Protection. @return Map of SASL properties.
2640 Converts comma-separated string values to an integer array. @param name Configuration key name. @return Integer array of values.
2641 Resolves class names from config, returns default if not found. @param name Config key name. @param defaultValue Default class array. @return Array of Class objects or default if not found.
2642 Finds a valid local directory for a given path. @param dirsProp Comma-separated list of local directory paths. @param path Path to locate within the directories. @return File object representing the valid directory.
2643 Constructs a SerializationFactory with configured serializers. @param conf Hadoop configuration to initialize with.
2644 Retrieves configuration properties with a given prefix. @param conf Configuration object. @param confPrefix Prefix to filter by.
2645 Retrieves configuration properties with a specified prefix. @param confPrefix Configuration prefix to filter by. @return Map of configuration properties with the prefix.
2646 Populates builder with props from configuration, conditionally. @param builder FSBuilder instance @param conf Configuration object @param prefix Property prefix @param mandatory Whether props are mandatory
2647 Generates an HTML form displaying configuration property changes. @param out PrintWriter to write the HTML output. @param reconf Reconfigurable object containing the old config.
2648 Adds a view link to the configuration using default mount table. @param conf Hadoop configuration object. @param src Source path. @param target Target URI.
2649 Adds a viewfs link to the configuration. @param conf Hadoop configuration object. @param target URI of the view file system.
2650 Adds a view file system link to the configuration. @param conf Hadoop configuration object. @param target URI of the target file system.
2651 Adds viewfs links to configuration using targets. @param conf Hadoop configuration. @param targets Array of target URIs.
2652 Configures the viewfs.homedir property using provided config and homedir.
2653 Retrieves a value using the configuration and default mount table. @param conf Hadoop configuration object.
2654 Creates an ErasureEncoder based on configuration and options. @param conf Hadoop configuration. @param options Erasure codec options.
2655 Creates and returns an ErasureDecoder based on config & options. @param conf Hadoop configuration. @param options Erasure codec options.
2656 Returns compressor class based on native library availability. @param conf Hadoop configuration object.
2657 Returns decompressor class based on native library availability. @param conf Hadoop configuration object.
2658 Creates a Decompressor: Bzip2 if available, dummy otherwise. @param conf Hadoop configuration object. @return Decompressor instance.
2659 Gets a SocketFactory, using configured class or default. @param conf Hadoop configuration @param clazz Class used to determine factory class name @return SocketFactory instance
2660 Creates a HadoopZookeeperFactory with Kerberos keytab. @param zkPrincipal ZooKeeper principal. @param kerberosPrincipal Kerberos principal. @param kerberosKeytab Kerberos keytab file path.
2661 Initializes the SSL context based on the provided mode. Uses keystores factory and configures hostname verifier.
2662 Checks if SIMPLE authentication is supported. @param conf Hadoop configuration object. @return True if SIMPLE authentication is supported.
2663 Configures Kerberos realm and authentication rules from config. @param conf Hadoop configuration object.
2664 Retrieves a CryptoCodec instance for a cipher suite. @param conf Hadoop configuration. @param cipherSuite Cipher suite to use. @return CryptoCodec instance or null if not found.
2665 Creates a Hash instance based on the configuration. @param conf Hadoop configuration object. @return Hash instance based on the configuration.
2666 Creates a FlagSet from a configuration key and enum class. @param enumClass Enum class for the flags. @param conf Configuration object. @param key Configuration key. @param ignoreUnknown Whether to ignore unknown enum values.
2667 Writes configuration properties to a Writer, redacting sensitive data. @param propertyName Property to redact, or null for all. @param out Writer to write the XML configuration to. @param config Hadoop Configuration object.
2668 Dumps configuration properties to a JSON writer. @param config Hadoop Configuration object. @param out Writer to write JSON output.
2669 Sets a key-value pair and returns the builder. @param key Key to set. @param value Value for the key.
2670 Sets a key-value pair and returns the builder. @param key Key to set. @param value Value for the key.
2671 Sets a key-value pair and returns the builder. @param key Key to set. @param value Value for the key.
2672 Sets a key-value pair, converting the value to an int. @param key The key to set. @param value The value to associate with the key.
2673 Creates a MetricsSource from a source object using a factory. @param source Object to create metrics from. @return MetricsSource instance.
2674 Creates a data output stream for writing to a file. @param f Path to the file. @param overwrite Overwrite if exists.
2675 Creates a data output stream for writing to a file. @param f The path to the file. @param createFlag Flags for file creation. @param opts Create options. @return FSDataOutputStream object.
2676 Creates a symbolic link. @param dir Link's parent directory. @param permission Link's permissions. @param createParent Whether to create parent directories.
2677 Processes files using a CompressionCodec based on arguments. @param args Command-line arguments specifying input/output files.
2678 Masks principal configuration and hostname. @param principalConfig Principal configuration string. @param hostname Hostname string to mask. @return Masked string or original if invalid input.
2679 Masks principal configuration string based on address. @param principalConfig Principal configuration string. @param addr Client address, used for hostname masking. @return Masked string or original if invalid.
2680 Registers a protocol with the server. @param rpcKind RPC kind. @param protocolClass Protocol class. @param protocolImpl Protocol implementation.
2681 Creates a KeyProvider from a configuration key name. @param conf Hadoop configuration. @param configKeyName Key name in the configuration. @return KeyProvider instance or null if not found.
2682 Creates a URI from the default filesystem name. @param conf Hadoop configuration object. @return URI representing the default filesystem.
2683 Checks Kerberos kinit command, logs path or PATH error. @param kinit Path to kinit executable.
2684 Creates an InetSocketAddress from a configuration key. @param name Configuration key name. @param defaultAddress Default address if key is not found. @param defaultPort Default port to use.
2685 Resolves a host and port from properties, or uses a default. @param hostProperty Host property name. @param addressProperty Address property name. @param defaultAddressValue Default address value. @param addr Existing InetSocketAddress. @return Resolved InetSocketAddress.
2686 Creates a CompletableFuture for an FSDataInputStream with configured parameters.
2687 Asynchronously opens a file and returns an FSDataInputStream. Uses configured parameters for file opening.
2688 Initializes SFTP file system configuration from URI and config. @param uriInfo URI containing SFTP connection details. @param conf Hadoop configuration object.
2689 Obtains an SFTP channel with credentials from configuration. @return ChannelSftp object or null if unavailable.
2690 Sets buffer size using file system configuration. @param bufferSize Size of the input stream buffer.
2691 Opens a file for input stream. @param f Path to the file. @return FSDataInputStream for reading the file.
2692 Opens an input stream for reading from a file descriptor. @param fd File descriptor to read from.
2693 Creates a data output stream for writing to a file. @param f Path to the file @return FSDataOutputStream object
2694 Opens a file for appending. @param f Path to the file. @param appendToNewBlock Whether to append to new block. @return FSDataOutputStream object.
2695 Initializes the Cache with a given configuration. @param conf Hadoop configuration object.
2696 Initializes a Sorter with provided configuration and metadata. @param fs FileSystem, comparator, keyClass, valClass, conf, metadata
2697 Creates a CompressionOutputStream using LZ4 codec. @param out Output stream. @param compressor Compressor.
2698 Creates a BlockDecompressorStream for LZ4 decompression. @param in Input stream @param decompressor Decompressor instance
2699 Creates a Lz4Decompressor with a buffer size from configuration.
2700 Creates a CompressionOutputStream, using CompressorStream if native library loaded. @param out Output stream to write compressed data. @param compressor Compressor object.
2701 Creates a CompressionInputStream, using native code if available. @param in Input stream to decompress. @param decompressor Decompressor object.
2702 Creates a Snappy compression output stream. @param out Output stream. @param compressor Snappy compressor.
2703 Creates a SnappyCompressor with a buffer size from configuration.
2704 Creates a Snappy CompressionInputStream. @param in Input stream @param decompressor Snappy decompressor @return CompressionInputStream instance
2705 Creates a SnappyDecompressor with buffer size from configuration.
2706 Copies data from in to out using a configuration-based buffer size. @param in Input stream. @param out Output stream. @param conf Configuration object.
2707 Copies data from an input stream to an output stream. @param in Input stream. @param out Output stream. @param close Whether to close streams after copying.
2708 Gets the IO file buffer size from configuration. @param conf Hadoop configuration object. @return Buffer size as an integer.
2709 Initializes script name and max args from config. @param conf Configuration object; null if not provided.
2710 Gets crypto buffer size from config, defaults if not found. @param conf Hadoop configuration object. @return Integer representing the crypto buffer size.
2711 Gets the number of priority levels from configuration. @param ns Namespace. @param conf Configuration object.
2712 Gets the RPC client timeout from configuration. @param conf Hadoop configuration object. @return RPC client timeout in milliseconds.
2713 Gets the IPC ping interval from configuration. @param conf Hadoop configuration object. @return IPC ping interval in milliseconds.
2714 Gets the RPC timeout from configuration, returns 0 if negative. @param conf Hadoop configuration object. @return RPC timeout value.
2715 Constructs a LineReader with input stream and buffer size from config. @param in The input stream to read from. @param conf Configuration object for buffer size.
2716 Constructs a LineReader with an input stream, config, and delimiter. @param in Input stream to read from. @param conf Configuration object. @param recordDelimiterBytes Record delimiter bytes.
2717 Retrieves an integer configuration value, logs the access. @param name Configuration key name. @param defaultValue Default value if parsing fails.
2718 Sets the FTP client timeout using configuration. @param client FTP client object. @param conf Hadoop configuration object.
2719 Gets long option value, uses default if parsing fails. @param key Option key name. @param defVal Default value.
2720 Gets the local block size from configuration. @return Local block size in bytes.
2721 Retrieves a long configuration value, logs access, returns value. @param name Configuration key name. @param defaultValue Default value if parsing fails.
2722 Retrieves a float config value, logs access, and returns it. @param name Config key name. @param defaultValue Default value if key is not found.
2723 Initializes trash settings from configuration. @param conf Hadoop configuration object. @param fs FileSystem instance. @param home Home directory path.
2724 Checks if nested mount point support is enabled in config. @param conf Hadoop configuration object. @return True if nested mount points are supported.
2725 Creates an LZ4 compressor with configuration from the Hadoop conf. @return Lz4Compressor instance with configured buffer size & mode.
2726 Retrieves a retry policy based on configuration. @param conf Hadoop configuration. @param retryPolicyEnabledKey Key to check if retry is enabled.
2727 Configures logging and static web resources for the HTTP server. @param parent Handler collection to add contexts to. @param appDir Application directory. @param conf Hadoop configuration.
2728 Registers servlets for stacks, logLevel, JMX, and conf. @param configuration Hadoop configuration object.
2729 Checks if server failover is enabled for a namespace. @param namespace Namespace to check. @param conf Configuration object. @return True if failover is enabled, false otherwise.
2730 Constructs a Client with provided class, config, and factory. @param valueClass Writable class for data exchange. @param conf Hadoop configuration object. @param factory Socket factory for connection management.
2731 Checks if IPC backoff is enabled for a given prefix. @param prefix Prefix for the configuration key. @param conf Hadoop configuration object.
2732 Checks if RPC backoff is enabled for a namespace and port. @param namespace Namespace to check. @param port Port number. @param conf Hadoop configuration object.
2733 Retrieves password as char array if CLEAR_TEXT_FALLBACK is enabled. @param name Config key name. @return Password as char array, or null if not enabled.
2734 Retrieves a boolean configuration value, logs the access. @param name Config key name. @param defaultValue Default value.
2735 Finds a FileSystem implementation for a given scheme. @param scheme Filesystem scheme (e.g., "hdfs") @param conf Configuration object; null to skip config check. @return FileSystem class or throws UnsupportedFileSystemException
2736 Gets AbstractFileSystem implementation from configuration. @param uri URI for the filesystem. @param conf Hadoop configuration. @return AbstractFileSystem instance or throws exception.
2737 Resolves and casts the CallQueue implementation class. @param namespace RPC namespace. @param port RPC port. @param conf Hadoop configuration. @return CallQueue class.
2738 Resolves the RpcScheduler class from configuration. Uses namespace, port, and fallback defaults if needed.
2739 Resolves a class by name, validating against an interface. @param name Class name to resolve. @param defaultValue Default class if not found. @param xface Interface to check against.
2740 Retrieves a FileSystem instance, creating it if necessary. @param uri URI of the filesystem. @param conf Hadoop configuration. @param key Key used for filesystem identification. @return FileSystem instance.
2741 Retrieves the service shutdown timeout duration from configuration. @param conf Configuration object containing timeout settings. @return Service shutdown timeout duration in milliseconds.
2742 Retrieves a credential as a char array from credential providers. @param name Credential entry name. @return char array representing the credential.
2743 Retrieves capacity weights for call queues. @param priorityLevels Number of priority levels. @param ns Namespace. @param conf Configuration object. @return Array of capacity weights.
2744 Creates FilterInitializer array from config. @param conf Hadoop configuration @return FilterInitializer array or null if not found.
2745 Retrieves a list of instances implementing the specified interface. @param name Config key name. @param xface Interface type to check.
2746 Initializes a sequence file writer with given configurations. @param config Hadoop configuration, outStream output stream, key/val classes, codec, metadata, sync interval.
2747 Delegates configuration propagation to FutureIO. @param builder FSBuilder instance @param conf Configuration object @param prefix Property prefix @param mandatory Whether props are mandatory
2748 Populates builder with optional and mandatory props from config. @param builder FSBuilder instance @param conf Configuration object @param optionalPrefix Optional property prefix @param mandatoryPrefix Mandatory property prefix
2749 Checks native libraries; exits with code 1 if check fails. @param args Command-line arguments for options.
2750 Gets the BZip2 compressor class using the configuration. @param conf Hadoop configuration object. @return Compressor class.
2751 Gets the BZip2 decompressor class from the configuration. @param conf Hadoop configuration object. @return Decompressor class.
2752 Creates a BZip2 decompressor using the provided configuration. @param conf Hadoop configuration object. @return Decompressor instance.
2753 Creates a HadoopZookeeperFactory with ZooKeeper principal. @param zkPrincipal ZooKeeper principal.
2754 Retrieves group names for a user, recursively if requested. @param result SearchResult object. @param c LDAP context. @param goUpHierarchy Recursion level. @return Set of group names.
2755 Retrieves a CryptoCodec instance using default cipher suite. @param conf Hadoop configuration. @return CryptoCodec instance.
2756 Accepts connections on a ServerSocket with a specified backlog. @param socket ServerSocket to accept connections on. @param address Address to bind to. @param backlog Max connections in queue.
2757 Dumps configuration property details to a JSON writer. @param config Hadoop Configuration object. @param propertyName Key name. @param out Writer for JSON output.
2758 Creates a directory. @param f Path of the directory to create.
2759 Retrieves server Kerberos principal, validating against pattern. @param authType Authentication type used for principal creation. @return Server Kerberos principal string.
2760 Normalizes a URI for HAR files, extracting authority. @param rawURI The URI to normalize. @param conf Hadoop configuration. @return Normalized URI.
2761 Gets a FileSystem instance. @param conf Hadoop configuration object. @return FileSystem instance.
2762 Determines filesystem scheme from URI or configuration. @param name URI of the file or directory. @param conf Hadoop configuration object.
2763 Gets a FileSystem instance using the provided configuration. @param conf Hadoop configuration object. @return FileSystem instance.
2764 Validates file system path, normalizing if needed. @param path The Path object to validate. @throws IllegalArgumentException if path is invalid.
2765 Creates an InetSocketAddress from host/address properties. @param hostProperty Host property key. @param addressProperty Address property key. @param defaultAddressValue Default address value. @param defaultPort Default port.
2766 Creates a data output stream on the SFTP server. @param f Path to the file. @param permission File permissions.
2767 Constructs a builder with a file system and path. @param fileSystem The file system to use. @param path The path to use for file system building.
2768 Constructs a FutureDataInputStreamBuilder using a PathHandle. @param fileSystem FileSystem object. @param pathHandle PathHandle to use for building.
2769 Opens a file stream using either fileSystem_openFile or open(). @param fs FileSystem instance @param status FileStatus object @param readPolicies Read policies string @return FSDataInputStream for file access
2770 Checks if appending to the base path is supported. @param fs FileSystem instance @return True if appending is supported, false otherwise.
2771 Constructs a Sorter with a new Metadata object. @param fs FileSystem, comparator, keyClass, valClass, conf
2772 Constructs a Bzip2Compressor using block size and work factor from config.
2773 Reinitializes the compressor with a new configuration. @param conf Hadoop configuration object.
2774 Initializes reader with SequenceFile metadata and codecs. Checks file integrity and reads key/value class names.
2775 Reinitializes the compressor with a new compression level. @param conf Hadoop configuration object.
2776 Creates a DataOutputStream for writing a value. @param length Value length, or -1 for dynamic sizing. @return DataOutputStream for writing the value.
2777 Creates a WBlockState with given parameters. @param compressionAlgo Compression algorithm. @param fsOut FSDataOutputStream for writing.
2778 Initializes the script mapping with configuration. @param conf Configuration object; null if not provided.
2779 Initializes dependency script name from config. @param conf Configuration object; null if not provided.
2780 Creates an Options object from a Configuration. @param conf Hadoop configuration object
2781 Determines RPC timeout: uses configured timeout or ping interval. @param conf Hadoop configuration object. @return RPC timeout value, or -1 if not configured.
2782 Creates and configures an FTP client with details from config. @return FTP client object. @throws IOException if connection or login fails.
2783 Gets long value, replaces negative values with default. @param key Option key. @param defVal Default value.
2784 Creates an FsServerDefaults object from configuration. @return FsServerDefaults object with values from config.
2785 Returns a long value. Implementation detail, value is not derived from Path f.
2786 Moves a bad file to a designated "bad_files" directory. @param p Path of the file to move
2787 Constructs CachingGetSpaceUsed using values from the builder. @param builder Builder object containing configuration values.
2788 Reads next record length. Handles checksum exceptions. @param buffer DataOutputBuffer to fill with data @return Key length or -1 if at end.
2789 Retrieves and wraps a retry policy, or returns a default. @param conf Hadoop configuration. @param retryPolicyEnabledKey Key to check if retry is enabled.
2790 Constructs a Client with provided class and configuration. @param valueClass Writable class for data exchange. @param conf Hadoop configuration object.
2791 Retrieves a Client from the cache or creates a new one. @param conf Hadoop configuration @param factory Socket factory @param valueClass Writable class @return Client instance
2792 Filters credential providers, returning a modified config. @param config Configuration object. @param fileSystemClass Class of the filesystem.
2793 Gets AbstractFileSystem implementation from configuration. @param uri URI for the filesystem. @param conf Hadoop configuration. @return AbstractFileSystem instance.
2794 Builds and returns a Server instance with configured parameters. @throws IOException, HadoopIllegalArgumentException on error
2795 Creates and initializes a TrashPolicy instance. @param conf Hadoop configuration @param fs FileSystem object @param home Trash home directory @return TrashPolicy instance
2796 Creates and initializes a TrashPolicy instance. @param conf Hadoop configuration. @param fs FileSystem instance.
2797 Creates a DomainNameResolver instance from configuration. @param conf Hadoop configuration @param configKey Key to resolver class in configuration @return DomainNameResolver instance
2798 Resolves and instantiates a SaslPropertiesResolver using config. @param conf Hadoop configuration object @return SaslPropertiesResolver instance
2799 Resolves and loads a SaslPropertiesResolver class. @param saslPropsResolverKey Key for resolving the resolver.
2800 Gets the ImpersonationProvider class from configuration. @param conf Hadoop configuration object @return ImpersonationProvider instance
2801 Performs shutdown sequence, respecting timeout and handling interruptions. @param conf Configuration object containing timeout settings.
2802 Retrieves password as char array, falling back to CLEAR_TEXT_FALLBACK. @param name Config key name. @return Password as char array, or null if not found.
2803 Creates a RawErasureEncoder with fallback using codec and options. @param conf Hadoop configuration. @param codec Codec name. @param coderOptions Erasure coder options.
2804 Creates a RawErasureDecoder with fallback based on codec & options. @param conf Hadoop configuration. @param codec Codec name. @param coderOptions ErasureCoderOptions.
2805 Creates and replaces a call queue with a new one. @param schedulerClass Scheduler class. @param queueClass Queue class.
2806 Constructs a FairCallQueue with specified priority levels and capacity. @param priorityLevels Number of priority levels. @param capacity Total capacity of the queue.
2807 Stores an item in a configuration using Base64 serialization. @param conf Configuration object. @param item Item to store. @param keyName Key name for the stored item.
2808 Retrieves an item from configuration, deserializing it. @param conf Configuration object. @param keyName Key name in the configuration. @param itemClass Class of the item to deserialize.
2809 Serializes an array of items to a configuration. @param conf Configuration object. @param items Array of items to serialize. @param keyName Key name for the serialized array.
2810 Deserializes an array of objects from a configuration. @param conf Configuration object. @param keyName Key name. @param itemClass Class of the array elements. @return Array of deserialized objects.
2811 Creates a SequenceFile writer with given parameters. @param fs FileSystem, config Configuration, name Path
2812 Serializes & deserializes data between src and dst objects. @param conf Hadoop configuration @param src Source object to serialize @param dst Destination object to deserialize @return Deserialized destination object
2813 Populates builder with props from config. @param builder FSBuilder instance @param conf Configuration object
2814 Retrieves group names for a user, recursively if requested. @param user User's DN. @param goUpHierarchy Recursion level for group hierarchy. @return Set of group names.
2815 Writes configuration to Writer, either JSON or XML, or throws exception. @param conf Hadoop Configuration object. @param out Writer for output. @param format Output format (JSON or XML). @param propertyName Property to redact, or null for all.
2816 Initializes the authentication filter with configuration. @param container Filter container to add the filter to. @param conf Hadoop configuration object.
2817 Creates a SaslClient based on auth type. @param authType Authentication type used for client creation. @return SaslClient object or null if creation fails.
2818 Creates a FileSystem instance for the given URI and configuration. @param uri File URI @param conf Hadoop configuration @return FileSystem instance
2819 Initializes the view file system with URI and configuration. @param theUri The URI of the view file system. @param conf Hadoop configuration object.
2820 Initializes the FileSystem, potentially swapping the scheme. @param name URI of the file or directory. @param conf Hadoop configuration object.
2821 Resolves a Path object relative to the file system. @param path Path to resolve; must be relative. @return Resolved Path object.
2822 Resolves a Path object. @param p The Path object to resolve. @return Resolved Path object.
2823 Delegates file system operation to the underlying FileSystem. @param path The Path object representing the file or directory.
2824 Initializes AvroFSInput with a file context and path. @param fc FileContext for accessing the file system. @param p Path to the Avro file.
2825 Renames a file or directory. @param src Source path. @param dst Destination path. @param deleteSource Delete source after rename. @param overwrite Overwrite if destination exists.
2826 Constructs a builder with a file system and path. @param fileSystem The file system to use. @param path The path to use for file system building.
2827 Constructs an FSDataInputStreamBuilder with a FileSystem and PathHandle. @param fileSystem FileSystem object. @param pathHandle PathHandle to use.
2828 Opens a file stream using DynamicWrappedIO. @param fs FileSystem instance @param status FileStatus object @param readPolicies Read policies string @return FSDataInputStream for file access
2829 Loads keystore permission, falls back to backup on error. @param path Path to keystore. @param backupPath Backup path. @return FsPermission object.
2830 Constructs a Sorter with a new Metadata object. @param fs FileSystem, keyClass, valClass, conf
2831 Returns a Bzip2Compressor or dummy based on native library availability. @param conf Hadoop configuration object.
2832 Initializes reader for a specific range in a SequenceFile. @param start Starting offset; @param length Length to read.
2833 Creates a CompressionOutputStream using Zstandard compression. @param out The output stream. @param compressor The Zstandard compressor.
2834 Creates a ZStandardCompressor with level and buffer size from config.
2835 Creates a CompressionInputStream using the provided stream & decompressor. @param in Input stream @param decompressor Zstandard decompressor @return CompressionInputStream instance
2836 Creates and returns a ZStandardDecompressor with configured buffer size.
2837 Creates a BlockAppender for writing data blocks. Throws exception if previous block is open or meta blocks seen.
2838 Constructs a ScriptBasedMapping with a Configuration. @param conf Hadoop configuration object.
2839 Initializes the script mapping with configuration. @param conf Configuration object; null if not provided.
2840 Parses command-line arguments and executes corresponding actions. @param args Command-line arguments to process.
2841 Creates a ConnectionId with provided address, protocol, ticket, timeout, and retry policy. @param addr Address of the connection.
2842 Creates a new file or overwrites an existing one on FTP. @param file Path to the file. @param permission FsPermission for the file.
2843 Retrieves default server settings.
2844 Creates a data output stream to write to a file. @param f Path to the file. @param overwrite Overwrite if exists.
2845 Creates a data output stream for writing to a file. @param f Path to the file. @param progress Progressable object.
2846 Creates a data output stream for writing to a file. @param f Path to the file. @param replication Replication factor. @return FSDataOutputStream object.
2847 Creates a data output stream for writing to a file. @param f Path to the file. @param replication Replication factor.
2848 Creates a data output stream for writing to a file. @param f Path to the file. @param overwrite Overwrites if exists.
2849 Creates a data output stream for writing to a file. @param f Path to the file. @param overwrite Overwrite if exists.
2850 Constructs an FSDataOutputStreamBuilder with a FileSystem and Path. @param fileSystem The FileSystem to use. @param p The Path for the output stream.
2851 Reads a key-value pair from a SequenceFile. @param key Writable key to compare with expected key @return True if a key-value pair was successfully read.
2852 Reads a key from the SequenceFile. @param key Key object for validation. @return Key object or null if end of file.
2853 Constructs an Invoker with provided parameters. @param protocol Protocol class, connId, conf, factory, alignmentContext
2854 Retrieves a Client from cache or creates a new one. @param conf Hadoop configuration @return Client instance
2855 Retrieves a Client, reusing cached instances if available. @param conf Hadoop configuration @param factory Socket factory @return Client instance
2856 Constructs an Invoker with provided parameters for RPC calls. @param protocol Protocol class, connId, conf, factory, alignmentContext
2857 Checks if a method is supported by a protocol version. @param rpcProxy RPC proxy object. @param protocol Protocol class. @param rpcKind RPC kind. @param version Protocol version. @param methodName Method name to check.
2858 Constructs a Trash object with the given FileSystem and Configuration. @param fs FileSystem instance. @param conf Hadoop Configuration.
2859 Creates a NetworkTopology instance using provided configuration. @param conf Hadoop configuration to use for initialization.
2860 Constructs a SaslRpcClient with provided user, protocol, address, and config. @param ugi UserGroupInformation @param protocol RPC protocol class @param serverAddr Server address @param conf Configuration object
2861 Configures impersonation provider with a proxy user prefix. @param conf Hadoop configuration @param proxyUserPrefix Prefix for proxy users
2862 Registers a shutdown hook with the given priority. @param shutdownHook Runnable to execute during shutdown. @param priority Hook execution priority.
2863 Retrieves password from configuration. @param conf Configuration object. @param name Config key name. @return Password string, or null if not found.
2864 Retrieves password for an alias, using default if unavailable. @param conf Configuration object. @param alias Password alias. @return Password string, or default if not found.
2865 Retrieves ZK authentication information from configuration. @param conf Hadoop configuration object. @param configKey Key for the authentication configuration. @return List of ZKAuthInfo objects, or empty list on failure.
2866 Constructs a DecayRpcScheduler with given levels and config. @param numLevels Priority levels (>= 1). @param ns Namespace for configuration. @param conf Hadoop configuration object.
2867 Clones a Writable object using reflection and configuration. @param orig Original Writable object to clone @param conf Hadoop configuration @return A clone of the original Writable object
2868 Writes configuration to an OutputStream, using UTF-8 encoding. @param out Output stream to write the configuration to.
2869 Selects a suitable authentication type from the provided list. @param authTypes List of available authentication types. @return Selected SaslAuth object or null if none is suitable.
2870 Constructs an FtpFs instance, initializing with URI and config. @param theUri FTP file system URI. @param conf Hadoop configuration.
2871 Constructs a RawLocalFs with a URI, file system, and configuration. @param theUri File system URI. @param conf Hadoop configuration.
2872 Initializes the file system and calls m2. @param name URI of the file or directory. @param conf Hadoop configuration object.
2873 Constructs a MultipartUploaderBuilder with a FileSystem and Path. @param fileSystem Hadoop FileSystem object. @param p Path to use for the builder.
2874 Constructs a PathData object. @param fs FileSystem object. @param pathString Path string. @param stat FileStatus object. @throws IOException if an I/O error occurs.
2875 Checks file system capabilities based on path and capability. @param path Path object @param capability Capability string @return True if capability is enabled, false otherwise.
2876 Resolves a path by applying a mask. @param path The path to resolve. @return A resolved Path object. @throws IOException if an I/O error occurs.
2877 Resolves a Path, applying a swap scheme if configured. @param path The Path to resolve. @return Resolved Path object.
2878 Resolves FileStatus, following symbolic links if configured. @param item PathData object @param depth Link following depth @return FileStatus object
2879 Resolves a Path, prepending chroot or working directory. @param path The Path to resolve relative to root/working dir.
2880 Renames a file or directory. @param src Source path. @param dst Destination path.
2881 Creates an FSDataInputStreamBuilder for a given file system and path. @param fileSystem The file system to use. @param path The path to build the stream from.
2882 Creates an FSDataInputStreamBuilder with a FileSystem and PathHandle. @param fileSystem FileSystem object @param pathHandle PathHandle to use @return FSDataInputStreamBuilder object
2883 Retrieves FsPermission, initializing keystore if needed. @param oldPath Old path. @param newPath New path. @return FsPermission object.
2884 Creates a BZip2 compressor using the provided configuration. @param conf Hadoop configuration object @return BZip2Compressor object
2885 Creates a BlockReader for a named region. @param name Name of the block region. @return BlockReader instance.
2886 Creates a BlockReader for the given block index. @param blockIndex Index of the block to read. @return BlockReader instance for the specified block.
2887 Writes initial file metadata and block appender. Handles errors and ensures proper resource closing.
2888 Creates a BlockAppender with given name and compression. @param name Block name. @param compressionName Compression algorithm name. @return BlockAppender object.
2889 Creates a BlockAppender for a given name using default compression. @param name Block name. @return BlockAppender object.
2890 Initializes the block appender if it's null.
2891 Creates a data output stream to write to a file. @param f Path to the file.
2892 Finds a writable file path, incrementing ID if necessary. @param initial The initial path to start searching from. @throws IOException if a writable path cannot be found.
2893 Opens a file output stream, retrying on failure. @param targetFile Path to the file.
2894 Writes an object as JSON bytes to a file. @param fs FileSystem object. @param path Path to file. @param instance Object to serialize. @param overwrite Overwrite file.
2895 Creates a Writer with given filesystem, configuration, and metadata. @param fs Filesystem to write to. @param conf Hadoop configuration.
2896 Creates a new file. Returns false if file exists. @param f Path to the file to create. @return True if file created, false otherwise.
2897 Constructs a FileSystemDataOutputStreamBuilder. @param fileSystem The FileSystem to use. @param p The Path for the output stream.
2898 Checks value class, reads next record, and configures value. @param key Key to compare with expected key. @param val Value to configure and read. @return True if more records are available.
2899 Constructs a Trash object using the provided Hadoop configuration. @param conf Hadoop configuration object.
2900 Creates a DomainNameResolver for a URI. @param conf Hadoop configuration @param uri URI to resolve @param configKey Key to resolver class in configuration
2901 Gets the Groups instance, creating one if it doesn't exist. @param conf Hadoop configuration object. @return The Groups instance.
2902 Returns the singleton Groups instance, initialized with config. @param conf Hadoop configuration object.
2903 Configures impersonation provider with a proxy user prefix. @param conf Hadoop configuration
2904 Registers a path for deletion on exit. @param f The path to register for deletion. @return True if registration succeeded.
2905 Registers this shutdown hook with the given priority. @param priority Hook execution priority
2906 Logs startup message and registers shutdown hook. @param clazz Class of the application. @param args Startup arguments. @param log Logger instance.
2907 Initializes SSL configuration based on provided settings. Retrieves keystore, password, and other SSL parameters.
2908 Configures keystore and key managers with file monitoring. @param mode SSLFactory.Mode for configuration. @param storesReloadInterval Reload interval in milliseconds.
2909 Retrieves ZK authentication information from the configuration. @param conf Hadoop configuration object. @return List of ZKAuthInfo objects.
2910 Retrieves a list of group names for a given user. @param user User's DN. Returns list of group names.
2911 Prints configuration details to System.out using m1.
2912 Negotiates SASL authentication with the server. Selects AuthMethod based on negotiation, handles responses.
2913 Constructs a PathData object using a FileSystem and path string. @param fs FileSystem object. @param pathString Path string. @throws IOException if an I/O error occurs.
2914 Returns an array of PathData objects for directories within the path.
2915 Re-throws FileNotFoundException if directory listing is inconsistent. @param fs FileSystem object @param path Path object @param e FileNotFoundException
2916 Checks file system capability for a given path. @param path Path object @param capability Capability string @return True if capability is enabled, false otherwise.
2917 Checks if a path has a specific capability. @param path The path to check. @param capability Capability string. @throws IOException if an error occurs.
2918 Resolves a path using the provided FileSystem. @param fs The FileSystem to use. @param path The path to resolve. @return A resolved Path object.
2919 Creates a FutureDataInputStreamBuilder for a given path. @param path The path to build the stream from. @return FutureDataInputStreamBuilder object.
2920 Creates a FutureDataInputStreamBuilder for the given path. @param pathHandle PathHandle for the file to open @return FutureDataInputStreamBuilder object
2921 Initializes keystore with password, permissions, and scheme. Retrieves password from env/file, sets permissions, loads keystore.
2922 Initializes the TFileIndex if not already initialized.
2923 Retrieves a DataInputStream for a named block. @param name Name of the block. @return DataInputStream for the block.
2924 Constructs a Reader from an input stream. @param fin Input stream for BCFile data. @param fileLength Length of the BCFile. @param conf Hadoop configuration.
2925 Creates a DataOutputStream for a new MetaBlock. @param name Block name. @param compressName Compression algorithm name. @return DataOutputStream for writing to the new block.
2926 Closes the TFile, writing metadata and index if not already closed.
2927 Starts a new Meta Block. @param name Block name. @return DataOutputStream for writing to the block. @throws MetaBlockAlreadyExists if block already exists.
2928 Creates a DataOutputStream for a new key. @param length Length of the key data. @return DataOutputStream for writing the key.
2929 Copies a file or directory. @param src Source file/directory. @param dstFS Destination file system. @param dst Destination Path. @param deleteSource Whether to delete source.
2930 Finalizes multipart upload, completing or aborting the process. @param uploadId Upload handle for the multipart upload. @param filePath Path to the final file. @param handleMap Map of part handles.
2931 Creates a data output stream and sets file permissions. @param fs FileSystem object @param file Path to the file @param permission FsPermission to apply @return FSDataOutputStream object
2932 Creates a Writer with default compression. @param fs FileSystem to use. @param conf Hadoop configuration. @param name Output file path. @param keyClass Key class. @param valClass Value class.
2933 Creates or overwrites a log file with a unique name. @throws IOException if file creation/overwrite fails.
2934 Delegates to the data's m1 method. @param key Key for comparison. @param val Value to configure. @return True if more records are available.
2935 Creates a ProtocolProxy for the given protocol. @param protocol Protocol class @return ProtocolProxy instance
2936 Gets the Groups instance, creating one if it doesn't exist.
2937 Initializes authentication settings and metrics from config. @param conf Hadoop configuration object. @param overrideNameRules Whether to override name rules.
2938 Default constructor for the AccessControlList class.
2939 Constructs an AccessControlList from an ACL string. @param aclString String representing the ACL definition.
2940 Constructs an AccessControlList with users and groups. @param users Comma-separated list of users. @param groups Comma-separated list of groups.
2941 Calls m1 with a default Hadoop Configuration object.
2942 Configures key and trust managers based on mode and config. @param mode SSLFactory.Mode for configuration.
2943 Initializes ZK client with configuration and auth info. @param authInfos List of authentication information. @param sslEnabled Flag indicating SSL is enabled.
2944 Retrieves user groups, applying case transformation based on rule. @param user User's DN. Returns list of group names.
2945 Initializes the metrics system with a given prefix. @param prefix Metric prefix, used for naming metrics. @return MetricsSystem object.
2946 Creates a new PathData object with the given extension. @param extension File system extension to append to the path. @return A new PathData object.
2947 Creates a masked PathData object from a child path. @param child The child PathData object. @return Masked PathData object.
2948 Processes a PathData item, listing paths or handling exceptions. @param item The PathData object to process. @throws IOException if an I/O error occurs.
2949 Checks file system capability; returns true for read-only. @param path Path object @param capability Capability string @return True if capability is enabled, false otherwise.
2950 Checks file system capability for a path. @param path Path object @param capability Capability string @return True if capability is enabled, false otherwise.
2951 Checks file system capability for a given path. @param path Path object @param capability Capability string @return True if capability check passes, false otherwise.
2952 Gets FileStatus for a path, resolving it against chroot. @param f The Path to resolve relative to root/working dir.
2953 Copies a file or directory. Handles recursive copy for directories. @param srcFS Source FS, srcStatus, dstFS, dst, deleteSource, overwrite, conf
2954 Copies a file or directory. @param srcFS FileSystem of source. @param srcStatus Source FileStatus. @param dst Destination file or directory. @param deleteSource Whether to delete source after copy. @param conf Hadoop configuration.
2955 Opens a file with specified policy and length. @param policy File open policy. @return FSDataInputStream object.
2956 Opens a file for sequential reading with specified options. @param fs FileSystem object @param file Path to the file @param bufferSize Buffer size for streaming @param length File length, or -1 if unknown @return FSDataInputStream for reading
2957 Reads and deserializes JSON from a file, handling empty files. @param fs FileSystem object @param path Path to the JSON file @param status FileStatus, can be null @return Deserialized object of type T
2958 Retrieves the first key from the TFileIndex. @return RawComparable object representing the first key
2959 Gets the RawComparable associated with the last index.
2960 Finds block index for a key, throws exception if unsorted. @param key The key to search for. @param greater True for greater key, false otherwise. @return Location object with block index.
2961 Retrieves a RawComparable from the TFile based on the given offset. @param offset The offset within the TFile. @return RawComparable object or null if not found.
2962 Constructs a Reader with provided input stream, file length, and config. @param fsdis Input stream for reading TFile data. @param fileLength Length of the file. @param conf Hadoop configuration.
2963 Releases block reader and initializes a new one for the block. @param blockIndex Index of the block to read.
2964 Appends a key-value pair to the current TFile. @param key Key data, offset, and length. @param value Value data, offset, and length.
2965 Returns the middle key. Returns null if no keys exist.
2966 Seeks to a key and advances the reader. @param key The key to seek to.
2967 Seeks to the correct position based on the key. @param key The key to seek for. @param before True to seek before the key.
2968 Merges key-value pairs from multiple readers into a single output.
2969 Creates a ProtocolProxy for the given protocol. @param protocol Protocol class
2970 Creates a ProtocolProxy for a given protocol and connection. @param protocol Protocol class @return ProtocolProxy instance
2971 Delegates to Trash object to get the trash directory path.
2972 Delegates moving a file/directory to the Trash object. @param path Path of the file/directory to move. @throws IOException if an I/O error occurs.
2973 Initializes UGI if not already done, synchronizing access. @param conf Hadoop configuration object. @param overrideNameRules Whether to override name rules.
2974 Initializes authentication settings using the provided configuration. @param conf Hadoop configuration object.
2975 Launches a service, handles exceptions, and returns an ExitException. @param conf Hadoop configuration @param instance Service instance to launch @return ExitUtil.ExitException with service launch status
2976 Initializes ZK client with configuration and auth info. @param authInfos List of authentication information.
2977 Constructs LocalFs with a URI and configuration. @param theUri File system URI. @param conf Hadoop configuration settings.
2978 Copies data from an input stream to a target file, handling existence and overwrites.
2979 Copies a file or directory from src to dst. @param srcFS Source FS, dstFS destination FS, conf Configuration
2980 Repairs file connections and opens a data input stream. @param mrNodes Array of MRNflyNodes to process. @param f File path. @param bufferSize Buffer size for stream.
2981 Copies a file or directory to a destination. @param srcFS Source FileSystem. @param src Path of source. @param dst Destination file or directory.
2982 Opens a file sequentially for reading. @return FSDataInputStream object for reading the file.
2983 Loads and deserializes JSON from a file. @param fs FileSystem object @param path Path to the JSON file @return Deserialized object of type T
2984 Finds record number at given offset. @param offset Offset to locate the record number for. @return Record number at the specified offset.
2985 Gets record number from the index. @return Record number.
2986 Constructs a Scanner with a Reader, start, and end locations. @param reader Reader for data. @param begin Start location. @param end End location.
2987 Validates location against begin/end, advances cursor. @param l The Location object to validate and advance.
2988 Advances the scanner location based on record count. Checks end location and releases/initializes readers.
2989 Appends a key-value pair to the current TFile. @param key Key data. @param value Value data.
2990 Calls overloaded method to seek before or at the key. @param key The key to seek for.
2991 Seeks to a key, configures value, and returns the next key. @param key The key to seek for. @param val Writable value to configure. @param before Seek before the key. @return Next key or null if not found.
2992 Creates a UGI for the given user and assigns user groups. @param user User's name. @param userGroups Array of user group names. @return UserGroupInformation object.
2993 Creates UGI, sets groups, and returns it. @param user User name. @param realUser Existing UGI.
2994 Gets the user's groups. Returns empty list on failure.
2995 Gets the user's groups. @return Set of group names, or empty set on failure.
2996 Authenticates a subject and returns a UserGroupInformation. @param subject Authentication subject, or null. @param params Login parameters, or null. @throws IOException if authentication fails.
2997 Initializes ACLs and machine lists using provided configuration. @param conf Configuration object. @param provider Policy provider.
2998 Authorizes access based on user and remote address. @param user UserGroupInformation object @param remoteAddress Remote IP address string @throws AuthorizationException if authorization fails
2999 Delegates impersonation authorization to the ImpersonationProvider. @param user UserGroupInformation object @param remoteAddress Remote address of the connection
3000 Delegates to overloaded method. @param conf Hadoop configuration @param processedArgs processed command-line arguments
3001 Initializes ZK client with configuration and auth info. @param authInfos List of authentication information.
3002 Copies data from a source to a target path, masking data. @param src Source path data. @param target Target path data.
3003 Delegates to overloaded method, copying file/dir. @param srcFS, src, dstFS, dst, deleteSource, conf
3004 Opens an input stream for a file with repair/read options. @param f The file path. @param bufferSize Stream buffer size. @return FSDataInputStream or throws IOException.
3005 Creates a Scanner for data retrieval using the Reader, begin, and end locations.
3006 Creates a Scanner for records within the specified range. @param beginRecNum Start record number (inclusive). @param endRecNum End record number (inclusive).
3007 Constructs a Scanner with start and end locations based on offsets. @param reader Reader for data. @param offBegin Beginning offset. @param offEnd Ending offset.
3008 Advances the cursor to the specified location. @param beginLocation The location to advance to.
3009 Checks if the key exists in the MapFile. @param key The key to check for existence. @return True if the key is not found, false otherwise.
3010 Seeks to a key, configures value, and returns the next key. @param key The key to seek for. @param val Writable value.
3011 Checks if SIMPLE authentication is disabled. Returns true if disabled, false otherwise.
3012 Logs out the user, throwing exception if keytab is missing. Logs out user, handles exceptions, and logs success/failure.
3013 Converts a collection of group names to a String array. @return String array of group names.
3014 Checks if a user or their real user has access based on ACLs. @param ugi UserGroupInformation object to check.
3015 Authenticates a Subject and returns a UserGroupInformation. @param subject Authentication subject; must not be null. @throws IOException if authentication fails.
3016 Authorizes user access based on user and remote address. @param user UserGroupInformation object @param remoteAddress Remote IP address string @param conf Configuration object @throws AuthorizationException if authorization fails
3017 Authorizes RPC connection; increments counters on success/failure. @throws RpcServerException if authorization fails.
3018 Copies data from source to destination, handling various path conditions. @param src Source path data. @param dst Destination path data.
3019 Copies a file or directory from src to dst. @param delSrc Whether to delete the source after copy. @param src Source path. @param dst Destination path.
3020 Copies a file or directory from src to dst, optionally deleting src. @param delSrc Whether to delete src after copying. @param src Source path. @param dst Destination path.
3021 Creates a Scanner for a specified data range. @param offset Start offset. @param length Length of data to scan. @return Scanner object for the specified range.
3022 Constructs a Scanner with specified begin/end keys. @param reader Reader for data. @param beginKey Beginning key. @param endKey Ending key.
3023 Seeks to a key in the TFile. @param key The key to seek to. @param keyOffset Offset of the key. @param keyLen Length of the key.
3024 Seeks to a key within the TFile. @param key The key to seek to. @param keyOffset Offset of the key. @param keyLen Length of the key.
3025 Seeks to a position based on a key. @param key The key to seek to. @param keyOffset The offset of the key. @param keyLen The length of the key.
3026 Returns value if key exists, otherwise null. @param key The key to check. @param val The value to configure and return.
3027 Creates a ProtocolProxy for the given protocol. @param protocol RPC protocol class @param clientVersion Client version
3028 Creates a ProtocolProxy for RPC communication. @param protocol RPC protocol class @return ProtocolProxy instance
3029 Creates a ProtocolProxy for RPC calls. @param protocol RPC protocol class @return ProtocolProxy instance
3030 Opens a RandomAccessFile, verifies ownership, and returns it. @param f file to open @param mode access mode (e.g., "r", "rw") @param expectedOwner owner to check @param expectedGroup group to check @return RandomAccessFile object @throws IOException if file access fails or ownership mismatch
3031 Opens a file for reading, verifying owner/group. @param file File to open. @param expectedOwner Expected file owner. @param expectedGroup Expected file group. @return FSDataInputStream for reading.
3032 Opens a secure FileInputStream, validating file ownership. @param f file to open @param expectedOwner expected file owner @param expectedGroup expected file group @return FileInputStream object
3033 Prints Kerberos diagnostic information for a UserGroupInformation. @param title Diagnostic title. @param ugi UserGroupInformation object.
3034 Returns a UserGroupInformation instance, authenticating if needed.
3035 Authenticates a subject and logs them in. @param subject Authentication subject; null to log out. @throws IOException if authentication fails.
3036 Processes RPC connection context, authenticates user, and authorizes. @param buffer RPC buffer containing connection context. @throws RpcServerException if authorization fails or context processed.
3037 Creates a Scanner with specified begin/end keys. @param beginKey Beginning key, can be null. @param endKey Ending key, can be null.
3038 Seeks to a key in the TFile. @param key The key to seek to.
3039 Seeks to a key within the TFile. @param key The key to seek to.
3040 Seeks to a position based on a key. @param key The key to seek to.
3041 Returns the key if it exists, otherwise returns null. @param key The key to check.
3042 Gets value if key exists; otherwise, returns null. @param key The key to check. @param val The value to configure.
3043 Creates a ProtocolProxy for the given protocol. @param protocol RPC protocol class, clientVersion
3044 Creates a ProtocolProxy for RPC communication. @param protocol RPC protocol class @return ProtocolProxy instance
3045 Establishes a connection to a remote server, handling auth and retries. @param fallbackToSimpleAuth Controls fallback to simple authentication.
3046 Opens a RandomAccessFile, securely if SIMPLE auth is disabled. @param f file to open @param mode access mode @param expectedOwner owner to check @param expectedGroup group to check @return RandomAccessFile object @throws IOException if file access fails
3047 Opens a file for reading, securely if SIMPLE auth is enabled. @param file File to open. @param expectedOwner Expected file owner. @param expectedGroup Expected file group.
3048 Opens a file, using secure FileInputStream if SIMPLE auth disabled. @param f file to open @param expectedOwner expected file owner @param expectedGroup expected file group @return FileInputStream object
3049 Checks if a user is an admin based on ACL. @param servletContext Servlet context to access ACL. @param remoteUser User's name to check.
3050 Checks user authorization for a protocol based on ACLs and hosts. @param user UserGroupInformation object. @param protocol Protocol class. @param conf Hadoop configuration. @param addr Client address.
3051 Returns a UserGroupInformation instance, authenticating if needed.
3052 Checks if authentication is needed based on keytab and context.
3053 Checks authentication status, authenticating if needed.
3054 Executes action, authenticating if SIMPLE auth is disabled. @param action The action to execute, returns result of type T.
3055 Executes action as a specific user, returning the result. @param action PrivilegedExceptionAction to execute @return Result of the action @throws IOException
3056 Cedes leadership by waiting for a specified time. @param millisToCede Time to wait before ceding leadership.
3057 Executes m1() within a privileged context using UserGroupInformation. @throws IOException, ServiceFailedException
3058 Creates a Scanner with specified begin/end keys. @param beginKey Beginning key, can be null. @param endKey Ending key, can be null.
3059 Creates a scanner with specified begin/end keys. @param beginKey Beginning key, can be null. @param endKey Ending key, can be null.
3060 Creates a ProtocolProxy for RPC communication. @param protocol RPC protocol class @return ProtocolProxy instance
3061 Creates a proxy for the given protocol. @param protocol RPC protocol class @return Proxy instance
3062 Checks user authorization based on Hadoop security settings. @param servletContext Servlet context for configuration access. @param request HTTP request. @param response HTTP response.
3063 Authorizes user access to a protocol based on ACLs and host. @param user UserGroupInformation object. @param protocolName Protocol class name. @param addr Client address.
3064 Resolves the user's home directory path. Uses username from UGI or system property if unavailable.
3065 Checks file access permissions and throws exception if denied. @param stat The FileStatus object. @param mode The requested FsAction.
3066 Constructs a ViewFileSystem instance. Initializes user and creation time.
3067 Constructs a ViewFs instance with URI and configuration. @param theUri The URI of the ViewFs. @param conf Hadoop configuration.
3068 Initializes the InodeTree with configuration and URI. @param config Hadoop configuration object. @param viewName View name or mount table name. @param theUri The URI for the view. @throws Exception on various configuration issues.
3069 Returns a Path object representing the user's home directory. Uses username from UGI, falls back to system property if needed.
3070 Opens an HTTP connection with delegation token support. @param url URL to connect to @param token Token for authentication @param doAs User to execute as @return HttpURLConnection object
3071 Gets a UserGroupInformation object, using cache path or user name. @param ticketCachePath Cache path, or null. @param user User's name, or null.
3072 Authenticates user with keytab, returning UserGroupInformation. @param user User principal. @param path Keytab file path. @throws IOException if authentication fails.
3073 Logs user group information for debugging purposes. @param log Logger instance for logging. @param ugi UserGroupInformation object to log.
3074 Executes an action as the current user, throwing exceptions. @param action PrivilegedExceptionAction to execute @return Result of the action @throws IOException
3075 Returns short username if using proxy authentication, null otherwise.
3076 Creates a ProtocolProxy with retry logic for RPC calls. @param protocol RPC protocol class @param timeout Timeout for establishing connection
3077 Creates a scanner using specified begin/end keys. @param beginKey Beginning key, can be null. @param endKey Ending key, can be null.
3078 Creates a ProtocolProxy, authenticating the user. @param protocol RPC protocol class @param clientVersion Client version @param addr Socket address @param conf Configuration @param factory Socket factory @return ProtocolProxy instance
3079 Gets a protocol proxy. @param protocol Protocol class. @return Protocol proxy instance.
3080 Checks if user has access, requiring admin privileges if configured. @param servletContext Servlet context. @param request HTTP request. @param response HTTP response.
3081 Returns path to trash directory. Uses system username to construct trash path.
3082 Lists trash roots, either for current user or all users. @param allUsers True to list all users' trash roots. @return Collection of FileStatus objects representing trash roots.
3083 Checks file access permissions. @param path The path to check. @param mode The requested access mode.
3084 Checks file access permissions. @param path The path to check. @param mode The requested access mode.
3085 Constructs a ViewFileSystem instance with URI and config. @param theUri The URI of the view file system. @param conf Hadoop configuration object. @throws IOException If an I/O error occurs.
3086 Retrieves a FileSystem instance, creating it if needed. @param uri URI of the filesystem. @param conf Hadoop configuration. @return FileSystem instance.
3087 Returns the default file system's home directory.
3088 Opens an HTTP connection with delegation token support. @param url URL to connect to @param token Token for authentication @return HttpURLConnection object
3089 Gets a FileSystem instance with provided URI, config, and user. @param uri The URI of the file system. @param conf The configuration object. @param user User name for authentication. @return FileSystem instance.
3090 Gets a FileSystem instance with specified URI, config, and user. @param uri The URI of the file system. @param conf Configuration object. @param user User name. @return FileSystem instance.
3091 Authenticates using Kerberos or falls back to username auth. @param ticketCache Kerberos ticket cache path, or null. @param user User's name. @throws IOException if authentication fails.
3092 Authenticates with keytab or current user; attempts relogin. @throws IOException if authentication fails.
3093 Logs in a user using a keytab file. @param user User principal. @param path Keytab file path.
3094 Logs user group information. @param ugi UserGroupInformation object to log.
3095 Gets a ProtocolProxy, using the provided configuration timeout. @param protocol RPC protocol class @param clientVersion Client version @param addr Remote address @param conf Hadoop configuration @param connTimeout Connection timeout
3096 Executes RPC call using provided protocol, version, address, and config. @param protocol RPC protocol class @return Result of RPC call
3097 Creates and returns a protocol proxy instance. @param protocol RPC protocol class @param clientVersion Client version @return Protocol proxy object
3098 Creates a ProtocolProxy for RPC communication. @param protocol RPC protocol class @param clientVersion Client version @param addr Socket address @param conf Hadoop configuration @return ProtocolProxy instance
3099 Gets a UserGroupMappingProtocol instance using RPC. @return UserGroupMappingProtocol instance
3100 Creates a ZKFCProtocol client using provided configuration and timeout. @param conf Hadoop configuration. @param timeoutMs Connection timeout. @return ZKFCProtocol client.
3101 Retrieves the trash root path for a given path. @param path The path for which to find the trash root. @return Trash root Path object.
3102 Lists trash roots, for current or all users. @param allUsers True to list all users' trash roots.
3103 Constructs a ViewFileSystem instance using default URI and config. @param conf Hadoop configuration object. @throws IOException If an I/O error occurs.
3104 Maps URI and configuration to a FileSystem in the cache. @param uri The URI to map. @param conf Hadoop configuration. @param fs The FileSystem instance.
3105 Gets a FileSystem instance from URI or config. @param uri URI of the filesystem. @param config Hadoop configuration. @return FileSystem instance.
3106 Creates a FileContext with the given filesystem and configuration. @param defFS Default filesystem to use. @param aConf Hadoop configuration object.
3107 Opens an HTTP connection with delegation token support. @param url URL to connect to @param token Token for authentication @return HttpURLConnection object
3108 Performs Kerberos diagnostics scan. Logs system properties, env vars, and config options.
3109 Parses arguments, extracts principal/keytab, and logs in. @param args Command-line arguments. @return Modified arguments array or original if unchanged.
3110 Retrieves and logs UserGroupInformation, potentially from keytab. @param args Command-line arguments, including keytab path.
3111 Logs in a user using a keytab file and principal name. @param conf Hadoop configuration. @param keytabFileKey Keytab file key. @param userNameKey User name key. @param hostname Hostname to mask.
3112 Constructs a Server instance with configured parameters. @param bindAddress Server bind address. @param port Server port.
3113 Creates and sends negotiate message with SASL challenge if enabled. @return Negotiate message containing SASL challenge or original. @throws InterruptedException, SaslException, IOException
3114 Gets a ProtocolProxy using the provided protocol, version, address, and configuration. @param protocol RPC protocol class @param clientVersion Client version @param addr Remote address @param conf Hadoop configuration
3115 Gets a protocol proxy and returns the proxy instance. @param protocol RPC protocol class @param clientVersion Client version @param addr Remote address @param conf Hadoop configuration @param connTimeout Connection timeout @return The proxy object
3116 Adds a resource to the configuration. @param in Input stream for the resource. @param name Resource name.
3117 Gets a protocol proxy. @param protocol Protocol class @param clientVersion Client version @param addr Socket address @param conf Hadoop configuration @return ProtocolProxy instance
3118 Prints user group mappings for specified usernames. @param args Array of usernames to retrieve group mappings for. @return 0
3119 Attempts failover to a target node. @param toNode Target HA service node. @return 0 on success, -1 on failure.
3120 Requests a remote service to cede its active state. @param remote The HAServiceTarget to request. @param timeout Timeout in milliseconds. @return ZKFCProtocol client.
3121 Handles JMX data retrieval based on request parameters. @param request HTTP request containing query parameters. @param response HTTP response to send the JSON data.
3122 Gets a FileSystem instance, potentially bypassing the cache. @param uri File URI @param conf Hadoop configuration @return FileSystem instance
3123 Gets a LocalFileSystem instance using the provided configuration. @param conf Hadoop configuration. @return LocalFileSystem instance.
3124 Gets a FileSystem instance from URI or config. @param uri URI of the filesystem. @param conf Hadoop configuration. @return FileSystem instance.
3125 Creates a FileContext using the provided filesystem. @param defaultFS Default filesystem to use. @return FileContext object.
3126 Creates a FileContext for the default filesystem. @param defaultFsUri URI of the default filesystem. @param aConf Hadoop configuration. @throws UnsupportedFileSystemException
3127 Processes command-line arguments for token operations. Parses arguments, executes commands, and handles files.
3128 Logs in a user using a keytab file and principal. @param conf Hadoop configuration. @param keytabFileKey Keytab file key. @param userNameKey User name key.
3129 Processes incoming SASL messages and generates a response. @param saslMessage Incoming SASL message from the client. @return RpcSaslProto containing the server's SASL response.
3130 Creates and returns a protocol proxy instance. @param protocol RPC protocol class @param clientVersion Client version @param addr Remote address @param conf Hadoop configuration @return Protocol proxy object
3131 Adds a resource to the configuration. @param name Resource name.
3132 Adds a resource to the configuration. @param url The URL of the resource to add.
3133 Adds a resource from a Path object. @param file The Path object representing the resource.
3134 Processes an input stream to load configuration resources. @param in Input stream containing configuration data.
3135 Attempts to become the active service, coordinating via ZooKeeper. Handles failover attempts and throws exceptions on failure.
3136 Obtains a HAServiceProtocol proxy for monitoring. Uses targetToMonitor.m1 to retrieve the proxy.
3137 Retrieves a HAServiceProtocol instance with default retries. @param conf Hadoop configuration. @param timeoutMs Timeout.
3138 Retrieves a HA service protocol. @param conf Hadoop configuration. @param timeoutMs Timeout.
3139 Initializes the HarFileSystem with URI and configuration. @param name URI of the HAR file. @param conf Hadoop configuration object.
3140 Moves a Path to the trash, handling server config and mount points. @param fs FileSystem instance. @param p Path to move to trash. @param conf Hadoop Configuration.
3141 Constructs a PathData object using a file system and path. @param pathString Path string. @param conf Hadoop configuration. @throws IOException if an I/O error occurs.
3142 Gets a FileSystem instance for the given URI and configuration. @param name File system URI as a string. @param conf Hadoop configuration. @return FileSystem instance.
3143 Returns a LocalFileSystem instance using the provided configuration. @param conf Hadoop configuration @return LocalFileSystem instance
3144 Constructs a ChRootedFileSystem with a specified URI and config. @param uri The root URI for the chrooted file system. @param conf Hadoop configuration.
3145 Gets a FileSystem instance using the provided URI and configuration. @param uri File URI @param conf Hadoop configuration @return FileSystem instance
3146 Gets a FileSystem instance, caching or not based on URI scheme. @param uri URI for file system access @param conf Hadoop configuration @return FileSystem instance
3147 Gets a FileSystem instance using the URI and configuration. @param conf Hadoop configuration @return FileSystem instance
3148 Gets a FileSystem instance, using supplied or connecting to FS. @return FileSystem instance @throws MetricsException if URI is invalid or FS connection fails
3149 Retrieves FileStatus array for internal directory entries. Handles fallback statuses & link statuses.
3150 Creates a FileContext for the default filesystem. @param defaultFsUri URI of the default filesystem. @throws UnsupportedFileSystemException
3151 Creates a FileContext for the default filesystem. @param aConf Hadoop configuration @throws UnsupportedFileSystemException
3152 Creates a FileContext for the local filesystem. @param aConf Hadoop configuration. @throws UnsupportedFileSystemException
3153 Constructs a Server instance with configured RPC parameters. @param protocolClass Protocol class to register.
3154 Constructs a Server instance with configured parameters. @param protocolClass Protocol class. Null to derive from impl.
3155 Processes incoming SASL messages and generates a response. @param saslMessage Incoming SASL message from the client.
3156 Finds and loads the latest mount-table configuration. @param mountTableConfigPath Path to the mount table directory. @param conf Hadoop configuration object.
3157 Checks if target nodes are active before transitioning. @param targetNodeToActivate Node to check. @param forceActive Force active transition.
3158 Attempts failover to a target service, handling exceptions. @param from Source service. @param target Target service. @param forceActive Force active even if not ready.
3159 Attempts graceful failover of a service. @param svc The HAServiceTarget to failover. @return True if failover was successful, false otherwise.
3160 Resolves a path, following symlinks until resolved or loop detected. @param filesys FileSystem instance @param path Path to resolve @return Resolved input stream or null if resolution fails
3161 Constructs a PathData object using a local file system and URI path. @param localPath URI representing the path. @param conf Hadoop configuration. @throws IOException if an I/O error occurs.
3162 Copies files/dirs to a destination. @param delSrc Delete source after copy. @param overwrite Overwrite existing files. @param srcs Source paths. @param dst Destination path.
3163 Copies a file or directory from src to dst. @param delSrc Delete source file after copy? @param overwrite Overwrite destination if it exists?
3164 Copies a file or directory. @param delSrc Whether to delete source. @param src Source path. @param dst Destination path. @param useRawLocalFileSystem Use raw local file system.
3165 Creates or retrieves a Context object for file operations. @param conf Hadoop configuration object @return Context object for managing local directories
3166 Finds a valid local directory for a given path. @param dirsProp Comma-separated list of local directories. @param path Path to check for existence. @throws IOException if no valid directory is found.
3167 Gets a FileSystem for the given path, resolving mount points. @param path The path to resolve. @param conf Hadoop configuration. @return FileSystem instance or throws NotInMountpointException.
3168 Resolves a path and returns mount path info. @param path Path to resolve. @param conf Hadoop configuration. @return MountPathInfo containing resolved path and FS.
3169 Globbs a path pattern into an array of PathData objects. @param pattern Glob pattern to apply. @param conf Hadoop configuration. @return Array of PathData objects.
3170 Prints detailed information about a BCFile to the specified output stream. This includes metadata, block sizes, record counts, and compression ratios. The output is formatted with aligned columns for readability. @param out The output stream to write the information to. @param filePath The path to the BCFile.
3171 Reads credentials from a file. @param filename Path to the credentials file. @param conf Hadoop configuration. @return Credentials object.
3172 Resolves libjars from configuration, adds URLs to classpath. @param conf Hadoop configuration @return URLs of libjars or null if not configured.
3173 Creates the base path directory, throwing exception if error. @return True if creation successful, false otherwise.
3174 Creates a FileContext for the local filesystem.
3175 Creates a FileContext for the default filesystem. @throws UnsupportedFileSystemException
3176 Constructs a Server instance with configured RPC parameters. @param protocolClass Protocol class to register
3177 Constructs a Server instance with configured parameters. @param protocolClass Protocol class. Null to derive from impl.
3178 Constructs an SSLFactory with specified mode and configuration. @param mode Client/Server mode. @param conf Hadoop configuration.
3179 Initializes service authorization policies. @param conf Configuration object. @param provider Policy provider.
3180 Attempts failover from one service to another, handles exceptions. @param fromSvc Source service. @param toSvc Target service. @param forceFence Force fencing. @param forceActive Force active.
3181 Initializes the destination PathData object based on arguments. @param args Command-line arguments; used to determine destination. @throws IOException if URI parsing fails or other I/O error occurs.
3182 Copies files/dirs from sources to destination. @param srcs Source paths. @param dst Destination path.
3183 Copies files/dirs to a destination using the underlying FS. @param delSrc Delete source after copy. @param overwrite Overwrite existing files. @param srcs Source paths. @param dst Destination path.
3184 Copies a file or directory. @param delSrc Delete source after copy? @param src Source path @param dst Destination path
3185 Copies a file or directory from src to dst. @param delSrc Delete source? @param overwrite Overwrite dest?
3186 Overloads m1, setting useRawLocalFileSystem to false. @param delSrc Delete source after copy. @param src Source path. @param dst Destination path.
3187 Allocates a file path, selecting a local directory. @param pathStr File path string. @param size Requested file size. @param conf Hadoop configuration. @param checkWrite Whether to check write access.
3188 Finds a file path within configured local directories. @param pathStr File path string to search for. @param conf Hadoop configuration object.
3189 Creates an iterator for paths within a given directory. @param pathStr Directory path string. @param conf Hadoop configuration. @return Iterator of Path objects.
3190 Constructs NflyFSystem with provided URIs, config, and flags. @param uris File system URIs. @param conf Hadoop configuration.
3191 Processes file paths, returning -1 on error. Iterates through arguments, converts to PathData, and calls m4.
3192 Globbs a path pattern into PathData objects. @param arg Path pattern to glob. @throws IOException If the path is not found. @return List of PathData objects.
3193 Determines the destination PathData based on arguments. @param args Command-line arguments; determines destination.
3194 Constructs a Reader using a FileSystem, Path, and Configuration. @param fs FileSystem object; @param file Path to SequenceFile; @param conf Hadoop configuration
3195 Constructs a Reader with an FSDataInputStream, start, and length. @param in Input stream; @param start Start offset; @param length Length.
3196 Creates a SequenceFile reader with specified path and options. @param dataFile Path to the SequenceFile; @param conf Hadoop config @param options Reader options; @return SequenceFile.Reader object
3197 Initializes and reads the next raw key. @return True if a key was read, false otherwise.
3198 Initializes a Writer with given options, creating or appending to a file. @param conf Hadoop configuration @param opts Option objects for file creation/append
3199 Dumps information for TFile(s) specified in the arguments. @param args Command-line arguments, each representing a TFile path.
3200 Writes credentials to a file, using WRITABLE or PROTOBUF format. @param f File to write credentials to. @param format Format of the credentials (WRITABLE or PROTOBUF). @param creds Credentials object to serialize. @param conf Hadoop configuration.
3201 Flushes metrics data, creates new log files if needed. Creates new log files if needed.
3202 Lists paths matching a glob pattern. @param path Glob pattern to match. @param useLocal Whether to use the local filesystem. @return List of Path objects.
3203 Constructs a Server instance with basic configuration. @param protocolClass Protocol class. @param protocolImpl Protocol implementation.
3204 Constructs a Server instance with configured parameters. @param protocolImpl Protocol implementation. @param conf Hadoop configuration.
3205 Processes RPC header, handling authentication and ping requests. @param header RPC request header @param buffer RPC buffer containing request data
3206 Establishes a URL connection, handling HTTPS with SSL/TLS. @param url URL to connect to. Returns URLConnection object.
3207 Copies a file or directory. @param src Source path @param dst Destination path
3208 Copies a file or directory from a local path. @param src Source path. @param dst Destination path.
3209 Copies a file or directory. Deletes source if delSrc is true. @param delSrc Delete source after copy? @param src Source path @param dst Destination path
3210 Copies a file from source to destination path. @param src Source path of the file to copy. @param dst Destination path for the copied file.
3211 Copies a file from source to destination path. @param src Source path. @param dst Destination path.
3212 Copies a file from a source to a destination path. @param delSrc Delete source after copy. @param src Source path. @param dst Destination path.
3213 Allocates a file path using AllocatorPerContext. @param pathStr File path string. @param size Requested file size. @param conf Hadoop configuration. @param checkWrite Whether to check write access.
3214 Creates a file in the allocated directory. @param pathStr File path string. @param size Requested file size. @param conf Hadoop configuration.
3215 Gets a local file path for a given path string. @param pathStr File path string. @param conf Hadoop configuration. @return Path object.
3216 Retrieves read paths for a given directory. @param pathStr Directory path string. @param conf Hadoop configuration. @return Iterable of Path objects.
3217 Constructs NflyFSystem with URIs, config, minReplication, and flags. @param uris File system URIs. @param conf Hadoop configuration.
3218 Creates an NflyFSystem instance with configured flags and replication. @param uris File system URIs. @param conf Hadoop configuration.
3219 Expands path arguments into PathData objects. @param args List of path strings to expand. @return LinkedList of PathData objects.
3220 Fetches/aliases token, writes credentials to file. @param tokenFile File to store credentials. @param alias Token alias, or null if not aliasing.
3221 Updates token credentials, adding/aliasing tokens as needed. @param tokenFile File containing tokens. @param fileFormat File format (WRITABLE or PROTOBUF). @param alias Token alias. @param service Service associated with the token. @param conf Hadoop configuration.
3222 Merges tokens from multiple files into a single Credentials object. @param tokenFiles List of files containing tokens. @param fileFormat Token file format. @param conf Hadoop configuration.
3223 Renews or cancels tokens based on alias, writes updated tokens. @param cancel If true, cancels matching tokens. @param tokenFile File containing tokens. @param fileFormat Token file format. @param alias Token alias. @param conf Hadoop configuration.
3224 Renews tokens matching a given alias and saves updated credentials. @param tokenFile Token file. @param fileFormat File format (WRITABLE or PROTOBUF). @param alias Token alias to match. @param conf Hadoop configuration.
3225 Adds a token to a file, updating credentials if needed. @param tokenFile File to add/update token. @param alias Token alias. @param base64 Base64 encoded token data. @param conf Hadoop configuration.
3226 Lists paths matching a glob pattern. @param path Glob pattern to match.
3227 Constructs a Server instance with basic configuration. @param instance Protocol implementation. @param conf Hadoop configuration. @param bindAddress Binding address. @param port Port number.
3228 Processes an RPC request from a client, handling errors and retries. @param bb ByteBuffer containing the RPC request data
3229 Reads and processes log level data from the given URL. @param urlString URL to fetch log level information from.
3230 Moves a file from a temporary local file to the final file system output. @param fsOutputFile Output path in the file system. @param tmpLocalFile Temporary local file path.
3231 Copies a file or directory, optionally copying checksums. @param src Source path. @param dst Destination path. @param copyCrc Whether to copy checksums.
3232 Allocates a file path. @param pathStr File path string. @param size Requested file size. @param conf Hadoop configuration.
3233 Creates a temporary file for writing. @param pathStr File path string. @param size Requested file size. @param conf Hadoop configuration. @return File object.
3234 Processes command arguments. @param args List of path strings to process. @throws IOException if an I/O error occurs.
3235 Creates a SequenceFile writer based on configured options. @param conf Hadoop configuration. @param opts Writer options. @return SequenceFile writer.
3236 Masks classpath entries and creates a classpath JAR. @param inputClassPath Classpath string to mask. @param pwd Working directory Path. @param targetDir Target directory Path. @param callerEnv Environment variables for masking. @return Array of classpath entries.
3237 Processes file paths, expanding wildcards and resolving URIs. @param files Comma-separated list of file paths. @param expandWildcard Whether to expand wildcard characters.
3238 Processes RPC requests, handling headers and data. Returns count or -1 on error.
3239 Processes incoming data, unwrapping and handling RPC requests.
3240 Processes log level data for a specific class. @param className The class name for which to fetch log level.
3241 Sends log level request to the URL using provided parameters.
3242 Creates a KeyProvider for a given URI and configuration. @param providerUri KMS provider URI. @param conf Hadoop configuration. @return KeyProvider instance or null if scheme is invalid.
3243 Moves a file from a temporary local file to the file system. @param fsOutputFile Output path in the file system. @param tmpLocalFile Temporary local file path.
3244 Creates a temporary file in the configured directory. @param pathStr File path string. @param size Requested file size. @param conf Hadoop configuration. @return File object representing the created temporary file.
3245 Delegates to overloaded method with SIZE_UNKNOWN. @param pathStr File path string. @param conf Hadoop configuration. @return Path object.
3246 Executes command, handles errors, and returns an exit code. @param argv Command-line arguments. @return Exit code based on command execution status.
3247 Constructs a Reader with a file path and Hadoop configuration. @param fs FileSystem instance @param file Path to the file @param conf Hadoop configuration
3248 Constructs a Reader with a FileSystem, directory, and comparator. @param fs FileSystem object @param dirName Directory name
3249 Creates a Reader with a directory path. @param fs FileSystem object @param dirName Directory containing data/index files @param conf Hadoop configuration @throws IOException if an I/O error occurs
3250 Creates a Reader with a comparator. @param fs FileSystem to use. @param dirName Directory containing data/index files. @param comparator WritableComparator for key comparisons. @param conf Hadoop configuration.
3251 Creates a SequenceFile writer with configured options. @param inputFile Input file path; @param outputFile Output file path; @param prog Progressable object.
3252 Fixes a missing index file for a SequenceFile. @param fs FileSystem to operate on. @param dir Directory containing the SequenceFile.
3253 Creates a SequenceFile writer with specified key/value classes. @param fs FileSystem instance. @param conf Hadoop configuration. @param name Output file path. @param keyClass Key class type. @param valClass Value class type. @return SequenceFile writer.
3254 Creates a SequenceFile writer with specified key/value classes & compression. @param fs Filesystem. @param conf Hadoop configuration.
3255 Creates a SequenceFile writer with specified key, value classes, compression, progress. @param fs FileSystem object. @param conf Hadoop configuration. @param name Output file path.
3256 Creates a SequenceFile writer with specified key, value classes, and compression. @param fs FileSystem. @param conf Hadoop configuration.
3257 Creates a SequenceFile writer with specified configurations. @param fs FileSystem, conf Hadoop configuration, name file path.
3258 Creates a SequenceFile writer with specified configurations. @param fs Filesystem to use. @param conf Hadoop configuration. @param name Output file path. @return SequenceFile writer.
3259 Creates a SequenceFile writer with given configuration and options. @param fs Filesystem. @param conf Hadoop configuration.
3260 Creates a SequenceFile writer with specified key, value, compression, and metadata. @param conf Hadoop configuration.
3261 Creates a SequenceFile writer with specified key/value classes & compression. @param conf Hadoop configuration.
3262 Processes file paths, expanding wildcards and resolving URIs. @param files Comma-separated list of file paths.
3263 Processes log level operation based on the 'operation' value. @throws HadoopIllegalArgumentException if operation is invalid.
3264 Creates a DataBlock with a temporary file, limit, index, stats. @param index Block index @param limit Data write limit @param statistics Upload statistics @return DataBlock object
3265 Creates a temporary file path for caching data blocks. @param conf Hadoop configuration. @param localDirAllocator Local directory allocator. @return Path object representing the temporary file.
3266 Executes a command or lists commands based on arguments. @param argv Command-line arguments to process. @return Exit code based on command execution.
3267 Constructs a Reader with a directory path. @param fs FileSystem object @param dirName Directory containing data/index files @param conf Hadoop configuration @throws IOException if an I/O error occurs
3268 Merges sorted segments until a threshold is met. Returns a RawKeyValueIterator for the merged segments.
3269 Creates a Writer with specified Hadoop configuration and compression. @param conf Hadoop configuration. @param dirName Output directory. @param comparator WritableComparator for keys. @param compress SequenceFile compression type.
3270 Constructs a Writer with given config, file system, file, and Writable class. @param conf Hadoop configuration @param fs FileSystem instance @param file File name @param valClass Writable class to write
3271 Constructs a Writer with specified configuration and parameters. @param conf Hadoop configuration, file system, file, class, compression, progress.
3272 Creates a Writer with specified key and value classes. @param conf Hadoop configuration. @param fs Filesystem. @param dirName Directory path. @param keyClass Key class. @param valClass Value class.
3273 Creates a Writer with key, value classes, compression, progress. @param conf Hadoop configuration. @param fs FileSystem to use. @param dirName Directory for the writer.
3274 Creates a Writer with configured key, value classes, compression, and progress. @param conf Hadoop configuration. @param fs Filesystem. @param dirName Output directory.
3275 Creates a Writer with key/value classes and compression. @param conf Hadoop configuration. @param fs Filesystem. @param dirName Output directory. @param keyClass Key class. @param valClass Value class. @param compress Compression type.
3276 Creates a Writer with a comparator and value class. @param conf Hadoop configuration. @param fs FileSystem object. @param dirName Directory name. @param comparator WritableComparator. @param valClass Class of value.
3277 Creates a Writer with specified comparator, value class, and compression. @param conf Hadoop configuration. @param fs Filesystem. @param dirName Directory path. @param comparator WritableComparator. @param valClass Value class. @param compress Compression type.
3278 Creates a Writer with configured options and paths. @param conf Hadoop configuration. @param fs Filesystem. @param dirName Directory path.
3279 Creates a Writer with configured options and paths. @param conf Hadoop configuration. @param fs FileSystem object. @param dirName Directory path.
3280 Creates a SequenceFile writer. @param fc FileContext instance @param conf Hadoop configuration @param name Path to the file @return Writer instance
3281 Processes command-line arguments and handles jar creation. @param args Command-line arguments passed to the application.
3282 Creates a ClassLoader for running the JAR file. Uses Hadoop client classloader if enabled, otherwise uses URLClassLoader. @param file The JAR file to execute. @param workDir Working directory for the JAR file. @return A ClassLoader instance.
3283 Parses command-line options and configures Hadoop settings. @param line CommandLine object containing parsed options
3284 Creates a temporary file path for caching data blocks. @param conf Hadoop configuration. @param localDirAllocator Local directory allocator. @return Path object representing the temporary file.
3285 Checks if enough cache space is available for a file. @param fileSize File size to cache. @param conf Hadoop configuration. @param localDirAllocator Local directory allocator. @return True if cache space is sufficient, false otherwise.
3286 Merges segments using a MergeQueue. @param segments List of SegmentDescriptor objects. @param tmpDir Temporary directory for merging. @return RawKeyValueIterator for merged segments.
3287 Merges input segments into a single sorted sequence. @param inNames Input paths to merge. @param deleteInputs Whether to delete input files after merge. @param factor Merge factor. @param tmpDir Temporary directory for merging. @return RawKeyValueIterator for merged segments.
3288 Merges sorted segments into a single iterator. @param inNames Input file paths. @param tempDir Temporary directory. @return RawKeyValueIterator for merged segments.
3289 Merges sorted segments into a single iterator. @param inName Input path @param indexIn Index path @param tmpDir Temporary directory @return RawKeyValueIterator for merged segments
3290 Creates a Writer with specified Hadoop configuration and compression. @param conf Hadoop configuration @param fs FileSystem @param dirName Output directory @param keyClass Key class @param compress SequenceFile compression type
3291 Creates a Writer with specified key class. @param fs Filesystem. @param dirName Directory path. @param keyClass Key class.
3292 Merges input MapFiles into a single output MapFile, optionally deleting inputs. @param inMapFiles Array of input MapFile paths. @param deleteInputs Flag to delete input files after merge. @param outMapFile Path for the merged output MapFile.
3293 Creates a SequenceFile writer with specified parameters. @param fs Filesystem instance @param conf Hadoop configuration @return Writer instance
3294 Parses command-line options, handles parsing errors, and sets up the CommandLine object. @param opts Options object to parse. @param args Command-line arguments. @return True if parsing was successful, false otherwise.
3295 Adds a data block to the cache, potentially creating a temp file. @param blockNumber Block number to cache. @param buffer Data buffer to write. @param conf Hadoop configuration.
3296 Merges input segments. @param inNames Input paths to merge. @param deleteInputs Delete inputs after merge. @param tmpDir Temporary directory.
3297 Performs a merge pass, writing sorted data to the output file. @param tmpDir Temporary directory for merging.
3298 Executes a JAR file with provided command-line arguments. @param args Command-line arguments: jarFile, mainClass (optional), args...
3299 Initializes the parser with configuration, options, and arguments. @param conf Hadoop configuration. @param options Options to parse. @param args Command-line arguments.
3300 Creates a RawKeyValueIterator based on input files. @param inFiles Input file paths. @param tempDir Temporary directory. @param deleteInput Delete input files after merge.
3301 Merges input files into a single SequenceFile. @param inFiles Input file paths to merge. @param outFile Output SequenceFile path.
3302 Merges sorted input files into a single output file. @param inFiles Array of input file paths. @param outFile Output file path. @param deleteInput Whether to delete input files after merging.
3303 Constructs a GenericOptionsParser with a default Hadoop configuration. @param opts Options to parse. @param args Command-line arguments.
3304 Constructs a GenericOptionsParser with default configuration and options. @param args Command-line arguments to parse.
3305 Initializes the parser with configuration and arguments. @param conf Hadoop configuration. @param args Command-line arguments.
3306 Merges a single input file into an output file. @param inFile Input file path. @param outFile Output file path.
3307 Parses command-line arguments using MinimalGenericOptionsParser. @param conf Hadoop configuration. @param argArray Command-line arguments. @return GenericOptionsParser instance.
3308 Executes a Hadoop tool with provided configuration and arguments. @param conf Hadoop configuration. @param tool Tool to execute. @param args Command-line arguments.
3309 Constructs command-line string, parses arguments, & returns remaining args. @param conf Hadoop configuration. @param args Command-line arguments.
3310 Executes KDiag tool with configuration and arguments. @param conf Hadoop configuration. @param argv Command-line arguments. @return Exit status of the tool.
3311 Executes the CredentialShell tool with provided arguments. @param args Command-line arguments for the tool.
3312 Executes the KeyShell tool with provided arguments. @param args Command-line arguments passed to the tool.
3313 Executes a Hadoop tool using its configuration and arguments. @param tool Tool to execute. @param args Command-line arguments. @return Exit code of the tool.
3314 Extracts core arguments from the input list. @param conf Hadoop configuration. @param args Command-line arguments. @return List of core arguments.
3315 Runs KDiag tool with configuration and arguments. @param argv Command-line arguments.
3316 Executes Hadoop file system commands from command-line arguments. @param argv Command-line arguments for the file system operation.
3317 Executes the CLI tool with provided arguments and prints exit code. @param args Command-line arguments for the CLI tool.
3318 Runs the FindClass tool with provided arguments. @param args Command-line arguments for the tool.
3319 Processes command-line arguments, configures services, and exits. @param args Command-line arguments to process.
3320 Launches a service or displays usage based on arguments. @param args Command-line arguments passed to the service.
3321 Delegates argument processing to m1. @param args Command-line arguments to be processed.
